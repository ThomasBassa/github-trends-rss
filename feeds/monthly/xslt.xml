<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>GitHub Trending: XSLT, This month</title><link>https://github.com/trending/xslt?since=monthly</link><description>The top repositories on GitHub for xslt, measured monthly</description><pubDate>Wed, 30 Oct 2019 00:04:42 GMT</pubDate><lastBuildDate>Wed, 30 Oct 2019 00:04:42 GMT</lastBuildDate><generator>PyRSS2Gen-1.1.0</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><ttl>1400</ttl><item><title>emilybache/GildedRose-Refactoring-Kata #1 in XSLT, This month</title><link>https://github.com/emilybache/GildedRose-Refactoring-Kata</link><description>&lt;p&gt;&lt;i&gt;Starting code for the GildedRose Refactoring Kata in many programming languages.&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-gilded-rose-refactoring-kata" class="anchor" aria-hidden="true" href="#gilded-rose-refactoring-kata"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Gilded Rose Refactoring Kata&lt;/h1&gt;
&lt;p&gt;This Kata was originally created by Terry Hughes (&lt;a href="http://twitter.com/TerryHughes" rel="nofollow"&gt;http://twitter.com/TerryHughes&lt;/a&gt;). It is already on GitHub &lt;a href="https://github.com/NotMyself/GildedRose"&gt;here&lt;/a&gt;. See also &lt;a href="http://iamnotmyself.com/2011/02/13/refactor-this-the-gilded-rose-kata/" rel="nofollow"&gt;Bobby Johnson's description of the kata&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I translated the original C# into a few other languages, (with a little help from my friends!), and slightly changed the starting position. This means I've actually done a small amount of refactoring already compared with the original form of the kata, and made it easier to get going with writing tests by giving you one failing unit test to start with. I also added test fixtures for Text-Based approval testing with TextTest (see &lt;a href="https://github.com/emilybache/GildedRose-Refactoring-Kata/tree/master/texttests"&gt;the TextTests&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;As Bobby Johnson points out in his article &lt;a href="http://iamnotmyself.com/2012/12/07/why-most-solutions-to-gilded-rose-miss-the-bigger-picture" rel="nofollow"&gt;"Why Most Solutions to Gilded Rose Miss The Bigger Picture"&lt;/a&gt;, it'll actually give you
better practice at handling a legacy code situation if you do this Kata in the original C#. However, I think this kata
is also really useful for practicing writing good tests using different frameworks and approaches, and the small changes I've made help with that. I think it's also interesting to compare what the refactored code and tests look like in different programming languages.&lt;/p&gt;
&lt;p&gt;I wrote this article &lt;a href="http://coding-is-like-cooking.info/2013/03/writing-good-tests-for-the-gilded-rose-kata/" rel="nofollow"&gt;"Writing Good Tests for the Gilded Rose Kata"&lt;/a&gt; about how you could use this kata in a &lt;a href="https://leanpub.com/codingdojohandbook" rel="nofollow"&gt;coding dojo&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-how-to-use-this-kata" class="anchor" aria-hidden="true" href="#how-to-use-this-kata"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;How to use this Kata&lt;/h2&gt;
&lt;p&gt;The simplest way is to just clone the code and start hacking away improving the design. You'll want to look at the &lt;a href="https://github.com/emilybache/GildedRose-Refactoring-Kata/tree/master/GildedRoseRequirements.txt"&gt;"Gilded Rose Requirements"&lt;/a&gt; which explains what the code is for. I strongly advise you that you'll also need some tests if you want to make sure you don't break the code while you refactor.&lt;/p&gt;
&lt;p&gt;You could write some unit tests yourself, using the requirements to identify suitable test cases. I've provided a failing unit test in a popular test framework as a starting point for most languages.&lt;/p&gt;
&lt;p&gt;Alternatively, use the "Text-Based" tests provided in this repository. (Read more about that in the next section)&lt;/p&gt;
&lt;p&gt;Whichever testing approach you choose, the idea of the exercise is to do some deliberate practice, and improve your skills at designing test cases and refactoring. The idea is not to re-write the code from scratch, but rather to practice designing tests, taking small steps, running the tests often, and incrementally improving the design.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-text-based-approval-testing" class="anchor" aria-hidden="true" href="#text-based-approval-testing"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Text-Based Approval Testing&lt;/h2&gt;
&lt;p&gt;This is a testing approach which is very useful when refactoring legacy code. Before you change the code, you run it, and gather the output of the code as a plain text file. You review the text, and if it correctly describes the behaviour as you understand it, you can "approve" it, and save it as a "Golden Master". Then after you change the code, you run it again, and compare the new output against the Golden Master. Any differences, and the test fails.&lt;/p&gt;
&lt;p&gt;It's basically the same idea as "assertEquals(expected, actual)" in a unit test, except the text you are comparing is typically much longer, and the "expected" value is saved from actual output, rather than being defined in advance.&lt;/p&gt;
&lt;p&gt;Typically a piece of legacy code may not produce suitable textual output from the start, so you may need to modify it before you can write your first text-based approval test. That could involve inserting log statements into the code, or just writing a "main" method that executes the code and prints out what the result is afterwards. It's this latter approach we are using here to test GildedRose.&lt;/p&gt;
&lt;p&gt;The Text-Based tests in this repository are designed to be used with the tool "TextTest" (&lt;a href="http://texttest.org" rel="nofollow"&gt;http://texttest.org&lt;/a&gt;). This tool helps you to organize and run text-based tests. There is more information in the README file in the "texttests" subdirectory.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-get-going-quickly-using-cyber-dojo" class="anchor" aria-hidden="true" href="#get-going-quickly-using-cyber-dojo"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Get going quickly using Cyber-Dojo&lt;/h2&gt;
&lt;p&gt;I've also set this kata up on &lt;a href="http://cyber-dojo.org" rel="nofollow"&gt;cyber-dojo&lt;/a&gt; for several languages, so you can get going really quickly:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://cyber-dojo.org/forker/fork/751DD02C4C?avatar=snake&amp;amp;tag=8" rel="nofollow"&gt;JUnit, Java&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://cyber-dojo.org/forker/fork/5C5AC766B0?avatar=koala&amp;amp;tag=3" rel="nofollow"&gt;C#&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://cyber-dojo.org/forker/fork/AA86ECBCC9?avatar=rhino&amp;amp;tag=7" rel="nofollow"&gt;C++&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://cyber-dojo.org/forker/fork/A8943EAF92?avatar=hippo&amp;amp;tag=9" rel="nofollow"&gt;Ruby&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://cyber-dojo.org/forker/fork/8E58B0AD16?avatar=raccoon&amp;amp;tag=3" rel="nofollow"&gt;RSpec, Ruby&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://cyber-dojo.org/forker/fork/297041AA7A?avatar=lion&amp;amp;tag=4" rel="nofollow"&gt;Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://cyber-dojo.org/forker/fork/0F82D4BA89?avatar=gorilla&amp;amp;tag=48" rel="nofollow"&gt;Cucumber, Java&lt;/a&gt; - for this one I've also written some step definitions for you&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-better-code-hub" class="anchor" aria-hidden="true" href="#better-code-hub"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Better Code Hub&lt;/h2&gt;
&lt;p&gt;I analysed this repo according to the clean code standards on &lt;a href="https://bettercodehub.com" rel="nofollow"&gt;Better Code Hub&lt;/a&gt; just to get an independent opinion of how bad the code is. Perhaps unsurprisingly, the compliance score is low!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://bettercodehub.com/" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/0a4686f58f715ca865ea2c3ffd91371fc2b8312d/68747470733a2f2f626574746572636f64656875622e636f6d2f656467652f62616467652f656d696c7962616368652f47696c646564526f73652d5265666163746f72696e672d4b6174613f6272616e63683d6d6173746572" alt="BCH compliance" data-canonical-src="https://bettercodehub.com/edge/badge/emilybache/GildedRose-Refactoring-Kata?branch=master" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>emilybache</author><guid isPermaLink="false">https://github.com/emilybache/GildedRose-Refactoring-Kata</guid><pubDate>Wed, 30 Oct 2019 00:00:00 GMT</pubDate></item><item><title>LOLBAS-Project/LOLBAS #2 in XSLT, This month</title><link>https://github.com/LOLBAS-Project/LOLBAS</link><description>&lt;p&gt;&lt;i&gt;Living Off The Land Binaries And Scripts - (LOLBins and LOLScripts)&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-living-off-the-land-binaries-and-scripts-and-now-also-libraries" class="anchor" aria-hidden="true" href="#living-off-the-land-binaries-and-scripts-and-now-also-libraries"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Living Off The Land Binaries and Scripts (and now also Libraries)&lt;/h1&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://github.com/api0cradle/LOLBAS/raw/master/Logo/LOLBAS.png"&gt;&lt;img src="https://github.com/api0cradle/LOLBAS/raw/master/Logo/LOLBAS.png" height="250" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;All the different files can be found behind a fancy frontend here: &lt;a href="https://lolbas-project.github.io" rel="nofollow"&gt;https://lolbas-project.github.io&lt;/a&gt; (thanks @ConsciousHacker for this bit of eyecandy and the team over at &lt;a href="https://gtfobins.github.io/" rel="nofollow"&gt;https://gtfobins.github.io/&lt;/a&gt;).
This repo serves as a place where we maintain the YML files that are used by the fancy frontend.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-goal" class="anchor" aria-hidden="true" href="#goal"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Goal&lt;/h2&gt;
&lt;p&gt;The goal of the LOLBAS project is to document every binary, script, and library that can be used for Living Off The Land techniques.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-criteria" class="anchor" aria-hidden="true" href="#criteria"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Criteria&lt;/h2&gt;
&lt;p&gt;A LOLBin/Lib/Script must:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Be a Microsoft-signed file, either native to the OS or downloaded from Microsoft.&lt;/li&gt;
&lt;li&gt;Have extra "unexpected" functionality. It is not interesting to document intended use cases.
&lt;ul&gt;
&lt;li&gt;Exceptions are application whitelisting bypasses&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Have functionality that would be useful to an APT or red team&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Interesting functionality can include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Executing code
&lt;ul&gt;
&lt;li&gt;Arbitrary code execution&lt;/li&gt;
&lt;li&gt;Pass-through execution of other programs (unsigned) or scripts (via a LOLBin)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Compiling code&lt;/li&gt;
&lt;li&gt;File operations
&lt;ul&gt;
&lt;li&gt;Downloading&lt;/li&gt;
&lt;li&gt;Upload&lt;/li&gt;
&lt;li&gt;Copy&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Persistence
&lt;ul&gt;
&lt;li&gt;Pass-through persistence utilizing existing LOLBin&lt;/li&gt;
&lt;li&gt;Persistence (e.g. hide data in ADS, execute at logon)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;UAC bypass&lt;/li&gt;
&lt;li&gt;Credential theft&lt;/li&gt;
&lt;li&gt;Dumping process memory&lt;/li&gt;
&lt;li&gt;Surveillance (e.g. keylogger, network trace)&lt;/li&gt;
&lt;li&gt;Log evasion/modification&lt;/li&gt;
&lt;li&gt;DLL side-loading/hijacking without being relocated elsewhere in the filesystem.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-contributing" class="anchor" aria-hidden="true" href="#contributing"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contributing&lt;/h2&gt;
&lt;p&gt;If you have found a new LOLBin or LOLScript that you would like to contribute, please review the contributing guidelines located here: &lt;a href="https://github.com/LOLBAS-Project/LOLBAS/blob/master/CONTRIBUTING.md"&gt;https://github.com/LOLBAS-Project/LOLBAS/blob/master/CONTRIBUTING.md&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A template for the required format has been provided here: &lt;a href="https://github.com/LOLBAS-Project/LOLBAS/blob/master/YML-Template.yml"&gt;https://github.com/LOLBAS-Project/LOLBAS/blob/master/YML-Template.yml&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-the-history-of-the-lolbin" class="anchor" aria-hidden="true" href="#the-history-of-the-lolbin"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;The History of the LOLBin&lt;/h2&gt;
&lt;p&gt;The phrase "Living off the land" was coined by Christopher Campbell (@obscuresec) &amp;amp; Matt Graeber (@mattifestation) at &lt;a href="https://www.youtube.com/watch?v=j-r6UonEkUw" rel="nofollow"&gt;DerbyCon 3&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The term LOLBins came from a Twitter discussion on what to call binaries that can be used by an attacker to perform actions beyond their original purpose. Philip Goh (@MathCasualty) &lt;a href="https://twitter.com/MathCasualty/status/969174982579273728" rel="nofollow"&gt;proposed LOLBins&lt;/a&gt;. A highly scientific internet poll ensued, and after a general consensus (69%) was reached, the name was &lt;a href="https://twitter.com/Oddvarmoe/status/985432848961343488" rel="nofollow"&gt;made official&lt;/a&gt;. Jimmy (@bohops) &lt;a href="https://twitter.com/bohops/status/984828803120881665" rel="nofollow"&gt;followed up with LOLScripts&lt;/a&gt;. No poll was taken.&lt;/p&gt;
&lt;p&gt;Common hashtags for these files are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;#LOLBin&lt;/li&gt;
&lt;li&gt;#LOLBins&lt;/li&gt;
&lt;li&gt;#LOLScript&lt;/li&gt;
&lt;li&gt;#LOLScripts&lt;/li&gt;
&lt;li&gt;#LOLLib&lt;/li&gt;
&lt;li&gt;#LOLLibs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Our primary maintainer (@oddvarmoe) of this project did a talk at DerbyCon 2018 called: #Lolbins Nothing to LOL about! - &lt;a href="https://www.youtube.com/watch?v=NiYTdmZ8GR4" rel="nofollow"&gt;https://www.youtube.com/watch?v=NiYTdmZ8GR4&lt;/a&gt;
This talk goes over the history of this project.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-thanks" class="anchor" aria-hidden="true" href="#thanks"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Thanks&lt;/h2&gt;
&lt;p&gt;As with many open-source projects, this one is the product of a community and we would like to thank ours:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The domain &lt;a href="http://lolbins.com" rel="nofollow"&gt;http://lolbins.com&lt;/a&gt; has been registered by an unknown individual and redirected it to the old version of this project.&lt;/li&gt;
&lt;li&gt;The domain &lt;a href="http://lolbas-project.com" rel="nofollow"&gt;http://lolbas-project.com&lt;/a&gt; has been registered by Jimmy (@bohops).&lt;/li&gt;
&lt;li&gt;The logos for the project were created by Adam Nadrowski (@_sup_mane). We #@&amp;amp;!!@#! love them.&lt;/li&gt;
&lt;/ul&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>LOLBAS-Project</author><guid isPermaLink="false">https://github.com/LOLBAS-Project/LOLBAS</guid><pubDate>Wed, 30 Oct 2019 00:00:00 GMT</pubDate></item></channel></rss>