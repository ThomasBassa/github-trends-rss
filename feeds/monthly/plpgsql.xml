<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>GitHub Trending: PLpgSQL, This month</title><link>https://github.com/trending/plpgsql?since=monthly</link><description>The top repositories on GitHub for plpgsql, measured monthly</description><pubDate>Sat, 01 Feb 2020 01:11:32 GMT</pubDate><lastBuildDate>Sat, 01 Feb 2020 01:11:32 GMT</lastBuildDate><generator>PyRSS2Gen-1.1.0</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><ttl>720</ttl><item><title>aneasystone/mysql-deadlocks #1 in PLpgSQL, This month</title><link>https://github.com/aneasystone/mysql-deadlocks</link><description>&lt;p&gt;&lt;i&gt;收集一些常见的 MySQL 死锁案例&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-mysql-deadlocks" class="anchor" aria-hidden="true" href="#mysql-deadlocks"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;mysql-deadlocks&lt;/h1&gt;
&lt;p&gt;在工作过程中偶尔会遇到死锁问题，虽然这种问题遇到的概率不大，但每次遇到的时候要想彻底弄懂其原理并找到解决方案却并不容易。这个项目收集了一些常见的 MySQL 死锁案例，大多数案例都来源于网络，并对其进行分类汇总，试图通过死锁日志分析出每种死锁的原因，还原出死锁现场。&lt;/p&gt;
&lt;p&gt;实际上，我们在定位死锁问题时，不仅应该对死锁日志进行分析，还应该结合具体的业务代码，或者根据 binlog，理出每个事务执行的 SQL 语句。&lt;/p&gt;
&lt;p&gt;我将这些死锁按事务执行的语句和正在等待或已持有的锁进行分类汇总：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;事务一语句&lt;/th&gt;
&lt;th&gt;事务二语句&lt;/th&gt;
&lt;th&gt;事务一等待锁&lt;/th&gt;
&lt;th&gt;事务二等待锁&lt;/th&gt;
&lt;th&gt;事务二持有锁&lt;/th&gt;
&lt;th&gt;案例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;insert&lt;/td&gt;
&lt;td&gt;insert&lt;/td&gt;
&lt;td&gt;lock_mode X insert intention&lt;/td&gt;
&lt;td&gt;lock_mode X insert intention&lt;/td&gt;
&lt;td&gt;lock_mode X&lt;/td&gt;
&lt;td&gt;&lt;a href="/1.md"&gt;1&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;insert&lt;/td&gt;
&lt;td&gt;insert&lt;/td&gt;
&lt;td&gt;lock_mode X locks gap before rec insert intention&lt;/td&gt;
&lt;td&gt;lock_mode X locks gap before rec insert intention&lt;/td&gt;
&lt;td&gt;lock_mode X locks gap before rec&lt;/td&gt;
&lt;td&gt;&lt;a href="/14.md"&gt;14&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;insert&lt;/td&gt;
&lt;td&gt;insert&lt;/td&gt;
&lt;td&gt;lock_mode X insert intention&lt;/td&gt;
&lt;td&gt;lock_mode X insert intention&lt;/td&gt;
&lt;td&gt;lock_mode S&lt;/td&gt;
&lt;td&gt;&lt;a href="/2.md"&gt;2&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;insert&lt;/td&gt;
&lt;td&gt;insert&lt;/td&gt;
&lt;td&gt;lock mode S&lt;/td&gt;
&lt;td&gt;lock_mode X locks gap before rec insert intention&lt;/td&gt;
&lt;td&gt;lock_mode X locks rec but not gap&lt;/td&gt;
&lt;td&gt;&lt;a href="/15.md"&gt;15&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;delete&lt;/td&gt;
&lt;td&gt;insert&lt;/td&gt;
&lt;td&gt;lock_mode X locks rec but not gap&lt;/td&gt;
&lt;td&gt;lock mode S&lt;/td&gt;
&lt;td&gt;lock_mode X locks rec but not gap&lt;/td&gt;
&lt;td&gt;&lt;a href="/18.md"&gt;18&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;delete&lt;/td&gt;
&lt;td&gt;delete&lt;/td&gt;
&lt;td&gt;lock_mode X&lt;/td&gt;
&lt;td&gt;lock mode S&lt;/td&gt;
&lt;td&gt;lock_mode X locks rec but not gap&lt;/td&gt;
&lt;td&gt;&lt;a href="/4.md"&gt;4&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;delete&lt;/td&gt;
&lt;td&gt;delete&lt;/td&gt;
&lt;td&gt;lock_mode X&lt;/td&gt;
&lt;td&gt;lock mode X&lt;/td&gt;
&lt;td&gt;lock_mode X locks rec but not gap&lt;/td&gt;
&lt;td&gt;&lt;a href="/6.md"&gt;6&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;delete&lt;/td&gt;
&lt;td&gt;delete&lt;/td&gt;
&lt;td&gt;lock_mode X locks rec but not gap&lt;/td&gt;
&lt;td&gt;lock_mode X&lt;/td&gt;
&lt;td&gt;lock_mode X&lt;/td&gt;
&lt;td&gt;&lt;a href="/3.md"&gt;3&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;delete&lt;/td&gt;
&lt;td&gt;delete&lt;/td&gt;
&lt;td&gt;lock_mode X locks rec but not gap&lt;/td&gt;
&lt;td&gt;lock mode X&lt;/td&gt;
&lt;td&gt;lock_mode X locks rec but not gap&lt;/td&gt;
&lt;td&gt;&lt;a href="/7.md"&gt;7&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;delete&lt;/td&gt;
&lt;td&gt;delete&lt;/td&gt;
&lt;td&gt;lock_mode X locks rec but not gap&lt;/td&gt;
&lt;td&gt;lock_mode X locks rec but not gap&lt;/td&gt;
&lt;td&gt;lock_mode X locks rec but not gap&lt;/td&gt;
&lt;td&gt;&lt;a href="/8.md"&gt;8&lt;/a&gt;,&lt;a href="/9.md"&gt;9&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;delete&lt;/td&gt;
&lt;td&gt;insert&lt;/td&gt;
&lt;td&gt;lock_mode X&lt;/td&gt;
&lt;td&gt;lock_mode X locks gap before rec insert intention&lt;/td&gt;
&lt;td&gt;lock_mode X locks rec but not gap&lt;/td&gt;
&lt;td&gt;&lt;a href="/5.md"&gt;5&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;delete&lt;/td&gt;
&lt;td&gt;insert&lt;/td&gt;
&lt;td&gt;lock_mode X&lt;/td&gt;
&lt;td&gt;lock_mode X locks gap before rec insert intention&lt;/td&gt;
&lt;td&gt;lock_mode S&lt;/td&gt;
&lt;td&gt;&lt;a href="/10.md"&gt;10&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;delete&lt;/td&gt;
&lt;td&gt;insert&lt;/td&gt;
&lt;td&gt;lock_mode X&lt;/td&gt;
&lt;td&gt;lock_mode X locks gap before rec insert intention&lt;/td&gt;
&lt;td&gt;lock_mode X&lt;/td&gt;
&lt;td&gt;&lt;a href="/12.md"&gt;12&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;delete&lt;/td&gt;
&lt;td&gt;insert&lt;/td&gt;
&lt;td&gt;lock_mode X&lt;/td&gt;
&lt;td&gt;lock mode S&lt;/td&gt;
&lt;td&gt;lock_mode X locks rec but not gap&lt;/td&gt;
&lt;td&gt;&lt;a href="/13.md"&gt;13&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;update&lt;/td&gt;
&lt;td&gt;update&lt;/td&gt;
&lt;td&gt;lock_mode X locks rec but not gap&lt;/td&gt;
&lt;td&gt;lock mode S&lt;/td&gt;
&lt;td&gt;lock_mode X locks rec but not gap&lt;/td&gt;
&lt;td&gt;&lt;a href="/11.md"&gt;11&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;update&lt;/td&gt;
&lt;td&gt;update&lt;/td&gt;
&lt;td&gt;lock_mode X&lt;/td&gt;
&lt;td&gt;lock_mode X locks gap before rec insert intention&lt;/td&gt;
&lt;td&gt;lock_mode X locks rec but not gap&lt;/td&gt;
&lt;td&gt;&lt;a href="/16.md"&gt;16&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;update&lt;/td&gt;
&lt;td&gt;update&lt;/td&gt;
&lt;td&gt;lock_mode X locks gap before rec insert intention&lt;/td&gt;
&lt;td&gt;lock_mode X locks gap before rec insert intention&lt;/td&gt;
&lt;td&gt;lock_mode X&lt;/td&gt;
&lt;td&gt;&lt;a href="/17.md"&gt;17&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;update&lt;/td&gt;
&lt;td&gt;delete&lt;/td&gt;
&lt;td&gt;lock_mode X locks rec but not gap&lt;/td&gt;
&lt;td&gt;lock_mode X&lt;/td&gt;
&lt;td&gt;lock mode S&lt;/td&gt;
&lt;td&gt;&lt;a href="/19.md"&gt;19&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;update&lt;/td&gt;
&lt;td&gt;update&lt;/td&gt;
&lt;td&gt;lock_mode X locks rec but not gap waiting&lt;/td&gt;
&lt;td&gt;lock_mode X locks rec but not gap waiting&lt;/td&gt;
&lt;td&gt;lock_mode X locks rec but not gap&lt;/td&gt;
&lt;td&gt;&lt;a href="/20.md"&gt;20&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;表中的语句虽然大多数只列出了 delete 和 insert，但实际上绝大多数的 delete 语句和 update 或 select ... for update 加锁机制是一样的，所以为了避免重复，对于 update 语句就不在一起汇总了（当然也有例外，譬如使用 update 对索引进行更新时加锁机制和 delete 是有区别的，这种情况我会单独列出，如案例 11）。&lt;/p&gt;
&lt;p&gt;对每一个死锁场景，我都会定义一个死锁名称（实际上就是事务等待和持有的锁），每一篇分析，我都分成了 死锁特征、死锁日志、表结构、重现步骤、分析和参考 这几个部分。&lt;/p&gt;
&lt;p&gt;对于这种分类方法我感觉并不是很好，但也想不出什么其他更好的方案，如果你有更好的建议，欢迎讨论。另外，如果你有新的死锁案例，或者对某个死锁的解释有异议，欢迎给我提 Issue 或 PR。&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-死锁分析" class="anchor" aria-hidden="true" href="#死锁分析"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;死锁分析&lt;/h2&gt;
&lt;p&gt;之前写过关于死锁的一系列博客，供参考。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.aneasystone.com/archives/2017/10/solving-dead-locks-one.html" rel="nofollow"&gt;解决死锁之路 - 学习事务与隔离级别&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.aneasystone.com/archives/2017/11/solving-dead-locks-two.html" rel="nofollow"&gt;解决死锁之路 - 了解常见的锁类型&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.aneasystone.com/archives/2017/12/solving-dead-locks-three.html" rel="nofollow"&gt;解决死锁之路 - 常见 SQL 语句的加锁分析&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.aneasystone.com/archives/2018/04/solving-dead-locks-four.html" rel="nofollow"&gt;解决死锁之路（终结篇） - 再见死锁&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.aneasystone.com/archives/2018/06/insert-locks-via-mysql-source-code.html" rel="nofollow"&gt;读 MySQL 源码再看 INSERT 加锁流程&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-死锁重现" class="anchor" aria-hidden="true" href="#死锁重现"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;死锁重现&lt;/h2&gt;
&lt;p&gt;docker 目录下包含了各个死锁重现的测试脚本，测试步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建数据库和初始数据&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;# cd docker
# docker-compose up -d
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;确保机器上安装了 docker 和 docker-compose，上面的命令会启动一个 mysql:5.7 的容器，并创建一个名为 dldb 的数据库，初始密码为 123456，并通过 &lt;code&gt;docker-entrypoint-initdb.d&lt;/code&gt; 初始化所有案例所需要的表和数据。&lt;/p&gt;
&lt;ol start="2"&gt;
&lt;li&gt;等待容器启动结束&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;# docker logs -f dldb
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;使用 &lt;code&gt;dockere logs&lt;/code&gt; 查看容器启动日志，如果出现数据初始化完成的提示，如下所示，则进入下一步。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;MySQL init process in progress...
Warning: Unable to load '/usr/share/zoneinfo/iso3166.tab' as time zone. Skipping it.
Warning: Unable to load '/usr/share/zoneinfo/leap-seconds.list' as time zone. Skipping it.
Warning: Unable to load '/usr/share/zoneinfo/zone.tab' as time zone. Skipping it.
Warning: Unable to load '/usr/share/zoneinfo/zone1970.tab' as time zone. Skipping it.

/usr/local/bin/docker-entrypoint.sh: running /docker-entrypoint-initdb.d/t16.sql
mysql: [Warning] Using a password on the command line interface can be insecure.

/usr/local/bin/docker-entrypoint.sh: running /docker-entrypoint-initdb.d/t18.sql
mysql: [Warning] Using a password on the command line interface can be insecure.

/usr/local/bin/docker-entrypoint.sh: running /docker-entrypoint-initdb.d/t8.sql
mysql: [Warning] Using a password on the command line interface can be insecure.

MySQL init process done. Ready for start up.
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start="3"&gt;
&lt;li&gt;进入容器执行测试脚本&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;首先进入容器：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# docker exec -it dldb bash
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后执行测试脚本，测试脚本在每一个案例对应的 SQL 文件中，比如案例 18 对应的测试脚本如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# mysqlslap --create-schema dldb -q "begin; delete from t18 where id = 4; insert into t18 (id) values (4); rollback;" --number-of-queries=100000 -uroot -p123456 &amp;amp;
# mysqlslap --create-schema dldb -q "begin; delete from t18 where id = 4; rollback;" --number-of-queries=100000 -uroot -p123456 &amp;amp;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;测试脚本通过 &lt;code&gt;mysqlslap&lt;/code&gt; 工具并发执行两个事务，每个事务执行 N 次（N = 100000），如果两个事务会出现死锁，则我们可以通过死锁日志看到。&lt;/p&gt;
&lt;ol start="4"&gt;
&lt;li&gt;检查是否出现死锁日志&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;# tail -f /var/log/mysql/error.log
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;a id="user-content-todo" class="anchor" aria-hidden="true" href="#todo"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TODO&lt;/h2&gt;
&lt;ul class="contains-task-list"&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox"&gt; 重现案例 1&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox"&gt; 重现案例 2&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox"&gt; 重现案例 3&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox"&gt; 重现案例 4&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox"&gt; 重现案例 5&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox"&gt; 重现案例 6&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox"&gt; 重现案例 7&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; 重现案例 8&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox"&gt; 重现案例 9&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox"&gt; 重现案例 10&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox"&gt; 重现案例 11&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox"&gt; 重现案例 12&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox"&gt; 重现案例 13&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox"&gt; 重现案例 14&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox"&gt; 重现案例 15&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; 重现案例 16&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox"&gt; 重现案例 17&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; 重现案例 18&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox"&gt; 重现案例 19&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox"&gt; 重现案例 20&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox"&gt; 由于相同的测试脚本在并发的时候可能产生不同的死锁，后续可以写个脚本来解析 error.log 看看发生了多少次死锁&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox"&gt; 使用 mysqlslap 测试不太方面，后续可以写个脚本来模拟并发事务&lt;/li&gt;
&lt;/ul&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>aneasystone</author><guid isPermaLink="false">https://github.com/aneasystone/mysql-deadlocks</guid><pubDate>Sat, 01 Feb 2020 00:01:00 GMT</pubDate></item></channel></rss>