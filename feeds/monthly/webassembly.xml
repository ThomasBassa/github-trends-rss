<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>GitHub Trending: WebAssembly, This month</title><link>https://github.com/trending/webassembly?since=monthly</link><description>The top repositories on GitHub for webassembly, measured monthly</description><pubDate>Wed, 25 Dec 2019 01:07:01 GMT</pubDate><lastBuildDate>Wed, 25 Dec 2019 01:07:01 GMT</lastBuildDate><generator>PyRSS2Gen-1.1.0</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><ttl>720</ttl><item><title>AssemblyScript/assemblyscript #1 in WebAssembly, This month</title><link>https://github.com/AssemblyScript/assemblyscript</link><description>&lt;p&gt;&lt;i&gt;Definitely not a TypeScript to WebAssembly compiler ðŸš€&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content--assemblyscript" class="anchor" aria-hidden="true" href="#-assemblyscript"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://avatars1.githubusercontent.com/u/28916798?s=64"&gt;&lt;img src="https://avatars1.githubusercontent.com/u/28916798?s=64" alt="" style="max-width:100%;"&gt;&lt;/a&gt; AssemblyScript&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/AssemblyScript/assemblyscript/actions"&gt;&lt;img src="https://github.com/AssemblyScript/assemblyscript/workflows/CI/badge.svg" alt="Actions Status" style="max-width:100%;"&gt;&lt;/a&gt; &lt;a href="https://www.npmjs.com/package/assemblyscript" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/241f77b299929d5cabdb382efafbead8e7847a02/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f617373656d626c797363726970742e7376673f636f6c6f723d303037344331" alt="npm" data-canonical-src="https://img.shields.io/npm/v/assemblyscript.svg?color=0074C1" style="max-width:100%;"&gt;&lt;/a&gt; &lt;a href="https://www.npmjs.com/package/assemblyscript" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/3bd874c7e276fa69f116e8915d1db5495439bba0/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f617373656d626c797363726970742f6e696768746c792e7376673f636f6c6f723d303037344331" alt="npm@nightly" data-canonical-src="https://img.shields.io/npm/v/assemblyscript/nightly.svg?color=0074C1" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;AssemblyScript&lt;/strong&gt; compiles a strict subset of &lt;a href="http://www.typescriptlang.org" rel="nofollow"&gt;TypeScript&lt;/a&gt; (basically JavaScript with types) to &lt;a href="http://webassembly.org" rel="nofollow"&gt;WebAssembly&lt;/a&gt; using &lt;a href="https://github.com/WebAssembly/binaryen"&gt;Binaryen&lt;/a&gt;. It generates lean and mean WebAssembly modules while being just an &lt;code&gt;npm install&lt;/code&gt; away.&lt;/p&gt;
&lt;p&gt;Check out the &lt;a href="https://docs.assemblyscript.org" rel="nofollow"&gt;documentation&lt;/a&gt; or try it out in &lt;a href="https://webassembly.studio" rel="nofollow"&gt;WebAssembly Studio&lt;/a&gt;!&lt;/p&gt;
&lt;hr&gt;
&lt;h3 align="center"&gt;&lt;a id="user-content-our-sponsors" class="anchor" aria-hidden="true" href="#our-sponsors"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Our Sponsors&lt;/h3&gt;
&lt;p align="center"&gt;
  &lt;a href="https://opencollective.com/assemblyscript/tiers/sponsor/0/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e8033d900c1b33ae4f24bbd53ee3801b66b8dc49/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f617373656d626c797363726970742f74696572732f73706f6e736f722f302f6176617461722e737667" data-canonical-src="https://opencollective.com/assemblyscript/tiers/sponsor/0/avatar.svg" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a href="https://opencollective.com/assemblyscript/tiers/sponsor/1/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/549b74eccb9b880acc0ed43806e02fe3c6e896ed/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f617373656d626c797363726970742f74696572732f73706f6e736f722f312f6176617461722e737667" data-canonical-src="https://opencollective.com/assemblyscript/tiers/sponsor/1/avatar.svg" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a href="https://opencollective.com/assemblyscript/tiers/sponsor/2/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/4dd7829e9897ebed4e2431a6d55ef4662ab110db/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f617373656d626c797363726970742f74696572732f73706f6e736f722f322f6176617461722e737667" data-canonical-src="https://opencollective.com/assemblyscript/tiers/sponsor/2/avatar.svg" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a href="https://opencollective.com/assemblyscript/tiers/sponsor/3/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/5008720d71082908fab308338bdfe44b64572d67/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f617373656d626c797363726970742f74696572732f73706f6e736f722f332f6176617461722e737667" data-canonical-src="https://opencollective.com/assemblyscript/tiers/sponsor/3/avatar.svg" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a href="https://opencollective.com/assemblyscript/tiers/sponsor/4/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/f994df79c501f887ca2340cbfb3798e546f6bf86/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f617373656d626c797363726970742f74696572732f73706f6e736f722f342f6176617461722e737667" data-canonical-src="https://opencollective.com/assemblyscript/tiers/sponsor/4/avatar.svg" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a href="https://opencollective.com/assemblyscript/tiers/sponsor/5/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/a7715f1b951b9ba3deae4ac919123b9c5fb37b10/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f617373656d626c797363726970742f74696572732f73706f6e736f722f352f6176617461722e737667" data-canonical-src="https://opencollective.com/assemblyscript/tiers/sponsor/5/avatar.svg" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a href="https://opencollective.com/assemblyscript/tiers/sponsor/6/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/60e553bb7183a6bee722c31acdde1b8793c83f0b/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f617373656d626c797363726970742f74696572732f73706f6e736f722f362f6176617461722e737667" data-canonical-src="https://opencollective.com/assemblyscript/tiers/sponsor/6/avatar.svg" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a href="https://opencollective.com/assemblyscript/tiers/sponsor/7/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/72f881bd446434d05828a37098cdd7559793da62/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f617373656d626c797363726970742f74696572732f73706f6e736f722f372f6176617461722e737667" data-canonical-src="https://opencollective.com/assemblyscript/tiers/sponsor/7/avatar.svg" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a href="https://opencollective.com/assemblyscript/tiers/sponsor/8/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/1d15970791dc59955f167cafc1f2a58a88456967/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f617373656d626c797363726970742f74696572732f73706f6e736f722f382f6176617461722e737667" data-canonical-src="https://opencollective.com/assemblyscript/tiers/sponsor/8/avatar.svg" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a href="https://opencollective.com/assemblyscript/tiers/sponsor/9/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/a986fd7a692f40689864898ee0d8e7e45809fc01/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f617373656d626c797363726970742f74696572732f73706f6e736f722f392f6176617461722e737667" data-canonical-src="https://opencollective.com/assemblyscript/tiers/sponsor/9/avatar.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;br&gt;
&lt;h3 align="center"&gt;&lt;a id="user-content-our-backers" class="anchor" aria-hidden="true" href="#our-backers"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Our Backers&lt;/h3&gt;
&lt;p align="center"&gt;
  &lt;a href="https://opencollective.com/assemblyscript#backers" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e3f7ae81eb0f2337fc777ed2bce16969c41cd5a5/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f617373656d626c797363726970742f6261636b65722e7376673f6176617461724865696768743d3434" data-canonical-src="https://opencollective.com/assemblyscript/backer.svg?avatarHeight=44" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;The core team members and most contributors do this open source work in their free time. If you use AssemblyScript for a serious task or plan to do so, and you'd like us to invest more time on it, &lt;a href="https://opencollective.com/assemblyscript" rel="nofollow"&gt;please donate to our OpenCollective&lt;/a&gt;. By sponsoring this project, your logo will show up above. Thank you so much for your support!&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;&lt;a id="user-content-motivation" class="anchor" aria-hidden="true" href="#motivation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Motivation&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;You are now able to write WebAssembly, without learning a new language, and harness all these benefits WebAssembly might offer you. I think that is kind of powerful. [...] It [AssemblyScript] is absolutely usable, and very enjoyable! - Surma, &lt;a href="https://youtu.be/njt-Qzw0mVY" rel="nofollow"&gt;WebAssembly for Web Developers (Google I/O â€™19)&lt;/a&gt; (May 8th, 2019)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;AssemblyScript was frictionless. Not only does it allow you to use TypeScript to write WebAssembly, [...] it also produces glue-free WebAssembly modules that are very small with decent performance. â€“ Surma, &lt;a href="https://developers.google.com/web/updates/2019/02/hotpath-with-wasm" rel="nofollow"&gt;Replacing a hot path in your app's JavaScript with WebAssembly&lt;/a&gt; (Feb 16, 2019)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Perhaps the fundamental issue [to get a small .wasm file] is that JavaScript is the only language for which the Web runtime is a perfect fit. Close relatives that were designed to compile to it, like TypeScript, can be very efficient as well. But languages like C, C++, Rust, and so forth were not originally designed for that purpose. â€“ Alon Zakai, &lt;a href="https://kripken.github.io/blog/binaryen/2018/04/18/rust-emscripten.html" rel="nofollow"&gt;Small WebAssembly Binaries with Rust + Emscripten&lt;/a&gt; (Apr 18, 2018)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;JavaScript's heyday as the only browser language is over, but most web developers are used to writing JavaScript, and learning a new syntax just to get access to WebAssembly is not (always) ideal. If only there was something in to bridge the gapâ€¦ â€“ Jani Tarvainen, &lt;a href="https://malloc.fi/typescript-bridge-javascript-webassembly" rel="nofollow"&gt;TypeScript is the bridge between JavaScript and WebAssembly&lt;/a&gt; (Feb 20, 2018)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;I do think [compiling TypeScript into WASM] is tremendously useful. It allows JavaScript developers to create WASM modules without having to learn C. â€“ Colin Eberhardt, &lt;a href="http://blog.scottlogic.com/2017/10/17/wasm-mandelbrot.html" rel="nofollow"&gt;Exploring different approaches to building WebAssembly modules&lt;/a&gt; (Oct 17, 2017)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;&lt;a id="user-content-further-resources" class="anchor" aria-hidden="true" href="#further-resources"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Further resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://docs.assemblyscript.org" rel="nofollow"&gt;Documentation&lt;/a&gt;&lt;br&gt;
Introduction, quick start, examples and general usage instructions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://docs.assemblyscript.org/details/development" rel="nofollow"&gt;Development instructions&lt;/a&gt;&lt;br&gt;
How to set up a development environment (to submit a pull request).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/AssemblyScript/meta"&gt;Project governance&lt;/a&gt;&lt;br&gt;
Meta information related to the AssemblyScript project.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="./media"&gt;Media files&lt;/a&gt;&lt;br&gt;
Various media files, like logos etc.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>AssemblyScript</author><guid isPermaLink="false">https://github.com/AssemblyScript/assemblyscript</guid><pubDate>Wed, 25 Dec 2019 00:01:00 GMT</pubDate></item><item><title>WebAssembly/spec #2 in WebAssembly, This month</title><link>https://github.com/WebAssembly/spec</link><description>&lt;p&gt;&lt;i&gt;WebAssembly specification, reference interpreter, and test suite.&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;p&gt;&lt;a href="https://travis-ci.org/WebAssembly/spec" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/114095f23019869f5dc606fbc51e4871039140c3/68747470733a2f2f7472617669732d63692e6f72672f576562417373656d626c792f737065632e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/WebAssembly/spec.svg?branch=master" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-spec" class="anchor" aria-hidden="true" href="#spec"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;spec&lt;/h1&gt;
&lt;p&gt;This repository holds the sources for the WebAssembly draft specification
(to seed a future
&lt;a href="https://lists.w3.org/Archives/Public/public-new-work/2017Jun/0005.html" rel="nofollow"&gt;WebAssembly Working Group&lt;/a&gt;),
a reference implementation, and the official testsuite.&lt;/p&gt;
&lt;p&gt;A formatted version of the spec is available here:
&lt;a href="https://webassembly.github.io/spec/" rel="nofollow"&gt;webassembly.github.io/spec&lt;/a&gt;,&lt;/p&gt;
&lt;p&gt;Participation is welcome. Discussions about new features, significant semantic
changes, or any specification change likely to generate substantial discussion
should take place in
&lt;a href="https://github.com/WebAssembly/design"&gt;the WebAssembly design repository&lt;/a&gt;
first, so that this spec repository can remain focused. And please follow the
&lt;a href="Contributing.md"&gt;guidelines for contributing&lt;/a&gt;.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>WebAssembly</author><guid isPermaLink="false">https://github.com/WebAssembly/spec</guid><pubDate>Wed, 25 Dec 2019 00:02:00 GMT</pubDate></item><item><title>WebAssembly/binaryen #3 in WebAssembly, This month</title><link>https://github.com/WebAssembly/binaryen</link><description>&lt;p&gt;&lt;i&gt;Compiler infrastructure and toolchain library for WebAssembly&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;p&gt;&lt;a href="https://travis-ci.org/WebAssembly/binaryen" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/567c57624e4ebc5d43297413bf07eb655023194c/68747470733a2f2f7472617669732d63692e6f72672f576562417373656d626c792f62696e617279656e2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/WebAssembly/binaryen.svg?branch=master" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://ci.appveyor.com/project/WebAssembly/binaryen/branch/master" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/a2ae3b3a29f6f2645c834a6a59395d7c2d86beb2/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6e766d39747577786e757039683561722f6272616e63682f6d61737465723f7376673d74727565" alt="Windows CI" data-canonical-src="https://ci.appveyor.com/api/projects/status/nvm9tuwxnup9h5ar/branch/master?svg=true" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-binaryen" class="anchor" aria-hidden="true" href="#binaryen"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Binaryen&lt;/h1&gt;
&lt;p&gt;Binaryen is a compiler and toolchain infrastructure library for WebAssembly,
written in C++. It aims to make &lt;a href="https://github.com/WebAssembly/binaryen/wiki/Compiling-to-WebAssembly-with-Binaryen"&gt;compiling to WebAssembly&lt;/a&gt; &lt;strong&gt;easy, fast, and
effective&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Easy&lt;/strong&gt;: Binaryen has a simple &lt;a href="https://github.com/WebAssembly/binaryen/wiki/Compiling-to-WebAssembly-with-Binaryen#c-api-1"&gt;C API&lt;/a&gt; in a single header, and can also be
&lt;a href="https://github.com/WebAssembly/binaryen/wiki/binaryen.js-API"&gt;used from JavaScript&lt;/a&gt;. It accepts input in &lt;a href="https://github.com/WebAssembly/binaryen/wiki/Compiling-to-WebAssembly-with-Binaryen#what-do-i-need-to-have-in-order-to-use-binaryen-to-compile-to-webassembly"&gt;WebAssembly-like
form&lt;/a&gt; but also accepts a general &lt;a href="https://github.com/WebAssembly/binaryen/wiki/Compiling-to-WebAssembly-with-Binaryen#cfg-api"&gt;control flow graph&lt;/a&gt; for
compilers that prefer that.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Fast&lt;/strong&gt;: Binaryen's internal IR uses compact data structures and is designed
for completely parallel codegen and optimization, using all available CPU
cores. Binaryen's IR also compiles down to WebAssembly extremely easily and
quickly because it is essentially a subset of WebAssembly.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Effective&lt;/strong&gt;: Binaryen's optimizer has many &lt;a href="https://github.com/WebAssembly/binaryen/tree/master/src/passes"&gt;passes&lt;/a&gt; that can improve code
very significantly (e.g. local coloring to coalesce local variables; dead
code elimination; precomputing expressions when possible at compile time;
etc.). These optimizations aim to make Binaryen powerful enough to be used as
a &lt;a href="https://kripken.github.io/talks/binaryen.html#/9" rel="nofollow"&gt;compiler backend&lt;/a&gt; by itself.  One specific area of focus is on
WebAssembly-specific optimizations (that general-purpose compilers might not
do), which you can think of as wasm &lt;a href="https://kripken.github.io/talks/binaryen.html#/2" rel="nofollow"&gt;minification&lt;/a&gt; , similar to minification
for JavaScript, CSS, etc., all of which are language-specific (an example of
such an optimization is block return value generation in &lt;code&gt;SimplifyLocals&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Compilers built using Binaryen include&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/WebAssembly/binaryen/blob/master/src/asm2wasm.h"&gt;&lt;code&gt;asm2wasm&lt;/code&gt;&lt;/a&gt; which compiles asm.js to WebAssembly&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/AssemblyScript/assemblyscript"&gt;&lt;code&gt;AssemblyScript&lt;/code&gt;&lt;/a&gt; which compiles TypeScript to Binaryen IR&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/WebAssembly/binaryen/blob/master/src/wasm2js.h"&gt;&lt;code&gt;wasm2js&lt;/code&gt;&lt;/a&gt; which compiles WebAssembly to JS&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/tweag/asterius"&gt;&lt;code&gt;Asterius&lt;/code&gt;&lt;/a&gt; which compiles Haskell to WebAssembly&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Binaryen also provides a set of &lt;strong&gt;toolchain utilities&lt;/strong&gt; that can&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Parse&lt;/strong&gt; and &lt;strong&gt;emit&lt;/strong&gt; WebAssembly. In particular this lets you load
WebAssembly, optimize it using Binaryen, and re-emit it, thus implementing a
wasm-to-wasm optimizer in a single command.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Interpret&lt;/strong&gt; WebAssembly as well as run the WebAssembly spec tests.&lt;/li&gt;
&lt;li&gt;Integrate with &lt;strong&gt;&lt;a href="http://emscripten.org" rel="nofollow"&gt;Emscripten&lt;/a&gt;&lt;/strong&gt; in order to provide a
complete compiler toolchain from C and C++ to WebAssembly.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Polyfill&lt;/strong&gt; WebAssembly by running it in the interpreter compiled to
JavaScript, if the browser does not yet have native support (useful for
testing).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Consult the &lt;a href="Contributing.md"&gt;contributing instructions&lt;/a&gt; if you're interested in
participating.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-binaryen-ir" class="anchor" aria-hidden="true" href="#binaryen-ir"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Binaryen IR&lt;/h2&gt;
&lt;p&gt;Binaryen's internal IR is designed to be&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Flexible and fast&lt;/strong&gt; for optimization.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;As close as possible to WebAssembly&lt;/strong&gt; so it is simple and fast to convert
it to and from WebAssembly.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are a few differences between Binaryen IR and the WebAssembly language:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tree structure
&lt;ul&gt;
&lt;li&gt;Binaryen IR &lt;a href="https://github.com/WebAssembly/binaryen/issues/663"&gt;is a tree&lt;/a&gt;, i.e., it has hierarchical structure,
for convenience of optimization. This differs from the WebAssembly binary
format which is a stack machine.&lt;/li&gt;
&lt;li&gt;Consequently Binaryen's text format allows only s-expressions.
WebAssembly's official text format is primarily a linear instruction list
(with s-expression extensions). Binaryen can't read the linear style, but
it can read a wasm text file if it contains only s-expressions.&lt;/li&gt;
&lt;li&gt;Binaryen uses Stack IR to optimize "stacky" code (that can't be
represented in structured form).&lt;/li&gt;
&lt;li&gt;In rare cases stacky code must be represented in Binaryen IR as well, like
popping a value in an exception catch. To support that Binaryen IR has
&lt;code&gt;push&lt;/code&gt; and &lt;code&gt;pop&lt;/code&gt; instructions.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Types and unreachable code
&lt;ul&gt;
&lt;li&gt;WebAssembly limits block/if/loop types to none and the concrete value types
(i32, i64, f32, f64). Binaryen IR has an unreachable type, and it allows
block/if/loop to take it, allowing &lt;a href="https://github.com/WebAssembly/binaryen/issues/903"&gt;local transforms that don't need to
know the global context&lt;/a&gt;. As a result, Binaryen's default
text output is not necessarily valid wasm text. (To get valid wasm text,
you can do &lt;code&gt;--generate-stack-ir --print-stack-ir&lt;/code&gt;, which prints Stack IR,
this is guaranteed to be valid for wasm parsers.)&lt;/li&gt;
&lt;li&gt;Binaryen ignores unreachable code when reading WebAssembly binaries. That
means that if you read a wasm file with unreachable code, that code will be
discarded as if it were optimized out (often this is what you want anyhow,
and optimized programs have no unreachable code anyway, but if you write an
unoptimized file and then read it, it may look different). The reason for
this behavior is that unreachable code in WebAssembly has corner cases that
are tricky to handle in Binaryen IR (it can be very unstructured, and
Binaryen IR is more structured than WebAssembly as noted earlier). Note
that Binaryen does support unreachable code in .wat text files, since as we
saw Binaryen only supports s-expressions there, which are structured.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Blocks
&lt;ul&gt;
&lt;li&gt;Binaryen IR has only one node that contains a variable-length list of
operands: the block. WebAssembly on the other hand allows lists in loops,
if arms, and the top level of a function. Binaryen's IR has a single
operand for all non-block nodes; this operand may of course be a block.
The motivation for this property is that many passes need special code
for iterating on lists, so having a single IR node with a list simplifies
them.&lt;/li&gt;
&lt;li&gt;As in wasm, blocks and loops may have names. Branch targets in the IR are
resolved by name (as opposed to nesting depth). This has 2 consequences:
&lt;ul&gt;
&lt;li&gt;Blocks without names may not be branch targets.&lt;/li&gt;
&lt;li&gt;Names are required to be unique. (Reading .wat files with duplicate names
is supported; the names are modified when the IR is constructed).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;As an optimization, a block that is the child of a loop (or if arm, or
function toplevel) and which has no branches targeting it will not be
emitted when generating wasm. Instead its list of operands will be directly
used in the containing node. Such a block is sometimes called an "implicit
block".&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Multivalue
&lt;ul&gt;
&lt;li&gt;Binaryen will not represent multivalue instructions and values directly.
Binaryen's main focus is on optimization of wasm, and therefore the question
of whether we should have multivalue in the main IR is whether it justifes
the extra complexity there. Experiments show that the shrinking of code
size thanks to multivalue is useful but small, just 1-3% or so. Given that,
we prefer to keep the main IR simple, and focus on multivalue optimizations
in Stack IR, which is more suitable for such things.&lt;/li&gt;
&lt;li&gt;Binaryen does still need to implement the "ABI" level of multivalue, that
is, we need multivalue calls because those may cross module boundaries,
and so they are observable externally. To support that, Binaryen may use
&lt;code&gt;push&lt;/code&gt; and &lt;code&gt;pop&lt;/code&gt; as mentioned earlier; another option is to add LLVM-like
&lt;code&gt;extractvalue/composevalue&lt;/code&gt; instructions.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As a result, you might notice that round-trip conversions (wasm =&amp;gt; Binaryen IR
=&amp;gt; wasm) change code a little in some corner cases.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When optimizing Binaryen uses an additional IR, Stack IR (see
&lt;code&gt;src/wasm-stack.h&lt;/code&gt;). Stack IR allows a bunch of optimizations that are
tailored for the stack machine form of WebAssembly's binary format (but Stack
IR is less efficient for general optimizations than the main Binaryen IR). If
you have a wasm file that has been particularly well-optimized, a simple
round-trip conversion (just read and write, without optimization) may cause
more noticeable differences, as Binaryen fits it into Binaryen IR's more
structured format. If you also optimize during the round-trip conversion then
Stack IR opts will be run and the final wasm will be better optimized.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Notes when working with Binaryen IR:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;As mentioned above, Binaryen IR has a tree structure. As a result, each
expression should have exactly one parent - you should not "reuse" a node by
having it appear more than once in the tree. The motivation for this
limitation is that when we optimize we modify nodes, so if they appear more
than once in the tree, a change in one place can appear in another
incorrectly.&lt;/li&gt;
&lt;li&gt;For similar reasons, nodes should not appear in more than one functions.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-tools" class="anchor" aria-hidden="true" href="#tools"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tools&lt;/h2&gt;
&lt;p&gt;This repository contains code that builds the following tools in &lt;code&gt;bin/&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;wasm-opt&lt;/strong&gt;: Loads WebAssembly and runs Binaryen IR passes on it.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;wasm-as&lt;/strong&gt;: Assembles WebAssembly in text format (currently S-Expression
format) into binary format (going through Binaryen IR).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;wasm-dis&lt;/strong&gt;: Un-assembles WebAssembly in binary format into text format
(going through Binaryen IR).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;wasm2js&lt;/strong&gt;: A WebAssembly-to-JS compiler. This is used by Emscripten to
generate JavaScript as an alternative to WebAssembly.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;wasm-reduce&lt;/strong&gt;: A testcase reducer for WebAssembly files. Given a wasm file
that is interesting for some reason (say, it crashes a specific VM),
wasm-reduce can find a smaller wasm file that has the same property, which is
often easier to debug. See the
&lt;a href="https://github.com/WebAssembly/binaryen/wiki/Fuzzing#reducing"&gt;docs&lt;/a&gt;
for more details.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;wasm-shell&lt;/strong&gt;: A shell that can load and interpret WebAssembly code. It can
also run the spec test suite.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;wasm-emscripten-finalize&lt;/strong&gt;: Takes a wasm binary produced by llvm+lld and
performs emscripten-specific passes over it.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;asm2wasm&lt;/strong&gt;: An asm.js-to-WebAssembly compiler, using Emscripten's asm
optimizer infrastructure. This is used by Emscripten in Binaryen mode when it
uses Emscripten's fastcomp asm.js backend.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;wasm-ctor-eval&lt;/strong&gt;: A tool that can execute C++ global constructors ahead of
time. Used by Emscripten.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;binaryen.js&lt;/strong&gt;: A standalone JavaScript library that exposes Binaryen methods for &lt;a href="https://github.com/WebAssembly/binaryen/blob/master/test/binaryen.js/hello-world.js"&gt;creating and optimizing WASM modules&lt;/a&gt;. For builds, see &lt;a href="https://www.npmjs.com/package/binaryen" rel="nofollow"&gt;binaryen.js on npm&lt;/a&gt; (or download it directly from &lt;a href="https://raw.githubusercontent.com/AssemblyScript/binaryen.js/master/index.js" rel="nofollow"&gt;github&lt;/a&gt;, &lt;a href="https://cdn.rawgit.com/AssemblyScript/binaryen.js/master/index.js" rel="nofollow"&gt;rawgit&lt;/a&gt;, or &lt;a href="https://unpkg.com/binaryen@latest/index.js" rel="nofollow"&gt;unpkg&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Usage instructions for each are below.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-building" class="anchor" aria-hidden="true" href="#building"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Building&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;cmake . &amp;amp;&amp;amp; make
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that you can also use &lt;code&gt;ninja&lt;/code&gt; as your generator: &lt;code&gt;cmake -G Ninja . &amp;amp;&amp;amp; ninja&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A C++11 compiler is required.&lt;/li&gt;
&lt;li&gt;The JavaScript components can be built using &lt;code&gt;build-js.sh&lt;/code&gt;, see notes inside. Normally this is not needed as builds are provided in this repo already.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you also want to compile C/C++ to WebAssembly (and not just asm.js to WebAssembly), you'll need Emscripten. You'll need the &lt;code&gt;incoming&lt;/code&gt; branch there (which you can get via &lt;a href="http://kripken.github.io/emscripten-site/docs/getting_started/downloads.html" rel="nofollow"&gt;the SDK&lt;/a&gt;), for more details see &lt;a href="https://github.com/kripken/emscripten/wiki/WebAssembly"&gt;the wiki&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-visual-c" class="anchor" aria-hidden="true" href="#visual-c"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Visual C++&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Using the Microsoft Visual Studio Installer, install the "Visual C++ tools for CMake" component.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Generate the projects:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mkdir build
cd build
"%VISUAL_STUDIO_ROOT%\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\bin\cmake.exe" ..
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Substitute VISUAL_STUDIO_ROOT with the path to your Visual Studio
installation. In case you are using the Visual Studio Build Tools, the path
will be "C:\Program Files (x86)\Microsoft Visual Studio\2017\BuildTools".&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;From the Developer Command Prompt, build the desired projects:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;msbuild binaryen.vcxproj
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;CMake generates a project named "ALL_BUILD.vcxproj" for conveniently building all the projects.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;&lt;a id="user-content-running" class="anchor" aria-hidden="true" href="#running"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Running&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-wasm-opt" class="anchor" aria-hidden="true" href="#wasm-opt"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;wasm-opt&lt;/h3&gt;
&lt;p&gt;Run&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;bin/wasm-opt [.wasm or .wat file] [options] [passes, see --help] [--help]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The wasm optimizer receives WebAssembly as input, and can run transformation
passes on it, as well as print it (before and/or after the transformations). For
example, try&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;bin/wasm-opt test/passes/lower-if-else.wat --print
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That will pretty-print out one of the test cases in the test suite. To run a
transformation pass on it, try&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;bin/wasm-opt test/passes/lower-if-else.wat --print --lower-if-else
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;lower-if-else&lt;/code&gt; pass lowers if-else into a block and a break. You can see
the change the transformation causes by comparing the output of the two print
commands.&lt;/p&gt;
&lt;p&gt;It's easy to add your own transformation passes to the shell, just add &lt;code&gt;.cpp&lt;/code&gt;
files into &lt;code&gt;src/passes&lt;/code&gt;, and rebuild the shell. For example code, take a look at
the &lt;a href="https://github.com/WebAssembly/binaryen/blob/master/src/passes/LowerIfElse.cpp"&gt;&lt;code&gt;lower-if-else&lt;/code&gt; pass&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Some more notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;See &lt;code&gt;bin/wasm-opt --help&lt;/code&gt; for the full list of options and passes.&lt;/li&gt;
&lt;li&gt;Passing &lt;code&gt;--debug&lt;/code&gt; will emit some debugging info.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-wasm2js" class="anchor" aria-hidden="true" href="#wasm2js"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;wasm2js&lt;/h3&gt;
&lt;p&gt;Run&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;bin/wasm2js [input.wasm file]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will print out JavaScript to the console.&lt;/p&gt;
&lt;p&gt;For example, try&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ bin/wasm2js test/hello_world.wat
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That output contains&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; function add(x, y) {
  x = x | 0;
  y = y | 0;
  return x + y | 0 | 0;
 }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;as a translation of&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; (func $add (; 0 ;) (type $0) (param $x i32) (param $y i32) (result i32)
  (i32.add
   (local.get $x)
   (local.get $y)
  )
 )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;wasm2js's output is in ES6 module format - basically, it converts a wasm
module into an ES6 module (to run on older browsers and Node.js versions
you can use Babel etc. to convert it to ES5). Let's look at a full example
of calling that hello world wat; first, create the main JS file:&lt;/p&gt;
&lt;div class="highlight highlight-source-js"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; main.mjs&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; { &lt;span class="pl-smi"&gt;add&lt;/span&gt; } &lt;span class="pl-k"&gt;from&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;./hello_world.mjs&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;;
&lt;span class="pl-en"&gt;console&lt;/span&gt;.&lt;span class="pl-c1"&gt;log&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;the sum of 1 and 2 is:&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-en"&gt;add&lt;/span&gt;(&lt;span class="pl-c1"&gt;1&lt;/span&gt;, &lt;span class="pl-c1"&gt;2&lt;/span&gt;));&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The run this (note that you need a new enough Node.js with ES6 module
support):&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;$ bin/wasm2js test/hello_world.wat -o hello_world.mjs
$ node --experimental-modules main.mjs
the sum of 1 and 2 is: 3&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Things keep to in mind with wasm2js's output:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You should run wasm2js with optimizations for release builds, using &lt;code&gt;-O&lt;/code&gt;
or another optimization level. That will optimize along the entire pipeline
(wasm and JS). It won't do everything a JS minifer would, though, like
minify whitespace, so you should still run a normal JS minifer afterwards.&lt;/li&gt;
&lt;li&gt;It is not possible to match WebAssembly semantics 100% precisely with fast
JavaScript code. For example, every load and store may trap, and to make
JavaScript do the same we'd need to add checks everywhere, which would be
large and slow. Instead, wasm2js assumes loads and stores do not trap, that
int/float conversions do not trap, and so forth. There may also be slight
differences in corner cases of conversions, like non-trapping float to int.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-asm2wasm" class="anchor" aria-hidden="true" href="#asm2wasm"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;asm2wasm&lt;/h3&gt;
&lt;p&gt;Run&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;bin/asm2wasm [input.asm.js file]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will print out a WebAssembly module in s-expression format to the console.&lt;/p&gt;
&lt;p&gt;For example, try&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ bin/asm2wasm test/hello_world.asm.js
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That input file contains&lt;/p&gt;
&lt;div class="highlight highlight-source-js"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;function&lt;/span&gt; () {
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;use asm&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;;
  &lt;span class="pl-k"&gt;function&lt;/span&gt; &lt;span class="pl-en"&gt;add&lt;/span&gt;(&lt;span class="pl-smi"&gt;x&lt;/span&gt;, &lt;span class="pl-smi"&gt;y&lt;/span&gt;) {
    x &lt;span class="pl-k"&gt;=&lt;/span&gt; x &lt;span class="pl-k"&gt;|&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt;;
    y &lt;span class="pl-k"&gt;=&lt;/span&gt; y &lt;span class="pl-k"&gt;|&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt;;
    &lt;span class="pl-k"&gt;return&lt;/span&gt; x &lt;span class="pl-k"&gt;+&lt;/span&gt; y &lt;span class="pl-k"&gt;|&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt;;
  }
  &lt;span class="pl-k"&gt;return&lt;/span&gt; { add&lt;span class="pl-k"&gt;:&lt;/span&gt; add };
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You should see something like this:&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/01a6d6514431a56eb49608d823650033c32310aa/68747470733a2f2f7261772e6769746875622e636f6d2f576562417373656d626c792f7761736d2d656d736372697074656e2f6d61737465722f6d656469612f6578616d706c652e706e67"&gt;&lt;img src="https://camo.githubusercontent.com/01a6d6514431a56eb49608d823650033c32310aa/68747470733a2f2f7261772e6769746875622e636f6d2f576562417373656d626c792f7761736d2d656d736372697074656e2f6d61737465722f6d656469612f6578616d706c652e706e67" alt="example output" data-canonical-src="https://raw.github.com/WebAssembly/wasm-emscripten/master/media/example.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;By default you should see pretty colors as in that image. Set &lt;code&gt;COLORS=0&lt;/code&gt; in the
env to disable colors if you prefer that. On Linux and Mac, you can set
&lt;code&gt;COLORS=1&lt;/code&gt; in the env to force colors (useful when piping to &lt;code&gt;more&lt;/code&gt;, for
example). For Windows, pretty colors are only available when &lt;code&gt;stdout/stderr&lt;/code&gt; are
not redirected/piped.&lt;/p&gt;
&lt;p&gt;Pass &lt;code&gt;--debug&lt;/code&gt; on the command line to see debug info, about asm.js functions as
they are parsed, etc.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-cc-source--asm2wasm--webassembly" class="anchor" aria-hidden="true" href="#cc-source--asm2wasm--webassembly"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;C/C++ Source â‡’ asm2wasm â‡’ WebAssembly&lt;/h3&gt;
&lt;p&gt;When using &lt;code&gt;emcc&lt;/code&gt; with the &lt;code&gt;BINARYEN&lt;/code&gt; option, it will use Binaryen to build to
WebAssembly. This lets you compile C and C++ to WebAssembly, with emscripten
using asm.js internally as a build step. Since emscripten's asm.js generation is
very stable, and asm2wasm is a fairly simple process, this method of compiling C
and C++ to WebAssembly is usable already. See the &lt;a href="https://github.com/kripken/emscripten/wiki/WebAssembly"&gt;emscripten
wiki&lt;/a&gt; for more details
about how to use it.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-testing" class="anchor" aria-hidden="true" href="#testing"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Testing&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;./check.py
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(or &lt;code&gt;python check.py&lt;/code&gt;) will run &lt;code&gt;wasm-shell&lt;/code&gt;, &lt;code&gt;wasm-opt&lt;/code&gt;, &lt;code&gt;asm2wasm&lt;/code&gt;, etc. on the testcases in &lt;code&gt;test/&lt;/code&gt;, and verify their outputs.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;check.py&lt;/code&gt; script supports some options:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./check.py [--interpreter=/path/to/interpreter] [TEST1] [TEST2]..
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;If an interpreter is provided, we run the output through it, checking for
parse errors.&lt;/li&gt;
&lt;li&gt;If tests are provided, we run exactly those. If none are provided, we run
them all. To see what tests are available, run &lt;code&gt;./check.py --list-suites&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Some tests require &lt;code&gt;emcc&lt;/code&gt; or &lt;code&gt;nodejs&lt;/code&gt; in the path. They will not run if the
tool cannot be found, and you'll see a warning.&lt;/li&gt;
&lt;li&gt;We have tests from upstream in &lt;code&gt;tests/spec&lt;/code&gt;, in git submodules. Running
&lt;code&gt;./check.py&lt;/code&gt; should update those.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-design-principles" class="anchor" aria-hidden="true" href="#design-principles"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Design Principles&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Interned strings for names&lt;/strong&gt;: It's very convenient to have names on nodes,
instead of just numeric indices etc. To avoid most of the performance
difference between strings and numeric indices, all strings are interned,
which means there is a single copy of each string in memory, string
comparisons are just a pointer comparison, etc.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Allocate in arenas&lt;/strong&gt;: Based on experience with other
optimizing/transformating toolchains, it's not worth the overhead to
carefully track memory of individual nodes. Instead, we allocate all elements
of a module in an arena, and the entire arena can be freed when the module is
no longer needed.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-faq" class="anchor" aria-hidden="true" href="#faq"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;FAQ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Why the weird name for the project?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;"Binaryen" is a combination of &lt;strong&gt;binary&lt;/strong&gt; - since WebAssembly is a binary format
for the web - and &lt;strong&gt;Emscripten&lt;/strong&gt; - with which it can integrate in order to
compile C and C++ all the way to WebAssembly, via asm.js. Binaryen began as
Emscripten's WebAssembly processing library (&lt;code&gt;wasm-emscripten&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;"Binaryen" is pronounced &lt;a href="http://www.makinggameofthrones.com/production-diary/2011/2/11/official-pronunciation-guide-for-game-of-thrones.html" rel="nofollow"&gt;in the same manner&lt;/a&gt; as "&lt;a href="https://en.wikipedia.org/wiki/List_of_A_Song_of_Ice_and_Fire_characters#House_Targaryen" rel="nofollow"&gt;Targaryen&lt;/a&gt;": &lt;em&gt;bi-NAIR-ee-in&lt;/em&gt;. Or something like that? Anyhow, however Targaryen is correctly pronounced, they should rhyme. Aside from pronunciation, the Targaryen house words, "Fire and Blood", have also inspired Binaryen's: "Code and Bugs."&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Does it compile under Windows and/or Visual Studio?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Yes, it does. Here's a step-by-step &lt;a href="https://github.com/brakmic/bazaar/blob/master/webassembly/COMPILING_WIN32.md"&gt;tutorial&lt;/a&gt;  on how to compile it
under &lt;strong&gt;Windows 10 x64&lt;/strong&gt; with with &lt;strong&gt;CMake&lt;/strong&gt; and &lt;strong&gt;Visual Studio 2015&lt;/strong&gt;. Help
would be appreciated on Windows and OS X as most of the core devs are on Linux.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>WebAssembly</author><guid isPermaLink="false">https://github.com/WebAssembly/binaryen</guid><pubDate>Wed, 25 Dec 2019 00:03:00 GMT</pubDate></item></channel></rss>