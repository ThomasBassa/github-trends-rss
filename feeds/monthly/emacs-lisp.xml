<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>GitHub Trending: Emacs Lisp, This month</title><link>https://github.com/trending/emacs-lisp?since=monthly</link><description>The top repositories on GitHub for emacs-lisp, measured monthly</description><pubDate>Sat, 01 Feb 2020 01:11:32 GMT</pubDate><lastBuildDate>Sat, 01 Feb 2020 01:11:32 GMT</lastBuildDate><generator>PyRSS2Gen-1.1.0</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><ttl>720</ttl><item><title>hlissner/doom-emacs #1 in Emacs Lisp, This month</title><link>https://github.com/hlissner/doom-emacs</link><description>&lt;p&gt;&lt;i&gt;An Emacs configuration for the stubborn martian vimmer&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;a href="http://doomemacs.org" rel="nofollow"&gt;
  &lt;img src="https://camo.githubusercontent.com/d38622bbeea8e0a3a1c42e21d2839363d21b4627/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f7461672f686c6973736e65722f646f6f6d2d656d6163732e7376673f6c6162656c3d72656c6561736526636f6c6f723d6f72616e6765" alt="Made with Doom Emacs" data-canonical-src="https://img.shields.io/github/tag/hlissner/doom-emacs.svg?label=release&amp;amp;color=orange" style="max-width:100%;"&gt;
&lt;/a&gt;
&lt;a href="https://emacs.org" rel="nofollow"&gt;
  &lt;img src="https://camo.githubusercontent.com/145199dd89d8ed47968846fe8dcdde64b838ffab/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4d6164655f666f722d456d6163735f32362e312b2d626c756576696f6c65742e737667" alt="Made for Emacs 26.1+" data-canonical-src="https://img.shields.io/badge/Made_for-Emacs_26.1+-blueviolet.svg" style="max-width:100%;"&gt;
&lt;/a&gt;
&lt;a href="https://github.com/hlissner/doom-emacs/actions"&gt;
  &lt;img src="https://github.com/hlissner/doom-emacs/workflows/CI/badge.svg" alt="Build status: develop" style="max-width:100%;"&gt;
&lt;/a&gt;
&lt;a href="https://discord.gg/qvGgnVx" rel="nofollow"&gt;
  &lt;img src="https://camo.githubusercontent.com/48087b2da5b43d9130b73e6e8ad3e7b42caa3330/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f446973636f72642d626c75652e7376673f6c6f676f3d646973636f7264266c6162656c3d6a6f696e" alt="Join our discord server" align="right" data-canonical-src="https://img.shields.io/badge/Discord-blue.svg?logo=discord&amp;amp;label=join" style="max-width:100%;"&gt;
&lt;/a&gt;
&lt;br&gt;&lt;br&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/hlissner/doom-emacs/screenshots/main.png"&gt;&lt;img src="https://raw.githubusercontent.com/hlissner/doom-emacs/screenshots/main.png" alt="Doom Emacs Screenshot" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p align="center"&gt;
  &lt;b&gt;&lt;a href="/../../tree/screenshots"&gt;Screenshots&lt;/a&gt;&lt;/b&gt;
  |
  &lt;b&gt;&lt;a href="docs/getting_started.org"&gt;Get started&lt;/a&gt;&lt;/b&gt;
  |
  &lt;b&gt;&lt;a href="docs/contributing.org"&gt;Contribute&lt;/a&gt;&lt;/b&gt;
  |
  &lt;b&gt;&lt;a href="docs/index.org"&gt;Documentation&lt;/a&gt;&lt;/b&gt;
  |
  &lt;b&gt;&lt;a href="docs/faq.org"&gt;FAQ&lt;/a&gt;&lt;/b&gt;
&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Quick start&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;git clone https://github.com/hlissner/doom-emacs &lt;span class="pl-k"&gt;~&lt;/span&gt;/.emacs.d
&lt;span class="pl-k"&gt;~&lt;/span&gt;/.emacs.d/bin/doom install&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;More details, including dependencies and how to install Emacs, can be found &lt;a href="docs/getting_started.org#install"&gt;in
the documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#what-is-doom-emacs"&gt;What is Doom Emacs&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#dooms-mantras"&gt;Doom's mantras&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#features"&gt;Features&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#getting-help"&gt;Getting Help&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#community"&gt;Community&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#troubleshooting"&gt;Troubleshooting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#contributing"&gt;Contributing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;a id="user-content-what-is-doom-emacs" class="anchor" aria-hidden="true" href="#what-is-doom-emacs"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;What is Doom Emacs&lt;/h1&gt;
&lt;a href="http://ultravioletbat.deviantart.com/art/Yay-Evil-111710573" rel="nofollow"&gt;
  &lt;img src="https://github.com/hlissner/doom-emacs/raw/screenshots/cacochan.png" align="right" style="max-width:100%;"&gt;
&lt;/a&gt;
&lt;p&gt;It is a story as old as time. A stubborn, shell-dwelling, and melodramatic
vimmer -- envious of the features of modern text editors -- spirals into despair
before succumbing to the &lt;a href="https://github.com/emacs-evil/evil"&gt;dark side&lt;/a&gt;. This is his config.&lt;/p&gt;
&lt;p&gt;Doom is a configuration framework for &lt;a href="https://www.gnu.org/software/emacs/" rel="nofollow"&gt;GNU
Emacs&lt;/a&gt; tailored for Emacs bankruptcy
veterans who want less framework in their frameworks and the performance of a
hand rolled config (or better). It can be a foundation for your own config or a
resource for Emacs enthusiasts to learn more about our favorite OS.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-dooms-mantras" class="anchor" aria-hidden="true" href="#dooms-mantras"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Doom's mantras&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Gotta go fast.&lt;/strong&gt; Startup and run-time performance are priorities. Doom goes
beyond lazy loading packages by modifying them to be snappier and load lazier!&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Close to metal.&lt;/strong&gt; There's less between you and vanilla Emacs by design.
There's less to grok, on top of Emacs.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Readability counts.&lt;/strong&gt; Internals ought to be written as if reading them were
part of the user experience, and it is! Modules should be syntactically sweet.
Backend logic should be functional (as much as elisp permits), abstraction
light and (hopefully) documented.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Opinionated, but not stubborn.&lt;/strong&gt; Doom is a bundle of reasonable defaults and
curated opinions, but all of it should be optional. Use as little or as much
of it as you like.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Your system, your rules.&lt;/strong&gt; There are more ways to set up your development
environment than there are dislikes on Youtube Rewind '18, so Doom leaves it
to you. Doom will not &lt;em&gt;automatically&lt;/em&gt; install system dependencies (and will
coerce its plugins not to do so either). Use &lt;code&gt;doom doctor&lt;/code&gt; to figure out
what's missing.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-features" class="anchor" aria-hidden="true" href="#features"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Minimalistic good looks inspired by modern editors.&lt;/li&gt;
&lt;li&gt;A modular architecture for a more organized Emacs configuration.&lt;/li&gt;
&lt;li&gt;A custom elisp library to help simplify your config.&lt;/li&gt;
&lt;li&gt;(Optional) Vim-emulation powered by &lt;a href="https://github.com/emacs-evil/evil"&gt;evil-mode&lt;/a&gt;, including
ports of popular vim plugins and functionality.&lt;/li&gt;
&lt;li&gt;A declarative &lt;a href="core/autoload/packages.el"&gt;package management system&lt;/a&gt; (powered by
&lt;a href="https://github.com/raxod502/straight.el"&gt;straight.el&lt;/a&gt;) with a command line interface. Install packages
from anywhere, not just (M)ELPA.&lt;/li&gt;
&lt;li&gt;A curated set of sane defaults for all packages, all (major) OSes, and Emacs
itself.&lt;/li&gt;
&lt;li&gt;Support for &lt;em&gt;many&lt;/em&gt; programming languages. Too many to list. Includes syntax
highlighting, linters/checker integration, inline code evaluation, code
completion (where possible), REPLs, documentation lookups, snippets, and more!&lt;/li&gt;
&lt;li&gt;Support for &lt;em&gt;many&lt;/em&gt; tools, like docker, pass, ansible, terraform, and more.&lt;/li&gt;
&lt;li&gt;A Spacemacs-esque &lt;a href="modules/config/default/+evil-bindings.el"&gt;keybinding scheme&lt;/a&gt;, centered around leader
and localleader prefix keys (&lt;kbd&gt;SPC&lt;/kbd&gt; and &lt;kbd&gt;SPC&lt;/kbd&gt;&lt;kbd&gt;m&lt;/kbd&gt;, by
default).&lt;/li&gt;
&lt;li&gt;A rule-based &lt;a href="modules/ui/popup/README.org"&gt;popup management system&lt;/a&gt; that dictates how
temporary or disposable buffers are displayed (and disposed of).&lt;/li&gt;
&lt;li&gt;Automatic indentation detection and &lt;a href="http://editorconfig.org/" rel="nofollow"&gt;editorconfig&lt;/a&gt;
integration. Let someone else argue about tabs vs &lt;strong&gt;_*&lt;strong&gt;spaces&lt;/strong&gt;*_&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Project-management tools and framework-specific minor modes with their own
snippets libraries.&lt;/li&gt;
&lt;li&gt;Project search (and replace) utilities, powered by &lt;a href="https://github.com/BurntSushi/ripgrep"&gt;ripgrep&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Isolated and persistent workspaces (also substitutes for vim tabs).&lt;/li&gt;
&lt;li&gt;An envvar file generator that captures a snapshot of your shell environment
for Doom to load at startup. No more struggling to get Emacs to inherit your
&lt;code&gt;PATH&lt;/code&gt;, among other things.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;a id="user-content-getting-help" class="anchor" aria-hidden="true" href="#getting-help"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Getting Help&lt;/h1&gt;
&lt;h2&gt;&lt;a id="user-content-community" class="anchor" aria-hidden="true" href="#community"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Community&lt;/h2&gt;
&lt;p&gt;We have &lt;a href="https://discord.gg/qvGgnVx" rel="nofollow"&gt;a Discord server&lt;/a&gt;! Hop on and say hi!&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-troubleshooting" class="anchor" aria-hidden="true" href="#troubleshooting"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Troubleshooting&lt;/h2&gt;
&lt;p&gt;Encountered strange behavior or an error? Here are some things to try before you
shoot off that bug report:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Run &lt;code&gt;bin/doom refresh&lt;/code&gt;. This ensures Doom is properly set up and its autoloads
files are up-to-date.&lt;/li&gt;
&lt;li&gt;If you have byte-compiled your config (with &lt;code&gt;bin/doom compile&lt;/code&gt;), see if
&lt;code&gt;bin/doom clean&lt;/code&gt; makes the issue go away. Never debug issues with a
byte-compiled config, it will make your job harder.&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;bin/doom doctor&lt;/code&gt; to detect common issues in your development environment.&lt;/li&gt;
&lt;li&gt;Search Doom's issue tracker for mention of any error messages you've received.&lt;/li&gt;
&lt;li&gt;&lt;a href="docs/faq.org"&gt;Visit our FAQ&lt;/a&gt; to see if your issue is listed.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If all else fails, &lt;a href="https://github.com/hlissner/doom-emacs/issues/new"&gt;file that bug report&lt;/a&gt;! Please include the
behavior you've observed, the behavior you expected, and any error messages or
warnings logged to the *Messages* buffer (can be opened with &lt;kbd&gt;SPC h
e&lt;/kbd&gt; or &lt;code&gt;M-x view-echo-area-messages&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;It's a great help if you included a backtrace with errors, i.e. &lt;code&gt;M-x toggle-debug-on-error&lt;/code&gt; then recreating the error(s).&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-contributing" class="anchor" aria-hidden="true" href="#contributing"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contributing&lt;/h2&gt;
&lt;p&gt;Doom (and my Emacs work in general) is a labor of love and incurable madness,
done on my spare time. If you'd like to support my work, there are many things
you can do to help; I welcome any contribution!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I love pull requests and bug reports. Check out the &lt;a href="docs/contributing.org"&gt;Contributing
Guidelines&lt;/a&gt; to find out how you can help out.&lt;/li&gt;
&lt;li&gt;I welcome Elisp pointers! Don't hesitate to &lt;a href="https://github.com/hlissner/doom-emacs/issues/new"&gt;tell me my Elisp-fu
sucks&lt;/a&gt; (but please tell me why).&lt;/li&gt;
&lt;li&gt;Hop on &lt;a href="https://discord.gg/qvGgnVx" rel="nofollow"&gt;our Discord server&lt;/a&gt; and say hi! Help others out, hang out
or talk to me about Emacs, or gamedev, or programming, machine learning,
physics, pixel art, anime, gaming -- anything you like. Nourish this lonely
soul!&lt;/li&gt;
&lt;li&gt;If you'd like to support my work financially, consider buying me a drink
through &lt;a href="https://liberapay.com/hlissner/donate" rel="nofollow"&gt;liberapay&lt;/a&gt; or &lt;a href="https://paypal.me/henriklissner/10" rel="nofollow"&gt;paypal&lt;/a&gt;. Donations are a
great help. My work here contends with studies, ventures in indie gamedev, and
my freelance work.&lt;/li&gt;
&lt;/ul&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>hlissner</author><guid isPermaLink="false">https://github.com/hlissner/doom-emacs</guid><pubDate>Sat, 01 Feb 2020 00:01:00 GMT</pubDate></item><item><title>emacs-lsp/lsp-mode #2 in Emacs Lisp, This month</title><link>https://github.com/emacs-lsp/lsp-mode</link><description>&lt;p&gt;&lt;i&gt;Emacs client/library for the Language Server Protocol&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="org" data-path="README.org"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;p&gt;&lt;a href="https://melpa.org/#/lsp-mode" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/9af67d09707b47dd26115a48505d481f9dcdd805/68747470733a2f2f6d656c70612e6f72672f7061636b616765732f6c73702d6d6f64652d62616467652e737667" alt="https://melpa.org/packages/lsp-mode-badge.svg" data-canonical-src="https://melpa.org/packages/lsp-mode-badge.svg" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a href="https://stable.melpa.org/#/lsp-mode" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/7a2cc5cd5fb1a171dde8e45435a353f849853123/68747470733a2f2f737461626c652e6d656c70612e6f72672f7061636b616765732f6c73702d6d6f64652d62616467652e737667" alt="https://stable.melpa.org/packages/lsp-mode-badge.svg" data-canonical-src="https://stable.melpa.org/packages/lsp-mode-badge.svg" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a href="https://gitter.im/emacs-lsp/lsp-mode" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/40a1fe7a717b706a101e6e1d917dfdb3f422a8c3/68747470733a2f2f6261646765732e6769747465722e696d2f656d6163732d6c73702f6c73702d6d6f64652e737667" alt="https://badges.gitter.im/emacs-lsp/lsp-mode.svg" data-canonical-src="https://badges.gitter.im/emacs-lsp/lsp-mode.svg" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a href="https://travis-ci.org/emacs-lsp/lsp-mode" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/5674691682ca175709f1682ede1931f44a188aef/68747470733a2f2f7472617669732d63692e6f72672f656d6163732d6c73702f6c73702d6d6f64652e7376673f6272616e63683d6d6173746572" alt="https://travis-ci.org/emacs-lsp/lsp-mode.svg?branch=master" data-canonical-src="https://travis-ci.org/emacs-lsp/lsp-mode.svg?branch=master" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a href="https://coveralls.io/github/emacs-lsp/lsp-mode" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/536576b840965fd3ec331aeec141a1dc36469075/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f656d6163732d6c73702f6c73702d6d6f64652f62616467652e737667" alt="https://coveralls.io/repos/github/emacs-lsp/lsp-mode/badge.svg" data-canonical-src="https://coveralls.io/repos/github/emacs-lsp/lsp-mode/badge.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="examples/logo.png"&gt;&lt;img src="examples/logo.png" alt="examples/logo.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-language-server-protocol-support-for-emacs" class="anchor" aria-hidden="true" href="#language-server-protocol-support-for-emacs"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Language Server Protocol Support for Emacs&lt;/h1&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="examples/head.png"&gt;&lt;img src="examples/head.png" alt="examples/head.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-table-of-contents" class="anchor" aria-hidden="true" href="#table-of-contents"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Table of Contents&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="#language-server-protocol-support-for-emacs"&gt;Language Server Protocol Support for Emacs&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href="#why"&gt;Why?&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#overview"&gt;Overview&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#installation"&gt;Installation&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href="#install-via-melpa"&gt;Install via melpa&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href="#configuration"&gt;Configuration&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href="#install-language-server"&gt;Install language server&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href="#configure-lsp-mode"&gt;Configure lsp-mode&lt;/a&gt;
            &lt;ul&gt;
              &lt;li&gt;&lt;a href="#vanilla-emacs"&gt;Vanilla Emacs&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href="#spacemacs"&gt;Spacemacs&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href="#use-package"&gt;use-package&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href="#docker"&gt;Docker&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;&lt;a href="#how-does-it-work"&gt;How does it work?&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href="#supported-languages"&gt;Supported languages&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#commands"&gt;Commands&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href="#which-key-integration"&gt;which-key integration&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href="#settings"&gt;Settings&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#screenshots"&gt;Screenshots&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#extensions"&gt;Extensions&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href="#tramp"&gt;TRAMP&lt;/a&gt;
            &lt;ul&gt;
              &lt;li&gt;&lt;a href="#how-does-it-work-1"&gt;How does it work?&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href="#sample-configuration"&gt;Sample configuration&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href="#dealing-with-stderr"&gt;Dealing with stderr&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href="#limitations"&gt;Limitations&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href="#file-watches"&gt;File watches&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href="#contributions"&gt;Contributions&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href="#members"&gt;Members&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href="#troubleshooting"&gt;Troubleshooting&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#adding-support-for-languages"&gt;Adding support for languages&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href="#registering-server"&gt;Registering server&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href="#sections"&gt;Sections&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href="#faq"&gt;FAQ&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#see-also"&gt;See also&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-why" class="anchor" aria-hidden="true" href="#why"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Why?&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;g-emoji class="g-emoji" alias="heart" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2764.png"&gt;❤️&lt;/g-emoji&gt; &lt;b&gt;Community Driven&lt;/b&gt;&lt;/li&gt;
  &lt;li&gt;&lt;g-emoji class="g-emoji" alias="gem" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f48e.png"&gt;💎&lt;/g-emoji&gt; &lt;b&gt;Fully featured&lt;/b&gt; - supports &lt;b&gt;all&lt;/b&gt; features in Language Server Protocol v3.14.&lt;/li&gt;
  &lt;li&gt;&lt;g-emoji class="g-emoji" alias="rocket" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f680.png"&gt;🚀&lt;/g-emoji&gt; &lt;b&gt;Easy to configure&lt;/b&gt; - works out of the box and automatically upgrades if additional packages are present&lt;/li&gt;
  &lt;li&gt;&lt;g-emoji class="g-emoji" alias="star2" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f31f.png"&gt;🌟&lt;/g-emoji&gt; &lt;b&gt;Flexible&lt;/b&gt; - could be configured as full-blown IDE with flashy UI or minimal distraction free&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-overview" class="anchor" aria-hidden="true" href="#overview"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Overview&lt;/h2&gt;
&lt;p&gt;Client for &lt;a href="https://github.com/Microsoft/language-server-protocol/"&gt;Language Server Protocol&lt;/a&gt; (v3.14). &lt;a href="https://github.com/emacs-lsp/lsp-mode"&gt;lsp-mode&lt;/a&gt; aims to provide IDE-like experience by providing optional integration with the most popular Emacs packages like &lt;code&gt;company&lt;/code&gt;, &lt;code&gt;flycheck&lt;/code&gt; and &lt;code&gt;projectile&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Non-blocking asynchronous calls&lt;/li&gt;
  &lt;li&gt;Real-time Diagnostics/linting (via builtin &lt;code&gt;flymake&lt;/code&gt; when Emacs &amp;gt; 26, requires flymake&amp;gt;=1.0.5 or &lt;a href="https://github.com/flycheck/flycheck"&gt;flycheck&lt;/a&gt;/&lt;a href="https://github.com/emacs-lsp/lsp-ui"&gt;lsp-ui&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Code completion - using &lt;a href="https://github.com/tigersoldier/company-lsp"&gt;company-lsp&lt;/a&gt; or builtin &lt;code&gt;completion-at-point&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Hovers - using &lt;a href="https://github.com/emacs-lsp/lsp-ui"&gt;lsp-ui&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Code actions - using &lt;code&gt;lsp-execute-code-action&lt;/code&gt; or &lt;a href="https://github.com/emacs-lsp/lsp-ui"&gt;lsp-ui&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Code outline - using builtin &lt;a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Imenu.html" rel="nofollow"&gt;imenu&lt;/a&gt; or &lt;code&gt;helm-imenu&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Code navigation - using builtin &lt;a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Xref.html" rel="nofollow"&gt;xref&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Code lens (references/implementations) - using builtin &lt;a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Xref.html" rel="nofollow"&gt;xref&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Symbol highlights&lt;/li&gt;
  &lt;li&gt;Formatting&lt;/li&gt;
  &lt;li&gt;Semantic highlighting (as currently implemented by JDT LS and unreleased builds of clangd, cf. &lt;a href="https://github.com/microsoft/vscode-languageserver-node/pull/367"&gt;Semantic highlighting spec&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Debugger - &lt;a href="https://github.com/yyoncho/dap-mode/"&gt;dap-mode&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Helm integration - &lt;a href="https://github.com/emacs-lsp/helm-lsp/"&gt;helm-lsp&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Ivy integration - &lt;a href="https://github.com/emacs-lsp/lsp-ivy/"&gt;lsp-ivy&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Treemacs integration - &lt;a href="https://github.com/emacs-lsp/lsp-treemacs"&gt;lsp-treemacs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Semantic highlighting (as currently implemented by JDT LS and unreleased builds of clangd, cf. &lt;a href="https://github.com/microsoft/vscode-languageserver-node/pull/367"&gt;Semantic highlighting spec&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/justbur/emacs-which-key/"&gt;which-key&lt;/a&gt; integration for better discovery&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installation&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-install-via-melpa" class="anchor" aria-hidden="true" href="#install-via-melpa"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Install via melpa&lt;/h3&gt;
&lt;p&gt;The recommended way to install &lt;code&gt;lsp-mode&lt;/code&gt; is via &lt;code&gt;package.el&lt;/code&gt; - the built-in package manager in Emacs. &lt;code&gt;lsp-mode&lt;/code&gt; is available on the two major &lt;code&gt;package.el&lt;/code&gt; community maintained repos - &lt;a href="http://stable.melpa.org" rel="nofollow"&gt;MELPA Stable&lt;/a&gt; and &lt;a href="http://melpa.org" rel="nofollow"&gt;MELPA&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;M-x &lt;code&gt;package-install&lt;/code&gt; [RET] &lt;code&gt;lsp-mode&lt;/code&gt; [RET]&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-configuration" class="anchor" aria-hidden="true" href="#configuration"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Configuration&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-install-language-server" class="anchor" aria-hidden="true" href="#install-language-server"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Install language server&lt;/h3&gt;
&lt;p&gt;Check the table bellow with the list of supported servers and the corresponding instructions on how to install the server.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-configure-lsp-mode" class="anchor" aria-hidden="true" href="#configure-lsp-mode"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Configure lsp-mode&lt;/h3&gt;
&lt;h4&gt;&lt;a id="user-content-vanilla-emacs" class="anchor" aria-hidden="true" href="#vanilla-emacs"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Vanilla Emacs&lt;/h4&gt;
&lt;p&gt;You could go minimal and use &lt;code&gt;lsp-mode&lt;/code&gt; as it is without external packages with the built-in &lt;code&gt;flymake&lt;/code&gt; and &lt;code&gt;completion-at-point&lt;/code&gt; or you could install the following extensions for better experience:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;install &lt;a href="https://github.com/emacs-lsp/lsp-ui"&gt;lsp-ui&lt;/a&gt; for &lt;a href="https://github.com/flycheck/flycheck"&gt;flycheck&lt;/a&gt; integration and higher level UI modules.&lt;/li&gt;
  &lt;li&gt;install &lt;a href="https://github.com/tigersoldier/company-lsp"&gt;company-lsp&lt;/a&gt; if you want to use &lt;code&gt;company-mode&lt;/code&gt; for completion.&lt;/li&gt;
  &lt;li&gt;install &lt;a href="https://github.com/emacs-lsp/lsp-treemacs"&gt;lsp-treemacs&lt;/a&gt; for various three based UI controls (symbols, errors overview, call hierarchy, etc.)&lt;/li&gt;
  &lt;li&gt;install &lt;a href="https://github.com/emacs-lsp/helm-lsp"&gt;helm-lsp&lt;/a&gt; provides on type completion afternative of &lt;code&gt;xref-apropos&lt;/code&gt; using &lt;code&gt;helm&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;install &lt;a href="https://github.com/emacs-lsp/lsp-ivy"&gt;lsp-ivy&lt;/a&gt; provides on type completion afternative of &lt;code&gt;xref-apropos&lt;/code&gt; using &lt;code&gt;helm&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;install &lt;a href="https://github.com/emacs-lsp/dap-mode"&gt;dap-mode&lt;/a&gt; if your language is supported by the debugger.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; if you want to change prefix for lsp-mode keybindings.&lt;/span&gt;
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; lsp-keymap-prefix &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;s-l&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)

(&lt;span class="pl-c1"&gt;require&lt;/span&gt; &lt;span class="pl-c1"&gt;'lsp-mode&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;add-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;'XXX-mode-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;#&lt;span class="pl-c1"&gt;'lsp&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;where &lt;code&gt;XXX&lt;/code&gt; could be major mode like &lt;code&gt;python&lt;/code&gt;, &lt;code&gt;java&lt;/code&gt;, &lt;code&gt;c++&lt;/code&gt;. Alternatively, if you want to minimize you configuration you may use &lt;code&gt;prog-mode-hook&lt;/code&gt;. In case you do that, &lt;code&gt;lsp&lt;/code&gt; will try to start for each programming mode and echo a message when there is no client registered for the current mode or if the corresponding server is not present. In addition, &lt;code&gt;lsp-mode&lt;/code&gt; will automatically detect and configure &lt;a href="https://github.com/emacs-lsp/lsp-ui"&gt;lsp-ui&lt;/a&gt; and &lt;a href="https://github.com/tigersoldier/company-lsp"&gt;company-lsp&lt;/a&gt;. To turn off that behavior you could set &lt;code&gt;lsp-auto-configure&lt;/code&gt; to &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To defer LSP server startup (and DidOpen notifications) until the buffer is visible you can use &lt;code&gt;lsp-deferred&lt;/code&gt; instead of &lt;code&gt;lsp&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;add-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;'XXX-mode-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;#&lt;span class="pl-c1"&gt;'lsp-deferred&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content-spacemacs" class="anchor" aria-hidden="true" href="#spacemacs"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Spacemacs&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://github.com/emacs-lsp/lsp-mode"&gt;lsp-mode&lt;/a&gt; is included in spacemacs develop branch. Add &lt;code&gt;lsp&lt;/code&gt; to &lt;code&gt;dotspacemacs-configuration-layers&lt;/code&gt; and configure the language that you want to use to be backed by &lt;code&gt;lsp&lt;/code&gt; backend.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-use-package" class="anchor" aria-hidden="true" href="#use-package"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;use-package&lt;/h4&gt;
&lt;p&gt;Replace &lt;code&gt;(require 'lsp-mode)&lt;/code&gt; with the following if you use use-package.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; lsp-mode
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:init&lt;/span&gt; (&lt;span class="pl-k"&gt;setq&lt;/span&gt; lsp-keymap-prefix &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;s-l&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
  &lt;span class="pl-c1"&gt;:hook&lt;/span&gt; (&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; replace XXX-mode with concrete major-mode(e. g. python-mode)&lt;/span&gt;
         (XXX-mode &lt;span class="pl-k"&gt;.&lt;/span&gt; lsp)
         &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; if you want which-key integration&lt;/span&gt;
         (lsp-mode &lt;span class="pl-k"&gt;.&lt;/span&gt; lsp-enable-which-key-integration))
  &lt;span class="pl-c1"&gt;:commands&lt;/span&gt; lsp)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; optionally&lt;/span&gt;
(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; lsp-ui &lt;span class="pl-c1"&gt;:commands&lt;/span&gt; lsp-ui-mode)
(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; company-lsp &lt;span class="pl-c1"&gt;:commands&lt;/span&gt; company-lsp)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; if you are helm user&lt;/span&gt;
(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; helm-lsp &lt;span class="pl-c1"&gt;:commands&lt;/span&gt; helm-lsp-workspace-symbol)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; if you are ivy user&lt;/span&gt;
(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; lsp-ivy &lt;span class="pl-c1"&gt;:commands&lt;/span&gt; lsp-ivy-workspace-symbol)
(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; lsp-treemacs &lt;span class="pl-c1"&gt;:commands&lt;/span&gt; lsp-treemacs-errors-list)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; optionally if you want to use debugger&lt;/span&gt;
(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; dap-mode)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; (use-package dap-LANGUAGE) to load the dap adapter for your language&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; optional if you want which-key integration&lt;/span&gt;
(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; which-key
  &lt;span class="pl-c1"&gt;:config&lt;/span&gt;
  (which-key-mode)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To defer LSP server startup (and DidOpen notifications) until the buffer is visible you can use &lt;code&gt;lsp-deferred&lt;/code&gt; instead of &lt;code&gt;lsp&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; lsp-mode
  &lt;span class="pl-c1"&gt;:hook&lt;/span&gt; (XXX-mode &lt;span class="pl-k"&gt;.&lt;/span&gt; lsp-deferred)
  &lt;span class="pl-c1"&gt;:commands&lt;/span&gt; (lsp lsp-deferred))&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content-docker" class="anchor" aria-hidden="true" href="#docker"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Docker&lt;/h4&gt;
&lt;p&gt;Refer to &lt;a href="https://github.com/emacs-lsp/lsp-docker/"&gt;lsp-docker&lt;/a&gt; README which provide a guide how you can run &lt;code&gt;lsp-mode&lt;/code&gt; in &lt;code&gt;docker&lt;/code&gt; container.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-how-does-it-work" class="anchor" aria-hidden="true" href="#how-does-it-work"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;How does it work?&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;lsp-mode&lt;/code&gt; has predefined list of server configurations (loaded in &lt;code&gt;lsp-clients.el&lt;/code&gt;) containing a mapping from &lt;code&gt;major-mode&lt;/code&gt; to the server configuration or by using activation function. In addition to the default server configuration located in &lt;code&gt;lsp-clients.el&lt;/code&gt; there are few languages servers which require separate package(check &lt;a href="#supported-languages"&gt;Supported languages&lt;/a&gt;). When you open a file from a particular project &lt;code&gt;lsp-mode&lt;/code&gt; and call &lt;code&gt;lsp&lt;/code&gt; command &lt;code&gt;lsp-mode&lt;/code&gt; will look for server registrations able to handle current file. If there is such client &lt;code&gt;lsp-mode&lt;/code&gt; will look for the project root. If you open a file from the project for the first time you will be prompted to define the current project root. Once the project root is selected it is saved in &lt;code&gt;lsp-session&lt;/code&gt; file and it will be loaded the next time you start Emacs so you no longer will be asked for a project root when you open a file from that project. Later if you want to change the project root you may use &lt;code&gt;lsp-workspace-folder-remove&lt;/code&gt; to remove the project and call &lt;code&gt;lsp-workspace-folder-add&lt;/code&gt; to add the root. If you want to force starting a particular language server in a file you may use &lt;code&gt;C-u&lt;/code&gt; &lt;code&gt;M-x&lt;/code&gt; &lt;code&gt;lsp&lt;/code&gt; which will prompt you to select language server to start.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-supported-languages" class="anchor" aria-hidden="true" href="#supported-languages"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Supported languages&lt;/h2&gt;
&lt;p&gt;Some of the servers are directly supported by &lt;code&gt;lsp-mode&lt;/code&gt; by requiring
  &lt;code&gt;lsp-clients.el&lt;/code&gt; while others require installing additional packages which provide
  server specific functionality.&lt;/p&gt;
&lt;table&gt;
  &lt;tbody&gt;&lt;tr&gt;&lt;th&gt;Language&lt;/th&gt;&lt;th&gt;Language Server&lt;/th&gt;&lt;th&gt;Built-in&lt;/th&gt;&lt;th&gt;Installation command&lt;/th&gt;&lt;th&gt;Debugger&lt;/th&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Ada&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/AdaCore/ada_language_server"&gt;ada_language_server&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/AdaCore/ada_language_server#install"&gt;Installation instructions&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes (gdb)&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Angular&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/angular/vscode-ng-language-service/"&gt;vscode-ng-language-service&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/emacs-lsp/lsp-mode/wiki/Install-Angular-Language-server"&gt;Installation instructions&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Not relevant&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Bash&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/mads-hartmann/bash-language-server"&gt;bash-language-server&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;npm i -g bash-language-server&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;C++&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/MaskRay/ccls"&gt;ccls&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/MaskRay/emacs-ccls"&gt;emacs-ccls&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/MaskRay/ccls"&gt;ccls&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes (gdb or lldb)&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;C++&lt;/td&gt;&lt;td&gt;&lt;a href="https://clang.llvm.org/extra/clangd.html" rel="nofollow"&gt;clangd&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://clang.llvm.org/extra/clangd.html" rel="nofollow"&gt;clangd&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes (gdb or lldb)&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;C++&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/cquery-project/cquery"&gt;cquery&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/cquery-project/emacs-cquery"&gt;emacs-cquery&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/cquery-project/cquery"&gt;cquery&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes (gdb or lldb)&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;C#&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/OmniSharp/omnisharp-roslyn"&gt;OmniSharp-Roslyn&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/OmniSharp/omnisharp-roslyn"&gt;OmniSharp-Roslyn&lt;/a&gt;&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Clojure&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/snoe/clojure-lsp"&gt;clojure-lsp&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/snoe/clojure-lsp"&gt;clojure-lsp&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Crystal&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/crystal-lang-tools/scry"&gt;scry&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/crystal-lang-tools/scry"&gt;scry&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;CSS/LessCSS/SASS/SCSS&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/vscode-langservers/vscode-css-languageserver-bin"&gt;css&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;npm install -g vscode-css-languageserver-bin&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Dart&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/dart-lang/sdk/blob/master/pkg/analysis_server/tool/lsp_spec/README.md"&gt;dart_analysis_server&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;built into dart-sdk&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Dhall&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/dhall-lang/dhall-haskell/tree/master/dhall-lsp-server"&gt;dhall-lsp-server&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/dhall-lang/dhall-haskell/tree/master/dhall-lsp-server#installation"&gt;Installation instructions&lt;/a&gt;&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Dockerfile&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/rcjsuen/dockerfile-language-server-nodejs"&gt;dockerfile-language-server-nodejs&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;npm install -g dockerfile-language-server-nodejs&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Dart&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/natebosch/dart_language_server"&gt;dart_language_server&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;pub global activate dart_language_server&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Elixir&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/JakeBecker/elixir-ls"&gt;elixir-ls&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/JakeBecker/elixir-ls"&gt;elixir-ls&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Elm&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/elm-tooling/elm-language-server"&gt;elmLS&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;npm i -g @elm-tooling/elm-language-server, or clone the repository and follow installation instructions&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Erlang&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/erlang-ls/erlang_ls"&gt;erlang_ls&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/erlang-ls/erlang_ls"&gt;erlang_ls&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Eslint&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/Microsoft/vscode-eslint"&gt;eslint&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/emacs-lsp/lsp-mode/wiki/LSP-ESlint-integration"&gt;LSP ESLint Guide&lt;/a&gt;&lt;/td&gt;&lt;td&gt;N/A&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;F#&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/fsharp/FsAutoComplete"&gt;fsautocomplete&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Automatic by &lt;a href="https://github.com/emacs-lsp/lsp-mode/blob/master/lsp-fsharp.el"&gt;lsp-fsharp&lt;/a&gt;&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Fortran&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/hansec/fortran-language-server"&gt;fortran-language-server&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;pip install fortran-language-server&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Go&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/golang/tools/tree/master/gopls"&gt;gopls&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;code&gt;go get golang.org/x/tools/gopls@latest&lt;/code&gt; &lt;a href="https://github.com/golang/tools/blob/master/gopls/doc/user.md#installation"&gt;docs&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Go&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/saibing/bingo"&gt;bingo&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/saibing/bingo/wiki/Install"&gt;bingo&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Groovy&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/prominic/groovy-language-server"&gt;groovy-language-server&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/prominic/groovy-language-server"&gt;groovy-language-server&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Hack&lt;/td&gt;&lt;td&gt;&lt;a href="https://docs.hhvm.com/hhvm/" rel="nofollow"&gt;hhvm&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://docs.hhvm.com/hhvm/installation/introduction" rel="nofollow"&gt;hhvm&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;HTML&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/vscode-langservers/vscode-html-languageserver"&gt;html&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;npm install -g vscode-html-languageserver-bin&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Haskell&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/haskell/haskell-ide-engine"&gt;IDE engine&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/emacs-lsp/lsp-haskell"&gt;lsp-haskell&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/haskell/haskell-ide-engine"&gt;IDE engine&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Lua&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/EmmyLua/EmmyLua-LanguageServer"&gt;EmmyLua&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/emacs-lsp/lsp-mode/wiki/Install-EmmyLua-Language-server"&gt;Installation&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Java&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/eclipse/eclipse.jdt.ls"&gt;Eclipse JDT LS&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/emacs-lsp/lsp-java"&gt;lsp-java&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Automatic by &lt;a href="https://github.com/emacs-lsp/lsp-java"&gt;lsp-java&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;JavaScript/TypeScript&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/theia-ide/typescript-language-server"&gt;typescript-language-server&lt;/a&gt;  (recommended)&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;npm i -g typescript-language-server; npm i -g typescript&lt;/td&gt;&lt;td&gt;Yes (Firefox/Chrome)&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;JavaScript/TypeScript&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/sourcegraph/javascript-typescript-langserver"&gt;javascript-typescript-stdio&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;npm i -g javascript-typescript-langserver&lt;/td&gt;&lt;td&gt;Yes (Firefox/Chrome)&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;JavaScript Flow&lt;/td&gt;&lt;td&gt;&lt;a href="https://flow.org" rel="nofollow"&gt;flow&lt;/a&gt; (add-on if working on a Flow file)&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://flow.org" rel="nofollow"&gt;flow&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes (Firefox/Chrome)&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Json&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/vscode-langservers/vscode-json-languageserver"&gt;vscode-json-languageserver&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Automatic or manual by &lt;code&gt;npm i -g vscode-json-languageserver&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Julia&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/non-Jedi/lsp-julia"&gt;lsp-julia&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/non-Jedi/lsp-julia"&gt;lsp-julia&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/JuliaEditorSupport/LanguageServer.jl"&gt;LanguageServer.jl&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Kotlin&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/fwcd/KotlinLanguageServer"&gt;kotlin-language-server&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/fwcd/KotlinLanguageServer"&gt;kotlin-language-server&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Nim&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/PMunch/nimlsp"&gt;nimlsp&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;code&gt;nimble install nimlsp&lt;/code&gt;&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;OCaml&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/ocaml-lsp/ocaml-language-server"&gt;ocaml-language-server&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/ocaml-lsp/ocaml-language-server"&gt;ocaml-language-server&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;OCaml&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/ocaml/ocaml-lsp"&gt;ocaml-lsp-server&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/ocaml/ocaml-lsp"&gt;ocaml-lsp-server&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;PHP(recommended)&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/bmewburn/vscode-intelephense"&gt;intelephense&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;npm i intelephense -g&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;PHP&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/felixfbecker/php-language-server"&gt;php-language-server&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/felixfbecker/php-language-server"&gt;php-language-server&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Powershell&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/PowerShell/PowerShellEditorServices"&gt;PowerShellEditorServices&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Automatic&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Python&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/palantir/python-language-server"&gt;pyls&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;pip install ‘python-language-server[all]’&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Python(Microsoft)&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/Microsoft/python-language-server"&gt;Microsoft Python Language Server&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/emacs-lsp/lsp-python-ms"&gt;lsp-python-ms&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/emacs-lsp/lsp-python-ms"&gt;lsp-python-ms&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;R&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/REditorSupport/languageserver"&gt;languageserver&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;install.packages(“languageserver”)&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Ruby&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/castwide/solargraph"&gt;solargraph&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;gem install solargraph&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Rust&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/rust-lang/rls"&gt;rls&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/rust-lang/rls"&gt;rls&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Rust&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/rust-analyzer/rust-analyzer"&gt;rust-analyzer&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/rust-analyzer/rust-analyzer#language-server-quick-start"&gt;rust-analyzer&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Scala&lt;/td&gt;&lt;td&gt;&lt;a href="https://scalameta.org/metals" rel="nofollow"&gt;Metals&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://scalameta.org/metals/docs/editors/emacs.html" rel="nofollow"&gt;Metals&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Swift&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/apple/sourcekit-lsp"&gt;sourcekit-LSP&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/emacs-lsp/lsp-sourcekit"&gt;lsp-sourcekit&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/apple/sourcekit-lsp"&gt;sourcekit-LSP&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes (via llvm debug adapter)&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Terraform&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/juliosueiras/terraform-lsp"&gt;terraform-lsp&lt;/a&gt;&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;Git clone outside of &lt;code&gt;$GOPATH&lt;/code&gt;; go install. (Requires go &amp;gt; 1.11)&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;TeX, LaTeX, etc.&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/astoff/digestif"&gt;Digestif&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;luarocks --server &lt;a href="http://luarocks.org/dev" rel="nofollow"&gt;http://luarocks.org/dev&lt;/a&gt; install digestif&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Verilog/SystemVerilog&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/suoto/hdl_checker"&gt;hdl_checker&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;pip install hdl-checker –upgrade&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;VHDL&lt;/td&gt;&lt;td&gt;&lt;a href="http://www.vhdltool.com" rel="nofollow"&gt;VHDL Tool&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Download from &lt;a href="http://www.vhdltool.com/download" rel="nofollow"&gt;http://www.vhdltool.com/download&lt;/a&gt;&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Vimscript&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/iamcco/vim-language-server"&gt;vim-language-server&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;npm install -g vim-language-server&lt;/td&gt;&lt;td&gt;n/a&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Vue&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/vuejs/vetur/tree/master/server"&gt;vue-language-server&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;npm install -g vue-language-server&lt;/td&gt;&lt;td&gt;Yes (Firefox/Chrome)&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;XML&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/angelozerr/lsp4xml"&gt;lsp4xml&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Download from &lt;a href="https://github.com/angelozerr/lsp4xml/releases"&gt;lsp4xml releases&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;YAML&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/redhat-developer/yaml-language-server"&gt;yaml&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;npm install -g yaml-language-server&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2&gt;&lt;a id="user-content-commands" class="anchor" aria-hidden="true" href="#commands"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Commands&lt;/h2&gt;
&lt;p&gt;When using &lt;code&gt;lsp-mode&lt;/code&gt; most of the features depend on server capabilities.
  &lt;code&gt;lsp-mode&lt;/code&gt; provides default bindings which are dynamically enabled/disabled
  based on the server functionality. All the commands are configured
  &lt;code&gt;lsp-command-map&lt;/code&gt; which is bound to &lt;code&gt;lsp-keymap-prefix&lt;/code&gt; (default &lt;code&gt;s-l&lt;/code&gt;).&lt;/p&gt;
&lt;table&gt;
  &lt;tbody&gt;&lt;tr&gt;&lt;th&gt;Keybinding&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;s-l s s&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Entry point for the server startup.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;s-l s r&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Restart language server&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;s-l s q&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Shutdown language server&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;s-l s d&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Describes current dession&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;s-l s D&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Disconnect the buffer from the language server keeping the server running.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;s-l = =&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Ask the server to format this document.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;s-l = r&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Ask the server to format the region, or if none is selected, the current line.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;s-l F a&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Add new project root to the list of workspace folders.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;s-l F r&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Remove project root from the list of workspace folders.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;s-l F b&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Remove project root from the workspace blacklist.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;s-l T l&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Toggle code-lens overlays.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;s-l T L&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Toggle client-server protocol logging.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;s-l T h&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Toggle symbol highlighting.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;s-l T S&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Toggle minor mode for showing information for current line in sideline. (requires &lt;code&gt;lsp-ui&lt;/code&gt;)&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;s-l T d&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Toggle minor mode for showing hover information in child frame. (requires &lt;code&gt;lsp-ui&lt;/code&gt;)&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;s-l T s&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Toggle signature auto activate.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;s-l T f&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Toggle on type formatting.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;s-l T T&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Toggle global minor mode for synchronizing &lt;code&gt;lsp-mode&lt;/code&gt; workspace folders and &lt;code&gt;treemacs&lt;/code&gt; projects. (requires &lt;code&gt;lsp-treemacs&lt;/code&gt;)&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;s-l g g&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Find definitions of the symbol under point.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;s-l g r&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Find references of the symbol under point.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;s-l g i&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Find implementations of the symbol under point.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;s-l g t&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Find type definitions of the symbol under point.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;s-l g d&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Find declarations of the symbol under point.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;s-l g h&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Show the incoming call hierarchy for the symbol at point. (requires &lt;code&gt;lsp-treemacs&lt;/code&gt;)&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;s-l g a&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Find all meaningful symbols that match pattern.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;s-l h h&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Display the type signature and documentation of the thing at&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;s-l h s&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Activate signature help.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;s-l h g&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Trigger display hover information popup and hide it on next typing.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;s-l r r&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Rename the symbol (and all references to it).&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;s-l r o&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Perform the source.organizeImports code action, if available.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;s-l a a&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Execute code action action.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;s-l a l&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Click lsp lens using ‘avy’ package.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;s-l a h&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Highlight symbol at point.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;s-l G g&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Peek definitions to the identifier at point. (requires &lt;code&gt;lsp-ui&lt;/code&gt;)&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;s-l G r&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Peek references to the identifier at point. (requires &lt;code&gt;lsp-ui&lt;/code&gt;)&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;s-l G i&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Peek implementation locations of the symbol at point. (requires &lt;code&gt;lsp-ui&lt;/code&gt;)&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;s-l G s&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Peek symbols in the worskpace. (requires &lt;code&gt;lsp-ui&lt;/code&gt;)&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3&gt;&lt;a id="user-content-which-key-integration" class="anchor" aria-hidden="true" href="#which-key-integration"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;which-key integration&lt;/h3&gt;
&lt;p&gt;To enable &lt;a href="https://github.com/justbur/emacs-which-key/"&gt;which-key&lt;/a&gt; integration put that in your config.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;with-eval-after-load&lt;/span&gt; &lt;span class="pl-c1"&gt;'lsp-mode&lt;/span&gt;
  (&lt;span class="pl-c1"&gt;add-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;'lsp-mode-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;#&lt;span class="pl-c1"&gt;'lsp-enable-which-key-integration&lt;/span&gt;&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="examples/which-key.png"&gt;&lt;img src="examples/which-key.png" alt="examples/which-key.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-settings" class="anchor" aria-hidden="true" href="#settings"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Settings&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;lsp-log-io&lt;/code&gt; - If non-nil, print all messages to and from the language server to &lt;code&gt;*lsp-log*&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-print-performance&lt;/code&gt; - If non-nil, print performance info. to &lt;code&gt;*lsp-log*&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-inhibit-message&lt;/code&gt; - If non-nil, inhibit the message echo via &lt;code&gt;inhibit-message&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-report-if-no-buffer&lt;/code&gt; - If non nil the errors will be reported even when the file is not open.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-keep-workspace-alive&lt;/code&gt; - If non nil keep workspace alive when the last workspace buffer is closed.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-enable-snippet&lt;/code&gt; - Enable/disable snippet completion support.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-auto-guess-root&lt;/code&gt; - Automatically guess the project root using projectile/project. Do &lt;b&gt;not&lt;/b&gt; use this setting unless you are familiar with &lt;code&gt;lsp-mode&lt;/code&gt; internals and you are sure that all of your projects are following &lt;code&gt;projectile=/=project.el&lt;/code&gt; conventions.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-restart&lt;/code&gt; - Defines how server exited event must be handled.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-session-file&lt;/code&gt; - File where session information is stored.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-auto-configure&lt;/code&gt; - Auto configure &lt;code&gt;lsp-mode&lt;/code&gt;. When set to t &lt;code&gt;lsp-mode&lt;/code&gt; will auto-configure &lt;code&gt;lsp-ui&lt;/code&gt; and &lt;code&gt;company-lsp&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-document-sync-method&lt;/code&gt; - How to sync the document with the language server.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-auto-execute-action&lt;/code&gt; - Auto-execute single action.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-eldoc-render-all&lt;/code&gt; - Display all of the info returned by &lt;code&gt;document/onHover&lt;/code&gt;. If this is nil, &lt;code&gt;eldoc&lt;/code&gt; will show only the symbol information.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-enable-completion-at-point&lt;/code&gt; - Enable &lt;code&gt;completion-at-point&lt;/code&gt; integration.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-enable-xref&lt;/code&gt; - Enable xref integration.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-prefer-flymake&lt;/code&gt; - If you prefer flycheck and &lt;code&gt;lsp-ui-flycheck&lt;/code&gt; is available, &lt;code&gt;(setq lsp-prefer-flymake nil)&lt;/code&gt;. If set to &lt;code&gt;:none&lt;/code&gt; neither of two will be enabled.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-enable-indentation&lt;/code&gt; - Indent regions using the file formatting functionality provided by the language server.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-enable-on-type-formatting&lt;/code&gt; - Enable &lt;code&gt;textDocument/onTypeFormatting&lt;/code&gt; integration.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-before-save-edits&lt;/code&gt; - If non-nil, &lt;code&gt;lsp-mode&lt;/code&gt; will apply edits suggested by the language server before saving a document.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-imenu-show-container-name&lt;/code&gt; - Display the symbol’s container name in an imenu entry.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-imenu-container-name-separator&lt;/code&gt; - Separator string to use to separate the container name from the symbol while displaying imenu entries.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-imenu-sort-methods&lt;/code&gt; - How to sort the imenu items. The value is a list of &lt;code&gt;kind&lt;/code&gt;, &lt;code&gt;name&lt;/code&gt; or &lt;code&gt;position&lt;/code&gt;. Priorities are determined by the index of the element.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-response-timeout&lt;/code&gt; - Number of seconds to wait for a response from the language server before timing out.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-enable-file-watchers&lt;/code&gt; - If non-nil lsp-mode will watch the files in the workspace if the server has requested that.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-server-trace&lt;/code&gt; - Request trace mode on the language server.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-enable-semantic-highlighting&lt;/code&gt; - Enable experimental semantic highlighting support&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-enable-imenu&lt;/code&gt; - If non-nil, automatically enable imenu integration when server provides &lt;code&gt;textDocument/documentSymbol&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-signature-auto-activate&lt;/code&gt; - Auto activate signature when trigger char is pressed.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-signature-render-documentation&lt;/code&gt; - Include signature documentation in signature help.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-enable-text-document-color&lt;/code&gt; - Enable &lt;code&gt;textDocument/documentColor&lt;/code&gt; when server supports it.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-screenshots" class="anchor" aria-hidden="true" href="#screenshots"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Screenshots&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;RUST Completion with company-lsp
    &lt;a target="_blank" rel="noopener noreferrer" href="examples/completion.png"&gt;&lt;img src="examples/completion.png" alt="examples/completion.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Typescript references using lsp-ui
    &lt;a target="_blank" rel="noopener noreferrer" href="examples/references.png"&gt;&lt;img src="examples/references.png" alt="examples/references.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Debugging Python using dap-mode
    &lt;a target="_blank" rel="noopener noreferrer" href="examples/python_debugging.png"&gt;&lt;img src="examples/python_debugging.png" alt="examples/python_debugging.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Call hierarchy via ccls
    &lt;a target="_blank" rel="noopener noreferrer" href="examples/call-hierarchy-ccls.png"&gt;&lt;img src="examples/call-hierarchy-ccls.png" alt="examples/call-hierarchy-ccls.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Metals Doctor
    &lt;a target="_blank" rel="noopener noreferrer" href="examples/metals-doctor.png"&gt;&lt;img src="examples/metals-doctor.png" alt="examples/metals-doctor.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Semantic highlighting as provided by clangd (built from unreleased 10.0 branch). In this screenshot, all other font-locking has been disabled (hence no syntax highlighting of comments or basic keywords such as &lt;code&gt;auto&lt;/code&gt;)
    &lt;a target="_blank" rel="noopener noreferrer" href="examples/clangd_semantic_highlighting.png"&gt;&lt;img src="examples/clangd_semantic_highlighting.png" alt="examples/clangd_semantic_highlighting.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-extensions" class="anchor" aria-hidden="true" href="#extensions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Extensions&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-tramp" class="anchor" aria-hidden="true" href="#tramp"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TRAMP&lt;/h3&gt;
&lt;p&gt;LSP mode has support for tramp buffers with the following requirements:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The language server has to be present on the remote server.&lt;/li&gt;
  &lt;li&gt;Having multi folder language server (like &lt;a href="https://github.com/eclipse/eclipse.jdt.ls"&gt;Eclipse JDT LS&lt;/a&gt;) cannot have local and remote workspace folders.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a id="user-content-how-does-it-work-1" class="anchor" aria-hidden="true" href="#how-does-it-work-1"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;How does it work?&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;lsp-mode&lt;/code&gt; detects whether a particular file is located on remote machine and looks for a client which matches current file and it is marked as &lt;code&gt;:remote?&lt;/code&gt; t. Then &lt;code&gt;lsp-mode&lt;/code&gt; starts the client through tramp.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-sample-configuration" class="anchor" aria-hidden="true" href="#sample-configuration"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Sample configuration&lt;/h4&gt;
&lt;p&gt;Here it is example how you can configure python language server to work when using &lt;code&gt;TRAMP&lt;/code&gt;. Note that if you are trying to convert existing language server configuration you should copy all of it’s properties(e. g. &lt;code&gt;:request-handlers&lt;/code&gt;, &lt;code&gt;activation-fn&lt;/code&gt;, etc).&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(lsp-register-client
 (make-lsp-client &lt;span class="pl-c1"&gt;:new-connection&lt;/span&gt; (lsp-tramp-connection &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;binary-or-full-path&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
                  &lt;span class="pl-c1"&gt;:major-modes&lt;/span&gt; '(&lt;span class="pl-c1"&gt;python-mode&lt;/span&gt;)
                  &lt;span class="pl-c1"&gt;:remote?&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;
                  &lt;span class="pl-c1"&gt;:server-id&lt;/span&gt; &lt;span class="pl-c1"&gt;'pyls-remote&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content-dealing-with-stderr" class="anchor" aria-hidden="true" href="#dealing-with-stderr"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Dealing with stderr&lt;/h4&gt;
&lt;p&gt;With TRAMP, Emacs does not have an easy way to distinguish stdout and stderr, so when the underlying LSP process writes to stderr, it breaks the &lt;code&gt;lsp-mode&lt;/code&gt; parser. As a workaround, &lt;code&gt;lsp-mode&lt;/code&gt; is redirecting stderr to &lt;code&gt;/tmp/&amp;lt;process-name&amp;gt;-&amp;lt;id&amp;gt;~stderr&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-limitations" class="anchor" aria-hidden="true" href="#limitations"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Limitations&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-file-watches" class="anchor" aria-hidden="true" href="#file-watches"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;File watches&lt;/h3&gt;
&lt;p&gt;When some of the workspaces that are active in the current project requests file notifications via &lt;code&gt;workspace/didChangeWatchedFiles&lt;/code&gt; &lt;code&gt;lsp-mode&lt;/code&gt; will start monitoring each of the folders in the workspace for changes. In case your project contains a lot of files you might want to disable file monitoring via &lt;code&gt;lsp-enable-file-watchers&lt;/code&gt; (you may use dir-locals).&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-contributions" class="anchor" aria-hidden="true" href="#contributions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contributions&lt;/h2&gt;
&lt;p&gt;Contributions are very much welcome.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-members" class="anchor" aria-hidden="true" href="#members"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Members&lt;/h3&gt;
&lt;p&gt;Here it is a list of the current &lt;code&gt;lsp-mode&lt;/code&gt; members and what they are primary working on/responsible for.&lt;/p&gt;
&lt;table&gt;
  &lt;tbody&gt;&lt;tr&gt;&lt;th&gt;Member&lt;/th&gt;&lt;th&gt;Responsible for:&lt;/th&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;a href="https://github.com/TOTBWF"&gt;TOTBWF&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;F#&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;a href="https://github.com/brotzeit"&gt;brotzeit&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;Rust&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;a href="https://github.com/dsyzling"&gt;dsyzling&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;Scala&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;a href="https://github.com/kurnevsky"&gt;kurnevsky&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;Scala&lt;/code&gt; &amp;amp; &lt;code&gt;Rust&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;a href="https://github.com/seagle0128"&gt;seagle0128&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;Go&lt;/code&gt; &amp;amp; &lt;code&gt;MS Python Language Server&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;a href="https://github.com/sebastiansturm"&gt;sebastiansturm&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;lsp-mode&lt;/code&gt; core &amp;amp; &lt;code&gt;C++&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;a href="https://github.com/vibhavp"&gt;vibhavp&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;lsp-mode&lt;/code&gt; core&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;a href="https://github.com/yyoncho"&gt;yyoncho&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;lsp-mode&lt;/code&gt; core and &lt;code&gt;Java&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2&gt;&lt;a id="user-content-troubleshooting" class="anchor" aria-hidden="true" href="#troubleshooting"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Troubleshooting&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;set &lt;code&gt;lsp-log-io&lt;/code&gt; to &lt;code&gt;t&lt;/code&gt; to inspect communication between client and the server. Use &lt;code&gt;lsp-workspace-show-log&lt;/code&gt; to switch to the corresponding log buffer.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-describe-session&lt;/code&gt; will show the current projects roots + the started severs and allows inspecting the server capabilities.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="examples/describe.png"&gt;&lt;img src="examples/describe.png" alt="examples/describe.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-adding-support-for-languages" class="anchor" aria-hidden="true" href="#adding-support-for-languages"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Adding support for languages&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-registering-server" class="anchor" aria-hidden="true" href="#registering-server"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Registering server&lt;/h3&gt;
&lt;p&gt;Here it is the minimal configuration that is needed for new language server registration. Refer to the documentation of &lt;code&gt;lsp-client.el&lt;/code&gt; for the additional settings supported on registration time. &lt;code&gt;lsp-language-id-configuration&lt;/code&gt; must be updated to contain the corresponding mode -&amp;gt; language id - in this case &lt;code&gt;(python-mode . "python")&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;defvar&lt;/span&gt; &lt;span class="pl-en"&gt;lsp-language-id-configuration&lt;/span&gt;
  '(...
    (&lt;span class="pl-c1"&gt;python-mode&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;python&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    ...))
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; if you are adding the support for your language server in separate repo use&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; (add-to-list 'lsp-language-id-configuration '(python-mode . "python"))&lt;/span&gt;

(lsp-register-client
 (make-lsp-client &lt;span class="pl-c1"&gt;:new-connection&lt;/span&gt; (lsp-stdio-connection &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;pyls&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
                  &lt;span class="pl-c1"&gt;:major-modes&lt;/span&gt; '(&lt;span class="pl-c1"&gt;python-mode&lt;/span&gt;)
                  &lt;span class="pl-c1"&gt;:server-id&lt;/span&gt; &lt;span class="pl-c1"&gt;'pyls&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If the language server supports environment variables to control additional behavior, you can register that by using the &lt;code&gt;:environment-fn&lt;/code&gt; function, like the Bash language client does:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(lsp-register-client
 (make-lsp-client &lt;span class="pl-c1"&gt;:new-connection&lt;/span&gt; (lsp-stdio-connection '(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;bash-language-server&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;start&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
                  &lt;span class="pl-c1"&gt;:major-modes&lt;/span&gt; '(&lt;span class="pl-c1"&gt;sh-mode&lt;/span&gt;)
                  &lt;span class="pl-c1"&gt;:priority&lt;/span&gt; &lt;span class="pl-c1"&gt;-1&lt;/span&gt;
                  &lt;span class="pl-c1"&gt;:environment-fn&lt;/span&gt; (&lt;span class="pl-k"&gt;lambda&lt;/span&gt; ()
                                    ((&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;EXPLAINSHELL_ENDPOINT&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; lsp-bash-explainshell-endpoint)
                                     (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;HIGHLIGHT_PARSING_ERRORS&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; lsp-bash-highlight-parsing-errors)))
                  &lt;span class="pl-c1"&gt;:server-id&lt;/span&gt; &lt;span class="pl-c1"&gt;'bash-ls&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;lsp-bash-explainshell-endpoint&lt;/code&gt; and &lt;code&gt;lsp-bash-highlight-parsing-errors&lt;/code&gt; are language client &lt;code&gt;defcustom&lt;/code&gt; that expose supported server environment settings in a type-safe way. If you change any of those variables, restart the language server with &lt;code&gt;lsp-restart-workspace&lt;/code&gt; for the changes to be applied.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-sections" class="anchor" aria-hidden="true" href="#sections"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Sections&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;lsp-mode&lt;/code&gt; provides tools to bridge emacs &lt;code&gt;defcustom&lt;/code&gt; as a language configuration sections properties(see &lt;a href="https://microsoft.github.io/language-server-protocol/specification#workspace_configuration" rel="nofollow"&gt;specification workspace/configuration&lt;/a&gt;). In addition you may use &lt;code&gt;lsp-generate-settings&lt;/code&gt; from &lt;a href="https://github.com/emacs-lsp/lsp-mode/blob/master/scripts/lsp-generate-settings.el"&gt;Generate Settings script&lt;/a&gt; to generate &lt;code&gt;defcustom&lt;/code&gt; from &lt;code&gt;package.json&lt;/code&gt; VScode plugin manifest. Example:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;defcustom&lt;/span&gt; &lt;span class="pl-en"&gt;lsp-foo-language-server-property&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;bar&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Demo property.&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:group&lt;/span&gt; &lt;span class="pl-c1"&gt;'foo-ls&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:risky&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;)

(lsp-register-custom-settings '((&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;foo.section.property&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; lsp-foo-language-server-property)))

(lsp-configuration-section  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;foo&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt;  (("foo" ("settings" ("property" . "bar"))))&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-faq" class="anchor" aria-hidden="true" href="#faq"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;FAQ&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;How do I troubleshoot “Server FOO-LS:pid exited with status signal. Do you want to restart it? (y or n)”?
    &lt;ul&gt;
      &lt;li&gt;This message indicates that the language server has crashed for some
        reason. You may check the server stderr which is &lt;code&gt;*FOO-LS::stderr*&lt;/code&gt;. If
        you get this message on startup you may try to run the exact command that
        &lt;code&gt;lsp-mode&lt;/code&gt; is running in the terminal. You may find it in &lt;code&gt;*lsp-log*&lt;/code&gt;
        buffer.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;How to configure a server with local variables?
    &lt;ul&gt;
      &lt;li&gt;Add &lt;code&gt;lsp&lt;/code&gt; server call to &lt;code&gt;hack-local-variables-hook&lt;/code&gt; which runs right after the local variables are loaded.
        &lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;add-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;'hack-local-variables-hook&lt;/span&gt;
          (&lt;span class="pl-k"&gt;lambda&lt;/span&gt; () (&lt;span class="pl-k"&gt;when&lt;/span&gt; (&lt;span class="pl-c1"&gt;derived-mode-p&lt;/span&gt; &lt;span class="pl-c1"&gt;'XXX-mode&lt;/span&gt;) (lsp))))
        &lt;/pre&gt;&lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;I have multiple language servers registered for language FOO. Which one will be used when opening a project?
    &lt;ul&gt;
      &lt;li&gt;The one with highest priority wins. &lt;code&gt;lsp-clients.el&lt;/code&gt; predefined servers have
        priority -1, lower than external packages (priority 0 if unspecified). If a
        server is registered with &lt;code&gt;:add-on?&lt;/code&gt; flag set to &lt;code&gt;t&lt;/code&gt; it will be started in
        parallel to the other servers that are registered for the current mode.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;I have multiple language servers for language &lt;code&gt;FOO&lt;/code&gt; and I want to select the server per project, what can I do?
    &lt;ul&gt;
      &lt;li&gt;You may create &lt;code&gt;dir-local&lt;/code&gt; for each of the projects and specify list of
        &lt;code&gt;lsp-enabled-clients&lt;/code&gt;. This will narrow the list of the clients that are
        going to be tested for the project.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The completion does not work fine and inserts arguments and placeholders, what I am doing wrong?
    &lt;ul&gt;
      &lt;li&gt;Snippet support works only with &lt;code&gt;company-lsp&lt;/code&gt; so if you are using
        &lt;code&gt;completion-at-point&lt;/code&gt; the snippets won’t be expanded and you should
        either disable them by setting &lt;code&gt;lsp-enable-snippet&lt;/code&gt; to &lt;code&gt;nil&lt;/code&gt; or you
        should switch to &lt;code&gt;company-lsp&lt;/code&gt;. Note also that &lt;code&gt;company-tng&lt;/code&gt; frontend
        does not support snippet expansion(see &lt;a href="https://github.com/company-mode/company-mode/issues/891"&gt;company-mode#891&lt;/a&gt;)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;How to automatically follow &lt;code&gt;lsp-ui-log&lt;/code&gt;?
    &lt;ul&gt;
      &lt;li&gt;Go into the log buffer and execute the following snippet(source: &lt;a href="https://stackoverflow.com/questions/12663061/emacs-auto-scrolling-log-buffer" rel="nofollow"&gt;Emacs auto scrolling log buffer&lt;/a&gt;)&lt;/li&gt;
    &lt;/ul&gt;
    &lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;set&lt;/span&gt; (&lt;span class="pl-c1"&gt;make-local-variable&lt;/span&gt; &lt;span class="pl-c1"&gt;'window-point-insertion-type&lt;/span&gt;) &lt;span class="pl-c1"&gt;t&lt;/span&gt;)
    &lt;/pre&gt;&lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;I am getting “Package ‘spinner-1.7.3’ is unavailable” when trying to install &lt;code&gt;lsp-mode&lt;/code&gt;.
    &lt;ul&gt;
      &lt;li&gt;This is caused by GPG keys used by the ELPA package manager not being up
        to date. You may fix by installing: &lt;a href="https://elpa.gnu.org/packages/gnu-elpa-keyring-update.html" rel="nofollow"&gt;gnu-elpa-keyring-update&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Json completion doesn’t seem working?
    &lt;ul&gt;
      &lt;li&gt;The latest &lt;a href="https://www.npmjs.com/package/vscode-json-languageserver/v/1.2.2" rel="nofollow"&gt;vscode-json-languageserver&lt;/a&gt; is broken. You will need to install the earlier version of it &lt;code&gt;npm i vscode-json-languageserver@1.2.1&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The flycheck does not work in &lt;code&gt;typescript&lt;/code&gt;, &lt;code&gt;html&lt;/code&gt; and &lt;code&gt;javascript&lt;/code&gt; blocks in &lt;code&gt;vue-mode&lt;/code&gt;. How to fix that?
    &lt;ul&gt;
      &lt;li&gt;This is caused by the fact that &lt;code&gt;vue-mode&lt;/code&gt; uses multiple major modes in
        single file and the &lt;code&gt;lsp-ui&lt;/code&gt; checker may not associated with the major mode
        at point. You could fix that by adding the following lines to your config.
        &lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;with-eval-after-load&lt;/span&gt; &lt;span class="pl-c1"&gt;'lsp-ui-flycheck&lt;/span&gt;
  (&lt;span class="pl-k"&gt;mapc&lt;/span&gt; &lt;span class="pl-c1"&gt;'lsp-ui-flycheck-add-mode&lt;/span&gt; '(&lt;span class="pl-c1"&gt;typescript-mode&lt;/span&gt; js-mode css-mode vue-html-mode)))
        &lt;/pre&gt;&lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-see-also" class="anchor" aria-hidden="true" href="#see-also"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;See also&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://github.com/emacs-lsp/lsp-docker/"&gt;lsp-docker&lt;/a&gt; - provide docker image with preconfigured language servers with corresponding emacs configuration.&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/sebastiencs/company-box/"&gt;company-box&lt;/a&gt; - &lt;code&gt;company&lt;/code&gt; frontend with icons.&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/emacs-lsp/dap-mode"&gt;dap-mode&lt;/a&gt; - Debugger integration for &lt;code&gt;lsp-mode&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/joaotavora/eglot"&gt;eglot&lt;/a&gt; - An alternative minimal LSP implementation.&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/justbur/emacs-which-key/"&gt;which-key&lt;/a&gt; - Emacs package that displays available keybindings in popup&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/bbatsov/projectile/"&gt;projectile&lt;/a&gt; - Project Interaction Library for Emacs&lt;/li&gt;
&lt;/ul&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>emacs-lsp</author><guid isPermaLink="false">https://github.com/emacs-lsp/lsp-mode</guid><pubDate>Sat, 01 Feb 2020 00:02:00 GMT</pubDate></item><item><title>bbatsov/projectile #3 in Emacs Lisp, This month</title><link>https://github.com/bbatsov/projectile</link><description>&lt;p&gt;&lt;i&gt;Project Interaction Library for Emacs&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;p&gt;&lt;a href="http://www.gnu.org/licenses/gpl-3.0.txt" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/1ba3411d21f0105e0df26c7e29aa214578d377b5/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d47504c5f332d677265656e2e737667" alt="License GPL 3" data-canonical-src="https://img.shields.io/badge/license-GPL_3-green.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="http://melpa.org/#/projectile" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/0e90708b9c315c9786d078cbf46c05fc3133924f/687474703a2f2f6d656c70612e6f72672f7061636b616765732f70726f6a656374696c652d62616467652e737667" alt="MELPA" data-canonical-src="http://melpa.org/packages/projectile-badge.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="http://stable.melpa.org/#/projectile" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/828b1b4081f34ea857ec4119962e616e9a9d723b/687474703a2f2f737461626c652e6d656c70612e6f72672f7061636b616765732f70726f6a656374696c652d62616467652e737667" alt="MELPA Stable" data-canonical-src="http://stable.melpa.org/packages/projectile-badge.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://travis-ci.org/bbatsov/projectile" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/c8892d7c0feb3d33d66ea003f96e4b0ac52bf9f6/68747470733a2f2f7472617669732d63692e6f72672f62626174736f762f70726f6a656374696c652e706e673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/bbatsov/projectile.png?branch=master" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://www.patreon.com/bbatsov" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/451cb702b2e60e29c1a84aa24a17a1a8d313639e/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f70617472656f6e2d646f6e6174652d6f72616e67652e737667" alt="Patreon" data-canonical-src="https://img.shields.io/badge/patreon-donate-orange.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-synopsis" class="anchor" aria-hidden="true" href="#synopsis"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Synopsis&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Projectile&lt;/strong&gt; is a project interaction library for Emacs. Its goal is to
provide a nice set of features operating on a project level without
introducing external dependencies (when feasible). For instance -
finding project files has a portable implementation written in pure
Emacs Lisp without the use of GNU &lt;code&gt;find&lt;/code&gt; (but for performance sake an
indexing mechanism backed by external commands exists as well).&lt;/p&gt;
&lt;p&gt;Projectile tries to be practical - portability is great, but if some
external tools could speed up some task substantially and the tools
are available, Projectile will leverage them.&lt;/p&gt;
&lt;p&gt;This library provides easy project management and navigation. The
concept of a project is pretty basic - just a folder containing
special file. Currently &lt;code&gt;git&lt;/code&gt;, &lt;code&gt;mercurial&lt;/code&gt;, &lt;code&gt;darcs&lt;/code&gt; and &lt;code&gt;bazaar&lt;/code&gt; repos
are considered projects by default. So are &lt;code&gt;lein&lt;/code&gt;, &lt;code&gt;maven&lt;/code&gt;, &lt;code&gt;sbt&lt;/code&gt;,
&lt;code&gt;scons&lt;/code&gt;, &lt;code&gt;rebar&lt;/code&gt; and &lt;code&gt;bundler&lt;/code&gt; projects. If you want to mark a folder
manually as a project just create an empty &lt;code&gt;.projectile&lt;/code&gt; file in
it. Some of Projectile's features:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;jump to a file in project&lt;/li&gt;
&lt;li&gt;jump to files at point in project&lt;/li&gt;
&lt;li&gt;jump to a directory in project&lt;/li&gt;
&lt;li&gt;jump to a file in a directory&lt;/li&gt;
&lt;li&gt;jump to a project buffer&lt;/li&gt;
&lt;li&gt;jump to a test in project&lt;/li&gt;
&lt;li&gt;toggle between files with same names but different extensions (e.g. &lt;code&gt;.h&lt;/code&gt; &amp;lt;-&amp;gt; &lt;code&gt;.c/.cpp&lt;/code&gt;, &lt;code&gt;Gemfile&lt;/code&gt; &amp;lt;-&amp;gt; &lt;code&gt;Gemfile.lock&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;toggle between code and its test (e.g. &lt;code&gt;main.service.js&lt;/code&gt; &amp;lt;-&amp;gt; &lt;code&gt;main.service.spec.js&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;jump to recently visited files in the project&lt;/li&gt;
&lt;li&gt;switch between projects you have worked on&lt;/li&gt;
&lt;li&gt;kill all project buffers&lt;/li&gt;
&lt;li&gt;replace in project&lt;/li&gt;
&lt;li&gt;multi-occur in project buffers&lt;/li&gt;
&lt;li&gt;grep in project&lt;/li&gt;
&lt;li&gt;regenerate project etags or gtags (requires &lt;a href="https://github.com/leoliu/ggtags"&gt;ggtags&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;visit project in dired&lt;/li&gt;
&lt;li&gt;run make in a project with a single key chord&lt;/li&gt;
&lt;li&gt;check for dirty repositories&lt;/li&gt;
&lt;li&gt;toggle read-only mode for the entire project&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here's a glimpse of Projectile in action:&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="doc/screenshots/projectile.png"&gt;&lt;img src="doc/screenshots/projectile.png" alt="Projectile Screenshot" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can support my work on Projectile via
&lt;a href="https://www.paypal.me/bbatsov" rel="nofollow"&gt;PayPal&lt;/a&gt;,
&lt;a href="https://www.patreon.com/bbatsov" rel="nofollow"&gt;Patreon&lt;/a&gt; and
&lt;a href="https://salt.bountysource.com/teams/projectile" rel="nofollow"&gt;Salt&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-quickstart" class="anchor" aria-hidden="true" href="#quickstart"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Quickstart&lt;/h2&gt;
&lt;p&gt;The instructions that follow are meant to get you from zero to a running Projectile setup
in a minute.  See the
&lt;a href="https://docs.projectile.mx" rel="nofollow"&gt;official manual&lt;/a&gt; for (way) more
details.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installation&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;package.el&lt;/code&gt; is the built-in package manager in Emacs.&lt;/p&gt;
&lt;p&gt;Projectile is available on the two major &lt;code&gt;package.el&lt;/code&gt; community
maintained repos -
&lt;a href="http://stable.melpa.org" rel="nofollow"&gt;MELPA Stable&lt;/a&gt;
and &lt;a href="http://melpa.org" rel="nofollow"&gt;MELPA&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can install Projectile with the following command:&lt;/p&gt;
&lt;p&gt;&lt;kbd&gt;M-x&lt;/kbd&gt; &lt;code&gt;package-install&lt;/code&gt; &lt;kbd&gt;[RET]&lt;/kbd&gt; &lt;code&gt;projectile&lt;/code&gt; &lt;kbd&gt;[RET]&lt;/kbd&gt;&lt;/p&gt;
&lt;p&gt;Alternatively, users of Debian 9 or later or Ubuntu 16.04 or later may
simply &lt;code&gt;apt-get install elpa-projectile&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Finally add this to your Emacs config:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(projectile-mode &lt;span class="pl-c1"&gt;+1&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;define-key&lt;/span&gt; projectile-mode-map (&lt;span class="pl-c1"&gt;kbd&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;s-p&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;'projectile-command-map&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;define-key&lt;/span&gt; projectile-mode-map (&lt;span class="pl-c1"&gt;kbd&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-c p&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;'projectile-command-map&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Those keymap prefixes are just a suggestion. Feel free to put there whatever works best for you.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-basic-usage" class="anchor" aria-hidden="true" href="#basic-usage"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Basic Usage&lt;/h3&gt;
&lt;p&gt;Enable &lt;code&gt;projectile-mode&lt;/code&gt;, open a file in one of your projects and type a command such as &lt;kbd&gt;C-c p f&lt;/kbd&gt;.&lt;/p&gt;
&lt;p&gt;See the user manual for more details.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-caveats" class="anchor" aria-hidden="true" href="#caveats"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Caveats&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Some operations like search (grep) depend (presently) on external
utilities such as &lt;code&gt;find&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-known-issues" class="anchor" aria-hidden="true" href="#known-issues"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Known issues&lt;/h2&gt;
&lt;p&gt;Check out the project's
&lt;a href="https://github.com/bbatsov/projectile/issues?sort=created&amp;amp;direction=desc&amp;amp;state=open"&gt;issue list&lt;/a&gt;
a list of unresolved issues. By the way - feel free to fix any of them
and sent me a pull request. :-)&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-contributors" class="anchor" aria-hidden="true" href="#contributors"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contributors&lt;/h2&gt;
&lt;p&gt;Here's a &lt;a href="https://github.com/bbatsov/projectile/contributors"&gt;list&lt;/a&gt; of all the people who have contributed to the
development of Projectile.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-changelog" class="anchor" aria-hidden="true" href="#changelog"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Changelog&lt;/h2&gt;
&lt;p&gt;A fairly extensive changelog is available &lt;a href="CHANGELOG.md"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-license" class="anchor" aria-hidden="true" href="#license"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;License&lt;/h2&gt;
&lt;p&gt;Copyright © 2011-2020 Bozhidar Batsov and
&lt;a href="https://github.com/bbatsov/projectile/contributors"&gt;contributors&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Distributed under the GNU General Public License, version 3&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>bbatsov</author><guid isPermaLink="false">https://github.com/bbatsov/projectile</guid><pubDate>Sat, 01 Feb 2020 00:03:00 GMT</pubDate></item><item><title>hlissner/emacs-doom-themes #4 in Emacs Lisp, This month</title><link>https://github.com/hlissner/emacs-doom-themes</link><description>&lt;p&gt;&lt;i&gt;An opinionated pack of modern color-themes&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/a918642e7742aa7f5aae9e686f48e79bd1a96cb0/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f7461672f686c6973736e65722f656d6163732d646f6f6d2d7468656d65732e7376673f6c6162656c3d72656c65617365267374796c653d666c61742d737175617265"&gt;&lt;img src="https://camo.githubusercontent.com/a918642e7742aa7f5aae9e686f48e79bd1a96cb0/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f7461672f686c6973736e65722f656d6163732d646f6f6d2d7468656d65732e7376673f6c6162656c3d72656c65617365267374796c653d666c61742d737175617265" alt="Release tag" data-canonical-src="https://img.shields.io/github/tag/hlissner/emacs-doom-themes.svg?label=release&amp;amp;style=flat-square" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="http://melpa.org/#/doom-themes" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/621f359fdf4553c5252a571785de56a85d53010b/687474703a2f2f6d656c70612e6f72672f7061636b616765732f646f6f6d2d7468656d65732d62616467652e7376673f7374796c653d666c61742d737175617265" alt="MELPA" data-canonical-src="http://melpa.org/packages/doom-themes-badge.svg?style=flat-square" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://travis-ci.org/hlissner/emacs-doom-themes" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/987575e312ca7a4f68f417530468a5f6e190cccf/68747470733a2f2f7472617669732d63692e6f72672f686c6973736e65722f656d6163732d646f6f6d2d7468656d65732e7376673f6272616e63683d6d6173746572267374796c653d666c61742d737175617265" alt="Build Status" data-canonical-src="https://travis-ci.org/hlissner/emacs-doom-themes.svg?branch=master&amp;amp;style=flat-square" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="./LICENSE"&gt;&lt;img src="https://camo.githubusercontent.com/95e854794a291423fe200ec681d09ed63f9fadd1/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d677265656e2e7376673f7374796c653d666c61742d737175617265" alt="MIT" data-canonical-src="https://img.shields.io/badge/license-MIT-green.svg?style=flat-square" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-doom-themes" class="anchor" aria-hidden="true" href="#doom-themes"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;doom-themes&lt;/h1&gt;
&lt;p&gt;DOOM Themes is an opinionated UI plugin and pack of themes extracted from my
&lt;a href="https://github.com/hlissner/.emacs.d"&gt;emacs.d&lt;/a&gt;, inspired by some of my favorite color themes.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/hlissner/emacs-doom-themes/tree/screenshots"&gt;See the screenshots.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#theme-list"&gt;Theme list&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#features"&gt;Features&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#install"&gt;Install&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#doom-emacs"&gt;Doom Emacs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#manually"&gt;Manually&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#common-issues"&gt;Common Issues&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#contribute"&gt;Contribute&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-theme-list" class="anchor" aria-hidden="true" href="#theme-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Theme list&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Flagship themes
&lt;ul class="contains-task-list"&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; &lt;code&gt;doom-one&lt;/code&gt;: doom-themes' flagship theme, inspired by &lt;a href="http://atom.io" rel="nofollow"&gt;Atom&lt;/a&gt;'s One Dark themes&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; &lt;code&gt;doom-one-light&lt;/code&gt;: light version of doom-one (thanks to &lt;a href="https://github.com/ztlevi"&gt;ztlevi&lt;/a&gt;)&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; &lt;code&gt;doom-vibrant&lt;/code&gt;: a slightly more vibrant version of &lt;code&gt;doom-one&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Additional themes
&lt;ul class="contains-task-list"&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; &lt;code&gt;doom-acario-dark&lt;/code&gt;: an original dark theme (thanks to &lt;a href="https://github.com/gagbo"&gt;gagbo&lt;/a&gt;)&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; &lt;code&gt;doom-acario-light&lt;/code&gt;: an original light theme (thanks to &lt;a href="https://github.com/gagbo"&gt;gagbo&lt;/a&gt;)&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; &lt;code&gt;doom-city-lights&lt;/code&gt;: based on Atom's &lt;a href="http://citylights.xyz/" rel="nofollow"&gt;City lights&lt;/a&gt; (thanks to &lt;a href="https://github.com/fuxialexander"&gt;fuxialexander&lt;/a&gt;)&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; &lt;code&gt;doom-challenger-deep&lt;/code&gt;: based on Vim's &lt;a href="https://github.com/challenger-deep-theme/vim"&gt;Challenger deep&lt;/a&gt; theme (thanks to &lt;a href="https://github.com/fuxialexander"&gt;fuxialexander&lt;/a&gt;)&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; &lt;code&gt;doom-dark+&lt;/code&gt; ported from VS Code's &lt;a href="https://github.com/microsoft/vscode/blob/master/extensions/theme-defaults/themes/dark_plus.json"&gt;Dark+&lt;/a&gt; theme (thanks to &lt;a href="https://github.com/ema2159"&gt;ema2159&lt;/a&gt;)&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; &lt;code&gt;doom-dracula&lt;/code&gt;: an implementation of &lt;a href="https://draculatheme.com/" rel="nofollow"&gt;Dracula&lt;/a&gt; theme (thanks to &lt;a href="https://github.com/fuxialexander"&gt;fuxialexander&lt;/a&gt;)&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; &lt;code&gt;doom-fairy-floss&lt;/code&gt;: a candy colored Sublime theme by &lt;a href="https://sailorhg.github.io/fairyfloss/" rel="nofollow"&gt;sailorhg&lt;/a&gt; (thanks to &lt;a href="https://github.com/ema2159"&gt;ema2159&lt;/a&gt;)&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; &lt;code&gt;doom-gruvbox&lt;/code&gt;: adapted from Morhetz's &lt;a href="https://github.com/morhetz/gruvbox"&gt;Gruvbox&lt;/a&gt; (thanks to &lt;a href="https://github.com/JongW"&gt;JongW&lt;/a&gt;)&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; &lt;code&gt;doom-horizon&lt;/code&gt;: ported from VS Code's &lt;a href="https://github.com/jolaleye/horizon-theme-vscode"&gt;Horizon&lt;/a&gt; (thanks to &lt;a href="https://github.com/kenranunderscore"&gt;karetsu&lt;/a&gt;)&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; &lt;code&gt;doom-Iosvkem&lt;/code&gt;: adapted from &lt;a href="https://github.com/neutaaaaan/iosvkem"&gt;Iosvkem&lt;/a&gt; (thanks to &lt;a href="https://github.com/neutaaaaan"&gt;neutaaaaan&lt;/a&gt;)&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; &lt;code&gt;doom-laserwave&lt;/code&gt;: a clean 80's synthwave / outrun theme inspired by VS Code's &lt;a href="https://github.com/Jaredk3nt/laserwave"&gt;laserwave&lt;/a&gt; (thanks to &lt;a href="https://github.com/hyakt"&gt;hyakt&lt;/a&gt;)&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; &lt;code&gt;doom-manegarm&lt;/code&gt;: an original autumn-inspired dark theme (thanks to &lt;a href="https://github.com/kenranunderscore"&gt;kenranunderscore&lt;/a&gt;)&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; &lt;code&gt;doom-molokai&lt;/code&gt;: based on Textmate's monokai&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; &lt;code&gt;doom-moonlight&lt;/code&gt; ported from VS Code's &lt;a href="https://github.com/atomiks/moonlight-vscode-theme"&gt;Moonlight Theme&lt;/a&gt; (thanks to &lt;a href="https://github.com/Brettm12345"&gt;Brettm12345&lt;/a&gt;)&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; &lt;code&gt;doom-nord&lt;/code&gt;: dark variant of &lt;a href="https://www.nordtheme.com/" rel="nofollow"&gt;Nord&lt;/a&gt; (thanks to &lt;a href="https://github.com/fuxialexander"&gt;fuxialexander&lt;/a&gt;)&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; &lt;code&gt;doom-nord-light&lt;/code&gt;: light variant of &lt;a href="https://www.nordtheme.com/" rel="nofollow"&gt;Nord&lt;/a&gt; (thanks to &lt;a href="https://github.com/fuxialexander"&gt;fuxialexander&lt;/a&gt;)&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; &lt;code&gt;doom-nova&lt;/code&gt;: adapted from &lt;a href="https://trevordmiller.com/projects/nova" rel="nofollow"&gt;Nova&lt;/a&gt; (thanks to &lt;a href="https://github.com/bigardone"&gt;bigardone&lt;/a&gt;)&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; &lt;code&gt;doom-oceanic-next&lt;/code&gt;: adapted from &lt;a href="https://github.com/voronianski/oceanic-next-color-scheme"&gt;Oceanic Next&lt;/a&gt; theme (thanks to &lt;a href="https://github.com/juanwolf"&gt;juanwolf&lt;/a&gt;)&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; &lt;code&gt;doom-opera&lt;/code&gt;: an original dark theme (thanks to &lt;a href="https://github.com/jwintz"&gt;jwintz&lt;/a&gt;)&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; &lt;code&gt;doom-opera-light&lt;/code&gt;: an original light theme (thanks to &lt;a href="https://github.com/jwintz"&gt;jwintz&lt;/a&gt;)&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; &lt;code&gt;doom-outrun-electric&lt;/code&gt;: a neon colored theme inspired in VS Code's &lt;a href="https://github.com/samrap/outrun-theme-vscode"&gt;Outrun Electric&lt;/a&gt; (thanks to &lt;a href="https://github.com/ema2159"&gt;ema2159&lt;/a&gt;)&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; &lt;code&gt;doom-palenight&lt;/code&gt; adapted from &lt;a href="https://github.com/equinusocio/vsc-material-theme"&gt;Material Themes&lt;/a&gt; (thanks to &lt;a href="https://github.com/Brettm12345"&gt;Brettm12345&lt;/a&gt;)&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; &lt;code&gt;doom-peacock&lt;/code&gt;: based on Peacock from &lt;a href="http://daylerees.github.io/" rel="nofollow"&gt;daylerees' themes&lt;/a&gt; (thanks to &lt;a href="https://github.com/teesloane"&gt;teesloane&lt;/a&gt;)&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; &lt;code&gt;doom-snazzy&lt;/code&gt;: a dark theme inspired in Atom's &lt;a href="https://github.com/sindresorhus/hyper-snazzy"&gt;Hyper Snazzy&lt;/a&gt; (thanks to &lt;a href="https://github.com/ar1a"&gt;ar1a&lt;/a&gt;)&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; &lt;code&gt;doom-solarized-dark&lt;/code&gt;: dark variant of &lt;a href="http://ethanschoonover.com/solarized" rel="nofollow"&gt;Solarized&lt;/a&gt; (thanks to &lt;a href="https://github.com/ema2159"&gt;ema2159&lt;/a&gt;)&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; &lt;code&gt;doom-solarized-light&lt;/code&gt;: light variant of &lt;a href="http://ethanschoonover.com/solarized" rel="nofollow"&gt;Solarized&lt;/a&gt; (thanks to &lt;a href="https://github.com/fuxialexander"&gt;fuxialexander&lt;/a&gt;)&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; &lt;code&gt;doom-sourcerer&lt;/code&gt;: based on &lt;a href="https://github.com/xero/sourcerer.vim"&gt;Sourcerer&lt;/a&gt; (thanks to &lt;a href="https://github.com/defphil"&gt;defphil&lt;/a&gt;)&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; &lt;code&gt;doom-spacegrey&lt;/code&gt;: &lt;a href="http://kkga.github.io/spacegray/" rel="nofollow"&gt;I'm sure you've heard of it&lt;/a&gt; (thanks to &lt;a href="https://github.com/teesloane"&gt;teesloane&lt;/a&gt;)&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; &lt;code&gt;doom-tomorrow-day&lt;/code&gt;: &lt;a href="https://github.com/ChrisKempson/Tomorrow-Theme"&gt;Tomorrow&lt;/a&gt;'s light variant (thanks to &lt;a href="https://github.com/emacswatcher"&gt;emacswatcher&lt;/a&gt;)&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; &lt;code&gt;doom-tomorrow-night&lt;/code&gt;: one of the dark variants of &lt;a href="https://github.com/ChrisKempson/Tomorrow-Theme"&gt;Tomorrow&lt;/a&gt; (thanks to &lt;a href="https://github.com/emacswatcher"&gt;emacswatcher&lt;/a&gt;)&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; &lt;code&gt;doom-wilmersdorf&lt;/code&gt;: port of Ian Pan's &lt;a href="https://github.com/ianpan870102/wilmersdorf-emacs-theme"&gt;Wilmersdorf&lt;/a&gt; (thanks to &lt;a href="https://github.com/ema2159"&gt;ema2159&lt;/a&gt;)&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox"&gt; &lt;code&gt;doom-mono-dark&lt;/code&gt; / &lt;code&gt;doom-mono-light&lt;/code&gt;: a minimalistic, monochromatic theme&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox"&gt; &lt;code&gt;doom-tron&lt;/code&gt;: based on Tron Legacy from &lt;a href="http://daylerees.github.io/" rel="nofollow"&gt;daylerees' themes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-features" class="anchor" aria-hidden="true" href="#features"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;(doom-themes-visual-bell-config)&lt;/code&gt;: flash the mode-line when the Emacs bell
rings (i.e. an error occurs).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;(doom-themes-neotree-config)&lt;/code&gt;: a &lt;a href="https://github.com/jaypei/emacs-neotree"&gt;neotree&lt;/a&gt; theme that takes after &lt;a href="http://atom.io" rel="nofollow"&gt;Atom&lt;/a&gt;'s
file drawer, and is simpler than the built in icon theme in neotree
(&lt;a href="/../screenshots/doom-one.png"&gt;screenshot&lt;/a&gt;, &lt;a href="https://github.com/hlissner/emacs-doom-themes/wiki"&gt;more details&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;This requires &lt;code&gt;all-the-icons&lt;/code&gt;' fonts to be installed: &lt;code&gt;M-x all-the-icons-install-fonts&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;(doom-themes-treemacs-config)&lt;/code&gt;: two &lt;a href="https://github.com/Alexander-Miller/treemacs"&gt;treemacs&lt;/a&gt; icon themes, one that takes after
&lt;a href="http://atom.io" rel="nofollow"&gt;Atom&lt;/a&gt;'s, and a second more colorful implementation (WIP).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;(doom-themes-org-config)&lt;/code&gt;: corrects and improves some of org-mode's native
fontification.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Re-set &lt;code&gt;org-todo' &amp;amp; &lt;/code&gt;org-headline-done' faces to make them respect
underlying faces (i.e. don't override the :height or :background of
underlying faces).&lt;/li&gt;
&lt;li&gt;Make statistic cookies respect underlying faces.&lt;/li&gt;
&lt;li&gt;Fontify item bullets (make them stand out)&lt;/li&gt;
&lt;li&gt;Fontify item checkboxes (and when they're marked done), like TODOs that
are marked done.&lt;/li&gt;
&lt;li&gt;Fontify dividers/separators (5+ dashes)&lt;/li&gt;
&lt;li&gt;Fontify #hashtags and @at-tags, for personal convenience; see
&lt;code&gt;doom-org-special-tags&lt;/code&gt; to disable this.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Resources that may interest you:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To get dimmed sidebars and brighter source buffers (like in the
&lt;a href="https://github.com/hlissner/emacs-doom-themes/tree/screenshots"&gt;screenshots&lt;/a&gt;), see &lt;a href="https://github.com/hlissner/emacs-solaire-mode"&gt;solaire-mode&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;To get line number highlighting for &lt;code&gt;nlinum&lt;/code&gt;, set
&lt;code&gt;nlinum-highlight-current-line&lt;/code&gt; to non-nil (or see &lt;a href="https://melpa.org/#/hlinum" rel="nofollow"&gt;hlinum&lt;/a&gt; for &lt;code&gt;linum&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/AnthonyDiGirolamo"&gt;AnthonyDiGirolamo&lt;/a&gt; added doom-one (&lt;a href="https://github.com/AnthonyDiGirolamo/airline-themes/raw/master/screenshots/airline-doom-one-theme.png"&gt;screenshot&lt;/a&gt;) and
doom-molokai (&lt;a href="https://github.com/AnthonyDiGirolamo/airline-themes/raw/master/screenshots/airline-doom-molokai-theme.png"&gt;screenshot&lt;/a&gt;) skins to
&lt;a href="https://github.com/AnthonyDiGirolamo/airline-themes"&gt;airline-themes&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;I'm working on making my modeline more accessible. In the meantime, check
out &lt;a href="https://github.com/hlissner/.emacs.d/blob/master/modules/ui/doom-modeline/config.el"&gt;my mode-line configuration&lt;/a&gt; in my &lt;a href="https://github.com/hlissner/.emacs.d"&gt;emacs.d&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-install" class="anchor" aria-hidden="true" href="#install"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Install&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-doom-emacs" class="anchor" aria-hidden="true" href="#doom-emacs"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Doom Emacs&lt;/h3&gt;
&lt;p&gt;The built-in &lt;code&gt;:ui doom&lt;/code&gt; module installs &lt;code&gt;doom-themes&lt;/code&gt; for you, and loads
&lt;code&gt;doom-one&lt;/code&gt; by default. You can change the theme by changing the &lt;code&gt;doom-theme&lt;/code&gt;
variable from &lt;code&gt;~/.doom.d/config.el&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;setq&lt;/span&gt; doom-theme &lt;span class="pl-c1"&gt;'doom-city-lights&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or by loading it manually:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;load-theme&lt;/span&gt; &lt;span class="pl-c1"&gt;'doom-city-lights&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-manually" class="anchor" aria-hidden="true" href="#manually"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Manually&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;doom-themes&lt;/code&gt; is available on MELPA.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/raxod502/straight.el"&gt;Straight&lt;/a&gt; users can install it with
&lt;code&gt;M-x straight-use-package RET doom-themes&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;And package.el users: &lt;code&gt;M-x package-install RET doom-themes&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here is a example configuration for &lt;code&gt;doom-theme&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; doom-themes
  &lt;span class="pl-c1"&gt;:config&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Global settings (defaults)&lt;/span&gt;
  (&lt;span class="pl-k"&gt;setq&lt;/span&gt; doom-themes-enable-bold &lt;span class="pl-c1"&gt;t&lt;/span&gt;    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt; if nil, bold is universally disabled&lt;/span&gt;
        doom-themes-enable-italic &lt;span class="pl-c1"&gt;t&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt; if nil, italics is universally disabled&lt;/span&gt;
  (&lt;span class="pl-c1"&gt;load-theme&lt;/span&gt; &lt;span class="pl-c1"&gt;'doom-one&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;)

  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Enable flashing mode-line on errors&lt;/span&gt;
  (doom-themes-visual-bell-config)
  
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Enable custom neotree theme (all-the-icons must be installed!)&lt;/span&gt;
  (doom-themes-neotree-config)
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; or for treemacs users&lt;/span&gt;
  (&lt;span class="pl-k"&gt;setq&lt;/span&gt; doom-themes-treemacs-theme &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;doom-colors&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt; use the colorful treemacs theme&lt;/span&gt;
  (doom-themes-treemacs-config)
  
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Corrects (and improves) org-mode's native fontification.&lt;/span&gt;
  (doom-themes-org-config))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href="https://github.com/hlissner/emacs-doom-themes/wiki"&gt;The wiki contains details for customizing the neotree theme&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-common-issues" class="anchor" aria-hidden="true" href="#common-issues"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Common Issues&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If you use &lt;code&gt;nlinum&lt;/code&gt; or &lt;code&gt;linum&lt;/code&gt; in org-mode, the larger headline sizes in some
themes &lt;a href="https://github.com/hlissner/emacs-doom-themes/issues/86"&gt;could bleed into the line numbers&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Fix this by setting :height explicitly for your line number plugins, after
you've loaded the theme. e.g.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;let&lt;/span&gt; ((height (&lt;span class="pl-c1"&gt;face-attribute&lt;/span&gt; &lt;span class="pl-c1"&gt;'default&lt;/span&gt; &lt;span class="pl-c1"&gt;:height&lt;/span&gt;)))
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; for all linum/nlinum users&lt;/span&gt;
  (&lt;span class="pl-c1"&gt;set-face-attribute&lt;/span&gt; &lt;span class="pl-c1"&gt;'linum&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt; &lt;span class="pl-c1"&gt;:height&lt;/span&gt; height)
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; only for &lt;span class="pl-smi"&gt;`linum-relative'&lt;/span&gt; users:&lt;/span&gt;
  (&lt;span class="pl-c1"&gt;set-face-attribute&lt;/span&gt; &lt;span class="pl-c1"&gt;'linum-relative-current-face&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt; &lt;span class="pl-c1"&gt;:height&lt;/span&gt; height)
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; only for &lt;span class="pl-smi"&gt;`nlinum-relative'&lt;/span&gt; users:&lt;/span&gt;
  (&lt;span class="pl-c1"&gt;set-face-attribute&lt;/span&gt; &lt;span class="pl-c1"&gt;'nlinum-relative-current-face&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt; &lt;span class="pl-c1"&gt;:height&lt;/span&gt; height))&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-contribute" class="anchor" aria-hidden="true" href="#contribute"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contribute&lt;/h2&gt;
&lt;p&gt;I welcome contributions of any kind, be they pull requests, bug reports or elisp
pointers. Additional theme and plugin support requests are welcome too.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>hlissner</author><guid isPermaLink="false">https://github.com/hlissner/emacs-doom-themes</guid><pubDate>Sat, 01 Feb 2020 00:04:00 GMT</pubDate></item><item><title>emacs-evil/evil #5 in Emacs Lisp, This month</title><link>https://github.com/emacs-evil/evil</link><description>&lt;p&gt;&lt;i&gt;The extensible vi layer for Emacs.&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/emacs-evil/evil/master/doc/logo.png"&gt;&lt;img src="https://raw.githubusercontent.com/emacs-evil/evil/master/doc/logo.png" alt="An extensible vi layer for Emacs" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://travis-ci.org/emacs-evil/evil" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/9fc8dff9b4c535f17a789c81937dd32e38822c23/68747470733a2f2f7472617669732d63692e6f72672f656d6163732d6576696c2f6576696c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/emacs-evil/evil.svg?branch=master" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://melpa.org/#/evil" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/bd97222c6e281edeeb067bf6f5926b7c7b16519a/68747470733a2f2f6d656c70612e6f72672f7061636b616765732f6576696c2d62616467652e737667" alt="MELPA" data-canonical-src="https://melpa.org/packages/evil-badge.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://stable.melpa.org/#/evil" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/d508a703cde2d4c7f4ac64e5b4bb25d24161bf0c/68747470733a2f2f737461626c652e6d656c70612e6f72672f7061636b616765732f6576696c2d62616467652e737667" alt="MELPA Stable" data-canonical-src="https://stable.melpa.org/packages/evil-badge.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://evil.readthedocs.io/en/latest/?badge=latest" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/5e5f5413354f75f41ad51c9280a6d1bdace0b586/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f6576696c2f62616467652f3f76657273696f6e3d6c6174657374" alt="Documentation Status" data-canonical-src="https://readthedocs.org/projects/evil/badge/?version=latest" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://www.gnu.org/licenses/gpl-3.0" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/bf135a9cea09d0ea4bba410582c0e70ec8222736/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d47504c25323076332d626c75652e737667" alt="License: GPL v3" data-canonical-src="https://img.shields.io/badge/License-GPL%20v3-blue.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Evil is an &lt;strong&gt;e&lt;/strong&gt;xtensible &lt;strong&gt;vi&lt;/strong&gt; &lt;strong&gt;l&lt;/strong&gt;ayer
for &lt;a href="http://www.gnu.org/software/emacs/" rel="nofollow"&gt;Emacs&lt;/a&gt;. It emulates the main features
of &lt;a href="http://www.vim.org/" rel="nofollow"&gt;Vim&lt;/a&gt;, and provides facilities for writing custom
extensions. Also see our page on &lt;a href="http://emacswiki.org/emacs/Evil" rel="nofollow"&gt;EmacsWiki&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installation&lt;/h1&gt;
&lt;p&gt;See the
&lt;a href="https://evil.readthedocs.io/en/latest/overview.html#installation-via-package-el" rel="nofollow"&gt;official documentation&lt;/a&gt;
for installation instructions. We recommend using &lt;em&gt;package.el&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;As a quickstart, you can add the following code to your Emacs init
file.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Set up package.el to work with MELPA&lt;/span&gt;
(&lt;span class="pl-c1"&gt;require&lt;/span&gt; &lt;span class="pl-c1"&gt;'package&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;add-to-list&lt;/span&gt; &lt;span class="pl-c1"&gt;'package-archives&lt;/span&gt;
             '(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;melpa&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;https://melpa.org/packages/&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
(&lt;span class="pl-c1"&gt;package-initialize&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;package-refresh-contents&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Download Evil&lt;/span&gt;
(&lt;span class="pl-k"&gt;unless&lt;/span&gt; (&lt;span class="pl-c1"&gt;package-installed-p&lt;/span&gt; &lt;span class="pl-c1"&gt;'evil&lt;/span&gt;)
  (&lt;span class="pl-c1"&gt;package-install&lt;/span&gt; &lt;span class="pl-c1"&gt;'evil&lt;/span&gt;))

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Enable Evil&lt;/span&gt;
(&lt;span class="pl-c1"&gt;require&lt;/span&gt; &lt;span class="pl-c1"&gt;'evil&lt;/span&gt;)
(evil-mode &lt;span class="pl-c1"&gt;1&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-dependencies" class="anchor" aria-hidden="true" href="#dependencies"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Dependencies&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Evil requires Emacs 24.1 or later.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Evil requires &lt;a href="http://www.emacswiki.org/emacs/UndoTree" rel="nofollow"&gt;undo-tree.el&lt;/a&gt; in the
&lt;code&gt;load-path&lt;/code&gt; for linear undo and undo branches.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For the motions &lt;code&gt;g;&lt;/code&gt; &lt;code&gt;g,&lt;/code&gt; and for the last-change-register &lt;code&gt;.&lt;/code&gt;, Evil requires the
&lt;a href="https://github.com/emacs-evil/goto-chg"&gt;goto-chg.el&lt;/a&gt; package,
which provides the functions &lt;code&gt;goto-last-change&lt;/code&gt; and &lt;code&gt;goto-last-change-reverse&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For Emacs 24.1 and 24.2 Evil also requires
&lt;a href="https://elpa.gnu.org/packages/cl-lib.html" rel="nofollow"&gt;cl-lib&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Documentation&lt;/h1&gt;
&lt;p&gt;The latest version of the documentation is readable online
&lt;a href="https://evil.readthedocs.io/en/latest/index.html" rel="nofollow"&gt;here&lt;/a&gt;. It is also
available as
&lt;a href="https://readthedocs.org/projects/evil/downloads/pdf/latest/" rel="nofollow"&gt;PDF&lt;/a&gt; and
as &lt;a href="https://readthedocs.org/projects/evil/downloads/epub/latest/" rel="nofollow"&gt;EPUB&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-mailing-list" class="anchor" aria-hidden="true" href="#mailing-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Mailing list&lt;/h1&gt;
&lt;p&gt;Evil is discussed at the
&lt;a href="http://lists.ourproject.org/cgi-bin/mailman/listinfo/implementations-list" rel="nofollow"&gt;gmane.emacs.vim-emulation&lt;/a&gt;
mailing list.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-irc" class="anchor" aria-hidden="true" href="#irc"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;IRC&lt;/h1&gt;
&lt;p&gt;Visit us on &lt;code&gt;irc.freenode.net #evil-mode&lt;/code&gt;.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-contribution" class="anchor" aria-hidden="true" href="#contribution"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contribution&lt;/h1&gt;
&lt;p&gt;See
&lt;a href="https://github.com/emacs-evil/evil/blob/master/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt;
for guidelines for issues and pull requests.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>emacs-evil</author><guid isPermaLink="false">https://github.com/emacs-evil/evil</guid><pubDate>Sat, 01 Feb 2020 00:05:00 GMT</pubDate></item><item><title>emacs-mirror/emacs #6 in Emacs Lisp, This month</title><link>https://github.com/emacs-mirror/emacs</link><description>&lt;p&gt;&lt;i&gt;Mirror of GNU Emacs&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="" data-path="README"&gt;&lt;div class="plain"&gt;&lt;pre style="white-space: pre-wrap"&gt;Copyright (C) 2001-2020 Free Software Foundation, Inc.
See the end of the file for license conditions.


This directory tree holds version 28.0.50 of GNU Emacs, the extensible,
customizable, self-documenting real-time display editor.

The file INSTALL in this directory says how to build and install GNU
Emacs on various systems, once you have unpacked or checked out the
entire Emacs file tree.

See the file etc/NEWS for information on new features and other
user-visible changes in recent versions of Emacs.

The file etc/PROBLEMS contains information on many common problems that
occur in building, installing and running Emacs.

The file CONTRIBUTE contains information on contributing to Emacs as a
developer.

You may encounter bugs in this release.  If you do, please report
them; your bug reports are valuable contributions to the FSF, since
they allow us to notice and fix problems on machines we don't have, or
in code we don't use often.  Please send bug reports to the mailing
list bug-gnu-emacs@gnu.org.  If possible, use M-x report-emacs-bug.

See the "Bugs" section of the Emacs manual for more information on how
to report bugs.  (The file 'BUGS' in this directory explains how you
can find and read that section using the Info files that come with
Emacs.)  For a list of mailing lists related to Emacs, see
&amp;lt;&lt;a href="https://savannah.gnu.org/mail/?group=emacs" rel="nofollow"&gt;https://savannah.gnu.org/mail/?group=emacs&lt;/a&gt;&amp;gt;.  For the complete
list of GNU mailing lists, see &amp;lt;&lt;a href="https://lists.gnu.org/" rel="nofollow"&gt;https://lists.gnu.org/&lt;/a&gt;&amp;gt;.

The 'etc' subdirectory contains several other files, named in capital
letters, which you might consider looking at when installing GNU
Emacs.

The file 'configure' is a shell script to acclimate Emacs to the
oddities of your processor and operating system.  It creates the file
'Makefile' (a script for the 'make' program), which automates the
process of building and installing Emacs.  See INSTALL for more
detailed information.

The file 'configure.ac' is the input used by the autoconf program to
construct the 'configure' script.

The shell script 'autogen.sh' generates 'configure' and other files by
running Autoconf (which in turn uses GNU m4), and configures files in
the .git subdirectory if you are using Git.  If you want to use it,
you will need to install recent versions of these build tools.  This
should be needed only if you edit files like 'configure.ac' that
specify Emacs's autobuild procedure.

The file 'Makefile.in' is a template used by 'configure' to create
'Makefile'.

The file 'make-dist' is a shell script to build a distribution tar
file from the current Emacs tree, containing only those files
appropriate for distribution.  If you make extensive changes to Emacs,
this script will help you distribute your version to others.

There are several subdirectories:

'src'       holds the C code for Emacs (the Emacs Lisp interpreter and
            its primitives, the redisplay code, and some basic editing
            functions).
'lisp'      holds the Emacs Lisp code for Emacs (most everything else).
'leim'      holds the original source files for the generated files
            in lisp/leim.  These form the library of Emacs input methods,
            required to type international characters that can't be
            directly produced by your keyboard.
'lib'       holds source code for libraries used by Emacs and its utilities
'lib-src'   holds the source code for some utility programs for use by or
            with Emacs, like movemail and etags.
'lwlib'     holds the sources of the Lucid Widget Library used on X.
'oldXMenu'  source files from X11R2 XMenu library, used in non-toolkit builds.
'etc'       holds miscellaneous architecture-independent data files Emacs
            uses, like the tutorial text and tool bar images.
            The contents of the 'lisp', 'leim', 'info', and 'doc'
            subdirectories are architecture-independent too.
'info'      holds the Info documentation tree for Emacs.
'doc/emacs' holds the source code for the Emacs Manual.  If you modify the
            manual sources, you will need the 'makeinfo' program to produce
            an updated manual.  'makeinfo' is part of the GNU Texinfo
            package; you need a suitably recent version of Texinfo.
'doc/lispref'   holds the source code for the Emacs Lisp reference manual.
'doc/lispintro' holds the source code for the Introduction to Programming
                in Emacs Lisp manual.
'msdos'     holds configuration files for compiling Emacs under MS-DOS.
'nextstep'  holds instructions and some other files for compiling the
            Nextstep port of Emacs, for GNUstep and macOS Cocoa.
'nt'        holds code and documentation for building Emacs on MS-Windows.
'test'      holds tests for various aspects of Emacs's functionality.
'modules'   holds the modhelp.py helper script.
'admin'     holds files used by Emacs developers, and Unicode data files.
'build-aux' holds auxiliary files used during the build.
'm4'        holds Autoconf macros used for generating the configure script.

   Building Emacs on non-Posix platforms requires tools that aren't part
of the standard distribution of the OS.  The platform-specific README
files and installation instructions should list the required tools.


NOTE ON COPYRIGHT YEARS

In copyright notices where the copyright holder is the Free Software
Foundation, then where a range of years appears, this is an inclusive
range that applies to every year in the range.  For example: 2005-2008
represents the years 2005, 2006, 2007, and 2008.


This file is part of GNU Emacs.

GNU Emacs is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

GNU Emacs is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with GNU Emacs.  If not, see &amp;lt;&lt;a href="https://www.gnu.org/licenses/" rel="nofollow"&gt;https://www.gnu.org/licenses/&lt;/a&gt;&amp;gt;.
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</description><author>emacs-mirror</author><guid isPermaLink="false">https://github.com/emacs-mirror/emacs</guid><pubDate>Sat, 01 Feb 2020 00:06:00 GMT</pubDate></item><item><title>magit/magit #7 in Emacs Lisp, This month</title><link>https://github.com/magit/magit</link><description>&lt;p&gt;&lt;i&gt;It's Magit! A Git porcelain inside Emacs.&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;div align="center"&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/bddaa4a80ffc50dc7a2900ca62a97039a66a35fc/68747470733a2f2f6d616769742e76632f6173736574732f6d616769742d3136387832303070782e706e67"&gt;&lt;img src="https://camo.githubusercontent.com/bddaa4a80ffc50dc7a2900ca62a97039a66a35fc/68747470733a2f2f6d616769742e76632f6173736574732f6d616769742d3136387832303070782e706e67" data-canonical-src="https://magit.vc/assets/magit-168x200px.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/div&gt;
&lt;h2 align="center"&gt;&lt;a id="user-content-a-git-porcelain-inside-emacs" class="anchor" aria-hidden="true" href="#a-git-porcelain-inside-emacs"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;A Git Porcelain inside Emacs&lt;/h2&gt;
&lt;p align="center"&gt;
  &lt;a href="https://magit.vc" rel="nofollow"&gt;&lt;b&gt;homepage&lt;/b&gt;&lt;/a&gt; |
  &lt;a href="https://magit.vc/manual" rel="nofollow"&gt;&lt;b&gt;manual&lt;/b&gt;&lt;/a&gt; |
  &lt;a href="https://magit.vc/manual/magit/FAQ.html" rel="nofollow"&gt;&lt;b&gt;faq&lt;/b&gt;&lt;/a&gt; |
  &lt;a href="https://github.com/magit/magit/wiki"&gt;&lt;b&gt;wiki&lt;/b&gt;&lt;/a&gt; |
  &lt;a href="https://groups.google.com/forum/?fromgroups#!forum/magit" rel="nofollow"&gt;&lt;b&gt;mailing list&lt;/b&gt;&lt;/a&gt; |
  &lt;a href="https://emacs.stackexchange.com/questions/tagged/magit" rel="nofollow"&gt;&lt;b&gt;forum&lt;/b&gt;&lt;/a&gt; |
  &lt;a href="https://twitter.com/magit_emacs" rel="nofollow"&gt;&lt;b&gt;news&lt;/b&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;hr&gt;
&lt;p align="justify"&gt;
  Magit is an interface to the version control system
  &lt;a href="https://git-scm.com" rel="nofollow"&gt;Git&lt;/a&gt;, implemented as an
  &lt;a href="https://www.gnu.org/software/emacs" rel="nofollow"&gt;Emacs&lt;/a&gt; package.
  Magit aspires to be a complete Git porcelain.  While we cannot
  (yet) claim that Magit wraps and improves upon each and every Git
  command, it is complete enough to allow even experienced Git users
  to perform almost all of their daily version control tasks directly
  from within Emacs.  While many fine Git clients exist, only Magit
  and Git itself deserve to be called porcelains.
&lt;/p&gt;
&lt;hr&gt;
&lt;div align="center"&gt;
  Keeping its users &lt;a href="https://magit.vc/quotes" rel="nofollow"&gt;this excited&lt;/a&gt; is
  &lt;a href="https://magit.vc/stats/authors.html#cumulated_added_lines_of_code_per_author" rel="nofollow"&gt;
    a lot of work
  &lt;/a&gt;.
  If Magit makes you &lt;br&gt; more productive too,
  then &lt;b&gt;please consider making a donation&lt;/b&gt;.
&lt;/div&gt;
&lt;div align="center"&gt;
  &lt;em&gt;Thank you! — Jonas Bernoulli&lt;/em&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;div align="center"&gt;
  &lt;a href="https://github.com/sponsors/tarsius"&gt;
    &lt;img title="Donate using Github Sponsors" alt="Donate using Github Sponsors" src="https://camo.githubusercontent.com/149a9a6ef2aacd3393c62471339a4fefd9798b30/68747470733a2f2f6d616769742e76632f6173736574732f6769746875622d73706f6e736f72732d353070782e706e67" data-canonical-src="https://magit.vc/assets/github-sponsors-50px.png" style="max-width:100%;"&gt;&lt;/a&gt;
    
  &lt;a href="https://magit.vc/donate/#iban" rel="nofollow"&gt;
     &lt;img title="Donate using IBAN" alt="Donate using IBAN" src="https://camo.githubusercontent.com/b92dd41b2b92a121bc8dc3f72c8120927bd5da8b/68747470733a2f2f6d616769742e76632f6173736574732f6962616e2d353070782e706e67" data-canonical-src="https://magit.vc/assets/iban-50px.png" style="max-width:100%;"&gt;&lt;/a&gt;
    
  &lt;a href="https://magit.vc/donate/#zelle" rel="nofollow"&gt;
     &lt;img title="Donate using Zelle (USA bank transfer)" alt="Donate using Zelle (USA bank transfer)" src="https://camo.githubusercontent.com/c99ee781d095dc1864b0d24e908d98342f1a22dc/68747470733a2f2f6d616769742e76632f6173736574732f7a656c6c652d353070782e706e67" data-canonical-src="https://magit.vc/assets/zelle-50px.png" style="max-width:100%;"&gt;&lt;/a&gt;
    
  &lt;a href="https://www.paypal.me/JonasBernoulli/20" rel="nofollow"&gt;
    &lt;img title="Donate using PayPal" alt="Donate using PayPal" src="https://camo.githubusercontent.com/8d272c225e13cd2be472b15c4819fdbb2759d705/68747470733a2f2f6d616769742e76632f6173736574732f70617970616c2e706e67" data-canonical-src="https://magit.vc/assets/paypal.png" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;div align="center"&gt;
  Some alternative donation methods are &lt;a href="https://magit.vc/donate" rel="nofollow"&gt;available&lt;/a&gt;.
&lt;/div&gt;
&lt;hr&gt;
&lt;h1&gt;&lt;a id="user-content-getting-started" class="anchor" aria-hidden="true" href="#getting-started"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Getting Started&lt;/h1&gt;
&lt;p&gt;If you are new to Magit, then either one of the following two
articles should help understanding how it differs from other Git
clients.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://emacsair.me/2017/09/01/magit-walk-through" rel="nofollow"&gt;Visual Magit walk-through&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you are completely new to Magit, then this article is a good
visual introduction.&lt;/p&gt;
&lt;p&gt;Almost everything that you see in Magit can be acted on by pressing
some key, but that's not obvious from just seeing how Magit looks.
The screenshots and accompanying text of this article explain how to
perform a variety of actions on Magit's output.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://emacsair.me/2017/09/01/the-magical-git-interface" rel="nofollow"&gt;Magit, the magical Git interface&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Magit differs significantly from other Git interfaces, and its
advantages are not immediately obvious simply from looking at a few
screenshots as presented in the preceding article.&lt;/p&gt;
&lt;p&gt;This article discusses Magit's properties in somewhat more abstract
terms.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;a id="user-content-support" class="anchor" aria-hidden="true" href="#support"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Support&lt;/h1&gt;
&lt;p&gt;When something doesn't work as expected then please first see the
&lt;a href="https://magit.vc/manual/magit/FAQ.html" rel="nofollow"&gt;FAQ&lt;/a&gt;.  Then also try the list of &lt;a href="https://github.com/magit/magit/issues"&gt;open issues&lt;/a&gt; and use
the search box at the top of that page to find older related issues.
You should also consult the &lt;a href="https://magit.vc/manual" rel="nofollow"&gt;manual&lt;/a&gt; and ask a general-purpose
search engine.&lt;/p&gt;
&lt;p&gt;If that doesn't answer your question, then ask for help on the
&lt;strong&gt;&lt;a href="https://emacs.stackexchange.com/questions/tagged/magit" rel="nofollow"&gt;Emacs Stackexchange site&lt;/a&gt;&lt;/strong&gt; or the &lt;a href="https://groups.google.com/forum/?fromgroups#!forum/magit" rel="nofollow"&gt;mailing list&lt;/a&gt;.
We only use the GitHub issue tracker for feature requests and bug
reports, so please don't ask for help there.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-contributing" class="anchor" aria-hidden="true" href="#contributing"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contributing&lt;/h1&gt;
&lt;p&gt;To report bugs and suggest new feature use the
&lt;a href="https://github.com/magit/magit/issues"&gt;issue tracker&lt;/a&gt;.  If you have some code which you would like
to be merged, then open a &lt;a href="https://github.com/magit/magit/pulls"&gt;pull request&lt;/a&gt;. Please also see
&lt;a href="https://github.com/magit/magit/blob/master/.github/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-acknowledgments" class="anchor" aria-hidden="true" href="#acknowledgments"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Acknowledgments&lt;/h1&gt;
&lt;p&gt;Magit was started by &lt;a href="https://github.com/mvollmer"&gt;Marius Vollmer&lt;/a&gt;, and is now maintained
by &lt;a href="https://emacsair.me" rel="nofollow"&gt;Jonas Bernoulli&lt;/a&gt;, &lt;a href="https://github.com/kyleam"&gt;Kyle Meyer&lt;/a&gt;, and
&lt;a href="https://github.com/npostavs"&gt;Noam Postavsky&lt;/a&gt;.  Other former maintainers are
&lt;a href="http://dudebout.com" rel="nofollow"&gt;Nicolas Dudebout&lt;/a&gt;, &lt;a href="https://github.com/pjweisberg"&gt;Peter J. Weisberg&lt;/a&gt;,
&lt;a href="https://github.com/philjackson"&gt;Phil Jackson&lt;/a&gt;, &lt;a href="https://github.com/vanicat"&gt;Rémi Vanicat&lt;/a&gt;, and &lt;a href="http://www.hodique.info" rel="nofollow"&gt;Yann Hodique&lt;/a&gt;.
Many more people have &lt;a href="https://magit.vc/stats/authors.html" rel="nofollow"&gt;contributed code&lt;/a&gt; and suggested
features.&lt;/p&gt;
&lt;p&gt;Over the years a lot of people supported development financially,
including the &lt;a href="https://github.com/magit/magit/blob/master/Documentation/BACKERS.md"&gt;1987 backers&lt;/a&gt; of the 2017 crowdfunding
campaign.&lt;/p&gt;
&lt;p&gt;Thanks to all of you, may (the history of) the source be with you!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href="https://xkcd.com/859" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/1e16245d2267cba3325db3c5bb1ffe2de83e6a4f/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2532382d2532302532302532302d7265642e737667" alt="Paren Xkcb" data-canonical-src="https://img.shields.io/badge/%28-%20%20%20-red.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="http://www.gnu.org/licenses/gpl-3.0.txt" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/2213171f5fa7ce05c74b04b8df2a686d83a89123/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d47504c5f76332d677265656e2e737667" alt="GPL v3" data-canonical-src="https://img.shields.io/badge/license-GPL_v3-green.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://travis-ci.org/magit/magit" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/2c8a7ed255c7e504d2bd01e19bddbc4a7eba78b7/68747470733a2f2f7472617669732d63692e6f72672f6d616769742f6d616769742e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/magit/magit.svg?branch=master" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://melpa.org/#/magit" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/d1d4664f50bb53a1eeeb9956d299a21769b6fa15/68747470733a2f2f6d656c70612e6f72672f7061636b616765732f6d616769742d62616467652e737667" alt="Melpa" data-canonical-src="https://melpa.org/packages/magit-badge.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://stable.melpa.org/#/magit" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/64a094b6d437b55511a0131fa53f02fe3b29f472/68747470733a2f2f737461626c652e6d656c70612e6f72672f7061636b616765732f6d616769742d62616467652e737667" alt="Melpa Stable" data-canonical-src="https://stable.melpa.org/packages/magit-badge.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://xkcd.com/1597" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/08fde55330a7da6aba5b5eb03ce0c2c12d8eebee/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f786b63642d6769742d6f72616e67652e737667" alt="Git Xkcd" data-canonical-src="https://img.shields.io/badge/xkcd-git-orange.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://magit.vc/manual/magit" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e925ce7917bcabfba088c0dc5e93d9423ecca6d3/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f656965726c6567656e64652d576f6c6c6d696c63687361752d677265656e2e737667" alt="Eierlegende Wollmilchsau" data-canonical-src="https://img.shields.io/badge/eierlegende-Wollmilchsau-green.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://magit.vc/stats/authors.html#commits_per_author" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/37bb8d3c39bf72ad9d89662433a9a41d5b95d6f7/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f73776973732d6d6164652d7265642e7376673f636f6c6f72413d45313141323726636f6c6f72423d353535353535" alt="Swiss Made" data-canonical-src="https://img.shields.io/badge/swiss-made-red.svg?colorA=E11A27&amp;amp;colorB=555555" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://en.wikipedia.org/wiki/Browser_wars" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/7ab3143e0944c3109cd717d7dd8e111507d89b15/68747470733a2f2f6d616769742e76632f6173736574732f6e657473636170652d323070782e706e67" alt="Netscape" data-canonical-src="https://magit.vc/assets/netscape-20px.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>magit</author><guid isPermaLink="false">https://github.com/magit/magit</guid><pubDate>Sat, 01 Feb 2020 00:07:00 GMT</pubDate></item><item><title>abo-abo/swiper #8 in Emacs Lisp, This month</title><link>https://github.com/abo-abo/swiper</link><description>&lt;p&gt;&lt;i&gt;Ivy - a generic completion frontend for Emacs, Swiper - isearch with an overview, and more. Oh, man!&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;p&gt;&lt;a href="https://travis-ci.org/abo-abo/swiper" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/f13930412aac3d15215dad01d52b6c731292e8d1/68747470733a2f2f7472617669732d63692e6f72672f61626f2d61626f2f7377697065722e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/abo-abo/swiper.svg?branch=master" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;flexible, simple tools for minibuffer completion in Emacs&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This repository contains:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ivy&lt;/strong&gt;, a generic completion mechanism for Emacs.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Counsel&lt;/strong&gt;, a collection of Ivy-enhanced versions of common Emacs
commands.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Swiper&lt;/strong&gt;, an Ivy-enhanced alternative to isearch.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-ivy" class="anchor" aria-hidden="true" href="#ivy"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Ivy&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://melpa.org/#/ivy" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/0b07b95d4ee91c75105920569bc2d03f5f890271/68747470733a2f2f6d656c70612e6f72672f7061636b616765732f6976792d62616467652e737667" alt="MELPA" data-canonical-src="https://melpa.org/packages/ivy-badge.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://stable.melpa.org/#/ivy" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/0dc055002fc3da7f785236986eefb98108f34f51/68747470733a2f2f737461626c652e6d656c70612e6f72672f7061636b616765732f6976792d62616467652e737667" alt="MELPA Stable" data-canonical-src="https://stable.melpa.org/packages/ivy-badge.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ivy is a generic completion mechanism for Emacs. While it operates
similarly to other completion schemes such as &lt;code&gt;icomplete-mode&lt;/code&gt;, Ivy
aims to be more efficient, smaller, simpler, and smoother to use yet
highly customizable.&lt;/p&gt;
&lt;p&gt;To try Ivy, just call &lt;kbd&gt;M-x&lt;/kbd&gt; &lt;code&gt;ivy-mode&lt;/code&gt;. This will enable
generic Ivy completion, including specific completion for file and
buffer names.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installation&lt;/h3&gt;
&lt;p&gt;Install the &lt;code&gt;ivy&lt;/code&gt; package from MELPA / GNU ELPA.&lt;/p&gt;
&lt;p&gt;Users of Debian ≥10 (and derivatives such as Ubuntu ≥18.04) can
install Ivy, Counsel, and Swiper with &lt;code&gt;sudo apt install elpa-counsel&lt;/code&gt;.
To add Hydra support &lt;code&gt;sudo apt install elpa-ivy-hydra&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Documentation&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-manual" class="anchor" aria-hidden="true" href="#manual"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Manual&lt;/h3&gt;
&lt;p&gt;The manual is available as &lt;a href="https://oremacs.com/swiper/" rel="nofollow"&gt;HTML&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;After installing from MELPA, the manual is also available through the &lt;code&gt;(ivy)&lt;/code&gt; Info node.&lt;/p&gt;
&lt;p&gt;The source file for the Info page is
&lt;a href="https://github.com/abo-abo/swiper/blob/master/doc/ivy.org"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-wiki" class="anchor" aria-hidden="true" href="#wiki"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Wiki&lt;/h3&gt;
&lt;p&gt;Ivy and Swiper wiki is here: &lt;a href="https://github.com/abo-abo/swiper/wiki"&gt;the wiki&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-small-config-example" class="anchor" aria-hidden="true" href="#small-config-example"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Small config example&lt;/h3&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(ivy-mode &lt;span class="pl-c1"&gt;1&lt;/span&gt;)
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; ivy-use-virtual-buffers &lt;span class="pl-c1"&gt;t&lt;/span&gt;)
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; enable-recursive-minibuffers &lt;span class="pl-c1"&gt;t&lt;/span&gt;)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; enable this if you want &lt;span class="pl-smi"&gt;`swiper'&lt;/span&gt; to use it&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; (setq search-default-mode #'char-fold-to-regexp)&lt;/span&gt;
(&lt;span class="pl-c1"&gt;global-set-key&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-cce"&gt;\C&lt;/span&gt;-s&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'swiper&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;global-set-key&lt;/span&gt; (&lt;span class="pl-c1"&gt;kbd&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-c C-r&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;'ivy-resume&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;global-set-key&lt;/span&gt; (&lt;span class="pl-c1"&gt;kbd&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&amp;lt;f6&amp;gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;'ivy-resume&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;global-set-key&lt;/span&gt; (&lt;span class="pl-c1"&gt;kbd&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;M-x&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;'counsel-M-x&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;global-set-key&lt;/span&gt; (&lt;span class="pl-c1"&gt;kbd&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-x C-f&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;'counsel-find-file&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;global-set-key&lt;/span&gt; (&lt;span class="pl-c1"&gt;kbd&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&amp;lt;f1&amp;gt; f&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;'counsel-describe-function&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;global-set-key&lt;/span&gt; (&lt;span class="pl-c1"&gt;kbd&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&amp;lt;f1&amp;gt; v&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;'counsel-describe-variable&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;global-set-key&lt;/span&gt; (&lt;span class="pl-c1"&gt;kbd&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&amp;lt;f1&amp;gt; l&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;'counsel-find-library&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;global-set-key&lt;/span&gt; (&lt;span class="pl-c1"&gt;kbd&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&amp;lt;f2&amp;gt; i&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;'counsel-info-lookup-symbol&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;global-set-key&lt;/span&gt; (&lt;span class="pl-c1"&gt;kbd&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&amp;lt;f2&amp;gt; u&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;'counsel-unicode-char&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;global-set-key&lt;/span&gt; (&lt;span class="pl-c1"&gt;kbd&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-c g&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;'counsel-git&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;global-set-key&lt;/span&gt; (&lt;span class="pl-c1"&gt;kbd&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-c j&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;'counsel-git-grep&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;global-set-key&lt;/span&gt; (&lt;span class="pl-c1"&gt;kbd&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-c k&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;'counsel-ag&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;global-set-key&lt;/span&gt; (&lt;span class="pl-c1"&gt;kbd&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-x l&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;'counsel-locate&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;global-set-key&lt;/span&gt; (&lt;span class="pl-c1"&gt;kbd&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-S-o&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;'counsel-rhythmbox&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;define-key&lt;/span&gt; minibuffer-local-map (&lt;span class="pl-c1"&gt;kbd&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-r&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;'counsel-minibuffer-history&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note: parts of this config can be replaced by using &lt;code&gt;counsel-mode&lt;/code&gt;.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-counsel" class="anchor" aria-hidden="true" href="#counsel"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Counsel&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://melpa.org/#/counsel" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/0b1d9741244e07553b3e7edbdd74c5345481216c/68747470733a2f2f6d656c70612e6f72672f7061636b616765732f636f756e73656c2d62616467652e737667" alt="MELPA" data-canonical-src="https://melpa.org/packages/counsel-badge.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://stable.melpa.org/#/counsel" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/b829c1e7ce2494091aae0c6f5cbfc69325b62c03/68747470733a2f2f737461626c652e6d656c70612e6f72672f7061636b616765732f636f756e73656c2d62616467652e737667" alt="MELPA Stable" data-canonical-src="https://stable.melpa.org/packages/counsel-badge.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ivy-mode&lt;/code&gt; ensures that any Emacs command using
&lt;code&gt;completing-read-function&lt;/code&gt; uses ivy for completion.&lt;/p&gt;
&lt;p&gt;Counsel takes this further, providing versions of common Emacs
commands that are customised to make the best use of ivy. For example,
&lt;code&gt;counsel-find-file&lt;/code&gt; has some additional keybindings. Pressing
&lt;kbd&gt;DEL&lt;/kbd&gt; will move you to the parent directory.&lt;/p&gt;
&lt;p&gt;Enabling &lt;code&gt;counsel-mode&lt;/code&gt; remaps built-in Emacs functions that have
counsel replacements:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Emacs command&lt;/th&gt;
&lt;th&gt;Counsel equivalent&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;execute-extended-command&lt;/td&gt;
&lt;td&gt;counsel-M-x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;describe-bindings&lt;/td&gt;
&lt;td&gt;counsel-descbinds&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;describe-function&lt;/td&gt;
&lt;td&gt;counsel-describe-function&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;describe-variable&lt;/td&gt;
&lt;td&gt;counsel-describe-variable&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;apropos-command&lt;/td&gt;
&lt;td&gt;counsel-apropos&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;describe-face&lt;/td&gt;
&lt;td&gt;counsel-describe-face&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;list-faces-display&lt;/td&gt;
&lt;td&gt;counsel-faces&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;find-file&lt;/td&gt;
&lt;td&gt;counsel-find-file&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;find-library&lt;/td&gt;
&lt;td&gt;counsel-find-library&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;imenu&lt;/td&gt;
&lt;td&gt;counsel-imenu&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;load-library&lt;/td&gt;
&lt;td&gt;counsel-load-library&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;load-theme&lt;/td&gt;
&lt;td&gt;counsel-load-theme&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;yank-pop&lt;/td&gt;
&lt;td&gt;counsel-yank-pop&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;info-lookup-symbol&lt;/td&gt;
&lt;td&gt;counsel-info-lookup-symbol&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pop-to-mark-command&lt;/td&gt;
&lt;td&gt;counsel-mark-ring&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bookmark-jump&lt;/td&gt;
&lt;td&gt;counsel-bookmark&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1&gt;&lt;a id="user-content-swiper" class="anchor" aria-hidden="true" href="#swiper"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Swiper&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://melpa.org/#/swiper" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e4db0c28cf6c9e4de9529a34141a0ceeac953afc/68747470733a2f2f6d656c70612e6f72672f7061636b616765732f7377697065722d62616467652e737667" alt="MELPA" data-canonical-src="https://melpa.org/packages/swiper-badge.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://stable.melpa.org/#/swiper" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/3856d8e21ce5c31895a9cdd449701dbac9a5af58/68747470733a2f2f737461626c652e6d656c70612e6f72672f7061636b616765732f7377697065722d62616467652e737667" alt="MELPA Stable" data-canonical-src="https://stable.melpa.org/packages/swiper-badge.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Swiper is an alternative to isearch that uses ivy to show an overview
of all matches.&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/9501632a3893ff3c9ad7cf61ca09311ea5a570a7/68747470733a2f2f6f72656d6163732e636f6d2f646f776e6c6f61642f7377697065722e706e67"&gt;&lt;img src="https://camo.githubusercontent.com/9501632a3893ff3c9ad7cf61ca09311ea5a570a7/68747470733a2f2f6f72656d6163732e636f6d2f646f776e6c6f61642f7377697065722e706e67" alt="swiper.png" data-canonical-src="https://oremacs.com/download/swiper.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A helm version of swiper is also available:
&lt;a href="https://github.com/abo-abo/swiper-helm"&gt;swiper-helm&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-screenshots" class="anchor" aria-hidden="true" href="#screenshots"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Screenshots&lt;/h2&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/5a19441661db376c2b3403e7c2af8d6bb323fd2c/68747470733a2f2f6f72656d6163732e636f6d2f646f776e6c6f61642f6976792d7377697065722d312e706e67"&gt;&lt;img src="https://camo.githubusercontent.com/5a19441661db376c2b3403e7c2af8d6bb323fd2c/68747470733a2f2f6f72656d6163732e636f6d2f646f776e6c6f61642f6976792d7377697065722d312e706e67" alt="ivy-swiper-1.png" data-canonical-src="https://oremacs.com/download/ivy-swiper-1.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There's also a ten minute &lt;a href="https://www.youtube.com/watch?v=VvnJQpTFVDc" rel="nofollow"&gt;video demo&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-frequently-asked-questions" class="anchor" aria-hidden="true" href="#frequently-asked-questions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Frequently asked questions&lt;/h1&gt;
&lt;p&gt;Q: How do I enter an input that matches one of the candidates instead
of this candidate? Example: create a file &lt;code&gt;bar&lt;/code&gt; when a file
&lt;code&gt;barricade&lt;/code&gt; exists in the current directory.&lt;/p&gt;
&lt;p&gt;A: Press &lt;kbd&gt;C-M-j&lt;/kbd&gt;. Alternatively, you can make the prompt line selectable with &lt;code&gt;(setq ivy-use-selectable-prompt t)&lt;/code&gt;.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-contributing" class="anchor" aria-hidden="true" href="#contributing"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contributing&lt;/h1&gt;
&lt;p&gt;Please see the &lt;a href="https://github.com/abo-abo/swiper/blob/master/CONTRIBUTING.org"&gt;guidelines&lt;/a&gt; for reporting issues and opening pull requests.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>abo-abo</author><guid isPermaLink="false">https://github.com/abo-abo/swiper</guid><pubDate>Sat, 01 Feb 2020 00:08:00 GMT</pubDate></item><item><title>emacs-helm/helm #9 in Emacs Lisp, This month</title><link>https://github.com/emacs-helm/helm</link><description>&lt;p&gt;&lt;i&gt;Emacs incremental completion and selection narrowing framework&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;p align="center"&gt;
  &lt;a href="http://www.gnu.org/licenses/gpl-3.0.txt" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/1ba3411d21f0105e0df26c7e29aa214578d377b5/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d47504c5f332d677265656e2e737667" alt="License GPL 3" data-canonical-src="https://img.shields.io/badge/license-GPL_3-green.svg" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a href="https://melpa.org/#/helm" rel="nofollow"&gt;&lt;img alt="MELPA" src="https://camo.githubusercontent.com/3e081278b9039b90cae61589fad6c405cda673f7/68747470733a2f2f6d656c70612e6f72672f7061636b616765732f68656c6d2d62616467652e737667" data-canonical-src="https://melpa.org/packages/helm-badge.svg" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a href="https://stable.melpa.org/#/helm" rel="nofollow"&gt;&lt;img alt="MELPA Stable" src="https://camo.githubusercontent.com/8db93c3ec72ed944d37c5707873badc6aa2407e8/68747470733a2f2f737461626c652e6d656c70612e6f72672f7061636b616765732f68656c6d2d62616467652e737667" data-canonical-src="https://stable.melpa.org/packages/helm-badge.svg" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a href="https://travis-ci.org/emacs-helm/helm" rel="nofollow"&gt;&lt;img alt="Travis CI" src="https://camo.githubusercontent.com/890dd305784d191bd1ef1e49c5aef42b6f3258f4/68747470733a2f2f7472617669732d63692e6f72672f656d6163732d68656c6d2f68656c6d2e7376673f6272616e63683d6d6173746572" data-canonical-src="https://travis-ci.org/emacs-helm/helm.svg?branch=master" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;h1 align="center"&gt;&lt;a id="user-content-emacs-helm" class="anchor" aria-hidden="true" href="#emacs-helm"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Emacs-Helm&lt;/h1&gt;
&lt;p align="center"&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="https://avatars3.githubusercontent.com/u/1541688?v=3&amp;amp;s=200"&gt;&lt;img src="https://avatars3.githubusercontent.com/u/1541688?v=3&amp;amp;s=200" alt="Emacs-helm" title="" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;hr&gt;
&lt;p align="justify"&gt;
  &lt;b&gt;Helm&lt;/b&gt; is an Emacs framework for incremental completions and narrowing
  selections. It provides an easy-to-use API for developers wishing to build
  their own Helm applications in Emacs, powerful search tools and dozens of
  already built-in commands providing completion to almost everything.
  It is a must-have for anyone using Emacs as a main work environment.
  Helm has been widely adopted by many Emacs power-users.
  It is available in Melpa and can be easily installed from the Emacs package manager.
&lt;/p&gt;
&lt;hr&gt;
&lt;p align="center"&gt;
  &lt;a href="https://emacs-helm.github.io/helm/" rel="nofollow"&gt;&lt;b&gt;Homepage&lt;/b&gt;&lt;/a&gt; |
  &lt;a href="https://github.com/emacs-helm/helm/releases"&gt;&lt;b&gt;Downloads&lt;/b&gt;&lt;/a&gt; |
  &lt;a href="https://github.com/emacs-helm/helm/wiki#install"&gt;&lt;b&gt;Get started&lt;/b&gt;&lt;/a&gt; |
  &lt;a href="https://github.com/emacs-helm/helm/wiki"&gt;&lt;b&gt;Helm wiki&lt;/b&gt;&lt;/a&gt; |
  &lt;a href="https://github.com/emacs-helm/helm/wiki/FAQ"&gt;&lt;b&gt;FAQ&lt;/b&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;hr&gt;
&lt;p align="center"&gt;
  Maintaining Helm requires a &lt;a href="https://github.com/emacs-helm/helm/commits?author=thierryvolpiatto"&gt;&lt;b&gt;lot of work&lt;/b&gt;&lt;/a&gt;,
  which I have done voluntarily since 2011.&lt;br&gt;
  As it demands lots of my time it gets increasingly difficult&lt;br&gt;
  maintaining it without financial help.&lt;br&gt;
  Thanks to all the people that are helping or have helped Helm development,&lt;br&gt;
  but they are actually too few to continue serenely.&lt;br&gt;
  By the way, after the release of version 3.0 I will have to stop&lt;br&gt;
  developing Helm seriously until I get enough financial support,&lt;br&gt;
  only providing a minimal bugfix maintenance.&lt;br&gt;
  Thanks for your understanding&lt;br&gt;
  If you feel Helm is making your daily work easier,&lt;br&gt;
  &lt;b&gt;please consider making a donation.&lt;/b&gt;&lt;br&gt;
&lt;/p&gt;
&lt;p align="center"&gt;
  &lt;i&gt;Thank you! — Thierry Volpiatto&lt;/i&gt;
&lt;/p&gt;
&lt;div align="center"&gt;
  &lt;a href="https://www.paypal.me/tvolpiatto" rel="nofollow"&gt;
    &lt;img title="Donate with Paypal" alt="Donate with Paypal" src="https://github.com/emacs-helm/helm/raw/master/images/paypal.png?raw=true" style="max-width:100%;"&gt;&lt;/a&gt;
    
  &lt;a href="https://patreon.com/preview/30231724baf440fabe80d44d0ee77067" rel="nofollow"&gt;
    &lt;img title="Donate monthly using Patreon" alt="Donate monthly using Patreon" src="https://github.com/emacs-helm/helm/raw/master/images/patreon-25x.png?raw=true" style="max-width:100%;"&gt;&lt;/a&gt;
    
&lt;/div&gt;
&lt;hr&gt;
&lt;p align="center"&gt;
  Helm in action searching with &lt;a href="https://github.com/ggreer/the_silver_searcher"&gt;Grep Ag&lt;/a&gt;
                                   &lt;/p&gt;
&lt;p align="center"&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="https://github.com/emacs-helm/helm/blob/master/images/helm-grep-ag-persistent.png?raw=true"&gt;&lt;img src="https://github.com/emacs-helm/helm/raw/master/images/helm-grep-ag-persistent.png?raw=true" alt="Emacs-helm grep ag" title="" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>emacs-helm</author><guid isPermaLink="false">https://github.com/emacs-helm/helm</guid><pubDate>Sat, 01 Feb 2020 00:09:00 GMT</pubDate></item><item><title>jwiegley/use-package #10 in Emacs Lisp, This month</title><link>https://github.com/jwiegley/use-package</link><description>&lt;p&gt;&lt;i&gt;A use-package declaration for simplifying your .emacs&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-use-package" class="anchor" aria-hidden="true" href="#use-package"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;code&gt;use-package&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://gitter.im/use-package/Lobby?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/aaf22fcf54c86823689c20fd4e01f6eb53c22408/68747470733a2f2f6261646765732e6769747465722e696d2f7573652d7061636b6167652f4c6f6262792e737667" alt="Join the chat at https://gitter.im/use-package/Lobby" data-canonical-src="https://badges.gitter.im/use-package/Lobby.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://travis-ci.org/jwiegley/use-package" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/ac1dfb9d155cd71ac61fe6135f13b072fa68e413/68747470733a2f2f7472617669732d63692e6f72672f6a776965676c65792f7573652d7061636b6167652e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/jwiegley/use-package.svg?branch=master" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="http://melpa.milkbox.net/#/use-package" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/9e2b993215bec6257e83bb37be402ef9b5a37d95/687474703a2f2f6d656c70612e6d696c6b626f782e6e65742f7061636b616765732f7573652d7061636b6167652d62616467652e737667" alt="MELPA" data-canonical-src="http://melpa.milkbox.net/packages/use-package-badge.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://stable.melpa.org/#/use-package" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/61b06b0a52fee3022aaaa74c5998ba2d961d1c42/68747470733a2f2f737461626c652e6d656c70612e6f72672f7061636b616765732f7573652d7061636b6167652d62616467652e737667" alt="MELPA Stable" data-canonical-src="https://stable.melpa.org/packages/use-package-badge.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;use-package&lt;/code&gt; macro allows you to isolate package configuration in your
&lt;code&gt;.emacs&lt;/code&gt; file in a way that is both performance-oriented and, well, tidy.  I
created it because I have over 80 packages that I use in Emacs, and things
were getting difficult to manage.  Yet with this utility my total load time is
around 2 seconds, with no loss of functionality!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: &lt;code&gt;use-package&lt;/code&gt; is &lt;strong&gt;not&lt;/strong&gt; a package manager! Although &lt;code&gt;use-package&lt;/code&gt;
does have the useful capability to interface with package managers (see
&lt;a href="#package-installation"&gt;below&lt;/a&gt;), its primary purpose is for the configuration
and loading of packages.&lt;/p&gt;
&lt;p&gt;Notes for users upgrading to 2.x are located &lt;a href="#upgrading-to-2x"&gt;at the bottom&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#installing-use-package"&gt;Installing use-package&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#getting-started"&gt;Getting started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#key-binding"&gt;Key-binding&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#binding-to-keymaps"&gt;Binding to keymaps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#binding-within-local-keymaps"&gt;Binding within local keymaps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#modes-and-interpreters"&gt;Modes and interpreters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#magic-handlers"&gt;Magic handlers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#hooks"&gt;Hooks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#package-customization"&gt;Package customization&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#customizing-variables"&gt;Customizing variables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#customizing-faces"&gt;Customizing faces&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#notes-about-lazy-loading"&gt;Notes about lazy loading&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#information-about-package-loads"&gt;Information about package loads&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#conditional-loading"&gt;Conditional loading&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#conditional-loading-before-preface"&gt;Conditional loading before :preface&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#loading-packages-in-sequence"&gt;Loading packages in a sequence&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#prevent-loading-if-dependencies-are-missing"&gt;Prevent loading if dependencies are missing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#byte-compiling-your-emacs"&gt;Byte compiling your .emacs&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#prevent-a-package-from-loading-at-compile-time"&gt;Prevent a package from loading at compile-time&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#extending-the-load-path"&gt;Extending the load-path&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#catching-errors-during-use-package-expansion"&gt;Catching errors during use-package expansion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#diminishing-and-delighting-minor-modes"&gt;Diminishing and delighting minor modes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#package-installation"&gt;Package installation&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#usage-with-other-package-managers"&gt;Usage with other package managers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#gathering-statistics"&gt;Gathering Statistics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#keyword-extensions"&gt;Keyword Extensions&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#use-package-ensure-system-package"&gt;use-package-ensure-system-package&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#use-package-chords"&gt;use-package-chords&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#how-to-create-an-extension"&gt;How to create an extension&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#first-step-add-the-keyword"&gt;First step: Add the keyword&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#second-step-create-a-normalizer"&gt;Second step: Create a normalizer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#third-step-create-a-handler"&gt;Third step: Create a handler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#fourth-step-test-it-out"&gt;Fourth step: Test it out&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#some-timing-results"&gt;Some timing results&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#upgrading-to-2x"&gt;Upgrading to 2.x&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#semantics-of-init-is-now-consistent"&gt;Semantics of :init is now consistent&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#idle-has-been-removed"&gt;:idle has been removed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#defer-now-accepts-an-optional-numeric-argument"&gt;:defer now accepts an optional numeric argument&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#add-preface-occurring-before-everything-except-disabled"&gt;Add :preface, occuring before everything except :disabled&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#add-functions-for-declaring-functions-to-the-byte-compiler"&gt;Add :functions, for declaring functions to the byte-compiler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#use-packageel-is-no-longer-needed-at-runtime"&gt;use-package.el is no longer needed at runtime&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-installing-use-package" class="anchor" aria-hidden="true" href="#installing-use-package"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installing use-package&lt;/h2&gt;
&lt;p&gt;Either clone from this GitHub repository or install from
&lt;a href="http://melpa.milkbox.net/" rel="nofollow"&gt;MELPA&lt;/a&gt; (recommended).&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-getting-started" class="anchor" aria-hidden="true" href="#getting-started"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Getting started&lt;/h2&gt;
&lt;p&gt;Here is the simplest &lt;code&gt;use-package&lt;/code&gt; declaration:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; This is only needed once, near the top of the file&lt;/span&gt;
(&lt;span class="pl-c1"&gt;eval-when-compile&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Following line is not needed if use-package.el is in ~/.emacs.d&lt;/span&gt;
  (&lt;span class="pl-c1"&gt;add-to-list&lt;/span&gt; &lt;span class="pl-c1"&gt;'load-path&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&amp;lt;path where use-package is installed&amp;gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
  (&lt;span class="pl-c1"&gt;require&lt;/span&gt; &lt;span class="pl-c1"&gt;'use-package&lt;/span&gt;))

(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; foo)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This loads in the package &lt;code&gt;foo&lt;/code&gt;, but only if &lt;code&gt;foo&lt;/code&gt; is available on your
system. If not, a warning is logged to the &lt;code&gt;*Messages*&lt;/code&gt; buffer.&lt;/p&gt;
&lt;p&gt;Use the &lt;code&gt;:init&lt;/code&gt; keyword to execute code before a package is loaded.  It
accepts one or more forms, up to the next keyword:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; foo
  &lt;span class="pl-c1"&gt;:init&lt;/span&gt;
  (&lt;span class="pl-k"&gt;setq&lt;/span&gt; foo-variable &lt;span class="pl-c1"&gt;t&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Similarly, &lt;code&gt;:config&lt;/code&gt; can be used to execute code after a package is loaded.
In cases where loading is done lazily (see more about autoloading below), this
execution is deferred until after the autoload occurs:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; foo
  &lt;span class="pl-c1"&gt;:init&lt;/span&gt;
  (&lt;span class="pl-k"&gt;setq&lt;/span&gt; foo-variable &lt;span class="pl-c1"&gt;t&lt;/span&gt;)
  &lt;span class="pl-c1"&gt;:config&lt;/span&gt;
  (foo-mode &lt;span class="pl-c1"&gt;1&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you might expect, you can use &lt;code&gt;:init&lt;/code&gt; and &lt;code&gt;:config&lt;/code&gt; together:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; color-moccur
  &lt;span class="pl-c1"&gt;:commands&lt;/span&gt; (isearch-moccur isearch-all)
  &lt;span class="pl-c1"&gt;:bind&lt;/span&gt; ((&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;M-s O&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; moccur)
         &lt;span class="pl-c1"&gt;:map&lt;/span&gt; isearch-mode-map
         (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;M-o&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; isearch-moccur)
         (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;M-O&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; isearch-moccur-all))
  &lt;span class="pl-c1"&gt;:init&lt;/span&gt;
  (&lt;span class="pl-k"&gt;setq&lt;/span&gt; isearch-lazy-highlight &lt;span class="pl-c1"&gt;t&lt;/span&gt;)
  &lt;span class="pl-c1"&gt;:config&lt;/span&gt;
  (&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; moccur-edit))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this case, I want to autoload the commands &lt;code&gt;isearch-moccur&lt;/code&gt; and
&lt;code&gt;isearch-all&lt;/code&gt; from &lt;code&gt;color-moccur.el&lt;/code&gt;, and bind keys both at the global level
and within the &lt;code&gt;isearch-mode-map&lt;/code&gt; (see next section).  When the package is
actually loaded (by using one of these commands), &lt;code&gt;moccur-edit&lt;/code&gt; is also
loaded, to allow editing of the &lt;code&gt;moccur&lt;/code&gt; buffer.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-key-binding" class="anchor" aria-hidden="true" href="#key-binding"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Key-binding&lt;/h2&gt;
&lt;p&gt;Another common thing to do when loading a module is to bind a key to primary
commands within that module:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; ace-jump-mode
  &lt;span class="pl-c1"&gt;:bind&lt;/span&gt; (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-.&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; ace-jump-mode))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This does two things: first, it creates an autoload for the &lt;code&gt;ace-jump-mode&lt;/code&gt;
command and defers loading of &lt;code&gt;ace-jump-mode&lt;/code&gt; until you actually use it.
Second, it binds the key &lt;code&gt;C-.&lt;/code&gt; to that command.  After loading, you can use
&lt;code&gt;M-x describe-personal-keybindings&lt;/code&gt; to see all such keybindings you've set
throughout your &lt;code&gt;.emacs&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;A more literal way to do the exact same thing is:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; ace-jump-mode
  &lt;span class="pl-c1"&gt;:commands&lt;/span&gt; ace-jump-mode
  &lt;span class="pl-c1"&gt;:init&lt;/span&gt;
  (bind-key &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-.&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'ace-jump-mode&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When you use the &lt;code&gt;:commands&lt;/code&gt; keyword, it creates autoloads for those commands
and defers loading of the module until they are used.  Since the &lt;code&gt;:init&lt;/code&gt; form
is always run -- even if &lt;code&gt;ace-jump-mode&lt;/code&gt; might not be on your system --
remember to restrict &lt;code&gt;:init&lt;/code&gt; code to only what would succeed either way.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;:bind&lt;/code&gt; keyword takes either a cons or a list of conses:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; hi-lock
  &lt;span class="pl-c1"&gt;:bind&lt;/span&gt; ((&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;M-o l&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; highlight-lines-matching-regexp)
         (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;M-o r&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; highlight-regexp)
         (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;M-o w&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; highlight-phrase)))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;:commands&lt;/code&gt; keyword likewise takes either a symbol or a list of symbols.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: inside strings, special keys like &lt;code&gt;tab&lt;/code&gt; or &lt;code&gt;F1&lt;/code&gt;-&lt;code&gt;Fn&lt;/code&gt; have to be written inside angle brackets, e.g. &lt;code&gt;"C-&amp;lt;up&amp;gt;"&lt;/code&gt;.
Standalone special keys (and some combinations) can be written in square brackets, e.g. &lt;code&gt;[tab]&lt;/code&gt; instead of &lt;code&gt;"&amp;lt;tab&amp;gt;"&lt;/code&gt;. The syntax for the keybindings is similar to
the "kbd" syntax: see &lt;a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Init-Rebinding.html" rel="nofollow"&gt;https://www.gnu.org/software/emacs/manual/html_node/emacs/Init-Rebinding.html&lt;/a&gt;
for more information.&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; helm
  &lt;span class="pl-c1"&gt;:bind&lt;/span&gt; ((&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;M-x&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; helm-M-x)
         (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;M-&amp;lt;f5&amp;gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; helm-find-files)
         ([f10] &lt;span class="pl-k"&gt;.&lt;/span&gt; helm-buffers-list)
         ([S-f10] &lt;span class="pl-k"&gt;.&lt;/span&gt; helm-recentf)))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Furthermore, &lt;a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Remapping-Commands.html" rel="nofollow"&gt;remapping commands&lt;/a&gt;
with &lt;code&gt;:bind&lt;/code&gt; and &lt;code&gt;bind-key&lt;/code&gt; works as expected, because when the
binding is a vector, it is passed straight to &lt;code&gt;define-key&lt;/code&gt;. So the
following example will rebind &lt;code&gt;M-q&lt;/code&gt; (originally &lt;code&gt;fill-paragraph&lt;/code&gt;) to
&lt;code&gt;unfill-toggle&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; unfill
  &lt;span class="pl-c1"&gt;:bind&lt;/span&gt; ([remap fill-paragraph] &lt;span class="pl-k"&gt;.&lt;/span&gt; unfill-toggle))&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-binding-to-keymaps" class="anchor" aria-hidden="true" href="#binding-to-keymaps"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Binding to keymaps&lt;/h3&gt;
&lt;p&gt;Normally &lt;code&gt;:bind&lt;/code&gt; expects that commands are functions that will be autoloaded
from the given package. However, this does not work if one of those commands
is actually a keymap, since keymaps are not functions, and cannot be
autoloaded using Emacs' &lt;code&gt;autoload&lt;/code&gt; mechanism.&lt;/p&gt;
&lt;p&gt;To handle this case, &lt;code&gt;use-package&lt;/code&gt; offers a special, limited variant of
&lt;code&gt;:bind&lt;/code&gt; called &lt;code&gt;:bind-keymap&lt;/code&gt;. The only difference is that the "commands"
bound to by &lt;code&gt;:bind-keymap&lt;/code&gt; must be keymaps defined in the package, rather than
command functions. This is handled behind the scenes by generating custom code
that loads the package containing the keymap, and then re-executes your
keypress after the first load, to reinterpret that keypress as a prefix key.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; projectile
  &lt;span class="pl-c1"&gt;:bind-keymap&lt;/span&gt;
  (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-c p&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; projectile-command-map))&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-binding-within-local-keymaps" class="anchor" aria-hidden="true" href="#binding-within-local-keymaps"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Binding within local keymaps&lt;/h3&gt;
&lt;p&gt;Slightly different from binding a key to a keymap, is binding a key &lt;em&gt;within&lt;/em&gt; a
local keymap that only exists after the package is loaded.  &lt;code&gt;use-package&lt;/code&gt;
supports this with a &lt;code&gt;:map&lt;/code&gt; modifier, taking the local keymap to bind to:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; helm
  &lt;span class="pl-c1"&gt;:bind&lt;/span&gt; (&lt;span class="pl-c1"&gt;:map&lt;/span&gt; helm-command-map
         (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-c h&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; helm-execute-persistent-action)))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The effect of this statement is to wait until &lt;code&gt;helm&lt;/code&gt; has loaded, and then to
bind the key &lt;code&gt;C-c h&lt;/code&gt; to &lt;code&gt;helm-execute-persistent-action&lt;/code&gt; within Helm's local
keymap, &lt;code&gt;helm-mode-map&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Multiple uses of &lt;code&gt;:map&lt;/code&gt; may be specified. Any binding occurring before the
first use of &lt;code&gt;:map&lt;/code&gt; are applied to the global keymap:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; &lt;span class="pl-c1"&gt;term&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:bind&lt;/span&gt; ((&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-c t&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-c1"&gt;term&lt;/span&gt;)
         &lt;span class="pl-c1"&gt;:map&lt;/span&gt; term-mode-map
         (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;M-p&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; term-send-up)
         (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;M-n&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; term-send-down)
         &lt;span class="pl-c1"&gt;:map&lt;/span&gt; term-raw-map
         (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;M-o&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; other-window)
         (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;M-p&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; term-send-up)
         (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;M-n&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; term-send-down)))&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-modes-and-interpreters" class="anchor" aria-hidden="true" href="#modes-and-interpreters"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Modes and interpreters&lt;/h2&gt;
&lt;p&gt;Similar to &lt;code&gt;:bind&lt;/code&gt;, you can use &lt;code&gt;:mode&lt;/code&gt; and &lt;code&gt;:interpreter&lt;/code&gt; to establish a
deferred binding within the &lt;code&gt;auto-mode-alist&lt;/code&gt; and &lt;code&gt;interpreter-mode-alist&lt;/code&gt;
variables. The specifier to either keyword can be a cons cell, a list of cons
cells, or a string or regexp:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; ruby-mode
  &lt;span class="pl-c1"&gt;:mode&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-cce"&gt;\\&lt;/span&gt;.rb&lt;span class="pl-cce"&gt;\\&lt;/span&gt;'&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:interpreter&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;ruby&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; The package is "python" but the mode is "python-mode":&lt;/span&gt;
(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; python
  &lt;span class="pl-c1"&gt;:mode&lt;/span&gt; (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-cce"&gt;\\&lt;/span&gt;.py&lt;span class="pl-cce"&gt;\\&lt;/span&gt;'&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; python-mode)
  &lt;span class="pl-c1"&gt;:interpreter&lt;/span&gt; (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;python&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; python-mode))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you aren't using &lt;code&gt;:commands&lt;/code&gt;, &lt;code&gt;:bind&lt;/code&gt;, &lt;code&gt;:bind*&lt;/code&gt;, &lt;code&gt;:bind-keymap&lt;/code&gt;,
&lt;code&gt;:bind-keymap*&lt;/code&gt;, &lt;code&gt;:mode&lt;/code&gt;, &lt;code&gt;:interpreter&lt;/code&gt;, or &lt;code&gt;:hook&lt;/code&gt; (all of which imply &lt;code&gt;:defer&lt;/code&gt;; see
the docstring for &lt;code&gt;use-package&lt;/code&gt; for a brief description of each), you can
still defer loading with the &lt;code&gt;:defer&lt;/code&gt; keyword:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; ace-jump-mode
  &lt;span class="pl-c1"&gt;:defer&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:init&lt;/span&gt;
  (&lt;span class="pl-c1"&gt;autoload&lt;/span&gt; &lt;span class="pl-c1"&gt;'ace-jump-mode&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;ace-jump-mode&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;)
  (bind-key &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-.&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'ace-jump-mode&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This does exactly the same thing as the following:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; ace-jump-mode
  &lt;span class="pl-c1"&gt;:bind&lt;/span&gt; (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-.&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; ace-jump-mode))&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-magic-handlers" class="anchor" aria-hidden="true" href="#magic-handlers"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Magic handlers&lt;/h2&gt;
&lt;p&gt;Similar to &lt;code&gt;:mode&lt;/code&gt; and &lt;code&gt;:interpreter&lt;/code&gt;, you can also use &lt;code&gt;:magic&lt;/code&gt; and
&lt;code&gt;:magic-fallback&lt;/code&gt; to cause certain function to be run if the beginning of a
file matches a given regular expression. The difference between the two is
that &lt;code&gt;:magic-fallback&lt;/code&gt; has a lower priority than &lt;code&gt;:mode&lt;/code&gt;. For example:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; pdf-tools
  &lt;span class="pl-c1"&gt;:load-path&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;site-lisp/pdf-tools/lisp&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:magic&lt;/span&gt; (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;%PDF&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; pdf-view-mode)
  &lt;span class="pl-c1"&gt;:config&lt;/span&gt;
  (pdf-tools-install &lt;span class="pl-c1"&gt;:no-query&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This registers an autoloaded command for &lt;code&gt;pdf-view-mode&lt;/code&gt;, defers loading of
&lt;code&gt;pdf-tools&lt;/code&gt;, and runs &lt;code&gt;pdf-view-mode&lt;/code&gt; if the beginning of a buffer matches the
string &lt;code&gt;"%PDF"&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-hooks" class="anchor" aria-hidden="true" href="#hooks"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Hooks&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;:hook&lt;/code&gt; keyword allows adding functions onto package hooks. Thus,
all of the following are equivalent:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; ace-jump-mode
  &lt;span class="pl-c1"&gt;:hook&lt;/span&gt; prog-mode)

(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; ace-jump-mode
  &lt;span class="pl-c1"&gt;:hook&lt;/span&gt; (&lt;span class="pl-c1"&gt;prog-mode&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; ace-jump-mode))

(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; ace-jump-mode
  &lt;span class="pl-c1"&gt;:commands&lt;/span&gt; ace-jump-mode
  &lt;span class="pl-c1"&gt;:init&lt;/span&gt;
  (&lt;span class="pl-c1"&gt;add-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;'prog-mode-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;#&lt;span class="pl-c1"&gt;'ace-jump-mode&lt;/span&gt;&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And likewise, when multiple hooks should be applied, the following are also
equivalent:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; ace-jump-mode
  &lt;span class="pl-c1"&gt;:hook&lt;/span&gt; (&lt;span class="pl-c1"&gt;prog-mode&lt;/span&gt; text-mode))

(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; ace-jump-mode
  &lt;span class="pl-c1"&gt;:hook&lt;/span&gt; ((&lt;span class="pl-c1"&gt;prog-mode&lt;/span&gt; text-mode) &lt;span class="pl-k"&gt;.&lt;/span&gt; ace-jump-mode))

(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; ace-jump-mode
  &lt;span class="pl-c1"&gt;:hook&lt;/span&gt; ((&lt;span class="pl-c1"&gt;prog-mode&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; ace-jump-mode)
         (&lt;span class="pl-c1"&gt;text-mode&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; ace-jump-mode)))

(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; ace-jump-mode
  &lt;span class="pl-c1"&gt;:commands&lt;/span&gt; ace-jump-mode
  &lt;span class="pl-c1"&gt;:init&lt;/span&gt;
  (&lt;span class="pl-c1"&gt;add-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;'prog-mode-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;#&lt;span class="pl-c1"&gt;'ace-jump-mode&lt;/span&gt;&lt;/span&gt;)
  (&lt;span class="pl-c1"&gt;add-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;'text-mode-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;#&lt;span class="pl-c1"&gt;'ace-jump-mode&lt;/span&gt;&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When using &lt;code&gt;:hook&lt;/code&gt; omit the "-hook" suffix if you specify the hook
explicitly, as this is appended by default. For example the following
code will not work as it attempts to add to the &lt;code&gt;prog-mode-hook-hook&lt;/code&gt;
which does not exist:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; DOES NOT WORK&lt;/span&gt;
(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; ace-jump-mode
  &lt;span class="pl-c1"&gt;:hook&lt;/span&gt; (&lt;span class="pl-c1"&gt;prog-mode-hook&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; ace-jump-mode))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you do not like this behaviour, set &lt;code&gt;use-package-hook-name-suffix&lt;/code&gt;
to nil. By default the value of this variable is "-hook".&lt;/p&gt;
&lt;p&gt;The use of &lt;code&gt;:hook&lt;/code&gt;, as with &lt;code&gt;:bind&lt;/code&gt;, &lt;code&gt;:mode&lt;/code&gt;, &lt;code&gt;:interpreter&lt;/code&gt;, etc., causes the
functions being hooked to implicitly be read as &lt;code&gt;:commands&lt;/code&gt; (meaning they will
establish interactive &lt;code&gt;autoload&lt;/code&gt; definitions for that module, if not already
defined as functions), and so &lt;code&gt;:defer t&lt;/code&gt; is also implied by &lt;code&gt;:hook&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-package-customization" class="anchor" aria-hidden="true" href="#package-customization"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Package customization&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-customizing-variables" class="anchor" aria-hidden="true" href="#customizing-variables"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Customizing variables.&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;:custom&lt;/code&gt; keyword allows customization of package custom variables.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; comint
  &lt;span class="pl-c1"&gt;:custom&lt;/span&gt;
  (comint-buffer-maximum-size &lt;span class="pl-c1"&gt;20000&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Increase comint buffer size.&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
  (comint-prompt-read-only &lt;span class="pl-c1"&gt;t&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Make the prompt read only.&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The documentation string is not mandatory.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: these are only for people who wish to keep customizations with their
accompanying use-package declarations. Functionally, the only benefit over
using &lt;code&gt;setq&lt;/code&gt; in a &lt;code&gt;:config&lt;/code&gt; block is that customizations might execute code
when values are assigned. If you currently use &lt;code&gt;M-x customize-option&lt;/code&gt; and save
to a settings file, you do not want to use this option.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-customizing-faces" class="anchor" aria-hidden="true" href="#customizing-faces"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Customizing faces&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;:custom-face&lt;/code&gt; keyword allows customization of package custom faces.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; eruby-mode
  &lt;span class="pl-c1"&gt;:custom-face&lt;/span&gt;
  (eruby-standard-face ((&lt;span class="pl-c1"&gt;t&lt;/span&gt; (&lt;span class="pl-c1"&gt;:slant&lt;/span&gt; &lt;span class="pl-c1"&gt;italic&lt;/span&gt;)))))&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-notes-about-lazy-loading" class="anchor" aria-hidden="true" href="#notes-about-lazy-loading"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Notes about lazy loading&lt;/h2&gt;
&lt;p&gt;In almost all cases you don't need to manually specify &lt;code&gt;:defer t&lt;/code&gt;.  This is
implied whenever &lt;code&gt;:bind&lt;/code&gt; or &lt;code&gt;:mode&lt;/code&gt; or &lt;code&gt;:interpreter&lt;/code&gt; is used.  Typically, you
only need to specify &lt;code&gt;:defer&lt;/code&gt; if you know for a fact that some other package
will do something to cause your package to load at the appropriate time, and
thus you would like to defer loading even though use-package isn't creating
any autoloads for you.&lt;/p&gt;
&lt;p&gt;You can override package deferral with the &lt;code&gt;:demand&lt;/code&gt; keyword.  Thus, even if
you use &lt;code&gt;:bind&lt;/code&gt;, using &lt;code&gt;:demand&lt;/code&gt; will force loading to occur immediately and
not establish an autoload for the bound key.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-information-about-package-loads" class="anchor" aria-hidden="true" href="#information-about-package-loads"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Information about package loads&lt;/h2&gt;
&lt;p&gt;When a package is loaded, and if you have &lt;code&gt;use-package-verbose&lt;/code&gt; set to &lt;code&gt;t&lt;/code&gt;, or
if the package takes longer than 0.1s to load, you will see a message to
indicate this loading activity in the &lt;code&gt;*Messages*&lt;/code&gt; buffer.  The same will
happen for configuration, or &lt;code&gt;:config&lt;/code&gt; blocks that take longer than 0.1s to
execute.  In general, you should keep &lt;code&gt;:init&lt;/code&gt; forms as simple and quick as
possible, and put as much as you can get away with into the &lt;code&gt;:config&lt;/code&gt; block.
This way, deferred loading can help your Emacs to start as quickly as
possible.&lt;/p&gt;
&lt;p&gt;Additionally, if an error occurs while initializing or configuring a package,
this will not stop your Emacs from loading.  Rather, the error will be
captured by &lt;code&gt;use-package&lt;/code&gt;, and reported to a special &lt;code&gt;*Warnings*&lt;/code&gt; popup
buffer, so that you can debug the situation in an otherwise functional Emacs.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-conditional-loading" class="anchor" aria-hidden="true" href="#conditional-loading"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Conditional loading&lt;/h2&gt;
&lt;p&gt;You can use the &lt;code&gt;:if&lt;/code&gt; keyword to predicate the loading and initialization of
modules.&lt;/p&gt;
&lt;p&gt;For example, I only want &lt;code&gt;edit-server&lt;/code&gt; running for my main,
graphical Emacs, not for other Emacsen I may start at the command line:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; edit-server
  &lt;span class="pl-c1"&gt;:if&lt;/span&gt; window-system
  &lt;span class="pl-c1"&gt;:init&lt;/span&gt;
  (&lt;span class="pl-c1"&gt;add-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;'after-init-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;'server-start&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;)
  (&lt;span class="pl-c1"&gt;add-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;'after-init-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;'edit-server-start&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In another example, we can load things conditional on the operating system:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; exec-path-from-shell
  &lt;span class="pl-c1"&gt;:if&lt;/span&gt; (&lt;span class="pl-c1"&gt;memq&lt;/span&gt; window-system '(mac ns))
  &lt;span class="pl-c1"&gt;:ensure&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:config&lt;/span&gt;
  (exec-path-from-shell-initialize))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;:disabled&lt;/code&gt; keyword can turn off a module you're having difficulties with,
or stop loading something you're not using at the present time:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; ess-site
  &lt;span class="pl-c1"&gt;:disabled&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:commands&lt;/span&gt; R)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When byte-compiling your &lt;code&gt;.emacs&lt;/code&gt; file, disabled declarations are omitted
from the output entirely, to accelerate startup times.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: &lt;code&gt;:when&lt;/code&gt; is provided as an alias for &lt;code&gt;:if&lt;/code&gt;, and &lt;code&gt;:unless foo&lt;/code&gt; means
the same thing as &lt;code&gt;:if (not foo)&lt;/code&gt;. For example, the following will also stop
&lt;code&gt;:ensure&lt;/code&gt; from happening on Mac systems:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;when&lt;/span&gt; (&lt;span class="pl-c1"&gt;memq&lt;/span&gt; window-system '(mac ns))
  (&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; exec-path-from-shell
    &lt;span class="pl-c1"&gt;:ensure&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;
    &lt;span class="pl-c1"&gt;:config&lt;/span&gt;
    (exec-path-from-shell-initialize)))&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-conditional-loading-before-preface" class="anchor" aria-hidden="true" href="#conditional-loading-before-preface"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Conditional loading before :preface&lt;/h3&gt;
&lt;p&gt;If you need to conditionalize a use-package form so that the condition occurs
before even the &lt;code&gt;:preface&lt;/code&gt; is executed, simply use &lt;code&gt;when&lt;/code&gt; around the
use-package form itself:&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-loading-packages-in-sequence" class="anchor" aria-hidden="true" href="#loading-packages-in-sequence"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Loading packages in sequence&lt;/h3&gt;
&lt;p&gt;Sometimes it only makes sense to configure a package after another has been
loaded, because certain variables or functions are not in scope until that
time. This can achieved using an &lt;code&gt;:after&lt;/code&gt; keyword that allows a fairly rich
description of the exact conditions when loading should occur. Here is an
example:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; hydra
  &lt;span class="pl-c1"&gt;:load-path&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;site-lisp/hydra&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)

(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; ivy
  &lt;span class="pl-c1"&gt;:load-path&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;site-lisp/swiper&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)

(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; ivy-hydra
  &lt;span class="pl-c1"&gt;:after&lt;/span&gt; (ivy hydra))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this case, because all of these packages are demand-loaded in the order
they occur, the use of &lt;code&gt;:after&lt;/code&gt; is not strictly necessary. By using it,
however, the above code becomes order-independent, without an implicit
depedence on the nature of your init file.&lt;/p&gt;
&lt;p&gt;By default, &lt;code&gt;:after (foo bar)&lt;/code&gt; is the same as &lt;code&gt;:after (:all foo bar)&lt;/code&gt;, meaning
that loading of the given package will not happen until both &lt;code&gt;foo&lt;/code&gt; and &lt;code&gt;bar&lt;/code&gt;
have been loaded. Here are some of the other possibilities:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;:after&lt;/span&gt; (foo bar)
&lt;span class="pl-c1"&gt;:after&lt;/span&gt; (&lt;span class="pl-c1"&gt;:all&lt;/span&gt; foo bar)
&lt;span class="pl-c1"&gt;:after&lt;/span&gt; (&lt;span class="pl-c1"&gt;:any&lt;/span&gt; foo bar)
&lt;span class="pl-c1"&gt;:after&lt;/span&gt; (&lt;span class="pl-c1"&gt;:all&lt;/span&gt; (&lt;span class="pl-c1"&gt;:any&lt;/span&gt; foo bar) (&lt;span class="pl-c1"&gt;:any&lt;/span&gt; baz quux))
&lt;span class="pl-c1"&gt;:after&lt;/span&gt; (&lt;span class="pl-c1"&gt;:any&lt;/span&gt; (&lt;span class="pl-c1"&gt;:all&lt;/span&gt; foo bar) (&lt;span class="pl-c1"&gt;:all&lt;/span&gt; baz quux))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When you nest selectors, such as &lt;code&gt;(:any (:all foo bar) (:all baz quux))&lt;/code&gt;, it
means that the package will be loaded when either both &lt;code&gt;foo&lt;/code&gt; and &lt;code&gt;bar&lt;/code&gt; have
been loaded, or both &lt;code&gt;baz&lt;/code&gt; and &lt;code&gt;quux&lt;/code&gt; have been loaded.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: pay attention if you set &lt;code&gt;use-package-always-defer&lt;/code&gt; to t, and also use
the &lt;code&gt;:after&lt;/code&gt; keyword, as you will need to specify how the declared package is
to be loaded: e.g., by some &lt;code&gt;:bind&lt;/code&gt;. If you're not using one of the mechanisms
that registers autoloads, such as &lt;code&gt;:bind&lt;/code&gt; or &lt;code&gt;:hook&lt;/code&gt;, and your package manager
does not provide autoloads, it's possible that without adding &lt;code&gt;:demand t&lt;/code&gt; to
those declarations, your package will never be loaded.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-prevent-loading-if-dependencies-are-missing" class="anchor" aria-hidden="true" href="#prevent-loading-if-dependencies-are-missing"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Prevent loading if dependencies are missing&lt;/h3&gt;
&lt;p&gt;While the &lt;code&gt;:after&lt;/code&gt; keyword delays loading until the dependencies are loaded,
the somewhat simpler &lt;code&gt;:requires&lt;/code&gt; keyword simply never loads the package if the
dependencies are not available at the time the &lt;code&gt;use-package&lt;/code&gt; declaration is
encountered. By "available" in this context it means that &lt;code&gt;foo&lt;/code&gt; is available
if &lt;code&gt;(featurep 'foo)&lt;/code&gt; evaluates to a non-nil value. For example:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; abbrev
  &lt;span class="pl-c1"&gt;:requires&lt;/span&gt; foo)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is the same as:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; abbrev
  &lt;span class="pl-c1"&gt;:if&lt;/span&gt; (&lt;span class="pl-c1"&gt;featurep&lt;/span&gt; &lt;span class="pl-c1"&gt;'foo&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As a convenience, a list of such packages may be specified:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; abbrev
  &lt;span class="pl-c1"&gt;:requires&lt;/span&gt; (foo bar baz))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For more complex logic, such as that supported by &lt;code&gt;:after&lt;/code&gt;, simply use &lt;code&gt;:if&lt;/code&gt;
and the appropriate Lisp expression.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-byte-compiling-your-emacs" class="anchor" aria-hidden="true" href="#byte-compiling-your-emacs"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Byte-compiling your .emacs&lt;/h2&gt;
&lt;p&gt;Another feature of &lt;code&gt;use-package&lt;/code&gt; is that it always loads every file that it
can when &lt;code&gt;.emacs&lt;/code&gt; is being byte-compiled.  This helps to silence spurious
warnings about unknown variables and functions.&lt;/p&gt;
&lt;p&gt;However, there are times when this is just not enough.  For those times, use
the &lt;code&gt;:defines&lt;/code&gt; and &lt;code&gt;:functions&lt;/code&gt; keywords to introduce dummy variable and
function declarations solely for the sake of the byte-compiler:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; texinfo
  &lt;span class="pl-c1"&gt;:defines&lt;/span&gt; texinfo-section-list
  &lt;span class="pl-c1"&gt;:commands&lt;/span&gt; texinfo-mode
  &lt;span class="pl-c1"&gt;:init&lt;/span&gt;
  (&lt;span class="pl-c1"&gt;add-to-list&lt;/span&gt; &lt;span class="pl-c1"&gt;'auto-mode-alist&lt;/span&gt; '(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-cce"&gt;\\&lt;/span&gt;.texi$&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; texinfo-mode)))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you need to silence a missing function warning, you can use &lt;code&gt;:functions&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; ruby-mode
  &lt;span class="pl-c1"&gt;:mode&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-cce"&gt;\\&lt;/span&gt;.rb&lt;span class="pl-cce"&gt;\\&lt;/span&gt;'&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:interpreter&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;ruby&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:functions&lt;/span&gt; inf-ruby-keys
  &lt;span class="pl-c1"&gt;:config&lt;/span&gt;
  (&lt;span class="pl-k"&gt;defun&lt;/span&gt; &lt;span class="pl-e"&gt;my-ruby-mode-hook&lt;/span&gt; ()
    (&lt;span class="pl-c1"&gt;require&lt;/span&gt; &lt;span class="pl-c1"&gt;'inf-ruby&lt;/span&gt;)
    (inf-ruby-keys))

  (&lt;span class="pl-c1"&gt;add-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;'ruby-mode-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;'my-ruby-mode-hook&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-prevent-a-package-from-loading-at-compile-time" class="anchor" aria-hidden="true" href="#prevent-a-package-from-loading-at-compile-time"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Prevent a package from loading at compile-time&lt;/h3&gt;
&lt;p&gt;Normally, &lt;code&gt;use-package&lt;/code&gt; will load each package at compile time before
compiling the configuration, to ensure that any necessary symbols are in scope
to satisfy the byte-compiler.  At times this can cause problems, since a
package may have special loading requirements, and all that you want to use
&lt;code&gt;use-package&lt;/code&gt; for is to add a configuration to the &lt;code&gt;eval-after-load&lt;/code&gt; hook.  In
such cases, use the &lt;code&gt;:no-require&lt;/code&gt; keyword:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; foo
  &lt;span class="pl-c1"&gt;:no-require&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:config&lt;/span&gt;
  (&lt;span class="pl-c1"&gt;message&lt;/span&gt; &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-s"&gt;This is evaluated when &lt;span class="pl-smi"&gt;`foo'&lt;/span&gt; is loaded&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-extending-the-load-path" class="anchor" aria-hidden="true" href="#extending-the-load-path"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Extending the load-path&lt;/h2&gt;
&lt;p&gt;If your package needs a directory added to the &lt;code&gt;load-path&lt;/code&gt; in order to load,
use &lt;code&gt;:load-path&lt;/code&gt;.  This takes a symbol, a function, a string or a list of
strings.  If the path is relative, it is expanded within
&lt;code&gt;user-emacs-directory&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; ess-site
  &lt;span class="pl-c1"&gt;:load-path&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;site-lisp/ess/lisp/&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:commands&lt;/span&gt; R)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: when using a symbol or a function to provide a dynamically generated
list of paths, you must inform the byte-compiler of this definition so the
value is available at byte-compilation time.  This is done by using the
special form &lt;code&gt;eval-and-compile&lt;/code&gt; (as opposed to &lt;code&gt;eval-when-compile&lt;/code&gt;).  Further,
this value is fixed at whatever was determined during compilation, to avoid
looking up the same information again on each startup:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;eval-and-compile&lt;/span&gt;
  (&lt;span class="pl-k"&gt;defun&lt;/span&gt; &lt;span class="pl-e"&gt;ess-site-load-path&lt;/span&gt; ()
    (&lt;span class="pl-c1"&gt;shell-command&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;find ~ -path ess/lisp&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)))

(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; ess-site
  &lt;span class="pl-c1"&gt;:load-path&lt;/span&gt; (&lt;span class="pl-k"&gt;lambda&lt;/span&gt; () (&lt;span class="pl-k"&gt;list&lt;/span&gt; (ess-site-load-path)))
  &lt;span class="pl-c1"&gt;:commands&lt;/span&gt; R)&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-catching-errors-during-use-package-expansion" class="anchor" aria-hidden="true" href="#catching-errors-during-use-package-expansion"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Catching errors during use-package expansion&lt;/h2&gt;
&lt;p&gt;By default, if &lt;code&gt;use-package-expand-minimally&lt;/code&gt; is nil (the default),
use-package will attempts to catch and report errors that occur during
expansion of use-package declarations in your init file. Setting
&lt;code&gt;use-package-expand-minimally&lt;/code&gt; to t completely disables this checking.&lt;/p&gt;
&lt;p&gt;This behavior may be overridden locally using the &lt;code&gt;:catch&lt;/code&gt; keyword. If &lt;code&gt;t&lt;/code&gt; or
&lt;code&gt;nil&lt;/code&gt;, it enables or disables catching errors at load time. It can also be a
function taking two arguments: the keyword being processed at the time the
error was encountered, and the error object (as generated by
&lt;code&gt;condition-case&lt;/code&gt;). For example:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; example
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Note that errors are never trapped in the preface, since doing so would&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; hide definitions from the byte-compiler.&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:preface&lt;/span&gt; (&lt;span class="pl-c1"&gt;message&lt;/span&gt; &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-s"&gt;I'm here at byte-compile and load time.&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;)
  &lt;span class="pl-c1"&gt;:init&lt;/span&gt; (&lt;span class="pl-c1"&gt;message&lt;/span&gt; &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-s"&gt;I'm always here at startup&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;)
  &lt;span class="pl-c1"&gt;:config&lt;/span&gt;
  (&lt;span class="pl-c1"&gt;message&lt;/span&gt; &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-s"&gt;I'm always here after the package is loaded&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;)
  (&lt;span class="pl-c1"&gt;error&lt;/span&gt; &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-s"&gt;oops&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;)
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Don't try to (require 'example), this is just an example!&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:no-require&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:catch&lt;/span&gt; (&lt;span class="pl-k"&gt;lambda&lt;/span&gt; (&lt;span class="pl-v"&gt;keyword&lt;/span&gt; &lt;span class="pl-v"&gt;err&lt;/span&gt;)
           (&lt;span class="pl-c1"&gt;message&lt;/span&gt; (&lt;span class="pl-c1"&gt;error-message-string&lt;/span&gt; err))))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Evaluating the above form will print these messages:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;I’m here at byte-compile and load time.
I’m always here at startup
Configuring package example...
I’m always here after the package is loaded
oops
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;a id="user-content-diminishing-and-delighting-minor-modes" class="anchor" aria-hidden="true" href="#diminishing-and-delighting-minor-modes"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Diminishing and delighting minor modes&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;use-package&lt;/code&gt; also provides built-in support for the diminish and
delight utilities -- if you have them installed. Their purpose is to
remove or change minor mode strings in your mode-line.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/myrjola/diminish.el"&gt;diminish&lt;/a&gt; is invoked with
the &lt;code&gt;:diminish&lt;/code&gt; keyword, which is passed either a minor mode symbol, a
cons of the symbol and its replacement string, or just a replacement
string, in which case the minor mode symbol is guessed to be the
package name with "-mode" appended at the end:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; abbrev
  &lt;span class="pl-c1"&gt;:diminish&lt;/span&gt; abbrev-mode
  &lt;span class="pl-c1"&gt;:config&lt;/span&gt;
  (&lt;span class="pl-k"&gt;if&lt;/span&gt; (&lt;span class="pl-c1"&gt;file-exists-p&lt;/span&gt; abbrev-file-name)
      (&lt;span class="pl-c1"&gt;quietly-read-abbrev-file&lt;/span&gt;)))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href="https://elpa.gnu.org/packages/delight.html" rel="nofollow"&gt;delight&lt;/a&gt; is invoked with
the &lt;code&gt;:delight&lt;/code&gt; keyword, which is passed a minor mode symbol, a
replacement string or
quoted
&lt;a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Mode-Line-Data.html" rel="nofollow"&gt;mode-line data&lt;/a&gt; (in
which case the minor mode symbol is guessed to be the package name
with "-mode" appended at the end), both of these, or several lists of
both. If no arguments are provided, the default mode name is hidden
completely.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Don't show anything for rainbow-mode.&lt;/span&gt;
(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; rainbow-mode
  &lt;span class="pl-c1"&gt;:delight&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Don't show anything for auto-revert-mode, which doesn't match&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; its package name.&lt;/span&gt;
(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; autorevert
  &lt;span class="pl-c1"&gt;:delight&lt;/span&gt; auto-revert-mode)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Remove the mode name for projectile-mode, but show the project name.&lt;/span&gt;
(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; projectile
  &lt;span class="pl-c1"&gt;:delight&lt;/span&gt; '(&lt;span class="pl-c1"&gt;:eval&lt;/span&gt; (&lt;span class="pl-c1"&gt;concat&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt; &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; (projectile-project-name))))

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Completely hide visual-line-mode and change auto-fill-mode to " AF".&lt;/span&gt;
(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; emacs
  &lt;span class="pl-c1"&gt;:delight&lt;/span&gt;
  (&lt;span class="pl-c1"&gt;auto-fill-function&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt; AF&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
  (&lt;span class="pl-c1"&gt;visual-line-mode&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-package-installation" class="anchor" aria-hidden="true" href="#package-installation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Package installation&lt;/h2&gt;
&lt;p&gt;You can use &lt;code&gt;use-package&lt;/code&gt; to load packages from ELPA with &lt;code&gt;package.el&lt;/code&gt;. This
is particularly useful if you share your &lt;code&gt;.emacs&lt;/code&gt; among several machines; the
relevant packages are downloaded automatically once declared in your &lt;code&gt;.emacs&lt;/code&gt;.
The &lt;code&gt;:ensure&lt;/code&gt; keyword causes the package(s) to be installed automatically if
not already present on your system:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; magit
  &lt;span class="pl-c1"&gt;:ensure&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you need to install a different package from the one named by
&lt;code&gt;use-package&lt;/code&gt;, you can specify it like this:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; tex
  &lt;span class="pl-c1"&gt;:ensure&lt;/span&gt; auctex)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Enable &lt;code&gt;use-package-always-ensure&lt;/code&gt; if you wish this behavior to be global
for all packages:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;require&lt;/span&gt; &lt;span class="pl-c1"&gt;'use-package-ensure&lt;/span&gt;)
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; use-package-always-ensure &lt;span class="pl-c1"&gt;t&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: &lt;code&gt;:ensure&lt;/code&gt; will install a package if it is not already installed, but
it does not keep it up-to-date. If you want to keep your packages updated
automatically, one option is to use
&lt;a href="https://github.com/rranelli/auto-package-update.el"&gt;auto-package-update&lt;/a&gt;,
like&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; auto-package-update
  &lt;span class="pl-c1"&gt;:config&lt;/span&gt;
  (&lt;span class="pl-k"&gt;setq&lt;/span&gt; auto-package-update-delete-old-versions &lt;span class="pl-c1"&gt;t&lt;/span&gt;)
  (&lt;span class="pl-k"&gt;setq&lt;/span&gt; auto-package-update-hide-results &lt;span class="pl-c1"&gt;t&lt;/span&gt;)
  (auto-package-update-maybe))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Lastly, when running on Emacs 24.4 or later, use-package can pin a package to
a specific archive, allowing you to mix and match packages from different
archives.  The primary use-case for this is preferring packages from the
&lt;code&gt;melpa-stable&lt;/code&gt; and &lt;code&gt;gnu&lt;/code&gt; archives, but using specific packages from &lt;code&gt;melpa&lt;/code&gt;
when you need to track newer versions than what is available in the &lt;code&gt;stable&lt;/code&gt;
archives is also a valid use-case.&lt;/p&gt;
&lt;p&gt;By default &lt;code&gt;package.el&lt;/code&gt; prefers &lt;code&gt;melpa&lt;/code&gt; over &lt;code&gt;melpa-stable&lt;/code&gt; due to the
versioning &lt;code&gt;(&amp;gt; evil-20141208.623 evil-1.0.9)&lt;/code&gt;, so even if you are tracking
only a single package from &lt;code&gt;melpa&lt;/code&gt;, you will need to tag all the non-&lt;code&gt;melpa&lt;/code&gt;
packages with the appropriate archive. If this really annoys you, then you can
set &lt;code&gt;use-package-always-pin&lt;/code&gt; to set a default.&lt;/p&gt;
&lt;p&gt;If you want to manually keep a package updated and ignore upstream updates,
you can pin it to &lt;code&gt;manual&lt;/code&gt;, which as long as there is no repository by that
name, will Just Work(tm).&lt;/p&gt;
&lt;p&gt;&lt;code&gt;use-package&lt;/code&gt; throws an error if you try to pin a package to an archive that
has not been configured using &lt;code&gt;package-archives&lt;/code&gt; (apart from the magic
&lt;code&gt;manual&lt;/code&gt; archive mentioned above):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Archive 'foo' requested for package 'bar' is not available.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; company
  &lt;span class="pl-c1"&gt;:ensure&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:pin&lt;/span&gt; &lt;span class="pl-c1"&gt;melpa-stable&lt;/span&gt;)

(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; evil
  &lt;span class="pl-c1"&gt;:ensure&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;)
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; no :pin needed, as package.el will choose the version in melpa&lt;/span&gt;

(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; adaptive-wrap
  &lt;span class="pl-c1"&gt;:ensure&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; as this package is available only in the gnu archive, this is&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; technically not needed, but it helps to highlight where it&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; comes from&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:pin&lt;/span&gt; &lt;span class="pl-c1"&gt;gnu&lt;/span&gt;)

(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; &lt;span class="pl-c1"&gt;org&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:ensure&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; ignore org-mode from upstream and use a manually installed version&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:pin&lt;/span&gt; manual)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: the &lt;code&gt;:pin&lt;/code&gt; argument has no effect on emacs versions &amp;lt; 24.4.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-usage-with-other-package-managers" class="anchor" aria-hidden="true" href="#usage-with-other-package-managers"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Usage with other package managers&lt;/h3&gt;
&lt;p&gt;By overriding &lt;code&gt;use-package-ensure-function&lt;/code&gt; and/or
&lt;code&gt;use-package-pre-ensure-function&lt;/code&gt;, other package managers can override
&lt;code&gt;:ensure&lt;/code&gt; to use them instead of &lt;code&gt;package.el&lt;/code&gt;. At the present time,
the only package manager that does this
is &lt;a href="https://github.com/raxod502/straight.el"&gt;&lt;code&gt;straight.el&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-gathering-statistics" class="anchor" aria-hidden="true" href="#gathering-statistics"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Gathering Statistics&lt;/h2&gt;
&lt;p&gt;If you'd like to see how many packages you've loaded, what stage of
initialization they've reached, and how much aggregate time they've
spent (roughly), you can enable &lt;code&gt;use-package-compute-statistics&lt;/code&gt; after
loading &lt;code&gt;use-package&lt;/code&gt; but before any &lt;code&gt;use-package&lt;/code&gt; forms, and then run
the command &lt;code&gt;M-x use-package-report&lt;/code&gt; to see the results. The buffer
displayed is a tabulated list. You can use &lt;code&gt;S&lt;/code&gt; in a column to sort the
rows based on it.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-keyword-extensions" class="anchor" aria-hidden="true" href="#keyword-extensions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Keyword Extensions&lt;/h2&gt;
&lt;p&gt;Starting with version 2.0, &lt;code&gt;use-package&lt;/code&gt; is based on an extensible
framework that makes it easy for package authors to add new keywords,
or modify the behavior of existing keywords.&lt;/p&gt;
&lt;p&gt;Some keyword extensions are now included in the &lt;code&gt;use-package&lt;/code&gt;
distribution and can be optionally installed.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-use-package-ensure-system-package" class="anchor" aria-hidden="true" href="#use-package-ensure-system-package"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;code&gt;(use-package-ensure-system-package)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;:ensure-system-package&lt;/code&gt; keyword allows you to ensure system
binaries exist alongside your package declarations.&lt;/p&gt;
&lt;p&gt;First, you will want to make sure &lt;code&gt;exec-path&lt;/code&gt; is cognisant of all
binary package names that you would like to ensure are
installed. &lt;a href="https://github.com/purcell/exec-path-from-shell"&gt;&lt;code&gt;exec-path-from-shell&lt;/code&gt;&lt;/a&gt;
is often a good way to do this.&lt;/p&gt;
&lt;p&gt;To enable the extension after you've loaded &lt;code&gt;use-package&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; use-package-ensure-system-package
  &lt;span class="pl-c1"&gt;:ensure&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here’s an example of usage:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; rg
  &lt;span class="pl-c1"&gt;:ensure-system-package&lt;/span&gt; rg)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will expect a global binary package to exist called &lt;code&gt;rg&lt;/code&gt;. If it
does not, it will use your system package manager (using the package
&lt;a href="https://gitlab.com/jabranham/system-packages" rel="nofollow"&gt;&lt;code&gt;system-packages&lt;/code&gt;&lt;/a&gt;) to
attempt an install of a binary by the same name asynchronously. For
example, for most &lt;code&gt;macOS&lt;/code&gt; users this would call: &lt;code&gt;brew install rg&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If the package is named differently than the binary, you can use a
cons in the form of  &lt;code&gt;(binary . package-name)&lt;/code&gt;, i.e.:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; rg
  &lt;span class="pl-c1"&gt;:ensure-system-package&lt;/span&gt;
  (rg &lt;span class="pl-k"&gt;.&lt;/span&gt; ripgrep))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the previous &lt;code&gt;macOS&lt;/code&gt; example, this would call: &lt;code&gt;brew install ripgrep&lt;/code&gt; if &lt;code&gt;rg&lt;/code&gt; was not found.&lt;/p&gt;
&lt;p&gt;What if you want to customize the install command further?&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; tern
  &lt;span class="pl-c1"&gt;:ensure-system-package&lt;/span&gt; (tern &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;npm i -g tern&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;:ensure-system-package&lt;/code&gt; can also take a cons where its &lt;code&gt;cdr&lt;/code&gt; is a
string that will get called by &lt;code&gt;(async-shell-command)&lt;/code&gt; to install if
it isn’t found.&lt;/p&gt;
&lt;p&gt;You may also pass in a list of cons-es:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; ruby-mode
  &lt;span class="pl-c1"&gt;:ensure-system-package&lt;/span&gt;
  ((rubocop     &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;gem install rubocop&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
   (ruby-lint   &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;gem install ruby-lint&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
   (ripper-tags &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;gem install ripper-tags&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
   (pry         &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;gem install pry&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally, in case the package dependency does not provide a global
executable, you can ensure packages exist by checking the presence of
a file path by providing a string like so:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; dash-at-point
  &lt;span class="pl-c1"&gt;:if&lt;/span&gt; (&lt;span class="pl-k"&gt;eq&lt;/span&gt; system-type &lt;span class="pl-c1"&gt;'darwin&lt;/span&gt;)
  &lt;span class="pl-c1"&gt;:ensure-system-package&lt;/span&gt;
  (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/Applications/Dash.app&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;brew cask install dash&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;:ensure-system-package&lt;/code&gt; will use &lt;code&gt;system-packages-install&lt;/code&gt; to install
system packages, except where a custom command has been specified, in
which case it will be executed verbatim by &lt;code&gt;async-shell-command&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Configuration variables &lt;code&gt;system-packages-package-manager&lt;/code&gt; and
&lt;code&gt;system-packages-use-sudo&lt;/code&gt; will be honoured, but not for custom
commands. Custom commands should include the call to sudo in the
command if needed.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-use-package-chords" class="anchor" aria-hidden="true" href="#use-package-chords"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;code&gt;(use-package-chords)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;:chords&lt;/code&gt; keyword allows you to define
&lt;a href="http://www.emacswiki.org/emacs/key-chord.el" rel="nofollow"&gt;&lt;code&gt;key-chord&lt;/code&gt;&lt;/a&gt; bindings
for &lt;code&gt;use-package&lt;/code&gt; declarations in the same manner as the &lt;code&gt;:bind&lt;/code&gt;
keyword.&lt;/p&gt;
&lt;p&gt;To enable the extension:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; use-package-chords
  &lt;span class="pl-c1"&gt;:ensure&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:config&lt;/span&gt; (key-chord-mode &lt;span class="pl-c1"&gt;1&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then you can define your chord bindings in the same manner as &lt;code&gt;:bind&lt;/code&gt; using a cons or a list of conses:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; ace-jump-mode
  &lt;span class="pl-c1"&gt;:chords&lt;/span&gt; ((&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;jj&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; ace-jump-char-mode)
           (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;jk&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; ace-jump-word-mode)
           (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;jl&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; ace-jump-line-mode)))&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-how-to-create-an-extension" class="anchor" aria-hidden="true" href="#how-to-create-an-extension"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;How to create an extension&lt;/h3&gt;
&lt;h4&gt;&lt;a id="user-content-first-step-add-the-keyword" class="anchor" aria-hidden="true" href="#first-step-add-the-keyword"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;First step: Add the keyword&lt;/h4&gt;
&lt;p&gt;The first step is to add your keyword at the right place in
&lt;code&gt;use-package-keywords&lt;/code&gt;.  This list determines the order in which things will
happen in the expanded code.  You should never change this order, but it gives
you a framework within which to decide when your keyword should fire.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-second-step-create-a-normalizer" class="anchor" aria-hidden="true" href="#second-step-create-a-normalizer"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Second step: Create a normalizer&lt;/h4&gt;
&lt;p&gt;Define a normalizer for your keyword by defining a function named after the
keyword, for example:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;defun&lt;/span&gt; &lt;span class="pl-e"&gt;use-package-normalize/:pin&lt;/span&gt; (&lt;span class="pl-v"&gt;name-symbol&lt;/span&gt; &lt;span class="pl-v"&gt;keyword&lt;/span&gt; &lt;span class="pl-v"&gt;args&lt;/span&gt;)
  (use-package-only-one (&lt;span class="pl-c1"&gt;symbol-name&lt;/span&gt; keyword) args
    (&lt;span class="pl-k"&gt;lambda&lt;/span&gt; (&lt;span class="pl-v"&gt;label&lt;/span&gt; &lt;span class="pl-v"&gt;arg&lt;/span&gt;)
      (&lt;span class="pl-k"&gt;cond&lt;/span&gt;
       ((&lt;span class="pl-c1"&gt;stringp&lt;/span&gt; arg) arg)
       ((&lt;span class="pl-c1"&gt;symbolp&lt;/span&gt; arg) (&lt;span class="pl-c1"&gt;symbol-name&lt;/span&gt; arg))
       (&lt;span class="pl-c1"&gt;t&lt;/span&gt;
        (use-package-error
         &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;:pin wants an archive name (a string)&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))))))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The job of the normalizer is take a list of arguments (possibly nil), and turn
it into the single argument (which could still be a list) that should appear
in the final property list used by &lt;code&gt;use-package&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-third-step-create-a-handler" class="anchor" aria-hidden="true" href="#third-step-create-a-handler"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Third step: Create a handler&lt;/h4&gt;
&lt;p&gt;Once you have a normalizer, you must create a handler for the keyword:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;defun&lt;/span&gt; &lt;span class="pl-e"&gt;use-package-handler/:pin&lt;/span&gt; (&lt;span class="pl-v"&gt;name-symbol&lt;/span&gt; &lt;span class="pl-v"&gt;keyword&lt;/span&gt; &lt;span class="pl-v"&gt;archive-name&lt;/span&gt; &lt;span class="pl-v"&gt;rest&lt;/span&gt; &lt;span class="pl-v"&gt;state&lt;/span&gt;)
  (&lt;span class="pl-k"&gt;let&lt;/span&gt; ((body (use-package-process-keywords name-symbol rest state)))
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; This happens at macro expansion time, not when the expanded code is&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; compiled or evaluated.&lt;/span&gt;
    (&lt;span class="pl-k"&gt;if&lt;/span&gt; (&lt;span class="pl-k"&gt;null&lt;/span&gt; archive-name)
        body
      (use-package-pin-package name-symbol archive-name)
      (use-package-concat
       body
       `((&lt;span class="pl-k"&gt;push&lt;/span&gt; '(&lt;span class="pl-c1"&gt;&lt;span class="pl-mi1"&gt;,&lt;/span&gt;name-symbol&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-c1"&gt;&lt;span class="pl-mi1"&gt;,&lt;/span&gt;archive-name&lt;/span&gt;)
               package-pinned-packages))))))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Handlers can affect the handling of keywords in two ways.  First, it can
modify the &lt;code&gt;state&lt;/code&gt; plist before recursively processing the remaining keywords,
to influence keywords that pay attention to the state (one example is the
state keyword &lt;code&gt;:deferred&lt;/code&gt;, not to be confused with the &lt;code&gt;use-package&lt;/code&gt; keyword
&lt;code&gt;:defer&lt;/code&gt;).  Then, once the remaining keywords have been handled and their
resulting forms returned, the handler may manipulate, extend, or just ignore
those forms.&lt;/p&gt;
&lt;p&gt;The task of each handler is to return a &lt;em&gt;list of forms&lt;/em&gt; representing code to
be inserted.  It does not need to be a &lt;code&gt;progn&lt;/code&gt; list, as this is handled
automatically in other places.  Thus it is very common to see the idiom of
using &lt;code&gt;use-package-concat&lt;/code&gt; to add new functionality before or after a code
body, so that only the minimum code necessary is emitted as the result of a
&lt;code&gt;use-package&lt;/code&gt; expansion.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-fourth-step-test-it-out" class="anchor" aria-hidden="true" href="#fourth-step-test-it-out"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Fourth step: Test it out&lt;/h4&gt;
&lt;p&gt;After the keyword has been inserted into &lt;code&gt;use-package-keywords&lt;/code&gt;, and a
normalizer and a handler defined, you can now test it by seeing how usages of
the keyword will expand.  For this, use &lt;code&gt;M-x pp-macroexpand-last-sexp&lt;/code&gt; with
the cursor set immediately after the &lt;code&gt;(use-package ...)&lt;/code&gt; expression.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-some-timing-results" class="anchor" aria-hidden="true" href="#some-timing-results"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Some timing results&lt;/h2&gt;
&lt;p&gt;On my Retina iMac, the "Mac port" variant of Emacs 24.4 loads in 0.57s, with
around 218 packages configured (nearly all of them lazy-loaded).  However, I
experience no loss of functionality, just a bit of latency when I'm first
starting to use Emacs (due to the autoloading).  Since I also use idle-loading
for many packages, perceived latency is typically reduced overall.&lt;/p&gt;
&lt;p&gt;On Linux, the same configuration loads in 0.32s.&lt;/p&gt;
&lt;p&gt;If I don't use Emacs graphically, I can test the absolute minimum times.  This
is done by running:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;time&lt;/span&gt; emacs -l init.elc -batch --eval &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;(message "Hello, world!")&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;On the Mac I see an average of 0.36s for the same configuration, and on Linux
0.26s.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-upgrading-to-2x" class="anchor" aria-hidden="true" href="#upgrading-to-2x"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Upgrading to 2.x&lt;/h1&gt;
&lt;h2&gt;&lt;a id="user-content-semantics-of-init-is-now-consistent" class="anchor" aria-hidden="true" href="#semantics-of-init-is-now-consistent"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Semantics of :init is now consistent&lt;/h2&gt;
&lt;p&gt;The meaning of &lt;code&gt;:init&lt;/code&gt; has been changed: It now &lt;em&gt;always&lt;/em&gt; happens before
package load, whether &lt;code&gt;:config&lt;/code&gt; has been deferred or not.  This means that
some uses of &lt;code&gt;:init&lt;/code&gt; in your configuration may need to be changed to &lt;code&gt;:config&lt;/code&gt;
(in the non-deferred case).  For the deferred case, the behavior is unchanged
from before.&lt;/p&gt;
&lt;p&gt;Also, because &lt;code&gt;:init&lt;/code&gt; and &lt;code&gt;:config&lt;/code&gt; now mean "before" and "after", the &lt;code&gt;:pre-&lt;/code&gt;
and &lt;code&gt;:post-&lt;/code&gt; keywords are gone, as they should no longer be necessary.&lt;/p&gt;
&lt;p&gt;Lastly, an effort has been made to make your Emacs start even in the presence
of use-package configuration failures.  So after this change, be sure to check
your &lt;code&gt;*Messages*&lt;/code&gt; buffer.  Most likely, you will have several instances where
you are using &lt;code&gt;:init&lt;/code&gt;, but should be using &lt;code&gt;:config&lt;/code&gt; (this was the case for me
in a number of places).&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-idle-has-been-removed" class="anchor" aria-hidden="true" href="#idle-has-been-removed"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;:idle has been removed&lt;/h2&gt;
&lt;p&gt;I am removing this feature for now because it can result in a nasty
inconsistency.  Consider the following definition:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; vkill
  &lt;span class="pl-c1"&gt;:commands&lt;/span&gt; vkill
  &lt;span class="pl-c1"&gt;:idle&lt;/span&gt; (some-important-configuration-here)
  &lt;span class="pl-c1"&gt;:bind&lt;/span&gt; (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-x L&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; vkill-and-helm-occur)
  &lt;span class="pl-c1"&gt;:init&lt;/span&gt;
  (&lt;span class="pl-k"&gt;defun&lt;/span&gt; &lt;span class="pl-e"&gt;vkill-and-helm-occur&lt;/span&gt; ()
    (&lt;span class="pl-k"&gt;interactive&lt;/span&gt;)
    (vkill)
    (&lt;span class="pl-c1"&gt;call-interactively&lt;/span&gt; &lt;span class="pl-c1"&gt;#&lt;span class="pl-c1"&gt;'helm-occur&lt;/span&gt;&lt;/span&gt;))

  &lt;span class="pl-c1"&gt;:config&lt;/span&gt;
  (&lt;span class="pl-k"&gt;setq&lt;/span&gt; vkill-show-all-processes &lt;span class="pl-c1"&gt;t&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If I load my Emacs and wait until the idle timer fires, then this is the
sequence of events:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:init :idle &amp;lt;load&amp;gt; :config
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But if I load Emacs and immediately type C-x L without waiting for the idle
timer to fire, this is the sequence of events:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:init &amp;lt;load&amp;gt; :config :idle
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It's possible that the user could use &lt;code&gt;featurep&lt;/code&gt; in their idle to test for
this case, but that's a subtlety I'd rather avoid.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-defer-now-accepts-an-optional-numeric-argument" class="anchor" aria-hidden="true" href="#defer-now-accepts-an-optional-numeric-argument"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;:defer now accepts an optional numeric argument&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;:defer [N]&lt;/code&gt; causes the package to be loaded -- if it has not already been --
after &lt;code&gt;N&lt;/code&gt; seconds of idle time.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; back-button
  &lt;span class="pl-c1"&gt;:commands&lt;/span&gt; (back-button-mode)
  &lt;span class="pl-c1"&gt;:defer&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:init&lt;/span&gt;
  (&lt;span class="pl-k"&gt;setq&lt;/span&gt; back-button-show-toolbar-buttons &lt;span class="pl-c1"&gt;nil&lt;/span&gt;)
  &lt;span class="pl-c1"&gt;:config&lt;/span&gt;
  (back-button-mode &lt;span class="pl-c1"&gt;1&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-add-preface-occurring-before-everything-except-disabled" class="anchor" aria-hidden="true" href="#add-preface-occurring-before-everything-except-disabled"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Add :preface, occurring before everything except :disabled&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;:preface&lt;/code&gt; can be used to establish function and variable definitions that
will 1) make the byte-compiler happy (it won't complain about functions whose
definitions are unknown because you have them within a guard block), and 2)
allow you to define code that can be used in an &lt;code&gt;:if&lt;/code&gt; test.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: whatever is specified within &lt;code&gt;:preface&lt;/code&gt; is evaluated both at load
time and at byte-compilation time, in order to ensure that definitions are
seen by both the Lisp evaluator and the byte-compiler, so you should avoid
having any side-effects in your preface, and restrict it merely to symbol
declarations and definitions.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-add-functions-for-declaring-functions-to-the-byte-compiler" class="anchor" aria-hidden="true" href="#add-functions-for-declaring-functions-to-the-byte-compiler"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Add :functions, for declaring functions to the byte-compiler&lt;/h2&gt;
&lt;p&gt;What &lt;code&gt;:defines&lt;/code&gt; does for variables, &lt;code&gt;:functions&lt;/code&gt; does for functions.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-use-packageel-is-no-longer-needed-at-runtime" class="anchor" aria-hidden="true" href="#use-packageel-is-no-longer-needed-at-runtime"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;use-package.el is no longer needed at runtime&lt;/h2&gt;
&lt;p&gt;This means you should put the following at the top of your Emacs, to further
reduce load time:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;eval-when-compile&lt;/span&gt;
  (&lt;span class="pl-c1"&gt;require&lt;/span&gt; &lt;span class="pl-c1"&gt;'use-package&lt;/span&gt;))
(&lt;span class="pl-c1"&gt;require&lt;/span&gt; &lt;span class="pl-c1"&gt;'diminish&lt;/span&gt;)                &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; if you use :diminish&lt;/span&gt;
(&lt;span class="pl-c1"&gt;require&lt;/span&gt; &lt;span class="pl-c1"&gt;'bind-key&lt;/span&gt;)                &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; if you use any :bind variant&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>jwiegley</author><guid isPermaLink="false">https://github.com/jwiegley/use-package</guid><pubDate>Sat, 01 Feb 2020 00:10:00 GMT</pubDate></item><item><title>syl20bnr/spacemacs #11 in Emacs Lisp, This month</title><link>https://github.com/syl20bnr/spacemacs</link><description>&lt;p&gt;&lt;i&gt;A community-driven Emacs distribution - The best editor is neither Emacs nor Vim,  it's Emacs *and* Vim!&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;p&gt;&lt;a name="user-content-top"&gt;&lt;/a&gt;
&lt;a href="http://spacemacs.org" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/8f5ee1d9b7278ed2c63f1f89e9a583ec59b52b6b/68747470733a2f2f63646e2e7261776769742e636f6d2f73796c3230626e722f73706163656d6163732f343432643032353737396461326636326663383663323038323730333639373731346462363531342f6173736574732f73706163656d6163732d62616467652e737667" alt="Made with Spacemacs" data-canonical-src="https://cdn.rawgit.com/syl20bnr/spacemacs/442d025779da2f62fc86c2082703697714db6514/assets/spacemacs-badge.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;a href="http://www.twitter.com/spacemacs" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/7cf10772eb6ccebe92d678c452a971e6e2778653/687474703a2f2f692e696d6775722e636f6d2f7458536f5468462e706e67" alt="Twitter" align="right" data-canonical-src="http://i.imgur.com/tXSoThF.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p align="center"&gt;&lt;a target="_blank" rel="noopener noreferrer" href="/doc/img/title2.png"&gt;&lt;img src="/doc/img/title2.png" alt="Spacemacs" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p align="center"&gt;
&lt;b&gt;&lt;a href="http://spacemacs.org/doc/DOCUMENTATION#orgheadline5" rel="nofollow"&gt;philosophy&lt;/a&gt;&lt;/b&gt;
|
&lt;b&gt;&lt;a href="http://spacemacs.org/doc/DOCUMENTATION#orgheadline8" rel="nofollow"&gt;for whom?&lt;/a&gt;&lt;/b&gt;
|
&lt;b&gt;&lt;a href="http://spacemacs.org/doc/DOCUMENTATION#orgheadline7" rel="nofollow"&gt;screenshots&lt;/a&gt;&lt;/b&gt;
|
&lt;b&gt;&lt;a href="http://spacemacs.org/doc/DOCUMENTATION.html" rel="nofollow"&gt;documentation&lt;/a&gt;&lt;/b&gt;
|
&lt;b&gt;&lt;a href="CONTRIBUTING.org"&gt;contribute&lt;/a&gt;&lt;/b&gt;
|
&lt;b&gt;&lt;a href="http://spacemacs.org/doc/DOCUMENTATION#achievements" rel="nofollow"&gt;achievements&lt;/a&gt;&lt;/b&gt;
|
&lt;b&gt;&lt;a href="http://spacemacs.org/doc/FAQ" rel="nofollow"&gt;FAQ&lt;/a&gt;&lt;/b&gt;
&lt;/p&gt;
&lt;hr&gt;
&lt;p align="center"&gt;
&lt;a href="https://gitter.im/syl20bnr/spacemacs?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/80bf7c9122b2d8f4dbadfc434c9074c1754267ae/68747470733a2f2f6261646765732e6769747465722e696d2f4a6f696e20436861742e737667" alt="Gitter" data-canonical-src="https://badges.gitter.im/Join Chat.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://travis-ci.org/syl20bnr/spacemacs" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/b724760fb5fb9a3cc9dcb3ed5fca8d102d076062/68747470733a2f2f7472617669732d63692e6f72672f73796c3230626e722f73706163656d6163732e737667" alt="Build Status" data-canonical-src="https://travis-ci.org/syl20bnr/spacemacs.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;amp;hosted_button_id=ESFVNPKP4Y742" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/516248018619132b396881c0b21749c34d6ccfbd/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f50617970616c2d446f6e6174652d626c75652e737667" alt="Donate" data-canonical-src="https://img.shields.io/badge/Paypal-Donate-blue.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://shop.spreadshirt.com/spacemacs-shop" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/f1b306f89bf6fade603509713a098316a4948ef2/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f53686f702d542d2d5368697274732d626c75652e737667" alt="Donate" data-canonical-src="https://img.shields.io/badge/Shop-T--Shirts-blue.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="http://www.slant.co/topics/12/~what-are-the-best-programming-text-editors" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/2e66996b76fc392f4936160dc3f627f663d1a68a/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f536c616e742d5265636f6d6d656e642d6666363962342e737667" alt="Recommend it" data-canonical-src="https://img.shields.io/badge/Slant-Recommend-ff69b4.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Quick Install:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clone https://github.com/syl20bnr/spacemacs ~/.emacs.d
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#introduction"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#features"&gt;Features&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#documentation"&gt;Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#getting-help"&gt;Getting Help&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#prerequisites"&gt;Prerequisites&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#emacs"&gt;Emacs&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#linux-distros"&gt;Linux distros&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#macos"&gt;macOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#windows"&gt;Windows&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#install"&gt;Install&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#default-installation"&gt;Default installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#alternate-installations"&gt;Alternate installations&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#modify-home-environment-variable"&gt;Modify HOME environment variable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#modify-spacemacs-start-directory-variable"&gt;Modify spacemacs-start-directory variable&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#spacemacs-logo"&gt;Spacemacs logo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#update"&gt;Update&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#automatic-update-on-master-branch"&gt;Automatic update (on master branch)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#manual-update-on-master-branch"&gt;Manual update (on master branch)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#on-develop-branch"&gt;On develop branch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#revert-to-a-specific-version"&gt;Revert to a specific version&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#quotes"&gt;Quotes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#contributions"&gt;Contributions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#communities"&gt;Communities&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#license"&gt;License&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#supporting-spacemacs"&gt;Supporting Spacemacs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;&lt;a id="user-content-introduction" class="anchor" aria-hidden="true" href="#introduction"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Spacemacs is a new way to experience Emacs -- a sophisticated and
polished set-up focused on ergonomics, mnemonics and consistency.&lt;/p&gt;
&lt;p&gt;Just clone it, launch it, then press the space bar to explore the
interactive list of carefully-chosen key bindings. You can also press
the home buffer's &lt;code&gt;[?]&lt;/code&gt; button for some great first key bindings to
try.&lt;/p&gt;
&lt;p&gt;Spacemacs can be used naturally by both Emacs and Vim users -- you can
even mix the two editing styles. Switching easily between input styles
makes Spacemacs a great tool for pair-programming.&lt;/p&gt;
&lt;p&gt;Spacemacs is currently in beta, and contributions are very welcome.&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="doc/img/spacemacs-python.png"&gt;&lt;img src="doc/img/spacemacs-python.png" alt="spacemacs_python" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-features" class="anchor" aria-hidden="true" href="#features"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Features&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Great documentation:&lt;/strong&gt; access documentation in Emacs with
&lt;kbd&gt;SPC h SPC&lt;/kbd&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Beautiful GUI:&lt;/strong&gt; you'll love the distraction free UI and its functional
mode-line.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Excellent ergonomics:&lt;/strong&gt; all the key bindings are accessible by pressing
the &lt;kbd&gt;space bar&lt;/kbd&gt; or &lt;kbd&gt;alt-m&lt;/kbd&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mnemonic key bindings:&lt;/strong&gt; commands have mnemonic prefixes like
&lt;kbd&gt;SPC b&lt;/kbd&gt; for all the buffer commands or &lt;kbd&gt;SPC p&lt;/kbd&gt; for the
project commands.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Batteries included:&lt;/strong&gt; discover hundreds of ready-to-use packages nicely
organised in configuration layers following a set of
&lt;a href="http://spacemacs.org/doc/CONVENTIONS" rel="nofollow"&gt;conventions&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Documentation&lt;/h1&gt;
&lt;p&gt;Comprehensive documentation is available for each layer by pressing
&lt;kbd&gt;SPC h SPC&lt;/kbd&gt;.&lt;/p&gt;
&lt;p&gt;You can also check the &lt;a href="http://spacemacs.org/doc/DOCUMENTATION" rel="nofollow"&gt;general documentation&lt;/a&gt;,
&lt;a href="http://spacemacs.org/doc/QUICK_START" rel="nofollow"&gt;quick start guide&lt;/a&gt; and the &lt;a href="http://spacemacs.org/doc/FAQ" rel="nofollow"&gt;FAQ&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-getting-help" class="anchor" aria-hidden="true" href="#getting-help"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Getting Help&lt;/h1&gt;
&lt;p&gt;If you need help, ask your question in the &lt;a href="https://gitter.im/syl20bnr/spacemacs" rel="nofollow"&gt;Gitter Chat&lt;/a&gt; and a member of the
community will help you out.&lt;/p&gt;
&lt;p&gt;If you prefer IRC, connect to the &lt;a href="https://irc.gitter.im/" rel="nofollow"&gt;Gitter Chat IRC server&lt;/a&gt; and join the
&lt;code&gt;#syl20bnr/spacemacs&lt;/code&gt; channel.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-prerequisites" class="anchor" aria-hidden="true" href="#prerequisites"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Prerequisites&lt;/h1&gt;
&lt;h2&gt;&lt;a id="user-content-emacs" class="anchor" aria-hidden="true" href="#emacs"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Emacs&lt;/h2&gt;
&lt;p&gt;Spacemacs requires Emacs 24.4 or above. The development version of Emacs (at the
time of writing, this is 25.2) is not &lt;em&gt;officially&lt;/em&gt; supported, but should
nevertheless be expected to work.&lt;/p&gt;
&lt;p&gt;Some modes require third-party tools that you'll have to install via your
favorite package manager.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-linux-distros" class="anchor" aria-hidden="true" href="#linux-distros"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Linux distros&lt;/h3&gt;
&lt;p&gt;Install Emacs from the package manager of your Linux distribution.&lt;/p&gt;
&lt;p&gt;You should install the "emacs" package, not the "xemacs" package.
XEmacs is an old fork of Emacs. The X in its name is unrelated to X11.
Both Emacs and XEmacs have graphical support.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Ubuntu LTS 12.04 and 14.04 repositories have only Emacs 24.3
available. You have to &lt;a href="https://www.gnu.org/software/emacs/manual/html_node/efaq/Installing-Emacs.html" rel="nofollow"&gt;build from source&lt;/a&gt; Emacs 24.4 or greater,
as Spacemacs won't work with 24.3. The same may be true for other distributions
as well.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-macos" class="anchor" aria-hidden="true" href="#macos"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;macOS&lt;/h3&gt;
&lt;p&gt;The recommended way of installing Emacs on macOS is using &lt;a href="http://brew.sh" rel="nofollow"&gt;homebrew&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;$ brew tap d12frosted/emacs-plus
$ brew install emacs-plus
$ brew linkapps emacs-plus&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; these homebrew commands will install GNU Emacs, and link it to your
&lt;code&gt;/Applications&lt;/code&gt; directory. You still need to run the &lt;code&gt;git clone&lt;/code&gt; mentioned at
the start of this file. That will populate your &lt;code&gt;~/.emacs.d&lt;/code&gt; directory, which is
what transforms a regular GNU Emacs into Spacemacs.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; the proposed &lt;code&gt;emacs-plus&lt;/code&gt; tap is identical to the &lt;code&gt;emacs&lt;/code&gt; formulae, it
just builds GNU Emacs with support of several features by default along with
providing Spacemacs icon.
See &lt;a href="https://github.com/d12frosted/homebrew-emacs-plus"&gt;emacs-plus&lt;/a&gt; for more
information.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: to have the title bar match your theme background color,
consider using instead:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;$ brew install emacs-plus --HEAD --with-natural-title-bars&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; after you have completed the &lt;a href="#install"&gt;install process&lt;/a&gt; below, it is
also recommended to add the &lt;a href="http://spacemacs.org/layers/+os/osx/README.html" rel="nofollow"&gt;osx layer&lt;/a&gt; to your &lt;a href="http://spacemacs.org/doc/DOCUMENTATION#orgheadline45" rel="nofollow"&gt;dotfile&lt;/a&gt;. Install
instructions are available in the &lt;a href="http://spacemacs.org/layers/+os/osx/README.html" rel="nofollow"&gt;osx layer&lt;/a&gt; documentation.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; if the powerline separators on the spaceline are a different (less
saturated) color than the rest of the line, you can add following snippet to
&lt;code&gt;dotspacemacs/user-config&lt;/code&gt; in your &lt;code&gt;.spacemacs&lt;/code&gt; file.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;setq&lt;/span&gt; ns-use-srgb-colorspace &lt;span class="pl-c1"&gt;nil&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Keep in mind that this is not ideal solution as it affects all colours in Emacs.
Another option is to use different powerline separator. For example, &lt;code&gt;alternate&lt;/code&gt;
and &lt;code&gt;bar&lt;/code&gt; diminishes the difference. And using &lt;code&gt;utf-8&lt;/code&gt; separator makes it go
away completely without the need to change colour space. In order to change
powerline separator put following snippet in &lt;code&gt;dotspacemacs/user-config&lt;/code&gt;.&lt;/p&gt;
&lt;pre lang="eslip"&gt;&lt;code&gt;(setq powerline-default-separator 'utf-8)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For more information about powerline separators, please refer to appropriate
section in &lt;a href="http://spacemacs.org/doc/DOCUMENTATION" rel="nofollow"&gt;Documentation&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-windows" class="anchor" aria-hidden="true" href="#windows"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Windows&lt;/h3&gt;
&lt;p&gt;You can download good quality builds from the &lt;a href="http://emacsbinw64.sourceforge.net/" rel="nofollow"&gt;emacs-w64 project&lt;/a&gt;.
It is recommended to install the most recent &lt;a href="https://sourceforge.net/projects/emacsbinw64/files/release/" rel="nofollow"&gt;stable build&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Be sure to declare a environment variable named &lt;code&gt;HOME&lt;/code&gt; pointing to your user
directory &lt;code&gt;C:\Users\&amp;lt;username&amp;gt;&lt;/code&gt;. Then you can clone Spacemacs in this directory.&lt;/p&gt;
&lt;p&gt;Sometimes you'll get the following error when you first start Emacs:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;The directory ~/.emacs.d/server is unsafe
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To fix it change the owner of the directory &lt;code&gt;~/.emacs.d/server&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;from Properties select the Tab “Security”,&lt;/li&gt;
&lt;li&gt;select the button “Advanced”,&lt;/li&gt;
&lt;li&gt;select the Tab “Owner”&lt;/li&gt;
&lt;li&gt;change the owner to your account name&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Source: &lt;a href="http://stackoverflow.com/questions/885793/emacs-error-when-calling-server-start" rel="nofollow"&gt;Stack Overflow&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For efficient searches we recommend to install &lt;code&gt;pt&lt;/code&gt; (&lt;a href="https://github.com/monochromegane/the_platinum_searcher"&gt;the platinum searcher&lt;/a&gt;).
&lt;code&gt;pt&lt;/code&gt; version 1.7.7 or higher is required.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-install" class="anchor" aria-hidden="true" href="#install"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Install&lt;/h1&gt;
&lt;h2&gt;&lt;a id="user-content-default-installation" class="anchor" aria-hidden="true" href="#default-installation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Default installation&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;If you have an existing Emacs configuration, back it up first:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;cd&lt;/span&gt; &lt;span class="pl-k"&gt;~&lt;/span&gt;
mv .emacs.d .emacs.d.bak
mv .emacs .emacs.bak&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Don't forget to backup and &lt;em&gt;remove&lt;/em&gt; &lt;code&gt;~/.emacs&lt;/code&gt; file otherwise Spacemacs
&lt;strong&gt;WILL NOT&lt;/strong&gt; load since that file prevents Emacs from loading the proper
initialization file.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Clone the repository:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;git clone https://github.com/syl20bnr/spacemacs &lt;span class="pl-k"&gt;~&lt;/span&gt;/.emacs.d&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;master&lt;/code&gt; is the stable branch and it is &lt;em&gt;immutable&lt;/em&gt;, &lt;strong&gt;DO NOT&lt;/strong&gt; make any
modification to it or you will break the update mechanism. If you want to
fork Spacemacs safely use the &lt;code&gt;develop&lt;/code&gt; branch where you handle the update
manually.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(Optional) Install the &lt;a href="https://github.com/adobe-fonts/source-code-pro"&gt;Source Code Pro&lt;/a&gt; font.&lt;/p&gt;
&lt;p&gt;If you are running in terminal you'll also need to change font settings of
your terminal.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Launch Emacs. Spacemacs will automatically install the packages it requires.
If you get an error regarding package downloads then you may try to disable
the HTTPS protocol by starting Emacs with&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;emacs --insecure&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or you can set the &lt;code&gt;dotspacemacs-elpa-https&lt;/code&gt; to &lt;code&gt;nil&lt;/code&gt; in your dotfile to
remove the need to start Emacs with &lt;code&gt;--insecure&lt;/code&gt; argument. You may wish to
clear out your &lt;code&gt;.emacs.d/elpa&lt;/code&gt; directory before doing this, so that any
corrupted packages you may have downloaded will be re-installed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Restart Emacs to complete the installation.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If the mode-line turns red then be sure to consult the &lt;a href="http://spacemacs.org/doc/FAQ" rel="nofollow"&gt;FAQ&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-alternate-installations" class="anchor" aria-hidden="true" href="#alternate-installations"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Alternate installations&lt;/h2&gt;
&lt;p&gt;It may be useful to clone Spacemacs outside Emacs dotdirectory &lt;code&gt;~/.emacs.d&lt;/code&gt; so
you can try Spacemacs without replacing completely our own configuration.
There is currently two possibilities to support alternative location for
Spacemacs configuration.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-modify-home-environment-variable" class="anchor" aria-hidden="true" href="#modify-home-environment-variable"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Modify HOME environment variable&lt;/h3&gt;
&lt;p&gt;This solution is ideal to quickly try Spacemacs without compromising your
existing configuration.&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;mkdir &lt;span class="pl-k"&gt;~&lt;/span&gt;/spacemacs
git clone https://github.com/syl20bnr/spacemacs.git &lt;span class="pl-k"&gt;~&lt;/span&gt;/spacemacs/.emacs.d
HOME=&lt;span class="pl-k"&gt;~&lt;/span&gt;/spacemacs emacs&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note: If you're on Fish shell, you will need to modify the last command to: &lt;code&gt;env HOME=$HOME/spacemacs emacs&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-modify-spacemacs-start-directory-variable" class="anchor" aria-hidden="true" href="#modify-spacemacs-start-directory-variable"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Modify spacemacs-start-directory variable&lt;/h3&gt;
&lt;p&gt;This solution is better suited to "embed" Spacemacs into your own configuration.
Say you cloned Spacemacs in &lt;code&gt;~/.emacs.d/spacemacs/&lt;/code&gt; then drop these lines in
&lt;code&gt;~/.emacs.d/init.el&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;setq&lt;/span&gt; spacemacs-start-directory &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;~/.emacs.d/spacemacs/&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;load-file&lt;/span&gt; (&lt;span class="pl-c1"&gt;concat&lt;/span&gt; spacemacs-start-directory &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;init.el&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-spacemacs-logo" class="anchor" aria-hidden="true" href="#spacemacs-logo"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Spacemacs logo&lt;/h2&gt;
&lt;p&gt;For Ubuntu users, follow this guide to
&lt;a href="http://splendidabacus.com/posts/2015/03/spacemacs-unity-icon/" rel="nofollow"&gt;change the logo in Unity&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For Mac users, you need to &lt;a href="https://github.com/nashamri/spacemacs-logo"&gt;download the .icns version of the logo&lt;/a&gt;,
then &lt;a href="http://www.idownloadblog.com/2014/07/16/how-to-change-app-icon-mac/" rel="nofollow"&gt;change the logo on Dock&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-update" class="anchor" aria-hidden="true" href="#update"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Update&lt;/h1&gt;
&lt;p&gt;Spacemacs has a built-in notification of a new version when you are on the
&lt;code&gt;master&lt;/code&gt; branch. If you are on the &lt;code&gt;develop&lt;/code&gt; branch then you'll have to
update Spacemacs manually by updating your repository.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-automatic-update-on-master-branch" class="anchor" aria-hidden="true" href="#automatic-update-on-master-branch"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Automatic update (on master branch)&lt;/h2&gt;
&lt;p&gt;When a new version is available a little arrow appears in the mode-line.&lt;/p&gt;
&lt;p&gt;Its color depends on the number of versions available since your last update.
Green means that your current version is recent, orange and red mean that your
current version is older.&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="doc/img/powerline-update.png"&gt;&lt;img src="doc/img/powerline-update.png" alt="powerline_update" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Click on the arrow to update Spacemacs to the last version.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-manual-update-on-master-branch" class="anchor" aria-hidden="true" href="#manual-update-on-master-branch"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Manual update (on master branch)&lt;/h2&gt;
&lt;p&gt;(Remove the angle brackets when typing the lines below into your shell.)&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;git fetch
git reset --hard &lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt;tag version which you are updating to&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-on-develop-branch" class="anchor" aria-hidden="true" href="#on-develop-branch"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;On develop branch&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Update Emacs packages by clicking (press &lt;code&gt;RET&lt;/code&gt;) on the &lt;code&gt;[Update Packages]&lt;/code&gt; link of
the starting page.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Close Emacs and update the git repository:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;git pull --rebase&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Restart Emacs to complete the upgrade.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;&lt;a id="user-content-revert-to-a-specific-version" class="anchor" aria-hidden="true" href="#revert-to-a-specific-version"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Revert to a specific version&lt;/h2&gt;
&lt;p&gt;To revert to a specific version you just have to checkout the corresponding
branch, for instance to revert to the last &lt;code&gt;0.103&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;git checkout origin/release-0.103&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;After you update, either manually, or automatically, you are advised to update
your packages by clicking the &lt;code&gt;[Update Packages]&lt;/code&gt; button on the Spacemacs Home
Buffer.&lt;/strong&gt;&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-quotes" class="anchor" aria-hidden="true" href="#quotes"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Quotes&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://gitter.im/syl20bnr/spacemacs?at=568e627a0cdaaa62045a7df6" rel="nofollow"&gt;Quote&lt;/a&gt; by &lt;a href="https://github.com/ashnur"&gt;ashnur&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;«I feel that spacemacs is an aircraft carrier and I am playing table tennis on the deck as a freerider.»
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href="https://gitter.im/syl20bnr/spacemacs?at=5768456c6577f032450cfedb" rel="nofollow"&gt;Quote&lt;/a&gt; by &lt;a href="https://github.com/deuill"&gt;deuill&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;«I LOVE SPACEMACS AND MAGIT

 That is all»
&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;&lt;a id="user-content-contributions" class="anchor" aria-hidden="true" href="#contributions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contributions&lt;/h1&gt;
&lt;p&gt;Spacemacs is a community-driven project, it needs &lt;em&gt;you&lt;/em&gt; to keep it up to
date and propose great and useful configuration for all the things!&lt;/p&gt;
&lt;p&gt;Before contributing be sure to consult the
&lt;a href="CONTRIBUTING.org"&gt;contribution guidelines&lt;/a&gt; and &lt;a href="http://spacemacs.org/doc/CONVENTIONS" rel="nofollow"&gt;conventions&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-communities" class="anchor" aria-hidden="true" href="#communities"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Communities&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://gitter.im/syl20bnr/spacemacs" rel="nofollow"&gt;Gitter Chat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://emacs.stackexchange.com/questions/tagged/spacemacs" rel="nofollow"&gt;Stack Exchange&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/spacemacs" rel="nofollow"&gt;Reddit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;a id="user-content-license" class="anchor" aria-hidden="true" href="#license"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;License&lt;/h1&gt;
&lt;p&gt;The license is GPLv3 for all parts specific to Spacemacs, this includes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the initialization and core files&lt;/li&gt;
&lt;li&gt;all the layer files&lt;/li&gt;
&lt;li&gt;the documentation&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For the packages shipped in this repository you can refer to the files header.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/nashamri/spacemacs-logo"&gt;Spacemacs logo&lt;/a&gt; by &lt;a href="https://github.com/nashamri"&gt;Nasser Alshammari&lt;/a&gt; released under a &lt;a href="http://creativecommons.org/licenses/by-sa/4.0/" rel="nofollow"&gt;Creative Commons Attribution-ShareAlike 4.0 International License.&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-supporting-spacemacs" class="anchor" aria-hidden="true" href="#supporting-spacemacs"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Supporting Spacemacs&lt;/h1&gt;
&lt;p&gt;The best way to support Spacemacs is to contribute to it either by reporting
bugs, helping the community on the &lt;a href="https://gitter.im/syl20bnr/spacemacs" rel="nofollow"&gt;Gitter Chat&lt;/a&gt; or sending pull requests.&lt;/p&gt;
&lt;p&gt;You can show your love for the project by getting cool Spacemacs t-shirts, mugs
and more in the &lt;a href="https://shop.spreadshirt.com/spacemacs-shop" rel="nofollow"&gt;Spacemacs Shop&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you want to show your support financially you can contribute to &lt;a href="https://salt.bountysource.com/teams/spacemacs" rel="nofollow"&gt;Bountysource&lt;/a&gt; or buy a drink for the
maintainer by clicking on the &lt;a href="#top"&gt;Paypal badge&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you used spacemacs in a project and you want to show that fact, you can use
the spacemacs badge: &lt;a href="http://spacemacs.org" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/8f5ee1d9b7278ed2c63f1f89e9a583ec59b52b6b/68747470733a2f2f63646e2e7261776769742e636f6d2f73796c3230626e722f73706163656d6163732f343432643032353737396461326636326663383663323038323730333639373731346462363531342f6173736574732f73706163656d6163732d62616467652e737667" alt="Built with Spacemacs" data-canonical-src="https://cdn.rawgit.com/syl20bnr/spacemacs/442d025779da2f62fc86c2082703697714db6514/assets/spacemacs-badge.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;For Markdown:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[![Built with Spacemacs](https://cdn.rawgit.com/syl20bnr/spacemacs/442d025779da2f62fc86c2082703697714db6514/assets/spacemacs-badge.svg)](http://spacemacs.org)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For HTML:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;a href="http://spacemacs.org"&amp;gt;&amp;lt;img src="https://cdn.rawgit.com/syl20bnr/spacemacs/442d025779da2f62fc86c2082703697714db6514/assets/spacemacs-badge.svg" /&amp;gt;&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For Org-mode:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[[http://spacemacs.org][file:https://cdn.rawgit.com/syl20bnr/spacemacs/442d025779da2f62fc86c2082703697714db6514/assets/spacemacs-badge.svg]]
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thank you!&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>syl20bnr</author><guid isPermaLink="false">https://github.com/syl20bnr/spacemacs</guid><pubDate>Sat, 01 Feb 2020 00:11:00 GMT</pubDate></item><item><title>flycheck/flycheck #12 in Emacs Lisp, This month</title><link>https://github.com/flycheck/flycheck</link><description>&lt;p&gt;&lt;i&gt;On the fly syntax checking for GNU Emacs&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="" class="anchor" aria-hidden="true" href="#"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="https://www.flycheck.org" rel="nofollow"&gt;&lt;img src="https://raw.githubusercontent.com/flycheck/flycheck/master/doc/_static/logo.png" alt="Flycheck" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/flycheck/flycheck/blob/master/COPYING"&gt;&lt;img src="https://camo.githubusercontent.com/38a497ca55f91c76e1bf6a45e1346f41c7c3b2fa/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f666c79636865636b2f666c79636865636b2e737667" alt="License GPL 3" data-canonical-src="https://img.shields.io/github/license/flycheck/flycheck.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://gitter.im/flycheck/flycheck" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/34b419bfe87339b87e49fe9d3367bffc9e18e2bd/68747470733a2f2f696d672e736869656c64732e696f2f6769747465722f726f6f6d2f666c79636865636b2f666c79636865636b2e737667" alt="Join the chat" data-canonical-src="https://img.shields.io/gitter/room/flycheck/flycheck.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://stable.melpa.org/#/flycheck" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/bb21afc5143865c9262a430985b2942363be5183/687474703a2f2f737461626c652e6d656c70612e6f72672f7061636b616765732f666c79636865636b2d62616467652e737667" alt="MELPA stable version" data-canonical-src="http://stable.melpa.org/packages/flycheck-badge.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://travis-ci.org/flycheck/flycheck" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/3c562a74259583ea9e010550d7b27081c43f0e7f/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f666c79636865636b2f666c79636865636b2f6d61737465722e737667" alt="Build Status" data-canonical-src="https://img.shields.io/travis/flycheck/flycheck/master.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.flycheck.org" rel="nofollow"&gt;https://www.flycheck.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Modern on-the-fly syntax checking extension for GNU Emacs.  &lt;a href="https://www.flycheck.org/en/latest/#try-out" rel="nofollow"&gt;Try it&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/flycheck/flycheck/master/doc/images/flycheck-annotated.png"&gt;&lt;img src="https://raw.githubusercontent.com/flycheck/flycheck/master/doc/images/flycheck-annotated.png" alt="" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For a more gentle introduction read the &lt;a href="https://www.flycheck.org/en/latest/user/installation.html" rel="nofollow"&gt;Installation&lt;/a&gt; instructions and go
through &lt;a href="https://www.flycheck.org/en/latest/user/quickstart.html" rel="nofollow"&gt;Quickstart&lt;/a&gt; guide.&lt;/p&gt;
&lt;p&gt;Please ask questions about Flycheck on &lt;a href="https://emacs.stackexchange.com/questions/tagged/flycheck" rel="nofollow"&gt;Stack Exchange&lt;/a&gt; or in our
&lt;a href="https://gitter.im/flycheck/flycheck" rel="nofollow"&gt;Gitter chat&lt;/a&gt;, and report bugs to our &lt;a href="https://github.com/flycheck/flycheck/issues"&gt;issue tracker&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We welcome all kinds of contributions, whether you write patches, open pull
requests, write documentation, help others with Flycheck issues, or just tell
other people about your experiences with Flycheck.  Please take a look at our
&lt;a href="https://www.flycheck.org/en/latest/contributor/contributing.html" rel="nofollow"&gt;Contributor’s Guide&lt;/a&gt; for help and guidance about contributing to
Flycheck.&lt;/p&gt;
&lt;p&gt;We strive to create a safe, friendly and welcoming environment in the Flycheck
community and have a &lt;a href="https://www.flycheck.org/en/latest/community/conduct.html" rel="nofollow"&gt;Code of Conduct&lt;/a&gt; that defines acceptable and welcome
behaviour as well as sanctions for violations.  All contributors and all
participants are expected to follow it, on Github, Gitter, Emacs.SX or any other
place that’s part of Flycheck’s broader community.&lt;/p&gt;
&lt;p&gt;Flycheck is free software: you can redistribute it and/or modify it under the
terms of the &lt;a href="https://github.com/flycheck/flycheck/blob/master/COPYING"&gt;GNU General Public License&lt;/a&gt; as published by the Free
Software Foundation, either version 3 of the License, or (at your option) any
later version.&lt;/p&gt;
&lt;p&gt;Flycheck is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.  See the &lt;a href="https://github.com/flycheck/flycheck/blob/master/COPYING"&gt;GNU General Public License&lt;/a&gt; for more
details.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>flycheck</author><guid isPermaLink="false">https://github.com/flycheck/flycheck</guid><pubDate>Sat, 01 Feb 2020 00:12:00 GMT</pubDate></item><item><title>Alexander-Miller/treemacs #13 in Emacs Lisp, This month</title><link>https://github.com/Alexander-Miller/treemacs</link><description>&lt;p&gt;&lt;i&gt;[No description found.]&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="org" data-path="README.org"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;p&gt;&lt;a href="https://gitter.im/treemacs/community" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/5b239b2ea58d8857151d7136447bdddef78227ef/68747470733a2f2f6261646765732e6769747465722e696d2f416c6578616e6465722d4d696c6c65722f747265656d6163732e706e67" alt="https://badges.gitter.im/Alexander-Miller/treemacs.png" data-canonical-src="https://badges.gitter.im/Alexander-Miller/treemacs.png" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a href="https://melpa.org/#/treemacs" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/198299674034941bf401ad794c2209a81e46c8b2/68747470733a2f2f6d656c70612e6f72672f7061636b616765732f747265656d6163732d62616467652e737667" alt="https://melpa.org/packages/treemacs-badge.svg" data-canonical-src="https://melpa.org/packages/treemacs-badge.svg" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a href="https://stable.melpa.org/#/treemacs" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/4a2a3b41806c9ee6799e995dfe48dbbb9ce4e520/68747470733a2f2f737461626c652e6d656c70612e6f72672f7061636b616765732f747265656d6163732d62616467652e737667" alt="https://stable.melpa.org/packages/treemacs-badge.svg" data-canonical-src="https://stable.melpa.org/packages/treemacs-badge.svg" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a href="https://travis-ci.org/Alexander-Miller/treemacs" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/6c26724bd82f15a28e02df0c370e07436a3d8f16/68747470733a2f2f7472617669732d63692e6f72672f416c6578616e6465722d4d696c6c65722f747265656d6163732e7376673f6272616e63683d6d6173746572" alt="https://travis-ci.org/Alexander-Miller/treemacs.svg?branch=master" data-canonical-src="https://travis-ci.org/Alexander-Miller/treemacs.svg?branch=master" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a href="http://spacemacs.org" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/8f5ee1d9b7278ed2c63f1f89e9a583ec59b52b6b/68747470733a2f2f63646e2e7261776769742e636f6d2f73796c3230626e722f73706163656d6163732f343432643032353737396461326636326663383663323038323730333639373731346462363531342f6173736574732f73706163656d6163732d62616467652e737667" alt="https://cdn.rawgit.com/syl20bnr/spacemacs/442d025779da2f62fc86c2082703697714db6514/assets/spacemacs-badge.svg" data-canonical-src="https://cdn.rawgit.com/syl20bnr/spacemacs/442d025779da2f62fc86c2082703697714db6514/assets/spacemacs-badge.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-treemacs---a-tree-layout-file-explorer-for-emacs" class="anchor" aria-hidden="true" href="#treemacs---a-tree-layout-file-explorer-for-emacs"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Treemacs - a tree layout file explorer for Emacs&lt;/h1&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="screenshots/screenshot.png"&gt;&lt;img src="screenshots/screenshot.png" alt="screenshots/screenshot.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-content" class="anchor" aria-hidden="true" href="#content"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Content&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="#quick-feature-overview"&gt;Quick Feature Overview&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href="#fancy-gifs"&gt;Fancy Gifs!&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href="#quick-start"&gt;Quick Start&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="#detailed-feature-list"&gt;Detailed Feature List&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href="#projects-and-workspaces"&gt;Projects and Workspaces&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#conveniently-editing-your-projects-and-workspaces"&gt;Conveniently Editing Your Projects and Workspaces&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#navigation-without-projects-and-workspaces"&gt;Navigation without Projects and Workspaces&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#frame-locality"&gt;Frame Locality&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#mouse-interface"&gt;Mouse Interface&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#follow-mode"&gt;Follow-mode&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#tag-follow-mode"&gt;Tag-follow-mode&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#fringe-indicator-mode"&gt;Fringe-indicator-mode&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#git-mode"&gt;Git-mode&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#filewatch-mode"&gt;Filewatch-mode&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#session-persistence"&gt;Session Persistence&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#terminal-compatibility"&gt;Terminal Compatibility&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#tag-view"&gt;Tag View&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#current-directory-awareness"&gt;Current-Directory Awareness&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#tramp-support"&gt;Tramp Support&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#org-support"&gt;Org Support&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#theme-support"&gt;Theme Support&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#additional-packages"&gt;Additional Packages&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#treemacs-as-a-framework"&gt;Treemacs as a Framework&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href="#installation"&gt;Installation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="#configuration"&gt;Configuration&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href="#variables"&gt;Variables&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#faces"&gt;Faces&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#evil-compatibility"&gt;Evil compatibility&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#customizing-themes-and-icons"&gt;Customizing Themes and Icons&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href="#keymap"&gt;Keymap&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href="#unbound-functions"&gt;Unbound functions&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#default-keymaps"&gt;Default keymaps&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href="#compatibility"&gt;Compatibility&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="#faq"&gt;FAQ&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="#contributing"&gt;Contributing&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="#working-with-the-code-base"&gt;Working With The Code Base&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="#dependencies"&gt;Dependencies&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;a id="user-content-quick-feature-overview" class="anchor" aria-hidden="true" href="#quick-feature-overview"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Quick Feature Overview&lt;/h1&gt;
&lt;p&gt;Treemacs is a file and project explorer similar to NeoTree or vim’s NerdTree, but largely inspired by the Project
  Explorer in Eclipse. It shows the file system outlines of your projects in a simple tree layout allowing quick
  navigation and exploration, while also possessing &lt;b&gt;basic&lt;/b&gt; file management utilities. Specifically a quick feature
  overview looks as follows:&lt;/p&gt;
&lt;dl&gt;
  &lt;dt&gt;Project management&lt;/dt&gt;&lt;dd&gt;Treemacs lets you view multiple file trees - projects - at once and quickly add or remove them,
    and groups projects in workspaces.&lt;/dd&gt;
  &lt;dt&gt;Easy navigation&lt;/dt&gt;&lt;dd&gt;quickly move between projects or use shortcuts to jump to parent or neighbouring nodes.&lt;/dd&gt;
  &lt;dt&gt;Versatile file access&lt;/dt&gt;&lt;dd&gt;decide exactly how and where a file will be opened, including using &lt;code&gt;ace-window&lt;/code&gt; to choose
    a window or launching an external application.&lt;/dd&gt;
  &lt;dt&gt;Understanding of frames&lt;/dt&gt;&lt;dd&gt;every frame will receive its own treemacs buffer that will live and die with that frame.&lt;/dd&gt;
  &lt;dt&gt;Finding of files and tags&lt;/dt&gt;&lt;dd&gt;Treemacs can follow along and keep in focus the currently selected file or even the tag
    at point using, either manually or automatically using either &lt;code&gt;treemacs-follow-mode&lt;/code&gt; or &lt;code&gt;treemacs-tag-follow-mode&lt;/code&gt;.&lt;/dd&gt;
  &lt;dt&gt;Git Integration&lt;/dt&gt;&lt;dd&gt;Treemacs can use different faces for files and directories based on their git status.
    The git process is run asynchronously, minimizing its performance impact.&lt;/dd&gt;
  &lt;dt&gt;&lt;a href="https://github.com/deb0ch/emacs-winum"&gt;Winum&lt;/a&gt; &amp;amp; &lt;a href="https://github.com/abo-abo/ace-window"&gt;ace-window&lt;/a&gt; compatibility&lt;/dt&gt;&lt;dd&gt;The presence of treemacs will not interfere with winum’s and ace-window’s
    usual layouts.&lt;/dd&gt;
  &lt;dt&gt;&lt;a href="https://github.com/bbatsov/projectile"&gt;Projectile&lt;/a&gt; integration&lt;/dt&gt;&lt;dd&gt;the &lt;code&gt;treemacs-projectile&lt;/code&gt; package lets you quickly add your projectile projects to the
    treemacs workspace.&lt;/dd&gt;
  &lt;dt&gt;Simple mouse interface&lt;/dt&gt;&lt;dd&gt;Left clicks will work the same as you’re used to from with graphical applications&lt;/dd&gt;
  &lt;dt&gt;Session persistence&lt;/dt&gt;&lt;dd&gt;Treemacs automatically saves and restores your workspaces.&lt;/dd&gt;
  &lt;dt&gt;Dashing good looks&lt;/dt&gt;&lt;dd&gt;Treemacs uses (optionally resizable) png images in HD 22x22 resolution for its icons (quantity
    is, of course, another matter). When run in a terminal a simple fallback is used.&lt;/dd&gt;
  &lt;dt&gt;Tag view&lt;/dt&gt;&lt;dd&gt;Treemacs can display files’ tags. All file types that Emacs can generate a (semantic) imenu index for are
    supported.&lt;/dd&gt;
  &lt;dt&gt;Visual feedback&lt;/dt&gt;&lt;dd&gt;When it would otherwise be difficult to see the message in the minibuffer success/failure is
    indicated with pulse.el.&lt;/dd&gt;
  &lt;dt&gt;Theming support&lt;/dt&gt;&lt;dd&gt;Treemacs supports using multiple icon themes that can be changed at will.&lt;/dd&gt;
  &lt;dt&gt;Ease of use&lt;/dt&gt;&lt;dd&gt;Treemacs offers many configuration options, but comes with a set of (what hopefully should be) sane
    defaults. Installation aside there are two obligatory pieces of setup: 1) Choosing convenient keybindings to run
    treemacs and 2) If you use evil: requiring &lt;code&gt;treemacs-evil&lt;/code&gt; to integrate treemacs with evil and enable j/k navigation.
    More on both below. You can also summon a helpful hydra with &lt;code&gt;?&lt;/code&gt; that will remind you of treemacs’ many keybindings
    and features.&lt;/dd&gt;
  &lt;dt&gt;Bookmark integration&lt;/dt&gt;&lt;dd&gt;Running &lt;code&gt;bookmark-set&lt;/code&gt; on a Treemacs item will store a bookmark to Treemacs buffer for that item.&lt;/dd&gt;
&lt;/dl&gt;
&lt;h2&gt;&lt;a id="user-content-fancy-gifs" class="anchor" aria-hidden="true" href="#fancy-gifs"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Fancy Gifs!&lt;/h2&gt;
&lt;p&gt;Various ways to open files:
  &lt;a target="_blank" rel="noopener noreferrer" href="screenshots/open-files.gif"&gt;&lt;img src="screenshots/open-files.gif" alt="screenshots/open-files.gif" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Workspace administration with org-mode:
  &lt;a target="_blank" rel="noopener noreferrer" href="screenshots/workspace-edit.gif"&gt;&lt;img src="screenshots/workspace-edit.gif" alt="screenshots/workspace-edit.gif" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Automatic reaction to changes in the file system:
  &lt;a target="_blank" rel="noopener noreferrer" href="screenshots/filewatch.gif"&gt;&lt;img src="screenshots/filewatch.gif" alt="screenshots/filewatch.gif" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Automatic reaction to changes in git:
  &lt;a target="_blank" rel="noopener noreferrer" href="screenshots/git.gif"&gt;&lt;img src="screenshots/git.gif" alt="screenshots/git.gif" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Full-featured mouse interface:
  &lt;a target="_blank" rel="noopener noreferrer" href="screenshots/mouse-interface.gif"&gt;&lt;img src="screenshots/mouse-interface.gif" alt="screenshots/mouse-interface.gif" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Resizable icons:
  &lt;a target="_blank" rel="noopener noreferrer" href="screenshots/icon-resize.gif"&gt;&lt;img src="screenshots/icon-resize.gif" alt="screenshots/icon-resize.gif" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-quick-start" class="anchor" aria-hidden="true" href="#quick-start"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Quick Start&lt;/h1&gt;
&lt;p&gt;If you don’t care about reading the full readme here’s a list of some bare bones basics to get you started:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;First of all: press &lt;code&gt;?&lt;/code&gt; to summon the helpful hydra:
    &lt;a target="_blank" rel="noopener noreferrer" href="screenshots/hydra.png"&gt;&lt;img src="screenshots/hydra.png" alt="screenshots/hydra.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;If you use evil don’t forget to also install &lt;code&gt;treemacs-evil&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;If you use projectile you can install &lt;code&gt;treemacs-projectile&lt;/code&gt; to allow quickly add your projectile projects to
    treemacs.&lt;/li&gt;
  &lt;li&gt;Treemacs doesn’t bind any global keys, you need to use whatever fits you best. A full install setup can be found
    &lt;a href="#installation"&gt;below&lt;/a&gt;. Otherwise just add a keybind for &lt;code&gt;treemacs&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;For navigation use n/p (j/k when evil), M-n/M-p to move to same-height neighbour u to go to parent, and C-n/C-k to
    move between projects.&lt;/li&gt;
  &lt;li&gt;There’s half a dozen different ways to open nodes, all bound under o as prefix. Pick your favourite.&lt;/li&gt;
  &lt;li&gt;TAB and RET are particularly configurable. See &lt;code&gt;treemacs-TAB/RET-actions-config&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Projects administration is bound under the &lt;code&gt;C-c C-p&lt;/code&gt; prefix.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;a id="user-content-detailed-feature-list" class="anchor" aria-hidden="true" href="#detailed-feature-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Detailed Feature List&lt;/h1&gt;
&lt;h2&gt;&lt;a id="user-content-projects-and-workspaces" class="anchor" aria-hidden="true" href="#projects-and-workspaces"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Projects and Workspaces&lt;/h2&gt;
&lt;p&gt;If you’ve previously used a different explorer like NeoTree or NerdTree - or an earlier version of treemacs for that
  matter - you are probably used to a display system wherein you see exactly a single file tree whose exact root you can
  arbitrarily change. This system makes it difficult to work on and switch between multiple projects. Treemacs used to
  (and still does) remedy that limitation by making every treemacs buffer unique to its frame, but it has now been
  redesigned to be able to display multiple file trees - projects - at once.&lt;/p&gt;
&lt;p&gt;In treemacs a workspace is simply a (named) collection of projects, while a project mostly consists of 2 things: its
  location in the file system and its name. This is the info that you need to provide when you want to add a new project
  to your workspace. Just like projects you can add, remove, rename and switch between workspaces at any time.&lt;/p&gt;
&lt;p&gt;This design approach has various advantages and disadvantages. It is now no longer possible to “free roam” in the file
  system with treemacs, i.e. you can no longer arbitrarily switch the single file tree’s root to the directory at point or
  the current root’s parent. Another restriction is that the same part of the file system may not appear more than once as
  part of the workspace. For example it is not possible to have both /Documents and /Documents/ProjectX as projects in the
  same workspace, since internally treemacs heavily relies on every node having a unique natural key in its absolute path.
  Nonetheless the pros certainly outweigh the cons, as a multiroot setup allows to work on multiple projects with any
  combination concern/buffer separating frameworks, be it persp, eyebrowse, or projectile. It also opens the potential for
  concurrent display not only of the file system, but e.g. the currently open buffers.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-workspace-selection" class="anchor" aria-hidden="true" href="#workspace-selection"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Workspace Selection&lt;/h3&gt;
&lt;p&gt;On first load treemacs will select a workspace in the following manner:&lt;/p&gt;
&lt;p&gt;If the current buffer is editing a file then treemacs will try to find the first workspace with a project containing
  that file. If that fails treemacs will simply fall back on the &lt;i&gt;first&lt;/i&gt; element in the list of all workspace.&lt;/p&gt;
&lt;p&gt;The order of workspaces is the same that you see when calling &lt;code&gt;treemacs-edit-workspaces&lt;/code&gt; (see next chapter). You can set
  the fall backback workspace by calling &lt;code&gt;treemacs-set-fallback-workspace&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-conveniently-editing-your-projects-and-workspaces" class="anchor" aria-hidden="true" href="#conveniently-editing-your-projects-and-workspaces"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Conveniently Editing Your Projects and Workspaces&lt;/h2&gt;
&lt;p&gt;There are two ways to edit your projects and workspaces: call up single add/remove/rename/switch commands under either
  the &lt;code&gt;C-c C-p&lt;/code&gt; or &lt;code&gt;C-c C-w&lt;/code&gt; prefix, or call &lt;code&gt;treemacs-edit-workspaces&lt;/code&gt; and edit your entire layout in the form of a
  single org-mode buffer.&lt;/p&gt;
&lt;p&gt;The used org-format is quite simple: level 1 headlines are names of workspaces, level 2 headlines are names of projects
  in a workspace, and every project’s path is given as a description list, starting with a &lt;code&gt;-&lt;/code&gt; (and an optional leading
  space). Empty lines and lines starting with &lt;code&gt;#&lt;/code&gt; are ignored, and everything else leads to an error.&lt;/p&gt;
&lt;p&gt;You needn’t worry about making mistakes either. If there’s something wrong when you call &lt;code&gt;treemacs-finish-edit&lt;/code&gt; then
  treemacs will point you at the incorrect line and tell you what’s missing:&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="screenshots/workspace-edit.png"&gt;&lt;img src="screenshots/workspace-edit.png" alt="screenshots/workspace-edit.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;(Note that the list with the path property allows an indentation of 0 or 1 spaces only. The much greater visible
  indentation is caused by &lt;code&gt;org-indent-mode&lt;/code&gt;)&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-navigation-without-projects-and-workspaces" class="anchor" aria-hidden="true" href="#navigation-without-projects-and-workspaces"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Navigation without Projects and Workspaces&lt;/h2&gt;
&lt;p&gt;If a strict workspace and project structure, as described above, is too stringent for your use-case you can, under
  certain circumstances, use treemacs to freely navigate through your your file system, similar to dired: When your
  workspace contains &lt;i&gt;exactly&lt;/i&gt; a single project you can use &lt;code&gt;h&lt;/code&gt; and &lt;code&gt;l&lt;/code&gt; (or &lt;code&gt;treemacs-root-up&lt;/code&gt; and &lt;code&gt;treemacs-root-down&lt;/code&gt;) to
  arbitrarily change the single project’s root. &lt;code&gt;h&lt;/code&gt; will navigate one level upward in the file system, &lt;code&gt;l&lt;/code&gt; will move into
  the directory at point.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-frame-locality" class="anchor" aria-hidden="true" href="#frame-locality"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Frame Locality&lt;/h2&gt;
&lt;p&gt;Treemacs buffers have a limited scope they are visible in: the frames they are created in. A treemacs buffer, once
  created, lives alongside and inside its frame, and is also destroyed with that frame. Calling &lt;code&gt;treemacs&lt;/code&gt; while inside a
  new frame will create a new buffer for it, regardless how many other treemacs buffers already exist. While there can be
  multiple unique treemacs buffer they will all still show the same workspace and the same projects.&lt;/p&gt;
&lt;p&gt;A treemacs buffer that does not belong to a frame may still be made visible by manually selecting in the buffer list.
  This would break various assumptions in treemacs’ code base and effectively falls under undefined behaviour - a bad idea
  all around.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-mouse-interface" class="anchor" aria-hidden="true" href="#mouse-interface"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Mouse Interface&lt;/h2&gt;
&lt;p&gt;Treemacs handles left clicks in much the same way as modern graphical applications do: a single click sets the focus, a
  double click expands or collapses a directory or tag section node and visits a file/moves to a tag for a file/tag node.&lt;/p&gt;
&lt;p&gt;Additionally tag sections can be expanded or collapsed by a single click on the file/tag section icon.&lt;/p&gt;
&lt;p&gt;If you prefer to expand/collpase nodes with a single mouse click you can also use &lt;code&gt;treemacs-single-click-expand-action&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;define-key&lt;/span&gt; treemacs-mode-map [mouse-1] &lt;span class="pl-c1"&gt;#&lt;span class="pl-c1"&gt;'treemacs-single-click-expand-action&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A right click popup-menu is also available:&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="screenshots/right-click.png"&gt;&lt;img src="screenshots/right-click.png" alt="screenshots/right-click.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can also open a file in a specific window by dragging using left click from treemacs to the required window.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-follow-mode" class="anchor" aria-hidden="true" href="#follow-mode"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Follow-mode&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;treemacs-follow-mode&lt;/code&gt; is a global minor mode which allows the treemacs view to always move its focus to the currently
  selected file. This mode runs on an idle timer - the exact duration of inactivity (in seconds) before a move is called
  is determined by &lt;code&gt;treemacs-tag-follow-delay&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-tag-follow-mode" class="anchor" aria-hidden="true" href="#tag-follow-mode"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tag-follow-mode&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;treemacs-tag-follow-mode&lt;/code&gt; is a global minor mode which extends and effectively replaces &lt;code&gt;treemacs-follow-mode&lt;/code&gt;. When
  activated it follows not just the current file, but also the current tag. This works alongside treemacs’ integration
  with imenu, so all file types providing an imenu implementation are compatible.&lt;/p&gt;
&lt;p&gt;This mode, like follow-mode, runs on an idle timer - the exact duration of inactivity (in seconds) before a move is
  called is determined by &lt;code&gt;treemacs-tag-follow-delay&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Note that in order to move to a tag in treemacs the treemacs buffer’s window needs to be temporarily selected, which
  will reset &lt;code&gt;blink-cursor-mode&lt;/code&gt;’s timer if it is enabled. This will result in the cursor blinking seemingly pausing for a
  short time and giving the appearance of the tag follow action lasting much longer than it really does.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-fringe-indicator-mode" class="anchor" aria-hidden="true" href="#fringe-indicator-mode"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Fringe-indicator-mode&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;treemacs-fringe-indicator-mode&lt;/code&gt; is a global minor mode that displays a little icon in the fringe that moves with the cursor.
  It can make the selected line more visible if &lt;code&gt;hl-line-mode&lt;/code&gt; doesn’t stand out with your theme.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-git-mode" class="anchor" aria-hidden="true" href="#git-mode"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Git-mode&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;treemacs-git-mode&lt;/code&gt; is a global minor mode which enables treemacs to check for files’ and directories’ git status
  information and highlight them accordingly (see also the &lt;code&gt;treemacs-git-...&lt;/code&gt; faces). The mode is available in 3 variants:
  &lt;code&gt;simple&lt;/code&gt;, &lt;code&gt;extended&lt;/code&gt; and &lt;code&gt;deferred&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The simple variant starts a git status process and parses its output in elisp. The parsing is kept quick and simple,
    so some info is missed: this version includes git status information only for files, but not directories.&lt;/li&gt;
  &lt;li&gt;The extended variant highlights both files and directories. This greatly increases the complexity and length of the
    parsing process, and is therefore done in an asynchronous python process for the sake of performance. The extended
    variant requires python3 to work.&lt;/li&gt;
  &lt;li&gt;The deferred variant is the same as extended, except the tasks of rendering nodes and highlighting them are
    separated. The former happens immediately, the latter after &lt;code&gt;treemacs-deferred-git-apply-delay&lt;/code&gt; seconds of idle time.
    This may be faster (if not in truth then at least in appereance) as the git process is given a much greater amount of
    time to finish. The downside is that the effect of nodes changing their colors may be somewhat jarring, though this
    effect is largely mitigated due to the use of a caching layer.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When called interactively &lt;code&gt;treemacs-git-mode&lt;/code&gt; will ask for the variant to use. In lisp code an appropriate symbol can
  be directly passed to the minor mode function:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(treemacs-git-mode &lt;span class="pl-c1"&gt;'deferred&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;All versions use an asynchronous git process and are optimized to not do more work than necessary, so their performance
  cost should, for the most part, be the constant amount of time it takes to fork a subprocess. For repositories where
  this is not the case &lt;code&gt;treemacs-max-git-entries&lt;/code&gt; (default value 5000) will limit the number of git status entries
  treemacs will process before ignoring the rest.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-filewatch-mode" class="anchor" aria-hidden="true" href="#filewatch-mode"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Filewatch-mode&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;treemacs-filewatch-mode&lt;/code&gt; is a global minor mode which enables treemacs to watch the files it is displaying for changes
  and automatically refresh itself when it detects a change in the file system that it decides is relevant.&lt;/p&gt;
&lt;p&gt;A change event is relevant for treemacs if a new file has been created or deleted or a file has been changed and
  &lt;code&gt;treemacs-git-mode&lt;/code&gt; is enabled. Events caused by files that are ignored as per &lt;code&gt;treemacs-ignored-file-predicates&lt;/code&gt; are
  likewise counted as not relevant.&lt;/p&gt;
&lt;p&gt;The refresh is not called immediately after an event was received, treemacs instead waits &lt;code&gt;treemacs-file-event-delay&lt;/code&gt; ms
  to see if any more files have changed to avoid having to refresh multiple times over a short period of time. Treemacs
  will not refresh the entire view to make the detected changes visible, but will instead only make updates to the
  directories where the change(s) happened. Using this mode is therefore by far not as expensive as a full refresh on
  every change and save.&lt;/p&gt;
&lt;p&gt;The mode only applies to directories opened &lt;b&gt;after&lt;/b&gt; this mode has been activated. This means that to enable file
  watching in an already existing treemacs buffer it needs to be killed and rebuilt. Turning off this mode is, on the
  other hand, instantaneous - it will immediately turn off all existing file watch processes and outstanding refresh
  actions.&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Known limitations&lt;/span&gt;:
  Staging and committing changes does not produce any file change events of its own, if you use &lt;code&gt;treemacs-git-mode&lt;/code&gt; you
  still need to do a manual refresh to see your files’ faces go from ‘changed’ and ‘untracked’ to ‘unchanged’ after a
  commit.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-session-persistence" class="anchor" aria-hidden="true" href="#session-persistence"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Session Persistence&lt;/h2&gt;
&lt;p&gt;Treemacs’ sessions - your workspace and the projects it contains - are saved when Emacs shuts down and restored when
  treemacs is first loaded. This persistence process is fully automatic and independant, and should therefore be fully
  compatible with &lt;code&gt;desktop-save-mode&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The persisted state is saved under &lt;code&gt;user-emacs-directory/.cache/treemacs-persist&lt;/code&gt; by default. The exact file location
  is saved in the variable &lt;code&gt;treemacs-persist-file&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If something goes wrong when loading the file the erroneous state will be saved in &lt;code&gt;treemacs-last-error-persist-file&lt;/code&gt;
  for debugging.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-terminal-compatibility" class="anchor" aria-hidden="true" href="#terminal-compatibility"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Terminal Compatibility&lt;/h2&gt;
&lt;p&gt;When run in a terminal treemacs will fall back to a much simpler rendering system, foregoing its usual png icons and
  using simple &lt;code&gt;+&lt;/code&gt; and &lt;code&gt;-&lt;/code&gt; characters instead. The exact characters used are &lt;a href="#custom-icons"&gt;highly customizable&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-tag-view" class="anchor" aria-hidden="true" href="#tag-view"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tag View&lt;/h2&gt;
&lt;p&gt;Treemacs is able to display not only the file system, but also tags found in individual files. The tags list is sourced
  using emacs’ builtin imenu functionality, so all file types that emacs can generate an imenu index for are supported.&lt;/p&gt;
&lt;p&gt;Imenu caches its result, so to avoid stale tag lists setting &lt;code&gt;imenu-auto-rescan&lt;/code&gt; to t is recommended. Tags generated
  with the help of &lt;code&gt;semantic-mode&lt;/code&gt; are likewise supported.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-ggtags" class="anchor" aria-hidden="true" href="#ggtags"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;ggtags&lt;/h3&gt;
&lt;p&gt;Treemacs can show the tags produced by ggtags if you switch a buffer’s imenu index function to use ggtags:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;setq-local&lt;/span&gt; imenu-create-index-function &lt;span class="pl-c1"&gt;#&lt;span class="pl-c1"&gt;'ggtags-build-imenu-index&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-current-directory-awareness" class="anchor" aria-hidden="true" href="#current-directory-awareness"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Current-Directory Awareness&lt;/h2&gt;
&lt;p&gt;Treemacs always sets the &lt;code&gt;default-directory&lt;/code&gt; variable based on the (nearest) path at the current node, falling back to
  your home directory when there is no node or path at point. That means that various commands like &lt;code&gt;find-file&lt;/code&gt;,
  &lt;code&gt;magit-status&lt;/code&gt; or &lt;code&gt;helm-projectile-ag&lt;/code&gt; will correctly act based on the current directory or project context.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-tramp-support" class="anchor" aria-hidden="true" href="#tramp-support"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tramp Support&lt;/h2&gt;
&lt;p&gt;Treemacs supports projects on remote directories, e.g. &lt;code&gt;/scp:remote-server:path/to/directory&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;However tramp support has some restrictions: &lt;code&gt;treemacs-use-collapsed-directories&lt;/code&gt; has no effect on remote directories.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-org-support" class="anchor" aria-hidden="true" href="#org-support"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Org Support&lt;/h2&gt;
&lt;p&gt;Treemacs supports storing links to its file nodes by means of &lt;code&gt;org-store-link&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-theme-support" class="anchor" aria-hidden="true" href="#theme-support"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Theme Support&lt;/h2&gt;
&lt;p&gt;Using a different treemacs theme works the same way as using a different Emacs theme: just call &lt;code&gt;treemacs-load-theme&lt;/code&gt;,
  either programmatically or interactively. In the former case you need to supply the name of the theme as a string, like
  this:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(treemacs-load-theme &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Default&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Do keep in mind that by default treemacs’ theme support is all theory: the standard installation includes only the
  default theme; this feature is meant to easily allow &lt;b&gt;others&lt;/b&gt; to extend, create and distribute themes for treemacs.&lt;/p&gt;
&lt;p&gt;A detailed explanation on modifying themes and icons can be found in the &lt;a href="#customizing-themes-and-icons"&gt;Configuration&lt;/a&gt; section.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-additional-packages" class="anchor" aria-hidden="true" href="#additional-packages"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Additional Packages&lt;/h2&gt;
&lt;p&gt;Next to treemacs itself you can optionally install:&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-treemacs-evil" class="anchor" aria-hidden="true" href="#treemacs-evil"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;treemacs-evil&lt;/h3&gt;
&lt;p&gt;Must be installed and loaded if you use evil. The keybindings and the cursor will not be setup properly otherwise. It’ll
  also enable navigation with j/k instead of n/p.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-treemacs-projectile" class="anchor" aria-hidden="true" href="#treemacs-projectile"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;treemacs-projectile&lt;/h3&gt;
&lt;p&gt;Allows to quickly add your projectile projects to the treemacs workspace.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-treemacs-magit" class="anchor" aria-hidden="true" href="#treemacs-magit"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;treemacs-magit&lt;/h3&gt;
&lt;p&gt;A small utility package to fill the small gaps left by using filewatch-mode and git-mode in conjunction with magit: it
  will inform treemacs about (un)staging of files and commits happening in magit.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-treemacs-icons-dired" class="anchor" aria-hidden="true" href="#treemacs-icons-dired"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;treemacs-icons-dired&lt;/h3&gt;
&lt;p&gt;Allows you to use treemacs icons in dired buffers with &lt;code&gt;treemacs-icons-dired-mode&lt;/code&gt;:
  &lt;a target="_blank" rel="noopener noreferrer" href="screenshots/dired-icons.png"&gt;&lt;img src="screenshots/dired-icons.png" alt="screenshots/dired-icons.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-treemacs-persp" class="anchor" aria-hidden="true" href="#treemacs-persp"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;treemacs-persp&lt;/h3&gt;
&lt;p&gt;Integration with persp-mode that allows treemacs buffers to be unique inside the active perspective instead of the
  default frame-based buffer scope.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-treemacs-as-a-framework" class="anchor" aria-hidden="true" href="#treemacs-as-a-framework"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Treemacs as a Framework&lt;/h2&gt;
&lt;p&gt;Treemacs can be extended to display arbitrary nodes as well as be used as a general rendering backend for any tree-like
  structures. &lt;a href="Extensions.org"&gt;See here&lt;/a&gt; for an extended tutorial and demonstration.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installation&lt;/h1&gt;
&lt;p&gt;Treemacs is included in Spacemacs (for now only on the dev branch). If you are using the development version of
  Spacemacs you can simply add treemacs to &lt;code&gt;dotspacemacs-configuration-layers&lt;/code&gt; to replace the default NeoTree. Check &lt;code&gt;SPC
  h SPC treemacs&lt;/code&gt; for details. Otherwise you will need to add treemacs to &lt;code&gt;dotspacemacs-additional-packages&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Treemacs is also available on MELPA. If you just want to quickly start using it grab the &lt;code&gt;use-package&lt;/code&gt; example below,
  and customize it as needed (remove &lt;code&gt;treemacs-evil&lt;/code&gt; if you don’t use it, customize the keybindings to you taste, etc).&lt;/p&gt;
&lt;p&gt;Either way keep in mind that treemacs has &lt;i&gt;no default keybindings&lt;/i&gt; for its globally callable initialization functions. Each
  user is supposed to select keybindings for functions like &lt;code&gt;treemacs-find-file&lt;/code&gt; based on whatever they find convenient.&lt;/p&gt;
&lt;p&gt;You can find an exhaustive overview of all functions, their keybindings and functions you need to bind yourself &lt;a href="#keymap"&gt;below&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The following &lt;code&gt;use-package&lt;/code&gt; snippet includes a list of &lt;i&gt;all&lt;/i&gt; of treemacs’ configuration variables in their default
  setting. Setting them all yourself is not necessary, they are only listed here to encourage discoverability.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; treemacs
  &lt;span class="pl-c1"&gt;:ensure&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:defer&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:init&lt;/span&gt;
  (&lt;span class="pl-c1"&gt;with-eval-after-load&lt;/span&gt; &lt;span class="pl-c1"&gt;'winum&lt;/span&gt;
    (&lt;span class="pl-c1"&gt;define-key&lt;/span&gt; winum-keymap (&lt;span class="pl-c1"&gt;kbd&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;M-0&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;#&lt;span class="pl-c1"&gt;'treemacs-select-window&lt;/span&gt;&lt;/span&gt;))
  &lt;span class="pl-c1"&gt;:config&lt;/span&gt;
  (&lt;span class="pl-k"&gt;progn&lt;/span&gt;
    (&lt;span class="pl-k"&gt;setq&lt;/span&gt; treemacs-collapse-dirs                 (&lt;span class="pl-k"&gt;if&lt;/span&gt; treemacs-python-executable &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt;)
          treemacs-deferred-git-apply-delay      &lt;span class="pl-c1"&gt;0.5&lt;/span&gt;
          treemacs-directory-name-transformer    &lt;span class="pl-c1"&gt;#&lt;span class="pl-c1"&gt;'identity&lt;/span&gt;&lt;/span&gt;
          treemacs-display-in-side-window        &lt;span class="pl-c1"&gt;t&lt;/span&gt;
          treemacs-eldoc-display                 &lt;span class="pl-c1"&gt;t&lt;/span&gt;
          treemacs-file-event-delay              &lt;span class="pl-c1"&gt;5000&lt;/span&gt;
          treemacs-file-extension-regex          treemacs-last-period-regex-value
          treemacs-file-follow-delay             &lt;span class="pl-c1"&gt;0.2&lt;/span&gt;
          treemacs-file-name-transformer         &lt;span class="pl-c1"&gt;#&lt;span class="pl-c1"&gt;'identity&lt;/span&gt;&lt;/span&gt;
          treemacs-follow-after-init             &lt;span class="pl-c1"&gt;t&lt;/span&gt;
          treemacs-git-command-pipe              &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
          treemacs-goto-tag-strategy             &lt;span class="pl-c1"&gt;'refetch-index&lt;/span&gt;
          treemacs-indentation                   &lt;span class="pl-c1"&gt;2&lt;/span&gt;
          treemacs-indentation-string            &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt; &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
          treemacs-is-never-other-window         &lt;span class="pl-c1"&gt;nil&lt;/span&gt;
          treemacs-max-git-entries               &lt;span class="pl-c1"&gt;5000&lt;/span&gt;
          treemacs-missing-project-action        &lt;span class="pl-c1"&gt;'ask&lt;/span&gt;
          treemacs-no-png-images                 &lt;span class="pl-c1"&gt;nil&lt;/span&gt;
          treemacs-no-delete-other-windows       &lt;span class="pl-c1"&gt;t&lt;/span&gt;
          treemacs-project-follow-cleanup        &lt;span class="pl-c1"&gt;nil&lt;/span&gt;
          treemacs-persist-file                  (&lt;span class="pl-c1"&gt;expand-file-name&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;.cache/treemacs-persist&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; user-emacs-directory)
          treemacs-position                      &lt;span class="pl-c1"&gt;'left&lt;/span&gt;
          treemacs-recenter-distance             &lt;span class="pl-c1"&gt;0.1&lt;/span&gt;
          treemacs-recenter-after-file-follow    &lt;span class="pl-c1"&gt;nil&lt;/span&gt;
          treemacs-recenter-after-tag-follow     &lt;span class="pl-c1"&gt;nil&lt;/span&gt;
          treemacs-recenter-after-project-jump   &lt;span class="pl-c1"&gt;'always&lt;/span&gt;
          treemacs-recenter-after-project-expand &lt;span class="pl-c1"&gt;'on-distance&lt;/span&gt;
          treemacs-show-cursor                   &lt;span class="pl-c1"&gt;nil&lt;/span&gt;
          treemacs-show-hidden-files             &lt;span class="pl-c1"&gt;t&lt;/span&gt;
          treemacs-silent-filewatch              &lt;span class="pl-c1"&gt;nil&lt;/span&gt;
          treemacs-silent-refresh                &lt;span class="pl-c1"&gt;nil&lt;/span&gt;
          treemacs-sorting                       &lt;span class="pl-c1"&gt;'alphabetic-asc&lt;/span&gt;
          treemacs-space-between-root-nodes      &lt;span class="pl-c1"&gt;t&lt;/span&gt;
          treemacs-tag-follow-cleanup            &lt;span class="pl-c1"&gt;t&lt;/span&gt;
          treemacs-tag-follow-delay              &lt;span class="pl-c1"&gt;1.5&lt;/span&gt;
          treemacs-width                         &lt;span class="pl-c1"&gt;35&lt;/span&gt;)

    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; The default width and height of the icons is 22 pixels. If you are&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; using a Hi-DPI display, uncomment this to double the icon size.&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;;(treemacs-resize-icons 44)&lt;/span&gt;

    (treemacs-follow-mode &lt;span class="pl-c1"&gt;t&lt;/span&gt;)
    (treemacs-filewatch-mode &lt;span class="pl-c1"&gt;t&lt;/span&gt;)
    (treemacs-fringe-indicator-mode &lt;span class="pl-c1"&gt;t&lt;/span&gt;)
    (&lt;span class="pl-k"&gt;pcase&lt;/span&gt; (&lt;span class="pl-k"&gt;cons&lt;/span&gt; (&lt;span class="pl-k"&gt;not&lt;/span&gt; (&lt;span class="pl-k"&gt;null&lt;/span&gt; (&lt;span class="pl-c1"&gt;executable-find&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;git&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)))
                 (&lt;span class="pl-k"&gt;not&lt;/span&gt; (&lt;span class="pl-k"&gt;null&lt;/span&gt; treemacs-python-executable)))
      (`(&lt;span class="pl-c1"&gt;t&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;)
       (treemacs-git-mode &lt;span class="pl-c1"&gt;'deferred&lt;/span&gt;))
      (`(&lt;span class="pl-c1"&gt;t&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; _)
       (treemacs-git-mode &lt;span class="pl-c1"&gt;'simple&lt;/span&gt;))))
  &lt;span class="pl-c1"&gt;:bind&lt;/span&gt;
  (&lt;span class="pl-c1"&gt;:map&lt;/span&gt; global-map
        (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;M-0&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;       &lt;span class="pl-k"&gt;.&lt;/span&gt; treemacs-select-window)
        (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-x t 1&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;   &lt;span class="pl-k"&gt;.&lt;/span&gt; treemacs-delete-other-windows)
        (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-x t t&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;   &lt;span class="pl-k"&gt;.&lt;/span&gt; treemacs)
        (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-x t B&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;   &lt;span class="pl-k"&gt;.&lt;/span&gt; treemacs-bookmark)
        (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-x t C-t&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; treemacs-find-file)
        (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-x t M-t&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; treemacs-find-tag)))

(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; treemacs-evil
  &lt;span class="pl-c1"&gt;:after&lt;/span&gt; treemacs evil
  &lt;span class="pl-c1"&gt;:ensure&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;)

(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; treemacs-projectile
  &lt;span class="pl-c1"&gt;:after&lt;/span&gt; treemacs projectile
  &lt;span class="pl-c1"&gt;:ensure&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;)

(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; treemacs-icons-dired
  &lt;span class="pl-c1"&gt;:after&lt;/span&gt; treemacs dired
  &lt;span class="pl-c1"&gt;:ensure&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:config&lt;/span&gt; (treemacs-icons-dired-mode))

(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; treemacs-magit
  &lt;span class="pl-c1"&gt;:after&lt;/span&gt; treemacs magit
  &lt;span class="pl-c1"&gt;:ensure&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;)

(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; treemacs-persp
  &lt;span class="pl-c1"&gt;:after&lt;/span&gt; treemacs persp-mode
  &lt;span class="pl-c1"&gt;:ensure&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:config&lt;/span&gt; (treemacs-set-scope-type &lt;span class="pl-c1"&gt;'Perspectives&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;h1&gt;&lt;a id="user-content-configuration" class="anchor" aria-hidden="true" href="#configuration"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Configuration&lt;/h1&gt;
&lt;h2&gt;&lt;a id="user-content-variables" class="anchor" aria-hidden="true" href="#variables"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Variables&lt;/h2&gt;
&lt;p&gt;Treemacs offers the following configuration options (&lt;code&gt;describe-variable&lt;/code&gt; will usually offers more details):&lt;/p&gt;
&lt;table&gt;
  &lt;tbody&gt;&lt;tr&gt;&lt;th&gt;Variable&lt;/th&gt;&lt;th&gt;Default&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-indentation&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;The number of times each level is indented in the file tree. If specified as ‘(INTEGER px), indentation will be a single INTEGER pixels wide space.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-indentation-string&lt;/td&gt;&lt;td&gt;” ”&lt;/td&gt;&lt;td&gt;The string that is used to create indentation when &lt;code&gt;treemacs-indentation&lt;/code&gt; is not specified as pixels.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-width&lt;/td&gt;&lt;td&gt;35&lt;/td&gt;&lt;td&gt;Width of the treemacs window.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-show-hidden-files&lt;/td&gt;&lt;td&gt;t&lt;/td&gt;&lt;td&gt;Dotfiles will be shown if this is set to t and be hidden otherwise.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-follow-after-init&lt;/td&gt;&lt;td&gt;nil&lt;/td&gt;&lt;td&gt;When t follow the currently selected file after initializing the treemacs buffer, regardless of &lt;code&gt;treemacs-follow-mode&lt;/code&gt; setting.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-sorting&lt;/td&gt;&lt;td&gt;alphabetic-asc&lt;/td&gt;&lt;td&gt;Indicates how treemacs will sort its files and directories. (Files will always be shown after directories.)&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-ignored-file-predicates&lt;/td&gt;&lt;td&gt;(treemacs–std-ignore-file-predicate)&lt;/td&gt;&lt;td&gt;List of predicates to test for files and directories ignored by Emacs. Ignored files will &lt;b&gt;never&lt;/b&gt; be shown in the treemacs buffer.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-pre-file-insert-predicates&lt;/td&gt;&lt;td&gt;nil&lt;/td&gt;&lt;td&gt;List of predicates to test for files and directories not to be rendered. Unlike &lt;code&gt;treemacs-ignored-file-predicates&lt;/code&gt; these predicates apply when files’ git status information is available.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-file-event-delay&lt;/td&gt;&lt;td&gt;5000&lt;/td&gt;&lt;td&gt;How long (in milliseconds) to collect file events before refreshing. See also &lt;code&gt;treemacs-filewatch-mode&lt;/code&gt;.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-goto-tag-strategy&lt;/td&gt;&lt;td&gt;refetch-index&lt;/td&gt;&lt;td&gt;Indicates how to move to a tag when its buffer is dead.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-default-visit-action&lt;/td&gt;&lt;td&gt;treemacs-visit-node-no-split&lt;/td&gt;&lt;td&gt;Default action for opening a node (e.g. file, directory, tag). &lt;code&gt;treemacs-visit-file-default&lt;/code&gt; action in &lt;code&gt;treemacs-*-actions-config&lt;/code&gt; calls this function.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-RET-actions-config&lt;/td&gt;&lt;td&gt;Prefers visiting nodes over closing/opening&lt;/td&gt;&lt;td&gt;Alist defining the behaviour of &lt;code&gt;treemacs-RET-action&lt;/code&gt;.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-TAB-actions-config&lt;/td&gt;&lt;td&gt;Prefers closing/opening nodes over visiting&lt;/td&gt;&lt;td&gt;Alist defining the behaviour of &lt;code&gt;treemacs-TAB-action&lt;/code&gt;.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-doubleclick-actions-config&lt;/td&gt;&lt;td&gt;Closes/opens tags and visits files&lt;/td&gt;&lt;td&gt;Alist defining the behaviour of &lt;code&gt;treemacs-doubleclick-action&lt;/code&gt;.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-collapse-dirs&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Collapse this many directories into one, when possible. A directory is collapsible when its content consists of nothing but another directory.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-silent-refresh&lt;/td&gt;&lt;td&gt;nil&lt;/td&gt;&lt;td&gt;When non-nil a completed refresh will not be announced with a log message. This applies both to manual refreshing as well as automatic (due to &lt;code&gt;treemacs-filewatch-mode&lt;/code&gt;).&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-silent-filewatch&lt;/td&gt;&lt;td&gt;nil&lt;/td&gt;&lt;td&gt;When non-nil a refresh due to &lt;code&gt;filewatch-mode&lt;/code&gt; will cause no log message.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-is-never-other-window&lt;/td&gt;&lt;td&gt;nil&lt;/td&gt;&lt;td&gt;Prevents treemacs from being selected with &lt;code&gt;other-window&lt;/code&gt;.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-position&lt;/td&gt;&lt;td&gt;left&lt;/td&gt;&lt;td&gt;Position of treemacs buffer. Valid values are &lt;code&gt;left&lt;/code&gt;, &lt;code&gt;right&lt;/code&gt;.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-tag-follow-delay&lt;/td&gt;&lt;td&gt;1.5&lt;/td&gt;&lt;td&gt;Delay in seconds of inactivity for &lt;code&gt;treemacs-tag-follow-mode&lt;/code&gt; to trigger.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-tag-follow-cleanup&lt;/td&gt;&lt;td&gt;t&lt;/td&gt;&lt;td&gt;When non-nil &lt;code&gt;treemacs-tag-follow-mode&lt;/code&gt; will keep only the current file’s tags visible.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-project-follow-cleanup&lt;/td&gt;&lt;td&gt;nil&lt;/td&gt;&lt;td&gt;When non-nil &lt;code&gt;treemacs-follow-mode&lt;/code&gt; will keep only the current project expanded and all others closed.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-no-png-images&lt;/td&gt;&lt;td&gt;nil&lt;/td&gt;&lt;td&gt;When non-nil treemacs will use TUI string icons even when running in a GUI.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-python-executable&lt;/td&gt;&lt;td&gt;(treemacs–find-python3)&lt;/td&gt;&lt;td&gt;Python 3 binary used by treemacs.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-recenter-after-file-follow&lt;/td&gt;&lt;td&gt;nil&lt;/td&gt;&lt;td&gt;Decides if and when to call &lt;code&gt;recenter&lt;/code&gt; when &lt;code&gt;treemacs-follow-mode&lt;/code&gt; moves to a new file.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-recenter-after-tag-follow&lt;/td&gt;&lt;td&gt;nil&lt;/td&gt;&lt;td&gt;Decides if and when to call &lt;code&gt;recenter&lt;/code&gt; when &lt;code&gt;treemacs-tag-follow-mode&lt;/code&gt; moves to a new tag.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-recenter-after-project-jump&lt;/td&gt;&lt;td&gt;‘always&lt;/td&gt;&lt;td&gt;Decides if and when to call &lt;code&gt;recenter&lt;/code&gt; when navigating between projects.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-recenter-after-project-expand&lt;/td&gt;&lt;td&gt;‘on-distance&lt;/td&gt;&lt;td&gt;Decides if and when to call &lt;code&gt;recenter&lt;/code&gt; when expanding a project node.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-recenter-distance&lt;/td&gt;&lt;td&gt;0.1&lt;/td&gt;&lt;td&gt;Minimum distance from window top/bottom (0.1 = 10%) before treemacs calls &lt;code&gt;recenter&lt;/code&gt; in tag/file-follow-mode.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-pulse-on-success&lt;/td&gt;&lt;td&gt;t&lt;/td&gt;&lt;td&gt;When non-nil treemacs will pulse the current line as a success indicator, e.g. when creating a file.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-pulse-on-failure&lt;/td&gt;&lt;td&gt;t&lt;/td&gt;&lt;td&gt;When non-nil treemacs will pulse the current line as a failure indicator, e.g. when failing to find a file’s tags.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-elisp-imenu-expression&lt;/td&gt;&lt;td&gt;[too large to list]&lt;/td&gt;&lt;td&gt;The imenu expression treemacs uses in elisp buffers.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-persist-file&lt;/td&gt;&lt;td&gt;~/.emacs.d/.cache/treemacs-persist&lt;/td&gt;&lt;td&gt;Path to the file treemacs uses to persist its state.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-last-error-persist-file&lt;/td&gt;&lt;td&gt;~/.emacs.d/.cache/treemacs-persist-at-last-error&lt;/td&gt;&lt;td&gt;Path to the file treemacs uses to persist its state.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-space-between-root-nodes&lt;/td&gt;&lt;td&gt;t&lt;/td&gt;&lt;td&gt;When non-nil treemacs will separate root nodes with an empty line.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-wrap-around&lt;/td&gt;&lt;td&gt;t&lt;/td&gt;&lt;td&gt;When non-nil treemacs will wrap around at the buffer edges when moving between lines.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs–fringe-indicator-bitmap&lt;/td&gt;&lt;td&gt;[vertical bar]&lt;/td&gt;&lt;td&gt;The fringe bitmap used by the fringe-indicator minor mode.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-deferred-git-apply-delay&lt;/td&gt;&lt;td&gt;0.5&lt;/td&gt;&lt;td&gt;Seconds of idle time for git highlighting to apply when using the deferred &lt;code&gt;treemacs-git-mode&lt;/code&gt;.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-file-follow-delay&lt;/td&gt;&lt;td&gt;0.2&lt;/td&gt;&lt;td&gt;Delay in seconds of idle time for treemacs to follow the selected window.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-display-in-side-window&lt;/td&gt;&lt;td&gt;t&lt;/td&gt;&lt;td&gt;When non-nil treemacs will use a dedicated &lt;a href="https://www.gnu.org/software/emacs/draft/manual/html_node/elisp/Side-Windows.html" rel="nofollow"&gt;side-window&lt;/a&gt;.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-max-git-entries&lt;/td&gt;&lt;td&gt;5000&lt;/td&gt;&lt;td&gt;Maximum number of git status entries treemacs will process. Anything above that number will be ignored.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-missing-project-action&lt;/td&gt;&lt;td&gt;ask&lt;/td&gt;&lt;td&gt;When a persisted project is missing from filesystem, &lt;code&gt;ask&lt;/code&gt; will prompt for action, &lt;code&gt;keep&lt;/code&gt; will keep the project in the project list, and &lt;code&gt;remove&lt;/code&gt; will remove it from it without prompt.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-show-cursor&lt;/td&gt;&lt;td&gt;nil&lt;/td&gt;&lt;td&gt;When non-nil the cursor will stay visible in the treemacs buffer.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-git-command-pipe&lt;/td&gt;&lt;td&gt;””&lt;/td&gt;&lt;td&gt;Text to be appended to treemacs’ git command. Useful for filtering with something like grep.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-no-delete-other-windows&lt;/td&gt;&lt;td&gt;t&lt;/td&gt;&lt;td&gt;Prevents the treemacs window from being deleted by commands like &lt;code&gt;delete-other-windows&lt;/code&gt; and &lt;code&gt;magit-status&lt;/code&gt;.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-eldoc-display&lt;/td&gt;&lt;td&gt;t&lt;/td&gt;&lt;td&gt;Enables eldoc display of the file path at point. Requires &lt;code&gt;eldoc-mode&lt;/code&gt;.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-bookmark-title-template&lt;/td&gt;&lt;td&gt;“Treemacs - ${project}: ${label}”&lt;/td&gt;&lt;td&gt;When using &lt;code&gt;bookmark-set&lt;/code&gt; in Treemacs, the default template for a bookmark label. The following patterns are available: “${project}”, “${label}”, “${label:N}”, ${label-path}”, “${label-path:N}”, “${file-path}”, “${file-path:N}”.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-file-extension-regex&lt;/td&gt;&lt;td&gt;Text after last period&lt;/td&gt;&lt;td&gt;Determines how treemacs detects a file extension. Can be set to use text after first or last period.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-directory-name-transformer&lt;/td&gt;&lt;td&gt;identity&lt;/td&gt;&lt;td&gt;Transformer function that is applied to directory names before rendering for any sort of cosmetic effect.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-file-name-transformer&lt;/td&gt;&lt;td&gt;identity&lt;/td&gt;&lt;td&gt;Transformer function that is applied to file names before rendering for any sort of cosmetic effect.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2&gt;&lt;a id="user-content-faces" class="anchor" aria-hidden="true" href="#faces"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Faces&lt;/h2&gt;
&lt;p&gt;Treemacs defines and uses the following faces:&lt;/p&gt;
&lt;table&gt;
  &lt;tbody&gt;&lt;tr&gt;&lt;th&gt;Face&lt;/th&gt;&lt;th&gt;Based on&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-directory-face&lt;/td&gt;&lt;td&gt;font-lock-function-name-face&lt;/td&gt;&lt;td&gt;Face used for directories.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-directory-collapsed-face&lt;/td&gt;&lt;td&gt;treemacs-directory-face&lt;/td&gt;&lt;td&gt;Face used for collapsed part of directories.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-file-face&lt;/td&gt;&lt;td&gt;default&lt;/td&gt;&lt;td&gt;Face used for files.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-root-face&lt;/td&gt;&lt;td&gt;font-lock-constant-face&lt;/td&gt;&lt;td&gt;Face used for project roots.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-root-unreadable-face&lt;/td&gt;&lt;td&gt;treemacs-root-face&lt;/td&gt;&lt;td&gt;Face used for local unreadable project roots.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-root-remote-face&lt;/td&gt;&lt;td&gt;font-lock-function-name-face, treemacs-root-face&lt;/td&gt;&lt;td&gt;Face used for readable remote (Tramp) project roots.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-root-remote-unreadable-face&lt;/td&gt;&lt;td&gt;treemacs-root-unreadable-face&lt;/td&gt;&lt;td&gt;Face used for unreadable remote (Tramp) project roots.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-root-remote-disconnected-face&lt;/td&gt;&lt;td&gt;warning, treemacs-root-face&lt;/td&gt;&lt;td&gt;Face used for disconnected remote (Tramp) project roots.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-tags-face&lt;/td&gt;&lt;td&gt;font-lock-builtin-face&lt;/td&gt;&lt;td&gt;Face used for tags.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-help-title-face&lt;/td&gt;&lt;td&gt;font-lock-constant-face&lt;/td&gt;&lt;td&gt;Face used for the title of the helpful hydra.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-help-column-face&lt;/td&gt;&lt;td&gt;font-lock-keyword-face&lt;/td&gt;&lt;td&gt;Face used for the column headers of the helpful hydra.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-git-*-face&lt;/td&gt;&lt;td&gt;various font lock faces&lt;/td&gt;&lt;td&gt;Faces used by treemacs for various git states.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-term-node-face&lt;/td&gt;&lt;td&gt;font-lock-string-face&lt;/td&gt;&lt;td&gt;Face for directory node symbols used by treemacs when it runs in a terminal.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-on-success-pulse-face&lt;/td&gt;&lt;td&gt;:fg #111111 :bg #669966&lt;/td&gt;&lt;td&gt;Pulse face used when pulsing on a successful action.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-on-failure-puse-face&lt;/td&gt;&lt;td&gt;:fg #111111 :bg #ab3737&lt;/td&gt;&lt;td&gt;Pulse face used when pulsing on a failed action.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2&gt;&lt;a id="user-content-evil-compatibility" class="anchor" aria-hidden="true" href="#evil-compatibility"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Evil compatibility&lt;/h2&gt;
&lt;p&gt;To make treemacs get along with evil-mode you need to install and load &lt;code&gt;treemacs-evil&lt;/code&gt;. It does not define any functions
  or offer any configuration options, making sure it is loaded is sufficient.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-customizing-themes-and-icons" class="anchor" aria-hidden="true" href="#customizing-themes-and-icons"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Customizing Themes and Icons&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-creating-and-modifying-themes" class="anchor" aria-hidden="true" href="#creating-and-modifying-themes"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Creating and Modifying Themes&lt;/h3&gt;
&lt;p&gt;Creating and modifying themes and icons is all done in a single step using dedicated macros.&lt;/p&gt;
&lt;p&gt;To create a theme use &lt;code&gt;treemacs-create-theme&lt;/code&gt;. It requires the name of the theme and accepts 3 optional keyword
  arguments: the directory the theme’s icons are stored in (if it’s using png icons), the name of the theme it’s extending
  and the config, a final form that’s responsible for creating all the theme’s icons. A config will typically consist of
  nothing but calls to &lt;code&gt;treemacs-create-icon&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(treemacs-create-theme &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Default&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:icon-directory&lt;/span&gt; (f-join treemacs-dir &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;icons/default&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
  &lt;span class="pl-c1"&gt;:config&lt;/span&gt;
  (&lt;span class="pl-k"&gt;progn&lt;/span&gt;
    (treemacs-create-icon &lt;span class="pl-c1"&gt;:file&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;root.png&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;   &lt;span class="pl-c1"&gt;:fallback&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;            &lt;span class="pl-c1"&gt;:extensions&lt;/span&gt; (root))
    (treemacs-create-icon &lt;span class="pl-c1"&gt;:file&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;emacs.png&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;  &lt;span class="pl-c1"&gt;:fallback&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;🗏 &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;          &lt;span class="pl-c1"&gt;:extensions&lt;/span&gt; (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;el&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;elc&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
    (treemacs-create-icon &lt;span class="pl-c1"&gt;:file&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;readme.png&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;:fallback&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;🗏 &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;          &lt;span class="pl-c1"&gt;:extensions&lt;/span&gt; (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;readme.md&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
    (treemacs-create-icon &lt;span class="pl-c1"&gt;:icon&lt;/span&gt; (all-the-icons-icon-for-file &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;yaml&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;:extensions&lt;/span&gt; (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;yml&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;yaml&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;:file&lt;/code&gt; argument is relative to the icon directory of the theme being created. When not using image icons the
  &lt;code&gt;:icon-directory&lt;/code&gt; argument can be omitted and the &lt;code&gt;:file&lt;/code&gt; argument can be switched for &lt;code&gt;:icon&lt;/code&gt; to supply the icon string
  directly. The TUI fallback is also optional, ” ” is used by default. Finally the list of extensions determines which
  file extensions the icon should be used for.&lt;/p&gt;
&lt;p&gt;For treemacs an extension is either the entire file name or the text after the last period (unless
  &lt;code&gt;treemacs-file-extension-regex&lt;/code&gt; is customized). This means it can match normal file names like “init.el”, extensionless
  file names like “Makefile”. Because the full name is checked first it is possible to give special files their own icon,
  for example “Readme.md” can use a different icon than normal markdown files.&lt;/p&gt;
&lt;p&gt;Instead of a string extension a symbol can also be used. In this case treemacs will also create a variable for that icon
  named &lt;code&gt;treemacs-icon-$symbol&lt;/code&gt;. Treemacs uses several such icon variables and any new theme should define their own
  versions (it it’s not extending the default theme). The following icons are used:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;root&lt;/li&gt;
  &lt;li&gt;dir-closed&lt;/li&gt;
  &lt;li&gt;dir-open&lt;/li&gt;
  &lt;li&gt;fallback&lt;/li&gt;
  &lt;li&gt;tag-open&lt;/li&gt;
  &lt;li&gt;tag-closed&lt;/li&gt;
  &lt;li&gt;tag-leaf&lt;/li&gt;
  &lt;li&gt;error&lt;/li&gt;
  &lt;li&gt;info&lt;/li&gt;
  &lt;li&gt;warning&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Analogous to creating a new theme &lt;code&gt;treemacs-modify-theme&lt;/code&gt; can be used to change, or add to, an existing theme:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(treemacs-modify-theme &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Default&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:icon-directory&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/other/icons/dir&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:config&lt;/span&gt;
  (&lt;span class="pl-k"&gt;progn&lt;/span&gt;
    (treemacs-create-icon &lt;span class="pl-c1"&gt;:icon&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;+&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;:extensions&lt;/span&gt; (dir-closed))
    (treemacs-create-icon &lt;span class="pl-c1"&gt;:icon&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;-&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;:extensions&lt;/span&gt; (dir-open))))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally keep in mind that treemacs’ icons are all buffer-local values, and will most likely not be defined when trying
  to access their values directly. When you need to programmatically access some of treemacs’ icons you should use
  &lt;code&gt;treemacs-get-icon-value&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(treemacs-get-icon-value &lt;span class="pl-c1"&gt;'root&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Default&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
(treemacs-get-icon-value &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;org&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-custom-icons" class="anchor" aria-hidden="true" href="#custom-icons"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Custom Icons&lt;/h3&gt;
&lt;p&gt;Treemacs also offers a quick and straighforward way to add a (gui) icon to the currently active theme, without caring
  for its name or declaring icon directories:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;defvar&lt;/span&gt; &lt;span class="pl-en"&gt;treemacs-custom-html-icon&lt;/span&gt; (all-the-icons-icon-for-file &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;name.html&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
(treemacs-define-custom-icon treemacs-custom-html-icon &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;html&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;htm&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;b&gt;Important&lt;/b&gt;: There is a restriction that all icons must must be exactly 2 characters long. That’s including the space
  that will separate an icon from the filename.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-icons-according-to-auto-mode-alist" class="anchor" aria-hidden="true" href="#icons-according-to-auto-mode-alist"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Icons according to &lt;code&gt;auto-mode-alist&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;For some file extensions, like “.cc” or “.hh”, it is not immediately obvious which major mode will open these files, and
  thus which icon they should be assigned. Treemacs offers the option that automate this decision based on
  &lt;code&gt;auto-mode-alist&lt;/code&gt;. You can use the function &lt;code&gt;treemacs-map-icons-with-auto-mode-alist&lt;/code&gt; to change the assigned icons for a
  list of file extensions based on the major mode the icons are mapped to in &lt;code&gt;auto-mode-alist&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;treemacs-map-icons-with-auto-mode-alist&lt;/code&gt; takes 2 arguments: first a list of file extensions, then an alist that decides
  which icon should be used for which mapped major mode. For example the code to decide the icons for “.hh” and “.cc”
  files with &lt;code&gt;auto-mode-alist&lt;/code&gt; would look like this:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(treemacs-map-icons-with-auto-mode-alist
 '(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;.cc&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;.hh&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
 '((&lt;span class="pl-c1"&gt;c-mode&lt;/span&gt;   &lt;span class="pl-k"&gt;.&lt;/span&gt; (treemacs-get-icon-value &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;c&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
   (&lt;span class="pl-c1"&gt;c++-mode&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; (treemacs-get-icon-value &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;cpp&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))))&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content-gui-vs-tui" class="anchor" aria-hidden="true" href="#gui-vs-tui"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;GUI vs TUI&lt;/h4&gt;
&lt;p&gt;It is possible to force treemacs to use the simple TUI icons in GUI mode by setting &lt;code&gt;treemacs-no-png-images&lt;/code&gt; to t.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-resizing-icons" class="anchor" aria-hidden="true" href="#resizing-icons"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Resizing Icons&lt;/h4&gt;
&lt;p&gt;If your emacs has been compiled with imagemagick support you can arbitrarily change the size of treemacs’ icons by
  (interactively or programmatically) calling &lt;code&gt;treemacs-resize-icons&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-indent-guide" class="anchor" aria-hidden="true" href="#indent-guide"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Indent guide&lt;/h3&gt;
&lt;p&gt;Not really part of the icons, but a useful visual feature nonetheless: An indent guide like effect can be created by
  selecting appropriate values for &lt;code&gt;treemacs-indentation&lt;/code&gt; and &lt;code&gt;treemacs-indentation-string&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;setq&lt;/span&gt; treemacs-indentation-string (&lt;span class="pl-c1"&gt;propertize&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt; ⫶ &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'face&lt;/span&gt; &lt;span class="pl-c1"&gt;'font-lock-comment-face&lt;/span&gt;)
      treemacs-indentation &lt;span class="pl-c1"&gt;1&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h1&gt;&lt;a id="user-content-keymap" class="anchor" aria-hidden="true" href="#keymap"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Keymap&lt;/h1&gt;
&lt;h2&gt;&lt;a id="user-content-unbound-functions" class="anchor" aria-hidden="true" href="#unbound-functions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Unbound functions&lt;/h2&gt;
&lt;p&gt;These functions are not bound to any keys by default. It’s left up to users to find the most convenient key binds.&lt;/p&gt;
&lt;table&gt;
  &lt;tbody&gt;&lt;tr&gt;&lt;th&gt;Action&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs&lt;/td&gt;&lt;td&gt;Show/Hide/Initialize treemacs.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-bookmark&lt;/td&gt;&lt;td&gt;Find a bookmark in treemacs.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-find-file&lt;/td&gt;&lt;td&gt;Find and focus the current file in treemacs.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-find-tag&lt;/td&gt;&lt;td&gt;Find and focus the current tag in treemacs.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-select-window&lt;/td&gt;&lt;td&gt;Select the treemacs window if it is visible. Call &lt;code&gt;treemacs&lt;/code&gt; if it is not.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-delete-other-windows&lt;/td&gt;&lt;td&gt;Same as &lt;code&gt;delete-other-windows&lt;/code&gt;, but will not delete the treemacs window.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-show-changelog&lt;/td&gt;&lt;td&gt;Opens a buffer showing the changelog.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-load-theme&lt;/td&gt;&lt;td&gt;Load a different icon theme.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-projectile&lt;/td&gt;&lt;td&gt;Add a project from projectile to treemacs.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-add-and-display-current-project&lt;/td&gt;&lt;td&gt;Add current project to treemacs and open it.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-select-scope-type&lt;/td&gt;&lt;td&gt;Select the scope of treemacs buffers in which they are unique&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2&gt;&lt;a id="user-content-default-keymaps" class="anchor" aria-hidden="true" href="#default-keymaps"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Default keymaps&lt;/h2&gt;
&lt;p&gt;Treemacs’ keybindings are distributed to several keymaps, based on common keybindings:&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-project-keybinds-prefix-c-c-c-p" class="anchor" aria-hidden="true" href="#project-keybinds-prefix-c-c-c-p"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Project Keybinds (Prefix &lt;code&gt;C-c C-p&lt;/code&gt;)&lt;/h3&gt;
&lt;table&gt;
  &lt;tbody&gt;&lt;tr&gt;&lt;th&gt;Key&lt;/th&gt;&lt;th&gt;Action&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;C-c C-p a&lt;/td&gt;&lt;td&gt;treemacs-add-project-to-workspace&lt;/td&gt;&lt;td&gt;Select a new project to add to the treemacs workspace.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;C-c C-p p&lt;/td&gt;&lt;td&gt;treemacs-projectile&lt;/td&gt;&lt;td&gt;Select a projectile project to add to the workspace.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;C-c C-p d&lt;/td&gt;&lt;td&gt;treemacs-remove-project-from-workspace&lt;/td&gt;&lt;td&gt;Remove project at point from the workspace.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;C-c C-p r&lt;/td&gt;&lt;td&gt;treemacs-rename-project&lt;/td&gt;&lt;td&gt;Rename project at point.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;C-c C-p c c&lt;/td&gt;&lt;td&gt;treemacs-collapse-project&lt;/td&gt;&lt;td&gt;Collapse project at point.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;C-c C-p c o/S-TAB&lt;/td&gt;&lt;td&gt;treemacs-collapse-all-projects&lt;/td&gt;&lt;td&gt;Collapse all projects.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;C-c C-p c o&lt;/td&gt;&lt;td&gt;treemacs-collapse-all-projects&lt;/td&gt;&lt;td&gt;Collapse all projects except the project at point.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3&gt;&lt;a id="user-content-workspaces-keybinds-prefix-c-c-c-w" class="anchor" aria-hidden="true" href="#workspaces-keybinds-prefix-c-c-c-w"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Workspaces Keybinds (Prefix &lt;code&gt;C-c C-w&lt;/code&gt;)&lt;/h3&gt;
&lt;table&gt;
  &lt;tbody&gt;&lt;tr&gt;&lt;th&gt;Key&lt;/th&gt;&lt;th&gt;Action&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;C-c C-w r&lt;/td&gt;&lt;td&gt;treemacs-rename-workspace&lt;/td&gt;&lt;td&gt;Rename a workspace.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;C-c C-w a&lt;/td&gt;&lt;td&gt;treemacs-create-workspace&lt;/td&gt;&lt;td&gt;Create a new workspace.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;C-c C-w d&lt;/td&gt;&lt;td&gt;treemacs-remove-workspace&lt;/td&gt;&lt;td&gt;Delete a workspace.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;C-c C-w s&lt;/td&gt;&lt;td&gt;treemacs-switch-workspace&lt;/td&gt;&lt;td&gt;Switch the current workspace.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;C-c C-w e&lt;/td&gt;&lt;td&gt;treemacs-edit-workspaces&lt;/td&gt;&lt;td&gt;Edit workspace layout via org-mode.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;C-c C-w f&lt;/td&gt;&lt;td&gt;treemacs-set-fallback-workspace&lt;/td&gt;&lt;td&gt;Select the default fallback workspace.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3&gt;&lt;a id="user-content-node-visit-keybinds-prefix-o" class="anchor" aria-hidden="true" href="#node-visit-keybinds-prefix-o"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Node Visit Keybinds (Prefix &lt;code&gt;o&lt;/code&gt;)&lt;/h3&gt;
&lt;table&gt;
  &lt;tbody&gt;&lt;tr&gt;&lt;th&gt;Key&lt;/th&gt;&lt;th&gt;Action&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;ov&lt;/td&gt;&lt;td&gt;treemacs-visit-node-vertical-split&lt;/td&gt;&lt;td&gt;Open current file or tag by vertically splitting &lt;code&gt;next-window&lt;/code&gt;.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;oh&lt;/td&gt;&lt;td&gt;treemacs-visit-node-horizontal-split&lt;/td&gt;&lt;td&gt;Open current file or tag by horizontally splitting &lt;code&gt;next-window&lt;/code&gt;.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;oo/RET&lt;/td&gt;&lt;td&gt;treemacs-visit-node-no-split&lt;/td&gt;&lt;td&gt;Open current file or tag, performing no split and using &lt;code&gt;next-window&lt;/code&gt; directly.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;oaa&lt;/td&gt;&lt;td&gt;treemacs-visit-node-ace&lt;/td&gt;&lt;td&gt;Open current file or tag, using ace-window to decide which window to open the file in.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;oah&lt;/td&gt;&lt;td&gt;treemacs-visit-node-ace-horizontal-split&lt;/td&gt;&lt;td&gt;Open current file or tag by horizontally splitting a window selected by ace-window.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;oav&lt;/td&gt;&lt;td&gt;treemacs-visit-node-ace-vertical-split&lt;/td&gt;&lt;td&gt;Open current file or tag by vertically splitting a window selected by ace-window.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;or&lt;/td&gt;&lt;td&gt;treemacs-visit-node-in-most-recently-used-window&lt;/td&gt;&lt;td&gt;Open current file or tag in the most recently used window.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;ox&lt;/td&gt;&lt;td&gt;treemacs-visit-node-in-external-application&lt;/td&gt;&lt;td&gt;Open current file according to its mime type in an external application. Linux, Windows and Mac are supported.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3&gt;&lt;a id="user-content-toggle-keybinds-prefix-t" class="anchor" aria-hidden="true" href="#toggle-keybinds-prefix-t"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Toggle Keybinds (Prefix &lt;code&gt;t&lt;/code&gt;)&lt;/h3&gt;
&lt;table&gt;
  &lt;tbody&gt;&lt;tr&gt;&lt;th&gt;Key&lt;/th&gt;&lt;th&gt;Action&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;th&lt;/td&gt;&lt;td&gt;treemacs-toggle-show-dotfiles&lt;/td&gt;&lt;td&gt;Toggle the hiding and displaying of dotfiles.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;tw&lt;/td&gt;&lt;td&gt;treemacs-toggle-fixed-width&lt;/td&gt;&lt;td&gt;Toggle whether the treemacs window should have a fixed width. See also treemacs-width.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;tf&lt;/td&gt;&lt;td&gt;treemacs-follow-mode&lt;/td&gt;&lt;td&gt;Toggle &lt;code&gt;treemacs-follow-mode&lt;/code&gt;.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;ta&lt;/td&gt;&lt;td&gt;treemacs-filewatch-mode&lt;/td&gt;&lt;td&gt;Toggle &lt;code&gt;treemacs-filewatch-mode&lt;/code&gt;.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;tv&lt;/td&gt;&lt;td&gt;treemacs-fringe-indicator-mode&lt;/td&gt;&lt;td&gt;Toggle &lt;code&gt;treemacs-fringe-indicator-mode&lt;/code&gt;.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3&gt;&lt;a id="user-content-copy-keybinds-prefix-y" class="anchor" aria-hidden="true" href="#copy-keybinds-prefix-y"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Copy Keybinds (Prefix &lt;code&gt;y&lt;/code&gt;)&lt;/h3&gt;
&lt;table&gt;
  &lt;tbody&gt;&lt;tr&gt;&lt;th&gt;Key&lt;/th&gt;&lt;th&gt;Action&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;yy&lt;/td&gt;&lt;td&gt;treemacs-copy-path-at-point&lt;/td&gt;&lt;td&gt;Copy the absolute path of the node at point.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;yr&lt;/td&gt;&lt;td&gt;treemacs-copy-project-root&lt;/td&gt;&lt;td&gt;Copy the absolute path of the project root for the node at point.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;yf&lt;/td&gt;&lt;td&gt;treemacs-copy-file&lt;/td&gt;&lt;td&gt;Copy the file at point.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3&gt;&lt;a id="user-content-general-keybinds" class="anchor" aria-hidden="true" href="#general-keybinds"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;General Keybinds&lt;/h3&gt;
&lt;table&gt;
  &lt;tbody&gt;&lt;tr&gt;&lt;th&gt;Key&lt;/th&gt;&lt;th&gt;Action&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;?&lt;/td&gt;&lt;td&gt;treemacs-helpful-hydra&lt;/td&gt;&lt;td&gt;Summon the helpful hydra to show you the treemacs keymap.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;j/n&lt;/td&gt;&lt;td&gt;treemacs-next-line&lt;/td&gt;&lt;td&gt;Go to the next line.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;k/p&lt;/td&gt;&lt;td&gt;treemacs-previous-line&lt;/td&gt;&lt;td&gt;Go to the previous line.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;M-J/N&lt;/td&gt;&lt;td&gt;treemacs-next-line-other-window&lt;/td&gt;&lt;td&gt;Go to the next line in &lt;code&gt;next-window&lt;/code&gt;.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;M-K/P&lt;/td&gt;&lt;td&gt;treemacs-previous-line-other-window&lt;/td&gt;&lt;td&gt;Go to the previous line in &lt;code&gt;next-window&lt;/code&gt;..&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&amp;lt;PgUp&amp;gt;&lt;/td&gt;&lt;td&gt;treemacs-next-page-other-window&lt;/td&gt;&lt;td&gt;Go to the next page in &lt;code&gt;next-window&lt;/code&gt;.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&amp;lt;PgDn&amp;gt;&lt;/td&gt;&lt;td&gt;treemacs-previous-page-other-window&lt;/td&gt;&lt;td&gt;Go to the previous page in &lt;code&gt;next-window&lt;/code&gt;..&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;M-j/M-n&lt;/td&gt;&lt;td&gt;treemacs-next-neighbour&lt;/td&gt;&lt;td&gt;Go to the next same-level neighbour of the current node.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;M-k/M-p&lt;/td&gt;&lt;td&gt;treemacs-previous-neighbour&lt;/td&gt;&lt;td&gt;Go to the previous same-level neighbour of the current node.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;u&lt;/td&gt;&lt;td&gt;treemacs-goto-parent-node&lt;/td&gt;&lt;td&gt;Go to parent of node at point, if possible.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&amp;lt;M-Up&amp;gt;&lt;/td&gt;&lt;td&gt;treemacs-move-project-up&lt;/td&gt;&lt;td&gt;Switch positions of project at point and the one above it.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&amp;lt;M-Down&amp;gt;&lt;/td&gt;&lt;td&gt;treemacs-move-project-down&lt;/td&gt;&lt;td&gt;Switch positions of project at point and the one below it.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;w&lt;/td&gt;&lt;td&gt;treemacs-set-width&lt;/td&gt;&lt;td&gt;Set a new value for the width of the treemacs window.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;RET&lt;/td&gt;&lt;td&gt;treemacs-RET-action&lt;/td&gt;&lt;td&gt;Run the action defined in &lt;code&gt;treemacs-RET-actions-config&lt;/code&gt; for the current node.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;TAB&lt;/td&gt;&lt;td&gt;treemacs-TAB-action&lt;/td&gt;&lt;td&gt;Run the action defined in &lt;code&gt;treemacs-TAB-actions-config&lt;/code&gt; for the current node.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;g/r/gr&lt;/td&gt;&lt;td&gt;treemacs-refresh&lt;/td&gt;&lt;td&gt;Refresh the project at point.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;d&lt;/td&gt;&lt;td&gt;treemacs-delete&lt;/td&gt;&lt;td&gt;Delete node at point.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;R&lt;/td&gt;&lt;td&gt;treemacs-rename&lt;/td&gt;&lt;td&gt;Rename node at point.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;cf&lt;/td&gt;&lt;td&gt;treemacs-create-file&lt;/td&gt;&lt;td&gt;Create a file.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;cd&lt;/td&gt;&lt;td&gt;treemacs-create-dir&lt;/td&gt;&lt;td&gt;Create a directory.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;q&lt;/td&gt;&lt;td&gt;treemacs-quit&lt;/td&gt;&lt;td&gt;Hide the treemacs window.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Q&lt;/td&gt;&lt;td&gt;treemacs-kill-buffer&lt;/td&gt;&lt;td&gt;Delete the treemacs buffer.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;P&lt;/td&gt;&lt;td&gt;treemacs-peek&lt;/td&gt;&lt;td&gt;Peek at the file (or tag) at point without fully opening it.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;yy&lt;/td&gt;&lt;td&gt;treemacs-copy-path-at-point&lt;/td&gt;&lt;td&gt;Copy the absolute path of the node at point.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;yr&lt;/td&gt;&lt;td&gt;treemacs-copy-project-root&lt;/td&gt;&lt;td&gt;Copy the absolute path of the project root for the node at point.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;yf&lt;/td&gt;&lt;td&gt;treemacs-copy-file&lt;/td&gt;&lt;td&gt;Copy the file at point.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;m&lt;/td&gt;&lt;td&gt;treemacs-move-file&lt;/td&gt;&lt;td&gt;Move the file at point.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;s&lt;/td&gt;&lt;td&gt;treemacs-resort&lt;/td&gt;&lt;td&gt;Set a new value for &lt;code&gt;treemacs-sorting&lt;/code&gt;.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;b&lt;/td&gt;&lt;td&gt;treemacs-add-bookmark&lt;/td&gt;&lt;td&gt;Bookmark the currently selected files’s, dir’s or tag’s location.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;h&lt;/td&gt;&lt;td&gt;treemacs-root-up&lt;/td&gt;&lt;td&gt;Move treemacs’ root one level upward. Only works with a single project in the workspace.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;l&lt;/td&gt;&lt;td&gt;treemacs-root-down&lt;/td&gt;&lt;td&gt;Move treemacs’ root into the directory at point. Only works with a single project in the workspace.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;H&lt;/td&gt;&lt;td&gt;treemacs-collapse-parent-node&lt;/td&gt;&lt;td&gt;Collapse the parent of the node at point.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;\!&lt;/td&gt;&lt;td&gt;treemacs-run-shell-command-for-current-node&lt;/td&gt;&lt;td&gt;Run an asynchronous shell command on the current node, replacing “$path” with its path.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;M-!&lt;/td&gt;&lt;td&gt;treemacs-run-shell-command-in-project-root&lt;/td&gt;&lt;td&gt;Run an asynchronous shell command in the root of the current project, replacing “$path” with its path.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h1&gt;&lt;a id="user-content-compatibility" class="anchor" aria-hidden="true" href="#compatibility"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Compatibility&lt;/h1&gt;
&lt;p&gt;The correctness of treemacs’ display behaviour is, to a large degree, ensured through window properties and reacting to
  changes in the window configuration. The packages most likely to cause trouble for treemacs are therefore those that
  interfere with Emacs’ buffer spawning and window splitting behaviour. Treemacs is included in Spacemacs and I am a
  Spacemacs user, therefore treemacs guarantees first-class support &amp;amp; compatibility for window-managing packages used in
  Spacemacs, namely &lt;a href="https://github.com/Bad-ptr/persp-mode.el"&gt;persp&lt;/a&gt;, &lt;a href="https://github.com/wasamasa/eyebrowse"&gt;eyebrowse&lt;/a&gt;, &lt;a href="https://github.com/m2ym/popwin-el"&gt;popwin&lt;/a&gt; and &lt;a href="https://github.com/bmag/emacs-purpose"&gt;window-purpose&lt;/a&gt;, as well as &lt;a href="https://github.com/wasamasa/shackle"&gt;shackle&lt;/a&gt;. For everything else there may be
  issues and, depending on the complexity of the problem, I may decide it is not worth fixing.&lt;/p&gt;
&lt;p&gt;Aside from this there are the following known incompatibilities:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Any package invoking &lt;code&gt;font-lock-ensure&lt;/code&gt; in the treemacs buffer. This will reset the faces of treemacs’ buttons (once)
    and is a known &lt;a href="https://debbugs.gnu.org/cgi/bugreport.cgi?bug=28599" rel="nofollow"&gt;emacs bug&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;A possible cause of this issue using an old version of swiper.&lt;/li&gt;
  &lt;li&gt;Rainbow mode activated in treemacs will likewise produce this behaviour. Make sure not to include rainbow-mode as
    part of &lt;code&gt;special-mode-hook&lt;/code&gt;, since this is the mode &lt;code&gt;treemacs-mode&lt;/code&gt; is derived from.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;a id="user-content-faq" class="anchor" aria-hidden="true" href="#faq"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;FAQ&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;How do I hide files I don’t want to see?
    &lt;p&gt;You need to define a predicate function and add it to &lt;code&gt;treemacs-ignored-file-predicates&lt;/code&gt;. This function accepts two
      arguments, a file’s name and its absolute path, and must return non-nil when treemacs should hide that file.&lt;/p&gt;
    &lt;p&gt;For example the code to ignore files eiter called “foo” or located in ”&lt;i&gt;x/y/z&lt;/i&gt;” would look like this:&lt;/p&gt;
    &lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;with-eval-after-load&lt;/span&gt; &lt;span class="pl-c1"&gt;'treemacs&lt;/span&gt;

  (&lt;span class="pl-k"&gt;defun&lt;/span&gt; &lt;span class="pl-e"&gt;treemacs-ignore-example&lt;/span&gt; (&lt;span class="pl-v"&gt;filename&lt;/span&gt; &lt;span class="pl-v"&gt;absolute-path&lt;/span&gt;)
    (&lt;span class="pl-k"&gt;or&lt;/span&gt; (&lt;span class="pl-c1"&gt;string-equal&lt;/span&gt; filename &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;foo&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
        (&lt;span class="pl-c1"&gt;string-prefix-p&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/x/y/z/&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; absolute-path)))

  (&lt;span class="pl-c1"&gt;add-to-list&lt;/span&gt; &lt;span class="pl-c1"&gt;'treemacs-ignored-file-predicates&lt;/span&gt; &lt;span class="pl-c1"&gt;#&lt;span class="pl-c1"&gt;'treemacs-ignore-example&lt;/span&gt;&lt;/span&gt;))
    &lt;/pre&gt;&lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;How do I keep treemacs from showing files that are ignored by git?
    &lt;p&gt;Short answer:&lt;/p&gt;
    &lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;with-eval-after-load&lt;/span&gt; &lt;span class="pl-c1"&gt;'treemacs&lt;/span&gt;
  (&lt;span class="pl-c1"&gt;add-to-list&lt;/span&gt; &lt;span class="pl-c1"&gt;'treemacs-pre-file-insert-predicates&lt;/span&gt; &lt;span class="pl-c1"&gt;#&lt;span class="pl-c1"&gt;'treemacs-is-file-git-ignored?&lt;/span&gt;&lt;/span&gt;))
    &lt;/pre&gt;&lt;/div&gt;
    &lt;p&gt;A slightly longer explanation about how you can hook into the render process can be found in the documentation string
      of &lt;code&gt;treemacs-pre-file-insert-predicates&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Why am I seeing no file icons and only +/- for directories?
    &lt;p&gt;Treemacs will permanently fall back on its simple TUI icons if it detects that the emacs instance it is run in cannot
      create images. You can test this by evaluating &lt;code&gt;(create-image "" 'png)&lt;/code&gt;. If this code returns an error like “Invalid
      image type ´png´” your emacs does not support images.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;How do I get treemacs to stop telling me when it’s been refreshed, especially with filewatch-mode?
    &lt;p&gt;See &lt;code&gt;treemacs-silent-refresh&lt;/code&gt; and &lt;code&gt;treemacs-silent-filewatch&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;ENOSPC / No space left on device
    &lt;p&gt;You may run into this error when you use filewatch-mode. The solution is to increase the number of allowed user
      watches, as described in &lt;a href="https://stackoverflow.com/questions/16748737/grunt-watch-error-waiting-fatal-error-watch-enospc" rel="nofollow"&gt;this link&lt;/a&gt;. You’ll also want to see what’s responsible for setting all those file watches in
      the first place, since treemacs only watches the directories it is displaying and so won’t produce more than a couple
      dozen watches at best.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Why is treemacs warning me about not being able to find some background colors and falling back to something else?
    &lt;p&gt;Treemacs needs those colors to make sure that background colors of its icons correctly align with hl-line-mode. Png
      images’ backgrounds are not highlighted by hl-line-mode by default, treemacs is manually correcting this every time
      hl-line’s overlay is moved. To make that correction work it needs to know two colors: the current theme’s &lt;code&gt;default&lt;/code&gt;
      background, and its &lt;code&gt;hl-line&lt;/code&gt; background color. If treemacs cannot find hl-lines’s background color it falls back to
      the default background color. If it cannot even find the default background it will fall back to #2d2d31. The
      warnings serve to inform you of that fallback.&lt;/p&gt;
    &lt;p&gt;If your theme does not define a required color you can set it yourself before treemacs loads like this:&lt;/p&gt;
    &lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;set-face-attribute&lt;/span&gt; &lt;span class="pl-c1"&gt;'hl-line&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt; &lt;span class="pl-c1"&gt;:background&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;#333333&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    &lt;/pre&gt;&lt;/div&gt;
    &lt;p&gt;If you just want to disable the warnings you can do so by defining the variable &lt;code&gt;treemacs-no-load-time-warnings&lt;/code&gt;. Its
      exact value is irrelevant, all that matters is that it exists at all. Since the warnings are issues when treemacs is
      first being loaded the variable must be defined &lt;b&gt;before&lt;/b&gt; treemacs is initialized. This is best achieved by adding the
      line &lt;code&gt;(defvar treemacs-no-load-time-warnings t)&lt;/code&gt; to treemacs’ use-package &lt;code&gt;:init&lt;/code&gt; block.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Can I expand &lt;b&gt;everything&lt;/b&gt; under a node?
    &lt;p&gt;Yes, you just need to expand it with a &lt;a href="https://www.emacswiki.org/emacs/PrefixArgument" rel="nofollow"&gt;prefix argument&lt;/a&gt;. Closing nodes with a prefix argument works as well. In this
      case treemacs will forget about the nodes opened below the one that was closed and not reopen them automatically.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;a id="user-content-contributing" class="anchor" aria-hidden="true" href="#contributing"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contributing&lt;/h1&gt;
&lt;p&gt;Contributions are very much welcome, but should fit the general scope and style of treemacs. The following is a list of
  guidelines that should be met (exceptions confirm the rule):&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;There should be one commit per feature.&lt;/li&gt;
  &lt;li&gt;Commit messages should start with a note in brackets that roughly describes the area the commit relates to, for
    example &lt;code&gt;[Icons]&lt;/code&gt; if you add an icon.&lt;/li&gt;
  &lt;li&gt;Code must be in the right place (what with the codebase being split in many small files). If there is no right place
    it probably goes into treemacs-core-utils.el which is where all the general implementation details go.&lt;/li&gt;
  &lt;li&gt;New features must be documented in the readme (for example mentioning new config options in the &lt;a href="#variables"&gt;Config Table&lt;/a&gt;).&lt;/li&gt;
  &lt;li&gt;There must not be any compiler warnings.&lt;/li&gt;
  &lt;li&gt;The test suite must pass.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Treemacs uses cask to setup a local testing environment and a Makefile that simplifies compiling and testing the
  codebase. First run &lt;code&gt;cask install&lt;/code&gt; to locally pull treemacs’ dependencies. Then you can use the following Makefile
  targets:&lt;/p&gt;
&lt;dl&gt;
  &lt;dt&gt;make prepare&lt;/dt&gt;&lt;dd&gt;Downloads and updates Cask’s dependencies. Is a dependency of the &lt;code&gt;test&lt;/code&gt; and &lt;code&gt;compile&lt;/code&gt; targets.&lt;/dd&gt;
  &lt;dt&gt;make compile&lt;/dt&gt;&lt;dd&gt;Compiles the code base (and treats compiler warnings as errors).&lt;/dd&gt;
  &lt;dt&gt;make clean&lt;/dt&gt;&lt;dd&gt;Removes the generated .elc files.&lt;/dd&gt;
  &lt;dt&gt;make lint&lt;/dt&gt;&lt;dd&gt;Runs first &lt;code&gt;compile&lt;/code&gt; then &lt;code&gt;clean&lt;/code&gt;, even if the former fails.&lt;/dd&gt;
  &lt;dt&gt;make test&lt;/dt&gt;&lt;dd&gt;Runs the testsuite, once in a graphical environment and once in the terminal.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;Finally if you want to just add an icon you can take &lt;a href="https://github.com/Alexander-Miller/treemacs/commit/94df3e36af865dab2c76b549b1a61f418e3bf5be"&gt;this commit&lt;/a&gt; as an example (though the icons have since been moved
  into their own module in &lt;code&gt;treemacs-icons.el&lt;/code&gt;).&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-working-with-the-code-base" class="anchor" aria-hidden="true" href="#working-with-the-code-base"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Working With The Code Base&lt;/h1&gt;
&lt;p&gt;If you want to delve into the treemacs’ code base, check out &lt;a href="https://github.com/Alexander-Miller/treemacs/wiki"&gt;the wiki&lt;/a&gt; for some general pointers.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-dependencies" class="anchor" aria-hidden="true" href="#dependencies"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Dependencies&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;emacs &amp;gt;= 25.2&lt;/li&gt;
  &lt;li&gt;f.el&lt;/li&gt;
  &lt;li&gt;s.el&lt;/li&gt;
  &lt;li&gt;dash&lt;/li&gt;
  &lt;li&gt;cl-lib&lt;/li&gt;
  &lt;li&gt;ace-window&lt;/li&gt;
  &lt;li&gt;pfuture&lt;/li&gt;
  &lt;li&gt;ht&lt;/li&gt;
  &lt;li&gt;hydra&lt;/li&gt;
  &lt;li&gt;(optionally) evil&lt;/li&gt;
  &lt;li&gt;(optionally) projectile&lt;/li&gt;
  &lt;li&gt;(optionally) winum&lt;/li&gt;
  &lt;li&gt;(optionally) python(3)&lt;/li&gt;
&lt;/ul&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>Alexander-Miller</author><guid isPermaLink="false">https://github.com/Alexander-Miller/treemacs</guid><pubDate>Sat, 01 Feb 2020 00:13:00 GMT</pubDate></item><item><title>emacs-straight/undo-tree #14 in Emacs Lisp, This month</title><link>https://github.com/emacs-straight/undo-tree</link><description>&lt;p&gt;&lt;i&gt;Mirror of the undo-tree package from GNU ELPA&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;This repo does not have a README.&lt;/i&gt;&lt;/p&gt;</description><author>emacs-straight</author><guid isPermaLink="false">https://github.com/emacs-straight/undo-tree</guid><pubDate>Sat, 01 Feb 2020 00:14:00 GMT</pubDate></item><item><title>justbur/emacs-which-key #15 in Emacs Lisp, This month</title><link>https://github.com/justbur/emacs-which-key</link><description>&lt;p&gt;&lt;i&gt;Emacs package that displays available keybindings in popup&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="org" data-path="README.org"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-which-key" class="anchor" aria-hidden="true" href="#which-key"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;which-key&lt;/h1&gt;
&lt;p&gt;&lt;a href="http://melpa.org/#/which-key" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/1718bc620b9fa175bdb907b57f40c4871f1fa83d/687474703a2f2f6d656c70612e6f72672f7061636b616765732f77686963682d6b65792d62616467652e737667" alt="http://melpa.org/packages/which-key-badge.svg" data-canonical-src="http://melpa.org/packages/which-key-badge.svg" style="max-width:100%;"&gt;&lt;/a&gt; &lt;a href="http://stable.melpa.org/#/which-key" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/759c0f55d8950702a56c8ac38bb3538f202f0b43/687474703a2f2f737461626c652e6d656c70612e6f72672f7061636b616765732f77686963682d6b65792d62616467652e737667" alt="http://stable.melpa.org/packages/which-key-badge.svg" data-canonical-src="http://stable.melpa.org/packages/which-key-badge.svg" style="max-width:100%;"&gt;&lt;/a&gt; &lt;a href="https://travis-ci.org/justbur/emacs-which-key" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/bcdc010876ff992fdaa74a1f017c0e48acb7e647/68747470733a2f2f7472617669732d63692e6f72672f6a7573746275722f656d6163732d77686963682d6b65792e7376673f6272616e63683d6d6173746572" alt="https://travis-ci.org/justbur/emacs-which-key.svg?branch=master" data-canonical-src="https://travis-ci.org/justbur/emacs-which-key.svg?branch=master" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-recent-changes" class="anchor" aria-hidden="true" href="#recent-changes"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Recent Changes&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-2019-08-01-added-which-key-show-early-on-c-h" class="anchor" aria-hidden="true" href="#2019-08-01-added-which-key-show-early-on-c-h"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2019-08-01: Added &lt;code&gt;which-key-show-early-on-C-h&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Allows one to trigger &lt;code&gt;which-key&lt;/code&gt; on demand, rather than automatically. See
  the docstring and &lt;a href="#manual-activation"&gt;Manual Activation&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-2017-12-13-added-which-key-enable-extended-define-key" class="anchor" aria-hidden="true" href="#2017-12-13-added-which-key-enable-extended-define-key"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2017-12-13: Added &lt;code&gt;which-key-enable-extended-define-key&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Allows for a concise syntax to specify replacement text using &lt;code&gt;define-key&lt;/code&gt;
  or alternatives that use &lt;code&gt;define-key&lt;/code&gt; internally. See the docstring and
  &lt;a href="#custom-string-replacement-options"&gt;Custom String Replacement&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-2017-11-13-added-which-key-show-major-mode" class="anchor" aria-hidden="true" href="#2017-11-13-added-which-key-show-major-mode"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2017-11-13: Added &lt;code&gt;which-key-show-major-mode&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Shows active bindings in current major-mode map.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-introduction" class="anchor" aria-hidden="true" href="#introduction"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Introduction&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;which-key&lt;/code&gt; is a minor mode for Emacs that displays the key bindings
  following your currently entered incomplete command (a prefix) in a
  popup. For example, after enabling the minor mode if you enter &lt;code&gt;C-x&lt;/code&gt; and wait
  for the default of 1 second the minibuffer will expand with all of the
  available key bindings that follow &lt;code&gt;C-x&lt;/code&gt; (or as many as space allows given
  your settings).  This includes prefixes like &lt;code&gt;C-x 8&lt;/code&gt; which are shown in a
  different face. Screenshots of what the popup will look like are included
  below. &lt;code&gt;which-key&lt;/code&gt; started as a rewrite of &lt;a href="https://github.com/kai2nenobu/guide-key"&gt;guide-key-mode&lt;/a&gt;, but the feature
  sets have diverged to a certain extent.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-table-of-contents" class="anchor" aria-hidden="true" href="#table-of-contents"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Table of Contents&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="#which-key"&gt;which-key&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href="#recent-changes"&gt;Recent Changes&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href="#2019-08-01-added-which-key-show-early-on-c-h"&gt;2019-08-01: Added =which-key-show-early-on-C-h=&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href="#2017-12-13-added-which-key-enable-extended-define-key"&gt;2017-12-13: Added =which-key-enable-extended-define-key=&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href="#2017-11-13-added-which-key-show-major-mode"&gt;2017-11-13: Added =which-key-show-major-mode=&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href="#introduction"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#install"&gt;Install&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href="#melpa"&gt;MELPA&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href="#manually"&gt;Manually&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href="#initial-setup"&gt;Initial Setup&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href="#side-window-bottom-option"&gt;Side Window Bottom Option&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href="#side-window-right-option"&gt;Side Window Right Option&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href="#side-window-right-then-bottom"&gt;Side Window Right then Bottom&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href="#minibuffer-option"&gt;Minibuffer Option&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href="#manual-activation"&gt;Manual Activation&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#additional-commands"&gt;Additional Commands&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#special-features-and-configuration-options"&gt;Special Features and Configuration Options&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href="#popup-type-options"&gt;Popup Type Options&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href="#custom-string-replacement-options"&gt;Custom String Replacement Options&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href="#sorting-options"&gt;Sorting Options&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href="#paging-options"&gt;Paging Options&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href="#face-customization-options"&gt;Face Customization Options&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href="#other-options"&gt;Other Options&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href="#support-for-third-party-libraries"&gt;Support for Third-Party Libraries&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href="#key-chord"&gt;Key-chord&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href="#evil-operators"&gt;Evil operators&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href="#god-mode"&gt;God-mode&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href="#more-examples"&gt;More Examples&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href="#nice-display-with-split-frame"&gt;Nice Display with Split Frame&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href="#known-issues"&gt;Known Issues&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#thanks"&gt;Thanks&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-install" class="anchor" aria-hidden="true" href="#install"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Install&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-melpa" class="anchor" aria-hidden="true" href="#melpa"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;MELPA&lt;/h3&gt;
&lt;p&gt;After setting up &lt;a href="http://melpa.org" rel="nofollow"&gt;MELPA&lt;/a&gt; as a repository, use &lt;code&gt;M-x package-install which-key&lt;/code&gt;
  or your preferred method. You will need to call &lt;code&gt;which-key-mode&lt;/code&gt; to enable
  the minor mode of course.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-manually" class="anchor" aria-hidden="true" href="#manually"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Manually&lt;/h3&gt;
&lt;p&gt;Add which-key.el to your &lt;code&gt;load-path&lt;/code&gt; and require. Something like&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;add-to-list&lt;/span&gt; &lt;span class="pl-c1"&gt;'load-path&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;path/to/which-key.el&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;require&lt;/span&gt; &lt;span class="pl-c1"&gt;'which-key&lt;/span&gt;)
(which-key-mode)&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-initial-setup" class="anchor" aria-hidden="true" href="#initial-setup"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Initial Setup&lt;/h2&gt;
&lt;p&gt;No further setup is required if you are happy with the default setup. To try
  other options, there are 3 choices of default configs that are preconfigured
  (then customize to your liking). The main choice is where you want the
  which-key buffer to display. Screenshots of the default options are shown in
  the next sections.&lt;/p&gt;
&lt;p&gt;In each case, we show as many key bindings as we can fit in the buffer within
  the constraints. The constraints are determined by several factors, including
  your Emacs settings, the size of the current Emacs frame, and the which-key
  settings, most of which are described below.&lt;/p&gt;
&lt;p&gt;There are many substitution abilities included, which are quite flexible
  (ability to use regexp for example). This makes which-key very customizable.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-side-window-bottom-option" class="anchor" aria-hidden="true" href="#side-window-bottom-option"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Side Window Bottom Option&lt;/h3&gt;
&lt;p&gt;Popup side window on bottom. This is the current default. To restore this
  setup use&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(which-key-setup-side-window-bottom)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="./img/which-key-bottom.png"&gt;&lt;img src="./img/which-key-bottom.png" alt="./img/which-key-bottom.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-side-window-right-option" class="anchor" aria-hidden="true" href="#side-window-right-option"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Side Window Right Option&lt;/h3&gt;
&lt;p&gt;Popup side window on right. For defaults use&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(which-key-setup-side-window-right)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note the defaults are fairly conservative and will tend to not display on
  narrower frames. If you get a message saying which-key can’t display the
  keys, try making your frame wider or adjusting the defaults related to the
  maximum width (see &lt;code&gt;M-x customize-group which-key&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="./img/which-key-right.png"&gt;&lt;img src="./img/which-key-right.png" alt="./img/which-key-right.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-side-window-right-then-bottom" class="anchor" aria-hidden="true" href="#side-window-right-then-bottom"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Side Window Right then Bottom&lt;/h3&gt;
&lt;p&gt;This is a combination of the previous two choices. It will try to use the
  right side, but if there is no room it will switch to using the bottom,
  which is usually easier to fit keys into. This setting can be helpful if the
  size of the Emacs frame changes frequently, which might be the case if you
  are using a dynamic/tiling window manager.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(which-key-setup-side-window-right-bottom)&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-minibuffer-option" class="anchor" aria-hidden="true" href="#minibuffer-option"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Minibuffer Option&lt;/h3&gt;
&lt;p&gt;Take over the minibuffer. For the recommended configuration use&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(which-key-setup-minibuffer)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="./img/which-key-minibuffer.png"&gt;&lt;img src="./img/which-key-minibuffer.png" alt="./img/which-key-minibuffer.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Note the maximum height of the minibuffer is controlled through the built-in
  variable &lt;code&gt;max-mini-window-height&lt;/code&gt;. Also, the paging commands do not work
  reliably with the minibuffer option. Use the side window on the bottom
  option if you need paging.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-manual-activation" class="anchor" aria-hidden="true" href="#manual-activation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Manual Activation&lt;/h2&gt;
&lt;p&gt;If you only want the &lt;code&gt;which-key&lt;/code&gt; popup when you need it, you can try a setup
  along the following lines&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Allow C-h to trigger which-key before it is done automatically&lt;/span&gt;
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; which-key-show-early-on-C-h &lt;span class="pl-c1"&gt;t&lt;/span&gt;)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; make sure which-key doesn't show normally but refreshes quickly after it is&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; triggered.&lt;/span&gt;
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; which-key-idle-delay &lt;span class="pl-c1"&gt;10000&lt;/span&gt;)
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; which-key-idle-secondary-delay &lt;span class="pl-c1"&gt;0.05&lt;/span&gt;)
(which-key-mode)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will prevent which-key from showing automatically, and allow you to use
  &lt;code&gt;C-h&lt;/code&gt; in the middle of a key sequence to show the &lt;code&gt;which-key&lt;/code&gt; buffer and keep
  it open for the remainder of the key sequence.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-additional-commands" class="anchor" aria-hidden="true" href="#additional-commands"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Additional Commands&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;which-key-show-top-level&lt;/code&gt; will show most key bindings without a prefix. It
    is most and not all, because many are probably not interesting to most
    users.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;which-key-show-major-mode&lt;/code&gt; will show the currently active major-mode
    bindings. It’s similar to &lt;code&gt;C-h m&lt;/code&gt; but in a which-key format. It is also
    aware of evil commands defined using &lt;code&gt;evil-define-key&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;which-key-show-next-page&lt;/code&gt; is the command used for paging.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;which-key-undo&lt;/code&gt; can be used to undo the last keypress when in the middle
    of a key sequence.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-special-features-and-configuration-options" class="anchor" aria-hidden="true" href="#special-features-and-configuration-options"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Special Features and Configuration Options&lt;/h2&gt;
&lt;p&gt;There are more options than the ones described here. All of the configurable
  variables are available through &lt;code&gt;M-x customize-group which-key&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-popup-type-options" class="anchor" aria-hidden="true" href="#popup-type-options"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Popup Type Options&lt;/h3&gt;
&lt;p&gt;There are three different popup types that which-key can use by default to
  display the available keys. The variable &lt;code&gt;which-key-popup-type&lt;/code&gt; decides
  which one is used.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-minibuffer" class="anchor" aria-hidden="true" href="#minibuffer"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;minibuffer&lt;/h4&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;setq&lt;/span&gt; which-key-popup-type &lt;span class="pl-c1"&gt;'minibuffer&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Show keys in the minibuffer.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-side-window" class="anchor" aria-hidden="true" href="#side-window"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;side window&lt;/h4&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;setq&lt;/span&gt; which-key-popup-type &lt;span class="pl-c1"&gt;'side-window&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Show keys in a side window. This popup type has further options:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; location of which-key window. valid values: top, bottom, left, right,&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; or a list of any of the two. If it's a list, which-key will always try&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; the first location first. It will go to the second location if there is&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; not enough room to display any keys in the first location&lt;/span&gt;
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; which-key-side-window-location &lt;span class="pl-c1"&gt;'bottom&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; max width of which-key window, when displayed at left or right.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; valid values: number of columns (integer), or percentage out of current&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; frame's width (float larger than 0 and smaller than 1)&lt;/span&gt;
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; which-key-side-window-max-width &lt;span class="pl-c1"&gt;0.33&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; max height of which-key window, when displayed at top or bottom.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; valid values: number of lines (integer), or percentage out of current&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; frame's height (float larger than 0 and smaller than 1)&lt;/span&gt;
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; which-key-side-window-max-height &lt;span class="pl-c1"&gt;0.25&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content-frame" class="anchor" aria-hidden="true" href="#frame"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;frame&lt;/h4&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;setq&lt;/span&gt; which-key-popup-type &lt;span class="pl-c1"&gt;'frame&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Show keys in a popup frame. This popup won’t work very well in a terminal,
  where only one frame can be shown at any given moment. This popup type has
  further options:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; max width of which-key frame: number of columns (an integer)&lt;/span&gt;
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; which-key-frame-max-width &lt;span class="pl-c1"&gt;60&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; max height of which-key frame: number of lines (an integer)&lt;/span&gt;
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; which-key-frame-max-height &lt;span class="pl-c1"&gt;20&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content-custom" class="anchor" aria-hidden="true" href="#custom"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;custom&lt;/h4&gt;
&lt;p&gt;Write your own display functions! This requires you to write three
  functions, &lt;code&gt;which-key-custom-popup-max-dimensions-function&lt;/code&gt;,
  &lt;code&gt;which-key-custom-show-popup-function&lt;/code&gt;, and
  &lt;code&gt;which-key-custom-hide-popup-function&lt;/code&gt;. Refer to the documentation for
  those variables for more information, but here is a working example (this
  is the current implementation of side-window bottom).&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;setq&lt;/span&gt; which-key-popup-type &lt;span class="pl-c1"&gt;'custom&lt;/span&gt;)
(&lt;span class="pl-k"&gt;defun&lt;/span&gt; &lt;span class="pl-e"&gt;which-key-custom-popup-max-dimensions-function&lt;/span&gt; (&lt;span class="pl-v"&gt;ignore&lt;/span&gt;)
  (&lt;span class="pl-k"&gt;cons&lt;/span&gt;
   (which-key-height-or-percentage-to-height
    which-key-side-window-max-height)
   (&lt;span class="pl-c1"&gt;frame-width&lt;/span&gt;)))
(&lt;span class="pl-k"&gt;defun&lt;/span&gt; &lt;span class="pl-e"&gt;fit-horizonatally&lt;/span&gt; ()
  (&lt;span class="pl-k"&gt;let&lt;/span&gt; ((&lt;span class="pl-c1"&gt;fit-window-to-buffer-horizontally&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;))
    (&lt;span class="pl-c1"&gt;fit-window-to-buffer&lt;/span&gt;)))
(&lt;span class="pl-k"&gt;defun&lt;/span&gt; &lt;span class="pl-e"&gt;which-key-custom-show-popup-function&lt;/span&gt; (&lt;span class="pl-v"&gt;act-popup-dim&lt;/span&gt;)
  (&lt;span class="pl-k"&gt;let*&lt;/span&gt; ((alist '((&lt;span class="pl-c1"&gt;window-width&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; fit-horizontally)
                  (&lt;span class="pl-c1"&gt;window-height&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; fit-window-to-buffer))))
    (&lt;span class="pl-k"&gt;if&lt;/span&gt; (&lt;span class="pl-c1"&gt;get-buffer-window&lt;/span&gt; which-key--buffer)
        (&lt;span class="pl-c1"&gt;display-buffer-reuse-window&lt;/span&gt; which-key--buffer alist)
      (&lt;span class="pl-c1"&gt;display-buffer-in-major-side-window&lt;/span&gt; which-key--buffer
                                           &lt;span class="pl-c1"&gt;'bottom&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt; alist))))
(&lt;span class="pl-k"&gt;defun&lt;/span&gt; &lt;span class="pl-e"&gt;which-key-custom-hide-popup-function&lt;/span&gt; ()
  (&lt;span class="pl-k"&gt;when&lt;/span&gt; (&lt;span class="pl-c1"&gt;buffer-live-p&lt;/span&gt; which-key--buffer)
    (&lt;span class="pl-c1"&gt;quit-windows-on&lt;/span&gt; which-key--buffer)))&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-custom-string-replacement-options" class="anchor" aria-hidden="true" href="#custom-string-replacement-options"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Custom String Replacement Options&lt;/h3&gt;
&lt;p&gt;You can customize the way the keys show in the buffer using three different
  replacement methods, each of which corresponds replacement alist. The basic
  idea of behind each alist is that you specify a selection string in the
  &lt;code&gt;car&lt;/code&gt; of each cons cell and the replacement string in the &lt;code&gt;cdr&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-automatic" class="anchor" aria-hidden="true" href="#automatic"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Automatic&lt;/h4&gt;
&lt;p&gt;A newer option is to set &lt;code&gt;which-key-enable-extended-define-key&lt;/code&gt; which
  advises &lt;code&gt;define-key&lt;/code&gt; to allow which-key to pre-process its arguments. The
  statement&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;define-key&lt;/span&gt; some-map &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;f&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; '(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;foo&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; long-name-for-command-foo))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;is valid in Emacs. Setting this variable makes which-key automatically
  replace the corresponding command name with the text in the string. A nice
  example is in naming prefixes. The following binds “b” to &lt;code&gt;nil&lt;/code&gt; and names
  the binding as a prefix.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;define-key&lt;/span&gt; some-map &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;b&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; '(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;bar-prefix&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content-key-based-replacement" class="anchor" aria-hidden="true" href="#key-based-replacement"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;“Key-Based” replacement&lt;/h4&gt;
&lt;p&gt;Using this method, the description of a key is replaced using a string that
  you provide. Here’s an example&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(which-key-add-key-based-replacements
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-x C-f&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;find files&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;where the first string is the key combination whose description you want to
  replace, in a form suitable for &lt;code&gt;kbd&lt;/code&gt;. For that key combination, which-key
  overwrites the description with the second string, “find files”. In the
  second type of entry you can restrict the replacements to a major-mode. For
  example,&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(which-key-add-major-mode-key-based-replacements &lt;span class="pl-c1"&gt;'org-mode&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-c C-c&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Org C-c C-c&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-c C-a&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Org Attach&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here the first entry is the major-mode followed by a list of the first type
  of entries. In case the same key combination is listed under a major-mode
  and by itself, the major-mode version takes precedence.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-key-and-description-replacement" class="anchor" aria-hidden="true" href="#key-and-description-replacement"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Key and Description replacement&lt;/h4&gt;
&lt;p&gt;The second and third methods target the text used for the keys and the
  descriptions directly. The relevant variable is
  &lt;code&gt;which-key-replacement-alist&lt;/code&gt;.  Here’s an example of one of the default key
  replacements&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;push&lt;/span&gt; '((&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&amp;lt;&lt;span class="pl-cce"&gt;\\&lt;/span&gt;([[:alnum:]-]+&lt;span class="pl-cce"&gt;\\&lt;/span&gt;)&amp;gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;) &lt;span class="pl-k"&gt;.&lt;/span&gt; (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-cce"&gt;\\&lt;/span&gt;1&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;))
      which-key-replacement-alist)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Each element of the outer cons cell is a cons cell of the form &lt;code&gt;(KEY
  . BINDING)&lt;/code&gt;. The &lt;code&gt;car&lt;/code&gt; of the outer cons determines how to match key
  bindings while the &lt;code&gt;cdr&lt;/code&gt; determines how those matches are replaced. See the
  docstring of &lt;code&gt;which-key-replacement-alist&lt;/code&gt; for more information.&lt;/p&gt;
&lt;p&gt;The next example shows how to replace the description.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;push&lt;/span&gt; '((&lt;span class="pl-c1"&gt;nil&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;left&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-k"&gt;.&lt;/span&gt; (&lt;span class="pl-c1"&gt;nil&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;lft&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)) which-key-replacement-alist)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here is an example of using key replacement to include Unicode characters
  in the results. Unfortunately, using Unicode characters may upset the
  alignment of the which-key buffer, because Unicode characters can have
  different widths even in a monospace font and alignment is based on
  character width.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;add-to-list&lt;/span&gt; &lt;span class="pl-c1"&gt;'which-key-replacement-alist&lt;/span&gt; '((&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;TAB&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;) &lt;span class="pl-k"&gt;.&lt;/span&gt; (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;↹&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;))
(&lt;span class="pl-c1"&gt;add-to-list&lt;/span&gt; &lt;span class="pl-c1"&gt;'which-key-replacement-alist&lt;/span&gt; '((&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;RET&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;) &lt;span class="pl-k"&gt;.&lt;/span&gt; (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;⏎&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;))
(&lt;span class="pl-c1"&gt;add-to-list&lt;/span&gt; &lt;span class="pl-c1"&gt;'which-key-replacement-alist&lt;/span&gt; '((&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;DEL&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;) &lt;span class="pl-k"&gt;.&lt;/span&gt; (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;⇤&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;))
(&lt;span class="pl-c1"&gt;add-to-list&lt;/span&gt; &lt;span class="pl-c1"&gt;'which-key-replacement-alist&lt;/span&gt; '((&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SPC&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;) &lt;span class="pl-k"&gt;.&lt;/span&gt; (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;␣&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;cdr&lt;/code&gt; may also be a function that receives a &lt;code&gt;cons&lt;/code&gt; of the form &lt;code&gt;(KEY
  . BINDING)&lt;/code&gt; and produces a &lt;code&gt;cons&lt;/code&gt; of the same form. This allows for
  interesting ideas like this one suggested by &lt;a href="https://github.com/pdcawley"&gt;@pdcawley&lt;/a&gt; in &lt;a href="https://github.com/justbur/emacs-which-key/pull/147"&gt;PR #147&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;push&lt;/span&gt; (&lt;span class="pl-k"&gt;cons&lt;/span&gt; '(&lt;span class="pl-c1"&gt;nil&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;paredit-mode&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
            (&lt;span class="pl-k"&gt;lambda&lt;/span&gt; (&lt;span class="pl-v"&gt;kb&lt;/span&gt;)
              (&lt;span class="pl-k"&gt;cons&lt;/span&gt; (&lt;span class="pl-k"&gt;car&lt;/span&gt; kb)
                    (&lt;span class="pl-k"&gt;if&lt;/span&gt; paredit-mode
                        &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;[x] paredit-mode&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
                      &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;[ ] paredit-mode&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))))
      which-key-replacement-alist)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The box will be checked if &lt;code&gt;paredit-mode&lt;/code&gt; is currently active.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-sorting-options" class="anchor" aria-hidden="true" href="#sorting-options"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Sorting Options&lt;/h3&gt;
&lt;p&gt;By default the output is sorted by the key in a custom order. The default
  order is to sort lexicographically within each “class” of key, where the
  classes and their order are&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Special (SPC, TAB, ...) &amp;lt; Single Character (ASCII) (a, ...) &amp;lt; Modifier (C-, M-, ...) &amp;lt; Other&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;You can control the order by setting this variable. This also shows the
  other available options.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; default&lt;/span&gt;
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; which-key-sort-order &lt;span class="pl-c1"&gt;'which-key-key-order&lt;/span&gt;)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; same as default, except single characters are sorted alphabetically&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; (setq which-key-sort-order 'which-key-key-order-alpha)&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; same as default, except all prefix keys are grouped together at the end&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; (setq which-key-sort-order 'which-key-prefix-then-key-order)&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; same as default, except all keys from local maps shown first&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; (setq which-key-sort-order 'which-key-local-then-key-order)&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; sort based on the key description ignoring case&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; (setq which-key-sort-order 'which-key-description-order)&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-paging-options" class="anchor" aria-hidden="true" href="#paging-options"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Paging Options&lt;/h3&gt;
&lt;p&gt;There are at least several prefixes that have many keys bound to them, like
  &lt;code&gt;C-x&lt;/code&gt;. which-key displays as many keys as it can given your settings, but
  for these prefixes this may not be enough. The paging feature gives you the
  ability to bind a key to the function &lt;code&gt;which-key-C-h-dispatch&lt;/code&gt; which will
  allow you to cycle through the pages without changing the key sequence you
  were in the middle of typing. There are two slightly different ways of doing
  this.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-method-1-default-using-c-h-or-help-char" class="anchor" aria-hidden="true" href="#method-1-default-using-c-h-or-help-char"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Method 1 (default): Using C-h (or &lt;code&gt;help-char&lt;/code&gt;)&lt;/h4&gt;
&lt;p&gt;This is the easiest way, and is turned on by default. Use&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;setq&lt;/span&gt; which-key-use-C-h-commands &lt;span class="pl-c1"&gt;nil&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to disable the behavior (this will only take effect after toggling
  which-key-mode if it is already enabled). &lt;code&gt;C-h&lt;/code&gt; can be used with any prefix
  to switch pages when there are multiple pages of keys. This changes the
  default behavior of Emacs which is to show a list of key bindings that
  apply to a prefix.  For example, if you were to type &lt;code&gt;C-x C-h&lt;/code&gt; you would
  get a list of commands that follow &lt;code&gt;C-x&lt;/code&gt;. This uses which-key instead to
  show those keys, and unlike the Emacs default saves the incomplete prefix
  that you just entered so that the next keystroke can complete the command.&lt;/p&gt;
&lt;p&gt;The commands are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Cycle through the pages forward with &lt;code&gt;n&lt;/code&gt; (or &lt;code&gt;C-n&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Cycle backwards with &lt;code&gt;p&lt;/code&gt; (or &lt;code&gt;C-p&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Undo the last entered key (!) with &lt;code&gt;u&lt;/code&gt; (or &lt;code&gt;C-u&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Call the default command bound to &lt;code&gt;C-h&lt;/code&gt;, usually
    &lt;code&gt;describe-prefix-bindings&lt;/code&gt;, with &lt;code&gt;h&lt;/code&gt; (or &lt;code&gt;C-h&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is especially useful for those who like &lt;code&gt;helm-descbinds&lt;/code&gt; but also want to
  use &lt;code&gt;C-h&lt;/code&gt; as their which-key paging key.&lt;/p&gt;
&lt;p&gt;Note &lt;code&gt;C-h&lt;/code&gt; is by default equivalent to &lt;code&gt;?&lt;/code&gt; in this context.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-method-2-bind-your-own-keys" class="anchor" aria-hidden="true" href="#method-2-bind-your-own-keys"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Method 2: Bind your own keys&lt;/h4&gt;
&lt;p&gt;Essentially, all you need to do for a prefix like &lt;code&gt;C-x&lt;/code&gt; is the following
  which will bind &lt;code&gt;&amp;lt;f5&amp;gt;&lt;/code&gt; to the relevant command.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;define-key&lt;/span&gt; which-key-mode-map (&lt;span class="pl-c1"&gt;kbd&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-x &amp;lt;f5&amp;gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;'which-key-C-h-dispatch&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is completely equivalent to&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;setq&lt;/span&gt; which-key-paging-prefixes '(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-x&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; which-key-paging-key &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&amp;lt;f5&amp;gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;where the latter are provided for convenience if you have a lot of
  prefixes.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-face-customization-options" class="anchor" aria-hidden="true" href="#face-customization-options"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Face Customization Options&lt;/h3&gt;
&lt;p&gt;The faces that which-key uses are&lt;/p&gt;
&lt;table&gt;
  &lt;tbody&gt;&lt;tr&gt;&lt;th&gt;Face&lt;/th&gt;&lt;th&gt;Applied To&lt;/th&gt;&lt;th&gt;Default Definition&lt;/th&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;which-key-key-face&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Every key sequence&lt;/td&gt;&lt;td&gt;&lt;code&gt;:inherit font-lock-constant-face&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;which-key-separator-face&lt;/code&gt;&lt;/td&gt;&lt;td&gt;The separator (→)&lt;/td&gt;&lt;td&gt;&lt;code&gt;:inherit font-lock-comment-face&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;which-key-note-face&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Hints and notes&lt;/td&gt;&lt;td&gt;&lt;code&gt;:inherit which-key-separator-face&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;which-key-special-key-face&lt;/code&gt;&lt;/td&gt;&lt;td&gt;User-defined special keys&lt;/td&gt;&lt;td&gt;&lt;code&gt;:inherit which-key-key-face :inverse-video t :weight bold&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;which-key-group-description-face&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Command groups (i.e, keymaps)&lt;/td&gt;&lt;td&gt;&lt;code&gt;:inherit font-lock-keyword-face&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;which-key-command-description-face&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Commands not in local-map&lt;/td&gt;&lt;td&gt;&lt;code&gt;:inherit font-lock-function-name-face&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;which-key-local-map-description-face&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Commands in local-map&lt;/td&gt;&lt;td&gt;&lt;code&gt;:inherit which-key-command-description-face&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;The last two deserve some explanation. A command lives in one of many possible
  keymaps. You can distinguish between local maps, which depend on the buffer you
  are in, which modes are active, etc., and the global map which applies
  everywhere. It might be useful for you to distinguish between the two. One way
  to do this is to remove the default face from
  &lt;code&gt;which-key-command-description-face&lt;/code&gt; like this&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;set-face-attribute&lt;/span&gt; &lt;span class="pl-c1"&gt;'which-key-command-description-face&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt; &lt;span class="pl-c1"&gt;:inherit&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;another is to make the local map keys appear in bold&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;set-face-attribute&lt;/span&gt; &lt;span class="pl-c1"&gt;'which-key-local-map-description-face&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt; &lt;span class="pl-c1"&gt;:weight&lt;/span&gt; &lt;span class="pl-c1"&gt;'bold&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can also use &lt;code&gt;M-x customize-face&lt;/code&gt; to customize any of the above faces to
  your liking.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-other-options" class="anchor" aria-hidden="true" href="#other-options"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Other Options&lt;/h3&gt;
&lt;p&gt;The options below are also available through customize. Their defaults are
  shown.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Set the time delay (in seconds) for the which-key popup to appear. A value of&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; zero might cause issues so a non-zero value is recommended.&lt;/span&gt;
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; which-key-idle-delay &lt;span class="pl-c1"&gt;1.0&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Set the maximum length (in characters) for key descriptions (commands or&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; prefixes). Descriptions that are longer are truncated and have ".." added.&lt;/span&gt;
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; which-key-max-description-length &lt;span class="pl-c1"&gt;27&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Use additional padding between columns of keys. This variable specifies the&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; number of spaces to add to the left of each column.&lt;/span&gt;
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; which-key-add-column-padding &lt;span class="pl-c1"&gt;0&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; The maximum number of columns to display in the which-key buffer. nil means&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; don't impose a maximum.&lt;/span&gt;
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; which-key-max-display-columns &lt;span class="pl-c1"&gt;nil&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Set the separator used between keys and descriptions. Change this setting to&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; an ASCII character if your font does not show the default arrow. The second&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; setting here allows for extra padding for Unicode characters. which-key uses&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; characters as a means of width measurement, so wide Unicode characters can&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; throw off the calculation.&lt;/span&gt;
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; which-key-separator &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt; → &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; )
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; which-key-unicode-correction &lt;span class="pl-c1"&gt;3&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Set the prefix string that will be inserted in front of prefix commands&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; (i.e., commands that represent a sub-map).&lt;/span&gt;
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; which-key-prefix-prefix &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;+&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; )

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Set the special keys. These are automatically truncated to one character and&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; have which-key-special-key-face applied. Disabled by default. An example&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; setting is&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; (setq which-key-special-keys '("SPC" "TAB" "RET" "ESC" "DEL"))&lt;/span&gt;
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; which-key-special-keys &lt;span class="pl-c1"&gt;nil&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Show the key prefix on the left, top, or bottom (nil means hide the prefix).&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; The prefix consists of the keys you have typed so far. which-key also shows&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; the page information along with the prefix.&lt;/span&gt;
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; which-key-show-prefix &lt;span class="pl-c1"&gt;'left&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Set to t to show the count of keys shown vs. total keys in the mode line.&lt;/span&gt;
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; which-key-show-remaining-keys &lt;span class="pl-c1"&gt;nil&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-support-for-third-party-libraries" class="anchor" aria-hidden="true" href="#support-for-third-party-libraries"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Support for Third-Party Libraries&lt;/h2&gt;
&lt;p&gt;Some support is provided for third-party libraries which don’t use standard
  methods of looking up commands. Some of these need to be enabled
  explicitly. This code includes some hacks, so please report any problems.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-key-chord" class="anchor" aria-hidden="true" href="#key-chord"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Key-chord&lt;/h3&gt;
&lt;p&gt;Enabled by default.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-evil-operators" class="anchor" aria-hidden="true" href="#evil-operators"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Evil operators&lt;/h3&gt;
&lt;p&gt;Evil motions and text objects following an operator like &lt;code&gt;d&lt;/code&gt; are not all
  looked up in a standard way. Support is controlled through
  &lt;code&gt;which-key-allow-evil-operators&lt;/code&gt; which should be non-nil if evil is loaded
  before which-key and through &lt;code&gt;which-key-show-operator-state-maps&lt;/code&gt; which
  needs to be enabled explicitly because it is more of a hack. The former
  allows for the inner and outer text object maps to show, while the latter
  shows motions as well.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-god-mode" class="anchor" aria-hidden="true" href="#god-mode"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;God-mode&lt;/h3&gt;
&lt;p&gt;Call &lt;code&gt;(which-key-enable-god-mode-support)&lt;/code&gt; after loading god-mode to enable
  support for god-mode key sequences. This is new and experimental, so please
  report any issues.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-more-examples" class="anchor" aria-hidden="true" href="#more-examples"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;More Examples&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-nice-display-with-split-frame" class="anchor" aria-hidden="true" href="#nice-display-with-split-frame"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Nice Display with Split Frame&lt;/h3&gt;
&lt;p&gt;Unlike guide-key, which-key looks good even if the frame is split into
  several windows.&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="./img/which-key-right-split.png"&gt;&lt;img src="./img/which-key-right-split.png" alt="./img/which-key-right-split.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="./img/which-key-bottom-split.png"&gt;&lt;img src="./img/which-key-bottom-split.png" alt="./img/which-key-bottom-split.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-known-issues" class="anchor" aria-hidden="true" href="#known-issues"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Known Issues&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;A few users have reported crashes related to which-key popups when quitting
    a key sequence with &lt;code&gt;C-g&lt;/code&gt;. A possible fix is discussed in &lt;a href="https://github.com/justbur/emacs-which-key/issues/130"&gt;this issue&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-thanks" class="anchor" aria-hidden="true" href="#thanks"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Thanks&lt;/h2&gt;
&lt;p&gt;Special thanks to&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://github.com/bmag"&gt;@bmag&lt;/a&gt; for helping with the initial development and finding many bugs.&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github/iqbalansari" rel="nofollow"&gt;@iqbalansari&lt;/a&gt; who among other things adapted the code to make
    &lt;code&gt;which-key-show-top-level&lt;/code&gt; possible.&lt;/li&gt;
&lt;/ul&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>justbur</author><guid isPermaLink="false">https://github.com/justbur/emacs-which-key</guid><pubDate>Sat, 01 Feb 2020 00:15:00 GMT</pubDate></item><item><title>tarsius/hl-todo #16 in Emacs Lisp, This month</title><link>https://github.com/tarsius/hl-todo</link><description>&lt;p&gt;&lt;i&gt;Highlight TODO keywords&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h2&gt;&lt;a id="user-content-highlight-todo-and-similar-keywords-in-comments-and-strings" class="anchor" aria-hidden="true" href="#highlight-todo-and-similar-keywords-in-comments-and-strings"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Highlight TODO and similar keywords in comments and strings&lt;/h2&gt;
&lt;p&gt;To highlight keywords turn on &lt;code&gt;hl-todo-mode&lt;/code&gt; in individual buffers
or use the the global variant &lt;code&gt;global-hl-todo-mode&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can customize the keywords that are recognized by customizing
&lt;code&gt;hl-todo-keyword-faces&lt;/code&gt; either through the customization interface
or by setting the variable directly in your init file, for example:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;setq&lt;/span&gt; hl-todo-keyword-faces
      '((&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;TODO&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;   &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;#FF0000&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
        (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;FIXME&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;  &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;#FF0000&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
        (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;DEBUG&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;  &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;#A020F0&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
        (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;GOTCHA&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;#FF4500&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
        (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;STUB&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;   &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;#1E90FF&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This package also provides commands for moving to the next or
previous keyword, to invoke &lt;code&gt;occur&lt;/code&gt; with a regexp that matches all
known keywords, and to insert a keyword.  If you want to use these
commands, then you should bind them in &lt;code&gt;hl-todo-mode-map&lt;/code&gt;, e.g.:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;define-key&lt;/span&gt; hl-todo-mode-map (&lt;span class="pl-c1"&gt;kbd&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-c p&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;'hl-todo-previous&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;define-key&lt;/span&gt; hl-todo-mode-map (&lt;span class="pl-c1"&gt;kbd&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-c n&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;'hl-todo-next&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;define-key&lt;/span&gt; hl-todo-mode-map (&lt;span class="pl-c1"&gt;kbd&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-c o&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;'hl-todo-occur&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;define-key&lt;/span&gt; hl-todo-mode-map (&lt;span class="pl-c1"&gt;kbd&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-c i&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;'hl-todo-insert&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;See &lt;a href="https://www.emacswiki.org/emacs/FixmeMode" rel="nofollow"&gt;this list&lt;/a&gt; on the
Emacswiki for other packages that implement the same basic features,
but which might also provide additional features that you might like,
but which I don't deem necessary.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>tarsius</author><guid isPermaLink="false">https://github.com/tarsius/hl-todo</guid><pubDate>Sat, 01 Feb 2020 00:16:00 GMT</pubDate></item><item><title>Fuco1/smartparens #17 in Emacs Lisp, This month</title><link>https://github.com/Fuco1/smartparens</link><description>&lt;p&gt;&lt;i&gt;Minor mode for Emacs that deals with parens pairs and tries to be smart about it.&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-smartparens" class="anchor" aria-hidden="true" href="#smartparens"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Smartparens&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://gitter.im/smartparens/Lobby?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/d08add002d119601f7a6345befd6d45953420188/68747470733a2f2f6261646765732e6769747465722e696d2f736d617274706172656e732f4c6f6262792e737667" alt="Join the chat at https://gitter.im/smartparens/Lobby" data-canonical-src="https://badges.gitter.im/smartparens/Lobby.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="http://melpa.org/#/smartparens" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/45b968f4bf2700559d44346e0bda2063ec1c946a/687474703a2f2f6d656c70612e6f72672f7061636b616765732f736d617274706172656e732d62616467652e737667" alt="MELPA" data-canonical-src="http://melpa.org/packages/smartparens-badge.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="http://smartparens.readthedocs.io/en/latest/?badge=latest" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/4be3ddd2be833601a7cb2aaa99bfbfca560ae159/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f736d617274706172656e732f62616467652f3f76657273696f6e3d6c6174657374" alt="Documentation Status" data-canonical-src="https://readthedocs.org/projects/smartparens/badge/?version=latest" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="http://stable.melpa.org/#/smartparens" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e18d0cbd04a18fa0be604c495020e2d4d835967d/687474703a2f2f737461626c652e6d656c70612e6f72672f7061636b616765732f736d617274706172656e732d62616467652e737667" alt="MELPA Stable" data-canonical-src="http://stable.melpa.org/packages/smartparens-badge.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="http://smartparens.readthedocs.io/en/latest/?badge=stable" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/3a78473ebedd7f3035057062d5d1397d0c3bbc71/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f736d617274706172656e732f62616467652f3f76657273696f6e3d737461626c65" alt="Documentation Status" data-canonical-src="https://readthedocs.org/projects/smartparens/badge/?version=stable" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://travis-ci.org/Fuco1/smartparens" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/3822b0fd20ce9b8c0d75add64a7b659acc1ded84/68747470733a2f2f7472617669732d63692e6f72672f4675636f312f736d617274706172656e732e706e673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/Fuco1/smartparens.png?branch=master" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://coveralls.io/github/Fuco1/smartparens" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/483c32a82306fbba74d8c26394c01016d3280a68/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f4675636f312f736d617274706172656e732f62616467652e737667" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/Fuco1/smartparens/badge.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;amp;hosted_button_id=A5PMGVKCQBT88" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/bce14c8e2e39ba0464551b34602b4c60c182526b/68747470733a2f2f7777772e70617970616c6f626a656374732e636f6d2f656e5f55532f692f62746e2f62746e5f646f6e6174655f4c472e676966" alt="Paypal logo" data-canonical-src="https://www.paypalobjects.com/en_US/i/btn/btn_donate_LG.gif" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://www.patreon.com/user?u=3282358&amp;amp;ty=h" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/b2f1ffbe2a7180fd71d0ec398f9b27f7bb942fc8/68747470733a2f2f63352e70617472656f6e2e636f6d2f65787465726e616c2f6c6f676f2f6c6f676f6d61726b4f72616e67652e737667" alt="Patreon" data-canonical-src="https://c5.patreon.com/external/logo/logomarkOrange.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#smartparens"&gt;Smartparens&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#getting-started"&gt;Getting Started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#usage"&gt;Usage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#contributing"&gt;Contributing&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#language-support"&gt;Language Support&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#supporting-smartparens"&gt;Supporting Smartparens&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#related-projects"&gt;Related Projects&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Smartparens is a minor mode for dealing with pairs in Emacs.&lt;/p&gt;
&lt;p&gt;It can automatically insert pairs:&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="images/smartparens-insert.gif"&gt;&lt;img src="images/smartparens-insert.gif" alt="smartparens insert" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;wrap, unwrap and rewrap pairs:&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="images/smartparens-wrap.gif"&gt;&lt;img src="images/smartparens-wrap.gif" alt="smartparens wrapping" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;expand and contract pairs:&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="images/smartparens-slurp.gif"&gt;&lt;img src="images/smartparens-slurp.gif" alt="smartparens slurping" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;navigate pairs:&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="images/smartparens-navigate.gif"&gt;&lt;img src="images/smartparens-navigate.gif" alt="smartparens navigating" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;and much more!&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-getting-started" class="anchor" aria-hidden="true" href="#getting-started"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Getting Started&lt;/h2&gt;
&lt;p&gt;We generally target GNU Emacs version 24.3 and newer, however,
everything should work mostly fine on anything newer than version 24.&lt;/p&gt;
&lt;p&gt;You can install smartparens from &lt;a href="http://melpa.org/" rel="nofollow"&gt;MELPA&lt;/a&gt;.  Once
installed, enable the &lt;a href="https://github.com/Fuco1/smartparens/wiki/Default-configuration"&gt;default configuration&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;require&lt;/span&gt; &lt;span class="pl-c1"&gt;'smartparens-config&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can now use smartparens with &lt;code&gt;M-x smartparens-mode&lt;/code&gt;. To
automatically enable smartparens in a programming mode:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Always start smartparens mode in js-mode.&lt;/span&gt;
(&lt;span class="pl-c1"&gt;add-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;'js-mode-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;#&lt;span class="pl-c1"&gt;'smartparens-mode&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You may want to try &lt;code&gt;smartparens-strict-mode&lt;/code&gt;. This enforces that
pairs are always balanced, so commands like &lt;code&gt;kill-line&lt;/code&gt; keep your code
well-formed.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Usage&lt;/h2&gt;
&lt;p&gt;Inside Emacs, &lt;code&gt;M-x sp-cheat-sheet&lt;/code&gt; will show you all the commands
available, with examples.&lt;/p&gt;
&lt;p&gt;There's also a
&lt;a href="http://ebzzry.io/en/emacs-pairs/" rel="nofollow"&gt;great article demonstrating movement and editing in smartparens&lt;/a&gt;
and &lt;a href="https://github.com/Fuco1/smartparens/wiki"&gt;extensive documentation in the wiki&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-contributing" class="anchor" aria-hidden="true" href="#contributing"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contributing&lt;/h2&gt;
&lt;p&gt;We love pull requests. Please include tests. Smartparens uses
&lt;a href="https://github.com/rejeep/ert-runner.el"&gt;ert-runner&lt;/a&gt; for testing. To
run all the tests, run:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cask exec ert-runner
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Alternatively, you can open the individual files in Emacs, then
&lt;code&gt;M-x eval-buffer&lt;/code&gt; &lt;code&gt;M-x ert&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can learn more about how we test on the &lt;a href="https://github.com/Fuco1/smartparens/wiki/Testing"&gt;testing&lt;/a&gt; wiki page.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-language-support" class="anchor" aria-hidden="true" href="#language-support"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Language Support&lt;/h3&gt;
&lt;p&gt;Smartparens has a default configuration that works well for most
languages. For language-specific behaviour, smartparens has a separate
&lt;code&gt;smartparens-FOO.el&lt;/code&gt; file for every language and
&lt;code&gt;smartparens-config.el&lt;/code&gt; loads these automatically.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-supporting-smartparens" class="anchor" aria-hidden="true" href="#supporting-smartparens"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Supporting Smartparens&lt;/h2&gt;
&lt;p&gt;If you want to support this project, you can:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Contribute code. If you have an idea that is not yet implemented and
will benefit this project, feel free to implement it and submit a
pull request. If you have any concerns whether your contribution
will be accepted, ask beforehand. You can email the author or
&lt;a href="https://github.com/Fuco1/smartparens/issues/new"&gt;start an issue&lt;/a&gt; on
the tracker.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Contribute ideas. Even if you can't code Emacs Lisp, you can still
contribute valuable ideas for other programmers to implement. Simply
&lt;a href="https://github.com/Fuco1/smartparens/issues/new"&gt;start new issue&lt;/a&gt;
on the tracker and submit your suggestion.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can make a financial donation through
&lt;a href="https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;amp;hosted_button_id=A5PMGVKCQBT88" rel="nofollow"&gt;PayPal&lt;/a&gt;
or &lt;a href="https://www.patreon.com/user?u=3282358&amp;amp;ty=h" rel="nofollow"&gt;Patreon&lt;/a&gt;.  If you
like smartparens and can spare a modest amount on a donation, feel
free to do so.  These donations are expressions of your gratitude
and are used for my personal "rewards" (books, games, music etc.).
You can also gift me a game on
&lt;a href="http://steamcommunity.com/profiles/76561198265034071/wishlist" rel="nofollow"&gt;Steam&lt;/a&gt;
or buy something on
&lt;a href="http://www.amazon.com/gp/registry/wishlist/2I8DOQH8OZEUR" rel="nofollow"&gt;Amazon&lt;/a&gt;.
Regardless of the donations, smartparens will always be free both as
in beer and as in speech.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-related-projects" class="anchor" aria-hidden="true" href="#related-projects"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Related Projects&lt;/h2&gt;
&lt;p&gt;Other Emacs projects that deal with pairs include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/capitaomorte/autopair"&gt;autopair&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://code.google.com/p/emacs-textmate/" rel="nofollow"&gt;textmate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rejeep/wrap-region"&gt;wrap-region&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.emacswiki.org/emacs/ElectricPair" rel="nofollow"&gt;electric-pair-mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://emacswiki.org/emacs/ParEdit" rel="nofollow"&gt;paredit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Smartparens aims to provide a superset of these features, in all
programming languages.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>Fuco1</author><guid isPermaLink="false">https://github.com/Fuco1/smartparens</guid><pubDate>Sat, 01 Feb 2020 00:17:00 GMT</pubDate></item><item><title>domtronn/all-the-icons.el #18 in Emacs Lisp, This month</title><link>https://github.com/domtronn/all-the-icons.el</link><description>&lt;p&gt;&lt;i&gt;A utility package to collect various Icon Fonts and propertize them within Emacs.&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="logo.png"&gt;&lt;img src="logo.png" alt="img" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p align="center"&gt;
&lt;b&gt;&lt;a href="#installation"&gt;Installation&lt;/a&gt;&lt;/b&gt;
|
&lt;b&gt;&lt;a href="#usage"&gt;Usage&lt;/a&gt;&lt;/b&gt;
|
&lt;b&gt;&lt;a href="#resource-fonts"&gt;Fonts&lt;/a&gt;&lt;/b&gt;
|
&lt;b&gt;&lt;a href="#wiki"&gt;Wiki&lt;/a&gt;&lt;/b&gt;
&lt;/p&gt;
&lt;p align="center"&gt;
  &lt;a href="https://melpa.org/#/all-the-icons" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/79f42002f5a8a408095177781d6dcb743268f4a7/68747470733a2f2f6d656c70612e6f72672f7061636b616765732f616c6c2d7468652d69636f6e732d62616467652e737667" data-canonical-src="https://melpa.org/packages/all-the-icons-badge.svg" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a href="https://stable.melpa.org/#/all-the-icons" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/86464223519a3adce54b7755c427747dc092d7bb/68747470733a2f2f737461626c652e6d656c70612e6f72672f7061636b616765732f616c6c2d7468652d69636f6e732d62616467652e737667" data-canonical-src="https://stable.melpa.org/packages/all-the-icons-badge.svg" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a href="https://github.com/domtronn/all-the-icons.el/releases"&gt;&lt;img src="https://camo.githubusercontent.com/8396627f227e0ea96c050ad417eb99884c8b42ca/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f7461672f646f6d74726f6e6e2f616c6c2d7468652d69636f6e732e656c2e737667" data-canonical-src="https://img.shields.io/github/tag/domtronn/all-the-icons.el.svg" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a href="https://travis-ci.org/domtronn/all-the-icons.el" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/ea05c80b82dbd6a225d61dfd86a3805997b30cbb/68747470733a2f2f7472617669732d63692e6f72672f646f6d74726f6e6e2f616c6c2d7468652d69636f6e732e656c2e7376673f6272616e63683d6d6173746572" data-canonical-src="https://travis-ci.org/domtronn/all-the-icons.el.svg?branch=master" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a href="https://github.com/domtronn/all-the-icons.el/blob/master/LICENSE"&gt;&lt;img src="https://camo.githubusercontent.com/b0224997019dec4e51d692c722ea9bee2818c837/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f6d6173686170652f6170697374617475732e737667" data-canonical-src="https://img.shields.io/github/license/mashape/apistatus.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installation&lt;/h1&gt;
&lt;p&gt;You should be able to install this package in the standard way, add it
to the load path and then calling&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;require&lt;/span&gt; &lt;span class="pl-c1"&gt;'all-the-icons&lt;/span&gt;)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; or&lt;/span&gt;
(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; all-the-icons)&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-installing-fonts" class="anchor" aria-hidden="true" href="#installing-fonts"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installing Fonts&lt;/h3&gt;
&lt;p&gt;In order for the icons to work it is &lt;strong&gt;very important&lt;/strong&gt; that you install
the Resource Fonts included in this package, they are available in the
 &lt;code&gt;fonts&lt;/code&gt;  directory. You can also install the &lt;em&gt;latest&lt;/em&gt;
fonts for this package in the &lt;em&gt;(guessed?)&lt;/em&gt; based on the OS by calling
the following function;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;M-x all-the-icons-install-fonts
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Bear in mind, this will also run &lt;code&gt;fc-cache -f -v&lt;/code&gt; on &lt;strong&gt;MacOS&lt;/strong&gt; and
&lt;strong&gt;Linux&lt;/strong&gt; which &lt;em&gt;can take some time&lt;/em&gt; to complete. For &lt;strong&gt;Windows&lt;/strong&gt;, this
function will prompt for a &lt;em&gt;download&lt;/em&gt; directory for you to install
them manually.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Usage&lt;/h1&gt;
&lt;p&gt;The simplest usage for this package is to use the following functions;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;all-the-icons-icon-for-buffer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;all-the-icons-icon-for-file&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;all-the-icons-icon-for-mode&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;all-the-icons-icon-for-url&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Which can be used to get a formatted icon which you can insert into
buffers, &lt;em&gt;e.g.&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;insert&lt;/span&gt; (all-the-icons-icon-for-file &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;foo.js&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Inserts a javascript icon&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; #("js-icon" 0 1 (display (raise -0.24) face (:family "alltheicon" :height 1.08 :foreground "#FFD446")))&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-inserting-icons-directly" class="anchor" aria-hidden="true" href="#inserting-icons-directly"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Inserting Icons Directly&lt;/h2&gt;
&lt;p&gt;The above is fine if you want this package to automatically decide on
the icon you want for files and things, however, to insert the icons
directly you will want to use these icons functions;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;all-the-icons-alltheicon&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;all-the-icons-faicon&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;all-the-icons-fileicon&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;all-the-icons-oction&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;all-the-icons-wicon&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can then call these functions with the icon you want to insert,
&lt;em&gt;e.g.&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(all-the-icons-octicon &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;file-binary&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; GitHub Octicon for Binary File&lt;/span&gt;
(all-the-icons-faicon  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;cogs&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)         &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; FontAwesome icon for cogs&lt;/span&gt;
(all-the-icons-wicon   &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;tornado&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)      &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Weather Icon for tornado&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A list of all the icon names for a font family can be found in the
&lt;code&gt;data&lt;/code&gt; directory, or by inspecting the alist variables.&lt;/p&gt;
&lt;p&gt;The alist variables are all prefixed with&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;all-the-icons-data/&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example &lt;code&gt;C-h v all-the-icons-data/ &amp;lt;TAB&amp;gt;&lt;/code&gt; will give a list of all the data
alist you can describe &lt;em&gt;(and the icon fonts they're associated with)&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-inserting-icons-with-properties" class="anchor" aria-hidden="true" href="#inserting-icons-with-properties"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Inserting icons with properties&lt;/h2&gt;
&lt;p&gt;Each of the above icon functions can also be given different
properties to slightly adjust the way they're formatted, these are&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:height&lt;/code&gt; - The height of the icon&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:v-adjust&lt;/code&gt; - Vertical adjust (&lt;em&gt;positive is up, negative is down&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:face&lt;/code&gt; - The face to apply to the icon, defaults to &lt;code&gt;\'default&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So you would call, for example&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(all-the-icons-wicon &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;tornado&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;:face&lt;/span&gt; &lt;span class="pl-c1"&gt;'all-the-icons-blue&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;These properties can also be used on the &lt;code&gt;all-the-icons-icon-for-file&lt;/code&gt;
and &lt;code&gt;all-the-icons-icon-for-mode&lt;/code&gt; functions as well, &lt;em&gt;i.e.&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;insert&lt;/span&gt; (all-the-icons-icon-for-file &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;foo.js&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;:height&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;:face&lt;/span&gt; &lt;span class="pl-c1"&gt;'all-the-icons-lred&lt;/span&gt;))
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Inserts a RED Javascript icon with height 2&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; #("js-icon" 0 1 (display (raise -0.24) face (:family "alltheicon" :height 2.0 :foreground "red")))&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-propertizing-icons-yourself" class="anchor" aria-hidden="true" href="#propertizing-icons-yourself"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Propertizing icons yourself&lt;/h2&gt;
&lt;p&gt;However, sometimes when propertizing these icons &lt;em&gt;(for example if you
were customising your mode line)&lt;/em&gt; you &lt;em&gt;may&lt;/em&gt; sometimes have to know the
font family to add in to override the current font family being used,
&lt;em&gt;e.g.&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;propertize&lt;/span&gt; (all-the-icons-octicon &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;package&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
            &lt;span class="pl-c1"&gt;'face&lt;/span&gt; `(&lt;span class="pl-c1"&gt;:family&lt;/span&gt; ,(all-the-icons-octicon-family) &lt;span class="pl-c1"&gt;:height&lt;/span&gt; &lt;span class="pl-c1"&gt;1.2&lt;/span&gt;)
            &lt;span class="pl-c1"&gt;'display&lt;/span&gt; '(raise &lt;span class="pl-c1"&gt;-0.1&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-troubleshooting" class="anchor" aria-hidden="true" href="#troubleshooting"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Troubleshooting&lt;/h2&gt;
&lt;p&gt;If you see placeholders (AKA tofus) being rendered, or the wrong icons being displayed, the underlying cause generally falls into one of three categories:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Font installation failed due to networking issues. Check your OS' and Emacs' networking (&lt;code&gt;M-x customize-group RET gnutls/nsm/url/network RET&lt;/code&gt;) and security settings (i.e. proxy, firewall, antivirus software...)&lt;/li&gt;
&lt;li&gt;On *nix systems, make sure the font cache has been updated. &lt;code&gt;all-the-icons-install-fonts&lt;/code&gt; should do this for you automatically, but sometimes it may fail due to misconfiguration.&lt;/li&gt;
&lt;li&gt;You've misconfigured your font settings in Emacs.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To check if you've misconfigured your Emacs font settings, you can try the following steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Print out all of the icons in an icon set and their corresponding id/name.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Valid font families are 'material 'wicon 'octicon 'faicon 'fileicon and 'alltheicon&lt;/span&gt;

(all-the-icons-insert-icons-for &lt;span class="pl-c1"&gt;'alltheicon&lt;/span&gt;)   &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Prints all the icons for &lt;span class="pl-smi"&gt;`alltheicon'&lt;/span&gt; font set&lt;/span&gt;

(all-the-icons-insert-icons-for &lt;span class="pl-c1"&gt;'octicon&lt;/span&gt; &lt;span class="pl-c1"&gt;10&lt;/span&gt;)   &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Prints all the icons for the &lt;span class="pl-smi"&gt;`octicon'&lt;/span&gt; family&lt;/span&gt;
                                               &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; and makes the icons height 10&lt;/span&gt;

(all-the-icons-insert-icons-for &lt;span class="pl-c1"&gt;'faicon&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;0.5&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Prints all the icons for the &lt;span class="pl-smi"&gt;`faicon'&lt;/span&gt; family&lt;/span&gt;
                                               &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; and also waits 0.5s between printing each one&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol start="2"&gt;
&lt;li&gt;Now that you are certain which icon set is not displaying properly, check the fontset currently in effect.&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Look up the hex code of the icon from the &lt;code&gt;data/data-[font-family].el&lt;/code&gt; file. Write it down.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;M-x describe-fontset RET RET&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Now you are looking at the fontset for the current frame, search for the hex range for that icon. Usually it's &lt;code&gt;#xE000&lt;/code&gt;, or &lt;code&gt;#xF0&lt;/code&gt; &lt;code&gt;#xF2&lt;/code&gt;, but there are a few outside of these offsets.&lt;/li&gt;
&lt;li&gt;If you don't see the font family in question in the list of fontspecs (i.e. &lt;code&gt;[-*-file-icons-...]&lt;/code&gt;) below the range, or some other fontspecs in front of the one in question, you will have to add the families back to the fontset (scroll to the top to see which one is in effect), or arrange the fontspec order. For example:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;set-fontset-font&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt; &lt;span class="pl-c1"&gt;'unicode&lt;/span&gt; (&lt;span class="pl-c1"&gt;font-spec&lt;/span&gt; &lt;span class="pl-c1"&gt;:family&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;all-the-icons&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;nil&lt;/span&gt; &lt;span class="pl-c1"&gt;'append&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;set-fontset-font&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt; &lt;span class="pl-c1"&gt;'unicode&lt;/span&gt; (&lt;span class="pl-c1"&gt;font-spec&lt;/span&gt; &lt;span class="pl-c1"&gt;:family&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;file-icons&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;nil&lt;/span&gt; &lt;span class="pl-c1"&gt;'append&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;set-fontset-font&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt; &lt;span class="pl-c1"&gt;'unicode&lt;/span&gt; (&lt;span class="pl-c1"&gt;font-spec&lt;/span&gt; &lt;span class="pl-c1"&gt;:family&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Material Icons&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;nil&lt;/span&gt; &lt;span class="pl-c1"&gt;'append&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;set-fontset-font&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt; &lt;span class="pl-c1"&gt;'unicode&lt;/span&gt; (&lt;span class="pl-c1"&gt;font-spec&lt;/span&gt; &lt;span class="pl-c1"&gt;:family&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;github-octicons&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;nil&lt;/span&gt; &lt;span class="pl-c1"&gt;'append&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;set-fontset-font&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt; &lt;span class="pl-c1"&gt;'unicode&lt;/span&gt; (&lt;span class="pl-c1"&gt;font-spec&lt;/span&gt; &lt;span class="pl-c1"&gt;:family&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;FontAwesome&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;nil&lt;/span&gt; &lt;span class="pl-c1"&gt;'append&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;set-fontset-font&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt; &lt;span class="pl-c1"&gt;'unicode&lt;/span&gt; (&lt;span class="pl-c1"&gt;font-spec&lt;/span&gt; &lt;span class="pl-c1"&gt;:family&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Weather Icons&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;nil&lt;/span&gt; &lt;span class="pl-c1"&gt;'append&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h1&gt;&lt;a id="user-content-resource-fonts" class="anchor" aria-hidden="true" href="#resource-fonts"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Resource Fonts&lt;/h1&gt;
&lt;p&gt;All of the fonts provided in this packages as resources come with
either the SIL Open Font License &lt;em&gt;(OFL)&lt;/em&gt; or an MIT License, below I
will link to each of the fonts Sources and their Licenses.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Font Name&lt;/th&gt;
&lt;th&gt;Font&lt;/th&gt;
&lt;th&gt;License&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;file-icons.ttf&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://atom.io/packages/file-icons" rel="nofollow"&gt;Atom File Icons Plugin&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/DanBrooker/file-icons/blob/master/LICENSE.md"&gt;MIT LICENSE&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;fontawesome.ttf&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="http://fontawesome.io/" rel="nofollow"&gt;FontAwesome Icons&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/FortAwesome/Font-Awesome#license"&gt;SIL OFL LICENSE&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ocitcons.ttf&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="http://octicons.github.com"&gt;GitHub OctIcons&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/primer/octicons/blob/master/LICENSE"&gt;SIL OFL LICENSE&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;weathericons.ttf&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://erikflowers.github.io/weather-icons/" rel="nofollow"&gt;Weather Icons&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/primer/octicons/blob/master/LICENSE"&gt;SIL OFL LICENSE&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;material-design-icons.ttf&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="http://google.github.io/material-design-icons/" rel="nofollow"&gt;Material Icons&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="http://www.apache.org/licenses/LICENSE-2.0.txt" rel="nofollow"&gt;APACHE LICENSE v2.0&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;all-the-icons.ttf&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Custom Made Font&lt;/td&gt;
&lt;td&gt;MIT LICENSE&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The fonts provided with this packages are locked down to a version for
unicode character mapping values. In the future, these may be
automatically generated.&lt;/p&gt;
&lt;p&gt;I would like to thank all the authors for the creation and use
of these fantastic fonts.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-wiki" class="anchor" aria-hidden="true" href="#wiki"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Wiki&lt;/h1&gt;
&lt;p&gt;Lastly, there is a
&lt;a href="https://github.com/domtronn/all-the-icons.el/wiki"&gt;Wiki Page&lt;/a&gt; which
should give you some ideas of ways to use this library to spruce up
other Emacs packages.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-slow-rendering" class="anchor" aria-hidden="true" href="#slow-rendering"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Slow Rendering&lt;/h3&gt;
&lt;p&gt;If you experience a slow down in performance when rendering multiple
icons simultaneously, you can try setting the following variable&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;setq&lt;/span&gt; inhibit-compacting-font-caches &lt;span class="pl-c1"&gt;t&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Some people have found that this &lt;a href="https://github.com/domtronn/all-the-icons.el/issues/28"&gt;fixes the problem&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#readme"&gt;▲ back to top&lt;/a&gt;&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>domtronn</author><guid isPermaLink="false">https://github.com/domtronn/all-the-icons.el</guid><pubDate>Sat, 01 Feb 2020 00:18:00 GMT</pubDate></item><item><title>company-mode/company-mode #19 in Emacs Lisp, This month</title><link>https://github.com/company-mode/company-mode</link><description>&lt;p&gt;&lt;i&gt;Modular in-buffer completion framework for Emacs&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;p&gt;See the &lt;a href="http://company-mode.github.com/"&gt;homepage&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://travis-ci.org/company-mode/company-mode" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/2f553be95f403a48fff3c005aba6f7f87a19c1ce/68747470733a2f2f7472617669732d63692e6f72672f636f6d70616e792d6d6f64652f636f6d70616e792d6d6f64652e706e673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/company-mode/company-mode.png?branch=master" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="http://melpa.milkbox.net/#/company" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/7befa419dbab35116e916e68657a697c2f7e8687/687474703a2f2f6d656c70612e6d696c6b626f782e6e65742f7061636b616765732f636f6d70616e792d62616467652e737667" alt="Melpa Status" data-canonical-src="http://melpa.milkbox.net/packages/company-badge.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>company-mode</author><guid isPermaLink="false">https://github.com/company-mode/company-mode</guid><pubDate>Sat, 01 Feb 2020 00:19:00 GMT</pubDate></item><item><title>raxod502/straight.el #20 in Emacs Lisp, This month</title><link>https://github.com/raxod502/straight.el</link><description>&lt;p&gt;&lt;i&gt;🍀 Next-generation, purely functional package manager for the Emacs hacker.&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;p&gt;&lt;strong&gt;straight.el&lt;/strong&gt;: next-generation, purely functional package manager
for the &lt;a href="https://www.gnu.org/software/emacs/" rel="nofollow"&gt;Emacs&lt;/a&gt; hacker.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Please check out the &lt;a href="#faq"&gt;FAQ&lt;/a&gt; and &lt;a href="#news"&gt;news&lt;/a&gt; :)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://travis-ci.org/raxod502/straight.el" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e1b9504ca74a584011596e46a78873de1fa1784a/68747470733a2f2f7472617669732d63692e6f72672f7261786f643530322f73747261696768742e656c2e7376673f6272616e63683d646576656c6f70" alt="Build status" data-canonical-src="https://travis-ci.org/raxod502/straight.el.svg?branch=develop" style="max-width:100%;"&gt;&lt;/a&gt; &lt;a href="https://gitter.im/raxod502/straight.el" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/82630e77f45b173fed5fc2dbb99461abb2c402e7/68747470733a2f2f6261646765732e6769747465722e696d2f7261786f643530322f73747261696768742e656c2e737667" alt="Gitter chat" data-canonical-src="https://badges.gitter.im/raxod502/straight.el.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;ul&gt;
&lt;li&gt;&lt;a href="#features"&gt;Features&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#guiding-principles"&gt;Guiding principles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#getting-started"&gt;Getting started&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#debugging"&gt;Debugging&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#install-packages"&gt;Install packages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#but-what-about-my-fork-of-obscure-el-package"&gt;But what about my fork of (obscure .el package)?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#integration-with-use-package"&gt;Integration with &lt;code&gt;use-package&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#edit-packages-locally"&gt;Edit packages locally&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#automatic-repository-management"&gt;Automatic repository management&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#configuration-reproducibility"&gt;Configuration reproducibility&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#conceptual-overview"&gt;Conceptual overview&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#tldr"&gt;TL;DR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#what-is-a-package"&gt;What is a package?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#where-do-packages-come-from"&gt;Where do packages come from?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#what-does-this-look-like-on-disk"&gt;What does this look like on disk?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#where-do-repositories-come-from"&gt;Where do repositories come from?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#what-does-it-mean-to-load-a-package"&gt;What does it mean to load a package?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#where-do-recipes-come-from"&gt;Where do recipes come from?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#what-happens-when-i-call-straight-use-package"&gt;What happens when I call &lt;code&gt;straight-use-package&lt;/code&gt;?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#what-does-it-mean-to-register-a-package"&gt;What does it mean to register a package?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#how-does-straightel-know-when-to-rebuild-packages"&gt;How does &lt;code&gt;straight.el&lt;/code&gt; know when to rebuild packages?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#how-does-straightel-know-what-packages-are-installed"&gt;How does &lt;code&gt;straight.el&lt;/code&gt; know what packages are installed?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#comparison-to-other-package-managers"&gt;Comparison to other package managers&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#tldr-1"&gt;TL;DR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#comparison-to-packageel"&gt;Comparison to &lt;code&gt;package.el&lt;/code&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#advantages-of-straightel"&gt;Advantages of &lt;code&gt;straight.el&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#advantages-of-packageel"&gt;Advantages of &lt;code&gt;package.el&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#additional-notes"&gt;Additional notes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#comparison-to-quelpa"&gt;Comparison to Quelpa&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#advantages-of-straightel-1"&gt;Advantages of &lt;code&gt;straight.el&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#advantages-of-quelpa"&gt;Advantages of Quelpa&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#additional-notes-1"&gt;Additional notes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#comparison-to-cask"&gt;Comparison to Cask&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#advantages-of-straightel-2"&gt;Advantages of &lt;code&gt;straight.el&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#advantages-of-cask"&gt;Advantages of Cask&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#comparison-to-el-get"&gt;Comparison to el-get&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#advantages-of-straightel-3"&gt;Advantages of &lt;code&gt;straight.el&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#advantages-of-el-get"&gt;Advantages of el-get&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#comparison-to-borg"&gt;Comparison to Borg&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#advantages-of-straightel-4"&gt;Advantages of &lt;code&gt;straight.el&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#advantages-of-borg"&gt;Advantages of Borg&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#comparison-to-the-manual-approach"&gt;Comparison to the manual approach&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#advantages-of-straightel-5"&gt;Advantages of &lt;code&gt;straight.el&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#advantages-of-the-manual-approach"&gt;Advantages of the manual approach&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#user-manual"&gt;User manual&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#bootstrapping-straightel"&gt;Bootstrapping &lt;code&gt;straight.el&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#installing-packages-programmatically"&gt;Installing packages programmatically&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#installing-with-a-custom-recipe"&gt;Installing with a custom recipe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#additional-arguments-to-straight-use-package"&gt;Additional arguments to &lt;code&gt;straight-use-package&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#variants-of-straight-use-package"&gt;Variants of &lt;code&gt;straight-use-package&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#customizing-when-packages-are-built"&gt;Customizing when packages are built&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#custom-or-manual-modification-detection"&gt;Custom or manual modification detection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#summary-of-options-for-package-modification-detection"&gt;Summary of options for package modification detection&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#find-at-startup"&gt;&lt;code&gt;find-at-startup&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#check-on-save"&gt;&lt;code&gt;check-on-save&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#watch-files"&gt;&lt;code&gt;watch-files&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#customizing-how-packages-are-built"&gt;Customizing how packages are built&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#customizing-how-packages-are-made-available"&gt;Customizing how packages are made available&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#hooks-run-by-straight-use-package"&gt;Hooks run by &lt;code&gt;straight-use-package&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-recipe-format"&gt;The recipe format&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#version-control-backends"&gt;Version-control backends&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#git-backend"&gt;Git backend&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#deprecated-upstream-keyword"&gt;Deprecated &lt;code&gt;:upstream&lt;/code&gt; keyword&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#recipe-lookup"&gt;Recipe lookup&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#updating-recipe-repositories"&gt;Updating recipe repositories&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#customizing-recipe-repositories"&gt;Customizing recipe repositories&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#gnu-elpa"&gt;GNU ELPA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#emacsmirror"&gt;Emacsmirror&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#defining-new-recipe-repositories"&gt;Defining new recipe repositories&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#overriding-recipes"&gt;Overriding recipes&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#overriding-the-recipe-for-straightel"&gt;Overriding the recipe for &lt;code&gt;straight.el&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#interactive-usage"&gt;Interactive usage&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#version-control-operations"&gt;Version control operations&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#lockfile-management"&gt;Lockfile management&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#the-profile-system"&gt;The profile system&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#packages-and-the-init-file"&gt;Packages and the init-file&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#using-straightel-to-reproduce-bugs"&gt;Using &lt;code&gt;straight.el&lt;/code&gt; to reproduce bugs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#using-straightel-to-develop-packages"&gt;Using &lt;code&gt;straight.el&lt;/code&gt; to develop packages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#integration-with-other-packages"&gt;Integration with other packages&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#integration-with-use-package-1"&gt;Integration with &lt;code&gt;use-package&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#integration-with-packageel"&gt;"Integration" with &lt;code&gt;package.el&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#integration-with-org"&gt;Integration with Org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#integration-with-hydra"&gt;Integration with Hydra&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#miscellaneous"&gt;Miscellaneous&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#developer-manual"&gt;Developer manual&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#trivia"&gt;Trivia&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#comments-and-docstrings"&gt;Comments and docstrings&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#contributing"&gt;Contributing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#faq"&gt;FAQ&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#my-init-time-got-slower"&gt;My init time got slower&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#how-do-i-update-melpa-et-al"&gt;How do I update MELPA et al.?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-wrong-version-of-my-package-was-loaded"&gt;The wrong version of my package was loaded&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#i-get-could-not-read-usernamepassword-errors"&gt;I get "could not read username/password" errors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-interactive-version-control-operations-are-confusing"&gt;The interactive version-control operations are confusing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#how-do-i-pin-package-versions-or-use-only-tagged-releases"&gt;How do I pin package versions or use only tagged releases?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#how-can-i-use-the-built-in-version-of-a-package"&gt;How can I use the built-in version of a package?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#news"&gt;News&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#july-6-2019"&gt;July 6, 2019&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#may-24-2019"&gt;May 24, 2019&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#may-22-2019"&gt;May 22, 2019&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#may-1-2019"&gt;May 1, 2019&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#march-15-2019"&gt;March 15, 2019&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#december-22-2018"&gt;December 22, 2018&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#september-12-2018"&gt;September 12, 2018&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#july-19-2018"&gt;July 19, 2018&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#july-12-2018"&gt;July 12, 2018&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;&lt;a id="user-content-features" class="anchor" aria-hidden="true" href="#features"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Install Emacs packages listed on &lt;a href="http://melpa.org/#/" rel="nofollow"&gt;MELPA&lt;/a&gt;, &lt;a href="https://elpa.gnu.org/" rel="nofollow"&gt;GNU ELPA&lt;/a&gt;, or
&lt;a href="https://emacsmirror.net/" rel="nofollow"&gt;Emacsmirror&lt;/a&gt;, or provide your own recipes.&lt;/li&gt;
&lt;li&gt;Packages are cloned as Git (or other) repositories, not as opaque
tarballs.&lt;/li&gt;
&lt;li&gt;Make changes to a package simply by editing its source code, no
additional steps required. Contribute upstream just by pushing your
changes.&lt;/li&gt;
&lt;li&gt;Powerful interactive workflows (with popups à la Magit) for
performing bulk maintenance on the Git repositories for your
packages.&lt;/li&gt;
&lt;li&gt;Save and load version lockfiles that ensure 100% reproducibility for
your Emacs configuration. Package state is defined entirely by your
init-file and (optional) lockfile, with no extra persistent data
floating around.&lt;/li&gt;
&lt;li&gt;Specify package descriptions using a powerful recipe format that
supports everything from &lt;a href="https://github.com/melpa/melpa#recipe-format"&gt;MELPA recipes&lt;/a&gt; and
more.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jwiegley/use-package"&gt;&lt;code&gt;use-package&lt;/code&gt;&lt;/a&gt; integration.&lt;/li&gt;
&lt;li&gt;Modular: you can install your packages manually and straight.el will
load them for you. Or you can also have straight.el install your
packages, while you provide the recipes explicitly. Or straight.el
can also fetch recipes, if you want. Bulk repository management and
package updates are also optional.&lt;/li&gt;
&lt;li&gt;Extensible APIs to add new recipe sources and version-control
backends.&lt;/li&gt;
&lt;li&gt;The cleanest source code you've ever seen. &lt;a href="#comments-and-docstrings"&gt;45%&lt;/a&gt;
of &lt;code&gt;straight.el&lt;/code&gt; is comments and docstrings.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-guiding-principles" class="anchor" aria-hidden="true" href="#guiding-principles"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Guiding principles&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Init-file and version lockfiles as the sole source of truth. No
persistent state kept elsewhere.&lt;/li&gt;
&lt;li&gt;100% reproducible package management, accounting for changes in
packages, recipe repositories, configuration, and the package
manager itself.&lt;/li&gt;
&lt;li&gt;No support whatsoever for &lt;code&gt;package.el&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Edit packages by editing their code, no extra steps required. Allow
for manual version control operations.&lt;/li&gt;
&lt;li&gt;Compatibility with MELPA, GNU ELPA, and Emacsmirror.&lt;/li&gt;
&lt;li&gt;Trivial to quickly try out a package without permanently installing
it.&lt;/li&gt;
&lt;li&gt;Good for reproducing an issue with &lt;code&gt;emacs -Q&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-getting-started" class="anchor" aria-hidden="true" href="#getting-started"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Getting started&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note: &lt;code&gt;straight.el&lt;/code&gt; supports a minimum version of Emacs 24.5, and
works on macOS, Windows, and most flavors of Linux.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;First, place the following bootstrap code in your init-file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here are some variables you may be interested in (some of them must be
set &lt;strong&gt;before&lt;/strong&gt; the bootstrap code runs, if they might affect how
&lt;code&gt;straight.el&lt;/code&gt; itself is loaded):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#overriding-the-recipe-for-straightel"&gt;&lt;code&gt;straight-repository-branch&lt;/code&gt;&lt;/a&gt; -- to
get the latest version of &lt;code&gt;straight.el&lt;/code&gt; from the &lt;code&gt;develop&lt;/code&gt; branch,
rather than the default &lt;code&gt;master&lt;/code&gt; which is updated less frequently
but which is ostensibly more stable.&lt;/li&gt;
&lt;li&gt;&lt;a href="#customizing-when-packages-are-built"&gt;&lt;code&gt;straight-check-for-modifications&lt;/code&gt;&lt;/a&gt; --
to configure an alternate way for &lt;code&gt;straight.el&lt;/code&gt; to check for
modifications made to package source code, rather than the default
(which is 100% reliable, but has a minor cost to startup time).&lt;/li&gt;
&lt;li&gt;&lt;a href="#integration-with-use-package-1"&gt;&lt;code&gt;straight-use-package-by-default&lt;/code&gt;&lt;/a&gt;
-- if you use &lt;a href="https://github.com/jwiegley/use-package"&gt;&lt;code&gt;use-package&lt;/code&gt;&lt;/a&gt;, then this makes each
&lt;code&gt;use-package&lt;/code&gt; form also invoke &lt;code&gt;straight.el&lt;/code&gt; to install the package,
unless otherwise specified.&lt;/li&gt;
&lt;li&gt;&lt;a href="#git-backend"&gt;&lt;code&gt;straight-vc-git-default-protocol&lt;/code&gt;&lt;/a&gt; -- by
default, &lt;code&gt;straight.el&lt;/code&gt; clones over HTTPS. If you need packages from
private Git repositories in your configuration, then you might want
to use SSH instead.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You should remove any code that relates to &lt;code&gt;package.el&lt;/code&gt;; for example,
references to &lt;code&gt;package-initialize&lt;/code&gt;, &lt;code&gt;package-archives&lt;/code&gt;, and (if you're
using &lt;a href="https://github.com/jwiegley/use-package"&gt;&lt;code&gt;use-package&lt;/code&gt;&lt;/a&gt;) &lt;code&gt;:ensure&lt;/code&gt; or
&lt;code&gt;use-package-always-ensure&lt;/code&gt;. While it is technically possible to use
both &lt;code&gt;package.el&lt;/code&gt; and &lt;code&gt;straight.el&lt;/code&gt; at the same time, there is no real
reason to, and it might result in oddities like packages getting
loaded more than once.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-debugging" class="anchor" aria-hidden="true" href="#debugging"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Debugging&lt;/h4&gt;
&lt;p&gt;On macOS, you may receive an error:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Could not create connection to raw.githubusercontent.com:443
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are two ways to solve this problem. One way is to install a
version of Emacs that is linked with GnuTLS. The &lt;a href="https://brew.sh/" rel="nofollow"&gt;Homebrew&lt;/a&gt; formula
for Emacs was recently updated to link with GnuTLS by default, so you
need only do this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ brew upgrade emacs
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The other way is to let Emacs use certificates provided by LibreSSL,
which you can do by running this command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ brew install gnutls libressl
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And adding this to your init-file, &lt;em&gt;before&lt;/em&gt; the bootstrap snippet:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(with-eval-after-load 'gnutls
  (add-to-list 'gnutls-trustfiles "/usr/local/etc/libressl/cert.pem"))
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-install-packages" class="anchor" aria-hidden="true" href="#install-packages"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Install packages&lt;/h3&gt;
&lt;p&gt;Out of the box, you can install any package listed on &lt;a href="http://melpa.org/#/" rel="nofollow"&gt;MELPA&lt;/a&gt;, &lt;a href="https://elpa.gnu.org/" rel="nofollow"&gt;GNU
ELPA&lt;/a&gt;, or &lt;a href="https://emacsmirror.net/" rel="nofollow"&gt;Emacsmirror&lt;/a&gt;, which is to say any package in
existence. (Although MELPA is used as a package listing, packages are
installed by cloning their Git repositories rather than by downloading
tarballs like &lt;code&gt;package.el&lt;/code&gt; does.) To install a package temporarily
(until you restart Emacs), run &lt;code&gt;M-x straight-use-package&lt;/code&gt; and select
the package you want. To install a package permanently, place a call
to &lt;code&gt;straight-use-package&lt;/code&gt; in your init-file, like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(straight-use-package 'el-patch)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that installing a package will activate all of its autoloads, but
it will not actually &lt;code&gt;require&lt;/code&gt; the features provided by the package.
This means that you might need to use &lt;code&gt;require&lt;/code&gt; or &lt;code&gt;autoload&lt;/code&gt; for some
antiquated packages that do not properly declare their autoloads.&lt;/p&gt;
&lt;p&gt;To learn more, see the documentation on &lt;a href="#installing-packages-programmatically"&gt;the package
lifecycle&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-but-what-about-my-fork-of-obscure-el-package" class="anchor" aria-hidden="true" href="#but-what-about-my-fork-of-obscure-el-package"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;But what about my fork of (obscure .el package)?&lt;/h3&gt;
&lt;p&gt;Instead of passing just a package name to &lt;code&gt;straight-use-package&lt;/code&gt;, you
can pass a list ("recipe"). You can see the default recipe for any
given package by running &lt;code&gt;M-x straight-get-recipe&lt;/code&gt;. For example, the
recipe for &lt;code&gt;el-patch&lt;/code&gt; is:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(el-patch :type git :host github :repo "raxod502/el-patch")
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So, if you have forked &lt;code&gt;el-patch&lt;/code&gt; and you want to use your fork
instead of the upstream, do:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(straight-use-package
 '(el-patch :type git :host github :repo "your-name/el-patch"))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In fact, &lt;code&gt;straight.el&lt;/code&gt; has explicit support for using a forked
package, since this is so common:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(straight-use-package
 '(el-patch :type git :host github :repo "raxod502/el-patch"
            :fork (:host github
                   :repo "your-name/el-patch")))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You may also omit the &lt;code&gt;:type git&lt;/code&gt; if you leave &lt;code&gt;straight-default-vc&lt;/code&gt;
at its default value of &lt;code&gt;git&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To learn more, see the documentation on &lt;a href="#the-recipe-format"&gt;the recipe
format&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-integration-with-use-package" class="anchor" aria-hidden="true" href="#integration-with-use-package"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Integration with &lt;code&gt;use-package&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/jwiegley/use-package"&gt;&lt;code&gt;use-package&lt;/code&gt;&lt;/a&gt; is a macro that provides convenient
syntactic sugar for many common tasks related to installing and
configuring Emacs packages. Of course, it does not actually install
the packages, but instead defers to a package manager, like
&lt;code&gt;straight.el&lt;/code&gt; (which comes with &lt;code&gt;use-package&lt;/code&gt; integration by default).&lt;/p&gt;
&lt;p&gt;To use &lt;code&gt;use-package&lt;/code&gt;, first install it with &lt;code&gt;straight.el&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(straight-use-package 'use-package)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now &lt;code&gt;use-package&lt;/code&gt; will use &lt;code&gt;straight.el&lt;/code&gt; to automatically install
missing packages if you provide &lt;code&gt;:straight t&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(use-package el-patch
  :straight t)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can still provide a custom recipe for the package:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(use-package el-patch
  :straight (el-patch :type git :host github :repo "raxod502/el-patch"
                      :fork (:host github
                             :repo "your-name/el-patch")))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Specifying &lt;code&gt;:straight t&lt;/code&gt; is unnecessary if you set
&lt;code&gt;straight-use-package-by-default&lt;/code&gt; to a non-nil value. (Note that the
variable &lt;code&gt;use-package-always-ensure&lt;/code&gt; is associated with &lt;code&gt;package.el&lt;/code&gt;,
and you should not use it with &lt;code&gt;straight.el&lt;/code&gt;.)&lt;/p&gt;
&lt;p&gt;To learn more, see the documentation on &lt;a href="#integration-with-use-package-1"&gt;&lt;code&gt;straight.el&lt;/code&gt;'s &lt;code&gt;use-package&lt;/code&gt;
integration&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-edit-packages-locally" class="anchor" aria-hidden="true" href="#edit-packages-locally"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Edit packages locally&lt;/h3&gt;
&lt;p&gt;One of the biggest strengths of &lt;code&gt;straight.el&lt;/code&gt; is that editing packages
locally is trivial. You literally just edit the files (&lt;code&gt;find-function&lt;/code&gt;
and friends all work as you would expect). Packages will be
automatically rebuilt if necessary when Emacs next starts up.&lt;/p&gt;
&lt;p&gt;You can even commit your changes and push or pull to various remotes
using Git. You have complete control over your packages' Git
repositories.&lt;/p&gt;
&lt;p&gt;To learn more, see the documentation on &lt;a href="#installing-packages-programmatically"&gt;the package
lifecycle&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-automatic-repository-management" class="anchor" aria-hidden="true" href="#automatic-repository-management"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Automatic repository management&lt;/h3&gt;
&lt;p&gt;While being able to make arbitrary changes to your packages is very
powerful, it can also get tiring to keep track of the all those
changes. For this reason, &lt;code&gt;straight.el&lt;/code&gt; provides a suite of powerful
interactive workflows to perform bulk operations on your packages.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;To restore each package to its canonical state (a clean working
directory with the main branch checked out, and the remotes set
correctly), run &lt;code&gt;M-x straight-normalize-package&lt;/code&gt; or &lt;code&gt;M-x straight-normalize-all&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To fetch from each package's configured remote, run &lt;code&gt;M-x straight-fetch-package-and-deps&lt;/code&gt; or &lt;code&gt;M-x straight-fetch-all&lt;/code&gt;; to
also fetch from the upstream for forked packages, supply a prefix
argument.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To merge changes from each package's configured remote, run &lt;code&gt;M-x straight-merge-package-and-deps&lt;/code&gt; or &lt;code&gt;M-x straight-merge-all&lt;/code&gt;; to
also merge from the upstream for forked packages, supply a prefix
argument.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To push all local changes to each package's configured remote, run
&lt;code&gt;M-x straight-push-package&lt;/code&gt; or &lt;code&gt;M-x straight-push-all&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All of these commands are highly interactive and ask you before making
any changes. At any point, you can stop and perform manual operations
with Magit or other tools in a recursive edit.&lt;/p&gt;
&lt;p&gt;To learn more, see the documentation on &lt;a href="#version-control-operations"&gt;bulk repository
management&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-configuration-reproducibility" class="anchor" aria-hidden="true" href="#configuration-reproducibility"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Configuration reproducibility&lt;/h3&gt;
&lt;p&gt;To save the currently checked out revisions of all of your packages,
run &lt;code&gt;M-x straight-freeze-versions&lt;/code&gt;. The resulting file
(&lt;code&gt;~/.emacs.d/straight/versions/default.el&lt;/code&gt;), together with your
init-file, perfectly define your package configuration. Keep your
version lockfile checked into version control; when you install your
Emacs configuration on another machine, the versions of packages
specified in your lockfile will automatically be checked out after the
packages are installed. You can manually revert all packages to the
revisions specified in the lockfile by running &lt;code&gt;M-x straight-thaw-versions&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To learn more, see the documentation on &lt;a href="#lockfile-management"&gt;version
lockfiles&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-conceptual-overview" class="anchor" aria-hidden="true" href="#conceptual-overview"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Conceptual overview&lt;/h2&gt;
&lt;p&gt;This section describes, at a high level, how the different mechanisms
in &lt;code&gt;straight.el&lt;/code&gt; play together. This illustrates how &lt;code&gt;straight.el&lt;/code&gt;
manages to accomplish all of its &lt;a href="#guiding-principles"&gt;guiding principles&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-tldr" class="anchor" aria-hidden="true" href="#tldr"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TL;DR&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;straight.el&lt;/code&gt; operates by cloning Git repositories and then symlinking
files into Emacs' load path. The collection of symlinked files
constitutes the package, which is defined by its recipe. The recipe
also describes which local repository to link the files from, and how
to clone that repository, if it is absent.&lt;/p&gt;
&lt;p&gt;When you call &lt;code&gt;straight-use-package&lt;/code&gt;, the recipe you provide is
registered with &lt;code&gt;straight.el&lt;/code&gt; for future reference. Then the package's
repository is cloned if it is absent, the package is rebuilt if its
files have changed since the last build (as determined by &lt;code&gt;find(1)&lt;/code&gt;),
and its autoloads are evaluated.&lt;/p&gt;
&lt;p&gt;You can also provide only a package name, in which case the recipe
will be looked up in one of several configurable recipe repositories,
which are just packages themselves (albeit with the build step
disabled).&lt;/p&gt;
&lt;p&gt;&lt;code&gt;straight.el&lt;/code&gt; determines which packages are installed solely by how
and when &lt;code&gt;straight-use-package&lt;/code&gt; is invoked in your init-file.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-what-is-a-package" class="anchor" aria-hidden="true" href="#what-is-a-package"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;What is a package?&lt;/h3&gt;
&lt;p&gt;A &lt;em&gt;package&lt;/em&gt; is a collection of Emacs Lisp (and possibly other) files.
The most common case is just a single &lt;code&gt;.el&lt;/code&gt; file, but some packages
have many &lt;code&gt;.el&lt;/code&gt; files, and some even have a directory structure.&lt;/p&gt;
&lt;p&gt;Note that a package is defined only as a collection of files. It
doesn't necessarily correspond to a Git repository, or an entry on
MELPA, or anything like that. Frequently there is a relationship
between all of these concepts, but that relationship does not always
have to be direct or one-to-one.&lt;/p&gt;
&lt;p&gt;A package also has a name, which must be unique. This is the name that
is used for the folder holding the package's files. It is frequently
the same as the name of a Git repository, or an entry on MELPA, but
again this does not have to be the case.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-where-do-packages-come-from" class="anchor" aria-hidden="true" href="#where-do-packages-come-from"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Where do packages come from?&lt;/h3&gt;
&lt;p&gt;If you really wanted all of your packages to be unambiguously defined,
you could just copy and paste all of their files into version control.
But that would defeat the purpose of using a package manager like
&lt;code&gt;straight.el&lt;/code&gt;. In &lt;code&gt;straight.el&lt;/code&gt;, packages are defined by two sources
of information:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a &lt;em&gt;local repository&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;a &lt;em&gt;build recipe&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The local repository is just a directory containing some files. Of
course, it also has a name, which may or may not be the same as the
package's name. Frequently, the local repository is also a Git
repository, but this is not necessary.&lt;/p&gt;
&lt;p&gt;The build recipe is not a literal data structure. It is a concept that
represents a certain subset of the package's recipe. Specifically, the
&lt;code&gt;:files&lt;/code&gt;, &lt;code&gt;:local-repo&lt;/code&gt;, and &lt;code&gt;:no-build&lt;/code&gt; keywords.&lt;/p&gt;
&lt;p&gt;To transform this &lt;em&gt;information&lt;/em&gt; into an actual package that Emacs can
load, &lt;code&gt;straight.el&lt;/code&gt; &lt;em&gt;builds&lt;/em&gt; the package. This means that some
symbolic links are created in the package's directory that point back
into the local repository's directory. Exactly how these symlinks are
created is determined by the &lt;code&gt;:files&lt;/code&gt; directive, and which local
repository the symlinks point to is determined by the &lt;code&gt;:local-repo&lt;/code&gt;
directive.&lt;/p&gt;
&lt;p&gt;After the symlinks are created, the resulting files are byte-compiled,
and their autoloads are generated and written into a file in the
package's directory.&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;:no-build&lt;/code&gt; is specified, however, this entire process is skipped.
This mechanism is used for recipe repositories.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-what-does-this-look-like-on-disk" class="anchor" aria-hidden="true" href="#what-does-this-look-like-on-disk"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;What does this look like on disk?&lt;/h3&gt;
&lt;p&gt;The local repositories are kept in &lt;code&gt;~/.emacs.d/straight/repos&lt;/code&gt;, and
the built packages are kept in &lt;code&gt;~/.emacs.d/straight/build&lt;/code&gt;. If you
have initialized &lt;code&gt;straight.el&lt;/code&gt; and loaded package &lt;code&gt;el-patch&lt;/code&gt;, then
your &lt;code&gt;~/.emacs.d/straight&lt;/code&gt; directory will look roughly like this (some
irrelevant details have been omitted for pedagogical purposes):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;straight
├── build
│   ├── el-patch
│   │   ├── el-patch-autoloads.el
│   │   ├── el-patch.el -&amp;gt; ~/.emacs.d/straight/repos/el-patch/el-patch.el
│   │   └── el-patch.elc
│   └── straight
│       ├── straight-autoloads.el
│       ├── straight.el -&amp;gt; ~/.emacs.d/straight/repos/straight.el/straight.el
│       └── straight.elc
└── repos
    ├── el-patch
    │   ├── CHANGELOG.md
    │   ├── LICENSE.md
    │   ├── README.md
    │   └── el-patch.el
    └── straight.el
        ├── LICENSE.md
        ├── Makefile
        ├── README.md
        ├── bootstrap.el
        ├── install.el
        └── straight.el
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, the package names are &lt;code&gt;el-patch&lt;/code&gt; and &lt;code&gt;straight&lt;/code&gt;. While
&lt;code&gt;el-patch&lt;/code&gt; is built from a local repository of the same name,
&lt;code&gt;straight&lt;/code&gt; is built from a local repository by the name &lt;code&gt;straight.el&lt;/code&gt;.
Also note that only &lt;code&gt;.el&lt;/code&gt; files are symlinked, since only they are
relevant to Emacs.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-where-do-repositories-come-from" class="anchor" aria-hidden="true" href="#where-do-repositories-come-from"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Where do repositories come from?&lt;/h3&gt;
&lt;p&gt;Local repositories provide a way to define packages without specifying
the contents of all of their files explicitly. But that's not helpful
without a higher-level way to define local repositories without
specifying the contents of all of &lt;em&gt;their&lt;/em&gt; files. In &lt;code&gt;straight.el&lt;/code&gt;,
local repositories are defined by two sources of information:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a &lt;em&gt;fetch recipe&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;the &lt;em&gt;version lockfiles&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The fetch recipe is, like the build recipe, a concept representing a
certain subset of the package's overall recipe. The situation is more
interesting here because &lt;code&gt;straight.el&lt;/code&gt; supports multiple
version-control backends. The version-control backend specified by the
fetch recipe is determined by the &lt;code&gt;:type&lt;/code&gt; directive (which defaults to
&lt;code&gt;straight-default-vc&lt;/code&gt;). Each version-control backend then accepts some
set of additional directives. For example, the &lt;code&gt;git&lt;/code&gt; backend accepts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:repo&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:host&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:branch&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:nonrecursive&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:fork&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If a local repository is not present, then its fetch recipe describes
how to obtain it. This is done using the &lt;code&gt;straight-vc-clone&lt;/code&gt; function,
which delegates to one of the backend implementations of the &lt;code&gt;clone&lt;/code&gt;
operation, according to &lt;code&gt;:type&lt;/code&gt;. (The option &lt;code&gt;:type built-in&lt;/code&gt; is a
special case that results in all version-control operations for the
package being ignored.)&lt;/p&gt;
&lt;p&gt;However, even with a particular repository source specified, there is
still the question of which version of the repository to use. This is
where the version lockfiles come in. When a local repository is
cloned, the version lockfiles are searched to see if there is a
particular commit specified for that local repository's name. If so,
that commit is checked out. (For the &lt;code&gt;git&lt;/code&gt; backend, commits are
40-character strings representing SHA-1 hashes, but the representation
of a commit identifier could be different across different backends.)&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;straight-freeze-versions&lt;/code&gt; and &lt;code&gt;straight-thaw-versions&lt;/code&gt; methods
also use backend-delegating methods; in this case, they are
&lt;code&gt;straight-vc-get-commit&lt;/code&gt; and &lt;code&gt;straight-vc-check-out-commit&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The fetch recipe and version lockfiles, together with the
configuration options for &lt;code&gt;straight.el&lt;/code&gt;, precisely define the state of
a local repository. Of course, you may make any changes you want to
the local repository. But this information defines a "canonical" state
that you may revert to at any time.&lt;/p&gt;
&lt;p&gt;When this information is combined with the build recipe, &lt;code&gt;straight.el&lt;/code&gt;
is able to construct canonical, universal versions of your Emacs
packages that will be the same everywhere and forever.&lt;/p&gt;
&lt;p&gt;Note that you do not have to provide fetch recipes or version
lockfiles. You may manage your local repositories manually, if you
wish, although this has obvious disadvantages in terms of
repeatability and maintainability.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-what-does-it-mean-to-load-a-package" class="anchor" aria-hidden="true" href="#what-does-it-mean-to-load-a-package"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;What does it mean to load a package?&lt;/h3&gt;
&lt;p&gt;A prerequisite to loading a package is making sure the package has
been built. After that is done, loading the package means adding its
directory to the load path and evaluating its autoloads file.&lt;/p&gt;
&lt;p&gt;Adding the directory to the load path means that you can use &lt;code&gt;require&lt;/code&gt;
to load the package's files. Note that &lt;code&gt;straight.el&lt;/code&gt; does not do this
for you, since loading packages immediately is usually not necessary
and it immensely slows down Emacs startup.&lt;/p&gt;
&lt;p&gt;Evaluating the autoloads file means that calling the functions that
are defined in the autoloads file will automatically &lt;code&gt;require&lt;/code&gt; the
files that define those functions. All modern packages define their
functions in autoloads and are designed to be loaded on-demand when
those functions are called. Antiquated packages may need you to
explicitly define autoloads, or to just &lt;code&gt;require&lt;/code&gt; the package right
away.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-where-do-recipes-come-from" class="anchor" aria-hidden="true" href="#where-do-recipes-come-from"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Where do recipes come from?&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;straight-use-package&lt;/code&gt; does not require an actual recipe. You can just
give it a package name, and it will look up the recipe. This is done
using &lt;em&gt;recipe repositories&lt;/em&gt;. Recipe repositories are set up as a
swappable backend system, much like the version-control backend
system.&lt;/p&gt;
&lt;p&gt;A recipe repository consists of four parts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a fetch recipe for the local repository (this will typically include
the &lt;code&gt;:no-build&lt;/code&gt; directive, since recipe repositories usually do not
need to be built)&lt;/li&gt;
&lt;li&gt;a function that, provided the local repository is already available,
returns a list of all packages that have recipes in the recipe
repository&lt;/li&gt;
&lt;li&gt;a function that, given a package name, returns the recipe for that
package, or nil if the recipe repository does not provide a recipe
for the package&lt;/li&gt;
&lt;li&gt;an entry in &lt;code&gt;straight-recipe-repositories&lt;/code&gt; indicating that the
recipe provided actually corresponds to a recipe repository
(otherwise it would just be a regular package)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that recipe repositories are implemented as regular packages!
This means that all the usual package management operations work on
them as well. It also means that you use &lt;code&gt;straight-use-package&lt;/code&gt; to
register them (although typically you will provide arguments to
&lt;code&gt;straight-use-package&lt;/code&gt; so that the recipe repository is only
registered, and not cloned until it is needed; see &lt;a href="#what-happens-when-i-call-straight-use-package"&gt;the section on
&lt;code&gt;straight-use-package&lt;/code&gt;&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;If you give &lt;code&gt;straight-use-package&lt;/code&gt; just a package name, then each
recipe repository in &lt;code&gt;straight-recipe-repositories&lt;/code&gt; is checked for a
recipe for that package. Once one is found, it is used. Otherwise, an
error is signaled (unless the package is built-in to Emacs, according
to &lt;code&gt;package.el&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Note that &lt;code&gt;straight.el&lt;/code&gt; uses its own recipe format which is similar,
but not identical, to the one used by MELPA. The recipe repository
backends abstract over the formatting differences in different recipe
sources to translate recipes into the uniform format used by
&lt;code&gt;straight.el&lt;/code&gt;. When you run &lt;code&gt;M-x straight-get-recipe&lt;/code&gt;, the translated
recipe is what is returned.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-what-happens-when-i-call-straight-use-package" class="anchor" aria-hidden="true" href="#what-happens-when-i-call-straight-use-package"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;What happens when I call &lt;code&gt;straight-use-package&lt;/code&gt;?&lt;/h3&gt;
&lt;p&gt;There are three actions that &lt;code&gt;straight-use-package&lt;/code&gt; can take:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Register a package's recipe with &lt;code&gt;straight.el&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Clone a package's local repository, if it is missing.&lt;/li&gt;
&lt;li&gt;Build a package, if it has been changed since the last time it was
built, and load it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These actions must be performed in order. Depending on the arguments
you pass to &lt;code&gt;straight-use-package&lt;/code&gt;, one, two, or all three may be
performed.&lt;/p&gt;
&lt;p&gt;The normal case is to do all three. The fetch recipe is only required
if the local repository is actually missing, but the build recipe is
always required.&lt;/p&gt;
&lt;p&gt;Deferred installation can be accomplished by telling
&lt;code&gt;straight-use-package&lt;/code&gt; to stop if the local repository is not already
available. The deferred installation can be triggered by invoking
&lt;code&gt;straight-use-package&lt;/code&gt; again, but telling it to go ahead and clone the
repository (this is the default behavior). Because
&lt;code&gt;straight-use-package&lt;/code&gt; already registered the package's recipe the
first time, you don't have to provide it again.&lt;/p&gt;
&lt;p&gt;In some extraordinary circumstances (such as when &lt;code&gt;straight.el&lt;/code&gt; is
bootstrapping its own installation), it may be desirable to clone a
package's local repository if it is missing, but to stop before
building and loading the package. This can also be done by
&lt;code&gt;straight-use-package&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-what-does-it-mean-to-register-a-package" class="anchor" aria-hidden="true" href="#what-does-it-mean-to-register-a-package"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;What does it mean to register a package?&lt;/h3&gt;
&lt;p&gt;Package registration is the first action taken by
&lt;code&gt;straight-use-package&lt;/code&gt;, before building and cloning. First, if only a
package name was provided to &lt;code&gt;straight-use-package&lt;/code&gt;, a recipe is
obtained from the configured recipe repositories. Next, the resulting
recipe is recorded in various caches.&lt;/p&gt;
&lt;p&gt;This is important, since it allows for several things to happen:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;if you later want to perform another operation on the package using
&lt;code&gt;straight.el&lt;/code&gt;, you do not need to provide the recipe again&lt;/li&gt;
&lt;li&gt;if you use a custom recipe for Package A, and Package B requires
Package A as a dependency, your custom recipe is remembered and
re-used when Package A is used as a dependency, to avoid conflicts.&lt;/li&gt;
&lt;li&gt;when multiple packages are built from the same local repository, and
you have specified a custom fetch recipe for one of those packages,
&lt;code&gt;straight.el&lt;/code&gt; can intelligently merge that fetch recipe into the
automatically retrieved recipes of dependencies, in order to avoid
conflicts.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; knows which packages you have installed, if you want
to perform interactive operations on them.&lt;/li&gt;
&lt;li&gt;if you accidentally provide two different recipes for the same
package, &lt;code&gt;straight.el&lt;/code&gt; can issue a helpful warning, since this may
lead to surprising behavior.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-how-does-straightel-know-when-to-rebuild-packages" class="anchor" aria-hidden="true" href="#how-does-straightel-know-when-to-rebuild-packages"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;How does &lt;code&gt;straight.el&lt;/code&gt; know when to rebuild packages?&lt;/h3&gt;
&lt;p&gt;When you request for &lt;code&gt;straight.el&lt;/code&gt; to load a package (using
&lt;code&gt;straight-use-package&lt;/code&gt;), it first checks if the package needs to be
rebuilt. This means that some of the files in its local repository
have been modified since the last time the package was built.
&lt;code&gt;straight.el&lt;/code&gt; uses an optimized &lt;code&gt;find(1)&lt;/code&gt; command to check for package
modifications, and it uses some caching mechanisms to perform bulk
&lt;code&gt;find(1)&lt;/code&gt; operations on multiple packages, to speed up these checks
(although it never performs optimizations that may result in erroneous
behavior).&lt;/p&gt;
&lt;p&gt;This check occurs during Emacs init, when your init-file makes calls
to &lt;code&gt;straight-use-package&lt;/code&gt;. You may notice a significant delay on the
first &lt;code&gt;straight-use-package&lt;/code&gt; call, because this is when &lt;code&gt;straight.el&lt;/code&gt;
performs a bulk &lt;code&gt;find(1)&lt;/code&gt; call and caches the results for later usage
(this speeds up init considerably). The total delay is likely to be on
the order of 100ms for a double-digit number of packages.&lt;/p&gt;
&lt;p&gt;The rebuild detection system is what allows for you to make changes to
packages whenever you would like, without performing any additional
operations.&lt;/p&gt;
&lt;p&gt;(Packages are also rebuilt when their recipes change, of course.)&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-how-does-straightel-know-what-packages-are-installed" class="anchor" aria-hidden="true" href="#how-does-straightel-know-what-packages-are-installed"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;How does &lt;code&gt;straight.el&lt;/code&gt; know what packages are installed?&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;straight.el&lt;/code&gt; does not require you to declare a central list of
packages anywhere, like Cask does. Instead, it determines what
packages are to be loaded implicitly, by your invocations of
&lt;code&gt;straight-use-package&lt;/code&gt; during Emacs initialization. Furthermore,
&lt;code&gt;straight.el&lt;/code&gt; allows you to install packages after initialization
using &lt;code&gt;M-x straight-install-package&lt;/code&gt; (or even by evaluating
&lt;code&gt;straight-use-package&lt;/code&gt; forms). However, &lt;code&gt;straight.el&lt;/code&gt; still provides
advanced features such as bulk package management and version locking.
This creates some interesting challenges which other package managers
do not have to deal with.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;straight.el&lt;/code&gt; solves these problems using a concept called
&lt;em&gt;transactions&lt;/em&gt;. The operation of the transaction system is mostly
transparent to the user, at least in recent versions of &lt;code&gt;straight.el&lt;/code&gt;.
Basically, it provides a way for &lt;code&gt;straight.el&lt;/code&gt; to keep track of what
happens within a single user operation (e.g. evaluate a buffer of
&lt;code&gt;straight-use-package&lt;/code&gt; calls, or load the init-file).&lt;/p&gt;
&lt;p&gt;&lt;code&gt;straight.el&lt;/code&gt; uses the transaction system to keep track of what
packages you request in your init-file. If you invoke
&lt;code&gt;straight-use-package&lt;/code&gt; interactively, then this invalidates that
information, since you have now requested a package that is not in
your init-file. For this reason, if you have invoked
&lt;code&gt;straight-use-package&lt;/code&gt; interactively, running &lt;code&gt;M-x straight-freeze-versions&lt;/code&gt; will prompt you to first reload your
init-file.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-comparison-to-other-package-managers" class="anchor" aria-hidden="true" href="#comparison-to-other-package-managers"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Comparison to other package managers&lt;/h2&gt;
&lt;p&gt;(Disclaimer: while I try to be as objective and comprehensive as
possible here, I'm obviously biased. Please submit corrections if I
have unfairly disparaged your favorite package manager!)&lt;/p&gt;
&lt;p&gt;There are many package managers for Emacs, ranging from simple scripts
to download files from EmacsWiki to full-featured package management
solutions like &lt;code&gt;straight.el&lt;/code&gt;. Here are the most feature-rich
alternatives to &lt;code&gt;straight.el&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Packages.html" rel="nofollow"&gt;&lt;code&gt;package.el&lt;/code&gt;&lt;/a&gt;: de facto standard, bundled with Emacs.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/quelpa/quelpa"&gt;Quelpa&lt;/a&gt;: allows you to use external sources like GitHub with
&lt;code&gt;package.el&lt;/code&gt;. Essentially a local &lt;a href="http://melpa.org/#/" rel="nofollow"&gt;MELPA&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/cask/cask"&gt;Cask&lt;/a&gt;: another &lt;code&gt;package.el&lt;/code&gt; wrapper. Specify your dependencies in a
&lt;code&gt;Cask&lt;/code&gt; file; can be used for project management or an Emacs
configuration.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dimitri/el-get"&gt;el-get&lt;/a&gt;: ridiculously OP in terms of how many different sources you
can pull packages from (&lt;code&gt;package.el&lt;/code&gt;, every known VCS, distro
package managers, &lt;code&gt;go get&lt;/code&gt;(!!)).&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/emacscollective/borg"&gt;Borg&lt;/a&gt;: assimilates packages as Git submodules into &lt;code&gt;.emacs.d&lt;/code&gt;,
relying on &lt;a href="https://emacsmirror.net/" rel="nofollow"&gt;Emacsmirror&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;"Screw package managers! I'll just handle it all myself!"&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-tldr-1" class="anchor" aria-hidden="true" href="#tldr-1"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TL;DR&lt;/h3&gt;
&lt;p&gt;Here is a summary of the main differences in philosophy between the
package managers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;package.el&lt;/code&gt; if you want package management to be as easy as
possible, and do not much care for installing packages from specific
sources, keeping track of their versions, or doing local development
on them.&lt;/li&gt;
&lt;li&gt;Use Quelpa if you like &lt;code&gt;package.el&lt;/code&gt; but really wish you could
specify the sources of your packages.&lt;/li&gt;
&lt;li&gt;Use Cask if you like &lt;code&gt;package.el&lt;/code&gt; but wish it came with some project
management tools, as well.&lt;/li&gt;
&lt;li&gt;Use el-get if you want to easily install packages from as many
different sources as possible.&lt;/li&gt;
&lt;li&gt;Use Borg if you like a more lightweight approach to package
management that leverages existing solutions, if contributing
changes to packages upstream is important to you, and if using Git
submodules isn't a deal-breaker.&lt;/li&gt;
&lt;li&gt;Use the manual approach if you need to contribute changes to a
package that is versioned in something other than Git.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;straight.el&lt;/code&gt; if you like reproducibility in your Emacs
configuration, you regularly contribute changes to packages
upstream, you think deferred installation is a really great idea, or
you are writing an Emacs configuration to be used by others.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And here is a brief list of the main reasons you might not want to use
&lt;code&gt;straight.el&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; is largely unusable if you do not have Git installed,
although it is still possible to use the package-building features
if you manage your repositories manually (you also cannot use the
magic bootstrap snippet, in that case). If you don't want to install
Git, you'll have to use &lt;code&gt;package.el&lt;/code&gt; or take the manual approach.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; is not built in to Emacs. If you want something that
will work right out of the box, you're stuck with &lt;code&gt;package.el&lt;/code&gt; or
the manual approach.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; takes a minute or two to update all your packages,
since it does not rely on a centralized server. If you want quick
update checking, you'll have to use &lt;code&gt;package.el&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; does not provide any user interface for package
management. For that, you'll have to use &lt;code&gt;package.el&lt;/code&gt;, el-get, Cask,
or Borg (which expects you to use &lt;a href="https://github.com/emacscollective/epkg"&gt;&lt;code&gt;epkg&lt;/code&gt;&lt;/a&gt; for browsing
packages).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; does not currently support using only stable versions
of packages (i.e. tagged revisions), although this is a &lt;a href="https://github.com/raxod502/straight.el/issues/31"&gt;planned
feature&lt;/a&gt;. If this is important to you, you probably want to go
with &lt;code&gt;package.el&lt;/code&gt; (with GNU ELPA and MELPA Stable), Cask, or Quelpa.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; does not currently support arbitrary build commands
like &lt;code&gt;make&lt;/code&gt;, although this is a &lt;a href="https://github.com/raxod502/straight.el/issues/72"&gt;planned feature&lt;/a&gt;. This feature
is supported by el-get and Borg.&lt;/li&gt;
&lt;li&gt;If you don't like having to modify your init-file to do package
management, then &lt;code&gt;straight.el&lt;/code&gt; is absolutely not for you. You want
&lt;code&gt;package.el&lt;/code&gt;, Quelpa, el-get, or Borg.&lt;/li&gt;
&lt;li&gt;If you really want to contribute changes to packages that are not
versioned in Git, then &lt;code&gt;straight.el&lt;/code&gt; will not help you. You'll have
to manage the package's repository manually. Unfortunately, there is
no existing package manager that supports both non-Git
version-control systems and contributing changes upstream. You'll
have to go with the manual approach.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; does not provide project management tools. It is a
package manager. If you want project management tools, check out
Cask.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; is quite new and moving fast. Things might break. The
other package managers can generally be ranked as follows, from most
active to least active: el-get, Quelpa, Borg, Cask, &lt;code&gt;package.el&lt;/code&gt;
(glacial).&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-comparison-to-packageel" class="anchor" aria-hidden="true" href="#comparison-to-packageel"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Comparison to &lt;code&gt;package.el&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;package.el&lt;/code&gt; downloads pre-built packages from central servers using
a special (undocumented?) HTTP protocol, while &lt;code&gt;straight.el&lt;/code&gt; clones
Git (or other) repositories and builds packages locally.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a id="user-content-advantages-of-straightel" class="anchor" aria-hidden="true" href="#advantages-of-straightel"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Advantages of &lt;code&gt;straight.el&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; allows you to install a package from any branch of any
Git repository. &lt;code&gt;package.el&lt;/code&gt; only allows you to install a package
from a &lt;code&gt;package.el&lt;/code&gt;-compliant central server.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; allows you to check out any Git revision of any
package. &lt;code&gt;package.el&lt;/code&gt; only allows you to install the latest version,
and there is no way to downgrade.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; supports Emacsmirror, while &lt;code&gt;package.el&lt;/code&gt; does not.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; uses your init-file as the sole source of truth for
package operations. &lt;code&gt;package.el&lt;/code&gt; loads every package you ever
installed at startup, even if some of those packages are no longer
referenced by your init-file.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; supports 100% reproducibility for your Emacs packages
with version lockfiles. &lt;code&gt;package.el&lt;/code&gt; cannot provide reproducibility
for the set of packages installed, the central servers they were
installed from, or the versions in use.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; allows you to make arbitrary changes to your packages
locally. While it is possible to make local changes to &lt;code&gt;package.el&lt;/code&gt;
packages, these changes cannot be version-controlled and they will
be silently overwritten whenever &lt;code&gt;package.el&lt;/code&gt; performs an update.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; allows you to perform arbitrary version-control
operations on your package's Git repositories, including
contributing changes upstream. &lt;code&gt;straight.el&lt;/code&gt; has explicit support
for specifying both an upstream and a fork for a package.
Contributing changes upstream with &lt;code&gt;package.el&lt;/code&gt; is impossible.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; is designed with &lt;code&gt;emacs -Q&lt;/code&gt; bug reports in mind.
&lt;code&gt;package.el&lt;/code&gt; is unsuitable for minimal bug reproductions, since it
automatically loads all of your packages on any package operation,
even in &lt;code&gt;emacs -Q&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; operates quietly when all is going well. &lt;code&gt;package.el&lt;/code&gt;
displays all messages, errors, and warnings that come from
byte-compilation and autoload generation.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; considers modifying the user's init-file extremely
uncouth. &lt;code&gt;package.el&lt;/code&gt; aggressively inserts a call to
&lt;code&gt;package-initialize&lt;/code&gt; into the init-file if it is not already
present, whenever any package management operation is performed.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; has a profile system that allows users of someone
else's Emacs configuration to manage an additional subset of
packages, or to override upstream package configuration, without
forking the upstream. &lt;code&gt;package.el&lt;/code&gt; has no such concept.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; is developed openly on GitHub, using a modern &lt;a href="https://github.com/raxod502/straight.el/issues"&gt;issue
tracker&lt;/a&gt; and continuous integration from &lt;a href="https://travis-ci.org/raxod502/straight.el" rel="nofollow"&gt;Travis
CI&lt;/a&gt;. It welcomes contributions of any type.
&lt;code&gt;straight.el&lt;/code&gt; is licensed under the permissive MIT license and does
not require a copyright assignment. &lt;code&gt;straight.el&lt;/code&gt; is developed
actively and has explicit support for installing development
versions of itself, as well as for contributing upstream changes.
&lt;code&gt;package.el&lt;/code&gt; is maintained as a part of Emacs core, meaning that the
contribution process is poorly documented and discouraging. Releases
of &lt;code&gt;package.el&lt;/code&gt; coincide with releases of Emacs, which are
infrequent and inflexible. There is no issue tracker specifically
for &lt;code&gt;package.el&lt;/code&gt;, only the Emacs bug tracker and the emacs-devel
mailing list. Contributing to &lt;code&gt;package.el&lt;/code&gt; requires a
poorly-documented, cumbersome copyright assignment process and is
done by submitting patches to an antiquated mailing list,
unsupported by modern code review tooling or continuous integration.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a id="user-content-advantages-of-packageel" class="anchor" aria-hidden="true" href="#advantages-of-packageel"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Advantages of &lt;code&gt;package.el&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;package.el&lt;/code&gt; does not require that you have Git installed, since the
central server deals with where the packages originally came from.
&lt;code&gt;straight.el&lt;/code&gt; cannot be used at all without Git.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;package.el&lt;/code&gt; is built in to Emacs and does not require additional
configuration to get started with. &lt;code&gt;straight.el&lt;/code&gt; requires the use of
a 10-line bootstrap snippet in your init-file.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;package.el&lt;/code&gt; can perform bulk package updates more quickly since it
relies on central servers.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;package.el&lt;/code&gt; has a user interface for package management that also
displays package metadata. &lt;code&gt;straight.el&lt;/code&gt; has no user interface for
package management; any UI is provided by the user's
&lt;code&gt;completing-read&lt;/code&gt; framework.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;package.el&lt;/code&gt; does not require you to touch your init-file to install
packages, while &lt;code&gt;straight.el&lt;/code&gt; absolutely refuses to permanently
install a package without an explicit reference to it in your
init-file (although this may be considered an advantage, depending
on your perspective).&lt;/li&gt;
&lt;li&gt;Using MELPA Stable, &lt;code&gt;package.el&lt;/code&gt; can install only stable versions of
packages. By default, &lt;code&gt;package.el&lt;/code&gt; also installs only stable
versions of packages from GNU ELPA. These modes of operation are
unsupported by &lt;code&gt;straight.el&lt;/code&gt; at this time, although this is a
&lt;a href="https://github.com/raxod502/straight.el/issues/31"&gt;planned feature&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a id="user-content-additional-notes" class="anchor" aria-hidden="true" href="#additional-notes"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Additional notes&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;package.el&lt;/code&gt; and &lt;code&gt;straight.el&lt;/code&gt; usually take approximately the same
time to install packages, despite the fact that &lt;code&gt;straight.el&lt;/code&gt; is
cloning entire Git repositories. This is because network latency and
byte-compilation are the dominant factors.&lt;/li&gt;
&lt;li&gt;Some &lt;code&gt;package.el&lt;/code&gt; servers build packages from non-Git upstreams.
&lt;code&gt;package.el&lt;/code&gt; can install these packages, while &lt;code&gt;straight.el&lt;/code&gt; cannot.
However, since &lt;code&gt;package.el&lt;/code&gt; has no version-control support, this is
more or less equivalent to installing those packages from the
&lt;a href="https://emacsmirror.net/" rel="nofollow"&gt;Emacsmirror&lt;/a&gt;, which &lt;code&gt;straight.el&lt;/code&gt; can do by default.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-comparison-to-quelpa" class="anchor" aria-hidden="true" href="#comparison-to-quelpa"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Comparison to Quelpa&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Quelpa allows for fetching packages from arbitrary sources and
building them into a format that can be installed by &lt;code&gt;package.el&lt;/code&gt;.
&lt;code&gt;straight.el&lt;/code&gt; has a philosophy which is fundamentally incompatible
with &lt;code&gt;package.el&lt;/code&gt;, and non-compatibility with &lt;code&gt;package.el&lt;/code&gt; is one of
its design goals.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a id="user-content-advantages-of-straightel-1" class="anchor" aria-hidden="true" href="#advantages-of-straightel-1"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Advantages of &lt;code&gt;straight.el&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; has out-of-the-box compatibility with MELPA, GNU ELPA,
and Emacsmirror, while Quelpa only has support for MELPA. To use GNU
ELPA, you must drop down to &lt;code&gt;package.el&lt;/code&gt;. &lt;a href="https://emacsmirror.net/" rel="nofollow"&gt;Emacsmirror&lt;/a&gt; is not
supported by default, although it is easy to specify an Emacsmirror
repository in a recipe. While Quelpa allows you to specify custom
recipe folders, it does not have support for cloning these folders
automatically from version control, nor for generating the recipes
in any way other than copying them literally from files.
&lt;code&gt;straight.el&lt;/code&gt; allows you full flexibility in this regard.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; has integrated support for selecting particular Git
revisions of packages. This process is more manual in Quelpa, as it
requires placing the commit hash into the recipe, which disables
updates.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; uses your init-file as the sole source of truth for
package operations. Since Quelpa is based on &lt;code&gt;package.el&lt;/code&gt;, it also
loads every package you ever installed at startup, even if those
packages are no longer referenced by your init-file. Furthermore,
there is an additional caching layer, so that deleting a package
from the &lt;code&gt;package.el&lt;/code&gt; interface and removing it from your init-file
still does not actually delete it.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; supports 100% reproducibility for your Emacs packages
with version lockfiles. Quelpa can theoretically provide some
measure of reproducibility, but this requires significant manual
effort since all packages are not associated with specific revisions
by default, nor is the revision of MELPA saved anywhere.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; allows you to make arbitrary changes to your packages
locally. While it is possible to make local changes to Quelpa
packages, there are two places to do so: the built package, which is
the default destination of &lt;code&gt;find-function&lt;/code&gt;, and the original
repository. Changes to the former are not version-controlled and
will be silently overwritten by &lt;code&gt;package.el&lt;/code&gt; operations, while
changes to the latter will be silently overwritten by Quelpa
operations.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; has explicit support for configuring both an upstream
repository and a fork for the same package. Quelpa does not have
such a concept.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; allows you complete control over how your repositories
are managed, and the default behavior is to draw all packages
versioned in a single repository from a single copy of that
repository. Quelpa is hardcoded to require a separate repository for
each package, so that installing Magit requires three copies of the
Magit repository.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; builds packages using symlinks, meaning that
&lt;code&gt;find-function&lt;/code&gt; works as expected. Quelpa builds packages by
copying, a feature inherited from MELPA. This means that
&lt;code&gt;find-function&lt;/code&gt; brings you to the built package, instead of the
actual repository, which is not version-controlled and will be
overwritten whenever &lt;code&gt;package.el&lt;/code&gt; performs an update.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; allows you to perform arbitrary version-control
operations on your package's Git repositories. Quelpa allows this,
but all local changes will be silently overridden whenever Quelpa
performs an update.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; is designed with &lt;code&gt;emacs -Q&lt;/code&gt; bug reports in mind. Since
Quelpa is based on &lt;code&gt;package.el&lt;/code&gt;, it is also unsuitable for minimal
bug reproductions, since it automatically loads all of your packages
on any package operation, even in &lt;code&gt;emacs -Q&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; operates quietly when all is going well. Since Quelpa
is based on &lt;code&gt;package.el&lt;/code&gt;, it displays all messages, errors, and
warnings that come from byte-compilation and autoload generation. It
also displays additional messages while cloning Git repositories,
downloading files, and building packages from their repositories
into &lt;code&gt;package.el&lt;/code&gt; format.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; does not modify your init-file. Since Quelpa is based
on &lt;code&gt;package.el&lt;/code&gt;, it inherits the behavior of aggressively inserting
a call to &lt;code&gt;package-initialize&lt;/code&gt; into your init-file on any package
management operation.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; has a profile system that allows users of someone
else's Emacs configuration to manage an additional subset of
packages, or to override upstream package configuration, without
forking the upstream. Quelpa has no such concept.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a id="user-content-advantages-of-quelpa" class="anchor" aria-hidden="true" href="#advantages-of-quelpa"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Advantages of Quelpa&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Quelpa supports all the version-control systems supported by MELPA,
which is to say almost every commonly and uncommonly used VCS.
&lt;code&gt;straight.el&lt;/code&gt; only supports Git, although it is designed to support
other version-control backends.&lt;/li&gt;
&lt;li&gt;Quelpa allows for installing only stable versions of packages, from
any source. This mode of operation is unsupported by &lt;code&gt;straight.el&lt;/code&gt;,
although it is a &lt;a href="https://github.com/raxod502/straight.el/issues/31"&gt;planned feature&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Since Quelpa is based on &lt;code&gt;package.el&lt;/code&gt;, it inherits a user interface
for package management that also displays package metadata.
&lt;code&gt;straight.el&lt;/code&gt; has no such interface.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a id="user-content-additional-notes-1" class="anchor" aria-hidden="true" href="#additional-notes-1"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Additional notes&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; and Quelpa both allow you to manage your package's
local repositories manually, if you wish.&lt;/li&gt;
&lt;li&gt;In principle, &lt;code&gt;straight.el&lt;/code&gt; and Quelpa have identical package
installation times, since they are performing the same operations.
In practice, Quelpa is slightly slower since it builds packages by
copying rather than symlinking, and it clones multiple copies of the
same Git repository when multiple packages are built from it.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; encourages you to keep a tight handle on your package
versions by default. Quelpa encourages you to stick to the latest
versions of your packages, and to upgrade them automatically.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-comparison-to-cask" class="anchor" aria-hidden="true" href="#comparison-to-cask"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Comparison to Cask&lt;/h3&gt;
&lt;p&gt;I have not used Cask extensively, so please feel especially free to
offer corrections for this section.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cask installs packages using the &lt;code&gt;package.el&lt;/code&gt; protocol, based on a
&lt;code&gt;Cask&lt;/code&gt; file written in the Cask DSL. &lt;code&gt;straight.el&lt;/code&gt; eschews
&lt;code&gt;package.el&lt;/code&gt; entirely, and clones packages from source based on how
you invoke &lt;code&gt;straight-use-package&lt;/code&gt; in your init-file.&lt;/li&gt;
&lt;li&gt;Cask focuses more on being a build manager, like Maven or Leiningen,
while &lt;code&gt;straight.el&lt;/code&gt; focuses &lt;em&gt;exclusively&lt;/em&gt; on being a package
manager.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a id="user-content-advantages-of-straightel-2" class="anchor" aria-hidden="true" href="#advantages-of-straightel-2"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Advantages of &lt;code&gt;straight.el&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; has out-of-the-box compatibility with Emacsmirror,
while Cask only supports &lt;code&gt;package.el&lt;/code&gt;-compliant repositories.
However, it is easy to specify an Emacsmirror repository in a
recipe. Cask does not support custom package sources. &lt;code&gt;straight.el&lt;/code&gt;
supports MELPA, GNU ELPA, and Emacsmirror, and allows you to add any
other sources you would like.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; has integrated support for selecting particular Git
revisions of packages. This process is more manual in Cask, as it
requires placing the commit hash into the recipe, which disables
updates.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; uses your init-file as the sole source of truth for
package operations. Since Cask is based on &lt;code&gt;package.el&lt;/code&gt;, it loads
every package you ever installed at startup, even if some of those
packages are no longer referenced by your &lt;code&gt;Cask&lt;/code&gt; file.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; determines your package management configuration
implicitly by detecting how you call &lt;code&gt;straight-use-package&lt;/code&gt; in your
init-file and making the appropriate changes immediately. Cask
requires manual intervention (for example, issuing a &lt;code&gt;cask install&lt;/code&gt;
command when you have updated your &lt;code&gt;Cask&lt;/code&gt; file). However, both
&lt;code&gt;straight.el&lt;/code&gt; and Cask can be considered declarative package
managers.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; supports 100% reproducibility for your Emacs packages
with version lockfiles. Cask can theoretically provide some measure
of reproducibility, but this requires significant manual effort
since all packages are not associated with specific revisions by
default, nor is the revision of Cask saved anywhere.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; allows you to make arbitrary changes to your packages
locally. While it is possible to make local changes to Cask
packages, these will not be version-controlled and they will be
silently overwritten or shadowed when Cask performs an update.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; allows you to perform arbitrary version-control
operations on your package's Git repositories, including
contributing changes upstream. &lt;code&gt;straight.el&lt;/code&gt; has explicit support
for specifying both an upstream and a fork for a package.
Contributing changes upstream with Cask is impossible.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; is designed with &lt;code&gt;emacs -Q&lt;/code&gt; bug reports in mind. Cask
appears to be unsuitable for minimal bug reproductions, since there
does not appear to be a straightforward way to load a single
package, without loading all other packages configured in your
&lt;code&gt;Cask&lt;/code&gt; file.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; operates quietly when all is going well. Since Cask is
based on &lt;code&gt;package.el&lt;/code&gt;, it displays all messages, errors, and
warnings that come from byte-compilation and autoload generation.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; has a profile system that allows users of someone
else's Emacs configuration to manage an additional subset of
packages, or to override upstream package configuration, without
forking the upstream. Cask has no such concept.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a id="user-content-advantages-of-cask" class="anchor" aria-hidden="true" href="#advantages-of-cask"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Advantages of Cask&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Cask provides a useful toolbox of operations for project management,
which are completely absent from &lt;code&gt;straight.el&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Since Cask is based on &lt;code&gt;package.el&lt;/code&gt;, it does not require that you
have Git installed. (It does require Python, however.) &lt;code&gt;straight.el&lt;/code&gt;
is mostly unusable without Git.&lt;/li&gt;
&lt;li&gt;Since Cask is based on &lt;code&gt;package.el&lt;/code&gt;, it can perform bulk package
updates more quickly than &lt;code&gt;straight.el&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Since Cask is based on &lt;code&gt;package.el&lt;/code&gt;, it inherits a user interface
for package management that also displays package metadata.&lt;/li&gt;
&lt;li&gt;Since Cask is based on &lt;code&gt;package.el&lt;/code&gt;, you can install packages
without editing a file manually, although this rather defeats the
entire purpose of using Cask instead of &lt;code&gt;package.el&lt;/code&gt;. &lt;code&gt;straight.el&lt;/code&gt;
absolutely refuses to permanently install a package without an
explicit reference to it in your init-file (although this may be
considered an advantage, depending on your perspective).&lt;/li&gt;
&lt;li&gt;Using MELPA Stable, Cask can install only stable versions of
packages. By default, Cask also installs only stable versions of
packages from GNU ELPA. These modes of operation are unsupported by
&lt;code&gt;straight.el&lt;/code&gt; at this time, although this is a &lt;a href="https://github.com/raxod502/straight.el/issues/31"&gt;planned
feature&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Cask supports more version-control systems than &lt;code&gt;straight.el&lt;/code&gt; (which
only supports Git).&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-comparison-to-el-get" class="anchor" aria-hidden="true" href="#comparison-to-el-get"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Comparison to el-get&lt;/h3&gt;
&lt;p&gt;I have not used el-get extensively, so please feel especially free to
offer corrections for this section.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Both el-get and &lt;code&gt;straight.el&lt;/code&gt; implement their own package management
abstractions instead of delegating to &lt;code&gt;package.el&lt;/code&gt;. However:
&lt;ul&gt;
&lt;li&gt;el-get goes the route of adding as many package sources as
possible (e.g. &lt;code&gt;package.el&lt;/code&gt;, many different version-control
systems, various specific websites, and even system package
managers) so that packages can be used very easily.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; only supports Git and in doing so is able to
provide more advanced package management features.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a id="user-content-advantages-of-straightel-3" class="anchor" aria-hidden="true" href="#advantages-of-straightel-3"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Advantages of &lt;code&gt;straight.el&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; uses your init-file as the sole source of truth for
package operations. el-get has additional metadata stored outside
the init-file, although specifying all packages in your init-file is
a supported mode of operation.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; supports 100% reproducibility for your Emacs packages
with version lockfiles. el-get can theoretically provide some
measure of reproducibility, but this requires significant manual
effort since all packages are not associated with specific revisions
by default, nor is the revision of el-get saved anywhere.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; allows you to make arbitrary changes to your packages
locally, and conflicts during updates are presented to the user and
resolved interactively. While it is possible to make local changes
to el-get packages, the el-get manual warns that such changes may
break the update mechanism.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; has explicit support for configuring both an upstream
repository and a fork for the same package. el-get does not have
such a concept.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; allows you to perform arbitrary version-control
operartions on your package's Git repositories. el-get allows this,
but local changes will be overwritten when el-get performs an
update.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; provides a suite of powerful interactive workflows for
performing bulk operations on your package's Git repositories.
el-get only allows you to install, uninstall, and update packages.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; operates quietly when all is going well. el-get
reports its progress verbosely.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; has a profile system that allows users of someone
else's Emacs configuration to manage an additional subset of
packages, or to override upstream package configuration, without
forking the upstream. el-get has no such concept.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a id="user-content-advantages-of-el-get" class="anchor" aria-hidden="true" href="#advantages-of-el-get"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Advantages of el-get&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;el-get supports virtually all known version-control systems, as well
as system package managers, EmacsWiki, arbitrary HTTP, and even &lt;code&gt;go get&lt;/code&gt;. &lt;code&gt;straight.el&lt;/code&gt; supports only Git, although it does allow you to
manage your local repositories manually if you would like.&lt;/li&gt;
&lt;li&gt;el-get has been around since 2010 and is on its fifth major version,
whereas &lt;code&gt;straight.el&lt;/code&gt; was created in January 2017 and is only now
approaching a 1.0 release. Clearly, el-get is more stable, although
despite its recency &lt;code&gt;straight.el&lt;/code&gt; is already almost 50% of the size
of el-get, by the line count. Both package managers are actively
maintained.&lt;/li&gt;
&lt;li&gt;el-get has a recipe format which is several orders of magnitude more
powerful than that of &lt;code&gt;straight.el&lt;/code&gt;, since it supports many more
package sources that can be configured and since it allows for a
more complex build process.&lt;/li&gt;
&lt;li&gt;el-get provides a number of features for running per-package
initialization and setup code, including pulling that code from
arbitrary sources. &lt;code&gt;straight.el&lt;/code&gt; does not support this and expects
you to use a dedicated tool like &lt;a href="https://github.com/jwiegley/use-package"&gt;&lt;code&gt;use-package&lt;/code&gt;&lt;/a&gt; (with
which integration is built in) for that purpose.&lt;/li&gt;
&lt;li&gt;el-get has a user interface for package management that also
displays package metadata, similarly to &lt;code&gt;package.el&lt;/code&gt;. &lt;code&gt;straight.el&lt;/code&gt;
has no user interface for package management; any UI is provided by
the user's &lt;code&gt;completing-read&lt;/code&gt; framework.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-comparison-to-borg" class="anchor" aria-hidden="true" href="#comparison-to-borg"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Comparison to Borg&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Borg and &lt;code&gt;straight.el&lt;/code&gt; are perhaps the two most similar package
managers on this list. The difference is that Borg is very minimal
and expects you to complement it with other tools such as &lt;a href="https://magit.vc/" rel="nofollow"&gt;Magit&lt;/a&gt;,
&lt;a href="https://github.com/emacscollective/epkg"&gt;epkg&lt;/a&gt;, &lt;a href="https://github.com/jwiegley/use-package"&gt;&lt;code&gt;use-package&lt;/code&gt;&lt;/a&gt;, and &lt;a href="https://github.com/tarsius/auto-compile"&gt;auto-compile&lt;/a&gt;. On the
other hand, &lt;code&gt;straight.el&lt;/code&gt; aspires to be a one-stop package
management solution, although it does not try to replace dedicated
version-control packages (Magit) or dedicated package
&lt;em&gt;configuration&lt;/em&gt; packages (&lt;code&gt;use-package&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Borg uses Git submodules, while &lt;code&gt;straight.el&lt;/code&gt; uses independently
managed Git repositories.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a id="user-content-advantages-of-straightel-4" class="anchor" aria-hidden="true" href="#advantages-of-straightel-4"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Advantages of &lt;code&gt;straight.el&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; supports MELPA, GNU ELPA, Emacsmirror, and custom
recipe sources. Borg only supports Emacsmirror and custom recipe
sources. However, as the Emacsmirror is a near-complete superset of
both GNU ELPA and MELPA, this does not necessarily mean you have
access to more packages: it just means you benefit from the recipe
maintenance efforts of the MELPA team and the Emacsmirror team,
rather than only the latter.&lt;/li&gt;
&lt;li&gt;Borg, even when combined with related tools, do not allow for the
kind of massive interactive repository management provided by
&lt;code&gt;straight.el&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; supports deferred and conditional installation. This
is not supported by Borg, although it could in principle be
implemented via lazy cloning of submodules.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; provides an API designed for other version-control
backends to be added in future. Borg is inextricably tied to Git.&lt;/li&gt;
&lt;li&gt;The interface for Git submodules has a number of sharp edges.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; provides dependency management. This is a manual
process in Borg.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; provides mechanisms for updating your packages. This
is a manual process in Borg.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; is configured solely by how you use in your init-file.
Configuring Borg requires customizing &lt;code&gt;~/.emacs.d/.gitmodules&lt;/code&gt;,
which means (for example) that you cannot generate recipes
dynamically. (However, the handling of configuration is
&lt;a href="https://github.com/raxod502/straight.el/issues/95#issuecomment-316379495"&gt;planned&lt;/a&gt; to be improved in a future release.)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; has a profile system that allows users of someone
else's Emacs configuration to manage an additional subset of
packages, or to override upstream package configuration, without
forking the upstream. Borg has no such concept.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a id="user-content-advantages-of-borg" class="anchor" aria-hidden="true" href="#advantages-of-borg"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Advantages of Borg&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Borg does a heck of a lot less magic, so if you want a solution with
simple implementation details, &lt;code&gt;straight.el&lt;/code&gt; may not be for you.
(But see the developer manual and docstrings, first.)&lt;/li&gt;
&lt;li&gt;Borg supports arbitrary build commands; &lt;code&gt;straight.el&lt;/code&gt; does not
(although this is a &lt;a href="https://github.com/raxod502/straight.el/issues/72"&gt;planned feature&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-comparison-to-the-manual-approach" class="anchor" aria-hidden="true" href="#comparison-to-the-manual-approach"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Comparison to the manual approach&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The manual approach is to download packages yourself and put them on
your &lt;code&gt;load-path&lt;/code&gt;. &lt;code&gt;straight.el&lt;/code&gt; is more or less what you get when
you take the manual approach, think very hard about the best way to
do everything, and then automate all of it.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a id="user-content-advantages-of-straightel-5" class="anchor" aria-hidden="true" href="#advantages-of-straightel-5"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Advantages of &lt;code&gt;straight.el&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; figures out where to clone your packages from for you.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; byte-compiles your packages for you and generates
their autoloads automatically.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; frees you from needing to manually recompile and
regenerate autoloads.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; keeps track of dependencies for you.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; provides tools to manage all your packages in bulk,
which would otherwise be a long, tedious process.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; allows you to get reproducibility for your
configuration without needing to keep all of your packages under
version control.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; (when used with &lt;a href="https://github.com/jwiegley/use-package"&gt;&lt;code&gt;use-package&lt;/code&gt;&lt;/a&gt;)
automates the complex process of deferred installation.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; links packages into a separate build directories.
Running packages directly from their repositories has a number of
problems, including:
&lt;ul&gt;
&lt;li&gt;making it impossible to run only one package, if others are
provided in the same repository.&lt;/li&gt;
&lt;li&gt;making your working directory dirty when the package author
forgot to add their build artifacts like &lt;code&gt;*.elc&lt;/code&gt; and autoload
files to the &lt;code&gt;.gitignore&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;instantly losing compatibility with MELPA recipes.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; offers you a single entry point to install only a
single package in isolation, for a minimal bug reproduction. With
the manual approach this would be more complicated, especially if
the package has dependencies.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; frees you from needing to think about package
management, since I already did all the thinking to figure how best
to design everything.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a id="user-content-advantages-of-the-manual-approach" class="anchor" aria-hidden="true" href="#advantages-of-the-manual-approach"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Advantages of the manual approach&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;No dependencies.&lt;/li&gt;
&lt;li&gt;You learn a lot, if you don't give up first.&lt;/li&gt;
&lt;li&gt;You might end up writing a package manager (case in point).&lt;/li&gt;
&lt;li&gt;This is the only way to deal with packages that have non-Git
upstreams which you need to contribute changes to. (However, you can
always use the manual approach for one package and &lt;code&gt;straight.el&lt;/code&gt; for
the rest. Or you can just eschew &lt;code&gt;straight.el&lt;/code&gt;'s version-control
support for that package, and use it only for building the package.)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-user-manual" class="anchor" aria-hidden="true" href="#user-manual"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;User manual&lt;/h2&gt;
&lt;p&gt;This section tells you everything you need to know about the
user-facing features of &lt;code&gt;straight.el&lt;/code&gt;. For implementation details, see
the &lt;a href="#developer-manual"&gt;developer manual&lt;/a&gt;. It may also be helpful to get some
perspective on the overarching concepts of &lt;code&gt;straight.el&lt;/code&gt; from the
&lt;a href="#conceptual-overview"&gt;conceptual overview&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-bootstrapping-straightel" class="anchor" aria-hidden="true" href="#bootstrapping-straightel"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Bootstrapping &lt;code&gt;straight.el&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;In order to use &lt;code&gt;straight.el&lt;/code&gt;, you will need to somehow get it loaded
into Emacs. (This is easy for &lt;code&gt;package.el&lt;/code&gt;, since &lt;code&gt;package.el&lt;/code&gt; is
built in to Emacs. &lt;code&gt;straight.el&lt;/code&gt; must work a little harder.)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;straight.el&lt;/code&gt; comes with a file to do just this, &lt;code&gt;bootstrap.el&lt;/code&gt;. All
you need to do is load that file. You can do this with &lt;code&gt;M-x load-file&lt;/code&gt;
or by a call to &lt;code&gt;load&lt;/code&gt; in your init-file. However, there is an obvious
shortcoming: &lt;code&gt;bootstrap.el&lt;/code&gt; will only be available once &lt;code&gt;straight.el&lt;/code&gt;
is already installed.&lt;/p&gt;
&lt;p&gt;You could just invoke &lt;code&gt;git clone&lt;/code&gt; from your init-file, if
&lt;code&gt;straight.el&lt;/code&gt; is not installed, but then you would have to manually
take care of selecting the correct branch, parsing your version
lockfile to check out the right revision, and so on. Instead, you can
just use this snippet, which uses a copious amount of magic to take
care of all these details for you:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Despite the reference to &lt;code&gt;develop&lt;/code&gt;, this snippet actually installs
from the &lt;code&gt;master&lt;/code&gt; branch by default, just like every other package.
Furthermore, the correct revision of &lt;code&gt;straight.el&lt;/code&gt; is checked out, if
you have one specified in your lockfile. Even better, you can
&lt;a href="#overriding-the-recipe-for-straightel"&gt;override the recipe for &lt;code&gt;straight.el&lt;/code&gt;&lt;/a&gt;,
just like for any other package.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-installing-packages-programmatically" class="anchor" aria-hidden="true" href="#installing-packages-programmatically"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installing packages programmatically&lt;/h3&gt;
&lt;p&gt;The primary entry point to &lt;code&gt;straight.el&lt;/code&gt; is the &lt;code&gt;straight-use-package&lt;/code&gt;
function. It can be invoked interactively (for installing a package
temporarily) or programmatically (for installing a package
permanently). This section covers the programmatic usage; see
&lt;a href="#interactive-usage"&gt;later&lt;/a&gt; for interactive usage.&lt;/p&gt;
&lt;p&gt;Here is the basic usage of &lt;code&gt;straight-use-package&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(straight-use-package 'el-patch)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will ensure that the package &lt;code&gt;el-patch&lt;/code&gt; is installed and loaded.
(Note that &lt;code&gt;straight-use-package&lt;/code&gt; takes a symbol, not a string, for
the name of the package.) Precisely, this is what happens:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If the local Git repository for &lt;code&gt;el-patch&lt;/code&gt; is not available, it is
cloned, and the appropriate revision is checked out (if one is
specified in your version lockfiles).&lt;/li&gt;
&lt;li&gt;If the local Git repository has been modified since the last time
the package was built, it is rebuilt. This means:
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;.el&lt;/code&gt; files are symlinked into a separate directory to
isolate them from other, irrelevant files.&lt;/li&gt;
&lt;li&gt;The main package file is checked for dependencies, which are
installed recursively if necessary using &lt;code&gt;straight-use-package&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;.el&lt;/code&gt; files are byte-compiled.&lt;/li&gt;
&lt;li&gt;Autoloads are extracted from the &lt;code&gt;.el&lt;/code&gt; files and saved into a
separate file.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The package's directory is added to Emacs' &lt;code&gt;load-path&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The package's autoloads are evaluated.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Package authors should note that &lt;code&gt;straight.el&lt;/code&gt; checks for dependencies
that are specified in the &lt;a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Packaging-Basics.html" rel="nofollow"&gt;&lt;code&gt;package.el&lt;/code&gt; format&lt;/a&gt;. To
spare you reading that documentation, this is either a
&lt;code&gt;Package-Requires&lt;/code&gt; header in &lt;code&gt;PACKAGENAME.el&lt;/code&gt;, or an argument to a
&lt;code&gt;define-package&lt;/code&gt; invocation in &lt;code&gt;PACKAGENAME-pkg.el&lt;/code&gt;. Despite the &lt;a href="#advantages-of-straightel"&gt;many
shortcomings&lt;/a&gt; of &lt;code&gt;package.el&lt;/code&gt;, it
has done a good job of creating a standardized format for dependency
declarations.&lt;/p&gt;
&lt;p&gt;There is one exception to the above statement: not all entries
specified in the &lt;code&gt;Package-Requires&lt;/code&gt; header necessarily correspond to
packages. For example, specifying a minimum Emacs version for a
package is done by depending on the &lt;code&gt;emacs&lt;/code&gt; pseudo-package. Such
packages are simply ignored by &lt;code&gt;straight.el&lt;/code&gt;, using the variable
&lt;code&gt;straight-built-in-pseudo-packages&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Note that loading a package does not entail invoking &lt;code&gt;require&lt;/code&gt; on any
of its features. If you wish to actually load the files of the
package, you need to do this separately. This is because most packages
do not need to be loaded immediately, and are better served by the
autoload system.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-installing-with-a-custom-recipe" class="anchor" aria-hidden="true" href="#installing-with-a-custom-recipe"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installing with a custom recipe&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;straight-use-package&lt;/code&gt; can also take a list instead of a symbol. In
that case, the first member of the list is a symbol giving the package
name, and the remainder of the list is a &lt;a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Property-Lists.html" rel="nofollow"&gt;property
list&lt;/a&gt; providing information about how to install and
build the package. Here is an example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(straight-use-package
 '(el-patch :type git :host github :repo "raxod502/el-patch"
            :fork (:host github
                   :repo "your-name/el-patch")))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you give &lt;code&gt;straight-use-package&lt;/code&gt; just a package name, then a recipe
will be looked up by default (see the section on &lt;a href="#recipe-lookup"&gt;recipe
lookup&lt;/a&gt;). You can see the default recipe for a package
by invoking &lt;a href="#interactive-usage"&gt;&lt;code&gt;M-x straight-get-recipe&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To learn more, see the section on &lt;a href="#the-recipe-format"&gt;the recipe format&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-additional-arguments-to-straight-use-package" class="anchor" aria-hidden="true" href="#additional-arguments-to-straight-use-package"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Additional arguments to &lt;code&gt;straight-use-package&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;The full user-facing signature of &lt;code&gt;straight-use-package&lt;/code&gt; is:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(straight-use-package PACKAGE-OR-RECIPE &amp;amp;optional NO-CLONE NO-BUILD)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As discussed &lt;a href="#installing-packages-programmatically"&gt;previously&lt;/a&gt;, by default
&lt;code&gt;straight-use-package&lt;/code&gt; will do three things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Register the recipe provided with &lt;code&gt;straight.el&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Clone the package's local repository, if it is absent.&lt;/li&gt;
&lt;li&gt;Rebuild the package if necessary, and load it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By providing the optional arguments, you may cause processing to halt
before all three of these tasks are completed. Specifically, providing
&lt;code&gt;NO-CLONE&lt;/code&gt; causes processing to halt after registration but before
cloning, and providing &lt;code&gt;NO-BUILD&lt;/code&gt; causes processing to halt after
cloning (if necessary) but before building and loading.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;straight.el&lt;/code&gt; supports lazy-loading by means of a special value for
&lt;code&gt;NO-CLONE&lt;/code&gt;, the symbol &lt;code&gt;lazy&lt;/code&gt;. If this symbol is passed, then
processing will halt at the clone step, unless the package is already
cloned. This means that the package is built and loaded if it is
already installed, but otherwise installation is deferred until later.
When you want to trigger the lazy installation, simply call
&lt;code&gt;straight-use-package&lt;/code&gt; again, but without &lt;code&gt;NO-CLONE&lt;/code&gt;. (There is no
need to pass the recipe again; see &lt;a href="#recipe-lookup"&gt;recipe lookup&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;You can also pass functions for &lt;code&gt;NO-CLONE&lt;/code&gt; or &lt;code&gt;NO-BUILD&lt;/code&gt;, which will
be called with the package name as a string; their return values will
then be used instead.&lt;/p&gt;
&lt;p&gt;Note that if it makes no sense to build a package, then you should put
&lt;code&gt;:no-build t&lt;/code&gt; in its &lt;a href="#the-recipe-format"&gt;recipe&lt;/a&gt;, rather than specifying
&lt;code&gt;NO-BUILD&lt;/code&gt; every time you register it with &lt;code&gt;straight.el&lt;/code&gt;. (This is
especially relevant when writing recipes for &lt;a href="#customizing-recipe-repositories"&gt;recipe
repositories&lt;/a&gt;.)&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-variants-of-straight-use-package" class="anchor" aria-hidden="true" href="#variants-of-straight-use-package"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Variants of &lt;code&gt;straight-use-package&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;For convenience, &lt;code&gt;straight.el&lt;/code&gt; provides some functions that wrap
&lt;code&gt;straight-use-package&lt;/code&gt; with particular arguments, to cover all of the
common cases. Each of these functions takes only a package name or
recipe, and no additional arguments.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;straight-register-package&lt;/code&gt;: always stop after the registration
step. This may be useful for specifying the recipe for an optional
dependency (see &lt;a href="#recipe-lookup"&gt;recipe lookup&lt;/a&gt;, but see also &lt;a href="#overriding-recipes"&gt;recipe
overrides&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight-use-package-no-build&lt;/code&gt;: always stop before the build step.
This is used by &lt;a href="#lockfile-management"&gt;&lt;code&gt;straight-freeze-versions&lt;/code&gt;&lt;/a&gt; to
make sure packages are cloned, since building them is unnecessary
for writing the lockfiles.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight-use-package-lazy&lt;/code&gt;: stop at the clone step if the package's
local repository is not already cloned. This is used for
lazy-loading.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a id="user-content-customizing-when-packages-are-built" class="anchor" aria-hidden="true" href="#customizing-when-packages-are-built"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Customizing when packages are built&lt;/h4&gt;
&lt;p&gt;By default, when &lt;code&gt;straight.el&lt;/code&gt; is bootstrapped during Emacs init, it
uses a bulk &lt;code&gt;find(1)&lt;/code&gt; command to identify files that were changed
since the last time a package depending on them was built. These
packages are then rebuilt when they are requested via
&lt;code&gt;straight-use-package&lt;/code&gt;. Normally, &lt;code&gt;straight.el&lt;/code&gt; will try to detect
what sort of &lt;code&gt;find(1)&lt;/code&gt; program is installed, and issue the appropriate
command. If it makes a mistake, then you can manually customize
&lt;code&gt;straight-find-flavor&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For about 100 packages on an SSD, calling &lt;code&gt;find(1)&lt;/code&gt; to detect
modifications takes about 500ms. You can save this time by customizing
&lt;code&gt;straight-check-for-modifications&lt;/code&gt;. This is a list of symbols which
determines how &lt;code&gt;straight.el&lt;/code&gt; detects package modifications. The
default value is &lt;code&gt;(find-at-startup find-when-checking)&lt;/code&gt;, which means
that &lt;code&gt;find(1)&lt;/code&gt; is used to detect modifications at startup, and also
when you invoke &lt;code&gt;M-x straight-check-package&lt;/code&gt; or &lt;code&gt;M-x straight-check-all&lt;/code&gt;. If you prefer to avoid this performance hit, or
do not have &lt;code&gt;find(1)&lt;/code&gt; installed, then you can remove these symbols
from the list. In that case, you will probably want to add either
&lt;code&gt;check-on-save&lt;/code&gt; or &lt;code&gt;watch-files&lt;/code&gt; to the list.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;check-on-save&lt;/code&gt; causes &lt;code&gt;straight.el&lt;/code&gt; to use &lt;code&gt;before-save-hook&lt;/code&gt; to
detect package modifications as you make them (modifications made by
the &lt;code&gt;straight.el&lt;/code&gt; repository management commands are also detected).
This reduces init time, but modifications made outside of Emacs (or
modifications that bypass &lt;code&gt;before-save-hook&lt;/code&gt;) are not detected. Pull
requests extending the number of cases in which &lt;code&gt;straight.el&lt;/code&gt; is able
to detect live modifications are welcome. Also, for the sake of
efficiency, this form of modification checking is restricted to
subdirectories of &lt;code&gt;~/.emacs.d/straight/repos&lt;/code&gt;, so you must put your
local repositories into that directory for it to work. (Pull requests
to change this would be welcome.)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;watch-files&lt;/code&gt; causes &lt;code&gt;straight.el&lt;/code&gt; to automatically invoke a
filesystem watcher to detect modifications as they are made, inside or
outside of Emacs. For this setting to work, you must have
&lt;a href="https://www.python.org/" rel="nofollow"&gt;&lt;code&gt;python3&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://github.com/mattgreen/watchexec"&gt;&lt;code&gt;watchexec&lt;/code&gt;&lt;/a&gt; installed on your
&lt;code&gt;PATH&lt;/code&gt;. By default, the watcher persists after Emacs is closed. You
can stop it manually by running &lt;code&gt;M-x straight-watcher-stop&lt;/code&gt;, and start
it again by running &lt;code&gt;M-x straight-watcher-start&lt;/code&gt;. The watcher script
is designed so that when one instance is started, all the others
gracefully shut down, so you don't have to worry about accidentally
ending up with more than one. There is nothing exciting in the process
buffer for the watcher, but if you are interested in it then its name
is given by &lt;code&gt;straight-watcher-process-buffer&lt;/code&gt;. (By default, the name
has a leading space so that the buffer does not appear in the buffer
list.)&lt;/p&gt;
&lt;p&gt;There is probably no good reason to use both &lt;code&gt;check-on-save&lt;/code&gt; and
&lt;code&gt;watch-files&lt;/code&gt; at the same time. Your configuration can dynamically
switch between which one is used depending on &lt;code&gt;(executable-find "watchexec")&lt;/code&gt; or similar.&lt;/p&gt;
&lt;p&gt;If you prefer to eschew automatic package rebuilding entirely, you can
just set &lt;code&gt;straight-check-for-modifications&lt;/code&gt; to &lt;code&gt;nil&lt;/code&gt;. In that case,
packages will only be rebuilt when metadata (e.g. the recipe or the
Emacs version) changes, or when you manually invoke &lt;code&gt;M-x straight-rebuild-package&lt;/code&gt; or &lt;code&gt;M-x straight-rebuild-all&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Regardless of your preferred setting for
&lt;code&gt;straight-check-for-modifications&lt;/code&gt;, you should set it before the
&lt;code&gt;straight.el&lt;/code&gt; bootstrap snippet is run, since hooks relating to this
variable are set during bootstrap.&lt;/p&gt;
&lt;p&gt;On Microsoft Windows, &lt;code&gt;find(1)&lt;/code&gt; is generally not available, so the
default value of &lt;code&gt;straight-check-for-modifications&lt;/code&gt; is instead
&lt;code&gt;(check-on-save)&lt;/code&gt;.&lt;/p&gt;
&lt;h5&gt;&lt;a id="user-content-custom-or-manual-modification-detection" class="anchor" aria-hidden="true" href="#custom-or-manual-modification-detection"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Custom or manual modification detection&lt;/h5&gt;
&lt;p&gt;You can also use the low-level functions for modification detection
directly.&lt;/p&gt;
&lt;p&gt;The function &lt;code&gt;straight-register-repo-modification&lt;/code&gt; takes a string
(e.g. &lt;code&gt;"straight.el"&lt;/code&gt;) corresponding to the name of a local
repository, and marks all packages from that local repository to be
rebuilt at next Emacs startup. This function silently ignores local
repositories which contain slashes, a limitation which might be
removed in future.&lt;/p&gt;
&lt;p&gt;The function &lt;code&gt;straight-register-file-modification&lt;/code&gt; takes no arguments
and checks if the file visited by the current buffer (if any) is
contained by any local repository. If so, it delegates to
&lt;code&gt;straight-register-repo-modification&lt;/code&gt;. The &lt;code&gt;check-on-save&lt;/code&gt; value for
&lt;code&gt;straight-check-for-modifications&lt;/code&gt; just adds
&lt;code&gt;straight-register-file-modification&lt;/code&gt; to &lt;code&gt;before-save-hook&lt;/code&gt;.&lt;/p&gt;
&lt;h5&gt;&lt;a id="user-content-summary-of-options-for-package-modification-detection" class="anchor" aria-hidden="true" href="#summary-of-options-for-package-modification-detection"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Summary of options for package modification detection&lt;/h5&gt;
&lt;h6&gt;&lt;a id="user-content-find-at-startup" class="anchor" aria-hidden="true" href="#find-at-startup"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;code&gt;find-at-startup&lt;/code&gt;&lt;/h6&gt;
&lt;p&gt;Save build timestamps and run &lt;code&gt;find(1)&lt;/code&gt; at startup to detect changes&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Most reliable, never misses changes&lt;/li&gt;
&lt;li&gt;Requires &lt;code&gt;find(1)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Slows down startup&lt;/li&gt;
&lt;/ul&gt;
&lt;h6&gt;&lt;a id="user-content-check-on-save" class="anchor" aria-hidden="true" href="#check-on-save"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;code&gt;check-on-save&lt;/code&gt;&lt;/h6&gt;
&lt;p&gt;Use &lt;code&gt;before-save-hook&lt;/code&gt; to detect changes&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;No external dependencies&lt;/li&gt;
&lt;li&gt;No startup delay&lt;/li&gt;
&lt;li&gt;No additional CPU or memory impact&lt;/li&gt;
&lt;li&gt;Doesn't catch changes made except via &lt;code&gt;save-file&lt;/code&gt; inside Emacs&lt;/li&gt;
&lt;/ul&gt;
&lt;h6&gt;&lt;a id="user-content-watch-files" class="anchor" aria-hidden="true" href="#watch-files"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;code&gt;watch-files&lt;/code&gt;&lt;/h6&gt;
&lt;p&gt;Run filesystem watcher to detect changes&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Requires Python 3 and Watchexec&lt;/li&gt;
&lt;li&gt;No startup delay&lt;/li&gt;
&lt;li&gt;Takes a few seconds to build virtualenv the first time&lt;/li&gt;
&lt;li&gt;Memory and CPU impact of running filesystem watcher&lt;/li&gt;
&lt;li&gt;Only misses changes if you make them after booting the system but
before starting Emacs&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4&gt;&lt;a id="user-content-customizing-how-packages-are-built" class="anchor" aria-hidden="true" href="#customizing-how-packages-are-built"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Customizing how packages are built&lt;/h4&gt;
&lt;p&gt;By specifying a non-nil value for the &lt;code&gt;:no-build&lt;/code&gt; attribute in a
package's &lt;a href="#the-recipe-format"&gt;recipe&lt;/a&gt;, you may prevent the package from
being built at all. This is usually useful for recipe repositories
which do not bundle executable Lisp code. (Make sure to use
&lt;a href="#customizing-recipe-repositories"&gt;&lt;code&gt;straight-use-recipes&lt;/code&gt;&lt;/a&gt; for registering recipe
repositories.)&lt;/p&gt;
&lt;p&gt;By specifying a non-nil value for the &lt;code&gt;:no-autoloads&lt;/code&gt; attribute in a
package's recipe, you may prevent any autoloads provided by the
package from being generated and loaded into Emacs. This is mostly
useful if the package provides a large number of autoloads, you know
you need only a few of them, and you wish to optimize your startup
time (although this is almost certainly premature optimization unless
you &lt;em&gt;really&lt;/em&gt; know what you're doing). You can also customize the
variable &lt;code&gt;straight-disable-autoloads&lt;/code&gt; to effect this change on all
recipes which do not explicitly specify a &lt;code&gt;:no-autoloads&lt;/code&gt; attribute.&lt;/p&gt;
&lt;p&gt;By specifying a non-nil value for the &lt;code&gt;:no-byte-compile&lt;/code&gt; attribute in
a package's recipe, you may inhibit byte-compilation. See &lt;a href="https://github.com/raxod502/straight.el/issues/357"&gt;this
issue&lt;/a&gt; for discussion of why this might be useful. You can also
customize the variable &lt;code&gt;straight-disable-byte-compilation&lt;/code&gt; to effect
this change on all recipes which do not explicitly specify a
&lt;code&gt;:no-byte-compile&lt;/code&gt; attribute.&lt;/p&gt;
&lt;p&gt;Usually, &lt;code&gt;straight.el&lt;/code&gt; uses symbolic links ("symlinks") to make
package files available from the build directory. This happens when
&lt;code&gt;straight-use-symlinks&lt;/code&gt; is non-nil, the default. On Microsoft Windows,
however, support for symlinks is not always available, so the default
value of &lt;code&gt;straight-use-symlinks&lt;/code&gt; is nil on that platform. That causes
copying to be used instead, and an advice is placed on &lt;code&gt;find-file&lt;/code&gt; to
cause the copied files to act as symlinks if you try to edit them.&lt;/p&gt;
&lt;p&gt;If you want to activate symlink-support on MS Windows 7, 8, or 10, you
should ensure the following requirements:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;straight-use-symlinks&lt;/code&gt; has to be set to non-nil manually.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Your user-account needs to be assigned the right to create symbolic
links. To do so, run "secpol.msc" and in "Local Policies → User
Rights Assignment" assign the right to "Create symbolic links" to
your user-account.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you have User Account Control (UAC) enabled and your user-account
belongs to the the &lt;em&gt;Administrators&lt;/em&gt; group you'll need to run Emacs
in elevated mode to be able to create symlinks (see
&lt;a href="https://community.perforce.com/s/article/3472" rel="nofollow"&gt;here&lt;/a&gt; and &lt;a href="https://stackoverflow.com/a/29065060/3538165" rel="nofollow"&gt;here&lt;/a&gt; and,
for an official reference, section Access Token Changes &lt;a href="https://msdn.microsoft.com/en-us/library/bb530410.aspx#vistauac_topic8" rel="nofollow"&gt;in this
document&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://blogs.windows.com/buildingapps/2016/12/02/symlinks-windows-10/" rel="nofollow"&gt;Windows Creators Update&lt;/a&gt; supports
symlink-creation without any special permission setup.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a id="user-content-customizing-how-packages-are-made-available" class="anchor" aria-hidden="true" href="#customizing-how-packages-are-made-available"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Customizing how packages are made available&lt;/h4&gt;
&lt;p&gt;By setting the variable &lt;code&gt;straight-cache-autoloads&lt;/code&gt; to a non-nil value,
you can cause &lt;code&gt;straight.el&lt;/code&gt; to cache the autoloads of all used
packages in a single file on disk, and load them from there instead of
from the individual package files if they are still up to date. This
reduces the number of disk IO operations during startup from O(number
of packages) to O(1), so it should improve performance. No other
configuration should be necessary to make this work; however, you may
wish to call &lt;a href="#interactive-usage"&gt;&lt;code&gt;straight-prune-build&lt;/code&gt;&lt;/a&gt; occasionally,
since otherwise this cache file may grow quite large over time.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-hooks-run-by-straight-use-package" class="anchor" aria-hidden="true" href="#hooks-run-by-straight-use-package"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Hooks run by &lt;code&gt;straight-use-package&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Currently, &lt;code&gt;straight-use-package&lt;/code&gt; supports two hooks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;straight-use-package-prepare-functions&lt;/code&gt;: The functions in this hook
are run just before a package would be built, even if the package
does not actually need to be rebuilt. They are passed the name of
the package being (maybe) built as a string, and should take and
ignore any additional arguments.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight-use-package-pre-build-functions&lt;/code&gt;: The functions in this
hook are run just before building a package (and only if the package
needs to be built). They are passed the name of the package being
built as a string, and should take and ignore any additional
arguments.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-the-recipe-format" class="anchor" aria-hidden="true" href="#the-recipe-format"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;The recipe format&lt;/h3&gt;
&lt;p&gt;The general format for a &lt;code&gt;straight.el&lt;/code&gt; recipe is:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(package-name :keyword value :keyword value ...)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that if you wish to pass a recipe to &lt;code&gt;straight-use-package&lt;/code&gt;, you
will need to quote it. If you need to compute part of the recipe
dynamically, use backquoting:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(straight-use-package
 `(el-patch :type git :repo ,(alist-get 'el-patch my-package-urls)))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here is a comprehensive list of all keywords which have special
meaning in a recipe (unknown keywords are ignored but preserved):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;:local-repo&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This is the name of the local repository that is used for the
package. If a local repository by that name does not exist when you
invoke &lt;code&gt;straight-use-package&lt;/code&gt;, one will be cloned according to the
package's &lt;a href="#version-control-backends"&gt;version-control settings&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Multiple packages can use the same local repository. If so, then a
change to the local repository will cause both packages to be
rebuilt. Typically, if multiple packages are drawn from the same
repository, both should specify a &lt;code&gt;:files&lt;/code&gt; directive.&lt;/p&gt;
&lt;p&gt;If you do not provide &lt;code&gt;:local-repo&lt;/code&gt;, then it defaults to a value
derived from the &lt;a href="#version-control-backends"&gt;version-control
settings&lt;/a&gt;, or as a last resort the
package name.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;:files&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This is a list specifying which files in a package's local
repository need to be symlinked into its build directory, and how to
arrange the symlinks. For most packages, the default value
(&lt;code&gt;straight-default-files-directive&lt;/code&gt;) will suffice, and you do not
need to specify anything.&lt;/p&gt;
&lt;p&gt;If you do need to override the &lt;code&gt;:files&lt;/code&gt; directive (this happens most
commonly when you are taking a single package from a repository that
holds multiple packages), it is almost always sufficient to just
specify a list of globs or filenames. All matching files will be
linked into the top level of the package's build directory.&lt;/p&gt;
&lt;p&gt;In spite of this, the &lt;code&gt;:files&lt;/code&gt; directive supports an almost
comically powerful DSL (with nested excludes and everything!) that
allows you full flexibility on how the links are made; see the
docstring of &lt;code&gt;straight-expand-files-directive&lt;/code&gt; for the full details.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;:flavor&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If this is non-nil, then it changes the interpretation of the
&lt;code&gt;:files&lt;/code&gt; directive for compatibility with an existing upstream
recipe source. See the docstring of
&lt;code&gt;straight-expand-files-directive&lt;/code&gt; for details.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;:no-build&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If this is non-nil, then it causes the build step to be skipped
entirely and unconditionally. You should specify this for &lt;a href="#customizing-recipe-repositories"&gt;recipe
repository recipes&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;:type&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This specifies the version-control backend to use for cloning and
managing the package's local repository. It defaults to the value of
&lt;code&gt;straight-default-vc&lt;/code&gt;, which defaults to &lt;code&gt;git&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The only traditional version-control backend currently supported is
&lt;code&gt;git&lt;/code&gt;, although more backends may be added.&lt;/p&gt;
&lt;p&gt;As a special case, however, you may specify the value &lt;code&gt;built-in&lt;/code&gt;,
which results in all version-control operations on the package being
ignored. This allows you to tell &lt;code&gt;straight.el&lt;/code&gt; that a package has
already been provided (for example, because a version of it is
shipped by Emacs) and does not have a local repository which needs
to be cloned, updated, and so on. Here is how you can tell
&lt;code&gt;straight.el&lt;/code&gt; that you would like to use the Emacs-provided copy of
Org, rather than cloning it from the upstream repository if another
package declares it as a dependency:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(straight-use-package '(org :type built-in))
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;backend-specific keywords&lt;/p&gt;
&lt;p&gt;Depending on the value of &lt;code&gt;:type&lt;/code&gt;, additional keywords (relevant to
how the package's repository is cloned and managed) will be
meaningful. See the next section.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;built-in&lt;/code&gt; pseudo-backend does not take any other keywords.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a id="user-content-version-control-backends" class="anchor" aria-hidden="true" href="#version-control-backends"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Version-control backends&lt;/h4&gt;
&lt;p&gt;Defining a version-control backend consists of declaring a number of
functions named as &lt;code&gt;straight-vc-BACKEND-METHOD&lt;/code&gt;, where &lt;code&gt;BACKEND&lt;/code&gt; is
the name of the version-control backend being defined and &lt;code&gt;METHOD&lt;/code&gt; is
a backend API method. The relevant methods are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;clone&lt;/code&gt;: given a recipe and a commit object, clone the repository
and attempt to check out the given commit.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;commit-present-p&lt;/code&gt;: given a recipe and a commit object, return
whether the commit can be checked out offline, i.e., without
fetching from the remote.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;normalize&lt;/code&gt;: given a recipe, "normalize" the repository (this
generally means reverting it to a standard state, such as a clean
working directory, but does not entail checking out any particular
commit).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fetch-from-remote&lt;/code&gt;: given a recipe, fetch the latest version from
its configured remote, if one is specified.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fetch-from-upstream&lt;/code&gt;: given a recipe, fetch the latest version from
its configured upstream, if the package is forked.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;merge-from-remote&lt;/code&gt;: given a recipe, merge the latest version
fetched from the configured remote, if any, to the local copy.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;merge-from-upstream&lt;/code&gt;: given a recipe, merge the latest version
fetched from the configured upstream, if the package is forked, to
the local copy.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;push-to-remote&lt;/code&gt;: given a recipe, push the current version of the
repository to its configured remote, if one is specified.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;check-out-commit&lt;/code&gt;: given a recipe and a commit object, attempt to
check out that commit in the repository for that recipe.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;get-commit&lt;/code&gt;: given a local repository name, return the commit
object that is currently checked out.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;local-repo-name&lt;/code&gt;: given a recipe, return a good name for the local
repository, or nil.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;keywords&lt;/code&gt;: return a list of keywords which are meaningful for this
version-control backend.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Most of these methods are highly interactive: they don't actually do
anything without prompting you to confirm it, and very often they will
offer you a number of different options to proceed (including starting
a recursive edit and allowing you to do whatever you would like).&lt;/p&gt;
&lt;p&gt;Also, all of the methods in this section take &lt;a href="#developer-manual"&gt;&lt;code&gt;straight.el&lt;/code&gt;-style
recipes&lt;/a&gt;; see the section on &lt;a href="#developer-manual"&gt;defining VC
backends&lt;/a&gt; in the developer manual for more details.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-git-backend" class="anchor" aria-hidden="true" href="#git-backend"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Git backend&lt;/h4&gt;
&lt;p&gt;These are the keywords meaningful for the &lt;code&gt;git&lt;/code&gt; backend:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:repo&lt;/code&gt;: the clone URL for the Git repository.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:host&lt;/code&gt;: either nil or one of the symbols &lt;code&gt;github&lt;/code&gt;, &lt;code&gt;gitlab&lt;/code&gt;,
&lt;code&gt;bitbucket&lt;/code&gt;. If non-nil, then &lt;code&gt;:repo&lt;/code&gt; should just be a string
"username/repo", and the URL is constructed automatically.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:branch&lt;/code&gt;: the name of the branch used for primary development, as a
string. If your version lockfiles do not specify a commit to check
out when the repository is cloned, then this branch is checked out,
if possible. This branch is also viewed as the "primary" branch for
the purpose of normalization and interaction with the remote.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:remote&lt;/code&gt;: the name to use for the Git remote. If the package is
forked, this name is used for the upstream remote.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:nonrecursive&lt;/code&gt;: if non-nil, then submodules are not cloned. This is
particularly important for the Emacsmirror recipe repository, which
contains every known Emacs package in existence as submodules.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:fork&lt;/code&gt;: a plist which specifies settings for a fork, if desired.
This causes the &lt;code&gt;fetch-from-remote&lt;/code&gt; method to operate on the fork;
you can use the &lt;code&gt;fetch-from-upstream&lt;/code&gt; method to operate on the
upstream instead. The allowed keywords are &lt;code&gt;:repo&lt;/code&gt;, &lt;code&gt;:host&lt;/code&gt;,
&lt;code&gt;:branch&lt;/code&gt;, and &lt;code&gt;:remote&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:depth&lt;/code&gt;: either the symbol &lt;code&gt;full&lt;/code&gt; or an integer. If &lt;code&gt;full&lt;/code&gt;, then
the repository is cloned with its whole history. If an integer &lt;code&gt;N&lt;/code&gt;,
then the repository is cloned with the option &lt;code&gt;--depth N&lt;/code&gt;, unless a
commit is specified (e.g. by version lockfiles). The default value
is &lt;code&gt;full&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This section tells you how the &lt;code&gt;git&lt;/code&gt; backend, specifically, implements
the version-control backend API:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;clone&lt;/code&gt;: clones the repository, including submodules if
&lt;code&gt;:nonrecursive&lt;/code&gt; is not provided. Checks out the commit specified in
your revision lockfile, or the &lt;code&gt;:branch&lt;/code&gt; (from the &lt;code&gt;:fork&lt;/code&gt;
configuration, if given), or &lt;code&gt;origin/HEAD&lt;/code&gt;. If a &lt;code&gt;:fork&lt;/code&gt; is
specified, also fetches from the upstream.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;commit-present-p&lt;/code&gt;: checks if the commit SHA is among the revisions
that are present locally.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;normalize&lt;/code&gt;: verifies that remote URLs are set correctly, that no
merge is in progress, that the worktree is clean, and that the
primary &lt;code&gt;:branch&lt;/code&gt; (from the &lt;code&gt;:fork&lt;/code&gt; configuration, if given) is
checked out.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fetch-from-remote&lt;/code&gt;: checks that remote URLs are set correctly, then
fetches from the primary remote (the fork, if the package is
forked).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fetch-from-upstream&lt;/code&gt;: checks that remote URLs are set correctly,
then fetches from the upstream remote. If the package is not a fork,
does nothing.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;merge-from-remote&lt;/code&gt;: performs normalization, then merges from the
primary remote (the fork, if the package is forked) into the primary
local &lt;code&gt;:branch&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;merge-from-upstream&lt;/code&gt;: performs normalization, then merges from the
upstream remote into the primary local &lt;code&gt;:branch&lt;/code&gt;. If the package is
not a fork, does not attempt to merge.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;push-to-remote&lt;/code&gt;: performs normalization, pulls from the primary
remote if necessary, and then pushes if necessary. This operation
acts on the fork, if the package is forked.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;check-out-commit&lt;/code&gt;: verifies that no merge is in progress and that
the worktree is clean, then resets the worktree to the specified
commit.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;get-commit&lt;/code&gt;: returns HEAD as a 40-character string.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;local-repo-name&lt;/code&gt;: if &lt;code&gt;:host&lt;/code&gt; is non-nil, then &lt;code&gt;:repo&lt;/code&gt; will be of
the form "username/repository", and "repository" is used. Otherwise,
if the URL is of the form &lt;code&gt;.../&amp;lt;something&amp;gt;.git&lt;/code&gt;, then &lt;code&gt;&amp;lt;something&amp;gt;&lt;/code&gt;
is used. Otherwise, nil is returned.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;keywords&lt;/code&gt;: see the list of keywords above.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can customize the following user options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;straight-vc-git-default-branch&lt;/code&gt;: if &lt;code&gt;:branch&lt;/code&gt; is unspecified, then
this is used instead. Defaults to "master".&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight-vc-git-default-remote-name&lt;/code&gt;: the name to use for the
primary remote, or the upstream remote if the package is forked.
Defaults to "origin". The &lt;code&gt;:remote&lt;/code&gt; keyword may be used to override
the value of this variable on a per-repository basis.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight-vc-git-default-fork-name&lt;/code&gt;: the name to use for the fork
remote, if the package is forked. Defaults to "fork". The &lt;code&gt;:remote&lt;/code&gt;
keyword may be used to override the value of this variable on a
per-repository basis.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight-vc-git-default-protocol&lt;/code&gt;: the default protocol to use for
automatically generated URLs when &lt;code&gt;:host&lt;/code&gt; is non-nil. It can be
either &lt;code&gt;https&lt;/code&gt; or &lt;code&gt;ssh&lt;/code&gt;, and defaults to &lt;code&gt;https&lt;/code&gt; because this
requires less work to set up.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight-vc-git-force-protocol&lt;/code&gt;: if this is non-nil, then HTTPS and
SSH URLs are not treated as equivalent, so that bulk version-control
operations will offer to re-set your remote URLs from HTTPS to SSH
or vice versa, depending on the value of
&lt;code&gt;straight-vc-git-default-protocol&lt;/code&gt;. This is nil by default.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight-vc-git-auto-fast-forward&lt;/code&gt;: if this is non-nil, pulling
will quietly do fast-forward, to suppress asking for instructions on
each package with updates, unless they're not trivial. Set to nil if
you'd prefer to inspect all changes.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight-vc-git-default-clone-depth&lt;/code&gt;: the default value for the
&lt;code&gt;:depth&lt;/code&gt; keyword. It can be either the symbol &lt;code&gt;full&lt;/code&gt; or an integer,
and defaults to &lt;code&gt;full&lt;/code&gt;. Setting this variable to a small integer will
reduce the size of repositories. Note that this variable does &lt;em&gt;not&lt;/em&gt;
affect packages whose versions are locked.&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;&lt;a id="user-content-deprecated-upstream-keyword" class="anchor" aria-hidden="true" href="#deprecated-upstream-keyword"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Deprecated &lt;code&gt;:upstream&lt;/code&gt; keyword&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;straight.el&lt;/code&gt; previously supported fork configuration in recipes using
an &lt;code&gt;:upstream&lt;/code&gt; keyword rather than a &lt;code&gt;:fork&lt;/code&gt; keyword. For various
reasons, this was more complex to handle, which is why the change was
made. For backwards compatibility, the &lt;code&gt;:upstream&lt;/code&gt; keyword is still
accepted, with the following behavior.&lt;/p&gt;
&lt;p&gt;When &lt;code&gt;straight.el&lt;/code&gt; processes a recipe which uses the &lt;code&gt;:upstream&lt;/code&gt;
keyword, it moves the &lt;code&gt;:repo&lt;/code&gt;, &lt;code&gt;:host&lt;/code&gt;, and &lt;code&gt;:branch&lt;/code&gt; keywords from
that sub-plist to the top level, and moves those top-level keywords to
a new &lt;code&gt;:fork&lt;/code&gt; sub-plist. Then it sets the top-level and &lt;code&gt;:fork&lt;/code&gt;
sub-plist values of &lt;code&gt;:remote&lt;/code&gt; to the values of the deprecated
variables &lt;code&gt;straight-vc-git-upstream-remote&lt;/code&gt; (defaults to "upstream")
and &lt;code&gt;straight-vc-git-primary-remote&lt;/code&gt; (defaults to "origin"),
respectively.&lt;/p&gt;
&lt;p&gt;For backwards compatibility, if &lt;code&gt;straight-vc-git-primary-remote&lt;/code&gt;
differs from its default value of "origin", then its value is used in
place of &lt;code&gt;straight-vc-git-default-remote-name&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-recipe-lookup" class="anchor" aria-hidden="true" href="#recipe-lookup"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Recipe lookup&lt;/h3&gt;
&lt;p&gt;If you only provide a symbol (package name) to &lt;code&gt;straight-use-package&lt;/code&gt;,
then the recipe is looked up automatically. By default, &lt;a href="http://melpa.org/#/" rel="nofollow"&gt;MELPA&lt;/a&gt;, &lt;a href="https://elpa.gnu.org/" rel="nofollow"&gt;GNU
ELPA&lt;/a&gt;, and &lt;a href="https://emacsmirror.net/" rel="nofollow"&gt;Emacsmirror&lt;/a&gt; are searched for recipes, in that
order. This means that one or more of them may need to be cloned.
Recipe repositories are actually just the same as ordinary packages,
except that their recipes specify &lt;code&gt;:no-build&lt;/code&gt;, so they are not
symlinked or added to the &lt;code&gt;load-path&lt;/code&gt; or anything.&lt;/p&gt;
&lt;p&gt;Note that dependencies always use the default recipes, since the only
information &lt;code&gt;straight.el&lt;/code&gt; gets about a package's dependencies are
their names.&lt;/p&gt;
&lt;p&gt;This leads to a few interesting questions regarding requesting a
package multiple times. For example, you might need to load two
features using &lt;a href="https://github.com/jwiegley/use-package"&gt;&lt;code&gt;use-package&lt;/code&gt;&lt;/a&gt; that are provided from the
same package, or one of the packages you have installed is also
requested as a dependency by another package. &lt;code&gt;straight.el&lt;/code&gt; uses a
number of heuristics to try to make these interactions as intuitive
and painless as possible:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The first time a package is registered with &lt;code&gt;straight.el&lt;/code&gt;, its
recipe (either the recipe that you provided, or the one that was
looked up from a recipe repository) is recorded. In future
registration, if you just provide the package name to
&lt;code&gt;straight-use-package&lt;/code&gt;, the existing recipe is reused.&lt;/p&gt;
&lt;p&gt;Note, however: &lt;em&gt;if&lt;/em&gt; you want to use a custom recipe for a given
package, you must load it &lt;em&gt;before&lt;/em&gt; all of its dependencies.
Otherwise, the package will first be registered as a dependency,
using the default recipe.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If a package has already been registered with &lt;code&gt;straight.el&lt;/code&gt;, and you
attempt to load it again with an explicit recipe which is different
from the one previously registered, the new recipe is used but a
warning is signalled.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you attempt to register a package which shares a &lt;code&gt;:local-repo&lt;/code&gt;
(either by default, or due to explicit specification) with a
previously registered package, and the two packages specify
different values for their version-control keywords (see
&lt;a href="#version-control-backends"&gt;version-control backends&lt;/a&gt;), then the new
recipe is used but a warning is signalled. If the repository was
already cloned, this means the second recipe will have no effect.&lt;/p&gt;
&lt;p&gt;But if the second recipe was fetched automatically from a recipe
repository, all of its version-control keywords will be silently
overwritten with the ones from the first recipe, to avoid conflicts
(although if there are conflicts in other parts of the recipe, a
warning will still be displayed).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a id="user-content-updating-recipe-repositories" class="anchor" aria-hidden="true" href="#updating-recipe-repositories"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Updating recipe repositories&lt;/h4&gt;
&lt;p&gt;As mentioned in the &lt;a href="#where-do-recipes-come-from"&gt;conceptual overview&lt;/a&gt;, recipe
repositories are just regular packages, with some extra code to look
up recipes in the relevant local repository.&lt;/p&gt;
&lt;p&gt;This means that updating a recipe repository is done the same way as
updating a regular package, i.e. with &lt;a href="#version-control-operations"&gt;&lt;code&gt;M-x straight-pull-package&lt;/code&gt;&lt;/a&gt;. You should do this if
you find that a package isn't listed by &lt;code&gt;M-x straight-use-package&lt;/code&gt;—perhaps it was added recently.&lt;/p&gt;
&lt;p&gt;Note that there is currently some potentially surprising behavior if
you update all packages at once using &lt;code&gt;M-x straight-pull-all&lt;/code&gt; or &lt;code&gt;M-x straight-merge-all&lt;/code&gt;, and this bulk update includes recipe repository
updates: see &lt;a href="https://github.com/raxod502/straight.el/issues/323"&gt;#323&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-customizing-recipe-repositories" class="anchor" aria-hidden="true" href="#customizing-recipe-repositories"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Customizing recipe repositories&lt;/h4&gt;
&lt;p&gt;The recipe repository system is designed to be extended. Firstly, you
can control which recipe repositories are searched, and in what order
of precedence, by customizing &lt;code&gt;straight-recipe-repositories&lt;/code&gt;. The
default value is:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(org-elpa melpa gnu-elpa-mirror emacsmirror)
&lt;/code&gt;&lt;/pre&gt;
&lt;h5&gt;&lt;a id="user-content-gnu-elpa" class="anchor" aria-hidden="true" href="#gnu-elpa"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;GNU ELPA&lt;/h5&gt;
&lt;p&gt;You can customize the following user options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;straight-recipes-gnu-elpa-url&lt;/code&gt;: The Git URL to use for the
&lt;code&gt;gnu-elpa&lt;/code&gt; recipe repository.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;straight-recipes-gnu-elpa-use-mirror&lt;/code&gt;: GNU ELPA uses a stupidly
complex build system for no good reason, and it's unlikely to change
any time soon. What this means for you is that you have to run the
Elisp-powered Makefile of the GNU ELPA repository (which has a fatal
bug last I checked, so you'd have to patch it locally) &lt;em&gt;and&lt;/em&gt; have a
full checkout of the Emacs source repository (more than 1GB) if you
want all the packages to work correctly. To work around this
problem, I maintain a &lt;a href="https://github.com/emacs-straight"&gt;full mirror of GNU ELPA on
GitHub&lt;/a&gt;. (The tooling used to maintain this mirror
is located &lt;a href="https://github.com/raxod502/gnu-elpa-mirror"&gt;here&lt;/a&gt;.) By default, &lt;code&gt;straight.el&lt;/code&gt;
retrieves packages from this mirror instead of the source
repository; this behavior is controlled by the value of
&lt;code&gt;straight-recipes-gnu-elpa-use-mirror&lt;/code&gt;. You must do any
customization of this variable &lt;em&gt;before&lt;/em&gt; the &lt;code&gt;straight.el&lt;/code&gt;
&lt;a href="#getting-started"&gt;bootstrap&lt;/a&gt;. Note that setting the value of this user
option to nil causes the default value of
&lt;code&gt;straight-recipe-repositories&lt;/code&gt; to shift to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(org-elpa melpa gnu-elpa emacsmirror)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;&lt;a id="user-content-emacsmirror" class="anchor" aria-hidden="true" href="#emacsmirror"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Emacsmirror&lt;/h5&gt;
&lt;p&gt;You can customize the following user option:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;straight-recipes-emacsmirror-use-mirror&lt;/code&gt;: Yes, there is also a
mirror for Emacsmirror. This is because the &lt;a href="https://github.com/emacsmirror/epkgs"&gt;epkgs&lt;/a&gt; repository
contains a (frequently updated) SQLite database in it, which means
the Git repository takes &lt;em&gt;forever&lt;/em&gt; to clone (see &lt;a href="https://github.com/raxod502/straight.el/issues/356"&gt;#356&lt;/a&gt;). My
solution to this problem is to generate a new repository which
contains the information that &lt;code&gt;straight.el&lt;/code&gt; needs but which is much
smaller. By default, &lt;code&gt;straight.el&lt;/code&gt; uses the official &lt;a href="https://github.com/emacsmirror/epkgs"&gt;epkgs&lt;/a&gt;
repository to find packages on Emacsmirror, but you can tell it to
use my mirror by configuring the value of this variable to non-nil.
You must do any customization of this variable &lt;em&gt;before&lt;/em&gt; the
&lt;code&gt;straight.el&lt;/code&gt; &lt;a href="#getting-started"&gt;bootstrap&lt;/a&gt;. Note that setting the value
of this user option to non-nil causes the default value of
&lt;code&gt;straight-recipe-repositories&lt;/code&gt; to shift to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(org-elpa melpa gnu-elpa-mirror emacsmirror-mirror)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;&lt;a id="user-content-defining-new-recipe-repositories" class="anchor" aria-hidden="true" href="#defining-new-recipe-repositories"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Defining new recipe repositories&lt;/h5&gt;
&lt;p&gt;To define a new recipe repository called &lt;code&gt;NAME&lt;/code&gt;, you should do the
following things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Define a function &lt;code&gt;straight-recipes-NAME-retrieve&lt;/code&gt;, which takes a
package name as a symbol and returns a recipe for that package if it
is available, else nil. This is used for recipe lookup. This
function may assume that the local repository for the recipe
repository has already been cloned, and that &lt;code&gt;default-directory&lt;/code&gt; has
been set to that local repository. This is used for recipe lookup
during the course of &lt;code&gt;straight-use-package&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Define a function &lt;code&gt;straight-recipes-NAME-list&lt;/code&gt;, which takes no
arguments and returns a list of strings representing packages for
which recipes are available. It is permissible to return some
strings for which recipes are actually not available, for
performance reasons. However, this is discouraged. (The &lt;a href="http://melpa.org/#/" rel="nofollow"&gt;MELPA&lt;/a&gt;
backend uses this functionality, since all files in the &lt;code&gt;recipes&lt;/code&gt;
directory are potentially recipes, but only the Git-based ones can
actually be used.)&lt;/li&gt;
&lt;li&gt;(Optional) Define a function &lt;code&gt;straight-recipes-NAME-version&lt;/code&gt; which
returns a non-nil value indicating the current version of the logic
in your &lt;code&gt;straight-recipes-NAME-retrieve&lt;/code&gt; function. Each time you
change the logic, this version value must be changed. If this
function is defined, then &lt;code&gt;straight.el&lt;/code&gt; automatically and
transparently caches calls to &lt;code&gt;straight-recipes-NAME-retrieve&lt;/code&gt;
persistently, using your version value (and its detection of
modifications to the recipe repository) to decide when to invalidate
the cache.&lt;/li&gt;
&lt;li&gt;Call &lt;code&gt;straight-use-recipes&lt;/code&gt; with the recipe for your recipe
repository. Make sure to include &lt;code&gt;:no-build&lt;/code&gt; in the recipe, unless
you also want to use the recipe repository as an executable Emacs
Lisp package. Alternatively, you can take the manual approach:
&lt;ul&gt;
&lt;li&gt;Call &lt;code&gt;straight-use-package-lazy&lt;/code&gt; with the recipe for your recipe
repository.&lt;/li&gt;
&lt;li&gt;Add the symbol for your recipe repository's name (the car of the
recipe you provided, that is) to &lt;code&gt;straight-recipe-repositories&lt;/code&gt;,
at the appropriate place.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-overriding-recipes" class="anchor" aria-hidden="true" href="#overriding-recipes"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Overriding recipes&lt;/h3&gt;
&lt;p&gt;You can always use &lt;code&gt;straight-register-package&lt;/code&gt; to specify a specific
recipe for a package without cloning or building it, so that just in
case that package is requested later (possibly as a dependency, or in
somebody else's code) your recipe will be used instead of the default
one. However, this does not help in the case that a specific recipe is
passed to &lt;code&gt;straight-use-package&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Also, it is obviously impossible to call &lt;code&gt;straight-register-package&lt;/code&gt;
before &lt;code&gt;straight.el&lt;/code&gt; has been loaded, so you can't use it to specify a
custom recipe for &lt;code&gt;straight.el&lt;/code&gt; itself.&lt;/p&gt;
&lt;p&gt;To remedy these difficulties, &lt;code&gt;straight.el&lt;/code&gt; provides a mechanism for
specifically overriding the recipe for a particular package. You can
use it by customizing &lt;code&gt;straight-recipe-overrides&lt;/code&gt;, or by calling
&lt;code&gt;straight-override-recipe&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;straight-recipe-overrides&lt;/code&gt; is an association list from &lt;a href="#the-profile-system"&gt;profile
names&lt;/a&gt; to &lt;em&gt;override alists&lt;/em&gt;. If you don't
care about the profile system, you can just use a single override
specification, with the profile name nil. Each override alist is just
a list of recipes. Because the car of a recipe is just the package
name as a symbol, this list of recipes is also an alist whose keys are
recipe names and whose values are the plists for those recipes.&lt;/p&gt;
&lt;p&gt;Even if an explicit recipe is supplied to &lt;code&gt;straight-use-package&lt;/code&gt;, the
one given in &lt;code&gt;straight-recipe-overrides&lt;/code&gt; will be used instead, if such
a recipe is specified there.&lt;/p&gt;
&lt;p&gt;For convenience, you may add to &lt;code&gt;straight-recipe-overrides&lt;/code&gt; by passing
a recipe to &lt;code&gt;straight-override-recipe&lt;/code&gt;. This will register it in the
override alist for the current profile. Note that if you do this, you
will probably want to explicitly set &lt;code&gt;straight-recipe-overrides&lt;/code&gt; to
nil before bootstrapping &lt;code&gt;straight.el&lt;/code&gt;. This will make it so that if
you remove a call to &lt;code&gt;straight-override-recipe&lt;/code&gt; from your init-file
and then reload it, the entry will actually be removed from
&lt;code&gt;straight-recipe-overrides&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-overriding-the-recipe-for-straightel" class="anchor" aria-hidden="true" href="#overriding-the-recipe-for-straightel"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Overriding the recipe for &lt;code&gt;straight.el&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;As was briefly mentioned earlier, you can actually override the recipe
of &lt;code&gt;straight.el&lt;/code&gt; itself using &lt;code&gt;straight-recipe-overrides&lt;/code&gt;! How does
this work? Well, it's basically black magic. If you want the details,
go read the &lt;a href="#developer-manual"&gt;developer manual&lt;/a&gt;. All you need to
know is that you can set &lt;code&gt;straight-recipe-overrides&lt;/code&gt;, and it will
magically work. The only caveat is that if you change the
&lt;code&gt;:local-repo&lt;/code&gt; for &lt;code&gt;straight.el&lt;/code&gt;, then you will also need to adjust the
value of &lt;code&gt;bootstrap-file&lt;/code&gt; in the &lt;a href="#getting-started"&gt;bootstrap snippet&lt;/a&gt;
accordingly, since otherwise your init-file will not know where to
find &lt;code&gt;straight.el&lt;/code&gt;. (You must use &lt;code&gt;straight-recipe-overrides&lt;/code&gt; instead
of &lt;code&gt;straight-override-recipe&lt;/code&gt;, since the latter function definition
hasn't been loaded yet before &lt;code&gt;straight.el&lt;/code&gt; is installed and
bootstrapped.)&lt;/p&gt;
&lt;p&gt;Here is the default recipe used for &lt;code&gt;straight.el&lt;/code&gt;, if you don't
override it:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(straight :type git :host github
          :repo ,(format "%s/straight.el" straight-repository-user)
          :files ("straight*.el")
          :branch ,straight-repository-branch)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that even though the bootstrap snippet references the &lt;code&gt;develop&lt;/code&gt;
branch of &lt;code&gt;straight.el&lt;/code&gt;, the default recipe installs from &lt;code&gt;master&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If all you want to do is change which branch you are installing
&lt;code&gt;straight.el&lt;/code&gt; from, simply customize the variable
&lt;code&gt;straight-repository-branch&lt;/code&gt;, which is provided for this purpose.
(Although using &lt;code&gt;straight-recipe-overrides&lt;/code&gt; will work just as well, at
least until the recipe happens to be changed upstream and your
init-file isn't updated.)&lt;/p&gt;
&lt;p&gt;Similarly, if all you want to do is switch to your own fork of
&lt;code&gt;straight.el&lt;/code&gt; on GitHub, simply customize the variable
&lt;code&gt;straight-repository-user&lt;/code&gt; to your GitHub username.&lt;/p&gt;
&lt;p&gt;There is one minor caveat to the above discussion. If your fork makes
changes to the way in which recipes are interpreted, then those
changes will not be effective during the interpretation of your own
recipe for &lt;code&gt;straight.el&lt;/code&gt;. If you wish for them to be, then you will
have to follow the same procedure that is followed in &lt;code&gt;straight.el&lt;/code&gt;
itself for making changes to recipe interpretation. These details are
outlined in the &lt;a href="#developer-manual"&gt;developer manual&lt;/a&gt;; see also
&lt;code&gt;install.el&lt;/code&gt; for an explanation of this aspect of the bootstrap
mechanism.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-interactive-usage" class="anchor" aria-hidden="true" href="#interactive-usage"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Interactive usage&lt;/h3&gt;
&lt;p&gt;The primary usage of &lt;code&gt;straight.el&lt;/code&gt; is expected to be in your
init-file. For example, this is where you will need to put the
bootstrap code as well as any packages that you always want to be
installed. However, there are three important interactive uses of
&lt;code&gt;straight.el&lt;/code&gt;: temporary installation of packages, various helpful
utility functions, and &lt;a href="#version-control-operations"&gt;version control
operations&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To install a package temporarily, run &lt;code&gt;M-x straight-use-package&lt;/code&gt;. All
registered recipe repositories will be cloned, and you will be
presented with a combined list of all recipes available from them.
Simply select a package and it will be cloned, built, and loaded
automatically. This does not affect future Emacs sessions.&lt;/p&gt;
&lt;p&gt;If you provide a prefix argument to &lt;code&gt;M-x straight-use-package&lt;/code&gt;, then
you are presented with a list of registered recipe repositories. After
you select one, you are shown a list of recipes specifically from that
recipe repository. This is helpful if you do not want to clone all
registered recipe repositories, or you have a particular recipe
repository in mind.&lt;/p&gt;
&lt;p&gt;You can also call &lt;code&gt;M-x straight-get-recipe&lt;/code&gt;, which has the same
interface as &lt;code&gt;M-x straight-use-package&lt;/code&gt;, except that instead of the
package being cloned, built, and loaded, its recipe is copied to the
kill ring. If you are writing a custom recipe, this may be helpful,
because you may be able to reuse parts of the existing recipe,
particularly the &lt;code&gt;:files&lt;/code&gt; directive.&lt;/p&gt;
&lt;p&gt;Normally, packages are rebuilt automatically if needed, when Emacs
restarts. If you for some reason want them to be rebuilt at another
time, you can call &lt;code&gt;M-x straight-check-all&lt;/code&gt; to rebuild all packages
that have been modified since their last build. Alternatively, use
&lt;code&gt;M-x straight-rebuild-all&lt;/code&gt; to unconditionally rebuild all packages.
Note that this will probably take a while. There are also &lt;code&gt;M-x straight-check-package&lt;/code&gt; and &lt;code&gt;M-x straight-rebuild-package&lt;/code&gt;, which
allow you to select a particular package to check or rebuild.&lt;/p&gt;
&lt;p&gt;Finally, you may use &lt;code&gt;M-x straight-prune-build&lt;/code&gt; in order to tell
&lt;code&gt;straight.el&lt;/code&gt; to forget about any packages which were not registered
since the last time you loaded your init-file. This may improve
performance, although only slightly, and will clean up stale entries
in the &lt;code&gt;build&lt;/code&gt; directory. You can call this function in your init-file
if you really wish your filesystem to be as clean as possible,
although it's not particularly recommended as the performance
implications are uninvestigated. If you do call it in your init-file,
be sure to only call it on a fully successful init; otherwise, an
error during init will result in some packages' build information
being discarded, and they will need to be rebuilt next time.&lt;/p&gt;
&lt;p&gt;If you have enabled &lt;a href="#customizing-how-packages-are-made-available"&gt;autoloads caching&lt;/a&gt;, it is
advisable to call &lt;code&gt;straight-prune-build&lt;/code&gt; occasionally, since otherwise
the build cache may grow quite large over time.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-version-control-operations" class="anchor" aria-hidden="true" href="#version-control-operations"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Version control operations&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;straight.el&lt;/code&gt; provides a number of highly interactive workflows for
managing your package's local repositories, using the configured
&lt;a href="#version-control-backends"&gt;version-control backends&lt;/a&gt;. They are as
follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;M-x straight-normalize-package&lt;/code&gt;: normalize a package&lt;/li&gt;
&lt;li&gt;&lt;code&gt;M-x straight-normalize-all&lt;/code&gt;: normalize all packages&lt;/li&gt;
&lt;li&gt;&lt;code&gt;M-x straight-fetch-package&lt;/code&gt;: fetch from a package's configured
remote; with prefix argument, then for forks also fetch from the
upstream&lt;/li&gt;
&lt;li&gt;&lt;code&gt;M-x straight-fetch-package-and-deps&lt;/code&gt;: fetch from the configured
remotes of a package and all of its dependencies (including the
dependencies of its dependencies); with prefix argment, then for
forks also fetch from the upstream&lt;/li&gt;
&lt;li&gt;&lt;code&gt;M-x straight-fetch-all&lt;/code&gt;: fetch from all packages' configured
remotes; with prefix argument, then for forks also fetch from the
upstreams&lt;/li&gt;
&lt;li&gt;&lt;code&gt;M-x straight-merge-package&lt;/code&gt;: merge the latest version fetched from
a package's configured remote into the local copy; with prefix
argument, then for forks also merge from the upstream&lt;/li&gt;
&lt;li&gt;&lt;code&gt;M-x straight-merge-package-and-deps&lt;/code&gt;: merge the latest versions
fetched from the configured remotes of a package and all of its
dependencies (including the dependencies of its dependencies); with
prefix argment, then for forks also merge from the upstreams&lt;/li&gt;
&lt;li&gt;&lt;code&gt;M-x straight-merge-all&lt;/code&gt;: merge the latest versions fetched from
each package's configured remote into its local copy; with prefix
argument, then for forks also merge from the upstreams&lt;/li&gt;
&lt;li&gt;&lt;code&gt;M-x straight-pull-package&lt;/code&gt;: combination of &lt;code&gt;M-x straight-fetch-package&lt;/code&gt; and &lt;code&gt;M-x straight-merge-package&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;M-x straight-pull-package-and-deps&lt;/code&gt;: combination of &lt;code&gt;M-x straight-fetch-package-and-deps&lt;/code&gt; and &lt;code&gt;M-x straight-merge-package-and-deps&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;M-x straight-pull-all&lt;/code&gt;: combination of &lt;code&gt;M-x straight-fetch-all&lt;/code&gt; and
&lt;code&gt;M-x straight-merge-all&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;M-x straight-push-package&lt;/code&gt;: push a package to its remote, if
necessary&lt;/li&gt;
&lt;li&gt;&lt;code&gt;M-x straight-push-all&lt;/code&gt;: push all packages to their remotes, if
necessary&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;See the sections on &lt;a href="#version-control-backends"&gt;version-control
backends&lt;/a&gt; and the &lt;a href="#git-backend"&gt;Git
backend&lt;/a&gt; in particular for more information about
the meanings of these operations.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-lockfile-management" class="anchor" aria-hidden="true" href="#lockfile-management"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Lockfile management&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;straight.el&lt;/code&gt; determines your package management configuration from
two, and only two, sources: the contents of your init-file, and your
version lockfiles (which are optional). Your init-file specifies the
configuration of &lt;code&gt;straight.el&lt;/code&gt; (for example, the values of
&lt;code&gt;straight-recipe-overrides&lt;/code&gt; and &lt;code&gt;straight-default-vc&lt;/code&gt;), the packages
you want to use, and their recipes. Your version lockfiles specify the
exact revisions of each package, recipe repository, and even
&lt;code&gt;straight.el&lt;/code&gt; itself. Together, they lock down your Emacs
configuration to a state of no uncertainty: perfect reproducibility.&lt;/p&gt;
&lt;p&gt;To write the current revisions of all your packages into version
lockfiles, run &lt;code&gt;M-x straight-freeze-versions&lt;/code&gt;. This will first check
that &lt;code&gt;straight.el&lt;/code&gt; has an up-to-date account of what packages are
installed by your init-file, then ensure that all your local changes
are pushed (remember, we are aiming for perfect reproducibility!). If
you wish to bypass these checks, provide a prefix argument.&lt;/p&gt;
&lt;p&gt;Version lockfiles are written into &lt;code&gt;~/.emacs.d/straight/versions&lt;/code&gt;. By
default, there will be one, called &lt;code&gt;default.el&lt;/code&gt;. It is recommended
that you keep your version lockfiles under version control with the
rest of your Emacs configuration. If you symlink your init-file into
&lt;code&gt;~/.emacs.d&lt;/code&gt; from somewhere else, you should also make sure to symlink
your version lockfiles into &lt;code&gt;~/.emacs.d/straight/versions&lt;/code&gt;. On a new
machine, do this &lt;em&gt;before&lt;/em&gt; launching Emacs: that way, &lt;code&gt;straight.el&lt;/code&gt; can
make sure to check out the specified revisions of each package when
cloning them for the first time.&lt;/p&gt;
&lt;p&gt;To install the versions of the packages specified in your version
lockfiles, run &lt;code&gt;M-x straight-thaw-versions&lt;/code&gt;. Thawing will
interactively check for local changes before checking out the relevant
revisions, so don't worry about things getting overwritten.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-the-profile-system" class="anchor" aria-hidden="true" href="#the-profile-system"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;The profile system&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;straight.el&lt;/code&gt; has support for writing multiple version lockfiles,
instead of just one. Why? Consider a large Emacs configuration such as
&lt;a href="https://github.com/raxod502/radian"&gt;Radian&lt;/a&gt;, &lt;a href="http://spacemacs.org/" rel="nofollow"&gt;Spacemacs&lt;/a&gt;, or &lt;a href="https://github.com/bbatsov/prelude"&gt;Prelude&lt;/a&gt;, which is used by many different
people. There are two parts to the configuration that is actually
loaded: the "default" part, and the local customizations that each
user has added. Generally, these configurations have a mechanism for
making local customizations without forking the entire project.&lt;/p&gt;
&lt;p&gt;So Radian will have some set of packages that it requires, and my
local customizations of Radian have some other set of packages that
they require. In order for me to maintain Radian, I need to be able to
separate Radian's packages (which go into a versions lockfile in the
Radian repository) from my own local packages (which go into a
versions lockfile in my own private local dotfiles repository).
&lt;code&gt;straight.el&lt;/code&gt; provides this ability through the &lt;em&gt;profile system&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The idea is that whenever a package is registered, either directly or
as a dependency, it is associated with a given profile. Any given
package can be associated with multiple profiles.&lt;/p&gt;
&lt;p&gt;When you call &lt;code&gt;straight-use-package&lt;/code&gt;, which profile the registered
packages are associated with is determined by the value of
&lt;code&gt;straight-current-profile&lt;/code&gt;, which defaults to nil. In Radian, for
example, &lt;code&gt;straight-current-profile&lt;/code&gt; is bound to &lt;code&gt;radian&lt;/code&gt; while the
Radian libraries are being loaded, and it is bound to &lt;code&gt;radian-local&lt;/code&gt;
while the user's local customizations are being loaded. This results
in Radian packages being associated with the &lt;code&gt;radian&lt;/code&gt; profile, and the
user's local packages being associated with the &lt;code&gt;radian-local&lt;/code&gt;
profile.&lt;/p&gt;
&lt;p&gt;When you call &lt;code&gt;M-x straight-freeze-versions&lt;/code&gt;, one or more version
lockfiles are written, according to the value of &lt;code&gt;straight-profiles&lt;/code&gt;.
This variable is an association list whose keys are symbols naming
profiles and whose values are filenames for the corresponding version
lockfiles to be written into &lt;code&gt;~/.emacs.d/straight/versions&lt;/code&gt;. You
should make sure that each potential value of
&lt;code&gt;straight-current-profile&lt;/code&gt; has a corresponding entry in
&lt;code&gt;straight-profiles&lt;/code&gt;, since otherwise some packages might not be
written into your lockfiles.&lt;/p&gt;
&lt;p&gt;When customizing &lt;a href="#overriding-recipes"&gt;&lt;code&gt;straight-recipe-overrides&lt;/code&gt;&lt;/a&gt;, note
that if multiple profiles are set to override the same recipe, then
the last one listed in &lt;code&gt;straight-profiles&lt;/code&gt; will take precedence.
Similarly, when using &lt;code&gt;M-x straight-thaw-versions&lt;/code&gt;, if different
lockfiles specify revisions for the same local repository, the last
one in &lt;code&gt;straight-profiles&lt;/code&gt; will take precedence.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-packages-and-the-init-file" class="anchor" aria-hidden="true" href="#packages-and-the-init-file"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Packages and the init-file&lt;/h3&gt;
&lt;p&gt;Package managers like &lt;code&gt;package.el&lt;/code&gt; store mutable state outside your
init-file, including the set of packages that are installed.
&lt;code&gt;straight.el&lt;/code&gt; does not do this, so it has a rather different way of
determining what packages are installed. To &lt;code&gt;straight.el&lt;/code&gt;, a package
is part of your Emacs configuration if it is passed to
&lt;code&gt;straight-use-package&lt;/code&gt; when your init-file is loaded.&lt;/p&gt;
&lt;p&gt;Note that this means packages installed interactively (using &lt;code&gt;M-x straight-use-package&lt;/code&gt;) are not considered part of your Emacs
configuration, since the invocation of &lt;code&gt;straight-use-package&lt;/code&gt; does not
happen in your init-file.&lt;/p&gt;
&lt;p&gt;This raises an interesting question: if you &lt;em&gt;add&lt;/em&gt; a package to your
init-file, how can you convince &lt;code&gt;straight.el&lt;/code&gt; that it really is part
of your init-file, and not just part of a temporary
&lt;code&gt;straight-use-package&lt;/code&gt; form that you evaluated ad-hoc? The answer is
simple: &lt;em&gt;reload your entire init-file&lt;/em&gt;. That way, &lt;code&gt;straight.el&lt;/code&gt; will
see whether or not that package is registered during your init-file.&lt;/p&gt;
&lt;p&gt;One might ask how &lt;code&gt;straight.el&lt;/code&gt; determines that you have finished
loading your init-file. The answer is simple: &lt;code&gt;run-with-idle-timer&lt;/code&gt; is
used to execute code only after the current interactive operation has
finished. The implementation of this concept is part of the
&lt;em&gt;transaction system&lt;/em&gt; of &lt;code&gt;straight.el&lt;/code&gt;, and it is also used to amortize
certain performance costs when many calls to &lt;code&gt;straight-use-package&lt;/code&gt;
are made sequentially. However, since the transaction system (at least
in recent versions of &lt;code&gt;straight.el&lt;/code&gt;) operates transparently, its
details are relegated to the &lt;a href="#developer-manual"&gt;developer manual&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-using-straightel-to-reproduce-bugs" class="anchor" aria-hidden="true" href="#using-straightel-to-reproduce-bugs"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Using &lt;code&gt;straight.el&lt;/code&gt; to reproduce bugs&lt;/h3&gt;
&lt;p&gt;One of the major reasons I wanted to write &lt;code&gt;straight.el&lt;/code&gt; was that
existing package managers were not good for reproducing bugs. For
instance, some of them would load all installed packages when the
package manager was initialized! Obviously that is not acceptable for
a "minimal test case".&lt;/p&gt;
&lt;p&gt;On the contrary, bootstrapping &lt;code&gt;straight.el&lt;/code&gt; does not load anything
except for &lt;code&gt;straight.el&lt;/code&gt; itself (the default recipe repositories are
registered, but not cloned until needed). You should normally be
loading &lt;code&gt;straight.el&lt;/code&gt; by means of the &lt;a href="#getting-started"&gt;bootstrap
snippet&lt;/a&gt;, but when you are in &lt;code&gt;emacs -Q&lt;/code&gt;, here is how you
can initialize &lt;code&gt;straight.el&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;M-x load-file RET ~/.emacs.d/straight/repos/straight.el/bootstrap.el RET
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can also do this from the command line, perhaps by creating an
alias for it:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ emacs -Q -l ~/.emacs.d/straight/repos/straight.el/bootstrap.el
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let's say you are making a bug report for Projectile. To load just
Projectile and all of its dependencies, run:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;M-x straight-use-package RET projectile RET
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that this will use the currently checked-out revisions of
Projectile and all of its dependencies, so you should take note of
those in order to make your bug report.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-using-straightel-to-develop-packages" class="anchor" aria-hidden="true" href="#using-straightel-to-develop-packages"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Using &lt;code&gt;straight.el&lt;/code&gt; to develop packages&lt;/h3&gt;
&lt;p&gt;The workflow for developing a package using &lt;code&gt;straight.el&lt;/code&gt; is quite
straightforward:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Add the package to your configuration as usual, via a call to
&lt;code&gt;straight-use-package&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;M-x find-function&lt;/code&gt; or a similar command to jump to the code you
wish to edit.&lt;/li&gt;
&lt;li&gt;Edit the code.&lt;/li&gt;
&lt;li&gt;Either evaluate the edited code using &lt;code&gt;M-x eval-buffer&lt;/code&gt;, &lt;code&gt;M-x eval-defun&lt;/code&gt;, or a similar command, or just restart Emacs to pick up
your changes.&lt;/li&gt;
&lt;li&gt;When you are satisfied with your changes, use &lt;a href="https://magit.vc/" rel="nofollow"&gt;Magit&lt;/a&gt; or just Git
directly in order to commit and possibly push them. I suggest using
&lt;a href="https://github.com/magit/forge"&gt;Forge&lt;/a&gt; to create pull requests directly from Emacs, with Magit
integration.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-integration-with-other-packages" class="anchor" aria-hidden="true" href="#integration-with-other-packages"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Integration with other packages&lt;/h3&gt;
&lt;h4&gt;&lt;a id="user-content-integration-with-use-package-1" class="anchor" aria-hidden="true" href="#integration-with-use-package-1"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Integration with &lt;code&gt;use-package&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;By default, &lt;code&gt;straight.el&lt;/code&gt; installs a new keyword &lt;code&gt;:straight&lt;/code&gt; for
&lt;code&gt;use-package&lt;/code&gt; which may be used to install packages via &lt;code&gt;straight.el&lt;/code&gt;.
The algorithm is extremely simple. This:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(use-package el-patch
  :straight t)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;macroexpands (essentially) to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(straight-use-package 'el-patch)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(use-package el-patch
  :straight (:host github :repo "raxod502/el-patch"
             :branch "develop"))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;becomes:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(straight-use-package
 '(el-patch :host github :repo "raxod502/el-patch"
            :branch "develop"))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If the feature you are requiring with &lt;code&gt;use-package&lt;/code&gt; is different from
the package name, you can provide a full recipe:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(use-package tex-site
  :straight (auctex :host github
                    :repo "emacsmirror/auctex"
                    :files (:defaults (:exclude "*.el.in"))))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And you may also provide just the package name:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(use-package tex-site
  :straight auctex)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you don't provide &lt;code&gt;:straight&lt;/code&gt;, then by default nothing happens. You
may customize &lt;code&gt;straight-use-package-by-default&lt;/code&gt; to make it so that
&lt;code&gt;:straight t&lt;/code&gt; is assumed unless you explicitly override it with
&lt;code&gt;:straight nil&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Previously, &lt;code&gt;straight.el&lt;/code&gt; used a different syntax for its
&lt;code&gt;use-package&lt;/code&gt; integration. For backwards compatibility, you can use
this syntax instead by customizing &lt;code&gt;straight-use-package-version&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can disable &lt;code&gt;use-package&lt;/code&gt; integration entirely by customizing
&lt;code&gt;straight-enable-use-package-integration&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-integration-with-packageel" class="anchor" aria-hidden="true" href="#integration-with-packageel"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;"Integration" with &lt;code&gt;package.el&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;By default, &lt;code&gt;package.el&lt;/code&gt; will automatically insert a call to
&lt;code&gt;package-initialize&lt;/code&gt; into your init-file as soon as Emacs starts,
which is ridiculous. It will also do this when you perform any package
management operation. A separate system inserts some &lt;code&gt;custom&lt;/code&gt; forms
into your init-file when you install a package. &lt;code&gt;straight.el&lt;/code&gt; disables
all of these "features" by setting &lt;code&gt;package-enable-at-startup&lt;/code&gt; to nil
and enabling some advices. You can override this behavior by
customizing &lt;code&gt;straight-enable-package-integration&lt;/code&gt;, however.&lt;/p&gt;
&lt;p&gt;To help avoid you shooting yourself in the foot by using both
&lt;code&gt;:ensure&lt;/code&gt; and &lt;code&gt;:straight&lt;/code&gt; at the same time in a &lt;code&gt;use-package&lt;/code&gt; form
(which would cause the same package to be installed twice using two
different package managers), &lt;code&gt;straight.el&lt;/code&gt; will helpfully disable
&lt;code&gt;:ensure&lt;/code&gt; whenever you include &lt;code&gt;:straight&lt;/code&gt; in a &lt;code&gt;use-package&lt;/code&gt; form.
See &lt;a href="https://github.com/raxod502/straight.el/issues/425"&gt;#425&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-integration-with-org" class="anchor" aria-hidden="true" href="#integration-with-org"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Integration with Org&lt;/h4&gt;
&lt;p&gt;Org expects you to run &lt;code&gt;make&lt;/code&gt; in its source repository before you run
it, but &lt;code&gt;straight.el&lt;/code&gt; does not yet support running such build systems
automatically (see &lt;a href="https://github.com/raxod502/straight.el/issues/72"&gt;#72&lt;/a&gt;). This presents two problems:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Byte-compiling Org without running &lt;code&gt;make&lt;/code&gt; first produces some
annoying warnings.&lt;/li&gt;
&lt;li&gt;Running &lt;code&gt;make&lt;/code&gt; generates a file &lt;code&gt;org-version.el&lt;/code&gt; which provides the
functions &lt;code&gt;org-git-version&lt;/code&gt; and &lt;code&gt;org-release&lt;/code&gt;. Thus the version of
Org provided by &lt;code&gt;straight.el&lt;/code&gt; does not include these functions, but
the obsolete version of Org provided by Emacs (see &lt;a href="#the-wrong-version-of-my-package-was-loaded"&gt;the
FAQ&lt;/a&gt;) does. This can result in the obsolete
version getting partially loaded, which is confusing.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;See &lt;a href="https://github.com/raxod502/straight.el/issues/211"&gt;#211&lt;/a&gt; for discussion.&lt;/p&gt;
&lt;p&gt;By default, &lt;code&gt;straight.el&lt;/code&gt; installs a hack (namely, defining the
functions &lt;code&gt;org-git-version&lt;/code&gt; and &lt;code&gt;org-release&lt;/code&gt; itself) whenever you ask
it to install Org. This functionality is implemented using
&lt;a href="#hooks-run-by-straight-use-package"&gt;&lt;code&gt;straight-use-package-prepare-functions&lt;/code&gt;&lt;/a&gt;. You
can disable it by setting the value of the variable &lt;code&gt;straight-fix-org&lt;/code&gt;
to nil.&lt;/p&gt;
&lt;p&gt;Please be careful with setting &lt;code&gt;straight-vc-git-default-clone-depth&lt;/code&gt;,
which may break some packages' installing processes such as &lt;code&gt;elfeed&lt;/code&gt;
that depend on &lt;code&gt;org&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-integration-with-hydra" class="anchor" aria-hidden="true" href="#integration-with-hydra"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Integration with Hydra&lt;/h4&gt;
&lt;p&gt;See &lt;a href="https://github.com/abo-abo/hydra/wiki/straight.el"&gt;the Hydra wiki&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-miscellaneous" class="anchor" aria-hidden="true" href="#miscellaneous"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Miscellaneous&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;By default, &lt;code&gt;straight.el&lt;/code&gt; explains what it is doing in the echo
area, like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Looking for cider recipe → Cloning melpa...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If your terminal does not support Unicode characters nicely, you can
customize &lt;code&gt;straight-arrow&lt;/code&gt; to display something else for the arrow.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;By default, &lt;code&gt;straight.el&lt;/code&gt; reports process output the
&lt;code&gt;*straight-process*&lt;/code&gt; buffer. You can customize the name of this
buffer via the &lt;code&gt;straight-process-buffer&lt;/code&gt; user option. If you want to
hide this buffer by default, consider adding a leading space to the
name.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can prevent &lt;code&gt;straight.el&lt;/code&gt; from making any modifications to the
filesystem (though it may still read) by customizing the user option
&lt;code&gt;straight-safe-mode&lt;/code&gt; to non-nil. This may be useful for running
tasks automatically in batch mode, to avoid multiple concurrent
Emacs processes all making changes to the filesystem. For an example
of how this feature may be used to safely implement asynchronous
byte-compilation of the init-file on successful startup, see
&lt;a href="https://github.com/raxod502/radian"&gt;Radian&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-developer-manual" class="anchor" aria-hidden="true" href="#developer-manual"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Developer manual&lt;/h2&gt;
&lt;p&gt;This section tells you about all the interesting implementation
details and design decisions that power &lt;code&gt;straight.el&lt;/code&gt; behind the
scenes. It assumes you have already read the &lt;a href="#user-manual"&gt;user manual&lt;/a&gt; and
the &lt;a href="#conceptual-overview"&gt;conceptual overview&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Unfortunately, I haven't yet had time to write it. See &lt;a href="https://github.com/raxod502/straight.el/issues/51"&gt;#51&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-trivia" class="anchor" aria-hidden="true" href="#trivia"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Trivia&lt;/h2&gt;
&lt;p&gt;This section has random, (possibly) interesting tidbits about
&lt;code&gt;straight.el&lt;/code&gt; that don't fit in the other sections.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-comments-and-docstrings" class="anchor" aria-hidden="true" href="#comments-and-docstrings"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Comments and docstrings&lt;/h3&gt;
&lt;p&gt;How did I get that statistic about the percentage of &lt;code&gt;straight.el&lt;/code&gt;
that is comments and docstrings? Simple: by abusing the syntax
highlighting.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(let ((lines (make-hash-table :test #'equal)))
  (goto-char (point-min))
  (while (&amp;lt; (point) (point-max))
    (when (memq (face-at-point)
                '(font-lock-comment-face
                  font-lock-doc-face))
      (puthash (line-number-at-pos) t lines))
    (forward-char))
  (* (/ (float (length (hash-table-keys lines)))
        (line-number-at-pos))
     100))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that you will have to scroll through the entire buffer first,
since &lt;code&gt;font-lock-mode&lt;/code&gt; computes syntax highlighting lazily.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-contributing" class="anchor" aria-hidden="true" href="#contributing"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contributing&lt;/h2&gt;
&lt;p&gt;Please do! Development takes place on the &lt;code&gt;develop&lt;/code&gt; branch. You can
switch to that branch with&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(setq straight-repository-branch "develop")
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and base your pull requests from it. If you have an outstanding pull
request whose features you would like to use in your configuration,
there is full support for defining &lt;code&gt;straight.el&lt;/code&gt; as coming from any
branch in any fork:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(setq straight-repository-user "my-github-username")
(setq straight-repository-branch "feat/my-cool-feature")
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Please try to follow the style of the surrounding code and
documentation, but anything is welcome. All text, including comments
and docstrings, should be formatted using Emacs' &lt;code&gt;M-x fill-paragraph&lt;/code&gt;
command (bound to &lt;code&gt;M-q&lt;/code&gt; by default).&lt;/p&gt;
&lt;p&gt;We require that the linting pass on all new commits. You can check
this easily by installing &lt;a href="https://www.docker.com/" rel="nofollow"&gt;Docker&lt;/a&gt; and running&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ make docker
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then you will be in a shell with the &lt;code&gt;straight.el&lt;/code&gt; source code, and to
test your commits you'll be able to run&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ make lint
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or to see what other targets are available&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ make help
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you don't want to install Docker, you can simply skip the &lt;code&gt;make docker&lt;/code&gt; step, and everything will work the same! However, you'll then
have to make sure you have the relevant dependencies installed
locally.&lt;/p&gt;
&lt;p&gt;When you create a pull request, it will be &lt;a href="https://circleci.com/gh/raxod502/straight.el" rel="nofollow"&gt;tested
automatically&lt;/a&gt; on &lt;a href="https://circleci.com/" rel="nofollow"&gt;CircleCI&lt;/a&gt; and the status will be
reported. Please make sure the CI build is passing before asking for
review.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-faq" class="anchor" aria-hidden="true" href="#faq"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;FAQ&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-my-init-time-got-slower" class="anchor" aria-hidden="true" href="#my-init-time-got-slower"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;My init time got slower&lt;/h3&gt;
&lt;p&gt;Your first step should be to customize the value of
&lt;code&gt;straight-check-for-modifications&lt;/code&gt;. The best setting is &lt;code&gt;(watch-files find-when-checking)&lt;/code&gt;; this is not enabled by default because it is
impolite to spawn persistent background processes without asking, and
because you must install &lt;a href="https://www.python.org/" rel="nofollow"&gt;Python 3&lt;/a&gt; and
&lt;a href="https://github.com/mattgreen/watchexec"&gt;&lt;code&gt;watchexec&lt;/code&gt;&lt;/a&gt; for it to work. If you can't stand the extra
dependencies and background process, consider the setting
&lt;code&gt;(check-on-save find-when-checking)&lt;/code&gt; instead, which is just as fast
but won't catch package modifications unless they are made within
Emacs via the &lt;code&gt;save-buffer&lt;/code&gt; command.&lt;/p&gt;
&lt;p&gt;Even with lazy modification detection, as described above,
&lt;code&gt;straight.el&lt;/code&gt; is not quite as fast as &lt;code&gt;package.el&lt;/code&gt; (by a few
percentage points). There are some planned changes which will make
&lt;code&gt;straight.el&lt;/code&gt; just as fast as &lt;code&gt;package.el&lt;/code&gt;, if not faster. See &lt;a href="https://github.com/raxod502/straight.el/issues/9"&gt;#9&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-how-do-i-update-melpa-et-al" class="anchor" aria-hidden="true" href="#how-do-i-update-melpa-et-al"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;How do I update MELPA et al.?&lt;/h3&gt;
&lt;p&gt;Using &lt;a href="#version-control-operations"&gt;&lt;code&gt;M-x straight-pull-package&lt;/code&gt;&lt;/a&gt;, like for
any other package. &lt;a href="#updating-recipe-repositories"&gt;Read more.&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-the-wrong-version-of-my-package-was-loaded" class="anchor" aria-hidden="true" href="#the-wrong-version-of-my-package-was-loaded"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;The wrong version of my package was loaded&lt;/h3&gt;
&lt;p&gt;To explain this problem, let us consider a concrete example. In &lt;a href="https://github.com/raxod502/straight.el/issues/355"&gt;this
issue&lt;/a&gt;, a user found that the code&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(straight-use-package 'company-lsp)
(straight-use-package 'eglot)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;sometimes resulted in runtime errors because an old version of Flymake
was being used.&lt;/p&gt;
&lt;p&gt;The root problem here is that you want the most recent version of
Flymake to be installed by &lt;code&gt;straight.el&lt;/code&gt;, but Emacs also ships an
older version, and that older version is getting loaded instead.&lt;/p&gt;
&lt;p&gt;The older version will be loaded if &lt;code&gt;(require 'flymake)&lt;/code&gt; (or similar)
is invoked before &lt;code&gt;straight.el&lt;/code&gt; has made Flymake available (by means
of &lt;code&gt;(straight-use-package 'flymake)&lt;/code&gt; or similar). But why would
&lt;code&gt;straight.el&lt;/code&gt; not make Flymake available?&lt;/p&gt;
&lt;p&gt;The only way that &lt;code&gt;straight.el&lt;/code&gt; knows to make Flymake available is if
either you manually invoke &lt;code&gt;straight-use-package&lt;/code&gt; in your init-file,
or if one of the packages that you request in your init-file declares
Flymake as a dependency. Now, any package that uses Flymake ought to
declare it as a dependency. Thus, there should be no way for a package
to load the Emacs-provided version of Flymake. However, sometimes
package authors overlook this problem (it does not always cause an
error, and sometimes package authors do not test exhaustively enough).&lt;/p&gt;
&lt;p&gt;In this case, the problem was that &lt;code&gt;company-lsp&lt;/code&gt; declared a dependency
on &lt;code&gt;lsp-mode&lt;/code&gt;, and &lt;code&gt;lsp-mode&lt;/code&gt; used Flymake without declaring a
dependency on &lt;code&gt;flymake&lt;/code&gt;. There are two ways to work around the
problem:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(Preferable) Fix &lt;code&gt;lsp-mode&lt;/code&gt; to declare a dependency on &lt;code&gt;flymake&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;(Workaround) Manually invoke &lt;code&gt;(straight-use-package 'flymake)&lt;/code&gt;
before &lt;code&gt;(straight-use-package 'company-lsp)&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you test this yourself, you might find it difficult to reproduce
the problem. That is because there is only an issue when Flymake is
actually loaded, and this doesn't necessarily happen when invoking
&lt;code&gt;(straight-use-package 'company-lsp)&lt;/code&gt; &lt;em&gt;unless&lt;/em&gt; &lt;code&gt;straight.el&lt;/code&gt; needs to
rebuild the relevant packages (which includes byte-compilation, which
sometimes means actually loading dependencies). Keep this in mind when
testing.&lt;/p&gt;
&lt;p&gt;This problem commonly occurs with Org, since (1) Org is popular, (2)
Emacs ships an obsolete version of Org, (3) many users want to use the
up-to-date version, and (4) Org breaks backwards compatibility
frequently. To solve it, simply make sure that you invoke
&lt;code&gt;(straight-use-package 'org)&lt;/code&gt; or &lt;code&gt;(straight-use-package 'org-plus-contrib)&lt;/code&gt; before running any code that could load Org,
including installing any package that lists it as a dependency. See
also the &lt;a href="#integration-with-org"&gt;integration with Org&lt;/a&gt; section for
more fun problems you can encounter with Org.&lt;/p&gt;
&lt;p&gt;See &lt;a href="https://github.com/raxod502/straight.el/issues/236"&gt;this issue&lt;/a&gt; for discussion about ways of mitigating the bad
UX of this situation.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-i-get-could-not-read-usernamepassword-errors" class="anchor" aria-hidden="true" href="#i-get-could-not-read-usernamepassword-errors"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;I get "could not read username/password" errors&lt;/h3&gt;
&lt;p&gt;This is because &lt;code&gt;straight.el&lt;/code&gt; is not currently able to detect when SSH
or Git asks for your username and/or password/passphrase and then pipe
that prompt through to the minibuffer (&lt;a href="https://github.com/raxod502/straight.el/issues/334"&gt;#334&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;To work around the problem, set up &lt;a href="https://git-scm.com/docs/git-credential-cache" rel="nofollow"&gt;git-credential-cache&lt;/a&gt; if you use
HTTPS, and &lt;a href="https://www.ssh.com/ssh/agent" rel="nofollow"&gt;ssh-agent&lt;/a&gt; if you use SSH. That way, you won't be prompted
for your username/password. When setting up ssh-agent, be careful to
make sure that the relevant environment variables get set in Emacs.
This might be tricky since starting Emacs from the desktop (rather
than from the command line) sometimes results in it not inheriting any
environment variables from your shell.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-the-interactive-version-control-operations-are-confusing" class="anchor" aria-hidden="true" href="#the-interactive-version-control-operations-are-confusing"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;The interactive version-control operations are confusing&lt;/h3&gt;
&lt;p&gt;This part of &lt;code&gt;straight.el&lt;/code&gt; still needs some work; see &lt;a href="https://github.com/raxod502/straight.el/issues/54"&gt;#54&lt;/a&gt; about the
UX of pushing and pulling.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-how-do-i-pin-package-versions-or-use-only-tagged-releases" class="anchor" aria-hidden="true" href="#how-do-i-pin-package-versions-or-use-only-tagged-releases"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;How do I pin package versions or use only tagged releases?&lt;/h3&gt;
&lt;p&gt;This is a planned feature. In the meantime, contributors have proposed
various workarounds. See &lt;a href="https://github.com/raxod502/straight.el/issues/246"&gt;#246&lt;/a&gt; and &lt;a href="https://github.com/raxod502/straight.el/issues/31"&gt;#31&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;straight-x.el&lt;/code&gt; now contains an experimental solution. In order to use
it you will need to add similar snippets to your Emacs configuration.&lt;/p&gt;
&lt;p&gt;First you need to add a new profile to &lt;code&gt;straight-profiles&lt;/code&gt; which also
needs to be the last profile in the list. This should be done before
you bootstrap &lt;code&gt;straight.el&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;;; Tell straight.el about the profiles we are going to be using.
(setq straight-profiles
      '((nil . "default.el")
        ;; Packages which are pinned to a specific commit.
        (pinned . "pinned.el")))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After straight's install procedure you will need to add
&lt;code&gt;straight-x.el&lt;/code&gt; and load the required commands.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(autoload #'straight-x-pull-all "straight-x")
(autoload #'straight-x-freeze-versions "straight-x")
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A variable called &lt;code&gt;straight-x-pinned-packages&lt;/code&gt; has been defined in
&lt;code&gt;straight-x.el&lt;/code&gt; and will contain your list of pinned packages.&lt;/p&gt;
&lt;p&gt;From now on, you can pin a package to a specific commit like in the
following example which will pin &lt;code&gt;org-mode&lt;/code&gt; to the 9.2.3 release
version:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(let ((straight-current-profile 'pinned))
  (straight-use-package 'org-plus-contrib)
  (straight-use-package 'org)
  ;; Pin org-mode version.
  (add-to-list 'straight-x-pinned-packages
               '("org" . "924308a150ab82014b69c46c04d1ab71e874a2e6")))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you invoke &lt;code&gt;straight-x-freeze-versions&lt;/code&gt; it will first write the
default lockfile and then pinned lockfile which takes precedence over
the default one if packages are thawed. &lt;code&gt;straight-x-pull-all&lt;/code&gt; will
first invoke &lt;code&gt;straight-pull-all&lt;/code&gt; and then restore all pinned packages.&lt;/p&gt;
&lt;p&gt;You might want to assign the following aliases for more convenience:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(defalias 'straight-pull-all #'straight-x-pull-all)
(defalias 'straight-freeze-versions #'straight-x-freeze-versions)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Please keep in mind that this is only a temporary solution and
experimental!&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-how-can-i-use-the-built-in-version-of-a-package" class="anchor" aria-hidden="true" href="#how-can-i-use-the-built-in-version-of-a-package"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;How can I use the built-in version of a package?&lt;/h3&gt;
&lt;p&gt;To tell &lt;code&gt;straight.el&lt;/code&gt; that you want to use the version of Org shipped
with Emacs, rather than cloning the upstream repository:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(straight-use-package '(org :type built-in))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href="#the-recipe-format"&gt;Read more.&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-news" class="anchor" aria-hidden="true" href="#news"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;News&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-july-6-2019" class="anchor" aria-hidden="true" href="#july-6-2019"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;July 6, 2019&lt;/h3&gt;
&lt;p&gt;The default value of the user option &lt;code&gt;straight-emacsmirror-use-mirror&lt;/code&gt;
is now non-nil.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-may-24-2019" class="anchor" aria-hidden="true" href="#may-24-2019"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;May 24, 2019&lt;/h3&gt;
&lt;p&gt;I have completely rewritten the transaction system. The practical
impact of this is that you no longer have to care about it. Simply
remove all references to the following functions and variables from
your configuration, and everything should "just work":&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;straight-transaction&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight-begin-transaction&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight-finalize-transaction&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight-mark-transaction-as-init&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight-treat-as-init&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-may-22-2019" class="anchor" aria-hidden="true" href="#may-22-2019"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;May 22, 2019&lt;/h3&gt;
&lt;p&gt;I now maintain a mirror of Emacsmirror. (Bear with me here.) The
advantage of using my mirror is that cloning it is several orders of
magnitude faster than cloning the official Emacsmirror. You can tell
&lt;code&gt;straight.el&lt;/code&gt; to do so by customizing the user option
&lt;code&gt;straight-emacsmirror-use-mirror&lt;/code&gt; to non-nil.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-may-1-2019" class="anchor" aria-hidden="true" href="#may-1-2019"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;May 1, 2019&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;straight-thaw-versions&lt;/code&gt; now fetches in a repository if a commit in
your lockfile can not be found and normalizes the repository to the
recipe's default branch. This should ensure that versions you have
frozen can be quickly restored and that they can also be saved back to
the version lock file. This addresses issues &lt;a href="https://github.com/raxod502/straight.el/issues/58"&gt;#58&lt;/a&gt;, [#66], and [#294].&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-march-15-2019" class="anchor" aria-hidden="true" href="#march-15-2019"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;March 15, 2019&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;straight.el&lt;/code&gt; &lt;a href="#integration-with-org"&gt;now installs a hack for Org by
default&lt;/a&gt;, so Org should work out of the box
with no compile warnings. If you have code to work around the problem
in your init-file, you can safely remove it. To avoid installing the
hack, customize the variable &lt;code&gt;straight-fix-org&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-december-22-2018" class="anchor" aria-hidden="true" href="#december-22-2018"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;December 22, 2018&lt;/h3&gt;
&lt;p&gt;The default value of the user option
&lt;code&gt;straight-recipes-gnu-elpa-use-mirror&lt;/code&gt; is now non-nil.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-september-12-2018" class="anchor" aria-hidden="true" href="#september-12-2018"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;September 12, 2018&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;straight.el&lt;/code&gt; now supports specifying configuration for your fork of a
package via the new &lt;code&gt;:fork&lt;/code&gt; keyword. The previously supported
&lt;code&gt;:upstream&lt;/code&gt; keyword is now deprecated, but still works for backwards
compatibility. To support this change, the user options
&lt;code&gt;straight-vc-git-primary-remote&lt;/code&gt; and &lt;code&gt;straight-vc-git-upstream-remote&lt;/code&gt;
are deprecated (but still work for backwards compatibility), as they
have been superseded by the new user options
&lt;code&gt;straight-vc-git-default-remote-name&lt;/code&gt; and
&lt;code&gt;straight-vc-git-default-fork-name&lt;/code&gt;. Your usage should be updated.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-july-19-2018" class="anchor" aria-hidden="true" href="#july-19-2018"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;July 19, 2018&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;straight.el&lt;/code&gt; now automatically caches the recipes it looks up in
recipe repositories. This should lead to a reduction in
&lt;code&gt;straight.el&lt;/code&gt;-related startup time of as much as 50% if you also use
live modification detection, as disk IO and usage of external
processes are reduced significantly.&lt;/p&gt;
&lt;p&gt;No changes to user configuration are necessary; however, if you define
a custom recipe repository (call it &lt;code&gt;NAME&lt;/code&gt;) then caching is not
enabled by default. To enable caching, define a
&lt;code&gt;straight-recipes-NAME-version&lt;/code&gt; function which returns a non-nil value
indicating the current version of the logic in
&lt;code&gt;straight-recipes-NAME-retrieve&lt;/code&gt;. This version value needs to be
changed each time you change the logic, so that the recipe lookup
cache for that recipe repository may automatically be invalidated.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-july-12-2018" class="anchor" aria-hidden="true" href="#july-12-2018"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;July 12, 2018&lt;/h3&gt;
&lt;p&gt;I now maintain a &lt;a href="https://github.com/emacs-straight"&gt;full mirror of GNU ELPA on GitHub&lt;/a&gt;.
You can tell &lt;code&gt;straight.el&lt;/code&gt; to use it by customizing the user option
&lt;code&gt;straight-recipes-gnu-elpa-use-mirror&lt;/code&gt;, and this will allow you to use
packages such as AUCTeX correctly, which was previously impossible.
Note that the user option must be customized &lt;em&gt;before&lt;/em&gt; the
&lt;code&gt;straight.el&lt;/code&gt; &lt;a href="#getting-started"&gt;bootstrap&lt;/a&gt;.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>raxod502</author><guid isPermaLink="false">https://github.com/raxod502/straight.el</guid><pubDate>Sat, 01 Feb 2020 00:20:00 GMT</pubDate></item></channel></rss>