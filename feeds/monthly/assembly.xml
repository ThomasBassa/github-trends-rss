<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>GitHub Trending: Assembly, This month</title><link>https://github.com/trending/assembly?since=monthly</link><description>The top repositories on GitHub for assembly, measured monthly</description><pubDate>Mon, 03 Feb 2020 01:12:24 GMT</pubDate><lastBuildDate>Mon, 03 Feb 2020 01:12:24 GMT</lastBuildDate><generator>PyRSS2Gen-1.1.0</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><ttl>720</ttl><item><title>microsoft/MS-DOS #1 in Assembly, This month</title><link>https://github.com/microsoft/MS-DOS</link><description>&lt;p&gt;&lt;i&gt;The original sources of MS-DOS 1.25 and 2.0, for reference purposes&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://github.com/Microsoft/MS-DOS/blob/master/msdos-logo.png"&gt;&lt;img width="150" height="150" align="left" alt="MS-DOS logo" src="https://github.com/Microsoft/MS-DOS/raw/master/msdos-logo.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;   
&lt;h1&gt;&lt;a id="user-content-ms-dos-v125-and-v20-source-code" class="anchor" aria-hidden="true" href="#ms-dos-v125-and-v20-source-code"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;MS-DOS v1.25 and v2.0 Source Code&lt;/h1&gt;
&lt;p&gt;This repo contains the original source-code and compiled binaries for MS-DOS v1.25 and MS-DOS v2.0.&lt;/p&gt;
&lt;p&gt;These are the same files &lt;a href="http://www.computerhistory.org/atchm/microsoft-ms-dos-early-source-code/" rel="nofollow"&gt;originally shared at the Computer History Museum on March 25th, 2014&lt;/a&gt; and are being (re)published in this repo to make them easier to find, reference-to in external writing and works, and to allow exploration and experimentation for those interested in early PC Operating Systems.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-license" class="anchor" aria-hidden="true" href="#license"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;License&lt;/h1&gt;
&lt;p&gt;All files within this repo are released under the &lt;a href="https://en.wikipedia.org/wiki/MIT_License" rel="nofollow"&gt;MIT (OSI) License&lt;/a&gt; as per the &lt;a href="https://github.com/Microsoft/MS-DOS/blob/master/LICENSE.md"&gt;LICENSE file&lt;/a&gt; stored in the root of this repo.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-contribute" class="anchor" aria-hidden="true" href="#contribute"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contribute!&lt;/h1&gt;
&lt;p&gt;The source files in this repo are for historical reference and will be kept static, so please &lt;strong&gt;don’t send&lt;/strong&gt; Pull Requests suggesting any modifications to the source files, but feel free to fork this repo and experiment &lt;g-emoji class="g-emoji" alias="blush" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f60a.png"&gt;😊&lt;/g-emoji&gt;.&lt;/p&gt;
&lt;p&gt;If, however, you’d like to submit additional non-source content or modifications to non-source files (e.g., this README), please submit via PR, and we’ll review and consider.&lt;/p&gt;
&lt;p&gt;This project has adopted the &lt;a href="https://opensource.microsoft.com/codeofconduct/" rel="nofollow"&gt;Microsoft Open Source Code of Conduct&lt;/a&gt;.  For more information see the &lt;a href="https://opensource.microsoft.com/codeofconduct/faq/" rel="nofollow"&gt;Code of Conduct FAQ&lt;/a&gt; or contact &lt;a href="mailto:opencode@microsoft.com"&gt;opencode@microsoft.com&lt;/a&gt; with any additional questions or comments.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>microsoft</author><guid isPermaLink="false">https://github.com/microsoft/MS-DOS</guid><pubDate>Mon, 03 Feb 2020 00:01:00 GMT</pubDate></item><item><title>hsoft/collapseos #2 in Assembly, This month</title><link>https://github.com/hsoft/collapseos</link><description>&lt;p&gt;&lt;i&gt;Bootstrap post-collapse technology&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-collapse-os" class="anchor" aria-hidden="true" href="#collapse-os"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Collapse OS&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;Bootstrap post-collapse technology&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Collapse OS is a z80 kernel and a collection of programs, tools and
documentation that allows you to assemble an OS that, when completed, will be
able to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Run on minimal and improvised machines.&lt;/li&gt;
&lt;li&gt;Interface through improvised means (serial, keyboard, display).&lt;/li&gt;
&lt;li&gt;Edit text files.&lt;/li&gt;
&lt;li&gt;Compile assembler source files for a wide range of MCUs and CPUs.&lt;/li&gt;
&lt;li&gt;Read and write from a wide range of storage devices.&lt;/li&gt;
&lt;li&gt;Replicate itself.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Additionally, the goal of this project is to be as self-contained as possible.
With a copy of this project, a capable and creative person should be able to
manage to build and install Collapse OS without external resources (i.e.
internet) on a machine of her design, built from scavenged parts with low-tech
tools.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-see-it-in-action" class="anchor" aria-hidden="true" href="#see-it-in-action"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;See it in action&lt;/h2&gt;
&lt;p&gt;Michael Schierl has put together &lt;a href="https://schierlm.github.io/CollapseOS-Web-Emulator/" rel="nofollow"&gt;a set of emulators running in the browser that
run Collapse OS in different contexts&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Using those while following along with the &lt;a href="doc/"&gt;User Guide&lt;/a&gt; is your quickest
path to giving Collapse OS a try.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-organisation-of-this-repository" class="anchor" aria-hidden="true" href="#organisation-of-this-repository"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Organisation of this repository&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;kernel&lt;/code&gt;: Pieces of code to be assembled by the user into a kernel.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;apps&lt;/code&gt;: Pieces of code to be assembled into "userspace" application.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;recipes&lt;/code&gt;: collection of recipes that assemble parts together on a specific
machine.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;doc&lt;/code&gt;: User guide for when you've successfully installed Collapse OS.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tools&lt;/code&gt;: Tools for working with Collapse OS from "modern" environments. For
example, tools for facilitating data upload to a Collapse OS machine
through a serial port.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;emul&lt;/code&gt;: Emulated applications, such as zasm and the shell.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tests&lt;/code&gt;: Automated test suite for the whole project.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-status" class="anchor" aria-hidden="true" href="#status"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Status&lt;/h2&gt;
&lt;p&gt;The project unfinished but is progressing well! See &lt;a href="https://collapseos.org" rel="nofollow"&gt;Collapse OS' website&lt;/a&gt;
for more information.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-discussion" class="anchor" aria-hidden="true" href="#discussion"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Discussion&lt;/h2&gt;
&lt;p&gt;For a general discussion of Collapse OS and the ecosystem of technologies and ideas that may develop around it refer to &lt;a href="https://www.reddit.com/r/collapseos" rel="nofollow"&gt;r/collapseos&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A more traditional &lt;a href="http://lists.sonic.net/mailman/listinfo/collapseos" rel="nofollow"&gt;mailing list&lt;/a&gt; and IRC (#collapseos on freenode) channels are also maintained.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>hsoft</author><guid isPermaLink="false">https://github.com/hsoft/collapseos</guid><pubDate>Mon, 03 Feb 2020 00:02:00 GMT</pubDate></item><item><title>briansmith/ring #3 in Assembly, This month</title><link>https://github.com/briansmith/ring</link><description>&lt;p&gt;&lt;i&gt;Safe, fast, small crypto using Rust&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;p&gt;THE SOFTWARE IS PROVIDED "AS IS" AND BRIAN SMITH AND THE AUTHORS DISCLAIM
ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL BRIAN SMITH OR THE AUTHORS
BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY
DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN
AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-ring" class="anchor" aria-hidden="true" href="#ring"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;em&gt;ring&lt;/em&gt;&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;ring&lt;/em&gt; is focused on the implementation, testing, and optimization of a core
set of cryptographic operations exposed via an easy-to-use (and hard-to-misuse)
API. &lt;em&gt;ring&lt;/em&gt; exposes a &lt;a href="https://www.rust-lang.org/" rel="nofollow"&gt;Rust&lt;/a&gt; API and is written in
a hybrid of Rust, C, and assembly language.&lt;/p&gt;
&lt;p&gt;Particular attention is being paid to making it easy to build and integrate
&lt;em&gt;ring&lt;/em&gt; into applications and higher-level frameworks, and to ensuring that
&lt;em&gt;ring&lt;/em&gt; works optimally on small devices, and eventually microcontrollers, to
support Internet of Things (IoT) applications.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;ring&lt;/em&gt; is focused on general-purpose cryptography. WebPKI X.509 certificate
validation is done in the &lt;a href="https://github.com/briansmith/webpki"&gt;webpki&lt;/a&gt;
project, which is built on top of &lt;em&gt;ring&lt;/em&gt;. Also, multiple groups are working on
implementations of cryptographic protocols like TLS, SSH, and DNSSEC on top of
&lt;em&gt;ring&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;ring&lt;/em&gt; is the successor of an earlier project called GFp. GFp implemented some
elliptic curve cryptography over prime finite fields, also known as prime
Galois fields and often denoted GF(p). When we implemented RSA, the name GFp
did not make as much sense, since modular arithmetic over RSA public moduli is
not GF(p) arithmetic but rather finite commutative &lt;em&gt;ring&lt;/em&gt; arithmetic. Also note
that &lt;em&gt;ring&lt;/em&gt; started as a subset of BoringSSL, and “&lt;em&gt;ring&lt;/em&gt;” is a substring of
“Bo&lt;em&gt;ring&lt;/em&gt;SSL”.&lt;/p&gt;
&lt;p&gt;Most of the C and assembly language code in &lt;em&gt;ring&lt;/em&gt; comes from BoringSSL, and
BoringSSL is derived from OpenSSL. &lt;em&gt;ring&lt;/em&gt; merges changes from BoringSSL
regularly. Also, several changes that were developed for &lt;em&gt;ring&lt;/em&gt; have already
been merged into BoringSSL.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Documentation&lt;/h2&gt;
&lt;p&gt;See the documentation at
&lt;a href="https://briansmith.org/rustdoc/ring/" rel="nofollow"&gt;https://briansmith.org/rustdoc/ring/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;See &lt;a href="BUILDING.md"&gt;BUILDING.md&lt;/a&gt; for instructions on how to build it. These
instructions are especially important on Windows when not building from
crates.io, as there are build prerequisites that need to be installed.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-benchmarks" class="anchor" aria-hidden="true" href="#benchmarks"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Benchmarks&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;ring&lt;/em&gt;'s benchmarks are in the
&lt;a href="https://github.com/briansmith/crypto-bench"&gt;crypto-bench&lt;/a&gt; project. Because
there is lots of platform-specific code in &lt;em&gt;ring&lt;/em&gt;, and because &lt;em&gt;ring&lt;/em&gt; chooses
dynamically at runtime which optimized implementation of each crypto primitive
to use, it is very difficult to publish a useful single set of benchmarks;
instead, you are highly encouraged to run the benchmarks yourselves on your
target hardware.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-contributing" class="anchor" aria-hidden="true" href="#contributing"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contributing&lt;/h2&gt;
&lt;p&gt;The most important contributions are &lt;em&gt;uses&lt;/em&gt; of &lt;em&gt;ring&lt;/em&gt;. That is, we're very
interested in seeing useful things built on top of &lt;em&gt;ring&lt;/em&gt;, like implementations
of TLS, SSH, the Noise Protocol, etc.&lt;/p&gt;
&lt;p&gt;Of course, contributions to &lt;em&gt;ring&lt;/em&gt;'s code base are highly appreciated too.
The &lt;em&gt;ring&lt;/em&gt; project happily accepts pull requests without you needing to sign
any formal license agreement. The portions of pull requests that modify
existing files must be licensed under the same terms as the files being
modified. New files in pull requests, including in particular all Rust code,
must be licensed under the ISC-style license. Please state that you agree to
license your contributions in the commit messages of commits in pull requests,
e.g. by putting this at the bottom of your commit message:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
I agree to license my contributions to each file under the terms given
at the top of each file I changed.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If
you want to work directly on &lt;em&gt;ring&lt;/em&gt; and you don't have an idea for something to
contribute already, see these curated lists of open issues:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/briansmith/ring/labels/good-first-bug"&gt;good-first-bug&lt;/a&gt;:
Bugs that we think newcomers might find best to start with. Note that what
makes a bug a good fit depends a lot on the developer's background and not
just the hardness of the work.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In addition, we're always interested in these kinds of contributions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Expanded benchmarks in the
&lt;a href="https://github.com/briansmith/crypto-bench"&gt;crypto-bench&lt;/a&gt; project.&lt;/li&gt;
&lt;li&gt;Additional testing code and additional test vectors.&lt;/li&gt;
&lt;li&gt;Static analysis and fuzzing in the continuous integration.&lt;/li&gt;
&lt;li&gt;Support for more platforms in the continuous integration (e.g. Android, iOS,
ARM microcontrollers).&lt;/li&gt;
&lt;li&gt;Documentation improvements.&lt;/li&gt;
&lt;li&gt;More code simplification, especially eliminating dead code.&lt;/li&gt;
&lt;li&gt;Improving the code size, execution speed, and/or memory footprint.&lt;/li&gt;
&lt;li&gt;Fixing any bugs you may have found.&lt;/li&gt;
&lt;li&gt;Better IDE support for Windows (e.g. running the tests within the IDE) and
macOS (e.g. Xcode project files).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Before submitting pull requests, make sure that the tests succeed both when
running &lt;code&gt;cargo test&lt;/code&gt; and &lt;code&gt;cargo test --no-default-features&lt;/code&gt;. See
&lt;a href="BUILDING.md"&gt;BUILDING.md&lt;/a&gt; for more info about the features flags that are
useful for people hacking on &lt;em&gt;ring&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-versioning--stability" class="anchor" aria-hidden="true" href="#versioning--stability"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Versioning &amp;amp; Stability&lt;/h2&gt;
&lt;p&gt;Users of &lt;em&gt;ring&lt;/em&gt; should always use the latest released version, and users
should upgrade to the latest released version as soon as it is released.
&lt;em&gt;ring&lt;/em&gt; has a linear release model that favors users of the latest released
version. We have never backported fixes to earlier releases and we don't
maintain branches other than the master branch. Further, for some obscure
technical reasons it's currently not possible to link two different versions
of &lt;em&gt;ring&lt;/em&gt; into the same program; for policy reasons we don't bother to try
to work around that. Thus it is important that libraries using &lt;em&gt;ring&lt;/em&gt; update
to the latest version of &lt;em&gt;ring&lt;/em&gt; ASAP, so that libraries that depend on
&lt;em&gt;their&lt;/em&gt; libraries can upgrade to the latest version of &lt;em&gt;ring&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;ring&lt;/em&gt; is tested on the latest Stable, Beta, and Nightly releases of Rust.
We do not spend effort on backward compatibility with older releases of
Rust; for example, when Rust 1.53 (Stable) is released, we don't care if
&lt;em&gt;ring&lt;/em&gt; stops working with Rust 1.52 or earlier versions. Thus, we can
always use the latest &lt;em&gt;stable&lt;/em&gt; features of the Rust language in &lt;em&gt;ring&lt;/em&gt;.
So far we've never used unstable features of Rust except for the benchmarking
support (&lt;code&gt;#[bench]&lt;/code&gt;), and we're hoping to remove even &lt;em&gt;that&lt;/em&gt; Nightly
dependency. Sometimes things are broken with Nightly Rust. We prioritize
keeping things working on Stable; if things break on Beta and Nightly then
that breakage won't be considered urgent, though it will eventually get
resolved, one way or another.&lt;/p&gt;
&lt;p&gt;We prefer to improve &lt;em&gt;ring&lt;/em&gt;'s API over keeping &lt;em&gt;ring&lt;/em&gt;'s API stable. We
don't keep old APIs around for the sake of backward compatibility; we prefer
to remove old APIs in the same change that adds new APIs. This makes it
easier for people to contribute improvements. This means that sometimes
upgrading to the newest version of &lt;em&gt;ring&lt;/em&gt; will require some code changes. Over
time the rate of change in the API will probably slow to the point where it
will be stable in practice.&lt;/p&gt;
&lt;p&gt;We don't have release notes. Instead, we try to clearly document each change
in each commit. Read the the commit message, the tests, and the patch itself
for each change. If anything is still unclear, let us know by submitting a pull
request or by filing an issue in the issue tracker so that we can improve
things.&lt;/p&gt;
&lt;p&gt;This model of development is different than the model a lot of other open
source libraries use. The idea behind &lt;em&gt;our&lt;/em&gt; model is to encourage all users to
work together to ensure that the latest version is good &lt;em&gt;as it is being
developed&lt;/em&gt;. In particular, because users know that correctness/security fixes
(if any) aren't going to get backported, they have a strong incentive to help
review pull requests before they are merged and/or review commits on the master
branch after they've landed to ensure that code quality on the master branch
stays high.&lt;/p&gt;
&lt;p&gt;The more common model, where there are stable versions that have important
security patches backported, lowers people's incentives to actively participate
in mainline development. Maintaining stable APIs also discourages improving
API design and internal code quality. Thus that model doesn't seem like a good
fit for &lt;em&gt;ring&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Every six months we have a meeting to revisit this policy. Email
&lt;a href="mailto:brian@briansmith.org"&gt;brian@briansmith.org&lt;/a&gt; if you want to attend
the next meeting. Please don't file issues regarding this policy.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-bug-reporting" class="anchor" aria-hidden="true" href="#bug-reporting"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Bug Reporting&lt;/h2&gt;
&lt;p&gt;Please report bugs either as pull requests or as issues in &lt;a href="https://github.com/briansmith/ring/issues"&gt;the issue
tracker&lt;/a&gt;. &lt;em&gt;ring&lt;/em&gt; has a
&lt;strong&gt;full disclosure&lt;/strong&gt; vulnerability policy. &lt;strong&gt;Please do NOT attempt to report
any security vulnerability in this code privately to anybody.&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-online-automated-testing" class="anchor" aria-hidden="true" href="#online-automated-testing"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Online Automated Testing&lt;/h2&gt;
&lt;p&gt;Travis CI is used for Android, Linux, and macOS. Appveyor is used for Windows.
The tests are run in debug and release configurations, for the current release
of each Rust channel (Stable, Beta, Nightly), for each configuration listed in
the table below. The C compilers listed are used for compiling the C portions.&lt;/p&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;&lt;th&gt;OS&lt;/th&gt;&lt;th&gt;Arch.&lt;/th&gt;&lt;th&gt;Compilers&lt;/th&gt;&lt;th&gt;Status&lt;/th&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td rowspan="2"&gt;Linux&lt;/td&gt;
    &lt;td&gt;x86, x86_64&lt;/td&gt;
    &lt;td&gt;GCC 4.8, GCC 7, Clang 5&lt;/td&gt;
    &lt;td rowspan="4"&gt;&lt;a href="https://travis-ci.org/briansmith/ring/branches" rel="nofollow"&gt;Build Status&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;32‑bit ARM, AAarch64&lt;/td&gt;
    &lt;td&gt;GCC (Ubuntu/Linaro 4.8.4-2ubuntu1~14.04.1), tested using
        &lt;code&gt;qemu-user-arm&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Android&lt;/td&gt;
    &lt;td&gt;ARMv7, Aarch64&lt;/td&gt;
    &lt;td&gt;*ring* for ARMv7 Android is built in CI using SDK version 26 targeting
        API level 18 (Android 4.3+); it is tested in the emulator using the
        corresponding system image. *ring* for AArch64 Android is built in CI
        using SDK version 26 targeting API level 21 (Android 5.0).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Mac OS X&lt;/td&gt;
    &lt;td&gt;x64&lt;/td&gt;
    &lt;td&gt;Apple LLVM version 9.0.0 (clang-900.0.39.2) from Xcode 9.3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Windows&lt;/td&gt;
    &lt;td&gt;x86, x86_64&lt;/td&gt;
    &lt;td&gt;MSVC 2015 Update 3 (14.0)&lt;/td&gt;
    &lt;td&gt;&lt;a href="https://ci.appveyor.com/project/briansmith/ring/branch/master" rel="nofollow"&gt;Build Status&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2&gt;&lt;a id="user-content-license" class="anchor" aria-hidden="true" href="#license"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;License&lt;/h2&gt;
&lt;p&gt;See &lt;a href="LICENSE"&gt;LICENSE&lt;/a&gt;.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>briansmith</author><guid isPermaLink="false">https://github.com/briansmith/ring</guid><pubDate>Mon, 03 Feb 2020 00:03:00 GMT</pubDate></item></channel></rss>