<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>GitHub Trending: Assembly, This week</title><link>https://github.com/trending/assembly?since=weekly</link><description>The top repositories on GitHub for assembly, measured weekly</description><pubDate>Mon, 09 Dec 2019 01:05:43 GMT</pubDate><lastBuildDate>Mon, 09 Dec 2019 01:05:43 GMT</lastBuildDate><generator>PyRSS2Gen-1.1.0</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><ttl>720</ttl><item><title>kanaka/mal #1 in Assembly, This week</title><link>https://github.com/kanaka/mal</link><description>&lt;p&gt;&lt;i&gt;mal - Make a Lisp&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-mal---make-a-lisp" class="anchor" aria-hidden="true" href="#mal---make-a-lisp"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;mal - Make a Lisp&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://travis-ci.org/kanaka/mal" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/28d41556cf726e46c06fc2d472dc0b20d1ac413d/68747470733a2f2f7472617669732d63692e6f72672f6b616e616b612f6d616c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/kanaka/mal.svg?branch=master" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-description" class="anchor" aria-hidden="true" href="#description"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Description&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;1. Mal is a Clojure inspired Lisp interpreter&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. Mal is implemented in 79 languages (82 different implementations and 102 runtime modes)&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Language&lt;/th&gt;
&lt;th&gt;Creator&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#ada"&gt;Ada&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/zmower"&gt;Chris Moore&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#ada2"&gt;Ada #2&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/asarhaddon"&gt;Nicolas Boulenguez&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#gnu-awk"&gt;GNU Awk&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/kariya-mitsuru"&gt;Miutsuru Kariya&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#bash-4"&gt;Bash 4&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/kanaka"&gt;Joel Martin&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#basic-c64-and-qbasic"&gt;BASIC&lt;/a&gt; (C64 &amp;amp; QBasic)&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/kanaka"&gt;Joel Martin&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#bbc-basic-v"&gt;BBC BASIC V&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/bjh21"&gt;Ben Harris&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#c"&gt;C&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/kanaka"&gt;Joel Martin&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#c-1"&gt;C++&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/sdt"&gt;Stephen Thirlwall&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#c-2"&gt;C#&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/kanaka"&gt;Joel Martin&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#chuck"&gt;ChucK&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/wasamasa"&gt;Vasilij Schneidermann&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#clojure"&gt;Clojure&lt;/a&gt; (Clojure &amp;amp; ClojureScript)&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/kanaka"&gt;Joel Martin&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#coffeescript"&gt;CoffeeScript&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/kanaka"&gt;Joel Martin&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#common-lisp"&gt;Common Lisp&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/iqbalansari"&gt;Iqbal Ansari&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#crystal"&gt;Crystal&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/rhysd"&gt;Linda_pp&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#d"&gt;D&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/dubek"&gt;Dov Murik&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#dart"&gt;Dart&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/hterkelsen"&gt;Harry Terkelsen&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#elixir"&gt;Elixir&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/ekmartin"&gt;Martin Ek&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#elm"&gt;Elm&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/c0deaddict"&gt;Jos van Bakel&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#emacs-lisp"&gt;Emacs Lisp&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/wasamasa"&gt;Vasilij Schneidermann&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#erlang"&gt;Erlang&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/nlfiedler"&gt;Nathan Fiedler&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#es6-ecmascript-2015"&gt;ES6&lt;/a&gt; (ECMAScript 2015)&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/kanaka"&gt;Joel Martin&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#f"&gt;F#&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/pstephens"&gt;Peter Stephens&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#factor"&gt;Factor&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/jordanlewis"&gt;Jordan Lewis&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#fantom"&gt;Fantom&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/dubek"&gt;Dov Murik&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#forth"&gt;Forth&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/chouser"&gt;Chris Houser&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#gnu-guile-21"&gt;GNU Guile&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/NalaGinrut"&gt;Mu Lei&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#gnu-smalltalk"&gt;GNU Smalltalk&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/wasamasa"&gt;Vasilij Schneidermann&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#go"&gt;Go&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/kanaka"&gt;Joel Martin&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#groovy"&gt;Groovy&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/kanaka"&gt;Joel Martin&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#haskell"&gt;Haskell&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/kanaka"&gt;Joel Martin&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#haxe-neko-python-c-and-javascript"&gt;Haxe&lt;/a&gt; (Neko, Python, C++, &amp;amp; JS)&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/kanaka"&gt;Joel Martin&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#hy"&gt;Hy&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/kanaka"&gt;Joel Martin&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#io"&gt;Io&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/dubek"&gt;Dov Murik&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#java-17"&gt;Java&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/kanaka"&gt;Joel Martin&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#javascriptnode"&gt;JavaScript&lt;/a&gt; (&lt;a href="http://kanaka.github.io/mal" rel="nofollow"&gt;Demo&lt;/a&gt;)&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/kanaka"&gt;Joel Martin&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#julia"&gt;Julia&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/kanaka"&gt;Joel Martin&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#kotlin"&gt;Kotlin&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/ivern"&gt;Javier Fernandez-Ivern&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#livescript"&gt;LiveScript&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/c0deaddict"&gt;Jos van Bakel&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#logo"&gt;Logo&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/dubek"&gt;Dov Murik&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#lua"&gt;Lua&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/kanaka"&gt;Joel Martin&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#gnu-make-381"&gt;GNU Make&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/kanaka"&gt;Joel Martin&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#mal"&gt;mal itself&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/kanaka"&gt;Joel Martin&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#matlab-gnu-octave-and-matlab"&gt;MATLAB&lt;/a&gt; (GNU Octave &amp;amp; MATLAB)&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/kanaka"&gt;Joel Martin&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#minimal"&gt;miniMAL&lt;/a&gt; (&lt;a href="https://github.com/kanaka/miniMAL"&gt;Repo&lt;/a&gt;, &lt;a href="https://kanaka.github.io/miniMAL/" rel="nofollow"&gt;Demo&lt;/a&gt;)&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/kanaka"&gt;Joel Martin&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#nasm"&gt;NASM&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/bendudson"&gt;Ben Dudson&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#nim-0170"&gt;Nim&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/def-"&gt;Dennis Felsing&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#object-pascal"&gt;Object Pascal&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/kanaka"&gt;Joel Martin&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#objective-c"&gt;Objective C&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/kanaka"&gt;Joel Martin&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#ocaml-4010"&gt;OCaml&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/chouser"&gt;Chris Houser&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#perl-5"&gt;Perl&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/kanaka"&gt;Joel Martin&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#perl-6"&gt;Perl 6&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/hinrik"&gt;Hinrik Örn Sigurðsson&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#php-53"&gt;PHP&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/kanaka"&gt;Joel Martin&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#picolisp"&gt;Picolisp&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/wasamasa"&gt;Vasilij Schneidermann&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#pike"&gt;Pike&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/dubek"&gt;Dov Murik&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#plpgsql-postgresql-sql-procedural-language"&gt;PL/pgSQL&lt;/a&gt; (PostgreSQL)&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/kanaka"&gt;Joel Martin&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#plsql-oracle-sql-procedural-language"&gt;PL/SQL&lt;/a&gt; (Oracle)&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/kanaka"&gt;Joel Martin&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#postscript-level-23"&gt;PostScript&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/kanaka"&gt;Joel Martin&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#powershell"&gt;PowerShell&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/kanaka"&gt;Joel Martin&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#python-2x-and-3x"&gt;Python&lt;/a&gt; (2.X &amp;amp; 3.X)&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/kanaka"&gt;Joel Martin&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#python2-3x"&gt;Python #2&lt;/a&gt; (3.X)&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/epylar"&gt;Gavin Lewis&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#rpython"&gt;RPython&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/kanaka"&gt;Joel Martin&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#r"&gt;R&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/kanaka"&gt;Joel Martin&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#racket-53"&gt;Racket&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/kanaka"&gt;Joel Martin&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#rexx"&gt;Rexx&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/dubek"&gt;Dov Murik&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#ruby-19"&gt;Ruby&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/kanaka"&gt;Joel Martin&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#rust-138"&gt;Rust&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/kanaka"&gt;Joel Martin&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#scala"&gt;Scala&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/kanaka"&gt;Joel Martin&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#scheme-r7rs"&gt;Scheme (R7RS)&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/wasamasa"&gt;Vasilij Schneidermann&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#skew"&gt;Skew&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/dubek"&gt;Dov Murik&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#swift"&gt;Swift 2&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/keith-rollin"&gt;Keith Rollin&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#swift-3"&gt;Swift 3&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/kanaka"&gt;Joel Martin&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#swift-4"&gt;Swift 4&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/LispLY"&gt;陆遥&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#swift-5"&gt;Swift 5&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/MontakOleg"&gt;Oleg Montak&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#tcl-86"&gt;Tcl&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/dubek"&gt;Dov Murik&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#typescript"&gt;TypeScript&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/vvakame"&gt;Masahiro Wakame&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#vala"&gt;Vala&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/sgtatham"&gt;Simon Tatham&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#vhdl"&gt;VHDL&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/dubek"&gt;Dov Murik&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#vimscript"&gt;Vimscript&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/dubek"&gt;Dov Murik&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#visual-basicnet"&gt;Visual Basic.NET&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/kanaka"&gt;Joel Martin&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#webassembly-wasm"&gt;WebAssembly&lt;/a&gt; (wasm)&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/kanaka"&gt;Joel Martin&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#wren"&gt;Wren&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/dubek"&gt;Dov Murik&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#yorick"&gt;Yorick&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/dubek"&gt;Dov Murik&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;3. Mal is a learning tool&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Each implementation of mal is separated into
11 incremental, self-contained (and testable) steps that demonstrate
core concepts of Lisp. The last step is capable of self-hosting
(running the mal implementation of mal). See the &lt;a href="process/guide.md"&gt;make-a-lisp process
guide&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The make-a-lisp steps are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="process/guide.md#step0"&gt;step0_repl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="process/guide.md#step1"&gt;step1_read_print&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="process/guide.md#step2"&gt;step2_eval&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="process/guide.md#step3"&gt;step3_env&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="process/guide.md#step4"&gt;step4_if_fn_do&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="process/guide.md#step5"&gt;step5_tco&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="process/guide.md#step6"&gt;step6_file&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="process/guide.md#step7"&gt;step7_quote&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="process/guide.md#step8"&gt;step8_macros&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="process/guide.md#step9"&gt;step9_try&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="process/guide.md#stepA"&gt;stepA_mal&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Each make-a-lisp step has an associated architectural diagram. That elements
that are new for that step are highlighted in red.
Here is the final diagram for &lt;a href="process/guide.md#stepA"&gt;step A&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="process/stepA_mal.png"&gt;&lt;img src="process/stepA_mal.png" alt="stepA_mal architecture" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you are interested in creating a mal implementation (or just
interested in using mal for something), please drop by the #mal
channel on freenode. In addition to the &lt;a href="process/guide.md"&gt;make-a-lisp process
guide&lt;/a&gt; there is also a &lt;a href="docs/FAQ.md"&gt;mal/make-a-lisp
FAQ&lt;/a&gt; where I attempt to answer some common questions.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-presentations" class="anchor" aria-hidden="true" href="#presentations"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Presentations&lt;/h2&gt;
&lt;p&gt;Mal was presented publicly for the first time in a lightning talk at
Clojure West 2014 (unfortunately there is no video). See
examples/clojurewest2014.mal for the presentation that was given at the
conference (yes, the presentation is a mal program).&lt;/p&gt;
&lt;p&gt;At Midwest.io 2015, Joel Martin gave a presentation on Mal titled
"Achievement Unlocked: A Better Path to Language Learning".
&lt;a href="https://www.youtube.com/watch?v=lgyOAiRtZGw" rel="nofollow"&gt;Video&lt;/a&gt;,
&lt;a href="http://kanaka.github.io/midwest.io.mal/" rel="nofollow"&gt;Slides&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;More recently Joel gave a presentation on "Make Your Own Lisp Interpreter
in 10 Incremental Steps" at LambdaConf 2016:
&lt;a href="https://www.youtube.com/watch?v=jVhupfthTEk" rel="nofollow"&gt;Part 1&lt;/a&gt;,
&lt;a href="https://www.youtube.com/watch?v=X5OQBMGpaTU" rel="nofollow"&gt;Part 2&lt;/a&gt;,
&lt;a href="https://www.youtube.com/watch?v=6mARZzGgX4U" rel="nofollow"&gt;Part 3&lt;/a&gt;,
&lt;a href="https://www.youtube.com/watch?v=dCO1SYR5kDU" rel="nofollow"&gt;Part 4&lt;/a&gt;,
&lt;a href="http://kanaka.github.io/lambdaconf/" rel="nofollow"&gt;Slides&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-buildingrunning-implementations" class="anchor" aria-hidden="true" href="#buildingrunning-implementations"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Building/running implementations&lt;/h2&gt;
&lt;p&gt;The simplest way to run any given implementation is to use docker.
Every implementation has a docker image pre-built with language
dependencies installed. You can launch the REPL using a convenient
target in the top level Makefile (where IMPL is the implementation
directory name and stepX is the step to run):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;make DOCKERIZE=1 "repl^IMPL^stepX"
    # OR stepA is the default step:
make DOCKERIZE=1 "repl^IMPL"
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;a id="user-content-external-implementations" class="anchor" aria-hidden="true" href="#external-implementations"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;External Implementations&lt;/h2&gt;
&lt;p&gt;The following implementations are maintained as separate projects:&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-holyc" class="anchor" aria-hidden="true" href="#holyc"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;HolyC&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/bagnalla/holyc_mal"&gt;by Alexander Bagnalla&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-rust" class="anchor" aria-hidden="true" href="#rust"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Rust&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/seven1m/mal-rust"&gt;by Tim Morgan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/vi/mal-rust-vi"&gt;by vi&lt;/a&gt; - using &lt;a href="https://pest.rs/" rel="nofollow"&gt;Pest&lt;/a&gt; grammar, not using typical Mal infrastructure (cargo-ized steps and built-in converted tests).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-other-mal-projects" class="anchor" aria-hidden="true" href="#other-mal-projects"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Other mal Projects&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dubek/malc"&gt;malc&lt;/a&gt; - Mal (Make A Lisp) compiler. Compiles a Mal program to LLVM assembly language, then binary.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/seven1m/malcc"&gt;malcc&lt;/a&gt; - malcc is an incremental compiler implementation for the Mal language. It uses the Tiny C Compiler as the compiler backend and has full support for the Mal language, including macros, tail-call elimination, and even run-time eval. &lt;a href="https://mpov.timmorgan.org/i-built-a-lisp-compiler/" rel="nofollow"&gt;"I Built a Lisp Compiler"&lt;/a&gt; post about the process.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/chr15m/frock"&gt;frock&lt;/a&gt; - Clojure-flavoured PHP. Uses mal/php to run programs.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/chr15m/flk"&gt;flk&lt;/a&gt; - A LISP that runs wherever Bash is&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-implementation-details" class="anchor" aria-hidden="true" href="#implementation-details"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Implementation Details&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-ada" class="anchor" aria-hidden="true" href="#ada"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Ada&lt;/h3&gt;
&lt;p&gt;The Ada implementation was developed with GNAT 4.9 on debian. It also
compiles unchanged on windows if you have windows versions of git,
GNAT and (optionally) make.  There are no external dependencies
(readline not implemented).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd ada
make
./stepX_YYY
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-ada2" class="anchor" aria-hidden="true" href="#ada2"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Ada.2&lt;/h3&gt;
&lt;p&gt;The second Ada implementation was developed with GNAT 8 and links with
the GNU readline library.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd ada
make
./stepX_YYY
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-gnu-awk" class="anchor" aria-hidden="true" href="#gnu-awk"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;GNU awk&lt;/h3&gt;
&lt;p&gt;The GNU awk implementation of mal has been tested with GNU awk 4.1.1.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd gawk
gawk -O -f stepX_YYY.awk
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-bash-4" class="anchor" aria-hidden="true" href="#bash-4"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Bash 4&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;cd bash
bash stepX_YYY.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-basic-c64-and-qbasic" class="anchor" aria-hidden="true" href="#basic-c64-and-qbasic"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;BASIC (C64 and QBasic)&lt;/h3&gt;
&lt;p&gt;The BASIC implementation uses a preprocessor that can generate BASIC
code that is compatible with both C64 BASIC (CBM v2) and QBasic. The
C64 mode has been tested with
&lt;a href="https://github.com/kanaka/cbmbasic"&gt;cbmbasic&lt;/a&gt; (the patched version is
currently required to fix issues with line input) and the QBasic mode
has been tested with &lt;a href="http://www.qb64.net/" rel="nofollow"&gt;qb64&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Generate C64 code and run it using cbmbasic:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd basic
make stepX_YYY.bas
STEP=stepX_YYY ./run
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Generate QBasic code and load it into qb64:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd basic
make MODE=qbasic stepX_YYY.bas
./qb64 stepX_YYY.bas
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Thanks to &lt;a href="https://github.com/sjsyrek"&gt;Steven Syrek&lt;/a&gt; for the original
inspiration for this implementation.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-bbc-basic-v" class="anchor" aria-hidden="true" href="#bbc-basic-v"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;BBC BASIC V&lt;/h3&gt;
&lt;p&gt;The BBC BASIC V implementation can run in the Brandy interpreter:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd bbc-basic
brandy -quit stepX_YYY.bbc
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or in ARM BBC BASIC V under RISC OS 3 or later:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;*Dir bbc-basic.riscos
*Run setup
*Run stepX_YYY
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-c" class="anchor" aria-hidden="true" href="#c"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;C&lt;/h3&gt;
&lt;p&gt;The C implementation of mal requires the following libraries (lib and
header packages): glib, libffi6, libgc, and either the libedit or GNU readline
library.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd c
make
./stepX_YYY
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-c-1" class="anchor" aria-hidden="true" href="#c-1"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;C++&lt;/h3&gt;
&lt;p&gt;The C++ implementation of mal requires g++-4.9 or clang++-3.5 and
a readline compatible library to build. See the &lt;code&gt;cpp/README.md&lt;/code&gt; for
more details:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd cpp
make
    # OR
make CXX=clang++-3.5
./stepX_YYY
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-c-2" class="anchor" aria-hidden="true" href="#c-2"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;C#&lt;/h3&gt;
&lt;p&gt;The C# implementation of mal has been tested on Linux using the Mono
C# compiler (mcs) and the Mono runtime (version 2.10.8.1). Both are
required to build and run the C# implementation.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd cs
make
mono ./stepX_YYY.exe
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-chuck" class="anchor" aria-hidden="true" href="#chuck"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;ChucK&lt;/h3&gt;
&lt;p&gt;The ChucK implementation has been tested with ChucK 1.3.5.2.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd chuck
./run
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-clojure" class="anchor" aria-hidden="true" href="#clojure"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Clojure&lt;/h3&gt;
&lt;p&gt;For the most part the Clojure implementation requires Clojure 1.5,
however, to pass all tests, Clojure 1.8.0-RC4 is required.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd clojure
lein with-profile +stepX trampoline run
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-coffeescript" class="anchor" aria-hidden="true" href="#coffeescript"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;CoffeeScript&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;sudo npm install -g coffee-script
cd coffee
coffee ./stepX_YYY
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-common-lisp" class="anchor" aria-hidden="true" href="#common-lisp"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Common Lisp&lt;/h3&gt;
&lt;p&gt;The implementation has been tested with SBCL, CCL, CMUCL, GNU CLISP, ECL and
Allegro CL on Ubuntu 16.04 and Ubuntu 12.04, see
the &lt;a href="common-lisp/README.org"&gt;README&lt;/a&gt; for more details. Provided you have the
dependencies mentioned installed, do the following to run the implementation&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd common-lisp
make
./run
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-crystal" class="anchor" aria-hidden="true" href="#crystal"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Crystal&lt;/h3&gt;
&lt;p&gt;The Crystal implementation of mal has been tested with Crystal 0.26.1.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd crystal
crystal run ./stepX_YYY.cr
    # OR
make   # needed to run tests
./stepX_YYY
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-d" class="anchor" aria-hidden="true" href="#d"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;D&lt;/h3&gt;
&lt;p&gt;The D implementation of mal was tested with GDC 4.8.  It requires the GNU
readline library.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd d
make
./stepX_YYY
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-dart" class="anchor" aria-hidden="true" href="#dart"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Dart&lt;/h3&gt;
&lt;p&gt;The Dart implementation has been tested with Dart 1.20.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd dart
dart ./stepX_YYY
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-emacs-lisp" class="anchor" aria-hidden="true" href="#emacs-lisp"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Emacs Lisp&lt;/h3&gt;
&lt;p&gt;The Emacs Lisp implementation of mal has been tested with Emacs 24.3
and 24.5.  While there is very basic readline editing (&lt;code&gt;&amp;lt;backspace&amp;gt;&lt;/code&gt;
and &lt;code&gt;C-d&lt;/code&gt; work, &lt;code&gt;C-c&lt;/code&gt; cancels the process), it is recommended to use
&lt;code&gt;rlwrap&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd elisp
emacs -Q --batch --load stepX_YYY.el
# with full readline support
rlwrap emacs -Q --batch --load stepX_YYY.el
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-elixir" class="anchor" aria-hidden="true" href="#elixir"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Elixir&lt;/h3&gt;
&lt;p&gt;The Elixir implementation of mal has been tested with Elixir 1.0.5.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd elixir
mix stepX_YYY
# Or with readline/line editing functionality:
iex -S mix stepX_YYY
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-elm" class="anchor" aria-hidden="true" href="#elm"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Elm&lt;/h3&gt;
&lt;p&gt;The Elm implementation of mal has been tested with Elm 0.18.0&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd elm
make stepX_YYY.js
STEP=stepX_YYY ./run
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-erlang" class="anchor" aria-hidden="true" href="#erlang"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Erlang&lt;/h3&gt;
&lt;p&gt;The Erlang implementation of mal requires &lt;a href="http://www.erlang.org/download.html" rel="nofollow"&gt;Erlang/OTP R17&lt;/a&gt;
and &lt;a href="https://github.com/rebar/rebar"&gt;rebar&lt;/a&gt; to build.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd erlang
make
    # OR
MAL_STEP=stepX_YYY rebar compile escriptize # build individual step
./stepX_YYY
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-es6-ecmascript-2015" class="anchor" aria-hidden="true" href="#es6-ecmascript-2015"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;ES6 (ECMAScript 2015)&lt;/h3&gt;
&lt;p&gt;The ES6 / ECMAScript 2015 implementation uses the
&lt;a href="https://babeljs.io" rel="nofollow"&gt;babel&lt;/a&gt; compiler to generate ES5 compatible
JavaScript. The generated code has been tested with Node 0.12.4.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd es6
make
node build/stepX_YYY.js
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-f" class="anchor" aria-hidden="true" href="#f"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;F#&lt;/h3&gt;
&lt;p&gt;The F# implementation of mal has been tested on Linux using the Mono
F# compiler (fsharpc) and the Mono runtime (version 3.12.1). The mono C#
compiler (mcs) is also necessary to compile the readline dependency. All are
required to build and run the F# implementation.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd fsharp
make
mono ./stepX_YYY.exe
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-factor" class="anchor" aria-hidden="true" href="#factor"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Factor&lt;/h3&gt;
&lt;p&gt;The Factor implementation of mal has been tested with Factor 0.97
(&lt;a href="http://factorcode.org" rel="nofollow"&gt;factorcode.org&lt;/a&gt;).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd factor
FACTOR_ROOTS=. factor -run=stepX_YYY
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-fantom" class="anchor" aria-hidden="true" href="#fantom"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Fantom&lt;/h3&gt;
&lt;p&gt;The Fantom implementation of mal has been tested with Fantom 1.0.70.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd fantom
make lib/fan/stepX_YYY.pod
STEP=stepX_YYY ./run
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-forth" class="anchor" aria-hidden="true" href="#forth"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Forth&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;cd forth
gforth stepX_YYY.fs
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-gnu-guile-21" class="anchor" aria-hidden="true" href="#gnu-guile-21"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;GNU Guile 2.1+&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;cd guile
guile -L ./ stepX_YYY.scm
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-gnu-smalltalk" class="anchor" aria-hidden="true" href="#gnu-smalltalk"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;GNU Smalltalk&lt;/h3&gt;
&lt;p&gt;The Smalltalk implementation of mal has been tested with GNU Smalltalk 3.2.91.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd gnu-smalltalk
./run
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-go" class="anchor" aria-hidden="true" href="#go"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Go&lt;/h3&gt;
&lt;p&gt;The Go implementation of mal requires that go is installed on on the
path. The implementation has been tested with Go 1.3.1.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd go
make
./stepX_YYY
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-groovy" class="anchor" aria-hidden="true" href="#groovy"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Groovy&lt;/h3&gt;
&lt;p&gt;The Groovy implementation of mal requires Groovy to run and has been
tested with Groovy 1.8.6.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd groovy
make
groovy ./stepX_YYY.groovy
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-haskell" class="anchor" aria-hidden="true" href="#haskell"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Haskell&lt;/h3&gt;
&lt;p&gt;The Haskell implementation requires the ghc compiler version 7.10.1 or
later and also the Haskell parsec and readline (or editline) packages.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd haskell
make
./stepX_YYY
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-haxe-neko-python-c-and-javascript" class="anchor" aria-hidden="true" href="#haxe-neko-python-c-and-javascript"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Haxe (Neko, Python, C++ and JavaScript)&lt;/h3&gt;
&lt;p&gt;The Haxe implementation of mal requires Haxe version 3.2 to compile.
Four different Haxe targets are supported: Neko, Python, C++, and
JavaScript.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd haxe
# Neko
make all-neko
neko ./stepX_YYY.n
# Python
make all-python
python3 ./stepX_YYY.py
# C++
make all-cpp
./cpp/stepX_YYY
# JavaScript
make all-js
node ./stepX_YYY.js
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-hy" class="anchor" aria-hidden="true" href="#hy"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Hy&lt;/h3&gt;
&lt;p&gt;The Hy implementation of mal has been tested with Hy 0.13.0.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd hy
./stepX_YYY.hy
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-io" class="anchor" aria-hidden="true" href="#io"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Io&lt;/h3&gt;
&lt;p&gt;The Io implementation of mal has been tested with Io version 20110905.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd io
io ./stepX_YYY.io
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-java-17" class="anchor" aria-hidden="true" href="#java-17"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Java 1.7&lt;/h3&gt;
&lt;p&gt;The Java implementation of mal requires maven2 to build.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd java
mvn compile
mvn -quiet exec:java -Dexec.mainClass=mal.stepX_YYY
    # OR
mvn -quiet exec:java -Dexec.mainClass=mal.stepX_YYY -Dexec.args="CMDLINE_ARGS"
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-javascriptnode" class="anchor" aria-hidden="true" href="#javascriptnode"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;JavaScript/Node&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;cd js
npm install
node stepX_YYY.js
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-julia" class="anchor" aria-hidden="true" href="#julia"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Julia&lt;/h3&gt;
&lt;p&gt;The Julia implementation of mal requires Julia 0.4.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd julia
julia stepX_YYY.jl
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-kotlin" class="anchor" aria-hidden="true" href="#kotlin"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Kotlin&lt;/h3&gt;
&lt;p&gt;The Kotlin implementation of mal has been tested with Kotlin 1.0.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd kotlin
make
java -jar stepX_YYY.jar
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-livescript" class="anchor" aria-hidden="true" href="#livescript"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;LiveScript&lt;/h3&gt;
&lt;p&gt;The LiveScript implementation of mal has been tested with LiveScript 1.5.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd livescript
make
node_modules/.bin/lsc stepX_YYY.ls
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-logo" class="anchor" aria-hidden="true" href="#logo"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Logo&lt;/h3&gt;
&lt;p&gt;The Logo implementation of mal has been tested with UCBLogo 6.0.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd logo
logo stepX_YYY.lg
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-lua" class="anchor" aria-hidden="true" href="#lua"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Lua&lt;/h3&gt;
&lt;p&gt;The Lua implementation of mal has been tested with Lua 5.2. The
implementation requires that luarocks and the lua-rex-pcre library
are installed.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd lua
make  # to build and link linenoise.so
./stepX_YYY.lua
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-mal" class="anchor" aria-hidden="true" href="#mal"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Mal&lt;/h3&gt;
&lt;p&gt;Running the mal implementation of mal involves running stepA of one of
the other implementations and passing the mal step to run as a command
line argument.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd IMPL
IMPL_STEPA_CMD ../mal/stepX_YYY.mal

&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-gnu-make-381" class="anchor" aria-hidden="true" href="#gnu-make-381"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;GNU Make 3.81&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;cd make
make -f stepX_YYY.mk
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-nasm" class="anchor" aria-hidden="true" href="#nasm"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;NASM&lt;/h3&gt;
&lt;p&gt;The NASM implementation of mal is written for x86-64 Linux, and has been tested
with Linux 3.16.0-4-amd64 and NASM version 2.11.05.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd nasm
make
./stepX_YYY
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-nim-0170" class="anchor" aria-hidden="true" href="#nim-0170"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Nim 0.17.0&lt;/h3&gt;
&lt;p&gt;The Nim implementation of mal has been tested with Nim 0.17.0.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd nim
make
  # OR
nimble build
./stepX_YYY
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-object-pascal" class="anchor" aria-hidden="true" href="#object-pascal"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Object Pascal&lt;/h3&gt;
&lt;p&gt;The Object Pascal implementation of mal has been built and tested on
Linux using the Free Pascal compiler version 2.6.2 and 2.6.4.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd objpascal
make
./stepX_YYY
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-objective-c" class="anchor" aria-hidden="true" href="#objective-c"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Objective C&lt;/h3&gt;
&lt;p&gt;The Objective C implementation of mal has been built and tested on
Linux using clang/LLVM 3.6. It has also been built and tested on OS
X using XCode 7.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd objc
make
./stepX_YYY
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-ocaml-4010" class="anchor" aria-hidden="true" href="#ocaml-4010"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;OCaml 4.01.0&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;cd ocaml
make
./stepX_YYY
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-matlab-gnu-octave-and-matlab" class="anchor" aria-hidden="true" href="#matlab-gnu-octave-and-matlab"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;MATLAB (GNU Octave and MATLAB)&lt;/h3&gt;
&lt;p&gt;The MatLab implementation has been tested with GNU Octave 4.2.1.
It has also been tested with MATLAB version R2014a on Linux. Note that
MATLAB is a commercial product.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd matlab
./stepX_YYY
octave -q --no-gui --no-history --eval "stepX_YYY();quit;"
matlab -nodisplay -nosplash -nodesktop -nojvm -r "stepX_YYY();quit;"
    # OR with command line arguments
octave -q --no-gui --no-history --eval "stepX_YYY('arg1','arg2');quit;"
matlab -nodisplay -nosplash -nodesktop -nojvm -r "stepX_YYY('arg1','arg2');quit;"
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-minimal" class="anchor" aria-hidden="true" href="#minimal"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;miniMAL&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/kanaka/miniMAL"&gt;miniMAL&lt;/a&gt; is small Lisp interpreter
implemented in less than 1024 bytes of JavaScript. To run the miniMAL
implementation of mal you need to download/install the miniMAL
interpreter (which requires Node.js).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd miniMAL
# Download miniMAL and dependencies
npm install
export PATH=`pwd`/node_modules/minimal-lisp/:$PATH
# Now run mal implementation in miniMAL
miniMAL ./stepX_YYY
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-perl-5" class="anchor" aria-hidden="true" href="#perl-5"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Perl 5&lt;/h3&gt;
&lt;p&gt;The Perl 5 implementation should work with perl 5.19.3 and later.&lt;/p&gt;
&lt;p&gt;For readline line editing support, install Term::ReadLine::Perl or
Term::ReadLine::Gnu from CPAN.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd perl
perl stepX_YYY.pl
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-perl-6" class="anchor" aria-hidden="true" href="#perl-6"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Perl 6&lt;/h3&gt;
&lt;p&gt;The Perl 6 implementation was tested on Rakudo Perl 6 2016.04.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd perl6
perl6 stepX_YYY.pl
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-php-53" class="anchor" aria-hidden="true" href="#php-53"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;PHP 5.3&lt;/h3&gt;
&lt;p&gt;The PHP implementation of mal requires the php command line interface
to run.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd php
php stepX_YYY.php
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-picolisp" class="anchor" aria-hidden="true" href="#picolisp"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Picolisp&lt;/h3&gt;
&lt;p&gt;The Picolisp implementation requires libreadline and Picolisp 3.1.11
or later.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd picolisp
./run
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-pike" class="anchor" aria-hidden="true" href="#pike"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Pike&lt;/h3&gt;
&lt;p&gt;The Pike implementation was tested on Pike 8.0.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd pike
pike stepX_YYY.pike
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-plpgsql-postgresql-sql-procedural-language" class="anchor" aria-hidden="true" href="#plpgsql-postgresql-sql-procedural-language"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;PL/pgSQL (PostgreSQL SQL Procedural Language)&lt;/h3&gt;
&lt;p&gt;The PL/pgSQL implementation of mal requires a running PostgreSQL server
(the "kanaka/mal-test-plpgsql" docker image automatically starts
a PostgreSQL server). The implementation connects to the PostgreSQL server
and create a database named "mal" to store tables and stored
procedures. The wrapper script uses the psql command to connect to the
server and defaults to the user "postgres" but this can be overridden
with the PSQL_USER environment variable. A password can be specified
using the PGPASSWORD environment variable. The implementation has been
tested with PostgreSQL 9.4.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd plpgsql
./wrap.sh stepX_YYY.sql
    # OR
PSQL_USER=myuser PGPASSWORD=mypass ./wrap.sh stepX_YYY.sql
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-plsql-oracle-sql-procedural-language" class="anchor" aria-hidden="true" href="#plsql-oracle-sql-procedural-language"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;PL/SQL (Oracle SQL Procedural Language)&lt;/h3&gt;
&lt;p&gt;The PL/SQL implementation of mal requires a running Oracle DB
server (the "kanaka/mal-test-plsql" docker image automatically
starts an Oracle Express server). The implementation connects to the
Oracle server to create types, tables and stored procedures. The
default SQL*Plus logon value (username/password@connect_identifier) is
"system/oracle" but this can be overridden with the ORACLE_LOGON
environment variable. The implementation has been tested with Oracle
Express Edition 11g Release 2. Note that any SQL*Plus connection
warnings (user password expiration, etc) will interfere with the
ability of the wrapper script to communicate with the DB.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd plsql
./wrap.sh stepX_YYY.sql
    # OR
ORACLE_LOGON=myuser/mypass@ORCL ./wrap.sh stepX_YYY.sql
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-postscript-level-23" class="anchor" aria-hidden="true" href="#postscript-level-23"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;PostScript Level 2/3&lt;/h3&gt;
&lt;p&gt;The PostScript implementation of mal requires Ghostscript to run. It
has been tested with Ghostscript 9.10.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd ps
gs -q -dNODISPLAY -I./ stepX_YYY.ps
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-powershell" class="anchor" aria-hidden="true" href="#powershell"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;PowerShell&lt;/h3&gt;
&lt;p&gt;The PowerShell implementation of mal requires the PowerShell script
language. It has been tested with PowerShell 6.0.0 Alpha 9 on Linux.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd powershell
powershell ./stepX_YYY.ps1
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-python-2x-and-3x" class="anchor" aria-hidden="true" href="#python-2x-and-3x"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Python (2.X and 3.X)&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;cd python
python stepX_YYY.py
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-python2-3x" class="anchor" aria-hidden="true" href="#python2-3x"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Python.2 (3.X)&lt;/h3&gt;
&lt;p&gt;The second Python implementation makes heavy use of type annotations and uses the Arpeggio parser library.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Recommended: do these steps in a Python virtual environment.
pip3 install Arpeggio==1.9.0
python3 stepX_YYY.py
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-rpython" class="anchor" aria-hidden="true" href="#rpython"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;RPython&lt;/h3&gt;
&lt;p&gt;You must have &lt;a href="https://rpython.readthedocs.org/" rel="nofollow"&gt;rpython&lt;/a&gt; on your path
(included with &lt;a href="https://bitbucket.org/pypy/pypy/" rel="nofollow"&gt;pypy&lt;/a&gt;).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd rpython
make        # this takes a very long time
./stepX_YYY
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-r" class="anchor" aria-hidden="true" href="#r"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;R&lt;/h3&gt;
&lt;p&gt;The R implementation of mal requires R (r-base-core) to run.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd r
make libs  # to download and build rdyncall
Rscript stepX_YYY.r
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-racket-53" class="anchor" aria-hidden="true" href="#racket-53"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Racket (5.3)&lt;/h3&gt;
&lt;p&gt;The Racket implementation of mal requires the Racket
compiler/interpreter to run.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd racket
./stepX_YYY.rkt
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-rexx" class="anchor" aria-hidden="true" href="#rexx"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Rexx&lt;/h3&gt;
&lt;p&gt;The Rexx implementation of mal has been tested with Regina Rexx 3.6.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd rexx
make
rexx -a ./stepX_YYY.rexxpp
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-ruby-19" class="anchor" aria-hidden="true" href="#ruby-19"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Ruby (1.9+)&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;cd ruby
ruby stepX_YYY.rb
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-rust-138" class="anchor" aria-hidden="true" href="#rust-138"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Rust (1.38+)&lt;/h3&gt;
&lt;p&gt;The rust implementation of mal requires the rust compiler and build
tool (cargo) to build.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd rust
cargo run --release --bin stepX_YYY
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-scala" class="anchor" aria-hidden="true" href="#scala"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Scala&lt;/h3&gt;
&lt;p&gt;Install scala and sbt (&lt;a href="http://www.scala-sbt.org/0.13/tutorial/Installing-sbt-on-Linux.html" rel="nofollow"&gt;http://www.scala-sbt.org/0.13/tutorial/Installing-sbt-on-Linux.html&lt;/a&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd scala
sbt 'run-main stepX_YYY'
    # OR
sbt compile
scala -classpath target/scala*/classes stepX_YYY
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-scheme-r7rs" class="anchor" aria-hidden="true" href="#scheme-r7rs"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Scheme (R7RS)&lt;/h3&gt;
&lt;p&gt;The Scheme implementation of mal has been tested with Chibi-Scheme
0.7.3, Kawa 2.4, Gauche 0.9.5, CHICKEN 4.11.0, Sagittarius 0.8.3,
Cyclone 0.6.3 (Git version) and Foment 0.4 (Git version).  You should
be able to get it running on other conforming R7RS implementations
after figuring out how libraries are loaded and adjusting the
&lt;code&gt;Makefile&lt;/code&gt; and &lt;code&gt;run&lt;/code&gt; script accordingly.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd scheme
make symlinks
# chibi
scheme_MODE=chibi ./run
# kawa
make kawa
scheme_MODE=kawa ./run
# gauche
scheme_MODE=gauche ./run
# chicken
make chicken
scheme_MODE=chicken ./run
# sagittarius
scheme_MODE=sagittarius ./run
# cyclone
make cyclone
scheme_MODE=cyclone ./run
# foment
scheme_MODE=foment ./run
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-skew" class="anchor" aria-hidden="true" href="#skew"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Skew&lt;/h3&gt;
&lt;p&gt;The Skew implementation of mal has been tested with Skew 0.7.42.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd skew
make
node stepX_YYY.js
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-swift" class="anchor" aria-hidden="true" href="#swift"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Swift&lt;/h3&gt;
&lt;p&gt;The Swift implementation of mal requires the Swift 2.0 compiler (XCode
7.0) to build. Older versions will not work due to changes in the
language and standard library.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd swift
make
./stepX_YYY
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-swift-3" class="anchor" aria-hidden="true" href="#swift-3"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Swift 3&lt;/h3&gt;
&lt;p&gt;The Swift 3 implementation of mal requires the Swift 3.0 compiler. It
has been tested with Swift 3 Preview 3.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd swift3
make
./stepX_YYY
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-swift-4" class="anchor" aria-hidden="true" href="#swift-4"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Swift 4&lt;/h3&gt;
&lt;p&gt;The Swift 4 implementation of mal requires the Swift 4.0 compiler. It
has been tested with Swift 4.2.3 release.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd swift4
make
./stepX_YYY
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-swift-5" class="anchor" aria-hidden="true" href="#swift-5"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Swift 5&lt;/h3&gt;
&lt;p&gt;The Swift 5 implementation of mal requires the Swift 5.0 compiler. It
has been tested with Swift 5.1.1 release.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd swift5
swift run stepX_YYY
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-tcl-86" class="anchor" aria-hidden="true" href="#tcl-86"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tcl 8.6&lt;/h3&gt;
&lt;p&gt;The Tcl implementation of mal requires Tcl 8.6 to run.  For readline line
editing support, install tclreadline.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd tcl
tclsh ./stepX_YYY.tcl
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-typescript" class="anchor" aria-hidden="true" href="#typescript"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TypeScript&lt;/h3&gt;
&lt;p&gt;The TypeScript implementation of mal requires the TypeScript 2.2 compiler.
It has been tested with Node.js v6.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd ts
make
node ./stepX_YYY.js
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-vala" class="anchor" aria-hidden="true" href="#vala"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Vala&lt;/h3&gt;
&lt;p&gt;The Vala implementation of mal has been tested with the Vala 0.40.8
compiler. You will need to install &lt;code&gt;valac&lt;/code&gt; and &lt;code&gt;libreadline-dev&lt;/code&gt; or
equivalent.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd vala
make
./stepX_YYY
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-vhdl" class="anchor" aria-hidden="true" href="#vhdl"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;VHDL&lt;/h3&gt;
&lt;p&gt;The VHDL implementation of mal has been tested with GHDL 0.29.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd vhdl
make
./run_vhdl.sh ./stepX_YYY
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-vimscript" class="anchor" aria-hidden="true" href="#vimscript"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Vimscript&lt;/h3&gt;
&lt;p&gt;The Vimscript implementation of mal requires Vim 8.0 to run.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd vimscript
./run_vimscript.sh ./stepX_YYY.vim
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-visual-basicnet" class="anchor" aria-hidden="true" href="#visual-basicnet"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Visual Basic.NET&lt;/h3&gt;
&lt;p&gt;The VB.NET implementation of mal has been tested on Linux using the Mono
VB compiler (vbnc) and the Mono runtime (version 2.10.8.1). Both are
required to build and run the VB.NET implementation.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd vb
make
mono ./stepX_YYY.exe
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-webassembly-wasm" class="anchor" aria-hidden="true" href="#webassembly-wasm"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;WebAssembly (wasm)&lt;/h3&gt;
&lt;p&gt;The WebAssembly implementation is written in
&lt;a href="https://github.com/kanaka/wam"&gt;Wam&lt;/a&gt; (WebAssembly Macro language) and
runs under several different non-web embeddings (runtimes):
&lt;a href="https://nodejs.org" rel="nofollow"&gt;node&lt;/a&gt;,
&lt;a href="https://github.com/CraneStation/wasmtime"&gt;wasmtime&lt;/a&gt;,
&lt;a href="https://wasmer.io" rel="nofollow"&gt;wasmer&lt;/a&gt;,
&lt;a href="https://github.com/fastly/lucet"&gt;lucet&lt;/a&gt;,
&lt;a href="https://github.com/kanaka/wac"&gt;wax&lt;/a&gt;,
&lt;a href="https://github.com/kanaka/wac"&gt;wace&lt;/a&gt;,
&lt;a href="https://github.com/kanaka/warpy"&gt;warpy&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd wasm
# node
make wasm_MODE=node
./run.js ./stepX_YYY.wasm
# wasmtime
make wasm_MODE=wasmtime
wasmtime --dir=./ --dir=../ --dir=/ ./stepX_YYY.wasm
# wasmer
make wasm_MODE=wasmer
wasmer run --dir=./ --dir=../ --dir=/ ./stepX_YYY.wasm
# lucet
make wasm_MODE=lucet
lucet-wasi --dir=./:./ --dir=../:../ --dir=/:/ ./stepX_YYY.so
# wax
make wasm_MODE=wax
wax ./stepX_YYY.wasm
# wace
make wasm_MODE=wace_libc
wace ./stepX_YYY.wasm
# warpy
make wasm_MODE=warpy
warpy --argv --memory-pages 256 ./stepX_YYY.wasm
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-wren" class="anchor" aria-hidden="true" href="#wren"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Wren&lt;/h3&gt;
&lt;p&gt;The Wren implementation of mal was tested on Wren 0.2.0.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd wren
wren ./stepX_YYY.wren
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-yorick" class="anchor" aria-hidden="true" href="#yorick"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Yorick&lt;/h3&gt;
&lt;p&gt;The Yorick implementation of mal was tested on Yorick 2.2.04.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd yorick
yorick -batch ./stepX_YYY.i
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;a id="user-content-running-tests" class="anchor" aria-hidden="true" href="#running-tests"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Running tests&lt;/h2&gt;
&lt;p&gt;The top level Makefile has a number of useful targets to assist with
implementation development and testing. The &lt;code&gt;help&lt;/code&gt; target provides
a list of the targets and options:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;make help
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-functional-tests" class="anchor" aria-hidden="true" href="#functional-tests"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Functional tests&lt;/h3&gt;
&lt;p&gt;The are almost 800 generic functional tests (for all implementations)
in the &lt;code&gt;tests/&lt;/code&gt; directory. Each step has a corresponding test file
containing tests specific to that step. The &lt;code&gt;runtest.py&lt;/code&gt; test harness
launches a Mal step implementation and then feeds the tests one at
a time to the implementation and compares the output/return value to
the expected output/return value.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To run all the tests across all implementations (be prepared to wait):&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;make test
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;To run all tests against a single implementation:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;make "test^IMPL"

# e.g.
make "test^clojure"
make "test^js"
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;To run tests for a single step against all implementations:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;make "test^stepX"

# e.g.
make "test^step2"
make "test^step7"
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;To run tests for a specific step against a single implementation:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;make "test^IMPL^stepX"

# e.g
make "test^ruby^step3"
make "test^ps^step4"
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-self-hosted-functional-tests" class="anchor" aria-hidden="true" href="#self-hosted-functional-tests"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Self-hosted functional tests&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;To run the functional tests in self-hosted mode, you specify &lt;code&gt;mal&lt;/code&gt;
as the test implementation and use the &lt;code&gt;MAL_IMPL&lt;/code&gt; make variable
to change the underlying host language (default is JavaScript):&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;make MAL_IMPL=IMPL "test^mal^step2"

# e.g.
make "test^mal^step2"   # js is default
make MAL_IMPL=ruby "test^mal^step2"
make MAL_IMPL=python "test^mal^step2"
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-starting-the-repl" class="anchor" aria-hidden="true" href="#starting-the-repl"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Starting the REPL&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;To start the REPL of an implementation in a specific step:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;make "repl^IMPL^stepX"

# e.g
make "repl^ruby^step3"
make "repl^ps^step4"
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;If you omit the step, then &lt;code&gt;stepA&lt;/code&gt; is used:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;make "repl^IMPL"

# e.g
make "repl^ruby"
make "repl^ps"
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;To start the REPL of the self-hosted implementation, specify &lt;code&gt;mal&lt;/code&gt; as the
REPL implementation and use the &lt;code&gt;MAL_IMPL&lt;/code&gt; make variable to change the
underlying host language (default is JavaScript):&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;make MAL_IMPL=IMPL "repl^mal^stepX"

# e.g.
make "repl^mal^step2"   # js is default
make MAL_IMPL=ruby "repl^mal^step2"
make MAL_IMPL=python "repl^mal"
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-performance-tests" class="anchor" aria-hidden="true" href="#performance-tests"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Performance tests&lt;/h3&gt;
&lt;p&gt;Warning: These performance tests are neither statistically valid nor
comprehensive; runtime performance is a not a primary goal of mal. If
you draw any serious conclusions from these performance tests, then
please contact me about some amazing oceanfront property in Kansas
that I'm willing to sell you for cheap.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To run performance tests against a single implementation:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;make "perf^IMPL"

# e.g.
make "perf^js"
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;To run performance tests against all implementations:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;make "perf"
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-generating-language-statistics" class="anchor" aria-hidden="true" href="#generating-language-statistics"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Generating language statistics&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;To report line and byte statistics for a single implementation:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;make "stats^IMPL"

# e.g.
make "stats^js"
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;a id="user-content-dockerized-testing" class="anchor" aria-hidden="true" href="#dockerized-testing"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Dockerized testing&lt;/h2&gt;
&lt;p&gt;Every implementation directory contains a Dockerfile to create
a docker image containing all the dependencies for that
implementation. In addition, the top-level Makefile contains support
for running the tests target (and perf, stats, repl, etc) within
a docker container for that implementation by passing &lt;em&gt;"DOCKERIZE=1"&lt;/em&gt;
on the make command line. For example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;make DOCKERIZE=1 "test^js^step3"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Existing implementations already have docker images built and pushed
to the docker registry. However, if
you wish to build or rebuild a docker image locally, the toplevel
Makefile provides a rule for building docker images:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;make "docker-build^IMPL"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Notes&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Docker images are named &lt;em&gt;"kanaka/mal-test-IMPL"&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;JVM-based language implementations (Groovy, Java, Clojure, Scala):
you will probably need to run this command once manually
first &lt;code&gt;make DOCKERIZE=1 "repl^IMPL"&lt;/code&gt; before you can run tests because
runtime dependencies need to be downloaded to avoid the tests timing
out. These dependencies are downloaded to dot-files in the /mal
directory so they will persist between runs.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-license" class="anchor" aria-hidden="true" href="#license"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;License&lt;/h2&gt;
&lt;p&gt;Mal (make-a-lisp) is licensed under the MPL 2.0 (Mozilla Public
License 2.0). See LICENSE.txt for more details.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>kanaka</author><guid isPermaLink="false">https://github.com/kanaka/mal</guid><pubDate>Mon, 09 Dec 2019 00:01:00 GMT</pubDate></item><item><title>microsoft/MS-DOS #2 in Assembly, This week</title><link>https://github.com/microsoft/MS-DOS</link><description>&lt;p&gt;&lt;i&gt;The original sources of MS-DOS 1.25 and 2.0, for reference purposes&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://github.com/Microsoft/MS-DOS/blob/master/msdos-logo.png"&gt;&lt;img width="150" height="150" align="left" alt="MS-DOS logo" src="https://github.com/Microsoft/MS-DOS/raw/master/msdos-logo.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;   
&lt;h1&gt;&lt;a id="user-content-ms-dos-v125-and-v20-source-code" class="anchor" aria-hidden="true" href="#ms-dos-v125-and-v20-source-code"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;MS-DOS v1.25 and v2.0 Source Code&lt;/h1&gt;
&lt;p&gt;This repo contains the original source-code and compiled binaries for MS-DOS v1.25 and MS-DOS v2.0.&lt;/p&gt;
&lt;p&gt;These are the same files &lt;a href="http://www.computerhistory.org/atchm/microsoft-ms-dos-early-source-code/" rel="nofollow"&gt;originally shared at the Computer History Museum on March 25th, 2014&lt;/a&gt; and are being (re)published in this repo to make them easier to find, reference-to in external writing and works, and to allow exploration and experimentation for those interested in early PC Operating Systems.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-license" class="anchor" aria-hidden="true" href="#license"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;License&lt;/h1&gt;
&lt;p&gt;All files within this repo are released under the &lt;a href="https://en.wikipedia.org/wiki/MIT_License" rel="nofollow"&gt;MIT (OSI) License&lt;/a&gt; as per the &lt;a href="https://github.com/Microsoft/MS-DOS/blob/master/LICENSE.md"&gt;LICENSE file&lt;/a&gt; stored in the root of this repo.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-contribute" class="anchor" aria-hidden="true" href="#contribute"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contribute!&lt;/h1&gt;
&lt;p&gt;The source files in this repo are for historical reference and will be kept static, so please &lt;strong&gt;don’t send&lt;/strong&gt; Pull Requests suggesting any modifications to the source files, but feel free to fork this repo and experiment &lt;g-emoji class="g-emoji" alias="blush" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f60a.png"&gt;😊&lt;/g-emoji&gt;.&lt;/p&gt;
&lt;p&gt;If, however, you’d like to submit additional non-source content or modifications to non-source files (e.g., this README), please submit via PR, and we’ll review and consider.&lt;/p&gt;
&lt;p&gt;This project has adopted the &lt;a href="https://opensource.microsoft.com/codeofconduct/" rel="nofollow"&gt;Microsoft Open Source Code of Conduct&lt;/a&gt;.  For more information see the &lt;a href="https://opensource.microsoft.com/codeofconduct/faq/" rel="nofollow"&gt;Code of Conduct FAQ&lt;/a&gt; or contact &lt;a href="mailto:opencode@microsoft.com"&gt;opencode@microsoft.com&lt;/a&gt; with any additional questions or comments.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>microsoft</author><guid isPermaLink="false">https://github.com/microsoft/MS-DOS</guid><pubDate>Mon, 09 Dec 2019 00:02:00 GMT</pubDate></item><item><title>chrislgarry/Apollo-11 #3 in Assembly, This week</title><link>https://github.com/chrislgarry/Apollo-11</link><description>&lt;p&gt;&lt;i&gt;Original Apollo 11 Guidance Computer (AGC) source code for the command and lunar modules.&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-apollo-11" class="anchor" aria-hidden="true" href="#apollo-11"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Apollo-11&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://www.nasa.gov/mission_pages/apollo/missions/apollo11.html" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/b0879e5ad3dded69a38362aacf9ec5baac73b1eb/68747470733a2f2f72617763646e2e6769746861636b2e636f6d2f616c65656e34322f6261646765732f63393234366637342f7372632f6e6173612e737667" alt="NASA" data-canonical-src="https://rawcdn.githack.com/aleen42/badges/c9246f74/src/nasa.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;g-emoji class="g-emoji" alias="crossed_flags" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f38c.png"&gt;🎌&lt;/g-emoji&gt;
&lt;a href="README.id.md"&gt;Bahasa Indonesia&lt;/a&gt;,
&lt;a href="README.ca.md"&gt;Català&lt;/a&gt;,
&lt;a href="README.de.md"&gt;Deutsch&lt;/a&gt;,
&lt;strong&gt;English&lt;/strong&gt;,
&lt;a href="README.es.md"&gt;Español&lt;/a&gt;,
&lt;a href="README.fr.md"&gt;Français&lt;/a&gt;,
&lt;a href="README.it.md"&gt;Italiano&lt;/a&gt;,
&lt;a href="README.pl.md"&gt;Polski&lt;/a&gt;,
&lt;a href="README.pt_br.md"&gt;Português&lt;/a&gt;,
&lt;a href="README.ru.md"&gt;Русский&lt;/a&gt;,
&lt;a href="README.tr.md"&gt;Türkçe&lt;/a&gt;,
&lt;a href="README.ro.md"&gt;Română&lt;/a&gt;,
&lt;a href="README.ar.md"&gt;العربية&lt;/a&gt;,
&lt;a href="README.hi_in.md"&gt;हिंदी&lt;/a&gt;,
&lt;a href="README.zh_tw.md"&gt;正體中文&lt;/a&gt;,
&lt;a href="README.zh_cn.md"&gt;简体中文&lt;/a&gt;,
&lt;a href="README.ko_kr.md"&gt;한국어&lt;/a&gt;,
&lt;a href="README.ja.md"&gt;日本&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Original Apollo 11 guidance computer (AGC) source code for Command
Module (Comanche055) and Lunar Module (Luminary099). Digitized by
the folks at &lt;a href="http://www.ibiblio.org/apollo/" rel="nofollow"&gt;Virtual AGC&lt;/a&gt; and &lt;a href="http://web.mit.edu/museum/" rel="nofollow"&gt;MIT Museum&lt;/a&gt;. The goal is to be
a repo for the original Apollo 11 source code. As such, PRs are
welcome for any issues identified between the transcriptions in this
repository and the original source scans for &lt;a href="http://www.ibiblio.org/apollo/ScansForConversion/Luminary099/" rel="nofollow"&gt;Luminary 099&lt;/a&gt; and
&lt;a href="http://www.ibiblio.org/apollo/ScansForConversion/Comanche055/" rel="nofollow"&gt;Comanche 055&lt;/a&gt;, as well as any files I may have missed.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-contributing" class="anchor" aria-hidden="true" href="#contributing"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contributing&lt;/h2&gt;
&lt;p&gt;Please read &lt;a href="https://github.com/chrislgarry/Apollo-11/blob/master/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt; before opening a pull request.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-compiling" class="anchor" aria-hidden="true" href="#compiling"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Compiling&lt;/h2&gt;
&lt;p&gt;If you are interested in compiling the original source code, check
out &lt;a href="https://github.com/rburkey2005/virtualagc"&gt;Virtual AGC&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-attribution" class="anchor" aria-hidden="true" href="#attribution"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Attribution&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt; &lt;/th&gt;
&lt;th align="left"&gt; &lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Copyright&lt;/td&gt;
&lt;td align="left"&gt;Public domain&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Comanche055&lt;/td&gt;
&lt;td align="left"&gt;Part of the source code for Colossus 2A, the Command Module's (CM) Apollo Guidance Computer (AGC) for Apollo 11&lt;br&gt;&lt;code&gt;Assemble revision 055 of AGC program Comanche by NASA&lt;/code&gt;&lt;br&gt;&lt;code&gt;2021113-051. 10:28 APR. 1, 1969&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Luminary099&lt;/td&gt;
&lt;td align="left"&gt;Part of the source code for Luminary 1A, the Lunar Module's (LM) Apollo Guidance Computer (AGC) for Apollo 11&lt;br&gt;&lt;code&gt;Assemble revision 001 of AGC program LYM99 by NASA&lt;/code&gt;&lt;br&gt;&lt;code&gt;2021112-061. 16:27 JUL. 14, 1969&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Assembler&lt;/td&gt;
&lt;td align="left"&gt;yaYUL&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Contact&lt;/td&gt;
&lt;td align="left"&gt;Ron Burkey &lt;a href="mailto:info@sandroid.org"&gt;info@sandroid.org&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Website&lt;/td&gt;
&lt;td align="left"&gt;&lt;a href="http://www.ibiblio.org/apollo" rel="nofollow"&gt;www.ibiblio.org/apollo&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Digitalization&lt;/td&gt;
&lt;td align="left"&gt;This source code has been transcribed or otherwise adapted from digitized images of a hardcopy from the MIT Museum. The digitization was performed by Paul Fjeld, and arranged for by Deborah Douglas of the Museum. Many thanks to both.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;&lt;a id="user-content-contract-and-approvals" class="anchor" aria-hidden="true" href="#contract-and-approvals"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contract and Approvals&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Derived from &lt;a href="https://github.com/chrislgarry/Apollo-11/blob/master/Comanche055/CONTRACT_AND_APPROVALS.agc"&gt;CONTRACT_AND_APPROVALS.agc&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This AGC program shall also be referred to as Colossus 2A.&lt;/p&gt;
&lt;p&gt;This program is intended for use in the CM as specified in report &lt;code&gt;R-577&lt;/code&gt;. This program was prepared under DSR project &lt;code&gt;55-23870&lt;/code&gt;, sponsored by the Manned Spacecraft Center of The National Aeronautics and Space Administration through contract &lt;code&gt;NAS 9-4065&lt;/code&gt; with the Instrumentation Laboratory, Massachusetts Institute of Technology, Cambridge, Mass.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt;Submitted by&lt;/th&gt;
&lt;th align="left"&gt;Role&lt;/th&gt;
&lt;th align="left"&gt;Date&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Margaret H. Hamilton&lt;/td&gt;
&lt;td align="left"&gt;Colossus Programming Leader&lt;br&gt;Apollo Guidance and Navigation&lt;/td&gt;
&lt;td align="left"&gt;28 Mar 69&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt;Approved by&lt;/th&gt;
&lt;th align="left"&gt;Role&lt;/th&gt;
&lt;th align="left"&gt;Date&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Daniel J. Lickly&lt;/td&gt;
&lt;td align="left"&gt;Director, Mission Program Development&lt;br&gt;Apollo Guidance and Navigation Program&lt;/td&gt;
&lt;td align="left"&gt;28 Mar 69&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Fred H. Martin&lt;/td&gt;
&lt;td align="left"&gt;Colossus Project Manager&lt;br&gt;Apollo Guidance and Navigation Program&lt;/td&gt;
&lt;td align="left"&gt;28 Mar 69&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Norman E. Sears&lt;/td&gt;
&lt;td align="left"&gt;Director, Mission Development&lt;br&gt;Apollo Guidance and Navigation Program&lt;/td&gt;
&lt;td align="left"&gt;28 Mar 69&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Richard H. Battin&lt;/td&gt;
&lt;td align="left"&gt;Director, Mission Development&lt;br&gt;Apollo Guidance and Navigation Program&lt;/td&gt;
&lt;td align="left"&gt;28 Mar 69&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;David G. Hoag&lt;/td&gt;
&lt;td align="left"&gt;Director&lt;br&gt;Apollo Guidance and Navigation Program&lt;/td&gt;
&lt;td align="left"&gt;28 Mar 69&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Ralph R. Ragan&lt;/td&gt;
&lt;td align="left"&gt;Deputy Director&lt;br&gt;Instrumentation Laboratory&lt;/td&gt;
&lt;td align="left"&gt;28 Mar 69&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>chrislgarry</author><guid isPermaLink="false">https://github.com/chrislgarry/Apollo-11</guid><pubDate>Mon, 09 Dec 2019 00:03:00 GMT</pubDate></item><item><title>SpinalHDL/VexRiscv #4 in Assembly, This week</title><link>https://github.com/SpinalHDL/VexRiscv</link><description>&lt;p&gt;&lt;i&gt;A FPGA friendly 32 bit RISC-V CPU implementation&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h2&gt;&lt;a id="user-content-index" class="anchor" aria-hidden="true" href="#index"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Index&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#index"&gt;Index&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#description"&gt;Description&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#area-usage-and-maximal-frequency"&gt;Area usage and maximal frequency&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dependencies"&gt;Dependencies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cpu-generation"&gt;CPU generation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#regression-tests"&gt;Regression tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#interactive-debug-of-the-simulated-cpu-via-gdb-openocd-and-verilator"&gt;Interactive debug of the simulated CPU via GDB OpenOCD and Verilator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#using-Eclipse-to-run-the-software-and-debug-it"&gt;Using Eclipse to run the software and debug it&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#by-using-gnu-mcu-eclipse"&gt;By using gnu-mcu-eclipse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#by-using-zylin-plugin-old"&gt;By using Zylin plugin (old)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#briey-soc"&gt;Briey SoC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#murax-soc"&gt;Murax SoC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#running-linux"&gt;Running Linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#build-the-risc-v-gcc"&gt;Build the RISC-V GCC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cpu-parametrization-and-instantiation-example"&gt;CPU parametrization and instantiation example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#add-a-custom-instruction-to-the-cpu-via-the-plugin-system"&gt;Add a custom instruction to the CPU via the plugin system&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#adding-a-new-csr-via-the-plugin-system"&gt;Adding a new CSR via the plugin system&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cpu-clock-and-resets"&gt;CPU clock and resets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#vexriscv-architecture"&gt;VexRiscv Architecture&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#plugins"&gt;Plugins&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-description" class="anchor" aria-hidden="true" href="#description"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Description&lt;/h2&gt;
&lt;p&gt;This repository hosts a RISC-V implementation written in SpinalHDL. Here are some specs :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RV32I[M][C][A] instruction set (Atomic only inside a single core)&lt;/li&gt;
&lt;li&gt;Pipelined from 2 to 5+ stages ([Fetch*X], Decode, Execute, [Memory], [WriteBack])&lt;/li&gt;
&lt;li&gt;1.44 DMIPS/Mhz --no-inline when nearly all features are enabled (1.57 DMIPS/Mhz when the divider lookup table is enabled)&lt;/li&gt;
&lt;li&gt;Optimized for FPGA, do not use any vendor specific IP block / primitive&lt;/li&gt;
&lt;li&gt;AXI4, Avalon, wishbone ready&lt;/li&gt;
&lt;li&gt;Optional MUL/DIV extensions&lt;/li&gt;
&lt;li&gt;Optional instruction and data caches&lt;/li&gt;
&lt;li&gt;Optional hardware refilled MMU&lt;/li&gt;
&lt;li&gt;Optional debug extension allowing Eclipse debugging via a GDB &amp;gt;&amp;gt; openOCD &amp;gt;&amp;gt; JTAG connection&lt;/li&gt;
&lt;li&gt;Optional interrupts and exception handling with Machine, [Supervisor] and [User] modes as defined in the &lt;a href="https://riscv.org/specifications/privileged-isa/" rel="nofollow"&gt;RISC-V Privileged ISA Specification v1.10&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Two implementations of shift instructions: Single cycle and shiftNumber cycles&lt;/li&gt;
&lt;li&gt;Each stage can have optional bypass or interlock hazard logic&lt;/li&gt;
&lt;li&gt;Linux compatible (SoC : &lt;a href="https://github.com/enjoy-digital/linux-on-litex-vexriscv"&gt;https://github.com/enjoy-digital/linux-on-litex-vexriscv&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Zephyr compatible&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Dolu1990/FreeRTOS-RISCV"&gt;FreeRTOS port&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The hardware description of this CPU is done by using a very software oriented approach
(without any overhead in the generated hardware). Here is a list of software concepts used:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;There are very few fixed things. Nearly everything is plugin based. The PC manager is a plugin, the register file is a plugin, the hazard controller is a plugin, ...&lt;/li&gt;
&lt;li&gt;There is an automatic a tool which allows plugins to insert data in the pipeline at a given stage, and allows other plugins to read it in another stage through automatic pipelining.&lt;/li&gt;
&lt;li&gt;There is a service system which provides a very dynamic framework. For instance, a plugin could provide an exception service which can then be used by other plugins to emit exceptions from the pipeline.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There is a gitter channel for all questions about VexRiscv :&lt;br&gt;
&lt;a href="https://gitter.im/SpinalHDL/VexRiscv?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/7c72efd28eb58cc3d3de109e622a599aae46ed38/68747470733a2f2f6261646765732e6769747465722e696d2f5370696e616c48444c2f56657852697363762e737667" alt="Gitter" data-canonical-src="https://badges.gitter.im/SpinalHDL/VexRiscv.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For commercial support, please contact &lt;a href="mailto:spinalhdl@gmail.com"&gt;spinalhdl@gmail.com&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-area-usage-and-maximal-frequency" class="anchor" aria-hidden="true" href="#area-usage-and-maximal-frequency"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Area usage and maximal frequency&lt;/h2&gt;
&lt;p&gt;The following numbers were obtained by synthesizing the CPU as toplevel without any specific synthesis options to save area or to get better maximal frequency (neutral).&lt;br&gt;
The clock constraint is set to an unattainable value, which tends to increase the design area.&lt;br&gt;
The dhrystone benchmark was compiled with the &lt;code&gt;-O3 -fno-inline&lt;/code&gt; option.&lt;br&gt;
All the cached configurations have some cache trashing during the dhrystone benchmark except the &lt;code&gt;VexRiscv full max perf&lt;/code&gt; one. This of course reduces the performance. It is possible to produce
dhrystone binaries which fit inside a 4KB I$ and 4KB D$ (I already had this case once) but currently it isn't the case.&lt;br&gt;
The CPU configurations used below can be found in the &lt;code&gt;src/scala/vexriscv/demo&lt;/code&gt; directory.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;VexRiscv smallest (RV32I, 0.52 DMIPS/Mhz, no datapath bypass, no interrupt) -&amp;gt;
    Artix 7     -&amp;gt; 233 Mhz 494 LUT 505 FF
    Cyclone V   -&amp;gt; 193 Mhz 347 ALMs
    Cyclone IV  -&amp;gt; 179 Mhz 730 LUT 494 FF
    iCE40       -&amp;gt; 92 Mhz 1130 LC

VexRiscv smallest (RV32I, 0.52 DMIPS/Mhz, no datapath bypass) -&amp;gt;
    Artix 7     -&amp;gt; 232 Mhz 538 LUT 562 FF
    Cyclone V   -&amp;gt; 189 Mhz 387 ALMs
    Cyclone IV  -&amp;gt; 175 Mhz 829 LUT 550 FF
    iCE40       -&amp;gt; 85 Mhz 1292 LC

VexRiscv small and productive (RV32I, 0.82 DMIPS/Mhz)  -&amp;gt;
    Artix 7     -&amp;gt; 226 Mhz 689 LUT 531 FF
    Cyclone V   -&amp;gt; 145 Mhz 499 ALMs
    Cyclone IV  -&amp;gt; 150 Mhz 1,111 LUT 525 FF
    iCE40       -&amp;gt; 63 Mhz 1596 LC

VexRiscv small and productive with I$ (RV32I, 0.70 DMIPS/Mhz, 4KB-I$)  -&amp;gt;
    Artix 7     -&amp;gt; 230 Mhz 734 LUT 564 FF
    Cyclone V   -&amp;gt; 145 Mhz 511 ALMs
    Cyclone IV  -&amp;gt; 144 Mhz 1,145 LUT 531 FF
    iCE40       -&amp;gt; 66 Mhz 1680 LC

VexRiscv full no cache (RV32IM, 1.21 DMIPS/Mhz 2.30 Coremark/Mhz, single cycle barrel shifter, debug module, catch exceptions, static branch) -&amp;gt;
    Artix 7     -&amp;gt; 219 Mhz 1537 LUT 977 FF
    Cyclone V   -&amp;gt; 139 Mhz 958 ALMs
    Cyclone IV  -&amp;gt; 135 Mhz 2,011 LUT 968 FF

VexRiscv full (RV32IM, 1.21 DMIPS/Mhz 2.30 Coremark/Mhz with cache trashing, 4KB-I$,4KB-D$, single cycle barrel shifter, debug module, catch exceptions, static branch) -&amp;gt;
    Artix 7     -&amp;gt; 193 Mhz 1706 LUT 1172 FF
    Cyclone V   -&amp;gt; 144 Mhz 1,128 ALMs
    Cyclone IV  -&amp;gt; 133 Mhz 2,298 LUT 1,096 FF

VexRiscv full max dmips/mhz -&amp;gt; (RV32IM, 1.44 DMIPS/Mhz 2.70 Coremark/Mhz,, 16KB-I$,16KB-D$, single cycle barrel shifter, debug module, catch exceptions, dynamic branch prediction in the fetch stage, branch and shift operations done in the Execute stage) -&amp;gt;
    Artix 7     -&amp;gt; 140 Mhz 1767 LUT 1128 FF
    Cyclone V   -&amp;gt; 90 Mhz 1,089 ALMs
    Cyclone IV  -&amp;gt; 79 Mhz 2,336 LUT 1,048 FF

VexRiscv full with MMU (RV32IM, 1.24 DMIPS/Mhz 2.35 Coremark/Mhz, with cache trashing, 4KB-I$, 4KB-D$, single cycle barrel shifter, debug module, catch exceptions, dynamic branch, MMU) -&amp;gt;
    Artix 7     -&amp;gt; 161 Mhz 1985 LUT 1585 FF
    Cyclone V   -&amp;gt; 124 Mhz 1,319 ALMs
    Cyclone IV  -&amp;gt; 122 Mhz 2,710 LUT 1,501 FF

VexRiscv linux balanced (RV32IMA, 1.21 DMIPS/Mhz 2.27 Coremark/Mhz, with cache trashing, 4KB-I$, 4KB-D$, single cycle barrel shifter, catch exceptions, static branch, MMU, Supervisor, Compatible with mainstream linux) -&amp;gt;
    Artix 7     -&amp;gt; 170 Mhz 2530 LUT 2013 FF
    Cyclone V   -&amp;gt; 125 Mhz 1,618 ALMs
    Cyclone IV  -&amp;gt; 116 Mhz 3,314 LUT 2,016 FF

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The following configuration results in 1.44 DMIPS/MHz:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;5 stage : F -&amp;gt; D -&amp;gt; E -&amp;gt; M  -&amp;gt; WB&lt;/li&gt;
&lt;li&gt;single cycle ADD/SUB/Bitwise/Shift ALU&lt;/li&gt;
&lt;li&gt;branch/jump done in the E stage&lt;/li&gt;
&lt;li&gt;memory load values are bypassed in the WB stage (late result)&lt;/li&gt;
&lt;li&gt;33 cycle division with bypassing in the M stage (late result)&lt;/li&gt;
&lt;li&gt;single cycle multiplication with bypassing in the WB stage (late result)&lt;/li&gt;
&lt;li&gt;dynamic branch prediction done in the F stage with a direct mapped target buffer cache (no penalties on correct predictions)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that recently, the capability to remove the Fetch/Memory/WriteBack stage was added to reduce the area of the CPU, which end up with a smaller CPU and a better DMIPS/Mhz for the small configurations.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-dependencies" class="anchor" aria-hidden="true" href="#dependencies"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Dependencies&lt;/h2&gt;
&lt;p&gt;On Ubuntu 14 :&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; JAVA JDK 8&lt;/span&gt;
sudo add-apt-repository -y ppa:openjdk-r/ppa
sudo apt-get update
sudo apt-get install openjdk-8-jdk -y
sudo update-alternatives --config java
sudo update-alternatives --config javac

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Install SBT - https://www.scala-sbt.org/&lt;/span&gt;
&lt;span class="pl-c1"&gt;echo&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;deb https://dl.bintray.com/sbt/debian /&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;|&lt;/span&gt; sudo tee -a /etc/apt/sources.list.d/sbt.list
sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 2EE0EA64E40A89B84B2DF73499E82A75642AC823
sudo apt-get update
sudo apt-get install sbt

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Verilator (for sim only, realy need 3.9+, in general apt-get will give you 3.8)&lt;/span&gt;
sudo apt-get install git make autoconf g++ flex bison
git clone http://git.veripool.org/git/verilator   &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Only first time&lt;/span&gt;
unsetenv VERILATOR_ROOT  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; For csh; ignore error if on bash&lt;/span&gt;
&lt;span class="pl-c1"&gt;unset&lt;/span&gt; VERILATOR_ROOT  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; For bash&lt;/span&gt;
&lt;span class="pl-c1"&gt;cd&lt;/span&gt; verilator
git pull        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Make sure we're up-to-date&lt;/span&gt;
git checkout verilator_3_918
autoconf        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Create ./configure script&lt;/span&gt;
./configure
make
sudo make install&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-cpu-generation" class="anchor" aria-hidden="true" href="#cpu-generation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;CPU generation&lt;/h2&gt;
&lt;p&gt;You can find two example CPU instances in:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;src/main/scala/vexriscv/demo/GenFull.scala&lt;/li&gt;
&lt;li&gt;src/main/scala/vexriscv/demo/GenSmallest.scala&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To generate the corresponding RTL as a VexRiscv.v file, run the following commands in the root directory of this repository:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;sbt &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;runMain vexriscv.demo.GenFull&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;sbt &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;runMain vexriscv.demo.GenSmallest&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;NOTES:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It could take time the first time you run it.&lt;/li&gt;
&lt;li&gt;The VexRiscv project may need an unreleased master-head of the SpinalHDL repo. If it fails to compile, just get the SpinalHDL repository and
do a "sbt clean compile publish-local" in it as described in the dependencies chapter.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-regression-tests" class="anchor" aria-hidden="true" href="#regression-tests"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Regression tests&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://travis-ci.org/SpinalHDL/VexRiscv" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/89b084e32a788686ffcb4ed55672129b01a5f94d/68747470733a2f2f7472617669732d63692e6f72672f5370696e616c48444c2f56657852697363762e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/SpinalHDL/VexRiscv.svg?branch=master" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;To run tests (need the verilator simulator), go in the src/test/cpp/regression folder and run :&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; To test the GenFull CPU&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; (Don't worry about the CSR test not passing, basicaly the GenFull isn't the truly full version of the CPU, some CSR features are disable in it)&lt;/span&gt;
make clean run

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; To test the GenSmallest CPU&lt;/span&gt;
make clean run IBUS=SIMPLE DBUS=SIMPLE CSR=no MMU=no DEBUG_PLUGIN=no MUL=no DIV=no&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The self-test includes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ISA tests from &lt;a href="https://github.com/riscv/riscv-tests/tree/master/isa"&gt;https://github.com/riscv/riscv-tests/tree/master/isa&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Dhrystone benchmark&lt;/li&gt;
&lt;li&gt;24 FreeRTOS tests&lt;/li&gt;
&lt;li&gt;Some handwritten tests to check the CSR, debug module and MMU plugins&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can enable FreeRTOS tests by adding &lt;code&gt;FREERTOS=yes&lt;/code&gt; to the command line, but it will take time to run. Also, it uses THREAD_COUNT host CPU threads to run multiple regression in parallel.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-interactive-debug-of-the-simulated-cpu-via-gdb-openocd-and-verilator" class="anchor" aria-hidden="true" href="#interactive-debug-of-the-simulated-cpu-via-gdb-openocd-and-verilator"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Interactive debug of the simulated CPU via GDB OpenOCD and Verilator&lt;/h2&gt;
&lt;p&gt;It's as described to run tests, but you just have to add &lt;code&gt;DEBUG_PLUGIN_EXTERNAL=yes&lt;/code&gt; in the make arguments.
Work for the GenFull, but not for the GenSmallest as this configuration has no debug module.&lt;/p&gt;
&lt;p&gt;Then you can use the &lt;a href="https://github.com/SpinalHDL/openocd_riscv"&gt;https://github.com/SpinalHDL/openocd_riscv&lt;/a&gt; tool to create a GDB server connected to the target (the simulated CPU)&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt;in the VexRiscv repository, to run the simulation on which one OpenOCD can connect itself =&amp;gt;&lt;/span&gt;
sbt &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;runMain vexriscv.demo.GenFull&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-c1"&gt;cd&lt;/span&gt; src/test/cpp/regression
make run DEBUG_PLUGIN_EXTERNAL=yes

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt;In the openocd git, after building it =&amp;gt;&lt;/span&gt;
src/openocd -c &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;set VEXRISCV_YAML PATH_TO_THE_GENERATED_CPU0_YAML_FILE&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; -f tcl/target/vexriscv_sim.cfg

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt;Run a GDB session with an elf RISCV executable (GenFull CPU)&lt;/span&gt;
YourRiscvToolsPath/bin/riscv32-unknown-elf-gdb VexRiscvRepo/src/test/resources/elf/uart.elf
target remote localhost:3333
monitor reset halt
load
&lt;span class="pl-k"&gt;continue&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Now it should print messages in the Verilator simulation of the CPU&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-using-eclipse-to-run-the-software-and-debug-it" class="anchor" aria-hidden="true" href="#using-eclipse-to-run-the-software-and-debug-it"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Using Eclipse to run the software and debug it&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-by-using-gnu-mcu-eclipse" class="anchor" aria-hidden="true" href="#by-using-gnu-mcu-eclipse"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;By using gnu-mcu-eclipse&lt;/h3&gt;
&lt;p&gt;You can download releases of the IDE here : &lt;a href="https://github.com/gnu-mcu-eclipse/org.eclipse.epp.packages/releases"&gt;https://github.com/gnu-mcu-eclipse/org.eclipse.epp.packages/releases&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In the IDE, you can import a makefile project by :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;file -&amp;gt; import -&amp;gt; C/C++ -&amp;gt; existing Code as Makefile Project&lt;/li&gt;
&lt;li&gt;Select the folder which contain the makefile, select "Cross GCC" (not "RISC-V Cross GCC")&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To create a new debug configuration :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;run -&amp;gt; Debug Configurations -&amp;gt; GDB OpenOCD Debugging double click&lt;/li&gt;
&lt;li&gt;Look at &lt;a href="https://drive.google.com/open?id=1c46tyEV0xLwOsk76b0y2qqs8CYy7Zq3f" rel="nofollow"&gt;https://drive.google.com/open?id=1c46tyEV0xLwOsk76b0y2qqs8CYy7Zq3f&lt;/a&gt; for a configuration example&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-by-using-zylin-plugin-old" class="anchor" aria-hidden="true" href="#by-using-zylin-plugin-old"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;By using Zylin plugin (old)&lt;/h3&gt;
&lt;p&gt;You can use the Eclipse + Zylin embedded CDT plugin to do it (&lt;a href="http://opensource.zylin.com/embeddedcdt.html" rel="nofollow"&gt;http://opensource.zylin.com/embeddedcdt.html&lt;/a&gt;). Tested with Helios Service Release 2 (&lt;a href="http://www.Eclipse.org/downloads/download.php?file=/technology/epp/downloads/release/helios/SR2/Eclipse-cpp-helios-SR2-linux-gtk-x86_64.tar.gz" rel="nofollow"&gt;http://www.Eclipse.org/downloads/download.php?file=/technology/epp/downloads/release/helios/SR2/Eclipse-cpp-helios-SR2-linux-gtk-x86_64.tar.gz&lt;/a&gt;) and the corresponding zylin plugin.&lt;/p&gt;
&lt;p&gt;To following commands will download Eclipse and install the plugin.&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;wget http://www.eclipse.org/downloads/download.php&lt;span class="pl-k"&gt;?&lt;/span&gt;file=/technology/epp/downloads/release/helios/SR2/eclipse-cpp-helios-SR2-linux-gtk-x86_64.tar.gz
tar -xvzf download.php&lt;span class="pl-k"&gt;?&lt;/span&gt;file=%2Ftechnology%2Fepp%2Fdownloads%2Frelease%2Fhelios%2FSR2%2Feclipse-cpp-helios-SR2-linux-gtk-x86_64.tar.gz
&lt;span class="pl-c1"&gt;cd&lt;/span&gt; eclipse
./eclipse -application org.eclipse.equinox.p2.director -repository http://opensource.zylin.com/zylincdt -installIU com.zylin.cdt.feature.feature.group/&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;See &lt;a href="https://drive.google.com/drive/folders/1NseNHH05B6lmIXqQFVwK8xRjWE4ydeG-?usp=sharing" rel="nofollow"&gt;https://drive.google.com/drive/folders/1NseNHH05B6lmIXqQFVwK8xRjWE4ydeG-?usp=sharing&lt;/a&gt; to import a makefile project and create a debug configuration.&lt;/p&gt;
&lt;p&gt;Note that sometime this Eclipse need to be restarted in order to be able to place new breakpoints.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-briey-soc" class="anchor" aria-hidden="true" href="#briey-soc"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Briey SoC&lt;/h2&gt;
&lt;p&gt;As a demonstrator, a SoC named Briey is implemented in &lt;code&gt;src/main/scala/vexriscv/demo/Briey.scala&lt;/code&gt;. This SoC is very similar to
the &lt;a href="https://spinalhdl.github.io/SpinalDoc/spinal/lib/pinsec/hardware/" rel="nofollow"&gt;Pinsec SOC&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="assets/brieySoc.png?raw=true"&gt;&lt;img src="assets/brieySoc.png?raw=true" alt="Alt text" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;To generate the Briey SoC Hardware:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;sbt &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;runMain vexriscv.demo.Briey&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To run the verilator simulation of the Briey SoC which can then be connected to OpenOCD/GDB, first get those dependencies:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;sudo apt-get install build-essential xorg-dev libudev-dev libts-dev libgl1-mesa-dev libglu1-mesa-dev libasound2-dev libpulse-dev libopenal-dev libogg-dev libvorbis-dev libaudiofile-dev libpng12-dev libfreetype6-dev libusb-dev libdbus-1-dev zlib1g-dev libdirectfb-dev libsdl2-dev&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then go in &lt;code&gt;src/test/cpp/briey&lt;/code&gt; and run the simulation with (UART TX is printed in the terminal, VGA is displayed in a GUI):&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;make clean run&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To connect OpenOCD (&lt;a href="https://github.com/SpinalHDL/openocd_riscv"&gt;https://github.com/SpinalHDL/openocd_riscv&lt;/a&gt;) to the simulation :&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;src/openocd -f tcl/interface/jtag_tcp.cfg -c &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;set BRIEY_CPU0_YAML /home/spinalvm/Spinal/VexRiscv/cpu0.yaml&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; -f tcl/target/briey.cfg&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can find multiple software examples and demos here: &lt;a href="https://github.com/SpinalHDL/VexRiscvSocSoftware/tree/master/projects/briey"&gt;https://github.com/SpinalHDL/VexRiscvSocSoftware/tree/master/projects/briey&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can find some FPGA projects which instantiate the Briey SoC here (DE1-SoC, DE0-Nano): &lt;a href="https://drive.google.com/drive/folders/0B-CqLXDTaMbKZGdJZlZ5THAxRTQ?usp=sharing" rel="nofollow"&gt;https://drive.google.com/drive/folders/0B-CqLXDTaMbKZGdJZlZ5THAxRTQ?usp=sharing&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here are some measurements of Briey SoC timings and area :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    Artix 7     -&amp;gt; 186 Mhz 3138 LUT 3328 FF
    Cyclone V   -&amp;gt; 139 Mhz 2,175 ALMs
    Cyclone IV  -&amp;gt; 129 Mhz 4,337 LUT 3,170 FF
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;a id="user-content-murax-soc" class="anchor" aria-hidden="true" href="#murax-soc"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Murax SoC&lt;/h2&gt;
&lt;p&gt;Murax is a very light SoC (it fits in an ICE40 FPGA) which can work without any external components:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;VexRiscv RV32I[M]&lt;/li&gt;
&lt;li&gt;JTAG debugger (Eclipse/GDB/openocd ready)&lt;/li&gt;
&lt;li&gt;8 kB of on-chip ram&lt;/li&gt;
&lt;li&gt;Interrupt support&lt;/li&gt;
&lt;li&gt;APB bus for peripherals&lt;/li&gt;
&lt;li&gt;32 GPIO pin&lt;/li&gt;
&lt;li&gt;one 16 bits prescaler, two 16 bits timers&lt;/li&gt;
&lt;li&gt;one UART with tx/rx fifo&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Depending the CPU configuration, on the ICE40-hx8k FPGA with icestorm for synthesis, the full SoC has the following area/performance :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RV32I interlocked stages =&amp;gt; 51 Mhz, 2387 LC 0.45 DMIPS/Mhz&lt;/li&gt;
&lt;li&gt;RV32I bypassed stages    =&amp;gt; 45 Mhz, 2718 LC 0.65 DMIPS/Mhz&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Its implementation can be found here: &lt;code&gt;src/main/scala/vexriscv/demo/Murax.scala&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To generate the Murax SoC Hardware :&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; To generate the SoC without any content in the ram&lt;/span&gt;
sbt &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;runMain vexriscv.demo.Murax&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; To generate the SoC with a demo program already in ram&lt;/span&gt;
sbt &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;runMain vexriscv.demo.MuraxWithRamInit&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The demo program included by default with &lt;code&gt;MuraxWithRamInit&lt;/code&gt; will blink the
LEDs and echo characters received on the UART back to the user. To see this
when running the Verilator sim, type some text and press enter.&lt;/p&gt;
&lt;p&gt;Then go in src/test/cpp/murax and run the simulation with :&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;make clean run&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To connect OpenOCD (&lt;a href="https://github.com/SpinalHDL/openocd_riscv"&gt;https://github.com/SpinalHDL/openocd_riscv&lt;/a&gt;) to the simulation :&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;src/openocd -f tcl/interface/jtag_tcp.cfg -c &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;set MURAX_CPU0_YAML /home/spinalvm/Spinal/VexRiscv/cpu0.yaml&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; -f tcl/target/murax.cfg&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can find multiple software examples and demos here: &lt;a href="https://github.com/SpinalHDL/VexRiscvSocSoftware/tree/master/projects/murax"&gt;https://github.com/SpinalHDL/VexRiscvSocSoftware/tree/master/projects/murax&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here are some timing and area measurements of the Murax SoC:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Murax interlocked stages (0.45 DMIPS/Mhz, 8 bits GPIO) -&amp;gt;
  Artix 7    -&amp;gt; 215 Mhz 1044 LUT 1202 FF
  Cyclone V  -&amp;gt; 173 Mhz 737 ALMs
  Cyclone IV -&amp;gt; 144 Mhz 1,484 LUT 1,206 FF
  iCE40      -&amp;gt;  64 Mhz 2422 LC (nextpnr)

MuraxFast bypassed stages (0.65 DMIPS/Mhz, 8 bits GPIO) -&amp;gt;
  Artix 7    -&amp;gt; 229 Mhz 1269 LUT 1302 FF
  Cyclone V  -&amp;gt; 159 Mhz 864 ALMs
  Cyclone IV -&amp;gt; 137 Mhz 1,688 LUT 1,241 FF
  iCE40      -&amp;gt;  66 Mhz 2799 LC (nextpnr)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Some scripts to generate the SoC and call the icestorm toolchain can be found here: &lt;code&gt;scripts/Murax/&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;A toplevel simulation testbench with the same features + a GUI are implemented with SpinalSim. You can find it in &lt;code&gt;src/test/scala/vexriscv/MuraxSim.scala&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To run it :&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; This will generate the Murax RTL + run its testbench. You need Verilator 3.9xx installated.&lt;/span&gt;
sbt &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;test:runMain vexriscv.MuraxSim&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-running-linux" class="anchor" aria-hidden="true" href="#running-linux"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Running Linux&lt;/h2&gt;
&lt;p&gt;A default configuration is located in src/main/scala/vexriscv/demo/Linux.scala&lt;/p&gt;
&lt;p&gt;This file also contains&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The commands to compile the buildroot image&lt;/li&gt;
&lt;li&gt;How to run the Verilator simulation in interative mode&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There is currently no SoC to run it on hardware, it is WIP. But the CPU simulation can already boot linux and run user space application (even python).&lt;/p&gt;
&lt;p&gt;Note that VexRiscv can run Linux on both cache full and cache less design.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-build-the-risc-v-gcc" class="anchor" aria-hidden="true" href="#build-the-risc-v-gcc"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Build the RISC-V GCC&lt;/h2&gt;
&lt;p&gt;A prebuild GCC toolsuite can be found here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.sifive.com/products/tools/" rel="nofollow"&gt;https://www.sifive.com/products/tools/&lt;/a&gt;  =&amp;gt; SiFive GNU Embedded Toolchain&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The VexRiscvSocSoftware makefiles are expecting to find this prebuild version in /opt/riscv/&lt;strong&gt;contentOfThisPreBuild&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;wget https://static.dev.sifive.com/dev-tools/riscv64-unknown-elf-gcc-20171231-x86_64-linux-centos6.tar.gz
tar -xzvf riscv64-unknown-elf-gcc-20171231-x86_64-linux-centos6.tar.gz
sudo mv riscv64-unknown-elf-gcc-20171231-x86_64-linux-centos6 /opt/riscv64-unknown-elf-gcc-20171231-x86_64-linux-centos6
sudo mv /opt/riscv64-unknown-elf-gcc-20171231-x86_64-linux-centos6 /opt/riscv
&lt;span class="pl-c1"&gt;echo&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;export PATH=/opt/riscv/bin:$PATH&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-k"&gt;~&lt;/span&gt;/.bashrc&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you want to compile the rv32i and rv32im GCC toolchain from source code and install them in &lt;code&gt;/opt/&lt;/code&gt;, do the following (will take one hour):&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Be carefull, sometime the git clone has issue to successfully clone riscv-gnu-toolchain.&lt;/span&gt;
sudo apt-get install autoconf automake autotools-dev curl libmpc-dev libmpfr-dev libgmp-dev gawk build-essential bison flex texinfo gperf libtool patchutils bc zlib1g-dev -y

git clone --recursive https://github.com/riscv/riscv-gnu-toolchain riscv-gnu-toolchain
&lt;span class="pl-c1"&gt;cd&lt;/span&gt; riscv-gnu-toolchain

&lt;span class="pl-c1"&gt;echo&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Starting RISC-V Toolchain build process&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;

ARCH=rv32im
rmdir -rf &lt;span class="pl-smi"&gt;$ARCH&lt;/span&gt;
mkdir &lt;span class="pl-smi"&gt;$ARCH&lt;/span&gt;&lt;span class="pl-k"&gt;;&lt;/span&gt; &lt;span class="pl-c1"&gt;cd&lt;/span&gt; &lt;span class="pl-smi"&gt;$ARCH&lt;/span&gt;
../configure  --prefix=/opt/&lt;span class="pl-smi"&gt;$ARCH&lt;/span&gt; --with-arch=&lt;span class="pl-smi"&gt;$ARCH&lt;/span&gt; --with-abi=ilp32
sudo make -j4
&lt;span class="pl-c1"&gt;cd&lt;/span&gt; ..


ARCH=rv32i
rmdir -rf &lt;span class="pl-smi"&gt;$ARCH&lt;/span&gt;
mkdir &lt;span class="pl-smi"&gt;$ARCH&lt;/span&gt;&lt;span class="pl-k"&gt;;&lt;/span&gt; &lt;span class="pl-c1"&gt;cd&lt;/span&gt; &lt;span class="pl-smi"&gt;$ARCH&lt;/span&gt;
../configure  --prefix=/opt/&lt;span class="pl-smi"&gt;$ARCH&lt;/span&gt; --with-arch=&lt;span class="pl-smi"&gt;$ARCH&lt;/span&gt; --with-abi=ilp32
sudo make -j4
&lt;span class="pl-c1"&gt;cd&lt;/span&gt; ..

&lt;span class="pl-c1"&gt;echo&lt;/span&gt; -e &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-cce"&gt;\\&lt;/span&gt;nRISC-V Toolchain installation completed!&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-cpu-parametrization-and-instantiation-example" class="anchor" aria-hidden="true" href="#cpu-parametrization-and-instantiation-example"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;CPU parametrization and instantiation example&lt;/h2&gt;
&lt;p&gt;You can find many examples of different configurations in the &lt;a href="https://github.com/SpinalHDL/VexRiscv/tree/master/src/main/scala/vexriscv/demo"&gt;https://github.com/SpinalHDL/VexRiscv/tree/master/src/main/scala/vexriscv/demo&lt;/a&gt; folder.&lt;/p&gt;
&lt;p&gt;Here is one such example:&lt;/p&gt;
&lt;div class="highlight highlight-source-scala"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;vexriscv&lt;/span&gt;.&lt;span class="pl-en"&gt;_&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;vexriscv&lt;/span&gt;.&lt;span class="pl-en"&gt;plugin&lt;/span&gt;.&lt;span class="pl-en"&gt;_&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;Instanciate one VexRiscv&lt;/span&gt;
&lt;span class="pl-k"&gt;val&lt;/span&gt; &lt;span class="pl-smi"&gt;cpu&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;new&lt;/span&gt; &lt;span class="pl-en"&gt;VexRiscv&lt;/span&gt;(
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;Provide a configuration instance&lt;/span&gt;
  config &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;VexRiscvConfig&lt;/span&gt;(
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;Provide a list of plugins which will futher add their logic into the CPU&lt;/span&gt;
    plugins &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;List&lt;/span&gt;(
      &lt;span class="pl-k"&gt;new&lt;/span&gt; &lt;span class="pl-en"&gt;IBusSimplePlugin&lt;/span&gt;(
        resetVector &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;0x00000000l&lt;/span&gt;,
        cmdForkOnSecondStage &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;,
        cmdForkPersistence  &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;
      ),
      &lt;span class="pl-k"&gt;new&lt;/span&gt; &lt;span class="pl-en"&gt;DBusSimplePlugin&lt;/span&gt;(
        catchAddressMisaligned &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;false&lt;/span&gt;,
        catchAccessFault &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;false&lt;/span&gt;
      ),
      &lt;span class="pl-k"&gt;new&lt;/span&gt; &lt;span class="pl-en"&gt;DecoderSimplePlugin&lt;/span&gt;(
        catchIllegalInstruction &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;false&lt;/span&gt;
      ),
      &lt;span class="pl-k"&gt;new&lt;/span&gt; &lt;span class="pl-en"&gt;RegFilePlugin&lt;/span&gt;(
        regFileReadyKind &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;Plugin&lt;/span&gt;.&lt;span class="pl-en"&gt;SYNC&lt;/span&gt;,
        zeroBoot &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;
      ),
      &lt;span class="pl-k"&gt;new&lt;/span&gt; &lt;span class="pl-en"&gt;IntAluPlugin&lt;/span&gt;,
      &lt;span class="pl-k"&gt;new&lt;/span&gt; &lt;span class="pl-en"&gt;SrcPlugin&lt;/span&gt;(
        separatedAddSub &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;false&lt;/span&gt;,
        executeInsertion &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;false&lt;/span&gt;
      ),
      &lt;span class="pl-k"&gt;new&lt;/span&gt; &lt;span class="pl-en"&gt;LightShifterPlugin&lt;/span&gt;,
      &lt;span class="pl-k"&gt;new&lt;/span&gt; &lt;span class="pl-en"&gt;HazardSimplePlugin&lt;/span&gt;(
        bypassExecute           &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;false&lt;/span&gt;,
        bypassMemory            &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;false&lt;/span&gt;,
        bypassWriteBack         &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;false&lt;/span&gt;,
        bypassWriteBackBuffer   &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;false&lt;/span&gt;
      ),
      &lt;span class="pl-k"&gt;new&lt;/span&gt; &lt;span class="pl-en"&gt;BranchPlugin&lt;/span&gt;(
        earlyBranch &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;false&lt;/span&gt;,
        catchAddressMisaligned &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;false&lt;/span&gt;
      ),
      &lt;span class="pl-k"&gt;new&lt;/span&gt; &lt;span class="pl-en"&gt;YamlPlugin&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;cpu0.yaml&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    )
  )
)&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-add-a-custom-instruction-to-the-cpu-via-the-plugin-system" class="anchor" aria-hidden="true" href="#add-a-custom-instruction-to-the-cpu-via-the-plugin-system"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Add a custom instruction to the CPU via the plugin system&lt;/h2&gt;
&lt;p&gt;Here is an example of a simple plugin which adds a simple SIMD_ADD instruction:&lt;/p&gt;
&lt;div class="highlight highlight-source-scala"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;spinal&lt;/span&gt;.&lt;span class="pl-en"&gt;core&lt;/span&gt;.&lt;span class="pl-en"&gt;_&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;vexriscv&lt;/span&gt;.&lt;span class="pl-en"&gt;plugin&lt;/span&gt;.&lt;span class="pl-en"&gt;Plugin&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;vexriscv&lt;/span&gt;.{&lt;span class="pl-en"&gt;Stageable&lt;/span&gt;, &lt;span class="pl-en"&gt;DecoderService&lt;/span&gt;, &lt;span class="pl-en"&gt;VexRiscv&lt;/span&gt;}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;This plugin example will add a new instruction named SIMD_ADD which do the following :&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;RD : Regfile Destination, RS : Regfile Source&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;RD( 7 downto  0) = RS1( 7 downto  0) + RS2( 7 downto  0)&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;RD(16 downto  8) = RS1(16 downto  8) + RS2(16 downto  8)&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;RD(23 downto 16) = RS1(23 downto 16) + RS2(23 downto 16)&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;RD(31 downto 24) = RS1(31 downto 24) + RS2(31 downto 24)&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;Instruction encoding :&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;0000011----------000-----0110011&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;       |RS2||RS1|   |RD |&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;Note :  RS1, RS2, RD positions follow the RISC-V spec and are common for all instruction of the ISA&lt;/span&gt;

&lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;SimdAddPlugin&lt;/span&gt; &lt;span class="pl-k"&gt;extends&lt;/span&gt; &lt;span class="pl-e"&gt;Plugin&lt;/span&gt;[&lt;span class="pl-en"&gt;VexRiscv&lt;/span&gt;]{
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;Define the concept of IS_SIMD_ADD signals, which specify if the current instruction is destined for ths plugin&lt;/span&gt;
  &lt;span class="pl-k"&gt;object&lt;/span&gt; &lt;span class="pl-en"&gt;IS_SIMD_ADD&lt;/span&gt; &lt;span class="pl-k"&gt;extends&lt;/span&gt; &lt;span class="pl-e"&gt;Stageable&lt;/span&gt;(&lt;span class="pl-en"&gt;Bool&lt;/span&gt;)

  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;Callback to setup the plugin and ask for different services&lt;/span&gt;
  &lt;span class="pl-k"&gt;override&lt;/span&gt; &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;setup&lt;/span&gt;(&lt;span class="pl-v"&gt;pipeline&lt;/span&gt;: &lt;span class="pl-en"&gt;VexRiscv&lt;/span&gt;)&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-k"&gt;Unit&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; {
    &lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;pipeline&lt;/span&gt;.&lt;span class="pl-en"&gt;config&lt;/span&gt;.&lt;span class="pl-en"&gt;_&lt;/span&gt;

    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;Retrieve the DecoderService instance&lt;/span&gt;
    &lt;span class="pl-k"&gt;val&lt;/span&gt; &lt;span class="pl-smi"&gt;decoderService&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; pipeline.service(&lt;span class="pl-c1"&gt;classOf&lt;/span&gt;[&lt;span class="pl-en"&gt;DecoderService&lt;/span&gt;])

    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;Specify the IS_SIMD_ADD default value when instruction are decoded&lt;/span&gt;
    decoderService.addDefault(&lt;span class="pl-en"&gt;IS_SIMD_ADD&lt;/span&gt;, &lt;span class="pl-en"&gt;False&lt;/span&gt;)

    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;Specify the instruction decoding which should be applied when the instruction match the 'key' parttern&lt;/span&gt;
    decoderService.add(
      &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;Bit pattern of the new SIMD_ADD instruction&lt;/span&gt;
      key &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;M&lt;/span&gt;&lt;span class="pl-s"&gt;"&lt;/span&gt;&lt;span class="pl-s"&gt;0000011----------000-----0110011&lt;/span&gt;&lt;span class="pl-s"&gt;"&lt;/span&gt;,

      &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;Decoding specification when the 'key' pattern is recognized in the instruction&lt;/span&gt;
      &lt;span class="pl-en"&gt;List&lt;/span&gt;(
        &lt;span class="pl-en"&gt;IS_SIMD_ADD&lt;/span&gt;              &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;True&lt;/span&gt;,
        &lt;span class="pl-en"&gt;REGFILE_WRITE_VALID&lt;/span&gt;      &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;True&lt;/span&gt;, &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;Enable the register file write&lt;/span&gt;
        &lt;span class="pl-en"&gt;BYPASSABLE_EXECUTE_STAGE&lt;/span&gt; &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;True&lt;/span&gt;, &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;Notify the hazard management unit that the instruction result is already accessible in the EXECUTE stage (Bypass ready)&lt;/span&gt;
        &lt;span class="pl-en"&gt;BYPASSABLE_MEMORY_STAGE&lt;/span&gt;  &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;True&lt;/span&gt;, &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;Same as above but for the memory stage&lt;/span&gt;
        &lt;span class="pl-en"&gt;RS1_USE&lt;/span&gt;                  &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;True&lt;/span&gt;, &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;Notify the hazard management unit that this instruction use the RS1 value&lt;/span&gt;
        &lt;span class="pl-en"&gt;RS2_USE&lt;/span&gt;                  &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;True&lt;/span&gt;  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;Same than above but for RS2.&lt;/span&gt;
      )
    )
  }

  &lt;span class="pl-k"&gt;override&lt;/span&gt; &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;build&lt;/span&gt;(&lt;span class="pl-v"&gt;pipeline&lt;/span&gt;: &lt;span class="pl-en"&gt;VexRiscv&lt;/span&gt;)&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-k"&gt;Unit&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; {
    &lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;pipeline&lt;/span&gt;.&lt;span class="pl-en"&gt;_&lt;/span&gt;
    &lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;pipeline&lt;/span&gt;.&lt;span class="pl-en"&gt;config&lt;/span&gt;.&lt;span class="pl-en"&gt;_&lt;/span&gt;

    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;Add a new scope on the execute stage (used to give a name to signals)&lt;/span&gt;
    execute plug &lt;span class="pl-k"&gt;new&lt;/span&gt; &lt;span class="pl-en"&gt;Area&lt;/span&gt; {
      &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;Define some signals used internally to the plugin&lt;/span&gt;
      &lt;span class="pl-k"&gt;val&lt;/span&gt; &lt;span class="pl-smi"&gt;rs1&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; execute.input(&lt;span class="pl-en"&gt;RS1&lt;/span&gt;).asUInt
      &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;32 bits UInt value of the regfile[RS1]&lt;/span&gt;
      &lt;span class="pl-k"&gt;val&lt;/span&gt; &lt;span class="pl-smi"&gt;rs2&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; execute.input(&lt;span class="pl-en"&gt;RS2&lt;/span&gt;).asUInt
      &lt;span class="pl-k"&gt;val&lt;/span&gt; &lt;span class="pl-smi"&gt;rd&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;UInt&lt;/span&gt;(&lt;span class="pl-c1"&gt;32&lt;/span&gt; bits)

      &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;Do some computation&lt;/span&gt;
      rd(&lt;span class="pl-c1"&gt;7&lt;/span&gt; downto &lt;span class="pl-c1"&gt;0&lt;/span&gt;) &lt;span class="pl-k"&gt;:&lt;/span&gt;&lt;span class="pl-k"&gt;=&lt;/span&gt; rs1(&lt;span class="pl-c1"&gt;7&lt;/span&gt; downto &lt;span class="pl-c1"&gt;0&lt;/span&gt;) &lt;span class="pl-k"&gt;+&lt;/span&gt; rs2(&lt;span class="pl-c1"&gt;7&lt;/span&gt; downto &lt;span class="pl-c1"&gt;0&lt;/span&gt;)
      rd(&lt;span class="pl-c1"&gt;16&lt;/span&gt; downto &lt;span class="pl-c1"&gt;8&lt;/span&gt;) &lt;span class="pl-k"&gt;:&lt;/span&gt;&lt;span class="pl-k"&gt;=&lt;/span&gt; rs1(&lt;span class="pl-c1"&gt;16&lt;/span&gt; downto &lt;span class="pl-c1"&gt;8&lt;/span&gt;) &lt;span class="pl-k"&gt;+&lt;/span&gt; rs2(&lt;span class="pl-c1"&gt;16&lt;/span&gt; downto &lt;span class="pl-c1"&gt;8&lt;/span&gt;)
      rd(&lt;span class="pl-c1"&gt;23&lt;/span&gt; downto &lt;span class="pl-c1"&gt;16&lt;/span&gt;) &lt;span class="pl-k"&gt;:&lt;/span&gt;&lt;span class="pl-k"&gt;=&lt;/span&gt; rs1(&lt;span class="pl-c1"&gt;23&lt;/span&gt; downto &lt;span class="pl-c1"&gt;16&lt;/span&gt;) &lt;span class="pl-k"&gt;+&lt;/span&gt; rs2(&lt;span class="pl-c1"&gt;23&lt;/span&gt; downto &lt;span class="pl-c1"&gt;16&lt;/span&gt;)
      rd(&lt;span class="pl-c1"&gt;31&lt;/span&gt; downto &lt;span class="pl-c1"&gt;24&lt;/span&gt;) &lt;span class="pl-k"&gt;:&lt;/span&gt;&lt;span class="pl-k"&gt;=&lt;/span&gt; rs1(&lt;span class="pl-c1"&gt;31&lt;/span&gt; downto &lt;span class="pl-c1"&gt;24&lt;/span&gt;) &lt;span class="pl-k"&gt;+&lt;/span&gt; rs2(&lt;span class="pl-c1"&gt;31&lt;/span&gt; downto &lt;span class="pl-c1"&gt;24&lt;/span&gt;)

      &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;When the instruction is a SIMD_ADD one, then write the result into the register file data path.&lt;/span&gt;
      when(execute.input(&lt;span class="pl-en"&gt;IS_SIMD_ADD&lt;/span&gt;)) {
        execute.output(&lt;span class="pl-en"&gt;REGFILE_WRITE_DATA&lt;/span&gt;) &lt;span class="pl-k"&gt;:&lt;/span&gt;&lt;span class="pl-k"&gt;=&lt;/span&gt; rd.asBits
      }
    }
  }
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you want to add this plugin to a given CPU, you just need to add it to its parameterized plugin list.&lt;/p&gt;
&lt;p&gt;This example is a very simple one, but each plugin can really have access to the whole CPU:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Halt a given stage of the CPU&lt;/li&gt;
&lt;li&gt;Unschedule instructions&lt;/li&gt;
&lt;li&gt;Emit an exception&lt;/li&gt;
&lt;li&gt;Introduce new instruction decoding specification&lt;/li&gt;
&lt;li&gt;Ask to jump the PC somewhere&lt;/li&gt;
&lt;li&gt;Read signals published by other plugins&lt;/li&gt;
&lt;li&gt;override published signals values&lt;/li&gt;
&lt;li&gt;Provide an alternative implementation&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As a demonstrator, this SimdAddPlugin was integrated in the &lt;code&gt;src/main/scala/vexriscv/demo/GenCustomSimdAdd.scala&lt;/code&gt; CPU configuration
and is self-tested by the &lt;code&gt;src/test/cpp/custom/simd_add&lt;/code&gt; application by running the following commands :&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Generate the CPU&lt;/span&gt;
sbt &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;runMain vexriscv.demo.GenCustomSimdAdd&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;

&lt;span class="pl-c1"&gt;cd&lt;/span&gt; src/test/cpp/regression/

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Optionally add TRACE=yes if you want to get the VCD waveform from the simulation.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Also you have to know that by default, the testbench introduce instruction/data bus stall.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Note the CUSTOM_SIMD_ADD flag is set to yes.&lt;/span&gt;
make clean run IBUS=SIMPLE DBUS=SIMPLE CSR=no MMU=no DEBUG_PLUGIN=no MUL=no DIV=no DHRYSTONE=no REDO=2 CUSTOM_SIMD_ADD=yes&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To retrieve the plugin related signals in your waveform viewer, just filter with &lt;code&gt;simd&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-adding-a-new-csr-via-the-plugin-system" class="anchor" aria-hidden="true" href="#adding-a-new-csr-via-the-plugin-system"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Adding a new CSR via the plugin system&lt;/h2&gt;
&lt;p&gt;Here are two examples about how to add a custom CSR to the CPU via the plugin system:
&lt;a href="https://github.com/SpinalHDL/VexRiscv/blob/master/src/main/scala/vexriscv/demo/CustomCsrDemoPlugin.scala"&gt;https://github.com/SpinalHDL/VexRiscv/blob/master/src/main/scala/vexriscv/demo/CustomCsrDemoPlugin.scala&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The first one (&lt;code&gt;CustomCsrDemoPlugin&lt;/code&gt;) adds an instruction counter and a clock cycle counter into the CSR mapping (and also do tricky stuff as a demonstration).&lt;/p&gt;
&lt;p&gt;The second one (&lt;code&gt;CustomCsrDemoGpioPlugin&lt;/code&gt;) creates a GPIO peripheral directly mapped into the CSR.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-cpu-clock-and-resets" class="anchor" aria-hidden="true" href="#cpu-clock-and-resets"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;CPU clock and resets&lt;/h2&gt;
&lt;p&gt;Without the debug plugin, the CPU will have a standard &lt;code&gt;clk&lt;/code&gt; input and a &lt;code&gt;reset&lt;/code&gt; input. But with the debug plugin the situation is the following :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;clk : As before, the clock which drive the whole CPU design, including the debug logic&lt;/li&gt;
&lt;li&gt;reset : Reset all the CPU states excepted the debug logics&lt;/li&gt;
&lt;li&gt;debugReset : Reset the debug logic of the CPU&lt;/li&gt;
&lt;li&gt;debug_resetOut : a CPU output signal which allows the JTAG to reset the CPU + the memory interconnect + the peripherals&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So here is the reset interconnect in case you use the debug plugin :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;                                VexRiscv
                            +------------------+
                            |                  |
toplevelReset &amp;gt;----+--------&amp;gt; debugReset       |
                   |        |                  |
                   |  +-----&amp;lt; debug_resetOut   |
                   |  |     |                  |
                   +--or&amp;gt;-+-&amp;gt; reset            |
                          | |                  |
                          | +------------------+
                          |
                          +-&amp;gt; Interconnect / Peripherals
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;a id="user-content-vexriscv-architecture" class="anchor" aria-hidden="true" href="#vexriscv-architecture"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;VexRiscv Architecture&lt;/h2&gt;
&lt;p&gt;VexRiscv is implemented via a 5 stage in-order pipeline on which many optional and complementary plugins add functionalities to provide a functional RISC-V CPU.
This approach is completely unconventional and only possible through meta hardware description languages (SpinalHDL in the current case) but has proven its advantages
via the VexRiscv implementation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You can swap/turn on/turn off parts of the CPU directly via the plugin system&lt;/li&gt;
&lt;li&gt;You can add new functionalities/instruction without having to modify any sources code of the CPU&lt;/li&gt;
&lt;li&gt;It allows the CPU configuration to cover a very large spectrum of implementation without cooking spaghetti code&lt;/li&gt;
&lt;li&gt;It allows your code base to truly produce a parametrized CPU design&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you generate the CPU without any plugin, it will only contain the definition of the 5 pipeline stages and their basic arbitration, but nothing else,
as everything else, including the program counter is added into the CPU via plugins.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-plugins" class="anchor" aria-hidden="true" href="#plugins"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Plugins&lt;/h3&gt;
&lt;p&gt;This chapter describes plugins currently implemented.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#ibussimpleplugin"&gt;IBusSimplePlugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ibuscachedplugin"&gt;IBusCachedPlugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#decodersimpleplugin"&gt;DecoderSimplePlugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#regfileplugin"&gt;RegFilePlugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#hazardsimpleplugin"&gt;HazardSimplePlugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#srcplugin"&gt;SrcPlugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#intaluplugin"&gt;IntAluPlugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#lightshifterplugin"&gt;LightShifterPlugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#fullbarrelshifterplugin"&gt;FullBarrelShifterPlugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#branchplugin"&gt;BranchPlugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dbussimpleplugin"&gt;DBusSimplePlugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dbuscachedplugin"&gt;DBusCachedPlugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#mulplugin"&gt;MulPlugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#divplugin"&gt;DivPlugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#muldiviterativeplugin"&gt;MulDivIterativePlugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#csrplugin"&gt;CsrPlugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#staticmemorytranslatorplugin"&gt;StaticMemoryTranslatorPlugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#memorytranslatorplugin"&gt;MemoryTranslatorPlugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#debugplugin"&gt;DebugPlugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#yamlplugin"&gt;YamlPlugin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a id="user-content-ibussimpleplugin" class="anchor" aria-hidden="true" href="#ibussimpleplugin"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;IBusSimplePlugin&lt;/h4&gt;
&lt;p&gt;This plugin implement the CPU frontend (instruction fetch) via a very simple and neutral memory interface going outside the CPU.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Parameters&lt;/th&gt;
&lt;th&gt;type&lt;/th&gt;
&lt;th&gt;description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;catchAccessFault&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;When true, an instruction read response with read error asserted results in a CPU exception trap.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;resetVector&lt;/td&gt;
&lt;td&gt;BigInt&lt;/td&gt;
&lt;td&gt;Address of the program counter after the reset.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cmdForkOnSecondStage&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;When false, branches immediately update the program counter. This minimizes branch penalties but might reduce FMax because the instruction bus address signal is a combinatorial path. When true, this combinatorial path is removed and the program counter is updated one cycle after a branch is detected. While FMax may improve, an additional branch penalty will be incurred as well.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cmdForkPersistence&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;When false, requests on the iBus can disappear/change before they are acknowledged. This reduces area but isn't safe/supported by many arbitration/slaves. When true, once initiated, iBus requests will stay until they are acknowledged.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;compressedGen&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;Enable RISC-V compressed instruction (RVC) support.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;busLatencyMin&lt;/td&gt;
&lt;td&gt;Int&lt;/td&gt;
&lt;td&gt;Specifies the minimal latency between the iBus.cmd and iBus.rsp. A corresponding number of stages are added to the frontend to keep the IPC to 1.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;injectorStage&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;When true, a stage between the frontend and the decode stage of the CPU is added to improve FMax. (busLatencyMin + injectorStage) should be at least two.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;prediction&lt;/td&gt;
&lt;td&gt;BranchPrediction&lt;/td&gt;
&lt;td&gt;Can be set to NONE/STATIC/DYNAMIC/DYNAMIC_TARGET to specify the branch predictor implementation. See below for more details.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;historyRamSizeLog2&lt;/td&gt;
&lt;td&gt;Int&lt;/td&gt;
&lt;td&gt;Specify the number of entries in the direct mapped prediction cache of DYNAMIC/DYNAMIC_TARGET implementation. 2 pow historyRamSizeLog2 entries.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Here is the SimpleBus interface definition:&lt;/p&gt;
&lt;div class="highlight highlight-source-scala"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;IBusSimpleCmd&lt;/span&gt;() &lt;span class="pl-k"&gt;extends&lt;/span&gt; &lt;span class="pl-e"&gt;Bundle&lt;/span&gt;{
  &lt;span class="pl-k"&gt;val&lt;/span&gt; &lt;span class="pl-smi"&gt;pc&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;UInt&lt;/span&gt;(&lt;span class="pl-c1"&gt;32&lt;/span&gt; bits)
}

&lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;IBusSimpleRsp&lt;/span&gt;() &lt;span class="pl-k"&gt;extends&lt;/span&gt; &lt;span class="pl-e"&gt;Bundle&lt;/span&gt; &lt;span class="pl-k"&gt;with&lt;/span&gt; &lt;span class="pl-e"&gt;IMasterSlave&lt;/span&gt;{
  &lt;span class="pl-k"&gt;val&lt;/span&gt; &lt;span class="pl-smi"&gt;error&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;Bool&lt;/span&gt;
  &lt;span class="pl-k"&gt;val&lt;/span&gt; &lt;span class="pl-smi"&gt;inst&lt;/span&gt;  &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;Bits&lt;/span&gt;(&lt;span class="pl-c1"&gt;32&lt;/span&gt; bits)

  &lt;span class="pl-k"&gt;override&lt;/span&gt; &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;asMaster&lt;/span&gt;()&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-k"&gt;Unit&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; {
    out(error,inst)
  }
}

&lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;IBusSimpleBus&lt;/span&gt;(&lt;span class="pl-v"&gt;interfaceKeepData&lt;/span&gt; : &lt;span class="pl-k"&gt;Boolean&lt;/span&gt;) &lt;span class="pl-k"&gt;extends&lt;/span&gt; &lt;span class="pl-e"&gt;Bundle&lt;/span&gt; &lt;span class="pl-k"&gt;with&lt;/span&gt; &lt;span class="pl-e"&gt;IMasterSlave&lt;/span&gt;{
  &lt;span class="pl-k"&gt;var&lt;/span&gt; &lt;span class="pl-smi"&gt;cmd&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;Stream&lt;/span&gt;(&lt;span class="pl-en"&gt;IBusSimpleCmd&lt;/span&gt;())
  &lt;span class="pl-k"&gt;var&lt;/span&gt; &lt;span class="pl-smi"&gt;rsp&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;Flow&lt;/span&gt;(&lt;span class="pl-en"&gt;IBusSimpleRsp&lt;/span&gt;())

  &lt;span class="pl-k"&gt;override&lt;/span&gt; &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;asMaster&lt;/span&gt;()&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-k"&gt;Unit&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; {
    master(cmd)
    slave(rsp)
  }
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt; : Checkout the cmdForkPersistence parameter, because if it's not set, it can break the iBus compatibility with your memory system (unless you externaly add some buffers)&lt;/p&gt;
&lt;p&gt;Setting cmdForkPersistence and cmdForkOnSecondStage improves iBus cmd timings.&lt;/p&gt;
&lt;p&gt;The iBusSimplePlugin includes bridges to convert from the IBusSimpleBus to AXI4, Avalon, and Wishbone interfaces.&lt;/p&gt;
&lt;p&gt;This plugin implements a jump interface that allows all other plugins to issue a jump:&lt;/p&gt;
&lt;div class="highlight highlight-source-scala"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;trait&lt;/span&gt; &lt;span class="pl-en"&gt;JumpService&lt;/span&gt;{
  &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;createJumpInterface&lt;/span&gt;(&lt;span class="pl-v"&gt;stage&lt;/span&gt; : &lt;span class="pl-en"&gt;Stage&lt;/span&gt;) &lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-en"&gt;Flow&lt;/span&gt;[&lt;span class="pl-en"&gt;UInt&lt;/span&gt;]
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The stage argument specifies the stage from which the jump is asked. This allows the PcManagerSimplePlugin plugin to manage priorities between jump requests from
diffent stages.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-ibuscachedplugin" class="anchor" aria-hidden="true" href="#ibuscachedplugin"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;IBusCachedPlugin&lt;/h4&gt;
&lt;p&gt;Simple and light multi-way instruction cache.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Parameters&lt;/th&gt;
&lt;th&gt;type&lt;/th&gt;
&lt;th&gt;description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;resetVector&lt;/td&gt;
&lt;td&gt;BigInt&lt;/td&gt;
&lt;td&gt;Address of the program counter after the reset.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;relaxedPcCalculation&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;When false, branches immediately update the program counter. This minimizes branch penalties but might reduce FMax because the instruction bus address signal is a combinatorial path. When true, this combinatorial path is removed and the program counter is updated one cycle after a branch is detected. While FMax may improve, an additional branch penalty will be incurred as well.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;prediction&lt;/td&gt;
&lt;td&gt;BranchPrediction&lt;/td&gt;
&lt;td&gt;Can be set to NONE/STATIC/DYNAMIC/DYNAMIC_TARGET to specify the branch predictor implementation. See below for more details.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;historyRamSizeLog2&lt;/td&gt;
&lt;td&gt;Int&lt;/td&gt;
&lt;td&gt;Specify the number of entries in the direct mapped prediction cache of DYNAMIC/DYNAMIC_TARGET implementation. 2 pow historyRamSizeLog2 entries&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;compressedGen&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;Enable RISC-V compressed instruction (RVC) support.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;config.cacheSize&lt;/td&gt;
&lt;td&gt;Int&lt;/td&gt;
&lt;td&gt;Total storage capacity of the cache in bytes.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;config.bytePerLine&lt;/td&gt;
&lt;td&gt;Int&lt;/td&gt;
&lt;td&gt;Number of bytes per cache line&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;config.wayCount&lt;/td&gt;
&lt;td&gt;Int&lt;/td&gt;
&lt;td&gt;Number of cache ways&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;config.twoCycleRam&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;Check the tags values in the decode stage instead of the fetch stage to relax timings&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;config.asyncTagMemory&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;Read the cache tags in an asynchronous manner instead of syncronous one&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;config.addressWidth&lt;/td&gt;
&lt;td&gt;Int&lt;/td&gt;
&lt;td&gt;CPU address width. Should be 32&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;config.cpuDataWidth&lt;/td&gt;
&lt;td&gt;Int&lt;/td&gt;
&lt;td&gt;CPU data width. Should be 32&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;config.memDataWidth&lt;/td&gt;
&lt;td&gt;Int&lt;/td&gt;
&lt;td&gt;Memory data width. Could potentialy be something else than 32, but only 32 is currently tested&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;config.catchIllegalAccess&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;Catch when a memory access is done on non-valid memory address (MMU)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;config.catchAccessFault&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;Catch when the memeory bus is responding with an error&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;config.catchMemoryTranslationMiss&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;Catch when the MMU miss a TLB&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Note: If you enable the twoCycleRam option and if wayCount is bigger than one, then the register file plugin should be configured to read the regFile in an asynchronous manner.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-decodersimpleplugin" class="anchor" aria-hidden="true" href="#decodersimpleplugin"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;DecoderSimplePlugin&lt;/h4&gt;
&lt;p&gt;This plugin provides instruction decoding capabilities to others plugins.&lt;/p&gt;
&lt;p&gt;For instance, for a given instruction, the pipeline hazard plugin needs to know if it uses the register file source 1/2 in order to stall the pipeline until the hazard is gone.
To provide this kind of information, each plugin which implements an instruction documents this kind of information to the DecoderSimplePlugin plugin.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Parameters&lt;/th&gt;
&lt;th&gt;type&lt;/th&gt;
&lt;th&gt;description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;catchIllegalInstruction&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;When true, instructions that don't match a decoding specification will generate a trap exception&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Here is a usage example :&lt;/p&gt;
&lt;div class="highlight highlight-source-scala"&gt;&lt;pre&gt;    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;Specify the instruction decoding which should be applied when the instruction match the 'key' pattern&lt;/span&gt;
    decoderService.add(
      &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;Bit pattern of the new instruction&lt;/span&gt;
      key &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;M&lt;/span&gt;&lt;span class="pl-s"&gt;"&lt;/span&gt;&lt;span class="pl-s"&gt;0000011----------000-----0110011&lt;/span&gt;&lt;span class="pl-s"&gt;"&lt;/span&gt;,

      &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;Decoding specification when the 'key' pattern is recognized in the instruction&lt;/span&gt;
      &lt;span class="pl-en"&gt;List&lt;/span&gt;(
        &lt;span class="pl-en"&gt;IS_SIMD_ADD&lt;/span&gt;              &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;True&lt;/span&gt;, &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;Inform the pipeline that the current instruction is a SIMD_ADD instruction&lt;/span&gt;
        &lt;span class="pl-en"&gt;REGFILE_WRITE_VALID&lt;/span&gt;      &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;True&lt;/span&gt;, &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;Notify the hazard management unit that this instruction writes to the register file&lt;/span&gt;
        &lt;span class="pl-en"&gt;BYPASSABLE_EXECUTE_STAGE&lt;/span&gt; &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;True&lt;/span&gt;, &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;Notify the hazard management unit that the instruction result is already accessible in the EXECUTE stage (Bypass ready)&lt;/span&gt;
        &lt;span class="pl-en"&gt;BYPASSABLE_MEMORY_STAGE&lt;/span&gt;  &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;True&lt;/span&gt;, &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;Same as above but for the memory stage&lt;/span&gt;
        &lt;span class="pl-en"&gt;RS1_USE&lt;/span&gt;                  &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;True&lt;/span&gt;, &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;Notify the hazard management unit that this instruction uses the RS1 value&lt;/span&gt;
        &lt;span class="pl-en"&gt;RS2_USE&lt;/span&gt;                  &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;True&lt;/span&gt;  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;Same than above but for RS2.&lt;/span&gt;
      )
    )
  }&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This plugin operates in the Decode stage.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-regfileplugin" class="anchor" aria-hidden="true" href="#regfileplugin"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;RegFilePlugin&lt;/h4&gt;
&lt;p&gt;This plugin implements the register file.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Parameters&lt;/th&gt;
&lt;th&gt;type&lt;/th&gt;
&lt;th&gt;description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;regFileReadyKind&lt;/td&gt;
&lt;td&gt;RegFileReadKind&lt;/td&gt;
&lt;td&gt;Can bet set to ASYNC or SYNC. Specifies the kind of memory read used to implement the register file. ASYNC means zero cycle latency memory read, while SYNC means one cycle latency memory read which can be mapped into standard FPGA memory blocks&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;zeroBoot&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;Load all registers with zeroes at the beginning of simulations to keep everything deterministic in logs/traces&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;This register file use a &lt;code&gt;don't care&lt;/code&gt; read-during-write policy, so the bypassing/hazard plugin should take care of this.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-hazardsimpleplugin" class="anchor" aria-hidden="true" href="#hazardsimpleplugin"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;HazardSimplePlugin&lt;/h4&gt;
&lt;p&gt;This plugin checks the pipeline instruction dependencies and, if necessary or possible, will stop the instruction in the decoding stage or bypass the instruction results
from the later stages to the decode stage.&lt;/p&gt;
&lt;p&gt;Since the register file is implemented with a &lt;code&gt;don't care&lt;/code&gt; read-during-write policy, this plugin also manages these kind of hazards.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Parameters&lt;/th&gt;
&lt;th&gt;type&lt;/th&gt;
&lt;th&gt;description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;bypassExecute&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;Enable the bypassing of instruction results coming from the Execute stage&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bypassMemory&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;Enable the bypassing of instruction results coming from the Memory stage&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bypassWriteBack&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;Enable the bypassing of instruction results coming from the WriteBack stage&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bypassWriteBackBuffer&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;Enable the bypassing of the previous cycle register file written value&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;&lt;a id="user-content-srcplugin" class="anchor" aria-hidden="true" href="#srcplugin"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;SrcPlugin&lt;/h4&gt;
&lt;p&gt;This plugin muxes different input values to produce SRC1/SRC2/SRC_ADD/SRC_SUB/SRC_LESS values which are common values used by many plugins in the execute stage (ALU/Branch/Load/Store).&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Parameters&lt;/th&gt;
&lt;th&gt;type&lt;/th&gt;
&lt;th&gt;description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;separatedAddSub&lt;/td&gt;
&lt;td&gt;RegFileReadKind&lt;/td&gt;
&lt;td&gt;By default SRC_ADD/SRC_SUB are generated from a single controllable adder/substractor, but if this is set to true, it use separate adder/substractors&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;executeInsertion&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;By default SRC1/SRC2 are generated in the Decode stage, but if this parameter is true, it is done in the Execute stage (It will relax the bypassing network)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Except for SRC1/SRC2, this plugin does everything at the begining of Execute stage.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-intaluplugin" class="anchor" aria-hidden="true" href="#intaluplugin"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;IntAluPlugin&lt;/h4&gt;
&lt;p&gt;This plugin implements all ADD/SUB/SLT/SLTU/XOR/OR/AND/LUI/AUIPC instructions in the execute stage by using the SrcPlugin outputs. It is a realy simple plugin.&lt;/p&gt;
&lt;p&gt;The result is injected into the pipeline directly at the end of the execute stage.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-lightshifterplugin" class="anchor" aria-hidden="true" href="#lightshifterplugin"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;LightShifterPlugin&lt;/h4&gt;
&lt;p&gt;Implements SLL/SRL/SRA instructions by using an iterative shifter register, while using one cycle per bit shift.&lt;/p&gt;
&lt;p&gt;The result is injected into the pipeline directly at the end of the execute stage.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-fullbarrelshifterplugin" class="anchor" aria-hidden="true" href="#fullbarrelshifterplugin"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;FullBarrelShifterPlugin&lt;/h4&gt;
&lt;p&gt;Implements SLL/SRL/SRA instructions by using a full barrel shifter, so it execute all shifts in a single cycle.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Parameters&lt;/th&gt;
&lt;th&gt;type&lt;/th&gt;
&lt;th&gt;description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;earlyInjection&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;By default the result of the shift is injected into the pipeline in the Memory stage to relax timings, but if this option is true it will be done in the Execute stage&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;&lt;a id="user-content-branchplugin" class="anchor" aria-hidden="true" href="#branchplugin"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;BranchPlugin&lt;/h4&gt;
&lt;p&gt;This plugin implement all branch/jump instructions (JAL/JALR/BEQ/BNE/BLT/BGE/BLTU/BGEU) with primitives used by the cpu frontend plugins to implement branch prediction. The prediction implementation is set in the frontend plugins (IBusX)&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Parameters&lt;/th&gt;
&lt;th&gt;type&lt;/th&gt;
&lt;th&gt;description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;earlyBranch&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;By default the branch is done in the Memory stage to relax timings, but if this option is set it's done in the Execute stage&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;catchAddressMisaligned&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;If a jump/branch is done in an unaligned PC address, it will fire an trap exception&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Each miss predicted jumps will produce between 2 and 4 cycles penalty depending the &lt;code&gt;earlyBranch&lt;/code&gt; and the &lt;code&gt;PcManagerSimplePlugin.relaxedPcCalculation&lt;/code&gt; configurations&lt;/p&gt;
&lt;h5&gt;&lt;a id="user-content-prediction-none" class="anchor" aria-hidden="true" href="#prediction-none"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Prediction NONE&lt;/h5&gt;
&lt;p&gt;No prediction: each PC change due to a jump/branch will produce a penalty.&lt;/p&gt;
&lt;h5&gt;&lt;a id="user-content-prediction-static" class="anchor" aria-hidden="true" href="#prediction-static"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Prediction STATIC&lt;/h5&gt;
&lt;p&gt;In the decode stage, a conditional branch pointing backwards or a JAL is branched speculatively. If the speculation is right, the branch penalty is reduced to a single cycle,
otherwise the standard penalty is applied.&lt;/p&gt;
&lt;h5&gt;&lt;a id="user-content-prediction-dynamic" class="anchor" aria-hidden="true" href="#prediction-dynamic"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Prediction DYNAMIC&lt;/h5&gt;
&lt;p&gt;Same as the STATIC prediction, except that to do the prediction, it use a direct mapped 2 bit history cache (BHT) which remembers if the branch is more likely to be taken or not.&lt;/p&gt;
&lt;h5&gt;&lt;a id="user-content-prediction-dynamic_target" class="anchor" aria-hidden="true" href="#prediction-dynamic_target"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Prediction DYNAMIC_TARGET&lt;/h5&gt;
&lt;p&gt;This predictor uses a direct mapped branch target buffer (BTB) in the Fetch stage which store the PC of the instruction, the target PC of the instruction and a 2 bit history to remember
if the branch is more likely to be taken or not. This is the most efficient branch predictor actualy implemented on VexRiscv as when the branch prediction is right, it produce no branch penalty.
The down side is that this predictor has a long combinatorial path coming from the prediction cache read port to the programm counter by passing through the jump interface.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-dbussimpleplugin" class="anchor" aria-hidden="true" href="#dbussimpleplugin"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;DBusSimplePlugin&lt;/h4&gt;
&lt;p&gt;This plugin implements the load and store instructions (LB/LH/LW/LBU/LHU/LWU/SB/SH/SW) via a simple memory bus going out of the CPU.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Parameters&lt;/th&gt;
&lt;th&gt;type&lt;/th&gt;
&lt;th&gt;description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;catchAddressMisaligned&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;If a memory access is done to an unaligned memory address, it will fire a trap exception&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;catchAccessFault&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;If a memory read returns an error, it will fire a trap exception&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;earlyInjection&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;By default, the memory read values are injected into the pipeline in the WriteBack stage to relax the timings. If this parameter is true, it's done in the Memory stage&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Here is the DBusSimpleBus&lt;/p&gt;
&lt;div class="highlight highlight-source-scala"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;DBusSimpleCmd&lt;/span&gt;() &lt;span class="pl-k"&gt;extends&lt;/span&gt; &lt;span class="pl-e"&gt;Bundle&lt;/span&gt;{
  &lt;span class="pl-k"&gt;val&lt;/span&gt; &lt;span class="pl-smi"&gt;wr&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;Bool&lt;/span&gt;
  &lt;span class="pl-k"&gt;val&lt;/span&gt; &lt;span class="pl-smi"&gt;address&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;UInt&lt;/span&gt;(&lt;span class="pl-c1"&gt;32&lt;/span&gt; bits)
  &lt;span class="pl-k"&gt;val&lt;/span&gt; &lt;span class="pl-smi"&gt;data&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;Bits&lt;/span&gt;(&lt;span class="pl-c1"&gt;32&lt;/span&gt; bit)
  &lt;span class="pl-k"&gt;val&lt;/span&gt; &lt;span class="pl-smi"&gt;size&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;UInt&lt;/span&gt;(&lt;span class="pl-c1"&gt;2&lt;/span&gt; bit)
}

&lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;DBusSimpleRsp&lt;/span&gt;() &lt;span class="pl-k"&gt;extends&lt;/span&gt; &lt;span class="pl-e"&gt;Bundle&lt;/span&gt; &lt;span class="pl-k"&gt;with&lt;/span&gt; &lt;span class="pl-e"&gt;IMasterSlave&lt;/span&gt;{
  &lt;span class="pl-k"&gt;val&lt;/span&gt; &lt;span class="pl-smi"&gt;ready&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;Bool&lt;/span&gt;
  &lt;span class="pl-k"&gt;val&lt;/span&gt; &lt;span class="pl-smi"&gt;error&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;Bool&lt;/span&gt;
  &lt;span class="pl-k"&gt;val&lt;/span&gt; &lt;span class="pl-smi"&gt;data&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;Bits&lt;/span&gt;(&lt;span class="pl-c1"&gt;32&lt;/span&gt; bit)

  &lt;span class="pl-k"&gt;override&lt;/span&gt; &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;asMaster&lt;/span&gt;()&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-k"&gt;Unit&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; {
    out(ready,error,data)
  }
}


&lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;DBusSimpleBus&lt;/span&gt;() &lt;span class="pl-k"&gt;extends&lt;/span&gt; &lt;span class="pl-e"&gt;Bundle&lt;/span&gt; &lt;span class="pl-k"&gt;with&lt;/span&gt; &lt;span class="pl-e"&gt;IMasterSlave&lt;/span&gt;{
  &lt;span class="pl-k"&gt;val&lt;/span&gt; &lt;span class="pl-smi"&gt;cmd&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;Stream&lt;/span&gt;(&lt;span class="pl-en"&gt;DBusSimpleCmd&lt;/span&gt;())
  &lt;span class="pl-k"&gt;val&lt;/span&gt; &lt;span class="pl-smi"&gt;rsp&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;DBusSimpleRsp&lt;/span&gt;()

  &lt;span class="pl-k"&gt;override&lt;/span&gt; &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;asMaster&lt;/span&gt;()&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-k"&gt;Unit&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; {
    master(cmd)
    slave(rsp)
  }
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that bridges are available to convert this interface into AXI4 and Avalon&lt;/p&gt;
&lt;p&gt;There is at least one cycle latency between a cmd and the corresponding rsp. The rsp.ready flag should be false after a read cmd until the rsp is present.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-dbuscachedplugin" class="anchor" aria-hidden="true" href="#dbuscachedplugin"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;DBusCachedPlugin&lt;/h4&gt;
&lt;p&gt;Multi way cache implementation with writh-through and allocate on read strategy. (Documentation is WIP)&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-mulplugin" class="anchor" aria-hidden="true" href="#mulplugin"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;MulPlugin&lt;/h4&gt;
&lt;p&gt;Implements the multiplication instruction from the RISC-V M extension. Its implementation was done in a FPGA friendly way by using 4 17*17 bit multiplications.
The processing is fully pipelined between the Execute/Memory/Writeback stage. The results of the instructions are always inserted in the WriteBack stage.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-divplugin" class="anchor" aria-hidden="true" href="#divplugin"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;DivPlugin&lt;/h4&gt;
&lt;p&gt;Implements the division/modulo instruction from the RISC-V M extension. It is done in a simple iterative way which always takes 34 cycles. The result is inserted into the
Memory stage.&lt;/p&gt;
&lt;p&gt;This plugin is now based on the MulDivIterativePlugin one.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-muldiviterativeplugin" class="anchor" aria-hidden="true" href="#muldiviterativeplugin"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;MulDivIterativePlugin&lt;/h4&gt;
&lt;p&gt;This plugin implements the multiplication, division and modulo of the RISC-V M extension in an iterative way, which is friendly for small FPGAs that don't have DSP blocks.&lt;/p&gt;
&lt;p&gt;This plugin is able to unroll the iterative calculation process to reduce the number of cycles used to execute mul/div instructions.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Parameters&lt;/th&gt;
&lt;th&gt;type&lt;/th&gt;
&lt;th&gt;description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;genMul&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;Enables multiplication support. Can be set to false if you want to use the MulPlugin instead&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;genDiv&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;Enables division support&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mulUnrollFactor&lt;/td&gt;
&lt;td&gt;Int&lt;/td&gt;
&lt;td&gt;Number of combinatorial stages used to speed up the multiplication, should be &amp;gt; 0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;divUnrollFactor&lt;/td&gt;
&lt;td&gt;Int&lt;/td&gt;
&lt;td&gt;Number of combinatorial stages used to speed up the division, should be &amp;gt; 0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The number of cycles used to execute a multiplication is '32/mulUnrollFactor'
The number of cycles used to execute a division is '32/divUnrollFactor + 1'&lt;/p&gt;
&lt;p&gt;Both mul/div are processed into the memory stage (late result).&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-csrplugin" class="anchor" aria-hidden="true" href="#csrplugin"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;CsrPlugin&lt;/h4&gt;
&lt;p&gt;Implements most of the Machine mode and a few of the User mode registers as specified in the RISC-V priviledged spec.
The access mode of most of the CSR is parameterizable (NONE/READ_ONLY/WRITE_ONLY/READ_WRITE) to reduce the area usage of unneeded features.&lt;/p&gt;
&lt;p&gt;(CsrAccess can be NONE/READ_ONLY/WRITE_ONLY/READ_WRITE)&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Parameters&lt;/th&gt;
&lt;th&gt;type&lt;/th&gt;
&lt;th&gt;description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;catchIllegalAccess&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mvendorid&lt;/td&gt;
&lt;td&gt;BigInt&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;marchid&lt;/td&gt;
&lt;td&gt;BigInt&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mimpid&lt;/td&gt;
&lt;td&gt;BigInt&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mhartid&lt;/td&gt;
&lt;td&gt;BigInt&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;misaExtensionsInit&lt;/td&gt;
&lt;td&gt;Int&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;misaAccess&lt;/td&gt;
&lt;td&gt;CsrAccess&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mtvecAccess&lt;/td&gt;
&lt;td&gt;CsrAccess&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mtvecInit&lt;/td&gt;
&lt;td&gt;BigInt&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mepcAccess&lt;/td&gt;
&lt;td&gt;CsrAccess&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mscratchGen&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mcauseAccess&lt;/td&gt;
&lt;td&gt;CsrAccess&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mbadaddrAccess&lt;/td&gt;
&lt;td&gt;CsrAccess&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mcycleAccess&lt;/td&gt;
&lt;td&gt;CsrAccess&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;minstretAccess&lt;/td&gt;
&lt;td&gt;CsrAccess&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ucycleAccess&lt;/td&gt;
&lt;td&gt;CsrAccess&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;wfiGen&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ecallGen&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;If an interrupt occurs, before jumping to mtvec, the plugin will stop the Prefetch stage and wait for all the instructions in the later pipeline stages to complete their execution.&lt;/p&gt;
&lt;p&gt;If an exception occur, the plugin will kill the corresponding instruction, flush all previous instructions, and wait until the previously killed instructions reach the WriteBack
stage before jumping to mtvec.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-staticmemorytranslatorplugin" class="anchor" aria-hidden="true" href="#staticmemorytranslatorplugin"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;StaticMemoryTranslatorPlugin&lt;/h4&gt;
&lt;p&gt;Static memory translator plugin which allows one to specify which range of the memory addresses is IO mapped and shouldn't be cached.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-mmuplugin" class="anchor" aria-hidden="true" href="#mmuplugin"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;MmuPlugin&lt;/h4&gt;
&lt;p&gt;Hardware refilled MMU implementation. Allows others plugins such as DBusCachedPlugin/IBusCachedPlugin to instanciate memory address translation ports. Each port has a small dedicated
fully associative TLB cache which is refilled automaticaly via a dbus access sharing.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-debugplugin" class="anchor" aria-hidden="true" href="#debugplugin"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;DebugPlugin&lt;/h4&gt;
&lt;p&gt;This plugin implements enough CPU debug features to allow comfortable GDB/Eclipse debugging. To access those debug features, it provides a simple memory bus interface.
The JTAG interface is provided by another bridge, which makes it possible to efficiently connect multiple CPUs to the same JTAG.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Parameters&lt;/th&gt;
&lt;th&gt;type&lt;/th&gt;
&lt;th&gt;description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;debugClockDomain&lt;/td&gt;
&lt;td&gt;ClockDomain&lt;/td&gt;
&lt;td&gt;As the debug unit is able to reset the CPU itself, it should use another clock domain to avoid killing itself (only the reset wire should differ)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The internals of the debug plugin are done in a manner which reduces the area usage and the FMax impact of this plugin.&lt;/p&gt;
&lt;p&gt;Here is the simple bus to access it, the rsp come one cycle after the request :&lt;/p&gt;
&lt;div class="highlight highlight-source-scala"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;DebugExtensionCmd&lt;/span&gt;() &lt;span class="pl-k"&gt;extends&lt;/span&gt; &lt;span class="pl-e"&gt;Bundle&lt;/span&gt;{
  &lt;span class="pl-k"&gt;val&lt;/span&gt; &lt;span class="pl-smi"&gt;wr&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;Bool&lt;/span&gt;
  &lt;span class="pl-k"&gt;val&lt;/span&gt; &lt;span class="pl-smi"&gt;address&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;UInt&lt;/span&gt;(&lt;span class="pl-c1"&gt;8&lt;/span&gt; bit)
  &lt;span class="pl-k"&gt;val&lt;/span&gt; &lt;span class="pl-smi"&gt;data&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;Bits&lt;/span&gt;(&lt;span class="pl-c1"&gt;32&lt;/span&gt; bit)
}
&lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;DebugExtensionRsp&lt;/span&gt;() &lt;span class="pl-k"&gt;extends&lt;/span&gt; &lt;span class="pl-e"&gt;Bundle&lt;/span&gt;{
  &lt;span class="pl-k"&gt;val&lt;/span&gt; &lt;span class="pl-smi"&gt;data&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;Bits&lt;/span&gt;(&lt;span class="pl-c1"&gt;32&lt;/span&gt; bit)
}

&lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;DebugExtensionBus&lt;/span&gt;() &lt;span class="pl-k"&gt;extends&lt;/span&gt; &lt;span class="pl-e"&gt;Bundle&lt;/span&gt; &lt;span class="pl-k"&gt;with&lt;/span&gt; &lt;span class="pl-e"&gt;IMasterSlave&lt;/span&gt;{
  &lt;span class="pl-k"&gt;val&lt;/span&gt; &lt;span class="pl-smi"&gt;cmd&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;Stream&lt;/span&gt;(&lt;span class="pl-en"&gt;DebugExtensionCmd&lt;/span&gt;())
  &lt;span class="pl-k"&gt;val&lt;/span&gt; &lt;span class="pl-smi"&gt;rsp&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;DebugExtensionRsp&lt;/span&gt;()

  &lt;span class="pl-k"&gt;override&lt;/span&gt; &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;asMaster&lt;/span&gt;()&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-k"&gt;Unit&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; {
    master(cmd)
    in(rsp)
  }
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here is the register mapping :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Read address 0x00 -&amp;gt;
  bit 0  : resetIt
  bit 1  : haltIt
  bit 2  : isPipBusy
  bit 3  : haltedByBreak
  bit 4  : stepIt
Write address 0x00 -&amp;gt;
  bit 4  : stepIt
  bit 16 : set resetIt
  bit 17 : set haltIt
  bit 24 : clear resetIt
  bit 25 : clear haltIt and haltedByBreak

Read Address 0x04 -&amp;gt;
  bits (31 downto 0) : Last value written into the register file
Write Address 0x04 -&amp;gt;
  bits (31 downto 0) : Instruction that should be pushed into the CPU pipeline for debug purposes
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The OpenOCD port is there :
&lt;a href="https://github.com/SpinalHDL/openocd_riscv"&gt;https://github.com/SpinalHDL/openocd_riscv&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-yamlplugin" class="anchor" aria-hidden="true" href="#yamlplugin"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;YamlPlugin&lt;/h4&gt;
&lt;p&gt;This plugin offers a service to others plugins to generate a usefull Yaml file about the CPU configuration. It contains, for instance, the sequence of instruction required
to flush the data cache (information used by openocd).&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>SpinalHDL</author><guid isPermaLink="false">https://github.com/SpinalHDL/VexRiscv</guid><pubDate>Mon, 09 Dec 2019 00:04:00 GMT</pubDate></item></channel></rss>