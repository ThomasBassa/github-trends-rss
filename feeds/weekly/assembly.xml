<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>GitHub Trending: Assembly, This week</title><link>https://github.com/trending/assembly?since=weekly</link><description>The top repositories on GitHub for assembly, measured weekly</description><pubDate>Sun, 26 Jan 2020 01:04:16 GMT</pubDate><lastBuildDate>Sun, 26 Jan 2020 01:04:16 GMT</lastBuildDate><generator>PyRSS2Gen-1.1.0</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><ttl>720</ttl><item><title>hsoft/collapseos #1 in Assembly, This week</title><link>https://github.com/hsoft/collapseos</link><description>&lt;p&gt;&lt;i&gt;Bootstrap post-collapse technology&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-collapse-os" class="anchor" aria-hidden="true" href="#collapse-os"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Collapse OS&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;Bootstrap post-collapse technology&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Collapse OS is a z80 kernel and a collection of programs, tools and
documentation that allows you to assemble an OS that, when completed, will be
able to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Run on minimal and improvised machines.&lt;/li&gt;
&lt;li&gt;Interface through improvised means (serial, keyboard, display).&lt;/li&gt;
&lt;li&gt;Edit text files.&lt;/li&gt;
&lt;li&gt;Compile assembler source files for a wide range of MCUs and CPUs.&lt;/li&gt;
&lt;li&gt;Read and write from a wide range of storage devices.&lt;/li&gt;
&lt;li&gt;Replicate itself.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Additionally, the goal of this project is to be as self-contained as possible.
With a copy of this project, a capable and creative person should be able to
manage to build and install Collapse OS without external resources (i.e.
internet) on a machine of her design, built from scavenged parts with low-tech
tools.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-see-it-in-action" class="anchor" aria-hidden="true" href="#see-it-in-action"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;See it in action&lt;/h2&gt;
&lt;p&gt;Michael Schierl has put together &lt;a href="https://schierlm.github.io/CollapseOS-Web-Emulator/" rel="nofollow"&gt;a set of emulators running in the browser that
run Collapse OS in different contexts&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Using those while following along with the &lt;a href="doc/"&gt;User Guide&lt;/a&gt; is your quickest
path to giving Collapse OS a try.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-organisation-of-this-repository" class="anchor" aria-hidden="true" href="#organisation-of-this-repository"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Organisation of this repository&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;kernel&lt;/code&gt;: Pieces of code to be assembled by the user into a kernel.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;apps&lt;/code&gt;: Pieces of code to be assembled into "userspace" application.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;recipes&lt;/code&gt;: collection of recipes that assemble parts together on a specific
machine.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;doc&lt;/code&gt;: User guide for when you've successfully installed Collapse OS.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tools&lt;/code&gt;: Tools for working with Collapse OS from "modern" environments. For
example, tools for facilitating data upload to a Collapse OS machine
through a serial port.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;emul&lt;/code&gt;: Emulated applications, such as zasm and the shell.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tests&lt;/code&gt;: Automated test suite for the whole project.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-status" class="anchor" aria-hidden="true" href="#status"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Status&lt;/h2&gt;
&lt;p&gt;The project unfinished but is progressing well! See &lt;a href="https://collapseos.org" rel="nofollow"&gt;Collapse OS' website&lt;/a&gt;
for more information.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-discussion" class="anchor" aria-hidden="true" href="#discussion"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Discussion&lt;/h2&gt;
&lt;p&gt;For a general discussion of Collapse OS and the ecosystem of technologies and ideas that may develop around it refer to &lt;a href="https://www.reddit.com/r/collapseos" rel="nofollow"&gt;r/collapseos&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A more traditional &lt;a href="http://lists.sonic.net/mailman/listinfo/collapseos" rel="nofollow"&gt;mailing list&lt;/a&gt; and IRC (#collapseos on freenode) channels are also maintained.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>hsoft</author><guid isPermaLink="false">https://github.com/hsoft/collapseos</guid><pubDate>Sun, 26 Jan 2020 00:01:00 GMT</pubDate></item><item><title>briansmith/ring #2 in Assembly, This week</title><link>https://github.com/briansmith/ring</link><description>&lt;p&gt;&lt;i&gt;[No description found.]&lt;/i&gt;&lt;/p&gt;&lt;p&gt;No README was found for this project.&lt;/p&gt;</description><author>briansmith</author><guid isPermaLink="false">https://github.com/briansmith/ring</guid><pubDate>Sun, 26 Jan 2020 00:02:00 GMT</pubDate></item><item><title>janroesner/sixty5o2 #3 in Assembly, This week</title><link>https://github.com/janroesner/sixty5o2</link><description>&lt;p&gt;&lt;i&gt;Micro Kernel / Bootloader for Ben Eater's 6502 Computer&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="Readme.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-introduction" class="anchor" aria-hidden="true" href="#introduction"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Introduction&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Sixty/5o2&lt;/strong&gt; is a minimal bootloader / micro kernel / mini operating system (if you like) for &lt;a href="https://eater.net/6502" rel="nofollow"&gt;Ben Eaters 6502 Computer&lt;/a&gt; on a breadboard. It is only &lt;strong&gt;1.5kB&lt;/strong&gt; in size (assembled) but comes with quite a nice list of features:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Load&lt;/strong&gt; externally assembled &lt;strong&gt;programs&lt;/strong&gt; into RAM via serial connection to Arduino&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Run&lt;/strong&gt; programs that were previously loaded into RAM&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Load &amp;amp; Run&lt;/strong&gt; programs in one go&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Debug&lt;/strong&gt; the full address space via an integrated &lt;strong&gt;hex monitor&lt;/strong&gt; (currently read only)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Clean RAM&lt;/strong&gt; for use with non-volatile RAM or during development&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Drive&lt;/strong&gt; the &lt;strong&gt;LCD&lt;/strong&gt; display even at a clock rate of &lt;strong&gt;1MHz&lt;/strong&gt; flawlessly&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Drive&lt;/strong&gt; the &lt;strong&gt;mini keyboard&lt;/strong&gt; for input&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Video RAM&lt;/strong&gt; based &lt;strong&gt;output routines&lt;/strong&gt; for convenient text display single page / multipage w/ offset&lt;/li&gt;
&lt;li&gt;Interrupt based loading routine to fetch data via the Arduino's serial connection&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Serial Sender&lt;/strong&gt; (node.js) allowes to upload programs to the 6502 (error mitigation included)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Fully documented source code&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="/img/6502.jpg"&gt;&lt;img src="/img/6502.jpg" alt="Image of Sixty/5o2" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-motivation" class="anchor" aria-hidden="true" href="#motivation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Motivation&lt;/h1&gt;
&lt;p&gt;Ben Eaters 6502 breadboard computer is a very special kind of animal and brought lots of fun and joy into my last weeks. A 45 years old processor design that is still able to get things done was fascinating enough for me, to give this project a go - especially, since my first machine was a &lt;strong&gt;Commodore C64&lt;/strong&gt; which I programmed in Basic at the end of the 80'ies and never had the chance to get in touch with 6502 assembly.&lt;/p&gt;
&lt;p&gt;On my journey during the last weeks I soon surpassed the current state of development (thanks to Ben's schematics) and was able to write a few programs which I ended up burning onto the ROM using the programmer. Soon enough this became painful, because every codechange required to extract the ROM chip from the breadboard, put it into the programmer, burn it, put it back onto the board. This became time consuming and constraining pretty quickly, especially when I attempted to write slightly more complex programs.&lt;/p&gt;
&lt;p&gt;So early on I tested, whether I could use the Arduino, connect 8 of it's digital output pins to the VIA 6522 and transfer key strokes on my Mac serially and render them onto the LCD display. As soon as this worked, the path was clear:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I needed a bootloader that could leverage this power to load externally assembled object code / programs into the RAM and run it from there.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Luckily I was able to speed up the 6502's clock by just replacing the capacitor of the unstable 555 timer circuit by a smaller one such, that loading data serially was - lets say - at least stable enough. That paved the way to more complex subroutines which now make up my "Sixty/5o2" micro bootloader / micro kernel. It works very well with full clock speed of 1MHz and is hopefully helpful to other 6502 enthusiasts as well.&lt;/p&gt;
&lt;p&gt;Especially the serial data transfer is enormously stable, since error mitigation (not correction) is baked into a minimalistic protocol, where there the sender side is implemented in node.js. Unfortunately I was not able to get a stable serial connection with serial terminals like &lt;code&gt;screen&lt;/code&gt;, &lt;code&gt;minicom&lt;/code&gt; or &lt;code&gt;picocom&lt;/code&gt;. Hence I decided to build something myself. On the positive side of things I had the opportunity to integrate content transform using base64 encoding as well as simple error mitigation via a checksum algorithm plus a "send packet again" function.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;It's not perfect, in places not even nice. Last time I personally touched assembler was 20+ years ago, so please be gentle with criticism. PR's are king.&lt;/strong&gt;&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-hardware-requirements" class="anchor" aria-hidden="true" href="#hardware-requirements"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Hardware Requirements&lt;/h1&gt;
&lt;p&gt;There are only two requirements, both of them can be mitigated though:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Use the 1MHz clock (you &lt;strong&gt;MUST&lt;/strong&gt; disconnect the clock module, otherwise it interferes)&lt;/li&gt;
&lt;li&gt;The keyboard buttons are tied &lt;em&gt;low&lt;/em&gt; in normal state, when pushed they get tied &lt;em&gt;high&lt;/em&gt; (this is opposite to Ben's design in his schematics)&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;&lt;a id="user-content-possible-mitigation-strategies" class="anchor" aria-hidden="true" href="#possible-mitigation-strategies"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Possible Mitigation Strategies&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;If you want to run at other clock speeds, you MUST adjust a global constant called &lt;code&gt;WAIT_C&lt;/code&gt; in the bootloader code. It's a multiplier which is used to &lt;em&gt;sleep&lt;/em&gt;  and just burns a number of cycles in a routine called &lt;code&gt;LIB__sleep&lt;/code&gt;. If you run at lower clock speeds, adjust &lt;code&gt;WAIT_C&lt;/code&gt; to a smaller number until keyboard and main menu become usable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Should your keyboard be built in a way so the buttons are normally tied &lt;em&gt;high&lt;/em&gt; and when pressed turn &lt;em&gt;low&lt;/em&gt;, then you need to adjust the routine &lt;code&gt;VIA__read_keyboard_input&lt;/code&gt; and XOR &lt;code&gt;A&lt;/code&gt; with &lt;code&gt;$ff&lt;/code&gt; after it was AND'ed with &lt;code&gt;#$0f&lt;/code&gt;. This way the keystrokes will be interpreted correctly again.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;&lt;a id="user-content-software-requirements" class="anchor" aria-hidden="true" href="#software-requirements"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Software Requirements&lt;/h1&gt;
&lt;p&gt;The following software components are must have's:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Arduino IDE to be found &lt;a href="https://www.arduino.cc/en/main/software" rel="nofollow"&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Minipro or XG GUI software for Windows for thr TL866 programmer available &lt;a href="http://www.autoelectric.cn/en/tl866_main.html" rel="nofollow"&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The infamous and awesome &lt;a href="http://sun.hasenbraten.de/vasm/" rel="nofollow"&gt;VASM Assembler&lt;/a&gt; to build for the 6502 (Ben's instructions to build and use to be found &lt;a href="https://www.youtube.com/watch?v=oO8_2JJV0B4" rel="nofollow"&gt;here&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Node.js 8+ to be able to use the serial program loading functionality via the Arduino&lt;/li&gt;
&lt;li&gt;npm or yarn (typically come with node.js) to install the senders dependencies&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installation&lt;/h1&gt;
&lt;p&gt;The project comes with a number of files, whose functionality is the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;bootloader.asm&lt;/code&gt; - the bootloader / micro kernel / mini os you wanna put into your ROM after assembly&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Receiver.ino&lt;/code&gt; - Arduino source which turns the Arduino into a serial receiver / parallel converter&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Sender.js&lt;/code&gt; - Node.js tool to read 6502 object code / programs and upload them to the 6502 via serial connection&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.sender_config.json&lt;/code&gt; - config file for &lt;code&gt;Sender.js&lt;/code&gt; (update your /dev/cu.whateverhere)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;package.json&lt;/code&gt; - package dependencies for &lt;code&gt;Sender.js&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/examples&lt;/code&gt; - some example programs you can load into the RAM&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;&lt;a id="user-content-1-bootloader" class="anchor" aria-hidden="true" href="#1-bootloader"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. Bootloader&lt;/h2&gt;
&lt;p&gt;Assemble the bootloader:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;vasm -Fbin -dotdir -o bootloader.out bootloader.asm
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Burn it onto the EEPROM using your TL866 programmer in conjunction with minipro (Linux, Mac) or the respective Windows GUI tool provided by XG (see above).&lt;/p&gt;
&lt;p&gt;At this point you can install your ROM chip  onto the board and celebrate. You will not remove it from it's breadboardy socket for a while. If your 1MHz clock, RAM, keyboard and LCD are assembled already, you can switch on your 6502 computer and enjoy the main menu of &lt;strong&gt;Sixty/5o2&lt;/strong&gt;. If the assembly is not done yet, go read &lt;a href="https://eater.net/6502" rel="nofollow"&gt;Ben's schematics&lt;/a&gt; and finish your hardware build.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-2-receiver-arduino" class="anchor" aria-hidden="true" href="#2-receiver-arduino"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. Receiver (Arduino)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Load &lt;code&gt;Receiver.ino&lt;/code&gt; into your Arduino IDE.&lt;/li&gt;
&lt;li&gt;Open the IDE's package library and search and install the &lt;code&gt;Base64&lt;/code&gt; package by Arturo Guadalupi v0.0.1 also to be found &lt;a href="https://github.com/agdl/Base64"&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Compile the source&lt;/li&gt;
&lt;li&gt;Upload the program to your Arduino&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-3-sender-nodejs" class="anchor" aria-hidden="true" href="#3-sender-nodejs"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. Sender (node.js)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Install the necessary npm packages via:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;npm install
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;yarn
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Adjust the &lt;code&gt;tty&lt;/code&gt; setting in &lt;code&gt;.sender_config.json&lt;/code&gt; to match the device file which represents your connected Arduino&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DO NOT&lt;/strong&gt; adjust any other value in there, as it will render the serial link unstable (more on that later)&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Usage&lt;/h1&gt;
&lt;h2&gt;&lt;a id="user-content-arduino-port-setup" class="anchor" aria-hidden="true" href="#arduino-port-setup"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Arduino Port Setup&lt;/h2&gt;
&lt;p&gt;Before you can upload a program to the 6502 through the Arduino, you need to setup additional jumper wires between the Arduino and the VIA 6522 &lt;strong&gt;AS WELL&lt;/strong&gt; as the 6502 processor.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You need 8 jumper wires connecting the digital output ports of the Arduino with the PORTB of the VIA 6522 (See table 1 below)&lt;/li&gt;
&lt;li&gt;You need 1 jumper wire connecting one digital output port of the Arduino with the IRQ line of the 6502 (See table 2 below)&lt;/li&gt;
&lt;li&gt;You need 1 jumper wire connecting one of the &lt;code&gt;GND&lt;/code&gt; pins of the Arduino with common ground of your 6502 breadboard&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Table 1: Port Setup VIA 6522&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Arduino&lt;/th&gt;
&lt;th&gt;VIA 6522&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;31&lt;/td&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;33&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;35&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;37&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;39&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;41&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;43&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;45&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;If unsure, look up the pin setup of the VIA in the &lt;a href="https://eater.net/datasheets/w65c22.pdf" rel="nofollow"&gt;official documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Table 2: Port Setup 6502&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Arduino&lt;/th&gt;
&lt;th&gt;6522&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;53&lt;/td&gt;
&lt;td&gt;4 (IRQB)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The pin setup of the 6502 can be found &lt;a href="https://eater.net/datasheets/w65c02s.pdf" rel="nofollow"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Important:&lt;/strong&gt; Make sure, you still have the IRQB pin (PIN 4) of the 6502 tied high via a 1k Ohm resistor as per the design. The jumper cable to pin 53 of the Arduino just pulls the pin low in short pulses. The line needs to be normal &lt;em&gt;high&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Just one additional wire from the Arduinos power source to the 6502 board will free you of the need of any external power source. Just power your beast via USB and get rid of the power cord.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-uploading-a-program" class="anchor" aria-hidden="true" href="#uploading-a-program"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Uploading a Program&lt;/h2&gt;
&lt;p&gt;You can now write a program in 6502 assembly language like for example the &lt;code&gt;/examples/hello_world.asm&lt;/code&gt; and assemble it like so:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;vasm -Fbin -dotdir -o /examples/hello_world.out /examples/hello_world.asm
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Important:&lt;/strong&gt; Since your programs now target RAM instead of ROM your program needs to have a different entry vector specified:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    .org $0200
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;More on &lt;strong&gt;why $0200&lt;/strong&gt; later on.&lt;/p&gt;
&lt;p&gt;To upload and run your gem onto your 6502, first start up the machine, and reset it. Using the keyboard navigate to &lt;code&gt;Load&lt;/code&gt; using the &lt;em&gt;UP&lt;/em&gt; and &lt;em&gt;DOWN&lt;/em&gt; keys in the main menu. To start the uploading process hit the &lt;em&gt;RIGHT&lt;/em&gt; key which acts as &lt;code&gt;Enter&lt;/code&gt; in most cases.&lt;/p&gt;
&lt;p&gt;Now you can upload your program using the Sender.js CLI tool like so:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;node Sender.js /examples/hello_world.out
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The upload process will inform you, when it's done. The 6502 automatically switches back into the main menu after the upload finished.&lt;/p&gt;
&lt;p&gt;Should you encounter any errors during upload, check the &lt;code&gt;tty&lt;/code&gt; setting in &lt;code&gt;.sender_config.json&lt;/code&gt; and adjust it to your Arduinos device port. In addition you can lower the transfer speed to values to 4800, 2400 or 1200 baud. Don't use values above 9600 baud, they won't work.&lt;/p&gt;
&lt;p&gt;Navigate to the menu entry &lt;code&gt;Run&lt;/code&gt; and hit the &lt;em&gt;RIGHT&lt;/em&gt; key to run your program.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Go celebrate!&lt;/strong&gt; You're just running your first uploaded program directly from RAM.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You can also use &lt;code&gt;Load &amp;amp; Run&lt;/code&gt; to streamline the process during debugging.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Also note:&lt;/strong&gt; Resetting your 6502 &lt;strong&gt;DOES NOT&lt;/strong&gt; erase the RAM. So you can reset any time, and still &lt;code&gt;Run&lt;/code&gt; your program afterwards.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;And note:&lt;/strong&gt; The &lt;code&gt;Sender.js&lt;/code&gt; accepts two commandline parameters. If you want, you can also specify your Arduino port manually, whithout having to hardwire it in the &lt;code&gt;.sender_config.json&lt;/code&gt; like so:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;node Sender.js /examples/hello_world.out /dev/path_to_arduino_port
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;a id="user-content-using-the-monitor" class="anchor" aria-hidden="true" href="#using-the-monitor"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Using the Monitor&lt;/h2&gt;
&lt;p&gt;The &lt;strong&gt;hex monitor&lt;/strong&gt; is very useful during development and debugging. It lets you inspect the whole address space, RAM and ROM. you can navigate using the &lt;em&gt;UP&lt;/em&gt; and &lt;em&gt;DOWN&lt;/em&gt; keys. The &lt;em&gt;RIGHT&lt;/em&gt; key performs a bigger jump in time and space and the &lt;em&gt;LEFT&lt;/em&gt; key returns you to the main menu. The monitor is currently read only and the keyboard debouncing is far from being good. But it works.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-important-to-know---allocated-ressources" class="anchor" aria-hidden="true" href="#important-to-know---allocated-ressources"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Important to know - Allocated Ressources&lt;/h1&gt;
&lt;h2&gt;&lt;a id="user-content-1-0200" class="anchor" aria-hidden="true" href="#1-0200"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. $0200&lt;/h2&gt;
&lt;p&gt;I choose $0200 as entry vector for user land programs. Why you ask? Two reasons:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The adresses from &lt;code&gt;$0000 up to $00ff&lt;/code&gt; are the so called zero page addresses, which allow 8 bit addressing and faster processing. Use them wisely, don't waste them, don't put program code in here.&lt;/li&gt;
&lt;li&gt;The adresses from &lt;code&gt;$0100 up to $01ff&lt;/code&gt; are used by the 6502 as stack. You better don't mess with it, because not only does it hold values after any stack push operation (like pha), but the 6502 also stores return addresses here, when performing a jump to subroutine / return from subroutine (jsr/rts).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Therefore RAM is usable in a meaningful fashion from $0200 upwards only.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Due to Ben's (IMO clever) design choice RAM ends already at $3fff, which leaves you with close to 16kByte of RAM for your programs. Should you hit that wall, there's always the option to outsource routines as "standard library", put them onto the ROM and link them from your programs via the VASM linker.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-2-used-zero-page-locations" class="anchor" aria-hidden="true" href="#2-used-zero-page-locations"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. Used Zero Page Locations&lt;/h2&gt;
&lt;p&gt;The bootloader needs to use some Zero Page locations: &lt;code&gt;$00 - $03&lt;/code&gt;. Expect trouble if you overwrite / use them from within your own programs.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-3-used-ram" class="anchor" aria-hidden="true" href="#3-used-ram"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. Used RAM&lt;/h2&gt;
&lt;p&gt;The bootloader also occupies some RAM. Most part is used as VideoRam to talk to the LCD (consult the source). [In contrast to C64 design there is no interrupt driven scanline routine that updates the LCD automatically from the VideoRam contents yet. A feature to come.] Another few RAM cells are used by the bootloader itself.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;However, don't use RAM from &lt;code&gt;$3fda upto $3fff&lt;/code&gt;. Expect problems if you do so.&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-4-interrupt-service-routine---isr" class="anchor" aria-hidden="true" href="#4-interrupt-service-routine---isr"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4. Interrupt Service Routine - ISR&lt;/h2&gt;
&lt;p&gt;The Interrupt Service Routine (ISR) implemented at the end of available ROM realizes the serial loading. The way it works is quite simple. As soon as the Arduino set up all 8 bit of a byte at the data ports, it pulls the interrupt pin of the 6502 low for 30 microseconds. This triggers the 6502 to halt the current program, put all registers onto the stack and execute any routine who's starting address can be found in the Interrupt Vector Address (&lt;code&gt;$fffe-$ffff&lt;/code&gt;) - the ISR. This routine reads the byte, writes it into the RAM, increases the address pointer for the next byte to come and informs the main program that data is still flowing. Consult the source for further details, it's quite straight forward.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-shortcomings" class="anchor" aria-hidden="true" href="#shortcomings"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Shortcomings&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;The loader is slow. Quite slow. Even though 9600 baud as choosen transfer speed is not too bad, there are some significant idle timeouts implemented, to make the data transfer work reliably. You'll find it in &lt;code&gt;Receiver.ino&lt;/code&gt;, the &lt;code&gt;Sender.js&lt;/code&gt; does not have any timeouts left other than the necessary but unproblematic connection timeout once at the beginning. The worst is the timeout which allows to reliably read the UART buffer of the Arduino. When reduced, the whole data transfer becomes unreliable.
Happy to accept PR's with improvement here. On the other hands, it's not that we transfer Gigabytes of data here ... not even Megabytes, so the current speed might suffice.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;a id="user-content-known-problems" class="anchor" aria-hidden="true" href="#known-problems"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Known Problems&lt;/h1&gt;
&lt;p&gt;Despite the fact that the bootloader and all of it's components are quite stable, there are some problems, which are to be found via a #TODO in the source.&lt;/p&gt;
&lt;p&gt;Worth mentioning are the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;sub par keyboard debouncing simply via burning CPU cycles&lt;/li&gt;
&lt;li&gt;LIB__sleep based EOF detection during data transfer - if more than a few packages fail to transfer and need to be repeated by the sender, it might happen, that the &lt;code&gt;BOOTLOADER__program_ram&lt;/code&gt; routine interprets this as EOF, since no data is coming in no more. This problem can not be "easily" solved, since there are no control characters that can be transferred between the Arduino and the 6522. There are solutions, but first there needs to be a problem.&lt;/li&gt;
&lt;li&gt;sub optimal register preservation - the (reduced) 6502 instruction set makes it hard to preserve all registers w/o wasting RAM locations. The current implementation does put focus on register preservation only where explicitly needed.&lt;/li&gt;
&lt;li&gt;the ISR is currently static, so it can handle only interrupt requests which come from the Arduino. If you want to use other interrupts of the 6522 or software interrupts, you need to implement a priorization mechanism as well as a branching in the ISR, since (to my knowledge) there is only one interrupt vector, the 6502 can handle.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;a id="user-content-future-plans" class="anchor" aria-hidden="true" href="#future-plans"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Future Plans&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;make Hex Monitor read / write&lt;/li&gt;
&lt;li&gt;integrate Arduino Nano directly onto the board to replace all jumper wiring and power the board via USB&lt;/li&gt;
&lt;li&gt;develop a standard library with useful functionality in ROM&lt;/li&gt;
&lt;li&gt;(potentially) integrate a light color / bitmap display like for example the &lt;a href="https://www.adafruit.com/product/3533" rel="nofollow"&gt;Adafruit 0.96" 160x80 Color TFT Display&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;implement a 3d engine using vector rotation and scalar multiplication (or quaternions)&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;a id="user-content-pull-requests" class="anchor" aria-hidden="true" href="#pull-requests"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Pull Requests&lt;/h1&gt;
&lt;p&gt;If you would like to see any particular feature I might be able to provide it ... some day. Unfortunately my spare time is very limited, so you rather develop it yourself. I am happy to screen, test and merge any valuable PR.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-support" class="anchor" aria-hidden="true" href="#support"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Support&lt;/h1&gt;
&lt;p&gt;Should you be able / interested to support my work and help me spending more time in projects like these or others, your donation is more than welcome:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.paypal.me/janroesnerberlin" rel="nofollow"&gt;https://www.paypal.me/janroesnerberlin&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-credits" class="anchor" aria-hidden="true" href="#credits"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Credits&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Ben Eater&lt;/li&gt;
&lt;li&gt;Steven Wozniak&lt;/li&gt;
&lt;li&gt;Anke L.&lt;/li&gt;
&lt;/ul&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>janroesner</author><guid isPermaLink="false">https://github.com/janroesner/sixty5o2</guid><pubDate>Sun, 26 Jan 2020 00:03:00 GMT</pubDate></item><item><title>leachim6/hello-world #4 in Assembly, This week</title><link>https://github.com/leachim6/hello-world</link><description>&lt;p&gt;&lt;i&gt;Hello world in every computer language.  Thanks to everyone who contributes to this, make sure to see CONTRIBUTING.md for contribution instructions!&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-hello-world" class="anchor" aria-hidden="true" href="#hello-world"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Hello, World!&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Inspired by &lt;a href="https://helloworldcollection.github.io/" rel="nofollow"&gt;The Hello World Collection&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;&lt;a id="user-content-hello-world-in-every-programming-language" class="anchor" aria-hidden="true" href="#hello-world-in-every-programming-language"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Hello world in every programming language.&lt;/h4&gt;
&lt;p&gt;As I watch the collection expand, this project has blown up more than I ever thought possible.
Thanks to everyone who continues to contribute, new languages are created every day!&lt;/p&gt;
&lt;p&gt;Make sure to see CONTRIBUTING.md for instructions on contributing to the project!&lt;/p&gt;
&lt;p&gt;Spin-Off project smartly suggested and implemented by &lt;a href="https://github.com/zenware"&gt;@zenware&lt;/a&gt;:&lt;br&gt;
Meet &lt;a href="https://github.com/zenware/FizzBuzz"&gt;FizzBuzz&lt;/a&gt;, the evolution of &lt;a href="https://github.com/leachim6/hello-world"&gt;hello-world&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="e/elm.elm"&gt;Hello Html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-this-repository-currently-contains-hello-world-programs-in-the-following-languages" class="anchor" aria-hidden="true" href="#this-repository-currently-contains-hello-world-programs-in-the-following-languages"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;This repository currently contains "Hello World" programs in the following languages:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="%23/0815.0815"&gt;0815&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="%23/1c-enterprise"&gt;1C Enterprise&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="%23/2B.2b"&gt;2B&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="%23/4gl.4gl"&gt;4Gl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="%23/4test"&gt;4Test&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="%23/4thdimension.4dd"&gt;4Thdimension&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="%23/%7EEnglish.ext"&gt;~English&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/abap.abap"&gt;Abap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/abc.abc"&gt;Abc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/ACIDIC.acidic"&gt;Acidic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/acpi"&gt;Acpi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/ACRONYM.acronym"&gt;Acronym&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/acs.acs"&gt;Acs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/actionscript.as"&gt;Actionscript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/actionscript2.as"&gt;Actionscript2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/actionscript3.as"&gt;Actionscript3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/actionscript_flashmx.as"&gt;Actionscript Flashmx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/ada.ada"&gt;Ada&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/advpl"&gt;Advpl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/Aeolbonn.aeo"&gt;Aeolbonn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/aeolbonn.aeolbonn"&gt;Aeolbonn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/agda.agda"&gt;Agda&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/aheui.aheui"&gt;Aheui&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/aime.aime"&gt;Aime&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/aiml.aiml"&gt;Aiml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/ALAGUF.alaguf"&gt;Alaguf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/alda.alda"&gt;Alda&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/algae.algae"&gt;Algae&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/ALGOL-W.algol"&gt;Algol W&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/algol60.algol60"&gt;Algol60&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/algol68.algol68"&gt;Algol68&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/alore.alore"&gt;Alore&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/Amiga-E.amiga-e"&gt;Amiga E&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/amos"&gt;Amos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/android.java"&gt;Android&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/angelscript"&gt;Angelscript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/angular.js"&gt;Angular&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/ante.ante"&gt;Ante&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/AntLang.ant"&gt;Antlang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/apc.apc"&gt;Apc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/Apex.cls"&gt;Apex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/apl.apl"&gt;Apl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/applescript.scpt"&gt;Applescript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/arc.arc"&gt;Arc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/arduino.ino"&gt;Arduino&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/arena.are"&gt;Arena&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/argh.agh"&gt;Argh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/arnoldc.arnoldc"&gt;Arnoldc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/ash.ash"&gt;Ash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/asp.asp"&gt;Asp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/aspectj.aj"&gt;Aspectj&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_6502.asm"&gt;Assembler 6502&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_6502appleII.asm"&gt;Assembler 6502Appleii&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_6502c64.asm"&gt;Assembler 6502C64&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_6809vectrex.asm"&gt;Assembler 6809Vectrex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_8048_videopac.asm"&gt;Assembler 8048 Videopac&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_arm.s"&gt;Assembler Arm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_atari2600.asm"&gt;Assembler Atari2600&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_bootsect.asm"&gt;Assembler Bootsect&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_DCPU16.asm"&gt;Assembler Dcpu16&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_fasm_dos.asm"&gt;Assembler Fasm Dos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_hla.hla"&gt;Assembler Hla&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_ibm360.asm"&gt;Assembler Ibm360&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_intel.asm"&gt;Assembler Intel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_lc-3.asm"&gt;Assembler Lc 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_m68000_amigaos.asm"&gt;Assembler M68000 Amigaos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_masm_dos.asm"&gt;Assembler Masm Dos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_masm_win32.asm"&gt;Assembler Masm Win32&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_masm_win64.asm"&gt;Assembler Masm Win64&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_mips.asm"&gt;Assembler Mips&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_mmix.asm"&gt;Assembler Mmix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_nasm_freebsd.asm"&gt;Assembler Nasm Freebsd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_nasm_linux.asm"&gt;Assembler Nasm Linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_nasm_linux64.asm"&gt;Assembler Nasm Linux64&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_nasm_macho64.asm"&gt;Assembler Nasm Macho64&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_nasm_win32.asm"&gt;Assembler Nasm Win32&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_tasm_dos.asm"&gt;Assembler Tasm Dos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_tms9900_ti99_4a.asm"&gt;Assembler Tms9900 Ti99 4A&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_vax_ultrix.asm"&gt;Assembler Vax Ultrix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_z80_knightos.asm"&gt;Assembler Z80 Knightos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_z80_ti83calculator.asm"&gt;Assembler Z80 Ti83Calculator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_z80_zxspectrum.asm"&gt;Assembler Z80 Zxspectrum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/Attache.%40"&gt;Attache&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/autohotkey.ahk"&gt;Autohotkey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/autoit.au3"&gt;Autoit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/awful.yuk"&gt;Awful&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/awk.awk"&gt;Awk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/README.md"&gt;Readme&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/B.b"&gt;B&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/bash.bash"&gt;Bash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/basic.bas"&gt;Basic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/batch.bat"&gt;Batch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/batsh.batsh"&gt;Batsh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/battlestar.bts"&gt;Battlestar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/BCPL.bcl"&gt;Bcpl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/beatnik.beatnik"&gt;Beatnik&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/befunge.be"&gt;Befunge&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/BennuGD"&gt;Bennugd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/beta.bet"&gt;Beta&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/BIRL.c"&gt;Birl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/BIT.bit"&gt;Bit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/BitBitJump.bbj"&gt;Bitbitjump&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/BlackRum.br"&gt;Blackrum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/BLC.Blc"&gt;Blc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/blitz3d.bb"&gt;Blitz3D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/blub.blub"&gt;Blub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/bolgefuck.bf"&gt;Bolgefuck&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/boo.boo"&gt;Boo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/brainfuck-2d.bf2d"&gt;Brainfuck 2D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/brainfuck.bf"&gt;Brainfuck&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/Brainloller.png"&gt;Brainloller&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/broccoli.brocc"&gt;Broccoli&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/BRZRK.brzrk"&gt;Brzrk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/burlesque.burlesque"&gt;Burlesque&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/byter.byter"&gt;Byter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/c%2B%2B.cpp"&gt;C++&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/c.c"&gt;C&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/caml.ml"&gt;Caml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/cardinal.cardinal"&gt;Cardinal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/Casio%20BASIC"&gt;Casio Basic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/cat.cat"&gt;Cat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/centura.centura"&gt;Centura&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/ceylon.ceylon"&gt;Ceylon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/cgi.c"&gt;Cgi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/chapel.chpl"&gt;Chapel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/cheddar.cheddar"&gt;Cheddar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/chef.ch"&gt;Chef&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/chicken.chicken"&gt;Chicken&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/cil.il"&gt;Cil&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/clean.icl"&gt;Clean&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/clipper.clipper"&gt;Clipper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/clipper.prg"&gt;Clipper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/clips.clips"&gt;Clips&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/clisp.lisp"&gt;Clisp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/clojure.clj"&gt;Clojure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/cobol.cbl"&gt;Cobol&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/coconut.coc"&gt;Coconut&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/coffeescript.coffee"&gt;Coffeescript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/coldfusion.cfm"&gt;Coldfusion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/common-lisp.lisp"&gt;Common Lisp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/ContinuesEquation.ce"&gt;Continuesequation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/cool.cl"&gt;Cool&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/cor.cor"&gt;Cor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/crystal.cr"&gt;Crystal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/csh.csh"&gt;Csh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/csharp.cs"&gt;Csharp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/cson.cson"&gt;Cson&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/css.css"&gt;Css&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/cuneiform.cfl"&gt;Cuneiform&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/curry.curry"&gt;Curry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/cypherNeo4j.cypher"&gt;Cypherneo4J&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="d/d.d"&gt;D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="d/dark.txt"&gt;Dark&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="d/Dart.dart"&gt;Dart&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="d/db2.sql"&gt;Db2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="d/dc.dc"&gt;Dc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="d/DCL"&gt;Dcl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="d/dd_dd.dd"&gt;Dd Dd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="d/Decimal.dec"&gt;Decimal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="d/delphi.delphi"&gt;Delphi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="d/delphi.pas"&gt;Delphi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="d/dis.dis"&gt;Dis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="d/divzeros.dz"&gt;Divzeros&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="d/DNA%23.dna"&gt;Dna#&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="d/DNA-Sharp.dna"&gt;Dna Sharp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="d/dogescript.djs"&gt;Dogescript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="d/DOGO.dogo"&gt;Dogo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="d/dos.bat"&gt;Dos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="d/Drive-In%20Window.diw"&gt;Drive In Window&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="d/dtrace.d"&gt;Dtrace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="d/DUP.dup"&gt;Dup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="d/dylan.dl"&gt;Dylan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="d/Dyvil.dyv"&gt;Dyvil&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="e/ebuild.ebuild"&gt;Ebuild&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="e/Eiffel.eiff"&gt;Eiffel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="e/elixir.ex"&gt;Elixir&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="e/elixir.exs"&gt;Elixir&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="e/elm.elm"&gt;Elm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="e/EmacsLisp.el"&gt;Emacslisp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="e/emmental.emmental"&gt;Emmental&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="e/emojicode.emojic"&gt;Emojicode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="e/emoticon.emoticon"&gt;Emoticon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="e/EOOOL.eoool"&gt;Eoool&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="e/erlang.erl"&gt;Erlang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="e/erlang_escript.erl"&gt;Erlang Escript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="f/factor.factor"&gt;Factor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="f/falcon.fal"&gt;Falcon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="f/false.f"&gt;False&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="f/fancy.fy"&gt;Fancy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="f/fantom.fan"&gt;Fantom&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="f/ferite.fe"&gt;Ferite&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="f/fetlang.fet"&gt;Fetlang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="f/fish.fish"&gt;Fish&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="f/fjoelnir.fjo"&gt;Fjoelnir&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="f/fob.fob"&gt;Fob&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="f/focal.fc"&gt;Focal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="f/fog.fog.md"&gt;Fog.Fog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="f/foo.foo"&gt;Foo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="f/forobj.forobj"&gt;Forobj&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="f/forth.fth"&gt;Forth&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="f/fortob.fortob"&gt;Fortob&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="f/fortran.f90"&gt;Fortran&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="f/fortran77.f77"&gt;Fortran77&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="f/fourier.fourier"&gt;Fourier&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="f/fsharp.fs"&gt;Fsharp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="f/fstar.fst"&gt;Fstar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="g/gammaplex.gammaplex"&gt;Gammaplex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="g/GASOIL.gasoil"&gt;Gasoil&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="g/gecho.gecho"&gt;Gecho&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="g/gentzen.gentzen"&gt;Gentzen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="g/geojson.geojson"&gt;Geojson&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="g/gibberish.gibberish"&gt;Gibberish&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="g/glass.glass"&gt;Glass&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="g/gml.gml"&gt;Gml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="g/go.go"&gt;Go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="g/golfscript.golfscript"&gt;Golfscript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="g/golo.golo"&gt;Golo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="g/googleappscript.gs"&gt;Googleappscript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="g/gosu.gosu"&gt;Gosu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="g/gosu.gs"&gt;Gosu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="g/gravity.gravity"&gt;Gravity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="g/Green-Marl.gm"&gt;Green Marl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="g/gri.gri"&gt;Gri&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="g/GridScript.gridscript"&gt;Gridscript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="g/grin.grin"&gt;Grin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="g/groovy.groovy"&gt;Groovy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="g/Gui4Cli"&gt;Gui4Cli&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="h/hack.hh"&gt;Hack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="h/haskell.hs"&gt;Haskell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="h/haxe.hx"&gt;Haxe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="h/HEX.hex"&gt;Hex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="h/hexish.hexish"&gt;Hexish&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="h/Higher%20Subleq.higher_subleq"&gt;Higher Subleq&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="h/hodor.hd"&gt;Hodor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="h/hollow.hollow"&gt;Hollow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="h/homespring.homespring"&gt;Homespring&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="h/HOP"&gt;Hop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="h/hq9%2B.h"&gt;Hq9+&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="h/html.html"&gt;Html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="h/hy.hy"&gt;Hy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="h/hypertalk.ht"&gt;Hypertalk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="i/ibm1401"&gt;Ibm1401&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="i/IcedCoffeeScript.ics"&gt;Icedcoffeescript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="i/ici.ici"&gt;Ici&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="i/icon.icn"&gt;Icon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="i/IDL"&gt;Idl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="i/idris.idr"&gt;Idris&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="i/il.il"&gt;Il&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="i/INCAL.incal"&gt;Incal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="i/InDec.indec"&gt;Indec&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="i/inform.inform"&gt;Inform&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="i/ink.ink"&gt;Ink&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="i/intercal.i"&gt;Intercal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="i/Io.Io"&gt;Io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="i/ioke.ik"&gt;Ioke&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="i/irc"&gt;Irc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="i/iscom.iscom"&gt;Iscom&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="i/ISLISP.lisp"&gt;Islisp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="j/j.ijs"&gt;J&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="j/jade.jade"&gt;Jade&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="j/jai.jai"&gt;Jai&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="j/Jasmin.j"&gt;Jasmin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="j/jason.mas2j"&gt;Jason&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="j/Java.java"&gt;Java&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="j/javascript.js"&gt;Javascript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="j/jess.cpl"&gt;Jess&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="j/json.json"&gt;Json&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="j/JSONiq"&gt;Jsoniq&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="j/jsx.js"&gt;Jsx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="j/julia.jl"&gt;Julia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="k/k.k"&gt;K&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="k/karel.kl"&gt;Karel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="k/KimL.kiml"&gt;Kiml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="k/kipple.kipple"&gt;Kipple&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="k/kitten.ktn"&gt;Kitten&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="k/kotlin.kt"&gt;Kotlin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="k/ksh.ksh"&gt;Ksh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="l/labyrinth.labyrinth"&gt;Labyrinth&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="l/LaTeX.tex"&gt;Latex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="l/LazyK.lazy"&gt;Lazyk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="l/leszek.leszek"&gt;Leszek&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="l/limbo.b"&gt;Limbo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="l/lisaac.li"&gt;Lisaac&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="l/lisp.lsp"&gt;Lisp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="l/livescript.ls"&gt;Livescript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="l/llvm.ll"&gt;Llvm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="l/LNUSP.lnusp"&gt;Lnusp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="l/logo.lg"&gt;Logo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="l/LOLA.lola"&gt;Lola&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="l/lolcode.lol"&gt;Lolcode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="l/lolpython.lol"&gt;Lolpython&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="l/lsl.lsl"&gt;Lsl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="l/lua.lua"&gt;Lua&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/m4.m4"&gt;M4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/macsyma.mac"&gt;Macsyma&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/magic"&gt;Magic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/malbolge.mbg"&gt;Malbolge&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/markdown.md"&gt;Markdown&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/mathematica-online.nb"&gt;Mathematica Online&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/matlab.m"&gt;Matlab&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/maxscript.ms"&gt;Maxscript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/mel.mel"&gt;Mel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/meq.meq"&gt;Meq&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/mercury.m"&gt;Mercury&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/minecraft"&gt;Minecraft&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/mips.s"&gt;Mips&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/mirc.mrc"&gt;Mirc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/Mmmm%28%29.mmmm"&gt;Mmmm()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/modula-2.mod"&gt;Modula 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/modula-3.m3"&gt;Modula 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/mongo.shell"&gt;Mongo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/moonscript.moon"&gt;Moonscript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/morsecode"&gt;Morsecode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/mouse.mse"&gt;Mouse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/move.mv"&gt;Move&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/mozart.oz"&gt;Mozart&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/muf.muf"&gt;Muf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/mumps.m"&gt;Mumps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/mushcode.mush"&gt;Mushcode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/myrddin.myr"&gt;Myrddin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/mysql.sql"&gt;Mysql&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="n/mathematica.nb"&gt;Mathematica&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="n/neko.neko"&gt;Neko&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="n/nemerle.n"&gt;Nemerle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="n/newtonscript.nwt"&gt;Newtonscript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="n/nice.nice"&gt;Nice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="n/nim.nim"&gt;Nim&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="n/nit.nit"&gt;Nit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="n/nodejs.js"&gt;Nodejs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="n/novice.novice"&gt;Novice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="n/nu.nu"&gt;Nu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="n/nxc.nxc"&gt;Nxc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="o/oberon-2.obn"&gt;Oberon 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="o/oberon.o"&gt;Oberon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="o/obix.osc"&gt;Obix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="o/obj.st"&gt;Obj&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="o/objc.m"&gt;Objc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="o/objective-j.j"&gt;Objective J&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="o/ObjectStar"&gt;Objectstar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="o/ocaml.ml"&gt;Ocaml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="o/octave.octave"&gt;Octave&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="o/omgrofl.omgrofl"&gt;Omgrofl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="o/ooc.ooc"&gt;Ooc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="o/ook.ok"&gt;Ook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="o/opa.opa"&gt;Opa&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="o/OpenLaszlo.lzx"&gt;Openlaszlo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="o/oraclesql.sql"&gt;Oraclesql&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="o/Orc.orc"&gt;Orc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="o/oz.oz"&gt;Oz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/hello_world.pl1"&gt;Hello World&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/parenthetic.p"&gt;Parenthetic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/parser.p"&gt;Parser&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/pascal.p"&gt;Pascal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/pawn.p"&gt;Pawn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/pb.pwr"&gt;Pb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/pbwin.bas"&gt;Pbwin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/pebble.c"&gt;Pebble&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/perl.cgi"&gt;Perl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/perl.pl"&gt;Perl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/perl6.p6"&gt;Perl6&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/perseus.p%2B%2B"&gt;Perseus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/pharo.st"&gt;Pharo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/php.php"&gt;Php&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/picat.pi"&gt;Picat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/piet.png"&gt;Piet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/pig.pig"&gt;Pig&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/pike.pike"&gt;Pike&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/pit.pit"&gt;Pit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/pizza.pizza"&gt;Pizza&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/please_porige_hot.pph"&gt;Please Porige Hot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/plsql.sql"&gt;Plsql&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/pluvo.pvo"&gt;Pluvo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/polynomial.pol"&gt;Polynomial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/pony.pony"&gt;Pony&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/postgresql.sql"&gt;Postgresql&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/postscript.ps"&gt;Postscript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/postscript_page.ps"&gt;Postscript Page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/posxml.posxml"&gt;Posxml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/potigol.poti"&gt;Potigol&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/powershell.ps1"&gt;Powershell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/processing.pde"&gt;Processing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/prolog.pro"&gt;Prolog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/pure_data.pd"&gt;Pure Data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/purebasic.pb"&gt;Purebasic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/purescript.purs"&gt;Purescript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/pyret.arr"&gt;Pyret&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/python.py"&gt;Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/python3.py"&gt;Python3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="q/q.q"&gt;Q&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="q/Qbasic.bas"&gt;Qbasic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="q/qore.q"&gt;Qore&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="q/qu.qu"&gt;Qu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="q/QuakeC.qc"&gt;Quakec&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="q/QuartzComposer.qtz"&gt;Quartzcomposer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="q/qugord.qugord"&gt;Qugord&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="q/qwerty.qwerty"&gt;Qwerty&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="r/R.R"&gt;R&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="r/racket.rkt"&gt;Racket&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="r/radixal.radixal"&gt;Radixal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="r/ratfor.ratfor"&gt;Ratfor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="r/react.js"&gt;React&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="r/readlink.readlink"&gt;Readlink&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="r/reason.re"&gt;Reason&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="r/rebol.r"&gt;Rebol&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="r/recurse.recurse"&gt;Recurse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="r/reStructuredText.rst"&gt;Restructuredtext&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="r/rexx.rexx"&gt;Rexx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="r/richtea.tea"&gt;Richtea&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="r/ring.ring"&gt;Ring&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="r/rockstar.rock"&gt;Rockstar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="r/roco.roco"&gt;Roco&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="r/roy.roy"&gt;Roy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="r/ruby.rb"&gt;Ruby&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="r/ruota.ruo"&gt;Ruota&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="r/rust.rs"&gt;Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/S-algol"&gt;S Algol&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/sacred.sacred"&gt;Sacred&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/sal.s"&gt;Sal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/sas.sas"&gt;Sas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/sass.sass"&gt;Sass&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/sather.sa"&gt;Sather&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/scala.scala"&gt;Scala&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/scheme.scm"&gt;Scheme&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/schwift.y"&gt;Schwift&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/scilab.scilab"&gt;Scilab&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/scratch.sb"&gt;Scratch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/Scss.scss"&gt;Scss&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/sed.sed"&gt;Sed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/self.self"&gt;Self&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/semicolon"&gt;Semicolon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/SendStuff.ss"&gt;Sendstuff&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/shakespeare.spl"&gt;Shakespeare&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/shell.sh"&gt;Shell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/shen.shen"&gt;Shen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/SIL.SIL"&gt;Sil&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/simpl%2B.usp"&gt;Simpl+&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/simula.sim"&gt;Simula&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/slashes.slashes"&gt;Slashes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/smali.smali"&gt;Smali&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/smalltalk-gnu.st"&gt;Smalltalk Gnu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/smalltalk.sm"&gt;Smalltalk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/smil.smil"&gt;Smil&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/sml.sml"&gt;Sml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/snowman.sm"&gt;Snowman&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/Solidity.sol"&gt;Solidity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/soupscript.script"&gt;Soupscript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/sparql.sparql"&gt;Sparql&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/spoon.spoon"&gt;Spoon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/spss.spss"&gt;Spss&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/sql.sql"&gt;Sql&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/squirrel.nut"&gt;Squirrel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/standard-ml.sml"&gt;Standard Ml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/stanza.stanza"&gt;Stanza&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/streem.strm"&gt;Streem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/stuck.stuck"&gt;Stuck&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/stuck_0byte.stuck"&gt;Stuck 0Byte&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/subleq.sq"&gt;Subleq&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/supercollider.sc"&gt;Supercollider&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/svg.svg"&gt;Svg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/swift.swift"&gt;Swift&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/systemtap.stp"&gt;Systemtap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="t/plain-text.txt"&gt;Plain Text&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="t/Tao-Presentations.ddd"&gt;Tao Presentations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="t/TapeBagel.tb"&gt;Tapebagel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="t/tcl.tcl"&gt;Tcl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="t/tcsh.tcsh"&gt;Tcsh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="t/telephone"&gt;Telephone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="t/TeX.tex"&gt;Tex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="t/thp.hrp"&gt;Thp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="t/thue.th"&gt;Thue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="t/tibasic.ti"&gt;Tibasic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="t/tk.tk"&gt;Tk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="t/tri.tri"&gt;Tri&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="t/trollscript.troll"&gt;Trollscript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="t/TrumpScript.py"&gt;Trumpscript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="t/tsql.sql"&gt;Tsql&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="t/TTCN3.ttcn"&gt;Ttcn3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="t/turing.oot"&gt;Turing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="t/Turing.t"&gt;Turing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="t/typescript.ts"&gt;Typescript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="u/Ubercode.cls"&gt;Ubercode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="u/ubiquity.ubiquity"&gt;Ubiquity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="u/umajin.u"&gt;Umajin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="u/unicomal.lst"&gt;Unicomal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="u/unlambda.unl"&gt;Unlambda&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="v/V"&gt;V&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="v/vala.vala"&gt;Vala&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="v/vbnet.vb"&gt;Vbnet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="v/velato.ly"&gt;Velato&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="v/verbose.verbose"&gt;Verbose&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="v/verbosefuck.vbfk"&gt;Verbosefuck&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="v/verilog.v"&gt;Verilog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="v/verve.vrv"&gt;Verve&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="v/vhdl.vhdl"&gt;Vhdl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="v/vi"&gt;Vi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="v/vimscript.vim"&gt;Vimscript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="v/virgil.v3"&gt;Virgil&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="v/visualbasic.vb"&gt;Visualbasic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="v/visualbasicscript.vbs"&gt;Visualbasicscript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="v/visualfoxpro.prg"&gt;Visualfoxpro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="v/vms.vms"&gt;Vms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="v/Vowels.vw"&gt;Vowels&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="v/vrml.wrl"&gt;Vrml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="v/vue.js"&gt;Vue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="w/wheat.wheat"&gt;Wheat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="w/whenever.whenever"&gt;Whenever&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="w/whirl.wr"&gt;Whirl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="w/whitespace.ws"&gt;Whitespace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="w/wml.wml"&gt;Wml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="w/wolframlanguage.wl"&gt;Wolframlanguage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="w/wren.wren"&gt;Wren&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="w/wsh.vbs"&gt;Wsh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="x/x-D.xd"&gt;X D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="x/xbase%2B%2B.prg"&gt;Xbase++&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="x/xbase.dbf"&gt;Xbase&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="x/xl.xl"&gt;Xl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="x/xlogo.lgo"&gt;Xlogo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="x/xml.xml"&gt;Xml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="x/xpl0.xpl"&gt;Xpl0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="x/xquery.xq"&gt;Xquery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="x/XRF.xrf"&gt;Xrf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="x/xslt.xslt"&gt;Xslt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="x/xul.xul"&gt;Xul&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="y/Y.y"&gt;Y&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="y/yaml.yaml"&gt;Yaml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="y/yolang.yo"&gt;Yolang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="y/yoptascript.js"&gt;Yoptascript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="z/zbd"&gt;Zbd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="z/zepto.zp"&gt;Zepto&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="z/zetaplex.zeta"&gt;Zetaplex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="z/zim.zim"&gt;Zim&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="z/zimbu.zu"&gt;Zimbu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="z/zombie.zombie"&gt;Zombie&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="z/zonnon.znn"&gt;Zonnon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="z/zsh.zsh"&gt;Zsh&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>leachim6</author><guid isPermaLink="false">https://github.com/leachim6/hello-world</guid><pubDate>Sun, 26 Jan 2020 00:04:00 GMT</pubDate></item><item><title>aadilmehdis/Computer-System-Organisation-2020 #5 in Assembly, This week</title><link>https://github.com/aadilmehdis/Computer-System-Organisation-2020</link><description>&lt;p&gt;&lt;i&gt;Resources for Computer System Organisation Course 2020&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-computer-systems-organisation" class="anchor" aria-hidden="true" href="#computer-systems-organisation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Computer Systems Organisation&lt;/h1&gt;
&lt;h2&gt;&lt;a id="user-content-spring-2020" class="anchor" aria-hidden="true" href="#spring-2020"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Spring 2020&lt;/h2&gt;
&lt;h2&gt;&lt;a id="user-content-tutorials" class="anchor" aria-hidden="true" href="#tutorials"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tutorials&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/aadilmehdis/Computer-System-Organisation-2020/tree/master/Tutorial1"&gt;Tutorial 1&lt;/a&gt; [17/01/2020] - Introduction to ISA, x86 ISA&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/aadilmehdis/Computer-System-Organisation-2020/tree/master/Tutorial2"&gt;Tutorial 2&lt;/a&gt; [18/01/2020] - x86 ISA, gdb&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-resources" class="anchor" aria-hidden="true" href="#resources"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Resources&lt;/h2&gt;
&lt;ul class="contains-task-list"&gt;
&lt;li class="task-list-item"&gt;
&lt;p&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; &lt;a href="https://github.com/aadilmehdis/Computer-System-Organisation-2020/tree/master/Resources/x86"&gt;x86&lt;/a&gt; cheatsheet&lt;/p&gt;
&lt;/li&gt;
&lt;li class="task-list-item"&gt;
&lt;p&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; &lt;a href="https://github.com/aadilmehdis/Computer-System-Organisation-2020/tree/master/Resources/gdb"&gt;gdb&lt;/a&gt; notes, cheatsheets&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>aadilmehdis</author><guid isPermaLink="false">https://github.com/aadilmehdis/Computer-System-Organisation-2020</guid><pubDate>Sun, 26 Jan 2020 00:05:00 GMT</pubDate></item></channel></rss>