<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>GitHub Trending: Emacs Lisp, This week</title><link>https://github.com/trending/emacs-lisp?since=weekly</link><description>The top repositories on GitHub for emacs-lisp, measured weekly</description><pubDate>Thu, 30 Jan 2020 01:14:19 GMT</pubDate><lastBuildDate>Thu, 30 Jan 2020 01:14:19 GMT</lastBuildDate><generator>PyRSS2Gen-1.1.0</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><ttl>720</ttl><item><title>hlissner/doom-emacs #1 in Emacs Lisp, This week</title><link>https://github.com/hlissner/doom-emacs</link><description>&lt;p&gt;&lt;i&gt;An Emacs configuration for the stubborn martian vimmer&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;a href="http://doomemacs.org" rel="nofollow"&gt;
  &lt;img src="https://camo.githubusercontent.com/d38622bbeea8e0a3a1c42e21d2839363d21b4627/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f7461672f686c6973736e65722f646f6f6d2d656d6163732e7376673f6c6162656c3d72656c6561736526636f6c6f723d6f72616e6765" alt="Made with Doom Emacs" data-canonical-src="https://img.shields.io/github/tag/hlissner/doom-emacs.svg?label=release&amp;amp;color=orange" style="max-width:100%;"&gt;
&lt;/a&gt;
&lt;a href="https://emacs.org" rel="nofollow"&gt;
  &lt;img src="https://camo.githubusercontent.com/145199dd89d8ed47968846fe8dcdde64b838ffab/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4d6164655f666f722d456d6163735f32362e312b2d626c756576696f6c65742e737667" alt="Made for Emacs 26.1+" data-canonical-src="https://img.shields.io/badge/Made_for-Emacs_26.1+-blueviolet.svg" style="max-width:100%;"&gt;
&lt;/a&gt;
&lt;a href="https://github.com/hlissner/doom-emacs/actions"&gt;
  &lt;img src="https://github.com/hlissner/doom-emacs/workflows/CI/badge.svg" alt="Build status: develop" style="max-width:100%;"&gt;
&lt;/a&gt;
&lt;a href="https://discord.gg/qvGgnVx" rel="nofollow"&gt;
  &lt;img src="https://camo.githubusercontent.com/48087b2da5b43d9130b73e6e8ad3e7b42caa3330/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f446973636f72642d626c75652e7376673f6c6f676f3d646973636f7264266c6162656c3d6a6f696e" alt="Join our discord server" align="right" data-canonical-src="https://img.shields.io/badge/Discord-blue.svg?logo=discord&amp;amp;label=join" style="max-width:100%;"&gt;
&lt;/a&gt;
&lt;br&gt;&lt;br&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/hlissner/doom-emacs/screenshots/main.png"&gt;&lt;img src="https://raw.githubusercontent.com/hlissner/doom-emacs/screenshots/main.png" alt="Doom Emacs Screenshot" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p align="center"&gt;
  &lt;b&gt;&lt;a href="/../../tree/screenshots"&gt;Screenshots&lt;/a&gt;&lt;/b&gt;
  |
  &lt;b&gt;&lt;a href="docs/getting_started.org"&gt;Get started&lt;/a&gt;&lt;/b&gt;
  |
  &lt;b&gt;&lt;a href="docs/contributing.org"&gt;Contribute&lt;/a&gt;&lt;/b&gt;
  |
  &lt;b&gt;&lt;a href="docs/index.org"&gt;Documentation&lt;/a&gt;&lt;/b&gt;
  |
  &lt;b&gt;&lt;a href="docs/faq.org"&gt;FAQ&lt;/a&gt;&lt;/b&gt;
&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Quick start&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;git clone https://github.com/hlissner/doom-emacs &lt;span class="pl-k"&gt;~&lt;/span&gt;/.emacs.d
&lt;span class="pl-k"&gt;~&lt;/span&gt;/.emacs.d/bin/doom install&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;More details, including dependencies and how to install Emacs, can be found &lt;a href="docs/getting_started.org#install"&gt;in
the documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#what-is-doom-emacs"&gt;What is Doom Emacs&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#dooms-mantras"&gt;Doom's mantras&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#features"&gt;Features&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#getting-help"&gt;Getting Help&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#community"&gt;Community&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#troubleshooting"&gt;Troubleshooting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#contributing"&gt;Contributing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;a id="user-content-what-is-doom-emacs" class="anchor" aria-hidden="true" href="#what-is-doom-emacs"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;What is Doom Emacs&lt;/h1&gt;
&lt;a href="http://ultravioletbat.deviantart.com/art/Yay-Evil-111710573" rel="nofollow"&gt;
  &lt;img src="https://github.com/hlissner/doom-emacs/raw/screenshots/cacochan.png" align="right" style="max-width:100%;"&gt;
&lt;/a&gt;
&lt;p&gt;It is a story as old as time. A stubborn, shell-dwelling, and melodramatic
vimmer -- envious of the features of modern text editors -- spirals into despair
before succumbing to the &lt;a href="https://github.com/emacs-evil/evil"&gt;dark side&lt;/a&gt;. This is his config.&lt;/p&gt;
&lt;p&gt;Doom is a configuration framework for &lt;a href="https://www.gnu.org/software/emacs/" rel="nofollow"&gt;GNU
Emacs&lt;/a&gt; tailored for Emacs bankruptcy
veterans who want less framework in their frameworks and the performance of a
hand rolled config (or better). It can be a foundation for your own config or a
resource for Emacs enthusiasts to learn more about our favorite OS.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-dooms-mantras" class="anchor" aria-hidden="true" href="#dooms-mantras"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Doom's mantras&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Gotta go fast.&lt;/strong&gt; Startup and run-time performance are priorities. Doom goes
beyond lazy loading packages by modifying them to be snappier and load lazier!&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Close to metal.&lt;/strong&gt; There's less between you and vanilla Emacs by design.
There's less to grok, on top of Emacs.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Readability counts.&lt;/strong&gt; Internals ought to be written as if reading them were
part of the user experience, and it is! Modules should be syntactically sweet.
Backend logic should be functional (as much as elisp permits), abstraction
light and (hopefully) documented.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Opinionated, but not stubborn.&lt;/strong&gt; Doom is a bundle of reasonable defaults and
curated opinions, but all of it should be optional. Use as little or as much
of it as you like.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Your system, your rules.&lt;/strong&gt; There are more ways to set up your development
environment than there are dislikes on Youtube Rewind '18, so Doom leaves it
to you. Doom will not &lt;em&gt;automatically&lt;/em&gt; install system dependencies (and will
coerce its plugins not to do so either). Use &lt;code&gt;doom doctor&lt;/code&gt; to figure out
what's missing.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-features" class="anchor" aria-hidden="true" href="#features"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Minimalistic good looks inspired by modern editors.&lt;/li&gt;
&lt;li&gt;A modular architecture for a more organized Emacs configuration.&lt;/li&gt;
&lt;li&gt;A custom elisp library to help simplify your config.&lt;/li&gt;
&lt;li&gt;(Optional) Vim-emulation powered by &lt;a href="https://github.com/emacs-evil/evil"&gt;evil-mode&lt;/a&gt;, including
ports of popular vim plugins and functionality.&lt;/li&gt;
&lt;li&gt;A declarative &lt;a href="core/autoload/packages.el"&gt;package management system&lt;/a&gt; (powered by
&lt;a href="https://github.com/raxod502/straight.el"&gt;straight.el&lt;/a&gt;) with a command line interface. Install packages
from anywhere, not just (M)ELPA.&lt;/li&gt;
&lt;li&gt;A curated set of sane defaults for all packages, all (major) OSes, and Emacs
itself.&lt;/li&gt;
&lt;li&gt;Support for &lt;em&gt;many&lt;/em&gt; programming languages. Too many to list. Includes syntax
highlighting, linters/checker integration, inline code evaluation, code
completion (where possible), REPLs, documentation lookups, snippets, and more!&lt;/li&gt;
&lt;li&gt;Support for &lt;em&gt;many&lt;/em&gt; tools, like docker, pass, ansible, terraform, and more.&lt;/li&gt;
&lt;li&gt;A Spacemacs-esque &lt;a href="modules/config/default/+evil-bindings.el"&gt;keybinding scheme&lt;/a&gt;, centered around leader
and localleader prefix keys (&lt;kbd&gt;SPC&lt;/kbd&gt; and &lt;kbd&gt;SPC&lt;/kbd&gt;&lt;kbd&gt;m&lt;/kbd&gt;, by
default).&lt;/li&gt;
&lt;li&gt;A rule-based &lt;a href="modules/ui/popup/README.org"&gt;popup management system&lt;/a&gt; that dictates how
temporary or disposable buffers are displayed (and disposed of).&lt;/li&gt;
&lt;li&gt;Automatic indentation detection and &lt;a href="http://editorconfig.org/" rel="nofollow"&gt;editorconfig&lt;/a&gt;
integration. Let someone else argue about tabs vs &lt;strong&gt;_*&lt;strong&gt;spaces&lt;/strong&gt;*_&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Project-management tools and framework-specific minor modes with their own
snippets libraries.&lt;/li&gt;
&lt;li&gt;Project search (and replace) utilities, powered by &lt;a href="https://github.com/BurntSushi/ripgrep"&gt;ripgrep&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Isolated and persistent workspaces (also substitutes for vim tabs).&lt;/li&gt;
&lt;li&gt;An envvar file generator that captures a snapshot of your shell environment
for Doom to load at startup. No more struggling to get Emacs to inherit your
&lt;code&gt;PATH&lt;/code&gt;, among other things.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;a id="user-content-getting-help" class="anchor" aria-hidden="true" href="#getting-help"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Getting Help&lt;/h1&gt;
&lt;h2&gt;&lt;a id="user-content-community" class="anchor" aria-hidden="true" href="#community"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Community&lt;/h2&gt;
&lt;p&gt;We have &lt;a href="https://discord.gg/qvGgnVx" rel="nofollow"&gt;a Discord server&lt;/a&gt;! Hop on and say hi!&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-troubleshooting" class="anchor" aria-hidden="true" href="#troubleshooting"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Troubleshooting&lt;/h2&gt;
&lt;p&gt;Encountered strange behavior or an error? Here are some things to try before you
shoot off that bug report:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Run &lt;code&gt;bin/doom refresh&lt;/code&gt;. This ensures Doom is properly set up and its autoloads
files are up-to-date.&lt;/li&gt;
&lt;li&gt;If you have byte-compiled your config (with &lt;code&gt;bin/doom compile&lt;/code&gt;), see if
&lt;code&gt;bin/doom clean&lt;/code&gt; makes the issue go away. Never debug issues with a
byte-compiled config, it will make your job harder.&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;bin/doom doctor&lt;/code&gt; to detect common issues in your development environment.&lt;/li&gt;
&lt;li&gt;Search Doom's issue tracker for mention of any error messages you've received.&lt;/li&gt;
&lt;li&gt;&lt;a href="docs/faq.org"&gt;Visit our FAQ&lt;/a&gt; to see if your issue is listed.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If all else fails, &lt;a href="https://github.com/hlissner/doom-emacs/issues/new"&gt;file that bug report&lt;/a&gt;! Please include the
behavior you've observed, the behavior you expected, and any error messages or
warnings logged to the *Messages* buffer (can be opened with &lt;kbd&gt;SPC h
e&lt;/kbd&gt; or &lt;code&gt;M-x view-echo-area-messages&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;It's a great help if you included a backtrace with errors, i.e. &lt;code&gt;M-x toggle-debug-on-error&lt;/code&gt; then recreating the error(s).&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-contributing" class="anchor" aria-hidden="true" href="#contributing"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contributing&lt;/h2&gt;
&lt;p&gt;Doom (and my Emacs work in general) is a labor of love and incurable madness,
done on my spare time. If you'd like to support my work, there are many things
you can do to help; I welcome any contribution!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I love pull requests and bug reports. Check out the &lt;a href="docs/contributing.org"&gt;Contributing
Guidelines&lt;/a&gt; to find out how you can help out.&lt;/li&gt;
&lt;li&gt;I welcome Elisp pointers! Don't hesitate to &lt;a href="https://github.com/hlissner/doom-emacs/issues/new"&gt;tell me my Elisp-fu
sucks&lt;/a&gt; (but please tell me why).&lt;/li&gt;
&lt;li&gt;Hop on &lt;a href="https://discord.gg/qvGgnVx" rel="nofollow"&gt;our Discord server&lt;/a&gt; and say hi! Help others out, hang out
or talk to me about Emacs, or gamedev, or programming, machine learning,
physics, pixel art, anime, gaming -- anything you like. Nourish this lonely
soul!&lt;/li&gt;
&lt;li&gt;If you'd like to support my work financially, consider buying me a drink
through &lt;a href="https://liberapay.com/hlissner/donate" rel="nofollow"&gt;liberapay&lt;/a&gt; or &lt;a href="https://paypal.me/henriklissner/10" rel="nofollow"&gt;paypal&lt;/a&gt;. Donations are a
great help. My work here contends with studies, ventures in indie gamedev, and
my freelance work.&lt;/li&gt;
&lt;/ul&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>hlissner</author><guid isPermaLink="false">https://github.com/hlissner/doom-emacs</guid><pubDate>Thu, 30 Jan 2020 00:01:00 GMT</pubDate></item><item><title>hlissner/emacs-doom-themes #2 in Emacs Lisp, This week</title><link>https://github.com/hlissner/emacs-doom-themes</link><description>&lt;p&gt;&lt;i&gt;An opinionated pack of modern color-themes&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/a918642e7742aa7f5aae9e686f48e79bd1a96cb0/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f7461672f686c6973736e65722f656d6163732d646f6f6d2d7468656d65732e7376673f6c6162656c3d72656c65617365267374796c653d666c61742d737175617265"&gt;&lt;img src="https://camo.githubusercontent.com/a918642e7742aa7f5aae9e686f48e79bd1a96cb0/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f7461672f686c6973736e65722f656d6163732d646f6f6d2d7468656d65732e7376673f6c6162656c3d72656c65617365267374796c653d666c61742d737175617265" alt="Release tag" data-canonical-src="https://img.shields.io/github/tag/hlissner/emacs-doom-themes.svg?label=release&amp;amp;style=flat-square" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="http://melpa.org/#/doom-themes" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/621f359fdf4553c5252a571785de56a85d53010b/687474703a2f2f6d656c70612e6f72672f7061636b616765732f646f6f6d2d7468656d65732d62616467652e7376673f7374796c653d666c61742d737175617265" alt="MELPA" data-canonical-src="http://melpa.org/packages/doom-themes-badge.svg?style=flat-square" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://travis-ci.org/hlissner/emacs-doom-themes" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/987575e312ca7a4f68f417530468a5f6e190cccf/68747470733a2f2f7472617669732d63692e6f72672f686c6973736e65722f656d6163732d646f6f6d2d7468656d65732e7376673f6272616e63683d6d6173746572267374796c653d666c61742d737175617265" alt="Build Status" data-canonical-src="https://travis-ci.org/hlissner/emacs-doom-themes.svg?branch=master&amp;amp;style=flat-square" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="./LICENSE"&gt;&lt;img src="https://camo.githubusercontent.com/95e854794a291423fe200ec681d09ed63f9fadd1/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d677265656e2e7376673f7374796c653d666c61742d737175617265" alt="MIT" data-canonical-src="https://img.shields.io/badge/license-MIT-green.svg?style=flat-square" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-doom-themes" class="anchor" aria-hidden="true" href="#doom-themes"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;doom-themes&lt;/h1&gt;
&lt;p&gt;DOOM Themes is an opinionated UI plugin and pack of themes extracted from my
&lt;a href="https://github.com/hlissner/.emacs.d"&gt;emacs.d&lt;/a&gt;, inspired by some of my favorite color themes.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/hlissner/emacs-doom-themes/tree/screenshots"&gt;See the screenshots.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#theme-list"&gt;Theme list&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#features"&gt;Features&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#install"&gt;Install&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#doom-emacs"&gt;Doom Emacs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#manually"&gt;Manually&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#common-issues"&gt;Common Issues&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#contribute"&gt;Contribute&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-theme-list" class="anchor" aria-hidden="true" href="#theme-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Theme list&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Flagship themes
&lt;ul class="contains-task-list"&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; &lt;code&gt;doom-one&lt;/code&gt;: doom-themes' flagship theme, inspired by &lt;a href="http://atom.io" rel="nofollow"&gt;Atom&lt;/a&gt;'s One Dark themes&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; &lt;code&gt;doom-one-light&lt;/code&gt;: light version of doom-one (thanks to &lt;a href="https://github.com/ztlevi"&gt;ztlevi&lt;/a&gt;)&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; &lt;code&gt;doom-vibrant&lt;/code&gt;: a slightly more vibrant version of &lt;code&gt;doom-one&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Additional themes
&lt;ul class="contains-task-list"&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; &lt;code&gt;doom-acario-dark&lt;/code&gt;: an original dark theme (thanks to &lt;a href="https://github.com/gagbo"&gt;gagbo&lt;/a&gt;)&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; &lt;code&gt;doom-acario-light&lt;/code&gt;: an original light theme (thanks to &lt;a href="https://github.com/gagbo"&gt;gagbo&lt;/a&gt;)&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; &lt;code&gt;doom-city-lights&lt;/code&gt;: based on Atom's &lt;a href="http://citylights.xyz/" rel="nofollow"&gt;City lights&lt;/a&gt; (thanks to &lt;a href="https://github.com/fuxialexander"&gt;fuxialexander&lt;/a&gt;)&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; &lt;code&gt;doom-challenger-deep&lt;/code&gt;: based on Vim's &lt;a href="https://github.com/challenger-deep-theme/vim"&gt;Challenger deep&lt;/a&gt; theme (thanks to &lt;a href="https://github.com/fuxialexander"&gt;fuxialexander&lt;/a&gt;)&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; &lt;code&gt;doom-dark+&lt;/code&gt; ported from VS Code's &lt;a href="https://github.com/microsoft/vscode/blob/master/extensions/theme-defaults/themes/dark_plus.json"&gt;Dark+&lt;/a&gt; theme (thanks to &lt;a href="https://github.com/ema2159"&gt;ema2159&lt;/a&gt;)&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; &lt;code&gt;doom-dracula&lt;/code&gt;: an implementation of &lt;a href="https://draculatheme.com/" rel="nofollow"&gt;Dracula&lt;/a&gt; theme (thanks to &lt;a href="https://github.com/fuxialexander"&gt;fuxialexander&lt;/a&gt;)&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; &lt;code&gt;doom-fairy-floss&lt;/code&gt;: a candy colored Sublime theme by &lt;a href="https://sailorhg.github.io/fairyfloss/" rel="nofollow"&gt;sailorhg&lt;/a&gt; (thanks to &lt;a href="https://github.com/ema2159"&gt;ema2159&lt;/a&gt;)&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; &lt;code&gt;doom-gruvbox&lt;/code&gt;: adapted from Morhetz's &lt;a href="https://github.com/morhetz/gruvbox"&gt;Gruvbox&lt;/a&gt; (thanks to &lt;a href="https://github.com/JongW"&gt;JongW&lt;/a&gt;)&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; &lt;code&gt;doom-horizon&lt;/code&gt;: ported from VS Code's &lt;a href="https://github.com/jolaleye/horizon-theme-vscode"&gt;Horizon&lt;/a&gt; (thanks to &lt;a href="https://github.com/kenranunderscore"&gt;karetsu&lt;/a&gt;)&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; &lt;code&gt;doom-Iosvkem&lt;/code&gt;: adapted from &lt;a href="https://github.com/neutaaaaan/iosvkem"&gt;Iosvkem&lt;/a&gt; (thanks to &lt;a href="https://github.com/neutaaaaan"&gt;neutaaaaan&lt;/a&gt;)&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; &lt;code&gt;doom-laserwave&lt;/code&gt;: a clean 80's synthwave / outrun theme inspired by VS Code's &lt;a href="https://github.com/Jaredk3nt/laserwave"&gt;laserwave&lt;/a&gt; (thanks to &lt;a href="https://github.com/hyakt"&gt;hyakt&lt;/a&gt;)&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; &lt;code&gt;doom-manegarm&lt;/code&gt;: an original autumn-inspired dark theme (thanks to &lt;a href="https://github.com/kenranunderscore"&gt;kenranunderscore&lt;/a&gt;)&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; &lt;code&gt;doom-molokai&lt;/code&gt;: based on Textmate's monokai&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; &lt;code&gt;doom-moonlight&lt;/code&gt; ported from VS Code's &lt;a href="https://github.com/atomiks/moonlight-vscode-theme"&gt;Moonlight Theme&lt;/a&gt; (thanks to &lt;a href="https://github.com/Brettm12345"&gt;Brettm12345&lt;/a&gt;)&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; &lt;code&gt;doom-nord&lt;/code&gt;: dark variant of &lt;a href="https://www.nordtheme.com/" rel="nofollow"&gt;Nord&lt;/a&gt; (thanks to &lt;a href="https://github.com/fuxialexander"&gt;fuxialexander&lt;/a&gt;)&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; &lt;code&gt;doom-nord-light&lt;/code&gt;: light variant of &lt;a href="https://www.nordtheme.com/" rel="nofollow"&gt;Nord&lt;/a&gt; (thanks to &lt;a href="https://github.com/fuxialexander"&gt;fuxialexander&lt;/a&gt;)&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; &lt;code&gt;doom-nova&lt;/code&gt;: adapted from &lt;a href="https://trevordmiller.com/projects/nova" rel="nofollow"&gt;Nova&lt;/a&gt; (thanks to &lt;a href="https://github.com/bigardone"&gt;bigardone&lt;/a&gt;)&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; &lt;code&gt;doom-oceanic-next&lt;/code&gt;: adapted from &lt;a href="https://github.com/voronianski/oceanic-next-color-scheme"&gt;Oceanic Next&lt;/a&gt; theme (thanks to &lt;a href="https://github.com/juanwolf"&gt;juanwolf&lt;/a&gt;)&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; &lt;code&gt;doom-opera&lt;/code&gt;: an original dark theme (thanks to &lt;a href="https://github.com/jwintz"&gt;jwintz&lt;/a&gt;)&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; &lt;code&gt;doom-opera-light&lt;/code&gt;: an original light theme (thanks to &lt;a href="https://github.com/jwintz"&gt;jwintz&lt;/a&gt;)&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; &lt;code&gt;doom-outrun-electric&lt;/code&gt;: a neon colored theme inspired in VS Code's &lt;a href="https://github.com/samrap/outrun-theme-vscode"&gt;Outrun Electric&lt;/a&gt; (thanks to &lt;a href="https://github.com/ema2159"&gt;ema2159&lt;/a&gt;)&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; &lt;code&gt;doom-palenight&lt;/code&gt; adapted from &lt;a href="https://github.com/equinusocio/vsc-material-theme"&gt;Material Themes&lt;/a&gt; (thanks to &lt;a href="https://github.com/Brettm12345"&gt;Brettm12345&lt;/a&gt;)&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; &lt;code&gt;doom-peacock&lt;/code&gt;: based on Peacock from &lt;a href="http://daylerees.github.io/" rel="nofollow"&gt;daylerees' themes&lt;/a&gt; (thanks to &lt;a href="https://github.com/teesloane"&gt;teesloane&lt;/a&gt;)&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; &lt;code&gt;doom-snazzy&lt;/code&gt;: a dark theme inspired in Atom's &lt;a href="https://github.com/sindresorhus/hyper-snazzy"&gt;Hyper Snazzy&lt;/a&gt; (thanks to &lt;a href="https://github.com/ar1a"&gt;ar1a&lt;/a&gt;)&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; &lt;code&gt;doom-solarized-dark&lt;/code&gt;: dark variant of &lt;a href="http://ethanschoonover.com/solarized" rel="nofollow"&gt;Solarized&lt;/a&gt; (thanks to &lt;a href="https://github.com/ema2159"&gt;ema2159&lt;/a&gt;)&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; &lt;code&gt;doom-solarized-light&lt;/code&gt;: light variant of &lt;a href="http://ethanschoonover.com/solarized" rel="nofollow"&gt;Solarized&lt;/a&gt; (thanks to &lt;a href="https://github.com/fuxialexander"&gt;fuxialexander&lt;/a&gt;)&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; &lt;code&gt;doom-sourcerer&lt;/code&gt;: based on &lt;a href="https://github.com/xero/sourcerer.vim"&gt;Sourcerer&lt;/a&gt; (thanks to &lt;a href="https://github.com/defphil"&gt;defphil&lt;/a&gt;)&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; &lt;code&gt;doom-spacegrey&lt;/code&gt;: &lt;a href="http://kkga.github.io/spacegray/" rel="nofollow"&gt;I'm sure you've heard of it&lt;/a&gt; (thanks to &lt;a href="https://github.com/teesloane"&gt;teesloane&lt;/a&gt;)&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; &lt;code&gt;doom-tomorrow-day&lt;/code&gt;: &lt;a href="https://github.com/ChrisKempson/Tomorrow-Theme"&gt;Tomorrow&lt;/a&gt;'s light variant (thanks to &lt;a href="https://github.com/emacswatcher"&gt;emacswatcher&lt;/a&gt;)&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; &lt;code&gt;doom-tomorrow-night&lt;/code&gt;: one of the dark variants of &lt;a href="https://github.com/ChrisKempson/Tomorrow-Theme"&gt;Tomorrow&lt;/a&gt; (thanks to &lt;a href="https://github.com/emacswatcher"&gt;emacswatcher&lt;/a&gt;)&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; &lt;code&gt;doom-wilmersdorf&lt;/code&gt;: port of Ian Pan's &lt;a href="https://github.com/ianpan870102/wilmersdorf-emacs-theme"&gt;Wilmersdorf&lt;/a&gt; (thanks to &lt;a href="https://github.com/ema2159"&gt;ema2159&lt;/a&gt;)&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox"&gt; &lt;code&gt;doom-mono-dark&lt;/code&gt; / &lt;code&gt;doom-mono-light&lt;/code&gt;: a minimalistic, monochromatic theme&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox"&gt; &lt;code&gt;doom-tron&lt;/code&gt;: based on Tron Legacy from &lt;a href="http://daylerees.github.io/" rel="nofollow"&gt;daylerees' themes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-features" class="anchor" aria-hidden="true" href="#features"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;(doom-themes-visual-bell-config)&lt;/code&gt;: flash the mode-line when the Emacs bell
rings (i.e. an error occurs).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;(doom-themes-neotree-config)&lt;/code&gt;: a &lt;a href="https://github.com/jaypei/emacs-neotree"&gt;neotree&lt;/a&gt; theme that takes after &lt;a href="http://atom.io" rel="nofollow"&gt;Atom&lt;/a&gt;'s
file drawer, and is simpler than the built in icon theme in neotree
(&lt;a href="/../screenshots/doom-one.png"&gt;screenshot&lt;/a&gt;, &lt;a href="https://github.com/hlissner/emacs-doom-themes/wiki"&gt;more details&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;This requires &lt;code&gt;all-the-icons&lt;/code&gt;' fonts to be installed: &lt;code&gt;M-x all-the-icons-install-fonts&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;(doom-themes-treemacs-config)&lt;/code&gt;: two &lt;a href="https://github.com/Alexander-Miller/treemacs"&gt;treemacs&lt;/a&gt; icon themes, one that takes after
&lt;a href="http://atom.io" rel="nofollow"&gt;Atom&lt;/a&gt;'s, and a second more colorful implementation (WIP).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;(doom-themes-org-config)&lt;/code&gt;: corrects and improves some of org-mode's native
fontification.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Re-set &lt;code&gt;org-todo' &amp;amp; &lt;/code&gt;org-headline-done' faces to make them respect
underlying faces (i.e. don't override the :height or :background of
underlying faces).&lt;/li&gt;
&lt;li&gt;Make statistic cookies respect underlying faces.&lt;/li&gt;
&lt;li&gt;Fontify item bullets (make them stand out)&lt;/li&gt;
&lt;li&gt;Fontify item checkboxes (and when they're marked done), like TODOs that
are marked done.&lt;/li&gt;
&lt;li&gt;Fontify dividers/separators (5+ dashes)&lt;/li&gt;
&lt;li&gt;Fontify #hashtags and @at-tags, for personal convenience; see
&lt;code&gt;doom-org-special-tags&lt;/code&gt; to disable this.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Resources that may interest you:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To get dimmed sidebars and brighter source buffers (like in the
&lt;a href="https://github.com/hlissner/emacs-doom-themes/tree/screenshots"&gt;screenshots&lt;/a&gt;), see &lt;a href="https://github.com/hlissner/emacs-solaire-mode"&gt;solaire-mode&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;To get line number highlighting for &lt;code&gt;nlinum&lt;/code&gt;, set
&lt;code&gt;nlinum-highlight-current-line&lt;/code&gt; to non-nil (or see &lt;a href="https://melpa.org/#/hlinum" rel="nofollow"&gt;hlinum&lt;/a&gt; for &lt;code&gt;linum&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/AnthonyDiGirolamo"&gt;AnthonyDiGirolamo&lt;/a&gt; added doom-one (&lt;a href="https://github.com/AnthonyDiGirolamo/airline-themes/raw/master/screenshots/airline-doom-one-theme.png"&gt;screenshot&lt;/a&gt;) and
doom-molokai (&lt;a href="https://github.com/AnthonyDiGirolamo/airline-themes/raw/master/screenshots/airline-doom-molokai-theme.png"&gt;screenshot&lt;/a&gt;) skins to
&lt;a href="https://github.com/AnthonyDiGirolamo/airline-themes"&gt;airline-themes&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;I'm working on making my modeline more accessible. In the meantime, check
out &lt;a href="https://github.com/hlissner/.emacs.d/blob/master/modules/ui/doom-modeline/config.el"&gt;my mode-line configuration&lt;/a&gt; in my &lt;a href="https://github.com/hlissner/.emacs.d"&gt;emacs.d&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-install" class="anchor" aria-hidden="true" href="#install"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Install&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-doom-emacs" class="anchor" aria-hidden="true" href="#doom-emacs"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Doom Emacs&lt;/h3&gt;
&lt;p&gt;The built-in &lt;code&gt;:ui doom&lt;/code&gt; module installs &lt;code&gt;doom-themes&lt;/code&gt; for you, and loads
&lt;code&gt;doom-one&lt;/code&gt; by default. You can change the theme by changing the &lt;code&gt;doom-theme&lt;/code&gt;
variable from &lt;code&gt;~/.doom.d/config.el&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;setq&lt;/span&gt; doom-theme &lt;span class="pl-c1"&gt;'doom-city-lights&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or by loading it manually:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;load-theme&lt;/span&gt; &lt;span class="pl-c1"&gt;'doom-city-lights&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-manually" class="anchor" aria-hidden="true" href="#manually"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Manually&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;doom-themes&lt;/code&gt; is available on MELPA.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/raxod502/straight.el"&gt;Straight&lt;/a&gt; users can install it with
&lt;code&gt;M-x straight-use-package RET doom-themes&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;And package.el users: &lt;code&gt;M-x package-install RET doom-themes&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here is a example configuration for &lt;code&gt;doom-theme&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; doom-themes
  &lt;span class="pl-c1"&gt;:config&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Global settings (defaults)&lt;/span&gt;
  (&lt;span class="pl-k"&gt;setq&lt;/span&gt; doom-themes-enable-bold &lt;span class="pl-c1"&gt;t&lt;/span&gt;    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt; if nil, bold is universally disabled&lt;/span&gt;
        doom-themes-enable-italic &lt;span class="pl-c1"&gt;t&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt; if nil, italics is universally disabled&lt;/span&gt;
  (&lt;span class="pl-c1"&gt;load-theme&lt;/span&gt; &lt;span class="pl-c1"&gt;'doom-one&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;)

  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Enable flashing mode-line on errors&lt;/span&gt;
  (doom-themes-visual-bell-config)
  
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Enable custom neotree theme (all-the-icons must be installed!)&lt;/span&gt;
  (doom-themes-neotree-config)
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; or for treemacs users&lt;/span&gt;
  (&lt;span class="pl-k"&gt;setq&lt;/span&gt; doom-themes-treemacs-theme &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;doom-colors&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt; use the colorful treemacs theme&lt;/span&gt;
  (doom-themes-treemacs-config)
  
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Corrects (and improves) org-mode's native fontification.&lt;/span&gt;
  (doom-themes-org-config))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href="https://github.com/hlissner/emacs-doom-themes/wiki"&gt;The wiki contains details for customizing the neotree theme&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-common-issues" class="anchor" aria-hidden="true" href="#common-issues"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Common Issues&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If you use &lt;code&gt;nlinum&lt;/code&gt; or &lt;code&gt;linum&lt;/code&gt; in org-mode, the larger headline sizes in some
themes &lt;a href="https://github.com/hlissner/emacs-doom-themes/issues/86"&gt;could bleed into the line numbers&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Fix this by setting :height explicitly for your line number plugins, after
you've loaded the theme. e.g.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;let&lt;/span&gt; ((height (&lt;span class="pl-c1"&gt;face-attribute&lt;/span&gt; &lt;span class="pl-c1"&gt;'default&lt;/span&gt; &lt;span class="pl-c1"&gt;:height&lt;/span&gt;)))
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; for all linum/nlinum users&lt;/span&gt;
  (&lt;span class="pl-c1"&gt;set-face-attribute&lt;/span&gt; &lt;span class="pl-c1"&gt;'linum&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt; &lt;span class="pl-c1"&gt;:height&lt;/span&gt; height)
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; only for &lt;span class="pl-smi"&gt;`linum-relative'&lt;/span&gt; users:&lt;/span&gt;
  (&lt;span class="pl-c1"&gt;set-face-attribute&lt;/span&gt; &lt;span class="pl-c1"&gt;'linum-relative-current-face&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt; &lt;span class="pl-c1"&gt;:height&lt;/span&gt; height)
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; only for &lt;span class="pl-smi"&gt;`nlinum-relative'&lt;/span&gt; users:&lt;/span&gt;
  (&lt;span class="pl-c1"&gt;set-face-attribute&lt;/span&gt; &lt;span class="pl-c1"&gt;'nlinum-relative-current-face&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt; &lt;span class="pl-c1"&gt;:height&lt;/span&gt; height))&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-contribute" class="anchor" aria-hidden="true" href="#contribute"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contribute&lt;/h2&gt;
&lt;p&gt;I welcome contributions of any kind, be they pull requests, bug reports or elisp
pointers. Additional theme and plugin support requests are welcome too.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>hlissner</author><guid isPermaLink="false">https://github.com/hlissner/emacs-doom-themes</guid><pubDate>Thu, 30 Jan 2020 00:02:00 GMT</pubDate></item><item><title>syl20bnr/spacemacs #3 in Emacs Lisp, This week</title><link>https://github.com/syl20bnr/spacemacs</link><description>&lt;p&gt;&lt;i&gt;A community-driven Emacs distribution - The best editor is neither Emacs nor Vim,  it's Emacs *and* Vim!&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;p&gt;&lt;a name="user-content-top"&gt;&lt;/a&gt;
&lt;a href="http://spacemacs.org" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/8f5ee1d9b7278ed2c63f1f89e9a583ec59b52b6b/68747470733a2f2f63646e2e7261776769742e636f6d2f73796c3230626e722f73706163656d6163732f343432643032353737396461326636326663383663323038323730333639373731346462363531342f6173736574732f73706163656d6163732d62616467652e737667" alt="Made with Spacemacs" data-canonical-src="https://cdn.rawgit.com/syl20bnr/spacemacs/442d025779da2f62fc86c2082703697714db6514/assets/spacemacs-badge.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;a href="http://www.twitter.com/spacemacs" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/7cf10772eb6ccebe92d678c452a971e6e2778653/687474703a2f2f692e696d6775722e636f6d2f7458536f5468462e706e67" alt="Twitter" align="right" data-canonical-src="http://i.imgur.com/tXSoThF.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p align="center"&gt;&lt;a target="_blank" rel="noopener noreferrer" href="/doc/img/title2.png"&gt;&lt;img src="/doc/img/title2.png" alt="Spacemacs" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p align="center"&gt;
&lt;b&gt;&lt;a href="http://spacemacs.org/doc/DOCUMENTATION#orgheadline5" rel="nofollow"&gt;philosophy&lt;/a&gt;&lt;/b&gt;
|
&lt;b&gt;&lt;a href="http://spacemacs.org/doc/DOCUMENTATION#orgheadline8" rel="nofollow"&gt;for whom?&lt;/a&gt;&lt;/b&gt;
|
&lt;b&gt;&lt;a href="http://spacemacs.org/doc/DOCUMENTATION#orgheadline7" rel="nofollow"&gt;screenshots&lt;/a&gt;&lt;/b&gt;
|
&lt;b&gt;&lt;a href="http://spacemacs.org/doc/DOCUMENTATION.html" rel="nofollow"&gt;documentation&lt;/a&gt;&lt;/b&gt;
|
&lt;b&gt;&lt;a href="CONTRIBUTING.org"&gt;contribute&lt;/a&gt;&lt;/b&gt;
|
&lt;b&gt;&lt;a href="http://spacemacs.org/doc/DOCUMENTATION#achievements" rel="nofollow"&gt;achievements&lt;/a&gt;&lt;/b&gt;
|
&lt;b&gt;&lt;a href="http://spacemacs.org/doc/FAQ" rel="nofollow"&gt;FAQ&lt;/a&gt;&lt;/b&gt;
&lt;/p&gt;
&lt;hr&gt;
&lt;p align="center"&gt;
&lt;a href="https://gitter.im/syl20bnr/spacemacs?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/80bf7c9122b2d8f4dbadfc434c9074c1754267ae/68747470733a2f2f6261646765732e6769747465722e696d2f4a6f696e20436861742e737667" alt="Gitter" data-canonical-src="https://badges.gitter.im/Join Chat.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://travis-ci.org/syl20bnr/spacemacs" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/b724760fb5fb9a3cc9dcb3ed5fca8d102d076062/68747470733a2f2f7472617669732d63692e6f72672f73796c3230626e722f73706163656d6163732e737667" alt="Build Status" data-canonical-src="https://travis-ci.org/syl20bnr/spacemacs.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;amp;hosted_button_id=ESFVNPKP4Y742" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/516248018619132b396881c0b21749c34d6ccfbd/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f50617970616c2d446f6e6174652d626c75652e737667" alt="Donate" data-canonical-src="https://img.shields.io/badge/Paypal-Donate-blue.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://shop.spreadshirt.com/spacemacs-shop" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/f1b306f89bf6fade603509713a098316a4948ef2/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f53686f702d542d2d5368697274732d626c75652e737667" alt="Donate" data-canonical-src="https://img.shields.io/badge/Shop-T--Shirts-blue.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="http://www.slant.co/topics/12/~what-are-the-best-programming-text-editors" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/2e66996b76fc392f4936160dc3f627f663d1a68a/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f536c616e742d5265636f6d6d656e642d6666363962342e737667" alt="Recommend it" data-canonical-src="https://img.shields.io/badge/Slant-Recommend-ff69b4.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Quick Install:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clone https://github.com/syl20bnr/spacemacs ~/.emacs.d
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#introduction"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#features"&gt;Features&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#documentation"&gt;Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#getting-help"&gt;Getting Help&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#prerequisites"&gt;Prerequisites&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#emacs"&gt;Emacs&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#linux-distros"&gt;Linux distros&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#macos"&gt;macOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#windows"&gt;Windows&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#install"&gt;Install&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#default-installation"&gt;Default installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#alternate-installations"&gt;Alternate installations&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#modify-home-environment-variable"&gt;Modify HOME environment variable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#modify-spacemacs-start-directory-variable"&gt;Modify spacemacs-start-directory variable&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#spacemacs-logo"&gt;Spacemacs logo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#update"&gt;Update&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#automatic-update-on-master-branch"&gt;Automatic update (on master branch)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#manual-update-on-master-branch"&gt;Manual update (on master branch)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#on-develop-branch"&gt;On develop branch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#revert-to-a-specific-version"&gt;Revert to a specific version&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#quotes"&gt;Quotes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#contributions"&gt;Contributions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#communities"&gt;Communities&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#license"&gt;License&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#supporting-spacemacs"&gt;Supporting Spacemacs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;&lt;a id="user-content-introduction" class="anchor" aria-hidden="true" href="#introduction"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Spacemacs is a new way to experience Emacs -- a sophisticated and
polished set-up focused on ergonomics, mnemonics and consistency.&lt;/p&gt;
&lt;p&gt;Just clone it, launch it, then press the space bar to explore the
interactive list of carefully-chosen key bindings. You can also press
the home buffer's &lt;code&gt;[?]&lt;/code&gt; button for some great first key bindings to
try.&lt;/p&gt;
&lt;p&gt;Spacemacs can be used naturally by both Emacs and Vim users -- you can
even mix the two editing styles. Switching easily between input styles
makes Spacemacs a great tool for pair-programming.&lt;/p&gt;
&lt;p&gt;Spacemacs is currently in beta, and contributions are very welcome.&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="doc/img/spacemacs-python.png"&gt;&lt;img src="doc/img/spacemacs-python.png" alt="spacemacs_python" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-features" class="anchor" aria-hidden="true" href="#features"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Features&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Great documentation:&lt;/strong&gt; access documentation in Emacs with
&lt;kbd&gt;SPC h SPC&lt;/kbd&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Beautiful GUI:&lt;/strong&gt; you'll love the distraction free UI and its functional
mode-line.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Excellent ergonomics:&lt;/strong&gt; all the key bindings are accessible by pressing
the &lt;kbd&gt;space bar&lt;/kbd&gt; or &lt;kbd&gt;alt-m&lt;/kbd&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mnemonic key bindings:&lt;/strong&gt; commands have mnemonic prefixes like
&lt;kbd&gt;SPC b&lt;/kbd&gt; for all the buffer commands or &lt;kbd&gt;SPC p&lt;/kbd&gt; for the
project commands.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Batteries included:&lt;/strong&gt; discover hundreds of ready-to-use packages nicely
organised in configuration layers following a set of
&lt;a href="http://spacemacs.org/doc/CONVENTIONS" rel="nofollow"&gt;conventions&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Documentation&lt;/h1&gt;
&lt;p&gt;Comprehensive documentation is available for each layer by pressing
&lt;kbd&gt;SPC h SPC&lt;/kbd&gt;.&lt;/p&gt;
&lt;p&gt;You can also check the &lt;a href="http://spacemacs.org/doc/DOCUMENTATION" rel="nofollow"&gt;general documentation&lt;/a&gt;,
&lt;a href="http://spacemacs.org/doc/QUICK_START" rel="nofollow"&gt;quick start guide&lt;/a&gt; and the &lt;a href="http://spacemacs.org/doc/FAQ" rel="nofollow"&gt;FAQ&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-getting-help" class="anchor" aria-hidden="true" href="#getting-help"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Getting Help&lt;/h1&gt;
&lt;p&gt;If you need help, ask your question in the &lt;a href="https://gitter.im/syl20bnr/spacemacs" rel="nofollow"&gt;Gitter Chat&lt;/a&gt; and a member of the
community will help you out.&lt;/p&gt;
&lt;p&gt;If you prefer IRC, connect to the &lt;a href="https://irc.gitter.im/" rel="nofollow"&gt;Gitter Chat IRC server&lt;/a&gt; and join the
&lt;code&gt;#syl20bnr/spacemacs&lt;/code&gt; channel.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-prerequisites" class="anchor" aria-hidden="true" href="#prerequisites"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Prerequisites&lt;/h1&gt;
&lt;h2&gt;&lt;a id="user-content-emacs" class="anchor" aria-hidden="true" href="#emacs"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Emacs&lt;/h2&gt;
&lt;p&gt;Spacemacs requires Emacs 24.4 or above. The development version of Emacs (at the
time of writing, this is 25.2) is not &lt;em&gt;officially&lt;/em&gt; supported, but should
nevertheless be expected to work.&lt;/p&gt;
&lt;p&gt;Some modes require third-party tools that you'll have to install via your
favorite package manager.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-linux-distros" class="anchor" aria-hidden="true" href="#linux-distros"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Linux distros&lt;/h3&gt;
&lt;p&gt;Install Emacs from the package manager of your Linux distribution.&lt;/p&gt;
&lt;p&gt;You should install the "emacs" package, not the "xemacs" package.
XEmacs is an old fork of Emacs. The X in its name is unrelated to X11.
Both Emacs and XEmacs have graphical support.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Ubuntu LTS 12.04 and 14.04 repositories have only Emacs 24.3
available. You have to &lt;a href="https://www.gnu.org/software/emacs/manual/html_node/efaq/Installing-Emacs.html" rel="nofollow"&gt;build from source&lt;/a&gt; Emacs 24.4 or greater,
as Spacemacs won't work with 24.3. The same may be true for other distributions
as well.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-macos" class="anchor" aria-hidden="true" href="#macos"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;macOS&lt;/h3&gt;
&lt;p&gt;The recommended way of installing Emacs on macOS is using &lt;a href="http://brew.sh" rel="nofollow"&gt;homebrew&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;$ brew tap d12frosted/emacs-plus
$ brew install emacs-plus
$ brew linkapps emacs-plus&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; these homebrew commands will install GNU Emacs, and link it to your
&lt;code&gt;/Applications&lt;/code&gt; directory. You still need to run the &lt;code&gt;git clone&lt;/code&gt; mentioned at
the start of this file. That will populate your &lt;code&gt;~/.emacs.d&lt;/code&gt; directory, which is
what transforms a regular GNU Emacs into Spacemacs.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; the proposed &lt;code&gt;emacs-plus&lt;/code&gt; tap is identical to the &lt;code&gt;emacs&lt;/code&gt; formulae, it
just builds GNU Emacs with support of several features by default along with
providing Spacemacs icon.
See &lt;a href="https://github.com/d12frosted/homebrew-emacs-plus"&gt;emacs-plus&lt;/a&gt; for more
information.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: to have the title bar match your theme background color,
consider using instead:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;$ brew install emacs-plus --HEAD --with-natural-title-bars&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; after you have completed the &lt;a href="#install"&gt;install process&lt;/a&gt; below, it is
also recommended to add the &lt;a href="http://spacemacs.org/layers/+os/osx/README.html" rel="nofollow"&gt;osx layer&lt;/a&gt; to your &lt;a href="http://spacemacs.org/doc/DOCUMENTATION#orgheadline45" rel="nofollow"&gt;dotfile&lt;/a&gt;. Install
instructions are available in the &lt;a href="http://spacemacs.org/layers/+os/osx/README.html" rel="nofollow"&gt;osx layer&lt;/a&gt; documentation.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; if the powerline separators on the spaceline are a different (less
saturated) color than the rest of the line, you can add following snippet to
&lt;code&gt;dotspacemacs/user-config&lt;/code&gt; in your &lt;code&gt;.spacemacs&lt;/code&gt; file.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;setq&lt;/span&gt; ns-use-srgb-colorspace &lt;span class="pl-c1"&gt;nil&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Keep in mind that this is not ideal solution as it affects all colours in Emacs.
Another option is to use different powerline separator. For example, &lt;code&gt;alternate&lt;/code&gt;
and &lt;code&gt;bar&lt;/code&gt; diminishes the difference. And using &lt;code&gt;utf-8&lt;/code&gt; separator makes it go
away completely without the need to change colour space. In order to change
powerline separator put following snippet in &lt;code&gt;dotspacemacs/user-config&lt;/code&gt;.&lt;/p&gt;
&lt;pre lang="eslip"&gt;&lt;code&gt;(setq powerline-default-separator 'utf-8)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For more information about powerline separators, please refer to appropriate
section in &lt;a href="http://spacemacs.org/doc/DOCUMENTATION" rel="nofollow"&gt;Documentation&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-windows" class="anchor" aria-hidden="true" href="#windows"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Windows&lt;/h3&gt;
&lt;p&gt;You can download good quality builds from the &lt;a href="http://emacsbinw64.sourceforge.net/" rel="nofollow"&gt;emacs-w64 project&lt;/a&gt;.
It is recommended to install the most recent &lt;a href="https://sourceforge.net/projects/emacsbinw64/files/release/" rel="nofollow"&gt;stable build&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Be sure to declare a environment variable named &lt;code&gt;HOME&lt;/code&gt; pointing to your user
directory &lt;code&gt;C:\Users\&amp;lt;username&amp;gt;&lt;/code&gt;. Then you can clone Spacemacs in this directory.&lt;/p&gt;
&lt;p&gt;Sometimes you'll get the following error when you first start Emacs:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;The directory ~/.emacs.d/server is unsafe
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To fix it change the owner of the directory &lt;code&gt;~/.emacs.d/server&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;from Properties select the Tab “Security”,&lt;/li&gt;
&lt;li&gt;select the button “Advanced”,&lt;/li&gt;
&lt;li&gt;select the Tab “Owner”&lt;/li&gt;
&lt;li&gt;change the owner to your account name&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Source: &lt;a href="http://stackoverflow.com/questions/885793/emacs-error-when-calling-server-start" rel="nofollow"&gt;Stack Overflow&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For efficient searches we recommend to install &lt;code&gt;pt&lt;/code&gt; (&lt;a href="https://github.com/monochromegane/the_platinum_searcher"&gt;the platinum searcher&lt;/a&gt;).
&lt;code&gt;pt&lt;/code&gt; version 1.7.7 or higher is required.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-install" class="anchor" aria-hidden="true" href="#install"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Install&lt;/h1&gt;
&lt;h2&gt;&lt;a id="user-content-default-installation" class="anchor" aria-hidden="true" href="#default-installation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Default installation&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;If you have an existing Emacs configuration, back it up first:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;cd&lt;/span&gt; &lt;span class="pl-k"&gt;~&lt;/span&gt;
mv .emacs.d .emacs.d.bak
mv .emacs .emacs.bak&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Don't forget to backup and &lt;em&gt;remove&lt;/em&gt; &lt;code&gt;~/.emacs&lt;/code&gt; file otherwise Spacemacs
&lt;strong&gt;WILL NOT&lt;/strong&gt; load since that file prevents Emacs from loading the proper
initialization file.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Clone the repository:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;git clone https://github.com/syl20bnr/spacemacs &lt;span class="pl-k"&gt;~&lt;/span&gt;/.emacs.d&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;master&lt;/code&gt; is the stable branch and it is &lt;em&gt;immutable&lt;/em&gt;, &lt;strong&gt;DO NOT&lt;/strong&gt; make any
modification to it or you will break the update mechanism. If you want to
fork Spacemacs safely use the &lt;code&gt;develop&lt;/code&gt; branch where you handle the update
manually.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(Optional) Install the &lt;a href="https://github.com/adobe-fonts/source-code-pro"&gt;Source Code Pro&lt;/a&gt; font.&lt;/p&gt;
&lt;p&gt;If you are running in terminal you'll also need to change font settings of
your terminal.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Launch Emacs. Spacemacs will automatically install the packages it requires.
If you get an error regarding package downloads then you may try to disable
the HTTPS protocol by starting Emacs with&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;emacs --insecure&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or you can set the &lt;code&gt;dotspacemacs-elpa-https&lt;/code&gt; to &lt;code&gt;nil&lt;/code&gt; in your dotfile to
remove the need to start Emacs with &lt;code&gt;--insecure&lt;/code&gt; argument. You may wish to
clear out your &lt;code&gt;.emacs.d/elpa&lt;/code&gt; directory before doing this, so that any
corrupted packages you may have downloaded will be re-installed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Restart Emacs to complete the installation.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If the mode-line turns red then be sure to consult the &lt;a href="http://spacemacs.org/doc/FAQ" rel="nofollow"&gt;FAQ&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-alternate-installations" class="anchor" aria-hidden="true" href="#alternate-installations"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Alternate installations&lt;/h2&gt;
&lt;p&gt;It may be useful to clone Spacemacs outside Emacs dotdirectory &lt;code&gt;~/.emacs.d&lt;/code&gt; so
you can try Spacemacs without replacing completely our own configuration.
There is currently two possibilities to support alternative location for
Spacemacs configuration.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-modify-home-environment-variable" class="anchor" aria-hidden="true" href="#modify-home-environment-variable"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Modify HOME environment variable&lt;/h3&gt;
&lt;p&gt;This solution is ideal to quickly try Spacemacs without compromising your
existing configuration.&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;mkdir &lt;span class="pl-k"&gt;~&lt;/span&gt;/spacemacs
git clone https://github.com/syl20bnr/spacemacs.git &lt;span class="pl-k"&gt;~&lt;/span&gt;/spacemacs/.emacs.d
HOME=&lt;span class="pl-k"&gt;~&lt;/span&gt;/spacemacs emacs&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note: If you're on Fish shell, you will need to modify the last command to: &lt;code&gt;env HOME=$HOME/spacemacs emacs&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-modify-spacemacs-start-directory-variable" class="anchor" aria-hidden="true" href="#modify-spacemacs-start-directory-variable"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Modify spacemacs-start-directory variable&lt;/h3&gt;
&lt;p&gt;This solution is better suited to "embed" Spacemacs into your own configuration.
Say you cloned Spacemacs in &lt;code&gt;~/.emacs.d/spacemacs/&lt;/code&gt; then drop these lines in
&lt;code&gt;~/.emacs.d/init.el&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;setq&lt;/span&gt; spacemacs-start-directory &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;~/.emacs.d/spacemacs/&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;load-file&lt;/span&gt; (&lt;span class="pl-c1"&gt;concat&lt;/span&gt; spacemacs-start-directory &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;init.el&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-spacemacs-logo" class="anchor" aria-hidden="true" href="#spacemacs-logo"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Spacemacs logo&lt;/h2&gt;
&lt;p&gt;For Ubuntu users, follow this guide to
&lt;a href="http://splendidabacus.com/posts/2015/03/spacemacs-unity-icon/" rel="nofollow"&gt;change the logo in Unity&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For Mac users, you need to &lt;a href="https://github.com/nashamri/spacemacs-logo"&gt;download the .icns version of the logo&lt;/a&gt;,
then &lt;a href="http://www.idownloadblog.com/2014/07/16/how-to-change-app-icon-mac/" rel="nofollow"&gt;change the logo on Dock&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-update" class="anchor" aria-hidden="true" href="#update"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Update&lt;/h1&gt;
&lt;p&gt;Spacemacs has a built-in notification of a new version when you are on the
&lt;code&gt;master&lt;/code&gt; branch. If you are on the &lt;code&gt;develop&lt;/code&gt; branch then you'll have to
update Spacemacs manually by updating your repository.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-automatic-update-on-master-branch" class="anchor" aria-hidden="true" href="#automatic-update-on-master-branch"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Automatic update (on master branch)&lt;/h2&gt;
&lt;p&gt;When a new version is available a little arrow appears in the mode-line.&lt;/p&gt;
&lt;p&gt;Its color depends on the number of versions available since your last update.
Green means that your current version is recent, orange and red mean that your
current version is older.&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="doc/img/powerline-update.png"&gt;&lt;img src="doc/img/powerline-update.png" alt="powerline_update" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Click on the arrow to update Spacemacs to the last version.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-manual-update-on-master-branch" class="anchor" aria-hidden="true" href="#manual-update-on-master-branch"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Manual update (on master branch)&lt;/h2&gt;
&lt;p&gt;(Remove the angle brackets when typing the lines below into your shell.)&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;git fetch
git reset --hard &lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt;tag version which you are updating to&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-on-develop-branch" class="anchor" aria-hidden="true" href="#on-develop-branch"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;On develop branch&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Update Emacs packages by clicking (press &lt;code&gt;RET&lt;/code&gt;) on the &lt;code&gt;[Update Packages]&lt;/code&gt; link of
the starting page.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Close Emacs and update the git repository:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;git pull --rebase&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Restart Emacs to complete the upgrade.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;&lt;a id="user-content-revert-to-a-specific-version" class="anchor" aria-hidden="true" href="#revert-to-a-specific-version"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Revert to a specific version&lt;/h2&gt;
&lt;p&gt;To revert to a specific version you just have to checkout the corresponding
branch, for instance to revert to the last &lt;code&gt;0.103&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;git checkout origin/release-0.103&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;After you update, either manually, or automatically, you are advised to update
your packages by clicking the &lt;code&gt;[Update Packages]&lt;/code&gt; button on the Spacemacs Home
Buffer.&lt;/strong&gt;&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-quotes" class="anchor" aria-hidden="true" href="#quotes"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Quotes&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://gitter.im/syl20bnr/spacemacs?at=568e627a0cdaaa62045a7df6" rel="nofollow"&gt;Quote&lt;/a&gt; by &lt;a href="https://github.com/ashnur"&gt;ashnur&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;«I feel that spacemacs is an aircraft carrier and I am playing table tennis on the deck as a freerider.»
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href="https://gitter.im/syl20bnr/spacemacs?at=5768456c6577f032450cfedb" rel="nofollow"&gt;Quote&lt;/a&gt; by &lt;a href="https://github.com/deuill"&gt;deuill&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;«I LOVE SPACEMACS AND MAGIT

 That is all»
&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;&lt;a id="user-content-contributions" class="anchor" aria-hidden="true" href="#contributions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contributions&lt;/h1&gt;
&lt;p&gt;Spacemacs is a community-driven project, it needs &lt;em&gt;you&lt;/em&gt; to keep it up to
date and propose great and useful configuration for all the things!&lt;/p&gt;
&lt;p&gt;Before contributing be sure to consult the
&lt;a href="CONTRIBUTING.org"&gt;contribution guidelines&lt;/a&gt; and &lt;a href="http://spacemacs.org/doc/CONVENTIONS" rel="nofollow"&gt;conventions&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-communities" class="anchor" aria-hidden="true" href="#communities"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Communities&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://gitter.im/syl20bnr/spacemacs" rel="nofollow"&gt;Gitter Chat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://emacs.stackexchange.com/questions/tagged/spacemacs" rel="nofollow"&gt;Stack Exchange&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/spacemacs" rel="nofollow"&gt;Reddit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;a id="user-content-license" class="anchor" aria-hidden="true" href="#license"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;License&lt;/h1&gt;
&lt;p&gt;The license is GPLv3 for all parts specific to Spacemacs, this includes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the initialization and core files&lt;/li&gt;
&lt;li&gt;all the layer files&lt;/li&gt;
&lt;li&gt;the documentation&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For the packages shipped in this repository you can refer to the files header.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/nashamri/spacemacs-logo"&gt;Spacemacs logo&lt;/a&gt; by &lt;a href="https://github.com/nashamri"&gt;Nasser Alshammari&lt;/a&gt; released under a &lt;a href="http://creativecommons.org/licenses/by-sa/4.0/" rel="nofollow"&gt;Creative Commons Attribution-ShareAlike 4.0 International License.&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-supporting-spacemacs" class="anchor" aria-hidden="true" href="#supporting-spacemacs"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Supporting Spacemacs&lt;/h1&gt;
&lt;p&gt;The best way to support Spacemacs is to contribute to it either by reporting
bugs, helping the community on the &lt;a href="https://gitter.im/syl20bnr/spacemacs" rel="nofollow"&gt;Gitter Chat&lt;/a&gt; or sending pull requests.&lt;/p&gt;
&lt;p&gt;You can show your love for the project by getting cool Spacemacs t-shirts, mugs
and more in the &lt;a href="https://shop.spreadshirt.com/spacemacs-shop" rel="nofollow"&gt;Spacemacs Shop&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you want to show your support financially you can contribute to &lt;a href="https://salt.bountysource.com/teams/spacemacs" rel="nofollow"&gt;Bountysource&lt;/a&gt; or buy a drink for the
maintainer by clicking on the &lt;a href="#top"&gt;Paypal badge&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you used spacemacs in a project and you want to show that fact, you can use
the spacemacs badge: &lt;a href="http://spacemacs.org" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/8f5ee1d9b7278ed2c63f1f89e9a583ec59b52b6b/68747470733a2f2f63646e2e7261776769742e636f6d2f73796c3230626e722f73706163656d6163732f343432643032353737396461326636326663383663323038323730333639373731346462363531342f6173736574732f73706163656d6163732d62616467652e737667" alt="Built with Spacemacs" data-canonical-src="https://cdn.rawgit.com/syl20bnr/spacemacs/442d025779da2f62fc86c2082703697714db6514/assets/spacemacs-badge.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;For Markdown:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[![Built with Spacemacs](https://cdn.rawgit.com/syl20bnr/spacemacs/442d025779da2f62fc86c2082703697714db6514/assets/spacemacs-badge.svg)](http://spacemacs.org)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For HTML:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;a href="http://spacemacs.org"&amp;gt;&amp;lt;img src="https://cdn.rawgit.com/syl20bnr/spacemacs/442d025779da2f62fc86c2082703697714db6514/assets/spacemacs-badge.svg" /&amp;gt;&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For Org-mode:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[[http://spacemacs.org][file:https://cdn.rawgit.com/syl20bnr/spacemacs/442d025779da2f62fc86c2082703697714db6514/assets/spacemacs-badge.svg]]
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thank you!&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>syl20bnr</author><guid isPermaLink="false">https://github.com/syl20bnr/spacemacs</guid><pubDate>Thu, 30 Jan 2020 00:03:00 GMT</pubDate></item><item><title>bbatsov/projectile #4 in Emacs Lisp, This week</title><link>https://github.com/bbatsov/projectile</link><description>&lt;p&gt;&lt;i&gt;Project Interaction Library for Emacs&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;p&gt;&lt;a href="http://www.gnu.org/licenses/gpl-3.0.txt" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/1ba3411d21f0105e0df26c7e29aa214578d377b5/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d47504c5f332d677265656e2e737667" alt="License GPL 3" data-canonical-src="https://img.shields.io/badge/license-GPL_3-green.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="http://melpa.org/#/projectile" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/0e90708b9c315c9786d078cbf46c05fc3133924f/687474703a2f2f6d656c70612e6f72672f7061636b616765732f70726f6a656374696c652d62616467652e737667" alt="MELPA" data-canonical-src="http://melpa.org/packages/projectile-badge.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="http://stable.melpa.org/#/projectile" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/828b1b4081f34ea857ec4119962e616e9a9d723b/687474703a2f2f737461626c652e6d656c70612e6f72672f7061636b616765732f70726f6a656374696c652d62616467652e737667" alt="MELPA Stable" data-canonical-src="http://stable.melpa.org/packages/projectile-badge.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://travis-ci.org/bbatsov/projectile" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/c8892d7c0feb3d33d66ea003f96e4b0ac52bf9f6/68747470733a2f2f7472617669732d63692e6f72672f62626174736f762f70726f6a656374696c652e706e673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/bbatsov/projectile.png?branch=master" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://www.patreon.com/bbatsov" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/451cb702b2e60e29c1a84aa24a17a1a8d313639e/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f70617472656f6e2d646f6e6174652d6f72616e67652e737667" alt="Patreon" data-canonical-src="https://img.shields.io/badge/patreon-donate-orange.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-synopsis" class="anchor" aria-hidden="true" href="#synopsis"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Synopsis&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Projectile&lt;/strong&gt; is a project interaction library for Emacs. Its goal is to
provide a nice set of features operating on a project level without
introducing external dependencies (when feasible). For instance -
finding project files has a portable implementation written in pure
Emacs Lisp without the use of GNU &lt;code&gt;find&lt;/code&gt; (but for performance sake an
indexing mechanism backed by external commands exists as well).&lt;/p&gt;
&lt;p&gt;Projectile tries to be practical - portability is great, but if some
external tools could speed up some task substantially and the tools
are available, Projectile will leverage them.&lt;/p&gt;
&lt;p&gt;This library provides easy project management and navigation. The
concept of a project is pretty basic - just a folder containing
special file. Currently &lt;code&gt;git&lt;/code&gt;, &lt;code&gt;mercurial&lt;/code&gt;, &lt;code&gt;darcs&lt;/code&gt; and &lt;code&gt;bazaar&lt;/code&gt; repos
are considered projects by default. So are &lt;code&gt;lein&lt;/code&gt;, &lt;code&gt;maven&lt;/code&gt;, &lt;code&gt;sbt&lt;/code&gt;,
&lt;code&gt;scons&lt;/code&gt;, &lt;code&gt;rebar&lt;/code&gt; and &lt;code&gt;bundler&lt;/code&gt; projects. If you want to mark a folder
manually as a project just create an empty &lt;code&gt;.projectile&lt;/code&gt; file in
it. Some of Projectile's features:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;jump to a file in project&lt;/li&gt;
&lt;li&gt;jump to files at point in project&lt;/li&gt;
&lt;li&gt;jump to a directory in project&lt;/li&gt;
&lt;li&gt;jump to a file in a directory&lt;/li&gt;
&lt;li&gt;jump to a project buffer&lt;/li&gt;
&lt;li&gt;jump to a test in project&lt;/li&gt;
&lt;li&gt;toggle between files with same names but different extensions (e.g. &lt;code&gt;.h&lt;/code&gt; &amp;lt;-&amp;gt; &lt;code&gt;.c/.cpp&lt;/code&gt;, &lt;code&gt;Gemfile&lt;/code&gt; &amp;lt;-&amp;gt; &lt;code&gt;Gemfile.lock&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;toggle between code and its test (e.g. &lt;code&gt;main.service.js&lt;/code&gt; &amp;lt;-&amp;gt; &lt;code&gt;main.service.spec.js&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;jump to recently visited files in the project&lt;/li&gt;
&lt;li&gt;switch between projects you have worked on&lt;/li&gt;
&lt;li&gt;kill all project buffers&lt;/li&gt;
&lt;li&gt;replace in project&lt;/li&gt;
&lt;li&gt;multi-occur in project buffers&lt;/li&gt;
&lt;li&gt;grep in project&lt;/li&gt;
&lt;li&gt;regenerate project etags or gtags (requires &lt;a href="https://github.com/leoliu/ggtags"&gt;ggtags&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;visit project in dired&lt;/li&gt;
&lt;li&gt;run make in a project with a single key chord&lt;/li&gt;
&lt;li&gt;check for dirty repositories&lt;/li&gt;
&lt;li&gt;toggle read-only mode for the entire project&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here's a glimpse of Projectile in action:&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="doc/screenshots/projectile.png"&gt;&lt;img src="doc/screenshots/projectile.png" alt="Projectile Screenshot" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can support my work on Projectile via
&lt;a href="https://www.paypal.me/bbatsov" rel="nofollow"&gt;PayPal&lt;/a&gt;,
&lt;a href="https://www.patreon.com/bbatsov" rel="nofollow"&gt;Patreon&lt;/a&gt; and
&lt;a href="https://salt.bountysource.com/teams/projectile" rel="nofollow"&gt;Salt&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-quickstart" class="anchor" aria-hidden="true" href="#quickstart"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Quickstart&lt;/h2&gt;
&lt;p&gt;The instructions that follow are meant to get you from zero to a running Projectile setup
in a minute.  See the
&lt;a href="https://docs.projectile.mx" rel="nofollow"&gt;official manual&lt;/a&gt; for (way) more
details.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installation&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;package.el&lt;/code&gt; is the built-in package manager in Emacs.&lt;/p&gt;
&lt;p&gt;Projectile is available on the two major &lt;code&gt;package.el&lt;/code&gt; community
maintained repos -
&lt;a href="http://stable.melpa.org" rel="nofollow"&gt;MELPA Stable&lt;/a&gt;
and &lt;a href="http://melpa.org" rel="nofollow"&gt;MELPA&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can install Projectile with the following command:&lt;/p&gt;
&lt;p&gt;&lt;kbd&gt;M-x&lt;/kbd&gt; &lt;code&gt;package-install&lt;/code&gt; &lt;kbd&gt;[RET]&lt;/kbd&gt; &lt;code&gt;projectile&lt;/code&gt; &lt;kbd&gt;[RET]&lt;/kbd&gt;&lt;/p&gt;
&lt;p&gt;Alternatively, users of Debian 9 or later or Ubuntu 16.04 or later may
simply &lt;code&gt;apt-get install elpa-projectile&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Finally add this to your Emacs config:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(projectile-mode &lt;span class="pl-c1"&gt;+1&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;define-key&lt;/span&gt; projectile-mode-map (&lt;span class="pl-c1"&gt;kbd&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;s-p&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;'projectile-command-map&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;define-key&lt;/span&gt; projectile-mode-map (&lt;span class="pl-c1"&gt;kbd&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-c p&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;'projectile-command-map&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Those keymap prefixes are just a suggestion. Feel free to put there whatever works best for you.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-basic-usage" class="anchor" aria-hidden="true" href="#basic-usage"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Basic Usage&lt;/h3&gt;
&lt;p&gt;Enable &lt;code&gt;projectile-mode&lt;/code&gt;, open a file in one of your projects and type a command such as &lt;kbd&gt;C-c p f&lt;/kbd&gt;.&lt;/p&gt;
&lt;p&gt;See the user manual for more details.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-caveats" class="anchor" aria-hidden="true" href="#caveats"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Caveats&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Some operations like search (grep) depend (presently) on external
utilities such as &lt;code&gt;find&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-known-issues" class="anchor" aria-hidden="true" href="#known-issues"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Known issues&lt;/h2&gt;
&lt;p&gt;Check out the project's
&lt;a href="https://github.com/bbatsov/projectile/issues?sort=created&amp;amp;direction=desc&amp;amp;state=open"&gt;issue list&lt;/a&gt;
a list of unresolved issues. By the way - feel free to fix any of them
and sent me a pull request. :-)&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-contributors" class="anchor" aria-hidden="true" href="#contributors"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contributors&lt;/h2&gt;
&lt;p&gt;Here's a &lt;a href="https://github.com/bbatsov/projectile/contributors"&gt;list&lt;/a&gt; of all the people who have contributed to the
development of Projectile.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-changelog" class="anchor" aria-hidden="true" href="#changelog"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Changelog&lt;/h2&gt;
&lt;p&gt;A fairly extensive changelog is available &lt;a href="CHANGELOG.md"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-license" class="anchor" aria-hidden="true" href="#license"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;License&lt;/h2&gt;
&lt;p&gt;Copyright © 2011-2020 Bozhidar Batsov and
&lt;a href="https://github.com/bbatsov/projectile/contributors"&gt;contributors&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Distributed under the GNU General Public License, version 3&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>bbatsov</author><guid isPermaLink="false">https://github.com/bbatsov/projectile</guid><pubDate>Thu, 30 Jan 2020 00:04:00 GMT</pubDate></item><item><title>a-schaefers/systemE #5 in Emacs Lisp, This week</title><link>https://github.com/a-schaefers/systemE</link><description>&lt;p&gt;&lt;i&gt;🤣 A lightweight systemd replacement written in Emacs lisp 🤣&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="emacs.png"&gt;&lt;img src="emacs.png" alt="Logo" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-systeme" class="anchor" aria-hidden="true" href="#systeme"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;systemE&lt;/h1&gt;
&lt;p&gt;A lightweight systemd replacement written in Emacs lisp&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-what-people-are-saying" class="anchor" aria-hidden="true" href="#what-people-are-saying"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;What people are saying&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;"Kind of taking that whole "Emacs is an operating system" thing a bit too far, aren't we?"&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;"At last we have solved the init controversy."&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;"Well I guess while you're writing this you aren't creating atomic robots to take over the earth."&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;To quote Strong Bad, this is impressive, disturbing, and makes me uncomfortable!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;So close to GNU/Emacs/Linux&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;I think this is really cool, but calling it a "systemd replacement" feels like click bait to me.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;It's called a joke, guys.
The README is literally full of them.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;systemd and its ecosystem isn't built inside of Emacs.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;That's because systemd is a mild editor lacking a decent lisp os&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h2&gt;&lt;a id="user-content-about" class="anchor" aria-hidden="true" href="#about"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;About&lt;/h2&gt;
&lt;p&gt;Using the tooling in this repo, I am able to boot from linux to sinit as PID1, and from there to Emacs acting as PID2 using --script mode, performing all typical rc.boot system initialization using Emacs lisp until we hit the getty.&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="screenshot.jpg"&gt;&lt;img src="screenshot.jpg" alt="Logo" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-status" class="anchor" aria-hidden="true" href="#status"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Status&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The rc.boot.el and rc.shutdown.el scripts are finished and I use them on my local machine. No support for fancy stuff like luks is planned.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We still depend on &lt;a href="https://core.suckless.org/sinit/" rel="nofollow"&gt;suckless "sinit"&lt;/a&gt; for PID1 (Emacs is PID2) and this needs to be rewritten in in a lisp. While &lt;strong&gt;it is easy to execute Emacs as PID 1&lt;/strong&gt;, &lt;a href="http://www.informatimago.com/linux/emacs-on-user-mode-linux.html" rel="nofollow"&gt;as evidenced here&lt;/a&gt;, Emacs does not reap zombies and I do not know how to make it reap them yet. I have found Emacs listens for the URS1 and URS2 signals, but not SIGCHLD which is what we need. We also need to figure out how to call wait () after that.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We still depend on busybox runit for a process supervisor and this needs to be reimplemented in elisp, or atleast converted to gnu shepherd. An Elisp service supervisor that could be communicated to using emacsclient as root would be really fun.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;One pain point is getting a statically compiled Emacs. We don't require this, but it sure would be nice. Unfortunately, when I statically compile Emacs using musl, it results in a broken Emacs.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-this-repo-is-technically-a-kiss-linux-overlay" class="anchor" aria-hidden="true" href="#this-repo-is-technically-a-kiss-linux-overlay"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;This repo is technically a &lt;a href="https://getkiss.org" rel="nofollow"&gt;kiss linux&lt;/a&gt; overlay&lt;/h2&gt;
&lt;p&gt;I recommend Kiss linux.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-the-ever-growing-list-of-helpful--credits--thank-yous" class="anchor" aria-hidden="true" href="#the-ever-growing-list-of-helpful--credits--thank-yous"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;The ever-growing list of Helpful / Credits / Thank You's&lt;/h3&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; https://github.com/kisslinux/init/blob/master/lib/init/rc.boot&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; https://github.com/kisslinux/init/blob/master/lib/init/rc.shutdown&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; https://gist.github.com/lunaryorn/91a7734a8c1d93a8d1b0d3f85fe18b1e&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; https://busybox.net/FAQ.html#job_control&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; https://stackoverflow.com/questions/23299314/finding-the-exit-code-of-a-shell-command-in-elisp&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; https://github.com/Sweets/hummingbird&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; https://felipec.wordpress.com/2013/11/04/init&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; https://www.emacswiki.org/emacs/PersistentProcesses&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; https://stackoverflow.com/questions/17479529/self-contained-portable-emacs&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>a-schaefers</author><guid isPermaLink="false">https://github.com/a-schaefers/systemE</guid><pubDate>Thu, 30 Jan 2020 00:05:00 GMT</pubDate></item><item><title>magit/magit #6 in Emacs Lisp, This week</title><link>https://github.com/magit/magit</link><description>&lt;p&gt;&lt;i&gt;It's Magit! A Git porcelain inside Emacs.&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;div align="center"&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/bddaa4a80ffc50dc7a2900ca62a97039a66a35fc/68747470733a2f2f6d616769742e76632f6173736574732f6d616769742d3136387832303070782e706e67"&gt;&lt;img src="https://camo.githubusercontent.com/bddaa4a80ffc50dc7a2900ca62a97039a66a35fc/68747470733a2f2f6d616769742e76632f6173736574732f6d616769742d3136387832303070782e706e67" data-canonical-src="https://magit.vc/assets/magit-168x200px.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/div&gt;
&lt;h2 align="center"&gt;&lt;a id="user-content-a-git-porcelain-inside-emacs" class="anchor" aria-hidden="true" href="#a-git-porcelain-inside-emacs"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;A Git Porcelain inside Emacs&lt;/h2&gt;
&lt;p align="center"&gt;
  &lt;a href="https://magit.vc" rel="nofollow"&gt;&lt;b&gt;homepage&lt;/b&gt;&lt;/a&gt; |
  &lt;a href="https://magit.vc/manual" rel="nofollow"&gt;&lt;b&gt;manual&lt;/b&gt;&lt;/a&gt; |
  &lt;a href="https://magit.vc/manual/magit/FAQ.html" rel="nofollow"&gt;&lt;b&gt;faq&lt;/b&gt;&lt;/a&gt; |
  &lt;a href="https://github.com/magit/magit/wiki"&gt;&lt;b&gt;wiki&lt;/b&gt;&lt;/a&gt; |
  &lt;a href="https://groups.google.com/forum/?fromgroups#!forum/magit" rel="nofollow"&gt;&lt;b&gt;mailing list&lt;/b&gt;&lt;/a&gt; |
  &lt;a href="https://emacs.stackexchange.com/questions/tagged/magit" rel="nofollow"&gt;&lt;b&gt;forum&lt;/b&gt;&lt;/a&gt; |
  &lt;a href="https://twitter.com/magit_emacs" rel="nofollow"&gt;&lt;b&gt;news&lt;/b&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;hr&gt;
&lt;p align="justify"&gt;
  Magit is an interface to the version control system
  &lt;a href="https://git-scm.com" rel="nofollow"&gt;Git&lt;/a&gt;, implemented as an
  &lt;a href="https://www.gnu.org/software/emacs" rel="nofollow"&gt;Emacs&lt;/a&gt; package.
  Magit aspires to be a complete Git porcelain.  While we cannot
  (yet) claim that Magit wraps and improves upon each and every Git
  command, it is complete enough to allow even experienced Git users
  to perform almost all of their daily version control tasks directly
  from within Emacs.  While many fine Git clients exist, only Magit
  and Git itself deserve to be called porcelains.
&lt;/p&gt;
&lt;hr&gt;
&lt;div align="center"&gt;
  Keeping its users &lt;a href="https://magit.vc/quotes" rel="nofollow"&gt;this excited&lt;/a&gt; is
  &lt;a href="https://magit.vc/stats/authors.html#cumulated_added_lines_of_code_per_author" rel="nofollow"&gt;
    a lot of work
  &lt;/a&gt;.
  If Magit makes you &lt;br&gt; more productive too,
  then &lt;b&gt;please consider making a donation&lt;/b&gt;.
&lt;/div&gt;
&lt;div align="center"&gt;
  &lt;em&gt;Thank you! — Jonas Bernoulli&lt;/em&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;div align="center"&gt;
  &lt;a href="https://github.com/sponsors/tarsius"&gt;
    &lt;img title="Donate using Github Sponsors" alt="Donate using Github Sponsors" src="https://camo.githubusercontent.com/149a9a6ef2aacd3393c62471339a4fefd9798b30/68747470733a2f2f6d616769742e76632f6173736574732f6769746875622d73706f6e736f72732d353070782e706e67" data-canonical-src="https://magit.vc/assets/github-sponsors-50px.png" style="max-width:100%;"&gt;&lt;/a&gt;
    
  &lt;a href="https://magit.vc/donate/#iban" rel="nofollow"&gt;
     &lt;img title="Donate using IBAN" alt="Donate using IBAN" src="https://camo.githubusercontent.com/b92dd41b2b92a121bc8dc3f72c8120927bd5da8b/68747470733a2f2f6d616769742e76632f6173736574732f6962616e2d353070782e706e67" data-canonical-src="https://magit.vc/assets/iban-50px.png" style="max-width:100%;"&gt;&lt;/a&gt;
    
  &lt;a href="https://magit.vc/donate/#zelle" rel="nofollow"&gt;
     &lt;img title="Donate using Zelle (USA bank transfer)" alt="Donate using Zelle (USA bank transfer)" src="https://camo.githubusercontent.com/c99ee781d095dc1864b0d24e908d98342f1a22dc/68747470733a2f2f6d616769742e76632f6173736574732f7a656c6c652d353070782e706e67" data-canonical-src="https://magit.vc/assets/zelle-50px.png" style="max-width:100%;"&gt;&lt;/a&gt;
    
  &lt;a href="https://www.paypal.me/JonasBernoulli/20" rel="nofollow"&gt;
    &lt;img title="Donate using PayPal" alt="Donate using PayPal" src="https://camo.githubusercontent.com/8d272c225e13cd2be472b15c4819fdbb2759d705/68747470733a2f2f6d616769742e76632f6173736574732f70617970616c2e706e67" data-canonical-src="https://magit.vc/assets/paypal.png" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;div align="center"&gt;
  Some alternative donation methods are &lt;a href="https://magit.vc/donate" rel="nofollow"&gt;available&lt;/a&gt;.
&lt;/div&gt;
&lt;hr&gt;
&lt;h1&gt;&lt;a id="user-content-getting-started" class="anchor" aria-hidden="true" href="#getting-started"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Getting Started&lt;/h1&gt;
&lt;p&gt;If you are new to Magit, then either one of the following two
articles should help understanding how it differs from other Git
clients.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://emacsair.me/2017/09/01/magit-walk-through" rel="nofollow"&gt;Visual Magit walk-through&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you are completely new to Magit, then this article is a good
visual introduction.&lt;/p&gt;
&lt;p&gt;Almost everything that you see in Magit can be acted on by pressing
some key, but that's not obvious from just seeing how Magit looks.
The screenshots and accompanying text of this article explain how to
perform a variety of actions on Magit's output.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://emacsair.me/2017/09/01/the-magical-git-interface" rel="nofollow"&gt;Magit, the magical Git interface&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Magit differs significantly from other Git interfaces, and its
advantages are not immediately obvious simply from looking at a few
screenshots as presented in the preceding article.&lt;/p&gt;
&lt;p&gt;This article discusses Magit's properties in somewhat more abstract
terms.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;a id="user-content-support" class="anchor" aria-hidden="true" href="#support"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Support&lt;/h1&gt;
&lt;p&gt;When something doesn't work as expected then please first see the
&lt;a href="https://magit.vc/manual/magit/FAQ.html" rel="nofollow"&gt;FAQ&lt;/a&gt;.  Then also try the list of &lt;a href="https://github.com/magit/magit/issues"&gt;open issues&lt;/a&gt; and use
the search box at the top of that page to find older related issues.
You should also consult the &lt;a href="https://magit.vc/manual" rel="nofollow"&gt;manual&lt;/a&gt; and ask a general-purpose
search engine.&lt;/p&gt;
&lt;p&gt;If that doesn't answer your question, then ask for help on the
&lt;strong&gt;&lt;a href="https://emacs.stackexchange.com/questions/tagged/magit" rel="nofollow"&gt;Emacs Stackexchange site&lt;/a&gt;&lt;/strong&gt; or the &lt;a href="https://groups.google.com/forum/?fromgroups#!forum/magit" rel="nofollow"&gt;mailing list&lt;/a&gt;.
We only use the GitHub issue tracker for feature requests and bug
reports, so please don't ask for help there.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-contributing" class="anchor" aria-hidden="true" href="#contributing"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contributing&lt;/h1&gt;
&lt;p&gt;To report bugs and suggest new feature use the
&lt;a href="https://github.com/magit/magit/issues"&gt;issue tracker&lt;/a&gt;.  If you have some code which you would like
to be merged, then open a &lt;a href="https://github.com/magit/magit/pulls"&gt;pull request&lt;/a&gt;. Please also see
&lt;a href="https://github.com/magit/magit/blob/master/.github/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-acknowledgments" class="anchor" aria-hidden="true" href="#acknowledgments"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Acknowledgments&lt;/h1&gt;
&lt;p&gt;Magit was started by &lt;a href="https://github.com/mvollmer"&gt;Marius Vollmer&lt;/a&gt;, and is now maintained
by &lt;a href="https://emacsair.me" rel="nofollow"&gt;Jonas Bernoulli&lt;/a&gt;, &lt;a href="https://github.com/kyleam"&gt;Kyle Meyer&lt;/a&gt;, and
&lt;a href="https://github.com/npostavs"&gt;Noam Postavsky&lt;/a&gt;.  Other former maintainers are
&lt;a href="http://dudebout.com" rel="nofollow"&gt;Nicolas Dudebout&lt;/a&gt;, &lt;a href="https://github.com/pjweisberg"&gt;Peter J. Weisberg&lt;/a&gt;,
&lt;a href="https://github.com/philjackson"&gt;Phil Jackson&lt;/a&gt;, &lt;a href="https://github.com/vanicat"&gt;Rémi Vanicat&lt;/a&gt;, and &lt;a href="http://www.hodique.info" rel="nofollow"&gt;Yann Hodique&lt;/a&gt;.
Many more people have &lt;a href="https://magit.vc/stats/authors.html" rel="nofollow"&gt;contributed code&lt;/a&gt; and suggested
features.&lt;/p&gt;
&lt;p&gt;Over the years a lot of people supported development financially,
including the &lt;a href="https://github.com/magit/magit/blob/master/Documentation/BACKERS.md"&gt;1987 backers&lt;/a&gt; of the 2017 crowdfunding
campaign.&lt;/p&gt;
&lt;p&gt;Thanks to all of you, may (the history of) the source be with you!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href="https://xkcd.com/859" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/1e16245d2267cba3325db3c5bb1ffe2de83e6a4f/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2532382d2532302532302532302d7265642e737667" alt="Paren Xkcb" data-canonical-src="https://img.shields.io/badge/%28-%20%20%20-red.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="http://www.gnu.org/licenses/gpl-3.0.txt" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/2213171f5fa7ce05c74b04b8df2a686d83a89123/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d47504c5f76332d677265656e2e737667" alt="GPL v3" data-canonical-src="https://img.shields.io/badge/license-GPL_v3-green.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://travis-ci.org/magit/magit" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/2c8a7ed255c7e504d2bd01e19bddbc4a7eba78b7/68747470733a2f2f7472617669732d63692e6f72672f6d616769742f6d616769742e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/magit/magit.svg?branch=master" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://melpa.org/#/magit" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/d1d4664f50bb53a1eeeb9956d299a21769b6fa15/68747470733a2f2f6d656c70612e6f72672f7061636b616765732f6d616769742d62616467652e737667" alt="Melpa" data-canonical-src="https://melpa.org/packages/magit-badge.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://stable.melpa.org/#/magit" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/64a094b6d437b55511a0131fa53f02fe3b29f472/68747470733a2f2f737461626c652e6d656c70612e6f72672f7061636b616765732f6d616769742d62616467652e737667" alt="Melpa Stable" data-canonical-src="https://stable.melpa.org/packages/magit-badge.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://xkcd.com/1597" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/08fde55330a7da6aba5b5eb03ce0c2c12d8eebee/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f786b63642d6769742d6f72616e67652e737667" alt="Git Xkcd" data-canonical-src="https://img.shields.io/badge/xkcd-git-orange.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://magit.vc/manual/magit" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e925ce7917bcabfba088c0dc5e93d9423ecca6d3/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f656965726c6567656e64652d576f6c6c6d696c63687361752d677265656e2e737667" alt="Eierlegende Wollmilchsau" data-canonical-src="https://img.shields.io/badge/eierlegende-Wollmilchsau-green.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://magit.vc/stats/authors.html#commits_per_author" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/37bb8d3c39bf72ad9d89662433a9a41d5b95d6f7/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f73776973732d6d6164652d7265642e7376673f636f6c6f72413d45313141323726636f6c6f72423d353535353535" alt="Swiss Made" data-canonical-src="https://img.shields.io/badge/swiss-made-red.svg?colorA=E11A27&amp;amp;colorB=555555" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://en.wikipedia.org/wiki/Browser_wars" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/7ab3143e0944c3109cd717d7dd8e111507d89b15/68747470733a2f2f6d616769742e76632f6173736574732f6e657473636170652d323070782e706e67" alt="Netscape" data-canonical-src="https://magit.vc/assets/netscape-20px.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>magit</author><guid isPermaLink="false">https://github.com/magit/magit</guid><pubDate>Thu, 30 Jan 2020 00:06:00 GMT</pubDate></item><item><title>Alexander-Miller/treemacs #7 in Emacs Lisp, This week</title><link>https://github.com/Alexander-Miller/treemacs</link><description>&lt;p&gt;&lt;i&gt;[No description found.]&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="org" data-path="README.org"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;p&gt;&lt;a href="https://gitter.im/treemacs/community" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/5b239b2ea58d8857151d7136447bdddef78227ef/68747470733a2f2f6261646765732e6769747465722e696d2f416c6578616e6465722d4d696c6c65722f747265656d6163732e706e67" alt="https://badges.gitter.im/Alexander-Miller/treemacs.png" data-canonical-src="https://badges.gitter.im/Alexander-Miller/treemacs.png" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a href="https://melpa.org/#/treemacs" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/198299674034941bf401ad794c2209a81e46c8b2/68747470733a2f2f6d656c70612e6f72672f7061636b616765732f747265656d6163732d62616467652e737667" alt="https://melpa.org/packages/treemacs-badge.svg" data-canonical-src="https://melpa.org/packages/treemacs-badge.svg" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a href="https://stable.melpa.org/#/treemacs" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/4a2a3b41806c9ee6799e995dfe48dbbb9ce4e520/68747470733a2f2f737461626c652e6d656c70612e6f72672f7061636b616765732f747265656d6163732d62616467652e737667" alt="https://stable.melpa.org/packages/treemacs-badge.svg" data-canonical-src="https://stable.melpa.org/packages/treemacs-badge.svg" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a href="https://travis-ci.org/Alexander-Miller/treemacs" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/6c26724bd82f15a28e02df0c370e07436a3d8f16/68747470733a2f2f7472617669732d63692e6f72672f416c6578616e6465722d4d696c6c65722f747265656d6163732e7376673f6272616e63683d6d6173746572" alt="https://travis-ci.org/Alexander-Miller/treemacs.svg?branch=master" data-canonical-src="https://travis-ci.org/Alexander-Miller/treemacs.svg?branch=master" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a href="http://spacemacs.org" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/8f5ee1d9b7278ed2c63f1f89e9a583ec59b52b6b/68747470733a2f2f63646e2e7261776769742e636f6d2f73796c3230626e722f73706163656d6163732f343432643032353737396461326636326663383663323038323730333639373731346462363531342f6173736574732f73706163656d6163732d62616467652e737667" alt="https://cdn.rawgit.com/syl20bnr/spacemacs/442d025779da2f62fc86c2082703697714db6514/assets/spacemacs-badge.svg" data-canonical-src="https://cdn.rawgit.com/syl20bnr/spacemacs/442d025779da2f62fc86c2082703697714db6514/assets/spacemacs-badge.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-treemacs---a-tree-layout-file-explorer-for-emacs" class="anchor" aria-hidden="true" href="#treemacs---a-tree-layout-file-explorer-for-emacs"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Treemacs - a tree layout file explorer for Emacs&lt;/h1&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="screenshots/screenshot.png"&gt;&lt;img src="screenshots/screenshot.png" alt="screenshots/screenshot.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-content" class="anchor" aria-hidden="true" href="#content"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Content&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="#quick-feature-overview"&gt;Quick Feature Overview&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href="#fancy-gifs"&gt;Fancy Gifs!&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href="#quick-start"&gt;Quick Start&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="#detailed-feature-list"&gt;Detailed Feature List&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href="#projects-and-workspaces"&gt;Projects and Workspaces&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#conveniently-editing-your-projects-and-workspaces"&gt;Conveniently Editing Your Projects and Workspaces&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#navigation-without-projects-and-workspaces"&gt;Navigation without Projects and Workspaces&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#frame-locality"&gt;Frame Locality&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#mouse-interface"&gt;Mouse Interface&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#follow-mode"&gt;Follow-mode&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#tag-follow-mode"&gt;Tag-follow-mode&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#fringe-indicator-mode"&gt;Fringe-indicator-mode&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#git-mode"&gt;Git-mode&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#filewatch-mode"&gt;Filewatch-mode&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#session-persistence"&gt;Session Persistence&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#terminal-compatibility"&gt;Terminal Compatibility&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#tag-view"&gt;Tag View&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#current-directory-awareness"&gt;Current-Directory Awareness&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#tramp-support"&gt;Tramp Support&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#org-support"&gt;Org Support&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#theme-support"&gt;Theme Support&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#additional-packages"&gt;Additional Packages&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#treemacs-as-a-framework"&gt;Treemacs as a Framework&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href="#installation"&gt;Installation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="#configuration"&gt;Configuration&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href="#variables"&gt;Variables&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#faces"&gt;Faces&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#evil-compatibility"&gt;Evil compatibility&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#customizing-themes-and-icons"&gt;Customizing Themes and Icons&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href="#keymap"&gt;Keymap&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href="#unbound-functions"&gt;Unbound functions&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#default-keymaps"&gt;Default keymaps&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href="#compatibility"&gt;Compatibility&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="#faq"&gt;FAQ&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="#contributing"&gt;Contributing&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="#working-with-the-code-base"&gt;Working With The Code Base&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="#dependencies"&gt;Dependencies&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;a id="user-content-quick-feature-overview" class="anchor" aria-hidden="true" href="#quick-feature-overview"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Quick Feature Overview&lt;/h1&gt;
&lt;p&gt;Treemacs is a file and project explorer similar to NeoTree or vim’s NerdTree, but largely inspired by the Project
  Explorer in Eclipse. It shows the file system outlines of your projects in a simple tree layout allowing quick
  navigation and exploration, while also possessing &lt;b&gt;basic&lt;/b&gt; file management utilities. Specifically a quick feature
  overview looks as follows:&lt;/p&gt;
&lt;dl&gt;
  &lt;dt&gt;Project management&lt;/dt&gt;&lt;dd&gt;Treemacs lets you view multiple file trees - projects - at once and quickly add or remove them,
    and groups projects in workspaces.&lt;/dd&gt;
  &lt;dt&gt;Easy navigation&lt;/dt&gt;&lt;dd&gt;quickly move between projects or use shortcuts to jump to parent or neighbouring nodes.&lt;/dd&gt;
  &lt;dt&gt;Versatile file access&lt;/dt&gt;&lt;dd&gt;decide exactly how and where a file will be opened, including using &lt;code&gt;ace-window&lt;/code&gt; to choose
    a window or launching an external application.&lt;/dd&gt;
  &lt;dt&gt;Understanding of frames&lt;/dt&gt;&lt;dd&gt;every frame will receive its own treemacs buffer that will live and die with that frame.&lt;/dd&gt;
  &lt;dt&gt;Finding of files and tags&lt;/dt&gt;&lt;dd&gt;Treemacs can follow along and keep in focus the currently selected file or even the tag
    at point using, either manually or automatically using either &lt;code&gt;treemacs-follow-mode&lt;/code&gt; or &lt;code&gt;treemacs-tag-follow-mode&lt;/code&gt;.&lt;/dd&gt;
  &lt;dt&gt;Git Integration&lt;/dt&gt;&lt;dd&gt;Treemacs can use different faces for files and directories based on their git status.
    The git process is run asynchronously, minimizing its performance impact.&lt;/dd&gt;
  &lt;dt&gt;&lt;a href="https://github.com/deb0ch/emacs-winum"&gt;Winum&lt;/a&gt; &amp;amp; &lt;a href="https://github.com/abo-abo/ace-window"&gt;ace-window&lt;/a&gt; compatibility&lt;/dt&gt;&lt;dd&gt;The presence of treemacs will not interfere with winum’s and ace-window’s
    usual layouts.&lt;/dd&gt;
  &lt;dt&gt;&lt;a href="https://github.com/bbatsov/projectile"&gt;Projectile&lt;/a&gt; integration&lt;/dt&gt;&lt;dd&gt;the &lt;code&gt;treemacs-projectile&lt;/code&gt; package lets you quickly add your projectile projects to the
    treemacs workspace.&lt;/dd&gt;
  &lt;dt&gt;Simple mouse interface&lt;/dt&gt;&lt;dd&gt;Left clicks will work the same as you’re used to from with graphical applications&lt;/dd&gt;
  &lt;dt&gt;Session persistence&lt;/dt&gt;&lt;dd&gt;Treemacs automatically saves and restores your workspaces.&lt;/dd&gt;
  &lt;dt&gt;Dashing good looks&lt;/dt&gt;&lt;dd&gt;Treemacs uses (optionally resizable) png images in HD 22x22 resolution for its icons (quantity
    is, of course, another matter). When run in a terminal a simple fallback is used.&lt;/dd&gt;
  &lt;dt&gt;Tag view&lt;/dt&gt;&lt;dd&gt;Treemacs can display files’ tags. All file types that Emacs can generate a (semantic) imenu index for are
    supported.&lt;/dd&gt;
  &lt;dt&gt;Visual feedback&lt;/dt&gt;&lt;dd&gt;When it would otherwise be difficult to see the message in the minibuffer success/failure is
    indicated with pulse.el.&lt;/dd&gt;
  &lt;dt&gt;Theming support&lt;/dt&gt;&lt;dd&gt;Treemacs supports using multiple icon themes that can be changed at will.&lt;/dd&gt;
  &lt;dt&gt;Ease of use&lt;/dt&gt;&lt;dd&gt;Treemacs offers many configuration options, but comes with a set of (what hopefully should be) sane
    defaults. Installation aside there are two obligatory pieces of setup: 1) Choosing convenient keybindings to run
    treemacs and 2) If you use evil: requiring &lt;code&gt;treemacs-evil&lt;/code&gt; to integrate treemacs with evil and enable j/k navigation.
    More on both below. You can also summon a helpful hydra with &lt;code&gt;?&lt;/code&gt; that will remind you of treemacs’ many keybindings
    and features.&lt;/dd&gt;
  &lt;dt&gt;Bookmark integration&lt;/dt&gt;&lt;dd&gt;Running &lt;code&gt;bookmark-set&lt;/code&gt; on a Treemacs item will store a bookmark to Treemacs buffer for that item.&lt;/dd&gt;
&lt;/dl&gt;
&lt;h2&gt;&lt;a id="user-content-fancy-gifs" class="anchor" aria-hidden="true" href="#fancy-gifs"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Fancy Gifs!&lt;/h2&gt;
&lt;p&gt;Various ways to open files:
  &lt;a target="_blank" rel="noopener noreferrer" href="screenshots/open-files.gif"&gt;&lt;img src="screenshots/open-files.gif" alt="screenshots/open-files.gif" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Workspace administration with org-mode:
  &lt;a target="_blank" rel="noopener noreferrer" href="screenshots/workspace-edit.gif"&gt;&lt;img src="screenshots/workspace-edit.gif" alt="screenshots/workspace-edit.gif" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Automatic reaction to changes in the file system:
  &lt;a target="_blank" rel="noopener noreferrer" href="screenshots/filewatch.gif"&gt;&lt;img src="screenshots/filewatch.gif" alt="screenshots/filewatch.gif" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Automatic reaction to changes in git:
  &lt;a target="_blank" rel="noopener noreferrer" href="screenshots/git.gif"&gt;&lt;img src="screenshots/git.gif" alt="screenshots/git.gif" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Full-featured mouse interface:
  &lt;a target="_blank" rel="noopener noreferrer" href="screenshots/mouse-interface.gif"&gt;&lt;img src="screenshots/mouse-interface.gif" alt="screenshots/mouse-interface.gif" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Resizable icons:
  &lt;a target="_blank" rel="noopener noreferrer" href="screenshots/icon-resize.gif"&gt;&lt;img src="screenshots/icon-resize.gif" alt="screenshots/icon-resize.gif" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-quick-start" class="anchor" aria-hidden="true" href="#quick-start"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Quick Start&lt;/h1&gt;
&lt;p&gt;If you don’t care about reading the full readme here’s a list of some bare bones basics to get you started:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;First of all: press &lt;code&gt;?&lt;/code&gt; to summon the helpful hydra:
    &lt;a target="_blank" rel="noopener noreferrer" href="screenshots/hydra.png"&gt;&lt;img src="screenshots/hydra.png" alt="screenshots/hydra.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;If you use evil don’t forget to also install &lt;code&gt;treemacs-evil&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;If you use projectile you can install &lt;code&gt;treemacs-projectile&lt;/code&gt; to allow quickly add your projectile projects to
    treemacs.&lt;/li&gt;
  &lt;li&gt;Treemacs doesn’t bind any global keys, you need to use whatever fits you best. A full install setup can be found
    &lt;a href="#installation"&gt;below&lt;/a&gt;. Otherwise just add a keybind for &lt;code&gt;treemacs&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;For navigation use n/p (j/k when evil), M-n/M-p to move to same-height neighbour u to go to parent, and C-n/C-k to
    move between projects.&lt;/li&gt;
  &lt;li&gt;There’s half a dozen different ways to open nodes, all bound under o as prefix. Pick your favourite.&lt;/li&gt;
  &lt;li&gt;TAB and RET are particularly configurable. See &lt;code&gt;treemacs-TAB/RET-actions-config&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Projects administration is bound under the &lt;code&gt;C-c C-p&lt;/code&gt; prefix.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;a id="user-content-detailed-feature-list" class="anchor" aria-hidden="true" href="#detailed-feature-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Detailed Feature List&lt;/h1&gt;
&lt;h2&gt;&lt;a id="user-content-projects-and-workspaces" class="anchor" aria-hidden="true" href="#projects-and-workspaces"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Projects and Workspaces&lt;/h2&gt;
&lt;p&gt;If you’ve previously used a different explorer like NeoTree or NerdTree - or an earlier version of treemacs for that
  matter - you are probably used to a display system wherein you see exactly a single file tree whose exact root you can
  arbitrarily change. This system makes it difficult to work on and switch between multiple projects. Treemacs used to
  (and still does) remedy that limitation by making every treemacs buffer unique to its frame, but it has now been
  redesigned to be able to display multiple file trees - projects - at once.&lt;/p&gt;
&lt;p&gt;In treemacs a workspace is simply a (named) collection of projects, while a project mostly consists of 2 things: its
  location in the file system and its name. This is the info that you need to provide when you want to add a new project
  to your workspace. Just like projects you can add, remove, rename and switch between workspaces at any time.&lt;/p&gt;
&lt;p&gt;This design approach has various advantages and disadvantages. It is now no longer possible to “free roam” in the file
  system with treemacs, i.e. you can no longer arbitrarily switch the single file tree’s root to the directory at point or
  the current root’s parent. Another restriction is that the same part of the file system may not appear more than once as
  part of the workspace. For example it is not possible to have both /Documents and /Documents/ProjectX as projects in the
  same workspace, since internally treemacs heavily relies on every node having a unique natural key in its absolute path.
  Nonetheless the pros certainly outweigh the cons, as a multiroot setup allows to work on multiple projects with any
  combination concern/buffer separating frameworks, be it persp, eyebrowse, or projectile. It also opens the potential for
  concurrent display not only of the file system, but e.g. the currently open buffers.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-workspace-selection" class="anchor" aria-hidden="true" href="#workspace-selection"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Workspace Selection&lt;/h3&gt;
&lt;p&gt;On first load treemacs will select a workspace in the following manner:&lt;/p&gt;
&lt;p&gt;If the current buffer is editing a file then treemacs will try to find the first workspace with a project containing
  that file. If that fails treemacs will simply fall back on the &lt;i&gt;first&lt;/i&gt; element in the list of all workspace.&lt;/p&gt;
&lt;p&gt;The order of workspaces is the same that you see when calling &lt;code&gt;treemacs-edit-workspaces&lt;/code&gt; (see next chapter). You can set
  the fall backback workspace by calling &lt;code&gt;treemacs-set-fallback-workspace&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-conveniently-editing-your-projects-and-workspaces" class="anchor" aria-hidden="true" href="#conveniently-editing-your-projects-and-workspaces"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Conveniently Editing Your Projects and Workspaces&lt;/h2&gt;
&lt;p&gt;There are two ways to edit your projects and workspaces: call up single add/remove/rename/switch commands under either
  the &lt;code&gt;C-c C-p&lt;/code&gt; or &lt;code&gt;C-c C-w&lt;/code&gt; prefix, or call &lt;code&gt;treemacs-edit-workspaces&lt;/code&gt; and edit your entire layout in the form of a
  single org-mode buffer.&lt;/p&gt;
&lt;p&gt;The used org-format is quite simple: level 1 headlines are names of workspaces, level 2 headlines are names of projects
  in a workspace, and every project’s path is given as a description list, starting with a &lt;code&gt;-&lt;/code&gt; (and an optional leading
  space). Empty lines and lines starting with &lt;code&gt;#&lt;/code&gt; are ignored, and everything else leads to an error.&lt;/p&gt;
&lt;p&gt;You needn’t worry about making mistakes either. If there’s something wrong when you call &lt;code&gt;treemacs-finish-edit&lt;/code&gt; then
  treemacs will point you at the incorrect line and tell you what’s missing:&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="screenshots/workspace-edit.png"&gt;&lt;img src="screenshots/workspace-edit.png" alt="screenshots/workspace-edit.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;(Note that the list with the path property allows an indentation of 0 or 1 spaces only. The much greater visible
  indentation is caused by &lt;code&gt;org-indent-mode&lt;/code&gt;)&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-navigation-without-projects-and-workspaces" class="anchor" aria-hidden="true" href="#navigation-without-projects-and-workspaces"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Navigation without Projects and Workspaces&lt;/h2&gt;
&lt;p&gt;If a strict workspace and project structure, as described above, is too stringent for your use-case you can, under
  certain circumstances, use treemacs to freely navigate through your your file system, similar to dired: When your
  workspace contains &lt;i&gt;exactly&lt;/i&gt; a single project you can use &lt;code&gt;h&lt;/code&gt; and &lt;code&gt;l&lt;/code&gt; (or &lt;code&gt;treemacs-root-up&lt;/code&gt; and &lt;code&gt;treemacs-root-down&lt;/code&gt;) to
  arbitrarily change the single project’s root. &lt;code&gt;h&lt;/code&gt; will navigate one level upward in the file system, &lt;code&gt;l&lt;/code&gt; will move into
  the directory at point.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-frame-locality" class="anchor" aria-hidden="true" href="#frame-locality"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Frame Locality&lt;/h2&gt;
&lt;p&gt;Treemacs buffers have a limited scope they are visible in: the frames they are created in. A treemacs buffer, once
  created, lives alongside and inside its frame, and is also destroyed with that frame. Calling &lt;code&gt;treemacs&lt;/code&gt; while inside a
  new frame will create a new buffer for it, regardless how many other treemacs buffers already exist. While there can be
  multiple unique treemacs buffer they will all still show the same workspace and the same projects.&lt;/p&gt;
&lt;p&gt;A treemacs buffer that does not belong to a frame may still be made visible by manually selecting in the buffer list.
  This would break various assumptions in treemacs’ code base and effectively falls under undefined behaviour - a bad idea
  all around.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-mouse-interface" class="anchor" aria-hidden="true" href="#mouse-interface"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Mouse Interface&lt;/h2&gt;
&lt;p&gt;Treemacs handles left clicks in much the same way as modern graphical applications do: a single click sets the focus, a
  double click expands or collapses a directory or tag section node and visits a file/moves to a tag for a file/tag node.&lt;/p&gt;
&lt;p&gt;Additionally tag sections can be expanded or collapsed by a single click on the file/tag section icon.&lt;/p&gt;
&lt;p&gt;If you prefer to expand/collpase nodes with a single mouse click you can also use &lt;code&gt;treemacs-single-click-expand-action&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;define-key&lt;/span&gt; treemacs-mode-map [mouse-1] &lt;span class="pl-c1"&gt;#&lt;span class="pl-c1"&gt;'treemacs-single-click-expand-action&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A right click popup-menu is also available:&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="screenshots/right-click.png"&gt;&lt;img src="screenshots/right-click.png" alt="screenshots/right-click.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can also open a file in a specific window by dragging using left click from treemacs to the required window.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-follow-mode" class="anchor" aria-hidden="true" href="#follow-mode"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Follow-mode&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;treemacs-follow-mode&lt;/code&gt; is a global minor mode which allows the treemacs view to always move its focus to the currently
  selected file. This mode runs on an idle timer - the exact duration of inactivity (in seconds) before a move is called
  is determined by &lt;code&gt;treemacs-tag-follow-delay&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-tag-follow-mode" class="anchor" aria-hidden="true" href="#tag-follow-mode"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tag-follow-mode&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;treemacs-tag-follow-mode&lt;/code&gt; is a global minor mode which extends and effectively replaces &lt;code&gt;treemacs-follow-mode&lt;/code&gt;. When
  activated it follows not just the current file, but also the current tag. This works alongside treemacs’ integration
  with imenu, so all file types providing an imenu implementation are compatible.&lt;/p&gt;
&lt;p&gt;This mode, like follow-mode, runs on an idle timer - the exact duration of inactivity (in seconds) before a move is
  called is determined by &lt;code&gt;treemacs-tag-follow-delay&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Note that in order to move to a tag in treemacs the treemacs buffer’s window needs to be temporarily selected, which
  will reset &lt;code&gt;blink-cursor-mode&lt;/code&gt;’s timer if it is enabled. This will result in the cursor blinking seemingly pausing for a
  short time and giving the appearance of the tag follow action lasting much longer than it really does.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-fringe-indicator-mode" class="anchor" aria-hidden="true" href="#fringe-indicator-mode"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Fringe-indicator-mode&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;treemacs-fringe-indicator-mode&lt;/code&gt; is a global minor mode that displays a little icon in the fringe that moves with the cursor.
  It can make the selected line more visible if &lt;code&gt;hl-line-mode&lt;/code&gt; doesn’t stand out with your theme.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-git-mode" class="anchor" aria-hidden="true" href="#git-mode"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Git-mode&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;treemacs-git-mode&lt;/code&gt; is a global minor mode which enables treemacs to check for files’ and directories’ git status
  information and highlight them accordingly (see also the &lt;code&gt;treemacs-git-...&lt;/code&gt; faces). The mode is available in 3 variants:
  &lt;code&gt;simple&lt;/code&gt;, &lt;code&gt;extended&lt;/code&gt; and &lt;code&gt;deferred&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The simple variant starts a git status process and parses its output in elisp. The parsing is kept quick and simple,
    so some info is missed: this version includes git status information only for files, but not directories.&lt;/li&gt;
  &lt;li&gt;The extended variant highlights both files and directories. This greatly increases the complexity and length of the
    parsing process, and is therefore done in an asynchronous python process for the sake of performance. The extended
    variant requires python3 to work.&lt;/li&gt;
  &lt;li&gt;The deferred variant is the same as extended, except the tasks of rendering nodes and highlighting them are
    separated. The former happens immediately, the latter after &lt;code&gt;treemacs-deferred-git-apply-delay&lt;/code&gt; seconds of idle time.
    This may be faster (if not in truth then at least in appereance) as the git process is given a much greater amount of
    time to finish. The downside is that the effect of nodes changing their colors may be somewhat jarring, though this
    effect is largely mitigated due to the use of a caching layer.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When called interactively &lt;code&gt;treemacs-git-mode&lt;/code&gt; will ask for the variant to use. In lisp code an appropriate symbol can
  be directly passed to the minor mode function:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(treemacs-git-mode &lt;span class="pl-c1"&gt;'deferred&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;All versions use an asynchronous git process and are optimized to not do more work than necessary, so their performance
  cost should, for the most part, be the constant amount of time it takes to fork a subprocess. For repositories where
  this is not the case &lt;code&gt;treemacs-max-git-entries&lt;/code&gt; (default value 5000) will limit the number of git status entries
  treemacs will process before ignoring the rest.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-filewatch-mode" class="anchor" aria-hidden="true" href="#filewatch-mode"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Filewatch-mode&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;treemacs-filewatch-mode&lt;/code&gt; is a global minor mode which enables treemacs to watch the files it is displaying for changes
  and automatically refresh itself when it detects a change in the file system that it decides is relevant.&lt;/p&gt;
&lt;p&gt;A change event is relevant for treemacs if a new file has been created or deleted or a file has been changed and
  &lt;code&gt;treemacs-git-mode&lt;/code&gt; is enabled. Events caused by files that are ignored as per &lt;code&gt;treemacs-ignored-file-predicates&lt;/code&gt; are
  likewise counted as not relevant.&lt;/p&gt;
&lt;p&gt;The refresh is not called immediately after an event was received, treemacs instead waits &lt;code&gt;treemacs-file-event-delay&lt;/code&gt; ms
  to see if any more files have changed to avoid having to refresh multiple times over a short period of time. Treemacs
  will not refresh the entire view to make the detected changes visible, but will instead only make updates to the
  directories where the change(s) happened. Using this mode is therefore by far not as expensive as a full refresh on
  every change and save.&lt;/p&gt;
&lt;p&gt;The mode only applies to directories opened &lt;b&gt;after&lt;/b&gt; this mode has been activated. This means that to enable file
  watching in an already existing treemacs buffer it needs to be killed and rebuilt. Turning off this mode is, on the
  other hand, instantaneous - it will immediately turn off all existing file watch processes and outstanding refresh
  actions.&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Known limitations&lt;/span&gt;:
  Staging and committing changes does not produce any file change events of its own, if you use &lt;code&gt;treemacs-git-mode&lt;/code&gt; you
  still need to do a manual refresh to see your files’ faces go from ‘changed’ and ‘untracked’ to ‘unchanged’ after a
  commit.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-session-persistence" class="anchor" aria-hidden="true" href="#session-persistence"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Session Persistence&lt;/h2&gt;
&lt;p&gt;Treemacs’ sessions - your workspace and the projects it contains - are saved when Emacs shuts down and restored when
  treemacs is first loaded. This persistence process is fully automatic and independant, and should therefore be fully
  compatible with &lt;code&gt;desktop-save-mode&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The persisted state is saved under &lt;code&gt;user-emacs-directory/.cache/treemacs-persist&lt;/code&gt; by default. The exact file location
  is saved in the variable &lt;code&gt;treemacs-persist-file&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If something goes wrong when loading the file the erroneous state will be saved in &lt;code&gt;treemacs-last-error-persist-file&lt;/code&gt;
  for debugging.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-terminal-compatibility" class="anchor" aria-hidden="true" href="#terminal-compatibility"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Terminal Compatibility&lt;/h2&gt;
&lt;p&gt;When run in a terminal treemacs will fall back to a much simpler rendering system, foregoing its usual png icons and
  using simple &lt;code&gt;+&lt;/code&gt; and &lt;code&gt;-&lt;/code&gt; characters instead. The exact characters used are &lt;a href="#custom-icons"&gt;highly customizable&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-tag-view" class="anchor" aria-hidden="true" href="#tag-view"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tag View&lt;/h2&gt;
&lt;p&gt;Treemacs is able to display not only the file system, but also tags found in individual files. The tags list is sourced
  using emacs’ builtin imenu functionality, so all file types that emacs can generate an imenu index for are supported.&lt;/p&gt;
&lt;p&gt;Imenu caches its result, so to avoid stale tag lists setting &lt;code&gt;imenu-auto-rescan&lt;/code&gt; to t is recommended. Tags generated
  with the help of &lt;code&gt;semantic-mode&lt;/code&gt; are likewise supported.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-ggtags" class="anchor" aria-hidden="true" href="#ggtags"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;ggtags&lt;/h3&gt;
&lt;p&gt;Treemacs can show the tags produced by ggtags if you switch a buffer’s imenu index function to use ggtags:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;setq-local&lt;/span&gt; imenu-create-index-function &lt;span class="pl-c1"&gt;#&lt;span class="pl-c1"&gt;'ggtags-build-imenu-index&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-current-directory-awareness" class="anchor" aria-hidden="true" href="#current-directory-awareness"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Current-Directory Awareness&lt;/h2&gt;
&lt;p&gt;Treemacs always sets the &lt;code&gt;default-directory&lt;/code&gt; variable based on the (nearest) path at the current node, falling back to
  your home directory when there is no node or path at point. That means that various commands like &lt;code&gt;find-file&lt;/code&gt;,
  &lt;code&gt;magit-status&lt;/code&gt; or &lt;code&gt;helm-projectile-ag&lt;/code&gt; will correctly act based on the current directory or project context.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-tramp-support" class="anchor" aria-hidden="true" href="#tramp-support"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tramp Support&lt;/h2&gt;
&lt;p&gt;Treemacs supports projects on remote directories, e.g. &lt;code&gt;/scp:remote-server:path/to/directory&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;However tramp support has some restrictions: &lt;code&gt;treemacs-use-collapsed-directories&lt;/code&gt; has no effect on remote directories.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-org-support" class="anchor" aria-hidden="true" href="#org-support"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Org Support&lt;/h2&gt;
&lt;p&gt;Treemacs supports storing links to its file nodes by means of &lt;code&gt;org-store-link&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-theme-support" class="anchor" aria-hidden="true" href="#theme-support"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Theme Support&lt;/h2&gt;
&lt;p&gt;Using a different treemacs theme works the same way as using a different Emacs theme: just call &lt;code&gt;treemacs-load-theme&lt;/code&gt;,
  either programmatically or interactively. In the former case you need to supply the name of the theme as a string, like
  this:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(treemacs-load-theme &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Default&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Do keep in mind that by default treemacs’ theme support is all theory: the standard installation includes only the
  default theme; this feature is meant to easily allow &lt;b&gt;others&lt;/b&gt; to extend, create and distribute themes for treemacs.&lt;/p&gt;
&lt;p&gt;A detailed explanation on modifying themes and icons can be found in the &lt;a href="#customizing-themes-and-icons"&gt;Configuration&lt;/a&gt; section.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-additional-packages" class="anchor" aria-hidden="true" href="#additional-packages"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Additional Packages&lt;/h2&gt;
&lt;p&gt;Next to treemacs itself you can optionally install:&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-treemacs-evil" class="anchor" aria-hidden="true" href="#treemacs-evil"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;treemacs-evil&lt;/h3&gt;
&lt;p&gt;Must be installed and loaded if you use evil. The keybindings and the cursor will not be setup properly otherwise. It’ll
  also enable navigation with j/k instead of n/p.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-treemacs-projectile" class="anchor" aria-hidden="true" href="#treemacs-projectile"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;treemacs-projectile&lt;/h3&gt;
&lt;p&gt;Allows to quickly add your projectile projects to the treemacs workspace.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-treemacs-magit" class="anchor" aria-hidden="true" href="#treemacs-magit"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;treemacs-magit&lt;/h3&gt;
&lt;p&gt;A small utility package to fill the small gaps left by using filewatch-mode and git-mode in conjunction with magit: it
  will inform treemacs about (un)staging of files and commits happening in magit.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-treemacs-icons-dired" class="anchor" aria-hidden="true" href="#treemacs-icons-dired"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;treemacs-icons-dired&lt;/h3&gt;
&lt;p&gt;Allows you to use treemacs icons in dired buffers with &lt;code&gt;treemacs-icons-dired-mode&lt;/code&gt;:
  &lt;a target="_blank" rel="noopener noreferrer" href="screenshots/dired-icons.png"&gt;&lt;img src="screenshots/dired-icons.png" alt="screenshots/dired-icons.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-treemacs-persp" class="anchor" aria-hidden="true" href="#treemacs-persp"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;treemacs-persp&lt;/h3&gt;
&lt;p&gt;Integration with persp-mode that allows treemacs buffers to be unique inside the active perspective instead of the
  default frame-based buffer scope.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-treemacs-as-a-framework" class="anchor" aria-hidden="true" href="#treemacs-as-a-framework"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Treemacs as a Framework&lt;/h2&gt;
&lt;p&gt;Treemacs can be extended to display arbitrary nodes as well as be used as a general rendering backend for any tree-like
  structures. &lt;a href="Extensions.org"&gt;See here&lt;/a&gt; for an extended tutorial and demonstration.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installation&lt;/h1&gt;
&lt;p&gt;Treemacs is included in Spacemacs (for now only on the dev branch). If you are using the development version of
  Spacemacs you can simply add treemacs to &lt;code&gt;dotspacemacs-configuration-layers&lt;/code&gt; to replace the default NeoTree. Check &lt;code&gt;SPC
  h SPC treemacs&lt;/code&gt; for details. Otherwise you will need to add treemacs to &lt;code&gt;dotspacemacs-additional-packages&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Treemacs is also available on MELPA. If you just want to quickly start using it grab the &lt;code&gt;use-package&lt;/code&gt; example below,
  and customize it as needed (remove &lt;code&gt;treemacs-evil&lt;/code&gt; if you don’t use it, customize the keybindings to you taste, etc).&lt;/p&gt;
&lt;p&gt;Either way keep in mind that treemacs has &lt;i&gt;no default keybindings&lt;/i&gt; for its globally callable initialization functions. Each
  user is supposed to select keybindings for functions like &lt;code&gt;treemacs-find-file&lt;/code&gt; based on whatever they find convenient.&lt;/p&gt;
&lt;p&gt;You can find an exhaustive overview of all functions, their keybindings and functions you need to bind yourself &lt;a href="#keymap"&gt;below&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The following &lt;code&gt;use-package&lt;/code&gt; snippet includes a list of &lt;i&gt;all&lt;/i&gt; of treemacs’ configuration variables in their default
  setting. Setting them all yourself is not necessary, they are only listed here to encourage discoverability.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; treemacs
  &lt;span class="pl-c1"&gt;:ensure&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:defer&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:init&lt;/span&gt;
  (&lt;span class="pl-c1"&gt;with-eval-after-load&lt;/span&gt; &lt;span class="pl-c1"&gt;'winum&lt;/span&gt;
    (&lt;span class="pl-c1"&gt;define-key&lt;/span&gt; winum-keymap (&lt;span class="pl-c1"&gt;kbd&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;M-0&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;#&lt;span class="pl-c1"&gt;'treemacs-select-window&lt;/span&gt;&lt;/span&gt;))
  &lt;span class="pl-c1"&gt;:config&lt;/span&gt;
  (&lt;span class="pl-k"&gt;progn&lt;/span&gt;
    (&lt;span class="pl-k"&gt;setq&lt;/span&gt; treemacs-collapse-dirs                 (&lt;span class="pl-k"&gt;if&lt;/span&gt; treemacs-python-executable &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt;)
          treemacs-deferred-git-apply-delay      &lt;span class="pl-c1"&gt;0.5&lt;/span&gt;
          treemacs-directory-name-transformer    &lt;span class="pl-c1"&gt;#&lt;span class="pl-c1"&gt;'identity&lt;/span&gt;&lt;/span&gt;
          treemacs-display-in-side-window        &lt;span class="pl-c1"&gt;t&lt;/span&gt;
          treemacs-eldoc-display                 &lt;span class="pl-c1"&gt;t&lt;/span&gt;
          treemacs-file-event-delay              &lt;span class="pl-c1"&gt;5000&lt;/span&gt;
          treemacs-file-extension-regex          treemacs-last-period-regex-value
          treemacs-file-follow-delay             &lt;span class="pl-c1"&gt;0.2&lt;/span&gt;
          treemacs-file-name-transformer         &lt;span class="pl-c1"&gt;#&lt;span class="pl-c1"&gt;'identity&lt;/span&gt;&lt;/span&gt;
          treemacs-follow-after-init             &lt;span class="pl-c1"&gt;t&lt;/span&gt;
          treemacs-git-command-pipe              &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
          treemacs-goto-tag-strategy             &lt;span class="pl-c1"&gt;'refetch-index&lt;/span&gt;
          treemacs-indentation                   &lt;span class="pl-c1"&gt;2&lt;/span&gt;
          treemacs-indentation-string            &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt; &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
          treemacs-is-never-other-window         &lt;span class="pl-c1"&gt;nil&lt;/span&gt;
          treemacs-max-git-entries               &lt;span class="pl-c1"&gt;5000&lt;/span&gt;
          treemacs-missing-project-action        &lt;span class="pl-c1"&gt;'ask&lt;/span&gt;
          treemacs-no-png-images                 &lt;span class="pl-c1"&gt;nil&lt;/span&gt;
          treemacs-no-delete-other-windows       &lt;span class="pl-c1"&gt;t&lt;/span&gt;
          treemacs-project-follow-cleanup        &lt;span class="pl-c1"&gt;nil&lt;/span&gt;
          treemacs-persist-file                  (&lt;span class="pl-c1"&gt;expand-file-name&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;.cache/treemacs-persist&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; user-emacs-directory)
          treemacs-position                      &lt;span class="pl-c1"&gt;'left&lt;/span&gt;
          treemacs-recenter-distance             &lt;span class="pl-c1"&gt;0.1&lt;/span&gt;
          treemacs-recenter-after-file-follow    &lt;span class="pl-c1"&gt;nil&lt;/span&gt;
          treemacs-recenter-after-tag-follow     &lt;span class="pl-c1"&gt;nil&lt;/span&gt;
          treemacs-recenter-after-project-jump   &lt;span class="pl-c1"&gt;'always&lt;/span&gt;
          treemacs-recenter-after-project-expand &lt;span class="pl-c1"&gt;'on-distance&lt;/span&gt;
          treemacs-show-cursor                   &lt;span class="pl-c1"&gt;nil&lt;/span&gt;
          treemacs-show-hidden-files             &lt;span class="pl-c1"&gt;t&lt;/span&gt;
          treemacs-silent-filewatch              &lt;span class="pl-c1"&gt;nil&lt;/span&gt;
          treemacs-silent-refresh                &lt;span class="pl-c1"&gt;nil&lt;/span&gt;
          treemacs-sorting                       &lt;span class="pl-c1"&gt;'alphabetic-asc&lt;/span&gt;
          treemacs-space-between-root-nodes      &lt;span class="pl-c1"&gt;t&lt;/span&gt;
          treemacs-tag-follow-cleanup            &lt;span class="pl-c1"&gt;t&lt;/span&gt;
          treemacs-tag-follow-delay              &lt;span class="pl-c1"&gt;1.5&lt;/span&gt;
          treemacs-width                         &lt;span class="pl-c1"&gt;35&lt;/span&gt;)

    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; The default width and height of the icons is 22 pixels. If you are&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; using a Hi-DPI display, uncomment this to double the icon size.&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;;(treemacs-resize-icons 44)&lt;/span&gt;

    (treemacs-follow-mode &lt;span class="pl-c1"&gt;t&lt;/span&gt;)
    (treemacs-filewatch-mode &lt;span class="pl-c1"&gt;t&lt;/span&gt;)
    (treemacs-fringe-indicator-mode &lt;span class="pl-c1"&gt;t&lt;/span&gt;)
    (&lt;span class="pl-k"&gt;pcase&lt;/span&gt; (&lt;span class="pl-k"&gt;cons&lt;/span&gt; (&lt;span class="pl-k"&gt;not&lt;/span&gt; (&lt;span class="pl-k"&gt;null&lt;/span&gt; (&lt;span class="pl-c1"&gt;executable-find&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;git&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)))
                 (&lt;span class="pl-k"&gt;not&lt;/span&gt; (&lt;span class="pl-k"&gt;null&lt;/span&gt; treemacs-python-executable)))
      (`(&lt;span class="pl-c1"&gt;t&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;)
       (treemacs-git-mode &lt;span class="pl-c1"&gt;'deferred&lt;/span&gt;))
      (`(&lt;span class="pl-c1"&gt;t&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; _)
       (treemacs-git-mode &lt;span class="pl-c1"&gt;'simple&lt;/span&gt;))))
  &lt;span class="pl-c1"&gt;:bind&lt;/span&gt;
  (&lt;span class="pl-c1"&gt;:map&lt;/span&gt; global-map
        (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;M-0&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;       &lt;span class="pl-k"&gt;.&lt;/span&gt; treemacs-select-window)
        (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-x t 1&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;   &lt;span class="pl-k"&gt;.&lt;/span&gt; treemacs-delete-other-windows)
        (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-x t t&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;   &lt;span class="pl-k"&gt;.&lt;/span&gt; treemacs)
        (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-x t B&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;   &lt;span class="pl-k"&gt;.&lt;/span&gt; treemacs-bookmark)
        (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-x t C-t&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; treemacs-find-file)
        (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-x t M-t&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; treemacs-find-tag)))

(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; treemacs-evil
  &lt;span class="pl-c1"&gt;:after&lt;/span&gt; treemacs evil
  &lt;span class="pl-c1"&gt;:ensure&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;)

(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; treemacs-projectile
  &lt;span class="pl-c1"&gt;:after&lt;/span&gt; treemacs projectile
  &lt;span class="pl-c1"&gt;:ensure&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;)

(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; treemacs-icons-dired
  &lt;span class="pl-c1"&gt;:after&lt;/span&gt; treemacs dired
  &lt;span class="pl-c1"&gt;:ensure&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:config&lt;/span&gt; (treemacs-icons-dired-mode))

(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; treemacs-magit
  &lt;span class="pl-c1"&gt;:after&lt;/span&gt; treemacs magit
  &lt;span class="pl-c1"&gt;:ensure&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;)

(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; treemacs-persp
  &lt;span class="pl-c1"&gt;:after&lt;/span&gt; treemacs persp-mode
  &lt;span class="pl-c1"&gt;:ensure&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:config&lt;/span&gt; (treemacs-set-scope-type &lt;span class="pl-c1"&gt;'Perspectives&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;h1&gt;&lt;a id="user-content-configuration" class="anchor" aria-hidden="true" href="#configuration"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Configuration&lt;/h1&gt;
&lt;h2&gt;&lt;a id="user-content-variables" class="anchor" aria-hidden="true" href="#variables"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Variables&lt;/h2&gt;
&lt;p&gt;Treemacs offers the following configuration options (&lt;code&gt;describe-variable&lt;/code&gt; will usually offers more details):&lt;/p&gt;
&lt;table&gt;
  &lt;tbody&gt;&lt;tr&gt;&lt;th&gt;Variable&lt;/th&gt;&lt;th&gt;Default&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-indentation&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;The number of times each level is indented in the file tree. If specified as ‘(INTEGER px), indentation will be a single INTEGER pixels wide space.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-indentation-string&lt;/td&gt;&lt;td&gt;” ”&lt;/td&gt;&lt;td&gt;The string that is used to create indentation when &lt;code&gt;treemacs-indentation&lt;/code&gt; is not specified as pixels.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-width&lt;/td&gt;&lt;td&gt;35&lt;/td&gt;&lt;td&gt;Width of the treemacs window.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-show-hidden-files&lt;/td&gt;&lt;td&gt;t&lt;/td&gt;&lt;td&gt;Dotfiles will be shown if this is set to t and be hidden otherwise.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-follow-after-init&lt;/td&gt;&lt;td&gt;nil&lt;/td&gt;&lt;td&gt;When t follow the currently selected file after initializing the treemacs buffer, regardless of &lt;code&gt;treemacs-follow-mode&lt;/code&gt; setting.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-sorting&lt;/td&gt;&lt;td&gt;alphabetic-asc&lt;/td&gt;&lt;td&gt;Indicates how treemacs will sort its files and directories. (Files will always be shown after directories.)&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-ignored-file-predicates&lt;/td&gt;&lt;td&gt;(treemacs–std-ignore-file-predicate)&lt;/td&gt;&lt;td&gt;List of predicates to test for files and directories ignored by Emacs. Ignored files will &lt;b&gt;never&lt;/b&gt; be shown in the treemacs buffer.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-pre-file-insert-predicates&lt;/td&gt;&lt;td&gt;nil&lt;/td&gt;&lt;td&gt;List of predicates to test for files and directories not to be rendered. Unlike &lt;code&gt;treemacs-ignored-file-predicates&lt;/code&gt; these predicates apply when files’ git status information is available.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-file-event-delay&lt;/td&gt;&lt;td&gt;5000&lt;/td&gt;&lt;td&gt;How long (in milliseconds) to collect file events before refreshing. See also &lt;code&gt;treemacs-filewatch-mode&lt;/code&gt;.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-goto-tag-strategy&lt;/td&gt;&lt;td&gt;refetch-index&lt;/td&gt;&lt;td&gt;Indicates how to move to a tag when its buffer is dead.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-default-visit-action&lt;/td&gt;&lt;td&gt;treemacs-visit-node-no-split&lt;/td&gt;&lt;td&gt;Default action for opening a node (e.g. file, directory, tag). &lt;code&gt;treemacs-visit-file-default&lt;/code&gt; action in &lt;code&gt;treemacs-*-actions-config&lt;/code&gt; calls this function.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-RET-actions-config&lt;/td&gt;&lt;td&gt;Prefers visiting nodes over closing/opening&lt;/td&gt;&lt;td&gt;Alist defining the behaviour of &lt;code&gt;treemacs-RET-action&lt;/code&gt;.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-TAB-actions-config&lt;/td&gt;&lt;td&gt;Prefers closing/opening nodes over visiting&lt;/td&gt;&lt;td&gt;Alist defining the behaviour of &lt;code&gt;treemacs-TAB-action&lt;/code&gt;.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-doubleclick-actions-config&lt;/td&gt;&lt;td&gt;Closes/opens tags and visits files&lt;/td&gt;&lt;td&gt;Alist defining the behaviour of &lt;code&gt;treemacs-doubleclick-action&lt;/code&gt;.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-collapse-dirs&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Collapse this many directories into one, when possible. A directory is collapsible when its content consists of nothing but another directory.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-silent-refresh&lt;/td&gt;&lt;td&gt;nil&lt;/td&gt;&lt;td&gt;When non-nil a completed refresh will not be announced with a log message. This applies both to manual refreshing as well as automatic (due to &lt;code&gt;treemacs-filewatch-mode&lt;/code&gt;).&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-silent-filewatch&lt;/td&gt;&lt;td&gt;nil&lt;/td&gt;&lt;td&gt;When non-nil a refresh due to &lt;code&gt;filewatch-mode&lt;/code&gt; will cause no log message.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-is-never-other-window&lt;/td&gt;&lt;td&gt;nil&lt;/td&gt;&lt;td&gt;Prevents treemacs from being selected with &lt;code&gt;other-window&lt;/code&gt;.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-position&lt;/td&gt;&lt;td&gt;left&lt;/td&gt;&lt;td&gt;Position of treemacs buffer. Valid values are &lt;code&gt;left&lt;/code&gt;, &lt;code&gt;right&lt;/code&gt;.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-tag-follow-delay&lt;/td&gt;&lt;td&gt;1.5&lt;/td&gt;&lt;td&gt;Delay in seconds of inactivity for &lt;code&gt;treemacs-tag-follow-mode&lt;/code&gt; to trigger.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-tag-follow-cleanup&lt;/td&gt;&lt;td&gt;t&lt;/td&gt;&lt;td&gt;When non-nil &lt;code&gt;treemacs-tag-follow-mode&lt;/code&gt; will keep only the current file’s tags visible.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-project-follow-cleanup&lt;/td&gt;&lt;td&gt;nil&lt;/td&gt;&lt;td&gt;When non-nil &lt;code&gt;treemacs-follow-mode&lt;/code&gt; will keep only the current project expanded and all others closed.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-no-png-images&lt;/td&gt;&lt;td&gt;nil&lt;/td&gt;&lt;td&gt;When non-nil treemacs will use TUI string icons even when running in a GUI.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-python-executable&lt;/td&gt;&lt;td&gt;(treemacs–find-python3)&lt;/td&gt;&lt;td&gt;Python 3 binary used by treemacs.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-recenter-after-file-follow&lt;/td&gt;&lt;td&gt;nil&lt;/td&gt;&lt;td&gt;Decides if and when to call &lt;code&gt;recenter&lt;/code&gt; when &lt;code&gt;treemacs-follow-mode&lt;/code&gt; moves to a new file.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-recenter-after-tag-follow&lt;/td&gt;&lt;td&gt;nil&lt;/td&gt;&lt;td&gt;Decides if and when to call &lt;code&gt;recenter&lt;/code&gt; when &lt;code&gt;treemacs-tag-follow-mode&lt;/code&gt; moves to a new tag.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-recenter-after-project-jump&lt;/td&gt;&lt;td&gt;‘always&lt;/td&gt;&lt;td&gt;Decides if and when to call &lt;code&gt;recenter&lt;/code&gt; when navigating between projects.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-recenter-after-project-expand&lt;/td&gt;&lt;td&gt;‘on-distance&lt;/td&gt;&lt;td&gt;Decides if and when to call &lt;code&gt;recenter&lt;/code&gt; when expanding a project node.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-recenter-distance&lt;/td&gt;&lt;td&gt;0.1&lt;/td&gt;&lt;td&gt;Minimum distance from window top/bottom (0.1 = 10%) before treemacs calls &lt;code&gt;recenter&lt;/code&gt; in tag/file-follow-mode.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-pulse-on-success&lt;/td&gt;&lt;td&gt;t&lt;/td&gt;&lt;td&gt;When non-nil treemacs will pulse the current line as a success indicator, e.g. when creating a file.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-pulse-on-failure&lt;/td&gt;&lt;td&gt;t&lt;/td&gt;&lt;td&gt;When non-nil treemacs will pulse the current line as a failure indicator, e.g. when failing to find a file’s tags.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-elisp-imenu-expression&lt;/td&gt;&lt;td&gt;[too large to list]&lt;/td&gt;&lt;td&gt;The imenu expression treemacs uses in elisp buffers.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-persist-file&lt;/td&gt;&lt;td&gt;~/.emacs.d/.cache/treemacs-persist&lt;/td&gt;&lt;td&gt;Path to the file treemacs uses to persist its state.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-last-error-persist-file&lt;/td&gt;&lt;td&gt;~/.emacs.d/.cache/treemacs-persist-at-last-error&lt;/td&gt;&lt;td&gt;Path to the file treemacs uses to persist its state.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-space-between-root-nodes&lt;/td&gt;&lt;td&gt;t&lt;/td&gt;&lt;td&gt;When non-nil treemacs will separate root nodes with an empty line.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-wrap-around&lt;/td&gt;&lt;td&gt;t&lt;/td&gt;&lt;td&gt;When non-nil treemacs will wrap around at the buffer edges when moving between lines.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs–fringe-indicator-bitmap&lt;/td&gt;&lt;td&gt;[vertical bar]&lt;/td&gt;&lt;td&gt;The fringe bitmap used by the fringe-indicator minor mode.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-deferred-git-apply-delay&lt;/td&gt;&lt;td&gt;0.5&lt;/td&gt;&lt;td&gt;Seconds of idle time for git highlighting to apply when using the deferred &lt;code&gt;treemacs-git-mode&lt;/code&gt;.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-file-follow-delay&lt;/td&gt;&lt;td&gt;0.2&lt;/td&gt;&lt;td&gt;Delay in seconds of idle time for treemacs to follow the selected window.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-display-in-side-window&lt;/td&gt;&lt;td&gt;t&lt;/td&gt;&lt;td&gt;When non-nil treemacs will use a dedicated &lt;a href="https://www.gnu.org/software/emacs/draft/manual/html_node/elisp/Side-Windows.html" rel="nofollow"&gt;side-window&lt;/a&gt;.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-max-git-entries&lt;/td&gt;&lt;td&gt;5000&lt;/td&gt;&lt;td&gt;Maximum number of git status entries treemacs will process. Anything above that number will be ignored.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-missing-project-action&lt;/td&gt;&lt;td&gt;ask&lt;/td&gt;&lt;td&gt;When a persisted project is missing from filesystem, &lt;code&gt;ask&lt;/code&gt; will prompt for action, &lt;code&gt;keep&lt;/code&gt; will keep the project in the project list, and &lt;code&gt;remove&lt;/code&gt; will remove it from it without prompt.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-show-cursor&lt;/td&gt;&lt;td&gt;nil&lt;/td&gt;&lt;td&gt;When non-nil the cursor will stay visible in the treemacs buffer.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-git-command-pipe&lt;/td&gt;&lt;td&gt;””&lt;/td&gt;&lt;td&gt;Text to be appended to treemacs’ git command. Useful for filtering with something like grep.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-no-delete-other-windows&lt;/td&gt;&lt;td&gt;t&lt;/td&gt;&lt;td&gt;Prevents the treemacs window from being deleted by commands like &lt;code&gt;delete-other-windows&lt;/code&gt; and &lt;code&gt;magit-status&lt;/code&gt;.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-eldoc-display&lt;/td&gt;&lt;td&gt;t&lt;/td&gt;&lt;td&gt;Enables eldoc display of the file path at point. Requires &lt;code&gt;eldoc-mode&lt;/code&gt;.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-bookmark-title-template&lt;/td&gt;&lt;td&gt;“Treemacs - ${project}: ${label}”&lt;/td&gt;&lt;td&gt;When using &lt;code&gt;bookmark-set&lt;/code&gt; in Treemacs, the default template for a bookmark label. The following patterns are available: “${project}”, “${label}”, “${label:N}”, ${label-path}”, “${label-path:N}”, “${file-path}”, “${file-path:N}”.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-file-extension-regex&lt;/td&gt;&lt;td&gt;Text after last period&lt;/td&gt;&lt;td&gt;Determines how treemacs detects a file extension. Can be set to use text after first or last period.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-directory-name-transformer&lt;/td&gt;&lt;td&gt;identity&lt;/td&gt;&lt;td&gt;Transformer function that is applied to directory names before rendering for any sort of cosmetic effect.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-file-name-transformer&lt;/td&gt;&lt;td&gt;identity&lt;/td&gt;&lt;td&gt;Transformer function that is applied to file names before rendering for any sort of cosmetic effect.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2&gt;&lt;a id="user-content-faces" class="anchor" aria-hidden="true" href="#faces"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Faces&lt;/h2&gt;
&lt;p&gt;Treemacs defines and uses the following faces:&lt;/p&gt;
&lt;table&gt;
  &lt;tbody&gt;&lt;tr&gt;&lt;th&gt;Face&lt;/th&gt;&lt;th&gt;Based on&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-directory-face&lt;/td&gt;&lt;td&gt;font-lock-function-name-face&lt;/td&gt;&lt;td&gt;Face used for directories.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-directory-collapsed-face&lt;/td&gt;&lt;td&gt;treemacs-directory-face&lt;/td&gt;&lt;td&gt;Face used for collapsed part of directories.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-file-face&lt;/td&gt;&lt;td&gt;default&lt;/td&gt;&lt;td&gt;Face used for files.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-root-face&lt;/td&gt;&lt;td&gt;font-lock-constant-face&lt;/td&gt;&lt;td&gt;Face used for project roots.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-root-unreadable-face&lt;/td&gt;&lt;td&gt;treemacs-root-face&lt;/td&gt;&lt;td&gt;Face used for local unreadable project roots.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-root-remote-face&lt;/td&gt;&lt;td&gt;font-lock-function-name-face, treemacs-root-face&lt;/td&gt;&lt;td&gt;Face used for readable remote (Tramp) project roots.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-root-remote-unreadable-face&lt;/td&gt;&lt;td&gt;treemacs-root-unreadable-face&lt;/td&gt;&lt;td&gt;Face used for unreadable remote (Tramp) project roots.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-root-remote-disconnected-face&lt;/td&gt;&lt;td&gt;warning, treemacs-root-face&lt;/td&gt;&lt;td&gt;Face used for disconnected remote (Tramp) project roots.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-tags-face&lt;/td&gt;&lt;td&gt;font-lock-builtin-face&lt;/td&gt;&lt;td&gt;Face used for tags.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-help-title-face&lt;/td&gt;&lt;td&gt;font-lock-constant-face&lt;/td&gt;&lt;td&gt;Face used for the title of the helpful hydra.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-help-column-face&lt;/td&gt;&lt;td&gt;font-lock-keyword-face&lt;/td&gt;&lt;td&gt;Face used for the column headers of the helpful hydra.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-git-*-face&lt;/td&gt;&lt;td&gt;various font lock faces&lt;/td&gt;&lt;td&gt;Faces used by treemacs for various git states.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-term-node-face&lt;/td&gt;&lt;td&gt;font-lock-string-face&lt;/td&gt;&lt;td&gt;Face for directory node symbols used by treemacs when it runs in a terminal.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-on-success-pulse-face&lt;/td&gt;&lt;td&gt;:fg #111111 :bg #669966&lt;/td&gt;&lt;td&gt;Pulse face used when pulsing on a successful action.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-on-failure-puse-face&lt;/td&gt;&lt;td&gt;:fg #111111 :bg #ab3737&lt;/td&gt;&lt;td&gt;Pulse face used when pulsing on a failed action.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2&gt;&lt;a id="user-content-evil-compatibility" class="anchor" aria-hidden="true" href="#evil-compatibility"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Evil compatibility&lt;/h2&gt;
&lt;p&gt;To make treemacs get along with evil-mode you need to install and load &lt;code&gt;treemacs-evil&lt;/code&gt;. It does not define any functions
  or offer any configuration options, making sure it is loaded is sufficient.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-customizing-themes-and-icons" class="anchor" aria-hidden="true" href="#customizing-themes-and-icons"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Customizing Themes and Icons&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-creating-and-modifying-themes" class="anchor" aria-hidden="true" href="#creating-and-modifying-themes"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Creating and Modifying Themes&lt;/h3&gt;
&lt;p&gt;Creating and modifying themes and icons is all done in a single step using dedicated macros.&lt;/p&gt;
&lt;p&gt;To create a theme use &lt;code&gt;treemacs-create-theme&lt;/code&gt;. It requires the name of the theme and accepts 3 optional keyword
  arguments: the directory the theme’s icons are stored in (if it’s using png icons), the name of the theme it’s extending
  and the config, a final form that’s responsible for creating all the theme’s icons. A config will typically consist of
  nothing but calls to &lt;code&gt;treemacs-create-icon&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(treemacs-create-theme &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Default&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:icon-directory&lt;/span&gt; (f-join treemacs-dir &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;icons/default&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
  &lt;span class="pl-c1"&gt;:config&lt;/span&gt;
  (&lt;span class="pl-k"&gt;progn&lt;/span&gt;
    (treemacs-create-icon &lt;span class="pl-c1"&gt;:file&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;root.png&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;   &lt;span class="pl-c1"&gt;:fallback&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;            &lt;span class="pl-c1"&gt;:extensions&lt;/span&gt; (root))
    (treemacs-create-icon &lt;span class="pl-c1"&gt;:file&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;emacs.png&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;  &lt;span class="pl-c1"&gt;:fallback&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;🗏 &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;          &lt;span class="pl-c1"&gt;:extensions&lt;/span&gt; (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;el&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;elc&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
    (treemacs-create-icon &lt;span class="pl-c1"&gt;:file&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;readme.png&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;:fallback&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;🗏 &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;          &lt;span class="pl-c1"&gt;:extensions&lt;/span&gt; (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;readme.md&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
    (treemacs-create-icon &lt;span class="pl-c1"&gt;:icon&lt;/span&gt; (all-the-icons-icon-for-file &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;yaml&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;:extensions&lt;/span&gt; (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;yml&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;yaml&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;:file&lt;/code&gt; argument is relative to the icon directory of the theme being created. When not using image icons the
  &lt;code&gt;:icon-directory&lt;/code&gt; argument can be omitted and the &lt;code&gt;:file&lt;/code&gt; argument can be switched for &lt;code&gt;:icon&lt;/code&gt; to supply the icon string
  directly. The TUI fallback is also optional, ” ” is used by default. Finally the list of extensions determines which
  file extensions the icon should be used for.&lt;/p&gt;
&lt;p&gt;For treemacs an extension is either the entire file name or the text after the last period (unless
  &lt;code&gt;treemacs-file-extension-regex&lt;/code&gt; is customized). This means it can match normal file names like “init.el”, extensionless
  file names like “Makefile”. Because the full name is checked first it is possible to give special files their own icon,
  for example “Readme.md” can use a different icon than normal markdown files.&lt;/p&gt;
&lt;p&gt;Instead of a string extension a symbol can also be used. In this case treemacs will also create a variable for that icon
  named &lt;code&gt;treemacs-icon-$symbol&lt;/code&gt;. Treemacs uses several such icon variables and any new theme should define their own
  versions (it it’s not extending the default theme). The following icons are used:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;root&lt;/li&gt;
  &lt;li&gt;dir-closed&lt;/li&gt;
  &lt;li&gt;dir-open&lt;/li&gt;
  &lt;li&gt;fallback&lt;/li&gt;
  &lt;li&gt;tag-open&lt;/li&gt;
  &lt;li&gt;tag-closed&lt;/li&gt;
  &lt;li&gt;tag-leaf&lt;/li&gt;
  &lt;li&gt;error&lt;/li&gt;
  &lt;li&gt;info&lt;/li&gt;
  &lt;li&gt;warning&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Analogous to creating a new theme &lt;code&gt;treemacs-modify-theme&lt;/code&gt; can be used to change, or add to, an existing theme:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(treemacs-modify-theme &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Default&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:icon-directory&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/other/icons/dir&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:config&lt;/span&gt;
  (&lt;span class="pl-k"&gt;progn&lt;/span&gt;
    (treemacs-create-icon &lt;span class="pl-c1"&gt;:icon&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;+&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;:extensions&lt;/span&gt; (dir-closed))
    (treemacs-create-icon &lt;span class="pl-c1"&gt;:icon&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;-&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;:extensions&lt;/span&gt; (dir-open))))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally keep in mind that treemacs’ icons are all buffer-local values, and will most likely not be defined when trying
  to access their values directly. When you need to programmatically access some of treemacs’ icons you should use
  &lt;code&gt;treemacs-get-icon-value&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(treemacs-get-icon-value &lt;span class="pl-c1"&gt;'root&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Default&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
(treemacs-get-icon-value &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;org&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-custom-icons" class="anchor" aria-hidden="true" href="#custom-icons"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Custom Icons&lt;/h3&gt;
&lt;p&gt;Treemacs also offers a quick and straighforward way to add a (gui) icon to the currently active theme, without caring
  for its name or declaring icon directories:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;defvar&lt;/span&gt; &lt;span class="pl-en"&gt;treemacs-custom-html-icon&lt;/span&gt; (all-the-icons-icon-for-file &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;name.html&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
(treemacs-define-custom-icon treemacs-custom-html-icon &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;html&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;htm&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;b&gt;Important&lt;/b&gt;: There is a restriction that all icons must must be exactly 2 characters long. That’s including the space
  that will separate an icon from the filename.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-icons-according-to-auto-mode-alist" class="anchor" aria-hidden="true" href="#icons-according-to-auto-mode-alist"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Icons according to &lt;code&gt;auto-mode-alist&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;For some file extensions, like “.cc” or “.hh”, it is not immediately obvious which major mode will open these files, and
  thus which icon they should be assigned. Treemacs offers the option that automate this decision based on
  &lt;code&gt;auto-mode-alist&lt;/code&gt;. You can use the function &lt;code&gt;treemacs-map-icons-with-auto-mode-alist&lt;/code&gt; to change the assigned icons for a
  list of file extensions based on the major mode the icons are mapped to in &lt;code&gt;auto-mode-alist&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;treemacs-map-icons-with-auto-mode-alist&lt;/code&gt; takes 2 arguments: first a list of file extensions, then an alist that decides
  which icon should be used for which mapped major mode. For example the code to decide the icons for “.hh” and “.cc”
  files with &lt;code&gt;auto-mode-alist&lt;/code&gt; would look like this:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(treemacs-map-icons-with-auto-mode-alist
 '(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;.cc&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;.hh&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
 '((&lt;span class="pl-c1"&gt;c-mode&lt;/span&gt;   &lt;span class="pl-k"&gt;.&lt;/span&gt; (treemacs-get-icon-value &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;c&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
   (&lt;span class="pl-c1"&gt;c++-mode&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; (treemacs-get-icon-value &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;cpp&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))))&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content-gui-vs-tui" class="anchor" aria-hidden="true" href="#gui-vs-tui"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;GUI vs TUI&lt;/h4&gt;
&lt;p&gt;It is possible to force treemacs to use the simple TUI icons in GUI mode by setting &lt;code&gt;treemacs-no-png-images&lt;/code&gt; to t.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-resizing-icons" class="anchor" aria-hidden="true" href="#resizing-icons"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Resizing Icons&lt;/h4&gt;
&lt;p&gt;If your emacs has been compiled with imagemagick support you can arbitrarily change the size of treemacs’ icons by
  (interactively or programmatically) calling &lt;code&gt;treemacs-resize-icons&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-indent-guide" class="anchor" aria-hidden="true" href="#indent-guide"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Indent guide&lt;/h3&gt;
&lt;p&gt;Not really part of the icons, but a useful visual feature nonetheless: An indent guide like effect can be created by
  selecting appropriate values for &lt;code&gt;treemacs-indentation&lt;/code&gt; and &lt;code&gt;treemacs-indentation-string&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;setq&lt;/span&gt; treemacs-indentation-string (&lt;span class="pl-c1"&gt;propertize&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt; ⫶ &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'face&lt;/span&gt; &lt;span class="pl-c1"&gt;'font-lock-comment-face&lt;/span&gt;)
      treemacs-indentation &lt;span class="pl-c1"&gt;1&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h1&gt;&lt;a id="user-content-keymap" class="anchor" aria-hidden="true" href="#keymap"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Keymap&lt;/h1&gt;
&lt;h2&gt;&lt;a id="user-content-unbound-functions" class="anchor" aria-hidden="true" href="#unbound-functions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Unbound functions&lt;/h2&gt;
&lt;p&gt;These functions are not bound to any keys by default. It’s left up to users to find the most convenient key binds.&lt;/p&gt;
&lt;table&gt;
  &lt;tbody&gt;&lt;tr&gt;&lt;th&gt;Action&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs&lt;/td&gt;&lt;td&gt;Show/Hide/Initialize treemacs.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-bookmark&lt;/td&gt;&lt;td&gt;Find a bookmark in treemacs.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-find-file&lt;/td&gt;&lt;td&gt;Find and focus the current file in treemacs.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-find-tag&lt;/td&gt;&lt;td&gt;Find and focus the current tag in treemacs.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-select-window&lt;/td&gt;&lt;td&gt;Select the treemacs window if it is visible. Call &lt;code&gt;treemacs&lt;/code&gt; if it is not.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-delete-other-windows&lt;/td&gt;&lt;td&gt;Same as &lt;code&gt;delete-other-windows&lt;/code&gt;, but will not delete the treemacs window.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-show-changelog&lt;/td&gt;&lt;td&gt;Opens a buffer showing the changelog.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-load-theme&lt;/td&gt;&lt;td&gt;Load a different icon theme.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-projectile&lt;/td&gt;&lt;td&gt;Add a project from projectile to treemacs.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-add-and-display-current-project&lt;/td&gt;&lt;td&gt;Add current project to treemacs and open it.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;treemacs-select-scope-type&lt;/td&gt;&lt;td&gt;Select the scope of treemacs buffers in which they are unique&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2&gt;&lt;a id="user-content-default-keymaps" class="anchor" aria-hidden="true" href="#default-keymaps"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Default keymaps&lt;/h2&gt;
&lt;p&gt;Treemacs’ keybindings are distributed to several keymaps, based on common keybindings:&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-project-keybinds-prefix-c-c-c-p" class="anchor" aria-hidden="true" href="#project-keybinds-prefix-c-c-c-p"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Project Keybinds (Prefix &lt;code&gt;C-c C-p&lt;/code&gt;)&lt;/h3&gt;
&lt;table&gt;
  &lt;tbody&gt;&lt;tr&gt;&lt;th&gt;Key&lt;/th&gt;&lt;th&gt;Action&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;C-c C-p a&lt;/td&gt;&lt;td&gt;treemacs-add-project-to-workspace&lt;/td&gt;&lt;td&gt;Select a new project to add to the treemacs workspace.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;C-c C-p p&lt;/td&gt;&lt;td&gt;treemacs-projectile&lt;/td&gt;&lt;td&gt;Select a projectile project to add to the workspace.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;C-c C-p d&lt;/td&gt;&lt;td&gt;treemacs-remove-project-from-workspace&lt;/td&gt;&lt;td&gt;Remove project at point from the workspace.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;C-c C-p r&lt;/td&gt;&lt;td&gt;treemacs-rename-project&lt;/td&gt;&lt;td&gt;Rename project at point.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;C-c C-p c c&lt;/td&gt;&lt;td&gt;treemacs-collapse-project&lt;/td&gt;&lt;td&gt;Collapse project at point.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;C-c C-p c o/S-TAB&lt;/td&gt;&lt;td&gt;treemacs-collapse-all-projects&lt;/td&gt;&lt;td&gt;Collapse all projects.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;C-c C-p c o&lt;/td&gt;&lt;td&gt;treemacs-collapse-all-projects&lt;/td&gt;&lt;td&gt;Collapse all projects except the project at point.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3&gt;&lt;a id="user-content-workspaces-keybinds-prefix-c-c-c-w" class="anchor" aria-hidden="true" href="#workspaces-keybinds-prefix-c-c-c-w"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Workspaces Keybinds (Prefix &lt;code&gt;C-c C-w&lt;/code&gt;)&lt;/h3&gt;
&lt;table&gt;
  &lt;tbody&gt;&lt;tr&gt;&lt;th&gt;Key&lt;/th&gt;&lt;th&gt;Action&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;C-c C-w r&lt;/td&gt;&lt;td&gt;treemacs-rename-workspace&lt;/td&gt;&lt;td&gt;Rename a workspace.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;C-c C-w a&lt;/td&gt;&lt;td&gt;treemacs-create-workspace&lt;/td&gt;&lt;td&gt;Create a new workspace.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;C-c C-w d&lt;/td&gt;&lt;td&gt;treemacs-remove-workspace&lt;/td&gt;&lt;td&gt;Delete a workspace.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;C-c C-w s&lt;/td&gt;&lt;td&gt;treemacs-switch-workspace&lt;/td&gt;&lt;td&gt;Switch the current workspace.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;C-c C-w e&lt;/td&gt;&lt;td&gt;treemacs-edit-workspaces&lt;/td&gt;&lt;td&gt;Edit workspace layout via org-mode.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;C-c C-w f&lt;/td&gt;&lt;td&gt;treemacs-set-fallback-workspace&lt;/td&gt;&lt;td&gt;Select the default fallback workspace.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3&gt;&lt;a id="user-content-node-visit-keybinds-prefix-o" class="anchor" aria-hidden="true" href="#node-visit-keybinds-prefix-o"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Node Visit Keybinds (Prefix &lt;code&gt;o&lt;/code&gt;)&lt;/h3&gt;
&lt;table&gt;
  &lt;tbody&gt;&lt;tr&gt;&lt;th&gt;Key&lt;/th&gt;&lt;th&gt;Action&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;ov&lt;/td&gt;&lt;td&gt;treemacs-visit-node-vertical-split&lt;/td&gt;&lt;td&gt;Open current file or tag by vertically splitting &lt;code&gt;next-window&lt;/code&gt;.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;oh&lt;/td&gt;&lt;td&gt;treemacs-visit-node-horizontal-split&lt;/td&gt;&lt;td&gt;Open current file or tag by horizontally splitting &lt;code&gt;next-window&lt;/code&gt;.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;oo/RET&lt;/td&gt;&lt;td&gt;treemacs-visit-node-no-split&lt;/td&gt;&lt;td&gt;Open current file or tag, performing no split and using &lt;code&gt;next-window&lt;/code&gt; directly.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;oaa&lt;/td&gt;&lt;td&gt;treemacs-visit-node-ace&lt;/td&gt;&lt;td&gt;Open current file or tag, using ace-window to decide which window to open the file in.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;oah&lt;/td&gt;&lt;td&gt;treemacs-visit-node-ace-horizontal-split&lt;/td&gt;&lt;td&gt;Open current file or tag by horizontally splitting a window selected by ace-window.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;oav&lt;/td&gt;&lt;td&gt;treemacs-visit-node-ace-vertical-split&lt;/td&gt;&lt;td&gt;Open current file or tag by vertically splitting a window selected by ace-window.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;or&lt;/td&gt;&lt;td&gt;treemacs-visit-node-in-most-recently-used-window&lt;/td&gt;&lt;td&gt;Open current file or tag in the most recently used window.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;ox&lt;/td&gt;&lt;td&gt;treemacs-visit-node-in-external-application&lt;/td&gt;&lt;td&gt;Open current file according to its mime type in an external application. Linux, Windows and Mac are supported.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3&gt;&lt;a id="user-content-toggle-keybinds-prefix-t" class="anchor" aria-hidden="true" href="#toggle-keybinds-prefix-t"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Toggle Keybinds (Prefix &lt;code&gt;t&lt;/code&gt;)&lt;/h3&gt;
&lt;table&gt;
  &lt;tbody&gt;&lt;tr&gt;&lt;th&gt;Key&lt;/th&gt;&lt;th&gt;Action&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;th&lt;/td&gt;&lt;td&gt;treemacs-toggle-show-dotfiles&lt;/td&gt;&lt;td&gt;Toggle the hiding and displaying of dotfiles.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;tw&lt;/td&gt;&lt;td&gt;treemacs-toggle-fixed-width&lt;/td&gt;&lt;td&gt;Toggle whether the treemacs window should have a fixed width. See also treemacs-width.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;tf&lt;/td&gt;&lt;td&gt;treemacs-follow-mode&lt;/td&gt;&lt;td&gt;Toggle &lt;code&gt;treemacs-follow-mode&lt;/code&gt;.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;ta&lt;/td&gt;&lt;td&gt;treemacs-filewatch-mode&lt;/td&gt;&lt;td&gt;Toggle &lt;code&gt;treemacs-filewatch-mode&lt;/code&gt;.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;tv&lt;/td&gt;&lt;td&gt;treemacs-fringe-indicator-mode&lt;/td&gt;&lt;td&gt;Toggle &lt;code&gt;treemacs-fringe-indicator-mode&lt;/code&gt;.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3&gt;&lt;a id="user-content-copy-keybinds-prefix-y" class="anchor" aria-hidden="true" href="#copy-keybinds-prefix-y"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Copy Keybinds (Prefix &lt;code&gt;y&lt;/code&gt;)&lt;/h3&gt;
&lt;table&gt;
  &lt;tbody&gt;&lt;tr&gt;&lt;th&gt;Key&lt;/th&gt;&lt;th&gt;Action&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;yy&lt;/td&gt;&lt;td&gt;treemacs-copy-path-at-point&lt;/td&gt;&lt;td&gt;Copy the absolute path of the node at point.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;yr&lt;/td&gt;&lt;td&gt;treemacs-copy-project-root&lt;/td&gt;&lt;td&gt;Copy the absolute path of the project root for the node at point.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;yf&lt;/td&gt;&lt;td&gt;treemacs-copy-file&lt;/td&gt;&lt;td&gt;Copy the file at point.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3&gt;&lt;a id="user-content-general-keybinds" class="anchor" aria-hidden="true" href="#general-keybinds"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;General Keybinds&lt;/h3&gt;
&lt;table&gt;
  &lt;tbody&gt;&lt;tr&gt;&lt;th&gt;Key&lt;/th&gt;&lt;th&gt;Action&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;?&lt;/td&gt;&lt;td&gt;treemacs-helpful-hydra&lt;/td&gt;&lt;td&gt;Summon the helpful hydra to show you the treemacs keymap.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;j/n&lt;/td&gt;&lt;td&gt;treemacs-next-line&lt;/td&gt;&lt;td&gt;Go to the next line.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;k/p&lt;/td&gt;&lt;td&gt;treemacs-previous-line&lt;/td&gt;&lt;td&gt;Go to the previous line.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;M-J/N&lt;/td&gt;&lt;td&gt;treemacs-next-line-other-window&lt;/td&gt;&lt;td&gt;Go to the next line in &lt;code&gt;next-window&lt;/code&gt;.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;M-K/P&lt;/td&gt;&lt;td&gt;treemacs-previous-line-other-window&lt;/td&gt;&lt;td&gt;Go to the previous line in &lt;code&gt;next-window&lt;/code&gt;..&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&amp;lt;PgUp&amp;gt;&lt;/td&gt;&lt;td&gt;treemacs-next-page-other-window&lt;/td&gt;&lt;td&gt;Go to the next page in &lt;code&gt;next-window&lt;/code&gt;.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&amp;lt;PgDn&amp;gt;&lt;/td&gt;&lt;td&gt;treemacs-previous-page-other-window&lt;/td&gt;&lt;td&gt;Go to the previous page in &lt;code&gt;next-window&lt;/code&gt;..&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;M-j/M-n&lt;/td&gt;&lt;td&gt;treemacs-next-neighbour&lt;/td&gt;&lt;td&gt;Go to the next same-level neighbour of the current node.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;M-k/M-p&lt;/td&gt;&lt;td&gt;treemacs-previous-neighbour&lt;/td&gt;&lt;td&gt;Go to the previous same-level neighbour of the current node.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;u&lt;/td&gt;&lt;td&gt;treemacs-goto-parent-node&lt;/td&gt;&lt;td&gt;Go to parent of node at point, if possible.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&amp;lt;M-Up&amp;gt;&lt;/td&gt;&lt;td&gt;treemacs-move-project-up&lt;/td&gt;&lt;td&gt;Switch positions of project at point and the one above it.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&amp;lt;M-Down&amp;gt;&lt;/td&gt;&lt;td&gt;treemacs-move-project-down&lt;/td&gt;&lt;td&gt;Switch positions of project at point and the one below it.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;w&lt;/td&gt;&lt;td&gt;treemacs-set-width&lt;/td&gt;&lt;td&gt;Set a new value for the width of the treemacs window.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;RET&lt;/td&gt;&lt;td&gt;treemacs-RET-action&lt;/td&gt;&lt;td&gt;Run the action defined in &lt;code&gt;treemacs-RET-actions-config&lt;/code&gt; for the current node.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;TAB&lt;/td&gt;&lt;td&gt;treemacs-TAB-action&lt;/td&gt;&lt;td&gt;Run the action defined in &lt;code&gt;treemacs-TAB-actions-config&lt;/code&gt; for the current node.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;g/r/gr&lt;/td&gt;&lt;td&gt;treemacs-refresh&lt;/td&gt;&lt;td&gt;Refresh the project at point.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;d&lt;/td&gt;&lt;td&gt;treemacs-delete&lt;/td&gt;&lt;td&gt;Delete node at point.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;R&lt;/td&gt;&lt;td&gt;treemacs-rename&lt;/td&gt;&lt;td&gt;Rename node at point.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;cf&lt;/td&gt;&lt;td&gt;treemacs-create-file&lt;/td&gt;&lt;td&gt;Create a file.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;cd&lt;/td&gt;&lt;td&gt;treemacs-create-dir&lt;/td&gt;&lt;td&gt;Create a directory.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;q&lt;/td&gt;&lt;td&gt;treemacs-quit&lt;/td&gt;&lt;td&gt;Hide the treemacs window.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Q&lt;/td&gt;&lt;td&gt;treemacs-kill-buffer&lt;/td&gt;&lt;td&gt;Delete the treemacs buffer.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;P&lt;/td&gt;&lt;td&gt;treemacs-peek&lt;/td&gt;&lt;td&gt;Peek at the file (or tag) at point without fully opening it.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;yy&lt;/td&gt;&lt;td&gt;treemacs-copy-path-at-point&lt;/td&gt;&lt;td&gt;Copy the absolute path of the node at point.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;yr&lt;/td&gt;&lt;td&gt;treemacs-copy-project-root&lt;/td&gt;&lt;td&gt;Copy the absolute path of the project root for the node at point.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;yf&lt;/td&gt;&lt;td&gt;treemacs-copy-file&lt;/td&gt;&lt;td&gt;Copy the file at point.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;m&lt;/td&gt;&lt;td&gt;treemacs-move-file&lt;/td&gt;&lt;td&gt;Move the file at point.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;s&lt;/td&gt;&lt;td&gt;treemacs-resort&lt;/td&gt;&lt;td&gt;Set a new value for &lt;code&gt;treemacs-sorting&lt;/code&gt;.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;b&lt;/td&gt;&lt;td&gt;treemacs-add-bookmark&lt;/td&gt;&lt;td&gt;Bookmark the currently selected files’s, dir’s or tag’s location.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;h&lt;/td&gt;&lt;td&gt;treemacs-root-up&lt;/td&gt;&lt;td&gt;Move treemacs’ root one level upward. Only works with a single project in the workspace.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;l&lt;/td&gt;&lt;td&gt;treemacs-root-down&lt;/td&gt;&lt;td&gt;Move treemacs’ root into the directory at point. Only works with a single project in the workspace.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;H&lt;/td&gt;&lt;td&gt;treemacs-collapse-parent-node&lt;/td&gt;&lt;td&gt;Collapse the parent of the node at point.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;\!&lt;/td&gt;&lt;td&gt;treemacs-run-shell-command-for-current-node&lt;/td&gt;&lt;td&gt;Run an asynchronous shell command on the current node, replacing “$path” with its path.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;M-!&lt;/td&gt;&lt;td&gt;treemacs-run-shell-command-in-project-root&lt;/td&gt;&lt;td&gt;Run an asynchronous shell command in the root of the current project, replacing “$path” with its path.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h1&gt;&lt;a id="user-content-compatibility" class="anchor" aria-hidden="true" href="#compatibility"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Compatibility&lt;/h1&gt;
&lt;p&gt;The correctness of treemacs’ display behaviour is, to a large degree, ensured through window properties and reacting to
  changes in the window configuration. The packages most likely to cause trouble for treemacs are therefore those that
  interfere with Emacs’ buffer spawning and window splitting behaviour. Treemacs is included in Spacemacs and I am a
  Spacemacs user, therefore treemacs guarantees first-class support &amp;amp; compatibility for window-managing packages used in
  Spacemacs, namely &lt;a href="https://github.com/Bad-ptr/persp-mode.el"&gt;persp&lt;/a&gt;, &lt;a href="https://github.com/wasamasa/eyebrowse"&gt;eyebrowse&lt;/a&gt;, &lt;a href="https://github.com/m2ym/popwin-el"&gt;popwin&lt;/a&gt; and &lt;a href="https://github.com/bmag/emacs-purpose"&gt;window-purpose&lt;/a&gt;, as well as &lt;a href="https://github.com/wasamasa/shackle"&gt;shackle&lt;/a&gt;. For everything else there may be
  issues and, depending on the complexity of the problem, I may decide it is not worth fixing.&lt;/p&gt;
&lt;p&gt;Aside from this there are the following known incompatibilities:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Any package invoking &lt;code&gt;font-lock-ensure&lt;/code&gt; in the treemacs buffer. This will reset the faces of treemacs’ buttons (once)
    and is a known &lt;a href="https://debbugs.gnu.org/cgi/bugreport.cgi?bug=28599" rel="nofollow"&gt;emacs bug&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;A possible cause of this issue using an old version of swiper.&lt;/li&gt;
  &lt;li&gt;Rainbow mode activated in treemacs will likewise produce this behaviour. Make sure not to include rainbow-mode as
    part of &lt;code&gt;special-mode-hook&lt;/code&gt;, since this is the mode &lt;code&gt;treemacs-mode&lt;/code&gt; is derived from.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;a id="user-content-faq" class="anchor" aria-hidden="true" href="#faq"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;FAQ&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;How do I hide files I don’t want to see?
    &lt;p&gt;You need to define a predicate function and add it to &lt;code&gt;treemacs-ignored-file-predicates&lt;/code&gt;. This function accepts two
      arguments, a file’s name and its absolute path, and must return non-nil when treemacs should hide that file.&lt;/p&gt;
    &lt;p&gt;For example the code to ignore files eiter called “foo” or located in ”&lt;i&gt;x/y/z&lt;/i&gt;” would look like this:&lt;/p&gt;
    &lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;with-eval-after-load&lt;/span&gt; &lt;span class="pl-c1"&gt;'treemacs&lt;/span&gt;

  (&lt;span class="pl-k"&gt;defun&lt;/span&gt; &lt;span class="pl-e"&gt;treemacs-ignore-example&lt;/span&gt; (&lt;span class="pl-v"&gt;filename&lt;/span&gt; &lt;span class="pl-v"&gt;absolute-path&lt;/span&gt;)
    (&lt;span class="pl-k"&gt;or&lt;/span&gt; (&lt;span class="pl-c1"&gt;string-equal&lt;/span&gt; filename &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;foo&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
        (&lt;span class="pl-c1"&gt;string-prefix-p&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/x/y/z/&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; absolute-path)))

  (&lt;span class="pl-c1"&gt;add-to-list&lt;/span&gt; &lt;span class="pl-c1"&gt;'treemacs-ignored-file-predicates&lt;/span&gt; &lt;span class="pl-c1"&gt;#&lt;span class="pl-c1"&gt;'treemacs-ignore-example&lt;/span&gt;&lt;/span&gt;))
    &lt;/pre&gt;&lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;How do I keep treemacs from showing files that are ignored by git?
    &lt;p&gt;Short answer:&lt;/p&gt;
    &lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;with-eval-after-load&lt;/span&gt; &lt;span class="pl-c1"&gt;'treemacs&lt;/span&gt;
  (&lt;span class="pl-c1"&gt;add-to-list&lt;/span&gt; &lt;span class="pl-c1"&gt;'treemacs-pre-file-insert-predicates&lt;/span&gt; &lt;span class="pl-c1"&gt;#&lt;span class="pl-c1"&gt;'treemacs-is-file-git-ignored?&lt;/span&gt;&lt;/span&gt;))
    &lt;/pre&gt;&lt;/div&gt;
    &lt;p&gt;A slightly longer explanation about how you can hook into the render process can be found in the documentation string
      of &lt;code&gt;treemacs-pre-file-insert-predicates&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Why am I seeing no file icons and only +/- for directories?
    &lt;p&gt;Treemacs will permanently fall back on its simple TUI icons if it detects that the emacs instance it is run in cannot
      create images. You can test this by evaluating &lt;code&gt;(create-image "" 'png)&lt;/code&gt;. If this code returns an error like “Invalid
      image type ´png´” your emacs does not support images.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;How do I get treemacs to stop telling me when it’s been refreshed, especially with filewatch-mode?
    &lt;p&gt;See &lt;code&gt;treemacs-silent-refresh&lt;/code&gt; and &lt;code&gt;treemacs-silent-filewatch&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;ENOSPC / No space left on device
    &lt;p&gt;You may run into this error when you use filewatch-mode. The solution is to increase the number of allowed user
      watches, as described in &lt;a href="https://stackoverflow.com/questions/16748737/grunt-watch-error-waiting-fatal-error-watch-enospc" rel="nofollow"&gt;this link&lt;/a&gt;. You’ll also want to see what’s responsible for setting all those file watches in
      the first place, since treemacs only watches the directories it is displaying and so won’t produce more than a couple
      dozen watches at best.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Why is treemacs warning me about not being able to find some background colors and falling back to something else?
    &lt;p&gt;Treemacs needs those colors to make sure that background colors of its icons correctly align with hl-line-mode. Png
      images’ backgrounds are not highlighted by hl-line-mode by default, treemacs is manually correcting this every time
      hl-line’s overlay is moved. To make that correction work it needs to know two colors: the current theme’s &lt;code&gt;default&lt;/code&gt;
      background, and its &lt;code&gt;hl-line&lt;/code&gt; background color. If treemacs cannot find hl-lines’s background color it falls back to
      the default background color. If it cannot even find the default background it will fall back to #2d2d31. The
      warnings serve to inform you of that fallback.&lt;/p&gt;
    &lt;p&gt;If your theme does not define a required color you can set it yourself before treemacs loads like this:&lt;/p&gt;
    &lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;set-face-attribute&lt;/span&gt; &lt;span class="pl-c1"&gt;'hl-line&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt; &lt;span class="pl-c1"&gt;:background&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;#333333&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    &lt;/pre&gt;&lt;/div&gt;
    &lt;p&gt;If you just want to disable the warnings you can do so by defining the variable &lt;code&gt;treemacs-no-load-time-warnings&lt;/code&gt;. Its
      exact value is irrelevant, all that matters is that it exists at all. Since the warnings are issues when treemacs is
      first being loaded the variable must be defined &lt;b&gt;before&lt;/b&gt; treemacs is initialized. This is best achieved by adding the
      line &lt;code&gt;(defvar treemacs-no-load-time-warnings t)&lt;/code&gt; to treemacs’ use-package &lt;code&gt;:init&lt;/code&gt; block.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Can I expand &lt;b&gt;everything&lt;/b&gt; under a node?
    &lt;p&gt;Yes, you just need to expand it with a &lt;a href="https://www.emacswiki.org/emacs/PrefixArgument" rel="nofollow"&gt;prefix argument&lt;/a&gt;. Closing nodes with a prefix argument works as well. In this
      case treemacs will forget about the nodes opened below the one that was closed and not reopen them automatically.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;a id="user-content-contributing" class="anchor" aria-hidden="true" href="#contributing"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contributing&lt;/h1&gt;
&lt;p&gt;Contributions are very much welcome, but should fit the general scope and style of treemacs. The following is a list of
  guidelines that should be met (exceptions confirm the rule):&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;There should be one commit per feature.&lt;/li&gt;
  &lt;li&gt;Commit messages should start with a note in brackets that roughly describes the area the commit relates to, for
    example &lt;code&gt;[Icons]&lt;/code&gt; if you add an icon.&lt;/li&gt;
  &lt;li&gt;Code must be in the right place (what with the codebase being split in many small files). If there is no right place
    it probably goes into treemacs-core-utils.el which is where all the general implementation details go.&lt;/li&gt;
  &lt;li&gt;New features must be documented in the readme (for example mentioning new config options in the &lt;a href="#variables"&gt;Config Table&lt;/a&gt;).&lt;/li&gt;
  &lt;li&gt;There must not be any compiler warnings.&lt;/li&gt;
  &lt;li&gt;The test suite must pass.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Treemacs uses cask to setup a local testing environment and a Makefile that simplifies compiling and testing the
  codebase. First run &lt;code&gt;cask install&lt;/code&gt; to locally pull treemacs’ dependencies. Then you can use the following Makefile
  targets:&lt;/p&gt;
&lt;dl&gt;
  &lt;dt&gt;make prepare&lt;/dt&gt;&lt;dd&gt;Downloads and updates Cask’s dependencies. Is a dependency of the &lt;code&gt;test&lt;/code&gt; and &lt;code&gt;compile&lt;/code&gt; targets.&lt;/dd&gt;
  &lt;dt&gt;make compile&lt;/dt&gt;&lt;dd&gt;Compiles the code base (and treats compiler warnings as errors).&lt;/dd&gt;
  &lt;dt&gt;make clean&lt;/dt&gt;&lt;dd&gt;Removes the generated .elc files.&lt;/dd&gt;
  &lt;dt&gt;make lint&lt;/dt&gt;&lt;dd&gt;Runs first &lt;code&gt;compile&lt;/code&gt; then &lt;code&gt;clean&lt;/code&gt;, even if the former fails.&lt;/dd&gt;
  &lt;dt&gt;make test&lt;/dt&gt;&lt;dd&gt;Runs the testsuite, once in a graphical environment and once in the terminal.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;Finally if you want to just add an icon you can take &lt;a href="https://github.com/Alexander-Miller/treemacs/commit/94df3e36af865dab2c76b549b1a61f418e3bf5be"&gt;this commit&lt;/a&gt; as an example (though the icons have since been moved
  into their own module in &lt;code&gt;treemacs-icons.el&lt;/code&gt;).&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-working-with-the-code-base" class="anchor" aria-hidden="true" href="#working-with-the-code-base"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Working With The Code Base&lt;/h1&gt;
&lt;p&gt;If you want to delve into the treemacs’ code base, check out &lt;a href="https://github.com/Alexander-Miller/treemacs/wiki"&gt;the wiki&lt;/a&gt; for some general pointers.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-dependencies" class="anchor" aria-hidden="true" href="#dependencies"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Dependencies&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;emacs &amp;gt;= 25.2&lt;/li&gt;
  &lt;li&gt;f.el&lt;/li&gt;
  &lt;li&gt;s.el&lt;/li&gt;
  &lt;li&gt;dash&lt;/li&gt;
  &lt;li&gt;cl-lib&lt;/li&gt;
  &lt;li&gt;ace-window&lt;/li&gt;
  &lt;li&gt;pfuture&lt;/li&gt;
  &lt;li&gt;ht&lt;/li&gt;
  &lt;li&gt;hydra&lt;/li&gt;
  &lt;li&gt;(optionally) evil&lt;/li&gt;
  &lt;li&gt;(optionally) projectile&lt;/li&gt;
  &lt;li&gt;(optionally) winum&lt;/li&gt;
  &lt;li&gt;(optionally) python(3)&lt;/li&gt;
&lt;/ul&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>Alexander-Miller</author><guid isPermaLink="false">https://github.com/Alexander-Miller/treemacs</guid><pubDate>Thu, 30 Jan 2020 00:07:00 GMT</pubDate></item><item><title>emacs-evil/evil #8 in Emacs Lisp, This week</title><link>https://github.com/emacs-evil/evil</link><description>&lt;p&gt;&lt;i&gt;The extensible vi layer for Emacs.&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/emacs-evil/evil/master/doc/logo.png"&gt;&lt;img src="https://raw.githubusercontent.com/emacs-evil/evil/master/doc/logo.png" alt="An extensible vi layer for Emacs" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://travis-ci.org/emacs-evil/evil" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/9fc8dff9b4c535f17a789c81937dd32e38822c23/68747470733a2f2f7472617669732d63692e6f72672f656d6163732d6576696c2f6576696c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/emacs-evil/evil.svg?branch=master" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://melpa.org/#/evil" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/bd97222c6e281edeeb067bf6f5926b7c7b16519a/68747470733a2f2f6d656c70612e6f72672f7061636b616765732f6576696c2d62616467652e737667" alt="MELPA" data-canonical-src="https://melpa.org/packages/evil-badge.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://stable.melpa.org/#/evil" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/d508a703cde2d4c7f4ac64e5b4bb25d24161bf0c/68747470733a2f2f737461626c652e6d656c70612e6f72672f7061636b616765732f6576696c2d62616467652e737667" alt="MELPA Stable" data-canonical-src="https://stable.melpa.org/packages/evil-badge.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://evil.readthedocs.io/en/latest/?badge=latest" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/5e5f5413354f75f41ad51c9280a6d1bdace0b586/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f6576696c2f62616467652f3f76657273696f6e3d6c6174657374" alt="Documentation Status" data-canonical-src="https://readthedocs.org/projects/evil/badge/?version=latest" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://www.gnu.org/licenses/gpl-3.0" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/bf135a9cea09d0ea4bba410582c0e70ec8222736/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d47504c25323076332d626c75652e737667" alt="License: GPL v3" data-canonical-src="https://img.shields.io/badge/License-GPL%20v3-blue.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Evil is an &lt;strong&gt;e&lt;/strong&gt;xtensible &lt;strong&gt;vi&lt;/strong&gt; &lt;strong&gt;l&lt;/strong&gt;ayer
for &lt;a href="http://www.gnu.org/software/emacs/" rel="nofollow"&gt;Emacs&lt;/a&gt;. It emulates the main features
of &lt;a href="http://www.vim.org/" rel="nofollow"&gt;Vim&lt;/a&gt;, and provides facilities for writing custom
extensions. Also see our page on &lt;a href="http://emacswiki.org/emacs/Evil" rel="nofollow"&gt;EmacsWiki&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installation&lt;/h1&gt;
&lt;p&gt;See the
&lt;a href="https://evil.readthedocs.io/en/latest/overview.html#installation-via-package-el" rel="nofollow"&gt;official documentation&lt;/a&gt;
for installation instructions. We recommend using &lt;em&gt;package.el&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;As a quickstart, you can add the following code to your Emacs init
file.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Set up package.el to work with MELPA&lt;/span&gt;
(&lt;span class="pl-c1"&gt;require&lt;/span&gt; &lt;span class="pl-c1"&gt;'package&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;add-to-list&lt;/span&gt; &lt;span class="pl-c1"&gt;'package-archives&lt;/span&gt;
             '(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;melpa&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;https://melpa.org/packages/&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
(&lt;span class="pl-c1"&gt;package-initialize&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;package-refresh-contents&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Download Evil&lt;/span&gt;
(&lt;span class="pl-k"&gt;unless&lt;/span&gt; (&lt;span class="pl-c1"&gt;package-installed-p&lt;/span&gt; &lt;span class="pl-c1"&gt;'evil&lt;/span&gt;)
  (&lt;span class="pl-c1"&gt;package-install&lt;/span&gt; &lt;span class="pl-c1"&gt;'evil&lt;/span&gt;))

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Enable Evil&lt;/span&gt;
(&lt;span class="pl-c1"&gt;require&lt;/span&gt; &lt;span class="pl-c1"&gt;'evil&lt;/span&gt;)
(evil-mode &lt;span class="pl-c1"&gt;1&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-dependencies" class="anchor" aria-hidden="true" href="#dependencies"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Dependencies&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Evil requires Emacs 24.1 or later.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Evil requires &lt;a href="http://www.emacswiki.org/emacs/UndoTree" rel="nofollow"&gt;undo-tree.el&lt;/a&gt; in the
&lt;code&gt;load-path&lt;/code&gt; for linear undo and undo branches.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For the motions &lt;code&gt;g;&lt;/code&gt; &lt;code&gt;g,&lt;/code&gt; and for the last-change-register &lt;code&gt;.&lt;/code&gt;, Evil requires the
&lt;a href="https://github.com/emacs-evil/goto-chg"&gt;goto-chg.el&lt;/a&gt; package,
which provides the functions &lt;code&gt;goto-last-change&lt;/code&gt; and &lt;code&gt;goto-last-change-reverse&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For Emacs 24.1 and 24.2 Evil also requires
&lt;a href="https://elpa.gnu.org/packages/cl-lib.html" rel="nofollow"&gt;cl-lib&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Documentation&lt;/h1&gt;
&lt;p&gt;The latest version of the documentation is readable online
&lt;a href="https://evil.readthedocs.io/en/latest/index.html" rel="nofollow"&gt;here&lt;/a&gt;. It is also
available as
&lt;a href="https://readthedocs.org/projects/evil/downloads/pdf/latest/" rel="nofollow"&gt;PDF&lt;/a&gt; and
as &lt;a href="https://readthedocs.org/projects/evil/downloads/epub/latest/" rel="nofollow"&gt;EPUB&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-mailing-list" class="anchor" aria-hidden="true" href="#mailing-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Mailing list&lt;/h1&gt;
&lt;p&gt;Evil is discussed at the
&lt;a href="http://lists.ourproject.org/cgi-bin/mailman/listinfo/implementations-list" rel="nofollow"&gt;gmane.emacs.vim-emulation&lt;/a&gt;
mailing list.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-irc" class="anchor" aria-hidden="true" href="#irc"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;IRC&lt;/h1&gt;
&lt;p&gt;Visit us on &lt;code&gt;irc.freenode.net #evil-mode&lt;/code&gt;.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-contribution" class="anchor" aria-hidden="true" href="#contribution"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contribution&lt;/h1&gt;
&lt;p&gt;See
&lt;a href="https://github.com/emacs-evil/evil/blob/master/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt;
for guidelines for issues and pull requests.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>emacs-evil</author><guid isPermaLink="false">https://github.com/emacs-evil/evil</guid><pubDate>Thu, 30 Jan 2020 00:08:00 GMT</pubDate></item><item><title>abo-abo/swiper #9 in Emacs Lisp, This week</title><link>https://github.com/abo-abo/swiper</link><description>&lt;p&gt;&lt;i&gt;Ivy - a generic completion frontend for Emacs, Swiper - isearch with an overview, and more. Oh, man!&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;p&gt;&lt;a href="https://travis-ci.org/abo-abo/swiper" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/f13930412aac3d15215dad01d52b6c731292e8d1/68747470733a2f2f7472617669732d63692e6f72672f61626f2d61626f2f7377697065722e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/abo-abo/swiper.svg?branch=master" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;flexible, simple tools for minibuffer completion in Emacs&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This repository contains:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ivy&lt;/strong&gt;, a generic completion mechanism for Emacs.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Counsel&lt;/strong&gt;, a collection of Ivy-enhanced versions of common Emacs
commands.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Swiper&lt;/strong&gt;, an Ivy-enhanced alternative to isearch.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-ivy" class="anchor" aria-hidden="true" href="#ivy"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Ivy&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://melpa.org/#/ivy" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/0b07b95d4ee91c75105920569bc2d03f5f890271/68747470733a2f2f6d656c70612e6f72672f7061636b616765732f6976792d62616467652e737667" alt="MELPA" data-canonical-src="https://melpa.org/packages/ivy-badge.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://stable.melpa.org/#/ivy" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/0dc055002fc3da7f785236986eefb98108f34f51/68747470733a2f2f737461626c652e6d656c70612e6f72672f7061636b616765732f6976792d62616467652e737667" alt="MELPA Stable" data-canonical-src="https://stable.melpa.org/packages/ivy-badge.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ivy is a generic completion mechanism for Emacs. While it operates
similarly to other completion schemes such as &lt;code&gt;icomplete-mode&lt;/code&gt;, Ivy
aims to be more efficient, smaller, simpler, and smoother to use yet
highly customizable.&lt;/p&gt;
&lt;p&gt;To try Ivy, just call &lt;kbd&gt;M-x&lt;/kbd&gt; &lt;code&gt;ivy-mode&lt;/code&gt;. This will enable
generic Ivy completion, including specific completion for file and
buffer names.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installation&lt;/h3&gt;
&lt;p&gt;Install the &lt;code&gt;ivy&lt;/code&gt; package from MELPA / GNU ELPA.&lt;/p&gt;
&lt;p&gt;Users of Debian ≥10 (and derivatives such as Ubuntu ≥18.04) can
install Ivy, Counsel, and Swiper with &lt;code&gt;sudo apt install elpa-counsel&lt;/code&gt;.
To add Hydra support &lt;code&gt;sudo apt install elpa-ivy-hydra&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Documentation&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-manual" class="anchor" aria-hidden="true" href="#manual"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Manual&lt;/h3&gt;
&lt;p&gt;The manual is available as &lt;a href="https://oremacs.com/swiper/" rel="nofollow"&gt;HTML&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;After installing from MELPA, the manual is also available through the &lt;code&gt;(ivy)&lt;/code&gt; Info node.&lt;/p&gt;
&lt;p&gt;The source file for the Info page is
&lt;a href="https://github.com/abo-abo/swiper/blob/master/doc/ivy.org"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-wiki" class="anchor" aria-hidden="true" href="#wiki"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Wiki&lt;/h3&gt;
&lt;p&gt;Ivy and Swiper wiki is here: &lt;a href="https://github.com/abo-abo/swiper/wiki"&gt;the wiki&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-small-config-example" class="anchor" aria-hidden="true" href="#small-config-example"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Small config example&lt;/h3&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(ivy-mode &lt;span class="pl-c1"&gt;1&lt;/span&gt;)
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; ivy-use-virtual-buffers &lt;span class="pl-c1"&gt;t&lt;/span&gt;)
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; enable-recursive-minibuffers &lt;span class="pl-c1"&gt;t&lt;/span&gt;)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; enable this if you want &lt;span class="pl-smi"&gt;`swiper'&lt;/span&gt; to use it&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; (setq search-default-mode #'char-fold-to-regexp)&lt;/span&gt;
(&lt;span class="pl-c1"&gt;global-set-key&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-cce"&gt;\C&lt;/span&gt;-s&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'swiper&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;global-set-key&lt;/span&gt; (&lt;span class="pl-c1"&gt;kbd&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-c C-r&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;'ivy-resume&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;global-set-key&lt;/span&gt; (&lt;span class="pl-c1"&gt;kbd&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&amp;lt;f6&amp;gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;'ivy-resume&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;global-set-key&lt;/span&gt; (&lt;span class="pl-c1"&gt;kbd&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;M-x&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;'counsel-M-x&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;global-set-key&lt;/span&gt; (&lt;span class="pl-c1"&gt;kbd&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-x C-f&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;'counsel-find-file&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;global-set-key&lt;/span&gt; (&lt;span class="pl-c1"&gt;kbd&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&amp;lt;f1&amp;gt; f&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;'counsel-describe-function&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;global-set-key&lt;/span&gt; (&lt;span class="pl-c1"&gt;kbd&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&amp;lt;f1&amp;gt; v&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;'counsel-describe-variable&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;global-set-key&lt;/span&gt; (&lt;span class="pl-c1"&gt;kbd&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&amp;lt;f1&amp;gt; l&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;'counsel-find-library&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;global-set-key&lt;/span&gt; (&lt;span class="pl-c1"&gt;kbd&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&amp;lt;f2&amp;gt; i&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;'counsel-info-lookup-symbol&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;global-set-key&lt;/span&gt; (&lt;span class="pl-c1"&gt;kbd&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&amp;lt;f2&amp;gt; u&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;'counsel-unicode-char&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;global-set-key&lt;/span&gt; (&lt;span class="pl-c1"&gt;kbd&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-c g&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;'counsel-git&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;global-set-key&lt;/span&gt; (&lt;span class="pl-c1"&gt;kbd&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-c j&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;'counsel-git-grep&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;global-set-key&lt;/span&gt; (&lt;span class="pl-c1"&gt;kbd&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-c k&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;'counsel-ag&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;global-set-key&lt;/span&gt; (&lt;span class="pl-c1"&gt;kbd&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-x l&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;'counsel-locate&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;global-set-key&lt;/span&gt; (&lt;span class="pl-c1"&gt;kbd&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-S-o&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;'counsel-rhythmbox&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;define-key&lt;/span&gt; minibuffer-local-map (&lt;span class="pl-c1"&gt;kbd&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-r&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;'counsel-minibuffer-history&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note: parts of this config can be replaced by using &lt;code&gt;counsel-mode&lt;/code&gt;.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-counsel" class="anchor" aria-hidden="true" href="#counsel"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Counsel&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://melpa.org/#/counsel" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/0b1d9741244e07553b3e7edbdd74c5345481216c/68747470733a2f2f6d656c70612e6f72672f7061636b616765732f636f756e73656c2d62616467652e737667" alt="MELPA" data-canonical-src="https://melpa.org/packages/counsel-badge.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://stable.melpa.org/#/counsel" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/b829c1e7ce2494091aae0c6f5cbfc69325b62c03/68747470733a2f2f737461626c652e6d656c70612e6f72672f7061636b616765732f636f756e73656c2d62616467652e737667" alt="MELPA Stable" data-canonical-src="https://stable.melpa.org/packages/counsel-badge.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ivy-mode&lt;/code&gt; ensures that any Emacs command using
&lt;code&gt;completing-read-function&lt;/code&gt; uses ivy for completion.&lt;/p&gt;
&lt;p&gt;Counsel takes this further, providing versions of common Emacs
commands that are customised to make the best use of ivy. For example,
&lt;code&gt;counsel-find-file&lt;/code&gt; has some additional keybindings. Pressing
&lt;kbd&gt;DEL&lt;/kbd&gt; will move you to the parent directory.&lt;/p&gt;
&lt;p&gt;Enabling &lt;code&gt;counsel-mode&lt;/code&gt; remaps built-in Emacs functions that have
counsel replacements:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Emacs command&lt;/th&gt;
&lt;th&gt;Counsel equivalent&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;execute-extended-command&lt;/td&gt;
&lt;td&gt;counsel-M-x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;describe-bindings&lt;/td&gt;
&lt;td&gt;counsel-descbinds&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;describe-function&lt;/td&gt;
&lt;td&gt;counsel-describe-function&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;describe-variable&lt;/td&gt;
&lt;td&gt;counsel-describe-variable&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;apropos-command&lt;/td&gt;
&lt;td&gt;counsel-apropos&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;describe-face&lt;/td&gt;
&lt;td&gt;counsel-describe-face&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;list-faces-display&lt;/td&gt;
&lt;td&gt;counsel-faces&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;find-file&lt;/td&gt;
&lt;td&gt;counsel-find-file&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;find-library&lt;/td&gt;
&lt;td&gt;counsel-find-library&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;imenu&lt;/td&gt;
&lt;td&gt;counsel-imenu&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;load-library&lt;/td&gt;
&lt;td&gt;counsel-load-library&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;load-theme&lt;/td&gt;
&lt;td&gt;counsel-load-theme&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;yank-pop&lt;/td&gt;
&lt;td&gt;counsel-yank-pop&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;info-lookup-symbol&lt;/td&gt;
&lt;td&gt;counsel-info-lookup-symbol&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pop-to-mark-command&lt;/td&gt;
&lt;td&gt;counsel-mark-ring&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bookmark-jump&lt;/td&gt;
&lt;td&gt;counsel-bookmark&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1&gt;&lt;a id="user-content-swiper" class="anchor" aria-hidden="true" href="#swiper"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Swiper&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://melpa.org/#/swiper" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e4db0c28cf6c9e4de9529a34141a0ceeac953afc/68747470733a2f2f6d656c70612e6f72672f7061636b616765732f7377697065722d62616467652e737667" alt="MELPA" data-canonical-src="https://melpa.org/packages/swiper-badge.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://stable.melpa.org/#/swiper" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/3856d8e21ce5c31895a9cdd449701dbac9a5af58/68747470733a2f2f737461626c652e6d656c70612e6f72672f7061636b616765732f7377697065722d62616467652e737667" alt="MELPA Stable" data-canonical-src="https://stable.melpa.org/packages/swiper-badge.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Swiper is an alternative to isearch that uses ivy to show an overview
of all matches.&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/9501632a3893ff3c9ad7cf61ca09311ea5a570a7/68747470733a2f2f6f72656d6163732e636f6d2f646f776e6c6f61642f7377697065722e706e67"&gt;&lt;img src="https://camo.githubusercontent.com/9501632a3893ff3c9ad7cf61ca09311ea5a570a7/68747470733a2f2f6f72656d6163732e636f6d2f646f776e6c6f61642f7377697065722e706e67" alt="swiper.png" data-canonical-src="https://oremacs.com/download/swiper.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A helm version of swiper is also available:
&lt;a href="https://github.com/abo-abo/swiper-helm"&gt;swiper-helm&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-screenshots" class="anchor" aria-hidden="true" href="#screenshots"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Screenshots&lt;/h2&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/5a19441661db376c2b3403e7c2af8d6bb323fd2c/68747470733a2f2f6f72656d6163732e636f6d2f646f776e6c6f61642f6976792d7377697065722d312e706e67"&gt;&lt;img src="https://camo.githubusercontent.com/5a19441661db376c2b3403e7c2af8d6bb323fd2c/68747470733a2f2f6f72656d6163732e636f6d2f646f776e6c6f61642f6976792d7377697065722d312e706e67" alt="ivy-swiper-1.png" data-canonical-src="https://oremacs.com/download/ivy-swiper-1.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There's also a ten minute &lt;a href="https://www.youtube.com/watch?v=VvnJQpTFVDc" rel="nofollow"&gt;video demo&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-frequently-asked-questions" class="anchor" aria-hidden="true" href="#frequently-asked-questions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Frequently asked questions&lt;/h1&gt;
&lt;p&gt;Q: How do I enter an input that matches one of the candidates instead
of this candidate? Example: create a file &lt;code&gt;bar&lt;/code&gt; when a file
&lt;code&gt;barricade&lt;/code&gt; exists in the current directory.&lt;/p&gt;
&lt;p&gt;A: Press &lt;kbd&gt;C-M-j&lt;/kbd&gt;. Alternatively, you can make the prompt line selectable with &lt;code&gt;(setq ivy-use-selectable-prompt t)&lt;/code&gt;.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-contributing" class="anchor" aria-hidden="true" href="#contributing"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contributing&lt;/h1&gt;
&lt;p&gt;Please see the &lt;a href="https://github.com/abo-abo/swiper/blob/master/CONTRIBUTING.org"&gt;guidelines&lt;/a&gt; for reporting issues and opening pull requests.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>abo-abo</author><guid isPermaLink="false">https://github.com/abo-abo/swiper</guid><pubDate>Thu, 30 Jan 2020 00:09:00 GMT</pubDate></item><item><title>emacs-mirror/emacs #10 in Emacs Lisp, This week</title><link>https://github.com/emacs-mirror/emacs</link><description>&lt;p&gt;&lt;i&gt;Mirror of GNU Emacs&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="" data-path="README"&gt;&lt;div class="plain"&gt;&lt;pre style="white-space: pre-wrap"&gt;Copyright (C) 2001-2020 Free Software Foundation, Inc.
See the end of the file for license conditions.


This directory tree holds version 28.0.50 of GNU Emacs, the extensible,
customizable, self-documenting real-time display editor.

The file INSTALL in this directory says how to build and install GNU
Emacs on various systems, once you have unpacked or checked out the
entire Emacs file tree.

See the file etc/NEWS for information on new features and other
user-visible changes in recent versions of Emacs.

The file etc/PROBLEMS contains information on many common problems that
occur in building, installing and running Emacs.

The file CONTRIBUTE contains information on contributing to Emacs as a
developer.

You may encounter bugs in this release.  If you do, please report
them; your bug reports are valuable contributions to the FSF, since
they allow us to notice and fix problems on machines we don't have, or
in code we don't use often.  Please send bug reports to the mailing
list bug-gnu-emacs@gnu.org.  If possible, use M-x report-emacs-bug.

See the "Bugs" section of the Emacs manual for more information on how
to report bugs.  (The file 'BUGS' in this directory explains how you
can find and read that section using the Info files that come with
Emacs.)  For a list of mailing lists related to Emacs, see
&amp;lt;&lt;a href="https://savannah.gnu.org/mail/?group=emacs" rel="nofollow"&gt;https://savannah.gnu.org/mail/?group=emacs&lt;/a&gt;&amp;gt;.  For the complete
list of GNU mailing lists, see &amp;lt;&lt;a href="https://lists.gnu.org/" rel="nofollow"&gt;https://lists.gnu.org/&lt;/a&gt;&amp;gt;.

The 'etc' subdirectory contains several other files, named in capital
letters, which you might consider looking at when installing GNU
Emacs.

The file 'configure' is a shell script to acclimate Emacs to the
oddities of your processor and operating system.  It creates the file
'Makefile' (a script for the 'make' program), which automates the
process of building and installing Emacs.  See INSTALL for more
detailed information.

The file 'configure.ac' is the input used by the autoconf program to
construct the 'configure' script.

The shell script 'autogen.sh' generates 'configure' and other files by
running Autoconf (which in turn uses GNU m4), and configures files in
the .git subdirectory if you are using Git.  If you want to use it,
you will need to install recent versions of these build tools.  This
should be needed only if you edit files like 'configure.ac' that
specify Emacs's autobuild procedure.

The file 'Makefile.in' is a template used by 'configure' to create
'Makefile'.

The file 'make-dist' is a shell script to build a distribution tar
file from the current Emacs tree, containing only those files
appropriate for distribution.  If you make extensive changes to Emacs,
this script will help you distribute your version to others.

There are several subdirectories:

'src'       holds the C code for Emacs (the Emacs Lisp interpreter and
            its primitives, the redisplay code, and some basic editing
            functions).
'lisp'      holds the Emacs Lisp code for Emacs (most everything else).
'leim'      holds the original source files for the generated files
            in lisp/leim.  These form the library of Emacs input methods,
            required to type international characters that can't be
            directly produced by your keyboard.
'lib'       holds source code for libraries used by Emacs and its utilities
'lib-src'   holds the source code for some utility programs for use by or
            with Emacs, like movemail and etags.
'lwlib'     holds the sources of the Lucid Widget Library used on X.
'oldXMenu'  source files from X11R2 XMenu library, used in non-toolkit builds.
'etc'       holds miscellaneous architecture-independent data files Emacs
            uses, like the tutorial text and tool bar images.
            The contents of the 'lisp', 'leim', 'info', and 'doc'
            subdirectories are architecture-independent too.
'info'      holds the Info documentation tree for Emacs.
'doc/emacs' holds the source code for the Emacs Manual.  If you modify the
            manual sources, you will need the 'makeinfo' program to produce
            an updated manual.  'makeinfo' is part of the GNU Texinfo
            package; you need a suitably recent version of Texinfo.
'doc/lispref'   holds the source code for the Emacs Lisp reference manual.
'doc/lispintro' holds the source code for the Introduction to Programming
                in Emacs Lisp manual.
'msdos'     holds configuration files for compiling Emacs under MS-DOS.
'nextstep'  holds instructions and some other files for compiling the
            Nextstep port of Emacs, for GNUstep and macOS Cocoa.
'nt'        holds code and documentation for building Emacs on MS-Windows.
'test'      holds tests for various aspects of Emacs's functionality.
'modules'   holds the modhelp.py helper script.
'admin'     holds files used by Emacs developers, and Unicode data files.
'build-aux' holds auxiliary files used during the build.
'm4'        holds Autoconf macros used for generating the configure script.

   Building Emacs on non-Posix platforms requires tools that aren't part
of the standard distribution of the OS.  The platform-specific README
files and installation instructions should list the required tools.


NOTE ON COPYRIGHT YEARS

In copyright notices where the copyright holder is the Free Software
Foundation, then where a range of years appears, this is an inclusive
range that applies to every year in the range.  For example: 2005-2008
represents the years 2005, 2006, 2007, and 2008.


This file is part of GNU Emacs.

GNU Emacs is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

GNU Emacs is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with GNU Emacs.  If not, see &amp;lt;&lt;a href="https://www.gnu.org/licenses/" rel="nofollow"&gt;https://www.gnu.org/licenses/&lt;/a&gt;&amp;gt;.
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</description><author>emacs-mirror</author><guid isPermaLink="false">https://github.com/emacs-mirror/emacs</guid><pubDate>Thu, 30 Jan 2020 00:10:00 GMT</pubDate></item><item><title>justbur/emacs-which-key #11 in Emacs Lisp, This week</title><link>https://github.com/justbur/emacs-which-key</link><description>&lt;p&gt;&lt;i&gt;Emacs package that displays available keybindings in popup&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="org" data-path="README.org"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-which-key" class="anchor" aria-hidden="true" href="#which-key"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;which-key&lt;/h1&gt;
&lt;p&gt;&lt;a href="http://melpa.org/#/which-key" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/1718bc620b9fa175bdb907b57f40c4871f1fa83d/687474703a2f2f6d656c70612e6f72672f7061636b616765732f77686963682d6b65792d62616467652e737667" alt="http://melpa.org/packages/which-key-badge.svg" data-canonical-src="http://melpa.org/packages/which-key-badge.svg" style="max-width:100%;"&gt;&lt;/a&gt; &lt;a href="http://stable.melpa.org/#/which-key" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/759c0f55d8950702a56c8ac38bb3538f202f0b43/687474703a2f2f737461626c652e6d656c70612e6f72672f7061636b616765732f77686963682d6b65792d62616467652e737667" alt="http://stable.melpa.org/packages/which-key-badge.svg" data-canonical-src="http://stable.melpa.org/packages/which-key-badge.svg" style="max-width:100%;"&gt;&lt;/a&gt; &lt;a href="https://travis-ci.org/justbur/emacs-which-key" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/bcdc010876ff992fdaa74a1f017c0e48acb7e647/68747470733a2f2f7472617669732d63692e6f72672f6a7573746275722f656d6163732d77686963682d6b65792e7376673f6272616e63683d6d6173746572" alt="https://travis-ci.org/justbur/emacs-which-key.svg?branch=master" data-canonical-src="https://travis-ci.org/justbur/emacs-which-key.svg?branch=master" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-recent-changes" class="anchor" aria-hidden="true" href="#recent-changes"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Recent Changes&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-2019-08-01-added-which-key-show-early-on-c-h" class="anchor" aria-hidden="true" href="#2019-08-01-added-which-key-show-early-on-c-h"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2019-08-01: Added &lt;code&gt;which-key-show-early-on-C-h&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Allows one to trigger &lt;code&gt;which-key&lt;/code&gt; on demand, rather than automatically. See
  the docstring and &lt;a href="#manual-activation"&gt;Manual Activation&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-2017-12-13-added-which-key-enable-extended-define-key" class="anchor" aria-hidden="true" href="#2017-12-13-added-which-key-enable-extended-define-key"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2017-12-13: Added &lt;code&gt;which-key-enable-extended-define-key&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Allows for a concise syntax to specify replacement text using &lt;code&gt;define-key&lt;/code&gt;
  or alternatives that use &lt;code&gt;define-key&lt;/code&gt; internally. See the docstring and
  &lt;a href="#custom-string-replacement-options"&gt;Custom String Replacement&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-2017-11-13-added-which-key-show-major-mode" class="anchor" aria-hidden="true" href="#2017-11-13-added-which-key-show-major-mode"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2017-11-13: Added &lt;code&gt;which-key-show-major-mode&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Shows active bindings in current major-mode map.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-introduction" class="anchor" aria-hidden="true" href="#introduction"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Introduction&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;which-key&lt;/code&gt; is a minor mode for Emacs that displays the key bindings
  following your currently entered incomplete command (a prefix) in a
  popup. For example, after enabling the minor mode if you enter &lt;code&gt;C-x&lt;/code&gt; and wait
  for the default of 1 second the minibuffer will expand with all of the
  available key bindings that follow &lt;code&gt;C-x&lt;/code&gt; (or as many as space allows given
  your settings).  This includes prefixes like &lt;code&gt;C-x 8&lt;/code&gt; which are shown in a
  different face. Screenshots of what the popup will look like are included
  below. &lt;code&gt;which-key&lt;/code&gt; started as a rewrite of &lt;a href="https://github.com/kai2nenobu/guide-key"&gt;guide-key-mode&lt;/a&gt;, but the feature
  sets have diverged to a certain extent.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-table-of-contents" class="anchor" aria-hidden="true" href="#table-of-contents"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Table of Contents&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="#which-key"&gt;which-key&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href="#recent-changes"&gt;Recent Changes&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href="#2019-08-01-added-which-key-show-early-on-c-h"&gt;2019-08-01: Added =which-key-show-early-on-C-h=&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href="#2017-12-13-added-which-key-enable-extended-define-key"&gt;2017-12-13: Added =which-key-enable-extended-define-key=&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href="#2017-11-13-added-which-key-show-major-mode"&gt;2017-11-13: Added =which-key-show-major-mode=&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href="#introduction"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#install"&gt;Install&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href="#melpa"&gt;MELPA&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href="#manually"&gt;Manually&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href="#initial-setup"&gt;Initial Setup&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href="#side-window-bottom-option"&gt;Side Window Bottom Option&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href="#side-window-right-option"&gt;Side Window Right Option&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href="#side-window-right-then-bottom"&gt;Side Window Right then Bottom&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href="#minibuffer-option"&gt;Minibuffer Option&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href="#manual-activation"&gt;Manual Activation&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#additional-commands"&gt;Additional Commands&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#special-features-and-configuration-options"&gt;Special Features and Configuration Options&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href="#popup-type-options"&gt;Popup Type Options&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href="#custom-string-replacement-options"&gt;Custom String Replacement Options&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href="#sorting-options"&gt;Sorting Options&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href="#paging-options"&gt;Paging Options&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href="#face-customization-options"&gt;Face Customization Options&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href="#other-options"&gt;Other Options&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href="#support-for-third-party-libraries"&gt;Support for Third-Party Libraries&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href="#key-chord"&gt;Key-chord&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href="#evil-operators"&gt;Evil operators&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href="#god-mode"&gt;God-mode&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href="#more-examples"&gt;More Examples&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href="#nice-display-with-split-frame"&gt;Nice Display with Split Frame&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href="#known-issues"&gt;Known Issues&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#thanks"&gt;Thanks&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-install" class="anchor" aria-hidden="true" href="#install"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Install&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-melpa" class="anchor" aria-hidden="true" href="#melpa"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;MELPA&lt;/h3&gt;
&lt;p&gt;After setting up &lt;a href="http://melpa.org" rel="nofollow"&gt;MELPA&lt;/a&gt; as a repository, use &lt;code&gt;M-x package-install which-key&lt;/code&gt;
  or your preferred method. You will need to call &lt;code&gt;which-key-mode&lt;/code&gt; to enable
  the minor mode of course.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-manually" class="anchor" aria-hidden="true" href="#manually"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Manually&lt;/h3&gt;
&lt;p&gt;Add which-key.el to your &lt;code&gt;load-path&lt;/code&gt; and require. Something like&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;add-to-list&lt;/span&gt; &lt;span class="pl-c1"&gt;'load-path&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;path/to/which-key.el&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;require&lt;/span&gt; &lt;span class="pl-c1"&gt;'which-key&lt;/span&gt;)
(which-key-mode)&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-initial-setup" class="anchor" aria-hidden="true" href="#initial-setup"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Initial Setup&lt;/h2&gt;
&lt;p&gt;No further setup is required if you are happy with the default setup. To try
  other options, there are 3 choices of default configs that are preconfigured
  (then customize to your liking). The main choice is where you want the
  which-key buffer to display. Screenshots of the default options are shown in
  the next sections.&lt;/p&gt;
&lt;p&gt;In each case, we show as many key bindings as we can fit in the buffer within
  the constraints. The constraints are determined by several factors, including
  your Emacs settings, the size of the current Emacs frame, and the which-key
  settings, most of which are described below.&lt;/p&gt;
&lt;p&gt;There are many substitution abilities included, which are quite flexible
  (ability to use regexp for example). This makes which-key very customizable.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-side-window-bottom-option" class="anchor" aria-hidden="true" href="#side-window-bottom-option"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Side Window Bottom Option&lt;/h3&gt;
&lt;p&gt;Popup side window on bottom. This is the current default. To restore this
  setup use&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(which-key-setup-side-window-bottom)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="./img/which-key-bottom.png"&gt;&lt;img src="./img/which-key-bottom.png" alt="./img/which-key-bottom.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-side-window-right-option" class="anchor" aria-hidden="true" href="#side-window-right-option"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Side Window Right Option&lt;/h3&gt;
&lt;p&gt;Popup side window on right. For defaults use&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(which-key-setup-side-window-right)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note the defaults are fairly conservative and will tend to not display on
  narrower frames. If you get a message saying which-key can’t display the
  keys, try making your frame wider or adjusting the defaults related to the
  maximum width (see &lt;code&gt;M-x customize-group which-key&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="./img/which-key-right.png"&gt;&lt;img src="./img/which-key-right.png" alt="./img/which-key-right.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-side-window-right-then-bottom" class="anchor" aria-hidden="true" href="#side-window-right-then-bottom"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Side Window Right then Bottom&lt;/h3&gt;
&lt;p&gt;This is a combination of the previous two choices. It will try to use the
  right side, but if there is no room it will switch to using the bottom,
  which is usually easier to fit keys into. This setting can be helpful if the
  size of the Emacs frame changes frequently, which might be the case if you
  are using a dynamic/tiling window manager.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(which-key-setup-side-window-right-bottom)&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-minibuffer-option" class="anchor" aria-hidden="true" href="#minibuffer-option"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Minibuffer Option&lt;/h3&gt;
&lt;p&gt;Take over the minibuffer. For the recommended configuration use&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(which-key-setup-minibuffer)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="./img/which-key-minibuffer.png"&gt;&lt;img src="./img/which-key-minibuffer.png" alt="./img/which-key-minibuffer.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Note the maximum height of the minibuffer is controlled through the built-in
  variable &lt;code&gt;max-mini-window-height&lt;/code&gt;. Also, the paging commands do not work
  reliably with the minibuffer option. Use the side window on the bottom
  option if you need paging.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-manual-activation" class="anchor" aria-hidden="true" href="#manual-activation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Manual Activation&lt;/h2&gt;
&lt;p&gt;If you only want the &lt;code&gt;which-key&lt;/code&gt; popup when you need it, you can try a setup
  along the following lines&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Allow C-h to trigger which-key before it is done automatically&lt;/span&gt;
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; which-key-show-early-on-C-h &lt;span class="pl-c1"&gt;t&lt;/span&gt;)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; make sure which-key doesn't show normally but refreshes quickly after it is&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; triggered.&lt;/span&gt;
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; which-key-idle-delay &lt;span class="pl-c1"&gt;10000&lt;/span&gt;)
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; which-key-idle-secondary-delay &lt;span class="pl-c1"&gt;0.05&lt;/span&gt;)
(which-key-mode)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will prevent which-key from showing automatically, and allow you to use
  &lt;code&gt;C-h&lt;/code&gt; in the middle of a key sequence to show the &lt;code&gt;which-key&lt;/code&gt; buffer and keep
  it open for the remainder of the key sequence.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-additional-commands" class="anchor" aria-hidden="true" href="#additional-commands"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Additional Commands&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;which-key-show-top-level&lt;/code&gt; will show most key bindings without a prefix. It
    is most and not all, because many are probably not interesting to most
    users.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;which-key-show-major-mode&lt;/code&gt; will show the currently active major-mode
    bindings. It’s similar to &lt;code&gt;C-h m&lt;/code&gt; but in a which-key format. It is also
    aware of evil commands defined using &lt;code&gt;evil-define-key&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;which-key-show-next-page&lt;/code&gt; is the command used for paging.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;which-key-undo&lt;/code&gt; can be used to undo the last keypress when in the middle
    of a key sequence.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-special-features-and-configuration-options" class="anchor" aria-hidden="true" href="#special-features-and-configuration-options"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Special Features and Configuration Options&lt;/h2&gt;
&lt;p&gt;There are more options than the ones described here. All of the configurable
  variables are available through &lt;code&gt;M-x customize-group which-key&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-popup-type-options" class="anchor" aria-hidden="true" href="#popup-type-options"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Popup Type Options&lt;/h3&gt;
&lt;p&gt;There are three different popup types that which-key can use by default to
  display the available keys. The variable &lt;code&gt;which-key-popup-type&lt;/code&gt; decides
  which one is used.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-minibuffer" class="anchor" aria-hidden="true" href="#minibuffer"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;minibuffer&lt;/h4&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;setq&lt;/span&gt; which-key-popup-type &lt;span class="pl-c1"&gt;'minibuffer&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Show keys in the minibuffer.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-side-window" class="anchor" aria-hidden="true" href="#side-window"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;side window&lt;/h4&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;setq&lt;/span&gt; which-key-popup-type &lt;span class="pl-c1"&gt;'side-window&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Show keys in a side window. This popup type has further options:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; location of which-key window. valid values: top, bottom, left, right,&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; or a list of any of the two. If it's a list, which-key will always try&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; the first location first. It will go to the second location if there is&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; not enough room to display any keys in the first location&lt;/span&gt;
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; which-key-side-window-location &lt;span class="pl-c1"&gt;'bottom&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; max width of which-key window, when displayed at left or right.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; valid values: number of columns (integer), or percentage out of current&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; frame's width (float larger than 0 and smaller than 1)&lt;/span&gt;
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; which-key-side-window-max-width &lt;span class="pl-c1"&gt;0.33&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; max height of which-key window, when displayed at top or bottom.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; valid values: number of lines (integer), or percentage out of current&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; frame's height (float larger than 0 and smaller than 1)&lt;/span&gt;
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; which-key-side-window-max-height &lt;span class="pl-c1"&gt;0.25&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content-frame" class="anchor" aria-hidden="true" href="#frame"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;frame&lt;/h4&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;setq&lt;/span&gt; which-key-popup-type &lt;span class="pl-c1"&gt;'frame&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Show keys in a popup frame. This popup won’t work very well in a terminal,
  where only one frame can be shown at any given moment. This popup type has
  further options:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; max width of which-key frame: number of columns (an integer)&lt;/span&gt;
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; which-key-frame-max-width &lt;span class="pl-c1"&gt;60&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; max height of which-key frame: number of lines (an integer)&lt;/span&gt;
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; which-key-frame-max-height &lt;span class="pl-c1"&gt;20&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content-custom" class="anchor" aria-hidden="true" href="#custom"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;custom&lt;/h4&gt;
&lt;p&gt;Write your own display functions! This requires you to write three
  functions, &lt;code&gt;which-key-custom-popup-max-dimensions-function&lt;/code&gt;,
  &lt;code&gt;which-key-custom-show-popup-function&lt;/code&gt;, and
  &lt;code&gt;which-key-custom-hide-popup-function&lt;/code&gt;. Refer to the documentation for
  those variables for more information, but here is a working example (this
  is the current implementation of side-window bottom).&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;setq&lt;/span&gt; which-key-popup-type &lt;span class="pl-c1"&gt;'custom&lt;/span&gt;)
(&lt;span class="pl-k"&gt;defun&lt;/span&gt; &lt;span class="pl-e"&gt;which-key-custom-popup-max-dimensions-function&lt;/span&gt; (&lt;span class="pl-v"&gt;ignore&lt;/span&gt;)
  (&lt;span class="pl-k"&gt;cons&lt;/span&gt;
   (which-key-height-or-percentage-to-height
    which-key-side-window-max-height)
   (&lt;span class="pl-c1"&gt;frame-width&lt;/span&gt;)))
(&lt;span class="pl-k"&gt;defun&lt;/span&gt; &lt;span class="pl-e"&gt;fit-horizonatally&lt;/span&gt; ()
  (&lt;span class="pl-k"&gt;let&lt;/span&gt; ((&lt;span class="pl-c1"&gt;fit-window-to-buffer-horizontally&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;))
    (&lt;span class="pl-c1"&gt;fit-window-to-buffer&lt;/span&gt;)))
(&lt;span class="pl-k"&gt;defun&lt;/span&gt; &lt;span class="pl-e"&gt;which-key-custom-show-popup-function&lt;/span&gt; (&lt;span class="pl-v"&gt;act-popup-dim&lt;/span&gt;)
  (&lt;span class="pl-k"&gt;let*&lt;/span&gt; ((alist '((&lt;span class="pl-c1"&gt;window-width&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; fit-horizontally)
                  (&lt;span class="pl-c1"&gt;window-height&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; fit-window-to-buffer))))
    (&lt;span class="pl-k"&gt;if&lt;/span&gt; (&lt;span class="pl-c1"&gt;get-buffer-window&lt;/span&gt; which-key--buffer)
        (&lt;span class="pl-c1"&gt;display-buffer-reuse-window&lt;/span&gt; which-key--buffer alist)
      (&lt;span class="pl-c1"&gt;display-buffer-in-major-side-window&lt;/span&gt; which-key--buffer
                                           &lt;span class="pl-c1"&gt;'bottom&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt; alist))))
(&lt;span class="pl-k"&gt;defun&lt;/span&gt; &lt;span class="pl-e"&gt;which-key-custom-hide-popup-function&lt;/span&gt; ()
  (&lt;span class="pl-k"&gt;when&lt;/span&gt; (&lt;span class="pl-c1"&gt;buffer-live-p&lt;/span&gt; which-key--buffer)
    (&lt;span class="pl-c1"&gt;quit-windows-on&lt;/span&gt; which-key--buffer)))&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-custom-string-replacement-options" class="anchor" aria-hidden="true" href="#custom-string-replacement-options"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Custom String Replacement Options&lt;/h3&gt;
&lt;p&gt;You can customize the way the keys show in the buffer using three different
  replacement methods, each of which corresponds replacement alist. The basic
  idea of behind each alist is that you specify a selection string in the
  &lt;code&gt;car&lt;/code&gt; of each cons cell and the replacement string in the &lt;code&gt;cdr&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-automatic" class="anchor" aria-hidden="true" href="#automatic"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Automatic&lt;/h4&gt;
&lt;p&gt;A newer option is to set &lt;code&gt;which-key-enable-extended-define-key&lt;/code&gt; which
  advises &lt;code&gt;define-key&lt;/code&gt; to allow which-key to pre-process its arguments. The
  statement&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;define-key&lt;/span&gt; some-map &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;f&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; '(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;foo&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; long-name-for-command-foo))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;is valid in Emacs. Setting this variable makes which-key automatically
  replace the corresponding command name with the text in the string. A nice
  example is in naming prefixes. The following binds “b” to &lt;code&gt;nil&lt;/code&gt; and names
  the binding as a prefix.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;define-key&lt;/span&gt; some-map &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;b&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; '(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;bar-prefix&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content-key-based-replacement" class="anchor" aria-hidden="true" href="#key-based-replacement"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;“Key-Based” replacement&lt;/h4&gt;
&lt;p&gt;Using this method, the description of a key is replaced using a string that
  you provide. Here’s an example&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(which-key-add-key-based-replacements
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-x C-f&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;find files&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;where the first string is the key combination whose description you want to
  replace, in a form suitable for &lt;code&gt;kbd&lt;/code&gt;. For that key combination, which-key
  overwrites the description with the second string, “find files”. In the
  second type of entry you can restrict the replacements to a major-mode. For
  example,&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(which-key-add-major-mode-key-based-replacements &lt;span class="pl-c1"&gt;'org-mode&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-c C-c&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Org C-c C-c&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-c C-a&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Org Attach&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here the first entry is the major-mode followed by a list of the first type
  of entries. In case the same key combination is listed under a major-mode
  and by itself, the major-mode version takes precedence.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-key-and-description-replacement" class="anchor" aria-hidden="true" href="#key-and-description-replacement"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Key and Description replacement&lt;/h4&gt;
&lt;p&gt;The second and third methods target the text used for the keys and the
  descriptions directly. The relevant variable is
  &lt;code&gt;which-key-replacement-alist&lt;/code&gt;.  Here’s an example of one of the default key
  replacements&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;push&lt;/span&gt; '((&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&amp;lt;&lt;span class="pl-cce"&gt;\\&lt;/span&gt;([[:alnum:]-]+&lt;span class="pl-cce"&gt;\\&lt;/span&gt;)&amp;gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;) &lt;span class="pl-k"&gt;.&lt;/span&gt; (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-cce"&gt;\\&lt;/span&gt;1&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;))
      which-key-replacement-alist)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Each element of the outer cons cell is a cons cell of the form &lt;code&gt;(KEY
  . BINDING)&lt;/code&gt;. The &lt;code&gt;car&lt;/code&gt; of the outer cons determines how to match key
  bindings while the &lt;code&gt;cdr&lt;/code&gt; determines how those matches are replaced. See the
  docstring of &lt;code&gt;which-key-replacement-alist&lt;/code&gt; for more information.&lt;/p&gt;
&lt;p&gt;The next example shows how to replace the description.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;push&lt;/span&gt; '((&lt;span class="pl-c1"&gt;nil&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;left&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-k"&gt;.&lt;/span&gt; (&lt;span class="pl-c1"&gt;nil&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;lft&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)) which-key-replacement-alist)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here is an example of using key replacement to include Unicode characters
  in the results. Unfortunately, using Unicode characters may upset the
  alignment of the which-key buffer, because Unicode characters can have
  different widths even in a monospace font and alignment is based on
  character width.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;add-to-list&lt;/span&gt; &lt;span class="pl-c1"&gt;'which-key-replacement-alist&lt;/span&gt; '((&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;TAB&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;) &lt;span class="pl-k"&gt;.&lt;/span&gt; (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;↹&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;))
(&lt;span class="pl-c1"&gt;add-to-list&lt;/span&gt; &lt;span class="pl-c1"&gt;'which-key-replacement-alist&lt;/span&gt; '((&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;RET&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;) &lt;span class="pl-k"&gt;.&lt;/span&gt; (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;⏎&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;))
(&lt;span class="pl-c1"&gt;add-to-list&lt;/span&gt; &lt;span class="pl-c1"&gt;'which-key-replacement-alist&lt;/span&gt; '((&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;DEL&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;) &lt;span class="pl-k"&gt;.&lt;/span&gt; (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;⇤&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;))
(&lt;span class="pl-c1"&gt;add-to-list&lt;/span&gt; &lt;span class="pl-c1"&gt;'which-key-replacement-alist&lt;/span&gt; '((&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SPC&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;) &lt;span class="pl-k"&gt;.&lt;/span&gt; (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;␣&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;cdr&lt;/code&gt; may also be a function that receives a &lt;code&gt;cons&lt;/code&gt; of the form &lt;code&gt;(KEY
  . BINDING)&lt;/code&gt; and produces a &lt;code&gt;cons&lt;/code&gt; of the same form. This allows for
  interesting ideas like this one suggested by &lt;a href="https://github.com/pdcawley"&gt;@pdcawley&lt;/a&gt; in &lt;a href="https://github.com/justbur/emacs-which-key/pull/147"&gt;PR #147&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;push&lt;/span&gt; (&lt;span class="pl-k"&gt;cons&lt;/span&gt; '(&lt;span class="pl-c1"&gt;nil&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;paredit-mode&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
            (&lt;span class="pl-k"&gt;lambda&lt;/span&gt; (&lt;span class="pl-v"&gt;kb&lt;/span&gt;)
              (&lt;span class="pl-k"&gt;cons&lt;/span&gt; (&lt;span class="pl-k"&gt;car&lt;/span&gt; kb)
                    (&lt;span class="pl-k"&gt;if&lt;/span&gt; paredit-mode
                        &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;[x] paredit-mode&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
                      &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;[ ] paredit-mode&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))))
      which-key-replacement-alist)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The box will be checked if &lt;code&gt;paredit-mode&lt;/code&gt; is currently active.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-sorting-options" class="anchor" aria-hidden="true" href="#sorting-options"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Sorting Options&lt;/h3&gt;
&lt;p&gt;By default the output is sorted by the key in a custom order. The default
  order is to sort lexicographically within each “class” of key, where the
  classes and their order are&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Special (SPC, TAB, ...) &amp;lt; Single Character (ASCII) (a, ...) &amp;lt; Modifier (C-, M-, ...) &amp;lt; Other&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;You can control the order by setting this variable. This also shows the
  other available options.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; default&lt;/span&gt;
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; which-key-sort-order &lt;span class="pl-c1"&gt;'which-key-key-order&lt;/span&gt;)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; same as default, except single characters are sorted alphabetically&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; (setq which-key-sort-order 'which-key-key-order-alpha)&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; same as default, except all prefix keys are grouped together at the end&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; (setq which-key-sort-order 'which-key-prefix-then-key-order)&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; same as default, except all keys from local maps shown first&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; (setq which-key-sort-order 'which-key-local-then-key-order)&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; sort based on the key description ignoring case&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; (setq which-key-sort-order 'which-key-description-order)&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-paging-options" class="anchor" aria-hidden="true" href="#paging-options"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Paging Options&lt;/h3&gt;
&lt;p&gt;There are at least several prefixes that have many keys bound to them, like
  &lt;code&gt;C-x&lt;/code&gt;. which-key displays as many keys as it can given your settings, but
  for these prefixes this may not be enough. The paging feature gives you the
  ability to bind a key to the function &lt;code&gt;which-key-C-h-dispatch&lt;/code&gt; which will
  allow you to cycle through the pages without changing the key sequence you
  were in the middle of typing. There are two slightly different ways of doing
  this.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-method-1-default-using-c-h-or-help-char" class="anchor" aria-hidden="true" href="#method-1-default-using-c-h-or-help-char"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Method 1 (default): Using C-h (or &lt;code&gt;help-char&lt;/code&gt;)&lt;/h4&gt;
&lt;p&gt;This is the easiest way, and is turned on by default. Use&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;setq&lt;/span&gt; which-key-use-C-h-commands &lt;span class="pl-c1"&gt;nil&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to disable the behavior (this will only take effect after toggling
  which-key-mode if it is already enabled). &lt;code&gt;C-h&lt;/code&gt; can be used with any prefix
  to switch pages when there are multiple pages of keys. This changes the
  default behavior of Emacs which is to show a list of key bindings that
  apply to a prefix.  For example, if you were to type &lt;code&gt;C-x C-h&lt;/code&gt; you would
  get a list of commands that follow &lt;code&gt;C-x&lt;/code&gt;. This uses which-key instead to
  show those keys, and unlike the Emacs default saves the incomplete prefix
  that you just entered so that the next keystroke can complete the command.&lt;/p&gt;
&lt;p&gt;The commands are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Cycle through the pages forward with &lt;code&gt;n&lt;/code&gt; (or &lt;code&gt;C-n&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Cycle backwards with &lt;code&gt;p&lt;/code&gt; (or &lt;code&gt;C-p&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Undo the last entered key (!) with &lt;code&gt;u&lt;/code&gt; (or &lt;code&gt;C-u&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Call the default command bound to &lt;code&gt;C-h&lt;/code&gt;, usually
    &lt;code&gt;describe-prefix-bindings&lt;/code&gt;, with &lt;code&gt;h&lt;/code&gt; (or &lt;code&gt;C-h&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is especially useful for those who like &lt;code&gt;helm-descbinds&lt;/code&gt; but also want to
  use &lt;code&gt;C-h&lt;/code&gt; as their which-key paging key.&lt;/p&gt;
&lt;p&gt;Note &lt;code&gt;C-h&lt;/code&gt; is by default equivalent to &lt;code&gt;?&lt;/code&gt; in this context.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-method-2-bind-your-own-keys" class="anchor" aria-hidden="true" href="#method-2-bind-your-own-keys"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Method 2: Bind your own keys&lt;/h4&gt;
&lt;p&gt;Essentially, all you need to do for a prefix like &lt;code&gt;C-x&lt;/code&gt; is the following
  which will bind &lt;code&gt;&amp;lt;f5&amp;gt;&lt;/code&gt; to the relevant command.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;define-key&lt;/span&gt; which-key-mode-map (&lt;span class="pl-c1"&gt;kbd&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-x &amp;lt;f5&amp;gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;'which-key-C-h-dispatch&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is completely equivalent to&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;setq&lt;/span&gt; which-key-paging-prefixes '(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-x&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; which-key-paging-key &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&amp;lt;f5&amp;gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;where the latter are provided for convenience if you have a lot of
  prefixes.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-face-customization-options" class="anchor" aria-hidden="true" href="#face-customization-options"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Face Customization Options&lt;/h3&gt;
&lt;p&gt;The faces that which-key uses are&lt;/p&gt;
&lt;table&gt;
  &lt;tbody&gt;&lt;tr&gt;&lt;th&gt;Face&lt;/th&gt;&lt;th&gt;Applied To&lt;/th&gt;&lt;th&gt;Default Definition&lt;/th&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;which-key-key-face&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Every key sequence&lt;/td&gt;&lt;td&gt;&lt;code&gt;:inherit font-lock-constant-face&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;which-key-separator-face&lt;/code&gt;&lt;/td&gt;&lt;td&gt;The separator (→)&lt;/td&gt;&lt;td&gt;&lt;code&gt;:inherit font-lock-comment-face&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;which-key-note-face&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Hints and notes&lt;/td&gt;&lt;td&gt;&lt;code&gt;:inherit which-key-separator-face&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;which-key-special-key-face&lt;/code&gt;&lt;/td&gt;&lt;td&gt;User-defined special keys&lt;/td&gt;&lt;td&gt;&lt;code&gt;:inherit which-key-key-face :inverse-video t :weight bold&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;which-key-group-description-face&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Command groups (i.e, keymaps)&lt;/td&gt;&lt;td&gt;&lt;code&gt;:inherit font-lock-keyword-face&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;which-key-command-description-face&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Commands not in local-map&lt;/td&gt;&lt;td&gt;&lt;code&gt;:inherit font-lock-function-name-face&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;which-key-local-map-description-face&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Commands in local-map&lt;/td&gt;&lt;td&gt;&lt;code&gt;:inherit which-key-command-description-face&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;The last two deserve some explanation. A command lives in one of many possible
  keymaps. You can distinguish between local maps, which depend on the buffer you
  are in, which modes are active, etc., and the global map which applies
  everywhere. It might be useful for you to distinguish between the two. One way
  to do this is to remove the default face from
  &lt;code&gt;which-key-command-description-face&lt;/code&gt; like this&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;set-face-attribute&lt;/span&gt; &lt;span class="pl-c1"&gt;'which-key-command-description-face&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt; &lt;span class="pl-c1"&gt;:inherit&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;another is to make the local map keys appear in bold&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;set-face-attribute&lt;/span&gt; &lt;span class="pl-c1"&gt;'which-key-local-map-description-face&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt; &lt;span class="pl-c1"&gt;:weight&lt;/span&gt; &lt;span class="pl-c1"&gt;'bold&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can also use &lt;code&gt;M-x customize-face&lt;/code&gt; to customize any of the above faces to
  your liking.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-other-options" class="anchor" aria-hidden="true" href="#other-options"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Other Options&lt;/h3&gt;
&lt;p&gt;The options below are also available through customize. Their defaults are
  shown.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Set the time delay (in seconds) for the which-key popup to appear. A value of&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; zero might cause issues so a non-zero value is recommended.&lt;/span&gt;
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; which-key-idle-delay &lt;span class="pl-c1"&gt;1.0&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Set the maximum length (in characters) for key descriptions (commands or&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; prefixes). Descriptions that are longer are truncated and have ".." added.&lt;/span&gt;
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; which-key-max-description-length &lt;span class="pl-c1"&gt;27&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Use additional padding between columns of keys. This variable specifies the&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; number of spaces to add to the left of each column.&lt;/span&gt;
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; which-key-add-column-padding &lt;span class="pl-c1"&gt;0&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; The maximum number of columns to display in the which-key buffer. nil means&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; don't impose a maximum.&lt;/span&gt;
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; which-key-max-display-columns &lt;span class="pl-c1"&gt;nil&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Set the separator used between keys and descriptions. Change this setting to&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; an ASCII character if your font does not show the default arrow. The second&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; setting here allows for extra padding for Unicode characters. which-key uses&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; characters as a means of width measurement, so wide Unicode characters can&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; throw off the calculation.&lt;/span&gt;
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; which-key-separator &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt; → &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; )
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; which-key-unicode-correction &lt;span class="pl-c1"&gt;3&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Set the prefix string that will be inserted in front of prefix commands&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; (i.e., commands that represent a sub-map).&lt;/span&gt;
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; which-key-prefix-prefix &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;+&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; )

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Set the special keys. These are automatically truncated to one character and&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; have which-key-special-key-face applied. Disabled by default. An example&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; setting is&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; (setq which-key-special-keys '("SPC" "TAB" "RET" "ESC" "DEL"))&lt;/span&gt;
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; which-key-special-keys &lt;span class="pl-c1"&gt;nil&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Show the key prefix on the left, top, or bottom (nil means hide the prefix).&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; The prefix consists of the keys you have typed so far. which-key also shows&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; the page information along with the prefix.&lt;/span&gt;
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; which-key-show-prefix &lt;span class="pl-c1"&gt;'left&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Set to t to show the count of keys shown vs. total keys in the mode line.&lt;/span&gt;
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; which-key-show-remaining-keys &lt;span class="pl-c1"&gt;nil&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-support-for-third-party-libraries" class="anchor" aria-hidden="true" href="#support-for-third-party-libraries"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Support for Third-Party Libraries&lt;/h2&gt;
&lt;p&gt;Some support is provided for third-party libraries which don’t use standard
  methods of looking up commands. Some of these need to be enabled
  explicitly. This code includes some hacks, so please report any problems.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-key-chord" class="anchor" aria-hidden="true" href="#key-chord"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Key-chord&lt;/h3&gt;
&lt;p&gt;Enabled by default.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-evil-operators" class="anchor" aria-hidden="true" href="#evil-operators"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Evil operators&lt;/h3&gt;
&lt;p&gt;Evil motions and text objects following an operator like &lt;code&gt;d&lt;/code&gt; are not all
  looked up in a standard way. Support is controlled through
  &lt;code&gt;which-key-allow-evil-operators&lt;/code&gt; which should be non-nil if evil is loaded
  before which-key and through &lt;code&gt;which-key-show-operator-state-maps&lt;/code&gt; which
  needs to be enabled explicitly because it is more of a hack. The former
  allows for the inner and outer text object maps to show, while the latter
  shows motions as well.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-god-mode" class="anchor" aria-hidden="true" href="#god-mode"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;God-mode&lt;/h3&gt;
&lt;p&gt;Call &lt;code&gt;(which-key-enable-god-mode-support)&lt;/code&gt; after loading god-mode to enable
  support for god-mode key sequences. This is new and experimental, so please
  report any issues.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-more-examples" class="anchor" aria-hidden="true" href="#more-examples"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;More Examples&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-nice-display-with-split-frame" class="anchor" aria-hidden="true" href="#nice-display-with-split-frame"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Nice Display with Split Frame&lt;/h3&gt;
&lt;p&gt;Unlike guide-key, which-key looks good even if the frame is split into
  several windows.&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="./img/which-key-right-split.png"&gt;&lt;img src="./img/which-key-right-split.png" alt="./img/which-key-right-split.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="./img/which-key-bottom-split.png"&gt;&lt;img src="./img/which-key-bottom-split.png" alt="./img/which-key-bottom-split.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-known-issues" class="anchor" aria-hidden="true" href="#known-issues"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Known Issues&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;A few users have reported crashes related to which-key popups when quitting
    a key sequence with &lt;code&gt;C-g&lt;/code&gt;. A possible fix is discussed in &lt;a href="https://github.com/justbur/emacs-which-key/issues/130"&gt;this issue&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-thanks" class="anchor" aria-hidden="true" href="#thanks"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Thanks&lt;/h2&gt;
&lt;p&gt;Special thanks to&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://github.com/bmag"&gt;@bmag&lt;/a&gt; for helping with the initial development and finding many bugs.&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github/iqbalansari" rel="nofollow"&gt;@iqbalansari&lt;/a&gt; who among other things adapted the code to make
    &lt;code&gt;which-key-show-top-level&lt;/code&gt; possible.&lt;/li&gt;
&lt;/ul&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>justbur</author><guid isPermaLink="false">https://github.com/justbur/emacs-which-key</guid><pubDate>Thu, 30 Jan 2020 00:11:00 GMT</pubDate></item><item><title>emacs-lsp/lsp-mode #12 in Emacs Lisp, This week</title><link>https://github.com/emacs-lsp/lsp-mode</link><description>&lt;p&gt;&lt;i&gt;Emacs client/library for the Language Server Protocol&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="org" data-path="README.org"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;p&gt;&lt;a href="https://melpa.org/#/lsp-mode" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/9af67d09707b47dd26115a48505d481f9dcdd805/68747470733a2f2f6d656c70612e6f72672f7061636b616765732f6c73702d6d6f64652d62616467652e737667" alt="https://melpa.org/packages/lsp-mode-badge.svg" data-canonical-src="https://melpa.org/packages/lsp-mode-badge.svg" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a href="https://stable.melpa.org/#/lsp-mode" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/7a2cc5cd5fb1a171dde8e45435a353f849853123/68747470733a2f2f737461626c652e6d656c70612e6f72672f7061636b616765732f6c73702d6d6f64652d62616467652e737667" alt="https://stable.melpa.org/packages/lsp-mode-badge.svg" data-canonical-src="https://stable.melpa.org/packages/lsp-mode-badge.svg" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a href="https://gitter.im/emacs-lsp/lsp-mode" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/40a1fe7a717b706a101e6e1d917dfdb3f422a8c3/68747470733a2f2f6261646765732e6769747465722e696d2f656d6163732d6c73702f6c73702d6d6f64652e737667" alt="https://badges.gitter.im/emacs-lsp/lsp-mode.svg" data-canonical-src="https://badges.gitter.im/emacs-lsp/lsp-mode.svg" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a href="https://travis-ci.org/emacs-lsp/lsp-mode" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/5674691682ca175709f1682ede1931f44a188aef/68747470733a2f2f7472617669732d63692e6f72672f656d6163732d6c73702f6c73702d6d6f64652e7376673f6272616e63683d6d6173746572" alt="https://travis-ci.org/emacs-lsp/lsp-mode.svg?branch=master" data-canonical-src="https://travis-ci.org/emacs-lsp/lsp-mode.svg?branch=master" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a href="https://coveralls.io/github/emacs-lsp/lsp-mode" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/536576b840965fd3ec331aeec141a1dc36469075/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f656d6163732d6c73702f6c73702d6d6f64652f62616467652e737667" alt="https://coveralls.io/repos/github/emacs-lsp/lsp-mode/badge.svg" data-canonical-src="https://coveralls.io/repos/github/emacs-lsp/lsp-mode/badge.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="examples/logo.png"&gt;&lt;img src="examples/logo.png" alt="examples/logo.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-language-server-protocol-support-for-emacs" class="anchor" aria-hidden="true" href="#language-server-protocol-support-for-emacs"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Language Server Protocol Support for Emacs&lt;/h1&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="examples/head.png"&gt;&lt;img src="examples/head.png" alt="examples/head.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-table-of-contents" class="anchor" aria-hidden="true" href="#table-of-contents"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Table of Contents&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="#language-server-protocol-support-for-emacs"&gt;Language Server Protocol Support for Emacs&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href="#why"&gt;Why?&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#overview"&gt;Overview&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#installation"&gt;Installation&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href="#install-via-melpa"&gt;Install via melpa&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href="#configuration"&gt;Configuration&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href="#install-language-server"&gt;Install language server&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href="#configure-lsp-mode"&gt;Configure lsp-mode&lt;/a&gt;
            &lt;ul&gt;
              &lt;li&gt;&lt;a href="#vanilla-emacs"&gt;Vanilla Emacs&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href="#spacemacs"&gt;Spacemacs&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href="#use-package"&gt;use-package&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href="#docker"&gt;Docker&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;&lt;a href="#how-does-it-work"&gt;How does it work?&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href="#supported-languages"&gt;Supported languages&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#commands"&gt;Commands&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href="#which-key-integration"&gt;which-key integration&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href="#settings"&gt;Settings&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#screenshots"&gt;Screenshots&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#extensions"&gt;Extensions&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href="#tramp"&gt;TRAMP&lt;/a&gt;
            &lt;ul&gt;
              &lt;li&gt;&lt;a href="#how-does-it-work-1"&gt;How does it work?&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href="#sample-configuration"&gt;Sample configuration&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href="#dealing-with-stderr"&gt;Dealing with stderr&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href="#limitations"&gt;Limitations&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href="#file-watches"&gt;File watches&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href="#contributions"&gt;Contributions&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href="#members"&gt;Members&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href="#troubleshooting"&gt;Troubleshooting&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#adding-support-for-languages"&gt;Adding support for languages&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href="#registering-server"&gt;Registering server&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href="#sections"&gt;Sections&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href="#faq"&gt;FAQ&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#see-also"&gt;See also&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-why" class="anchor" aria-hidden="true" href="#why"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Why?&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;g-emoji class="g-emoji" alias="heart" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2764.png"&gt;❤️&lt;/g-emoji&gt; &lt;b&gt;Community Driven&lt;/b&gt;&lt;/li&gt;
  &lt;li&gt;&lt;g-emoji class="g-emoji" alias="gem" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f48e.png"&gt;💎&lt;/g-emoji&gt; &lt;b&gt;Fully featured&lt;/b&gt; - supports &lt;b&gt;all&lt;/b&gt; features in Language Server Protocol v3.14.&lt;/li&gt;
  &lt;li&gt;&lt;g-emoji class="g-emoji" alias="rocket" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f680.png"&gt;🚀&lt;/g-emoji&gt; &lt;b&gt;Easy to configure&lt;/b&gt; - works out of the box and automatically upgrades if additional packages are present&lt;/li&gt;
  &lt;li&gt;&lt;g-emoji class="g-emoji" alias="star2" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f31f.png"&gt;🌟&lt;/g-emoji&gt; &lt;b&gt;Flexible&lt;/b&gt; - could be configured as full-blown IDE with flashy UI or minimal distraction free&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-overview" class="anchor" aria-hidden="true" href="#overview"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Overview&lt;/h2&gt;
&lt;p&gt;Client for &lt;a href="https://github.com/Microsoft/language-server-protocol/"&gt;Language Server Protocol&lt;/a&gt; (v3.14). &lt;a href="https://github.com/emacs-lsp/lsp-mode"&gt;lsp-mode&lt;/a&gt; aims to provide IDE-like experience by providing optional integration with the most popular Emacs packages like &lt;code&gt;company&lt;/code&gt;, &lt;code&gt;flycheck&lt;/code&gt; and &lt;code&gt;projectile&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Non-blocking asynchronous calls&lt;/li&gt;
  &lt;li&gt;Real-time Diagnostics/linting (via builtin &lt;code&gt;flymake&lt;/code&gt; when Emacs &amp;gt; 26, requires flymake&amp;gt;=1.0.5 or &lt;a href="https://github.com/flycheck/flycheck"&gt;flycheck&lt;/a&gt;/&lt;a href="https://github.com/emacs-lsp/lsp-ui"&gt;lsp-ui&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Code completion - using &lt;a href="https://github.com/tigersoldier/company-lsp"&gt;company-lsp&lt;/a&gt; or builtin &lt;code&gt;completion-at-point&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Hovers - using &lt;a href="https://github.com/emacs-lsp/lsp-ui"&gt;lsp-ui&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Code actions - using &lt;code&gt;lsp-execute-code-action&lt;/code&gt; or &lt;a href="https://github.com/emacs-lsp/lsp-ui"&gt;lsp-ui&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Code outline - using builtin &lt;a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Imenu.html" rel="nofollow"&gt;imenu&lt;/a&gt; or &lt;code&gt;helm-imenu&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Code navigation - using builtin &lt;a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Xref.html" rel="nofollow"&gt;xref&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Code lens (references/implementations) - using builtin &lt;a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Xref.html" rel="nofollow"&gt;xref&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Symbol highlights&lt;/li&gt;
  &lt;li&gt;Formatting&lt;/li&gt;
  &lt;li&gt;Semantic highlighting (as currently implemented by JDT LS and unreleased builds of clangd, cf. &lt;a href="https://github.com/microsoft/vscode-languageserver-node/pull/367"&gt;Semantic highlighting spec&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Debugger - &lt;a href="https://github.com/yyoncho/dap-mode/"&gt;dap-mode&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Helm integration - &lt;a href="https://github.com/emacs-lsp/helm-lsp/"&gt;helm-lsp&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Ivy integration - &lt;a href="https://github.com/emacs-lsp/lsp-ivy/"&gt;lsp-ivy&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Treemacs integration - &lt;a href="https://github.com/emacs-lsp/lsp-treemacs"&gt;lsp-treemacs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Semantic highlighting (as currently implemented by JDT LS and unreleased builds of clangd, cf. &lt;a href="https://github.com/microsoft/vscode-languageserver-node/pull/367"&gt;Semantic highlighting spec&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/justbur/emacs-which-key/"&gt;which-key&lt;/a&gt; integration for better discovery&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installation&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-install-via-melpa" class="anchor" aria-hidden="true" href="#install-via-melpa"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Install via melpa&lt;/h3&gt;
&lt;p&gt;The recommended way to install &lt;code&gt;lsp-mode&lt;/code&gt; is via &lt;code&gt;package.el&lt;/code&gt; - the built-in package manager in Emacs. &lt;code&gt;lsp-mode&lt;/code&gt; is available on the two major &lt;code&gt;package.el&lt;/code&gt; community maintained repos - &lt;a href="http://stable.melpa.org" rel="nofollow"&gt;MELPA Stable&lt;/a&gt; and &lt;a href="http://melpa.org" rel="nofollow"&gt;MELPA&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;M-x &lt;code&gt;package-install&lt;/code&gt; [RET] &lt;code&gt;lsp-mode&lt;/code&gt; [RET]&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-configuration" class="anchor" aria-hidden="true" href="#configuration"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Configuration&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-install-language-server" class="anchor" aria-hidden="true" href="#install-language-server"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Install language server&lt;/h3&gt;
&lt;p&gt;Check the table bellow with the list of supported servers and the corresponding instructions on how to install the server.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-configure-lsp-mode" class="anchor" aria-hidden="true" href="#configure-lsp-mode"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Configure lsp-mode&lt;/h3&gt;
&lt;h4&gt;&lt;a id="user-content-vanilla-emacs" class="anchor" aria-hidden="true" href="#vanilla-emacs"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Vanilla Emacs&lt;/h4&gt;
&lt;p&gt;You could go minimal and use &lt;code&gt;lsp-mode&lt;/code&gt; as it is without external packages with the built-in &lt;code&gt;flymake&lt;/code&gt; and &lt;code&gt;completion-at-point&lt;/code&gt; or you could install the following extensions for better experience:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;install &lt;a href="https://github.com/emacs-lsp/lsp-ui"&gt;lsp-ui&lt;/a&gt; for &lt;a href="https://github.com/flycheck/flycheck"&gt;flycheck&lt;/a&gt; integration and higher level UI modules.&lt;/li&gt;
  &lt;li&gt;install &lt;a href="https://github.com/tigersoldier/company-lsp"&gt;company-lsp&lt;/a&gt; if you want to use &lt;code&gt;company-mode&lt;/code&gt; for completion.&lt;/li&gt;
  &lt;li&gt;install &lt;a href="https://github.com/emacs-lsp/lsp-treemacs"&gt;lsp-treemacs&lt;/a&gt; for various three based UI controls (symbols, errors overview, call hierarchy, etc.)&lt;/li&gt;
  &lt;li&gt;install &lt;a href="https://github.com/emacs-lsp/helm-lsp"&gt;helm-lsp&lt;/a&gt; provides on type completion afternative of &lt;code&gt;xref-apropos&lt;/code&gt; using &lt;code&gt;helm&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;install &lt;a href="https://github.com/emacs-lsp/lsp-ivy"&gt;lsp-ivy&lt;/a&gt; provides on type completion afternative of &lt;code&gt;xref-apropos&lt;/code&gt; using &lt;code&gt;helm&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;install &lt;a href="https://github.com/emacs-lsp/dap-mode"&gt;dap-mode&lt;/a&gt; if your language is supported by the debugger.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; if you want to change prefix for lsp-mode keybindings.&lt;/span&gt;
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; lsp-keymap-prefix &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;s-l&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)

(&lt;span class="pl-c1"&gt;require&lt;/span&gt; &lt;span class="pl-c1"&gt;'lsp-mode&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;add-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;'XXX-mode-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;#&lt;span class="pl-c1"&gt;'lsp&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;where &lt;code&gt;XXX&lt;/code&gt; could be major mode like &lt;code&gt;python&lt;/code&gt;, &lt;code&gt;java&lt;/code&gt;, &lt;code&gt;c++&lt;/code&gt;. Alternatively, if you want to minimize you configuration you may use &lt;code&gt;prog-mode-hook&lt;/code&gt;. In case you do that, &lt;code&gt;lsp&lt;/code&gt; will try to start for each programming mode and echo a message when there is no client registered for the current mode or if the corresponding server is not present. In addition, &lt;code&gt;lsp-mode&lt;/code&gt; will automatically detect and configure &lt;a href="https://github.com/emacs-lsp/lsp-ui"&gt;lsp-ui&lt;/a&gt; and &lt;a href="https://github.com/tigersoldier/company-lsp"&gt;company-lsp&lt;/a&gt;. To turn off that behavior you could set &lt;code&gt;lsp-auto-configure&lt;/code&gt; to &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To defer LSP server startup (and DidOpen notifications) until the buffer is visible you can use &lt;code&gt;lsp-deferred&lt;/code&gt; instead of &lt;code&gt;lsp&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;add-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;'XXX-mode-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;#&lt;span class="pl-c1"&gt;'lsp-deferred&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content-spacemacs" class="anchor" aria-hidden="true" href="#spacemacs"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Spacemacs&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://github.com/emacs-lsp/lsp-mode"&gt;lsp-mode&lt;/a&gt; is included in spacemacs develop branch. Add &lt;code&gt;lsp&lt;/code&gt; to &lt;code&gt;dotspacemacs-configuration-layers&lt;/code&gt; and configure the language that you want to use to be backed by &lt;code&gt;lsp&lt;/code&gt; backend.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-use-package" class="anchor" aria-hidden="true" href="#use-package"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;use-package&lt;/h4&gt;
&lt;p&gt;Replace &lt;code&gt;(require 'lsp-mode)&lt;/code&gt; with the following if you use use-package.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; lsp-mode
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:init&lt;/span&gt; (&lt;span class="pl-k"&gt;setq&lt;/span&gt; lsp-keymap-prefix &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;s-l&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
  &lt;span class="pl-c1"&gt;:hook&lt;/span&gt; (&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; replace XXX-mode with concrete major-mode(e. g. python-mode)&lt;/span&gt;
         (XXX-mode &lt;span class="pl-k"&gt;.&lt;/span&gt; lsp)
         &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; if you want which-key integration&lt;/span&gt;
         (lsp-mode &lt;span class="pl-k"&gt;.&lt;/span&gt; lsp-enable-which-key-integration))
  &lt;span class="pl-c1"&gt;:commands&lt;/span&gt; lsp)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; optionally&lt;/span&gt;
(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; lsp-ui &lt;span class="pl-c1"&gt;:commands&lt;/span&gt; lsp-ui-mode)
(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; company-lsp &lt;span class="pl-c1"&gt;:commands&lt;/span&gt; company-lsp)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; if you are helm user&lt;/span&gt;
(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; helm-lsp &lt;span class="pl-c1"&gt;:commands&lt;/span&gt; helm-lsp-workspace-symbol)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; if you are ivy user&lt;/span&gt;
(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; lsp-ivy &lt;span class="pl-c1"&gt;:commands&lt;/span&gt; lsp-ivy-workspace-symbol)
(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; lsp-treemacs &lt;span class="pl-c1"&gt;:commands&lt;/span&gt; lsp-treemacs-errors-list)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; optionally if you want to use debugger&lt;/span&gt;
(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; dap-mode)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; (use-package dap-LANGUAGE) to load the dap adapter for your language&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; optional if you want which-key integration&lt;/span&gt;
(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; which-key
  &lt;span class="pl-c1"&gt;:config&lt;/span&gt;
  (which-key-mode)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To defer LSP server startup (and DidOpen notifications) until the buffer is visible you can use &lt;code&gt;lsp-deferred&lt;/code&gt; instead of &lt;code&gt;lsp&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; lsp-mode
  &lt;span class="pl-c1"&gt;:hook&lt;/span&gt; (XXX-mode &lt;span class="pl-k"&gt;.&lt;/span&gt; lsp-deferred)
  &lt;span class="pl-c1"&gt;:commands&lt;/span&gt; (lsp lsp-deferred))&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content-docker" class="anchor" aria-hidden="true" href="#docker"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Docker&lt;/h4&gt;
&lt;p&gt;Refer to &lt;a href="https://github.com/emacs-lsp/lsp-docker/"&gt;lsp-docker&lt;/a&gt; README which provide a guide how you can run &lt;code&gt;lsp-mode&lt;/code&gt; in &lt;code&gt;docker&lt;/code&gt; container.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-how-does-it-work" class="anchor" aria-hidden="true" href="#how-does-it-work"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;How does it work?&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;lsp-mode&lt;/code&gt; has predefined list of server configurations (loaded in &lt;code&gt;lsp-clients.el&lt;/code&gt;) containing a mapping from &lt;code&gt;major-mode&lt;/code&gt; to the server configuration or by using activation function. In addition to the default server configuration located in &lt;code&gt;lsp-clients.el&lt;/code&gt; there are few languages servers which require separate package(check &lt;a href="#supported-languages"&gt;Supported languages&lt;/a&gt;). When you open a file from a particular project &lt;code&gt;lsp-mode&lt;/code&gt; and call &lt;code&gt;lsp&lt;/code&gt; command &lt;code&gt;lsp-mode&lt;/code&gt; will look for server registrations able to handle current file. If there is such client &lt;code&gt;lsp-mode&lt;/code&gt; will look for the project root. If you open a file from the project for the first time you will be prompted to define the current project root. Once the project root is selected it is saved in &lt;code&gt;lsp-session&lt;/code&gt; file and it will be loaded the next time you start Emacs so you no longer will be asked for a project root when you open a file from that project. Later if you want to change the project root you may use &lt;code&gt;lsp-workspace-folder-remove&lt;/code&gt; to remove the project and call &lt;code&gt;lsp-workspace-folder-add&lt;/code&gt; to add the root. If you want to force starting a particular language server in a file you may use &lt;code&gt;C-u&lt;/code&gt; &lt;code&gt;M-x&lt;/code&gt; &lt;code&gt;lsp&lt;/code&gt; which will prompt you to select language server to start.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-supported-languages" class="anchor" aria-hidden="true" href="#supported-languages"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Supported languages&lt;/h2&gt;
&lt;p&gt;Some of the servers are directly supported by &lt;code&gt;lsp-mode&lt;/code&gt; by requiring
  &lt;code&gt;lsp-clients.el&lt;/code&gt; while others require installing additional packages which provide
  server specific functionality.&lt;/p&gt;
&lt;table&gt;
  &lt;tbody&gt;&lt;tr&gt;&lt;th&gt;Language&lt;/th&gt;&lt;th&gt;Language Server&lt;/th&gt;&lt;th&gt;Built-in&lt;/th&gt;&lt;th&gt;Installation command&lt;/th&gt;&lt;th&gt;Debugger&lt;/th&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Ada&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/AdaCore/ada_language_server"&gt;ada_language_server&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/AdaCore/ada_language_server#install"&gt;Installation instructions&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes (gdb)&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Angular&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/angular/vscode-ng-language-service/"&gt;vscode-ng-language-service&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/emacs-lsp/lsp-mode/wiki/Install-Angular-Language-server"&gt;Installation instructions&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Not relevant&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Bash&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/mads-hartmann/bash-language-server"&gt;bash-language-server&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;npm i -g bash-language-server&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;C++&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/MaskRay/ccls"&gt;ccls&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/MaskRay/emacs-ccls"&gt;emacs-ccls&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/MaskRay/ccls"&gt;ccls&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes (gdb or lldb)&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;C++&lt;/td&gt;&lt;td&gt;&lt;a href="https://clang.llvm.org/extra/clangd.html" rel="nofollow"&gt;clangd&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://clang.llvm.org/extra/clangd.html" rel="nofollow"&gt;clangd&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes (gdb or lldb)&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;C++&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/cquery-project/cquery"&gt;cquery&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/cquery-project/emacs-cquery"&gt;emacs-cquery&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/cquery-project/cquery"&gt;cquery&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes (gdb or lldb)&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;C#&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/OmniSharp/omnisharp-roslyn"&gt;OmniSharp-Roslyn&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/OmniSharp/omnisharp-roslyn"&gt;OmniSharp-Roslyn&lt;/a&gt;&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Clojure&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/snoe/clojure-lsp"&gt;clojure-lsp&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/snoe/clojure-lsp"&gt;clojure-lsp&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Crystal&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/crystal-lang-tools/scry"&gt;scry&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/crystal-lang-tools/scry"&gt;scry&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;CSS/LessCSS/SASS/SCSS&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/vscode-langservers/vscode-css-languageserver-bin"&gt;css&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;npm install -g vscode-css-languageserver-bin&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Dart&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/dart-lang/sdk/blob/master/pkg/analysis_server/tool/lsp_spec/README.md"&gt;dart_analysis_server&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;built into dart-sdk&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Dhall&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/dhall-lang/dhall-haskell/tree/master/dhall-lsp-server"&gt;dhall-lsp-server&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/dhall-lang/dhall-haskell/tree/master/dhall-lsp-server#installation"&gt;Installation instructions&lt;/a&gt;&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Dockerfile&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/rcjsuen/dockerfile-language-server-nodejs"&gt;dockerfile-language-server-nodejs&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;npm install -g dockerfile-language-server-nodejs&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Dart&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/natebosch/dart_language_server"&gt;dart_language_server&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;pub global activate dart_language_server&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Elixir&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/JakeBecker/elixir-ls"&gt;elixir-ls&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/JakeBecker/elixir-ls"&gt;elixir-ls&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Elm&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/elm-tooling/elm-language-server"&gt;elmLS&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;npm i -g @elm-tooling/elm-language-server, or clone the repository and follow installation instructions&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Erlang&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/erlang-ls/erlang_ls"&gt;erlang_ls&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/erlang-ls/erlang_ls"&gt;erlang_ls&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Eslint&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/Microsoft/vscode-eslint"&gt;eslint&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/emacs-lsp/lsp-mode/wiki/LSP-ESlint-integration"&gt;LSP ESLint Guide&lt;/a&gt;&lt;/td&gt;&lt;td&gt;N/A&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;F#&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/fsharp/FsAutoComplete"&gt;fsautocomplete&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Automatic by &lt;a href="https://github.com/emacs-lsp/lsp-mode/blob/master/lsp-fsharp.el"&gt;lsp-fsharp&lt;/a&gt;&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Fortran&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/hansec/fortran-language-server"&gt;fortran-language-server&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;pip install fortran-language-server&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Go&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/golang/tools/tree/master/gopls"&gt;gopls&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;code&gt;go get golang.org/x/tools/gopls@latest&lt;/code&gt; &lt;a href="https://github.com/golang/tools/blob/master/gopls/doc/user.md#installation"&gt;docs&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Go&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/saibing/bingo"&gt;bingo&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/saibing/bingo/wiki/Install"&gt;bingo&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Groovy&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/prominic/groovy-language-server"&gt;groovy-language-server&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/prominic/groovy-language-server"&gt;groovy-language-server&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Hack&lt;/td&gt;&lt;td&gt;&lt;a href="https://docs.hhvm.com/hhvm/" rel="nofollow"&gt;hhvm&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://docs.hhvm.com/hhvm/installation/introduction" rel="nofollow"&gt;hhvm&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;HTML&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/vscode-langservers/vscode-html-languageserver"&gt;html&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;npm install -g vscode-html-languageserver-bin&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Haskell&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/haskell/haskell-ide-engine"&gt;IDE engine&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/emacs-lsp/lsp-haskell"&gt;lsp-haskell&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/haskell/haskell-ide-engine"&gt;IDE engine&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Lua&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/EmmyLua/EmmyLua-LanguageServer"&gt;EmmyLua&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/emacs-lsp/lsp-mode/wiki/Install-EmmyLua-Language-server"&gt;Installation&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Java&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/eclipse/eclipse.jdt.ls"&gt;Eclipse JDT LS&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/emacs-lsp/lsp-java"&gt;lsp-java&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Automatic by &lt;a href="https://github.com/emacs-lsp/lsp-java"&gt;lsp-java&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;JavaScript/TypeScript&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/theia-ide/typescript-language-server"&gt;typescript-language-server&lt;/a&gt;  (recommended)&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;npm i -g typescript-language-server; npm i -g typescript&lt;/td&gt;&lt;td&gt;Yes (Firefox/Chrome)&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;JavaScript/TypeScript&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/sourcegraph/javascript-typescript-langserver"&gt;javascript-typescript-stdio&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;npm i -g javascript-typescript-langserver&lt;/td&gt;&lt;td&gt;Yes (Firefox/Chrome)&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;JavaScript Flow&lt;/td&gt;&lt;td&gt;&lt;a href="https://flow.org" rel="nofollow"&gt;flow&lt;/a&gt; (add-on if working on a Flow file)&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://flow.org" rel="nofollow"&gt;flow&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes (Firefox/Chrome)&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Json&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/vscode-langservers/vscode-json-languageserver"&gt;vscode-json-languageserver&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Automatic or manual by &lt;code&gt;npm i -g vscode-json-languageserver&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Julia&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/non-Jedi/lsp-julia"&gt;lsp-julia&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/non-Jedi/lsp-julia"&gt;lsp-julia&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/JuliaEditorSupport/LanguageServer.jl"&gt;LanguageServer.jl&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Kotlin&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/fwcd/KotlinLanguageServer"&gt;kotlin-language-server&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/fwcd/KotlinLanguageServer"&gt;kotlin-language-server&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Nim&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/PMunch/nimlsp"&gt;nimlsp&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;code&gt;nimble install nimlsp&lt;/code&gt;&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;OCaml&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/ocaml-lsp/ocaml-language-server"&gt;ocaml-language-server&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/ocaml-lsp/ocaml-language-server"&gt;ocaml-language-server&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;OCaml&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/ocaml/ocaml-lsp"&gt;ocaml-lsp-server&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/ocaml/ocaml-lsp"&gt;ocaml-lsp-server&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;PHP(recommended)&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/bmewburn/vscode-intelephense"&gt;intelephense&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;npm i intelephense -g&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;PHP&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/felixfbecker/php-language-server"&gt;php-language-server&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/felixfbecker/php-language-server"&gt;php-language-server&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Powershell&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/PowerShell/PowerShellEditorServices"&gt;PowerShellEditorServices&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Automatic&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Python&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/palantir/python-language-server"&gt;pyls&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;pip install ‘python-language-server[all]’&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Python(Microsoft)&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/Microsoft/python-language-server"&gt;Microsoft Python Language Server&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/emacs-lsp/lsp-python-ms"&gt;lsp-python-ms&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/emacs-lsp/lsp-python-ms"&gt;lsp-python-ms&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;R&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/REditorSupport/languageserver"&gt;languageserver&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;install.packages(“languageserver”)&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Ruby&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/castwide/solargraph"&gt;solargraph&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;gem install solargraph&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Rust&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/rust-lang/rls"&gt;rls&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/rust-lang/rls"&gt;rls&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Rust&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/rust-analyzer/rust-analyzer"&gt;rust-analyzer&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/rust-analyzer/rust-analyzer#language-server-quick-start"&gt;rust-analyzer&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Scala&lt;/td&gt;&lt;td&gt;&lt;a href="https://scalameta.org/metals" rel="nofollow"&gt;Metals&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://scalameta.org/metals/docs/editors/emacs.html" rel="nofollow"&gt;Metals&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Swift&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/apple/sourcekit-lsp"&gt;sourcekit-LSP&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/emacs-lsp/lsp-sourcekit"&gt;lsp-sourcekit&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/apple/sourcekit-lsp"&gt;sourcekit-LSP&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes (via llvm debug adapter)&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Terraform&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/juliosueiras/terraform-lsp"&gt;terraform-lsp&lt;/a&gt;&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;Git clone outside of &lt;code&gt;$GOPATH&lt;/code&gt;; go install. (Requires go &amp;gt; 1.11)&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;TeX, LaTeX, etc.&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/astoff/digestif"&gt;Digestif&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;luarocks --server &lt;a href="http://luarocks.org/dev" rel="nofollow"&gt;http://luarocks.org/dev&lt;/a&gt; install digestif&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Verilog/SystemVerilog&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/suoto/hdl_checker"&gt;hdl_checker&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;pip install hdl-checker –upgrade&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;VHDL&lt;/td&gt;&lt;td&gt;&lt;a href="http://www.vhdltool.com" rel="nofollow"&gt;VHDL Tool&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Download from &lt;a href="http://www.vhdltool.com/download" rel="nofollow"&gt;http://www.vhdltool.com/download&lt;/a&gt;&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Vimscript&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/iamcco/vim-language-server"&gt;vim-language-server&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;npm install -g vim-language-server&lt;/td&gt;&lt;td&gt;n/a&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Vue&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/vuejs/vetur/tree/master/server"&gt;vue-language-server&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;npm install -g vue-language-server&lt;/td&gt;&lt;td&gt;Yes (Firefox/Chrome)&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;XML&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/angelozerr/lsp4xml"&gt;lsp4xml&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Download from &lt;a href="https://github.com/angelozerr/lsp4xml/releases"&gt;lsp4xml releases&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;YAML&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/redhat-developer/yaml-language-server"&gt;yaml&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;npm install -g yaml-language-server&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2&gt;&lt;a id="user-content-commands" class="anchor" aria-hidden="true" href="#commands"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Commands&lt;/h2&gt;
&lt;p&gt;When using &lt;code&gt;lsp-mode&lt;/code&gt; most of the features depend on server capabilities.
  &lt;code&gt;lsp-mode&lt;/code&gt; provides default bindings which are dynamically enabled/disabled
  based on the server functionality. All the commands are configured
  &lt;code&gt;lsp-command-map&lt;/code&gt; which is bound to &lt;code&gt;lsp-keymap-prefix&lt;/code&gt; (default &lt;code&gt;s-l&lt;/code&gt;).&lt;/p&gt;
&lt;table&gt;
  &lt;tbody&gt;&lt;tr&gt;&lt;th&gt;Keybinding&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;s-l s s&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Entry point for the server startup.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;s-l s r&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Restart language server&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;s-l s q&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Shutdown language server&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;s-l s d&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Describes current dession&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;s-l s D&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Disconnect the buffer from the language server keeping the server running.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;s-l = =&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Ask the server to format this document.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;s-l = r&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Ask the server to format the region, or if none is selected, the current line.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;s-l F a&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Add new project root to the list of workspace folders.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;s-l F r&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Remove project root from the list of workspace folders.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;s-l F b&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Remove project root from the workspace blacklist.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;s-l T l&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Toggle code-lens overlays.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;s-l T L&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Toggle client-server protocol logging.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;s-l T h&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Toggle symbol highlighting.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;s-l T S&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Toggle minor mode for showing information for current line in sideline. (requires &lt;code&gt;lsp-ui&lt;/code&gt;)&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;s-l T d&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Toggle minor mode for showing hover information in child frame. (requires &lt;code&gt;lsp-ui&lt;/code&gt;)&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;s-l T s&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Toggle signature auto activate.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;s-l T f&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Toggle on type formatting.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;s-l T T&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Toggle global minor mode for synchronizing &lt;code&gt;lsp-mode&lt;/code&gt; workspace folders and &lt;code&gt;treemacs&lt;/code&gt; projects. (requires &lt;code&gt;lsp-treemacs&lt;/code&gt;)&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;s-l g g&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Find definitions of the symbol under point.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;s-l g r&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Find references of the symbol under point.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;s-l g i&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Find implementations of the symbol under point.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;s-l g t&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Find type definitions of the symbol under point.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;s-l g d&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Find declarations of the symbol under point.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;s-l g h&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Show the incoming call hierarchy for the symbol at point. (requires &lt;code&gt;lsp-treemacs&lt;/code&gt;)&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;s-l g a&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Find all meaningful symbols that match pattern.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;s-l h h&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Display the type signature and documentation of the thing at&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;s-l h s&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Activate signature help.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;s-l h g&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Trigger display hover information popup and hide it on next typing.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;s-l r r&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Rename the symbol (and all references to it).&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;s-l r o&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Perform the source.organizeImports code action, if available.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;s-l a a&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Execute code action action.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;s-l a l&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Click lsp lens using ‘avy’ package.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;s-l a h&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Highlight symbol at point.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;s-l G g&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Peek definitions to the identifier at point. (requires &lt;code&gt;lsp-ui&lt;/code&gt;)&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;s-l G r&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Peek references to the identifier at point. (requires &lt;code&gt;lsp-ui&lt;/code&gt;)&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;s-l G i&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Peek implementation locations of the symbol at point. (requires &lt;code&gt;lsp-ui&lt;/code&gt;)&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;s-l G s&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Peek symbols in the worskpace. (requires &lt;code&gt;lsp-ui&lt;/code&gt;)&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3&gt;&lt;a id="user-content-which-key-integration" class="anchor" aria-hidden="true" href="#which-key-integration"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;which-key integration&lt;/h3&gt;
&lt;p&gt;To enable &lt;a href="https://github.com/justbur/emacs-which-key/"&gt;which-key&lt;/a&gt; integration put that in your config.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;with-eval-after-load&lt;/span&gt; &lt;span class="pl-c1"&gt;'lsp-mode&lt;/span&gt;
  (&lt;span class="pl-c1"&gt;add-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;'lsp-mode-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;#&lt;span class="pl-c1"&gt;'lsp-enable-which-key-integration&lt;/span&gt;&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="examples/which-key.png"&gt;&lt;img src="examples/which-key.png" alt="examples/which-key.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-settings" class="anchor" aria-hidden="true" href="#settings"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Settings&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;lsp-log-io&lt;/code&gt; - If non-nil, print all messages to and from the language server to &lt;code&gt;*lsp-log*&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-print-performance&lt;/code&gt; - If non-nil, print performance info. to &lt;code&gt;*lsp-log*&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-inhibit-message&lt;/code&gt; - If non-nil, inhibit the message echo via &lt;code&gt;inhibit-message&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-report-if-no-buffer&lt;/code&gt; - If non nil the errors will be reported even when the file is not open.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-keep-workspace-alive&lt;/code&gt; - If non nil keep workspace alive when the last workspace buffer is closed.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-enable-snippet&lt;/code&gt; - Enable/disable snippet completion support.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-auto-guess-root&lt;/code&gt; - Automatically guess the project root using projectile/project. Do &lt;b&gt;not&lt;/b&gt; use this setting unless you are familiar with &lt;code&gt;lsp-mode&lt;/code&gt; internals and you are sure that all of your projects are following &lt;code&gt;projectile=/=project.el&lt;/code&gt; conventions.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-restart&lt;/code&gt; - Defines how server exited event must be handled.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-session-file&lt;/code&gt; - File where session information is stored.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-auto-configure&lt;/code&gt; - Auto configure &lt;code&gt;lsp-mode&lt;/code&gt;. When set to t &lt;code&gt;lsp-mode&lt;/code&gt; will auto-configure &lt;code&gt;lsp-ui&lt;/code&gt; and &lt;code&gt;company-lsp&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-document-sync-method&lt;/code&gt; - How to sync the document with the language server.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-auto-execute-action&lt;/code&gt; - Auto-execute single action.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-eldoc-render-all&lt;/code&gt; - Display all of the info returned by &lt;code&gt;document/onHover&lt;/code&gt;. If this is nil, &lt;code&gt;eldoc&lt;/code&gt; will show only the symbol information.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-enable-completion-at-point&lt;/code&gt; - Enable &lt;code&gt;completion-at-point&lt;/code&gt; integration.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-enable-xref&lt;/code&gt; - Enable xref integration.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-prefer-flymake&lt;/code&gt; - If you prefer flycheck and &lt;code&gt;lsp-ui-flycheck&lt;/code&gt; is available, &lt;code&gt;(setq lsp-prefer-flymake nil)&lt;/code&gt;. If set to &lt;code&gt;:none&lt;/code&gt; neither of two will be enabled.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-enable-indentation&lt;/code&gt; - Indent regions using the file formatting functionality provided by the language server.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-enable-on-type-formatting&lt;/code&gt; - Enable &lt;code&gt;textDocument/onTypeFormatting&lt;/code&gt; integration.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-before-save-edits&lt;/code&gt; - If non-nil, &lt;code&gt;lsp-mode&lt;/code&gt; will apply edits suggested by the language server before saving a document.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-imenu-show-container-name&lt;/code&gt; - Display the symbol’s container name in an imenu entry.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-imenu-container-name-separator&lt;/code&gt; - Separator string to use to separate the container name from the symbol while displaying imenu entries.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-imenu-sort-methods&lt;/code&gt; - How to sort the imenu items. The value is a list of &lt;code&gt;kind&lt;/code&gt;, &lt;code&gt;name&lt;/code&gt; or &lt;code&gt;position&lt;/code&gt;. Priorities are determined by the index of the element.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-response-timeout&lt;/code&gt; - Number of seconds to wait for a response from the language server before timing out.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-enable-file-watchers&lt;/code&gt; - If non-nil lsp-mode will watch the files in the workspace if the server has requested that.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-server-trace&lt;/code&gt; - Request trace mode on the language server.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-enable-semantic-highlighting&lt;/code&gt; - Enable experimental semantic highlighting support&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-enable-imenu&lt;/code&gt; - If non-nil, automatically enable imenu integration when server provides &lt;code&gt;textDocument/documentSymbol&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-signature-auto-activate&lt;/code&gt; - Auto activate signature when trigger char is pressed.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-signature-render-documentation&lt;/code&gt; - Include signature documentation in signature help.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-enable-text-document-color&lt;/code&gt; - Enable &lt;code&gt;textDocument/documentColor&lt;/code&gt; when server supports it.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-screenshots" class="anchor" aria-hidden="true" href="#screenshots"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Screenshots&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;RUST Completion with company-lsp
    &lt;a target="_blank" rel="noopener noreferrer" href="examples/completion.png"&gt;&lt;img src="examples/completion.png" alt="examples/completion.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Typescript references using lsp-ui
    &lt;a target="_blank" rel="noopener noreferrer" href="examples/references.png"&gt;&lt;img src="examples/references.png" alt="examples/references.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Debugging Python using dap-mode
    &lt;a target="_blank" rel="noopener noreferrer" href="examples/python_debugging.png"&gt;&lt;img src="examples/python_debugging.png" alt="examples/python_debugging.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Call hierarchy via ccls
    &lt;a target="_blank" rel="noopener noreferrer" href="examples/call-hierarchy-ccls.png"&gt;&lt;img src="examples/call-hierarchy-ccls.png" alt="examples/call-hierarchy-ccls.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Metals Doctor
    &lt;a target="_blank" rel="noopener noreferrer" href="examples/metals-doctor.png"&gt;&lt;img src="examples/metals-doctor.png" alt="examples/metals-doctor.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Semantic highlighting as provided by clangd (built from unreleased 10.0 branch). In this screenshot, all other font-locking has been disabled (hence no syntax highlighting of comments or basic keywords such as &lt;code&gt;auto&lt;/code&gt;)
    &lt;a target="_blank" rel="noopener noreferrer" href="examples/clangd_semantic_highlighting.png"&gt;&lt;img src="examples/clangd_semantic_highlighting.png" alt="examples/clangd_semantic_highlighting.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-extensions" class="anchor" aria-hidden="true" href="#extensions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Extensions&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-tramp" class="anchor" aria-hidden="true" href="#tramp"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TRAMP&lt;/h3&gt;
&lt;p&gt;LSP mode has support for tramp buffers with the following requirements:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The language server has to be present on the remote server.&lt;/li&gt;
  &lt;li&gt;Having multi folder language server (like &lt;a href="https://github.com/eclipse/eclipse.jdt.ls"&gt;Eclipse JDT LS&lt;/a&gt;) cannot have local and remote workspace folders.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a id="user-content-how-does-it-work-1" class="anchor" aria-hidden="true" href="#how-does-it-work-1"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;How does it work?&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;lsp-mode&lt;/code&gt; detects whether a particular file is located on remote machine and looks for a client which matches current file and it is marked as &lt;code&gt;:remote?&lt;/code&gt; t. Then &lt;code&gt;lsp-mode&lt;/code&gt; starts the client through tramp.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-sample-configuration" class="anchor" aria-hidden="true" href="#sample-configuration"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Sample configuration&lt;/h4&gt;
&lt;p&gt;Here it is example how you can configure python language server to work when using &lt;code&gt;TRAMP&lt;/code&gt;. Note that if you are trying to convert existing language server configuration you should copy all of it’s properties(e. g. &lt;code&gt;:request-handlers&lt;/code&gt;, &lt;code&gt;activation-fn&lt;/code&gt;, etc).&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(lsp-register-client
 (make-lsp-client &lt;span class="pl-c1"&gt;:new-connection&lt;/span&gt; (lsp-tramp-connection &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;binary-or-full-path&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
                  &lt;span class="pl-c1"&gt;:major-modes&lt;/span&gt; '(&lt;span class="pl-c1"&gt;python-mode&lt;/span&gt;)
                  &lt;span class="pl-c1"&gt;:remote?&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;
                  &lt;span class="pl-c1"&gt;:server-id&lt;/span&gt; &lt;span class="pl-c1"&gt;'pyls-remote&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content-dealing-with-stderr" class="anchor" aria-hidden="true" href="#dealing-with-stderr"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Dealing with stderr&lt;/h4&gt;
&lt;p&gt;With TRAMP, Emacs does not have an easy way to distinguish stdout and stderr, so when the underlying LSP process writes to stderr, it breaks the &lt;code&gt;lsp-mode&lt;/code&gt; parser. As a workaround, &lt;code&gt;lsp-mode&lt;/code&gt; is redirecting stderr to &lt;code&gt;/tmp/&amp;lt;process-name&amp;gt;-&amp;lt;id&amp;gt;~stderr&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-limitations" class="anchor" aria-hidden="true" href="#limitations"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Limitations&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-file-watches" class="anchor" aria-hidden="true" href="#file-watches"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;File watches&lt;/h3&gt;
&lt;p&gt;When some of the workspaces that are active in the current project requests file notifications via &lt;code&gt;workspace/didChangeWatchedFiles&lt;/code&gt; &lt;code&gt;lsp-mode&lt;/code&gt; will start monitoring each of the folders in the workspace for changes. In case your project contains a lot of files you might want to disable file monitoring via &lt;code&gt;lsp-enable-file-watchers&lt;/code&gt; (you may use dir-locals).&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-contributions" class="anchor" aria-hidden="true" href="#contributions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contributions&lt;/h2&gt;
&lt;p&gt;Contributions are very much welcome.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-members" class="anchor" aria-hidden="true" href="#members"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Members&lt;/h3&gt;
&lt;p&gt;Here it is a list of the current &lt;code&gt;lsp-mode&lt;/code&gt; members and what they are primary working on/responsible for.&lt;/p&gt;
&lt;table&gt;
  &lt;tbody&gt;&lt;tr&gt;&lt;th&gt;Member&lt;/th&gt;&lt;th&gt;Responsible for:&lt;/th&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;a href="https://github.com/TOTBWF"&gt;TOTBWF&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;F#&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;a href="https://github.com/brotzeit"&gt;brotzeit&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;Rust&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;a href="https://github.com/dsyzling"&gt;dsyzling&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;Scala&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;a href="https://github.com/kurnevsky"&gt;kurnevsky&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;Scala&lt;/code&gt; &amp;amp; &lt;code&gt;Rust&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;a href="https://github.com/seagle0128"&gt;seagle0128&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;Go&lt;/code&gt; &amp;amp; &lt;code&gt;MS Python Language Server&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;a href="https://github.com/sebastiansturm"&gt;sebastiansturm&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;lsp-mode&lt;/code&gt; core &amp;amp; &lt;code&gt;C++&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;a href="https://github.com/vibhavp"&gt;vibhavp&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;lsp-mode&lt;/code&gt; core&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;a href="https://github.com/yyoncho"&gt;yyoncho&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;lsp-mode&lt;/code&gt; core and &lt;code&gt;Java&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2&gt;&lt;a id="user-content-troubleshooting" class="anchor" aria-hidden="true" href="#troubleshooting"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Troubleshooting&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;set &lt;code&gt;lsp-log-io&lt;/code&gt; to &lt;code&gt;t&lt;/code&gt; to inspect communication between client and the server. Use &lt;code&gt;lsp-workspace-show-log&lt;/code&gt; to switch to the corresponding log buffer.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-describe-session&lt;/code&gt; will show the current projects roots + the started severs and allows inspecting the server capabilities.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="examples/describe.png"&gt;&lt;img src="examples/describe.png" alt="examples/describe.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-adding-support-for-languages" class="anchor" aria-hidden="true" href="#adding-support-for-languages"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Adding support for languages&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-registering-server" class="anchor" aria-hidden="true" href="#registering-server"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Registering server&lt;/h3&gt;
&lt;p&gt;Here it is the minimal configuration that is needed for new language server registration. Refer to the documentation of &lt;code&gt;lsp-client.el&lt;/code&gt; for the additional settings supported on registration time. &lt;code&gt;lsp-language-id-configuration&lt;/code&gt; must be updated to contain the corresponding mode -&amp;gt; language id - in this case &lt;code&gt;(python-mode . "python")&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;defvar&lt;/span&gt; &lt;span class="pl-en"&gt;lsp-language-id-configuration&lt;/span&gt;
  '(...
    (&lt;span class="pl-c1"&gt;python-mode&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;python&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    ...))
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; if you are adding the support for your language server in separate repo use&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; (add-to-list 'lsp-language-id-configuration '(python-mode . "python"))&lt;/span&gt;

(lsp-register-client
 (make-lsp-client &lt;span class="pl-c1"&gt;:new-connection&lt;/span&gt; (lsp-stdio-connection &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;pyls&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
                  &lt;span class="pl-c1"&gt;:major-modes&lt;/span&gt; '(&lt;span class="pl-c1"&gt;python-mode&lt;/span&gt;)
                  &lt;span class="pl-c1"&gt;:server-id&lt;/span&gt; &lt;span class="pl-c1"&gt;'pyls&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If the language server supports environment variables to control additional behavior, you can register that by using the &lt;code&gt;:environment-fn&lt;/code&gt; function, like the Bash language client does:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(lsp-register-client
 (make-lsp-client &lt;span class="pl-c1"&gt;:new-connection&lt;/span&gt; (lsp-stdio-connection '(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;bash-language-server&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;start&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
                  &lt;span class="pl-c1"&gt;:major-modes&lt;/span&gt; '(&lt;span class="pl-c1"&gt;sh-mode&lt;/span&gt;)
                  &lt;span class="pl-c1"&gt;:priority&lt;/span&gt; &lt;span class="pl-c1"&gt;-1&lt;/span&gt;
                  &lt;span class="pl-c1"&gt;:environment-fn&lt;/span&gt; (&lt;span class="pl-k"&gt;lambda&lt;/span&gt; ()
                                    ((&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;EXPLAINSHELL_ENDPOINT&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; lsp-bash-explainshell-endpoint)
                                     (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;HIGHLIGHT_PARSING_ERRORS&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; lsp-bash-highlight-parsing-errors)))
                  &lt;span class="pl-c1"&gt;:server-id&lt;/span&gt; &lt;span class="pl-c1"&gt;'bash-ls&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;lsp-bash-explainshell-endpoint&lt;/code&gt; and &lt;code&gt;lsp-bash-highlight-parsing-errors&lt;/code&gt; are language client &lt;code&gt;defcustom&lt;/code&gt; that expose supported server environment settings in a type-safe way. If you change any of those variables, restart the language server with &lt;code&gt;lsp-restart-workspace&lt;/code&gt; for the changes to be applied.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-sections" class="anchor" aria-hidden="true" href="#sections"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Sections&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;lsp-mode&lt;/code&gt; provides tools to bridge emacs &lt;code&gt;defcustom&lt;/code&gt; as a language configuration sections properties(see &lt;a href="https://microsoft.github.io/language-server-protocol/specification#workspace_configuration" rel="nofollow"&gt;specification workspace/configuration&lt;/a&gt;). In addition you may use &lt;code&gt;lsp-generate-settings&lt;/code&gt; from &lt;a href="https://github.com/emacs-lsp/lsp-mode/blob/master/scripts/lsp-generate-settings.el"&gt;Generate Settings script&lt;/a&gt; to generate &lt;code&gt;defcustom&lt;/code&gt; from &lt;code&gt;package.json&lt;/code&gt; VScode plugin manifest. Example:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;defcustom&lt;/span&gt; &lt;span class="pl-en"&gt;lsp-foo-language-server-property&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;bar&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Demo property.&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:group&lt;/span&gt; &lt;span class="pl-c1"&gt;'foo-ls&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:risky&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;)

(lsp-register-custom-settings '((&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;foo.section.property&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; lsp-foo-language-server-property)))

(lsp-configuration-section  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;foo&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt;  (("foo" ("settings" ("property" . "bar"))))&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-faq" class="anchor" aria-hidden="true" href="#faq"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;FAQ&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;How do I troubleshoot “Server FOO-LS:pid exited with status signal. Do you want to restart it? (y or n)”?
    &lt;ul&gt;
      &lt;li&gt;This message indicates that the language server has crashed for some
        reason. You may check the server stderr which is &lt;code&gt;*FOO-LS::stderr*&lt;/code&gt;. If
        you get this message on startup you may try to run the exact command that
        &lt;code&gt;lsp-mode&lt;/code&gt; is running in the terminal. You may find it in &lt;code&gt;*lsp-log*&lt;/code&gt;
        buffer.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;How to configure a server with local variables?
    &lt;ul&gt;
      &lt;li&gt;Add &lt;code&gt;lsp&lt;/code&gt; server call to &lt;code&gt;hack-local-variables-hook&lt;/code&gt; which runs right after the local variables are loaded.
        &lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;add-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;'hack-local-variables-hook&lt;/span&gt;
          (&lt;span class="pl-k"&gt;lambda&lt;/span&gt; () (&lt;span class="pl-k"&gt;when&lt;/span&gt; (&lt;span class="pl-c1"&gt;derived-mode-p&lt;/span&gt; &lt;span class="pl-c1"&gt;'XXX-mode&lt;/span&gt;) (lsp))))
        &lt;/pre&gt;&lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;I have multiple language servers registered for language FOO. Which one will be used when opening a project?
    &lt;ul&gt;
      &lt;li&gt;The one with highest priority wins. &lt;code&gt;lsp-clients.el&lt;/code&gt; predefined servers have
        priority -1, lower than external packages (priority 0 if unspecified). If a
        server is registered with &lt;code&gt;:add-on?&lt;/code&gt; flag set to &lt;code&gt;t&lt;/code&gt; it will be started in
        parallel to the other servers that are registered for the current mode.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;I have multiple language servers for language &lt;code&gt;FOO&lt;/code&gt; and I want to select the server per project, what can I do?
    &lt;ul&gt;
      &lt;li&gt;You may create &lt;code&gt;dir-local&lt;/code&gt; for each of the projects and specify list of
        &lt;code&gt;lsp-enabled-clients&lt;/code&gt;. This will narrow the list of the clients that are
        going to be tested for the project.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The completion does not work fine and inserts arguments and placeholders, what I am doing wrong?
    &lt;ul&gt;
      &lt;li&gt;Snippet support works only with &lt;code&gt;company-lsp&lt;/code&gt; so if you are using
        &lt;code&gt;completion-at-point&lt;/code&gt; the snippets won’t be expanded and you should
        either disable them by setting &lt;code&gt;lsp-enable-snippet&lt;/code&gt; to &lt;code&gt;nil&lt;/code&gt; or you
        should switch to &lt;code&gt;company-lsp&lt;/code&gt;. Note also that &lt;code&gt;company-tng&lt;/code&gt; frontend
        does not support snippet expansion(see &lt;a href="https://github.com/company-mode/company-mode/issues/891"&gt;company-mode#891&lt;/a&gt;)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;How to automatically follow &lt;code&gt;lsp-ui-log&lt;/code&gt;?
    &lt;ul&gt;
      &lt;li&gt;Go into the log buffer and execute the following snippet(source: &lt;a href="https://stackoverflow.com/questions/12663061/emacs-auto-scrolling-log-buffer" rel="nofollow"&gt;Emacs auto scrolling log buffer&lt;/a&gt;)&lt;/li&gt;
    &lt;/ul&gt;
    &lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;set&lt;/span&gt; (&lt;span class="pl-c1"&gt;make-local-variable&lt;/span&gt; &lt;span class="pl-c1"&gt;'window-point-insertion-type&lt;/span&gt;) &lt;span class="pl-c1"&gt;t&lt;/span&gt;)
    &lt;/pre&gt;&lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;I am getting “Package ‘spinner-1.7.3’ is unavailable” when trying to install &lt;code&gt;lsp-mode&lt;/code&gt;.
    &lt;ul&gt;
      &lt;li&gt;This is caused by GPG keys used by the ELPA package manager not being up
        to date. You may fix by installing: &lt;a href="https://elpa.gnu.org/packages/gnu-elpa-keyring-update.html" rel="nofollow"&gt;gnu-elpa-keyring-update&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Json completion doesn’t seem working?
    &lt;ul&gt;
      &lt;li&gt;The latest &lt;a href="https://www.npmjs.com/package/vscode-json-languageserver/v/1.2.2" rel="nofollow"&gt;vscode-json-languageserver&lt;/a&gt; is broken. You will need to install the earlier version of it &lt;code&gt;npm i vscode-json-languageserver@1.2.1&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The flycheck does not work in &lt;code&gt;typescript&lt;/code&gt;, &lt;code&gt;html&lt;/code&gt; and &lt;code&gt;javascript&lt;/code&gt; blocks in &lt;code&gt;vue-mode&lt;/code&gt;. How to fix that?
    &lt;ul&gt;
      &lt;li&gt;This is caused by the fact that &lt;code&gt;vue-mode&lt;/code&gt; uses multiple major modes in
        single file and the &lt;code&gt;lsp-ui&lt;/code&gt; checker may not associated with the major mode
        at point. You could fix that by adding the following lines to your config.
        &lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;with-eval-after-load&lt;/span&gt; &lt;span class="pl-c1"&gt;'lsp-ui-flycheck&lt;/span&gt;
  (&lt;span class="pl-k"&gt;mapc&lt;/span&gt; &lt;span class="pl-c1"&gt;'lsp-ui-flycheck-add-mode&lt;/span&gt; '(&lt;span class="pl-c1"&gt;typescript-mode&lt;/span&gt; js-mode css-mode vue-html-mode)))
        &lt;/pre&gt;&lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-see-also" class="anchor" aria-hidden="true" href="#see-also"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;See also&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://github.com/emacs-lsp/lsp-docker/"&gt;lsp-docker&lt;/a&gt; - provide docker image with preconfigured language servers with corresponding emacs configuration.&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/sebastiencs/company-box/"&gt;company-box&lt;/a&gt; - &lt;code&gt;company&lt;/code&gt; frontend with icons.&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/emacs-lsp/dap-mode"&gt;dap-mode&lt;/a&gt; - Debugger integration for &lt;code&gt;lsp-mode&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/joaotavora/eglot"&gt;eglot&lt;/a&gt; - An alternative minimal LSP implementation.&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/justbur/emacs-which-key/"&gt;which-key&lt;/a&gt; - Emacs package that displays available keybindings in popup&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/bbatsov/projectile/"&gt;projectile&lt;/a&gt; - Project Interaction Library for Emacs&lt;/li&gt;
&lt;/ul&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>emacs-lsp</author><guid isPermaLink="false">https://github.com/emacs-lsp/lsp-mode</guid><pubDate>Thu, 30 Jan 2020 00:12:00 GMT</pubDate></item><item><title>emacs-helm/helm #13 in Emacs Lisp, This week</title><link>https://github.com/emacs-helm/helm</link><description>&lt;p&gt;&lt;i&gt;Emacs incremental completion and selection narrowing framework&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;p align="center"&gt;
  &lt;a href="http://www.gnu.org/licenses/gpl-3.0.txt" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/1ba3411d21f0105e0df26c7e29aa214578d377b5/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d47504c5f332d677265656e2e737667" alt="License GPL 3" data-canonical-src="https://img.shields.io/badge/license-GPL_3-green.svg" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a href="https://melpa.org/#/helm" rel="nofollow"&gt;&lt;img alt="MELPA" src="https://camo.githubusercontent.com/3e081278b9039b90cae61589fad6c405cda673f7/68747470733a2f2f6d656c70612e6f72672f7061636b616765732f68656c6d2d62616467652e737667" data-canonical-src="https://melpa.org/packages/helm-badge.svg" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a href="https://stable.melpa.org/#/helm" rel="nofollow"&gt;&lt;img alt="MELPA Stable" src="https://camo.githubusercontent.com/8db93c3ec72ed944d37c5707873badc6aa2407e8/68747470733a2f2f737461626c652e6d656c70612e6f72672f7061636b616765732f68656c6d2d62616467652e737667" data-canonical-src="https://stable.melpa.org/packages/helm-badge.svg" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a href="https://travis-ci.org/emacs-helm/helm" rel="nofollow"&gt;&lt;img alt="Travis CI" src="https://camo.githubusercontent.com/890dd305784d191bd1ef1e49c5aef42b6f3258f4/68747470733a2f2f7472617669732d63692e6f72672f656d6163732d68656c6d2f68656c6d2e7376673f6272616e63683d6d6173746572" data-canonical-src="https://travis-ci.org/emacs-helm/helm.svg?branch=master" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;h1 align="center"&gt;&lt;a id="user-content-emacs-helm" class="anchor" aria-hidden="true" href="#emacs-helm"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Emacs-Helm&lt;/h1&gt;
&lt;p align="center"&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="https://avatars3.githubusercontent.com/u/1541688?v=3&amp;amp;s=200"&gt;&lt;img src="https://avatars3.githubusercontent.com/u/1541688?v=3&amp;amp;s=200" alt="Emacs-helm" title="" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;hr&gt;
&lt;p align="justify"&gt;
  &lt;b&gt;Helm&lt;/b&gt; is an Emacs framework for incremental completions and narrowing
  selections. It provides an easy-to-use API for developers wishing to build
  their own Helm applications in Emacs, powerful search tools and dozens of
  already built-in commands providing completion to almost everything.
  It is a must-have for anyone using Emacs as a main work environment.
  Helm has been widely adopted by many Emacs power-users.
  It is available in Melpa and can be easily installed from the Emacs package manager.
&lt;/p&gt;
&lt;hr&gt;
&lt;p align="center"&gt;
  &lt;a href="https://emacs-helm.github.io/helm/" rel="nofollow"&gt;&lt;b&gt;Homepage&lt;/b&gt;&lt;/a&gt; |
  &lt;a href="https://github.com/emacs-helm/helm/releases"&gt;&lt;b&gt;Downloads&lt;/b&gt;&lt;/a&gt; |
  &lt;a href="https://github.com/emacs-helm/helm/wiki#install"&gt;&lt;b&gt;Get started&lt;/b&gt;&lt;/a&gt; |
  &lt;a href="https://github.com/emacs-helm/helm/wiki"&gt;&lt;b&gt;Helm wiki&lt;/b&gt;&lt;/a&gt; |
  &lt;a href="https://github.com/emacs-helm/helm/wiki/FAQ"&gt;&lt;b&gt;FAQ&lt;/b&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;hr&gt;
&lt;p align="center"&gt;
  Maintaining Helm requires a &lt;a href="https://github.com/emacs-helm/helm/commits?author=thierryvolpiatto"&gt;&lt;b&gt;lot of work&lt;/b&gt;&lt;/a&gt;,
  which I have done voluntarily since 2011.&lt;br&gt;
  As it demands lots of my time it gets increasingly difficult&lt;br&gt;
  maintaining it without financial help.&lt;br&gt;
  Thanks to all the people that are helping or have helped Helm development,&lt;br&gt;
  but they are actually too few to continue serenely.&lt;br&gt;
  By the way, after the release of version 3.0 I will have to stop&lt;br&gt;
  developing Helm seriously until I get enough financial support,&lt;br&gt;
  only providing a minimal bugfix maintenance.&lt;br&gt;
  Thanks for your understanding&lt;br&gt;
  If you feel Helm is making your daily work easier,&lt;br&gt;
  &lt;b&gt;please consider making a donation.&lt;/b&gt;&lt;br&gt;
&lt;/p&gt;
&lt;p align="center"&gt;
  &lt;i&gt;Thank you! — Thierry Volpiatto&lt;/i&gt;
&lt;/p&gt;
&lt;div align="center"&gt;
  &lt;a href="https://www.paypal.me/tvolpiatto" rel="nofollow"&gt;
    &lt;img title="Donate with Paypal" alt="Donate with Paypal" src="https://github.com/emacs-helm/helm/raw/master/images/paypal.png?raw=true" style="max-width:100%;"&gt;&lt;/a&gt;
    
  &lt;a href="https://patreon.com/preview/30231724baf440fabe80d44d0ee77067" rel="nofollow"&gt;
    &lt;img title="Donate monthly using Patreon" alt="Donate monthly using Patreon" src="https://github.com/emacs-helm/helm/raw/master/images/patreon-25x.png?raw=true" style="max-width:100%;"&gt;&lt;/a&gt;
    
&lt;/div&gt;
&lt;hr&gt;
&lt;p align="center"&gt;
  Helm in action searching with &lt;a href="https://github.com/ggreer/the_silver_searcher"&gt;Grep Ag&lt;/a&gt;
                                   &lt;/p&gt;
&lt;p align="center"&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="https://github.com/emacs-helm/helm/blob/master/images/helm-grep-ag-persistent.png?raw=true"&gt;&lt;img src="https://github.com/emacs-helm/helm/raw/master/images/helm-grep-ag-persistent.png?raw=true" alt="Emacs-helm grep ag" title="" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>emacs-helm</author><guid isPermaLink="false">https://github.com/emacs-helm/helm</guid><pubDate>Thu, 30 Jan 2020 00:13:00 GMT</pubDate></item><item><title>bbatsov/prelude #14 in Emacs Lisp, This week</title><link>https://github.com/bbatsov/prelude</link><description>&lt;p&gt;&lt;i&gt;Prelude is an enhanced Emacs 25.1+ distribution that should make your experience with Emacs both more pleasant and more powerful.&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;p&gt;&lt;a href="http://www.gnu.org/licenses/gpl-3.0.txt" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/1ba3411d21f0105e0df26c7e29aa214578d377b5/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d47504c5f332d677265656e2e737667" alt="License GPL 3" data-canonical-src="https://img.shields.io/badge/license-GPL_3-green.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://www.patreon.com/bbatsov" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/451cb702b2e60e29c1a84aa24a17a1a8d313639e/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f70617472656f6e2d646f6e6174652d6f72616e67652e737667" alt="Patreon" data-canonical-src="https://img.shields.io/badge/patreon-donate-orange.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-emacs-prelude" class="anchor" aria-hidden="true" href="#emacs-prelude"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Emacs Prelude&lt;/h1&gt;
&lt;p&gt;Prelude is an Emacs distribution that aims to enhance the default
Emacs experience.  Prelude alters a lot of the default settings,
bundles a plethora of additional packages and adds its own core
library to the mix. The final product offers an easy to use Emacs
configuration for Emacs newcomers and lots of additional power for
Emacs power users.&lt;/p&gt;
&lt;p&gt;Prelude is compatible &lt;strong&gt;ONLY with GNU Emacs 25.1+&lt;/strong&gt;. In general you're
advised to always run Prelude with the latest Emacs - currently
&lt;strong&gt;26.1&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;You can support the development of Prelude via
&lt;a href="https://www.paypal.me/bbatsov" rel="nofollow"&gt;PayPal&lt;/a&gt; and
&lt;a href="https://www.patreon.com/bbatsov" rel="nofollow"&gt;Patreon&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-fast-forward" class="anchor" aria-hidden="true" href="#fast-forward"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Fast Forward&lt;/h2&gt;
&lt;p&gt;Assuming you're using an Unix-like OS (&lt;code&gt;*BSD&lt;/code&gt;, &lt;code&gt;GNU/Linux&lt;/code&gt;, &lt;code&gt;macOS&lt;/code&gt;, &lt;code&gt;Solaris&lt;/code&gt;,
etc), you already have Emacs 24.4+ installed, as well as &lt;code&gt;git&lt;/code&gt; &amp;amp; &lt;code&gt;curl&lt;/code&gt; you
can skip the whole manual and just type in your favorite shell the
following command:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;curl -L https://git.io/epre &lt;span class="pl-k"&gt;|&lt;/span&gt; sh&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can now power up your Emacs, sit back and enjoy Prelude,
forgetting about the rest of this manual.&lt;/p&gt;
&lt;p&gt;There are two environment variables you can use to control the
source repository and the installation directory. To change the
installation directory:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;export&lt;/span&gt; PRELUDE_INSTALL_DIR=&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-smi"&gt;$HOME&lt;/span&gt;/.emacs.d&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;&amp;amp;&amp;amp;&lt;/span&gt; curl -L https://github.com/bbatsov/prelude/raw/master/utils/installer.sh &lt;span class="pl-k"&gt;|&lt;/span&gt; sh&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To change the source repository:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;export&lt;/span&gt; PRELUDE_URL=&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;https://github.com/yourname/prelude.git&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;&amp;amp;&amp;amp;&lt;/span&gt; curl -L https://github.com/bbatsov/prelude/raw/master/utils/installer.sh &lt;span class="pl-k"&gt;|&lt;/span&gt; sh&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that the installer will back up any existing &lt;code&gt;.emacs&lt;/code&gt; file or
&lt;code&gt;.emacs.d&lt;/code&gt; since it will unpack Prelude's code in &lt;code&gt;.emacs.d&lt;/code&gt;. If
you're doing a manual install make sure you don't have a &lt;code&gt;.emacs&lt;/code&gt; file
or back up your existing &lt;code&gt;.emacs.d&lt;/code&gt; directory manually.&lt;/p&gt;
&lt;p&gt;Don't forget to adjust your &lt;code&gt;prelude-modules.el&lt;/code&gt; file in your personal directory
once the installation is done. By default most of the modules
that ship with Prelude are not loaded.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-user-manual" class="anchor" aria-hidden="true" href="#user-manual"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;User Manual&lt;/h2&gt;
&lt;p&gt;Check out our &lt;a href="https://prelude.emacsredux.com" rel="nofollow"&gt;user manual&lt;/a&gt; for more information.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-known-issues" class="anchor" aria-hidden="true" href="#known-issues"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Known issues&lt;/h2&gt;
&lt;p&gt;Check out the project's
&lt;a href="https://github.com/bbatsov/prelude/issues?sort=created&amp;amp;direction=desc&amp;amp;state=open"&gt;issue list&lt;/a&gt;
a list of unresolved issues. By the way - feel free to fix any of them
and send me a pull request. :-)&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-support" class="anchor" aria-hidden="true" href="#support"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Support&lt;/h2&gt;
&lt;p&gt;Support is available via several channels:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Prelude's Google Group &lt;a href="mailto:emacs-prelude@googlegroups.com"&gt;emacs-prelude@googlegroups.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Prelude's Freenode channel (&lt;code&gt;#prelude-emacs&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gitter.im/bbatsov/prelude" rel="nofollow"&gt;Gitter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-contributors" class="anchor" aria-hidden="true" href="#contributors"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contributors&lt;/h2&gt;
&lt;p&gt;Here's a &lt;a href="https://github.com/bbatsov/prelude/contributors"&gt;list&lt;/a&gt; of all the people who have contributed to the
development of Emacs Prelude.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-bugs--improvements" class="anchor" aria-hidden="true" href="#bugs--improvements"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Bugs &amp;amp; Improvements&lt;/h2&gt;
&lt;p&gt;Bug reports and suggestions for improvements are always
welcome. GitHub pull requests are even better! :-)&lt;/p&gt;
&lt;p&gt;Cheers,&lt;br&gt;
&lt;a href="https://twitter.com/bbatsov" rel="nofollow"&gt;Bozhidar&lt;/a&gt;&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>bbatsov</author><guid isPermaLink="false">https://github.com/bbatsov/prelude</guid><pubDate>Thu, 30 Jan 2020 00:14:00 GMT</pubDate></item><item><title>alphapapa/org-ql #15 in Emacs Lisp, This week</title><link>https://github.com/alphapapa/org-ql</link><description>&lt;p&gt;&lt;i&gt;An Org-mode query language, including search commands and saved views&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="org" data-path="README.org"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-org-ql" class="anchor" aria-hidden="true" href="#org-ql"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;org-ql&lt;/h1&gt;
&lt;a href="https://alphapapa.github.io/dont-tread-on-emacs/" rel="nofollow"&gt;&lt;img src="images/dont-tread-on-emacs-150.png" align="right" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://melpa.org/#/org-ql" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/5d62509f58d60d2a654c327171e06b6f3746c598/68747470733a2f2f6d656c70612e6f72672f7061636b616765732f6f72672d716c2d62616467652e737667" data-canonical-src="https://melpa.org/packages/org-ql-badge.svg" style="max-width:100%;"&gt;&lt;/a&gt; &lt;a href="https://stable.melpa.org/#/org-ql" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/450ef4eedff0754a5ca7b075a6557a9cb5895f58/68747470733a2f2f737461626c652e6d656c70612e6f72672f7061636b616765732f6f72672d716c2d62616467652e737667" data-canonical-src="https://stable.melpa.org/packages/org-ql-badge.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;p&gt;This package provides a query language for Org files.  It offers two syntax styles: Lisp-like sexps and search engine-like keywords.&lt;/p&gt;
&lt;p&gt;It includes three libraries: The &lt;code&gt;org-ql&lt;/code&gt; library is flexible and may be used as a backend for other tools.  The libraries &lt;code&gt;org-ql-search&lt;/code&gt; and &lt;code&gt;helm-org-ql&lt;/code&gt; provide interactive search commands and saved views.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-contents" class="anchor" aria-hidden="true" href="#contents"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contents&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="#screenshots"&gt;Screenshots&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="#installation"&gt;Installation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="#usage"&gt;Usage&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href="#commands"&gt;Commands&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#queries"&gt;Queries&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href="#non-sexp-query-syntax"&gt;Non-sexp query syntax&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href="#predicates"&gt;Predicates&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href="#datetime-predicates"&gt;Date/time predicates&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href="#functions--macros"&gt;Functions / Macros&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href="#changelog"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="#notes"&gt;Notes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;a id="user-content-screenshots" class="anchor" aria-hidden="true" href="#screenshots"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Screenshots&lt;/h1&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="images/org-ql-search.gif"&gt;&lt;img src="images/org-ql-search.gif" alt="images/org-ql-search.gif" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="images/org-ql-search-snippet.png"&gt;&lt;img src="images/org-ql-search-snippet.png" alt="images/org-ql-search-snippet.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="images/helm-org-ql.gif"&gt;&lt;img src="images/helm-org-ql.gif" alt="images/helm-org-ql.gif" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="images/org-ql-view-sidebar.gif"&gt;&lt;img src="images/org-ql-view-sidebar.gif" alt="images/org-ql-view-sidebar.gif" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installation&lt;/h1&gt;
&lt;p&gt;The package may be installed directly from &lt;a href="https://melpa.org/#/org-ql" rel="nofollow"&gt;MELPA&lt;/a&gt; or with other tools like &lt;a href="https://framagit.org/steckerhalter/quelpa" rel="nofollow"&gt;Quelpa&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;After installation, you can use the commands without additional configuration.  &lt;i&gt;Note: The command =helm-org-ql= only works if the package =helm-org= is installed; Helm is not a dependency of this package, so it’s not automatically installed.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;To use the functions and macros in your own Elisp code, use libraries &lt;code&gt;org-ql&lt;/code&gt; and &lt;code&gt;org-ql-view&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-quelpa" class="anchor" aria-hidden="true" href="#quelpa"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Quelpa&lt;/h2&gt;
&lt;p&gt;Installing with &lt;a href="https://framagit.org/steckerhalter/quelpa" rel="nofollow"&gt;Quelpa&lt;/a&gt; is easy:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Install &lt;a href="https://framagit.org/steckerhalter/quelpa-use-package#installation" rel="nofollow"&gt;quelpa-use-package&lt;/a&gt; (which can be installed directly from MELPA).&lt;/li&gt;
  &lt;li&gt;Add this form to your init file:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; org-ql
  &lt;span class="pl-c1"&gt;:quelpa&lt;/span&gt; (org-ql &lt;span class="pl-c1"&gt;:fetcher&lt;/span&gt; github &lt;span class="pl-c1"&gt;:repo&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;alphapapa/org-ql&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;h1&gt;&lt;a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Usage&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="#commands"&gt;Commands&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="#queries"&gt;Queries&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href="#non-sexp-query-syntax"&gt;Non-sexp query syntax&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#general-predicates"&gt;General predicates&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#ancestordescendant-predicates"&gt;Ancestor/descendant predicates&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#datetime-predicates"&gt;Date/time predicates&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href="#functions--macros"&gt;Functions / Macros&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Feedback on these APIs is welcome.  Eventually, after being tested and polished, they will be considered stable.&lt;/p&gt;
&lt;p&gt;Lisp code examples are in &lt;a href="examples.org"&gt;examples.org&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-commands" class="anchor" aria-hidden="true" href="#commands"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Commands&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;b&gt;Showing an agenda-like view:&lt;/b&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href="#org-ql-search"&gt;org-ql-search&lt;/a&gt; (command)&lt;/li&gt;
      &lt;li&gt;&lt;a href="#org-ql-view"&gt;org-ql-view&lt;/a&gt; (command)&lt;/li&gt;
      &lt;li&gt;&lt;a href="#org-ql-view-sidebar"&gt;org-ql-view-sidebar&lt;/a&gt; (command)&lt;/li&gt;
      &lt;li&gt;&lt;a href="#org-ql-view-recent-items"&gt;org-ql-view-recent-items&lt;/a&gt; (command)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;b&gt;Showing a tree in a buffer:&lt;/b&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href="#org-ql-sparse-tree"&gt;org-ql-sparse-tree&lt;/a&gt; (command)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;b&gt;Showing results with Helm&lt;/b&gt;:
    &lt;ul&gt;
      &lt;li&gt;&lt;a href="#helm-org-ql"&gt;helm-org-ql&lt;/a&gt; (command)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-org-ql-search" class="anchor" aria-hidden="true" href="#org-ql-search"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;org-ql-search&lt;/h3&gt;
&lt;p&gt;&lt;i&gt;Note: This command supports both sexp queries and &lt;a href="#non-sexp-query-syntax"&gt;non-sexp queries&lt;/a&gt;.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;Read &lt;code&gt;QUERY&lt;/code&gt; and search with &lt;code&gt;org-ql&lt;/code&gt;.  Interactively, prompt for these variables:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;BUFFERS-FILES&lt;/code&gt;: &lt;code&gt;A&lt;/code&gt; list of buffers and/or files to search.  Interactively, may also be:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;buffer&lt;/code&gt;: search the current buffer&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;all&lt;/code&gt;: search all Org buffers&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;agenda&lt;/code&gt;: search buffers returned by the function &lt;code&gt;org-agenda-files&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;An expression which evaluates to a list of files/buffers&lt;/li&gt;
  &lt;li&gt;A space-separated list of file or buffer names&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;GROUPS&lt;/code&gt;: An &lt;code&gt;org-super-agenda&lt;/code&gt; group set.  See variable &lt;code&gt;org-super-agenda-groups&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;NARROW&lt;/code&gt;: When non-nil, don’t widen buffers before searching. Interactively, with prefix, leave narrowed.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;SORT&lt;/code&gt;: One or a list of &lt;code&gt;org-ql&lt;/code&gt; sorting functions, like &lt;code&gt;date&lt;/code&gt; or &lt;code&gt;priority&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Bindings:&lt;/b&gt; Keys bound in results buffer.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;g&lt;/code&gt;: Refresh results.  With prefix, prompt to adjust search parameters.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;C-x C-s&lt;/code&gt;: Save query to variable &lt;code&gt;org-ql-views&lt;/code&gt; (accessible with command &lt;code&gt;org-ql-view&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; The view buffer is currently put in &lt;code&gt;org-agenda-mode&lt;/code&gt;, which means that &lt;i&gt;some&lt;/i&gt; Org Agenda commands work, such as jumping to entries and changing item priorities (without necessarily updating the view).  This feature is experimental and not guaranteed to work correctly with all commands.  (It works to the extent it does because the appropriate text properties are placed on each item, imitating an Agenda buffer.)&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-helm-org-ql" class="anchor" aria-hidden="true" href="#helm-org-ql"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;helm-org-ql&lt;/h3&gt;
&lt;p&gt;&lt;i&gt;Note: This command uses &lt;a href="#non-sexp-query-syntax"&gt;non-sexp queries&lt;/a&gt;.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;This command displays matches with Helm.  &lt;b&gt;Note:&lt;/b&gt; Helm is not a package dependency, so this command only works if the package &lt;code&gt;helm-org&lt;/code&gt; is installed.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Press &lt;code&gt;C-x C-s&lt;/code&gt; in the Helm session to save the results to an &lt;code&gt;org-ql-search&lt;/code&gt; buffer.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-org-ql-view" class="anchor" aria-hidden="true" href="#org-ql-view"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;org-ql-view&lt;/h3&gt;
&lt;p&gt;Choose and display a view stored in &lt;code&gt;org-ql-views&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-org-ql-view-sidebar" class="anchor" aria-hidden="true" href="#org-ql-view-sidebar"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;org-ql-view-sidebar&lt;/h3&gt;
&lt;p&gt;Show a sidebar window listing views stored in &lt;code&gt;org-ql-views&lt;/code&gt; for easy access.  In the sidebar, press &lt;code&gt;RET&lt;/code&gt; or &lt;code&gt;mouse-1&lt;/code&gt; to show the view at point, and press &lt;code&gt;c&lt;/code&gt; to customize the view at point.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-org-ql-view-recent-items" class="anchor" aria-hidden="true" href="#org-ql-view-recent-items"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;org-ql-view-recent-items&lt;/h3&gt;
&lt;p&gt;Show items in &lt;code&gt;FILES&lt;/code&gt; from last &lt;code&gt;DAYS&lt;/code&gt; days with timestamps of &lt;code&gt;TYPE&lt;/code&gt;.  &lt;code&gt;TYPE&lt;/code&gt; may be &lt;code&gt;ts&lt;/code&gt;, &lt;code&gt;ts-active&lt;/code&gt;, &lt;code&gt;ts-inactive&lt;/code&gt;, &lt;code&gt;clocked&lt;/code&gt;, &lt;code&gt;closed&lt;/code&gt;, &lt;code&gt;deadline&lt;/code&gt;, &lt;code&gt;planning&lt;/code&gt;, or &lt;code&gt;scheduled&lt;/code&gt;.  &lt;code&gt;FILES&lt;/code&gt; defaults to those returned by the function &lt;code&gt;org-agenda-files&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-org-ql-sparse-tree" class="anchor" aria-hidden="true" href="#org-ql-sparse-tree"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;org-ql-sparse-tree&lt;/h3&gt;
&lt;p&gt;Arguments: &lt;code&gt;(query &amp;amp;key keep-previous (buffer (current-buffer)))&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Show a sparse tree for &lt;code&gt;QUERY&lt;/code&gt; in &lt;code&gt;BUFFER&lt;/code&gt; and return number of results.  The tree will show the lines where the query matches, and any other context defined in &lt;code&gt;org-show-context-detail&lt;/code&gt;, which see.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;QUERY&lt;/code&gt; is an &lt;code&gt;org-ql&lt;/code&gt; query sexp (quoted, since this is a function).  &lt;code&gt;BUFFER&lt;/code&gt; defaults to the current buffer.  When &lt;code&gt;KEEP-PREVIOUS&lt;/code&gt; is non-nil (interactively, with prefix), the outline is not reset to the overview state before finding matches, which allows stacking calls to this command.  Runs &lt;code&gt;org-occur-hook&lt;/code&gt; after making the sparse tree.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-queries" class="anchor" aria-hidden="true" href="#queries"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Queries&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="#non-sexp-query-syntax"&gt;Non-sexp query syntax&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="#general-predicates"&gt;General predicates&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="#ancestordescendant-predicates"&gt;Ancestor/descendant predicates&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="#datetime-predicates"&gt;Date/time predicates&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;An &lt;code&gt;org-ql&lt;/code&gt; query is a lisp form which may contain arbitrary lisp forms, as well as certain built-in predicates.  It is byte-compiled into a predicate function which is tested with point on each heading in an Org buffer; when it returns non-nil, the heading matches the query.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Notes:&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Bare strings like ~”string”~ are automatically converted to &lt;code&gt;(regexp "string")&lt;/code&gt; predicates.&lt;/li&gt;
  &lt;li&gt;Standard numeric comparator function symbols (&lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;lt;=&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;gt;=&lt;/code&gt;, &lt;code&gt;=&lt;/code&gt; ) need not be quoted when passed as an argument to predicates which accept them.  The resemblance to infix notation is coincidental.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-non-sexp-query-syntax" class="anchor" aria-hidden="true" href="#non-sexp-query-syntax"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Non-sexp query syntax&lt;/h3&gt;
&lt;p&gt;The command &lt;code&gt;org-ql-search&lt;/code&gt; also accepts, and the command &lt;code&gt;helm-org-ql&lt;/code&gt; only accepts, an alternative, non-sexp query syntax.  The syntax is simple, and a few examples of queries in both syntaxes should suffice.  By default, when multiple predicates are used, they are combined with boolean &lt;code&gt;and&lt;/code&gt;.&lt;/p&gt;
&lt;table&gt;
  &lt;tbody&gt;&lt;tr&gt;&lt;th&gt;Sexp syntax&lt;/th&gt;&lt;th&gt;Non-sexp syntax&lt;/th&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;(todo)&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;todo:&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;(todo "SOMEDAY")&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;todo:SOMEDAY&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;(todo "SOMEDAY" "WAITING")&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;todo:SOMEDAY,WAITING&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;(ts :on today)&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;ts:on=today&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;(ts-active :from "2017-01-01" :to "2018-01-01")&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;ts-active:from=2017-01-01,to=2018-01-01&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;(clocked :on -1)&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;clocked:on=-1&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;(heading "quoted phrase" "word")&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;heading:"quoted phrase",word&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;(and (tags "book" "books") (priority "A"))&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;tags:book,books priority:A&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;(src :lang "elisp" :regexps ("defun"))&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;src:defun,lang=elisp&lt;/code&gt; or &lt;code&gt;src:lang=elisp,defun&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;(and (tags "space") (not (regexp "moon")))&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;tags:space !moon&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;(priority &amp;gt;= B)&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;priority:A,B&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;Note that the &lt;code&gt;priority&lt;/code&gt; predicate does not support comparators in the non-sexp syntax, so multiple priorities should be passed instead, as seen in the last example.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-general-predicates" class="anchor" aria-hidden="true" href="#general-predicates"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;General predicates&lt;/h3&gt;
&lt;p&gt;Arguments are listed next to predicate names, where applicable.&lt;/p&gt;
&lt;dl&gt;
  &lt;dt&gt;&lt;code&gt;category (&amp;amp;optional categories)&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;Return non-nil if current heading is in one or more of &lt;code&gt;CATEGORIES&lt;/code&gt; (a list of strings).&lt;/dd&gt;
  &lt;dt&gt;&lt;code&gt;done&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;Return non-nil if entry’s &lt;code&gt;TODO&lt;/code&gt; keyword is in &lt;code&gt;org-done-keywords&lt;/code&gt;.&lt;/dd&gt;
  &lt;dt&gt;&lt;code&gt;habit&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;Return non-nil if entry is a habit.&lt;/dd&gt;
  &lt;dt&gt;&lt;code&gt;heading (&amp;amp;rest regexps)&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;Return non-nil if current entry’s heading matches all &lt;code&gt;REGEXPS&lt;/code&gt; (regexp strings).
    &lt;ul&gt;
      &lt;li&gt;Aliases: &lt;code&gt;h&lt;/code&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/dd&gt;
  &lt;dt&gt;&lt;code&gt;level (level-or-comparator &amp;amp;optional level)&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;Return non-nil if current heading’s outline level matches arguments.  The following forms are accepted: &lt;code&gt;(level NUMBER)&lt;/code&gt;: Matches if heading level is &lt;code&gt;NUMBER&lt;/code&gt;.  &lt;code&gt;(level NUMBER NUMBER)&lt;/code&gt;: Matches if heading level is equal to or between NUMBERs.  &lt;code&gt;(level COMPARATOR NUMBER)&lt;/code&gt;: Matches if heading level compares to &lt;code&gt;NUMBER&lt;/code&gt; with &lt;code&gt;COMPARATOR&lt;/code&gt;.  &lt;code&gt;COMPARATOR&lt;/code&gt; may be &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;lt;=&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, or &lt;code&gt;&amp;gt;=&lt;/code&gt;.&lt;/dd&gt;
  &lt;dt&gt;&lt;code&gt;outline-path (&amp;amp;rest strings)&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;Return non-nil if current node’s outline path matches all of &lt;code&gt;STRINGS&lt;/code&gt;.  Each string may appear as a substring in any part of the node’s outline path.  For example, the path &lt;code&gt;Food/Fruits/Grapes&lt;/code&gt; would match &lt;code&gt;(olp "Fruit" "Grape")&lt;/code&gt;.
    &lt;ul&gt;
      &lt;li&gt;Aliases: &lt;code&gt;olp&lt;/code&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/dd&gt;
  &lt;dt&gt;&lt;code&gt;outline-path-segment (&amp;amp;rest strings)&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;Return non-nil if current node’s outline path matches &lt;code&gt;STRINGS&lt;/code&gt;.  Matches &lt;code&gt;STRINGS&lt;/code&gt; as a contiguous segment of the outline path.  Each string is compared as a substring.  For example the path &lt;code&gt;Food/Fruits/Grapes&lt;/code&gt; would match &lt;code&gt;(olps "Fruit" "Grape")&lt;/code&gt; but not &lt;code&gt;(olps "Food" "Grape")&lt;/code&gt;.
    &lt;ul&gt;
      &lt;li&gt;Aliases: &lt;code&gt;olps&lt;/code&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/dd&gt;
  &lt;dt&gt;&lt;code&gt;path (&amp;amp;rest regexps)&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;Return non-nil if current heading’s buffer’s filename path matches any of &lt;code&gt;REGEXPS&lt;/code&gt; (regexp strings).  Without arguments, return non-nil if buffer is file-backed.&lt;/dd&gt;
  &lt;dt&gt;&lt;code&gt;priority (&amp;amp;rest args)&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;Return non-nil if current heading has a certain priority.  &lt;code&gt;ARGS&lt;/code&gt; may be either a list of one or more priority letters as strings, or a comparator function symbol followed by a priority letter string.  For example:  &lt;code&gt;(priority "A") (priority "A" "B") (priority '&amp;gt;= "B")&lt;/code&gt; Note that items without a priority cookie never match this predicate (while Org itself considers items without a cookie to have the default priority, which, by default, is equal to priority &lt;code&gt;B&lt;/code&gt;).&lt;/dd&gt;
  &lt;dt&gt;&lt;code&gt;property (property &amp;amp;optional value)&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;Return non-nil if current entry has &lt;code&gt;PROPERTY&lt;/code&gt; (a string), and optionally &lt;code&gt;VALUE&lt;/code&gt; (a string).  Note that property inheritance is currently &lt;i&gt;not&lt;/i&gt; enabled for this predicate.  If you need to test with inheritance, you could use a custom predicate form, like &lt;code&gt;(org-entry-get (point) "PROPERTY" 'inherit)&lt;/code&gt;.&lt;/dd&gt;
  &lt;dt&gt;&lt;code&gt;regexp (&amp;amp;rest regexps)&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;Return non-nil if current entry matches all of &lt;code&gt;REGEXPS&lt;/code&gt; (regexp strings).  Matches against entire entry, from beginning of its heading to the next heading.
    &lt;ul&gt;
      &lt;li&gt;Aliases: &lt;code&gt;r&lt;/code&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/dd&gt;
  &lt;dt&gt;&lt;code&gt;src (&amp;amp;key lang regexps)&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;Return non-nil if current entry contains an Org Babel source block.  If &lt;code&gt;LANG&lt;/code&gt; is non-nil, match blocks of that language.  If &lt;code&gt;REGEXPS&lt;/code&gt; is non-nil, require that block’s contents match all regexps.&lt;/dd&gt;
  &lt;dt&gt;&lt;code&gt;tags (&amp;amp;optional tags)&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;Return non-nil if current heading has one or more of &lt;code&gt;TAGS&lt;/code&gt; (a list of strings).  Tests both inherited and local tags.&lt;/dd&gt;
  &lt;dt&gt;&lt;code&gt;tags-inherited (&amp;amp;optional tags)&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;Return non-nil if current heading’s inherited tags include one or more of &lt;code&gt;TAGS&lt;/code&gt; (a list of strings).  If &lt;code&gt;TAGS&lt;/code&gt; is nil, return non-nil if heading has any inherited tags.
    &lt;ul&gt;
      &lt;li&gt;Aliases: &lt;code&gt;inherited-tags&lt;/code&gt;, &lt;code&gt;tags-i&lt;/code&gt;, &lt;code&gt;itags&lt;/code&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/dd&gt;
  &lt;dt&gt;&lt;code&gt;tags-local (&amp;amp;optional tags)&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;Return non-nil if current heading’s local tags include one or more of &lt;code&gt;TAGS&lt;/code&gt; (a list of strings).  If &lt;code&gt;TAGS&lt;/code&gt; is nil, return non-nil if heading has any local tags.
    &lt;ul&gt;
      &lt;li&gt;Aliases: &lt;code&gt;local-tags&lt;/code&gt;, &lt;code&gt;tags-l&lt;/code&gt;, &lt;code&gt;ltags&lt;/code&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/dd&gt;
  &lt;dt&gt;&lt;code&gt;tags-all (tags)&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;Return non-nil if current heading includes all of &lt;code&gt;TAGS&lt;/code&gt;.  Tests both inherited and local tags.
    &lt;ul&gt;
      &lt;li&gt;Aliases: &lt;code&gt;tags&amp;amp;&lt;/code&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/dd&gt;
  &lt;dt&gt;&lt;code&gt;todo (&amp;amp;optional keywords)&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;Return non-nil if current heading is a &lt;code&gt;TODO&lt;/code&gt; item.  With &lt;code&gt;KEYWORDS&lt;/code&gt;, return non-nil if its keyword is one of &lt;code&gt;KEYWORDS&lt;/code&gt; (a list of strings).  When called without arguments, only matches non-done tasks (i.e. does not match keywords in &lt;code&gt;org-done-keywords&lt;/code&gt;).&lt;/dd&gt;
&lt;/dl&gt;
&lt;h3&gt;&lt;a id="user-content-ancestordescendant-predicates" class="anchor" aria-hidden="true" href="#ancestordescendant-predicates"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Ancestor/descendant predicates&lt;/h3&gt;
&lt;dl&gt;
  &lt;dt&gt;&lt;code&gt;ancestors (&amp;amp;optional query)&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;Return non-nil if current heading has ancestor headings.  If &lt;code&gt;QUERY&lt;/code&gt;, return non-nil if an ancestor heading matches it.  This selector may be nested.&lt;/dd&gt;
  &lt;dt&gt;&lt;code&gt;children (&amp;amp;optional query)&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;Return non-nil if current heading has direct child headings.  If &lt;code&gt;QUERY&lt;/code&gt;, return non-nil if a child heading matches it.  This selector may be nested, e.g. to match grandchild headings.&lt;/dd&gt;
  &lt;dt&gt;&lt;code&gt;descendants (&amp;amp;optional query)&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;Return non-nil if current heading has descendant headings.  If &lt;code&gt;QUERY&lt;/code&gt;, return non-nil if a descendant heading matches it.  This selector may be nested (if you can grok the nesting!).&lt;/dd&gt;
  &lt;dt&gt;&lt;code&gt;parent (&amp;amp;optional query)&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;Return non-nil if current heading has a direct parent heading.  If &lt;code&gt;QUERY&lt;/code&gt;, return non-nil if the parent heading matches it.  This selector may be nested, e.g. to match grandparent headings.&lt;/dd&gt;
&lt;/dl&gt;
&lt;h3&gt;&lt;a id="user-content-datetime-predicates" class="anchor" aria-hidden="true" href="#datetime-predicates"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Date/time predicates&lt;/h3&gt;
&lt;p&gt;All of these predicates take optional keyword arguments &lt;code&gt;:from&lt;/code&gt;, &lt;code&gt;:to:&lt;/code&gt;, and &lt;code&gt;:on&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;If &lt;code&gt;:from&lt;/code&gt;, return non-nil if entry has a timestamp on or after &lt;code&gt;:from&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;If &lt;code&gt;:to&lt;/code&gt;, return non-nil if entry has a timestamp on or before &lt;code&gt;:to&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;If &lt;code&gt;:on&lt;/code&gt;, return non-nil if entry has a timestamp on date &lt;code&gt;:on&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Argument values should be either a number of days (positive to look forward, or negative to look backward), a &lt;code&gt;ts&lt;/code&gt; struct, or a string parseable by &lt;code&gt;parse-time-string&lt;/code&gt; (the string may omit the time value).&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;b&gt;Predicates&lt;/b&gt;
    &lt;dl&gt;
      &lt;dt&gt;&lt;code&gt;ts&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;Return non-nil if current entry has a timestamp in given period.  If no arguments are specified, return non-nil if entry has any timestamp.&lt;/dd&gt;
      &lt;dt&gt;&lt;code&gt;ts-active&lt;/code&gt;, &lt;code&gt;ts-a&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;Like &lt;code&gt;ts&lt;/code&gt;, but only matches active timestamps.&lt;/dd&gt;
      &lt;dt&gt;&lt;code&gt;ts-inactive&lt;/code&gt;, &lt;code&gt;ts-i&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;Like &lt;code&gt;ts&lt;/code&gt;, but only matches inactive timestamps.&lt;/dd&gt;
    &lt;/dl&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The following predicates, in addition to the keyword arguments, can also take a single argument, a number, which looks backward or forward a number of days.  The number can be negative to invert the direction.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;b&gt;Backward-looking&lt;/b&gt;
    &lt;dl&gt;
      &lt;dt&gt;&lt;code&gt;clocked&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;Return non-nil if current entry was clocked in given period.  If no arguments are specified, return non-nil if entry was clocked at any time.  Note: Clock entries are expected to be clocked out.  Currently clocked entries (i.e. with unclosed timestamp ranges) are ignored.&lt;/dd&gt;
      &lt;dt&gt;&lt;code&gt;closed&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;Return non-nil if current entry was closed in given period.  If no arguments are specified, return non-nil if entry was closed at any time.&lt;/dd&gt;
    &lt;/dl&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;b&gt;Forward-looking&lt;/b&gt;
    &lt;dl&gt;
      &lt;dt&gt;&lt;code&gt;deadline&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;Return non-nil if current entry has deadline in given period.  If argument is &lt;code&gt;auto&lt;/code&gt;, return non-nil if entry has deadline within &lt;code&gt;org-deadline-warning-days&lt;/code&gt;.  If no arguments are specified, return non-nil if entry has any deadline.&lt;/dd&gt;
      &lt;dt&gt;&lt;code&gt;planning&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;Return non-nil if current entry has planning timestamp in given period (i.e. its deadline, scheduled, or closed timestamp).  If no arguments are specified, return non-nil if entry is scheduled at any time.&lt;/dd&gt;
      &lt;dt&gt;&lt;code&gt;scheduled&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;Return non-nil if current entry is scheduled in given period.  If no arguments are specified, return non-nil if entry is scheduled at any time.&lt;/dd&gt;
    &lt;/dl&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-functions--macros" class="anchor" aria-hidden="true" href="#functions--macros"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Functions / Macros&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="#agenda-like-views"&gt;Agenda-like views&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href="#function-org-ql-block"&gt;Function: org-ql-block&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href="#listing--acting-on-results"&gt;Listing / acting-on results&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href="#function-org-ql-select"&gt;Function: org-ql-select&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#function-org-ql-query"&gt;Function: org-ql-query&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#macro-org-ql"&gt;Macro: org-ql&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-agenda-like-views" class="anchor" aria-hidden="true" href="#agenda-like-views"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Agenda-like views&lt;/h3&gt;
&lt;h4&gt;&lt;a id="user-content-function-org-ql-block" class="anchor" aria-hidden="true" href="#function-org-ql-block"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Function: &lt;code&gt;org-ql-block&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;For use as a custom agenda block type in &lt;code&gt;org-agenda-custom-commands&lt;/code&gt;.  For example, you could define a custom series command like this, which would list all priority A items tagged &lt;code&gt;Emacs&lt;/code&gt; with to-do keyword &lt;code&gt;SOMEDAY&lt;/code&gt;, followed by the standard agenda view, in a single buffer:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;setq&lt;/span&gt; org-agenda-custom-commands
      '((&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;ces&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Custom: Agenda and Emacs SOMEDAY [#A] items&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
         ((org-ql-block '(&lt;span class="pl-k"&gt;and&lt;/span&gt; (todo &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SOMEDAY&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
                              (tags &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Emacs&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
                              (priority &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;A&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
                        ((org-ql-block-header &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SOMEDAY :Emacs: High-priority&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)))
          (agenda)))))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Which would be equivalent to a &lt;code&gt;tags-todo&lt;/code&gt; search like this:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;setq&lt;/span&gt; org-agenda-custom-commands
      '((&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;ces&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Custom: Agenda and Emacs SOMEDAY [#A] items&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
         ((tags-todo &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;PRIORITY=&lt;span class="pl-cce"&gt;\"&lt;/span&gt;A&lt;span class="pl-cce"&gt;\"&lt;/span&gt;+Emacs/!SOMEDAY&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
          (agenda)))))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However, the &lt;code&gt;org-ql-block&lt;/code&gt; version runs in about 1/5th the time.&lt;/p&gt;
&lt;p&gt;The variable &lt;code&gt;org-ql-block-header&lt;/code&gt; may be bound to a string to use as the block header, otherwise the header is formed automatically.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-listing--acting-on-results" class="anchor" aria-hidden="true" href="#listing--acting-on-results"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Listing / acting-on results&lt;/h3&gt;
&lt;h4&gt;&lt;a id="user-content-function-org-ql-select" class="anchor" aria-hidden="true" href="#function-org-ql-select"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Function: &lt;code&gt;org-ql-select&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;i&gt;Arguments:&lt;/i&gt; &lt;code&gt;(buffers-or-files query &amp;amp;key action narrow sort)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Return items matching &lt;code&gt;QUERY&lt;/code&gt; in &lt;code&gt;BUFFERS-OR-FILES&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;BUFFERS-OR-FILES&lt;/code&gt; is a one or a list of files and/or buffers.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;QUERY&lt;/code&gt; is an &lt;code&gt;org-ql&lt;/code&gt; query sexp (quoted, since this is a function).&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ACTION&lt;/code&gt; is a function which is called on each matching entry with point at the beginning of its heading.  It may be:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;element&lt;/code&gt; or nil: Equivalent to &lt;code&gt;org-element-headline-parser&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;element-with-markers&lt;/code&gt;: Equivalent to calling &lt;code&gt;org-element-headline-parser&lt;/code&gt;, with markers added using &lt;code&gt;org-ql--add-markers&lt;/code&gt;.  Suitable for formatting with &lt;code&gt;org-ql-agenda--format-element&lt;/code&gt;, allowing insertion into an Org Agenda-like buffer.&lt;/li&gt;
  &lt;li&gt;A sexp, which will be byte-compiled into a lambda function.&lt;/li&gt;
  &lt;li&gt;A function symbol.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If &lt;code&gt;NARROW&lt;/code&gt; is non-nil, buffers are not widened (the default is to widen and search the entire buffer).&lt;/p&gt;
&lt;p&gt;&lt;code&gt;SORT&lt;/code&gt; is either nil, in which case items are not sorted; or one or a list of defined &lt;code&gt;org-ql&lt;/code&gt; sorting methods (&lt;code&gt;date&lt;/code&gt;, &lt;code&gt;deadline&lt;/code&gt;, &lt;code&gt;scheduled&lt;/code&gt;, &lt;code&gt;todo&lt;/code&gt;, &lt;code&gt;priority&lt;/code&gt;, or &lt;code&gt;random&lt;/code&gt;); or a user-defined comparator function that accepts two items as arguments and returns nil or non-nil.&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Return list of to-do headings in inbox file with tags and to-do keywords:&lt;/span&gt;
(org-ql-select &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;~/org/inbox.org&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  '(todo)
  &lt;span class="pl-c1"&gt;:action&lt;/span&gt; &lt;span class="pl-c1"&gt;#&lt;span class="pl-c1"&gt;'org-get-heading&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; ("TODO Practice leaping tall buildings in a single bound  :personal:" ...)&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Without tags and to-do keywords:&lt;/span&gt;
(org-ql-select &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;~/org/inbox.org&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  '(todo)
  &lt;span class="pl-c1"&gt;:action&lt;/span&gt; '(&lt;span class="pl-c1"&gt;org-get-heading&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;))
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; ("Practice leaping tall buildings in a single bound" ...)&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Return WAITING heading elements in agenda files:&lt;/span&gt;
(org-ql-select (&lt;span class="pl-c1"&gt;org-agenda-files&lt;/span&gt;)
  '(todo &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;WAITING&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
  &lt;span class="pl-c1"&gt;:action&lt;/span&gt; &lt;span class="pl-c1"&gt;'element&lt;/span&gt;)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; ((headline (:raw-value "Visit the moon" ...) ...) ...)&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Since &lt;span class="pl-smi"&gt;`element'&lt;/span&gt; is the default for ACTION, it may be omitted:&lt;/span&gt;
(org-ql-select (&lt;span class="pl-c1"&gt;org-agenda-files&lt;/span&gt;)
  '(todo &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;WAITING&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; ((headline (:raw-value "Visit the moon" ...) ...) ...)&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content-function-org-ql-query" class="anchor" aria-hidden="true" href="#function-org-ql-query"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Function: &lt;code&gt;org-ql-query&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;i&gt;Arguments:&lt;/i&gt; &lt;code&gt;(&amp;amp;key (select 'element-with-markers) from where order-by narrow)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Like &lt;code&gt;org-ql-select&lt;/code&gt;, but arguments are named more like a &lt;code&gt;SQL&lt;/code&gt; query.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;SELECT&lt;/code&gt; corresponds to the &lt;code&gt;org-ql-select&lt;/code&gt; argument &lt;code&gt;ACTION&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;FROM&lt;/code&gt; corresponds to the &lt;code&gt;org-ql-select&lt;/code&gt; argument &lt;code&gt;BUFFERS-OR-FILES&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;WHERE&lt;/code&gt; corresponds to the &lt;code&gt;org-ql-select&lt;/code&gt; argument &lt;code&gt;QUERY&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;ORDER-BY&lt;/code&gt; corresponds to the &lt;code&gt;org-ql-select&lt;/code&gt; argument &lt;code&gt;SORT&lt;/code&gt;, which see.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;NARROW&lt;/code&gt; corresponds to the &lt;code&gt;org-ql-select&lt;/code&gt; argument &lt;code&gt;NARROW&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Return list of to-do headings in inbox file with tags and to-do keywords:&lt;/span&gt;
(org-ql-query
  &lt;span class="pl-c1"&gt;:select&lt;/span&gt; &lt;span class="pl-c1"&gt;#&lt;span class="pl-c1"&gt;'org-get-heading&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:from&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;~/org/inbox.org&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:where&lt;/span&gt; '(todo))
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; ("TODO Practice leaping tall buildings in a single bound  :personal:" ...)&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Without tags and to-do keywords:&lt;/span&gt;
(org-ql-query
  &lt;span class="pl-c1"&gt;:select&lt;/span&gt; '(&lt;span class="pl-c1"&gt;org-get-heading&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;)
  &lt;span class="pl-c1"&gt;:from&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;~/org/inbox.org&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:where&lt;/span&gt; '(todo))
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; ("Practice leaping tall buildings in a single bound" ...)&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Return WAITING heading elements in agenda files:&lt;/span&gt;
(org-ql-query
  &lt;span class="pl-c1"&gt;:select&lt;/span&gt; &lt;span class="pl-c1"&gt;'element&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:from&lt;/span&gt; (&lt;span class="pl-c1"&gt;org-agenda-files&lt;/span&gt;)
  &lt;span class="pl-c1"&gt;:where&lt;/span&gt; '(todo &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;WAITING&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; ((headline (:raw-value "Visit the moon" ...) ...) ...)&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Since &lt;span class="pl-smi"&gt;`element'&lt;/span&gt; is the default for SELECT, it may be omitted:&lt;/span&gt;
(org-ql-query
  &lt;span class="pl-c1"&gt;:from&lt;/span&gt; (&lt;span class="pl-c1"&gt;org-agenda-files&lt;/span&gt;)
  &lt;span class="pl-c1"&gt;:where&lt;/span&gt; '(todo &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;WAITING&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; ((headline (:raw-value "Visit the moon" ...) ...) ...)&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content-macro-org-ql" class="anchor" aria-hidden="true" href="#macro-org-ql"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Macro: &lt;code&gt;org-ql&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;i&gt;Arguments:&lt;/i&gt; &lt;code&gt;(buffers-or-files query &amp;amp;key sort narrow markers action)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Expands into a call to &lt;code&gt;org-ql-select&lt;/code&gt; with the same arguments.  For convenience, arguments should be unquoted.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-changelog" class="anchor" aria-hidden="true" href="#changelog"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Changelog&lt;/h1&gt;
&lt;p&gt;&lt;i&gt;Note:&lt;/i&gt; Breaking changes may be made before version 1.0, but in the event of major changes, attempts at backward compatibility will be made with obsolescence declarations, translation of arguments, etc.  Users who need stability guarantees before 1.0 may choose to use tagged stable releases.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-04" class="anchor" aria-hidden="true" href="#04"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;0.4&lt;/h2&gt;
&lt;p&gt;&lt;i&gt;Note:&lt;/i&gt; The next release, 0.5, may include changes which will require minor updates to written queries (e.g. a few predicates may be renamed).  Users who wish to avoid those changes happening unexpectedly in their configs should avoid upgrading &lt;code&gt;org-ql&lt;/code&gt; beyond 0.4 automatically, as they will be pushed to the &lt;code&gt;master&lt;/code&gt; branch when ready.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Added&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;b&gt;Commands&lt;/b&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code&gt;helm-org-ql-views&lt;/code&gt;, which shows one of &lt;code&gt;org-ql-views&lt;/code&gt; selected with Helm.&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;org-ql-search&lt;/code&gt; can search files in &lt;code&gt;org-directory&lt;/code&gt;; customization options are available in the &lt;code&gt;org-ql-search&lt;/code&gt; group.&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;org-ql-view-refresh&lt;/code&gt; can be called with a prefix argument to adjust search parameters.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;b&gt;Queries&lt;/b&gt;
    &lt;ul&gt;
      &lt;li&gt;Negation of terms in plain queries using &lt;code&gt;!&lt;/code&gt;.  For example, &lt;code&gt;tags:space !moon&lt;/code&gt; to exclude entries which contain &lt;code&gt;moon&lt;/code&gt;.&lt;/li&gt;
      &lt;li&gt;Predicates &lt;code&gt;outline-path&lt;/code&gt; (alias &lt;code&gt;olp&lt;/code&gt;) and &lt;code&gt;outline-path-segment&lt;/code&gt; (alias &lt;code&gt;olps&lt;/code&gt;).&lt;/li&gt;
      &lt;li&gt;Predicate &lt;code&gt;src&lt;/code&gt;, which matches Org Babel source blocks.&lt;/li&gt;
      &lt;li&gt;Predicates &lt;code&gt;parent&lt;/code&gt; and &lt;code&gt;ancestors&lt;/code&gt;.  (Thanks to &lt;a href="https://github.com/mm--"&gt;Josh Moller-Mara&lt;/a&gt;.)&lt;/li&gt;
      &lt;li&gt;Alias &lt;code&gt;h&lt;/code&gt; for &lt;code&gt;heading&lt;/code&gt; predicate.&lt;/li&gt;
      &lt;li&gt;Alias &lt;code&gt;r&lt;/code&gt; for &lt;code&gt;regexp&lt;/code&gt; predicate.  (Thanks to &lt;a href="https://github.com/tumashu"&gt;Feng Shu&lt;/a&gt;.)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Info manual.&lt;/li&gt;
  &lt;li&gt;Function &lt;code&gt;helm-org-ql-source&lt;/code&gt;, which returns a Helm source that searches given buffers/files with &lt;code&gt;helm-org-ql&lt;/code&gt;.  It can be used for custom Helm commands that search certain files.&lt;/li&gt;
  &lt;li&gt;Display a message when views are refreshed.  (Thanks to &lt;a href="https://github.com/xeijin"&gt;xeijin&lt;/a&gt;.)&lt;/li&gt;
  &lt;li&gt;Respect Org Agenda restriction in &lt;code&gt;org-ql-block&lt;/code&gt;.  (Thanks to &lt;a href="https://github.com/yantar92"&gt;Ihor Radchenko&lt;/a&gt; for reporting.)&lt;/li&gt;
  &lt;li&gt;Option &lt;code&gt;org-ql-view-sidebar-sort-views&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Mouseover &lt;code&gt;help-echo&lt;/code&gt; text for &lt;code&gt;org-ql-views&lt;/code&gt; default view names.&lt;/li&gt;
  &lt;li&gt;“Dangling tasks” default view in &lt;code&gt;org-ql-views&lt;/code&gt;.  (Users who have modified &lt;code&gt;org-ql-views&lt;/code&gt; from the default will not see the new view unless they copy it into their config.)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;b&gt;Changed&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Some default &lt;code&gt;org-ql-view&lt;/code&gt; views (users who have modified &lt;code&gt;org-ql-views&lt;/code&gt; from the default will not see the new views unless they copy them into their config):
    &lt;ul&gt;
      &lt;li&gt;Rename some views.&lt;/li&gt;
      &lt;li&gt;“Stuck projects” view (now uses &lt;code&gt;descendants&lt;/code&gt; instead of &lt;code&gt;children&lt;/code&gt;, which is more useful.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;b&gt;Fixed&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Inherit file tags when &lt;code&gt;org-tag-inheritance&lt;/code&gt; is enabled.  (Fixes &lt;a href="https://github.com/alphapapa/org-ql/issues/55"&gt;#55&lt;/a&gt;.  Thanks to &lt;a href="https://github.com/mskorzhinskiy"&gt;Mikhail Skorzhinskiy&lt;/a&gt;.)&lt;/li&gt;
  &lt;li&gt;Call &lt;code&gt;helm-make-source&lt;/code&gt; directly instead of using &lt;code&gt;helm-build-sync-source&lt;/code&gt; macro.  (Fixes &lt;a href="https://github.com/alphapapa/org-ql/issues/60"&gt;#60&lt;/a&gt;.  Thanks to &lt;a href="https://github.com/matthuszagh"&gt;Matt Huszagh&lt;/a&gt; for reporting.)&lt;/li&gt;
  &lt;li&gt;Search/view buffers now always end with a newline, which prevents side-scrolling of the window when calling &lt;code&gt;end-of-buffer&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Face for done to-do keywords in &lt;code&gt;org-ql-view&lt;/code&gt; buffers.  (Thanks to &lt;a href="https://github.com/dsdshcym"&gt;Yiming Chen&lt;/a&gt;.)&lt;/li&gt;
  &lt;li&gt;Make view buffers read-only.  (Fixes &lt;a href="https://github.com/alphapapa/org-ql/issues/72"&gt;#72&lt;/a&gt;.  Thanks to &lt;a href="https://github.com/xeijin"&gt;xeijin&lt;/a&gt;.)&lt;/li&gt;
  &lt;li&gt;Sorting with single sorter specified as an atom.  (Thanks to &lt;a href="https://github.com/legalnonsense"&gt;Jeff Filipovits&lt;/a&gt;.)&lt;/li&gt;
  &lt;li&gt;Autoload for &lt;code&gt;org-ql-block&lt;/code&gt; agenda block.  (Fixes &lt;a href="https://github.com/alphapapa/org-ql/issues/53"&gt;#53&lt;/a&gt;.  Thanks to reports from &lt;a href="https://github.com/gcantieni"&gt;Gus Cantieni&lt;/a&gt;, &lt;a href="https://github.com/novoid"&gt;Karl Voit&lt;/a&gt;, &lt;a href="https://github.com/rieje"&gt;rieje&lt;/a&gt;, and &lt;a href="https://github.com/jakejx"&gt;Jake | Junxuan&lt;/a&gt;.)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;b&gt;Internal&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Added generic node data cache to speed up recursive, tree-based queries.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-032" class="anchor" aria-hidden="true" href="#032"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;0.3.2&lt;/h2&gt;
&lt;p&gt;&lt;b&gt;Fixed&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;In &lt;code&gt;org-ql-search&lt;/code&gt;, accept symbol as &lt;code&gt;:super-groups&lt;/code&gt; argument.&lt;/li&gt;
  &lt;li&gt;In the &lt;code&gt;This week&lt;/code&gt; and &lt;code&gt;Next week&lt;/code&gt; default &lt;code&gt;org-ql-views&lt;/code&gt; views, set timestamps for beginning-of-week to 00:00:00 and end-of-week to 23:59:59.&lt;/li&gt;
  &lt;li&gt;Plain quoted-phrases in non-sexp queries.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-031" class="anchor" aria-hidden="true" href="#031"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;0.3.1&lt;/h2&gt;
&lt;p&gt;&lt;b&gt;Fixed&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Compatibility with Org 9.2.  Thanks to &lt;a href="https://github.com/leungbk"&gt;Brian Leung&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-03" class="anchor" aria-hidden="true" href="#03"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;0.3&lt;/h2&gt;
&lt;p&gt;&lt;b&gt;Added&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Alternative, non-sexp query syntax for commands &lt;code&gt;org-ql-search&lt;/code&gt; and &lt;code&gt;helm-org-ql&lt;/code&gt;.  See &lt;a href="#non-sexp-query-syntax"&gt;documentation&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Command &lt;code&gt;helm-org-ql&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Command &lt;code&gt;org-ql-sparse-tree&lt;/code&gt;, like &lt;code&gt;org-sparse-tree&lt;/code&gt; for &lt;code&gt;org-ql&lt;/code&gt; queries.  (Thanks to &lt;a href="https://github.com/akirak"&gt;Akira Komamura&lt;/a&gt;.)&lt;/li&gt;
  &lt;li&gt;Command &lt;code&gt;org-ql-view-sidebar&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Per-buffer, per-heading tag caching, which increases the speed of tags-related queries by 6-7x.&lt;/li&gt;
  &lt;li&gt;More tags-related predicates and aliases:
    &lt;ul&gt;
      &lt;li&gt;For inherited tags: &lt;code&gt;tags-inherited&lt;/code&gt;, &lt;code&gt;inherited-tags&lt;/code&gt;, &lt;code&gt;tags-i&lt;/code&gt;, &lt;code&gt;itags&lt;/code&gt;.&lt;/li&gt;
      &lt;li&gt;For heading-local tags: &lt;code&gt;tags-local&lt;/code&gt;, &lt;code&gt;local-tags&lt;/code&gt;, &lt;code&gt;tags-l&lt;/code&gt;, &lt;code&gt;ltags&lt;/code&gt;.&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;tags-all&lt;/code&gt;, &lt;code&gt;tags&amp;amp;&lt;/code&gt;: Matches all given tags using boolean &lt;code&gt;AND&lt;/code&gt; (rather than boolean &lt;code&gt;OR&lt;/code&gt;, which the &lt;code&gt;tags&lt;/code&gt; predicate uses).&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Variable &lt;code&gt;org-ql-block-header&lt;/code&gt;, which overrides the default header in &lt;code&gt;org-ql-block&lt;/code&gt; agenda blocks.&lt;/li&gt;
  &lt;li&gt;Predicate &lt;code&gt;(path)&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Option &lt;code&gt;org-ql-views&lt;/code&gt; may now be customized in a guided, structured way with the customization UI (e.g. &lt;code&gt;M-x customize-option RET org-ql-views RET&lt;/code&gt;, or press &lt;code&gt;c&lt;/code&gt; in the &lt;code&gt;org-ql-view-sidebar&lt;/code&gt; buffer).&lt;/li&gt;
  &lt;li&gt;Enable more Org Agenda commands in &lt;code&gt;org-ql-view&lt;/code&gt; buffers (e.g. setting deadlines and scheduling).  (Fixes &lt;a href="https://github.com/alphapapa/org-ql/issues/35"&gt;#35&lt;/a&gt;.  Thanks to &lt;a href="https://github.com/mz-pdm"&gt;Milan Zamazal&lt;/a&gt; and &lt;a href="https://github.com/mskorzhinskiy"&gt;Mikhail Skorzhinskii&lt;/a&gt;.)&lt;/li&gt;
  &lt;li&gt;Function &lt;code&gt;org-ql-select&lt;/code&gt;’s &lt;code&gt;buffers-files&lt;/code&gt; argument can be a function which returns a list of buffers and/or files.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;b&gt;Changed&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Predicate &lt;code&gt;heading&lt;/code&gt; now accepts multiple regexps, which are matched with boolean &lt;code&gt;AND&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Predicate &lt;code&gt;regexp&lt;/code&gt; now matches its regexp arguments with boolean &lt;code&gt;AND&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Package &lt;code&gt;org-super-agenda&lt;/code&gt; is now a dependency.  This removes the need for awkward code to handle the case where it’s not installed, and makes grouping features always available.  Of course, the global minor mode &lt;code&gt;org-super-agenda-mode&lt;/code&gt; is not activated by &lt;code&gt;org-ql&lt;/code&gt;, so no behavior is changed in Org Agenda or &lt;code&gt;org-ql&lt;/code&gt;; it only means that commands like &lt;code&gt;org-ql-search&lt;/code&gt; will always provide grouping when called with the appropriate arguments.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;b&gt;Removed&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Macro &lt;code&gt;org-ql-agenda&lt;/code&gt;.  Instead, use function &lt;code&gt;org-ql-search&lt;/code&gt;.  See also command &lt;code&gt;org-ql-view&lt;/code&gt;, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;b&gt;Fixed&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Predicate &lt;code&gt;heading&lt;/code&gt; now matches only against heading text, i.e. not including tags at the end of the line, to-do keyword, etc.&lt;/li&gt;
  &lt;li&gt;Predicate &lt;code&gt;todo&lt;/code&gt; now matches case-sensitively, avoiding non-todo-keyword matches (e.g. a heading which begins &lt;code&gt;Waiting on&lt;/code&gt; will no longer match for a todo keyword &lt;code&gt;WAITING&lt;/code&gt;).&lt;/li&gt;
  &lt;li&gt;Interactive completion in &lt;code&gt;org-ql-search&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;b&gt;Internal&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Refactored code from file &lt;code&gt;org-ql-agenda.el&lt;/code&gt; into files &lt;code&gt;org-ql-search.el&lt;/code&gt; and &lt;code&gt;org-ql-view.el&lt;/code&gt;.  Function and variable names have been changed accordingly.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-023" class="anchor" aria-hidden="true" href="#023"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;0.2.3&lt;/h2&gt;
&lt;p&gt;&lt;b&gt;Fixed&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Priority queries could fail to match headings whose to-do keywords had non-alphabetic characters, like &lt;code&gt;TO-READ&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-022" class="anchor" aria-hidden="true" href="#022"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;0.2.2&lt;/h2&gt;
&lt;p&gt;&lt;b&gt;Fixed&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;(deadline auto)&lt;/code&gt; selector matched entries whose deadlines had a warning period that had not yet been entered (&lt;code&gt;org-deadline-warning-days&lt;/code&gt; too soon).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-021" class="anchor" aria-hidden="true" href="#021"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;0.2.1&lt;/h2&gt;
&lt;p&gt;&lt;b&gt;Fixed&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;(descendants)&lt;/code&gt; selector matched against parent heading instead of only descendants.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-02" class="anchor" aria-hidden="true" href="#02"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;0.2&lt;/h2&gt;
&lt;p&gt;&lt;b&gt;Added&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Function &lt;code&gt;org-ql-query&lt;/code&gt;, like &lt;code&gt;org-ql-select&lt;/code&gt; but with arguments named more like a SQL query.&lt;/li&gt;
  &lt;li&gt;Bare strings like ~”string”~ can be used in queries, which are converted to &lt;code&gt;(regexp "string")&lt;/code&gt; automatically.&lt;/li&gt;
  &lt;li&gt;Selector &lt;code&gt;(regexp)&lt;/code&gt; accepts multiple regexps to test.&lt;/li&gt;
  &lt;li&gt;Macro &lt;code&gt;org-ql&lt;/code&gt; and functions &lt;code&gt;org-ql-query&lt;/code&gt; and &lt;code&gt;org-ql-select&lt;/code&gt; now also accept a comparator function in their &lt;code&gt;:sort&lt;/code&gt; argument.&lt;/li&gt;
  &lt;li&gt;Function &lt;code&gt;org-ql-block&lt;/code&gt;, which works as an Org Agenda series/composite/block command, usable in custom agenda commands defined in variable &lt;code&gt;org-agenda-custom-commands&lt;/code&gt;.  (Inspired by &lt;a href="https://github.com/pestctrl/emacs-config/blob/84c557982a860e86d6f67976a82ea776a7bd2c7a/config-org-new.org#my-own-agenda-renderer"&gt;Benson Chu’s config&lt;/a&gt;.)&lt;/li&gt;
  &lt;li&gt;Function &lt;code&gt;org-ql-agenda--agenda&lt;/code&gt; optionally takes a list of entries as an argument.&lt;/li&gt;
  &lt;li&gt;Selectors &lt;code&gt;ts-a&lt;/code&gt; and &lt;code&gt;ts-i&lt;/code&gt;, aliases for &lt;code&gt;ts-active&lt;/code&gt; and &lt;code&gt;ts-inactive&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Selector &lt;code&gt;ts&lt;/code&gt; now accepts a &lt;code&gt;:type&lt;/code&gt; argument.&lt;/li&gt;
  &lt;li&gt;Face &lt;code&gt;org-ql-agenda-due-date&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Selectors &lt;code&gt;(children)&lt;/code&gt; and &lt;code&gt;(descendants)&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Function &lt;code&gt;org-ql-search&lt;/code&gt; and macro &lt;code&gt;org-ql-agenda&lt;/code&gt; accept a &lt;code&gt;:title&lt;/code&gt; argument, which is displayed in the header.&lt;/li&gt;
  &lt;li&gt;Command &lt;code&gt;org-ql-search&lt;/code&gt; offers global &lt;code&gt;org-super-agenda-groups&lt;/code&gt; in completion.&lt;/li&gt;
  &lt;li&gt;Customization group &lt;code&gt;org-ql&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Command &lt;code&gt;org-ql-view&lt;/code&gt;, which displays views saved to variable &lt;code&gt;org-ql-views&lt;/code&gt;, which can be saved from &lt;code&gt;org-ql-search&lt;/code&gt; buffers with command &lt;code&gt;org-ql-search-save&lt;/code&gt;, which is bound to &lt;code&gt;C-x C-s&lt;/code&gt; in view buffers.&lt;/li&gt;
  &lt;li&gt;Variable &lt;code&gt;org-ql-view-map&lt;/code&gt;, active in view buffers displayed by &lt;code&gt;org-ql-search&lt;/code&gt;, &lt;code&gt;org-ql-agenda&lt;/code&gt;, and &lt;code&gt;org-ql-view&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;random&lt;/code&gt; sort method.&lt;/li&gt;
  &lt;li&gt;Save position when refreshing search buffers.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;b&gt;Changed&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Function &lt;code&gt;org-ql-query&lt;/code&gt; renamed to &lt;code&gt;org-ql-select&lt;/code&gt;.  &lt;code&gt;org-ql-query&lt;/code&gt; now refers to a new function.&lt;/li&gt;
  &lt;li&gt;Macro &lt;code&gt;org-ql&lt;/code&gt; no longer accepts a &lt;code&gt;:markers&lt;/code&gt; argument.  Instead, use argument &lt;code&gt;:action element-with-markers&lt;/code&gt;.  See function &lt;code&gt;org-ql-select&lt;/code&gt;, which &lt;code&gt;org-ql&lt;/code&gt; calls.&lt;/li&gt;
  &lt;li&gt;Selector &lt;code&gt;(todo)&lt;/code&gt; no longer matches “done” keywords when used without arguments (i.e. the ones in variable &lt;code&gt;org-done-keywords&lt;/code&gt;).&lt;/li&gt;
  &lt;li&gt;Overhauled date/time-based predicates.  See documentation for new argument signatures.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;b&gt;Removed&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Selector &lt;code&gt;(date)&lt;/code&gt;, replaced by &lt;code&gt;(ts)&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;b&gt;Fixed&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Handle date ranges in date-based selectors.  (Thanks to &lt;a href="https://github.com/codygman"&gt;Cody Goodman&lt;/a&gt;, &lt;a href="https://github.com/swflint"&gt;Samuel W. Flint&lt;/a&gt;, and &lt;a href="https://github.com/vikasrawal"&gt;Vikas Rawal&lt;/a&gt;.)&lt;/li&gt;
  &lt;li&gt;Don’t overwrite bindings in &lt;code&gt;org-agenda-mode-map&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Don’t search buffers without headings, and show a message if the user attempts it.&lt;/li&gt;
  &lt;li&gt;Don’t search hidden/special buffers.&lt;/li&gt;
  &lt;li&gt;Properly accept arbitrary sort functions in &lt;code&gt;org-ql-select&lt;/code&gt;, etc.  (Fixes &lt;a href="https://github.com/alphapapa/org-ql/issues/37"&gt;#37&lt;/a&gt;.  Thanks to &lt;a href="https://github.com/mz-pdm"&gt;Milan Zamazal&lt;/a&gt;.)&lt;/li&gt;
  &lt;li&gt;Planning-line-related predicates searched too far into entries.&lt;/li&gt;
  &lt;li&gt;Add autoloads.  (Fixes &lt;a href="https://github.com/alphapapa/org-ql/pull/36/files#"&gt;#36&lt;/a&gt;.  Thanks to &lt;a href="https://github.com/akirak"&gt;Akira Komamura&lt;/a&gt;.)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;b&gt;Compatibility&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Fixes for compatibility with Org 9.2.  (Thanks to &lt;a href="https://github.com/ataias"&gt;Ataias Pereira Reis&lt;/a&gt; and &lt;a href="https://github.com/dakra"&gt;Daniel Kraus&lt;/a&gt;.)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;b&gt;Internal&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Optimizations for some query selectors, e.g. &lt;code&gt;regexp&lt;/code&gt; and &lt;code&gt;todo&lt;/code&gt;.  These can provide a significant improvement for some queries.  See benchmarks in &lt;a href="notes.org"&gt;notes.org&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Library &lt;a href="https://github.com/alphapapa/ts.el"&gt;ts&lt;/a&gt; is now used for parsing and comparing timestamps.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-01" class="anchor" aria-hidden="true" href="#01"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;0.1&lt;/h2&gt;
&lt;p&gt;First tagged release.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-notes" class="anchor" aria-hidden="true" href="#notes"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Notes&lt;/h1&gt;
&lt;h2&gt;&lt;a id="user-content-comparison-with-org-agenda-searches" class="anchor" aria-hidden="true" href="#comparison-with-org-agenda-searches"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Comparison with Org Agenda searches&lt;/h2&gt;
&lt;p&gt;Of course, queries like these can already be written with Org Agenda searches, but the syntax can be complex.  For example, this query would be difficult to write in a standard Org Agenda search, because it matches against a to-do keyword &lt;i&gt;and&lt;/i&gt; a plain-text search.  As described in the &lt;a href="https://orgmode.org/worg/org-tutorials/advanced-searching.html#combining-metadata-and-full-text-queries" rel="nofollow"&gt;advanced searching tutorial&lt;/a&gt;, it would require using &lt;code&gt;org-search-view&lt;/code&gt; with a query with specific regular expression syntax, like this:&lt;/p&gt;
&lt;pre&gt;+lisp +{^\*+\s-+TO-READ\s-}
&lt;/pre&gt;
&lt;p&gt;But with &lt;code&gt;org-ql-agenda&lt;/code&gt;, you would write:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(org-ql-agenda
  (&lt;span class="pl-k"&gt;and&lt;/span&gt; (regexp &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;lisp&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
       (todo &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;TO-READ&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)))&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-org-sidebar" class="anchor" aria-hidden="true" href="#org-sidebar"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;org-sidebar&lt;/h2&gt;
&lt;p&gt;This package is used by &lt;a href="https://github.com/alphapapa/org-sidebar"&gt;org-sidebar&lt;/a&gt;, which presents a customizable agenda-like view in a sidebar window.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-license" class="anchor" aria-hidden="true" href="#license"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;License&lt;/h1&gt;
&lt;p&gt;GPLv3&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>alphapapa</author><guid isPermaLink="false">https://github.com/alphapapa/org-ql</guid><pubDate>Thu, 30 Jan 2020 00:15:00 GMT</pubDate></item><item><title>emacs-evil/evil-collection #16 in Emacs Lisp, This week</title><link>https://github.com/emacs-evil/evil-collection</link><description>&lt;p&gt;&lt;i&gt;A set of keybindings for evil-mode&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="org" data-path="readme.org"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-evil-collection" class="anchor" aria-hidden="true" href="#evil-collection"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Evil Collection&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://travis-ci.org/emacs-evil/evil-collection" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/008a41bed9cd2d1d2bf3c4e881cbb3ba8370149d/68747470733a2f2f7472617669732d63692e6f72672f656d6163732d6576696c2f6576696c2d636f6c6c656374696f6e2e7376673f6272616e63683d6d6173746572" alt="https://travis-ci.org/emacs-evil/evil-collection.svg?branch=master" data-canonical-src="https://travis-ci.org/emacs-evil/evil-collection.svg?branch=master" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a href="https://melpa.org/#/evil-collection" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/f1a9a5c03507dd88d64abfb6847cfb0d9ddee778/68747470733a2f2f6d656c70612e6f72672f7061636b616765732f6576696c2d636f6c6c656374696f6e2d62616467652e737667" alt="https://melpa.org/packages/evil-collection-badge.svg" data-canonical-src="https://melpa.org/packages/evil-collection-badge.svg" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a href="https://stable.melpa.org/#/evil-collection" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/64f5f63f87eb0a9682ace1496957384f3bc62f6a/68747470733a2f2f737461626c652e6d656c70612e6f72672f7061636b616765732f6576696c2d636f6c6c656374696f6e2d62616467652e737667" alt="https://stable.melpa.org/packages/evil-collection-badge.svg" data-canonical-src="https://stable.melpa.org/packages/evil-collection-badge.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is a collection of &lt;a href="https://github.com/emacs-evil/evil"&gt;Evil&lt;/a&gt; bindings for &lt;i&gt;the parts of Emacs&lt;/i&gt; that Evil does
  not cover properly by default, such as &lt;code&gt;help-mode&lt;/code&gt;, &lt;code&gt;M-x calendar&lt;/code&gt;, Eshell and
  more.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Warning:&lt;/b&gt; Expect some default bindings to change in the future.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-goals" class="anchor" aria-hidden="true" href="#goals"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Goals&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Reduce context switching: As soon as “moving around” gets hardwired
    to &lt;code&gt;&amp;lt;hjkl&amp;gt;&lt;/code&gt;, it becomes frustratingly inefficient not to have it everywhere.&lt;/li&gt;
  &lt;li&gt;Community work: setting up bindings is tremendous work and joining force can
    only save hours for all of Evil users out there.  While not everyone may agree
    on the chosen bindings, it helps to have something to start with rather than
    nothing at all.  In the end, users are free to override a subset of the proposed
    bindings to best fit their needs.&lt;/li&gt;
  &lt;li&gt;Consistency: Having all bindings defined in one place allows for enforcing
    consistency across special modes and coordinating the community work to define a
    reference implementation.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;&lt;a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installation&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Get the package, either from MELPA:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;M-x package-install RET evil-collection RET
&lt;/pre&gt;
&lt;p&gt;Or clone / download this repository and modify your &lt;code&gt;load-path&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;(add-to-list 'load-path (expand-file-name "/path/to/evil-collection/" user-emacs-directory))
&lt;/pre&gt;
&lt;ul&gt;
  &lt;li&gt;Register the bindings, either all at once with&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;(evil-collection-init)
&lt;/pre&gt;
&lt;p&gt;or mode-by-mode, for instance:&lt;/p&gt;
&lt;pre&gt;(with-eval-after-load 'calendar (evil-collection-calendar-setup))
&lt;/pre&gt;
&lt;p&gt;or by providing an argument to &lt;code&gt;evil-collection-init&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;(evil-collection-init 'calendar)
&lt;/pre&gt;
&lt;p&gt;The list of supported modes is configured by &lt;code&gt;evil-collection-mode-list&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;evil-collection&lt;/code&gt; assumes &lt;code&gt;evil-want-keybinding&lt;/code&gt; is set to nil and
  &lt;code&gt;evil-want-integration&lt;/code&gt; is set to t before loading &lt;code&gt;evil&lt;/code&gt; and
  &lt;code&gt;evil-collection.&lt;/code&gt; Note some other packages may load evil (e.g. evil-leader)
  so bear that in mind when determining when to set the variables.&lt;/p&gt;
&lt;p&gt;See &lt;a href="https://github.com/emacs-evil/evil-collection/issues/60"&gt;https://github.com/emacs-evil/evil-collection/issues/60&lt;/a&gt; and &lt;a href="https://github.com/emacs-evil/evil/pull/1087"&gt;https://github.com/emacs-evil/evil/pull/1087&lt;/a&gt;
  for more details.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;pre lang="emacs-lisp"&gt;(setq evil-want-integration t) ;; This is optional since it's already set to t by default.
(setq evil-want-keybinding nil)
(require 'evil)
(when (require 'evil-collection nil t)
  (evil-collection-init))
&lt;/pre&gt;
&lt;p&gt;Here’s another full TLDR &lt;code&gt;use-package&lt;/code&gt; example.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; evil
  &lt;span class="pl-c1"&gt;:ensure&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:init&lt;/span&gt;
  (&lt;span class="pl-k"&gt;setq&lt;/span&gt; evil-want-integration &lt;span class="pl-c1"&gt;t&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; This is optional since it's already set to t by default.&lt;/span&gt;
  (&lt;span class="pl-k"&gt;setq&lt;/span&gt; evil-want-keybinding &lt;span class="pl-c1"&gt;nil&lt;/span&gt;)
  &lt;span class="pl-c1"&gt;:config&lt;/span&gt;
  (evil-mode &lt;span class="pl-c1"&gt;1&lt;/span&gt;))

(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; evil-collection
  &lt;span class="pl-c1"&gt;:after&lt;/span&gt; evil
  &lt;span class="pl-c1"&gt;:ensure&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:config&lt;/span&gt;
  (evil-collection-init))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;NOTE: If you don’t like surprises but still want to use &lt;code&gt;evil-collection-init&lt;/code&gt;, setting &lt;code&gt;evil-collection-mode-list&lt;/code&gt; to nil
  and adding each mode manually might be a better option.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-configuration" class="anchor" aria-hidden="true" href="#configuration"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Configuration&lt;/h2&gt;
&lt;p&gt;Modify &lt;code&gt;evil-collection-mode-list&lt;/code&gt; to disable or add any modes that should be evilified by &lt;code&gt;evil-collection&lt;/code&gt;.&lt;/p&gt;
&lt;table&gt;
  &lt;tbody&gt;&lt;tr&gt;&lt;th&gt;Variable&lt;/th&gt;&lt;th&gt;Default&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;evil-collection-company-use-tng&lt;/td&gt;&lt;td&gt;t&lt;/td&gt;&lt;td&gt;Set up autocompletion to be similar to Vim’s YouCompleteMe.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;evil-collection-outline-bind-tab-p&lt;/td&gt;&lt;td&gt;nil&lt;/td&gt;&lt;td&gt;Enable &amp;lt;tab&amp;gt;-based bindings in Outline mode.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;evil-collection-term-sync-state-and-mode-p&lt;/td&gt;&lt;td&gt;t&lt;/td&gt;&lt;td&gt;Synchronize insert/normal state with char/line-mode in term-mode.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;evil-collection-setup-minibuffer&lt;/td&gt;&lt;td&gt;nil&lt;/td&gt;&lt;td&gt;Set up Vim style bindings in the minibuffer.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;evil-collection-setup-debugger-keys&lt;/td&gt;&lt;td&gt;t&lt;/td&gt;&lt;td&gt;Set up debugger keys for certain modes.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;For example, if you want to enable Evil in the minibuffer, you’ll have to turn it on
  explicitly by customizing &lt;code&gt;evil-collection-setup-minibuffer&lt;/code&gt; to &lt;code&gt;t&lt;/code&gt;.
  Some minibuffer-related packages such as Helm rely on this option.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;use-package&lt;/code&gt; example:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; evil-collection
  &lt;span class="pl-c1"&gt;:custom&lt;/span&gt; (evil-collection-setup-minibuffer &lt;span class="pl-c1"&gt;t&lt;/span&gt;)
  &lt;span class="pl-c1"&gt;:init&lt;/span&gt; (evil-collection-init))&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-guidelines" class="anchor" aria-hidden="true" href="#guidelines"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Guidelines&lt;/h2&gt;
&lt;p&gt;The following rules serve as guiding principles to define the set of standard
  Evil bindings for various modes.  Since special modes are by definition
  structurally incomparable, those rules cannot be expected to be applied
  universally.&lt;/p&gt;
&lt;p&gt;The rules are more-or-less sorted by priority.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Don’t bind anything to &lt;code&gt;:&lt;/code&gt; nor &lt;code&gt;&amp;lt;escape&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Keep the movement keys when possible and sensible.
    &lt;ul&gt;
      &lt;li&gt;&lt;code&gt;h&lt;/code&gt;, &lt;code&gt;j&lt;/code&gt;, &lt;code&gt;k&lt;/code&gt;, &lt;code&gt;l&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;w&lt;/code&gt;, &lt;code&gt;W&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt;, &lt;code&gt;B&lt;/code&gt;, &lt;code&gt;e&lt;/code&gt;, &lt;code&gt;E&lt;/code&gt;, &lt;code&gt;ge&lt;/code&gt;, &lt;code&gt;gE&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;f&lt;/code&gt;, &lt;code&gt;F&lt;/code&gt;, &lt;code&gt;t&lt;/code&gt;, &lt;code&gt;T&lt;/code&gt;, &lt;code&gt;;&lt;/code&gt;, =,=&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;gg&lt;/code&gt;, &lt;code&gt;G&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;|&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;(&lt;/code&gt;, &lt;code&gt;)&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;{&lt;/code&gt;, &lt;code&gt;}&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;%&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;^&lt;/code&gt;, &lt;code&gt;$&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;C-i&lt;/code&gt;, &lt;code&gt;C-o&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Keep the yanking and register keys when possible and sensible.
    &lt;ul&gt;
      &lt;li&gt;&lt;code&gt;y&lt;/code&gt;, &lt;code&gt;Y&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;=”=&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Keep the search keys when possible and sensible.
    &lt;ul&gt;
      &lt;li&gt;&lt;code&gt;/&lt;/code&gt;, &lt;code&gt;?&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;#&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Keep the mark keys when possible and sensible.
    &lt;ul&gt;
      &lt;li&gt;&lt;code&gt;m&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;=’=, &lt;code&gt;~&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Keep the windowing keys when possible and sensible.
    &lt;ul&gt;
      &lt;li&gt;&lt;code&gt;H&lt;/code&gt;, &lt;code&gt;L&lt;/code&gt;, &lt;code&gt;M&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;C-e&lt;/code&gt;, &lt;code&gt;C-y&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;C-f&lt;/code&gt;, &lt;code&gt;C-b&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;C-d&lt;/code&gt;, &lt;code&gt;C-u&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;C-w&lt;/code&gt;-prefixed bindings.&lt;/li&gt;
      &lt;li&gt;Some &lt;code&gt;z&lt;/code&gt;-prefixed bindings (see below).&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The following keys are free when insert state does not make sense in the
    current mode:
    &lt;ul&gt;
      &lt;li&gt;&lt;code&gt;a&lt;/code&gt;, &lt;code&gt;A&lt;/code&gt;, &lt;code&gt;i&lt;/code&gt;, &lt;code&gt;I&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;c&lt;/code&gt;, &lt;code&gt;C&lt;/code&gt;, &lt;code&gt;r&lt;/code&gt;, &lt;code&gt;R&lt;/code&gt;, &lt;code&gt;s&lt;/code&gt;, &lt;code&gt;S&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;d&lt;/code&gt;, &lt;code&gt;D&lt;/code&gt;, &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;X&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;o&lt;/code&gt;, &lt;code&gt;O&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;p&lt;/code&gt;, &lt;code&gt;P&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;=&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;J&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;~&lt;/code&gt;
        &lt;p&gt;Any of those keys can be set to be a prefix key.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Prefix keys: &lt;code&gt;g&lt;/code&gt; and &lt;code&gt;z&lt;/code&gt; are the ubiquitous prefix keys.
    &lt;ul&gt;
      &lt;li&gt;&lt;code&gt;g&lt;/code&gt; generally stands for “go” and is best used for movements.&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;z&lt;/code&gt; is used for scrolling, folding, spell-checking and more.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Macro and action keys
    &lt;ul&gt;
      &lt;li&gt;&lt;code&gt;@&lt;/code&gt;, &lt;code&gt;q&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;.&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Ensure terminal compatibility without sacrificing GUI key bindings.
    &lt;ul&gt;
      &lt;li&gt;Tab key
        &lt;ul&gt;
          &lt;li&gt;Tab key is recognized as &lt;code&gt;&amp;lt;tab&amp;gt;&lt;/code&gt; in GUI and &lt;code&gt;TAB&lt;/code&gt; in terminal.
            &lt;code&gt;TAB&lt;/code&gt; equals &lt;code&gt;C-i&lt;/code&gt;.&lt;/li&gt;
          &lt;li&gt;Since &lt;code&gt;C-i&lt;/code&gt; is bound to jumping forward for vim compatibility,
            bind &lt;code&gt;g[&lt;/code&gt; and &lt;code&gt;g]&lt;/code&gt; to the functions that Shift+Tab and Tab
            are bound to on GUI for terminal compatibility.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Enter key
        &lt;ul&gt;
          &lt;li&gt;Enter key is recognized as &lt;code&gt;&amp;lt;return&amp;gt;&lt;/code&gt; in GUI and &lt;code&gt;RET&lt;/code&gt; in terminal.
            &lt;code&gt;RET&lt;/code&gt; equals &lt;code&gt;Ctrl+m&lt;/code&gt;.&lt;/li&gt;
          &lt;li&gt;Bind only &lt;code&gt;RET&lt;/code&gt; and &lt;code&gt;M-RET&lt;/code&gt;. Or, bind &lt;code&gt;RET&lt;/code&gt; and &lt;code&gt;M-RET&lt;/code&gt; to the same
            functions &lt;code&gt;&amp;lt;return&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;M-return&amp;gt;&lt;/code&gt; are bound to.&lt;/li&gt;
          &lt;li&gt;&lt;code&gt;S-RET&lt;/code&gt; is impossible on terminal. Bind &lt;code&gt;&amp;lt;S-return&amp;gt;&lt;/code&gt; and a vacant key
            to the same function for terminal compatibility.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;&lt;a id="user-content-rationale" class="anchor" aria-hidden="true" href="#rationale"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Rationale&lt;/h2&gt;
&lt;p&gt;Many special modes share the same set of similar actions.  Those actions should
  share the same bindings across all modes whenever feasible.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-motion-------gj-gk-c-j-c-k" class="anchor" aria-hidden="true" href="#motion-------gj-gk-c-j-c-k"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Motion (&lt;code&gt;[&lt;/code&gt;, &lt;code&gt;]&lt;/code&gt;, &lt;code&gt;{&lt;/code&gt;, &lt;code&gt;}&lt;/code&gt;, &lt;code&gt;(&lt;/code&gt;, &lt;code&gt;)&lt;/code&gt;, &lt;code&gt;gj&lt;/code&gt;, &lt;code&gt;gk&lt;/code&gt;, &lt;code&gt;C-j&lt;/code&gt;, &lt;code&gt;C-k&lt;/code&gt;)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;[&lt;/code&gt; and &lt;code&gt;]&lt;/code&gt;: Use &lt;code&gt;[-&lt;/code&gt; and &lt;code&gt;]-&lt;/code&gt; prefixed keys for navigation between sections.
    &lt;p&gt;If the mode makes no difference between the end of a section and the beginning
      of the next, use &lt;code&gt;[&lt;/code&gt; and &lt;code&gt;]&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code&gt;gj&lt;/code&gt; and &lt;code&gt;gk&lt;/code&gt;: synonym for &lt;code&gt;[&lt;/code&gt; and &lt;code&gt;]&lt;/code&gt;.  That’s what &lt;a href="https://github.com/emacs-evil/evil-magit"&gt;evil-magit&lt;/a&gt; does.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;b&gt;Question:&lt;/b&gt; Should &lt;code&gt;gj&lt;/code&gt; / &lt;code&gt;gk&lt;/code&gt; rather be synonyms for &lt;code&gt;C-j&lt;/code&gt; / &lt;code&gt;C-k&lt;/code&gt;?  They cannot
  emulate the behaviour of &lt;code&gt;[]&lt;/code&gt; or &lt;code&gt;][&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;C-j&lt;/code&gt;, &lt;code&gt;C-k&lt;/code&gt;: If there is granularity, i.e. subsections, use &lt;code&gt;C-j&lt;/code&gt; and &lt;code&gt;C-k&lt;/code&gt;
    to browse them.  This reflects &lt;a href="https://github.com/emacs-evil/evil-magit"&gt;evil-magit&lt;/a&gt; and &lt;a href="https://github.com/JorisE/evil-mu4e"&gt;evil-mu4e&lt;/a&gt; default
    bindings.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;{&lt;/code&gt;, &lt;code&gt;}&lt;/code&gt;: If there is no paragraph structure, &lt;code&gt;{&lt;/code&gt; and &lt;code&gt;}&lt;/code&gt; can be used for sub-sectioning.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;(&lt;/code&gt;, &lt;code&gt;)&lt;/code&gt;: If there is no sentence structure, &lt;code&gt;(&lt;/code&gt; and &lt;code&gt;)&lt;/code&gt; can be used for sub-sectioning.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;HJKL&lt;/code&gt;: &lt;code&gt;hjkl&lt;/code&gt; can be used for atomic movements, but &lt;code&gt;HJKL&lt;/code&gt; can usually not be used
    because &lt;code&gt;H&lt;/code&gt;, &lt;code&gt;K&lt;/code&gt; and &lt;code&gt;L&lt;/code&gt; are all universal (&lt;code&gt;J&lt;/code&gt; is &lt;code&gt;evil-join&lt;/code&gt; and usually
    does not make sense in special modes).&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;C-h&lt;/code&gt; should not be remapped: Since we have &lt;code&gt;C-j&lt;/code&gt; and &lt;code&gt;C-k&lt;/code&gt; for vertical motion, it would
    make sense to use &lt;code&gt;C-h&lt;/code&gt; and &lt;code&gt;C-l&lt;/code&gt; for horizontal motion.  There are some
    shortcomings though:
    &lt;ul&gt;
      &lt;li&gt;In Vim, &lt;code&gt;C-h&lt;/code&gt; works as backspace, but Evil does not follow that behaviour.&lt;/li&gt;
      &lt;li&gt;In Emacs, it is a prefix key for all help-related commands, and so is &lt;code&gt;&amp;lt;f1&amp;gt;&lt;/code&gt;.&lt;/li&gt;
      &lt;li&gt;Most importantly, &lt;code&gt;C-h&lt;/code&gt; is too widespread and ubiquitous to be replaced.
        So we don’t.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code&gt;C-l&lt;/code&gt;: As a consequence of the former point, &lt;code&gt;C-l&lt;/code&gt; is available.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;M-&amp;lt;hjkl&amp;gt;&lt;/code&gt;: Those keys are usually free in Evil but still bound to their Emacs
    default (e.g. &lt;code&gt;M-l&lt;/code&gt; is &lt;code&gt;downcase-word&lt;/code&gt;).  Besides, if &lt;code&gt;C-j&lt;/code&gt; and &lt;code&gt;C-k&lt;/code&gt; are
    already used, having &lt;code&gt;M-j&lt;/code&gt; and &lt;code&gt;M-k&lt;/code&gt; might add up to the confusion.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-quitting-q-zq-zz" class="anchor" aria-hidden="true" href="#quitting-q-zq-zz"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Quitting (&lt;code&gt;q&lt;/code&gt;, &lt;code&gt;ZQ&lt;/code&gt;, &lt;code&gt;ZZ&lt;/code&gt;)&lt;/h3&gt;
&lt;p&gt;In Vim, &lt;code&gt;q&lt;/code&gt; is for recording macros.  Vim quits with &lt;code&gt;ZZ&lt;/code&gt; or &lt;code&gt;ZQ&lt;/code&gt;.  In most
  Emacs special modes, it stands for quitting while macros are recorded/played
  with &lt;code&gt;&amp;lt;f3&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;f4&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;A good rule of thumb would be:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Always bind &lt;code&gt;ZZ&lt;/code&gt; and &lt;code&gt;ZQ&lt;/code&gt; to the quitting function(s), &lt;code&gt;evil-quit&lt;/code&gt; if nothing
    else makes sense.&lt;/li&gt;
  &lt;li&gt;Bind &lt;code&gt;q&lt;/code&gt; to &lt;code&gt;evil-quit&lt;/code&gt; if macros don’t make sense in current mode.&lt;/li&gt;
  &lt;li&gt;If macros don’t make sense in current mode, then &lt;code&gt;@&lt;/code&gt; is available.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-refreshing--reverting-gr" class="anchor" aria-hidden="true" href="#refreshing--reverting-gr"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Refreshing / Reverting (&lt;code&gt;gr&lt;/code&gt;)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;gr&lt;/code&gt; is used for refreshing in &lt;a href="https://github.com/emacs-evil/evil-magit"&gt;evil-magit&lt;/a&gt;, &lt;a href="https://github.com/JorisE/evil-mu4e"&gt;evil-mu4e&lt;/a&gt;, and some Spacemacs
    configurations (org-agenda and neotree among others).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;C-l&lt;/code&gt; is traditionally used to refresh the terminal screen.  Since there does
  not seem to be any existing use of it, we leave the binding free for other uses.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-marking" class="anchor" aria-hidden="true" href="#marking"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Marking&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;m&lt;/code&gt; defaults to &lt;code&gt;evil-set-marker&lt;/code&gt; which might not be very useful in special
  modes.
  =’= can still be used as it can jump to other buffers.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;m&lt;/code&gt;: Mark or toggle mark, depending on what the mode offers.
    In visual mode, always mark.
    With a numeric argument, toggle mark on that many following lines.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;u&lt;/code&gt;: Unmark current selection.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;U&lt;/code&gt;: Unmark all.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;~&lt;/code&gt;: Toggle all marks.  This mirrors the “invert-char” Vim command bound to &lt;code&gt;~&lt;/code&gt;
    by default.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;M&lt;/code&gt;: Mark all, if available.  Otherwise use &lt;code&gt;U~&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;*&lt;/code&gt;: Mark-prefix or mark all if current mode has no prefix. &lt;code&gt;*&lt;/code&gt; is traditionally a wildcard.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;%&lt;/code&gt;: Mark regexp.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;x&lt;/code&gt;: Execute action on marks.  This mirrors Dired’s binding of &lt;code&gt;x&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If &lt;code&gt;*&lt;/code&gt; is used for marking, then &lt;code&gt;#&lt;/code&gt; is free.&lt;/p&gt;
&lt;p&gt;Also note that Emacs inconsistently uses &lt;code&gt;u&lt;/code&gt; and &lt;code&gt;U&lt;/code&gt; to unmark.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-selecting--filtering--narrowing--searching" class="anchor" aria-hidden="true" href="#selecting--filtering--narrowing--searching"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Selecting / Filtering / Narrowing / Searching&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;s&lt;/code&gt; and &lt;code&gt;S&lt;/code&gt; seem to be used in some places like &lt;a href="https://www.djcbsoftware.nl/code/mu/mu4e.html" rel="nofollow"&gt;mu4e&lt;/a&gt;.
    &lt;ul&gt;
      &lt;li&gt;&lt;code&gt;s&lt;/code&gt;: [s]elect/[s]earch/filter candidates according to a pattern.&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;S&lt;/code&gt;: Remove filter and select all.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code&gt;=&lt;/code&gt; is usually free and its significance is obvious.  It’s taken for zooming though.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;|&lt;/code&gt; is not free but the pipe symbolic is very tantalizing.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-sorting" class="anchor" aria-hidden="true" href="#sorting"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Sorting&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;o&lt;/code&gt;: Change the sort [o]rder.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;O&lt;/code&gt;: Sort in reverse order.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There is no real consensus around which key to bind to sorting.  What others do by default:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;package-menu&lt;/code&gt; uses &lt;code&gt;S&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;M-x proced&lt;/code&gt; and Dired use &lt;code&gt;s&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;profiler&lt;/code&gt; uses &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;D&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://www.djcbsoftware.nl/code/mu/mu4e.html" rel="nofollow"&gt;mu4e&lt;/a&gt; uses &lt;code&gt;O&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://www.nongnu.org/ranger/" rel="nofollow"&gt;ranger&lt;/a&gt; uses &lt;code&gt;o&lt;/code&gt;, inspired from &lt;a href="http://mutt.org" rel="nofollow"&gt;Mutt&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-go-to-definition-gd-gd" class="anchor" aria-hidden="true" href="#go-to-definition-gd-gd"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Go to definition (&lt;code&gt;gd&lt;/code&gt;, &lt;code&gt;gD&lt;/code&gt;)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;gd&lt;/code&gt;: [g]o to [d]efinition.  This is mostly for programming modes.
    If there’s a corresponding ‘pop’ action, use &lt;code&gt;C-t&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-go-to-current-entity" class="anchor" aria-hidden="true" href="#go-to-current-entity"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Go to current entity&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;.&lt;/code&gt;: go to current entity (day for calendar, playing track for &lt;a href="https://www.gnu.org/software/emms/" rel="nofollow"&gt;EMMS&lt;/a&gt;).
    Bind only if more relevant than &lt;code&gt;evil-repeat&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-open-thing-at-point-ret-s-ret-m-ret-go-go" class="anchor" aria-hidden="true" href="#open-thing-at-point-ret-s-ret-m-ret-go-go"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Open thing at point (&lt;code&gt;RET&lt;/code&gt;, &lt;code&gt;S-RET&lt;/code&gt;, &lt;code&gt;M-RET&lt;/code&gt;, &lt;code&gt;go&lt;/code&gt;, &lt;code&gt;gO&lt;/code&gt;)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;RET&lt;/code&gt;, &lt;code&gt;S-RET&lt;/code&gt;, &lt;code&gt;M-RET&lt;/code&gt;: Open thing at point in current window, open in other
    window and display in other window respectively.  The latter is like the
    former with the focus remaining on the current window.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;go&lt;/code&gt;, &lt;code&gt;gO&lt;/code&gt;: When available, same as &lt;code&gt;S-RET&lt;/code&gt; and &lt;code&gt;M-RET&lt;/code&gt; respectively.  This is
    useful in terminals where &lt;code&gt;S-RET&lt;/code&gt; and &lt;code&gt;M-RET&lt;/code&gt; might not work.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-emacs-style-jumping-j" class="anchor" aria-hidden="true" href="#emacs-style-jumping-j"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Emacs-style jumping (&lt;code&gt;J&lt;/code&gt;)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;J&lt;/code&gt;: &lt;a href="https://www.djcbsoftware.nl/code/mu/mu4e.html" rel="nofollow"&gt;mu4e&lt;/a&gt; has &lt;code&gt;j&lt;/code&gt; and &lt;a href="evil-mu4e"&gt;evil-mu4e&lt;/a&gt; uses &lt;code&gt;J&lt;/code&gt;, so we use &lt;code&gt;J&lt;/code&gt; too.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some special modes like &lt;a href="https://www.djcbsoftware.nl/code/mu/mu4e.html" rel="nofollow"&gt;mu4e&lt;/a&gt; and ibuffer offer to “jump” to a different
  buffer.  This sometimes depends on the thing at point.&lt;/p&gt;
&lt;p&gt;This is not related to Evil jumps like &lt;code&gt;C-i&lt;/code&gt; and &lt;code&gt;C-o&lt;/code&gt;, nor to “go to
  definition”.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-browse-url-gx" class="anchor" aria-hidden="true" href="#browse-url-gx"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Browse URL (&lt;code&gt;gx&lt;/code&gt;)&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;gx&lt;/code&gt;: go to URL.  This is a default Vim binding.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-help-" class="anchor" aria-hidden="true" href="#help-"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Help (&lt;code&gt;?&lt;/code&gt;)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;g?&lt;/code&gt; : is the standard key for help related commands.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;?&lt;/code&gt; in places where backward search is not very useful.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-history-browsing-c-n-c-p" class="anchor" aria-hidden="true" href="#history-browsing-c-n-c-p"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;History browsing (&lt;code&gt;C-n&lt;/code&gt;, &lt;code&gt;C-p&lt;/code&gt;)&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;C-n&lt;/code&gt; and &lt;code&gt;C-p&lt;/code&gt; are standard bindings to browse the history elements.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-bookmarking" class="anchor" aria-hidden="true" href="#bookmarking"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Bookmarking&lt;/h3&gt;
&lt;p&gt;?&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-repl-gz" class="anchor" aria-hidden="true" href="#repl-gz"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;REPL (&lt;code&gt;gz&lt;/code&gt;)&lt;/h3&gt;
&lt;p&gt;If the mode has a Go To REPL-type command, set it to &lt;code&gt;gz&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-zooming-----0" class="anchor" aria-hidden="true" href="#zooming-----0"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Zooming (&lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;=&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt;)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;+&lt;/code&gt; and &lt;code&gt;-&lt;/code&gt; have obvious meanings.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;0&lt;/code&gt; has a somewhat intuitive meaning, plus it is next to &lt;code&gt;+&lt;/code&gt; and &lt;code&gt;-&lt;/code&gt; on QWERTY.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;=&lt;/code&gt; is useful as a synonym for &lt;code&gt;+&lt;/code&gt; because it is the unshifted key of &lt;code&gt;+&lt;/code&gt; on QWERTY.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-debugging" class="anchor" aria-hidden="true" href="#debugging"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Debugging&lt;/h3&gt;
&lt;p&gt;When debugging is on, debugger keys takes the most precedence.&lt;/p&gt;
&lt;p&gt;These keys will be set when there’s an available command for them.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;n&lt;/code&gt; : Step Over&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;i&lt;/code&gt; : Step Into&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;o&lt;/code&gt; : Step Out&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;c&lt;/code&gt; : Continue/Resume Execution&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;L&lt;/code&gt; : Locals&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;t&lt;/code&gt; : Tracing&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;q&lt;/code&gt; : Quit Debugging&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;H&lt;/code&gt; : Continue until Point&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;e&lt;/code&gt; : Evaluate Expression&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;b&lt;/code&gt; : Set Breakpoint&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;u&lt;/code&gt; : Unset Breakpoint&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;&amp;gt;&lt;/code&gt; : Navigate to Next Frame&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;&amp;lt;&lt;/code&gt; : Navigate to Previous Frame&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;g?&lt;/code&gt; : Help&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;J&lt;/code&gt; : Jump to debugger location&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;R&lt;/code&gt; : Restart&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For debugging outside of debugger being on (e.g. setting initial breakpoints),
  we use similar keys to &lt;a href="https://github.com/realgud/realgud"&gt;realgud&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;f5&lt;/code&gt; Start/Continue/Resume Execution&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;S-f5&lt;/code&gt; Continue Execution&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Mouse-1&lt;/code&gt; Toggle Breakpoint&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;f9&lt;/code&gt; Toggle Breakpoint&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;f10&lt;/code&gt; Step Over&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;f11&lt;/code&gt; Step Into&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;S-f11&lt;/code&gt; Step Out&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-editable-buffers" class="anchor" aria-hidden="true" href="#editable-buffers"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Editable Buffers&lt;/h3&gt;
&lt;p&gt;For buffers where insert-state doesn’t make sense but buffer can be edited,
  (e.g. wdired or wgrep), pressing &lt;code&gt;i&lt;/code&gt; will change into editable state.&lt;/p&gt;
&lt;p&gt;When this editable state is turned on,&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ZQ&lt;/code&gt; will abort and clear any changes.
  &lt;code&gt;ZZ&lt;/code&gt; will finish and save any changes.
  &lt;code&gt;ESC&lt;/code&gt; will exit editable state.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-qwqetc" class="anchor" aria-hidden="true" href="#qwqetc"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;:q/:wq/etc&lt;/h3&gt;
&lt;p&gt;Modes with commands that can be bound to :q/:wq/etc will have those keys remapped.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-key-translation" class="anchor" aria-hidden="true" href="#key-translation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Key Translation&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;evil-collection-translate-key&lt;/code&gt; allows binding a key to the definition of
  another key in the same keymap (comparable to how Vim’s keybindings work). Its
  arguments are the &lt;code&gt;states&lt;/code&gt; and &lt;code&gt;keymaps&lt;/code&gt; to bind/look up the key(s) in followed
  optionally by keyword arguments (currently only &lt;code&gt;:destructive&lt;/code&gt;) and
  key/replacement pairs. &lt;code&gt;states&lt;/code&gt; should be nil for non-evil keymaps, and both
  &lt;code&gt;states&lt;/code&gt; and &lt;code&gt;keymaps&lt;/code&gt; can be a single symbol or a list of symbols.&lt;/p&gt;
&lt;p&gt;This function can be useful for making key swaps/cycles en masse. For example,
  someone who uses an alternate keyboard layout may want to retain the &lt;code&gt;hjkl&lt;/code&gt;
  positions for directional movement in dired, the calendar, etc.&lt;/p&gt;
&lt;p&gt;Here’s an example for Colemak of making swaps in a single keymap:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(evil-collection-translate-key &lt;span class="pl-c1"&gt;nil&lt;/span&gt; &lt;span class="pl-c1"&gt;'evil-motion-state-map&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; colemak hnei is qwerty hjkl&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;n&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;j&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;e&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;k&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;i&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;l&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; add back nei&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;j&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;e&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;k&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;n&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;l&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;i&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here’s an example of using &lt;code&gt;evil-collection-setup-hook&lt;/code&gt; to cycle the keys for
  all modes in &lt;code&gt;evil-collection-mode-list&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;defun&lt;/span&gt; &lt;span class="pl-e"&gt;my-hjkl-rotation&lt;/span&gt; (&lt;span class="pl-v"&gt;_mode&lt;/span&gt; &lt;span class="pl-v"&gt;mode-keymaps&lt;/span&gt; &lt;span class="pl-c1"&gt;&amp;amp;rest&lt;/span&gt; &lt;span class="pl-v"&gt;_rest&lt;/span&gt;)
  (evil-collection-translate-key &lt;span class="pl-c1"&gt;'normal&lt;/span&gt; mode-keymaps
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;n&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;j&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;e&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;k&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;i&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;l&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;j&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;e&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;k&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;n&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;l&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;i&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; called after evil-collection makes its keybindings&lt;/span&gt;
(&lt;span class="pl-c1"&gt;add-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;'evil-collection-setup-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;#&lt;span class="pl-c1"&gt;'my-hjkl-rotation&lt;/span&gt;&lt;/span&gt;)

(evil-collection-init)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A more common use case of &lt;code&gt;evil-collection-translate-key&lt;/code&gt; would be for keeping
  the functionality of some keys that users may bind globally. For example, &lt;code&gt;SPC&lt;/code&gt;,
  &lt;code&gt;[&lt;/code&gt;, and &lt;code&gt;]&lt;/code&gt; are bound in some modes. If you use these keys as global prefix
  keys that you never want to be overridden, you’ll want to give them higher
  priority than other evil keybindings (e.g. those made by &lt;code&gt;(evil-define-key
  'normal some-map ...)&lt;/code&gt;). To do this, you can create an “intercept” map and bind
  your prefix keys in it instead of in &lt;code&gt;evil-normal-state-map&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;defvar&lt;/span&gt; &lt;span class="pl-en"&gt;my-intercept-mode-map&lt;/span&gt; (&lt;span class="pl-c1"&gt;make-sparse-keymap&lt;/span&gt;)
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;High precedence keymap.&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)

(&lt;span class="pl-c1"&gt;define-minor-mode&lt;/span&gt; my-intercept-mode
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Global minor mode for higher precedence evil keybindings.&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:global&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;)

(my-intercept-mode)

(&lt;span class="pl-k"&gt;dolist&lt;/span&gt; (state '(normal visual insert))
  (evil-make-intercept-map
   &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; NOTE: This requires an evil version from 2018-03-20 or later&lt;/span&gt;
   (evil-get-auxiliary-keymap my-intercept-mode-map state &lt;span class="pl-c1"&gt;t&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;)
   state))

(evil-define-key &lt;span class="pl-c1"&gt;'normal&lt;/span&gt; my-intercept-mode-map
  (&lt;span class="pl-c1"&gt;kbd&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SPC f&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;'find-file&lt;/span&gt;)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; ...&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can then define replacement keys:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;defun&lt;/span&gt; &lt;span class="pl-e"&gt;my-prefix-translations&lt;/span&gt; (&lt;span class="pl-v"&gt;_mode&lt;/span&gt; &lt;span class="pl-v"&gt;mode-keymaps&lt;/span&gt; &lt;span class="pl-c1"&gt;&amp;amp;rest&lt;/span&gt; &lt;span class="pl-v"&gt;_rest&lt;/span&gt;)
  (evil-collection-translate-key &lt;span class="pl-c1"&gt;'normal&lt;/span&gt; mode-keymaps
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-SPC&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SPC&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; these need to be unbound first; this needs to be in same statement&lt;/span&gt;
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;[&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;]&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;[[&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;[&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;]]&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;]&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))

(&lt;span class="pl-c1"&gt;add-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;'evil-collection-setup-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;#&lt;span class="pl-c1"&gt;'my-prefix-translations&lt;/span&gt;&lt;/span&gt;)

(evil-collection-init)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;By default, the first invocation of &lt;code&gt;evil-collection-translate-key&lt;/code&gt; will make a
  backup of the keymap. Each subsequent invocation will look up keys in the backup
  instead of the original. This means that a call to
  &lt;code&gt;evil-collection-translate-key&lt;/code&gt; will always have the same behavior even if
  evaluated multiple times. When &lt;code&gt;:destructive t&lt;/code&gt; is specified, keys are looked up
  in the keymap as it is currently. This means that a call to
  &lt;code&gt;evil-collection-translate-key&lt;/code&gt; that swapped two keys would continue to
  swap/unswap them with each call. Therefore when &lt;code&gt;:destructive t&lt;/code&gt; is used, all
  cycles/swaps must be done within a single call to
  &lt;code&gt;evil-collection-translate-key&lt;/code&gt;. To make a comparison to Vim keybindings,
  &lt;code&gt;:destructive t&lt;/code&gt; is comparable to Vim’s &lt;code&gt;map&lt;/code&gt;, and &lt;code&gt;:destructive nil&lt;/code&gt; is
  comparable to Vim’s &lt;code&gt;noremap&lt;/code&gt; (where the “original” keybindings are those that
  existed in the keymap when &lt;code&gt;evil-collection-translate-key&lt;/code&gt; was first called).
  You’ll almost always want to use the default behavior (especially in your init
  file). The limitation of &lt;code&gt;:destructive nil&lt;/code&gt; is that you can’t translate a key to
  another key that was defined after the first &lt;code&gt;evil-collection-translate-key&lt;/code&gt;, so
  &lt;code&gt;:destructive t&lt;/code&gt; may be useful for interactive experimentation.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;evil-collection-swap-key&lt;/code&gt; is also provided as a wrapper around
  &lt;code&gt;evil-collection-translate-key&lt;/code&gt; that allows swapping keys:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(evil-collection-swap-key &lt;span class="pl-c1"&gt;nil&lt;/span&gt; &lt;span class="pl-c1"&gt;'evil-motion-state-map&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;:&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; is equivalent to&lt;/span&gt;
(evil-collection-translate-key &lt;span class="pl-c1"&gt;nil&lt;/span&gt; &lt;span class="pl-c1"&gt;'evil-motion-state-map&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;:&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;:&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-modes-left-behind" class="anchor" aria-hidden="true" href="#modes-left-behind"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Modes left behind&lt;/h2&gt;
&lt;p&gt;Some modes might still remain unsupported by this package.  Should you be
  missing your &lt;code&gt;&amp;lt;hjkl&amp;gt;&lt;/code&gt;, feel free to file an issue or even a pull request.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-third-party-packages" class="anchor" aria-hidden="true" href="#third-party-packages"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Third-party packages&lt;/h2&gt;
&lt;p&gt;Third-party packages are provided by several parties:&lt;/p&gt;
&lt;table&gt;
  &lt;tbody&gt;&lt;tr&gt;&lt;th&gt;Major mode&lt;/th&gt;&lt;th&gt;Evil bindings&lt;/th&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;magit&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/emacs-evil/evil-magit"&gt;evil-magit&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;lispy&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/noctuid/lispyville"&gt;lispyville&lt;/a&gt; or &lt;a href="https://github.com/sp3ctum/evil-lispy"&gt;evil-lispy&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;org&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/GuiltyDolphin/org-evil"&gt;org-evil&lt;/a&gt; or &lt;a href="https://github.com/Somelauw/evil-org-mode"&gt;evil-org&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;markdown&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/Somelauw/evil-markdown"&gt;evil-markdown&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;ledger&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/atheriel/evil-ledger"&gt;evil-ledger&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;Should you know any suitable package not mentioned in this list, let us know and
  file an issue.&lt;/p&gt;
&lt;p&gt;Other references:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://github.com/syl20bnr/spacemacs/blob/master/doc/CONVENTIONS.org#key-bindings-conventions"&gt;Spacemacs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/hlissner/doom-emacs/tree/develop/modules/editor/evil"&gt;Doom Emacs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-faq" class="anchor" aria-hidden="true" href="#faq"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;FAQ&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Making SPC work similarly to &lt;a href="https://github.com/syl20bnr/spacemacs"&gt;spacemacs&lt;/a&gt;.
    &lt;p&gt;&lt;code&gt;evil-collection&lt;/code&gt; binds over SPC in many packages. To use SPC as a leader
      key with the &lt;a href="https://github.com/noctuid/general.el"&gt;general&lt;/a&gt; library:&lt;/p&gt;
    &lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; general
  &lt;span class="pl-c1"&gt;:ensure&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:init&lt;/span&gt;
  (&lt;span class="pl-k"&gt;setq&lt;/span&gt; general-override-states '(&lt;span class="pl-c1"&gt;insert&lt;/span&gt;
                                  emacs
                                  hybrid
                                  normal
                                  visual
                                  motion
                                  operator
                                  replace))
  &lt;span class="pl-c1"&gt;:config&lt;/span&gt;
  (general-define-key
   &lt;span class="pl-c1"&gt;:states&lt;/span&gt; '(normal visual motion)
   &lt;span class="pl-c1"&gt;:keymaps&lt;/span&gt; &lt;span class="pl-c1"&gt;'override&lt;/span&gt;
   &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SPC&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'hydra-space/body&lt;/span&gt;))
   &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Replace 'hydra-space/body with your leader function.&lt;/span&gt;
    &lt;/pre&gt;&lt;/div&gt;
    &lt;p&gt;See &lt;a href="https://github.com/noctuid/evil-guide"&gt;noctuid’s evil guide&lt;/a&gt; for other approaches.&lt;/p&gt;
    &lt;p&gt;This should also be accomplishable using key translation from &lt;a href="https://github.com/noctuid/general.el"&gt;general&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-contributing" class="anchor" aria-hidden="true" href="#contributing"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contributing&lt;/h2&gt;
&lt;p&gt;Please do!&lt;/p&gt;
&lt;p&gt;We welcome any additional modes that are not already supported.&lt;/p&gt;
&lt;p&gt;All bindings in &lt;code&gt;evil-collection&lt;/code&gt; are still open to change so if there’s
  a better or more consistent binding, please &lt;a href="https://github.com/emacs-evil/evil-collection/issues"&gt;open an issue&lt;/a&gt; or &lt;a href="https://github.com/emacs-evil/evil-collection/pulls"&gt;submit a pull request&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Follow &lt;a href="https://github.com/bbatsov/emacs-lisp-style-guide/"&gt;The Emacs Lisp Style Guide&lt;/a&gt; for coding conventions.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/erlang/otp/wiki/writing-good-commit-messages"&gt;Erlang/OTP&lt;/a&gt; has a good read for helpful commit messages.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>emacs-evil</author><guid isPermaLink="false">https://github.com/emacs-evil/evil-collection</guid><pubDate>Thu, 30 Jan 2020 00:16:00 GMT</pubDate></item><item><title>noctuid/general.el #17 in Emacs Lisp, This week</title><link>https://github.com/noctuid/general.el</link><description>&lt;p&gt;&lt;i&gt;More convenient key definitions in emacs&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="org" data-path="README.org"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-general-user-manual" class="anchor" aria-hidden="true" href="#general-user-manual"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;General User Manual&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://melpa.org/#/general" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/be373599d758041a30afb4c4950c3b079df4e161/68747470733a2f2f6d656c70612e6f72672f7061636b616765732f67656e6572616c2d62616467652e737667" alt="https://melpa.org/packages/general-badge.svg" data-canonical-src="https://melpa.org/packages/general-badge.svg" style="max-width:100%;"&gt;&lt;/a&gt; &lt;a href="https://travis-ci.org/noctuid/general.el" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/96076fda3f94775bd571802af47e2710f26a0ad6/68747470733a2f2f7472617669732d63692e6f72672f6e6f63747569642f67656e6572616c2e656c2e7376673f6272616e63683d6d6173746572" alt="https://travis-ci.org/noctuid/general.el.svg?branch=master" data-canonical-src="https://travis-ci.org/noctuid/general.el.svg?branch=master" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/noctuid/general.el"&gt;&lt;img src="https://camo.githubusercontent.com/b1298535828025bd6dada5abbb8661b43c7c7785/687474703a2f2f692e696d6775722e636f6d2f535841363679372e706e67" alt="http://i.imgur.com/SXA66y7.png" data-canonical-src="http://i.imgur.com/SXA66y7.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;A general is a leader. – onioncheese&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;&lt;a id="user-content-recent-breaking-changes" class="anchor" aria-hidden="true" href="#recent-breaking-changes"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Recent Breaking Changes&lt;/h1&gt;
&lt;h2&gt;&lt;a id="user-content-2018-01-21-general-default--variables-are-obsolete" class="anchor" aria-hidden="true" href="#2018-01-21-general-default--variables-are-obsolete"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2018-01-21 &lt;code&gt;general-default-...&lt;/code&gt; variables are obsolete&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;general-default-prefix&lt;/code&gt;, &lt;code&gt;general-default-non-normal-prefix&lt;/code&gt;, &lt;code&gt;general-default-global-prefix&lt;/code&gt;, &lt;code&gt;general-default-states&lt;/code&gt;, and &lt;code&gt;general-default-keymaps&lt;/code&gt; still work. However, they will eventually be removed, so please switch to using &lt;code&gt;general-create-definer&lt;/code&gt; if you want to use a definer with different defaults.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-2018-01-20-general-create-vim-definer-and-general-create-dual-vim-definer-have-been-removed" class="anchor" aria-hidden="true" href="#2018-01-20-general-create-vim-definer-and-general-create-dual-vim-definer-have-been-removed"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2018-01-20 &lt;code&gt;general-create-vim-definer&lt;/code&gt; and &lt;code&gt;general-create-dual-vim-definer&lt;/code&gt; have been removed&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;general-create-definer&lt;/code&gt; should now be used instead as it is now capable of the same functionality (&lt;code&gt;general-evil-setup&lt;/code&gt; now uses it). Additionally, &lt;code&gt;general-vim-definer-default&lt;/code&gt; is obsolete and will be removed eventually. The second argument to &lt;code&gt;general-evil-setup&lt;/code&gt; is no longer used and will also be removed eventually. The vim definers will now always set the default &lt;code&gt;:states&lt;/code&gt; (and never the default &lt;code&gt;:keymaps&lt;/code&gt;) because of the change below.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-2018-01-20-states-normal-is-now-the-same-as-keymaps-normal" class="anchor" aria-hidden="true" href="#2018-01-20-states-normal-is-now-the-same-as-keymaps-normal"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2018-01-20 &lt;code&gt;:states 'normal&lt;/code&gt; is now the same as &lt;code&gt;:keymaps 'normal&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;:keymaps 'global :states 'normal&lt;/code&gt; will now bind in &lt;code&gt;evil-normal-state-keymap&lt;/code&gt; as opposed to the normal state auxiliary keymap of &lt;code&gt;(current-global-map)&lt;/code&gt; (see &lt;a href="#note-for-evil-users"&gt;Note for Evil Users&lt;/a&gt;). It is not recommended to bind in a state and &lt;code&gt;(current-global-map)&lt;/code&gt;. If you want to prevent certain keys from being overridden, please use evil intercept keymaps instead.&lt;/p&gt;
&lt;p&gt;If you update general, please make sure that you are also using a recent version of evil.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-2018-01-20-general-simulate-keys-is-now-obsolete" class="anchor" aria-hidden="true" href="#2018-01-20-general-simulate-keys-is-now-obsolete"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2018-01-20: &lt;code&gt;general-simulate-keys&lt;/code&gt; is now obsolete&lt;/h2&gt;
&lt;p&gt;Please switch to &lt;code&gt;general-key&lt;/code&gt; or &lt;code&gt;general-simulate-key&lt;/code&gt;. Note that keyword arguments have replaced the positional arguments of &lt;code&gt;general-simulate-keys&lt;/code&gt;. &lt;code&gt;general-simulate-keys&lt;/code&gt; will likely be removed sometime in the future.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-table-of-contents" class="anchor" aria-hidden="true" href="#table-of-contents"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Table of Contents&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="#about"&gt;About&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="#dependency-versions"&gt;Dependency Versions&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="#key-features"&gt;Key Features&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="#reading-recommendations"&gt;Reading Recommendations&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="#usage-recommendations-and-documentation-clarifications"&gt;Usage Recommendations and Documentation Clarifications&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="#basic-examples"&gt;Basic Examples&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href="#general-examples"&gt;General Examples&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#evil-examples"&gt;Evil Examples&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#switching-completely-to-general"&gt;Switching Completely to General&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href="#general-define-key-details"&gt;~general-define-key~ Details&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href="#definitions"&gt;Definitions&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#keyword-arguments"&gt;Keyword Arguments&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href="#predicates"&gt;Predicates&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href="#keymapstate-aliases"&gt;Keymap/State Aliases&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#general-define-key-wrappers"&gt;~general-define-key~ Wrappers&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href="#positional-argument-wrappers"&gt;Positional Argument Wrappers&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href="#mass-key-unbinding-wrapper"&gt;Mass Key Unbinding Wrapper&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href="#creating-new-key-definers"&gt;Creating New Key Definers&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href="#vim-like-definers"&gt;Vim-like Definers&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href="#note-for-evil-users"&gt;Note for Evil Users&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href="#override-keymaps-and-buffer-local-keybindings"&gt;Override Keymaps and Buffer Local Keybindings&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="#displaying-keybindings"&gt;Displaying Keybindings&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="#functionsmacros-to-aid-key-definition"&gt;Functions/Macros to Aid Key Definition&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href="#disclaimer"&gt;Disclaimer&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#simulating-keypresses"&gt;Simulating Keypresses&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#mapping-under-non-prefix-keys"&gt;Mapping Under Non-prefix Keys&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#choosing-definitions-based-on-predicates"&gt;Choosing Definitions Based on Predicates&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#key-translation"&gt;Key “Translation”&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#automatic-key-unbinding"&gt;Automatic Key Unbinding&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href="#non-keybinding-related-configuration-helpers"&gt;Non-keybinding-related Configuration Helpers&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href="#settings"&gt;Settings&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#hooks-and-advice"&gt;Hooks and Advice&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href="#integration-with-other-packages"&gt;Integration with Other Packages&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href="#use-package-keywords"&gt;Use-package Keywords&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href="#general-keyword"&gt;:general Keyword&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href="#hook-keywords"&gt;Hook Keywords&lt;/a&gt;
            &lt;ul&gt;
              &lt;li&gt;&lt;a href="#ghook-keyword"&gt;:ghook Keyword&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href="#gfhook-keyword"&gt;:gfhook Keyword&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href="#use-with-key-chord"&gt;Use with Key-chord&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href="#extended-definition-syntax"&gt;Extended Definition Syntax&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href="#autoloaded-keymaps"&gt;“Autoloaded” Keymaps&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#which-key-integration"&gt;Which Key Integration&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#evil-command-properties"&gt;Evil Command Properties&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#user-defined-extended-definition-keywords"&gt;User-defined Extended Definition Keywords&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href="#user-defined-key-definers"&gt;User-defined Key Definers&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href="#wrapping-evil-define-minor-mode-key"&gt;Wrapping ~evil-define-minor-mode-key~&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#lispy-integration-wrapping-lispy-define-key"&gt;Lispy Integration/ Wrapping ~lispy-define-key~&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#worf-integration-wrapping-worf-define-key"&gt;Worf Integration/ Wrapping ~worf-define-key~&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#other-provided-definers"&gt;Other Provided Definers&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href="#faq"&gt;FAQ&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href="#how-do-i-prevent-key-sequence-starts-with-non-prefix-key-errors"&gt;How do I prevent &lt;code&gt;Key sequence starts with non-prefix key&lt;/code&gt; errors?&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#why-dont-some-evil-keybindings-work-immediately"&gt;Why don’t some evil keybindings work (immediately)?&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;a id="user-content-about" class="anchor" aria-hidden="true" href="#about"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;About&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;general.el&lt;/code&gt; provides a more convenient method for binding keys in emacs (for both evil and non-evil users). Like &lt;code&gt;use-package&lt;/code&gt;, which provides a convenient, unified interface for managing packages, &lt;code&gt;general.el&lt;/code&gt; is intended to provide a convenient, unified interface for key definitions. While this package does implement some completely new functionality (such as the ability to make vim-style keybindings under non-prefix keys with an optional timeout), its primary purpose is to build on existing functionality to make key definition more clear and concise. &lt;code&gt;general-define-key&lt;/code&gt; is user-extensible and supports defining multiple keys in multiple keymaps at once, implicitly wrapping key strings with &lt;code&gt;(kbd ...)&lt;/code&gt;, using named prefix key sequences (like the leader key in vim), and much more.&lt;/p&gt;
&lt;p&gt;One advantage of using &lt;code&gt;general-define-key&lt;/code&gt; (or a wrapper for it) even in cases where its extra functionality isn’t necessary and doesn’t significantly improve brevity is that all keybindings are recorded and can be displayed later with &lt;code&gt;general-describe-keybindings&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This manual explains the most relevant parts of every &lt;code&gt;general.el&lt;/code&gt; feature. All user-facing functions, macros, and variables also have docstrings (e.g. accessible with &lt;code&gt;C-h f&lt;/code&gt; or &lt;code&gt;C-h v&lt;/code&gt;), so please consult these for further details.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-dependency-versions" class="anchor" aria-hidden="true" href="#dependency-versions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Dependency Versions&lt;/h1&gt;
&lt;p&gt;Please use MELPA and not MELPA stable for installing optional dependencies (e.g. evil and use-package). General may rely on functionality not in released versions for these packages, so if you are having trouble, please try updating them.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-key-features" class="anchor" aria-hidden="true" href="#key-features"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Key Features&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Provides a single function, &lt;code&gt;general-define-key&lt;/code&gt;, that is usable for all key definition; wrappers are provided as well&lt;/li&gt;
  &lt;li&gt;Does not hide important details of key definition (unlike &lt;code&gt;evil-leader.el&lt;/code&gt;); users should be familiar with &lt;code&gt;define-key&lt;/code&gt; and other definers (e.g. &lt;code&gt;evil-define-key(*)&lt;/code&gt; for evil users) before using this package&lt;/li&gt;
  &lt;li&gt;Uses a syntax similar to &lt;code&gt;setq&lt;/code&gt; for key definitions (like &lt;code&gt;evil-define-key&lt;/code&gt;, &lt;code&gt;bind-map&lt;/code&gt;, &lt;code&gt;evil-leader.el&lt;/code&gt;, etc.; unlike &lt;code&gt;bind-key&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Provides tight (and optional) integration with evil (unlike &lt;code&gt;bind-key&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;general-def&lt;/code&gt; can act as a drop-in replacement for the following definers (see the documentation below for a minor caveat) (unique):
    &lt;ul&gt;
      &lt;li&gt;&lt;code&gt;general-define-key&lt;/code&gt; and &lt;code&gt;global-set-key&lt;/code&gt; (no positional keymap argument)&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;define-key&lt;/code&gt; and &lt;code&gt;evil-global-set-key&lt;/code&gt; (positional argument for keymap)&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;evil-define-key&lt;/code&gt; (positional argument for state and keymap)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;With the &lt;code&gt;:definer&lt;/code&gt; keyword, &lt;code&gt;general-define-key&lt;/code&gt; can be extended to use any key definition function (e.g. &lt;code&gt;evil-define-minor-mode-key&lt;/code&gt;, &lt;code&gt;lispy-define-key&lt;/code&gt;, etc.) (unique)&lt;/li&gt;
  &lt;li&gt;With “extended” definitions, user-created keywords can be added globally (in &lt;code&gt;general-define-key&lt;/code&gt;) and locally (in an “extended” definition plist) to extend the behavior of &lt;code&gt;general-define-key&lt;/code&gt; (unique)&lt;/li&gt;
  &lt;li&gt;Allows binding keys in multiple keymaps/states at once (unlike &lt;code&gt;bind-key&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Automatically wraps string keys and definitions with &lt;code&gt;kbd&lt;/code&gt; (this behavior can be turned off for compatibility with &lt;code&gt;define-key&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Allows using an arbitrary number of prefix keys or “leaders” of any length (but does not require prefix keys like) (unlike &lt;code&gt;evil-leader.el&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Allows for automatically creating prefix commands (but does not require creating them like &lt;code&gt;bind-key&lt;/code&gt; does)&lt;/li&gt;
  &lt;li&gt;Allows for buffer-local keybindings (unlike &lt;code&gt;local-set-key&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Allows deferring keybindings until the specified keymap exists (no need to use &lt;code&gt;(with-)eval-after-load&lt;/code&gt;) (like &lt;code&gt;evil-define-key&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Allows displaying defined keys (like &lt;code&gt;bind-key.el&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Provides integration with other packages such as &lt;code&gt;key-chord.el&lt;/code&gt; and &lt;code&gt;which-key.el&lt;/code&gt; (unique)&lt;/li&gt;
  &lt;li&gt;Provides other helpers for keybindings (unique):
    &lt;ul&gt;
      &lt;li&gt;A method for creating “autoloaded” keymaps (like &lt;code&gt;bind-key.el&lt;/code&gt;)&lt;/li&gt;
      &lt;li&gt;A potentially better way to simulate keypresses (works with prefix args and for incomplete key sequences, i.e. a key bound to a keymap)&lt;/li&gt;
      &lt;li&gt;A method for binding under non-prefix keys with an optional timeout (like in vim; e.g. bind &lt;code&gt;jk&lt;/code&gt; in insert mode without losing &lt;code&gt;j&lt;/code&gt;)&lt;/li&gt;
      &lt;li&gt;A helper to create a menu item to dispatch to different definitions based on predicates&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Provides other helpers for configuration (e.g. more convenient functions for hooks and advice)&lt;/li&gt;
  &lt;li&gt;Is well tested (unlike &lt;code&gt;evil-leader.el&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;a id="user-content-reading-recommendations" class="anchor" aria-hidden="true" href="#reading-recommendations"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Reading Recommendations&lt;/h1&gt;
&lt;p&gt;Before using &lt;code&gt;general.el&lt;/code&gt;, you should first be familiar with &lt;code&gt;define-key&lt;/code&gt;, &lt;code&gt;global-set-key&lt;/code&gt;, and &lt;a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Key-Bindings.html" rel="nofollow"&gt;emacs’ key binding system&lt;/a&gt;. I recommend reading &lt;a href="https://www.masteringemacs.org/article/mastering-key-bindings-emacs" rel="nofollow"&gt;Mastering Key Bindings in Emacs&lt;/a&gt; if you are new to emacs. Also see &lt;code&gt;define-key&lt;/code&gt;’s help text for information on valid keys and definitions.&lt;/p&gt;
&lt;p&gt;If you are also using evil, you should first be familiar with how &lt;code&gt;evil-define-key&lt;/code&gt;, &lt;code&gt;evil-define-minor-mode-key&lt;/code&gt;, etc. work. If you are a new evil user, I’d recommend looking at my &lt;a href="https://github.com/noctuid/evil-guide"&gt;evil guide&lt;/a&gt;. The &lt;a href="https://github.com/noctuid/evil-guide#keybindings-and-states"&gt;Keybindings and States&lt;/a&gt; section in particular may be useful&lt;/p&gt;
&lt;p&gt;A large number of issues opened on this repository are not specifically related to &lt;code&gt;general.el&lt;/code&gt; (e.g. user usage or syntax errors that would also occur without &lt;code&gt;general-define-key&lt;/code&gt;). While I don’t mind generic questions about keybinding issues, you may save yourself some time if you first determine whether or not an issue is related to &lt;code&gt;general-define-key&lt;/code&gt; by, if possible, testing with an equivalent &lt;code&gt;define-key&lt;/code&gt;, &lt;code&gt;evil-define-key&lt;/code&gt;, etc. statement.&lt;/p&gt;
&lt;p&gt;See also the &lt;a href="#faq"&gt;FAQ&lt;/a&gt; for commonly asked questions.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-usage-recommendations-and-documentation-clarifications" class="anchor" aria-hidden="true" href="#usage-recommendations-and-documentation-clarifications"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Usage Recommendations and Documentation Clarifications&lt;/h1&gt;
&lt;p&gt;To facilitate extensibility and easy creation of wrappers, &lt;code&gt;general-define-key&lt;/code&gt; uses keyword arguments to specify everything besides the key definitions, including for the &lt;code&gt;:states&lt;/code&gt; and &lt;code&gt;:keymaps&lt;/code&gt;. Since users will most often specify one or both of these keyword arguments, &lt;code&gt;general-define-key&lt;/code&gt; is often less concise than &lt;code&gt;define-key&lt;/code&gt; or &lt;code&gt;evil-define-key&lt;/code&gt;. It is for this reason that it is recommended that &lt;code&gt;general-define-key&lt;/code&gt; not be used directly. &lt;code&gt;general.el&lt;/code&gt; provides wrappers around &lt;code&gt;general-define-key&lt;/code&gt; that take positional arguments, and it is recommended that you use these instead of &lt;code&gt;general-define-key&lt;/code&gt;. &lt;code&gt;general-create-definer&lt;/code&gt; can also be used to create a new definer with certain default settings (e.g. prefix settings). For clarity and consistency, examples in the documentation usually use &lt;code&gt;general-define-key&lt;/code&gt; unless the example is explicitly for a wrapper. However, &lt;a href="#positional-argument-wrappers"&gt;~general-def~&lt;/a&gt; is recommended over &lt;code&gt;general-define-key&lt;/code&gt; as it is more flexible and concise. Positional arguments are &lt;i&gt;optional but not required&lt;/i&gt;, so &lt;code&gt;general-def&lt;/code&gt; can basically act as a drop-in replacement for many key definers (including &lt;code&gt;general-define-key&lt;/code&gt;, &lt;code&gt;define-key&lt;/code&gt;, and &lt;code&gt;evil-define-key&lt;/code&gt;). Note that &lt;code&gt;general-create-definer&lt;/code&gt; and the &lt;code&gt;:general&lt;/code&gt; keyword argument for &lt;code&gt;use-package&lt;/code&gt; use &lt;code&gt;general-def&lt;/code&gt;. I personally only use &lt;code&gt;general-def&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Since it is more common for commands to not be sharp quoted in key definitions, this package’s examples use single quotes for commands. I personally prefer to always properly sharp quote functions, so commands in the actual non-example code are always sharp quoted.&lt;/p&gt;
&lt;p&gt;Although &lt;code&gt;general-define-key&lt;/code&gt; will automatically defer keybindings until the specified keymaps exist, you can still use it with &lt;code&gt;with-eval-after-load&lt;/code&gt; or use-package’s &lt;code&gt;:config&lt;/code&gt; keyword whenever it makes sense to. If you have a lot of keybindings, this could potentially shave some fraction of a second off of your startup time.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-basic-examples" class="anchor" aria-hidden="true" href="#basic-examples"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Basic Examples&lt;/h1&gt;
&lt;h2&gt;&lt;a id="user-content-general-examples" class="anchor" aria-hidden="true" href="#general-examples"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;General Examples&lt;/h2&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;require&lt;/span&gt; &lt;span class="pl-c1"&gt;'general&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; * Global Keybindings&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; &lt;span class="pl-smi"&gt;`general-define-key'&lt;/span&gt; acts like &lt;span class="pl-smi"&gt;`global-set-key'&lt;/span&gt; when :keymaps is not&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; specified (because ":keymaps 'global" is the default)&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; kbd is not necessary and arbitrary amount of key def pairs are allowed&lt;/span&gt;
(general-define-key
 &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;M-x&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'amx&lt;/span&gt;                             &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt; or 'smex&lt;/span&gt;
 &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-s&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'counsel-grep-or-swiper&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; * Mode Keybindings&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; &lt;span class="pl-smi"&gt;`general-define-key'&lt;/span&gt; is comparable to &lt;span class="pl-smi"&gt;`define-key'&lt;/span&gt; when :keymaps is specified&lt;/span&gt;
(general-define-key
 &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; NOTE: keymaps specified with :keymaps must be quoted&lt;/span&gt;
 &lt;span class="pl-c1"&gt;:keymaps&lt;/span&gt; &lt;span class="pl-c1"&gt;'org-mode-map&lt;/span&gt;
 &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-c C-q&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'counsel-org-tag&lt;/span&gt;
 &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; ...&lt;/span&gt;
 )
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; &lt;span class="pl-smi"&gt;`general-def'&lt;/span&gt; can be used instead for &lt;span class="pl-smi"&gt;`define-key'&lt;/span&gt;-like syntax&lt;/span&gt;
(general-def org-mode-map
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-c C-q&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'counsel-org-tag&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; ...&lt;/span&gt;
  )

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; * Prefix Keybindings&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; :prefix can be used to prevent redundant specification of prefix keys&lt;/span&gt;
(general-define-key
 &lt;span class="pl-c1"&gt;:prefix&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-c&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
 &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; bind "C-c a" to 'org-agenda&lt;/span&gt;
 &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;a&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'org-agenda&lt;/span&gt;
 &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;b&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'counsel-bookmark&lt;/span&gt;
 &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;c&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'org-capture&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; for frequently used prefix keys, the user can create a custom definer with a&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; default :prefix&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; using a variable is not necessary, but it may be useful if you want to&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; experiment with different prefix keys and aren't using &lt;span class="pl-smi"&gt;`general-create-definer'&lt;/span&gt;&lt;/span&gt;
(&lt;span class="pl-k"&gt;defconst&lt;/span&gt; &lt;span class="pl-en"&gt;my-leader&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-c&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)

(general-create-definer my-leader-def
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; :prefix my-leader&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; or without a variable&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:prefix&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-c&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; ** Global Keybindings&lt;/span&gt;
(my-leader-def
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;a&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'org-agenda&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;b&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'counsel-bookmark&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;c&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'org-capture&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; ** Mode Keybindings&lt;/span&gt;
(my-leader-def
  &lt;span class="pl-c1"&gt;:keymaps&lt;/span&gt; &lt;span class="pl-c1"&gt;'clojure-mode-map&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; bind "C-c C-l"&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-l&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'cider-load-file&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-z&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'cider-switch-to-repl-buffer&lt;/span&gt;)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; &lt;span class="pl-smi"&gt;`general-create-definer'&lt;/span&gt; creates wrappers around &lt;span class="pl-smi"&gt;`general-def'&lt;/span&gt;, so&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; &lt;span class="pl-smi"&gt;`define-key'&lt;/span&gt;-like syntax is also supported&lt;/span&gt;
(my-leader-def clojure-mode-map
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-l&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'cider-load-file&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-z&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'cider-switch-to-repl-buffer&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; * Settings&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; change &lt;span class="pl-smi"&gt;`auto-revert-interval'&lt;/span&gt; after autorevert has been loaded (&lt;span class="pl-smi"&gt;`setq'&lt;/span&gt; will&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; not work)&lt;/span&gt;
(general-setq auto-revert-interval &lt;span class="pl-c1"&gt;10&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-evil-examples" class="anchor" aria-hidden="true" href="#evil-examples"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Evil Examples&lt;/h2&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;require&lt;/span&gt; &lt;span class="pl-c1"&gt;'general&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; * Global Keybindings&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; &lt;span class="pl-smi"&gt;`general-define-key'&lt;/span&gt; acts like &lt;span class="pl-smi"&gt;`evil-define-key'&lt;/span&gt; when :states is specified&lt;/span&gt;
(general-define-key
 &lt;span class="pl-c1"&gt;:states&lt;/span&gt; &lt;span class="pl-c1"&gt;'motion&lt;/span&gt;
 &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; swap ; and :&lt;/span&gt;
 &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'evil-ex&lt;/span&gt;
 &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;:&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'evil-repeat-find-char&lt;/span&gt;)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; same as&lt;/span&gt;
(general-define-key
 &lt;span class="pl-c1"&gt;:states&lt;/span&gt; &lt;span class="pl-c1"&gt;'motion&lt;/span&gt;
 &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'evil-ex&lt;/span&gt;
 &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;:&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'evil-repeat-find-char&lt;/span&gt;)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; &lt;span class="pl-smi"&gt;`general-def'&lt;/span&gt; can be used instead for &lt;span class="pl-smi"&gt;`evil-global-set-key'&lt;/span&gt;-like syntax&lt;/span&gt;
(general-def &lt;span class="pl-c1"&gt;'motion&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'evil-ex&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;:&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'evil-repeat-find-char&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; alternative using &lt;span class="pl-smi"&gt;`general-translate-key'&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; swap ; and : in &lt;span class="pl-smi"&gt;`evil-motion-state-map'&lt;/span&gt;&lt;/span&gt;
(general-swap-key &lt;span class="pl-c1"&gt;nil&lt;/span&gt; &lt;span class="pl-c1"&gt;'motion&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;:&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; * Mode Keybindings&lt;/span&gt;
(general-define-key
 &lt;span class="pl-c1"&gt;:states&lt;/span&gt; &lt;span class="pl-c1"&gt;'normal&lt;/span&gt;
 &lt;span class="pl-c1"&gt;:keymaps&lt;/span&gt; &lt;span class="pl-c1"&gt;'emacs-lisp-mode-map&lt;/span&gt;
 &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; or xref equivalent&lt;/span&gt;
 &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;K&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'elisp-slime-nav-describe-elisp-thing-at-point&lt;/span&gt;)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; &lt;span class="pl-smi"&gt;`general-def'&lt;/span&gt; can be used instead for &lt;span class="pl-smi"&gt;`evil-define-key'&lt;/span&gt;-like syntax&lt;/span&gt;
(general-def &lt;span class="pl-c1"&gt;'normal&lt;/span&gt; emacs-lisp-mode-map
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;K&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'elisp-slime-nav-describe-elisp-thing-at-point&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; * Prefix Keybindings&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; :prefix can be used to prevent redundant specification of prefix keys&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; again, variables are not necessary and likely not useful if you are only&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; using a definer created with &lt;span class="pl-smi"&gt;`general-create-definer'&lt;/span&gt; for the prefixes&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; (defconst my-leader "SPC")&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; (defconst my-local-leader "SPC m")&lt;/span&gt;

(general-create-definer my-leader-def
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; :prefix my-leader&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:prefix&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SPC&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)

(general-create-definer my-local-leader-def
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; :prefix my-local-leader&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:prefix&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SPC m&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; ** Global Keybindings&lt;/span&gt;
(my-leader-def
  &lt;span class="pl-c1"&gt;:keymaps&lt;/span&gt; &lt;span class="pl-c1"&gt;'normal&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; bind "SPC a"&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;a&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'org-agenda&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;b&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'counsel-bookmark&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;c&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'org-capture&lt;/span&gt;)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; &lt;span class="pl-smi"&gt;`general-create-definer'&lt;/span&gt; creates wrappers around &lt;span class="pl-smi"&gt;`general-def'&lt;/span&gt;, so&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; &lt;span class="pl-smi"&gt;`evil-global-set-key'&lt;/span&gt;-like syntax is also supported&lt;/span&gt;
(my-leader-def &lt;span class="pl-c1"&gt;'normal&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;a&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'org-agenda&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;b&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'counsel-bookmark&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;c&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'org-capture&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; to prevent your leader keybindings from ever being overridden (e.g. an evil&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; package may bind "SPC"), use :keymaps 'override&lt;/span&gt;
(my-leader-def
  &lt;span class="pl-c1"&gt;:states&lt;/span&gt; &lt;span class="pl-c1"&gt;'normal&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:keymaps&lt;/span&gt; &lt;span class="pl-c1"&gt;'override&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;a&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'org-agenda&lt;/span&gt;)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; or&lt;/span&gt;
(my-leader-def &lt;span class="pl-c1"&gt;'normal&lt;/span&gt; &lt;span class="pl-c1"&gt;'override&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;a&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'org-agenda&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; ** Mode Keybindings&lt;/span&gt;
(my-local-leader-def
  &lt;span class="pl-c1"&gt;:states&lt;/span&gt; &lt;span class="pl-c1"&gt;'normal&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:keymaps&lt;/span&gt; &lt;span class="pl-c1"&gt;'org-mode-map&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;y&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'org-store-link&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;p&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'org-insert-link&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; ...&lt;/span&gt;
  )
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; &lt;span class="pl-smi"&gt;`general-create-definer'&lt;/span&gt; creates wrappers around &lt;span class="pl-smi"&gt;`general-def'&lt;/span&gt;, so&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; &lt;span class="pl-smi"&gt;`evil-define-key'&lt;/span&gt;-like syntax is also supported&lt;/span&gt;
(my-local-leader-def &lt;span class="pl-c1"&gt;'normal&lt;/span&gt; org-mode-map
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;y&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'org-store-link&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;p&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'org-insert-link&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; ...&lt;/span&gt;
  )

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; * Settings&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; change evil's search module after evil has been loaded (&lt;span class="pl-smi"&gt;`setq'&lt;/span&gt; will not work)&lt;/span&gt;
(general-setq evil-search-module &lt;span class="pl-c1"&gt;'evil-search&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Vim-like definitions:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(general-evil-setup)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; * Global Keybindings&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; all keywords arguments are still supported&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; these are just wrappers around &lt;span class="pl-smi"&gt;`general-def'&lt;/span&gt; that set a default :states&lt;/span&gt;
(general-nmap
  &lt;span class="pl-c1"&gt;:prefix&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SPC&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;p&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'helm-mini&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; bind in motion state (inherited by the normal, visual, and operator states)&lt;/span&gt;
(general-mmap
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'evil-ex&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;:&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'evil-repeat-find-char&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; alternatively, for shorter names&lt;/span&gt;
(general-evil-setup &lt;span class="pl-c1"&gt;t&lt;/span&gt;)
(mmap
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'evil-ex&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;:&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'evil-repeat-find-char&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; * Mode Keybindings&lt;/span&gt;
(general-nmap
  &lt;span class="pl-c1"&gt;:keymaps&lt;/span&gt; &lt;span class="pl-c1"&gt;'emacs-lisp-mode-map&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;K&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'elisp-slime-nav-describe-elisp-thing-at-point&lt;/span&gt;)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; same as&lt;/span&gt;
(general-nmap emacs-lisp-mode-map
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;K&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'elisp-slime-nav-describe-elisp-thing-at-point&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-switching-completely-to-general" class="anchor" aria-hidden="true" href="#switching-completely-to-general"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Switching Completely to General&lt;/h2&gt;
&lt;p&gt;It is possible to gradually switch to using general by using it only for new configuration and slowly converting old configuration if desired. If you would like to quickly convert all keybindings in your init file to use general so that they show up with &lt;code&gt;general-describe-keybindings&lt;/code&gt;, you can potentially use regexp replace. For example, you could use &lt;code&gt;M-&amp;lt; C-M-% \(global-set-key\|define-key\|evil-global-set-key\|evil-define-key\) RET general-def RET !&lt;/code&gt;. The evil equivalent would be &lt;code&gt;:%s/\(global-set-key\|define-key\|evil-global-set-key\|evil-define-key\)/general-def/g&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;There are two caveats. The old key definers all require using &lt;code&gt;kbd&lt;/code&gt;. This means that you will either have to remove every &lt;code&gt;kbd&lt;/code&gt; in these key definers (e.g. &lt;code&gt;:%s/(kbd ?\(.*?\))/\1/gc&lt;/code&gt;; you should likely confirm whether each &lt;code&gt;kbd&lt;/code&gt; should be removed) or set &lt;code&gt;general-implicit-kbd&lt;/code&gt; to nil for the old configuration. Furthermore, &lt;code&gt;general-def&lt;/code&gt; can only correctly replace definer statements where the first specified key is a string or vector. It will not work correctly to replace a definer that uses a variable or function for the first key (e.g. &lt;code&gt;(global-set-key my-key 'command)&lt;/code&gt; cannot be replaced directly with &lt;code&gt;general-def&lt;/code&gt;). To use general for definitions like this, you must either use the actual equivalent definer that &lt;code&gt;general-def&lt;/code&gt; ends up using  (&lt;code&gt;general-define-key&lt;/code&gt;, &lt;code&gt;general-emacs-define-key&lt;/code&gt;, or &lt;code&gt;evil-define-key&lt;/code&gt;) or explicitly separate the positional arguments from the first key with a bogus keyword argument (e.g. &lt;code&gt;(general-def :start-maps my-key 'command)&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;If you decide to do this, please make sure that your configuration is backed up, and test this out to make sure that there are no errors before permanently changing your configuration.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-general-define-key-details" class="anchor" aria-hidden="true" href="#general-define-key-details"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;code&gt;general-define-key&lt;/code&gt; Details&lt;/h1&gt;
&lt;p&gt;This package provides one main function, &lt;code&gt;general-define-key&lt;/code&gt;, for key definitions for both evil and non-evil users. It is recommended you use the provided wrappers around it or create your own with &lt;code&gt;general-create-definer&lt;/code&gt;, but first you should understand the keyword arguments provided by &lt;code&gt;general-define-key&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-definitions" class="anchor" aria-hidden="true" href="#definitions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Definitions&lt;/h2&gt;
&lt;p&gt;The only positional arguments for &lt;code&gt;general-define-key&lt;/code&gt; are any number of key/definition pairs. General supports all key and definition types supported by &lt;code&gt;define-key&lt;/code&gt; (see its help text) as well as its own &lt;a href="#extended-definition-syntax"&gt;“extended definitions”&lt;/a&gt;. Here are a few examples of definitions that aren’t standard =”string key” ‘command= pairs:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; vector keys, including [t] and [remap] are supported&lt;/span&gt;
(general-define-key
 &lt;span class="pl-c1"&gt;:keymaps&lt;/span&gt; &lt;span class="pl-c1"&gt;'org-capture-mode-map&lt;/span&gt;
 [remap evil-save-and-close]          &lt;span class="pl-c1"&gt;'org-capture-finalize&lt;/span&gt;
 [remap evil-save-modified-and-close] &lt;span class="pl-c1"&gt;'org-capture-finalize&lt;/span&gt;
 [remap evil-quit]                    &lt;span class="pl-c1"&gt;'org-capture-kill&lt;/span&gt;)

(general-define-key
 &lt;span class="pl-c1"&gt;:states&lt;/span&gt; &lt;span class="pl-c1"&gt;'normal&lt;/span&gt;
 &lt;span class="pl-c1"&gt;:keymaps&lt;/span&gt; &lt;span class="pl-c1"&gt;'org-capture-mode-map&lt;/span&gt;
 &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; keyboard macro definition&lt;/span&gt;
 &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;RET&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-c C-c&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
 &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; general.el extended definition&lt;/span&gt;
 &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SPC k&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; '(org-capture-kill &lt;span class="pl-c1"&gt;:which-key&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;abort capture&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;kbd&lt;/code&gt; will automatically be called on every string key. &lt;code&gt;general-implicit-kbd&lt;/code&gt; can be set to nil if you want to manually use &lt;code&gt;(kbd "key")&lt;/code&gt;. This option is mainly provided to make it easy to transition to &lt;code&gt;general-define-key&lt;/code&gt; or &lt;code&gt;general-def&lt;/code&gt; from other key definers with search and replace and therefore only applies to &lt;code&gt;general-define-key&lt;/code&gt; (and wrappers). &lt;code&gt;kbd&lt;/code&gt; will always be called on string keys for other helpers such as &lt;code&gt;general-key&lt;/code&gt;, &lt;code&gt;general-key-dispatch&lt;/code&gt;, and &lt;code&gt;general-translate-key&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-keyword-arguments" class="anchor" aria-hidden="true" href="#keyword-arguments"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Keyword Arguments&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;:prefix&lt;/code&gt;, &lt;code&gt;:states&lt;/code&gt;, and &lt;code&gt;:keymaps&lt;/code&gt; are the most basic keyword arguments. By default, there is no prefix or state (each is nil), and the keymap is =’global=. Each keymap can either be a quoted keymap, quoted &lt;a href="#keymapstate-aliases"&gt;keymap alias&lt;/a&gt;, =’global=, or =’local=. This is the biggest contrast between &lt;code&gt;general-define-key&lt;/code&gt; and other definers such as &lt;code&gt;define-key&lt;/code&gt;, where the keymap is passed in directly. Note that the provided wrappers such as &lt;code&gt;general-def&lt;/code&gt; do not require quoting keymaps. When the keymap is =’local=, the key will be bound only in the current buffer (see &lt;a href="#override-keymaps-and-buffer-local-keybindings"&gt;here&lt;/a&gt; for more details). When the keymap is =’global=, the key will be bound in &lt;code&gt;(current-global-map)&lt;/code&gt; (or the corresponding evil global map if &lt;code&gt;:states&lt;/code&gt; is specified; see &lt;a href="#note-for-evil-users"&gt;Note for Evil Users&lt;/a&gt; for more information).&lt;/p&gt;
&lt;p&gt;&lt;code&gt;:states&lt;/code&gt; and &lt;code&gt;:keymaps&lt;/code&gt; can be lists or a single element, allowing the user to define keys for multiple evil states or keymaps simultaneously. This can be useful in certain situations to prevent redundancy.&lt;/p&gt;
&lt;p&gt;Using a different prefix for the insert and emacs states (or any state in &lt;code&gt;general-non-normal-states&lt;/code&gt;) can be done with &lt;code&gt;:non-normal-prefix&lt;/code&gt; or &lt;code&gt;:global-prefix&lt;/code&gt;. By default, &lt;code&gt;:prefix&lt;/code&gt; will apply to all keys, but if one (or both) of the other prefix keywords is specified, &lt;code&gt;:prefix&lt;/code&gt; will only apply to evil states not listed in &lt;code&gt;general-non-normal-states&lt;/code&gt;. This is also the case for the global evil keymaps such as &lt;code&gt;evil-normal-state-map&lt;/code&gt;. &lt;code&gt;:non-normal-prefix&lt;/code&gt; will always only apply to the non-normal states. &lt;code&gt;:global-prefix&lt;/code&gt; will always apply to all keys. For example, this command will bind &lt;code&gt;SPC /&lt;/code&gt; to swiper in normal state and &lt;code&gt;M-SPC /&lt;/code&gt; to swiper in emacs and insert state:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(general-define-key
 &lt;span class="pl-c1"&gt;:keymaps&lt;/span&gt; '(normal insert emacs)
 &lt;span class="pl-c1"&gt;:prefix&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SPC&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
 &lt;span class="pl-c1"&gt;:non-normal-prefix&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;M-SPC&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
 &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'swiper&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you would like to create a named prefix keymap for your prefix keys, you can also specify &lt;code&gt;:prefix-command&lt;/code&gt; and/or &lt;code&gt;:prefix-map&lt;/code&gt;. All prefix keys will then be bound to the prefix command or prefix keymap in the correct keymaps. If &lt;code&gt;:prefix-command&lt;/code&gt; is specified, &lt;code&gt;define-prefix-command&lt;/code&gt; will be used with &lt;code&gt;prefix-map&lt;/code&gt; and &lt;code&gt;prefix-name&lt;/code&gt; passed in as additional arguments to &lt;code&gt;define-prefix-command&lt;/code&gt;. If only &lt;code&gt;:prefix-map&lt;/code&gt; is specified, a prefix keymap alone will be created with a menu item/prompt corresponding to &lt;code&gt;:prefix-name&lt;/code&gt;. Note that existing prefix commands/keymaps will not be redefined, so reevaluating a general.el form that uses &lt;code&gt;:prefix-command&lt;/code&gt; or &lt;code&gt;:prefix-map&lt;/code&gt; will not clear the previously created keymap.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(general-define-key
 &lt;span class="pl-c1"&gt;:keymaps&lt;/span&gt; '(normal insert emacs)
 &lt;span class="pl-c1"&gt;:prefix&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SPC&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
 &lt;span class="pl-c1"&gt;:non-normal-prefix&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;M-SPC&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
 &lt;span class="pl-c1"&gt;:prefix-command&lt;/span&gt; &lt;span class="pl-c1"&gt;'my-prefix-command&lt;/span&gt;
 &lt;span class="pl-c1"&gt;:prefix-map&lt;/span&gt; &lt;span class="pl-c1"&gt;'my-prefix-map&lt;/span&gt;
 &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'swiper&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;General is flexible in allowing you to choose how you write things, so if the above would be something you’d use often, you could create a function with the above keyword arguments as defaults using &lt;a href="#creating-new-key-definers"&gt;~general-create-definer~&lt;/a&gt; and write the definition like this:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(my-normal-and-insert-define-key &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'swiper&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;:infix&lt;/code&gt; keyword can be used to sandwich keys in between all of the specified prefix keys and the keys in each mapping. This is mainly useful when using multiple prefix keywords and especially when using wrappers. For example, if you wanted to define several keys that were prefixed with &lt;code&gt;SPC g&lt;/code&gt; in normal state and &lt;code&gt;M-SPC g&lt;/code&gt; in insert state, you could use the previous wrapper with &lt;code&gt;:infix&lt;/code&gt; instead of re-specifying both &lt;code&gt;:prefix&lt;/code&gt; and &lt;code&gt;:non-normal-prefix&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(my-normal-and-insert-define-key &lt;span class="pl-c1"&gt;:infix&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;g&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &amp;lt;maps...&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you just want to create the prefix keymap and bind keys directly in it without immediately binding a prefix key to the prefix keymap, simply don’t specify &lt;code&gt;:keymaps&lt;/code&gt; or &lt;code&gt;:prefix&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; bind "/" directly in the newly created my-prefix-map&lt;/span&gt;
(general-define-key &lt;span class="pl-c1"&gt;:prefix-map&lt;/span&gt; &lt;span class="pl-c1"&gt;'my-prefix-map&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'swiper&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There is also a &lt;code&gt;:predicate&lt;/code&gt; keyword for giving a condition under which a map should be active.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-predicates" class="anchor" aria-hidden="true" href="#predicates"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Predicates&lt;/h3&gt;
&lt;p&gt;The user can use the &lt;code&gt;:predicate&lt;/code&gt; keyword to specify a condition under which the map(s) should be active. For example:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(general-define-key
 &lt;span class="pl-c1"&gt;:keymaps&lt;/span&gt; &lt;span class="pl-c1"&gt;'local&lt;/span&gt;
 &lt;span class="pl-c1"&gt;:predicate&lt;/span&gt; '(&lt;span class="pl-c1"&gt;eobp&lt;/span&gt;)
 &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&amp;lt;right&amp;gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'beginning-of-buffer&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;right&amp;gt;&lt;/code&gt; will now behave normally except at the end of the buffer where it will jump to the beginning of the buffer. Note that with &lt;code&gt;:predicate&lt;/code&gt;, you can still only have a key bound once in a single keymap. In other words, &lt;code&gt;:predicate&lt;/code&gt; is only useful if a fallback keybinding already exists in a different, lower precedence keymap. If you want to have a key take different actions depending on conditions in a single keymap, see &lt;a href="#choosing-definitions-based-on-predicates"&gt;Choosing Definition Based on Predicates&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;See &lt;a href="http://endlessparentheses.com/define-context-aware-keys-in-emacs.html" rel="nofollow"&gt;this post&lt;/a&gt; for more information about how this works.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-keymapstate-aliases" class="anchor" aria-hidden="true" href="#keymapstate-aliases"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Keymap/State Aliases&lt;/h2&gt;
&lt;p&gt;To prevent the need to type out long keymap names like &lt;code&gt;evil-inner-text-objects-map&lt;/code&gt;, general allows the user to specify shorthand names for keymaps by altering &lt;code&gt;general-keymap-aliases&lt;/code&gt; (and for states by altering &lt;code&gt;general-state-aliases&lt;/code&gt;). These are alists of either an alias or a list of aliases to the full keymap name:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;push&lt;/span&gt; '(&lt;span class="pl-c1"&gt;help&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; help-map) general-keymap-aliases)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; or&lt;/span&gt;
(&lt;span class="pl-k"&gt;push&lt;/span&gt; '((h help) &lt;span class="pl-k"&gt;.&lt;/span&gt; help-map) general-keymap-aliases)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; or (emacs 25+)&lt;/span&gt;
(&lt;span class="pl-k"&gt;setf&lt;/span&gt; (&lt;span class="pl-c1"&gt;alist-get&lt;/span&gt; &lt;span class="pl-c1"&gt;'help&lt;/span&gt; general-keymap-aliases) &lt;span class="pl-c1"&gt;'help-map&lt;/span&gt;)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; or (emacs 25+)&lt;/span&gt;
(&lt;span class="pl-k"&gt;setf&lt;/span&gt; (&lt;span class="pl-c1"&gt;alist-get&lt;/span&gt; '(h help) general-keymap-aliases) &lt;span class="pl-c1"&gt;'help-map&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; now&lt;/span&gt;
(general-define-key &lt;span class="pl-c1"&gt;:keymaps&lt;/span&gt; &lt;span class="pl-c1"&gt;'help&lt;/span&gt; ...)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; is the same as&lt;/span&gt;
(general-define-key &lt;span class="pl-c1"&gt;:keymaps&lt;/span&gt; &lt;span class="pl-c1"&gt;'help-map&lt;/span&gt; ...)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that earlier entries in the alist take precedence.&lt;/p&gt;
&lt;p&gt;By default, the global evil state and text object keymaps have aliases. This allows for using the same syntax as &lt;code&gt;evil-global-set-key&lt;/code&gt; and &lt;code&gt;evil-define-key&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(general-define-key &lt;span class="pl-c1"&gt;:keymaps&lt;/span&gt; &lt;span class="pl-c1"&gt;'motion&lt;/span&gt; ...)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; or&lt;/span&gt;
(general-define-key &lt;span class="pl-c1"&gt;:keymaps&lt;/span&gt; &lt;span class="pl-c1"&gt;'m&lt;/span&gt; ...)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;See &lt;code&gt;general-keymap-aliases&lt;/code&gt; for all default aliases.&lt;/p&gt;
&lt;p&gt;All keymap symbols are immediately processed by &lt;code&gt;general--unalias&lt;/code&gt;. By overriding this function, it would be possible to, for example, automatically append &lt;code&gt;-map&lt;/code&gt; or &lt;code&gt;-mode-map&lt;/code&gt; to keymap names that don’t end in &lt;code&gt;-map&lt;/code&gt; or do something more complicated to create a generic shorthand without having manually specify all aliases. This is not recommended as it could potentially become confusing (and would currently break &lt;code&gt;:definer 'minor-mode&lt;/code&gt;), but if anyone would find this useful, feel free to make an issue, and I’ll consider adding it as an option.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-general-define-key-wrappers" class="anchor" aria-hidden="true" href="#general-define-key-wrappers"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;code&gt;general-define-key&lt;/code&gt; Wrappers&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-positional-argument-wrappers" class="anchor" aria-hidden="true" href="#positional-argument-wrappers"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Positional Argument Wrappers&lt;/h3&gt;
&lt;p&gt;When defining keys in specific keymaps and states, using positional arguments can be shorter. General has two macros that can basically act as drop-in replacements for &lt;code&gt;define-key&lt;/code&gt; and &lt;code&gt;evil-define-key&lt;/code&gt; and another macro that can basically act is a drop-in replacement for both of those and more. They are &lt;code&gt;general-emacs-define-key&lt;/code&gt;, &lt;code&gt;general-evil-define-key&lt;/code&gt;, and &lt;code&gt;general-def&lt;/code&gt; respectively. These are simply wrappers for &lt;code&gt;general-define-key&lt;/code&gt; that pass the positional arguments to the corresponding keywords. However, for compatibility with &lt;code&gt;define-key&lt;/code&gt; and &lt;code&gt;evil-define-key&lt;/code&gt;, it is not necessary to quote keymaps. Both keymaps and states can be left quoted or unquoted (regardless of whether they are lists).&lt;/p&gt;
&lt;p&gt;For example, the following are all equivalent:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(general-define-key
 &lt;span class="pl-c1"&gt;:keymaps&lt;/span&gt; &lt;span class="pl-c1"&gt;'org-mode-map&lt;/span&gt;
 &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;M-n&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'org-next-visible-heading&lt;/span&gt;
 &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;M-p&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'org-previous-visible-heading&lt;/span&gt;)

(general-emacs-define-key org-mode-map
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;M-n&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'org-next-visible-heading&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;M-p&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'org-previous-visible-heading&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; rough equivalent with define-key&lt;/span&gt;
(&lt;span class="pl-c1"&gt;with-eval-after-load&lt;/span&gt; &lt;span class="pl-c1"&gt;'org-mode&lt;/span&gt;
  (&lt;span class="pl-c1"&gt;define-key&lt;/span&gt; org-mode-map (&lt;span class="pl-c1"&gt;kbd&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;M-n&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;'org-next-visible-heading&lt;/span&gt;)
  (&lt;span class="pl-c1"&gt;define-key&lt;/span&gt; org-mode-map (&lt;span class="pl-c1"&gt;kbd&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;M-p&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;'org-previous-visible-heading&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Similarly, the following are all equivalent:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(general-define-key
 &lt;span class="pl-c1"&gt;:states&lt;/span&gt; '(normal visual)
 &lt;span class="pl-c1"&gt;:keymaps&lt;/span&gt; &lt;span class="pl-c1"&gt;'org-mode-map&lt;/span&gt;
 &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;gj&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'org-next-visible-heading&lt;/span&gt;
 &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;gk&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'org-previous-visible-heading&lt;/span&gt;)

(general-evil-define-key '(normal visual) org-mode-map
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;gj&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'org-next-visible-heading&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;gk&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'org-previous-visible-heading&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; equivalent with evil-define-key&lt;/span&gt;
(evil-define-key '(normal visual) org-mode-map
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;gj&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'org-next-visible-heading&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;gk&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'org-previous-visible-heading&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The actual behavior of these two macros is the same as &lt;code&gt;general-define-key&lt;/code&gt;. You can still use &lt;code&gt;general-define-key&lt;/code&gt;’s keyword arguments after the positional arguments (however, &lt;code&gt;:keymaps&lt;/code&gt; and &lt;code&gt;:states&lt;/code&gt; will not override the positional arguments):&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; these are both valid&lt;/span&gt;
(general-emacs-define-key &lt;span class="pl-c1"&gt;'global&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:prefix&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-c&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'swiper&lt;/span&gt;)

(general-evil-define-key &lt;span class="pl-c1"&gt;'normal&lt;/span&gt; org-mode-map
  &lt;span class="pl-c1"&gt;:prefix&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SPC&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;g&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'worf-goto&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As for &lt;code&gt;global-set-key&lt;/code&gt; and &lt;code&gt;evil-global-set-key&lt;/code&gt;, wrappers are not needed. By default &lt;code&gt;general-define-key&lt;/code&gt; acts like &lt;code&gt;global-set-key&lt;/code&gt;, and &lt;code&gt;general-emacs-define-key&lt;/code&gt; can also act like &lt;code&gt;global-evil-set-key&lt;/code&gt; using the symbols for evil’s states (see &lt;a href="#keymapstate-aliases"&gt;keymap aliases&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;The third macro, &lt;code&gt;general-def&lt;/code&gt;, is provided for those who would prefer to use a single, succinctly named definer for all of the previous cases. It will act the same as &lt;code&gt;general-define-key&lt;/code&gt;, &lt;code&gt;general-emacs-define-key&lt;/code&gt;, or &lt;code&gt;general-evil-define-key&lt;/code&gt; depending on the number of positional arguments.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; use &lt;span class="pl-smi"&gt;`general-define-key'&lt;/span&gt; when no "positional" arguments&lt;/span&gt;
(general-def
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;key&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'def&lt;/span&gt;
  ...)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; example equivalents&lt;/span&gt;
(general-define-key &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;key&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'def&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;global-set-key&lt;/span&gt; (&lt;span class="pl-c1"&gt;kbd&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;key&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;'def&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; use &lt;span class="pl-smi"&gt;`general-emacs-define-key'&lt;/span&gt; when one "positional" argument&lt;/span&gt;
(general-def org-mode-map
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;key&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'def&lt;/span&gt;
  ...)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; example equivalent&lt;/span&gt;
(&lt;span class="pl-c1"&gt;define-key&lt;/span&gt; org-mode-map (&lt;span class="pl-c1"&gt;kbd&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;key&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;'def&lt;/span&gt;)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; act like &lt;span class="pl-smi"&gt;`evil-global-set-key'&lt;/span&gt;&lt;/span&gt;
(general-def &lt;span class="pl-c1"&gt;'normal&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;key&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'def&lt;/span&gt;
  ...)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; example equivalents&lt;/span&gt;
(evil-global-set-key &lt;span class="pl-c1"&gt;'normal&lt;/span&gt; (&lt;span class="pl-c1"&gt;kbd&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;key&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;'def&lt;/span&gt;)
(evil-define-key &lt;span class="pl-c1"&gt;'normal&lt;/span&gt; &lt;span class="pl-c1"&gt;'global&lt;/span&gt; (&lt;span class="pl-c1"&gt;kbd&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;key&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;'def&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; use &lt;span class="pl-smi"&gt;`general-evil-define-key'&lt;/span&gt; when two "positional" arguments&lt;/span&gt;
(general-def &lt;span class="pl-c1"&gt;'normal&lt;/span&gt; org-mode-map
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;key&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'def&lt;/span&gt;
  ...)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; example equivalent&lt;/span&gt;
(evil-define-key &lt;span class="pl-c1"&gt;'normal&lt;/span&gt; org-mode-map (&lt;span class="pl-c1"&gt;kbd&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;key&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;'def&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that all leading quoted and unquoted symbols and lists are considered to be positional arguments. This means that if you want to use a variable or function for a key that could be a positional argument, you should either use the definer &lt;code&gt;general-def&lt;/code&gt; would end up using (&lt;code&gt;general-define-key&lt;/code&gt;, &lt;code&gt;general-emacs-define-key&lt;/code&gt;, or &lt;code&gt;evil-define-key&lt;/code&gt;)  or explicitly separate the positional arguments from the first key with a bogus keyword argument:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(general-def
  &lt;span class="pl-c1"&gt;:start-maps&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;
  some-key &lt;span class="pl-c1"&gt;'some-command&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-mass-key-unbinding-wrapper" class="anchor" aria-hidden="true" href="#mass-key-unbinding-wrapper"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Mass Key Unbinding Wrapper&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;general-unbind&lt;/code&gt; acts as &lt;code&gt;general-def&lt;/code&gt;, but the positional arguments should all be keys (instead of pairs of keys and definitions) that should be unbound:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(general-unbind &lt;span class="pl-c1"&gt;'insert&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-v&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-k&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-y&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-e&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; equivalent to&lt;/span&gt;
(general-def &lt;span class="pl-c1"&gt;'insert&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-v&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-k&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-y&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-e&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This wrapper can also be used, for example, if you want to disable certain commands or keys from working in certain modes by using with &lt;code&gt;:with&lt;/code&gt; keyword argument (example use case taken from &lt;a href="https://github.com/emacs-evil/evil-collection/blob/9fc1a19807dfcd0cc2b221832b6e6faad80a291d/evil-collection-util.el#L32"&gt;evil-collection&lt;/a&gt;):&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(general-unbind &lt;span class="pl-c1"&gt;'normal&lt;/span&gt; Info-mode-map
  &lt;span class="pl-c1"&gt;:with&lt;/span&gt; &lt;span class="pl-c1"&gt;'ignore&lt;/span&gt;
  [remap evil-append]
  [remap evil-append-line]
  [remap evil-insert]
  [remap evil-insert-line])
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; equivalent to&lt;/span&gt;
(general-def &lt;span class="pl-c1"&gt;'normal&lt;/span&gt; Info-mode-map
  [remap evil-append] &lt;span class="pl-c1"&gt;'ignore&lt;/span&gt;
  [remap evil-append-line] &lt;span class="pl-c1"&gt;'ignore&lt;/span&gt;
  [remap evil-insert] &lt;span class="pl-c1"&gt;'ignore&lt;/span&gt;
  [remap evil-insert-line] &lt;span class="pl-c1"&gt;'ignore&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The reason that this functionality is implemented as a wrapper and not as a keyword argument for &lt;code&gt;general-define-key&lt;/code&gt; is that &lt;code&gt;cl-defun&lt;/code&gt; cannot correctly parse keyword arguments when the keyword is in an odd position (e.g. &lt;code&gt;("a" :keyword 'arg)&lt;/code&gt; instead of &lt;code&gt;(:keyword 'arg "a")&lt;/code&gt;). For example, if this functionality was implemented with an &lt;code&gt;:unbind&lt;/code&gt; keyword, the &lt;code&gt;:general&lt;/code&gt; use-package keyword and any definer created with &lt;code&gt;general-create-definer&lt;/code&gt; would not work if the user specified an odd number of keys to unbind (because the default keyword arguments would be at the end of the arglist, in the wrong positions). As I’d rather not re-implement keyword argument parsing just for this use case, this functionality is provided as a macro. This macro will correctly handle any positioning for keyword arguments.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-creating-new-key-definers" class="anchor" aria-hidden="true" href="#creating-new-key-definers"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Creating New Key Definers&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;general-create-definer&lt;/code&gt; macro can create definers that wrap &lt;code&gt;general-def&lt;/code&gt; but with certain default settings. For example, it can be used to create a definer that will default to a certain prefix (like &lt;code&gt;evil-leader&lt;/code&gt; does):&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; basic example&lt;/span&gt;
(general-create-definer my-leader-def
  &lt;span class="pl-c1"&gt;:prefix&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-c&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; bind "C-c o" to &lt;span class="pl-smi"&gt;`other-window'&lt;/span&gt;&lt;/span&gt;
(my-leader-def &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;o&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'other-window&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; more complex example&lt;/span&gt;
(general-create-definer tyrant-def
  &lt;span class="pl-c1"&gt;:states&lt;/span&gt; '(normal insert emacs)
  &lt;span class="pl-c1"&gt;:prefix&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SPC&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:non-normal-prefix&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;M-SPC&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:prefix-command&lt;/span&gt; &lt;span class="pl-c1"&gt;'tyrant-prefix-command&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:prefix-map&lt;/span&gt; &lt;span class="pl-c1"&gt;'tyrant-prefix-map&lt;/span&gt;)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; globally bind "SPC /" in normal state and "M-SPC /" in the insert/emacs&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; states to &lt;span class="pl-smi"&gt;`swiper'&lt;/span&gt;&lt;/span&gt;
(tyrant-def &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'swiper&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; for org-mode, bind "SPC o" in normal state and "M-SPC /" in the insert/emacs&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; states to &lt;span class="pl-smi"&gt;`counsel-org-goto'&lt;/span&gt;&lt;/span&gt;
(tyrant-def org-mode-map &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;o&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'counsel-org-goto&lt;/span&gt;)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; same as&lt;/span&gt;
(tyrant-def &lt;span class="pl-c1"&gt;:keymaps&lt;/span&gt; &lt;span class="pl-c1"&gt;'org-mode-map&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;o&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'counsel-org-goto&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It takes an optional &lt;code&gt;:wrapping&lt;/code&gt; keyword argument that can be specified to use another definer instead of &lt;code&gt;general-def&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(general-create-definer my-prefix-def
  &lt;span class="pl-c1"&gt;:wrapping&lt;/span&gt; general-emacs-define-key
  &lt;span class="pl-c1"&gt;:prefix&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;M-,&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-vim-like-definers" class="anchor" aria-hidden="true" href="#vim-like-definers"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Vim-like Definers&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;general-evil-setup&lt;/code&gt; can be used to generate key definition functions that are named similarly to vim’s. Currently, the following functions will be created:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;general-imap&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;general-emap&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;general-nmap&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;general-vmap&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;general-omap&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;general-mmap&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;general-rmap&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;general-iemap&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;general-nvmap&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;general-otomap&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;general-itomap&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;general-tomap&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These are wrappers around &lt;code&gt;general-def&lt;/code&gt; created with &lt;code&gt;general-create-definer&lt;/code&gt; that set the default &lt;code&gt;:states&lt;/code&gt;. You can see the help text for each for a more specific description. &lt;code&gt;general-evil-setup&lt;/code&gt; can be called with a non-nil argument (i.e. &lt;code&gt;(general-evil-setup t)&lt;/code&gt;) to create non-prefixed aliases for these definers (e.g. &lt;code&gt;nmap&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Here is an example using &lt;code&gt;general-nmap&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(general-evil-setup)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; define in evil-normal-state-map&lt;/span&gt;
(general-nmap &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;key&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'def&lt;/span&gt; ...)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; define in the normal state auxiliary map for org-mode-map&lt;/span&gt;
(general-nmap org-mode-map &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;key&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'def&lt;/span&gt; ...)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; same as&lt;/span&gt;
(general-nmap &lt;span class="pl-c1"&gt;:keymaps&lt;/span&gt; &lt;span class="pl-c1"&gt;'org-mode-map&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;key&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'def&lt;/span&gt; ...)&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-note-for-evil-users" class="anchor" aria-hidden="true" href="#note-for-evil-users"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Note for Evil Users&lt;/h2&gt;
&lt;p&gt;When &lt;code&gt;:states&lt;/code&gt; is specified, &lt;code&gt;general-define-key&lt;/code&gt; will act as a wrapper around &lt;code&gt;evil-define-key*&lt;/code&gt;. &lt;code&gt;evil-define-key*&lt;/code&gt; now directly supports the symbol &lt;code&gt;global&lt;/code&gt; for the keymap argument, so the following are equivalent:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(general-define-key
 &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; (default)&lt;/span&gt;
 &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; :keymaps 'global&lt;/span&gt;
 &lt;span class="pl-c1"&gt;:states&lt;/span&gt; '(normal visual)
 ...)
(general-define-key
 &lt;span class="pl-c1"&gt;:keymaps&lt;/span&gt; '(normal visual)
 ...)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that this previously was not the case and &lt;code&gt;(general-define-key :states 'normal ...)&lt;/code&gt; would bind in the normal state auxiliary map for &lt;code&gt;(current-global-map)&lt;/code&gt;. Since auxiliary maps have a higher precedence than evil global and override keymaps, this was previously mentioned as one possible way of preventing certain keybindings from being overridden. However, this is not a reliable method. Keys bound in auxiliary maps can override keys bound in other auxiliary maps, for example, and keys bound in evil local or minor-mode keymaps will always override keys bound in regular auxiliary maps. If you need this functionality, please use evil intercept keymaps instead (see &lt;a href="#override-keymaps-and-buffer-local-keybindings"&gt;Override Keymaps&lt;/a&gt;).&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-override-keymaps-and-buffer-local-keybindings" class="anchor" aria-hidden="true" href="#override-keymaps-and-buffer-local-keybindings"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Override Keymaps and Buffer Local Keybindings&lt;/h1&gt;
&lt;p&gt;General.el provides the equivalent of &lt;code&gt;bind-key&lt;/code&gt;’s &lt;code&gt;override-global-map&lt;/code&gt; as &lt;code&gt;general-override-mode-map&lt;/code&gt; (keymap alias is =’override=). When &lt;code&gt;general-override-mode&lt;/code&gt; is enabled, keys bound in &lt;code&gt;general-override-mode-map&lt;/code&gt; will take precedence over keys bound in any other minor mode keymaps. By default, general.el will automatically enable &lt;code&gt;general-override-mode&lt;/code&gt; when binding a key in &lt;code&gt;general-override-mode-map&lt;/code&gt;. If you would prefer to enable it manually (e.g. you wish to toggle it at some point), you can set &lt;code&gt;general-override-auto-enable&lt;/code&gt; to nil.&lt;/p&gt;
&lt;p&gt;General also provides a local equivalent called &lt;code&gt;general-override-local-mode&lt;/code&gt; which is used to add support for buffer-local keybindings (with higher precedence than mode keybindings) by specifying &lt;code&gt;:keymaps 'local&lt;/code&gt;. Unlike with the global override mode, &lt;code&gt;:keymaps 'local&lt;/code&gt; should always be used instead of the actual keymap name since &lt;code&gt;:keymaps 'local&lt;/code&gt; will cause general.el to automatically turn on the corresponding minor mode and perform some necessary extra setup. Note that this is not the same as using &lt;code&gt;local-set-key&lt;/code&gt; (which will bind the key for the current buffer’s major mode, affecting other buffers). When &lt;code&gt;:states&lt;/code&gt; is specified with &lt;code&gt;:keymaps 'local&lt;/code&gt;, &lt;code&gt;evil-local-set-key&lt;/code&gt; will be used instead.&lt;/p&gt;
&lt;p&gt;Note that binding directly in &lt;code&gt;general-override-mode-map&lt;/code&gt; (i.e. no &lt;code&gt;:states&lt;/code&gt; specified) is only useful for non-evil keybindings. Evil keybindings already override almost all normal emacs keybindings using the same method used here (i.e. evil keymaps are in &lt;code&gt;emulation-mode-map-alists&lt;/code&gt;). The main exceptions where evil keybindings will be overridden by non-evil keybindings are noted &lt;a href="https://github.com/noctuid/evil-guide#what-overrides-evil"&gt;here&lt;/a&gt; with explanations on how to deal with these cases. To understand which evil keybindings override others, review the &lt;a href="https://github.com/noctuid/evil-guide#keymap-precedence"&gt;precedence for evil keymaps&lt;/a&gt;. If you want a global evil keybinding to not be overridden by any other evil keymaps (e.g. overriding keymaps created in &lt;code&gt;evil-integration.el&lt;/code&gt; or auxiliary keymaps created by some evil package), you can use intercept keymaps. You can make any keymap an intercept keymap, but it may be convenient to just use &lt;code&gt;general-override-mode-map&lt;/code&gt; for this purpose since the necessary setup (&lt;code&gt;evil-make-intercept-map&lt;/code&gt;) has already been performed:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; keybindings that should not be overriden&lt;/span&gt;
(general-define-key
 &lt;span class="pl-c1"&gt;:states&lt;/span&gt; &lt;span class="pl-c1"&gt;'normal&lt;/span&gt;
 &lt;span class="pl-c1"&gt;:keymaps&lt;/span&gt; &lt;span class="pl-c1"&gt;'override&lt;/span&gt;
 &lt;span class="pl-c1"&gt;:prefix&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SPC&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
 &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;f&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'find-file&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; the above has precedence over the following (excerpt from evil-collection)&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; "SPC f" will still work as &lt;span class="pl-smi"&gt;`find-file'&lt;/span&gt;&lt;/span&gt;
(evil-define-key &lt;span class="pl-c1"&gt;'normal&lt;/span&gt; transmission-mode-map
  (&lt;span class="pl-c1"&gt;kbd&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SPC&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;'scroll-up-command&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that by default, evil keybindings made with &lt;code&gt;:keymaps 'override&lt;/code&gt; will override even those made with &lt;code&gt;:keymaps 'local&lt;/code&gt;.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-displaying-keybindings" class="anchor" aria-hidden="true" href="#displaying-keybindings"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Displaying Keybindings&lt;/h1&gt;
&lt;p&gt;General keeps track of all your keybindings and allows presenting them as tables in an org buffer using &lt;code&gt;general-describe-keybindings&lt;/code&gt;. By default, they will be displayed in this order:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Buffer local keybindings (i.e. &lt;code&gt;:keymaps 'local&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Global keybindings (i.e. &lt;code&gt;:keymaps 'global&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Global evil keybindings (e.g. &lt;code&gt;:keymaps 'evil-normal-state-map&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Other keybindings&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Within these categories keymaps, states, and keybindings will be presented in the order they were created in. For each keybinding created, this command will display the key, the definition, and the previous definition. The previous definition will only be updated when the definition changes by default. To have it only be updated when the key was previously unbound, the user can set &lt;code&gt;general-describe-update-previous-definition&lt;/code&gt; to &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The order in which keybindings are displayed is customizable. All keymaps listed in &lt;code&gt;general-describe-priority-keymaps&lt;/code&gt; will be displayed first. The rest can optionally be sorted by setting &lt;code&gt;general-describe-keymap-sort-function&lt;/code&gt; (nil by default). The order evil states are displayed in can be altered either by changing &lt;code&gt;general-describe-state-sort-function&lt;/code&gt; or changing the order of states in &lt;code&gt;general-describe-evil-states&lt;/code&gt;. Keybindings can also be sorted if the user sets &lt;code&gt;general-describe-keybinding-sort-function&lt;/code&gt;. Here is an example that will sort everything alphabetically:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;setq&lt;/span&gt; general-describe-priority-keymaps &lt;span class="pl-c1"&gt;nil&lt;/span&gt;
      general-describe-keymap-sort-function &lt;span class="pl-c1"&gt;#&lt;span class="pl-c1"&gt;'general-sort-by-car&lt;/span&gt;&lt;/span&gt;
      general-describe-state-sort-function &lt;span class="pl-c1"&gt;#&lt;span class="pl-c1"&gt;'general-sort-by-car&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; sort keybindings alphabetically by key&lt;/span&gt;
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; general-describe-keybinding-sort-function &lt;span class="pl-c1"&gt;#&lt;span class="pl-c1"&gt;'general-sort-by-car&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; sort keybindings alphabetically by definition&lt;/span&gt;
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; general-describe-keybinding-sort-function &lt;span class="pl-c1"&gt;#&lt;span class="pl-c1"&gt;'general-sort-by-cadr&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For reference, keybindings are stored in an alist. Here is what is passed to each sorting function:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; &lt;span class="pl-smi"&gt;`general-keybindings'&lt;/span&gt; - an alist of keymap to state alist&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; passed to &lt;span class="pl-smi"&gt;`general-describe-keymap-sort-function'&lt;/span&gt;&lt;/span&gt;
((keymap-name &lt;span class="pl-k"&gt;.&lt;/span&gt; state-alist) ...)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; a state alist (state name is nil if there is no state)&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; passed to &lt;span class="pl-smi"&gt;`general-describe-state-sort-function'&lt;/span&gt;&lt;/span&gt;
((state-name &lt;span class="pl-k"&gt;.&lt;/span&gt; keybindings) ...)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; the list of keybindings is passed to &lt;span class="pl-smi"&gt;`general-describe-keybinding-sort-function'&lt;/span&gt;&lt;/span&gt;
((&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;key after kbd applied&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'def&lt;/span&gt; &lt;span class="pl-c1"&gt;'previous-def&lt;/span&gt;) ...)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To actually change how the keybinding table is printed, the user could override  &lt;code&gt;general--print-map&lt;/code&gt;.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-functionsmacros-to-aid-key-definition" class="anchor" aria-hidden="true" href="#functionsmacros-to-aid-key-definition"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Functions/Macros to Aid Key Definition&lt;/h1&gt;
&lt;h2&gt;&lt;a id="user-content-disclaimer" class="anchor" aria-hidden="true" href="#disclaimer"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Disclaimer&lt;/h2&gt;
&lt;p&gt;Key simulation (for &lt;code&gt;general-simulate-key&lt;/code&gt; and &lt;code&gt;general-key-dispatch&lt;/code&gt; but not for &lt;code&gt;general-key&lt;/code&gt;) can result in duplicate keys being recorded for keyboard macros and evil repeating. To work around this issue, &lt;code&gt;general.el&lt;/code&gt; will discard these duplicate keys during macro playback (i.e. &lt;code&gt;executing-kbd-macro&lt;/code&gt; is non-nil). So far, this seems to be a reliable method for getting macros and repeating to work correctly with key simulation. However, it is hard (and maybe impossible) to test some of these cases automatically since it involves simulating keys that in turn simulate keys, and, for example, I haven’t found a way to correctly simulate recording a macro in these cases. Therefore, if you find any issues with macro playback or evil repeating when using &lt;code&gt;general-simulate-key&lt;/code&gt; or &lt;code&gt;general-key-dispatch&lt;/code&gt;, please make an issue.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-simulating-keypresses" class="anchor" aria-hidden="true" href="#simulating-keypresses"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Simulating Keypresses&lt;/h2&gt;
&lt;p&gt;General provides two macros called &lt;code&gt;general-key&lt;/code&gt; and &lt;code&gt;general-simulate-key&lt;/code&gt; that can be used to simulate key sequences. In some cases, they can be used similarly to keyboard macros, but they have some advantages. Unlike with a keyboard macro, prefix arguments will work for the command that ends up running. Also, the key simulated does not have to correspond to the full key sequence for a command. See &lt;a href="https://www.emacswiki.org/emacs/Evil#toc14" rel="nofollow"&gt;here&lt;/a&gt; for information on an alternative method of doing some of the things these key simulation helpers can do using &lt;code&gt;key-translation-map&lt;/code&gt;. I personally prefer general’s helpers as they are simple and more powerful.&lt;/p&gt;
&lt;p&gt;Note that when a named prefix keymap/command exists (e.g. &lt;code&gt;help-command&lt;/code&gt;), you should generally prefer to bind directly to that. However, this is not possible for a key like &lt;code&gt;C-c&lt;/code&gt; whose definition varies depending on the buffer. Therefore, you need to use either &lt;code&gt;general-key&lt;/code&gt; or &lt;code&gt;general-simulate-key&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(general-nmap &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SPC&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; (general-simulate-key &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-c&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; or&lt;/span&gt;
(general-nmap &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SPC&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; (general-key &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-c&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Although both will work correctly, &lt;a href="https://github.com/justbur/emacs-which-key"&gt;which-key&lt;/a&gt; does not currently show all available keys when &lt;code&gt;general-key&lt;/code&gt; is used, so I would currently recommend using &lt;code&gt;general-simulate-key&lt;/code&gt; instead for an example like this.&lt;/p&gt;
&lt;p&gt;On the other hand, &lt;code&gt;general-key&lt;/code&gt; should be preferred for simulating a key that corresponds to a single command. Unlike &lt;code&gt;general-simulate-key&lt;/code&gt;, which creates/returns a function, &lt;code&gt;general-key&lt;/code&gt; expands to an extended menu item like &lt;code&gt;general-predicate-dispatch&lt;/code&gt;. Using an extended menu item is a simpler and more direct approach as emacs will dynamically look up and act as the specified key. This has the advantage of showing the docstring for the exact command with &lt;code&gt;C-h k&lt;/code&gt;. If the key to act as is unbound, key lookup can continue (like if &lt;code&gt;:predicate&lt;/code&gt; returns nil), so having a fallback keybinding is possible with &lt;code&gt;general-key&lt;/code&gt; but not with &lt;code&gt;general-simulate-key&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Another downside of &lt;code&gt;general-simulate-key&lt;/code&gt; is that any commands/functions called just afterwards will actually be run before the keys are simulated. This won’t affect the most common use cases, but it makes setting up and tearing down a context more difficult (e.g. simulating a key in a specific evil state requires using &lt;code&gt;post-command-hook&lt;/code&gt; for &lt;code&gt;general-simulate-key&lt;/code&gt; but not for &lt;code&gt;general-key&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;&lt;code&gt;general-key&lt;/code&gt; may be useful when you want to have a key act as another without having to bind it to the exact command in every relevant keymap:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(general-nmap &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;RET&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; (general-key &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-c C-c&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; a keyboard macro works, but C-h k will not show the command docstring&lt;/span&gt;
(general-nmap &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;RET&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-c C-c&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;general-simulate-key&lt;/code&gt; and &lt;code&gt;general-key&lt;/code&gt; also support keyword arguments to control the context the keys are simulated in (both support &lt;code&gt;:state&lt;/code&gt;; &lt;code&gt;general-simulate-key&lt;/code&gt; supports &lt;code&gt;:keymap&lt;/code&gt; for now but I don’t know how useful it is; please make an issue if you think it would be useful to add &lt;code&gt;:keymap&lt;/code&gt; to &lt;code&gt;general-key&lt;/code&gt;). For example:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(general-nmap &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;j&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; (general-simulate-key &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-n&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;:state&lt;/span&gt; &lt;span class="pl-c1"&gt;'emacs&lt;/span&gt;))
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; &lt;span class="pl-smi"&gt;`general-key'&lt;/span&gt; supports :state only`&lt;/span&gt;
(general-nmap &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;j&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; (general-key &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-n&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;:state&lt;/span&gt; &lt;span class="pl-c1"&gt;'emacs&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;general-key&lt;/code&gt; also supports custom setup and teardown before key lookup. Here’s a similar example to the previous one:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(general-nmap &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;j&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; (general-key &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-n&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
                    &lt;span class="pl-c1"&gt;:setup&lt;/span&gt; (evil-local-mode &lt;span class="pl-c1"&gt;-1&lt;/span&gt;)
                    &lt;span class="pl-c1"&gt;:teardown&lt;/span&gt; (evil-local-mode)))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The advantage of &lt;code&gt;general-simulate-key&lt;/code&gt; over &lt;code&gt;general-key&lt;/code&gt; is that it can be used to simulate a key sequence corresponding to multiple commands or a command followed by a key sequence. The key argument can be replaced by a list of a command and keys (e.g. &lt;code&gt;(general-simulate-key ('evil-delete "iw"))&lt;/code&gt;). For example, the following is possible with &lt;code&gt;general-simulate-key&lt;/code&gt; but not with &lt;code&gt;general-key&lt;/code&gt; or a keyboard macro:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(general-nmap &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;s&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; (general-simulate-key (&lt;span class="pl-c1"&gt;'evil-ex&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;s/&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;See the next section for another reasonable use case for this feature.&lt;/p&gt;
&lt;p&gt;When a command is specified for &lt;code&gt;general-simulate-key&lt;/code&gt;, general will used the remapped version of it if it exists (e.g. if &lt;code&gt;[remap evil-delete] 'lispyville-delete&lt;/code&gt; is in an active keymap, &lt;code&gt;lispyville-delete&lt;/code&gt; will be used instead of &lt;code&gt;evil-delete&lt;/code&gt;). To use the exact command instead, &lt;code&gt;:remap nil&lt;/code&gt; can be specified&lt;/p&gt;
&lt;p&gt;&lt;code&gt;general-simulate-key&lt;/code&gt; creates a named function with a docstring, so which-key and &lt;code&gt;describe-key&lt;/code&gt; will work properly for keys bound to a command created with it. The automatically generated function name, docstring, and which-key description can be replaced with keyword arguments:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(general-nmap &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SPC&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; (general-simulate-key &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-c&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
                      &lt;span class="pl-c1"&gt;:state&lt;/span&gt; &lt;span class="pl-c1"&gt;'emacs&lt;/span&gt;
                      &lt;span class="pl-c1"&gt;:name&lt;/span&gt; general-SPC-simulates-C-c
                      &lt;span class="pl-c1"&gt;:docstring&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Simulate C-c in emacs state with SPC.&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
                      &lt;span class="pl-c1"&gt;:which-key&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Simulate C-c&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Make sure that you don’t bind a key to simulate itself (e.g. &lt;code&gt;(general-emap "C-n" (general-simulate-key "C-n" :state 'emacs))&lt;/code&gt;) as this will cause an infinite loop.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-mapping-under-non-prefix-keys" class="anchor" aria-hidden="true" href="#mapping-under-non-prefix-keys"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Mapping Under Non-prefix Keys&lt;/h2&gt;
&lt;p&gt;This functionality is mainly targeted at evil users, but it could potentially be useful for non-evil users as well. In vim you can bind something like &lt;code&gt;cow&lt;/code&gt; without a problem. With evil, &lt;code&gt;c&lt;/code&gt; is bound to &lt;code&gt;evil-change&lt;/code&gt;, so you can’t bind directly to &lt;code&gt;cow&lt;/code&gt;. A workaround for this case is to bind a key in &lt;code&gt;evil-operator-state-map&lt;/code&gt;, but this won’t work when operator state is not used (e.g. you want to bind something like &lt;code&gt;ctb&lt;/code&gt; or &lt;code&gt;jk&lt;/code&gt; in insert state). I’ve come up with a more general workaround called &lt;code&gt;general-key-dispatch&lt;/code&gt;. Consider the following example:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(general-nmap &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;c&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; (general-key-dispatch &lt;span class="pl-c1"&gt;'evil-change&lt;/span&gt;
                    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;ow&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'toggle-word-wrap&lt;/span&gt;
                    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;tb&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'some-command&lt;/span&gt;
                    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;c&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'evil-change-whole-line&lt;/span&gt;
                    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; alternatively if there was no linewise version:&lt;/span&gt;
                    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;c&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; (general-simulate-key (&lt;span class="pl-c1"&gt;'evil-change&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;c&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))))
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; &lt;span class="pl-smi"&gt;`evil-change'&lt;/span&gt; is not bound in &lt;span class="pl-smi"&gt;`evil-visual-state-map'&lt;/span&gt; by default but&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; inherited from &lt;span class="pl-smi"&gt;`evil-normal-state-map'&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; if you don't want "c" to be affected in visual state, you should add this&lt;/span&gt;
(general-vmap &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;c&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'evil-change&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;general-key-dispatch&lt;/code&gt; is a function-creating macro. In this example, the command created will wait for user input and try to match one of the specified key sequences (e.g. &lt;code&gt;ow&lt;/code&gt;). If a key sequence is matched, the corresponding command will be executed. Otherwise it will fall back to simulating the fallback command followed by the unmatched keys (using the same mechanism as &lt;code&gt;general-simulate-key&lt;/code&gt;). For example, &lt;code&gt;ow&lt;/code&gt; is bound, so &lt;code&gt;cow&lt;/code&gt; would run &lt;code&gt;toggle-word-wrap&lt;/code&gt;. On the other hand, &lt;code&gt;b&lt;/code&gt; is not mapped, so &lt;code&gt;cb&lt;/code&gt; would act the same as &lt;code&gt;cb&lt;/code&gt; would by default. Counts and repeating should still work for both the mapped keys and fallback command. Because evil handles &lt;code&gt;cc&lt;/code&gt; differently (since &lt;code&gt;c&lt;/code&gt; is not a motion), &lt;code&gt;c&lt;/code&gt; must be explicitly bound to &lt;code&gt;evil-change-whole-line&lt;/code&gt; (or to simulate &lt;code&gt;('evil-change "c")&lt;/code&gt;) to keep its behavior. &lt;code&gt;c&lt;/code&gt; is not actually bound in visual state by default, so to keep &lt;code&gt;c&lt;/code&gt; working the same in visual state, you should explicitly bind it to &lt;code&gt;evil-change&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Like with &lt;code&gt;general-simulate-key&lt;/code&gt;, general will first check to see if the command to be executed has been remapped (e.g. if &lt;code&gt;[remap evil-delete] 'lispyville-delete&lt;/code&gt; is in an active keymap, &lt;code&gt;lispyville-delete&lt;/code&gt; will be used instead of &lt;code&gt;evil-delete&lt;/code&gt;). To use the exact command instead, &lt;code&gt;:remap nil&lt;/code&gt; can be specified.&lt;/p&gt;
&lt;p&gt;Another thing to note is that you can’t bind a key in the &lt;code&gt;general-key-dispatch&lt;/code&gt; section to simulate the base key (i.e. the key you bind to the resulting command, in this case &lt;code&gt;c&lt;/code&gt;). For this example, you couldn’t bind &lt;code&gt;w&lt;/code&gt; to &lt;code&gt;(general-simulate-key "ciw")&lt;/code&gt;. While this wouldn’t cause an infinite loop, it wouldn’t work either, so you would have to use the command name instead (e.g &lt;code&gt;(general-simulate-key ('evil-change "iw"))&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Also, if you use a count in the middle (e.g. &lt;code&gt;c2tb&lt;/code&gt; and &lt;code&gt;2&lt;/code&gt; is not explicitly bound), the fallback command will be run immediately. If anyone cares about this, feel free to make an issue. I could potentially add an option to allow changing the count in the middle without immediately falling back to the default command.&lt;/p&gt;
&lt;p&gt;Another possible use case of &lt;code&gt;general-key-dispatch&lt;/code&gt; is to emulate vim’s &lt;code&gt;imap&lt;/code&gt;. For example, you can recreate the common &lt;code&gt;jk&lt;/code&gt; to &lt;code&gt;&amp;lt;esc&amp;gt;&lt;/code&gt; keybinding:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(general-imap &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;j&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
              (general-key-dispatch &lt;span class="pl-c1"&gt;'self-insert-command&lt;/span&gt;
                &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;k&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'evil-normal-state&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Commands created in this way support an optional timeout, meaning you could still insert &lt;code&gt;jk&lt;/code&gt; (without &lt;code&gt;C-q&lt;/code&gt; / &lt;code&gt;quoted-insert&lt;/code&gt;) like with &lt;a href="https://www.emacswiki.org/emacs/key-chord.el" rel="nofollow"&gt;key-chord.el&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(general-imap &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;j&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
              (general-key-dispatch &lt;span class="pl-c1"&gt;'self-insert-command&lt;/span&gt;
                &lt;span class="pl-c1"&gt;:timeout&lt;/span&gt; &lt;span class="pl-c1"&gt;0.25&lt;/span&gt;
                &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;k&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'evil-normal-state&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If there is input lag, a timeout will not work well (this is also true for packages like key-chord.el). One example is vterm (even though there is not normally visible input lag). In vterm, the real amount of time you would have to wait after pressing “j” before pressing “k” is longer than 0.25 seconds. It is also likely that the next character you type will be input instead (e.g. “jo” would result in “oo”). There’s not much that can be done about the first problem. You can try lowering the timeout in a problematic mode. However, if the input lag is inconsistently present (e.g. caused by some minor mode) and/or severe, this probably won’t help much. You can at least address the second problem by explicitly specifying the character you want to insert:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;defun&lt;/span&gt; &lt;span class="pl-e"&gt;my-insert-j&lt;/span&gt; ()
  (&lt;span class="pl-k"&gt;interactive&lt;/span&gt;)
  (&lt;span class="pl-c1"&gt;insert&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;j&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))

(general-imap &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;j&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; (general-key-dispatch &lt;span class="pl-c1"&gt;'my-insert-j&lt;/span&gt;
                    &lt;span class="pl-c1"&gt;:timeout&lt;/span&gt; &lt;span class="pl-c1"&gt;0.25&lt;/span&gt;
                    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;k&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'evil-normal-state&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If input lag is an issue, &lt;code&gt;:timeout&lt;/code&gt; can still be used as a visual enhancement. For example, you can bind &lt;code&gt;SPC SPC&lt;/code&gt; to end a sentence if you don’t normally need to type two spaces anywhere else. This works without &lt;code&gt;:timeout&lt;/code&gt; but is visually confusing since spaces are never be inserted until the next keypress. &lt;code&gt;:timeout&lt;/code&gt; can be used to enhance such a keybinding:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;defun&lt;/span&gt; &lt;span class="pl-e"&gt;my-insert-space&lt;/span&gt; ()
  (&lt;span class="pl-k"&gt;interactive&lt;/span&gt;)
  (&lt;span class="pl-c1"&gt;insert&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt; &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))

(&lt;span class="pl-k"&gt;defun&lt;/span&gt; &lt;span class="pl-e"&gt;my-sentence-end&lt;/span&gt; ()
  (&lt;span class="pl-k"&gt;interactive&lt;/span&gt;)
  (&lt;span class="pl-c1"&gt;insert&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;.  &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))

(general-def &lt;span class="pl-c1"&gt;'insert&lt;/span&gt; text-mode-map
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SPC&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; (general-key-dispatch &lt;span class="pl-c1"&gt;'my-insert-space&lt;/span&gt;
          &lt;span class="pl-c1"&gt;:timeout&lt;/span&gt; &lt;span class="pl-c1"&gt;0.1&lt;/span&gt;
          &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SPC&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'my-sentence-end&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you are using &lt;code&gt;general-key-dispatch&lt;/code&gt; with a timeout to mirror some prefix keymap in insert state, it may also convenient to use the &lt;code&gt;:inherit-keymap&lt;/code&gt; keyword. This allows using prefix keybindings without the need to re-specify them in the &lt;code&gt;general-key-dispatch&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(general-nmap &lt;span class="pl-c1"&gt;:prefix&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;,&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
              &lt;span class="pl-c1"&gt;:prefix-command&lt;/span&gt; &lt;span class="pl-c1"&gt;'my-prefix-map&lt;/span&gt;
              &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;g&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'magit-status&lt;/span&gt;)

(general-imap &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;,&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
              (general-key-dispatch &lt;span class="pl-c1"&gt;'self-insert-command&lt;/span&gt;
                &lt;span class="pl-c1"&gt;:timeout&lt;/span&gt; &lt;span class="pl-c1"&gt;0.25&lt;/span&gt;
                &lt;span class="pl-c1"&gt;:inherit-keymap&lt;/span&gt; my-prefix-map))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you bind more keys under your prefix later on in normal state, they will still be available when pressing the prefix in insert state without the need to re-evaluate the &lt;code&gt;general-key-dispatch&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;By default, &lt;code&gt;general-key-dispatch&lt;/code&gt; will prevent name clashes by appending a unique number to name of the created command (e.g. &lt;code&gt;general-dispatch-self-insert-command-G402&lt;/code&gt;). If you would like to reference the created command by name, you can name it yourself using the &lt;code&gt;:name&lt;/code&gt; keyword argument (e.g. &lt;code&gt;:name general-insert-prefix-dispatch&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Like with &lt;code&gt;general-simulate-key&lt;/code&gt; used with a command name, the behavior of &lt;code&gt;evil-repeat&lt;/code&gt; will depend on the command that ends up running. Having repeating work correctly requires handling a lot of edge cases, so please make an issue if you find any problems. Note that evil does not support repeating a count that comes before an operator currently, but repeating should work when the count follows the operator key (&lt;code&gt;3cc&lt;/code&gt; vs &lt;code&gt;c3c&lt;/code&gt;).&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-choosing-definitions-based-on-predicates" class="anchor" aria-hidden="true" href="#choosing-definitions-based-on-predicates"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Choosing Definitions Based on Predicates&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;general-predicate-dispatch&lt;/code&gt; can be used to generate a &lt;code&gt;menu-item&lt;/code&gt; that will behave differently based on the provided predicates. It takes a fallback definition as the first argument and then a list of predicates and alternate definitions (which can be commands, keymaps, etc.). Predicates are checked in order. If no predicate is matched and the fallback command is nil, then the mapping will be ignored (the keymap with the next highest precedence, if one exists, will be checked for the pressed key(s)).&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(general-define-key &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&amp;lt;right&amp;gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
                    (general-predicate-dispatch &lt;span class="pl-c1"&gt;'right-char&lt;/span&gt;
                      &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; pred def ...&lt;/span&gt;
                      (&lt;span class="pl-c1"&gt;eolp&lt;/span&gt;) &lt;span class="pl-c1"&gt;'beginning-of-line&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;:docstring&lt;/code&gt; keyword can be specified to add a description to the extended menu item.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-key-translation" class="anchor" aria-hidden="true" href="#key-translation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Key “Translation”&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;general-translate-key&lt;/code&gt; allows binding a key to the definition of another key in the same keymap (comparable to how vim’s keybindings work). Its arguments are the &lt;code&gt;states&lt;/code&gt; (which can be nil for non-evil keymaps) and &lt;code&gt;keymaps&lt;/code&gt; (both symbols or lists of symbols like for &lt;code&gt;general-define-key&lt;/code&gt;) to bind/look up the key(s) in followed optionally by keyword arguments (currently only &lt;code&gt;:destructive&lt;/code&gt;) and key/replacement pairs.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;evil-collection-translate-key&lt;/code&gt; allows binding a key to the definition of another key in the same keymap (comparable to how vim’s keybindings work). Its arguments are the &lt;code&gt;states&lt;/code&gt; and &lt;code&gt;keymaps&lt;/code&gt; to bind/look up the key(s) in followed optionally by keyword arguments (currently only &lt;code&gt;:destructive&lt;/code&gt;) and key/replacement pairs. &lt;code&gt;states&lt;/code&gt; can be nil for non-evil keymaps, and both &lt;code&gt;states&lt;/code&gt; and &lt;code&gt;keymaps&lt;/code&gt; can be a single symbol or a list of symbols.&lt;/p&gt;
&lt;p&gt;This can be particularly useful, for example, when you want make key swaps/cycles en masse. This use case is similar to one for &lt;code&gt;general-simulate-key&lt;/code&gt; (i.e. make a key act as another key that has a consistent meaning but different commands for different modes without having to individually bind the key to the exact definition in each mode’s keymap). However, &lt;code&gt;general-simulate-key&lt;/code&gt; is not always suitable for this purpose. It can be used to, for example, make &lt;code&gt;j&lt;/code&gt; in normal state act as &lt;code&gt;C-n&lt;/code&gt; in emacs state (to use the default “down” navigation key for all modes without needing to individually make keybindings for every mode), but it cannot be used to swap/cycle keys within a single keymap, as this would cause an infinite loop of simulating the other key(s).&lt;/p&gt;
&lt;p&gt;An example use case of &lt;code&gt;general-translate-key&lt;/code&gt; is for non-QWERTY users who want to retain the hjkl keyboard positions for movement in dired, mu4e, etc. When using a package that already creates hjkl keybindings for the desired mode(s) (e.g. &lt;a href="https://github.com/jojojames/evil-collection"&gt;evil-collection&lt;/a&gt;), it is easily possible to make these cycles in a single statement:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; single invocation example&lt;/span&gt;
(general-translate-key &lt;span class="pl-c1"&gt;nil&lt;/span&gt; &lt;span class="pl-c1"&gt;'evil-normal-state-keymap&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;n&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;j&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;e&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;k&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  ...)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; cycling keys en masse&lt;/span&gt;
(&lt;span class="pl-k"&gt;dolist&lt;/span&gt; (keymap keymaps-with-hjkl-keybindings)
  (general-translate-key &lt;span class="pl-c1"&gt;'normal&lt;/span&gt; keymap
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; colemak hnei is qwerty hjkl&lt;/span&gt;
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;n&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;j&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;e&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;k&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;i&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;l&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; add back nei&lt;/span&gt;
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;j&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;e&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;k&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;n&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;l&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;i&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;By default, the first invocation of &lt;code&gt;general-translate-key&lt;/code&gt; will make a backup of the keymap. Each subsequent invocation will look up keys in the backup instead of the original. This means that a call to &lt;code&gt;general-translate-key&lt;/code&gt; will always have the same behavior even if evaluated multiple times. When &lt;code&gt;:destructive t&lt;/code&gt; is specified, keys are looked up in the keymap as it is currently. This means that a call to &lt;code&gt;general-translate-key&lt;/code&gt; that swapped two keys would continue to swap/unswap them with each call. Therefore when &lt;code&gt;:destructive t&lt;/code&gt; is used, all cycles/swaps must be done within a single call to &lt;code&gt;general-translate-key&lt;/code&gt;. To make a comparison to vim keybindings, &lt;code&gt;:destructive t&lt;/code&gt; is comparable to vim’s &lt;code&gt;map&lt;/code&gt;, and &lt;code&gt;:destructive nil&lt;/code&gt; is comparable to vim’s &lt;code&gt;noremap&lt;/code&gt; (where the “original” keybindings are those that existed in the keymap when &lt;code&gt;general-translate-key&lt;/code&gt; was first used).&lt;/p&gt;
&lt;p&gt;You’ll almost always want to use the default behavior (especially in your init file). The limitation of &lt;code&gt;:destructive nil&lt;/code&gt; is that you can’t translate a key to another key that was defined after the first &lt;code&gt;evil-collection-translate-key&lt;/code&gt;, so &lt;code&gt;:destructive t&lt;/code&gt; may be useful for interactive experimentation.&lt;/p&gt;
&lt;p&gt;Note that general state and keymap aliases (as well as &lt;code&gt;local&lt;/code&gt; and &lt;code&gt;global&lt;/code&gt;) and &lt;code&gt;general-implicit-kbd&lt;/code&gt; are supported by &lt;code&gt;general-translate-key&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; normal -&amp;gt; evil-normal-state-keymap&lt;/span&gt;
(general-translate-key &lt;span class="pl-c1"&gt;nil&lt;/span&gt; &lt;span class="pl-c1"&gt;'normal&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; kbd not necessary by default&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-p&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-n&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Keys are bound using &lt;code&gt;general-define-key&lt;/code&gt;, so they are viewable with &lt;code&gt;general-describe-keybindings&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;general-swap-key&lt;/code&gt; is provided as a wrapper around &lt;code&gt;general-translate-key&lt;/code&gt; that allows swapping keys:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(general-swap-key &lt;span class="pl-c1"&gt;nil&lt;/span&gt; &lt;span class="pl-c1"&gt;'normal&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;:&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;a&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;A&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; equivalent to&lt;/span&gt;
(general-translate-key &lt;span class="pl-c1"&gt;nil&lt;/span&gt; &lt;span class="pl-c1"&gt;'normal&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;:&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;:&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;a&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;A&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;A&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;a&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-automatic-key-unbinding" class="anchor" aria-hidden="true" href="#automatic-key-unbinding"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Automatic Key Unbinding&lt;/h2&gt;
&lt;p&gt;To automatically prevent &lt;code&gt;Key sequence starts with a non-prefix key&lt;/code&gt; errors without the need to explicitly unbind non-prefix keys, you can add &lt;code&gt;(general-auto-unbind-keys)&lt;/code&gt; to your configuration file. This will advise &lt;code&gt;define-key&lt;/code&gt; to unbind any bound subsequence of the &lt;code&gt;KEY&lt;/code&gt;. Currently, this will only have an effect for &lt;code&gt;general.el&lt;/code&gt; key definers. The advice can later be removed with &lt;code&gt;(general-auto-unbind-keys t)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The reason that advice is used is because &lt;code&gt;general-define-key&lt;/code&gt; does not always define keys in the same manner. Because customer definers are supported with &lt;code&gt;:definer&lt;/code&gt;, &lt;code&gt;general-define-key&lt;/code&gt; does not have the necessary information to handle every case itself.&lt;/p&gt;
&lt;p&gt;As a final note, if you, for example, bind &lt;code&gt;s&lt;/code&gt; to a command using &lt;code&gt;general-define-key&lt;/code&gt; and then later bind &lt;code&gt;s &amp;lt;key&amp;gt;&lt;/code&gt; to something, &lt;code&gt;s&lt;/code&gt; will still show up in &lt;code&gt;general-describe-keybindings&lt;/code&gt; even though it’s no longer bound. Since this is preventable by simply removing the initial unused keybinding, I likely will not try to add a workaround to fix this.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-non-keybinding-related-configuration-helpers" class="anchor" aria-hidden="true" href="#non-keybinding-related-configuration-helpers"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Non-keybinding-related Configuration Helpers&lt;/h1&gt;
&lt;p&gt;General.el also provides a few helper functions/macros for other configuration purposes. They are intended to be slightly more convenient versions of functions/macros provided by default.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-settings" class="anchor" aria-hidden="true" href="#settings"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Settings&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;general-setq&lt;/code&gt; is a stripped-down &lt;code&gt;customize-set-variable&lt;/code&gt; that can act as a drop-in replacement for &lt;code&gt;setq&lt;/code&gt;. The reason you might want to use it instead of &lt;code&gt;setq&lt;/code&gt; is that &lt;code&gt;setq&lt;/code&gt; cannot correctly set all variables. Some variables defined with &lt;code&gt;defcustom&lt;/code&gt; specify a custom setter with &lt;code&gt;:set&lt;/code&gt; that must be used for changes to take effect (e.g. &lt;code&gt;auto-revert-interval&lt;/code&gt;). If the corresponding package has already been loaded, using &lt;code&gt;setq&lt;/code&gt; will generally not work to set these variables. On the other hand, &lt;code&gt;general-setq&lt;/code&gt; will correctly use the custom setter when necessary. One benefit of &lt;code&gt;general-setq&lt;/code&gt; over &lt;code&gt;customize-set-variable&lt;/code&gt; is that it can be used to set multiple variables at once. It does not do everything &lt;code&gt;customize-set-variable&lt;/code&gt; does (e.g. it cannot be used interactively, does not attempt to load variable dependencies, and does not allow the user to specify comments). From some basic testing, it is 10x to 100x faster because of this, but the speed difference should not really be noticeable if you aren’t setting thousands of variables during emacs initialization.&lt;/p&gt;
&lt;p&gt;Here’s an example using variables that have a custom setter:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(general-setq auto-revert-interval &lt;span class="pl-c1"&gt;10&lt;/span&gt;
              evil-want-Y-yank-to-eol &lt;span class="pl-c1"&gt;t&lt;/span&gt;
              evil-search-module &lt;span class="pl-c1"&gt;'evil-search&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that &lt;code&gt;setq&lt;/code&gt; will work as expected as long it is used before the corresponding package is loaded, but with &lt;code&gt;customize-set-variable&lt;/code&gt; or &lt;code&gt;general-setq&lt;/code&gt;, you do not need to worry about whether or not the package has been loaded. If you decide to use &lt;code&gt;general-setq&lt;/code&gt;, I’d recommend aliasing it to something shorter like &lt;code&gt;gsetq&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;One major difference from &lt;code&gt;customize-set-variable&lt;/code&gt; that you should be aware of is that &lt;code&gt;general-setq&lt;/code&gt; falls back to using &lt;code&gt;set&lt;/code&gt; instead of &lt;code&gt;set-default&lt;/code&gt;. This means that, like &lt;code&gt;setq&lt;/code&gt;, it will alter the local value of buffer-local variables instead of the default value.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;general-setq-default&lt;/code&gt; and &lt;code&gt;general-setq-local&lt;/code&gt; also exist but do not attempt to call custom setters. The reason for this is that I have never seen any custom setters for variables that make sense to set both globally and locally (custom setters I’ve seen just use &lt;code&gt;set-default&lt;/code&gt;). &lt;code&gt;setq-default&lt;/code&gt; is useful when you want to globally change the default for a buffer-local variable. &lt;code&gt;setq-local&lt;/code&gt; is useful when you want to make a non-buffer-local variable buffer-local and then change its local value (&lt;code&gt;setq&lt;/code&gt; already preferentially alters the buffer-local value of a variable if there is one). For now, the general.el equivalents are just aliases, but in the future, they will likely record user settings to be displayed in a table later.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-hooks-and-advice" class="anchor" aria-hidden="true" href="#hooks-and-advice"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Hooks and Advice&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;general-add-hook&lt;/code&gt;, &lt;code&gt;general-remove-hook&lt;/code&gt;, &lt;code&gt;general-advice-add&lt;/code&gt;, and &lt;code&gt;general-advice-remove&lt;/code&gt; all act as drop-in replacements for their corresponding functions but allow lists for some of the arguments. The hook functions allow specifying lists for the hooks and functions, and the advice functions allow specifying lists for the symbols and functions. Because I don’t like the difference in naming for the default advice functions, &lt;code&gt;general-add-advice&lt;/code&gt; and &lt;code&gt;general-remove-advice&lt;/code&gt; are also provided as aliases.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(general-add-hook my-lisp-mode-hooks
                  (&lt;span class="pl-k"&gt;list&lt;/span&gt; &lt;span class="pl-c1"&gt;#&lt;span class="pl-c1"&gt;'lispy-mode&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;#&lt;span class="pl-c1"&gt;'rainbow-delimiters-mode&lt;/span&gt;&lt;/span&gt;))
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; note that setting the :jump command property is recommended instead of this&lt;/span&gt;
(general-add-advice (&lt;span class="pl-k"&gt;list&lt;/span&gt; &lt;span class="pl-c1"&gt;#&lt;span class="pl-c1"&gt;'git-gutter:next-hunk&lt;/span&gt;&lt;/span&gt;
                          &lt;span class="pl-c1"&gt;#&lt;span class="pl-c1"&gt;'git-gutter:previous-hunk&lt;/span&gt;&lt;/span&gt;)
                    &lt;span class="pl-c1"&gt;:before&lt;/span&gt; &lt;span class="pl-c1"&gt;#&lt;span class="pl-c1"&gt;'evil-set-jump&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h1&gt;&lt;a id="user-content-integration-with-other-packages" class="anchor" aria-hidden="true" href="#integration-with-other-packages"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Integration with Other Packages&lt;/h1&gt;
&lt;h2&gt;&lt;a id="user-content-use-package-keywords" class="anchor" aria-hidden="true" href="#use-package-keywords"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Use-package Keywords&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-general-keyword" class="anchor" aria-hidden="true" href="#general-keyword"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;:general Keyword&lt;/h3&gt;
&lt;p&gt;General also optionally provides a use-package keyword. &lt;code&gt;:general&lt;/code&gt; is similar to &lt;code&gt;:bind&lt;/code&gt; in that it implies &lt;code&gt;:defer t&lt;/code&gt; whenever there are bound commands that can be autoloaded (e.g. it will not imply &lt;code&gt;:defer t&lt;/code&gt; if the only bound command is to a lambda, for example). Whenever autoloadable commands are bound, use-package will create autoloads for them (though this is usually not necessary). The keyword is followed by one or more lists containing arguments for &lt;code&gt;general-def&lt;/code&gt;; there is no difference in syntax:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; &lt;span class="pl-c1"&gt;org&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:general&lt;/span&gt;
  (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-c c&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'org-capture&lt;/span&gt;)
  (&lt;span class="pl-c1"&gt;:keymaps&lt;/span&gt; &lt;span class="pl-c1"&gt;'org-mode-map&lt;/span&gt;
   &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;TAB&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'org-cycle&lt;/span&gt;)
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; uses &lt;span class="pl-smi"&gt;`general-def'&lt;/span&gt; not &lt;span class="pl-smi"&gt;`general-define-key'&lt;/span&gt;, so this is fine&lt;/span&gt;
  (org-mode-map
   &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;TAB&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'org-cycle&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;:general&lt;/code&gt; keyword also supports using any other key definer/wrapper by manually specifying it:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; &lt;span class="pl-c1"&gt;org&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:general&lt;/span&gt;
  (general-nmap &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SPC c&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'org-capture&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;One annoyance you may encounter is that the default function for indentation will indent a list starting with a keyword like a function:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;:keymaps&lt;/span&gt; &lt;span class="pl-c1"&gt;'org-mode-map&lt;/span&gt;
          &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;TAB&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'org-cycle&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is an annoyance you may have using other emacs packages as well and can be fixed by modifying &lt;code&gt;lisp-indent-function&lt;/code&gt; (see &lt;a href="http://emacs.stackexchange.com/q/10230/5278" rel="nofollow"&gt;this emacs stackexchange question&lt;/a&gt; and Fuco1’s modified &lt;code&gt;lisp-indent-function&lt;/code&gt; in one of the answers there).&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-hook-keywords" class="anchor" aria-hidden="true" href="#hook-keywords"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Hook Keywords&lt;/h3&gt;
&lt;p&gt;General provides two alternatives to &lt;code&gt;:hook&lt;/code&gt; that use &lt;code&gt;general-add-hook&lt;/code&gt; called &lt;code&gt;:ghook&lt;/code&gt; and &lt;code&gt;:gfhook&lt;/code&gt;. Both take any number of arguments of symbols or lists. List arguments work the same for both; they correspond to a list of arguments for &lt;a href="#hooks-and-advice"&gt;~general-add-hook~&lt;/a&gt;. The primary difference between the two is that symbol arguments to &lt;code&gt;:ghook&lt;/code&gt; are &lt;i&gt;hooks&lt;/i&gt;, but they are &lt;i&gt;functions&lt;/i&gt; for &lt;code&gt;:gfhook&lt;/code&gt; (hence the &lt;code&gt;f&lt;/code&gt;). Furthermore, &lt;code&gt;:ghook&lt;/code&gt; usually implies &lt;code&gt;:defer t&lt;/code&gt;, and &lt;code&gt;:gfhook&lt;/code&gt; never implies &lt;code&gt;:defer t&lt;/code&gt;. &lt;code&gt;:ghook&lt;/code&gt; should be used when the &lt;code&gt;general-add-hook&lt;/code&gt; is meant to trigger the loading of the package. &lt;code&gt;:gfhook&lt;/code&gt; should be used when the &lt;code&gt;general-add-hook&lt;/code&gt; is meant to trigger some function in response to the package’s mode being enabled (or toggled in the case of a minor mode). More simply put, &lt;code&gt;:ghook&lt;/code&gt; is suited towards enabling minor modes, and &lt;code&gt;:gfhook&lt;/code&gt; is suited towards performing setup once some mode has loaded. The use case for each is further explained below.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-ghook-keyword" class="anchor" aria-hidden="true" href="#ghook-keyword"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;:ghook Keyword&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;:ghook&lt;/code&gt; is intended to be used to add a package’s minor mode enabling function to a user-specified &lt;i&gt;hook&lt;/i&gt;, so that when hook is run, the package will be loaded and the mode enabled. This means that &lt;code&gt;:ghook&lt;/code&gt; will usually imply &lt;code&gt;:defer t&lt;/code&gt;. While it does not always imply &lt;code&gt;:defer t&lt;/code&gt;, it will add any non-lambda functions to &lt;code&gt;:commands&lt;/code&gt; (this is the same behavior as &lt;code&gt;:hook&lt;/code&gt;). Though this is usually unnecessary (the commands probably already have autoloads), it will in turn imply &lt;code&gt;:defer t&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Symbols specified with &lt;code&gt;:ghook&lt;/code&gt; correspond to hooks, and the function to add to each hook is inferred from the package’s name (i.e. &lt;code&gt;-mode&lt;/code&gt; is automatically added to the package name unless the package’s name already ends in &lt;code&gt;-mode&lt;/code&gt;). For example, these are all the same:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; rainbow-delimiters
  &lt;span class="pl-c1"&gt;:ghook&lt;/span&gt; &lt;span class="pl-c1"&gt;'prog-mode-hook&lt;/span&gt;)

(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; rainbow-delimiters
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; &lt;span class="pl-smi"&gt;`general-add-hook'&lt;/span&gt; arglist: HOOKS FUNCTIONS &amp;amp;optional APPEND LOCAL&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; a missing FUNCTIONS argument will be replaced with inferred minor mode&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:ghook&lt;/span&gt; (&lt;span class="pl-c1"&gt;'prog-mode-hook&lt;/span&gt;))

(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; rainbow-delimiters
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; a null or non-symbol placeholder for FUNCTIONS will be replaced with&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; inferred minor mode command; this may be useful if you want to keep the&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; inferred command but also want to set the APPEND and/or LOCAL arguments&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; afterwards, e.g. ('prog-mode-hook nil t)&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:ghook&lt;/span&gt; (&lt;span class="pl-c1"&gt;'prog-mode-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;))

(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; rainbow-delimiters
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; the full arglist for &lt;span class="pl-smi"&gt;`general-add-hook'&lt;/span&gt; can be specified&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; this is necessary if inference is not possible (see below for an example)&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:ghook&lt;/span&gt; (&lt;span class="pl-c1"&gt;'prog-mode-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;#&lt;span class="pl-c1"&gt;'rainbow-delimiters-mode&lt;/span&gt;&lt;/span&gt;))

(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; :commands implies :defer t&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:commands&lt;/span&gt; rainbow-delimiters-mode
  &lt;span class="pl-c1"&gt;:init&lt;/span&gt; (general-add-hook &lt;span class="pl-c1"&gt;'prog-mode-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;#&lt;span class="pl-c1"&gt;'rainbow-delimiters-mode&lt;/span&gt;&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you are already familiar with &lt;code&gt;:hook&lt;/code&gt;, you should note that there are quite a few syntactic differences between &lt;code&gt;:ghook&lt;/code&gt; and &lt;code&gt;:hook&lt;/code&gt;. Firstly, quoting the hooks and functions is required. Like &lt;code&gt;:general&lt;/code&gt; uses the same syntax as &lt;code&gt;general-def(ine-key)&lt;/code&gt; (unlike &lt;code&gt;:bind&lt;/code&gt;), &lt;code&gt;:ghook&lt;/code&gt; uses the same syntax as &lt;code&gt;(general-)add-hook&lt;/code&gt; for both clarity and convenience. For example, the user may want to use a helper function/macro to generate the function(s) to add to the hook (see the &lt;a href="#gfhook-keyword"&gt;:gfhook section&lt;/a&gt; for a specific example). The user may also want to specify a variable containing a list of hooks instead of an actual hook name:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;defconst&lt;/span&gt; &lt;span class="pl-en"&gt;my-lisp-mode-hooks&lt;/span&gt;
  '(lisp-mode-hook
    emacs-lisp-mode-hook
    clojure-mode-hook
    scheme-mode-hook
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; ...&lt;/span&gt;
    ))

(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; lispy
  &lt;span class="pl-c1"&gt;:ghook&lt;/span&gt; my-lisp-mode-hooks)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; same as&lt;/span&gt;
(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; lispy
  &lt;span class="pl-c1"&gt;:ghook&lt;/span&gt; (my-lisp-mode-hooks))

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; same as&lt;/span&gt;
(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; lispy
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;;  &lt;span class="pl-smi"&gt;`general-add-hook'&lt;/span&gt; can take a list of hooks for the HOOK argument&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:ghook&lt;/span&gt; ('(lisp-mode-hook
            emacs-lisp-mode-hook
            clojure-mode-hook
            scheme-mode-hook
            &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; ...&lt;/span&gt;
            )))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Furthermore, &lt;code&gt;:ghook&lt;/code&gt; will not automatically add &lt;code&gt;-hook&lt;/code&gt; to specified hook symbols (i.e. you must specify &lt;code&gt;prog-mode-hook&lt;/code&gt;; &lt;code&gt;prog-mode&lt;/code&gt; is not sufficient). This design decision is intended to help prevent confusion since &lt;code&gt;:gfhook&lt;/code&gt; also exists, and its symbols correspond to functions (not hooks) that could also end in &lt;code&gt;-mode&lt;/code&gt; (and could potentially not be sharp quoted). I don’t think the loss in conciseness is major, and hopefully this will help always make it immediately clear whether symbols correspond to functions or hooks.&lt;/p&gt;
&lt;p&gt;Lastly, &lt;code&gt;:hook&lt;/code&gt; only takes one argument, whereas &lt;code&gt;:ghook&lt;/code&gt; can take an arbitrary number of arguments (just like &lt;code&gt;:general&lt;/code&gt;):&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; lispy
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; any number of symbols (or lists) is allowed&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:ghook&lt;/span&gt;
  &lt;span class="pl-c1"&gt;'lisp-mode-hook&lt;/span&gt;
  &lt;span class="pl-c1"&gt;'emacs-lisp-mode-hook&lt;/span&gt;
  &lt;span class="pl-c1"&gt;'clojure-mode-hook&lt;/span&gt;
  &lt;span class="pl-c1"&gt;'scheme-mode-hook&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that if the function name cannot be inferred from the package name (i.e. the package name or the package name with &lt;code&gt;-mode&lt;/code&gt; appended is not correct), you need to specify a full &lt;code&gt;general-add-hook&lt;/code&gt; arglist:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; yasnippet
  &lt;span class="pl-c1"&gt;:ghook&lt;/span&gt; ('(text-mode-hook prog-mode-hook) &lt;span class="pl-c1"&gt;#&lt;span class="pl-c1"&gt;'yas-minor-mode&lt;/span&gt;&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content-gfhook-keyword" class="anchor" aria-hidden="true" href="#gfhook-keyword"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;:gfhook Keyword&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;:gfhook&lt;/code&gt; is intended to be used to specify &lt;i&gt;functions&lt;/i&gt; to add to the package’s mode hook. The hook is inferred from the package’s name (by appending either &lt;code&gt;-mode-hook&lt;/code&gt; or just &lt;code&gt;-hook&lt;/code&gt; if the package’s name ends in &lt;code&gt;-mode&lt;/code&gt;). If the hook cannot be inferred from the package name, then the full arglist must be specified just as with &lt;code&gt;:ghook&lt;/code&gt;. Unlike &lt;code&gt;:ghook&lt;/code&gt;, &lt;code&gt;:gfhook&lt;/code&gt; never adds functions to &lt;code&gt;:commands&lt;/code&gt; and therefore never implies &lt;code&gt;:defer t&lt;/code&gt;. This is because the functions specified are ones that should be run when turning on (or toggling) the mode(s) the package provides. The specified functions are external to the package, could be called elsewhere, and therefore should not trigger the package to load. The following all have the same effect:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; &lt;span class="pl-c1"&gt;org&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; for a major-mode package, you might use :mode to imply :defer t (or just&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; use :defer t; or just &lt;span class="pl-smi"&gt;`use-package-always-defer'&lt;/span&gt; which I personally prefer)&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:gfhook&lt;/span&gt;
  &lt;span class="pl-c1"&gt;#&lt;span class="pl-c1"&gt;'visual-line-mode&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-c1"&gt;#&lt;span class="pl-c1"&gt;'my-org-setup&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; ...&lt;/span&gt;
  )

(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; &lt;span class="pl-c1"&gt;org&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:init&lt;/span&gt;
  (general-add-hook &lt;span class="pl-c1"&gt;'org-mode-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;#&lt;span class="pl-c1"&gt;'visual-line-mode&lt;/span&gt;&lt;/span&gt;)
  (general-add-hook &lt;span class="pl-c1"&gt;'org-mode-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;#&lt;span class="pl-c1"&gt;'my-org-setup&lt;/span&gt;&lt;/span&gt;))

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; this is also valid but less concise&lt;/span&gt;
(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; &lt;span class="pl-c1"&gt;org&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; specify null or non-symbol placeholder for HOOKS to use inferred hook&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:gfhook&lt;/span&gt; (&lt;span class="pl-c1"&gt;nil&lt;/span&gt; (&lt;span class="pl-k"&gt;list&lt;/span&gt; &lt;span class="pl-c1"&gt;#&lt;span class="pl-c1"&gt;'visual-line-mode&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;#&lt;span class="pl-c1"&gt;'my-org-setup&lt;/span&gt;&lt;/span&gt;)))

(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; &lt;span class="pl-c1"&gt;org&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:init&lt;/span&gt;
  (general-add-hook &lt;span class="pl-c1"&gt;'org-mode-hook&lt;/span&gt; (&lt;span class="pl-k"&gt;list&lt;/span&gt; &lt;span class="pl-c1"&gt;#&lt;span class="pl-c1"&gt;'visual-line-mode&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;#&lt;span class="pl-c1"&gt;'my-org-setup&lt;/span&gt;&lt;/span&gt;)))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Like with &lt;code&gt;:ghook&lt;/code&gt;, &lt;code&gt;:gfhook&lt;/code&gt; still requires quoting, so you can use variables and function/macro calls to generate the function to add to the hook:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;defmacro&lt;/span&gt; &lt;span class="pl-e"&gt;disable&lt;/span&gt; (&lt;span class="pl-v"&gt;mode&lt;/span&gt;)
  `(&lt;span class="pl-c1"&gt;lambda&lt;/span&gt; () (&lt;span class="pl-c1"&gt;&lt;span class="pl-mi1"&gt;,&lt;/span&gt;mode&lt;/span&gt; &lt;span class="pl-c1"&gt;-1&lt;/span&gt;)))

(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; proced
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; must be in a &lt;span class="pl-smi"&gt;`general-add-hook'&lt;/span&gt; argument list, so that it itself is not&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; considered one&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:gfhook&lt;/span&gt; (&lt;span class="pl-c1"&gt;nil&lt;/span&gt; (disable visual-line-mode)))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Although you could use &lt;code&gt;:gfhook&lt;/code&gt; to enable minor modes for some major mode (e.g. enable flyspell inside &lt;code&gt;(use-package org)&lt;/code&gt;), it is probably more logical/organized to group these hooks along with their minor modes’ use-package declarations (e.g. using &lt;code&gt;:ghook&lt;/code&gt;). &lt;code&gt;:gfhook&lt;/code&gt; is more suited for setup functions. Expanding on the proced example:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;defun&lt;/span&gt; &lt;span class="pl-e"&gt;my-proced-setup&lt;/span&gt; ()
  (&lt;span class="pl-c1"&gt;visual-line-mode&lt;/span&gt; &lt;span class="pl-c1"&gt;-1&lt;/span&gt;)
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; not global; has to be run in buffer&lt;/span&gt;
  (&lt;span class="pl-c1"&gt;proced-toggle-auto-update&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;))

(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; proced
  &lt;span class="pl-c1"&gt;:gfhook&lt;/span&gt; &lt;span class="pl-c1"&gt;#&lt;span class="pl-c1"&gt;'my-proced-setup&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-use-with-key-chord" class="anchor" aria-hidden="true" href="#use-with-key-chord"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Use with Key-chord&lt;/h2&gt;
&lt;p&gt;General provides a simple function that will rewrite a string into a key-chord vector. This allows you to easily use general to create definitions for &lt;code&gt;key-chord.el&lt;/code&gt;. The following are equivalent:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(key-chord-define evil-insert-state-map &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;jk&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'evil-normal-state&lt;/span&gt;)
(general-define-key &lt;span class="pl-c1"&gt;:keymaps&lt;/span&gt; &lt;span class="pl-c1"&gt;'evil-insert-state-map&lt;/span&gt;
                    (general-chord &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;jk&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;'evil-normal-state&lt;/span&gt;
                    (general-chord &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;kj&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;'evil-normal-state&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that the order of the keys does matter unlike with the default &lt;code&gt;key-chord-define&lt;/code&gt;.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-extended-definition-syntax" class="anchor" aria-hidden="true" href="#extended-definition-syntax"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Extended Definition Syntax&lt;/h1&gt;
&lt;p&gt;General.el supports some extra per-definition keywords. It has “type” keywords that give general.el some extra information to use to create definitions (e.g. &lt;code&gt;:prefix-command&lt;/code&gt; and &lt;code&gt;:keymap&lt;/code&gt;) and other keywords that will alter or ignore definitions (e.g. &lt;code&gt;:predicate&lt;/code&gt; and &lt;code&gt;:ignore&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;The system that allows for the default keywords can also be extended by the user to support more keywords that can either directly alter the definition or just be used for side effects (like &lt;code&gt;:which-key&lt;/code&gt;). An extended definition keyword can have any number of helper keywords (and can also be used as a helper keyword itself, e.g. &lt;code&gt;:keymap&lt;/code&gt;). See &lt;a href="#user-defined-extended-definition-keywords"&gt;User-defined Extended Definition Keywords&lt;/a&gt; for more information on creating new keywords.&lt;/p&gt;
&lt;p&gt;Here are the keywords available by default (helper keywords are subitems; specific examples are given later):&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;:def&lt;/code&gt; - Implicit; this is paired with the actual definition (helper keyword; does not trigger any special behavior by itself)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;“Type” specifiers:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;:keymap&lt;/code&gt; - For keymaps; if the keymap is not defined, will create an “autoloaded” keymap for &lt;code&gt;:package&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code&gt;:package&lt;/code&gt; - The package to load (also global)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code&gt;:prefix-command&lt;/code&gt; and/or &lt;code&gt;:prefix-map&lt;/code&gt; - These are the same as &lt;code&gt;:def&lt;/code&gt; and &lt;code&gt;:keymap&lt;/code&gt; respectively but will create a prefix command and/or keymap (these behave the same as the global keyword arguments except for any key as opposed to just &lt;code&gt;:prefix&lt;/code&gt;)
    &lt;ul&gt;
      &lt;li&gt;&lt;code&gt;:prefix-name&lt;/code&gt; The keymap menu name/prompt (global value never considered)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code&gt;:ignore&lt;/code&gt; - Do not create a keybinding for the key def pair&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that every bindable definition must have &lt;code&gt;:def&lt;/code&gt;, but general allows for shorthand where &lt;code&gt;:def&lt;/code&gt; can be omitted or a “type” specifier can be used instead:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; shorthand&lt;/span&gt;
'(swiper &lt;span class="pl-c1"&gt;:wk&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;swipe&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; rewritten to&lt;/span&gt;
'(&lt;span class="pl-c1"&gt;:def&lt;/span&gt; swiper &lt;span class="pl-c1"&gt;:wk&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;swipe&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; shorthand&lt;/span&gt;
'(&lt;span class="pl-c1"&gt;:keymap&lt;/span&gt; some-keymap)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; rewritten to&lt;/span&gt;
'(&lt;span class="pl-c1"&gt;:def&lt;/span&gt; some-keymap &lt;span class="pl-c1"&gt;:keymap&lt;/span&gt; some-keymap)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; same as&lt;/span&gt;
'(&lt;span class="pl-c1"&gt;:def&lt;/span&gt; some-keymap &lt;span class="pl-c1"&gt;:keymap&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; shorthand&lt;/span&gt;
'(&lt;span class="pl-c1"&gt;:prefix-command&lt;/span&gt; my-prefix-cmd &lt;span class="pl-c1"&gt;:prefix-map&lt;/span&gt; my-prefix-map)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; rewritten to&lt;/span&gt;
'(&lt;span class="pl-c1"&gt;:def&lt;/span&gt; my-prefix-cmd &lt;span class="pl-c1"&gt;:prefix-command&lt;/span&gt; my-prefix-cmd &lt;span class="pl-c1"&gt;:prefix-map&lt;/span&gt; my-prefix-map)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After the shorthand expansion, the type keywords are handled exactly the same as any other extended definition keyword.&lt;/p&gt;
&lt;p&gt;Which-key functionality (see below for more details):&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;:which-key&lt;/code&gt; or &lt;code&gt;:wk&lt;/code&gt; - The replacement text (or cons or function)
    &lt;ul&gt;
      &lt;li&gt;&lt;code&gt;:major-modes&lt;/code&gt; - Major modes to match (optional; also global)&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;:wk-match-keys&lt;/code&gt; - Whether to include the keys in the match cons (defaults to &lt;code&gt;t&lt;/code&gt; globally)&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;:wk-match-binding&lt;/code&gt; - Whether to include the binding in the match cons (defaults to &lt;code&gt;t&lt;/code&gt;; also global)&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;:wk-full-keys&lt;/code&gt; - Whether the bound keys correspond to the full sequence to match (defaults to &lt;code&gt;t&lt;/code&gt;; also global)&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;:keymap&lt;/code&gt; - When non-nil, general will not try to match a keymap symbol as if it was a command&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Evil command properties (see below for more details):&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;:properties&lt;/code&gt; - The list of properties to add to the command (also global)&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;:repeat&lt;/code&gt; - The repeat property to set for the command (also global)&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;:jump&lt;/code&gt; - The jump property to set for the command (also global)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Global keywords that can be overridden locally:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;:predicate&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The default value for a keyword is &lt;code&gt;nil&lt;/code&gt; unless otherwise specified.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-autoloaded-keymaps" class="anchor" aria-hidden="true" href="#autoloaded-keymaps"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;“Autoloaded” Keymaps&lt;/h2&gt;
&lt;p&gt;As the first example, an extended definition can be used to create an “autoload” for a keymap like use-package’s &lt;code&gt;:bind-keymap&lt;/code&gt; keyword does:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(general-define-key
 &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-c p&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; '(&lt;span class="pl-c1"&gt;:keymap&lt;/span&gt; projectile-command-map &lt;span class="pl-c1"&gt;:package&lt;/span&gt; projectile))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Using this feature, a key can be bound to a keymap that does not exist yet and still work as expected. Projectile will be loaded when &lt;code&gt;C-c p&lt;/code&gt; is used for the first time. This is done by using an intermediate function to load the package and rebind the keys.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;:keymap&lt;/code&gt; is the primary keyword that triggers this check. It can also be used as a helper keyword (e.g. for &lt;code&gt;which-key&lt;/code&gt;). If the keymap already exists, general will not try to create an autoloaded keymap, and &lt;code&gt;:package&lt;/code&gt; is not required.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;:package&lt;/code&gt; is a helper keyword that can be specified locally within the extended definition or globally. When using the use-package &lt;code&gt;:general&lt;/code&gt; keyword, it will automatically be specified.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-which-key-integration" class="anchor" aria-hidden="true" href="#which-key-integration"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Which Key Integration&lt;/h2&gt;
&lt;p&gt;If you are not already familiar with which-key’s replacement system, please see the docstring for &lt;code&gt;which-key-replacement-alist&lt;/code&gt; if you don’t understand any of the examples or information here.&lt;/p&gt;
&lt;p&gt;There are several benefits to using general.el to add which-key replacements. The main benefit is that because the keys and definition are already specified, general.el can automatically assemble the match cons. This reuse of information saves a little space since it is not necessary to make an additional call to &lt;code&gt;which-key-add-key-based-replacements&lt;/code&gt; with the key information. It is also useful since which-key does not currently provide any convenience function for creating a replacement that matches a binding (you have to manually add to &lt;code&gt;which-key-replacement-alist&lt;/code&gt;). However, see which-key’s &lt;a href="https://github.com/justbur/emacs-which-key#automatic"&gt;which-key-enable-extended-define-key&lt;/a&gt; which provides another method for automatically creating replacements and binding keys simultaneously.&lt;/p&gt;
&lt;p&gt;Another related benefit of using &lt;code&gt;:which-key&lt;/code&gt; instead of &lt;code&gt;which-key-add-key-based-replacements&lt;/code&gt; directly even for keys that won’t be bound is that replacements will be added for all prefix combinations (i.e. when &lt;code&gt;:non-normal-prefix&lt;/code&gt; and/or &lt;code&gt;:global-prefix&lt;/code&gt; are also specified).&lt;/p&gt;
&lt;p&gt;The argument supplied to &lt;code&gt;:which-key&lt;/code&gt; or &lt;code&gt;:wk&lt;/code&gt; is equivalent to the REPLACEMENT argument in &lt;code&gt;which-key-add-key-based-replacements&lt;/code&gt;. It can be a full replacement cons of &lt;code&gt;(KEY . BINDING)&lt;/code&gt; or just a string (which will be used as the BINDING and serve as the new description). Additionally it can be a function that will return a replacement cons (see the docstring for &lt;code&gt;which-key-replacements-alist&lt;/code&gt; or the which-key README). Finally, which-key allows for a special replacement of &lt;code&gt;t&lt;/code&gt; to prevent a key from being shown in the which-key popup at all.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;:which-key&lt;/code&gt; keyword can be used with the &lt;code&gt;:major-modes&lt;/code&gt; keyword (locally or globally) which can be compared to using &lt;code&gt;which-key-add-major-mode-key-based-replacements&lt;/code&gt;. &lt;code&gt;:major-modes&lt;/code&gt; can have the following values (see the examples below):&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;t&lt;/code&gt; - the major mode will be obtained from all keymaps by removing “-map”&lt;/li&gt;
  &lt;li&gt;the major mode name (when only one keymap is specified)&lt;/li&gt;
  &lt;li&gt;a list of the following values:
    &lt;ul&gt;
      &lt;li&gt;&lt;code&gt;t&lt;/code&gt; - same behavior as above but only for corresponding index in &lt;code&gt;:keymaps&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;the major mode name for that index&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;nil&lt;/code&gt; (or no item at the index) - don’t match the major mode&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;:wk-match-keys&lt;/code&gt;, &lt;code&gt;:wk-match-binding&lt;/code&gt;, and &lt;code&gt;:wk-full-keys&lt;/code&gt; can be used to customize the match cons. Generally these will not need to be adjusted. The binding is only included in the match cons if one is available, and &lt;code&gt;:wk-full-keys&lt;/code&gt; only needs to be specified as &lt;code&gt;nil&lt;/code&gt; if you are binding keys in a prefix map.&lt;/p&gt;
&lt;p&gt;Here are some examples:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(general-define-key
 &lt;span class="pl-c1"&gt;:prefix&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SPC&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
 &lt;span class="pl-c1"&gt;:keymaps&lt;/span&gt; &lt;span class="pl-c1"&gt;'normal&lt;/span&gt;
 &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; unbind SPC and give it a title for which-key (see echo area)&lt;/span&gt;
 &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; '(&lt;span class="pl-c1"&gt;nil&lt;/span&gt; &lt;span class="pl-c1"&gt;:which-key&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;my lieutenant general prefix&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
 &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; bind nothing but give SPC f a description for which-key&lt;/span&gt;
 &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;f&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; '(&lt;span class="pl-c1"&gt;:ignore&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt; &lt;span class="pl-c1"&gt;:which-key&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;file prefix&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
 &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; use a cons as a replacement&lt;/span&gt;
 &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;g&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; '(&lt;span class="pl-c1"&gt;:ignore&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt; &lt;span class="pl-c1"&gt;:wk&lt;/span&gt; (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;g-key&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;git prefix&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
 &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; toggle lispy; use a function as a replacement to show if currently on&lt;/span&gt;
 &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;l&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; '(lispy-mode &lt;span class="pl-c1"&gt;:wk&lt;/span&gt; my-lispy-which-key-display)
 &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; for a keymap, only the keys will be matched;&lt;/span&gt;
 &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; :no-match-binding is not necessary&lt;/span&gt;
 &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;p&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; '(&lt;span class="pl-c1"&gt;:keymap&lt;/span&gt; projectile-command-map &lt;span class="pl-c1"&gt;:wk&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;projectile prefix&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
 &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; don't display this keybinding at all&lt;/span&gt;
 &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;z&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; '(hidden-command &lt;span class="pl-c1"&gt;:wk&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;)
 ...)

(general-define-key
 &lt;span class="pl-c1"&gt;:keymaps&lt;/span&gt; &lt;span class="pl-c1"&gt;'help-map&lt;/span&gt;
 &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; allow keys before bound keys in match&lt;/span&gt;
 &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; since binding in a prefix map&lt;/span&gt;
 &lt;span class="pl-c1"&gt;:wk-full-keys&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;
 &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; make a prefix-command and add description&lt;/span&gt;
 &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;A&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; '(&lt;span class="pl-c1"&gt;:prefix-command&lt;/span&gt; apropos-prefix-map &lt;span class="pl-c1"&gt;:which-key&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;apropos&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; an equivalent of the above&lt;/span&gt;
(general-define-key &lt;span class="pl-c1"&gt;:keymaps&lt;/span&gt; &lt;span class="pl-c1"&gt;'help-map&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:wk-full-keys&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:prefix&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;A&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:prefix-command&lt;/span&gt; &lt;span class="pl-c1"&gt;'apropos-prefix-map&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; make a prefix-command and add description&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; '(&lt;span class="pl-c1"&gt;:ignore&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt; &lt;span class="pl-c1"&gt;:which-key&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;apropos&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; :major-modes&lt;/span&gt;
(general-define-key
 &lt;span class="pl-c1"&gt;:keymaps&lt;/span&gt; &lt;span class="pl-c1"&gt;'emacs-lisp-mode-map&lt;/span&gt;
 &lt;span class="pl-c1"&gt;:major-modes&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;
 ...)

(general-define-key
 &lt;span class="pl-c1"&gt;:keymaps&lt;/span&gt; '(no-follow-convention-mode-keymap1
            org-mode-map)
 &lt;span class="pl-c1"&gt;:major-modes&lt;/span&gt; '(no-follow-convention-mode &lt;span class="pl-c1"&gt;t&lt;/span&gt;)
 ...)&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-evil-command-properties" class="anchor" aria-hidden="true" href="#evil-command-properties"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Evil Command Properties&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;:properties&lt;/code&gt;, &lt;code&gt;:repeat&lt;/code&gt;, and &lt;code&gt;:jump&lt;/code&gt; keywords can be used to add evil command properties:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(general-define-key
 &lt;span class="pl-c1"&gt;:keymaps&lt;/span&gt; &lt;span class="pl-c1"&gt;'normal&lt;/span&gt;
 &lt;span class="pl-c1"&gt;:prefix&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SPC&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
 &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;gj&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; '(git-gutter:next-hunk &lt;span class="pl-c1"&gt;:properties&lt;/span&gt; (&lt;span class="pl-c1"&gt;:repeat&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt; &lt;span class="pl-c1"&gt;:jump&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;))
 &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;gk&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; '(git-gutter:previous-hunk &lt;span class="pl-c1"&gt;:repeat&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt; &lt;span class="pl-c1"&gt;:jump&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;))

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; they also work globally&lt;/span&gt;
(general-define-key
 &lt;span class="pl-c1"&gt;:keymaps&lt;/span&gt; &lt;span class="pl-c1"&gt;'normal&lt;/span&gt;
 &lt;span class="pl-c1"&gt;:prefix&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SPC&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
 &lt;span class="pl-c1"&gt;:properties&lt;/span&gt; '(&lt;span class="pl-c1"&gt;:repeat&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt; &lt;span class="pl-c1"&gt;:jump&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;)
 &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; or&lt;/span&gt;
 &lt;span class="pl-c1"&gt;:repeat&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;
 &lt;span class="pl-c1"&gt;:jump&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;
 &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;gj&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'git-gutter:next-hunk&lt;/span&gt;
 &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;gk&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'git-gutter:previous-hunk&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that the default for commands without a repeat property are treated the same as commands with &lt;code&gt;:repeat t&lt;/code&gt;, so the above repeat configuration isn’t explicitly necessary in this case.&lt;/p&gt;
&lt;p&gt;If you would like for more keywords to be added that correspond to specific properties (like &lt;code&gt;:repeat&lt;/code&gt;), feel free to make an issue or pull request. For more information on command properties see evil’s documentation and &lt;a href="https://github.com/noctuid/evil-guide#command-properties"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-user-defined-extended-definition-keywords" class="anchor" aria-hidden="true" href="#user-defined-extended-definition-keywords"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;User-defined Extended Definition Keywords&lt;/h2&gt;
&lt;p&gt;New keywords and functionality can be added by the user by adding a keyword to &lt;code&gt;general-extended-def-keywords&lt;/code&gt; and creating a corresponding function named &lt;code&gt;general-extended-def-:&amp;lt;keyword&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Whenever this keyword is specified, general calls the corresponding function with the arguments &lt;code&gt;state keymap key edef kargs&lt;/code&gt;. Generally, you can ignore at least some of these arguments. &lt;code&gt;state&lt;/code&gt; and &lt;code&gt;keymap&lt;/code&gt; are the evil state (nil if none) and keymap that the &lt;code&gt;key&lt;/code&gt; (internal representation; &lt;code&gt;kbd&lt;/code&gt; already used if necessary) is being bound in. Note that &lt;code&gt;keymap&lt;/code&gt; will be the symbol for the keymap in case it is needed. To get the actual keymap, using &lt;code&gt;general--get-keymap&lt;/code&gt; is recommended. &lt;code&gt;edef&lt;/code&gt; is the extended definition itself, and &lt;code&gt;kargs&lt;/code&gt; is the plist of all the keyword arguments given to the original &lt;code&gt;general-define-key&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Extended definition functions can optionally alter the definitions. Keywords that have this behavior must be added to either &lt;code&gt;general-rewrite-def-keywords&lt;/code&gt; or &lt;code&gt;general-rewrite-def-after-keywords&lt;/code&gt; instead of to &lt;code&gt;general-extended-def-keywords&lt;/code&gt;. The difference between the two is that the former will alter the definition before the functions for the keywords in &lt;code&gt;general-extended-def-keywords&lt;/code&gt; are called. Functions that alter the definition should return a new extended definition plist with the &lt;code&gt;:def&lt;/code&gt; entry updated. For a simple example of a function that does not alter the definition, see &lt;code&gt;general-extended-def-:properties&lt;/code&gt;. For a simple example of a function that does alter the definition, see &lt;code&gt;general-extended-def-:predicate&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Extended definition keywords may use any number of helper keywords. These do not need to be added to any variables but should be distinct from any other keywords.&lt;/p&gt;
&lt;p&gt;Note that the keywords in &lt;code&gt;general-extended-def-keywords&lt;/code&gt; and their helper keywords can all be specified both globally and locally. Since globally specifying keywords may not always make sense, it is up to the &lt;code&gt;general-extended-def-:&amp;lt;keyword&amp;gt;&lt;/code&gt; function to decide how to handle things. When a keyword can be specified both globally and locally, &lt;code&gt;general--getf&lt;/code&gt; may be useful to get the local value or the global value if there is no local one (e.g. &lt;code&gt;(general--getf edef kargs :predicate)&lt;/code&gt;). If it does not make sense for your keyword to be specified globally, you can add it to &lt;code&gt;general-extended-def-global-ignore-keywords&lt;/code&gt;. This will prevent your function from being called unless the keyword is specified locally.&lt;/p&gt;
&lt;p&gt;Although &lt;code&gt;general--get-keymap&lt;/code&gt; and &lt;code&gt;general--getf&lt;/code&gt; are marked internal, they will continue to exist and keep their current functionality; they are intended to be used as helpers for extended definitions.&lt;/p&gt;
&lt;p&gt;You can rely on &lt;code&gt;edef&lt;/code&gt; being a valid extended definition plist with a &lt;code&gt;:def&lt;/code&gt; keyword. Even if the user only specifies a keyword globally and does not explicitly write definitions as plists or explicitly specify &lt;code&gt;:def&lt;/code&gt;, general will automatically rewrite definitions to be valid plists. Consider the following example:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(general-define-key
 &lt;span class="pl-c1"&gt;:predicate&lt;/span&gt; '(&lt;span class="pl-c1"&gt;eobp&lt;/span&gt;)
 &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&amp;lt;right&amp;gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'beginning-of-buffer&lt;/span&gt;)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; call &lt;span class="pl-smi"&gt;`general-extended-def-:predicate'&lt;/span&gt; with this as an edef argument:&lt;/span&gt;
'(&lt;span class="pl-c1"&gt;:def&lt;/span&gt; beginning-of-buffer)

(general-define-key
 &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&amp;lt;right&amp;gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; '(&lt;span class="pl-c1"&gt;beginning-of-buffer&lt;/span&gt; &lt;span class="pl-c1"&gt;:predicate&lt;/span&gt; (&lt;span class="pl-c1"&gt;eobp&lt;/span&gt;)))
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; call &lt;span class="pl-smi"&gt;`general-extended-def-:predicate'&lt;/span&gt; with this as an edef argument:&lt;/span&gt;
'(&lt;span class="pl-c1"&gt;:def&lt;/span&gt; beginning-of-buffer &lt;span class="pl-c1"&gt;:predicate&lt;/span&gt; (&lt;span class="pl-c1"&gt;eobp&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For more information, see the docstring of &lt;code&gt;general-extended-def-keywords&lt;/code&gt;.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-user-defined-key-definers" class="anchor" aria-hidden="true" href="#user-defined-key-definers"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;User-defined Key Definers&lt;/h1&gt;
&lt;p&gt;In addition to being able to add new keywords for extended definitions, the user can also create their own key definers. These are generally useful when you want to use some package-specific key definer that has some additional functionality (e.g. &lt;code&gt;lispy-define-key&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Alternate definers can be used by specifying the &lt;code&gt;:definer&lt;/code&gt; keyword (globally or inside an extended definition):&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(general-define-key &lt;span class="pl-c1"&gt;:definer&lt;/span&gt; &lt;span class="pl-c1"&gt;'my&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;key&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'def&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;key2&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; '(def2 &lt;span class="pl-c1"&gt;:definer&lt;/span&gt; &lt;span class="pl-c1"&gt;'my-other&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The user-created function should be named &lt;code&gt;general-&amp;lt;definer&amp;gt;-define-key&lt;/code&gt;. It will be passed &lt;code&gt;state keymap key def orig-def kargs&lt;/code&gt;. These arguments are the same as for extended definition functions except for &lt;code&gt;def&lt;/code&gt; and &lt;code&gt;orig-def&lt;/code&gt;. &lt;code&gt;def&lt;/code&gt; is the transformed definition in its final form (though the definer may also alter it before binding it). On the other hand, &lt;code&gt;orig-def&lt;/code&gt; is the original definition but always as an extended definition plist (e.g. =’(:def command)= if the user only specified =’command=).&lt;/p&gt;
&lt;p&gt;Like extended definitions, custom definers can have any number of helper keyword arguments specified locally in an extended definition or globally in the arguments to &lt;code&gt;general-define-key&lt;/code&gt;. In cases where a keyword can be both global and local, &lt;code&gt;general--getf&lt;/code&gt; is a useful helper function. Since the keymap passed in is a symbol, &lt;code&gt;general--get-keymap&lt;/code&gt; may be useful as well for transforming it to the keymap value. &lt;code&gt;key-description&lt;/code&gt; will also be useful if the underlying definition function uses &lt;code&gt;kbd&lt;/code&gt; (since &lt;code&gt;key&lt;/code&gt; is the internal representation ready to be passed directly to &lt;code&gt;define-key&lt;/code&gt;; note that &lt;code&gt;key-description&lt;/code&gt; will work with both strings and vectors, including something like &lt;code&gt;[remap kill-line]&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;See &lt;code&gt;general-lispy-define-key&lt;/code&gt; for a basic example.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-wrapping-evil-define-minor-mode-key" class="anchor" aria-hidden="true" href="#wrapping-evil-define-minor-mode-key"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Wrapping &lt;code&gt;evil-define-minor-mode-key&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;If you want to use &lt;code&gt;evil-define-minor-mode-key&lt;/code&gt; instead of &lt;code&gt;evil-define-key*&lt;/code&gt;, you can use &lt;code&gt;:definer 'minor-mode&lt;/code&gt;. This will repurpose &lt;code&gt;:keymaps&lt;/code&gt; to specify minor mode names instead of keymap names:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(general-define-key
 &lt;span class="pl-c1"&gt;:definer&lt;/span&gt; &lt;span class="pl-c1"&gt;'minor-mode&lt;/span&gt;
 &lt;span class="pl-c1"&gt;:states&lt;/span&gt; &lt;span class="pl-c1"&gt;'normal&lt;/span&gt;
 &lt;span class="pl-c1"&gt;:keymaps&lt;/span&gt; &lt;span class="pl-c1"&gt;'org-src-mode&lt;/span&gt;
 &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;RET&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'org-edit-src-exit&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you are wondering why you might want to use &lt;code&gt;evil-define-minor-mode-key&lt;/code&gt;, see &lt;a href="https://github.com/noctuid/evil-guide#why-dont-keys-defined-with-evil-define-key-work-immediately"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-lispy-integration-wrapping-lispy-define-key" class="anchor" aria-hidden="true" href="#lispy-integration-wrapping-lispy-define-key"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Lispy Integration/ Wrapping &lt;code&gt;lispy-define-key&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;To use &lt;code&gt;lispy-define-key&lt;/code&gt; to make the definitions, &lt;code&gt;:definer 'lispy&lt;/code&gt; can be specified. &lt;code&gt;:lispy-plist&lt;/code&gt; can be specified globally or in an extended definition to set the last argument to &lt;code&gt;lispy-define-key&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-worf-integration-wrapping-worf-define-key" class="anchor" aria-hidden="true" href="#worf-integration-wrapping-worf-define-key"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Worf Integration/ Wrapping &lt;code&gt;worf-define-key&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;To use &lt;code&gt;worf-define-key&lt;/code&gt; to make the definitions, &lt;code&gt;:definer 'worf&lt;/code&gt; can be specified. &lt;code&gt;:worf-plist&lt;/code&gt; can be specified globally or in an extended definition to set the last argument to &lt;code&gt;worf-define-key&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-other-provided-definers" class="anchor" aria-hidden="true" href="#other-provided-definers"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Other Provided Definers&lt;/h2&gt;
&lt;p&gt;To use &lt;code&gt;lpy-define-key&lt;/code&gt; to make the definitions, &lt;code&gt;:definer 'lpy&lt;/code&gt; can be specified.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-faq" class="anchor" aria-hidden="true" href="#faq"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;FAQ&lt;/h1&gt;
&lt;h2&gt;&lt;a id="user-content-how-do-i-prevent-key-sequence-starts-with-non-prefix-key-errors" class="anchor" aria-hidden="true" href="#how-do-i-prevent-key-sequence-starts-with-non-prefix-key-errors"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;How do I prevent &lt;code&gt;Key sequence starts with non-prefix key&lt;/code&gt; errors?&lt;/h2&gt;
&lt;p&gt;By default, emacs does not support binding a key sequence where a subsequence of the key is already bound in the same keymap (e.g. you cannot bind &lt;code&gt;C-a a&lt;/code&gt; to a command in a keymap where &lt;code&gt;C-a&lt;/code&gt; is already bound to a command).&lt;/p&gt;
&lt;p&gt;If you want to be able to bind both key sequences and fall back to the shorter key’s command after a timeout or unmatched keypress, see &lt;a href="#mapping-under-non-prefix-keys"&gt;general-key-dispatch&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Otherwise, you should unbind the non-prefix key. For example:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(general-define-key
 &lt;span class="pl-c1"&gt;:keymaps&lt;/span&gt; &lt;span class="pl-c1"&gt;'normal&lt;/span&gt;
 &lt;span class="pl-c1"&gt;:prefix&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;s&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
 &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; prefix keys are prepended to other keys, so "" refers to the prefix itself&lt;/span&gt;
 &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;
 &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;a&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;#&lt;span class="pl-c1"&gt;'def&lt;/span&gt;&lt;/span&gt;
 &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; ...&lt;/span&gt;
 )&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you would rather force key definitions to always be made regardless of whether a subsequence of the key is already bound, &lt;a href="#automatic-key-unbinding"&gt;general can automatically unbind keys when necessary to prevent this error&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-why-dont-some-evil-keybindings-work-immediately" class="anchor" aria-hidden="true" href="#why-dont-some-evil-keybindings-work-immediately"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Why don’t some evil keybindings work (immediately)?&lt;/h2&gt;
&lt;p&gt;This is a &lt;a href="https://github.com/emacs-evil/evil/issues/301"&gt;known issue for evil&lt;/a&gt;. To work around this problem, you can use &lt;a href="#wrapping-evil-define-minor-mode-key"&gt;:definer ‘minor-mode&lt;/a&gt;. See &lt;a href="https://github.com/noctuid/evil-guide#why-dont-keys-defined-with-evil-define-key-work-immediately"&gt;here&lt;/a&gt; for more information.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>noctuid</author><guid isPermaLink="false">https://github.com/noctuid/general.el</guid><pubDate>Thu, 30 Jan 2020 00:17:00 GMT</pubDate></item><item><title>tarsius/hl-todo #18 in Emacs Lisp, This week</title><link>https://github.com/tarsius/hl-todo</link><description>&lt;p&gt;&lt;i&gt;Highlight TODO keywords&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h2&gt;&lt;a id="user-content-highlight-todo-and-similar-keywords-in-comments-and-strings" class="anchor" aria-hidden="true" href="#highlight-todo-and-similar-keywords-in-comments-and-strings"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Highlight TODO and similar keywords in comments and strings&lt;/h2&gt;
&lt;p&gt;To highlight keywords turn on &lt;code&gt;hl-todo-mode&lt;/code&gt; in individual buffers
or use the the global variant &lt;code&gt;global-hl-todo-mode&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can customize the keywords that are recognized by customizing
&lt;code&gt;hl-todo-keyword-faces&lt;/code&gt; either through the customization interface
or by setting the variable directly in your init file, for example:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;setq&lt;/span&gt; hl-todo-keyword-faces
      '((&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;TODO&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;   &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;#FF0000&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
        (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;FIXME&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;  &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;#FF0000&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
        (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;DEBUG&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;  &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;#A020F0&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
        (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;GOTCHA&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;#FF4500&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
        (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;STUB&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;   &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;#1E90FF&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This package also provides commands for moving to the next or
previous keyword, to invoke &lt;code&gt;occur&lt;/code&gt; with a regexp that matches all
known keywords, and to insert a keyword.  If you want to use these
commands, then you should bind them in &lt;code&gt;hl-todo-mode-map&lt;/code&gt;, e.g.:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;define-key&lt;/span&gt; hl-todo-mode-map (&lt;span class="pl-c1"&gt;kbd&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-c p&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;'hl-todo-previous&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;define-key&lt;/span&gt; hl-todo-mode-map (&lt;span class="pl-c1"&gt;kbd&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-c n&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;'hl-todo-next&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;define-key&lt;/span&gt; hl-todo-mode-map (&lt;span class="pl-c1"&gt;kbd&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-c o&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;'hl-todo-occur&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;define-key&lt;/span&gt; hl-todo-mode-map (&lt;span class="pl-c1"&gt;kbd&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-c i&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;'hl-todo-insert&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;See &lt;a href="https://www.emacswiki.org/emacs/FixmeMode" rel="nofollow"&gt;this list&lt;/a&gt; on the
Emacswiki for other packages that implement the same basic features,
but which might also provide additional features that you might like,
but which I don't deem necessary.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>tarsius</author><guid isPermaLink="false">https://github.com/tarsius/hl-todo</guid><pubDate>Thu, 30 Jan 2020 00:18:00 GMT</pubDate></item></channel></rss>