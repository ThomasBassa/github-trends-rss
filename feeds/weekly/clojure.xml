<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>GitHub Trending: Clojure, This week</title><link>https://github.com/trending/clojure?since=weekly</link><description>The top repositories on GitHub for clojure, measured weekly</description><pubDate>Thu, 12 Dec 2019 01:06:09 GMT</pubDate><lastBuildDate>Thu, 12 Dec 2019 01:06:09 GMT</lastBuildDate><generator>PyRSS2Gen-1.1.0</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><ttl>720</ttl><item><title>reagent-project/reagent #1 in Clojure, This week</title><link>https://github.com/reagent-project/reagent</link><description>&lt;p&gt;&lt;i&gt;A minimalistic ClojureScript interface to React.js&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-reagent" class="anchor" aria-hidden="true" href="#reagent"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Reagent&lt;/h1&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="logo.png"&gt;&lt;img src="logo.png" alt="Reagent-Project" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A simple &lt;a href="http://github.com/clojure/clojurescript"&gt;ClojureScript&lt;/a&gt; interface to &lt;a href="http://facebook.github.io/react/" rel="nofollow"&gt;React&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Reagent provides a way to write efficient React components using (almost) nothing but plain ClojureScript functions.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="http://reagent-project.github.io/" rel="nofollow"&gt;Detailed intro with live examples&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="http://reagent-project.github.io/news/index.html" rel="nofollow"&gt;News&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://cljdoc.org/d/reagent/reagent/0.8.1/doc/documentation-index" rel="nofollow"&gt;Documentation, 0.8&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Documentation, next release, 0.9&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="http://reagent-project.github.io/docs/master/" rel="nofollow"&gt;API docs&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/reagent-project/reagent/tree/master/doc"&gt;Tutorials and FAQ&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Community discussion and support channels&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://clojurians.slack.com/messages/reagent/" rel="nofollow"&gt;#reagent&lt;/a&gt;&lt;/strong&gt; channel in &lt;a href="http://clojurians.net/" rel="nofollow"&gt;Clojure Slack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://groups.google.com/forum/#!forum/reagent-project" rel="nofollow"&gt;Reagent Project Mailing List&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Commercial video material&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.jacekschae.com/learn-reagent-free/tycit?coupon=REAGENT" rel="nofollow"&gt;Learn Reagent Free&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.jacekschae.com/learn-reagent-pro/tycit?coupon=REAGENT" rel="nofollow"&gt;Learn Reagent Pro&lt;/a&gt; (Affiliate link, $30 discount)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.jacekschae.com/learn-re-frame-free/tycit?coupon=REAGENT" rel="nofollow"&gt;Learn Re-frame Free&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.jacekschae.com/learn-re-frame-pro/tycit?coupon=REAGENT" rel="nofollow"&gt;Learn Re-frame Pro&lt;/a&gt; (Affiliate link, $30 discount)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://purelyfunctional.tv/guide/reagent/" rel="nofollow"&gt;purelyfunctional.tv &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://lambdaisland.com/collections/react-reagent-re-frame" rel="nofollow"&gt;Lambda Island Videos&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Usage&lt;/h3&gt;
&lt;p&gt;To create a new Reagent project using &lt;a href="http://leiningen.org/" rel="nofollow"&gt;Leiningen&lt;/a&gt; template simply run:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;lein new reagent myproject
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you wish to only create the assets for ClojureScript without a Clojure backend then do the following instead:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;lein new reagent-frontend myproject
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will setup a new Reagent project with some reasonable defaults, see here for more &lt;a href="https://github.com/reagent-project/reagent-template"&gt;details&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To use Reagent in an existing project you add this to your dependencies in &lt;code&gt;project.clj&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://clojars.org/reagent" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/f6baff29ae89778c8b04949509bf21d0ddbd005e/687474703a2f2f636c6f6a6172732e6f72672f72656167656e742f6c61746573742d76657273696f6e2e737667" alt="Clojars Project" data-canonical-src="http://clojars.org/reagent/latest-version.svg" style="max-width:100%;"&gt;&lt;/a&gt; &lt;br&gt;
&lt;a href="https://circleci.com/gh/reagent-project/reagent" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/6ff69ee723e4781a137a2ec49df44f54d7d1b624/68747470733a2f2f636972636c6563692e636f6d2f67682f72656167656e742d70726f6a6563742f72656167656e742e7376673f7374796c653d737667" alt="CircleCI" data-canonical-src="https://circleci.com/gh/reagent-project/reagent.svg?style=svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is all you need to do if you want the standard version of React. If you want to use your own build of React (or React from a CDN), you have to use &lt;code&gt;:exclusions&lt;/code&gt; variant of the dependency, and also provide &lt;code&gt;react&lt;/code&gt; and &lt;code&gt;react-dom&lt;/code&gt; namespaces (by creating &lt;code&gt;.cljs&lt;/code&gt; files with just &lt;code&gt;ns&lt;/code&gt; form, or by adding your own &lt;code&gt;:foreign-libs&lt;/code&gt; entries).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[reagent "0.x.x" :exclusions [cljsjs/react cljsjs/react-dom]]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Examples&lt;/h2&gt;
&lt;p&gt;Reagent uses &lt;a href="https://github.com/weavejester/hiccup"&gt;Hiccup-like&lt;/a&gt; markup instead of React's sort-of html. It looks like this:&lt;/p&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;defn&lt;/span&gt; &lt;span class="pl-e"&gt;some-component&lt;/span&gt; []
  [&lt;span class="pl-c1"&gt;:div&lt;/span&gt;
   [&lt;span class="pl-c1"&gt;:h3&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;I am a component!&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]
   [&lt;span class="pl-c1"&gt;:p.someclass&lt;/span&gt;
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;I have &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; [&lt;span class="pl-c1"&gt;:strong&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;bold&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]
    [&lt;span class="pl-c1"&gt;:span&lt;/span&gt; {&lt;span class="pl-c1"&gt;:style&lt;/span&gt; {&lt;span class="pl-c1"&gt;:color&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;red&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}} &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt; and red&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt; text.&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]])&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Reagent extends standard Hiccup in one way: it is possible to "squeeze" elements together by using a &lt;code&gt;&amp;gt;&lt;/code&gt; character.&lt;/p&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;[&lt;span class="pl-c1"&gt;:div&lt;/span&gt;
  [&lt;span class="pl-c1"&gt;:p&lt;/span&gt;
    [&lt;span class="pl-c1"&gt;:b&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Nested Element&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]]]&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;can be written as:&lt;/p&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;[&lt;span class="pl-c1"&gt;:div&amp;gt;p&amp;gt;b&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Nested Element&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Since version 0.8:&lt;/strong&gt; The &lt;code&gt;:class&lt;/code&gt; attribute also supports collections of classes, and nil values are removed:&lt;/p&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;[&lt;span class="pl-c1"&gt;:div&lt;/span&gt; {&lt;span class="pl-c1"&gt;:class&lt;/span&gt; [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;a-class&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; (&lt;span class="pl-k"&gt;when&lt;/span&gt; active? &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;active&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;b-class&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]}]&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;You can use one component inside another:&lt;/p&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;defn&lt;/span&gt; &lt;span class="pl-e"&gt;calling-component&lt;/span&gt; []
  [&lt;span class="pl-c1"&gt;:div&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Parent component&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
   [some-component]])&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And pass properties from one component to another:&lt;/p&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;defn&lt;/span&gt; &lt;span class="pl-e"&gt;child&lt;/span&gt; [name]
  [&lt;span class="pl-c1"&gt;:p&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Hi, I am &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; name])

(&lt;span class="pl-k"&gt;defn&lt;/span&gt; &lt;span class="pl-e"&gt;childcaller&lt;/span&gt; []
  [child &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Foo Bar&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;])&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You mount the component into the DOM like this:&lt;/p&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;defn&lt;/span&gt; &lt;span class="pl-e"&gt;mountit&lt;/span&gt; []
  (&lt;span class="pl-en"&gt;r/render&lt;/span&gt; [childcaller]
            (&lt;span class="pl-en"&gt;.-body&lt;/span&gt; js/document)))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;assuming we have imported Reagent like this:&lt;/p&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;ns&lt;/span&gt; &lt;span class="pl-e"&gt;example&lt;/span&gt;
  (&lt;span class="pl-c1"&gt;:require&lt;/span&gt; [reagent.core &lt;span class="pl-c1"&gt;:as&lt;/span&gt; r]))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;State is handled using Reagent's version of &lt;code&gt;atom&lt;/code&gt;, like this:&lt;/p&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;defonce&lt;/span&gt; &lt;span class="pl-e"&gt;click-count&lt;/span&gt; (&lt;span class="pl-en"&gt;r/atom&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt;))

(&lt;span class="pl-k"&gt;defn&lt;/span&gt; &lt;span class="pl-e"&gt;state-ful-with-atom&lt;/span&gt; []
  [&lt;span class="pl-c1"&gt;:div&lt;/span&gt; {&lt;span class="pl-c1"&gt;:on-click&lt;/span&gt; #(&lt;span class="pl-en"&gt;swap!&lt;/span&gt; click-count inc)}
   &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;I have been clicked &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; @click-count &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt; times.&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;])&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Any component that dereferences a &lt;code&gt;reagent.core/atom&lt;/code&gt; will be automatically re-rendered.&lt;/p&gt;
&lt;p&gt;If you want do some setting up when the component is first created, the component function can return a new function that will be called to do the actual rendering:&lt;/p&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;defn&lt;/span&gt; &lt;span class="pl-e"&gt;timer-component&lt;/span&gt; []
  (&lt;span class="pl-k"&gt;let&lt;/span&gt; [seconds-elapsed (&lt;span class="pl-en"&gt;r/atom&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt;)]
    (&lt;span class="pl-k"&gt;fn&lt;/span&gt; []
      (&lt;span class="pl-en"&gt;js/setTimeout&lt;/span&gt; #(&lt;span class="pl-en"&gt;swap!&lt;/span&gt; seconds-elapsed inc) &lt;span class="pl-c1"&gt;1000&lt;/span&gt;)
      [&lt;span class="pl-c1"&gt;:div&lt;/span&gt;
       &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Seconds Elapsed: &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; @seconds-elapsed])))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This way you can avoid using React's lifecycle callbacks like &lt;code&gt;getInitialState&lt;/code&gt; and &lt;code&gt;componentWillMount&lt;/code&gt; most of the time.&lt;/p&gt;
&lt;p&gt;But you can still use them if you want to, either using &lt;code&gt;reagent.core/create-class&lt;/code&gt; or by attaching meta-data to a component function:&lt;/p&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;defonce&lt;/span&gt; &lt;span class="pl-e"&gt;my-html&lt;/span&gt; (&lt;span class="pl-en"&gt;r/atom&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))

(&lt;span class="pl-k"&gt;defn&lt;/span&gt; &lt;span class="pl-e"&gt;plain-component&lt;/span&gt; []
  [&lt;span class="pl-c1"&gt;:p&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;My html is &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; @my-html])

(&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-e"&gt;component-with-callback&lt;/span&gt;
  (&lt;span class="pl-en"&gt;with-meta&lt;/span&gt; plain-component
    {&lt;span class="pl-c1"&gt;:component-did-mount&lt;/span&gt;
     (&lt;span class="pl-k"&gt;fn&lt;/span&gt; [this]
       (&lt;span class="pl-en"&gt;reset!&lt;/span&gt; my-html (&lt;span class="pl-en"&gt;.-innerHTML&lt;/span&gt; (&lt;span class="pl-en"&gt;reagent/dom-node&lt;/span&gt; this))))}))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;See the examples directory for more examples.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-performance" class="anchor" aria-hidden="true" href="#performance"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Performance&lt;/h2&gt;
&lt;p&gt;React is pretty darn fast, and so is Reagent. It should even be faster than plain old javascript React a lot of the time, since ClojureScript allows us to skip a lot of unnecessary rendering (through judicious use of React's &lt;code&gt;shouldComponentUpdate&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;The ClojureScript overhead is kept down, thanks to lots of caching.&lt;/p&gt;
&lt;p&gt;Code size is a little bigger than React.js, but still quite small. The todomvc example clocks in at roughly 79K gzipped, using advanced compilation.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-about" class="anchor" aria-hidden="true" href="#about"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;About&lt;/h2&gt;
&lt;p&gt;The idea and some of the code for making components atom-like comes from &lt;a href="https://github.com/piranha/pump"&gt;pump&lt;/a&gt;. The reactive-atom idea (and some code) comes from &lt;a href="https://github.com/lynaghk/reflex"&gt;reflex&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The license is MIT.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>reagent-project</author><guid isPermaLink="false">https://github.com/reagent-project/reagent</guid><pubDate>Thu, 12 Dec 2019 00:01:00 GMT</pubDate></item></channel></rss>