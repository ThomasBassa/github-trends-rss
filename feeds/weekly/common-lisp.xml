<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>GitHub Trending: Common Lisp, This week</title><link>https://github.com/trending/common-lisp?since=weekly</link><description>The top repositories on GitHub for common-lisp, measured weekly</description><pubDate>Wed, 12 Feb 2020 01:06:38 GMT</pubDate><lastBuildDate>Wed, 12 Feb 2020 01:06:38 GMT</lastBuildDate><generator>PyRSS2Gen-1.1.0</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><ttl>720</ttl><item><title>phantomics/april #1 in Common Lisp, This week</title><link>https://github.com/phantomics/april</link><description>&lt;p&gt;&lt;i&gt;The APL programming language (a subset thereof) compiling to Common Lisp.&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;
&lt;h1&gt;&lt;a id="user-content-april" class="anchor" aria-hidden="true" href="#april"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;April&lt;/h1&gt;

&lt;h4&gt;&lt;a id="user-content-array-programming-re-imagined-in-lisp" class="anchor" aria-hidden="true" href="#array-programming-re-imagined-in-lisp"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Array Programming Re-Imagined in Lisp&lt;/h4&gt;
&lt;hr&gt;
&lt;p&gt;Ken Iverson's masterpiece reflected in the medium of Lisp.&lt;/p&gt;
&lt;p&gt;April compiles a subset of the APL programming language into Common Lisp. Leveraging Lisp's powerful macros and numeric processing faculties, it brings APL's expressive potential to bear for Lisp developers. Replace hundreds of lines of number-crunching code with a single line of APL.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-why-april" class="anchor" aria-hidden="true" href="#why-april"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Why April?&lt;/h2&gt;
&lt;p&gt;APL veritably hums with algorithmic power. As a handful of characters run past the lexer, vast fields of data grow, morph and distil to reveal their secrets. However, APL has hitherto dwelt in an ivory tower, secluded inside monolithic runtime environments. If you have a store of data you'd like to use with APL, getting it there can be an ordeal. Like hauling tons of cargo on donkeys' backs through a narrow mountain pass, it's not fun, and the prospect of it has ended many discussions of APL before they could begin.&lt;/p&gt;
&lt;p&gt;But no longer. Lisp is the great connector of the software world, digesting and transforming semantic patterns in much the same way that APL transforms numeric patterns. With APL inside of Lisp, databases, streams, binary files and other media are just a few lines of code away from processing with APL.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-automatic-installation" class="anchor" aria-hidden="true" href="#automatic-installation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Automatic Installation&lt;/h2&gt;
&lt;p&gt;April is supplied by the Quicklisp library manager, so the easiest way to install April is through Quicklisp. April depends on Common Lisp, ASDF and Quicklisp. It has been tested with Steel Bank Common Lisp (SBCL), Clozure Common Lisp (CCL), Embeddable Common Lisp (ECL), Armed Bear Common Lisp (ABCL) and LispWorks.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Some special configuration may be needed to use April with the LispWorks IDE due to the use of UTF-8 characters. &lt;a href="./lispworks-howto.md"&gt;Click here for a guide to configuring LispWorks for compatibility with April.&lt;/a&gt; Currently April can only be used with the LispWorks IDE, not the CLI environment, as the LispWorks CLI edition does not support UTF-8.&lt;/p&gt;
&lt;p&gt;To install April with Quicklisp, evaluate:&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(ql:quickload 'april)&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-manual-installation" class="anchor" aria-hidden="true" href="#manual-installation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Manual Installation&lt;/h2&gt;
&lt;p&gt;If you'd like to install April manually from this repository, you can follow these instructions.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-cloning-the-repository" class="anchor" aria-hidden="true" href="#cloning-the-repository"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Cloning the Repository&lt;/h3&gt;
&lt;p&gt;First, clone the repository to a location on your system. For this example, let's say you cloned it to the directory ~/mystuff/april.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-preparing-quicklisp" class="anchor" aria-hidden="true" href="#preparing-quicklisp"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Preparing Quicklisp&lt;/h3&gt;
&lt;p&gt;Enter your Quicklisp local-projects directory (usually ~/quicklisp/local-projects) and create a symbolic link to the directory where you cloned the April repository. For example, if you cloned the repo to ~/mystuff/april and your Quicklisp directory is ~/quicklisp/, enter:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd ~/quicklisp/local-projects
ln -s ~/mystuff/april
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-installing-dependencies" class="anchor" aria-hidden="true" href="#installing-dependencies"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installing Dependencies&lt;/h3&gt;
&lt;p&gt;To complete the installation, just start a Common Lisp REPL and enter:&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(ql:quickload 'april)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will download and install April's dependencies, and with that the package will be built and ready.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-apl-functions-and-operators" class="anchor" aria-hidden="true" href="#apl-functions-and-operators"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;APL Functions and Operators&lt;/h2&gt;
&lt;p&gt;The APL language uses single characters to represent its primitive functions and operators. Most of these symbols are not part of the standard ASCII character set but are unique to APL. To see a list of the glyphs that are supported by April, visit the link below.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-see-the-complete-april-apl-lexicon-here" class="anchor" aria-hidden="true" href="#see-the-complete-april-apl-lexicon-here"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="./lexicon.md"&gt;See the complete April APL lexicon here.&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Some APL functions and operators won't be added to April since they don't make sense for April's design as a compiler from APL to Lisp. Others may be added in the future. &lt;a href="#whats-not-planned-for-implementation"&gt;See the list of features not implemented here.&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-getting-to-know-apl" class="anchor" aria-hidden="true" href="#getting-to-know-apl"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Getting to Know APL&lt;/h2&gt;
&lt;p&gt;A full guide to the APL language is far beyond the scope of this file, but here are links to some good sources.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://vector.org.uk/art10011550" rel="nofollow"&gt;A high-level introduction to APL.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://microapl.com/APL/tutorial_contents.html" rel="nofollow"&gt;This is a detailed language tutorial covering most of the functions and operators in April.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.eecg.toronto.edu/~jzhu/csc326/readings/iverson.pdf" rel="nofollow"&gt;The original paper by Ken Iverson, creator of APL, detailing the language's underlying philosophy.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you would like a quick tour of the language, April includes a function that will print demos of all the commands and many APL syntax features. To see the demos, enter:&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;* (april (demo))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The * indicates a REPL prompt. Prepare for a long read. The demo content that gets printed will tell you the name(s) of the operations that correspond to each symbol and will hopefully give you some idea of what each one does.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-how-to-enter-apl-characters" class="anchor" aria-hidden="true" href="#how-to-enter-apl-characters"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;How to Enter APL Characters&lt;/h3&gt;
&lt;p&gt;In order to write APL programs you'll need a way to use the language's special character set.&lt;/p&gt;
&lt;p&gt;&lt;a href="#enabling-apl-input-in-emacs"&gt;Click here for information on enabling APL input within Emacs.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#enabling-apl-input-in-vim"&gt;Click here for information on enabling APL input within Vim.&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-basic-evaluation-april-and-april-p" class="anchor" aria-hidden="true" href="#basic-evaluation-april-and-april-p"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Basic Evaluation: (april) and (april-p)&lt;/h2&gt;
&lt;p&gt;Evaluating an APL expression is as simple as:&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;* (april-p &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;1+2 3 4&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt;
#(&lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As above, the * indicates a REPL prompt and the text below is the expression's output.&lt;/p&gt;
&lt;p&gt;The macro &lt;code&gt;(april-p)&lt;/code&gt; will evaluate any APL string passed to it as the sole argument, returning the final result. Using &lt;code&gt;(april-p)&lt;/code&gt; will also produce a printout of the output in APL's traditional array printing style, which appears before the actual output value. You can see above how the &lt;code&gt;3 4 5&lt;/code&gt; is printed out before the value &lt;code&gt;#(3 4 5)&lt;/code&gt;. APL-style printed arrays are easier to read than Lisp's style of printing arrays; APL can use a simpler style to express its output because it doesn't have as many different data types and structures as Lisp.&lt;/p&gt;
&lt;p&gt;If you don't need to see the printout, you can use the plain &lt;code&gt;(april)&lt;/code&gt; macro. Like this:&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;* (april &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;1+2 3 4&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
#(&lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You should use &lt;code&gt;(april)&lt;/code&gt; if you're using April to do calculations inside of a larger program and don't need the printout. Otherwise, especially if you're working with large data sets, the system may consume significant resources printing out the results of calculations.&lt;/p&gt;
&lt;p&gt;Also note that if the output of an April expression is a single number, &lt;code&gt;(april-p)&lt;/code&gt; will not print it since the Lisp representation of the number will look the same or very similar. For example:&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;* (april-p &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;1+2&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-c1"&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Since the result of 1+2 is 3, a single number, no value printout is provided.&lt;/p&gt;
&lt;p&gt;Setting state properties for the APL instance can be done like this:&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;* (april-p (with (:state :count-from &lt;span class="pl-c1"&gt;0&lt;/span&gt;)) &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;⍳9&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-c1"&gt;0&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-c1"&gt;6&lt;/span&gt; &lt;span class="pl-c1"&gt;7&lt;/span&gt; &lt;span class="pl-c1"&gt;8&lt;/span&gt;
#(&lt;span class="pl-c1"&gt;0&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-c1"&gt;6&lt;/span&gt; &lt;span class="pl-c1"&gt;7&lt;/span&gt; &lt;span class="pl-c1"&gt;8&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Instead of an APL string, the first argument to &lt;code&gt;(april)&lt;/code&gt; or &lt;code&gt;(april-p)&lt;/code&gt; may be a list of parameters for the APL environment. The APL expression is then passed in the second argument.&lt;/p&gt;
&lt;p&gt;For example, you can use the &lt;code&gt;:count-from&lt;/code&gt; parameter to determine whether the APL instance will start counting from 0 or 1. We'll get into more detail on how these parameters work later.&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;* (april-p (with (:state :count-from &lt;span class="pl-c1"&gt;1&lt;/span&gt;)) &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;⍳9&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-c1"&gt;6&lt;/span&gt; &lt;span class="pl-c1"&gt;7&lt;/span&gt; &lt;span class="pl-c1"&gt;8&lt;/span&gt; &lt;span class="pl-c1"&gt;9&lt;/span&gt;
#(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-c1"&gt;6&lt;/span&gt; &lt;span class="pl-c1"&gt;7&lt;/span&gt; &lt;span class="pl-c1"&gt;8&lt;/span&gt; &lt;span class="pl-c1"&gt;9&lt;/span&gt;)

* (april-p (with (:state :count-from &lt;span class="pl-c1"&gt;0&lt;/span&gt;)) &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;⍳9&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-c1"&gt;0&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-c1"&gt;6&lt;/span&gt; &lt;span class="pl-c1"&gt;7&lt;/span&gt; &lt;span class="pl-c1"&gt;8&lt;/span&gt;
#(&lt;span class="pl-c1"&gt;0&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-c1"&gt;6&lt;/span&gt; &lt;span class="pl-c1"&gt;7&lt;/span&gt; &lt;span class="pl-c1"&gt;8&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;More APL expressions:&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;* (april-p &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;⍳12&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-c1"&gt;6&lt;/span&gt; &lt;span class="pl-c1"&gt;7&lt;/span&gt; &lt;span class="pl-c1"&gt;8&lt;/span&gt; &lt;span class="pl-c1"&gt;9&lt;/span&gt; &lt;span class="pl-c1"&gt;10&lt;/span&gt; &lt;span class="pl-c1"&gt;11&lt;/span&gt; &lt;span class="pl-c1"&gt;12&lt;/span&gt;
#(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-c1"&gt;6&lt;/span&gt; &lt;span class="pl-c1"&gt;7&lt;/span&gt; &lt;span class="pl-c1"&gt;8&lt;/span&gt; &lt;span class="pl-c1"&gt;9&lt;/span&gt; &lt;span class="pl-c1"&gt;10&lt;/span&gt; &lt;span class="pl-c1"&gt;11&lt;/span&gt; &lt;span class="pl-c1"&gt;12&lt;/span&gt;)

* (april-p &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;3 4⍴⍳12&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-c1"&gt;1&lt;/span&gt;  &lt;span class="pl-c1"&gt;2&lt;/span&gt;  &lt;span class="pl-c1"&gt;3&lt;/span&gt;  &lt;span class="pl-c1"&gt;4&lt;/span&gt;
&lt;span class="pl-c1"&gt;5&lt;/span&gt;  &lt;span class="pl-c1"&gt;6&lt;/span&gt;  &lt;span class="pl-c1"&gt;7&lt;/span&gt;  &lt;span class="pl-c1"&gt;8&lt;/span&gt;
&lt;span class="pl-c1"&gt;9&lt;/span&gt; &lt;span class="pl-c1"&gt;10&lt;/span&gt; &lt;span class="pl-c1"&gt;11&lt;/span&gt; &lt;span class="pl-c1"&gt;12&lt;/span&gt;
&lt;span class="pl-c1"&gt;#2A&lt;/span&gt;((&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;) (&lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-c1"&gt;6&lt;/span&gt; &lt;span class="pl-c1"&gt;7&lt;/span&gt; &lt;span class="pl-c1"&gt;8&lt;/span&gt;) (&lt;span class="pl-c1"&gt;9&lt;/span&gt; &lt;span class="pl-c1"&gt;10&lt;/span&gt; &lt;span class="pl-c1"&gt;11&lt;/span&gt; &lt;span class="pl-c1"&gt;12&lt;/span&gt;))

* (april-p &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;+/3 4⍴⍳12&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-c1"&gt;10&lt;/span&gt; &lt;span class="pl-c1"&gt;26&lt;/span&gt; &lt;span class="pl-c1"&gt;42&lt;/span&gt;
#(&lt;span class="pl-c1"&gt;10&lt;/span&gt; &lt;span class="pl-c1"&gt;26&lt;/span&gt; &lt;span class="pl-c1"&gt;42&lt;/span&gt;)

* (april-p &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;+⌿3 4⍴⍳12&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-c1"&gt;15&lt;/span&gt; &lt;span class="pl-c1"&gt;18&lt;/span&gt; &lt;span class="pl-c1"&gt;21&lt;/span&gt; &lt;span class="pl-c1"&gt;24&lt;/span&gt;
#(&lt;span class="pl-c1"&gt;15&lt;/span&gt; &lt;span class="pl-c1"&gt;18&lt;/span&gt; &lt;span class="pl-c1"&gt;21&lt;/span&gt; &lt;span class="pl-c1"&gt;24&lt;/span&gt;)

* (april-p &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;+/[1]3 4⍴⍳12&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-c1"&gt;15&lt;/span&gt; &lt;span class="pl-c1"&gt;18&lt;/span&gt; &lt;span class="pl-c1"&gt;21&lt;/span&gt; &lt;span class="pl-c1"&gt;24&lt;/span&gt;
#(&lt;span class="pl-c1"&gt;15&lt;/span&gt; &lt;span class="pl-c1"&gt;18&lt;/span&gt; &lt;span class="pl-c1"&gt;21&lt;/span&gt; &lt;span class="pl-c1"&gt;24&lt;/span&gt;)

* (april-p &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;⌽3 4⍴⍳12&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
 &lt;span class="pl-c1"&gt;4&lt;/span&gt;  &lt;span class="pl-c1"&gt;3&lt;/span&gt;  &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;
 &lt;span class="pl-c1"&gt;8&lt;/span&gt;  &lt;span class="pl-c1"&gt;7&lt;/span&gt;  &lt;span class="pl-c1"&gt;6&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt;
&lt;span class="pl-c1"&gt;12&lt;/span&gt; &lt;span class="pl-c1"&gt;11&lt;/span&gt; &lt;span class="pl-c1"&gt;10&lt;/span&gt; &lt;span class="pl-c1"&gt;9&lt;/span&gt;
&lt;span class="pl-c1"&gt;#2A&lt;/span&gt;((&lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;) (&lt;span class="pl-c1"&gt;8&lt;/span&gt; &lt;span class="pl-c1"&gt;7&lt;/span&gt; &lt;span class="pl-c1"&gt;6&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt;) (&lt;span class="pl-c1"&gt;12&lt;/span&gt; &lt;span class="pl-c1"&gt;11&lt;/span&gt; &lt;span class="pl-c1"&gt;10&lt;/span&gt; &lt;span class="pl-c1"&gt;9&lt;/span&gt;))

* (april-p &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;1⌽3 4⍴⍳12&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
 &lt;span class="pl-c1"&gt;2&lt;/span&gt;  &lt;span class="pl-c1"&gt;3&lt;/span&gt;  &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;
 &lt;span class="pl-c1"&gt;6&lt;/span&gt;  &lt;span class="pl-c1"&gt;7&lt;/span&gt;  &lt;span class="pl-c1"&gt;8&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt;
&lt;span class="pl-c1"&gt;10&lt;/span&gt; &lt;span class="pl-c1"&gt;11&lt;/span&gt; &lt;span class="pl-c1"&gt;12&lt;/span&gt; &lt;span class="pl-c1"&gt;9&lt;/span&gt;
&lt;span class="pl-c1"&gt;#2A&lt;/span&gt;((&lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;) (&lt;span class="pl-c1"&gt;6&lt;/span&gt; &lt;span class="pl-c1"&gt;7&lt;/span&gt; &lt;span class="pl-c1"&gt;8&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt;) (&lt;span class="pl-c1"&gt;10&lt;/span&gt; &lt;span class="pl-c1"&gt;11&lt;/span&gt; &lt;span class="pl-c1"&gt;12&lt;/span&gt; &lt;span class="pl-c1"&gt;9&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-unique-language-features-in-april" class="anchor" aria-hidden="true" href="#unique-language-features-in-april"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Unique Language Features in April&lt;/h2&gt;
&lt;p&gt;For the most part, April's syntax and functions follow standard APL conventions. But there are a few areas where April differs from typical APL implementations along with some unique language features. Most notably:&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; k-style if statements&lt;/span&gt;
* (april &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;x←5 ⋄ $[x&amp;gt;3;8;12]&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-c1"&gt;8&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; k-style functions with any number of named arguments&lt;/span&gt;
* (april &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;monthlyPayment←{[amt;int;len] (len÷⍨amt×int×0.1)+amt÷len} ⋄ monthlyPayment[5000;0.8;12]&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-c1"&gt;450.0&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; numbered branch points instantiated with →⎕ syntax&lt;/span&gt;
* (april &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;x←1 ⋄ →1+1 ⋄ x×←11 ⋄ 1→⎕ ⋄ x×←3 ⋄ 2→⎕ ⋄ x×←5 ⋄ 3→⎕ ⋄ x×←7&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-c1"&gt;35&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; symbol-referenced branch points and a branch function with expression-determined branch symbol choice&lt;/span&gt;
* (april &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;x←1 ⋄ (5-3)→two three ⋄ x×←11 ⋄ one→⎕ ⋄ x×←3 ⋄ two→⎕ ⋄ x×←5 ⋄ three→⎕ ⋄ x×←7&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-c1"&gt;7&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The biggest difference between April and other APLs lies in its implementation of the &lt;code&gt;→ branch&lt;/code&gt; function, as shown in the latter two examples above. April also allows you to use if statements and functions with any number of named arguments in the style of Arthur Whitney's k programming language.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-strings-and-escaped-quotes" class="anchor" aria-hidden="true" href="#strings-and-escaped-quotes"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Strings and Escaped Quotes&lt;/h3&gt;
&lt;p&gt;In April, either single or double quotes can be used to enclose character strings:&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;* (april &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;'abc','def'&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;abcdef&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;

* (april &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-cce"&gt;\"&lt;/span&gt;ghi&lt;span class="pl-cce"&gt;\"&lt;/span&gt;,&lt;span class="pl-cce"&gt;\"&lt;/span&gt;jkl&lt;span class="pl-cce"&gt;\"&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;ghijkl&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that you must use backslashes to escape double quotes used within Lisp strings, making double quotes a less desirable choice unless you're loading April code from files using &lt;code&gt;april-load&lt;/code&gt;. In order to escape quote characters within an April string, you can either enter a backslash before the quote character, as in Lisp and many other languages, or enter the quote character twice in the traditional APL style. For example:&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;* (april &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;'&lt;span class="pl-cce"&gt;\'&lt;/span&gt;abc'&lt;span class="pl-cce"&gt;\'&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;'abc'&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;

* (april &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;'''abc'''&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;'abc'&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-parameter-reference" class="anchor" aria-hidden="true" href="#parameter-reference"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Parameter reference&lt;/h2&gt;
&lt;p&gt;When &lt;code&gt;(april)&lt;/code&gt; or &lt;code&gt;(april-p)&lt;/code&gt; is called, you may pass it either a single text string:&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;* (april-p &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;1+1 2 3&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or a parameter object followed by a text string:&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;* (april-p (with (:state :count-from &lt;span class="pl-c1"&gt;0&lt;/span&gt;)) &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;⍳9&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This section details the parameters you can pass to April.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-test" class="anchor" aria-hidden="true" href="#test"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;(test)&lt;/h3&gt;
&lt;p&gt;To run April's test suite, just enter:&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;* (april (test))&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-demo" class="anchor" aria-hidden="true" href="#demo"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;(demo)&lt;/h3&gt;
&lt;p&gt;As mentioned before, you can see demos of April's functions with:&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;* (april (demo))&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-with" class="anchor" aria-hidden="true" href="#with"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;(with)&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;(with)&lt;/code&gt; is the workhorse of April parameters, allowing you to configure your April instance in many ways. The most common sub-parameter passed via &lt;code&gt;(with)&lt;/code&gt; is &lt;code&gt;(:state)&lt;/code&gt;. To wit:&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;* (april (with (:state :count-from &lt;span class="pl-c1"&gt;0&lt;/span&gt;
                       :in ((a &lt;span class="pl-c1"&gt;3&lt;/span&gt;) (b &lt;span class="pl-c1"&gt;5&lt;/span&gt;))
                       :out (a c)))
         &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;c←a+⍳b&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-c1"&gt;3&lt;/span&gt;
#(&lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-c1"&gt;6&lt;/span&gt; &lt;span class="pl-c1"&gt;7&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-state-sub-parameters" class="anchor" aria-hidden="true" href="#state-sub-parameters"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;(:state) sub-parameters&lt;/h3&gt;
&lt;p&gt;Let's learn some more about what's going on in that code. The sub-parameters of &lt;code&gt;(:state)&lt;/code&gt; are:&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-count-from" class="anchor" aria-hidden="true" href="#count-from"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;:count-from&lt;/h4&gt;
&lt;p&gt;Sets the index from which April counts. Almost always set to 0 or 1. The default value is 1. In the code above, &lt;code&gt;⍳b&lt;/code&gt; with &lt;code&gt;b&lt;/code&gt; equal to 5 counts from 0 to 4, whereas with the default :count-from value of 1, &lt;code&gt;⍳b&lt;/code&gt; would count from 1 to 5.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-in" class="anchor" aria-hidden="true" href="#in"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;:in&lt;/h4&gt;
&lt;p&gt;Passes variables into the April instance that may be used when evaluating the subsequent expressions. In the example above, the variables &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; are set in the code, with values 1 and 2 respectively. You can use &lt;code&gt;:in&lt;/code&gt; to pass values from Lisp into the April instance.&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;* (april-p (with (:state :in ((a &lt;span class="pl-c1"&gt;5&lt;/span&gt;) (b &lt;span class="pl-c1"&gt;10&lt;/span&gt;))))
           &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;1+2+a×b&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-c1"&gt;53&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Please note that April variables follow a stricter naming convention than Lisp variables. When naming the input variables, only alphanumeric characters, underscores and dashes may be used. In keeping with APL tradition, the delta/triangle characters ∆ and ⍙ can be used in variable names as well. Punctuation marks like ?, &amp;gt;, . and ! may not be used as they have separate meanings in April.&lt;/p&gt;
&lt;p&gt;These characters are allowed in variable names within April:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_∆⍙
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These variable names are ok for use with the &lt;code&gt;:in&lt;/code&gt; parameter:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;a var my_var another-var
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These are not ok:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;true! this-&amp;gt;that pass/fail? var.name
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you use dashes in the names of Lisp variables you pass into April, note that inside April they will be converted to camel case. For example:&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;* (april-p (with (:state :in ((one-var &lt;span class="pl-c1"&gt;2&lt;/span&gt;)
                              (other-var &lt;span class="pl-c1"&gt;5&lt;/span&gt;))))
           &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;oneVar×otherVar+5&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-c1"&gt;20&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The dash character &lt;code&gt;-&lt;/code&gt; is used to denote the subtraction function inside April, so you may not use dashes in variable names within the language.&lt;/p&gt;
&lt;p&gt;One more caveat: it's best to avoid using input variable names with a dash before a number or other non-letter symbol. The dash will be removed and the character following it will cannot be capitalized so information will have been lost. For example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;my-var-2 → myVar2
my-var-∆ → myVar∆
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;&lt;a id="user-content-out" class="anchor" aria-hidden="true" href="#out"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;:out&lt;/h4&gt;
&lt;p&gt;Lists variables to be output when the code has finished evaluating. By default, the value of the last evaluated expression is passed back after an April evaluation is finished. For example:&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;* (april-p &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;1+2&lt;/span&gt;
&lt;span class="pl-s"&gt;            2+3&lt;/span&gt;
&lt;span class="pl-s"&gt;            3+4&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-c1"&gt;7&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The last value calculated is displayed. The &lt;code&gt;:out&lt;/code&gt; sub-parameter allows you to list a set of variables that whose values will be returned once evaluation is complete. For example:&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;* (april-p (with (:state :out (a b c)))
           &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;a←9+2&lt;/span&gt;
&lt;span class="pl-s"&gt;            b←5+3&lt;/span&gt;
&lt;span class="pl-s"&gt;            c←2×9&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-c1"&gt;11&lt;/span&gt;
&lt;span class="pl-c1"&gt;8&lt;/span&gt;
&lt;span class="pl-c1"&gt;18&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content-index-origin" class="anchor" aria-hidden="true" href="#index-origin"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;:index-origin&lt;/h4&gt;
&lt;p&gt;This is another, more technical name for the &lt;code&gt;:count-from&lt;/code&gt; sub-parameter. You can use it instead of &lt;code&gt;:count-from&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;* (april-p (with (:state :index-origin &lt;span class="pl-c1"&gt;0&lt;/span&gt;)) &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;⍳9&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-c1"&gt;0&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-c1"&gt;6&lt;/span&gt; &lt;span class="pl-c1"&gt;7&lt;/span&gt; &lt;span class="pl-c1"&gt;8&lt;/span&gt;
#(&lt;span class="pl-c1"&gt;0&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-c1"&gt;6&lt;/span&gt; &lt;span class="pl-c1"&gt;7&lt;/span&gt; &lt;span class="pl-c1"&gt;8&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content-print-precision" class="anchor" aria-hidden="true" href="#print-precision"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;:print-precision&lt;/h4&gt;
&lt;p&gt;This controls the maximal precision at which April prints floating point numbers. Its default value is 10. For example:&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;* (april-p &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;○1 2 3&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-c1"&gt;3.141592654&lt;/span&gt; &lt;span class="pl-c1"&gt;6.283185307&lt;/span&gt; &lt;span class="pl-c1"&gt;9.424777961&lt;/span&gt;	
#(&lt;span class="pl-c1"&gt;3.&lt;/span&gt;141592653589793d0 &lt;span class="pl-c1"&gt;6.&lt;/span&gt;283185307179586d0 &lt;span class="pl-c1"&gt;9.&lt;/span&gt;42477796076938d0)

* (april-p (with (:state :print-precision &lt;span class="pl-c1"&gt;6&lt;/span&gt;)) &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;○1 2 3&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-c1"&gt;3.14159&lt;/span&gt; &lt;span class="pl-c1"&gt;6.28319&lt;/span&gt; &lt;span class="pl-c1"&gt;9.42478&lt;/span&gt;
#(&lt;span class="pl-c1"&gt;3.&lt;/span&gt;141592653589793d0 &lt;span class="pl-c1"&gt;6.&lt;/span&gt;283185307179586d0 &lt;span class="pl-c1"&gt;9.&lt;/span&gt;42477796076938d0)

* (april-p (with (:state :print-precision &lt;span class="pl-c1"&gt;3&lt;/span&gt;)) &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;○1 2 3&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-c1"&gt;3.14&lt;/span&gt; &lt;span class="pl-c1"&gt;6.28&lt;/span&gt; &lt;span class="pl-c1"&gt;9.42&lt;/span&gt;
#(&lt;span class="pl-c1"&gt;3.&lt;/span&gt;141592653589793d0 &lt;span class="pl-c1"&gt;6.&lt;/span&gt;283185307179586d0 &lt;span class="pl-c1"&gt;9.&lt;/span&gt;42477796076938d0)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that &lt;code&gt;:print-precision&lt;/code&gt; doesn't affect the Lisp values output by April, only the printed output.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-print-to" class="anchor" aria-hidden="true" href="#print-to"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;:print-to&lt;/h4&gt;
&lt;p&gt;When using &lt;code&gt;(april-p)&lt;/code&gt;, the formatted array content is output to the &lt;code&gt;*standard-output*&lt;/code&gt; stream. When using &lt;code&gt;(april)&lt;/code&gt;, no formatted output is printed. You can change this using the &lt;code&gt;:print-to&lt;/code&gt; sub-parameter. For example:&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;* (april (with (:state :print-to &lt;span class="pl-smi"&gt;*standard-output*&lt;/span&gt;)) &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;2 3⍴⍳9&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;
&lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-c1"&gt;6&lt;/span&gt;
&lt;span class="pl-c1"&gt;#2A&lt;/span&gt;((&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;) (&lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-c1"&gt;6&lt;/span&gt;))

* (april-p (with (:state :print-to &lt;span class="pl-c1"&gt;nil&lt;/span&gt;)) &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;2 3⍴⍳9&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-c1"&gt;#2A&lt;/span&gt;((&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;) (&lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-c1"&gt;6&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Using the &lt;code&gt;:print-to&lt;/code&gt; parameter effectively erases the distinction between &lt;code&gt;(april)&lt;/code&gt; and &lt;code&gt;(april-p)&lt;/code&gt;. The two different macros are provided as a courtesy so you don't need to pass a &lt;code&gt;:print-to&lt;/code&gt; parameter to get printed output. You can also pass a different stream than &lt;code&gt;*standard-output*&lt;/code&gt; to &lt;code&gt;:print-to&lt;/code&gt; to have the printed output directed there.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-output-printed" class="anchor" aria-hidden="true" href="#output-printed"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;:output-printed&lt;/h4&gt;
&lt;p&gt;When the &lt;code&gt;:output-printed&lt;/code&gt; sub-parameter is passed, the string of APL-formatted data that gets printed will also be returned as the last output value by the April invocation. For example:&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;* (april (with (:state :output-printed &lt;span class="pl-c1"&gt;t&lt;/span&gt;)) &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;2 3⍴⍳9&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-c1"&gt;#2A&lt;/span&gt;((&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;) (&lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-c1"&gt;6&lt;/span&gt;))
&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;1 2 3&lt;/span&gt;
&lt;span class="pl-s"&gt;4 5 6&lt;/span&gt;
&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you don't want to receive the Lisp value output by April and only want the formatted string as output, you can pass the &lt;code&gt;:only&lt;/code&gt; option to &lt;code&gt;:output-printed&lt;/code&gt;, like this:&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;* (april (with (:state :output-printed :only)) &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;2 3⍴⍳9&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;1 2 3&lt;/span&gt;
&lt;span class="pl-s"&gt;4 5 6&lt;/span&gt;
&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This way, the formatted string will be the only returned value.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-space-sub-parameter" class="anchor" aria-hidden="true" href="#space-sub-parameter"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;(:space) sub-parameter&lt;/h3&gt;
&lt;p&gt;If you want to create a persistent workspace where the functions and variables you've created are stored and can be used in multiple calls to April, use the &lt;code&gt;(:space)&lt;/code&gt; parameter. For example:&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;* (april-p (with (:space &lt;span class="pl-smi"&gt;*space1*&lt;/span&gt;)) &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;a←5+2 ⋄ b←3×9&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-c1"&gt;27&lt;/span&gt;

* (april-p (with (:space &lt;span class="pl-smi"&gt;*space1*&lt;/span&gt;)) &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;c←{⍵+2}&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-c1"&gt;#&amp;lt;FUNCTION&lt;/span&gt; ... &amp;gt;

* (april-p (with (:space &lt;span class="pl-smi"&gt;*space1*&lt;/span&gt;)) &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;c a+b&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-c1"&gt;36&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the above example, a workspace called &lt;code&gt;*space1*&lt;/code&gt; is created, two variables and a function are stored within it, and then the function is called on the sum of the variables. When you invoke the &lt;code&gt;(:space)&lt;/code&gt; parameter followed by a symbol that is not defined, the symbol is set to point to a dynamic variable containing a hash table that stores the workspace data.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-state-persistent-sub-parameters" class="anchor" aria-hidden="true" href="#state-persistent-sub-parameters"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;(:state-persistent) sub-parameters&lt;/h3&gt;
&lt;p&gt;You can use the &lt;code&gt;(:state-persistent)&lt;/code&gt; parameter to set state values within the workspace. It works like &lt;code&gt;(:state)&lt;/code&gt;, but the difference is that when you change the state using &lt;code&gt;(:state-persistent)&lt;/code&gt;, those changes will stay saved in the workspace until you reverse them, whereas the changes you make with &lt;code&gt;:state&lt;/code&gt; are lost once the following code is done evaluating.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;* (april-p (with (:state-persistent :count-from &lt;span class="pl-c1"&gt;0&lt;/span&gt;) (:space &lt;span class="pl-smi"&gt;*space1*&lt;/span&gt;)) &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;⍳7&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-c1"&gt;0&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-c1"&gt;6&lt;/span&gt;
#(&lt;span class="pl-c1"&gt;0&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-c1"&gt;6&lt;/span&gt;)

* (april-p (with (:space &lt;span class="pl-smi"&gt;*space1*&lt;/span&gt;)) &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;⍳7&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-c1"&gt;0&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-c1"&gt;6&lt;/span&gt;
#(&lt;span class="pl-c1"&gt;0&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-c1"&gt;6&lt;/span&gt;)

* (april-p (with (:space &lt;span class="pl-smi"&gt;*space2*&lt;/span&gt;)) &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;⍳7&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-c1"&gt;6&lt;/span&gt; &lt;span class="pl-c1"&gt;7&lt;/span&gt;
#(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-c1"&gt;6&lt;/span&gt; &lt;span class="pl-c1"&gt;7&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Did you notice that when switching to a different space, in this case &lt;code&gt;*space2*&lt;/code&gt;, the customized values are lost? Custom state settings affect only the specific workspace where they are set.&lt;/p&gt;
&lt;p&gt;You can use &lt;code&gt;(:state-persistent)&lt;/code&gt; to set persistent input variables that will stay available for each piece of code you run in your April instance. If these input variables refer to external Lisp variables, changing the external variables will change the values available to April. For example:&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;* (&lt;span class="pl-k"&gt;defvar&lt;/span&gt; &lt;span class="pl-smi"&gt;*dynamic-var*&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;)
&lt;span class="pl-smi"&gt;*DYNAMIC-VAR*&lt;/span&gt;

* (april-p (with (:state-persistent :in ((dyn-var &lt;span class="pl-smi"&gt;*dynamic-var*&lt;/span&gt;)))
                 (:space &lt;span class="pl-smi"&gt;*space1*&lt;/span&gt;))
           &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;dynVar⍟512&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-c1"&gt;9.0&lt;/span&gt;

* (&lt;span class="pl-c1"&gt;setq&lt;/span&gt; &lt;span class="pl-smi"&gt;*dynamic-var*&lt;/span&gt; &lt;span class="pl-c1"&gt;8&lt;/span&gt;)
&lt;span class="pl-c1"&gt;8&lt;/span&gt;

* (april-p (with (:space &lt;span class="pl-smi"&gt;*space1*&lt;/span&gt;)) &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;dynVar⍟512&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-c1"&gt;3.0&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-compile-only-parameter" class="anchor" aria-hidden="true" href="#compile-only-parameter"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;(:compile-only) parameter&lt;/h3&gt;
&lt;p&gt;If you just want to compile the code you enter into April without running it, use this option. For example:&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;* (april (with (:compile-only)) &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;1+1 2 3&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
(&lt;span class="pl-k"&gt;LET&lt;/span&gt;* ((INDEX-ORIGIN &lt;span class="pl-c1"&gt;1&lt;/span&gt;) (PRINT-PRECISION &lt;span class="pl-c1"&gt;10&lt;/span&gt;))
  (DECLARE (IGNORABLE INDEX-ORIGIN PRINT-PRECISION))
  (APL-OUTPUT
   (DISCLOSE-ATOM (APL-CALL + (SCALAR-FUNCTION +) (AVECTOR &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;) (AVECTOR &lt;span class="pl-c1"&gt;1&lt;/span&gt;)))
   :PRINT-PRECISION PRINT-PRECISION))&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-restore-defaults-parameter" class="anchor" aria-hidden="true" href="#restore-defaults-parameter"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;(:restore-defaults) parameter&lt;/h3&gt;
&lt;p&gt;You can use this parameter to clear a workspace and return it to its default state. For example, to clear a workspace called &lt;code&gt;*space1*&lt;/code&gt; enter:&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;* (april (with (:restore-defaults) (:space &lt;span class="pl-smi"&gt;*space1*&lt;/span&gt;)))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;All &lt;code&gt;:in&lt;/code&gt; and &lt;code&gt;:out&lt;/code&gt; values will be nullified, &lt;code&gt;:count-from&lt;/code&gt; will return to its default setting, etc.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-compact-function-calls-the-april-c-macro" class="anchor" aria-hidden="true" href="#compact-function-calls-the-april-c-macro"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Compact Function Calls: The (april-c) Macro&lt;/h2&gt;
&lt;p&gt;Want to invoke April functions on some variables with less code? You can use the &lt;code&gt;(april-c)&lt;/code&gt; macro. For example:&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;* (april-c &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;{⍺×⍵}&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;8&lt;/span&gt;)
&lt;span class="pl-c1"&gt;16&lt;/span&gt;

* (april-c &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;{[a;b;c;d] d↑c⍴a+b}&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-c1"&gt;6&lt;/span&gt; &lt;span class="pl-c1"&gt;10&lt;/span&gt;)
#(&lt;span class="pl-c1"&gt;8&lt;/span&gt; &lt;span class="pl-c1"&gt;8&lt;/span&gt; &lt;span class="pl-c1"&gt;8&lt;/span&gt; &lt;span class="pl-c1"&gt;8&lt;/span&gt; &lt;span class="pl-c1"&gt;8&lt;/span&gt; &lt;span class="pl-c1"&gt;8&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After the string where the April function is written, pass the variables that will be input to the function and you'll receive the result with no need for a long &lt;code&gt;(with (:state ...))&lt;/code&gt; clause. If you wish to pass parameters in a &lt;code&gt;(with)&lt;/code&gt; clause, you can still do it with &lt;code&gt;(april-c)&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;* (april-c (with (:state :count-from &lt;span class="pl-c1"&gt;0&lt;/span&gt;)) &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;{⍳⍵}&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;7&lt;/span&gt;)
#(&lt;span class="pl-c1"&gt;0&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-c1"&gt;6&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-sharing-scope-the-with-april-context-macro" class="anchor" aria-hidden="true" href="#sharing-scope-the-with-april-context-macro"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Sharing Scope: The (with-april-context) Macro&lt;/h2&gt;
&lt;p&gt;Perhaps you'd like to make multiple calls to April using the same workspace and other parameters and you don't want to have to enter the same parameters over and over again. The &lt;code&gt;(with-april-context)&lt;/code&gt; macro can help. For example:&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;* (with-april-context ((:space &lt;span class="pl-smi"&gt;*space1*&lt;/span&gt;) (:state :index-origin &lt;span class="pl-c1"&gt;0&lt;/span&gt;))
    (april &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;g←5&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    (april &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;g×3+⍳9&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
#(&lt;span class="pl-c1"&gt;15&lt;/span&gt; &lt;span class="pl-c1"&gt;20&lt;/span&gt; &lt;span class="pl-c1"&gt;25&lt;/span&gt; &lt;span class="pl-c1"&gt;30&lt;/span&gt; &lt;span class="pl-c1"&gt;35&lt;/span&gt; &lt;span class="pl-c1"&gt;40&lt;/span&gt; &lt;span class="pl-c1"&gt;45&lt;/span&gt; &lt;span class="pl-c1"&gt;50&lt;/span&gt; &lt;span class="pl-c1"&gt;55&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Inside the body of the &lt;code&gt;(with-april-context)&lt;/code&gt; macro, each of the &lt;code&gt;(april)&lt;/code&gt; invocations act as if they were passed the options &lt;code&gt;(with (:space *space1*) (:state :index-origin 0))&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;* (with-april-context ((:space &lt;span class="pl-smi"&gt;*space1*&lt;/span&gt;) (:state :index-origin &lt;span class="pl-c1"&gt;0&lt;/span&gt;))
    (april &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;x←⍳3&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    (april (with (:state :index-origin &lt;span class="pl-c1"&gt;1&lt;/span&gt;)) &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;x,⍳5&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
#(&lt;span class="pl-c1"&gt;0&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Options passed for one of the &lt;code&gt;(april)&lt;/code&gt; invocations inside the context will override the options for the context. Here, the second &lt;code&gt;(april)&lt;/code&gt; invocation has its index origin set to 1 which overrides the context's 0 value.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-console-output-using-the-quad-character" class="anchor" aria-hidden="true" href="#console-output-using-the-quad-character"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Console Output Using the Quad Character&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;(april-p)&lt;/code&gt; macro is one way to view the printed output of APL expressions. What if you want to see the result of an evaluation that occurs in the middle of your code instead of the end, or if you want to print the contents of multiple arrays within a single expression? At times like these, you can use the &lt;code&gt;⎕&lt;/code&gt; character, also called "quad." In APL, console output can be produced by "assigning" values to &lt;code&gt;⎕&lt;/code&gt; like this:&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;* (april &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;a←1 2 3 ⋄ b←3+⎕←2+a ⋄ ⎕←c←4+b ⋄ c+5&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt;
&lt;span class="pl-c1"&gt;10&lt;/span&gt; &lt;span class="pl-c1"&gt;11&lt;/span&gt; &lt;span class="pl-c1"&gt;12&lt;/span&gt;
#(&lt;span class="pl-c1"&gt;15&lt;/span&gt; &lt;span class="pl-c1"&gt;16&lt;/span&gt; &lt;span class="pl-c1"&gt;17&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Both of the values assigned to &lt;code&gt;⎕&lt;/code&gt; are printed in order before the expression's final result is output. Because &lt;code&gt;(april)&lt;/code&gt; is used instead of &lt;code&gt;(april-p)&lt;/code&gt;, no formatted values are printed by default; only the values assigned to &lt;code&gt;⎕&lt;/code&gt; are printed. Using &lt;code&gt;⎕&lt;/code&gt;, it's easy to debug complex functions.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-apl-system-variables-and-functions-in-april" class="anchor" aria-hidden="true" href="#apl-system-variables-and-functions-in-april"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;APL System Variables and Functions in April&lt;/h2&gt;
&lt;p&gt;April makes available the following APL system variables and functions:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;⎕IO ⎕TS ⎕PP ⎕AV ⎕A ⎕D
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Additionally, April exposes this special system variable not found in other APL implementations:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;⎕OST
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href="./environmental-symbols.md"&gt;Click here to read the names and descriptions of these symbols.&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-setting-a-custom-output-stream" class="anchor" aria-hidden="true" href="#setting-a-custom-output-stream"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Setting a Custom Output Stream&lt;/h2&gt;
&lt;p&gt;April has a special system variable called &lt;code&gt;⎕ost&lt;/code&gt; that you can use to set a custom destination for printed output. Normally, data output using &lt;code&gt;(april-p)&lt;/code&gt; or values assigned to the quad character like &lt;code&gt;⎕←1 2 3&lt;/code&gt; are sent to the &lt;code&gt;*standard-output*&lt;/code&gt; stream. You can change this as follows:&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;* (&lt;span class="pl-k"&gt;let&lt;/span&gt;* ((out-str (make-string-output-stream))
	 (vector (april-p &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;a←1 2 3 ⋄ ⎕ost←'OUT-STR' ⋄ ⎕←a+5 ⋄ ⎕←3 4 5 ⋄ ⎕ost←'*STANDARD-OUTPUT*' ⋄ 3+a&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)))
    (princ (get-output-stream-string out-str))
    vector)
&lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-c1"&gt;6&lt;/span&gt;
&lt;span class="pl-c1"&gt;6&lt;/span&gt; &lt;span class="pl-c1"&gt;7&lt;/span&gt; &lt;span class="pl-c1"&gt;8&lt;/span&gt;
&lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt;
#(&lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-c1"&gt;6&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Within the APL expression, the output stream is set to &lt;code&gt;OUT-STR&lt;/code&gt;, two vectors are output to that stream, and then the stream is reset to &lt;code&gt;*STANDARD-OUTPUT*&lt;/code&gt; before the expression ends and prints its final output. When the code runs, first the APL-formatted output from the &lt;code&gt;(april-p)&lt;/code&gt; expression is printed. Then, the two APL-formatted strings output to the &lt;code&gt;out-str&lt;/code&gt; stream are printed. Finally, the Lisp vector that resulted from the &lt;code&gt;(april-p)&lt;/code&gt; expression is printed.&lt;/p&gt;
&lt;p&gt;Remember to use all caps when setting the &lt;code&gt;⎕ost&lt;/code&gt; variable, unless your desired output stream is referenced by a literal lowercase symbol like &lt;code&gt;|output-stream|&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The syntax above assumes that the symbol representing the output stream is internal to the current package. For instance:&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(in-package &lt;span class="pl-c1"&gt;#:pkg-one&lt;/span&gt;)

(&lt;span class="pl-k"&gt;defvar&lt;/span&gt; &lt;span class="pl-en"&gt;out-str&lt;/span&gt; (make-string-output-stream))

(april-p &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;⎕ost←'OUT-STR' ⋄ 5+10&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this code, the &lt;code&gt;OUT-STR&lt;/code&gt; output stream is interned in the package &lt;code&gt;PKG-ONE&lt;/code&gt;. What if you want to use an output stream whose symbol belongs to a package other than the current one?&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(in-package &lt;span class="pl-c1"&gt;#:pkg-one&lt;/span&gt;)

(&lt;span class="pl-k"&gt;defvar&lt;/span&gt; &lt;span class="pl-en"&gt;out-str&lt;/span&gt; (make-string-output-stream))

(in-package &lt;span class="pl-c1"&gt;#:pkg-two&lt;/span&gt;)

(april-p &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;⎕ost←('PKG-ONE''OUT-STR') ⋄ 5+10&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you assign to &lt;code&gt;⎕ost&lt;/code&gt; a vector of two strings, the first string is the name of a package and the second string is the name of a symbol belonging to that package. In this way, you can reference an output stream whose symbol is interned in a package other than the current one.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-whats-not-planned-for-implementation" class="anchor" aria-hidden="true" href="#whats-not-planned-for-implementation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;What's Not Planned for Implementation&lt;/h2&gt;
&lt;h4&gt;&lt;a id="user-content-functions" class="anchor" aria-hidden="true" href="#functions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Functions:&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;⍇ File read
⍈ File write
⍐ File hold
⍗ File drop
⎕ Evaluated input
⎕ Output with newline
⍞ Character input
⍞ Bare output
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;&lt;a id="user-content-operators" class="anchor" aria-hidden="true" href="#operators"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Operators:&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;&amp;amp; Spawn
⌶ I-Beam
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href="./lexicon.md"&gt;(Click here to see the functions and operators that have been implemented.)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;See a pattern? The functions not planned for implentation are all those that manifest low-level interactions between the APL instance and the underlying computer system. Common Lisp already has powerful tools for system interaction, so it's presumed that developers will do things like this outside of April.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-also-not-implemented" class="anchor" aria-hidden="true" href="#also-not-implemented"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Also Not Implemented&lt;/h2&gt;
&lt;p&gt;APL's function editor system and control flow statements are not implemented; this type of functionality is also readily accessible through standard Common Lisp.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-tests-and-demo" class="anchor" aria-hidden="true" href="#tests-and-demo"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tests and Demo&lt;/h2&gt;
&lt;p&gt;If you missed it earlier, you can run tests for the implemented APL functions and operators by entering:&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;* (april (test))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And you can see a demonstration of April language features by entering:&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;* (april (demo))&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-enabling-apl-input-in-emacs" class="anchor" aria-hidden="true" href="#enabling-apl-input-in-emacs"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Enabling APL Input in Emacs&lt;/h2&gt;
&lt;p&gt;Most Lisp developers interact with the language through Emacs, so Emacs is also the most convenient tool to write April programs. The best way to input APL characters in Emacs is using the gnu-apl-mode Emacs plugin. You can get it &lt;a href="https://github.com/lokedhs/gnu-apl-mode"&gt;from the repository here&lt;/a&gt; or install it directly via the MELPA Emacs package repository.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://ergoemacs.org/emacs/emacs_package_system.html" rel="nofollow"&gt;Click here for information on using MELPA.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Once gnu-apl-mode is installed, you can switch to the APL input mode by typing &lt;code&gt;M-x toggle-input-method&lt;/code&gt; or &lt;code&gt;C-\&lt;/code&gt;. You will be prompted to enter the input mode to use, so enter &lt;code&gt;APL-Z&lt;/code&gt; and then you'll be able to toggle APL input on and off by typing &lt;code&gt;C-\&lt;/code&gt;. While in APL-Z input mode, you can enter APL characters by prefixing the key with a &lt;code&gt;.&lt;/code&gt; period character.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-enabling-apl-input-in-vim" class="anchor" aria-hidden="true" href="#enabling-apl-input-in-vim"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Enabling APL Input in Vim&lt;/h2&gt;
&lt;p&gt;For Lisp developers who interact with the language through Vim, a plugin called "vim-apl" allows one to input APL characters. You can get it &lt;a href="https://gitlab.com/n9n/vim-apl" rel="nofollow"&gt;from this git repository&lt;/a&gt;. Using a Vim plugin manager called &lt;a href="https://github.com/VundleVim/Vundle.vim"&gt;Vundle&lt;/a&gt; it is easy to add this plugin by adding the single line &lt;code&gt;Plugin 'https://gitlab.com/n9n/vim-apl'&lt;/code&gt; to your .vimrc and following the Vundle instructions. With vim-apl installed, while editing an .apl file you can enter the iota character &lt;code&gt;⍳&lt;/code&gt; by typing &lt;code&gt;`i&lt;/code&gt; (backtick and i), enter the rho character &lt;code&gt;⍴&lt;/code&gt; by typing &lt;code&gt; `r&lt;/code&gt;, and so on.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-thanks-to" class="anchor" aria-hidden="true" href="#thanks-to"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Thanks to:&lt;/h2&gt;
&lt;p&gt;Tamas K. Papp, creator of &lt;a href="https://github.com/tpapp/array-operations"&gt;array-operations&lt;/a&gt;, of which April makes heavy use.&lt;/p&gt;
&lt;p&gt;Max Rottenkolber, creator of &lt;a href="https://github.com/eugeneia/maxpc"&gt;MaxPC&lt;/a&gt;, the heart of April's parsing engine.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>phantomics</author><guid isPermaLink="false">https://github.com/phantomics/april</guid><pubDate>Wed, 12 Feb 2020 00:01:00 GMT</pubDate></item><item><title>atlas-engineer/next #2 in Common Lisp, This week</title><link>https://github.com/atlas-engineer/next</link><description>&lt;p&gt;&lt;i&gt;Next browser - Be productive.&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="org" data-path="README.org"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/d26f1b44fb364eabffb806abc4d6f424b2170885/68747470733a2f2f6e6578742e61746c61732e656e67696e6565722f7374617469632f696d6167652f6e6578745f323536783235362e706e67"&gt;&lt;img src="https://camo.githubusercontent.com/d26f1b44fb364eabffb806abc4d6f424b2170885/68747470733a2f2f6e6578742e61746c61732e656e67696e6565722f7374617469632f696d6167652f6e6578745f323536783235362e706e67" align="right" data-canonical-src="https://next.atlas.engineer/static/image/next_256x256.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-next-web-browser" class="anchor" aria-hidden="true" href="#next-web-browser"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Next web browser&lt;/h1&gt;
&lt;p&gt;Next is a keyboard-oriented, extensible web-browser designed for power
  users. It has familiar key-bindings (&lt;a href="https://en.wikipedia.org/wiki/Emacs" rel="nofollow"&gt;Emacs&lt;/a&gt;, &lt;a href="https://en.wikipedia.org/wiki/Vim_(text_editor)" rel="nofollow"&gt;VI&lt;/a&gt;), is fully configurable
  and extensible in Lisp, and has powerful features for productive
  professionals.&lt;/p&gt;
&lt;p&gt;If you like Next and if you want to help future development, please
  support us on &lt;a href="https://www.patreon.com/next_browser" rel="nofollow"&gt;Patreon&lt;/a&gt; or give us a star, thank you!&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Warning:&lt;/b&gt; Next is under active development. Feel free to &lt;a href="https://github.com/atlas-engineer/next/issues"&gt;report&lt;/a&gt; bugs,
  instabilities or feature wishes.&lt;/p&gt;
&lt;hr&gt;
&lt;div align="center"&gt; &lt;a href="http://next.atlas.engineer/" rel="nofollow"&gt;&lt;b&gt;Homepage&lt;/b&gt;&lt;/a&gt; | &lt;a href="https://next.atlas.engineer/download" rel="nofollow"&gt;&lt;b&gt;Downloads&lt;/b&gt;&lt;/a&gt; | &lt;a href="https://next.atlas.engineer/documentation" rel="nofollow"&gt;&lt;b&gt;User Manual&lt;/b&gt;&lt;/a&gt; | &lt;a href="https://next.atlas.engineer/articles" rel="nofollow"&gt;&lt;b&gt;Articles&lt;/b&gt;&lt;/a&gt; | &lt;a href="https://www.reddit.com/r/next_browser/" rel="nofollow"&gt;&lt;b&gt;Reddit&lt;/b&gt;&lt;/a&gt; | Freenode IRC: &lt;a href="https://webchat.freenode.net/#next-browser" rel="nofollow"&gt;#next-browser&lt;/a&gt; &lt;/div&gt;
&lt;hr&gt;
&lt;h2&gt;&lt;a id="user-content-fast-tab-switching" class="anchor" aria-hidden="true" href="#fast-tab-switching"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Fast tab switching&lt;/h2&gt;
&lt;p&gt;Switch easily between your open tabs by fuzzy search. If you are
  looking for &lt;code&gt;https://www.example.com&lt;/code&gt;, you could type in &lt;code&gt;ele&lt;/code&gt;, &lt;code&gt;exa&lt;/code&gt;,
  &lt;code&gt;epl&lt;/code&gt;, or any other matching series of letters.&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="assets/next-switch-buffer.png"&gt;&lt;img src="assets/next-switch-buffer.png" align="center" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-history-as-a-tree" class="anchor" aria-hidden="true" href="#history-as-a-tree"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;History as a tree&lt;/h2&gt;
&lt;p&gt;History is represented as a tree that you can traverse. smarter than
  the “forwards-backwards” abstraction found in other browsers, the tree
  makes sure  you never lose  track of where  you’ve been.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-multiple-selection" class="anchor" aria-hidden="true" href="#multiple-selection"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Multiple selection&lt;/h2&gt;
&lt;p&gt;Commands can accept multiple input, allowing you to quickly perform an
  operation against multiple tabs.&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="assets/next-multiple-selection.png"&gt;&lt;img src="assets/next-multiple-selection.png" align="center" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-powerful-bookmarks" class="anchor" aria-hidden="true" href="#powerful-bookmarks"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Powerful Bookmarks&lt;/h2&gt;
&lt;p&gt;Bookmark a page with tags. Search bookmarks with compound
  queries. Capture more data about your bookmarks, and group and wrangle
  them in any way you like.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-getting-started" class="anchor" aria-hidden="true" href="#getting-started"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Getting started&lt;/h1&gt;
&lt;h2&gt;&lt;a id="user-content-install-next" class="anchor" aria-hidden="true" href="#install-next"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Install Next&lt;/h2&gt;
&lt;p&gt;Next supports GNU/Linux, macOS, and Guix with engine support for
  WebKit and WebEngine/Blink.&lt;/p&gt;
&lt;p&gt;Please see the &lt;a href="https://next.atlas.engineer/download" rel="nofollow"&gt;downloads&lt;/a&gt; page for pre-built binaries. Some operating
  systems provide packages for Next:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Alpine&lt;/li&gt;
  &lt;li&gt;Debian and derivatives (Ubuntu, LinuxMint), for Debian &amp;gt;= 10 (Buster).&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://source.atlas.engineer/view/repository/macports-port" rel="nofollow"&gt;MacPorts&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://aur.archlinux.org/packages/next-browser/" rel="nofollow"&gt;Arch Linux AUR&lt;/a&gt; (and the &lt;a href="https://aur.archlinux.org/packages/next-browser-git/" rel="nofollow"&gt;-git PKGBUILD&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://nixos.org/nix/" rel="nofollow"&gt;Nix&lt;/a&gt;: Install with &lt;code&gt;nix-env --install next&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://guix.gnu.org" rel="nofollow"&gt;Guix&lt;/a&gt;: Install with &lt;code&gt;guix install next&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To perform an installation from source, please see the &lt;a href="https://github.com/atlas-engineer/next/tree/master/documents"&gt;developer readme&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you want to use the Qt Webengine/Blink platform port, you currently
  have to build it from source.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Download a Qt Webengine archive &lt;a href="https://next.atlas.engineer/static/release/next-pyqt-webengine.tar.gz" rel="nofollow"&gt;here&lt;/a&gt;. Once you have extracted it,
    run the &lt;code&gt;next-pyqt-webengine&lt;/code&gt; binary.&lt;/li&gt;
  &lt;li&gt;Download a GNU/Linux Debian binary of the Lisp core &lt;a href="https://gitlab.com/atlas-engineer/next/pipelines?scope=all&amp;amp;page=1" rel="nofollow"&gt;on our CI system
    here&lt;/a&gt; (you have to download the build artifacts), and run it with
    &lt;code&gt;./next&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-quickstart-keys" class="anchor" aria-hidden="true" href="#quickstart-keys"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Quickstart keys&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;C-l&lt;/code&gt;:     Load URL in tab&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;M-l&lt;/code&gt;:     Load URL in a new tab&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;C-x b&lt;/code&gt;:   Switch tab&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;C-b&lt;/code&gt;:     Backwards history&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;C-f&lt;/code&gt;:     Forwards history&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;C-x C-c&lt;/code&gt;: Quit&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;TAB&lt;/code&gt;: Complete candidate (in minibuffer)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The symbols represent modifiers:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;C&lt;/code&gt;: Control key&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;S&lt;/code&gt;: Super (Windows key, Command key)&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;M&lt;/code&gt;: Meta (Alt key, Option key)&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;s&lt;/code&gt;: Shift key&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The following keys exist as special keys:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;BACKSPACE&lt;/code&gt;, &lt;code&gt;DELETE&lt;/code&gt;, &lt;code&gt;ESCAPE&lt;/code&gt; , &lt;code&gt;HYPHEN&lt;/code&gt;, &lt;code&gt;RETURN&lt;/code&gt;, &lt;code&gt;SPACE&lt;/code&gt;, &lt;code&gt;TAB&lt;/code&gt;,
  &lt;code&gt;Left&lt;/code&gt;, &lt;code&gt;Right&lt;/code&gt;, &lt;code&gt;Up&lt;/code&gt;, &lt;code&gt;Down&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Documentation&lt;/h2&gt;
&lt;p&gt;For full documentation about Next, how it works, and how to extend it
  please see the &lt;a href="documents/MANUAL.org"&gt;MANUAL.org&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you want to help with development or build Next from scratch, read
  the developer’s documentation at &lt;a href="https://github.com/atlas-engineer/next/blob/master/documents/README.org"&gt;documents/README.org&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-customize-and-extend-next" class="anchor" aria-hidden="true" href="#customize-and-extend-next"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Customize and extend Next&lt;/h3&gt;
&lt;p&gt;Complete customization is possible through the creation of a
  &lt;code&gt;~/.config/next/init.lisp&lt;/code&gt; file. For more information please see:
  “Customizing Next” within the &lt;a href="documents/MANUAL.org"&gt;MANUAL.org&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Additionally, a document provided in the documents directory named
  &lt;a href="documents/EXTENSION.org"&gt;EXTENSION.org&lt;/a&gt; is a place for the community to share helpful
  customizations. To share your own extension, please make a pull
  request with your new extension appended to EXTENSION.org.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-history-of-changes" class="anchor" aria-hidden="true" href="#history-of-changes"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;History of changes&lt;/h2&gt;
&lt;p&gt;Please see the &lt;a href="documents/CHANGELOG.org"&gt;CHANGELOG.org&lt;/a&gt;.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>atlas-engineer</author><guid isPermaLink="false">https://github.com/atlas-engineer/next</guid><pubDate>Wed, 12 Feb 2020 00:02:00 GMT</pubDate></item><item><title>dimitri/pgloader #3 in Common Lisp, This week</title><link>https://github.com/dimitri/pgloader</link><description>&lt;p&gt;&lt;i&gt;Migrate to PostgreSQL in a single command!&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-pgloader" class="anchor" aria-hidden="true" href="#pgloader"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;PGLoader&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://travis-ci.org/dimitri/pgloader" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/9b87c70a3ff663e62c6f1b8291648a118a79f515/68747470733a2f2f7472617669732d63692e6f72672f64696d697472692f70676c6f616465722e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/dimitri/pgloader.svg?branch=master" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://gitter.im/dimitri/pgloader?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/da2edb525cde1455a622c58c0effc3a90b9a181c/68747470733a2f2f6261646765732e6769747465722e696d2f4a6f696e253230436861742e737667" alt="Join the chat at https://gitter.im/dimitri/pgloader" data-canonical-src="https://badges.gitter.im/Join%20Chat.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://cloud.docker.com/repository/docker/dimitri/pgloader" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/d8f7cd9f29252b82f3da2835032c07b8b7b36b2a/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f636c6f75642f6275696c642f64696d697472692f70676c6f616465722e737667" alt="Docker Build Status" data-canonical-src="https://img.shields.io/docker/cloud/build/dimitri/pgloader.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="http://pgloader.readthedocs.io/en/latest/" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/4ab5920bc04dc763ffe341142d5a9b292eeff516/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f70676c6f616465722f62616467652f3f76657273696f6e3d6c6174657374267374796c653d706c6173746963" alt="Read The Docs Status" data-canonical-src="https://readthedocs.org/projects/pgloader/badge/?version=latest&amp;amp;style=plastic" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;pgloader is a data loading tool for PostgreSQL, using the &lt;code&gt;COPY&lt;/code&gt; command.&lt;/p&gt;
&lt;p&gt;Its main advantage over just using &lt;code&gt;COPY&lt;/code&gt; or &lt;code&gt;\copy&lt;/code&gt;, and over using a
&lt;em&gt;Foreign Data Wrapper&lt;/em&gt;, is its transaction behaviour, where &lt;em&gt;pgloader&lt;/em&gt;
will keep a separate file of rejected data, but continue trying to
&lt;code&gt;copy&lt;/code&gt; good data in your database.&lt;/p&gt;
&lt;p&gt;The default PostgreSQL behaviour is transactional, which means that
&lt;em&gt;any&lt;/em&gt; erroneous line in the input data (file or remote database) will
stop the entire bulk load for the table.&lt;/p&gt;
&lt;p&gt;pgloader also implements data reformatting, a typical example of that
being the transformation of MySQL datestamps &lt;code&gt;0000-00-00&lt;/code&gt; and
&lt;code&gt;0000-00-00 00:00:00&lt;/code&gt; to PostgreSQL &lt;code&gt;NULL&lt;/code&gt; value (because our calendar
never had a &lt;em&gt;year zero&lt;/em&gt;).&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-versioning" class="anchor" aria-hidden="true" href="#versioning"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Versioning&lt;/h2&gt;
&lt;p&gt;pgloader version 1.x is quite old and was developed in &lt;code&gt;TCL&lt;/code&gt;.
When faced with maintaining that code, the new emerging development
team (hi!) picked &lt;code&gt;python&lt;/code&gt; instead because that made sense at the
time. So pgloader version 2.x was written in python.&lt;/p&gt;
&lt;p&gt;The current version of pgloader is the 3.x series, which is written in
&lt;a href="http://cliki.net/" rel="nofollow"&gt;Common Lisp&lt;/a&gt; for better development flexibility,
runtime performance, and support of real threading.&lt;/p&gt;
&lt;p&gt;The versioning is now following the Emacs model, where any X.0 release
number means you're using a development version (alpha, beta, or release
candidate). The next stable versions are going to be &lt;code&gt;3.1&lt;/code&gt; then &lt;code&gt;3.2&lt;/code&gt; etc.&lt;/p&gt;
&lt;p&gt;When using a development snapshot rather than a released version the version
number includes the git hash (in its abbreviated form):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;pgloader version "3.0.99"&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Release candidate 9 for pgloader version 3.1, with a &lt;em&gt;git tag&lt;/em&gt; named
&lt;code&gt;v3.0.99&lt;/code&gt; so that it's easy to checkout the same sources as the
released code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;pgloader version "3.0.fecae2c"&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Development snapshot again &lt;em&gt;git hash&lt;/em&gt; &lt;code&gt;fecae2c&lt;/code&gt;. It's possible to have
the same sources on another setup with using the git command &lt;code&gt;git checkout fecae2c&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;pgloader version "3.1.0"&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Stable release.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-licence" class="anchor" aria-hidden="true" href="#licence"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;LICENCE&lt;/h2&gt;
&lt;p&gt;pgloader is available under &lt;a href="http://www.postgresql.org/about/licence/" rel="nofollow"&gt;The PostgreSQL Licence&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-install" class="anchor" aria-hidden="true" href="#install"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;INSTALL&lt;/h2&gt;
&lt;p&gt;You can install pgloader directly from
&lt;a href="https://wiki.postgresql.org/wiki/Apt" rel="nofollow"&gt;apt.postgresql.org&lt;/a&gt; and from official
debian repositories, see
&lt;a href="https://packages.debian.org/search?keywords=pgloader" rel="nofollow"&gt;packages.debian.org/pgloader&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ apt-get install pgloader
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can also use a &lt;strong&gt;docker&lt;/strong&gt; image for pgloader at
&lt;a href="https://hub.docker.com/r/dimitri/pgloader/" rel="nofollow"&gt;https://hub.docker.com/r/dimitri/pgloader/&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker pull dimitri/pgloader
$ docker run --rm --name pgloader dimitri/pgloader:latest pgloader --version
$ docker run --rm --name pgloader dimitri/pgloader:latest pgloader --help
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;a id="user-content-build-from-sources" class="anchor" aria-hidden="true" href="#build-from-sources"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Build from sources&lt;/h2&gt;
&lt;p&gt;pgloader is now a Common Lisp program, tested using the
&lt;a href="http://sbcl.org/" rel="nofollow"&gt;SBCL&lt;/a&gt; (&amp;gt;= 1.2.5) and
&lt;a href="http://ccl.clozure.com/" rel="nofollow"&gt;Clozure CL&lt;/a&gt; implementations with
&lt;a href="http://www.quicklisp.org/beta/" rel="nofollow"&gt;Quicklisp&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;When building from sources, you should always build from the current git
&lt;code&gt;HEAD&lt;/code&gt; as it's basically the only source that is managed in a way to ensure
it builds aginst current set of dependencies versions.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-building-from-sources-on-debian" class="anchor" aria-hidden="true" href="#building-from-sources-on-debian"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Building from sources on debian&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;$ apt-get install sbcl unzip libsqlite3-dev make curl gawk freetds-dev libzip-dev
$ cd /path/to/pgloader
$ make pgloader
$ ./build/bin/pgloader --help
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-building-from-sources-on-macos" class="anchor" aria-hidden="true" href="#building-from-sources-on-macos"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Building from sources on macOS&lt;/h3&gt;
&lt;p&gt;When using &lt;a href="https://brew.sh" rel="nofollow"&gt;brew&lt;/a&gt;, it should be a simple &lt;code&gt;brew install --HEAD pgloader&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;When using &lt;a href="https://www.macports.org" rel="nofollow"&gt;macports&lt;/a&gt;, then we have a situation to
deal with with shared objects pgloader depends on, as reported in issue #161
at &lt;a href="https://github.com/dimitri/pgloader/issues/161#issuecomment-201162647"&gt;https://github.com/dimitri/pgloader/issues/161#issuecomment-201162647&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I was able to get a clean build without having to disable compression after
symlinking /usr/local/lib to /opt/local/lib. Note that I did not have
anything installed to /usr/local/lib so I didn't lose anything here.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;&lt;a id="user-content-building-from-sources-on-windows" class="anchor" aria-hidden="true" href="#building-from-sources-on-windows"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Building from sources on Windows&lt;/h3&gt;
&lt;p&gt;Building pgloader on Windows is supported, thanks to Common Lisp
implementations being available on that platform, and to the Common Lisp
Standard for making it easy to write actually portable code.&lt;/p&gt;
&lt;p&gt;It is recommended to have a look at the issues labelled with &lt;em&gt;Windows
support&lt;/em&gt; if you run into trouble when building
pgloader:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/dimitri/pgloader/issues?utf8=%E2%9C%93&amp;amp;q=label%3A%22Windows%20support%22%20"&gt;https://github.com/dimitri/pgloader/issues?utf8=✓&amp;amp;q=label%3A%22Windows%20support%22%20&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-building-docker-image-from-sources" class="anchor" aria-hidden="true" href="#building-docker-image-from-sources"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Building Docker image from sources&lt;/h3&gt;
&lt;p&gt;You can build a Docker image from source using SBCL by default:&lt;/p&gt;
&lt;p&gt;$ docker build .&lt;/p&gt;
&lt;p&gt;Or Clozure CL (CCL):&lt;/p&gt;
&lt;p&gt;$ docker build -f Dockerfile.ccl .&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-more-options-when-building-from-source" class="anchor" aria-hidden="true" href="#more-options-when-building-from-source"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;More options when building from source&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;Makefile&lt;/code&gt; target &lt;code&gt;pgloader&lt;/code&gt; knows how to produce a Self Contained
Binary file for pgloader, found at &lt;code&gt;./build/bin/pgloader&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ make pgloader
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By default, the &lt;code&gt;Makefile&lt;/code&gt; uses &lt;a href="http://sbcl.org/" rel="nofollow"&gt;SBCL&lt;/a&gt; to compile your
binary image, though it's possible to build using
&lt;a href="http://ccl.clozure.com/" rel="nofollow"&gt;CCL&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ make CL=ccl pgloader
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If using &lt;code&gt;SBCL&lt;/code&gt; and it supports core compression, the make process will
use it to generate a smaller binary.  To force disabling core
compression, you may use:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ make COMPRESS_CORE=no pgloader
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;--compress-core&lt;/code&gt; is unique to SBCL, so not used when &lt;code&gt;CC&lt;/code&gt; is different
from the &lt;code&gt;sbcl&lt;/code&gt; value.&lt;/p&gt;
&lt;p&gt;You can also tweak the default amount of memory that the &lt;code&gt;pgloader&lt;/code&gt; image
will allow itself using when running through your data (don't ask for more
than your current RAM tho):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ make DYNSIZE=8192 pgloader
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;make pgloader&lt;/code&gt; command when successful outputs a &lt;code&gt;./build/bin/pgloader&lt;/code&gt;
file for you to use.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Usage&lt;/h2&gt;
&lt;p&gt;You can either give a command file to pgloader or run it all from the
command line, see the
&lt;a href="https://pgloader.readthedocs.io/en/latest/tutorial/tutorial.html#pgloader-quick-start" rel="nofollow"&gt;pgloader quick start&lt;/a&gt; on
&lt;a href="https://pgloader.readthedocs.io" rel="nofollow"&gt;https://pgloader.readthedocs.io&lt;/a&gt; for more details.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ./build/bin/pgloader --help
$ ./build/bin/pgloader &amp;lt;file.load&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For example, for a full migration from SQLite:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ createdb newdb
$ pgloader ./test/sqlite/sqlite.db postgresql:///newdb
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or for a full migration from MySQL, including schema definition (tables,
indexes, foreign keys, comments) and parallel loading of the corrected data:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ createdb pagila
$ pgloader mysql://user@localhost/sakila postgresql:///pagila
&lt;/code&gt;&lt;/pre&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>dimitri</author><guid isPermaLink="false">https://github.com/dimitri/pgloader</guid><pubDate>Wed, 12 Feb 2020 00:03:00 GMT</pubDate></item></channel></rss>