<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>GitHub Trending: Perl, This week</title><link>https://github.com/trending/perl?since=weekly</link><description>The top repositories on GitHub for perl, measured weekly</description><pubDate>Thu, 31 Oct 2019 00:04:22 GMT</pubDate><lastBuildDate>Thu, 31 Oct 2019 00:04:22 GMT</lastBuildDate><generator>PyRSS2Gen-1.1.0</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><ttl>1400</ttl><item><title>Perl/perl5 #1 in Perl, This week</title><link>https://github.com/Perl/perl5</link><description>&lt;p&gt;&lt;i&gt;üê´The Perl 5 language interpreter.&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body " data-path="README"&gt;&lt;div class="plain"&gt;&lt;pre style="white-space: pre-wrap"&gt;Perl is Copyright (C) 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000,
2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012,
2013, 2014, 2015, 2016, 2017, 2018, 2019 by Larry Wall and others.
All rights reserved.



ABOUT PERL
==========

Perl is a general-purpose programming language originally developed for
text manipulation and now used for a wide range of tasks including
system administration, web development, network programming, GUI
development, and more.

The language is intended to be practical (easy to use, efficient,
complete) rather than beautiful (tiny, elegant, minimal).  Its major
features are that it's easy to use, supports both procedural and
object-oriented (OO) programming, has powerful built-in support for text
processing, and has one of the world's most impressive collections of
third-party modules.

For an introduction to the language's features, see pod/perlintro.pod.

For a discussion of the important changes in this release, see
pod/perldelta.pod.

There are also many Perl books available, covering a wide variety of topics,
from various publishers.  See pod/perlbook.pod for more information.


INSTALLATION
============

If you're using a relatively modern operating system and want to
install this version of Perl locally, run the following commands:

  ./Configure -des -Dprefix=$HOME/localperl
  make test
  make install

This will configure and compile perl for your platform, run the regression
tests, and install perl in a subdirectory "localperl" of your home directory.

If you run into any trouble whatsoever or you need to install a customized
version of Perl, you should read the detailed instructions in the "INSTALL"
file that came with this distribution.  Additionally, there are a number of
"README" files with hints and tips about building and using Perl on a wide
variety of platforms, some more common than others.

Once you have Perl installed, a wealth of documentation is available to you
through the 'perldoc' tool.  To get started, run this command:

  perldoc perl


IF YOU RUN INTO TROUBLE
=======================

Perl is a large and complex system that's used for everything from
knitting to rocket science.  If you run into trouble, it's quite
likely that someone else has already solved the problem you're
facing. Once you've exhausted the documentation, please report bugs to us
using the 'perlbug' tool. For more information about perlbug, either type
'perldoc perlbug' or just 'perlbug' on a line by itself.

While it was current when we made it available, Perl is constantly evolving
and there may be a more recent version that fixes bugs you've run into or
adds new features that you might find useful.

You can always find the latest version of perl on a CPAN (Comprehensive Perl
Archive Network) site near you at &lt;a href="https://www.cpan.org/src/" rel="nofollow"&gt;https://www.cpan.org/src/&lt;/a&gt;

If you want to submit a simple patch to the perl source, see the "SUPER
QUICK PATCH GUIDE" in pod/perlhack.pod.

Just a personal note:  I want you to know that I create nice things like this
because it pleases the Author of my story.  If this bothers you, then your
notion of Authorship needs some revision.  But you can use perl anyway. :-)

							The author.


LICENSING
=========

This program is free software; you can redistribute it and/or modify
it under the terms of either:

	a) the GNU General Public License as published by the Free
	Software Foundation; either version 1, or (at your option) any
	later version, or

	b) the "Artistic License" which comes with this Kit.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See either
the GNU General Public License or the Artistic License for more details.

You should have received a copy of the Artistic License with this
Kit, in the file named "Artistic".  If not, I'll be glad to provide one.

You should also have received a copy of the GNU General Public License
along with this program in the file named "Copying". If not, write to the
Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
Boston, MA 02110-1301, USA or visit their web page on the internet at
&lt;a href="https://www.gnu.org/copyleft/gpl.html" rel="nofollow"&gt;https://www.gnu.org/copyleft/gpl.html&lt;/a&gt;.

For those of you that choose to use the GNU General Public License,
my interpretation of the GNU General Public License is that no Perl
script falls under the terms of the GPL unless you explicitly put
said script under the terms of the GPL yourself.  Furthermore, any
object code linked with perl does not automatically fall under the
terms of the GPL, provided such object code only adds definitions
of subroutines and variables, and does not otherwise impair the
resulting interpreter from executing any standard Perl script.  I
consider linking in C subroutines in this manner to be the moral
equivalent of defining subroutines in the Perl language itself.  You
may sell such an object file as proprietary provided that you provide
or offer to provide the Perl source, as specified by the GNU General
Public License.  (This is merely an alternate way of specifying input
to the program.)  You may also sell a binary produced by the dumping of
a running Perl script that belongs to you, provided that you provide or
offer to provide the Perl source as specified by the GPL.  (The
fact that a Perl interpreter and your code are in the same binary file
is, in this case, a form of mere aggregation.)  This is my interpretation
of the GPL.  If you still have concerns or difficulties understanding
my intent, feel free to contact me.  Of course, the Artistic License
spells all this out for your protection, so you may prefer to use that.


&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</description><author>Perl</author><guid isPermaLink="false">https://github.com/Perl/perl5</guid><pubDate>Thu, 31 Oct 2019 00:00:00 GMT</pubDate></item><item><title>brendangregg/FlameGraph #2 in Perl, This week</title><link>https://github.com/brendangregg/FlameGraph</link><description>&lt;p&gt;&lt;i&gt;Stack trace visualizer&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-flame-graphs-visualize-profiled-code" class="anchor" aria-hidden="true" href="#flame-graphs-visualize-profiled-code"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Flame Graphs visualize profiled code&lt;/h1&gt;
&lt;p&gt;Main Website: &lt;a href="http://www.brendangregg.com/flamegraphs.html" rel="nofollow"&gt;http://www.brendangregg.com/flamegraphs.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Example (click to zoom):&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.brendangregg.com/FlameGraphs/cpu-bash-flamegraph.svg" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/789f18134b375f4ef0ce667012aa7992bef365d5/687474703a2f2f7777772e6272656e64616e67726567672e636f6d2f466c616d654772617068732f6370752d626173682d666c616d6567726170682e737667" alt="Example" data-canonical-src="http://www.brendangregg.com/FlameGraphs/cpu-bash-flamegraph.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Click a box to zoom the Flame Graph to this stack frame only.
To search and highlight all stack frames matching a regular expression, click the &lt;em&gt;search&lt;/em&gt; button in the upper right corner or press Ctrl-F.
By default, search is case sensitive, but this can be toggled by pressing Ctrl-I or by clicking the &lt;em&gt;ic&lt;/em&gt; button in the upper right corner.&lt;/p&gt;
&lt;p&gt;Other sites:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The Flame Graph article in ACMQ and CACM: &lt;a href="http://queue.acm.org/detail.cfm?id=2927301" rel="nofollow"&gt;http://queue.acm.org/detail.cfm?id=2927301&lt;/a&gt; &lt;a href="http://cacm.acm.org/magazines/2016/6/202665-the-flame-graph/abstract" rel="nofollow"&gt;http://cacm.acm.org/magazines/2016/6/202665-the-flame-graph/abstract&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;CPU profiling using Linux perf_events, DTrace, SystemTap, or ktap: &lt;a href="http://www.brendangregg.com/FlameGraphs/cpuflamegraphs.html" rel="nofollow"&gt;http://www.brendangregg.com/FlameGraphs/cpuflamegraphs.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;CPU profiling using XCode Instruments: &lt;a href="http://schani.wordpress.com/2012/11/16/flame-graphs-for-instruments/" rel="nofollow"&gt;http://schani.wordpress.com/2012/11/16/flame-graphs-for-instruments/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;CPU profiling using Xperf.exe: &lt;a href="http://randomascii.wordpress.com/2013/03/26/summarizing-xperf-cpu-usage-with-flame-graphs/" rel="nofollow"&gt;http://randomascii.wordpress.com/2013/03/26/summarizing-xperf-cpu-usage-with-flame-graphs/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Memory profiling: &lt;a href="http://www.brendangregg.com/FlameGraphs/memoryflamegraphs.html" rel="nofollow"&gt;http://www.brendangregg.com/FlameGraphs/memoryflamegraphs.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Other examples, updates, and news: &lt;a href="http://www.brendangregg.com/flamegraphs.html#Updates" rel="nofollow"&gt;http://www.brendangregg.com/flamegraphs.html#Updates&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Flame graphs can be created in three steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Capture stacks&lt;/li&gt;
&lt;li&gt;Fold stacks&lt;/li&gt;
&lt;li&gt;flamegraph.pl&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;&lt;a id="user-content-1-capture-stacks" class="anchor" aria-hidden="true" href="#1-capture-stacks"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. Capture stacks&lt;/h1&gt;
&lt;p&gt;Stack samples can be captured using Linux perf_events, FreeBSD pmcstat (hwpmc), DTrace, SystemTap, and many other profilers. See the stackcollapse-* converters.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-linux-perf_events" class="anchor" aria-hidden="true" href="#linux-perf_events"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Linux perf_events&lt;/h3&gt;
&lt;p&gt;Using Linux perf_events (aka "perf") to capture 60 seconds of 99 Hertz stack samples, both user- and kernel-level stacks, all processes:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# perf record -F 99 -a -g -- sleep 60
# perf script &amp;gt; out.perf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now only capturing PID 181:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# perf record -F 99 -p 181 -g -- sleep 60
# perf script &amp;gt; out.perf
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-dtrace" class="anchor" aria-hidden="true" href="#dtrace"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;DTrace&lt;/h3&gt;
&lt;p&gt;Using DTrace to capture 60 seconds of kernel stacks at 997 Hertz:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# dtrace -x stackframes=100 -n 'profile-997 /arg0/ { @[stack()] = count(); } tick-60s { exit(0); }' -o out.kern_stacks
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Using DTrace to capture 60 seconds of user-level stacks for PID 12345 at 97 Hertz:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# dtrace -x ustackframes=100 -n 'profile-97 /pid == 12345 &amp;amp;&amp;amp; arg1/ { @[ustack()] = count(); } tick-60s { exit(0); }' -o out.user_stacks
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;60 seconds of user-level stacks, including time spent in-kernel, for PID 12345 at 97 Hertz:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# dtrace -x ustackframes=100 -n 'profile-97 /pid == 12345/ { @[ustack()] = count(); } tick-60s { exit(0); }' -o out.user_stacks
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Switch &lt;code&gt;ustack()&lt;/code&gt; for &lt;code&gt;jstack()&lt;/code&gt; if the application has a ustack helper to include translated frames (eg, node.js frames; see: &lt;a href="http://dtrace.org/blogs/dap/2012/01/05/where-does-your-node-program-spend-its-time/" rel="nofollow"&gt;http://dtrace.org/blogs/dap/2012/01/05/where-does-your-node-program-spend-its-time/&lt;/a&gt;).  The rate for user-level stack collection is deliberately slower than kernel, which is especially important when using &lt;code&gt;jstack()&lt;/code&gt; as it performs additional work to translate frames.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-2-fold-stacks" class="anchor" aria-hidden="true" href="#2-fold-stacks"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. Fold stacks&lt;/h1&gt;
&lt;p&gt;Use the stackcollapse programs to fold stack samples into single lines.  The programs provided are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;stackcollapse.pl&lt;/code&gt;: for DTrace stacks&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stackcollapse-perf.pl&lt;/code&gt;: for Linux perf_events "perf script" output&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stackcollapse-pmc.pl&lt;/code&gt;: for FreeBSD pmcstat -G stacks&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stackcollapse-stap.pl&lt;/code&gt;: for SystemTap stacks&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stackcollapse-instruments.pl&lt;/code&gt;: for XCode Instruments&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stackcollapse-vtune.pl&lt;/code&gt;: for Intel VTune profiles&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stackcollapse-ljp.awk&lt;/code&gt;: for Lightweight Java Profiler&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stackcollapse-jstack.pl&lt;/code&gt;: for Java jstack(1) output&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stackcollapse-gdb.pl&lt;/code&gt;: for gdb(1) stacks&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stackcollapse-go.pl&lt;/code&gt;: for Golang pprof stacks&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stackcollapse-vsprof.pl&lt;/code&gt;: for Microsoft Visual Studio profiles&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Usage example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;For perf_events:
$ ./stackcollapse-perf.pl out.perf &amp;gt; out.folded

For DTrace:
$ ./stackcollapse.pl out.kern_stacks &amp;gt; out.kern_folded
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The output looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;unix`_sys_sysenter_post_swapgs 1401
unix`_sys_sysenter_post_swapgs;genunix`close 5
unix`_sys_sysenter_post_swapgs;genunix`close;genunix`closeandsetf 85
unix`_sys_sysenter_post_swapgs;genunix`close;genunix`closeandsetf;c2audit`audit_closef 26
unix`_sys_sysenter_post_swapgs;genunix`close;genunix`closeandsetf;c2audit`audit_setf 5
unix`_sys_sysenter_post_swapgs;genunix`close;genunix`closeandsetf;genunix`audit_getstate 6
unix`_sys_sysenter_post_swapgs;genunix`close;genunix`closeandsetf;genunix`audit_unfalloc 2
unix`_sys_sysenter_post_swapgs;genunix`close;genunix`closeandsetf;genunix`closef 48
[...]
&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;&lt;a id="user-content-3-flamegraphpl" class="anchor" aria-hidden="true" href="#3-flamegraphpl"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. flamegraph.pl&lt;/h1&gt;
&lt;p&gt;Use flamegraph.pl to render a SVG.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ./flamegraph.pl out.kern_folded &amp;gt; kernel.svg
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;An advantage of having the folded input file (and why this is separate to flamegraph.pl) is that you can use grep for functions of interest. Eg:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ grep cpuid out.kern_folded | ./flamegraph.pl &amp;gt; cpuid.svg
&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;&lt;a id="user-content-provided-examples" class="anchor" aria-hidden="true" href="#provided-examples"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Provided Examples&lt;/h1&gt;
&lt;h3&gt;&lt;a id="user-content-linux-perf_events-1" class="anchor" aria-hidden="true" href="#linux-perf_events-1"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Linux perf_events&lt;/h3&gt;
&lt;p&gt;An example output from Linux "perf script" is included, gzip'd, as example-perf-stacks.txt.gz. The resulting flame graph is example-perf.svg:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.brendangregg.com/FlameGraphs/example-perf.svg" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/1d909160062a92eed18dbb4e7d1f772dbacc0176/687474703a2f2f7777772e6272656e64616e67726567672e636f6d2f466c616d654772617068732f6578616d706c652d706572662e737667" alt="Example" data-canonical-src="http://www.brendangregg.com/FlameGraphs/example-perf.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can create this using:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ gunzip -c example-perf-stacks.txt.gz | ./stackcollapse-perf.pl --all | ./flamegraph.pl --color=java --hash &amp;gt; example-perf.svg
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This shows my typical workflow: I'll gzip profiles on the target, then copy them to my laptop for analysis. Since I have hundreds of profiles, I leave them gzip'd!&lt;/p&gt;
&lt;p&gt;Since this profile included Java, I used the flamegraph.pl --color=java palette. I've also used stackcollapse-perf.pl --all, which includes all annotations that help flamegraph.pl use separate colors for kernel and user level code. The resulting flame graph uses: green == Java, yellow == C++, red == user-mode native, orange == kernel.&lt;/p&gt;
&lt;p&gt;This profile was from an analysis of vert.x performance. The benchmark client, wrk, is also visible in the flame graph.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-dtrace-1" class="anchor" aria-hidden="true" href="#dtrace-1"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;DTrace&lt;/h3&gt;
&lt;p&gt;An example output from DTrace is also included, example-dtrace-stacks.txt, and the resulting flame graph, example-dtrace.svg:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.brendangregg.com/FlameGraphs/example-dtrace.svg" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/8c428ea94b65a5a43438116bc3d52eaa89bc2b2b/687474703a2f2f7777772e6272656e64616e67726567672e636f6d2f466c616d654772617068732f6578616d706c652d6474726163652e737667" alt="Example" data-canonical-src="http://www.brendangregg.com/FlameGraphs/example-dtrace.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can generate this using:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ./stackcollapse.pl example-stacks.txt | ./flamegraph.pl &amp;gt; example.svg
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This was from a particular performance investigation: the Flame Graph identified that CPU time was spent in the lofs module, and quantified that time.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-options" class="anchor" aria-hidden="true" href="#options"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Options&lt;/h1&gt;
&lt;p&gt;See the USAGE message (--help) for options:&lt;/p&gt;
&lt;p&gt;USAGE: ./flamegraph.pl [options] infile &amp;gt; outfile.svg&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;--title TEXT     # change title text
--subtitle TEXT  # second level title (optional)
--width NUM      # width of image (default 1200)
--height NUM     # height of each frame (default 16)
--minwidth NUM   # omit smaller functions (default 0.1 pixels)
--fonttype FONT  # font type (default "Verdana")
--fontsize NUM   # font size (default 12)
--countname TEXT # count type label (default "samples")
--nametype TEXT  # name type label (default "Function:")
--colors PALETTE # set color palette. choices are: hot (default), mem,
                 # io, wakeup, chain, java, js, perl, red, green, blue,
                 # aqua, yellow, purple, orange
--bgcolors COLOR # set background colors. gradient choices are yellow
                 # (default), blue, green, grey; flat colors use "#rrggbb"
--hash           # colors are keyed by function name hash
--cp             # use consistent palette (palette.map)
--reverse        # generate stack-reversed flame graph
--inverted       # icicle graph
--flamechart     # produce a flame chart (sort by time, do not merge stacks)
--negate         # switch differential hues (blue&amp;lt;-&amp;gt;red)
--notes TEXT     # add notes comment in SVG (for debugging)
--help           # this message

eg,
./flamegraph.pl --title="Flame Graph: malloc()" trace.txt &amp;gt; graph.svg
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As suggested in the example, flame graphs can process traces of any event,
such as malloc()s, provided stack traces are gathered.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-consistent-palette" class="anchor" aria-hidden="true" href="#consistent-palette"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Consistent Palette&lt;/h1&gt;
&lt;p&gt;If you use the &lt;code&gt;--cp&lt;/code&gt; option, it will use the $colors selection and randomly
generate the palette like normal. Any future flamegraphs created using the &lt;code&gt;--cp&lt;/code&gt;
option will use the same palette map. Any new symbols from future flamegraphs
will have their colors randomly generated using the $colors selection.&lt;/p&gt;
&lt;p&gt;If you don't like the palette, just delete the palette.map file.&lt;/p&gt;
&lt;p&gt;This allows your to change your colorscheme between flamegraphs to make the
differences REALLY stand out.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;p&gt;Say we have 2 captures, one with a problem, and one when it was working
(whatever "it" is):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cat working.folded | ./flamegraph.pl --cp &amp;gt; working.svg
# this generates a palette.map, as per the normal random generated look.

cat broken.folded | ./flamegraph.pl --cp --colors mem &amp;gt; broken.svg
# this svg will use the same palette.map for the same events, but a very
# different colorscheme for any new events.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Take a look at the demo directory for an example:&lt;/p&gt;
&lt;p&gt;palette-example-working.svg&lt;br&gt;
palette-example-broken.svg&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>brendangregg</author><guid isPermaLink="false">https://github.com/brendangregg/FlameGraph</guid><pubDate>Thu, 31 Oct 2019 00:00:00 GMT</pubDate></item><item><title>SpiderLabs/owasp-modsecurity-crs #3 in Perl, This week</title><link>https://github.com/SpiderLabs/owasp-modsecurity-crs</link><description>&lt;p&gt;&lt;i&gt;OWASP ModSecurity Core Rule Set (CRS) Project (Official Repository)&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/92366da3fe49bf9ad4450eb238384df21239fdc6/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f7370696465726c6162732f6f776173702d6d6f6473656375726974792d6372732f76332e332f6465763f6c6162656c3d76332e33253246646576"&gt;&lt;img src="https://camo.githubusercontent.com/92366da3fe49bf9ad4450eb238384df21239fdc6/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f7370696465726c6162732f6f776173702d6d6f6473656375726974792d6372732f76332e332f6465763f6c6162656c3d76332e33253246646576" alt="Travis build v3.3/dev" data-canonical-src="https://img.shields.io/travis/spiderlabs/owasp-modsecurity-crs/v3.3/dev?label=v3.3%2Fdev" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/853db456480cbb01e9ac80befcfe8685f6191e2a/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f7370696465726c6162732f6f776173702d6d6f6473656375726974792d6372732f76332e322f6465763f6c6162656c3d76332e32253246646576"&gt;&lt;img src="https://camo.githubusercontent.com/853db456480cbb01e9ac80befcfe8685f6191e2a/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f7370696465726c6162732f6f776173702d6d6f6473656375726974792d6372732f76332e322f6465763f6c6162656c3d76332e32253246646576" alt="Travis build v3.2/dev" data-canonical-src="https://img.shields.io/travis/spiderlabs/owasp-modsecurity-crs/v3.2/dev?label=v3.2%2Fdev" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/c7630ec5728db166616212a9ce55de153537698c/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f7370696465726c6162732f6f776173702d6d6f6473656375726974792d6372732f76332e312f6465763f6c6162656c3d76332e31253246646576"&gt;&lt;img src="https://camo.githubusercontent.com/c7630ec5728db166616212a9ce55de153537698c/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f7370696465726c6162732f6f776173702d6d6f6473656375726974792d6372732f76332e312f6465763f6c6162656c3d76332e31253246646576" alt="Travis build v3.1/dev" data-canonical-src="https://img.shields.io/travis/spiderlabs/owasp-modsecurity-crs/v3.1/dev?label=v3.1%2Fdev" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://www.owasp.org/index.php/OWASP_Project_Inventory#tab=Flagship_Projects" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/76ea87f327271bc332fab1a77b6aebea58301c7a/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6f776173702d666c61677368697025323070726f6a6563742d3338613034372e737667" alt="OWASP Flagship" data-canonical-src="https://img.shields.io/badge/owasp-flagship%20project-38a047.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://bestpractices.coreinfrastructure.org/projects/1390" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/bf712dbdb8b0d689645d9eefb57837f68cc5ae5f/68747470733a2f2f626573747072616374696365732e636f7265696e6672617374727563747572652e6f72672f70726f6a656374732f313339302f6261646765" alt="CII Best Practices" data-canonical-src="https://bestpractices.coreinfrastructure.org/projects/1390/badge" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-owasp-modsecurity-core-rule-set-crs" class="anchor" aria-hidden="true" href="#owasp-modsecurity-core-rule-set-crs"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;OWASP ModSecurity Core Rule Set (CRS)&lt;/h1&gt;
&lt;p&gt;The OWASP ModSecurity Core Rule Set (CRS) is a set of generic attack detection rules for use with ModSecurity or compatible web application firewalls. The CRS aims to protect web applications from a wide range of attacks, including the OWASP Top Ten, with a minimum of false alerts.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-crs-resources" class="anchor" aria-hidden="true" href="#crs-resources"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;CRS Resources&lt;/h2&gt;
&lt;p&gt;Please see the &lt;a href="https://coreruleset.org/" rel="nofollow"&gt;OWASP ModSecurity Core Rule Set page&lt;/a&gt; to get introduced to the CRS and view resources on installation, configuration, and working with the CRS.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-contributing-to-the-crs" class="anchor" aria-hidden="true" href="#contributing-to-the-crs"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contributing to the CRS&lt;/h2&gt;
&lt;p&gt;We strive to make the OWASP ModSecurity CRS accessible to a wide audience of beginner and experienced users. We are interested in hearing any bug reports, false positive alert reports, evasions, usability issues, and suggestions for new detections.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/SpiderLabs/owasp-modsecurity-crs/issues"&gt;Create an issue on GitHub&lt;/a&gt; to report a false positive or false negative (evasion). Please include your installed version and the relevant portions of your ModSecurity audit log.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://groups.google.com/a/owasp.org/forum/#!forum/modsecurity-core-rule-set-project" rel="nofollow"&gt;Sign up for our Google Group&lt;/a&gt; to ask general usage questions and participate in discussions on the CRS. Also &lt;a href="https://lists.owasp.org/pipermail/owasp-modsecurity-core-rule-set/index" rel="nofollow"&gt;here&lt;/a&gt; you can find the archives for the previous mailing list.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://webchat.freenode.net/?channels=%23modsecurity" rel="nofollow"&gt;Join the #modsecurity channel on Freenode IRC&lt;/a&gt; to chat about the CRS.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-license" class="anchor" aria-hidden="true" href="#license"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;License&lt;/h2&gt;
&lt;p&gt;Copyright (c) 2006-2019 Trustwave and contributors. All rights reserved.&lt;/p&gt;
&lt;p&gt;The OWASP ModSecurity Core Rule Set is distributed under Apache Software License (ASL) version 2. Please see the enclosed LICENSE file for full details.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>SpiderLabs</author><guid isPermaLink="false">https://github.com/SpiderLabs/owasp-modsecurity-crs</guid><pubDate>Thu, 31 Oct 2019 00:00:00 GMT</pubDate></item><item><title>sullo/nikto #4 in Perl, This week</title><link>https://github.com/sullo/nikto</link><description>&lt;p&gt;&lt;i&gt;Nikto web server scanner&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-nikto" class="anchor" aria-hidden="true" href="#nikto"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;nikto&lt;/h1&gt;
&lt;p&gt;Nikto web server scanner  - &lt;a href="https://cirt.net/Nikto2" rel="nofollow"&gt;https://cirt.net/Nikto2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Full documentation - &lt;a href="https://cirt.net/nikto2-docs/" rel="nofollow"&gt;https://cirt.net/nikto2-docs/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Run as a Docker container:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;git clone https://github.com/sullo/nikto.git
&lt;span class="pl-c1"&gt;cd&lt;/span&gt; nikto
docker build -t sullo/nikto &lt;span class="pl-c1"&gt;.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Call it without arguments to display the full help&lt;/span&gt;
docker run --rm sullo/nikto
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Basic usage&lt;/span&gt;
docker run --rm sullo/nikto -h http://www.example.com
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; To save the report in a specific format, mount /tmp as a volume:&lt;/span&gt;
docker run --rm -v &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;$(&lt;/span&gt;pwd&lt;span class="pl-pds"&gt;)&lt;/span&gt;&lt;/span&gt;:/tmp sullo/nikto -h http://www.example.com -o /tmp/out.json&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Basic usage:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;   Options:
       -ask+               Whether to ask about submitting updates
                               yes   Ask about each (default)
                               no    Don't ask, don't send
                               auto  Don't ask, just send
       -Cgidirs+           Scan these CGI dirs: "none", "all", or values like "/cgi/ /cgi-a/"
       -config+            Use this config file
       -Display+           Turn on/off display outputs:
                               1     Show redirects
                               2     Show cookies received
                               3     Show all 200/OK responses
                               4     Show URLs which require authentication
                               D     Debug output
                               E     Display all HTTP errors
                               P     Print progress to STDOUT
                               S     Scrub output of IPs and hostnames
                               V     Verbose output
       -dbcheck           Check database and other key files for syntax errors
       -evasion+          Encoding technique:
                               1     Random URI encoding (non-UTF8)
                               2     Directory self-reference (/./)
                               3     Premature URL ending
                               4     Prepend long random string
                               5     Fake parameter
                               6     TAB as request spacer
                               7     Change the case of the URL
                               8     Use Windows directory separator (\)
                               A     Use a carriage return (0x0d) as a request spacer
                               B     Use binary value 0x0b as a request spacer
        -Format+           Save file (-o) format:
                               csv   Comma-separated-value
                               htm   HTML Format
                               msf+  Log to Metasploit
                               nbe   Nessus NBE format
                               txt   Plain text
                               xml   XML Format
                               (if not specified the format will be taken from the file extension passed to -output)
       -Help              Extended help information
       -host+             Target host
       -IgnoreCode        Ignore Codes--treat as negative responses
       -id+               Host authentication to use, format is id:pass or id:pass:realm
       -key+              Client certificate key file
       -list-plugins      List all available plugins, perform no testing
       -maxtime+          Maximum testing time per host
       -mutate+           Guess additional file names:
                               1     Test all files with all root directories
                               2     Guess for password file names
                               3     Enumerate user names via Apache (/~user type requests)
                               4     Enumerate user names via cgiwrap (/cgi-bin/cgiwrap/~user type requests)
                               5     Attempt to brute force sub-domain names, assume that the host name is the parent domain
                               6     Attempt to guess directory names from the supplied dictionary file
       -mutate-options    Provide information for mutates
       -nointeractive     Disables interactive features
       -nolookup          Disables DNS lookups
       -nossl             Disables the use of SSL
       -no404             Disables nikto attempting to guess a 404 page
       -output+           Write output to this file ('.' for auto-name)
       -Pause+            Pause between tests (seconds, integer or float)
       -Plugins+          List of plugins to run (default: ALL)
       -port+             Port to use (default 80)
       -RSAcert+          Client certificate file
       -root+             Prepend root value to all requests, format is /directory
       -Save              Save positive responses to this directory ('.' for auto-name)
       -ssl               Force ssl mode on port
       -Tuning+           Scan tuning:
                               1     Interesting File / Seen in logs
                               2     Misconfiguration / Default File
                               3     Information Disclosure
                               4     Injection (XSS/Script/HTML)
                               5     Remote File Retrieval - Inside Web Root
                               6     Denial of Service
                               7     Remote File Retrieval - Server Wide
                               8     Command Execution / Remote Shell
                               9     SQL Injection
                               0     File Upload
                               a     Authentication Bypass
                               b     Software Identification
                               c     Remote Source Inclusion
                               x     Reverse Tuning Options (i.e., include all except specified)
       -timeout+          Timeout for requests (default 10 seconds)
       -Userdbs           Load only user databases, not the standard databases
                               all   Disable standard dbs and load only user dbs
                               tests Disable only db_tests and load udb_tests
       -until             Run until the specified time or duration
       -update            Update databases and plugins from CIRT.net
       -useproxy          Use the proxy defined in nikto.conf
       -Version           Print plugin and database versions
       -vhost+            Virtual host (for Host header)
              + requires a value
&lt;/code&gt;&lt;/pre&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>sullo</author><guid isPermaLink="false">https://github.com/sullo/nikto</guid><pubDate>Thu, 31 Oct 2019 00:00:00 GMT</pubDate></item><item><title>petr999/fcgi-spawn #5 in Perl, This week</title><link>https://github.com/petr999/fcgi-spawn</link><description>&lt;p&gt;&lt;i&gt;FCGI::Spawn -- FastCGI application daemon for Perl/CGI compatibility&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body " data-path="README"&gt;&lt;div class="plain"&gt;&lt;pre style="white-space: pre-wrap"&gt;General Information
-------------------

FCGI-Spawn is the module and daemon both built on top of FCGI-ProcManager
specially for those who need not ( almost ) to write any of his/her own Perl
code. This is the quote of FCGI-ProcManager's explanation:

"FCGI-ProcManager is a process manager for FCGI.  By implementing the
process manager in perl, we can more finely tune FastCGI performance, and 
we can take CPU and memory advantages of fast forks and copy-on-write UNIX
process management characteristics."

But unlike this, the FCGI-Spawn is intended for those who need to have the
FCGI daemon with those specifications:
- communicate via given UNIX local socket or TCP port
With UNIX virtualization environments like FreeBSD's jail(8) the socket name and its
desired file mode is the stuff you posess for communication betweeen Web
server ( FastCGI requester ) and FastCGI daemon.
- execute any given file in FastCGI environment;
File name to execute is given with FastCGI protocol, this is what the PHP
does in FastCGI mode;
- fork with the given number of processes and share the compiled modules code
  in common memory areas with copy-on-write facilities;
- limit the number of requests served by the same process;
Same as MaxRequests feature of Apache, especially wanted for Perl in sight of it never 
returns allocated memory to OS. On a complex Perl applications, the memory allocation
volume for particular porocess under load can grow up almost unpredictably. ;-)
- reload the Perl module on every request if it has been changed from
the moment it was loaded previously;
- Cache the oobjects liek the compiled templates, automatically recompiling
  them on change.
Useful for debugging and fixing code when put on production hosting, another 
obiouse feature of PHP, including FastCGI mode. Absence of such a feature in
other Perl runtime environments can get any Perl newcomer stuck.

There were no quick recipe yet, so i gave myself a try to implement one. :-)

Installation
------------

FCGI-Spawn is expected to compile and run on the same systems range as
FCGI-ProcManager is.

To build,

  perl Makefile.PL
  make all
  make install

Usage
-----

To use CGI.pm in your applications unchanged, you chould apply the supplied
CGI.pm.patch. ON some cases, the application is needed to be patched anyway.
Obviously, it is enough to find CGI-&amp;gt;new or 'new CGI' in your code and replace
it with $FCGI::Spawn::fcgi. That's all, folks.

Next, you should decide the what system user you should execute the daemon.
Typically, fcgi_spawn daemon is suitable for most cases, it takes this and some
more parameters on a command line.

Alternately, you may create an executable Perl file expected to being launched
as a daemon by yourself.

Also, you should configure the UNIX system user and/or group to launch the
daemon with. `To configure' I mean both the environment and ulimit(3). And, the
target daemon user should be able to create, and communicate via the socket set
as an argument for FCGI-Spawn instance creation ( the new() method ). And, bear
in mind that the FactCGI requester ( the Web server ) should be able to operate
via this socket, so after creation it should be writable by Web server user. To
satisfy this, I recommend the FCGI-Spawn daemon user be included into the same
group as Web server and socket's permissions should be 0660.

I tried to organize the request loop operations with using the pm_pre_dispatch() / pm_post_dispatch() 
but could not keep in frames of its assumptions.
Refer for more usage details to:

  perldoc fcgi_spawn
  perldoc FCGI::Spawn
  perldoc FCGI::ProcManager


Copyright
---------
Copyright (c) 2006-2010, Peter Vereshagin &amp;lt;peter@vereshagin.org&amp;gt;


Disclaimer
----------

This library is free software released "AS IS WITH ALL FAULTS"
and WITHOUT ANY WARRANTIES under the terms of the GNU Lesser
General Public License, Version 2.1, a copy of which can be
found in the "COPYING" file of this distribution.

&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</description><author>petr999</author><guid isPermaLink="false">https://github.com/petr999/fcgi-spawn</guid><pubDate>Thu, 31 Oct 2019 00:00:00 GMT</pubDate></item></channel></rss>