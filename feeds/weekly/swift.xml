<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>GitHub Trending: Swift, This week</title><link>https://github.com/trending/swift?since=weekly</link><description>The top repositories on GitHub for swift, measured weekly</description><pubDate>Mon, 18 Nov 2019 01:06:46 GMT</pubDate><lastBuildDate>Mon, 18 Nov 2019 01:06:46 GMT</lastBuildDate><generator>PyRSS2Gen-1.1.0</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><ttl>720</ttl><item><title>ProtonMail/ios-mail #1 in Swift, This week</title><link>https://github.com/ProtonMail/ios-mail</link><description>&lt;p&gt;&lt;i&gt;[No description found.]&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-ios-mail" class="anchor" aria-hidden="true" href="#ios-mail"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;iOS-mail&lt;/h1&gt;
&lt;h2&gt;&lt;a id="user-content-introduction" class="anchor" aria-hidden="true" href="#introduction"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Introduction&lt;/h2&gt;
&lt;p&gt;iOS-mail — ProtonMail iOS client app&lt;/p&gt;
&lt;p&gt;The app is intended for all users of the ProtonMail service. Whether they are paid or free, they can compose and read emails, manage folders and labels, manage some account settings and create a new account. The app supports iOS 10-13.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-license" class="anchor" aria-hidden="true" href="#license"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;License&lt;/h2&gt;
&lt;p&gt;The code and data files in this distribution are licensed under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. See &lt;a href="https://www.gnu.org/licenses/" rel="nofollow"&gt;https://www.gnu.org/licenses/&lt;/a&gt; for a copy of this license.&lt;/p&gt;
&lt;p&gt;See &lt;a href="LICENSE"&gt;LICENSE&lt;/a&gt; file&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-table-of-contents" class="anchor" aria-hidden="true" href="#table-of-contents"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Table of Contents&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#Introduction"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#License"&gt;License&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Architecture"&gt;Architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Dependencies"&gt;Dependencies&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#Internal"&gt;Internal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Third-Party"&gt;Third Party&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#Content-Explanation"&gt;Content Explanation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#setup"&gt;Setup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#live-version"&gt;Live version&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Articles"&gt;Articles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#our-team"&gt;Our Team&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#todo"&gt;TODO&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;&lt;a id="user-content-architecture" class="anchor" aria-hidden="true" href="#architecture"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Architecture&lt;/h2&gt;
&lt;p&gt;&lt;a href="mvvmc.png"&gt;MVVM-C&lt;/a&gt; with services. Model-View-ViewModel architecture, plus the Coordinator pattern.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-dependencies" class="anchor" aria-hidden="true" href="#dependencies"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Dependencies&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-internal" class="anchor" aria-hidden="true" href="#internal"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Internal&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ProtonMail/gopenpgp"&gt;gopenpgp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ProtonMail/cpp-openpgp"&gt;OpenPGP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ProtonMail/cpp-openpgp"&gt;VCard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ProtonMail/go-srp"&gt;go-srp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-third-party" class="anchor" aria-hidden="true" href="#third-party"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Third Party&lt;/h3&gt;
&lt;p&gt;&lt;a href="Acknowledgements.md"&gt;Acknowledgements&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-content-explanation" class="anchor" aria-hidden="true" href="#content-explanation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Content Explanation&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="OpenPGP/README.md"&gt;OpenPGP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="ProtonMail/Keymaker/README.md"&gt;Keymaker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="ProtonMail/ProtonMail/README.md"&gt;ProtonMail&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="ProtonMail/ProtonMailCommon/README.md"&gt;ProtonMailCommon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="ProtonMail/Push/README.md"&gt;Push&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="ProtonMail/PushService/README.md"&gt;PushService&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="ProtonMail/Share/README.md"&gt;Share&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="ProtonMail/Siri/README.md"&gt;Siri&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="Scripts/README.md"&gt;Scripts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="ProtonMail/README.md#Trust-Model"&gt;Trust Model&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="ProtonMail/README.md#Local-Data"&gt;Local Data Protection&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;&lt;a id="user-content-setup" class="anchor" aria-hidden="true" href="#setup"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Setup&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Have macOS up to date and install Xcode 11.1&lt;/li&gt;
&lt;li&gt;We use xUnique (ver 4.1.4) in order to prevent merge conflicts in the ProtonMail.xcodeproj file. Each shared scheme has a post-build action, and builds will fail on machines with no xUnique installed. Please follow xUnique's &lt;a href="https://github.com/truebit/xUnique"&gt;installation instructions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DOMPurify&lt;/code&gt;(@b06b6b2ac8) and Cocoapods are pre-downloaded. We are using git submodules for tracking DOMPurifier, so after cloning you have to run &lt;code&gt;git submodule init&lt;/code&gt; and &lt;code&gt;git submodule update&lt;/code&gt; to fetch it. Theory here: &lt;a href="https://git-scm.com/book/en/v2/Git-Tools-Submodules" rel="nofollow"&gt;https://git-scm.com/book/en/v2/Git-Tools-Submodules&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Open &lt;code&gt;ProtonMail/ProtonMail.xcworkspace&lt;/code&gt; and click the run button&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;&lt;a id="user-content-live-version" class="anchor" aria-hidden="true" href="#live-version"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Live version&lt;/h2&gt;
&lt;p&gt;Current live version 1.11.13&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="Changelog.md"&gt;Changelogs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://apps.apple.com/app/protonmail-encrypted-email/id979659905" rel="nofollow"&gt;Apple Store&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-articles" class="anchor" aria-hidden="true" href="#articles"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Articles&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://protonmail.com/blog/ios-open-source" rel="nofollow"&gt;Open sourcing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://protonmail.com/blog/ios-security-model" rel="nofollow"&gt;Security model&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-our-team" class="anchor" aria-hidden="true" href="#our-team"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Our Team&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/zhj4478"&gt;Feng&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/abjurato"&gt;Anatoly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/henrybear327"&gt;Henry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/emnproton"&gt;Emil&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-todo" class="anchor" aria-hidden="true" href="#todo"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TODO&lt;/h2&gt;
&lt;ul class="contains-task-list"&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox"&gt; UI redesign&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox"&gt; multiple user support&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox"&gt; share frameworks&lt;/li&gt;
&lt;/ul&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>ProtonMail</author><guid isPermaLink="false">https://github.com/ProtonMail/ios-mail</guid><pubDate>Mon, 18 Nov 2019 00:01:00 GMT</pubDate></item><item><title>apple/swift-numerics #2 in Swift, This week</title><link>https://github.com/apple/swift-numerics</link><description>&lt;p&gt;&lt;i&gt;Numerical APIs for Swift&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-swift-numerics" class="anchor" aria-hidden="true" href="#swift-numerics"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Swift Numerics&lt;/h1&gt;
&lt;h2&gt;&lt;a id="user-content-introduction" class="anchor" aria-hidden="true" href="#introduction"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Swift Numerics provides a set of modules that support numerical computing in Swift.
These modules fall broadly into two categories:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;API that is too specialized to go into the standard library, but which is sufficiently general to be centralized in a single common package.&lt;/li&gt;
&lt;li&gt;API that is under active development toward possible future inclusion in the standard library.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There is some overlap between these two categories, and API that begins in the first category may migrate to the second as it matures and new uses are discovered.&lt;/p&gt;
&lt;p&gt;Swift Numerics modules are fine-grained; if you need support for Complex numbers, you can import the Complex module without pulling in everything else in the library as well:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;Complex&lt;/span&gt;

&lt;span class="pl-k"&gt;let&lt;/span&gt; z &lt;span class="pl-k"&gt;=&lt;/span&gt; Complex&lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-c1"&gt;Double&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;.&lt;span class="pl-smi"&gt;i&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However, there is also a top-level &lt;code&gt;Numerics&lt;/code&gt; module that simply re-exports the complete public interface of swift-numerics:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;Numerics&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; All swift-numerics API is now available&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Swift Numerics modules have minimal dependencies on other projects.
The current modules assume only the availability of the Swift and C standard libraries and the runtime support provided by compiler-rt.
Future expansion may assume the availability of other standard interfaces such as &lt;a href="https://en.wikipedia.org/wiki/Basic_Linear_Algebra_Subprograms" rel="nofollow"&gt;BLAS (Basic Linear Algebra Subprograms)&lt;/a&gt; and &lt;a href="https://en.wikipedia.org/wiki/LAPACK" rel="nofollow"&gt;LAPACK (Linear Algebra Package)&lt;/a&gt;, but modules with more specialized dependencies (or dependencies that are not available on all platforms supported by Swift) belong in a separate package.&lt;/p&gt;
&lt;p&gt;Because we intend to make it possible to adopt Swift Numerics modules in the standard library at some future point, Swift Numerics uses the same license and contribution guidelines as the Swift project.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-process" class="anchor" aria-hidden="true" href="#process"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Process&lt;/h2&gt;
&lt;p&gt;Swift Numerics is a standalone library separate from the core Swift project.
In practice, it will act as a staging ground for some APIs that may eventually be incorporated into the Swift Standard Library, and when that happens such changes will be proposed to the Swift Standard Library using the established evolution process of the Swift project.&lt;/p&gt;
&lt;p&gt;Swift Numerics uses GitHub issues to track bugs and features. We use pull requests for development.&lt;/p&gt;
&lt;p&gt;To propose a new module:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Raise an issue with the [new module] tag.&lt;/li&gt;
&lt;li&gt;Raise a PR with an implementation sketch.&lt;/li&gt;
&lt;li&gt;Once you have some consensus, ask an admin to create a feature branch against which PRs can be raised.&lt;/li&gt;
&lt;li&gt;When the design has stabilized and is functional enough to be useful, raise a PR to merge the new module to master.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To propose a new feature for an existing module:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Raise an issue with the [enhancement] tag.&lt;/li&gt;
&lt;li&gt;Raise a PR with your implementation, and discuss the implementation there.&lt;/li&gt;
&lt;li&gt;Once there is a consensus that the new feature is desirable and the design is suitable, it can be merged.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To fix a bug, or make smaller improvements:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Raise a PR with your change. Be sure to add test coverage for whatever changes you are making.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Questions about how to use Swift Numerics modules, or issues that are not clearly bugs can be discussed in the &lt;a href="https://forums.swift.org/c/related-projects/swift-numerics" rel="nofollow"&gt;"Swift Numerics" section of the Swift forums.&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-modules" class="anchor" aria-hidden="true" href="#modules"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Modules&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="Sources/Real/README.md"&gt;Real&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="Sources/Complex/README.md"&gt;Complex&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;&lt;a id="user-content-future-expansion" class="anchor" aria-hidden="true" href="#future-expansion"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Future expansion&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/apple/swift-numerics/issues/3"&gt;Approximate Equality&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apple/swift-numerics/issues/4"&gt;Large Fixed-Width Integers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apple/swift-numerics/issues/5"&gt;Arbitrary-Precision Integers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apple/swift-numerics/issues/6"&gt;Shaped Arrays&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apple/swift-numerics/issues/7"&gt;Decimal Floating-point&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apple/swift-numerics/issues/8"&gt;Float16&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>apple</author><guid isPermaLink="false">https://github.com/apple/swift-numerics</guid><pubDate>Mon, 18 Nov 2019 00:02:00 GMT</pubDate></item><item><title>Alamofire/Alamofire #3 in Swift, This week</title><link>https://github.com/Alamofire/Alamofire</link><description>&lt;p&gt;&lt;i&gt;Elegant HTTP Networking in Swift&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/Alamofire/Alamofire/master/alamofire.png"&gt;&lt;img src="https://raw.githubusercontent.com/Alamofire/Alamofire/master/alamofire.png" alt="Alamofire: Elegant Networking in Swift" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://travis-ci.org/Alamofire/Alamofire" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/077a1810116942b4f37ebd4aca3c88bad49c328d/68747470733a2f2f7472617669732d63692e6f72672f416c616d6f666972652f416c616d6f666972652e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/Alamofire/Alamofire.svg?branch=master" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://img.shields.io/cocoapods/v/Alamofire.svg" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/9bd6769e4a8458272a249358bec5e4e511ce6888/68747470733a2f2f696d672e736869656c64732e696f2f636f636f61706f64732f762f416c616d6f666972652e737667" alt="CocoaPods Compatible" data-canonical-src="https://img.shields.io/cocoapods/v/Alamofire.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://github.com/Carthage/Carthage"&gt;&lt;img src="https://camo.githubusercontent.com/3dc8a44a2c3f7ccd5418008d1295aae48466c141/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f43617274686167652d636f6d70617469626c652d3442433531442e7376673f7374796c653d666c6174" alt="Carthage Compatible" data-canonical-src="https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://alamofire.github.io/Alamofire" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/7bbc7493c87f5447d92c2394201eec2f79ecbe1d/68747470733a2f2f696d672e736869656c64732e696f2f636f636f61706f64732f702f416c616d6f666972652e7376673f7374796c653d666c6174" alt="Platform" data-canonical-src="https://img.shields.io/cocoapods/p/Alamofire.svg?style=flat" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://twitter.com/AlamofireSF" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/778c845778219b6c8b8160fc1b8c2ac4b21b7aab/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f747769747465722d40416c616d6f6669726553462d626c75652e7376673f7374796c653d666c6174" alt="Twitter" data-canonical-src="https://img.shields.io/badge/twitter-@AlamofireSF-blue.svg?style=flat" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://gitter.im/Alamofire/Alamofire?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/3f34d662fe4592df9b54859f624c089c5386a3ab/68747470733a2f2f6261646765732e6769747465722e696d2f416c616d6f666972652f416c616d6f666972652e737667" alt="Gitter" data-canonical-src="https://badges.gitter.im/Alamofire/Alamofire.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://www.codetriage.com/alamofire/alamofire" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/08b7810b0eb2f6121f6cc2417ffcfee1c7608acf/68747470733a2f2f7777772e636f64657472696167652e636f6d2f616c616d6f666972652f616c616d6f666972652f6261646765732f75736572732e737667" alt="Open Source Helpers" data-canonical-src="https://www.codetriage.com/alamofire/alamofire/badges/users.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Alamofire is an HTTP networking library written in Swift.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;g-emoji class="g-emoji" alias="warning" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/26a0.png"&gt;⚠️&lt;/g-emoji&gt;&lt;g-emoji class="g-emoji" alias="warning" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/26a0.png"&gt;⚠️&lt;/g-emoji&gt;&lt;g-emoji class="g-emoji" alias="warning" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/26a0.png"&gt;⚠️&lt;/g-emoji&gt; WARNING &lt;g-emoji class="g-emoji" alias="warning" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/26a0.png"&gt;⚠️&lt;/g-emoji&gt;&lt;g-emoji class="g-emoji" alias="warning" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/26a0.png"&gt;⚠️&lt;/g-emoji&gt;&lt;g-emoji class="g-emoji" alias="warning" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/26a0.png"&gt;⚠️&lt;/g-emoji&gt;&lt;/strong&gt; This documentation is out of date during the Alamofire 5 beta process.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#features"&gt;Features&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#component-libraries"&gt;Component Libraries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#requirements"&gt;Requirements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#migration-guides"&gt;Migration Guides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#communication"&gt;Communication&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#installation"&gt;Installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Alamofire/Alamofire/blob/master/Documentation/Usage.md#using-alamofire"&gt;Usage&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Alamofire/Alamofire/blob/master/Documentation/Usage.md#introduction"&gt;&lt;strong&gt;Introduction -&lt;/strong&gt;&lt;/a&gt; &lt;a href="https://github.com/Alamofire/Alamofire/blob/master/Documentation/Usage.md#making-requests"&gt;Making Requests&lt;/a&gt;, &lt;a href="https://github.com/Alamofire/Alamofire/blob/master/Documentation/Usage.md#response-handling"&gt;Response Handling&lt;/a&gt;, &lt;a href="https://github.com/Alamofire/Alamofire/blob/master/Documentation/Usage.md#response-validation"&gt;Response Validation&lt;/a&gt;, &lt;a href="https://github.com/Alamofire/Alamofire/blob/master/Documentation/Usage.md#response-caching"&gt;Response Caching&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;HTTP -&lt;/strong&gt; &lt;a href="https://github.com/Alamofire/Alamofire/blob/master/Documentation/Usage.md#http-methods"&gt;HTTP Methods&lt;/a&gt;, &lt;a href="https://github.com/Alamofire/Alamofire/blob/master/Documentation/Usage.md##request-parameters-and-parameter-encoders"&gt;Parameters and Parameter Encoder&lt;/a&gt;, &lt;a href="https://github.com/Alamofire/Alamofire/blob/master/Documentation/Usage.md#http-headers"&gt;HTTP Headers&lt;/a&gt;, &lt;a href="https://github.com/Alamofire/Alamofire/blob/master/Documentation/Usage.md#authentication"&gt;Authentication&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Large Data -&lt;/strong&gt; &lt;a href="https://github.com/Alamofire/Alamofire/blob/master/Documentation/Usage.md#downloading-data-to-a-file"&gt;Downloading Data to a File&lt;/a&gt;, &lt;a href="https://github.com/Alamofire/Alamofire/blob/master/Documentation/Usage.md#uploading-data-to-a-server"&gt;Uploading Data to a Server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tools -&lt;/strong&gt; &lt;a href="https://github.com/Alamofire/Alamofire/blob/master/Documentation/Usage.md#statistical-metrics"&gt;Statistical Metrics&lt;/a&gt;, &lt;a href="https://github.com/Alamofire/Alamofire/blob/master/Documentation/Usage.md#curl-command-output"&gt;cURL Command Output&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Alamofire/Alamofire/blob/master/Documentation/AdvancedUsage.md"&gt;Advanced Usage&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;URL Session -&lt;/strong&gt; &lt;a href="https://github.com/Alamofire/Alamofire/blob/master/Documentation/AdvancedUsage.md#session-manager"&gt;Session Manager&lt;/a&gt;, &lt;a href="https://github.com/Alamofire/Alamofire/blob/master/Documentation/AdvancedUsage.md#session-delegate"&gt;Session Delegate&lt;/a&gt;, &lt;a href="https://github.com/Alamofire/Alamofire/blob/master/Documentation/AdvancedUsage.md#request"&gt;Request&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Routing -&lt;/strong&gt; &lt;a href="https://github.com/Alamofire/Alamofire/blob/master/Documentation/AdvancedUsage.md#routing-requests"&gt;Routing Requests&lt;/a&gt;, &lt;a href="https://github.com/Alamofire/Alamofire/blob/master/Documentation/AdvancedUsage.md#adapting-and-retrying-requests"&gt;Adapting and Retrying Requests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Model Objects -&lt;/strong&gt; &lt;a href="https://github.com/Alamofire/Alamofire/blob/master/Documentation/AdvancedUsage.md#custom-response-serialization"&gt;Custom Response Serialization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Connection -&lt;/strong&gt; &lt;a href="https://github.com/Alamofire/Alamofire/blob/master/Documentation/AdvancedUsage.md#security"&gt;Security&lt;/a&gt;, &lt;a href="https://github.com/Alamofire/Alamofire/blob/master/Documentation/AdvancedUsage.md#network-reachability"&gt;Network Reachability&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#open-radars"&gt;Open Radars&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#faq"&gt;FAQ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#credits"&gt;Credits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#donations"&gt;Donations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#license"&gt;License&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-features" class="anchor" aria-hidden="true" href="#features"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Features&lt;/h2&gt;
&lt;ul class="contains-task-list"&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; Chainable Request / Response Methods&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; URL / JSON / plist Parameter Encoding&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; Upload File / Data / Stream / MultipartFormData&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; Download File using Request or Resume Data&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; Authentication with URLCredential&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; HTTP Response Validation&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; Upload and Download Progress Closures with Progress&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; cURL Command Output&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; Dynamically Adapt and Retry Requests&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; TLS Certificate and Public Key Pinning&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; Network Reachability&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; Comprehensive Unit and Integration Test Coverage&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; &lt;a href="https://alamofire.github.io/Alamofire" rel="nofollow"&gt;Complete Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-component-libraries" class="anchor" aria-hidden="true" href="#component-libraries"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Component Libraries&lt;/h2&gt;
&lt;p&gt;In order to keep Alamofire focused specifically on core networking implementations, additional component libraries have been created by the &lt;a href="https://github.com/Alamofire/Foundation"&gt;Alamofire Software Foundation&lt;/a&gt; to bring additional functionality to the Alamofire ecosystem.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Alamofire/AlamofireImage"&gt;AlamofireImage&lt;/a&gt; - An image library including image response serializers, &lt;code&gt;UIImage&lt;/code&gt; and &lt;code&gt;UIImageView&lt;/code&gt; extensions, custom image filters, an auto-purging in-memory cache and a priority-based image downloading system.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Alamofire/AlamofireNetworkActivityIndicator"&gt;AlamofireNetworkActivityIndicator&lt;/a&gt; - Controls the visibility of the network activity indicator on iOS using Alamofire. It contains configurable delay timers to help mitigate flicker and can support &lt;code&gt;URLSession&lt;/code&gt; instances not managed by Alamofire.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-requirements" class="anchor" aria-hidden="true" href="#requirements"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Requirements&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;iOS 10.0+ / macOS 10.12+ / tvOS 10.0+ / watchOS 3.0+&lt;/li&gt;
&lt;li&gt;Xcode 10.2+&lt;/li&gt;
&lt;li&gt;Swift 5+&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-migration-guides" class="anchor" aria-hidden="true" href="#migration-guides"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Migration Guides&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Alamofire 5.0 Migration Guide: To be written!&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Alamofire/Alamofire/blob/master/Documentation/Alamofire%204.0%20Migration%20Guide.md"&gt;Alamofire 4.0 Migration Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Alamofire/Alamofire/blob/master/Documentation/Alamofire%203.0%20Migration%20Guide.md"&gt;Alamofire 3.0 Migration Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Alamofire/Alamofire/blob/master/Documentation/Alamofire%202.0%20Migration%20Guide.md"&gt;Alamofire 2.0 Migration Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-communication" class="anchor" aria-hidden="true" href="#communication"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Communication&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;If you &lt;strong&gt;need help with making network requests&lt;/strong&gt; using Alamofire, use &lt;a href="https://stackoverflow.com/questions/tagged/alamofire" rel="nofollow"&gt;Stack Overflow&lt;/a&gt; and tag &lt;code&gt;alamofire&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If you need to &lt;strong&gt;find or understand an API&lt;/strong&gt;, check &lt;a href="http://alamofire.github.io/Alamofire/" rel="nofollow"&gt;our documentation&lt;/a&gt; or &lt;a href="https://developer.apple.com/documentation/foundation/url_loading_system" rel="nofollow"&gt;Apple's documentation for &lt;code&gt;URLSession&lt;/code&gt;&lt;/a&gt;, on top of which Alamofire is built.&lt;/li&gt;
&lt;li&gt;If you need &lt;strong&gt;help with an Alamofire feature&lt;/strong&gt;, use &lt;a href="https://forums.swift.org/c/related-projects/alamofire" rel="nofollow"&gt;our forum on swift.org&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;If you'd like to &lt;strong&gt;discuss Alamofire best practices&lt;/strong&gt;, use &lt;a href="https://forums.swift.org/c/related-projects/alamofire" rel="nofollow"&gt;our forum on swift.org&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;If you'd like to &lt;strong&gt;discuss a feature request&lt;/strong&gt;, use &lt;a href="https://forums.swift.org/c/related-projects/alamofire" rel="nofollow"&gt;our forum on swift.org&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;If you &lt;strong&gt;found a bug&lt;/strong&gt;, open an issue here on GitHub and follow the guide. The more detail the better!&lt;/li&gt;
&lt;li&gt;If you &lt;strong&gt;want to contribute&lt;/strong&gt;, submit a pull request.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installation&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-cocoapods" class="anchor" aria-hidden="true" href="#cocoapods"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;CocoaPods&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://cocoapods.org" rel="nofollow"&gt;CocoaPods&lt;/a&gt; is a dependency manager for Cocoa projects. For usage and installation instructions, visit their website. To integrate Alamofire into your Xcode project using CocoaPods, specify it in your &lt;code&gt;Podfile&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-ruby"&gt;&lt;pre&gt;pod &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;Alamofire&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;~&amp;gt; 5.0.0-rc.3&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-carthage" class="anchor" aria-hidden="true" href="#carthage"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Carthage&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/Carthage/Carthage"&gt;Carthage&lt;/a&gt; is a decentralized dependency manager that builds your dependencies and provides you with binary frameworks. To integrate Alamofire into your Xcode project using Carthage, specify it in your &lt;code&gt;Cartfile&lt;/code&gt;:&lt;/p&gt;
&lt;pre lang="ogdl"&gt;&lt;code&gt;github "Alamofire/Alamofire" "5.0.0-rc.3"
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-swift-package-manager" class="anchor" aria-hidden="true" href="#swift-package-manager"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Swift Package Manager&lt;/h3&gt;
&lt;p&gt;The &lt;a href="https://swift.org/package-manager/" rel="nofollow"&gt;Swift Package Manager&lt;/a&gt; is a tool for automating the distribution of Swift code and is integrated into the &lt;code&gt;swift&lt;/code&gt; compiler. It is in early development, but Alamofire does support its use on supported platforms.&lt;/p&gt;
&lt;p&gt;Once you have your Swift package set up, adding Alamofire as a dependency is as easy as adding it to the &lt;code&gt;dependencies&lt;/code&gt; value of your &lt;code&gt;Package.swift&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;dependencies&lt;span class="pl-k"&gt;:&lt;/span&gt; [
    .&lt;span class="pl-c1"&gt;package&lt;/span&gt;(&lt;span class="pl-c1"&gt;url&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;https://github.com/Alamofire/Alamofire.git&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;from&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;5.0.0-rc.3&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
]&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-manually" class="anchor" aria-hidden="true" href="#manually"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Manually&lt;/h3&gt;
&lt;p&gt;If you prefer not to use any of the aforementioned dependency managers, you can integrate Alamofire into your project manually.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-embedded-framework" class="anchor" aria-hidden="true" href="#embedded-framework"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Embedded Framework&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Open up Terminal, &lt;code&gt;cd&lt;/code&gt; into your top-level project directory, and run the following command "if" your project is not initialized as a git repository:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;$ git init&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add Alamofire as a git &lt;a href="https://git-scm.com/docs/git-submodule" rel="nofollow"&gt;submodule&lt;/a&gt; by running the following command:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;$ git submodule add https://github.com/Alamofire/Alamofire.git&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Open the new &lt;code&gt;Alamofire&lt;/code&gt; folder, and drag the &lt;code&gt;Alamofire.xcodeproj&lt;/code&gt; into the Project Navigator of your application's Xcode project.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It should appear nested underneath your application's blue project icon. Whether it is above or below all the other Xcode groups does not matter.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select the &lt;code&gt;Alamofire.xcodeproj&lt;/code&gt; in the Project Navigator and verify the deployment target matches that of your application target.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Next, select your application project in the Project Navigator (blue project icon) to navigate to the target configuration window and select the application target under the "Targets" heading in the sidebar.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the tab bar at the top of that window, open the "General" panel.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Click on the &lt;code&gt;+&lt;/code&gt; button under the "Embedded Binaries" section.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You will see two different &lt;code&gt;Alamofire.xcodeproj&lt;/code&gt; folders each with two different versions of the &lt;code&gt;Alamofire.framework&lt;/code&gt; nested inside a &lt;code&gt;Products&lt;/code&gt; folder.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It does not matter which &lt;code&gt;Products&lt;/code&gt; folder you choose from, but it does matter whether you choose the top or bottom &lt;code&gt;Alamofire.framework&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select the top &lt;code&gt;Alamofire.framework&lt;/code&gt; for iOS and the bottom one for macOS.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You can verify which one you selected by inspecting the build log for your project. The build target for &lt;code&gt;Alamofire&lt;/code&gt; will be listed as either &lt;code&gt;Alamofire iOS&lt;/code&gt;, &lt;code&gt;Alamofire macOS&lt;/code&gt;, &lt;code&gt;Alamofire tvOS&lt;/code&gt; or &lt;code&gt;Alamofire watchOS&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;And that's it!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;Alamofire.framework&lt;/code&gt; is automagically added as a target dependency, linked framework and embedded framework in a copy files build phase which is all you need to build on the simulator and a device.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-open-radars" class="anchor" aria-hidden="true" href="#open-radars"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Open Radars&lt;/h2&gt;
&lt;p&gt;The following radars have some effect on the current implementation of Alamofire.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.openradar.me/radar?id=5517037090635776" rel="nofollow"&gt;&lt;code&gt;rdar://21349340&lt;/code&gt;&lt;/a&gt; - Compiler throwing warning due to toll-free bridging issue in test case&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rdar://26870455&lt;/code&gt; - Background URL Session Configurations do not work in the simulator&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rdar://26849668&lt;/code&gt; - Some URLProtocol APIs do not properly handle &lt;code&gt;URLRequest&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-resolved-radars" class="anchor" aria-hidden="true" href="#resolved-radars"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Resolved Radars&lt;/h2&gt;
&lt;p&gt;The following radars have been resolved over time after being filed against the Alamofire project.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.openradar.me/radar?id=5010235949318144" rel="nofollow"&gt;&lt;code&gt;rdar://26761490&lt;/code&gt;&lt;/a&gt; - Swift string interpolation causing memory leak with common usage.
&lt;ul&gt;
&lt;li&gt;(Resolved): 9/1/17 in Xcode 9 beta 6.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://openradar.appspot.com/radar?id=4942308441063424" rel="nofollow"&gt;&lt;code&gt;rdar://36082113&lt;/code&gt;&lt;/a&gt; - &lt;code&gt;URLSessionTaskMetrics&lt;/code&gt; failing to link on watchOS 3.0+
&lt;ul&gt;
&lt;li&gt;(Resolved): Just add &lt;code&gt;CFNetwork&lt;/code&gt; to your linked frameworks.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-faq" class="anchor" aria-hidden="true" href="#faq"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;FAQ&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-whats-the-origin-of-the-name-alamofire" class="anchor" aria-hidden="true" href="#whats-the-origin-of-the-name-alamofire"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;What's the origin of the name Alamofire?&lt;/h3&gt;
&lt;p&gt;Alamofire is named after the &lt;a href="https://aggie-horticulture.tamu.edu/wildseed/alamofire.html" rel="nofollow"&gt;Alamo Fire flower&lt;/a&gt;, a hybrid variant of the Bluebonnet, the official state flower of Texas.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-credits" class="anchor" aria-hidden="true" href="#credits"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Credits&lt;/h2&gt;
&lt;p&gt;Alamofire is owned and maintained by the &lt;a href="http://alamofire.org" rel="nofollow"&gt;Alamofire Software Foundation&lt;/a&gt;. You can follow them on Twitter at &lt;a href="https://twitter.com/AlamofireSF" rel="nofollow"&gt;@AlamofireSF&lt;/a&gt; for project updates and releases.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-security-disclosure" class="anchor" aria-hidden="true" href="#security-disclosure"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Security Disclosure&lt;/h3&gt;
&lt;p&gt;If you believe you have identified a security vulnerability with Alamofire, you should report it as soon as possible via email to &lt;a href="mailto:security@alamofire.org"&gt;security@alamofire.org&lt;/a&gt;. Please do not post it to a public issue tracker.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-donations" class="anchor" aria-hidden="true" href="#donations"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Donations&lt;/h2&gt;
&lt;p&gt;The &lt;a href="https://github.com/Alamofire/Foundation#members"&gt;ASF&lt;/a&gt; is looking to raise money to officially stay registered as a federal non-profit organization.
Registering will allow us members to gain some legal protections and also allow us to put donations to use, tax free.
Donating to the ASF will enable us to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pay our yearly legal fees to keep the non-profit in good status&lt;/li&gt;
&lt;li&gt;Pay for our mail servers to help us stay on top of all questions and security issues&lt;/li&gt;
&lt;li&gt;Potentially fund test servers to make it easier for us to test the edge cases&lt;/li&gt;
&lt;li&gt;Potentially fund developers to work on one of our projects full-time&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The community adoption of the ASF libraries has been amazing.
We are greatly humbled by your enthusiasm around the projects, and want to continue to do everything we can to move the needle forward.
With your continued support, the ASF will be able to improve its reach and also provide better legal safety for the core members.
If you use any of our libraries for work, see if your employers would be interested in donating.
Any amount you can donate today to help us reach our goal would be greatly appreciated.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;amp;hosted_button_id=W34WPEE74APJQ" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/f896f7d176663a1559376bb56aac4bdbbbe85ed1/68747470733a2f2f7777772e70617970616c6f626a656374732e636f6d2f656e5f55532f692f62746e2f62746e5f646f6e61746543435f4c472e676966" alt="paypal" data-canonical-src="https://www.paypalobjects.com/en_US/i/btn/btn_donateCC_LG.gif" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-license" class="anchor" aria-hidden="true" href="#license"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;License&lt;/h2&gt;
&lt;p&gt;Alamofire is released under the MIT license. &lt;a href="https://github.com/Alamofire/Alamofire/blob/master/LICENSE"&gt;See LICENSE&lt;/a&gt; for details.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>Alamofire</author><guid isPermaLink="false">https://github.com/Alamofire/Alamofire</guid><pubDate>Mon, 18 Nov 2019 00:03:00 GMT</pubDate></item><item><title>stephencelis/SQLite.swift #4 in Swift, This week</title><link>https://github.com/stephencelis/SQLite.swift</link><description>&lt;p&gt;&lt;i&gt;A type-safe, Swift-language layer over SQLite3.&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-sqliteswift" class="anchor" aria-hidden="true" href="#sqliteswift"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;SQLite.swift&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://travis-ci.org/stephencelis/SQLite.swift" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/f4298cc67f5a1d22ed1da066e9380c82b83967e6/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f7374657068656e63656c69732f53514c6974652e73776966742f6d61737465722e7376673f7374796c653d666c6174" alt="Build Status" data-canonical-src="https://img.shields.io/travis/stephencelis/SQLite.swift/master.svg?style=flat" style="max-width:100%;"&gt;&lt;/a&gt; &lt;a href="http://cocoadocs.org/docsets/SQLite.swift" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/8db5f0a449dd0ace01a4416caeee3bdbe39dda56/68747470733a2f2f636f636f61706f642d6261646765732e6865726f6b756170702e636f6d2f762f53514c6974652e73776966742f62616467652e706e67" alt="CocoaPods Version" data-canonical-src="https://cocoapod-badges.herokuapp.com/v/SQLite.swift/badge.png" style="max-width:100%;"&gt;&lt;/a&gt; &lt;a href="https://developer.apple.com/swift/" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/c71f82ee3309bc14cc904fb1a628903768e1ac39/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f73776966742d352d6f72616e67652e7376673f7374796c653d666c6174" alt="Swift5 compatible" data-canonical-src="https://img.shields.io/badge/swift-5-orange.svg?style=flat" style="max-width:100%;"&gt;&lt;/a&gt; &lt;a href="http://cocoadocs.org/docsets/SQLite.swift" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/7d02c04a141356f85360e0575b3ed52de7cb48ec/68747470733a2f2f636f636f61706f642d6261646765732e6865726f6b756170702e636f6d2f702f53514c6974652e73776966742f62616467652e706e67" alt="Platform" data-canonical-src="https://cocoapod-badges.herokuapp.com/p/SQLite.swift/badge.png" style="max-width:100%;"&gt;&lt;/a&gt; &lt;a href="https://github.com/Carthage/Carthage"&gt;&lt;img src="https://camo.githubusercontent.com/3dc8a44a2c3f7ccd5418008d1295aae48466c141/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f43617274686167652d636f6d70617469626c652d3442433531442e7376673f7374796c653d666c6174" alt="Carthage compatible" data-canonical-src="https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat" style="max-width:100%;"&gt;&lt;/a&gt; &lt;a href="https://gitter.im/stephencelis/SQLite.swift" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/a042027a6ca9b7219bd8ebac4d8172d9171355e5/68747470733a2f2f6261646765732e6769747465722e696d2f7374657068656e63656c69732f53514c6974652e73776966742e737667" alt="Join the chat at https://gitter.im/stephencelis/SQLite.swift" data-canonical-src="https://badges.gitter.im/stephencelis/SQLite.swift.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A type-safe, &lt;a href="https://swift.org/" rel="nofollow"&gt;Swift&lt;/a&gt;-language layer over &lt;a href="http://www.sqlite.org" rel="nofollow"&gt;SQLite3&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/stephencelis/SQLite.swift"&gt;SQLite.swift&lt;/a&gt; provides compile-time confidence in SQL statement
syntax &lt;em&gt;and&lt;/em&gt; intent.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-features" class="anchor" aria-hidden="true" href="#features"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;A pure-Swift interface&lt;/li&gt;
&lt;li&gt;A type-safe, optional-aware SQL expression builder&lt;/li&gt;
&lt;li&gt;A flexible, chainable, lazy-executing query layer&lt;/li&gt;
&lt;li&gt;Automatically-typed data access&lt;/li&gt;
&lt;li&gt;A lightweight, uncomplicated query and parameter binding interface&lt;/li&gt;
&lt;li&gt;Developer-friendly error handling and debugging&lt;/li&gt;
&lt;li&gt;&lt;a href="Documentation/Index.md#full-text-search"&gt;Full-text search&lt;/a&gt; support&lt;/li&gt;
&lt;li&gt;&lt;a href="Documentation/Index.md#sqliteswift-documentation"&gt;Well-documented&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Extensively tested&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.zetetic.net/sqlcipher/" rel="nofollow"&gt;SQLCipher&lt;/a&gt; support via CocoaPods&lt;/li&gt;
&lt;li&gt;Active support at
&lt;a href="http://stackoverflow.com/questions/tagged/sqlite.swift" rel="nofollow"&gt;StackOverflow&lt;/a&gt;,
and &lt;a href="https://gitter.im/stephencelis/SQLite.swift" rel="nofollow"&gt;Gitter Chat Room&lt;/a&gt;
(&lt;em&gt;experimental&lt;/em&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Usage&lt;/h2&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;SQLite&lt;/span&gt;

&lt;span class="pl-k"&gt;let&lt;/span&gt; db &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;Connection&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;path/to/db.sqlite3&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)

&lt;span class="pl-k"&gt;let&lt;/span&gt; users &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;Table&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;users&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-k"&gt;let&lt;/span&gt; id &lt;span class="pl-k"&gt;=&lt;/span&gt; Expression&lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-c1"&gt;Int64&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;id&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-k"&gt;let&lt;/span&gt; name &lt;span class="pl-k"&gt;=&lt;/span&gt; Expression&lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-c1"&gt;String&lt;/span&gt;&lt;span class="pl-k"&gt;?&amp;gt;&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;name&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-k"&gt;let&lt;/span&gt; email &lt;span class="pl-k"&gt;=&lt;/span&gt; Expression&lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-c1"&gt;String&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;email&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)

&lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;run&lt;/span&gt;(users.&lt;span class="pl-smi"&gt;create&lt;/span&gt; { t &lt;span class="pl-k"&gt;in&lt;/span&gt;
    t.&lt;span class="pl-c1"&gt;column&lt;/span&gt;(id, &lt;span class="pl-c1"&gt;primaryKey&lt;/span&gt;: &lt;span class="pl-c1"&gt;true&lt;/span&gt;)
    t.&lt;span class="pl-c1"&gt;column&lt;/span&gt;(name)
    t.&lt;span class="pl-c1"&gt;column&lt;/span&gt;(email, &lt;span class="pl-c1"&gt;unique&lt;/span&gt;: &lt;span class="pl-c1"&gt;true&lt;/span&gt;)
})
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; CREATE TABLE "users" (&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;     "id" INTEGER PRIMARY KEY NOT NULL,&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;     "name" TEXT,&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;     "email" TEXT NOT NULL UNIQUE&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; )&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;let&lt;/span&gt; insert &lt;span class="pl-k"&gt;=&lt;/span&gt; users.&lt;span class="pl-c1"&gt;insert&lt;/span&gt;(name &lt;span class="pl-k"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Alice&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, email &lt;span class="pl-k"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;alice@mac.com&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-k"&gt;let&lt;/span&gt; rowid &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;run&lt;/span&gt;(insert)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; INSERT INTO "users" ("name", "email") VALUES ('Alice', 'alice@mac.com')&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;for&lt;/span&gt; user &lt;span class="pl-k"&gt;in&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;prepare&lt;/span&gt;(users) {
    &lt;span class="pl-c1"&gt;print&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;id: &lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;user[id]&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;, name: &lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;user[name]&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;, email: &lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;user[email]&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; id: 1, name: Optional("Alice"), email: alice@mac.com&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;}
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; SELECT * FROM "users"&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;let&lt;/span&gt; alice &lt;span class="pl-k"&gt;=&lt;/span&gt; users.&lt;span class="pl-c1"&gt;filter&lt;/span&gt;(id &lt;span class="pl-k"&gt;==&lt;/span&gt; rowid)

&lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;run&lt;/span&gt;(alice.&lt;span class="pl-c1"&gt;update&lt;/span&gt;(email &lt;span class="pl-k"&gt;&amp;lt;-&lt;/span&gt; email.&lt;span class="pl-c1"&gt;replace&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;mac.com&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;with&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;me.com&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)))
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; UPDATE "users" SET "email" = replace("email", 'mac.com', 'me.com')&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; WHERE ("id" = 1)&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;run&lt;/span&gt;(alice.&lt;span class="pl-c1"&gt;delete&lt;/span&gt;())
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; DELETE FROM "users" WHERE ("id" = 1)&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;scalar&lt;/span&gt;(users.&lt;span class="pl-c1"&gt;count&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; 0&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; SELECT count(*) FROM "users"&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;SQLite.swift also works as a lightweight, Swift-friendly wrapper over the C
API.&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; stmt &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;prepare&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;INSERT INTO users (email) VALUES (?)&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-k"&gt;for&lt;/span&gt; email &lt;span class="pl-k"&gt;in&lt;/span&gt; [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;betty@icloud.com&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;cathy@icloud.com&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;] {
    &lt;span class="pl-k"&gt;try&lt;/span&gt; stmt.&lt;span class="pl-c1"&gt;run&lt;/span&gt;(email)
}

db.&lt;span class="pl-smi"&gt;totalChanges&lt;/span&gt;    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; 3&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;db.&lt;span class="pl-smi"&gt;changes&lt;/span&gt;         &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; 1&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;db.&lt;span class="pl-smi"&gt;lastInsertRowid&lt;/span&gt; &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; 3&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;for&lt;/span&gt; row &lt;span class="pl-k"&gt;in&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;prepare&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SELECT id, email FROM users&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) {
    &lt;span class="pl-c1"&gt;print&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;id: &lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;row[&lt;span class="pl-c1"&gt;0&lt;/span&gt;]&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;, email: &lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;row[&lt;span class="pl-c1"&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; id: Optional(2), email: Optional("betty@icloud.com")&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; id: Optional(3), email: Optional("cathy@icloud.com")&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;}

&lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;scalar&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SELECT count(*) FROM users&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; 2&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href="Documentation/Index.md#sqliteswift-documentation"&gt;Read the documentation&lt;/a&gt; or explore more,
interactively, from the Xcode project’s playground.&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="Documentation/Resources/playground@2x.png"&gt;&lt;img src="Documentation/Resources/playground@2x.png" alt="SQLite.playground Screen Shot" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For a more comprehensive example, see
&lt;a href="http://masteringswift.blogspot.com/2015/09/create-data-access-layer-with.html" rel="nofollow"&gt;this article&lt;/a&gt;
and the &lt;a href="https://github.com/hoffmanjon/SQLiteDataAccessLayer2/tree/master"&gt;companion repository&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installation&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; Version 0.12 requires Swift 5 (and &lt;a href="https://developer.apple.com/xcode/downloads/" rel="nofollow"&gt;Xcode&lt;/a&gt; 10.2) or greater. Version 0.11.6 requires Swift 4.2 (and &lt;a href="https://developer.apple.com/xcode/downloads/" rel="nofollow"&gt;Xcode&lt;/a&gt; 10.1) or greater.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;&lt;a id="user-content-carthage" class="anchor" aria-hidden="true" href="#carthage"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Carthage&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/Carthage/Carthage"&gt;Carthage&lt;/a&gt; is a simple, decentralized dependency manager for Cocoa. To
install SQLite.swift with Carthage:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Make sure Carthage is &lt;a href="https://github.com/Carthage/Carthage#installing-carthage"&gt;installed&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Update your Cartfile to include the following:&lt;/p&gt;
&lt;div class="highlight highlight-source-ruby"&gt;&lt;pre&gt;github &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;stephencelis/SQLite.swift&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;~&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;0.12&lt;/span&gt;.&lt;span class="pl-c1"&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run &lt;code&gt;carthage update&lt;/code&gt; and
&lt;a href="https://github.com/Carthage/Carthage#adding-frameworks-to-an-application"&gt;add the appropriate framework&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;&lt;a id="user-content-cocoapods" class="anchor" aria-hidden="true" href="#cocoapods"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;CocoaPods&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://cocoapods.org" rel="nofollow"&gt;CocoaPods&lt;/a&gt; is a dependency manager for Cocoa projects. To install
SQLite.swift with CocoaPods:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Make sure CocoaPods is &lt;a href="https://guides.cocoapods.org/using/getting-started.html#getting-started" rel="nofollow"&gt;installed&lt;/a&gt;. (SQLite.swift
requires version 1.6.1 or greater.)&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Using the default Ruby install will require you to use sudo when&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; installing and updating gems.&lt;/span&gt;
[sudo] gem install cocoapods&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Update your Podfile to include the following:&lt;/p&gt;
&lt;div class="highlight highlight-source-ruby"&gt;&lt;pre&gt;use_frameworks!

target &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;YourAppTargetName&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
    pod &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;SQLite.swift&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;~&amp;gt; 0.12.0&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run &lt;code&gt;pod install --repo-update&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;&lt;a id="user-content-swift-package-manager" class="anchor" aria-hidden="true" href="#swift-package-manager"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Swift Package Manager&lt;/h3&gt;
&lt;p&gt;The &lt;a href="https://swift.org/package-manager" rel="nofollow"&gt;Swift Package Manager&lt;/a&gt; is a tool for managing the distribution of
Swift code.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Add the following to your &lt;code&gt;Package.swift&lt;/code&gt; file:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;dependencies&lt;span class="pl-k"&gt;:&lt;/span&gt; [
    .&lt;span class="pl-c1"&gt;package&lt;/span&gt;(&lt;span class="pl-c1"&gt;url&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;https://github.com/stephencelis/SQLite.swift.git&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;from&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;0.12.0&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
]&lt;/pre&gt;&lt;/div&gt;
&lt;ol start="2"&gt;
&lt;li&gt;Build your project:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;$ swift build&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-manual" class="anchor" aria-hidden="true" href="#manual"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Manual&lt;/h3&gt;
&lt;p&gt;To install SQLite.swift as an Xcode sub-project:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Drag the &lt;strong&gt;SQLite.xcodeproj&lt;/strong&gt; file into your own project.
(&lt;a href="http://git-scm.com/book/en/Git-Tools-Submodules" rel="nofollow"&gt;Submodule&lt;/a&gt;, clone, or &lt;a href="https://github.com/stephencelis/SQLite.swift/archive/master.zip"&gt;download&lt;/a&gt; the project first.)&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="Documentation/Resources/installation@2x.png"&gt;&lt;img src="Documentation/Resources/installation@2x.png" alt="Installation Screen Shot" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In your target’s &lt;strong&gt;General&lt;/strong&gt; tab, click the &lt;strong&gt;+&lt;/strong&gt; button under &lt;strong&gt;Linked
Frameworks and Libraries&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select the appropriate &lt;strong&gt;SQLite.framework&lt;/strong&gt; for your platform.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Add&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Some additional steps are required to install the application on an actual
device:&lt;/p&gt;
&lt;ol start="5"&gt;
&lt;li&gt;
&lt;p&gt;In the &lt;strong&gt;General&lt;/strong&gt; tab, click the &lt;strong&gt;+&lt;/strong&gt; button under &lt;strong&gt;Embedded
Binaries&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select the appropriate &lt;strong&gt;SQLite.framework&lt;/strong&gt; for your platform.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Add&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;&lt;a id="user-content-communication" class="anchor" aria-hidden="true" href="#communication"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Communication&lt;/h2&gt;
&lt;p&gt;&lt;a href="/Documentation/Planning.md"&gt;See the planning document&lt;/a&gt; for a roadmap and existing feature requests.&lt;/p&gt;
&lt;p&gt;&lt;a href="./CONTRIBUTING.md#contributing"&gt;Read the contributing guidelines&lt;/a&gt;. The &lt;em&gt;TL;DR&lt;/em&gt; (but please; &lt;em&gt;R&lt;/em&gt;):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Need &lt;strong&gt;help&lt;/strong&gt; or have a &lt;strong&gt;general question&lt;/strong&gt;? &lt;a href="http://stackoverflow.com/questions/tagged/sqlite.swift" rel="nofollow"&gt;Ask on Stack
Overflow&lt;/a&gt; (tag &lt;code&gt;sqlite.swift&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Found a &lt;strong&gt;bug&lt;/strong&gt; or have a &lt;strong&gt;feature request&lt;/strong&gt;? &lt;a href="https://github.com/stephencelis/SQLite.swift/issues/new"&gt;Open an issue&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Want to &lt;strong&gt;contribute&lt;/strong&gt;? &lt;a href="https://github.com/stephencelis/SQLite.swift/fork"&gt;Submit a pull request&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-author" class="anchor" aria-hidden="true" href="#author"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Author&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="mailto:stephen@stephencelis.com"&gt;Stephen Celis&lt;/a&gt;
(&lt;a href="https://twitter.com/stephencelis" rel="nofollow"&gt;@stephencelis&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-license" class="anchor" aria-hidden="true" href="#license"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;License&lt;/h2&gt;
&lt;p&gt;SQLite.swift is available under the MIT license. See &lt;a href="./LICENSE.txt"&gt;the LICENSE
file&lt;/a&gt; for more information.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-related" class="anchor" aria-hidden="true" href="#related"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Related&lt;/h2&gt;
&lt;p&gt;These projects enhance or use SQLite.swift:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/garriguv/SQLiteMigrationManager.swift"&gt;SQLiteMigrationManager.swift&lt;/a&gt; (inspired by
&lt;a href="https://github.com/layerhq/FMDBMigrationManager"&gt;FMDBMigrationManager&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-alternatives" class="anchor" aria-hidden="true" href="#alternatives"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Alternatives&lt;/h2&gt;
&lt;p&gt;Looking for something else? Try another Swift wrapper (or &lt;a href="https://github.com/ccgus/fmdb"&gt;FMDB&lt;/a&gt;):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/remirobert/Camembert"&gt;Camembert&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/groue/GRDB.swift"&gt;GRDB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/FahimF/SQLiteDB"&gt;SQLiteDB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/nerdyc/Squeal"&gt;Squeal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ryanfowler/SwiftData"&gt;SwiftData&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/chrismsimpson/SwiftSQLite"&gt;SwiftSQLite&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>stephencelis</author><guid isPermaLink="false">https://github.com/stephencelis/SQLite.swift</guid><pubDate>Mon, 18 Nov 2019 00:04:00 GMT</pubDate></item><item><title>ReactiveX/RxSwift #5 in Swift, This week</title><link>https://github.com/ReactiveX/RxSwift</link><description>&lt;p&gt;&lt;i&gt;Reactive Programming in Swift&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content--rxswift-reactivex-for-swift" class="anchor" aria-hidden="true" href="#-rxswift-reactivex-for-swift"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/ReactiveX/RxSwift/master/assets/Rx_Logo_M.png"&gt;&lt;img src="https://raw.githubusercontent.com/ReactiveX/RxSwift/master/assets/Rx_Logo_M.png" alt="Miss Electric Eel 2016" width="36" height="36" style="max-width:100%;"&gt;&lt;/a&gt; RxSwift: ReactiveX for Swift&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://travis-ci.org/ReactiveX/RxSwift" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/d6899870ec82f2a13bcbdc55834ee9718be7678a/68747470733a2f2f7472617669732d63692e6f72672f5265616374697665582f527853776966742e7376673f6272616e63683d6d6173746572" alt="Travis CI" data-canonical-src="https://travis-ci.org/ReactiveX/RxSwift.svg?branch=master" style="max-width:100%;"&gt;&lt;/a&gt; &lt;a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/cad98e8f98045360e4b82f574b86b45952b3feb1/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f706c6174666f726d732d694f532532302537432532306d61634f5325323025374325323074764f5325323025374325323077617463684f532532302537432532304c696e75782d3333333333332e737667"&gt;&lt;img src="https://camo.githubusercontent.com/cad98e8f98045360e4b82f574b86b45952b3feb1/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f706c6174666f726d732d694f532532302537432532306d61634f5325323025374325323074764f5325323025374325323077617463684f532532302537432532304c696e75782d3333333333332e737667" alt="platforms" data-canonical-src="https://img.shields.io/badge/platforms-iOS%20%7C%20macOS%20%7C%20tvOS%20%7C%20watchOS%20%7C%20Linux-333333.svg" style="max-width:100%;"&gt;&lt;/a&gt; &lt;a href="https://cocoapods.org/pods/RxSwift" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/91ac251cd8e6775af6ec6807fc0c354827c6878f/68747470733a2f2f696d672e736869656c64732e696f2f636f636f61706f64732f762f527853776966742e737667" alt="pod" data-canonical-src="https://img.shields.io/cocoapods/v/RxSwift.svg" style="max-width:100%;"&gt;&lt;/a&gt; &lt;a href="https://github.com/Carthage/Carthage"&gt;&lt;img src="https://camo.githubusercontent.com/3dc8a44a2c3f7ccd5418008d1295aae48466c141/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f43617274686167652d636f6d70617469626c652d3442433531442e7376673f7374796c653d666c6174" alt="Carthage compatible" data-canonical-src="https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat" style="max-width:100%;"&gt;&lt;/a&gt; &lt;a href="https://github.com/apple/swift-package-manager"&gt;&lt;img src="https://camo.githubusercontent.com/ad744674ba25cccb6e683eb78b7c485e1b63b2d2/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f53776966742532305061636b6167652532304d616e616765722d636f6d70617469626c652d627269676874677265656e2e737667" alt="Swift Package Manager compatible" data-canonical-src="https://img.shields.io/badge/Swift%20Package%20Manager-compatible-brightgreen.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Rx is a &lt;a href="https://youtu.be/looJcaeboBY" rel="nofollow"&gt;generic abstraction of computation&lt;/a&gt; expressed through &lt;code&gt;Observable&amp;lt;Element&amp;gt;&lt;/code&gt; interface.&lt;/p&gt;
&lt;p&gt;This is a Swift version of &lt;a href="https://github.com/Reactive-Extensions/Rx.NET"&gt;Rx&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It tries to port as many concepts from the original version as possible, but some concepts were adapted for more pleasant and performant integration with iOS/macOS environment.&lt;/p&gt;
&lt;p&gt;Cross platform documentation can be found on &lt;a href="http://reactivex.io/" rel="nofollow"&gt;ReactiveX.io&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Like the original Rx, its intention is to enable easy composition of asynchronous operations and event/data streams.&lt;/p&gt;
&lt;p&gt;KVO observing, async operations and streams are all unified under &lt;a href="Documentation/GettingStarted.md#observables-aka-sequences"&gt;abstraction of sequence&lt;/a&gt;. This is the reason why Rx is so simple, elegant and powerful.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-i-came-here-because-i-want-to-" class="anchor" aria-hidden="true" href="#i-came-here-because-i-want-to-"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;I came here because I want to ...&lt;/h2&gt;
&lt;h6&gt;&lt;a id="user-content--understand" class="anchor" aria-hidden="true" href="#-understand"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;... understand&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="Documentation/Why.md"&gt;why use rx?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="Documentation/GettingStarted.md"&gt;the basics, getting started with RxSwift&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="Documentation/Traits.md"&gt;traits&lt;/a&gt; - what are &lt;code&gt;Single&lt;/code&gt;, &lt;code&gt;Completable&lt;/code&gt;, &lt;code&gt;Maybe&lt;/code&gt;, &lt;code&gt;Driver&lt;/code&gt;, and &lt;code&gt;ControlProperty&lt;/code&gt; ... and why do they exist?&lt;/li&gt;
&lt;li&gt;&lt;a href="Documentation/UnitTests.md"&gt;testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="Documentation/Tips.md"&gt;tips and common errors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="Documentation/GettingStarted.md#debugging"&gt;debugging&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="Documentation/MathBehindRx.md"&gt;the math behind Rx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="Documentation/HotAndColdObservables.md"&gt;what are hot and cold observable sequences?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h6&gt;&lt;a id="user-content--install" class="anchor" aria-hidden="true" href="#-install"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;... install&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;Integrate RxSwift/RxCocoa with my app. &lt;a href="#installation"&gt;Installation Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h6&gt;&lt;a id="user-content--hack-around" class="anchor" aria-hidden="true" href="#-hack-around"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;... hack around&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;with the example app. &lt;a href="Documentation/ExampleApp.md"&gt;Running Example App&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;with operators in playgrounds. &lt;a href="Documentation/Playgrounds.md"&gt;Playgrounds&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h6&gt;&lt;a id="user-content--interact" class="anchor" aria-hidden="true" href="#-interact"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;... interact&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;All of this is great, but it would be nice to talk with other people using RxSwift and exchange experiences. &lt;br&gt;&lt;a href="http://slack.rxswift.org" rel="nofollow"&gt;Join Slack Channel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Report a problem using the library. &lt;a href=".github/ISSUE_TEMPLATE.md"&gt;Open an Issue With Bug Template&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Request a new feature. &lt;a href="Documentation/NewFeatureRequestTemplate.md"&gt;Open an Issue With Feature Request Template&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Help out &lt;a href="CONTRIBUTING.md"&gt;Check out contribution guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h6&gt;&lt;a id="user-content--compare" class="anchor" aria-hidden="true" href="#-compare"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;... compare&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="Documentation/ComparisonWithOtherLibraries.md"&gt;with other libraries&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h6&gt;&lt;a id="user-content--understand-the-structure" class="anchor" aria-hidden="true" href="#-understand-the-structure"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;... understand the structure&lt;/h6&gt;
&lt;p&gt;RxSwift comprises five separate components depending on eachother in the following way:&lt;/p&gt;
&lt;pre lang="none"&gt;&lt;code&gt;┌──────────────┐    ┌──────────────┐
│   RxCocoa    ├────▶   RxRelay    │
└───────┬──────┘    └──────┬───────┘
        │                  │        
┌───────▼──────────────────▼───────┐
│             RxSwift              │
└───────▲──────────────────▲───────┘
        │                  │        
┌───────┴──────┐    ┌──────┴───────┐
│    RxTest    │    │  RxBlocking  │
└──────────────┘    └──────────────┘
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;RxSwift&lt;/strong&gt;: The core of RxSwift, providing the Rx standard as (mostly) defined by &lt;a href="https://reactivex.io" rel="nofollow"&gt;ReactiveX&lt;/a&gt;. It has no other dependencies.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;RxCocoa&lt;/strong&gt;: Provides Cocoa-specific capabilities for general iOS/macOS/watchOS &amp;amp; tvOS app development, such as Binders, Traits, and much more. It depends on both &lt;code&gt;RxSwift&lt;/code&gt; and &lt;code&gt;RxRelay&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;RxRelay&lt;/strong&gt;: Provides &lt;code&gt;PublishRelay&lt;/code&gt; and &lt;code&gt;BehaviorRelay&lt;/code&gt;, two &lt;a href="https://github.com/ReactiveX/RxSwift/blob/master/Documentation/Subjects.md#relays"&gt;simple wrappers around Subjects&lt;/a&gt;. It depends on &lt;code&gt;RxSwift&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;RxTest&lt;/strong&gt; and &lt;strong&gt;RxBlocking&lt;/strong&gt;: Provides testing capabilities for Rx-based systems. It depends on &lt;code&gt;RxSwift&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h6&gt;&lt;a id="user-content--find-compatible" class="anchor" aria-hidden="true" href="#-find-compatible"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;... find compatible&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;libraries from &lt;a href="https://github.com/RxSwiftCommunity"&gt;RxSwiftCommunity&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cocoapods.org/?q=uses%3Arxswift" rel="nofollow"&gt;Pods using RxSwift&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h6&gt;&lt;a id="user-content--see-the-broader-vision" class="anchor" aria-hidden="true" href="#-see-the-broader-vision"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;... see the broader vision&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;Does this exist for Android? &lt;a href="https://github.com/ReactiveX/RxJava"&gt;RxJava&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Where is all of this going, what is the future, what about reactive architectures, how do you design entire apps this way? &lt;a href="https://github.com/cyclejs/cycle-core"&gt;Cycle.js&lt;/a&gt; - this is javascript, but &lt;a href="https://github.com/Reactive-Extensions/RxJS"&gt;RxJS&lt;/a&gt; is javascript version of Rx.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Usage&lt;/h2&gt;
&lt;table&gt;
  &lt;tbody&gt;&lt;tr&gt;
    &lt;th width="30%"&gt;Here's an example&lt;/th&gt;
    &lt;th width="30%"&gt;In Action&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Define search for GitHub repositories ...&lt;/td&gt;
    &lt;th rowspan="9"&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/kzaher/rxswiftcontent/master/GithubSearch.gif"&gt;&lt;img src="https://raw.githubusercontent.com/kzaher/rxswiftcontent/master/GithubSearch.gif" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;div&gt;&lt;pre&gt;let searchResults = searchBar.rx.text.orEmpty
    .throttle(.milliseconds(300), scheduler: MainScheduler.instance)
    .distinctUntilChanged()
    .flatMapLatest { query -&amp;gt; Observable&amp;lt;[Repository]&amp;gt; in
        if query.isEmpty {
            return .just([])
        }
        return searchGitHub(query)
            .catchErrorJustReturn([])
    }
    .observeOn(MainScheduler.instance)&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;... then bind the results to your tableview&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td width="30%"&gt;&lt;div&gt;&lt;pre&gt;searchResults
    .bind(to: tableView.rx.items(cellIdentifier: "Cell")) {
        (index, repository: Repository, cell) in
        cell.textLabel?.text = repository.name
        cell.detailTextLabel?.text = repository.url
    }
    .disposed(by: disposeBag)&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
  &lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2&gt;&lt;a id="user-content-requirements" class="anchor" aria-hidden="true" href="#requirements"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Requirements&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Xcode 10.2&lt;/li&gt;
&lt;li&gt;Swift 5.0&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For Xcode 10.1 and below, &lt;a href="https://github.com/ReactiveX/RxSwift/releases/tag/4.5.0"&gt;use RxSwift 4.5&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installation&lt;/h2&gt;
&lt;p&gt;Rx doesn't contain any external dependencies.&lt;/p&gt;
&lt;p&gt;These are currently the supported options:&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-manual" class="anchor" aria-hidden="true" href="#manual"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Manual&lt;/h3&gt;
&lt;p&gt;Open Rx.xcworkspace, choose &lt;code&gt;RxExample&lt;/code&gt; and hit run. This method will build everything and run the sample app&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-cocoapods" class="anchor" aria-hidden="true" href="#cocoapods"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="https://guides.cocoapods.org/using/using-cocoapods.html" rel="nofollow"&gt;CocoaPods&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight highlight-source-ruby"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Podfile&lt;/span&gt;
use_frameworks!

target &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;YOUR_TARGET_NAME&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
    pod &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;RxSwift&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;~&amp;gt; 5&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;
    pod &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;RxCocoa&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;~&amp;gt; 5&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; RxTest and RxBlocking make the most sense in the context of unit/integration tests&lt;/span&gt;
target &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;YOUR_TESTING_TARGET&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
    pod &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;RxBlocking&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;~&amp;gt; 5&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;
    pod &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;RxTest&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;~&amp;gt; 5&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Replace &lt;code&gt;YOUR_TARGET_NAME&lt;/code&gt; and then, in the &lt;code&gt;Podfile&lt;/code&gt; directory, type:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;$ pod install&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-carthage" class="anchor" aria-hidden="true" href="#carthage"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="https://github.com/Carthage/Carthage"&gt;Carthage&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Officially supported: Carthage 0.33 and up.&lt;/p&gt;
&lt;p&gt;Add this to &lt;code&gt;Cartfile&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;github "ReactiveX/RxSwift" ~&amp;gt; 5.0
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;$ carthage update&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content-carthage-as-a-static-library" class="anchor" aria-hidden="true" href="#carthage-as-a-static-library"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Carthage as a Static Library&lt;/h4&gt;
&lt;p&gt;Carthage defaults to building RxSwift as a Dynamic Library.&lt;/p&gt;
&lt;p&gt;If you wish to build RxSwift as a Static Library using Carthage you may use the script below to manually modify the framework type before building with Carthage:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;carthage update RxSwift --platform iOS --no-build
sed -i -e &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;s/MACH_O_TYPE = mh_dylib/MACH_O_TYPE = staticlib/g&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt; Carthage/Checkouts/RxSwift/Rx.xcodeproj/project.pbxproj
carthage build RxSwift --platform iOS&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-swift-package-manager" class="anchor" aria-hidden="true" href="#swift-package-manager"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="https://github.com/apple/swift-package-manager"&gt;Swift Package Manager&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Create a &lt;code&gt;Package.swift&lt;/code&gt; file.&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; swift-tools-version:5.0&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;PackageDescription&lt;/span&gt;

&lt;span class="pl-k"&gt;let&lt;/span&gt; package &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;Package&lt;/span&gt;(
  &lt;span class="pl-c1"&gt;name&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;RxTestProject&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
  &lt;span class="pl-c1"&gt;dependencies&lt;/span&gt;: [
    .&lt;span class="pl-c1"&gt;package&lt;/span&gt;(&lt;span class="pl-c1"&gt;url&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;https://github.com/ReactiveX/RxSwift.git&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;from&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;5.0.0&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
  ],
  &lt;span class="pl-c1"&gt;targets&lt;/span&gt;: [
    .&lt;span class="pl-c1"&gt;target&lt;/span&gt;(&lt;span class="pl-c1"&gt;name&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;RxTestProject&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;dependencies&lt;/span&gt;: [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;RxSwift&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;RxCocoa&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;])
  ]
)&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;$ swift build&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To build or test a module with RxTest dependency, set &lt;code&gt;TEST=1&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;$ TEST=1 swift &lt;span class="pl-c1"&gt;test&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-manually-using-git-submodules" class="anchor" aria-hidden="true" href="#manually-using-git-submodules"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Manually using git submodules&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Add RxSwift as a submodule&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;$ git submodule add git@github.com:ReactiveX/RxSwift.git&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Drag &lt;code&gt;Rx.xcodeproj&lt;/code&gt; into Project Navigator&lt;/li&gt;
&lt;li&gt;Go to &lt;code&gt;Project &amp;gt; Targets &amp;gt; Build Phases &amp;gt; Link Binary With Libraries&lt;/code&gt;, click &lt;code&gt;+&lt;/code&gt; and select &lt;code&gt;RxSwift-[Platform]&lt;/code&gt; and &lt;code&gt;RxCocoa-[Platform]&lt;/code&gt; targets&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-references" class="anchor" aria-hidden="true" href="#references"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://reactivex.io/" rel="nofollow"&gt;http://reactivex.io/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Reactive-Extensions"&gt;Reactive Extensions GitHub (GitHub)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://store.raywenderlich.com/products/rxswift-reactive-programming-with-swift" rel="nofollow"&gt;RxSwift RayWenderlich.com Book&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://boxueio.com/series/rxswift-101" rel="nofollow"&gt;Boxue.io RxSwift Online Course&lt;/a&gt; (Chinese &lt;g-emoji class="g-emoji" alias="cn" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f1e8-1f1f3.png"&gt;🇨🇳&lt;/g-emoji&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Erik_Meijer_%28computer_scientist%29" rel="nofollow"&gt;Erik Meijer (Wikipedia)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://youtu.be/looJcaeboBY" rel="nofollow"&gt;Expert to Expert: Brian Beckman and Erik Meijer - Inside the .NET Reactive Framework (Rx) (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=dwP1TNXE6fc" rel="nofollow"&gt;Reactive Programming Overview (Jafar Husain from Netflix)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://csl.stanford.edu/~christos/pldi2010.fit/meijer.duality.pdf" rel="nofollow"&gt;Subject/Observer is Dual to Iterator (paper)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://rxmarbles.com/" rel="nofollow"&gt;Rx standard sequence operators visualized (visualization tool)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.haskell.org/" rel="nofollow"&gt;Haskell&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>ReactiveX</author><guid isPermaLink="false">https://github.com/ReactiveX/RxSwift</guid><pubDate>Mon, 18 Nov 2019 00:05:00 GMT</pubDate></item><item><title>rileytestut/AltStore #6 in Swift, This week</title><link>https://github.com/rileytestut/AltStore</link><description>&lt;p&gt;&lt;i&gt;AltStore is an alternative app store for non-jailbroken iOS devices.&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-altstore" class="anchor" aria-hidden="true" href="#altstore"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;AltStore&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;AltStore is an alternative app store for non-jailbroken iOS devices.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://swift.org/" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/440edeeeb3b2c1b118c6184fd929167587dea9a2/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f73776966742d352e302d6f72616e67652e737667" alt="Swift Version" data-canonical-src="https://img.shields.io/badge/swift-5.0-orange.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://www.gnu.org/licenses/agpl-3.0" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/cb1d26ec555a33e9f09fe279b5edc49996a3bb3b/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4147504c25323076332d626c75652e737667" alt="License: AGPL v3" data-canonical-src="https://img.shields.io/badge/License-AGPL%20v3-blue.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="http://makeapullrequest.com" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/a34cfbf37ba6848362bf2bee0f3915c2e38b1cc1/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f5052732d77656c636f6d652d627269676874677265656e2e7376673f7374796c653d666c61742d737175617265" alt="PRs Welcome" data-canonical-src="https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;AltStore is an iOS application that allows you to sideload other apps (.ipa files) onto your iOS device with just your Apple ID. AltStore resigns apps with your personal development certificate and sends them to a desktop app, AltServer, which installs the resigned apps back to your device using iTunes WiFi sync. To prevent apps from expiring, AltStore will also periodically refresh your apps in the background when on the same WiFi as AltServer.&lt;/p&gt;
&lt;p&gt;For the initial release, I focused on building a solid foundation for distributing my own apps — primarily Delta, &lt;a href="https://github.com/rileytestut/Delta"&gt;my all-in-one emulator for iOS&lt;/a&gt;. Now that Delta has been released, however, I'm beginning work on adding support for &lt;em&gt;anyone&lt;/em&gt; to list and distribute their apps through AltStore (contributions welcome! &lt;g-emoji class="g-emoji" alias="slightly_smiling_face" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f642.png"&gt;🙂&lt;/g-emoji&gt;).&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-features" class="anchor" aria-hidden="true" href="#features"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Resigns and installs any app with your Apple ID&lt;/li&gt;
&lt;li&gt;Installs apps over WiFi using AltServer&lt;/li&gt;
&lt;li&gt;Refreshes apps periodically in the background to prevent them from expiring (when on same WiFi as AltServer)&lt;/li&gt;
&lt;li&gt;Handles app updates directly through AltStore&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-requirements" class="anchor" aria-hidden="true" href="#requirements"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Requirements&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Xcode 11&lt;/li&gt;
&lt;li&gt;iOS 12.2+ (AltStore)&lt;/li&gt;
&lt;li&gt;macOS 10.14.4+ (AltServer)&lt;/li&gt;
&lt;li&gt;Swift 5+&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Why iOS 12.2+ and macOS 10.14.4+? Doing so allows me to distribute all AltStore apps without embedding Swift libraries inside them. This helps me afford bandwidth costs by reducing download sizes by roughly 30%, but also noticeably improves how long it takes to install/refresh apps with AltStore. If you're compiling AltStore and/or AltServer yourself, however, you should be able to lower their deployment targets to iOS 12.0 and macOS 10.14.0, respectively, without any issues.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-project-overview" class="anchor" aria-hidden="true" href="#project-overview"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Project Overview&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-altstore-1" class="anchor" aria-hidden="true" href="#altstore-1"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;AltStore&lt;/h3&gt;
&lt;p&gt;AltStore is just a regular, sandboxed iOS application. The AltStore app target contains the vast majority of AltStore's functionality, including all the logic for downloading and updating apps through AltStore. AltStore makes heavy use of standard iOS frameworks and technologies most iOS developers are familiar with, such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Core Data&lt;/li&gt;
&lt;li&gt;Storyboards/Nibs&lt;/li&gt;
&lt;li&gt;Auto Layout&lt;/li&gt;
&lt;li&gt;Background App Refresh&lt;/li&gt;
&lt;li&gt;Network.framework (new in iOS 12)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-altserver" class="anchor" aria-hidden="true" href="#altserver"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;AltServer&lt;/h3&gt;
&lt;p&gt;AltServer is also just a regular, sandboxed macOS application. AltServer is significantly less complex than AltStore though, and for that reason consists of only a handful of files.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-altkit" class="anchor" aria-hidden="true" href="#altkit"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;AltKit&lt;/h3&gt;
&lt;p&gt;AltKit is a shared framework that includes common code between AltStore and AltServer.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-altsign" class="anchor" aria-hidden="true" href="#altsign"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;AltSign&lt;/h3&gt;
&lt;p&gt;AltSign is my internal framework used by both AltStore and AltServer to communicate with Apple's servers and resign apps. For more info, check the &lt;a href="https://github.com/rileytestut/altsign"&gt;AltSign repo&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-roxas" class="anchor" aria-hidden="true" href="#roxas"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Roxas&lt;/h3&gt;
&lt;p&gt;Roxas is my internal framework used across all my iOS projects, developed to simplify a variety of common tasks used in iOS development. For more info, check the &lt;a href="https://github.com/rileytestut/roxas"&gt;Roxas repo&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-compilation-instructions" class="anchor" aria-hidden="true" href="#compilation-instructions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Compilation Instructions&lt;/h2&gt;
&lt;p&gt;AltStore and AltServer are both fairly straightforward to compile and run if you're already an iOS or macOS developer. To compile AltStore and/or AltServer:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Clone the repository
&lt;pre&gt;&lt;code&gt;git clone https://github.com/rileytestut/AltStore.git
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;Update submodules:
&lt;pre&gt;&lt;code&gt;cd AltStore 
git submodule update --init --recursive
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;Open &lt;code&gt;AltStore.xcworkspace&lt;/code&gt; and select the AltStore project in the project navigator. On the &lt;code&gt;Signing &amp;amp; Capabilities&lt;/code&gt; tab, change the team from &lt;code&gt;Yvette Testut&lt;/code&gt; to your own account.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;(AltStore only)&lt;/strong&gt; Change the value for &lt;code&gt;ALTDeviceID&lt;/code&gt; in the Info.plist to your device's UDID. Normally, AltServer embeds the device's UDID in AltStore's Info.plist during installation. When running through Xcode you'll need to set the value yourself or else AltStore won't resign (or even install) apps for the proper device.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;(AltStore only)&lt;/strong&gt; Change the value for &lt;code&gt;ALTServerID&lt;/code&gt; in the Info.plist to your AltServer's serverID. This is embedded by AltServer during installation to help AltStore distinguish between multiple AltServers on the same network, and you can find this by using a Bonjour browsing application and noting the serverID advertised by AltServer. This isn't strictly necessary, because if AltStore can't find the AltServer with the embedded serverID it still falls back to trying another AltServer. However, this will help in cases where there are multiple AltServers running (plus the error messages are more helpful).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;(AltServer only)&lt;/strong&gt; Install Carthage (if you use Homebrew, you can do this with &lt;code&gt;brew install carthage&lt;/code&gt;). Then run &lt;code&gt;carthage update&lt;/code&gt; in the root directory of the repository.&lt;/li&gt;
&lt;li&gt;Build + run app! &lt;g-emoji class="g-emoji" alias="tada" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f389.png"&gt;🎉&lt;/g-emoji&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;&lt;a id="user-content-licensing" class="anchor" aria-hidden="true" href="#licensing"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Licensing&lt;/h2&gt;
&lt;p&gt;Due to the licensing of some dependencies used by AltStore, I have no choice but to distribute AltStore under the &lt;strong&gt;AGPLv3 license&lt;/strong&gt;. That being said, my goal for AltStore is for it to be an open source project &lt;em&gt;anyone&lt;/em&gt; can use without restrictions, so I explicitly give permission for anyone to use, modify, and distribute all &lt;em&gt;my&lt;/em&gt; original code for this project in any form, with or without attribution, without fear of legal consequences (dependencies remain under their original licenses, however).&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-contact-me" class="anchor" aria-hidden="true" href="#contact-me"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contact Me&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Email: &lt;a href="mailto:riley@rileytestut.com"&gt;riley@rileytestut.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Twitter: &lt;a href="https://twitter.com/rileytestut" rel="nofollow"&gt;@rileytestut&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Questions about AltStore in general? Make sure to read the FAQ at &lt;a href="https://altstore.io/faq/" rel="nofollow"&gt;https://altstore.io/faq/&lt;/a&gt;&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>rileytestut</author><guid isPermaLink="false">https://github.com/rileytestut/AltStore</guid><pubDate>Mon, 18 Nov 2019 00:06:00 GMT</pubDate></item><item><title>Jinxiansen/SwiftUI #7 in Swift, This week</title><link>https://github.com/Jinxiansen/SwiftUI</link><description>&lt;p&gt;&lt;i&gt;`SwiftUI` Framework  Learning and Usage Guide. 🚀 https://jinxiansen.github.io/SwiftUI/&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="images/icon/banner.png"&gt;&lt;img src="images/icon/banner.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/Jinxiansen/SwiftUI"&gt;&lt;img src="https://camo.githubusercontent.com/eed97b5a5f02dd2b53b2ef6454558617e4eb1a42/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f706c6174666f726d732d694f5325323025374325323074764f532532302537432532306d61634f5325323025374325323077617463684f532d6c69676874677265792e737667" alt="Build Status" data-canonical-src="https://img.shields.io/badge/platforms-iOS%20%7C%20tvOS%20%7C%20macOS%20%7C%20watchOS-lightgrey.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://swift.org" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/ab29f34b72a97a1dee84cf993b101dcf0ca4f36b/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f53776966742d352e312d6f72616e67652e737667" alt="Swift" data-canonical-src="https://img.shields.io/badge/Swift-5.1-orange.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://developer.apple.com/xcode" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/16ed9080787398960e39a90346f49a4ddd421eda/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f58636f64652d31312e302d626c75652e737667" alt="Xcode" data-canonical-src="https://img.shields.io/badge/Xcode-11.0-blue.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://developer.apple.com/macOS" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/d8e1ba79b2ebefa7d9ce3eac77f009fd2353305c/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6d61634f532d31352e302d626c75652e737667" alt="Xcode" data-canonical-src="https://img.shields.io/badge/macOS-15.0-blue.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://opensource.org/licenses/MIT" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/2c194bb1aae854fe581c54b270201dcc319bc3ce/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e7365732d4d49542d7265642e737667" alt="MIT" data-canonical-src="https://img.shields.io/badge/licenses-MIT-red.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This article refers to SwiftUI &lt;a href="https://github.com/Jinxiansen/SwiftUI/tree/doc"&gt;apple example&lt;/a&gt; and records the results of the exploration here, I hope to be helpful to you.&lt;/p&gt;
&lt;p&gt;For the content described in this article, by default you have some experience based on Swift language development, so it will not describe every detail in detail; if you have doubts about Swift syntax, you can learn &lt;a href="https://swift.org" rel="nofollow"&gt;Swift&lt;/a&gt; Grammar.&lt;/p&gt;
&lt;p&gt;When learning and using &lt;code&gt;SwiftUI&lt;/code&gt;, if you have any questions, you can join the SwiftUI QQ Group: &lt;strong&gt;18552966&lt;/strong&gt; to discuss communication.&lt;/p&gt;
&lt;p&gt;&lt;a href="README_CN.md"&gt;中文版&lt;g-emoji class="g-emoji" alias="cn" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f1e8-1f1f3.png"&gt;🇨🇳&lt;/g-emoji&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-️-stargazers-over-time" class="anchor" aria-hidden="true" href="#️-stargazers-over-time"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;g-emoji class="g-emoji" alias="star" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png"&gt;⭐️&lt;/g-emoji&gt; Stargazers over time&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://starchart.cc/Jinxiansen/SwiftUI" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e7fb6ff098b600a63c28944407db13187673020a/68747470733a2f2f7374617263686172742e63632f4a696e7869616e73656e2f537769667455492e737667" alt="Stargazers over time" data-canonical-src="https://starchart.cc/Jinxiansen/SwiftUI.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content--requirements" class="anchor" aria-hidden="true" href="#-requirements"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;g-emoji class="g-emoji" alias="computer" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4bb.png"&gt;💻&lt;/g-emoji&gt; Requirements&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;macOS 15&lt;/li&gt;
&lt;li&gt;Xcode 11.0&lt;/li&gt;
&lt;li&gt;iOS 13.0&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-directory" class="anchor" aria-hidden="true" href="#directory"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Directory：&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-basic-view" class="anchor" aria-hidden="true" href="#basic-view"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Basic View&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;span id="user-content-text_d"&gt;Text&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#Text"&gt;Text&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#TextField"&gt;TextField&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#SecureField"&gt;SecureField&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span id="user-content-image_d"&gt;Image&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#Image"&gt;Image&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#WebImage"&gt;WebImage&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span id="user-content-button_d"&gt;Button&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#Button"&gt;Button&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#PullDownButton"&gt;PullDownButton&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ItemBasedPopUpButton"&gt;ItemBasedPopUpButton&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#NavigationButton"&gt;NavigationButton&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#PresentationButton"&gt;PresentationButton&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#EditButton"&gt;EditButton&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#PasteButton"&gt;PasteButton&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span id="user-content-picker_d"&gt;Picker&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#Picker"&gt;Picker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#DatePicker"&gt;DatePicker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Toggle"&gt;Toggle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Slider"&gt;Slider&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Stepper"&gt;Stepper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#SegmentedControl"&gt;SegmentedControl&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span id="user-content-special_d"&gt;Special Views&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#WebView"&gt;WebView&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#UIViewController"&gt;UIViewController&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-layout" class="anchor" aria-hidden="true" href="#layout"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;span id="user-content-layout_d"&gt;Layout&lt;/span&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;span id="user-content-stacks_d"&gt;Stacks&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#HStack"&gt;HStack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#VStack"&gt;VStack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ZStack"&gt;ZStack&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span id="user-content-list_d"&gt;List&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#List"&gt;List&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ScrollView"&gt;ScrollView&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ForEach"&gt;ForEach&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span id="user-content-container_d"&gt;Container Views&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#Group"&gt;Group&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#GroupBox"&gt;GroupBox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Section"&gt;Section&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span id="user-content-architectural_d"&gt;Architectural Views&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#NavigationView"&gt;NavigationView&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#TabbedView"&gt;TabbedView&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#HSplitView"&gt;HSplitView&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#VSplitView"&gt;VSplitView&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span id="user-content-alert_d"&gt; Alert &lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#Alert"&gt;Alert&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Modal"&gt;Modal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Popover"&gt;Popover&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Sheet"&gt;Sheet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ActionSheet"&gt;ActionSheet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-state-and-data-flow" class="anchor" aria-hidden="true" href="#state-and-data-flow"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;span id="user-content-state_d"&gt;State and Data Flow&lt;/span&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;span id="user-content-bindings_d"&gt; Bindings &lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#Binding"&gt;Binding&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span id="user-content-data_d"&gt; Data-Dependent Views &lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#State"&gt;State&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ObjectBinding"&gt;ObjectBinding&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#EnvironmentObject"&gt;EnvironmentObject&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span id="user-content-environment_d"&gt; Environment Values &lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#Environment"&gt;Environment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#EnvironmentValues"&gt;EnvironmentValues&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span id="user-content-enavigation_d"&gt; ENavigation Models &lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#DynamicNavigationDestinationLink"&gt;DynamicNavigationDestinationLink&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span id="user-content-preferences_d"&gt; Preferences &lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#LocalizedStringKey"&gt;LocalizedStringKey&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span id="user-content-transactions_d"&gt; Transactions &lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#Transaction"&gt;Transaction&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-gestures" class="anchor" aria-hidden="true" href="#gestures"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;span id="user-content-gestures_d"&gt;Gestures&lt;/span&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;span id="user-content-basicgestures_d"&gt; Basic Gestures &lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#TapGesture"&gt;TapGesture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#LongPressGesture"&gt;LongPressGesture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#DragGesture"&gt;DragGesture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#MagnificationGesture"&gt;MagnificationGesture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#RotationGesture"&gt;RotationGesture&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span id="user-content-combined_d"&gt; Combined Gestures &lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#SequenceGesture"&gt;SequenceGesture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#SimultaneousGesture"&gt;SimultaneousGesture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ExclusiveGesture"&gt;ExclusiveGesture&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span id="user-content-custom_d"&gt; Custom Gestures &lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#AnyGesture"&gt;AnyGesture&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="user-content-basic view"&gt;&lt;a id="user-content-basic-view-1" class="anchor" aria-hidden="true" href="#basic-view-1"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Basic View&lt;/h2&gt;
&lt;h4 id="user-content-text"&gt;&lt;a id="user-content-text" class="anchor" aria-hidden="true" href="#text"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Text&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Text&lt;/code&gt; is used to display one or more lines of text content with the same effect as &lt;code&gt;UILabel&lt;/code&gt;, but it is even better.&lt;/p&gt;
&lt;p&gt;If you want to create &lt;code&gt;Text&lt;/code&gt;, just create it with &lt;code&gt;Text("SwiftUI")&lt;/code&gt;;
With chained syntax, you can also add multiple attributes to the text, such as fonts, colors, shadows, spacing between top left and right, and so on.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;Text&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SwiftUI&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    .&lt;span class="pl-c1"&gt;foregroundColor&lt;/span&gt;(.&lt;span class="pl-smi"&gt;orange&lt;/span&gt;)
    .&lt;span class="pl-c1"&gt;bold&lt;/span&gt;()
    .&lt;span class="pl-c1"&gt;font&lt;/span&gt;(.&lt;span class="pl-c1"&gt;system&lt;/span&gt;(.&lt;span class="pl-smi"&gt;largeTitle&lt;/span&gt;))
    .&lt;span class="pl-c1"&gt;fontWeight&lt;/span&gt;(.&lt;span class="pl-smi"&gt;medium&lt;/span&gt;)
    .&lt;span class="pl-c1"&gt;italic&lt;/span&gt;()
    .&lt;span class="pl-c1"&gt;shadow&lt;/span&gt;(&lt;span class="pl-c1"&gt;color&lt;/span&gt;: .&lt;span class="pl-smi"&gt;black&lt;/span&gt;, &lt;span class="pl-c1"&gt;radius&lt;/span&gt;: &lt;span class="pl-c1"&gt;1&lt;/span&gt;, &lt;span class="pl-c1"&gt;x&lt;/span&gt;: &lt;span class="pl-c1"&gt;0&lt;/span&gt;, &lt;span class="pl-c1"&gt;y&lt;/span&gt;: &lt;span class="pl-c1"&gt;2&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;details&gt;
  &lt;summary&gt;View running results&lt;/summary&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="images/example/Text.png"&gt;&lt;img width="80%" src="images/example/Text.png" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;/details&gt;
&lt;blockquote&gt;
&lt;p&gt;HStack and VStack controls are used to host multiple views, as mentioned later.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="#Text_D"&gt;&lt;g-emoji class="g-emoji" alias="top" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f51d.png"&gt;🔝&lt;/g-emoji&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id="user-content-textfield"&gt;&lt;a id="user-content--textfield-" class="anchor" aria-hidden="true" href="#-textfield-"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt; TextField &lt;/h4&gt;
&lt;p&gt;&lt;code&gt;TextField&lt;/code&gt; is used to add a normal input box, which is often used as a text input.&lt;/p&gt;
&lt;p&gt;Example：&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;TextField&lt;/span&gt;(&lt;span class="pl-c1"&gt;self&lt;/span&gt;.$name, &lt;span class="pl-c1"&gt;placeholder&lt;/span&gt;: &lt;span class="pl-c1"&gt;self&lt;/span&gt;.&lt;span class="pl-smi"&gt;nameText&lt;/span&gt;, &lt;span class="pl-c1"&gt;onEditingChanged&lt;/span&gt;: { changed &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-c1"&gt;print&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;onEditing: &lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;changed&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
}) {
    &lt;span class="pl-c1"&gt;print&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;userName: &lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;&lt;span class="pl-c1"&gt;self&lt;/span&gt;.&lt;span class="pl-smi"&gt;name&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    &lt;span class="pl-c1"&gt;self&lt;/span&gt;.&lt;span class="pl-c1"&gt;endEditing&lt;/span&gt;(&lt;span class="pl-c1"&gt;true&lt;/span&gt;)
}}
.&lt;span class="pl-c1"&gt;padding&lt;/span&gt;(&lt;span class="pl-c1"&gt;10&lt;/span&gt;)
.&lt;span class="pl-c1"&gt;frame&lt;/span&gt;(&lt;span class="pl-c1"&gt;height&lt;/span&gt;: &lt;span class="pl-c1"&gt;50&lt;/span&gt;)
.&lt;span class="pl-c1"&gt;textFieldStyle&lt;/span&gt;(&lt;span class="pl-c1"&gt;RoundedBorderTextFieldStyle&lt;/span&gt;())
.&lt;span class="pl-c1"&gt;padding&lt;/span&gt;(&lt;span class="pl-c1"&gt;EdgeInsets&lt;/span&gt;(&lt;span class="pl-c1"&gt;top&lt;/span&gt;: &lt;span class="pl-c1"&gt;0&lt;/span&gt;, &lt;span class="pl-c1"&gt;leading&lt;/span&gt;: &lt;span class="pl-c1"&gt;20&lt;/span&gt;, &lt;span class="pl-c1"&gt;bottom&lt;/span&gt;: &lt;span class="pl-c1"&gt;0&lt;/span&gt;, &lt;span class="pl-c1"&gt;trailing&lt;/span&gt;: &lt;span class="pl-c1"&gt;20&lt;/span&gt;))
&lt;/pre&gt;&lt;/div&gt;
&lt;details&gt;
  &lt;summary&gt;View running results&lt;/summary&gt;
&lt;a target="_blank" rel="noopener noreferrer" href="images/example/Field.png"&gt;&lt;img width="80%" src="images/example/Field.png" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;/details&gt;
&lt;p&gt;&lt;a href="#Text_D"&gt;&lt;g-emoji class="g-emoji" alias="top" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f51d.png"&gt;🔝&lt;/g-emoji&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id="user-content-securefield"&gt;&lt;a id="user-content--securefield-" class="anchor" aria-hidden="true" href="#-securefield-"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt; SecureField &lt;/h4&gt;
&lt;p&gt;&lt;code&gt;SecureField &lt;/code&gt; is generally used as a password input. It is used in the same way as &lt;code&gt;TextField&lt;/code&gt;. The example and the running effect are the same as &lt;code&gt;TextField&lt;/code&gt;.&lt;/p&gt;
&lt;h4 id="user-content-image"&gt;&lt;a id="user-content--image-" class="anchor" aria-hidden="true" href="#-image-"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt; Image &lt;/h4&gt;
&lt;p&gt;The &lt;code&gt;Image&lt;/code&gt; control is used to display images, example:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;Image&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;icon&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    .&lt;span class="pl-c1"&gt;resizable&lt;/span&gt;()
    .&lt;span class="pl-c1"&gt;frame&lt;/span&gt;(&lt;span class="pl-c1"&gt;width&lt;/span&gt;: &lt;span class="pl-c1"&gt;100&lt;/span&gt;,
           &lt;span class="pl-c1"&gt;height&lt;/span&gt;: &lt;span class="pl-c1"&gt;100&lt;/span&gt;,
           &lt;span class="pl-c1"&gt;alignment&lt;/span&gt;: .&lt;span class="pl-smi"&gt;center&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;details&gt;
  &lt;summary&gt;View running results&lt;/summary&gt;
&lt;a target="_blank" rel="noopener noreferrer" href="images/example/Image.png"&gt;&lt;img width="80%" src="images/example/Image.png" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;/details&gt;
&lt;p&gt;&lt;a href="#Text_D"&gt;&lt;g-emoji class="g-emoji" alias="top" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f51d.png"&gt;🔝&lt;/g-emoji&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id="user-content-webimage"&gt;&lt;a id="user-content--webimage-" class="anchor" aria-hidden="true" href="#-webimage-"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt; WebImage &lt;/h4&gt;
&lt;p&gt;&lt;code&gt;webImage&lt;/code&gt; is used to download the web image, use the &lt;code&gt;URLSession&lt;/code&gt; to download the original &lt;code&gt;Image&lt;/code&gt; after successful download; you can also use Kingfisher in the &lt;code&gt;downloadWebImage &lt;/code&gt; function .&lt;/p&gt;
&lt;p&gt;Example：&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;var&lt;/span&gt; body&lt;span class="pl-k"&gt;:&lt;/span&gt; some View {
        &lt;span class="pl-c1"&gt;Image&lt;/span&gt;(&lt;span class="pl-c1"&gt;uiImage&lt;/span&gt;: &lt;span class="pl-c1"&gt;self&lt;/span&gt;.&lt;span class="pl-smi"&gt;uiImage&lt;/span&gt; &lt;span class="pl-k"&gt;??&lt;/span&gt; placeholderImage)
            .&lt;span class="pl-c1"&gt;resizable&lt;/span&gt;()
            .&lt;span class="pl-c1"&gt;onAppear&lt;/span&gt;(&lt;span class="pl-c1"&gt;perform&lt;/span&gt;: downloadWebImage)
            .&lt;span class="pl-c1"&gt;frame&lt;/span&gt;(&lt;span class="pl-c1"&gt;width&lt;/span&gt;: &lt;span class="pl-c1"&gt;80&lt;/span&gt;,
                   &lt;span class="pl-c1"&gt;height&lt;/span&gt;: &lt;span class="pl-c1"&gt;80&lt;/span&gt;,
                   &lt;span class="pl-c1"&gt;alignment&lt;/span&gt;: .&lt;span class="pl-smi"&gt;center&lt;/span&gt;)
            .&lt;span class="pl-smi"&gt;onTapGesture&lt;/span&gt; {
                &lt;span class="pl-c1"&gt;print&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Tap &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
        }
    }&lt;/pre&gt;&lt;/div&gt;
&lt;details&gt;
  &lt;summary&gt;View running results&lt;/summary&gt;
&lt;a target="_blank" rel="noopener noreferrer" href="images/example/WebImage.png"&gt;&lt;img width="80%" src="images/example/WebImage.png" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;/details&gt;
&lt;p&gt;&lt;a href="#Text_D"&gt;&lt;g-emoji class="g-emoji" alias="top" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f51d.png"&gt;🔝&lt;/g-emoji&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id="user-content-button"&gt;&lt;a id="user-content--button-" class="anchor" aria-hidden="true" href="#-button-"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt; Button &lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Button&lt;/code&gt; is used to respond to click events.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;Button&lt;/span&gt;(&lt;span class="pl-c1"&gt;action&lt;/span&gt;: {
    &lt;span class="pl-c1"&gt;print&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Tap&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
}) {
   &lt;span class="pl-c1"&gt;Text&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;I'm a Button&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
}&lt;/pre&gt;&lt;/div&gt;
&lt;details&gt;
  &lt;summary&gt;View running results&lt;/summary&gt;
&lt;a target="_blank" rel="noopener noreferrer" href="images/example/Button.png"&gt;&lt;img width="80%" src="images/example/Button.png" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;/details&gt;
&lt;p&gt;&lt;a href="#Button_D"&gt;&lt;g-emoji class="g-emoji" alias="top" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f51d.png"&gt;🔝&lt;/g-emoji&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id="user-content-pulldownbutton"&gt;&lt;a id="user-content--pulldownbutton-" class="anchor" aria-hidden="true" href="#-pulldownbutton-"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt; PullDownButton &lt;/h4&gt;
&lt;p&gt;Waiting for release.&lt;/p&gt;
&lt;h4 id="user-content-itembasedpopupbutton"&gt;&lt;a id="user-content--itembasedpopupbutton-" class="anchor" aria-hidden="true" href="#-itembasedpopupbutton-"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt; ItemBasedPopUpButton &lt;/h4&gt;
&lt;p&gt;Waiting for release.&lt;/p&gt;
&lt;h4 id="user-content-navigationbutton"&gt;&lt;a id="user-content--navigationbutton-" class="anchor" aria-hidden="true" href="#-navigationbutton-"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt; NavigationButton &lt;/h4&gt;
&lt;p&gt;&lt;code&gt;NavigationButtonPage &lt;/code&gt; is used to push to the next navigation page.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;NavigationLink&lt;/span&gt;(&lt;span class="pl-c1"&gt;destination&lt;/span&gt;: &lt;span class="pl-c1"&gt;NavigationButtonPage&lt;/span&gt;()) {
            &lt;span class="pl-c1"&gt;Text&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;NavigationButton&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;).&lt;span class="pl-c1"&gt;bold&lt;/span&gt;()
                .&lt;span class="pl-c1"&gt;foregroundColor&lt;/span&gt;(.&lt;span class="pl-smi"&gt;orange&lt;/span&gt;)
                .&lt;span class="pl-c1"&gt;font&lt;/span&gt;(.&lt;span class="pl-smi"&gt;largeTitle&lt;/span&gt;)
            }
    .&lt;span class="pl-c1"&gt;navigationBarTitle&lt;/span&gt;(&lt;span class="pl-c1"&gt;Text&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Page&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;details&gt;
  &lt;summary&gt;View running results&lt;/summary&gt;
&lt;a target="_blank" rel="noopener noreferrer" href="images/example/NavigationButton.png"&gt;&lt;img width="80%" src="images/example/NavigationButton.png" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;/details&gt;
&lt;p&gt;&lt;a href="#Button_D"&gt;&lt;g-emoji class="g-emoji" alias="top" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f51d.png"&gt;🔝&lt;/g-emoji&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id="user-content-presentationbutton"&gt;&lt;a id="user-content--presentationbutton-is-deprecated" class="anchor" aria-hidden="true" href="#-presentationbutton-is-deprecated"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt; PresentationButton is deprecated&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;PresentationButton&lt;/code&gt; &lt;del&gt;is used to pop up a page.&lt;/del&gt; has deprecated, please use &lt;code&gt;NavigationLink&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#Button_D"&gt;&lt;g-emoji class="g-emoji" alias="top" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f51d.png"&gt;🔝&lt;/g-emoji&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id="user-content-editbutton"&gt;&lt;a id="user-content--editbutton-" class="anchor" aria-hidden="true" href="#-editbutton-"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt; EditButton &lt;/h4&gt;
&lt;p&gt;&lt;code&gt;EditButton&lt;/code&gt; is used to trigger the editing state, just use the &lt;code&gt;navigationBarItems&lt;/code&gt; setting when using it.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;navigationBarItems&lt;/span&gt;(&lt;span class="pl-c1"&gt;trailing&lt;/span&gt;: &lt;span class="pl-c1"&gt;EditButton&lt;/span&gt;())&lt;/pre&gt;&lt;/div&gt;
&lt;details&gt;
  &lt;summary&gt;View running results&lt;/summary&gt;
&lt;a target="_blank" rel="noopener noreferrer" href="images/example/EditButton.png"&gt;&lt;img width="80%" src="images/example/EditButton.png" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;/details&gt;
&lt;p&gt;&lt;a href="#Button_D"&gt;&lt;g-emoji class="g-emoji" alias="top" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f51d.png"&gt;🔝&lt;/g-emoji&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id="user-content-pastebutton"&gt;&lt;a id="user-content--pastebutton-" class="anchor" aria-hidden="true" href="#-pastebutton-"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt; PasteButton &lt;/h4&gt; 
&lt;p&gt;Waiting for release.&lt;/p&gt;
&lt;h4 id="user-content-picker"&gt;&lt;a id="user-content--picker-" class="anchor" aria-hidden="true" href="#-picker-"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt; Picker &lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Picker&lt;/code&gt; can customize the selector of the data source.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;Picker&lt;/span&gt;(&lt;span class="pl-c1"&gt;selection&lt;/span&gt;: $leftIndex, &lt;span class="pl-c1"&gt;label&lt;/span&gt;: &lt;span class="pl-c1"&gt;Text&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Picker&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)) {
    &lt;span class="pl-c1"&gt;ForEach&lt;/span&gt;(&lt;span class="pl-c1"&gt;0&lt;/span&gt;&lt;span class="pl-k"&gt;..&amp;lt;&lt;/span&gt;leftSource.&lt;span class="pl-c1"&gt;count&lt;/span&gt;) {
        &lt;span class="pl-c1"&gt;Text&lt;/span&gt;(&lt;span class="pl-c1"&gt;self&lt;/span&gt;.&lt;span class="pl-smi"&gt;leftSource&lt;/span&gt;[&lt;span class="pl-c1"&gt;$0&lt;/span&gt;]).&lt;span class="pl-c1"&gt;tag&lt;/span&gt;(&lt;span class="pl-c1"&gt;$0&lt;/span&gt;)
    }
    }.&lt;span class="pl-c1"&gt;frame&lt;/span&gt;(&lt;span class="pl-c1"&gt;width&lt;/span&gt;: UIScreen.&lt;span class="pl-smi"&gt;main&lt;/span&gt;.&lt;span class="pl-smi"&gt;bounds&lt;/span&gt;.&lt;span class="pl-smi"&gt;width&lt;/span&gt;&lt;span class="pl-k"&gt;/&lt;/span&gt;&lt;span class="pl-c1"&gt;2&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;details&gt;
  &lt;summary&gt;View running results&lt;/summary&gt;
&lt;a target="_blank" rel="noopener noreferrer" href="images/example/Picker.png"&gt;&lt;img width="80%" src="images/example/Picker.png" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;/details&gt;
&lt;p&gt;&lt;a href="#Picker_D"&gt;&lt;g-emoji class="g-emoji" alias="top" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f51d.png"&gt;🔝&lt;/g-emoji&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id="user-content-datepicker"&gt;&lt;a id="user-content--datepicker-" class="anchor" aria-hidden="true" href="#-datepicker-"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt; DatePicker &lt;/h4&gt;
&lt;p&gt;&lt;code&gt;DatePicker&lt;/code&gt; is used to select the absolute date of the control.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;                &lt;span class="pl-c1"&gt;DatePicker&lt;/span&gt;(&lt;span class="pl-c1"&gt;selection&lt;/span&gt;: $server.&lt;span class="pl-smi"&gt;date&lt;/span&gt;, 
                &lt;span class="pl-c1"&gt;in&lt;/span&gt;: server.&lt;span class="pl-smi"&gt;spaceDate&lt;/span&gt;, 
                &lt;span class="pl-c1"&gt;displayedComponents&lt;/span&gt;: .&lt;span class="pl-smi"&gt;date&lt;/span&gt;, &lt;span class="pl-c1"&gt;label&lt;/span&gt;: {
                    &lt;span class="pl-c1"&gt;Text&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
                })&lt;/pre&gt;&lt;/div&gt;
&lt;details&gt;
  &lt;summary&gt;View running results&lt;/summary&gt;
&lt;a target="_blank" rel="noopener noreferrer" href="images/example/DatePicker.png"&gt;&lt;img width="80%" src="images/example/DatePicker.png" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;/details&gt;
&lt;p&gt;&lt;a href="#Picker_D"&gt;&lt;g-emoji class="g-emoji" alias="top" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f51d.png"&gt;🔝&lt;/g-emoji&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id="user-content-toggle"&gt;&lt;a id="user-content--toggle-" class="anchor" aria-hidden="true" href="#-toggle-"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt; Toggle &lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Toggle&lt;/code&gt; is used to switch the selected state, for example:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;Togglele&lt;/span&gt;(&lt;span class="pl-c1"&gt;isOn&lt;/span&gt;: $isOn) {
    &lt;span class="pl-c1"&gt;Text&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;State: &lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;&lt;span class="pl-c1"&gt;self&lt;/span&gt;.&lt;span class="pl-smi"&gt;isOn&lt;/span&gt; &lt;span class="pl-k"&gt;==&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt; &lt;span class="pl-k"&gt;?&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Open&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;open&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
}.&lt;span class="pl-c1"&gt;padding&lt;/span&gt;(&lt;span class="pl-c1"&gt;20&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;details&gt;
  &lt;summary&gt;View running results&lt;/summary&gt;
&lt;a target="_blank" rel="noopener noreferrer" href="images/example/Toggle.png"&gt;&lt;img width="80%" src="images/example/Toggle.png" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;/details&gt;
&lt;p&gt;&lt;a href="#Picker_D"&gt;&lt;g-emoji class="g-emoji" alias="top" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f51d.png"&gt;🔝&lt;/g-emoji&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id="user-content-slider"&gt;&lt;a id="user-content--slider-" class="anchor" aria-hidden="true" href="#-slider-"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt; Slider &lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Slider &lt;/code&gt; A control for selecting values from a finite range of values, example:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;Slider&lt;/span&gt;(&lt;span class="pl-c1"&gt;value&lt;/span&gt;: $data.&lt;span class="pl-smi"&gt;rating&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;details&gt;
  &lt;summary&gt;View running results&lt;/summary&gt;
&lt;a target="_blank" rel="noopener noreferrer" href="images/example/Slider.png"&gt;&lt;img width="80%" src="images/example/Slider.png" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;/details&gt;
&lt;p&gt;&lt;a href="#Picker_D"&gt;&lt;g-emoji class="g-emoji" alias="top" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f51d.png"&gt;🔝&lt;/g-emoji&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id="user-content-stepper"&gt;&lt;a id="user-content--stepper-" class="anchor" aria-hidden="true" href="#-stepper-"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt; Stepper &lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Stepper &lt;/code&gt; is used to increase or decrease the value, example:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;Stepper&lt;/span&gt;(&lt;span class="pl-c1"&gt;value&lt;/span&gt;: $value, &lt;span class="pl-c1"&gt;step&lt;/span&gt;: &lt;span class="pl-c1"&gt;2&lt;/span&gt;, &lt;span class="pl-c1"&gt;onEditingChanged&lt;/span&gt;: { c &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-c1"&gt;print&lt;/span&gt;(c)
}) {
    &lt;span class="pl-c1"&gt;Text&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Stepper Value: &lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;&lt;span class="pl-c1"&gt;self&lt;/span&gt;.&lt;span class="pl-c1"&gt;value&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    }.&lt;span class="pl-c1"&gt;padding&lt;/span&gt;(&lt;span class="pl-c1"&gt;50&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;details&gt;
  &lt;summary&gt;View running results&lt;/summary&gt;
&lt;a target="_blank" rel="noopener noreferrer" href="images/example/Stepper.png"&gt;&lt;img width="80%" src="images/example/Stepper.png" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;/details&gt;
&lt;p&gt;&lt;a href="#Picker_D"&gt;&lt;g-emoji class="g-emoji" alias="top" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f51d.png"&gt;🔝&lt;/g-emoji&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id="user-content-segmentedcontrol"&gt;&lt;a id="user-content-segmentedcontrol-is-deprecated" class="anchor" aria-hidden="true" href="#segmentedcontrol-is-deprecated"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;SegmentedControl is deprecated&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;SegmentedControl &lt;/code&gt; is used for segmentation condition selection, example:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;SegmentedControl&lt;/span&gt;(&lt;span class="pl-c1"&gt;selection&lt;/span&gt;: $currentIndex) {
    &lt;span class="pl-c1"&gt;ForEach&lt;/span&gt;(&lt;span class="pl-c1"&gt;0&lt;/span&gt;&lt;span class="pl-k"&gt;..&amp;lt;&lt;/span&gt;items.&lt;span class="pl-c1"&gt;count&lt;/span&gt;) { index &lt;span class="pl-k"&gt;in&lt;/span&gt;
        &lt;span class="pl-c1"&gt;Text&lt;/span&gt;(&lt;span class="pl-c1"&gt;self&lt;/span&gt;.&lt;span class="pl-smi"&gt;items&lt;/span&gt;[index]).&lt;span class="pl-c1"&gt;tag&lt;/span&gt;(index)
    }
    }.&lt;span class="pl-smi"&gt;tapAction&lt;/span&gt; {
        &lt;span class="pl-c1"&gt;print&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;currentIndex: &lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;&lt;span class="pl-c1"&gt;self&lt;/span&gt;.&lt;span class="pl-smi"&gt;currentIndex&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
}&lt;/pre&gt;&lt;/div&gt;
&lt;details&gt;
  &lt;summary&gt;View running results&lt;/summary&gt;
&lt;a target="_blank" rel="noopener noreferrer" href="images/example/SegmentedControl.png"&gt;&lt;img width="80%" src="images/example/SegmentedControl.png" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;/details&gt;
&lt;p&gt;&lt;a href="#Picker_D"&gt;&lt;g-emoji class="g-emoji" alias="top" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f51d.png"&gt;🔝&lt;/g-emoji&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id="user-content-webview"&gt;&lt;a id="user-content--webview-" class="anchor" aria-hidden="true" href="#-webview-"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt; WebView &lt;/h4&gt;
&lt;p&gt;&lt;code&gt;WebView&lt;/code&gt; is used to display an open web page, example:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;struct&lt;/span&gt; &lt;span class="pl-en"&gt;WebViewPage&lt;/span&gt; : &lt;span class="pl-e"&gt;UIViewRepresentable &lt;/span&gt;{
    &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;makeUIView&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-en"&gt;context&lt;/span&gt;&lt;/span&gt;: Context) &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; WKWebView  {
        &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-c1"&gt;WKWebView&lt;/span&gt;()
    }
    &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;updateUIView&lt;/span&gt;(&lt;span class="pl-en"&gt;_&lt;/span&gt; &lt;span class="pl-smi"&gt;uiView&lt;/span&gt;: WKWebView, &lt;span class="pl-smi"&gt;&lt;span class="pl-en"&gt;context&lt;/span&gt;&lt;/span&gt;: Context) {
        &lt;span class="pl-k"&gt;let&lt;/span&gt; req &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;URLRequest&lt;/span&gt;(&lt;span class="pl-c1"&gt;url&lt;/span&gt;: &lt;span class="pl-c1"&gt;URL&lt;/span&gt;(&lt;span class="pl-c1"&gt;string&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;https://www.apple.com&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;span class="pl-k"&gt;!&lt;/span&gt;)
        uiView.&lt;span class="pl-c1"&gt;load&lt;/span&gt;(req)
    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;details&gt;
  &lt;summary&gt;View running results&lt;/summary&gt;
&lt;a target="_blank" rel="noopener noreferrer" href="images/example/WebView.png"&gt;&lt;img width="80%" src="images/example/WebView.png" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;/details&gt;
&lt;p&gt;&lt;a href="#Special_D"&gt;&lt;g-emoji class="g-emoji" alias="top" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f51d.png"&gt;🔝&lt;/g-emoji&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id="user-content-uiviewcontroller"&gt;&lt;a id="user-content--uiviewcontroller-" class="anchor" aria-hidden="true" href="#-uiviewcontroller-"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt; UIViewController &lt;/h4&gt;
&lt;p&gt;&lt;code&gt;UIViewController&lt;/code&gt; is used to display the &lt;strong&gt;UIViewController&lt;/strong&gt; that opens &lt;strong&gt;UIKit&lt;/strong&gt; in &lt;strong&gt;SwiftUI&lt;/strong&gt; and opens the &lt;code&gt;SwiftUI&lt;/code&gt; View in &lt;strong&gt;UIViewController&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;p&gt;First define:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;struct&lt;/span&gt; &lt;span class="pl-en"&gt;ControllerPage&lt;/span&gt;&amp;lt;&lt;span class="pl-c1"&gt;T&lt;/span&gt;: &lt;span class="pl-e"&gt;UIViewController&lt;/span&gt;&amp;gt; : &lt;span class="pl-e"&gt;UIViewControllerRepresentable &lt;/span&gt;{
    
    &lt;span class="pl-k"&gt;typealias&lt;/span&gt; &lt;span class="pl-en"&gt;UIViewControllerType&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; UIViewController
    
    &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;makeUIViewController&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-en"&gt;context&lt;/span&gt;&lt;/span&gt;: UIViewControllerRepresentableContext&amp;lt;ControllerPage&amp;gt;) &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; UIViewController {
        &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-c1"&gt;T&lt;/span&gt;()
    }
    
    &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;updateUIViewController&lt;/span&gt;(&lt;span class="pl-en"&gt;_&lt;/span&gt; &lt;span class="pl-smi"&gt;uiViewController&lt;/span&gt;: UIViewController, &lt;span class="pl-smi"&gt;&lt;span class="pl-en"&gt;context&lt;/span&gt;&lt;/span&gt;: UIViewControllerRepresentableContext&amp;lt;ControllerPage&amp;gt;) {
        &lt;span class="pl-c1"&gt;debugPrint&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;&lt;span class="pl-c1"&gt;#function&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;：&lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;&lt;span class="pl-c1"&gt;type&lt;/span&gt;(&lt;span class="pl-c1"&gt;of&lt;/span&gt;: T.&lt;span class="pl-k"&gt;self&lt;/span&gt;)&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    }
    
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then use this:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;NavigationButton&lt;/span&gt;(&lt;span class="pl-c1"&gt;destination&lt;/span&gt;: ControllerPage&lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt;UIKitController&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;()) {
    &lt;span class="pl-c1"&gt;PageRow&lt;/span&gt;(&lt;span class="pl-c1"&gt;title&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;UIViewController&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,&lt;span class="pl-c1"&gt;subTitle&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Open UIViewController&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)

}&lt;/pre&gt;&lt;/div&gt;
&lt;details&gt;
  &lt;summary&gt;View running results&lt;/summary&gt;
&lt;a target="_blank" rel="noopener noreferrer" href="images/example/UIViewController.png"&gt;&lt;img width="80%" src="images/example/UIViewController.png" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a target="_blank" rel="noopener noreferrer" href="images/example/UIViewController2.png"&gt;&lt;img width="80%" src="images/example/UIViewController2.png" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;/details&gt;
&lt;p&gt;&lt;a href="#Special_D"&gt;&lt;g-emoji class="g-emoji" alias="top" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f51d.png"&gt;🔝&lt;/g-emoji&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-layout-1" class="anchor" aria-hidden="true" href="#layout-1"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Layout&lt;/h3&gt;
&lt;h4 id="user-content-hstack"&gt;&lt;a id="user-content--hstack-" class="anchor" aria-hidden="true" href="#-hstack-"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt; HStack &lt;/h4&gt;
&lt;p&gt;&lt;code&gt;HStack&lt;/code&gt; is used to arrange the subviews on a horizontal line.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;HStack {
    &lt;span class="pl-c1"&gt;Text&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;made in China.&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    &lt;span class="pl-c1"&gt;Divider&lt;/span&gt;() &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Just add a line.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-c1"&gt;Text&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;the People's Republic Of China.&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
}&lt;/pre&gt;&lt;/div&gt;
&lt;details&gt;
  &lt;summary&gt;View running results&lt;/summary&gt;
&lt;a target="_blank" rel="noopener noreferrer" href="images/example/HStack.png"&gt;&lt;img width="80%" src="images/example/HStack.png" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;/details&gt;
&lt;p&gt;&lt;a href="#Layout_D"&gt;&lt;g-emoji class="g-emoji" alias="top" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f51d.png"&gt;🔝&lt;/g-emoji&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id="user-content-vstack"&gt;&lt;a id="user-content--vstack-" class="anchor" aria-hidden="true" href="#-vstack-"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt; VStack &lt;/h4&gt;
&lt;p&gt;&lt;code&gt;VStack&lt;/code&gt; is used to arrange the subviews on a vertical line.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;VStack {
    &lt;span class="pl-c1"&gt;Text&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;made in China.&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    &lt;span class="pl-c1"&gt;Divider&lt;/span&gt;() &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Just add a line.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-c1"&gt;Text&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;the People's Republic Of China.&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
}&lt;/pre&gt;&lt;/div&gt;
&lt;details&gt;
  &lt;summary&gt;View running results&lt;/summary&gt;
&lt;a target="_blank" rel="noopener noreferrer" href="images/example/VStack.png"&gt;&lt;img width="80%" src="images/example/VStack.png" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;/details&gt;
&lt;p&gt;&lt;a href="#Layout_D"&gt;&lt;g-emoji class="g-emoji" alias="top" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f51d.png"&gt;🔝&lt;/g-emoji&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id="user-content-zstack"&gt;&lt;a id="user-content--zstack-" class="anchor" aria-hidden="true" href="#-zstack-"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt; ZStack &lt;/h4&gt;
&lt;p&gt;&lt;code&gt;ZStack&lt;/code&gt; is used to override the subview, aligned on two axes.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;ZStack {
    &lt;span class="pl-c1"&gt;Text&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;made in China.&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    &lt;span class="pl-c1"&gt;Divider&lt;/span&gt;() &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Just add a line.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-c1"&gt;Text&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;the People's Republic Of China.&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
}&lt;/pre&gt;&lt;/div&gt;
&lt;details&gt;
  &lt;summary&gt;View running results&lt;/summary&gt;
&lt;a target="_blank" rel="noopener noreferrer" href="images/example/ZStack.png"&gt;&lt;img width="80%" src="images/example/ZStack.png" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;/details&gt;
&lt;p&gt;&lt;a href="#Layout_D"&gt;&lt;g-emoji class="g-emoji" alias="top" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f51d.png"&gt;🔝&lt;/g-emoji&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id="user-content-list"&gt;&lt;a id="user-content--list-" class="anchor" aria-hidden="true" href="#-list-"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt; List &lt;/h4&gt;
&lt;p&gt;&lt;code&gt;List&lt;/code&gt; list container to display a list of data.&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;List&lt;/span&gt;(&lt;span class="pl-c1"&gt;0&lt;/span&gt;&lt;span class="pl-k"&gt;..&amp;lt;&lt;/span&gt;&lt;span class="pl-c1"&gt;5&lt;/span&gt;) { item &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-c1"&gt;Text&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Hello World !&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
}.&lt;span class="pl-c1"&gt;navigationBarTitle&lt;/span&gt;(&lt;span class="pl-c1"&gt;Text&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;List&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;), &lt;span class="pl-c1"&gt;displayMode&lt;/span&gt;: .&lt;span class="pl-smi"&gt;large&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;details&gt;
  &lt;summary&gt;View running results&lt;/summary&gt;
&lt;a target="_blank" rel="noopener noreferrer" href="images/example/List.png"&gt;&lt;img width="80%" src="images/example/List.png" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;/details&gt;
&lt;p&gt;&lt;a href="#Layout_D"&gt;&lt;g-emoji class="g-emoji" alias="top" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f51d.png"&gt;🔝&lt;/g-emoji&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id="user-content-scrollview"&gt;&lt;a id="user-content--scrollview-" class="anchor" aria-hidden="true" href="#-scrollview-"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt; ScrollView &lt;/h4&gt;
&lt;p&gt;&lt;code&gt;ScrollView&lt;/code&gt; is a scroll view container.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;ScrollView {
    &lt;span class="pl-c1"&gt;Text&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SwiftUI&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;).&lt;span class="pl-c1"&gt;padding&lt;/span&gt;(&lt;span class="pl-c1"&gt;20&lt;/span&gt;)
    &lt;span class="pl-c1"&gt;Divider&lt;/span&gt;()
    &lt;span class="pl-c1"&gt;Image&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;icon&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;).&lt;span class="pl-c1"&gt;resizable&lt;/span&gt;()
        .&lt;span class="pl-c1"&gt;frame&lt;/span&gt;(&lt;span class="pl-c1"&gt;width&lt;/span&gt;: &lt;span class="pl-c1"&gt;300&lt;/span&gt;, &lt;span class="pl-c1"&gt;height&lt;/span&gt;: &lt;span class="pl-c1"&gt;300&lt;/span&gt;, &lt;span class="pl-c1"&gt;alignment&lt;/span&gt;: .&lt;span class="pl-smi"&gt;center&lt;/span&gt;)
    &lt;span class="pl-c1"&gt;Divider&lt;/span&gt;()
    &lt;span class="pl-c1"&gt;Text&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Views and ... user interface.&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    }
    .&lt;span class="pl-c1"&gt;border&lt;/span&gt;(Color.&lt;span class="pl-smi"&gt;gray&lt;/span&gt;.&lt;span class="pl-smi"&gt;gradient&lt;/span&gt;, &lt;span class="pl-c1"&gt;width&lt;/span&gt;: &lt;span class="pl-c1"&gt;1&lt;/span&gt;)
            .&lt;span class="pl-c1"&gt;cornerRadius&lt;/span&gt;(&lt;span class="pl-c1"&gt;10&lt;/span&gt;)
            .&lt;span class="pl-c1"&gt;padding&lt;/span&gt;(&lt;span class="pl-c1"&gt;10&lt;/span&gt;)
            .&lt;span class="pl-c1"&gt;navigationBarTitle&lt;/span&gt;(&lt;span class="pl-c1"&gt;Text&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;ScrollView&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;details&gt;
  &lt;summary&gt;View running results&lt;/summary&gt;
&lt;a target="_blank" rel="noopener noreferrer" href="images/example/ScrollView.png"&gt;&lt;img width="80%" src="images/example/ScrollView.png" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;/details&gt;
&lt;p&gt;&lt;a href="#Layout_D"&gt;&lt;g-emoji class="g-emoji" alias="top" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f51d.png"&gt;🔝&lt;/g-emoji&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id="user-content-foreach"&gt;&lt;a id="user-content--foreach-" class="anchor" aria-hidden="true" href="#-foreach-"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt; ForEach &lt;/h4&gt;
&lt;p&gt;&lt;code&gt;ForEach&lt;/code&gt; is used to present a view based on a collection of existing data.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; data &lt;span class="pl-k"&gt;=&lt;/span&gt; (&lt;span class="pl-c1"&gt;0&lt;/span&gt;&lt;span class="pl-k"&gt;..&amp;lt;&lt;/span&gt;&lt;span class="pl-c1"&gt;5&lt;/span&gt;)
&lt;span class="pl-k"&gt;var&lt;/span&gt; body&lt;span class="pl-k"&gt;:&lt;/span&gt; some View {
    &lt;span class="pl-c1"&gt;ForEach&lt;/span&gt;(data) { e &lt;span class="pl-k"&gt;in&lt;/span&gt;
        &lt;span class="pl-c1"&gt;Text&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Hello &lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;e&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
            .&lt;span class="pl-c1"&gt;bold&lt;/span&gt;()
            .&lt;span class="pl-c1"&gt;font&lt;/span&gt;(.&lt;span class="pl-c1"&gt;system&lt;/span&gt;(&lt;span class="pl-c1"&gt;size&lt;/span&gt;: &lt;span class="pl-c1"&gt;25&lt;/span&gt;, &lt;span class="pl-c1"&gt;design&lt;/span&gt;: .&lt;span class="pl-smi"&gt;monospaced&lt;/span&gt;))
            .&lt;span class="pl-c1"&gt;padding&lt;/span&gt;(&lt;span class="pl-c1"&gt;5&lt;/span&gt;)
}&lt;/pre&gt;&lt;/div&gt;
&lt;details&gt;
  &lt;summary&gt;View running results&lt;/summary&gt;
&lt;a target="_blank" rel="noopener noreferrer" href="images/example/ForEach.png"&gt;&lt;img width="80%" src="images/example/ForEach.png" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;/details&gt;
&lt;p&gt;&lt;a href="#Layout_D"&gt;&lt;g-emoji class="g-emoji" alias="top" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f51d.png"&gt;🔝&lt;/g-emoji&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id="user-content-group"&gt;&lt;a id="user-content--group-" class="anchor" aria-hidden="true" href="#-group-"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt; Group &lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Group&lt;/code&gt; is used to aggregate multiple views, and the properties set on the Group will be applied to each child view.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;Group {
    &lt;span class="pl-c1"&gt;Text&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Hello World !&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    &lt;span class="pl-c1"&gt;Text&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Hello World !&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    }&lt;/pre&gt;&lt;/div&gt;
&lt;details&gt;
  &lt;summary&gt;View running results&lt;/summary&gt;
&lt;a target="_blank" rel="noopener noreferrer" href="images/example/Group.png"&gt;&lt;img width="80%" src="images/example/Group.png" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;/details&gt;
&lt;p&gt;&lt;a href="#Layout_D"&gt;&lt;g-emoji class="g-emoji" alias="top" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f51d.png"&gt;🔝&lt;/g-emoji&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id="user-content-groupbox"&gt;&lt;a id="user-content--groupbox-" class="anchor" aria-hidden="true" href="#-groupbox-"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt; GroupBox &lt;/h4&gt;
&lt;p&gt;Waiting for release.&lt;/p&gt;
&lt;h4 id="user-content-section"&gt;&lt;a id="user-content--section-" class="anchor" aria-hidden="true" href="#-section-"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt; Section &lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Section&lt;/code&gt; is used to create the &lt;strong&gt;header/footer&lt;/strong&gt; view content, which is generally used in conjunction with the &lt;code&gt;List&lt;/code&gt; component.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;Section&lt;/span&gt;(&lt;span class="pl-c1"&gt;header&lt;/span&gt;: &lt;span class="pl-c1"&gt;Text&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;I'm header&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;), &lt;span class="pl-c1"&gt;footer&lt;/span&gt;: &lt;span class="pl-c1"&gt;Text&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;I'm footer&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)) {
    &lt;span class="pl-c1"&gt;ForEach&lt;/span&gt;(&lt;span class="pl-c1"&gt;0&lt;/span&gt;&lt;span class="pl-k"&gt;..&amp;lt;&lt;/span&gt;&lt;span class="pl-c1"&gt;3&lt;/span&gt;) {
        &lt;span class="pl-c1"&gt;Text&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Hello &lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;&lt;span class="pl-c1"&gt;$0&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;details&gt;
  &lt;summary&gt;View running results&lt;/summary&gt;
&lt;a target="_blank" rel="noopener noreferrer" href="images/example/Section.png"&gt;&lt;img width="80%" src="images/example/Section.png" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;/details&gt;
&lt;p&gt;&lt;a href="#Layout_D"&gt;&lt;g-emoji class="g-emoji" alias="top" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f51d.png"&gt;🔝&lt;/g-emoji&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id="user-content-navigationview"&gt;&lt;a id="user-content--navigationview-" class="anchor" aria-hidden="true" href="#-navigationview-"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt; NavigationView &lt;/h4&gt;
&lt;p&gt;&lt;code&gt;NavigationView&lt;/code&gt; is used to create a view container that contains the top navigation bar.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;NavigationView {
            &lt;span class="pl-c1"&gt;Text&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;🧚‍♂️🧚‍♀️🧜‍♂️🧜‍♀️🧞‍♂️🧞‍♀️&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;).&lt;span class="pl-c1"&gt;blur&lt;/span&gt;(&lt;span class="pl-c1"&gt;radius&lt;/span&gt;: &lt;span class="pl-c1"&gt;5&lt;/span&gt;)
            &lt;span class="pl-c1"&gt;Text&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Swifter Swifter&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
            .&lt;span class="pl-c1"&gt;bold&lt;/span&gt;()
                .&lt;span class="pl-c1"&gt;foregroundColor&lt;/span&gt;(.&lt;span class="pl-smi"&gt;orange&lt;/span&gt;)
                .&lt;span class="pl-c1"&gt;font&lt;/span&gt;(.&lt;span class="pl-smi"&gt;largeTitle&lt;/span&gt;)
        }
    .&lt;span class="pl-c1"&gt;navigationBarTitle&lt;/span&gt;(&lt;span class="pl-c1"&gt;Text&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;NavigationView&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;details&gt;
  &lt;summary&gt;View running results&lt;/summary&gt;
&lt;a target="_blank" rel="noopener noreferrer" href="images/example/NavigationView.png"&gt;&lt;img width="80%" src="images/example/NavigationView.png" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;/details&gt;
&lt;p&gt;&lt;a href="#Layout_D"&gt;&lt;g-emoji class="g-emoji" alias="top" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f51d.png"&gt;🔝&lt;/g-emoji&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id="user-content-tabbar"&gt;&lt;a id="user-content--tabbar-" class="anchor" aria-hidden="true" href="#-tabbar-"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt; TabBar &lt;/h4&gt;
&lt;p&gt;&lt;code&gt;TabBar&lt;/code&gt; is used to create a view container that contains the bottom &lt;strong&gt;TabBar&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;TabbedView&lt;/span&gt;(&lt;span class="pl-c1"&gt;selection&lt;/span&gt;: $index) {
    &lt;span class="pl-c1"&gt;ForEach&lt;/span&gt;(&lt;span class="pl-c1"&gt;0&lt;/span&gt; &lt;span class="pl-k"&gt;..&amp;lt;&lt;/span&gt; imgs.&lt;span class="pl-c1"&gt;count&lt;/span&gt;) { item &lt;span class="pl-k"&gt;in&lt;/span&gt;
        &lt;span class="pl-c1"&gt;TabItemPage&lt;/span&gt;(&lt;span class="pl-c1"&gt;index&lt;/span&gt;: item)
            .&lt;span class="pl-c1"&gt;tabItemLabel&lt;/span&gt;(&lt;span class="pl-c1"&gt;Image&lt;/span&gt;(&lt;span class="pl-c1"&gt;self&lt;/span&gt;.&lt;span class="pl-smi"&gt;imgs&lt;/span&gt;[item]))
            .&lt;span class="pl-c1"&gt;tag&lt;/span&gt;(item)
    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;details&gt;
  &lt;summary&gt;View running results&lt;/summary&gt;
&lt;a target="_blank" rel="noopener noreferrer" href="images/example/TabBar.png"&gt;&lt;img width="80%" src="images/example/TabBar.png" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;/details&gt;
&lt;p&gt;&lt;a href="#Layout_D"&gt;&lt;g-emoji class="g-emoji" alias="top" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f51d.png"&gt;🔝&lt;/g-emoji&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id="user-content-hsplitview"&gt;&lt;a id="user-content--hsplitview-" class="anchor" aria-hidden="true" href="#-hsplitview-"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt; HSplitView &lt;/h4&gt; 
&lt;p&gt;Waiting for release.&lt;/p&gt;
&lt;h4 id="user-content-vsplitview"&gt;&lt;a id="user-content--vsplitview-" class="anchor" aria-hidden="true" href="#-vsplitview-"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt; VSplitView &lt;/h4&gt; 
&lt;p&gt;Waiting for release.&lt;/p&gt;
&lt;p&gt;&lt;a href="#Layout_D"&gt;&lt;g-emoji class="g-emoji" alias="top" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f51d.png"&gt;🔝&lt;/g-emoji&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id="user-content-alert"&gt;&lt;a id="user-content--alert-" class="anchor" aria-hidden="true" href="#-alert-"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt; Alert &lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Alert&lt;/code&gt; is used to display a bullet reminder that needs to be associated with a trigger event.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;alert&lt;/span&gt;(&lt;span class="pl-c1"&gt;isPresented&lt;/span&gt;: $showAlert, &lt;span class="pl-c1"&gt;content&lt;/span&gt;: {
            &lt;span class="pl-c1"&gt;Alert&lt;/span&gt;(&lt;span class="pl-c1"&gt;title&lt;/span&gt;: &lt;span class="pl-c1"&gt;Text&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;确定要支付这100000000美元吗？&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;),
                  &lt;span class="pl-c1"&gt;message&lt;/span&gt;: &lt;span class="pl-c1"&gt;Text&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;请谨慎操作&lt;span class="pl-cce"&gt;\n&lt;/span&gt;一旦确认，钱款将立即转入对方账户&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;),
                  &lt;span class="pl-c1"&gt;primaryButton&lt;/span&gt;: .&lt;span class="pl-c1"&gt;destructive&lt;/span&gt;(&lt;span class="pl-c1"&gt;Text&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;确认&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)) { &lt;span class="pl-c1"&gt;print&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;转出中...&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) },
                  &lt;span class="pl-c1"&gt;secondaryButton&lt;/span&gt;: .&lt;span class="pl-c1"&gt;cancel&lt;/span&gt;())
        }).&lt;span class="pl-c1"&gt;navigationBarTitle&lt;/span&gt;(&lt;span class="pl-c1"&gt;Text&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Alert&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;details&gt;
  &lt;summary&gt;View running results&lt;/summary&gt;
&lt;a target="_blank" rel="noopener noreferrer" href="images/example/AlertPage.jpg"&gt;&lt;img width="80%" src="images/example/AlertPage.jpg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;/details&gt;
&lt;p&gt;&lt;a href="#Alert_D"&gt;&lt;g-emoji class="g-emoji" alias="top" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f51d.png"&gt;🔝&lt;/g-emoji&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id="user-content-actionsheet"&gt;&lt;a id="user-content--actionsheet-" class="anchor" aria-hidden="true" href="#-actionsheet-"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt; ActionSheet &lt;/h4&gt;
&lt;p&gt;&lt;code&gt;ActionSheet&lt;/code&gt; is used to pop up a selection box.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;ActionSheet&lt;/span&gt;(&lt;span class="pl-c1"&gt;title&lt;/span&gt;: &lt;span class="pl-c1"&gt;Text&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Title&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;),
            &lt;span class="pl-c1"&gt;message&lt;/span&gt;: &lt;span class="pl-c1"&gt;Text&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Message&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;),
            &lt;span class="pl-c1"&gt;buttons&lt;/span&gt;:
    [.&lt;span class="pl-c1"&gt;default&lt;/span&gt;(&lt;span class="pl-c1"&gt;Text&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Default&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;), &lt;span class="pl-c1"&gt;onTrigger&lt;/span&gt;: {
        &lt;span class="pl-c1"&gt;print&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Default&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
        &lt;span class="pl-c1"&gt;self&lt;/span&gt;.&lt;span class="pl-smi"&gt;showSheet&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;false&lt;/span&gt;
    }),.&lt;span class="pl-c1"&gt;destructive&lt;/span&gt;(&lt;span class="pl-c1"&gt;Text&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;destructive&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;), &lt;span class="pl-c1"&gt;onTrigger&lt;/span&gt;: {
        &lt;span class="pl-c1"&gt;print&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;destructive&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
        &lt;span class="pl-c1"&gt;self&lt;/span&gt;.&lt;span class="pl-smi"&gt;showSheet&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;false&lt;/span&gt;
    }),.&lt;span class="pl-c1"&gt;cancel&lt;/span&gt;({
        &lt;span class="pl-c1"&gt;print&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Cancel&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
        &lt;span class="pl-c1"&gt;self&lt;/span&gt;.&lt;span class="pl-smi"&gt;showSheet&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;false&lt;/span&gt;
    })])&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;usage：&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;.&lt;span class="pl-c1"&gt;actionSheet&lt;/span&gt;(&lt;span class="pl-c1"&gt;isPresented&lt;/span&gt;: $showSheet, &lt;span class="pl-c1"&gt;content&lt;/span&gt;: {sheet})&lt;/pre&gt;&lt;/div&gt;
&lt;details&gt;
  &lt;summary&gt;View running results&lt;/summary&gt;
&lt;a target="_blank" rel="noopener noreferrer" href="images/example/ActionSheet.png"&gt;&lt;img width="80%" src="images/example/ActionSheet.png" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;/details&gt;
&lt;p&gt;&lt;a href="#Alert_D"&gt;&lt;g-emoji class="g-emoji" alias="top" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f51d.png"&gt;🔝&lt;/g-emoji&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id="user-content-modal"&gt;&lt;a id="user-content--modal-" class="anchor" aria-hidden="true" href="#-modal-"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt; Modal &lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Modal&lt;/code&gt; is used to pop up a view.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;Modal&lt;/span&gt;(&lt;span class="pl-c1"&gt;Text&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Modal View&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;),&lt;span class="pl-c1"&gt;onDismiss&lt;/span&gt;: {
    &lt;span class="pl-c1"&gt;print&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;View Dismiss !&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
})&lt;/pre&gt;&lt;/div&gt;
&lt;details&gt;
  &lt;summary&gt;View running results&lt;/summary&gt;
&lt;a target="_blank" rel="noopener noreferrer" href="images/example/Modal.png"&gt;&lt;img width="80%" src="images/example/Modal.png" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;/details&gt;
&lt;p&gt;&lt;a href="#Alert_D"&gt;&lt;g-emoji class="g-emoji" alias="top" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f51d.png"&gt;🔝&lt;/g-emoji&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id="user-content-popover"&gt;&lt;a id="user-content--popover-" class="anchor" aria-hidden="true" href="#-popover-"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt; Popover &lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Popover&lt;/code&gt; is used to pop up a view, see the results below.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;.&lt;span class="pl-c1"&gt;popover&lt;/span&gt;(&lt;span class="pl-c1"&gt;isPresented&lt;/span&gt;: $showPop, &lt;span class="pl-c1"&gt;content&lt;/span&gt;: {
                &lt;span class="pl-c1"&gt;ImagePage&lt;/span&gt;()
            })&lt;/pre&gt;&lt;/div&gt;
&lt;details&gt;
  &lt;summary&gt;View running results&lt;/summary&gt;
&lt;a target="_blank" rel="noopener noreferrer" href="images/example/Popover.png"&gt;&lt;img width="80%" src="images/example/Popover.png" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;/details&gt;
&lt;p&gt;&lt;a href="#Alert_D"&gt;&lt;g-emoji class="g-emoji" alias="top" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f51d.png"&gt;🔝&lt;/g-emoji&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content--about" class="anchor" aria-hidden="true" href="#-about"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;g-emoji class="g-emoji" alias="paperclip" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4ce.png"&gt;📎&lt;/g-emoji&gt; About&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The code involved in the above example is in this repository code. It is recommended to download and run the view.&lt;/li&gt;
&lt;li&gt;If you have better usage and suggestions about SwiftUI, look forward to sharing it!&lt;/li&gt;
&lt;li&gt;If there are omissions and errors in the examples in this article,  please create a &lt;a href="https://github.com/Jinxiansen/SwiftUI/issues/new"&gt;&lt;strong&gt;Issue&lt;/strong&gt;&lt;/a&gt; !&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-️-contacts" class="anchor" aria-hidden="true" href="#️-contacts"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;g-emoji class="g-emoji" alias="email" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2709.png"&gt;✉️&lt;/g-emoji&gt; Contacts&lt;/h2&gt;
&lt;p&gt;email : &lt;a href="mailto:hi@jinxiansen.com"&gt;hi@jinxiansen.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;微博 : &lt;a href="http://weibo.com/3205872327" rel="nofollow"&gt;@晋先森&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content--license" class="anchor" aria-hidden="true" href="#-license"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;g-emoji class="g-emoji" alias="page_facing_up" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4c4.png"&gt;📄&lt;/g-emoji&gt; License&lt;/h2&gt;
&lt;p&gt;SwiftUI is released under the &lt;a href="LICENSE"&gt;MIT license&lt;/a&gt;. See LICENSE for details.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>Jinxiansen</author><guid isPermaLink="false">https://github.com/Jinxiansen/SwiftUI</guid><pubDate>Mon, 18 Nov 2019 00:07:00 GMT</pubDate></item><item><title>Dimillian/MovieSwiftUI #8 in Swift, This week</title><link>https://github.com/Dimillian/MovieSwiftUI</link><description>&lt;p&gt;&lt;i&gt;SwiftUI &amp; Combine app using MovieDB API. With a custom Flux (Redux) implementation.&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="Readme.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-movieswiftui" class="anchor" aria-hidden="true" href="#movieswiftui"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;MovieSwiftUI&lt;/h1&gt;
&lt;p&gt;MovieSwiftUI is an application that uses the MovieDB API and is built with SwiftUI.
It demos some SwiftUI (&amp;amp; Combine) concepts. The goal is to make a real world application using SwiftUI only. It'll be updated with new features as they come to the SwiftUI framework.&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="images/MovieSwiftUI_promo_new.png?"&gt;&lt;img src="images/MovieSwiftUI_promo_new.png?" alt="App Image" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-architecture" class="anchor" aria-hidden="true" href="#architecture"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Architecture&lt;/h2&gt;
&lt;p&gt;MovieSwiftUI data flow is a subset and a custom implementation of the Flux part of &lt;a href="https://redux.js.org/" rel="nofollow"&gt;Redux&lt;/a&gt;.
It implement the State in an &lt;a href="https://developer.apple.com/documentation/combine/observableobject" rel="nofollow"&gt;ObservableObject&lt;/a&gt; as a @Published wrapped property, so changes are published whenever a dispatched action produces a new state after being reduced.
The state is injected as an environment object in the root view of the application, and is easily accessible anywhere in the application.
SwiftUI does all aspects of diffing on the render pass when your state changes. No need to be clever when extracting props from your State, they're simple dynamic vars at the view level. No matter your objects' graph size, SwiftUI speed depends on the complexity of your views hierarchy, not the complexity of your object graph.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-swiftui" class="anchor" aria-hidden="true" href="#swiftui"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;SwiftUI&lt;/h2&gt;
&lt;p&gt;MovieSwiftUI is in pure Swift UI, the goal is to see how far SwiftUI can go in its current implementation without using anything from UIKit (basically no UIView/UIViewController representable).&lt;/p&gt;
&lt;p&gt;It'll evolve with SwiftUI, every time Apple edits existing or adds new features to the framework.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-platforms" class="anchor" aria-hidden="true" href="#platforms"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Platforms&lt;/h2&gt;
&lt;p&gt;Currently MovieSwiftUI runs on iPhone, iPad, and macOS.&lt;/p&gt;
&lt;p&gt;Follow me on &lt;a href="https://twitter.com/dimillian" rel="nofollow"&gt;Twitter&lt;/a&gt; to get the latest update about features, code and SwiftUI tips and tricks!&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>Dimillian</author><guid isPermaLink="false">https://github.com/Dimillian/MovieSwiftUI</guid><pubDate>Mon, 18 Nov 2019 00:08:00 GMT</pubDate></item><item><title>marmelroy/PhoneNumberKit #9 in Swift, This week</title><link>https://github.com/marmelroy/PhoneNumberKit</link><description>&lt;p&gt;&lt;i&gt;A Swift framework for parsing, formatting and validating international phone numbers. Inspired by Google's libphonenumber.&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://cloud.githubusercontent.com/assets/889949/20864386/a1307950-b9ef-11e6-8a58-e9c5103738e7.png"&gt;&lt;img src="https://cloud.githubusercontent.com/assets/889949/20864386/a1307950-b9ef-11e6-8a58-e9c5103738e7.png" alt="PhoneNumberKit" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="http://cocoapods.org/?q=PhoneNumberKit" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/21382df54a2acfe5f5ef69beb2ea0f9d93dd11a9/68747470733a2f2f696d672e736869656c64732e696f2f636f636f61706f64732f702f50686f6e654e756d6265724b69742e7376673f6d61784167653d32353932303030" alt="Platform" data-canonical-src="https://img.shields.io/cocoapods/p/PhoneNumberKit.svg?maxAge=2592000" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://travis-ci.org/marmelroy/PhoneNumberKit" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/a95ff28120160df088553387283271be7956669a/68747470733a2f2f7472617669732d63692e6f72672f6d61726d656c726f792f50686f6e654e756d6265724b69742e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/marmelroy/PhoneNumberKit.svg?branch=master" style="max-width:100%;"&gt;&lt;/a&gt; &lt;a href="http://cocoapods.org/?q=PhoneNumberKit" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/fd0d43a2eaf31672e09e52f926e89b696b6371bc/687474703a2f2f696d672e736869656c64732e696f2f636f636f61706f64732f762f50686f6e654e756d6265724b69742e737667" alt="Version" data-canonical-src="http://img.shields.io/cocoapods/v/PhoneNumberKit.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://github.com/Carthage/Carthage"&gt;&lt;img src="https://camo.githubusercontent.com/3dc8a44a2c3f7ccd5418008d1295aae48466c141/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f43617274686167652d636f6d70617469626c652d3442433531442e7376673f7374796c653d666c6174" alt="Carthage compatible" data-canonical-src="https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-phonenumberkit" class="anchor" aria-hidden="true" href="#phonenumberkit"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;PhoneNumberKit&lt;/h1&gt;
&lt;p&gt;Swift 5.0 framework for parsing, formatting and validating international phone numbers.
Inspired by Google's libphonenumber.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/marmelroy/PhoneNumberKit/blob/master/Documentation/OXMIGRATIONGUIDE.md"&gt;Migrating from PhoneNumberKit 0.x? See the migration guide.&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-features" class="anchor" aria-hidden="true" href="#features"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Features&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Features&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;g-emoji class="g-emoji" alias="phone" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/260e.png"&gt;☎️&lt;/g-emoji&gt;&lt;/td&gt;
&lt;td&gt;Validate, normalize and extract the elements of any phone number string.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;g-emoji class="g-emoji" alias="100" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4af.png"&gt;💯&lt;/g-emoji&gt;&lt;/td&gt;
&lt;td&gt;Simple Swift syntax and a lightweight readable codebase.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;g-emoji class="g-emoji" alias="checkered_flag" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f3c1.png"&gt;🏁&lt;/g-emoji&gt;&lt;/td&gt;
&lt;td&gt;Fast. 1000 parses -&amp;gt; ~0.4 seconds.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;g-emoji class="g-emoji" alias="books" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4da.png"&gt;📚&lt;/g-emoji&gt;&lt;/td&gt;
&lt;td&gt;Best-in-class metadata from Google's libPhoneNumber project.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;g-emoji class="g-emoji" alias="trophy" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f3c6.png"&gt;🏆&lt;/g-emoji&gt;&lt;/td&gt;
&lt;td&gt;Fully tested to match the accuracy of Google's JavaScript implementation of libPhoneNumber.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;g-emoji class="g-emoji" alias="iphone" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4f1.png"&gt;📱&lt;/g-emoji&gt;&lt;/td&gt;
&lt;td&gt;Built for iOS. Automatically grabs the default region code from the phone.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;g-emoji class="g-emoji" alias="memo" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4dd.png"&gt;📝&lt;/g-emoji&gt;&lt;/td&gt;
&lt;td&gt;Editable (!) AsYouType formatter for UITextField.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;g-emoji class="g-emoji" alias="us" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f1fa-1f1f8.png"&gt;🇺🇸&lt;/g-emoji&gt;&lt;/td&gt;
&lt;td&gt;Convert country codes to country names and vice versa&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Usage&lt;/h2&gt;
&lt;p&gt;Import PhoneNumberKit at the top of the Swift file that will interact with a phone number.&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;PhoneNumberKit&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;All of your interactions with PhoneNumberKit happen through a PhoneNumberKit object. The first step you should take is to allocate one.&lt;/p&gt;
&lt;p&gt;A PhoneNumberKit instance is relatively expensive to allocate (it parses the metadata and keeps it in memory for the object's lifecycle), you should try and make sure PhoneNumberKit is allocated once and deallocated when no longer needed.&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; phoneNumberKit &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;PhoneNumberKit&lt;/span&gt;()&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To parse a string, use the parse function. The region code is automatically computed but can be overridden if needed. PhoneNumberKit automatically does a hard type validation to ensure that the object created is valid, this can be quite costly performance-wise and can be turned off if needed.&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;do&lt;/span&gt; {
    &lt;span class="pl-k"&gt;let&lt;/span&gt; phoneNumber &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; phoneNumberKit.&lt;span class="pl-c1"&gt;parse&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;+33 6 89 017383&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    &lt;span class="pl-k"&gt;let&lt;/span&gt; phoneNumberCustomDefaultRegion &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; phoneNumberKit.&lt;span class="pl-c1"&gt;parse&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;+44 20 7031 3000&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;withRegion&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;GB&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;ignoreType&lt;/span&gt;: &lt;span class="pl-c1"&gt;true&lt;/span&gt;)
}
&lt;span class="pl-k"&gt;catch&lt;/span&gt; {
    &lt;span class="pl-c1"&gt;print&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Generic parser error&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you need to parse and validate a large amount of numbers at once, PhoneNumberKit has a special, lightning fast array parsing function. The default region code is automatically computed but can be overridden if needed. Here you can also ignore hard type validation if it is not necessary. Invalid numbers are ignored in the resulting array.&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; rawNumberArray &lt;span class="pl-k"&gt;=&lt;/span&gt; [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;0291 12345678&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;+49 291 12345678&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;04134 1234&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;09123 12345&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]
&lt;span class="pl-k"&gt;let&lt;/span&gt; phoneNumbers &lt;span class="pl-k"&gt;=&lt;/span&gt; phoneNumberKit.&lt;span class="pl-c1"&gt;parse&lt;/span&gt;(rawNumberArray)
&lt;span class="pl-k"&gt;let&lt;/span&gt; phoneNumbersCustomDefaultRegion &lt;span class="pl-k"&gt;=&lt;/span&gt; phoneNumberKit.&lt;span class="pl-c1"&gt;parse&lt;/span&gt;(rawNumberArray, &lt;span class="pl-c1"&gt;withRegion&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;DE&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,  &lt;span class="pl-c1"&gt;ignoreType&lt;/span&gt;: &lt;span class="pl-c1"&gt;true&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;PhoneNumber objects are immutable Swift structs with the following properties:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;phoneNumber.&lt;span class="pl-smi"&gt;numberString&lt;/span&gt;
phoneNumber.&lt;span class="pl-smi"&gt;countryCode&lt;/span&gt;
phoneNumber.&lt;span class="pl-smi"&gt;nationalNumber&lt;/span&gt;
phoneNumber.&lt;span class="pl-smi"&gt;numberExtension&lt;/span&gt;
phoneNumber.&lt;span class="pl-smi"&gt;type&lt;/span&gt; &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; e.g Mobile or Fixed&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Formatting a PhoneNumber object into a string is also very easy&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;phoneNumberKit.&lt;span class="pl-c1"&gt;format&lt;/span&gt;(phoneNumber, &lt;span class="pl-c1"&gt;toType&lt;/span&gt;: .&lt;span class="pl-smi"&gt;e164&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; +61236618300&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;phoneNumberKit.&lt;span class="pl-c1"&gt;format&lt;/span&gt;(phoneNumber, &lt;span class="pl-c1"&gt;toType&lt;/span&gt;: .&lt;span class="pl-smi"&gt;international&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; +61 2 3661 8300&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;phoneNumberKit.&lt;span class="pl-c1"&gt;format&lt;/span&gt;(phoneNumber, &lt;span class="pl-c1"&gt;toType&lt;/span&gt;: .&lt;span class="pl-smi"&gt;national&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; (02) 3661 8300&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-phonenumbertextfield" class="anchor" aria-hidden="true" href="#phonenumbertextfield"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;PhoneNumberTextField&lt;/h2&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/7651280/67554038-e6512500-f751-11e9-93c9-9111e899a2ef.gif"&gt;&lt;img src="https://user-images.githubusercontent.com/7651280/67554038-e6512500-f751-11e9-93c9-9111e899a2ef.gif" alt="AsYouTypeFormatter" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;To use the AsYouTypeFormatter, just replace your UITextField with a PhoneNumberTextField (if you are using Interface Builder make sure the module field is set to PhoneNumberKit).&lt;/p&gt;
&lt;p&gt;You can customize your TextField UI in the following ways&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;withFlag&lt;/code&gt; will display the country code for the &lt;code&gt;currentRegion&lt;/code&gt;. The &lt;code&gt;flagButton&lt;/code&gt; is displayed in the &lt;code&gt;leftView&lt;/code&gt; of the text field with it's size set based off your text size.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;withExamplePlaceholder&lt;/code&gt; uses &lt;code&gt;attributedPlaceholder&lt;/code&gt; to show an example number for the &lt;code&gt;currentRegion&lt;/code&gt;. In addition when &lt;code&gt;withPrefix&lt;/code&gt; is set, the country code's prefix will automatically be inserted and removed when editing changes.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;PhoneNumberTextField automatically formats phone numbers and gives the user full editing capabilities. If you want to customize you can use the PartialFormatter directly. The default region code is automatically computed but can be overridden if needed (see the example given below).&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;MyGBTextField&lt;/span&gt;: &lt;span class="pl-e"&gt;PhoneNumberTextField &lt;/span&gt;{
    &lt;span class="pl-k"&gt;override&lt;/span&gt; &lt;span class="pl-k"&gt;var&lt;/span&gt; defaultRegion&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;String&lt;/span&gt; {
        &lt;span class="pl-k"&gt;get&lt;/span&gt; {
            &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;GB&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
        }
        &lt;span class="pl-k"&gt;set&lt;/span&gt; {} &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; exists for backward compatibility&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; textField &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;PhoneNumberTextField&lt;/span&gt;()

&lt;span class="pl-c1"&gt;PartialFormatter&lt;/span&gt;().&lt;span class="pl-c1"&gt;formatPartial&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;+336895555&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; +33 6 89 55 55&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can also query countries for a dialing code or the dialing code for a given country&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;phoneNumberKit.&lt;span class="pl-c1"&gt;countries&lt;/span&gt;(&lt;span class="pl-c1"&gt;withCode&lt;/span&gt;: &lt;span class="pl-c1"&gt;33&lt;/span&gt;)
phoneNumberKit.&lt;span class="pl-c1"&gt;countryCode&lt;/span&gt;(&lt;span class="pl-c1"&gt;for&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;FR&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-need-more-customization" class="anchor" aria-hidden="true" href="#need-more-customization"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Need more customization?&lt;/h2&gt;
&lt;p&gt;You can access the metadata powering PhoneNumberKit yourself, this enables you to program any behaviours as they may be implemented in PhoneNumberKit itself. It does mean you are exposed to the less polished interface of the underlying file format. If you program something you find useful please push it upstream!&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;phoneNumberKit.&lt;span class="pl-c1"&gt;metadata&lt;/span&gt;(&lt;span class="pl-c1"&gt;for&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;AU&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;span class="pl-k"&gt;?&lt;/span&gt;.&lt;span class="pl-smi"&gt;mobile&lt;/span&gt;&lt;span class="pl-k"&gt;?&lt;/span&gt;.&lt;span class="pl-smi"&gt;exampleNumber&lt;/span&gt; &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; 412345678&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-setting-up-with-carthage" class="anchor" aria-hidden="true" href="#setting-up-with-carthage"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Setting up with Carthage&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/Carthage/Carthage"&gt;Carthage&lt;/a&gt; is a decentralized dependency manager that automates the process of adding frameworks to your Cocoa application.&lt;/p&gt;
&lt;p&gt;You can install Carthage with &lt;a href="http://brew.sh/" rel="nofollow"&gt;Homebrew&lt;/a&gt; using the following command:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;$ brew update
$ brew install carthage&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To integrate PhoneNumberKit into your Xcode project using Carthage, specify it in your &lt;code&gt;Cartfile&lt;/code&gt;:&lt;/p&gt;
&lt;pre lang="ogdl"&gt;&lt;code&gt;github "marmelroy/PhoneNumberKit"
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-setting-up-with-cocoapods" class="anchor" aria-hidden="true" href="#setting-up-with-cocoapods"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Setting up with &lt;a href="http://cocoapods.org/?q=PhoneNumberKit" rel="nofollow"&gt;CocoaPods&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight highlight-source-ruby"&gt;&lt;pre&gt;source &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;https://github.com/CocoaPods/Specs.git&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;
pod &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;PhoneNumberKit&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;~&amp;gt; 3.1&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>marmelroy</author><guid isPermaLink="false">https://github.com/marmelroy/PhoneNumberKit</guid><pubDate>Mon, 18 Nov 2019 00:09:00 GMT</pubDate></item><item><title>fullstackio/FlappySwift #10 in Swift, This week</title><link>https://github.com/fullstackio/FlappySwift</link><description>&lt;p&gt;&lt;i&gt;swift implementation of flappy bird. More at fullstackedu.com&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body mkd" data-path="README.mkd"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;p&gt;&lt;a href="https://dashboard.buddybuild.com/apps/55dd277abbda430100397040/build/latest" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/71d08ee45fe8f71cfa709a6ffe4a3308e3599120/68747470733a2f2f64617368626f6172642e62756464796275696c642e636f6d2f6170692f737461747573496d6167653f61707049443d353564643237376162626461343330313030333937303430266272616e63683d6d6173746572266275696c643d6c6174657374" alt="BuddyBuild" data-canonical-src="https://dashboard.buddybuild.com/api/statusImage?appID=55dd277abbda430100397040&amp;amp;branch=master&amp;amp;build=latest" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-flappyswift" class="anchor" aria-hidden="true" href="#flappyswift"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;FlappySwift&lt;/h1&gt;
&lt;p&gt;An implementation of Flappy Bird in Swift for iOS 8.&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/867dfad61329bd77258f00d586b16476c7bc405a/687474703a2f2f692e696d6775722e636f6d2f314e4c6f546f552e676966"&gt;&lt;img src="https://camo.githubusercontent.com/867dfad61329bd77258f00d586b16476c7bc405a/687474703a2f2f692e696d6775722e636f6d2f314e4c6f546f552e676966" alt="FlappySwift" data-canonical-src="http://i.imgur.com/1NLoToU.gif" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-notes" class="anchor" aria-hidden="true" href="#notes"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Notes&lt;/h1&gt;
&lt;p&gt;We're launching a course &lt;a href="https://fullstackedu.com" rel="nofollow"&gt;Game Programming with Swift&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you are interested in early access to the course, head to &lt;a href="https://www.fullstackedu.com" rel="nofollow"&gt;fullstackedu.com&lt;/a&gt; and &lt;em&gt;enter in your email in the signup box at the bottom of the page&lt;/em&gt; to be notified of updates on the course itself.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-authors" class="anchor" aria-hidden="true" href="#authors"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Authors&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Nate Murray - &lt;a href="https://twitter.com/eigenjoy" rel="nofollow"&gt;@eigenjoy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Ari Lerner - &lt;a href="https://twitter.com/auser" rel="nofollow"&gt;@auser&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Based on code by &lt;a href="http://digitalbreed.com/2014/how-to-build-a-game-like-flappy-bird-with-xcode-and-sprite-kit" rel="nofollow"&gt;Matthias Gall&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>fullstackio</author><guid isPermaLink="false">https://github.com/fullstackio/FlappySwift</guid><pubDate>Mon, 18 Nov 2019 00:10:00 GMT</pubDate></item><item><title>groue/GRDB.swift #11 in Swift, This week</title><link>https://github.com/groue/GRDB.swift</link><description>&lt;p&gt;&lt;i&gt;A toolkit for SQLite databases, with a focus on application development&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-grdb-4-----" class="anchor" aria-hidden="true" href="#grdb-4-----"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;GRDB 4 &lt;a href="https://developer.apple.com/swift/" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/7deaf2fd442ddfbdc28a7dc3ce67f067a59618a0/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f73776966742d342e322d6f72616e67652e7376673f7374796c653d666c6174" alt="Swift 4.2" data-canonical-src="https://img.shields.io/badge/swift-4.2-orange.svg?style=flat" style="max-width:100%;"&gt;&lt;/a&gt; &lt;a href="https://developer.apple.com/swift/" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/c71f82ee3309bc14cc904fb1a628903768e1ac39/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f73776966742d352d6f72616e67652e7376673f7374796c653d666c6174" alt="Swift 5" data-canonical-src="https://img.shields.io/badge/swift-5-orange.svg?style=flat" style="max-width:100%;"&gt;&lt;/a&gt; &lt;a href="https://developer.apple.com/swift/" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/0b596e48758a762e966c41ea71cb4eeab1b3588c/68747470733a2f2f696d672e736869656c64732e696f2f636f636f61706f64732f702f475244422e73776966742e737667" alt="Platforms" data-canonical-src="https://img.shields.io/cocoapods/p/GRDB.swift.svg" style="max-width:100%;"&gt;&lt;/a&gt; &lt;a href="/LICENSE"&gt;&lt;img src="https://camo.githubusercontent.com/7436c9380b0004504c50be20057c7759b100fc5d/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f67726f75652f475244422e73776966742e7376673f6d61784167653d32353932303030" alt="License" data-canonical-src="https://img.shields.io/github/license/groue/GRDB.swift.svg?maxAge=2592000" style="max-width:100%;"&gt;&lt;/a&gt; &lt;a href="https://travis-ci.org/groue/GRDB.swift" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/7454ea95706b4541a19f4e7b2183204cc9c5529e/68747470733a2f2f7472617669732d63692e6f72672f67726f75652f475244422e73776966742e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/groue/GRDB.swift.svg?branch=master" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;h3&gt;&lt;a id="user-content-a-toolkit-for-sqlite-databases-with-a-focus-on-application-development" class="anchor" aria-hidden="true" href="#a-toolkit-for-sqlite-databases-with-a-focus-on-application-development"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;A toolkit for SQLite databases, with a focus on application development&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Latest release&lt;/strong&gt;: November 10, 2019 • version 4.6.1 • &lt;a href="CHANGELOG.md"&gt;CHANGELOG&lt;/a&gt; • &lt;a href="Documentation/GRDB3MigrationGuide.md"&gt;Migrating From GRDB 3 to GRDB 4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Requirements&lt;/strong&gt;: iOS 9.0+ / macOS 10.9+ / tvOS 9.0+ / watchOS 2.0+ • Swift 4.2+ / Xcode 10.0+&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Swift version&lt;/th&gt;
&lt;th&gt;GRDB version&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Swift 5&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;v4.6.1&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Swift 4.2&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;v4.6.1&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Swift 4.1&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/groue/GRDB.swift/tree/v3.7.0"&gt;v3.7.0&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Swift 4&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/groue/GRDB.swift/tree/v2.10.0"&gt;v2.10.0&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Swift 3.2&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/groue/GRDB.swift/tree/v1.3.0"&gt;v1.3.0&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Swift 3.1&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/groue/GRDB.swift/tree/v1.3.0"&gt;v1.3.0&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Swift 3&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/groue/GRDB.swift/tree/v1.0"&gt;v1.0&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Swift 2.3&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/groue/GRDB.swift/tree/v0.81.2"&gt;v0.81.2&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Swift 2.2&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/groue/GRDB.swift/tree/v0.80.2"&gt;v0.80.2&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Contact&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Release announcements and usage tips: follow &lt;a href="http://twitter.com/groue" rel="nofollow"&gt;@groue&lt;/a&gt; on Twitter.&lt;/li&gt;
&lt;li&gt;Report bugs in a &lt;a href="https://github.com/groue/GRDB.swift/issues/new"&gt;Github issue&lt;/a&gt;. Make sure you check the &lt;a href="https://github.com/groue/GRDB.swift/issues?q=is%3Aopen"&gt;existing issues&lt;/a&gt; first.&lt;/li&gt;
&lt;li&gt;A question? Looking for advice? Do you wonder how to contribute? Fancy a chat? Go to the &lt;a href="https://forums.swift.org/c/related-projects/grdb" rel="nofollow"&gt;GRDB forums&lt;/a&gt;, or open a &lt;a href="https://github.com/groue/GRDB.swift/issues/new"&gt;Github issue&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-what-is-this" class="anchor" aria-hidden="true" href="#what-is-this"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;What is this?&lt;/h2&gt;
&lt;p&gt;GRDB provides raw access to SQL and advanced SQLite features, because one sometimes enjoys a sharp tool. It has robust concurrency primitives, so that multi-threaded applications can efficiently use their databases. It grants your application models with persistence and fetching methods, so that you don't have to deal with SQL and raw database rows when you don't want to.&lt;/p&gt;
&lt;p&gt;Compared to &lt;a href="http://github.com/stephencelis/SQLite.swift"&gt;SQLite.swift&lt;/a&gt; or &lt;a href="http://github.com/ccgus/fmdb"&gt;FMDB&lt;/a&gt;, GRDB can spare you a lot of glue code. Compared to &lt;a href="https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/CoreData/" rel="nofollow"&gt;Core Data&lt;/a&gt; or &lt;a href="http://realm.io" rel="nofollow"&gt;Realm&lt;/a&gt;, it can simplify your multi-threaded applications.&lt;/p&gt;
&lt;p&gt;It comes with &lt;a href="#documentation"&gt;up-to-date documentation&lt;/a&gt;, &lt;a href="#general-guides--good-practices"&gt;general guides&lt;/a&gt;, and it is &lt;a href="https://github.com/groue/GRDB.swift/wiki/Performance"&gt;fast&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;See &lt;a href="Documentation/WhyAdoptGRDB.md"&gt;Why Adopt GRDB?&lt;/a&gt; if you are looking for your favorite database library.&lt;/p&gt;
&lt;hr&gt;
&lt;p align="center"&gt;
    &lt;a href="#features"&gt;Features&lt;/a&gt; •
    &lt;a href="#usage"&gt;Usage&lt;/a&gt; •
    &lt;a href="#installation"&gt;Installation&lt;/a&gt; •
    &lt;a href="#documentation"&gt;Documentation&lt;/a&gt; •
    &lt;a href="#demo-application"&gt;Demo Application&lt;/a&gt; •
    &lt;a href="#faq"&gt;FAQ&lt;/a&gt;
&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;&lt;a id="user-content-features" class="anchor" aria-hidden="true" href="#features"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Features&lt;/h2&gt;
&lt;p&gt;GRDB ships with:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sqlite-api"&gt;Access to raw SQL and SQLite&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#records"&gt;Records&lt;/a&gt;: Fetching and persistence methods for your custom structs and class hierarchies.&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-query-interface"&gt;Query Interface&lt;/a&gt;: A swift way to avoid the SQL language.&lt;/li&gt;
&lt;li&gt;&lt;a href="Documentation/AssociationsBasics.md"&gt;Associations&lt;/a&gt;: Relations and joins between record types.&lt;/li&gt;
&lt;li&gt;&lt;a href="#database-pools"&gt;WAL Mode Support&lt;/a&gt;: Extra performance for multi-threaded applications.&lt;/li&gt;
&lt;li&gt;&lt;a href="#migrations"&gt;Migrations&lt;/a&gt;: Transform your database as your application evolves.&lt;/li&gt;
&lt;li&gt;&lt;a href="#database-changes-observation"&gt;Database Observation&lt;/a&gt;: Observe database changes and transactions.&lt;/li&gt;
&lt;li&gt;&lt;a href="Documentation/FullTextSearch.md"&gt;Full-Text Search&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#encryption"&gt;Encryption&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="Documentation/CustomSQLiteBuilds.md"&gt;Support for Custom SQLite Builds&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Companion libraries that enhance and extend GRDB:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://github.com/groue/GRDBCombine"&gt;GRDBCombine&lt;/a&gt;: track database changes in a reactive way, with &lt;a href="https://developer.apple.com/documentation/combine" rel="nofollow"&gt;Combine&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://github.com/RxSwiftCommunity/RxGRDB"&gt;RxGRDB&lt;/a&gt;: track database changes in a reactive way, with &lt;a href="https://github.com/ReactiveX/RxSwift"&gt;RxSwift&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/groue/GRDBObjc"&gt;GRDBObjc&lt;/a&gt;: FMDB-compatible bindings to GRDB.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Usage&lt;/h2&gt;
&lt;details open=""&gt;
  &lt;summary&gt;Connect to an SQLite database&lt;/summary&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;GRDB&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Simple database connection&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; dbQueue &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;DatabaseQueue&lt;/span&gt;(&lt;span class="pl-c1"&gt;path&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/path/to/database.sqlite&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Enhanced multithreading based on SQLite's WAL mode&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; dbPool &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;DatabasePool&lt;/span&gt;(&lt;span class="pl-c1"&gt;path&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/path/to/database.sqlite&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;See &lt;a href="#database-connections"&gt;Database Connections&lt;/a&gt;&lt;/p&gt;
&lt;/details&gt;
&lt;details&gt;
    &lt;summary&gt;Execute SQL statements&lt;/summary&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; dbQueue.&lt;span class="pl-smi"&gt;write&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;execute&lt;/span&gt;(&lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"""&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-s"&gt;        CREATE TABLE place (&lt;/span&gt;
&lt;span class="pl-s"&gt;          id INTEGER PRIMARY KEY AUTOINCREMENT,&lt;/span&gt;
&lt;span class="pl-s"&gt;          title TEXT NOT NULL,&lt;/span&gt;
&lt;span class="pl-s"&gt;          favorite BOOLEAN NOT NULL DEFAULT 0,&lt;/span&gt;
&lt;span class="pl-s"&gt;          latitude DOUBLE NOT NULL,&lt;/span&gt;
&lt;span class="pl-s"&gt;          longitude DOUBLE NOT NULL)&lt;/span&gt;
&lt;span class="pl-s"&gt;        &lt;span class="pl-pds"&gt;"""&lt;/span&gt;&lt;/span&gt;)

    &lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;execute&lt;/span&gt;(&lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"""&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-s"&gt;        INSERT INTO place (title, favorite, latitude, longitude)&lt;/span&gt;
&lt;span class="pl-s"&gt;        VALUES (?, ?, ?, ?)&lt;/span&gt;
&lt;span class="pl-s"&gt;        &lt;span class="pl-pds"&gt;"""&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;arguments&lt;/span&gt;: [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Paris&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;true&lt;/span&gt;, &lt;span class="pl-c1"&gt;48.85341&lt;/span&gt;, &lt;span class="pl-c1"&gt;2.3488&lt;/span&gt;])
    
    &lt;span class="pl-k"&gt;let&lt;/span&gt; parisId &lt;span class="pl-k"&gt;=&lt;/span&gt; db.&lt;span class="pl-smi"&gt;lastInsertedRowID&lt;/span&gt;
    
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift 5 only&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;execute&lt;/span&gt;(&lt;span class="pl-c1"&gt;literal&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"""&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-s"&gt;        INSERT INTO place (title, favorite, latitude, longitude)&lt;/span&gt;
&lt;span class="pl-s"&gt;        VALUES (&lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Madrid&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;&lt;span class="pl-c1"&gt;true&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;&lt;span class="pl-c1"&gt;40.41678&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;&lt;span class="pl-c1"&gt;-3.70379&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;
&lt;span class="pl-s"&gt;        &lt;span class="pl-pds"&gt;"""&lt;/span&gt;&lt;/span&gt;)
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;See &lt;a href="#executing-updates"&gt;Executing Updates&lt;/a&gt;&lt;/p&gt;
&lt;/details&gt;
&lt;details&gt;
    &lt;summary&gt;Fetch database rows and values&lt;/summary&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; dbQueue.&lt;span class="pl-smi"&gt;read&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Fetch database rows&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;let&lt;/span&gt; rows &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Row.&lt;span class="pl-c1"&gt;fetchCursor&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SELECT * FROM place&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    &lt;span class="pl-k"&gt;while&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; row &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; rows.&lt;span class="pl-c1"&gt;next&lt;/span&gt;() {
        &lt;span class="pl-k"&gt;let&lt;/span&gt; title&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;String&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; row[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;title&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]
        &lt;span class="pl-k"&gt;let&lt;/span&gt; isFavorite&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;Bool&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; row[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;favorite&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]
        &lt;span class="pl-k"&gt;let&lt;/span&gt; coordinate &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;CLLocationCoordinate2D&lt;/span&gt;(
            &lt;span class="pl-c1"&gt;latitude&lt;/span&gt;: row[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;latitude&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;],
            &lt;span class="pl-c1"&gt;longitude&lt;/span&gt;: row[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;longitude&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;])
    }
    
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Fetch values&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;let&lt;/span&gt; placeCount &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;Int&lt;/span&gt;.&lt;span class="pl-c1"&gt;fetchOne&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SELECT COUNT(*) FROM place&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;span class="pl-k"&gt;!&lt;/span&gt; &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Int&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;let&lt;/span&gt; placeTitles &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;String&lt;/span&gt;.&lt;span class="pl-c1"&gt;fetchAll&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SELECT title FROM place&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; [String]&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;}

&lt;span class="pl-k"&gt;let&lt;/span&gt; placeCount &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; dbQueue.&lt;span class="pl-smi"&gt;read&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;Int&lt;/span&gt;.&lt;span class="pl-c1"&gt;fetchOne&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SELECT COUNT(*) FROM place&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;span class="pl-k"&gt;!&lt;/span&gt;
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;See &lt;a href="#fetch-queries"&gt;Fetch Queries&lt;/a&gt;&lt;/p&gt;
&lt;/details&gt;
&lt;details&gt;
    &lt;summary&gt;Store custom models aka "records"&lt;/summary&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;struct&lt;/span&gt; &lt;span class="pl-en"&gt;Place&lt;/span&gt; {
    &lt;span class="pl-k"&gt;var&lt;/span&gt; id&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;Int64&lt;/span&gt;&lt;span class="pl-k"&gt;?&lt;/span&gt;
    &lt;span class="pl-k"&gt;var&lt;/span&gt; title&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;String&lt;/span&gt;
    &lt;span class="pl-k"&gt;var&lt;/span&gt; isFavorite&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;Bool&lt;/span&gt;
    &lt;span class="pl-k"&gt;var&lt;/span&gt; coordinate&lt;span class="pl-k"&gt;:&lt;/span&gt; CLLocationCoordinate2D
}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; snip: turn Place into a "record" by adopting the protocols that&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; provide fetching and persistence methods.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;try&lt;/span&gt; dbQueue.&lt;span class="pl-smi"&gt;write&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Create database table&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;create&lt;/span&gt;(&lt;span class="pl-c1"&gt;table&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;place&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) { t &lt;span class="pl-k"&gt;in&lt;/span&gt;
        t.&lt;span class="pl-c1"&gt;autoIncrementedPrimaryKey&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;id&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
        t.&lt;span class="pl-c1"&gt;column&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;title&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, .&lt;span class="pl-c1"&gt;text&lt;/span&gt;).&lt;span class="pl-c1"&gt;notNull&lt;/span&gt;()
        t.&lt;span class="pl-c1"&gt;column&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;favorite&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, .&lt;span class="pl-smi"&gt;boolean&lt;/span&gt;).&lt;span class="pl-c1"&gt;notNull&lt;/span&gt;().&lt;span class="pl-c1"&gt;defaults&lt;/span&gt;(&lt;span class="pl-c1"&gt;to&lt;/span&gt;: &lt;span class="pl-c1"&gt;false&lt;/span&gt;)
        t.&lt;span class="pl-c1"&gt;column&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;longitude&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, .&lt;span class="pl-c1"&gt;double&lt;/span&gt;).&lt;span class="pl-c1"&gt;notNull&lt;/span&gt;()
        t.&lt;span class="pl-c1"&gt;column&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;latitude&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, .&lt;span class="pl-c1"&gt;double&lt;/span&gt;).&lt;span class="pl-c1"&gt;notNull&lt;/span&gt;()
    }
    
    &lt;span class="pl-k"&gt;var&lt;/span&gt; berlin &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;Place&lt;/span&gt;(
        &lt;span class="pl-c1"&gt;id&lt;/span&gt;: &lt;span class="pl-c1"&gt;nil&lt;/span&gt;,
        &lt;span class="pl-c1"&gt;title&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Berlin&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
        &lt;span class="pl-c1"&gt;isFavorite&lt;/span&gt;: &lt;span class="pl-c1"&gt;false&lt;/span&gt;,
        &lt;span class="pl-c1"&gt;coordinate&lt;/span&gt;: &lt;span class="pl-c1"&gt;CLLocationCoordinate2D&lt;/span&gt;(&lt;span class="pl-c1"&gt;latitude&lt;/span&gt;: &lt;span class="pl-c1"&gt;52.52437&lt;/span&gt;, &lt;span class="pl-c1"&gt;longitude&lt;/span&gt;: &lt;span class="pl-c1"&gt;13.41053&lt;/span&gt;))
    
    &lt;span class="pl-k"&gt;try&lt;/span&gt; berlin.&lt;span class="pl-c1"&gt;insert&lt;/span&gt;(db)
    berlin.&lt;span class="pl-smi"&gt;id&lt;/span&gt; &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; some value&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    
    berlin.&lt;span class="pl-smi"&gt;isFavorite&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;
    &lt;span class="pl-k"&gt;try&lt;/span&gt; berlin.&lt;span class="pl-c1"&gt;update&lt;/span&gt;(db)
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;See &lt;a href="#records"&gt;Records&lt;/a&gt;&lt;/p&gt;
&lt;/details&gt;
&lt;details&gt;
    &lt;summary&gt;Fetch records and values with the Swift query interface&lt;/summary&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; dbQueue.&lt;span class="pl-smi"&gt;read&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Place?&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;let&lt;/span&gt; paris &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Place.&lt;span class="pl-c1"&gt;fetchOne&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;key&lt;/span&gt;: &lt;span class="pl-c1"&gt;1&lt;/span&gt;)
    
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Place?&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;let&lt;/span&gt; berlin &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Place.&lt;span class="pl-c1"&gt;filter&lt;/span&gt;(&lt;span class="pl-c1"&gt;Column&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;title&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-k"&gt;==&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Berlin&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;).&lt;span class="pl-c1"&gt;fetchOne&lt;/span&gt;(db)
    
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; [Place]&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;let&lt;/span&gt; favoritePlaces &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Place
        .&lt;span class="pl-c1"&gt;filter&lt;/span&gt;(&lt;span class="pl-c1"&gt;Column&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;favorite&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-k"&gt;==&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;)
        .&lt;span class="pl-c1"&gt;order&lt;/span&gt;(&lt;span class="pl-c1"&gt;Column&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;title&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
        .&lt;span class="pl-c1"&gt;fetchAll&lt;/span&gt;(db)
    
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Int&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;let&lt;/span&gt; favoriteCount &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Place.&lt;span class="pl-c1"&gt;filter&lt;/span&gt;(&lt;span class="pl-c1"&gt;Column&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;favorite&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)).&lt;span class="pl-c1"&gt;fetchCount&lt;/span&gt;(db)
    
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; SQL is always welcome&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;let&lt;/span&gt; places &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Place.&lt;span class="pl-c1"&gt;fetchAll&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SELECT * FROM place&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;See the &lt;a href="#the-query-interface"&gt;Query Interface&lt;/a&gt;&lt;/p&gt;
&lt;/details&gt;
&lt;details&gt;
    &lt;summary&gt;Be notified of database changes&lt;/summary&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; observation &lt;span class="pl-k"&gt;=&lt;/span&gt; ValueObservation.&lt;span class="pl-smi"&gt;tracking&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;try&lt;/span&gt; Place.&lt;span class="pl-c1"&gt;fetchAll&lt;/span&gt;(db)
}
observation.&lt;span class="pl-c1"&gt;start&lt;/span&gt;(
    &lt;span class="pl-c1"&gt;in&lt;/span&gt;: dbQueue,
    &lt;span class="pl-c1"&gt;onError&lt;/span&gt;: { error &lt;span class="pl-k"&gt;in&lt;/span&gt;
        &lt;span class="pl-c1"&gt;print&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;fresh places could not be fetched&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    }
    onChange&lt;span class="pl-k"&gt;:&lt;/span&gt; { (&lt;span class="pl-c1"&gt;places&lt;/span&gt;: [Place]) &lt;span class="pl-k"&gt;in&lt;/span&gt;
        &lt;span class="pl-c1"&gt;print&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Places have changed.&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    })&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;See &lt;a href="#database-changes-observation"&gt;Database Changes Observation&lt;/a&gt;&lt;/p&gt;
&lt;/details&gt;
&lt;h1&gt;&lt;a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Documentation&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;GRDB runs on top of SQLite&lt;/strong&gt;: you should get familiar with the &lt;a href="http://www.sqlite.org/faq.html" rel="nofollow"&gt;SQLite FAQ&lt;/a&gt;. For general and detailed information, jump to the &lt;a href="http://www.sqlite.org/docs.html" rel="nofollow"&gt;SQLite Documentation&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-reference" class="anchor" aria-hidden="true" href="#reference"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Reference&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://groue.github.io/GRDB.swift/docs/4.6/index.html" rel="nofollow"&gt;GRDB Reference&lt;/a&gt; (generated by &lt;a href="https://github.com/realm/jazzy"&gt;Jazzy&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a id="user-content-getting-started" class="anchor" aria-hidden="true" href="#getting-started"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Getting Started&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#installation"&gt;Installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#demo-application"&gt;Demo Application&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#database-connections"&gt;Database Connections&lt;/a&gt;: Connect to SQLite databases&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a id="user-content-sqlite-and-sql" class="anchor" aria-hidden="true" href="#sqlite-and-sql"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;SQLite and SQL&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sqlite-api"&gt;SQLite API&lt;/a&gt;: The low-level SQLite API • &lt;a href="#executing-updates"&gt;executing updates&lt;/a&gt; • &lt;a href="#fetch-queries"&gt;fetch queries&lt;/a&gt; • &lt;a href="Documentation/SQLInterpolation.md"&gt;SQL Interpolation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a id="user-content-records-and-the-query-interface" class="anchor" aria-hidden="true" href="#records-and-the-query-interface"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Records and the Query Interface&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#records"&gt;Records&lt;/a&gt;: Fetching and persistence methods for your custom structs and class hierarchies&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-query-interface"&gt;Query Interface&lt;/a&gt;: A swift way to generate SQL • &lt;a href="#database-schema"&gt;table creation&lt;/a&gt; • &lt;a href="#requests"&gt;requests&lt;/a&gt; • &lt;a href="Documentation/AssociationsBasics.md"&gt;associations between record types&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a id="user-content-application-tools" class="anchor" aria-hidden="true" href="#application-tools"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Application Tools&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#migrations"&gt;Migrations&lt;/a&gt;: Transform your database as your application evolves.&lt;/li&gt;
&lt;li&gt;&lt;a href="Documentation/FullTextSearch.md"&gt;Full-Text Search&lt;/a&gt;: Perform efficient and customizable full-text searches.&lt;/li&gt;
&lt;li&gt;&lt;a href="#joined-queries-support"&gt;Joined Queries Support&lt;/a&gt;: Consume complex joined queries.&lt;/li&gt;
&lt;li&gt;&lt;a href="#database-changes-observation"&gt;Database Changes Observation&lt;/a&gt;: Observe database changes and transactions.&lt;/li&gt;
&lt;li&gt;&lt;a href="#encryption"&gt;Encryption&lt;/a&gt;: Encrypt your database with SQLCipher.&lt;/li&gt;
&lt;li&gt;&lt;a href="#backup"&gt;Backup&lt;/a&gt;: Dump the content of a database to another.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a id="user-content-good-to-know" class="anchor" aria-hidden="true" href="#good-to-know"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Good to Know&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#avoiding-sql-injection"&gt;Avoiding SQL Injection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#error-handling"&gt;Error Handling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#unicode"&gt;Unicode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#memory-management"&gt;Memory Management&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#data-protection"&gt;Data Protection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#concurrency"&gt;Concurrency&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#performance"&gt;Performance&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a id="user-content-general-guides--good-practices" class="anchor" aria-hidden="true" href="#general-guides--good-practices"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;General Guides &amp;amp; Good Practices&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;g-emoji class="g-emoji" alias="bulb" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a1.png"&gt;💡&lt;/g-emoji&gt; &lt;a href="Documentation/GoodPracticesForDesigningRecordTypes.md"&gt;Good Practices for Designing Record Types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;g-emoji class="g-emoji" alias="bulb" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a1.png"&gt;💡&lt;/g-emoji&gt; &lt;a href="Documentation/GRDB3MigrationGuide.md"&gt;Migrating From GRDB 3 to GRDB 4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;g-emoji class="g-emoji" alias="bulb" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a1.png"&gt;💡&lt;/g-emoji&gt; &lt;a href="https://github.com/groue/GRDB.swift/issues?q=is%3Aissue+label%3A%22best+practices%22"&gt;Issues tagged "best practices"&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;g-emoji class="g-emoji" alias="question" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2753.png"&gt;❓&lt;/g-emoji&gt; &lt;a href="https://github.com/groue/GRDB.swift/issues?utf8=%E2%9C%93&amp;amp;q=is%3Aissue%20label%3Aquestion"&gt;Issues tagged "question"&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;g-emoji class="g-emoji" alias="blue_book" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4d8.png"&gt;📘&lt;/g-emoji&gt; &lt;a href="Documentation/WhyAdoptGRDB.md"&gt;Why Adopt GRDB?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;g-emoji class="g-emoji" alias="blue_book" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4d8.png"&gt;📘&lt;/g-emoji&gt; &lt;a href="https://medium.com/@gwendal.roue/how-to-build-an-ios-application-with-sqlite-and-grdb-swift-d023a06c29b3" rel="nofollow"&gt;How to build an iOS application with SQLite and GRDB.swift&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;g-emoji class="g-emoji" alias="blue_book" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4d8.png"&gt;📘&lt;/g-emoji&gt; &lt;a href="https://medium.com/@gwendal.roue/four-different-ways-to-handle-sqlite-concurrency-db3bcc74d00e" rel="nofollow"&gt;Four different ways to handle SQLite concurrency&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;g-emoji class="g-emoji" alias="blue_book" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4d8.png"&gt;📘&lt;/g-emoji&gt; &lt;a href="https://hackernoon.com/unexpected-sqlite-with-swift-ddc6343bcbfc" rel="nofollow"&gt;Unexpected SQLite with Swift&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="#faq"&gt;FAQ&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="#sample-code"&gt;Sample Code&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installation&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;The installation procedures below have GRDB use the version of SQLite that ships with the target operating system.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;See &lt;a href="#encryption"&gt;Encryption&lt;/a&gt; for the installation procedure of GRDB with SQLCipher.&lt;/p&gt;
&lt;p&gt;See &lt;a href="Documentation/CustomSQLiteBuilds.md"&gt;Custom SQLite builds&lt;/a&gt; for the installation procedure of GRDB with a customized build of SQLite 3.28.0.&lt;/p&gt;
&lt;p&gt;See &lt;a href="Documentation/FullTextSearch.md#enabling-fts5-support"&gt;Enabling FTS5 Support&lt;/a&gt; for the installation procedure of GRDB with support for the FTS5 full-text engine.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-cocoapods" class="anchor" aria-hidden="true" href="#cocoapods"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;CocoaPods&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://cocoapods.org/" rel="nofollow"&gt;CocoaPods&lt;/a&gt; is a dependency manager for Xcode projects. To use GRDB with CocoaPods (version 1.2 or higher), specify in your &lt;code&gt;Podfile&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-ruby"&gt;&lt;pre&gt;pod &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;GRDB.swift&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;GRDB can be installed as a framework, or a static library.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-swift-package-manager" class="anchor" aria-hidden="true" href="#swift-package-manager"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Swift Package Manager&lt;/h2&gt;
&lt;p&gt;The &lt;a href="https://swift.org/package-manager/" rel="nofollow"&gt;Swift Package Manager&lt;/a&gt; automates the distribution of Swift code. To use GRDB with SPM, add a dependency to your &lt;code&gt;Package.swift&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; package &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;Package&lt;/span&gt;(
    &lt;span class="pl-c1"&gt;dependencies&lt;/span&gt;: [
        .&lt;span class="pl-c1"&gt;package&lt;/span&gt;(&lt;span class="pl-c1"&gt;url&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;https://github.com/groue/GRDB.swift.git&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-k"&gt;...&lt;/span&gt;)
    ]
)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that Linux is not currently supported.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-carthage" class="anchor" aria-hidden="true" href="#carthage"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Carthage&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/Carthage/Carthage"&gt;Carthage&lt;/a&gt; is &lt;strong&gt;unsupported&lt;/strong&gt;. For some context about this decision, see &lt;a href="https://github.com/groue/GRDB.swift/issues/433"&gt;#433&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-manually" class="anchor" aria-hidden="true" href="#manually"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Manually&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/groue/GRDB.swift/releases"&gt;Download&lt;/a&gt; a copy of GRDB, or clone its repository and make sure you checkout the latest tagged version.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Embed the &lt;code&gt;GRDB.xcodeproj&lt;/code&gt; project in your own project.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add the &lt;code&gt;GRDBOSX&lt;/code&gt;, &lt;code&gt;GRDBiOS&lt;/code&gt;, &lt;code&gt;GRDBtvOS&lt;/code&gt;, or &lt;code&gt;GRDBWatchOS&lt;/code&gt; target in the &lt;strong&gt;Target Dependencies&lt;/strong&gt; section of the &lt;strong&gt;Build Phases&lt;/strong&gt; tab of your application target (extension target for WatchOS).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add the &lt;code&gt;GRDB.framework&lt;/code&gt; from the targetted platform to the &lt;strong&gt;Embedded Binaries&lt;/strong&gt; section of the &lt;strong&gt;General&lt;/strong&gt;  tab of your application target (extension target for WatchOS).&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;g-emoji class="g-emoji" alias="bulb" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a1.png"&gt;💡&lt;/g-emoji&gt; &lt;strong&gt;Tip&lt;/strong&gt;: see the &lt;a href="Documentation/DemoApps/GRDBDemoiOS/README.md"&gt;Demo Application&lt;/a&gt; for an example of such integration.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;&lt;a id="user-content-demo-application" class="anchor" aria-hidden="true" href="#demo-application"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Demo Application&lt;/h1&gt;
&lt;p&gt;The repository comes with a &lt;a href="Documentation/DemoApps/GRDBDemoiOS/README.md"&gt;Demo Application&lt;/a&gt; that shows you:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;how to setup a database in an iOS app&lt;/li&gt;
&lt;li&gt;how to define a simple &lt;a href="#codable-records"&gt;Codable Record&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;how to track database changes with &lt;a href="#valueobservation"&gt;ValueObservation&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;a id="user-content-database-connections" class="anchor" aria-hidden="true" href="#database-connections"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Database Connections&lt;/h1&gt;
&lt;p&gt;GRDB provides two classes for accessing SQLite databases: &lt;code&gt;DatabaseQueue&lt;/code&gt; and &lt;code&gt;DatabasePool&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;GRDB&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Pick one:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; dbQueue &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;DatabaseQueue&lt;/span&gt;(&lt;span class="pl-c1"&gt;path&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/path/to/database.sqlite&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-k"&gt;let&lt;/span&gt; dbPool &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;DatabasePool&lt;/span&gt;(&lt;span class="pl-c1"&gt;path&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/path/to/database.sqlite&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The differences are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Database pools allow concurrent database accesses (this can improve the performance of multithreaded applications).&lt;/li&gt;
&lt;li&gt;Database pools open your SQLite database in the &lt;a href="https://www.sqlite.org/wal.html" rel="nofollow"&gt;WAL mode&lt;/a&gt; (unless read-only).&lt;/li&gt;
&lt;li&gt;Database queues support &lt;a href="https://www.sqlite.org/inmemorydb.html" rel="nofollow"&gt;in-memory databases&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;If you are not sure, choose DatabaseQueue.&lt;/strong&gt; You will always be able to switch to DatabasePool later.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#database-queues"&gt;Database Queues&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#database-pools"&gt;Database Pools&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-database-queues" class="anchor" aria-hidden="true" href="#database-queues"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Database Queues&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Open a database queue&lt;/strong&gt; with the path to a database file:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;GRDB&lt;/span&gt;

&lt;span class="pl-k"&gt;let&lt;/span&gt; dbQueue &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;DatabaseQueue&lt;/span&gt;(&lt;span class="pl-c1"&gt;path&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/path/to/database.sqlite&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-k"&gt;let&lt;/span&gt; inMemoryDBQueue &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;DatabaseQueue&lt;/span&gt;()&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;SQLite creates the database file if it does not already exist. The connection is closed when the database queue gets deallocated.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A database queue can be used from any thread.&lt;/strong&gt; The &lt;code&gt;write&lt;/code&gt; and &lt;code&gt;read&lt;/code&gt; methods are synchronous, and block the current thread until your database statements are executed in a protected dispatch queue:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Modify the database:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; dbQueue.&lt;span class="pl-smi"&gt;write&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;create&lt;/span&gt;(&lt;span class="pl-c1"&gt;table&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;place&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) { &lt;span class="pl-k"&gt;...&lt;/span&gt; }
    &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;Place&lt;/span&gt;(&lt;span class="pl-k"&gt;...&lt;/span&gt;).&lt;span class="pl-c1"&gt;insert&lt;/span&gt;(db)
}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Read values:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; dbQueue.&lt;span class="pl-smi"&gt;read&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;let&lt;/span&gt; places &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Place.&lt;span class="pl-c1"&gt;fetchAll&lt;/span&gt;(db)
    &lt;span class="pl-k"&gt;let&lt;/span&gt; placeCount &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Place.&lt;span class="pl-c1"&gt;fetchCount&lt;/span&gt;(db)
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Database access methods can return values:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; placeCount &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; dbQueue.&lt;span class="pl-smi"&gt;read&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;try&lt;/span&gt; Place.&lt;span class="pl-c1"&gt;fetchCount&lt;/span&gt;(db)
}

&lt;span class="pl-k"&gt;let&lt;/span&gt; newPlaceCount &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; dbQueue.&lt;span class="pl-smi"&gt;write&lt;/span&gt; { db &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;Int&lt;/span&gt; &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;Place&lt;/span&gt;(&lt;span class="pl-k"&gt;...&lt;/span&gt;).&lt;span class="pl-c1"&gt;insert&lt;/span&gt;(db)
    &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Place.&lt;span class="pl-c1"&gt;fetchCount&lt;/span&gt;(db)
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;A database queue serializes accesses to the database&lt;/strong&gt;, which means that there is never more than one thread that uses the database.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;When you don't need to modify the database, prefer the &lt;code&gt;read&lt;/code&gt; method. It prevents any modification to the database.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;write&lt;/code&gt; method wraps your database statements in a transaction that commits if and only if no error occurs. On the first unhandled error, all changes are reverted, the whole transaction is rollbacked, and the error is rethrown.&lt;/p&gt;
&lt;p&gt;When precise transaction handling is required, see &lt;a href="#transactions-and-savepoints"&gt;Transactions and Savepoints&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;A database queue needs your application to follow rules in order to deliver its safety guarantees.&lt;/strong&gt; Please refer to the &lt;a href="#concurrency"&gt;Concurrency&lt;/a&gt; chapter.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;g-emoji class="g-emoji" alias="bulb" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a1.png"&gt;💡&lt;/g-emoji&gt; &lt;strong&gt;Tip&lt;/strong&gt;: see the &lt;a href="Documentation/DemoApps/GRDBDemoiOS/README.md"&gt;Demo Application&lt;/a&gt; for a sample code that sets up a database queue on iOS.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;&lt;a id="user-content-databasequeue-configuration" class="anchor" aria-hidden="true" href="#databasequeue-configuration"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;DatabaseQueue Configuration&lt;/h3&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;var&lt;/span&gt; config &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;Configuration&lt;/span&gt;()
config.&lt;span class="pl-smi"&gt;readonly&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;
config.&lt;span class="pl-smi"&gt;foreignKeysEnabled&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt; &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Default is already true&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;config.&lt;span class="pl-smi"&gt;trace&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; { &lt;span class="pl-c1"&gt;print&lt;/span&gt;(&lt;span class="pl-c1"&gt;$0&lt;/span&gt;) }     &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Prints all SQL statements&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;config.&lt;span class="pl-smi"&gt;label&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;MyDatabase&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;      &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Useful when your app opens multiple databases&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;let&lt;/span&gt; dbQueue &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;DatabaseQueue&lt;/span&gt;(
    &lt;span class="pl-c1"&gt;path&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/path/to/database.sqlite&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
    &lt;span class="pl-c1"&gt;configuration&lt;/span&gt;: config)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;See &lt;a href="http://groue.github.io/GRDB.swift/docs/4.6/Structs/Configuration.html" rel="nofollow"&gt;Configuration&lt;/a&gt; for more details.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-database-pools" class="anchor" aria-hidden="true" href="#database-pools"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Database Pools&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;A database pool allows concurrent database accesses.&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;GRDB&lt;/span&gt;
&lt;span class="pl-k"&gt;let&lt;/span&gt; dbPool &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;DatabasePool&lt;/span&gt;(&lt;span class="pl-c1"&gt;path&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/path/to/database.sqlite&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;SQLite creates the database file if it does not already exist. The connection is closed when the database pool gets deallocated.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;g-emoji class="g-emoji" alias="point_up" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/261d.png"&gt;☝️&lt;/g-emoji&gt; &lt;strong&gt;Note&lt;/strong&gt;: unless read-only, a database pool opens your database in the SQLite "WAL mode". The WAL mode does not fit all situations. Please have a look at &lt;a href="https://www.sqlite.org/wal.html" rel="nofollow"&gt;https://www.sqlite.org/wal.html&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;A database pool can be used from any thread.&lt;/strong&gt; The &lt;code&gt;write&lt;/code&gt; and &lt;code&gt;read&lt;/code&gt; methods are synchronous, and block the current thread until your database statements are executed in a protected dispatch queue:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Modify the database:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; dbPool.&lt;span class="pl-smi"&gt;write&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;create&lt;/span&gt;(&lt;span class="pl-c1"&gt;table&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;place&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) { &lt;span class="pl-k"&gt;...&lt;/span&gt; }
    &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;Place&lt;/span&gt;(&lt;span class="pl-k"&gt;...&lt;/span&gt;).&lt;span class="pl-c1"&gt;insert&lt;/span&gt;(db)
}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Read values:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; dbPool.&lt;span class="pl-smi"&gt;read&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;let&lt;/span&gt; places &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Place.&lt;span class="pl-c1"&gt;fetchAll&lt;/span&gt;(db)
    &lt;span class="pl-k"&gt;let&lt;/span&gt; placeCount &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Place.&lt;span class="pl-c1"&gt;fetchCount&lt;/span&gt;(db)
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Database access methods can return values:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; placeCount &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; dbPool.&lt;span class="pl-smi"&gt;read&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;try&lt;/span&gt; Place.&lt;span class="pl-c1"&gt;fetchCount&lt;/span&gt;(db)
}

&lt;span class="pl-k"&gt;let&lt;/span&gt; newPlaceCount &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; dbPool.&lt;span class="pl-smi"&gt;write&lt;/span&gt; { db &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;Int&lt;/span&gt; &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;Place&lt;/span&gt;(&lt;span class="pl-k"&gt;...&lt;/span&gt;).&lt;span class="pl-c1"&gt;insert&lt;/span&gt;(db)
    &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Place.&lt;span class="pl-c1"&gt;fetchCount&lt;/span&gt;(db)
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Database pools allow several threads to access the database at the same time:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;When you don't need to modify the database, prefer the &lt;code&gt;read&lt;/code&gt; method, because several threads can perform reads in parallel.&lt;/p&gt;
&lt;p&gt;Reads are generally non-blocking, unless the maximum number of concurrent reads has been reached. In this case, a read has to wait for another read to complete. That maximum number can be &lt;a href="#databasepool-configuration"&gt;configured&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Reads are guaranteed an immutable view of the last committed state of the database, regardless of concurrent writes. This kind of isolation is called &lt;a href="https://sqlite.org/isolation.html" rel="nofollow"&gt;snapshot isolation&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Unlike reads, writes are serialized. There is never more than a single thread that is writing into the database.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;write&lt;/code&gt; method wraps your database statements in a transaction that commits if and only if no error occurs. On the first unhandled error, all changes are reverted, the whole transaction is rollbacked, and the error is rethrown.&lt;/p&gt;
&lt;p&gt;When precise transaction handling is required, see &lt;a href="#transactions-and-savepoints"&gt;Transactions and Savepoints&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Database pools can take &lt;a href="#database-snapshots"&gt;snapshots&lt;/a&gt; of the database.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;A database pool needs your application to follow rules in order to deliver its safety guarantees.&lt;/strong&gt; See the &lt;a href="#concurrency"&gt;Concurrency&lt;/a&gt; chapter for more details about database pools, how they differ from database queues, and advanced use cases.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;g-emoji class="g-emoji" alias="bulb" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a1.png"&gt;💡&lt;/g-emoji&gt; &lt;strong&gt;Tip&lt;/strong&gt;: see the &lt;a href="Documentation/DemoApps/GRDBDemoiOS/README.md"&gt;Demo Application&lt;/a&gt; for a sample code that sets up a database queue on iOS, and just replace DatabaseQueue with DatabasePool.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;&lt;a id="user-content-databasepool-configuration" class="anchor" aria-hidden="true" href="#databasepool-configuration"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;DatabasePool Configuration&lt;/h3&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;var&lt;/span&gt; config &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;Configuration&lt;/span&gt;()
config.&lt;span class="pl-smi"&gt;readonly&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;
config.&lt;span class="pl-smi"&gt;foreignKeysEnabled&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt; &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Default is already true&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;config.&lt;span class="pl-smi"&gt;trace&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; { &lt;span class="pl-c1"&gt;print&lt;/span&gt;(&lt;span class="pl-c1"&gt;$0&lt;/span&gt;) }     &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Prints all SQL statements&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;config.&lt;span class="pl-smi"&gt;label&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;MyDatabase&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;      &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Useful when your app opens multiple databases&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;config.&lt;span class="pl-smi"&gt;maximumReaderCount&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;10&lt;/span&gt;   &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; The default is 5&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;let&lt;/span&gt; dbPool &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;DatabasePool&lt;/span&gt;(
    &lt;span class="pl-c1"&gt;path&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/path/to/database.sqlite&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
    &lt;span class="pl-c1"&gt;configuration&lt;/span&gt;: config)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;See &lt;a href="http://groue.github.io/GRDB.swift/docs/4.6/Structs/Configuration.html" rel="nofollow"&gt;Configuration&lt;/a&gt; for more details.&lt;/p&gt;
&lt;p&gt;Database pools are more memory-hungry than database queues. See &lt;a href="#memory-management"&gt;Memory Management&lt;/a&gt; for more information.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-sqlite-api" class="anchor" aria-hidden="true" href="#sqlite-api"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;SQLite API&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;In this section of the documentation, we will talk SQL.&lt;/strong&gt; Jump to the &lt;a href="#the-query-interface"&gt;query interface&lt;/a&gt; if SQL is not your cup of tea.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#executing-updates"&gt;Executing Updates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#fetch-queries"&gt;Fetch Queries&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#fetching-methods"&gt;Fetching Methods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#row-queries"&gt;Row Queries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#value-queries"&gt;Value Queries&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#values"&gt;Values&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#data-and-memory-savings"&gt;Data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#date-and-datecomponents"&gt;Date and DateComponents&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#nsnumber-and-nsdecimalnumber"&gt;NSNumber and NSDecimalNumber&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#swift-enums"&gt;Swift enums&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#custom-value-types"&gt;Custom Value Types&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#transactions-and-savepoints"&gt;Transactions and Savepoints&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="Documentation/SQLInterpolation.md"&gt;SQL Interpolation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Advanced topics:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#prepared-statements"&gt;Prepared Statements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#custom-sql-functions-and-aggregates"&gt;Custom SQL Functions and Aggregates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#database-schema-introspection"&gt;Database Schema Introspection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#row-adapters"&gt;Row Adapters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#raw-sqlite-pointers"&gt;Raw SQLite Pointers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-executing-updates" class="anchor" aria-hidden="true" href="#executing-updates"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Executing Updates&lt;/h2&gt;
&lt;p&gt;Once granted with a &lt;a href="#database-connections"&gt;database connection&lt;/a&gt;, the &lt;code&gt;execute&lt;/code&gt; method executes the SQL statements that do not return any database row, such as &lt;code&gt;CREATE TABLE&lt;/code&gt;, &lt;code&gt;INSERT&lt;/code&gt;, &lt;code&gt;DELETE&lt;/code&gt;, &lt;code&gt;ALTER&lt;/code&gt;, etc.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; dbQueue.&lt;span class="pl-smi"&gt;write&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;execute&lt;/span&gt;(&lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"""&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-s"&gt;        CREATE TABLE player (&lt;/span&gt;
&lt;span class="pl-s"&gt;            id INTEGER PRIMARY KEY AUTOINCREMENT,&lt;/span&gt;
&lt;span class="pl-s"&gt;            name TEXT NOT NULL,&lt;/span&gt;
&lt;span class="pl-s"&gt;            score INT)&lt;/span&gt;
&lt;span class="pl-s"&gt;        &lt;span class="pl-pds"&gt;"""&lt;/span&gt;&lt;/span&gt;)
    
    &lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;execute&lt;/span&gt;(
        &lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;INSERT INTO player (name, score) VALUES (?, ?)&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
        &lt;span class="pl-c1"&gt;arguments&lt;/span&gt;: [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Barbara&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;1000&lt;/span&gt;])
    
    &lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;execute&lt;/span&gt;(
        &lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;UPDATE player SET score = :score WHERE id = :id&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
        &lt;span class="pl-c1"&gt;arguments&lt;/span&gt;: [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;score&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;1000&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;id&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;])
    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;?&lt;/code&gt; and colon-prefixed keys like &lt;code&gt;:score&lt;/code&gt; in the SQL query are the &lt;strong&gt;statements arguments&lt;/strong&gt;. You pass arguments with arrays or dictionaries, as in the example above. See &lt;a href="#values"&gt;Values&lt;/a&gt; for more information on supported arguments types (Bool, Int, String, Date, Swift enums, etc.), and &lt;a href="http://groue.github.io/GRDB.swift/docs/4.6/Structs/StatementArguments.html" rel="nofollow"&gt;StatementArguments&lt;/a&gt; for a detailed documentation of SQLite arguments.&lt;/p&gt;
&lt;p&gt;In Swift 5, you can embed query arguments right into your SQL queries, with the &lt;code&gt;literal&lt;/code&gt; argument label, as in the example below. See &lt;a href="Documentation/SQLInterpolation.md"&gt;SQL Interpolation&lt;/a&gt; for more details.&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift 5&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; dbQueue.&lt;span class="pl-smi"&gt;write&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;execute&lt;/span&gt;(&lt;span class="pl-c1"&gt;literal&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"""&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-s"&gt;        INSERT INTO player (name, score)&lt;/span&gt;
&lt;span class="pl-s"&gt;        VALUES (&lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;O'Brien&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;&lt;span class="pl-c1"&gt;550&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;
&lt;span class="pl-s"&gt;        &lt;span class="pl-pds"&gt;"""&lt;/span&gt;&lt;/span&gt;)
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Never ever embed values directly in your raw SQL strings&lt;/strong&gt;. See &lt;a href="#avoiding-sql-injection"&gt;Avoiding SQL Injection&lt;/a&gt; for more information:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; WRONG: don't embed values in raw SQL strings&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; id &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;123&lt;/span&gt;
&lt;span class="pl-k"&gt;let&lt;/span&gt; name &lt;span class="pl-k"&gt;=&lt;/span&gt; textField.&lt;span class="pl-c1"&gt;text&lt;/span&gt;
&lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;execute&lt;/span&gt;(
    &lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;UPDATE player SET name = '&lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;name&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;' WHERE id = &lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;id&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; CORRECT: use SQL Interpolation (Swift 5)&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;execute&lt;/span&gt;(
    &lt;span class="pl-c1"&gt;literal&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;UPDATE player SET name = &lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;name&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt; WHERE id = &lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;id&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; CORRECT: use arguments dictionary&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;execute&lt;/span&gt;(
    &lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;UPDATE player SET name = :name WHERE id = :id&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
    &lt;span class="pl-c1"&gt;arguments&lt;/span&gt;: [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;name&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; name, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;id&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; id])

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; CORRECT: use arguments array&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;execute&lt;/span&gt;(
    &lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;UPDATE player SET name = ? WHERE id = ?&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
    &lt;span class="pl-c1"&gt;arguments&lt;/span&gt;: [name, id])&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Join multiple statements with a semicolon&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;execute&lt;/span&gt;(&lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"""&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-s"&gt;    INSERT INTO player (name, score) VALUES (?, ?);&lt;/span&gt;
&lt;span class="pl-s"&gt;    INSERT INTO player (name, score) VALUES (?, ?);&lt;/span&gt;
&lt;span class="pl-s"&gt;    &lt;span class="pl-pds"&gt;"""&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;arguments&lt;/span&gt;: [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Arthur&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;750&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Barbara&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;1000&lt;/span&gt;])

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift 5&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;execute&lt;/span&gt;(&lt;span class="pl-c1"&gt;literal&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"""&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-s"&gt;    INSERT INTO player (name, score) VALUES (&lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Arthur&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;&lt;span class="pl-c1"&gt;750&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;);&lt;/span&gt;
&lt;span class="pl-s"&gt;    INSERT INTO player (name, score) VALUES (&lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Barbara&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;&lt;span class="pl-c1"&gt;1000&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;);&lt;/span&gt;
&lt;span class="pl-s"&gt;    &lt;span class="pl-pds"&gt;"""&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When you want to make sure that a single statement is executed, use &lt;a href="#prepared-statements"&gt;Prepared Statements&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;After an INSERT statement&lt;/strong&gt;, you can get the row ID of the inserted row:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;execute&lt;/span&gt;(
    &lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;INSERT INTO player (name, score) VALUES (?, ?)&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
    &lt;span class="pl-c1"&gt;arguments&lt;/span&gt;: [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Arthur&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;1000&lt;/span&gt;])
&lt;span class="pl-k"&gt;let&lt;/span&gt; playerId &lt;span class="pl-k"&gt;=&lt;/span&gt; db.&lt;span class="pl-smi"&gt;lastInsertedRowID&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Don't miss &lt;a href="#records"&gt;Records&lt;/a&gt;, that provide classic &lt;strong&gt;persistence methods&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;var&lt;/span&gt; player &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;Player&lt;/span&gt;(&lt;span class="pl-c1"&gt;name&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Arthur&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;score&lt;/span&gt;: &lt;span class="pl-c1"&gt;1000&lt;/span&gt;)
&lt;span class="pl-k"&gt;try&lt;/span&gt; player.&lt;span class="pl-c1"&gt;insert&lt;/span&gt;(db)
&lt;span class="pl-k"&gt;let&lt;/span&gt; playerId &lt;span class="pl-k"&gt;=&lt;/span&gt; player.&lt;span class="pl-smi"&gt;id&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-fetch-queries" class="anchor" aria-hidden="true" href="#fetch-queries"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Fetch Queries&lt;/h2&gt;
&lt;p&gt;&lt;a href="#database-connections"&gt;Database connections&lt;/a&gt; let you fetch database rows, plain values, and custom models aka "records".&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Rows&lt;/strong&gt; are the raw results of SQL queries:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; dbQueue.&lt;span class="pl-smi"&gt;read&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;if&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; row &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Row.&lt;span class="pl-c1"&gt;fetchOne&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SELECT * FROM wine WHERE id = ?&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;arguments&lt;/span&gt;: [&lt;span class="pl-c1"&gt;1&lt;/span&gt;]) {
        &lt;span class="pl-k"&gt;let&lt;/span&gt; name&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;String&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; row[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;name&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]
        &lt;span class="pl-k"&gt;let&lt;/span&gt; color&lt;span class="pl-k"&gt;:&lt;/span&gt; Color &lt;span class="pl-k"&gt;=&lt;/span&gt; row[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;color&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]
        &lt;span class="pl-c1"&gt;print&lt;/span&gt;(name, color)
    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Values&lt;/strong&gt; are the Bool, Int, String, Date, Swift enums, etc. stored in row columns:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; dbQueue.&lt;span class="pl-smi"&gt;read&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;let&lt;/span&gt; urls &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; URL.&lt;span class="pl-c1"&gt;fetchCursor&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SELECT url FROM wine&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    &lt;span class="pl-k"&gt;while&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; url &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; urls.&lt;span class="pl-c1"&gt;next&lt;/span&gt;() {
        &lt;span class="pl-c1"&gt;print&lt;/span&gt;(url)
    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Records&lt;/strong&gt; are your application objects that can initialize themselves from rows:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; wines &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; dbQueue.&lt;span class="pl-smi"&gt;read&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;try&lt;/span&gt; Wine.&lt;span class="pl-c1"&gt;fetchAll&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SELECT * FROM wine&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
}&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#fetching-methods"&gt;Fetching Methods&lt;/a&gt; and &lt;a href="#cursors"&gt;Cursors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#row-queries"&gt;Row Queries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#value-queries"&gt;Value Queries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#records"&gt;Records&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-fetching-methods" class="anchor" aria-hidden="true" href="#fetching-methods"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Fetching Methods&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Throughout GRDB&lt;/strong&gt;, you can always fetch &lt;em&gt;cursors&lt;/em&gt;, &lt;em&gt;arrays&lt;/em&gt;, or &lt;em&gt;single values&lt;/em&gt; of any fetchable type (database &lt;a href="#row-queries"&gt;row&lt;/a&gt;, simple &lt;a href="#value-queries"&gt;value&lt;/a&gt;, or custom &lt;a href="#records"&gt;record&lt;/a&gt;):&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; Row.&lt;span class="pl-c1"&gt;fetchCursor&lt;/span&gt;(&lt;span class="pl-k"&gt;...&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; A Cursor of Row&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; Row.&lt;span class="pl-c1"&gt;fetchAll&lt;/span&gt;(&lt;span class="pl-k"&gt;...&lt;/span&gt;)    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; [Row]&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; Row.&lt;span class="pl-c1"&gt;fetchOne&lt;/span&gt;(&lt;span class="pl-k"&gt;...&lt;/span&gt;)    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Row?&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;fetchCursor&lt;/code&gt; returns a &lt;strong&gt;&lt;a href="#cursors"&gt;cursor&lt;/a&gt;&lt;/strong&gt; over fetched values:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; rows &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Row.&lt;span class="pl-c1"&gt;fetchCursor&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SELECT ...&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; A Cursor of Row&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;fetchAll&lt;/code&gt; returns an &lt;strong&gt;array&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; players &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Player.&lt;span class="pl-c1"&gt;fetchAll&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SELECT ...&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; [Player]&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;fetchOne&lt;/code&gt; returns a &lt;strong&gt;single optional value&lt;/strong&gt;, and consumes a single database row (if any).&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; count &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;Int&lt;/span&gt;.&lt;span class="pl-c1"&gt;fetchOne&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SELECT COUNT(*) ...&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Int?&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-cursors" class="anchor" aria-hidden="true" href="#cursors"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Cursors&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Whenever you consume several rows from the database, you can fetch an Array, or a Cursor&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;fetchAll()&lt;/code&gt; method returns a regular Swift array, that you iterate like all other arrays:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; dbQueue.&lt;span class="pl-smi"&gt;read&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; [Player]&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;let&lt;/span&gt; players &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Player.&lt;span class="pl-c1"&gt;fetchAll&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SELECT ...&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    &lt;span class="pl-k"&gt;for&lt;/span&gt; player &lt;span class="pl-k"&gt;in&lt;/span&gt; players {
        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; use player&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Unlike arrays, cursors returned by &lt;code&gt;fetchCursor()&lt;/code&gt; load their results step after step:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; dbQueue.&lt;span class="pl-smi"&gt;read&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Cursor of Player&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;let&lt;/span&gt; players &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Player.&lt;span class="pl-c1"&gt;fetchCursor&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SELECT ...&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    &lt;span class="pl-k"&gt;while&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; player &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; players.&lt;span class="pl-c1"&gt;next&lt;/span&gt;() {
        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; use player&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Both arrays and cursors can iterate over database results. How do you choose one or the other? Look at the differences:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Cursors can not be used on any thread&lt;/strong&gt;: you must consume a cursor on the dispatch queue it was created in. Particularly, don't extract a cursor out of a database access method:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Wrong&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; cursor &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; dbQueue.&lt;span class="pl-smi"&gt;read&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;try&lt;/span&gt; Player.&lt;span class="pl-c1"&gt;fetchCursor&lt;/span&gt;(db, &lt;span class="pl-k"&gt;...&lt;/span&gt;)
}
&lt;span class="pl-k"&gt;while&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; player &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; cursor.&lt;span class="pl-c1"&gt;next&lt;/span&gt;() { &lt;span class="pl-k"&gt;...&lt;/span&gt; }&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Conversely, arrays may be consumed on any thread:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; OK&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; array &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; dbQueue.&lt;span class="pl-smi"&gt;read&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;try&lt;/span&gt; Player.&lt;span class="pl-c1"&gt;fetchAll&lt;/span&gt;(db, &lt;span class="pl-k"&gt;...&lt;/span&gt;)
}
&lt;span class="pl-k"&gt;for&lt;/span&gt; player &lt;span class="pl-k"&gt;in&lt;/span&gt; array { &lt;span class="pl-k"&gt;...&lt;/span&gt; }&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Cursors can be iterated only one time.&lt;/strong&gt; Arrays can be iterated many times.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Cursors iterate database results in a lazy fashion&lt;/strong&gt;, and don't consume much memory. Arrays contain copies of database values, and may take a lot of memory when there are many fetched results.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Cursors are granted with direct access to SQLite,&lt;/strong&gt; unlike arrays that have to take the time to copy database values. If you look after extra performance, you may prefer cursors over arrays.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Cursors adopt the &lt;a href="http://groue.github.io/GRDB.swift/docs/4.6/Protocols/Cursor.html" rel="nofollow"&gt;Cursor&lt;/a&gt; protocol, which looks a lot like standard &lt;a href="https://developer.apple.com/reference/swift/lazysequenceprotocol" rel="nofollow"&gt;lazy sequences&lt;/a&gt; of Swift.&lt;/strong&gt; As such, cursors come with many convenience methods: &lt;code&gt;compactMap&lt;/code&gt;, &lt;code&gt;contains&lt;/code&gt;, &lt;code&gt;dropFirst&lt;/code&gt;, &lt;code&gt;dropLast&lt;/code&gt;, &lt;code&gt;drop(while:)&lt;/code&gt;, &lt;code&gt;enumerated&lt;/code&gt;, &lt;code&gt;filter&lt;/code&gt;, &lt;code&gt;first&lt;/code&gt;, &lt;code&gt;flatMap&lt;/code&gt;, &lt;code&gt;forEach&lt;/code&gt;, &lt;code&gt;joined&lt;/code&gt;, &lt;code&gt;joined(separator:)&lt;/code&gt;, &lt;code&gt;max&lt;/code&gt;, &lt;code&gt;max(by:)&lt;/code&gt;, &lt;code&gt;min&lt;/code&gt;, &lt;code&gt;min(by:)&lt;/code&gt;, &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;prefix&lt;/code&gt;, &lt;code&gt;prefix(while:)&lt;/code&gt;, &lt;code&gt;reduce&lt;/code&gt;, &lt;code&gt;reduce(into:)&lt;/code&gt;, &lt;code&gt;suffix&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Prints all Github links&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; URL
    .&lt;span class="pl-c1"&gt;fetchCursor&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SELECT url FROM link&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    .&lt;span class="pl-c1"&gt;filter&lt;/span&gt; { url &lt;span class="pl-k"&gt;in&lt;/span&gt; url.&lt;span class="pl-smi"&gt;host&lt;/span&gt; &lt;span class="pl-k"&gt;==&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;github.com&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; }
    .&lt;span class="pl-c1"&gt;forEach&lt;/span&gt; { url &lt;span class="pl-k"&gt;in&lt;/span&gt; &lt;span class="pl-c1"&gt;print&lt;/span&gt;(url) }

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; An efficient cursor of coordinates:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; locations &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Row.
    .&lt;span class="pl-c1"&gt;fetchCursor&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SELECT latitude, longitude FROM place&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    .&lt;span class="pl-c1"&gt;map&lt;/span&gt; { row &lt;span class="pl-k"&gt;in&lt;/span&gt;
        &lt;span class="pl-c1"&gt;CLLocationCoordinate2D&lt;/span&gt;(&lt;span class="pl-c1"&gt;latitude&lt;/span&gt;: row[&lt;span class="pl-c1"&gt;0&lt;/span&gt;], &lt;span class="pl-c1"&gt;longitude&lt;/span&gt;: row[&lt;span class="pl-c1"&gt;1&lt;/span&gt;])
    }

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Turn cursors into arrays or sets:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; array &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;Array&lt;/span&gt;(cursor)
&lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-k"&gt;set&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;Set&lt;/span&gt;(cursor)&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Cursors are not Swift sequences.&lt;/strong&gt; That's because Swift sequences can't handle iteration errors, when reading SQLite results may fail at any time. SQL functions may throw errors. On iOS, &lt;a href="#data-protection"&gt;data protection&lt;/a&gt; may block access to the database file in the background. On macOS, your application users may mess with the file system.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Cursors require a little care&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Don't modify the results during a cursor iteration:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Undefined behavior&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;while&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; player &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; players.&lt;span class="pl-c1"&gt;next&lt;/span&gt;() {
    &lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;execute&lt;/span&gt;(&lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;DELETE ...&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
}&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Don't turn a cursor of &lt;code&gt;Row&lt;/code&gt; into an array. You would not get the distinct rows you expect. To get a array of rows, use &lt;code&gt;Row.fetchAll(...)&lt;/code&gt;. Generally speaking, make sure you copy a row whenever you extract it from a cursor for later use: &lt;code&gt;row.copy()&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you don't see, or don't care about the difference, use arrays. If you care about memory and performance, use cursors when appropriate.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-row-queries" class="anchor" aria-hidden="true" href="#row-queries"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Row Queries&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#fetching-rows"&gt;Fetching Rows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#column-values"&gt;Column Values&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#databasevalue"&gt;DatabaseValue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#rows-as-dictionaries"&gt;Rows as Dictionaries&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a id="user-content-fetching-rows" class="anchor" aria-hidden="true" href="#fetching-rows"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Fetching Rows&lt;/h4&gt;
&lt;p&gt;Fetch &lt;strong&gt;cursors&lt;/strong&gt; of rows, &lt;strong&gt;arrays&lt;/strong&gt;, or &lt;strong&gt;single&lt;/strong&gt; rows (see &lt;a href="#fetching-methods"&gt;fetching methods&lt;/a&gt;):&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; dbQueue.&lt;span class="pl-smi"&gt;read&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;try&lt;/span&gt; Row.&lt;span class="pl-c1"&gt;fetchCursor&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SELECT ...&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;arguments&lt;/span&gt;: &lt;span class="pl-k"&gt;...&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; A Cursor of Row&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;try&lt;/span&gt; Row.&lt;span class="pl-c1"&gt;fetchAll&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SELECT ...&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;arguments&lt;/span&gt;: &lt;span class="pl-k"&gt;...&lt;/span&gt;)    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; [Row]&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;try&lt;/span&gt; Row.&lt;span class="pl-c1"&gt;fetchOne&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SELECT ...&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;arguments&lt;/span&gt;: &lt;span class="pl-k"&gt;...&lt;/span&gt;)    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Row?&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    
    &lt;span class="pl-k"&gt;let&lt;/span&gt; rows &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Row.&lt;span class="pl-c1"&gt;fetchCursor&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SELECT * FROM wine&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    &lt;span class="pl-k"&gt;while&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; row &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; rows.&lt;span class="pl-c1"&gt;next&lt;/span&gt;() {
        &lt;span class="pl-k"&gt;let&lt;/span&gt; name&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;String&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; row[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;name&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]
        &lt;span class="pl-k"&gt;let&lt;/span&gt; color&lt;span class="pl-k"&gt;:&lt;/span&gt; Color &lt;span class="pl-k"&gt;=&lt;/span&gt; row[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;color&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]
        &lt;span class="pl-c1"&gt;print&lt;/span&gt;(name, color)
    }
}

&lt;span class="pl-k"&gt;let&lt;/span&gt; rows &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; dbQueue.&lt;span class="pl-smi"&gt;read&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;try&lt;/span&gt; Row.&lt;span class="pl-c1"&gt;fetchAll&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SELECT * FROM player&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Arguments are optional arrays or dictionaries that fill the positional &lt;code&gt;?&lt;/code&gt; and colon-prefixed keys like &lt;code&gt;:name&lt;/code&gt; in the query:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; rows &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Row.&lt;span class="pl-c1"&gt;fetchAll&lt;/span&gt;(db,
    &lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SELECT * FROM player WHERE name = ?&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
    &lt;span class="pl-c1"&gt;arguments&lt;/span&gt;: [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Arthur&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;])

&lt;span class="pl-k"&gt;let&lt;/span&gt; rows &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Row.&lt;span class="pl-c1"&gt;fetchAll&lt;/span&gt;(db,
    &lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SELECT * FROM player WHERE name = :name&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
    &lt;span class="pl-c1"&gt;arguments&lt;/span&gt;: [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;name&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Arthur&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;])&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;See &lt;a href="#values"&gt;Values&lt;/a&gt; for more information on supported arguments types (Bool, Int, String, Date, Swift enums, etc.), and &lt;a href="http://groue.github.io/GRDB.swift/docs/4.6/Structs/StatementArguments.html" rel="nofollow"&gt;StatementArguments&lt;/a&gt; for a detailed documentation of SQLite arguments.&lt;/p&gt;
&lt;p&gt;Unlike row arrays that contain copies of the database rows, row cursors are close to the SQLite metal, and require a little care:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;g-emoji class="g-emoji" alias="point_up" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/261d.png"&gt;☝️&lt;/g-emoji&gt; &lt;strong&gt;Don't turn a cursor of &lt;code&gt;Row&lt;/code&gt; into an array&lt;/strong&gt;. You would not get the distinct rows you expect. To get a array of rows, use &lt;code&gt;Row.fetchAll(...)&lt;/code&gt;. Generally speaking, make sure you copy a row whenever you extract it from a cursor for later use: &lt;code&gt;row.copy()&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;&lt;a id="user-content-column-values" class="anchor" aria-hidden="true" href="#column-values"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Column Values&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Read column values&lt;/strong&gt; by index or column name:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; name&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;String&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; row[&lt;span class="pl-c1"&gt;0&lt;/span&gt;]      &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; 0 is the leftmost column&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; name&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;String&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; row[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;name&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;] &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Leftmost matching column - lookup is case-insensitive&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; name&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;String&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; row[&lt;span class="pl-c1"&gt;Column&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;name&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)] &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Using query interface's Column&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Make sure to ask for an optional when the value may be NULL:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; name&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;String&lt;/span&gt;&lt;span class="pl-k"&gt;?&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; row[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;name&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;row[]&lt;/code&gt; subscript returns the type you ask for. See &lt;a href="#values"&gt;Values&lt;/a&gt; for more information on supported value types:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; bookCount&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;Int&lt;/span&gt;     &lt;span class="pl-k"&gt;=&lt;/span&gt; row[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;bookCount&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]
&lt;span class="pl-k"&gt;let&lt;/span&gt; bookCount64&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;Int64&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; row[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;bookCount&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]
&lt;span class="pl-k"&gt;let&lt;/span&gt; hasBooks&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;Bool&lt;/span&gt;     &lt;span class="pl-k"&gt;=&lt;/span&gt; row[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;bookCount&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;] &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; false when 0&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;let&lt;/span&gt; string&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;String&lt;/span&gt;     &lt;span class="pl-k"&gt;=&lt;/span&gt; row[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;date&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]      &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; "2015-09-11 18:14:15.123"&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; date&lt;span class="pl-k"&gt;:&lt;/span&gt; Date         &lt;span class="pl-k"&gt;=&lt;/span&gt; row[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;date&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]      &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Date&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;self&lt;/span&gt;.&lt;span class="pl-smi"&gt;date&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; row[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;date&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;] &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Depends on the type of the property.&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can also use the &lt;code&gt;as&lt;/code&gt; type casting operator:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;row[&lt;span class="pl-k"&gt;...&lt;/span&gt;] &lt;span class="pl-k"&gt;as&lt;/span&gt; &lt;span class="pl-c1"&gt;Int&lt;/span&gt;
row[&lt;span class="pl-k"&gt;...&lt;/span&gt;] &lt;span class="pl-k"&gt;as&lt;/span&gt; &lt;span class="pl-c1"&gt;Int&lt;/span&gt;&lt;span class="pl-k"&gt;?&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;g-emoji class="g-emoji" alias="warning" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/26a0.png"&gt;⚠️&lt;/g-emoji&gt; &lt;strong&gt;Warning&lt;/strong&gt;: avoid the &lt;code&gt;as!&lt;/code&gt; and &lt;code&gt;as?&lt;/code&gt; operators:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;if&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; int &lt;span class="pl-k"&gt;=&lt;/span&gt; row[&lt;span class="pl-k"&gt;...&lt;/span&gt;] &lt;span class="pl-k"&gt;as?&lt;/span&gt; &lt;span class="pl-c1"&gt;Int&lt;/span&gt; { &lt;span class="pl-k"&gt;...&lt;/span&gt; } &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; BAD - doesn't work&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;if&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; int &lt;span class="pl-k"&gt;=&lt;/span&gt; row[&lt;span class="pl-k"&gt;...&lt;/span&gt;] &lt;span class="pl-k"&gt;as&lt;/span&gt; &lt;span class="pl-c1"&gt;Int&lt;/span&gt;&lt;span class="pl-k"&gt;?&lt;/span&gt; { &lt;span class="pl-k"&gt;...&lt;/span&gt; } &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; GOOD&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;Generally speaking, you can extract the type you need, provided it can be converted from the underlying SQLite value:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Successful conversions include:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;All numeric SQLite values to all numeric Swift types, and Bool (zero is the only false boolean).&lt;/li&gt;
&lt;li&gt;Text SQLite values to Swift String.&lt;/li&gt;
&lt;li&gt;Blob SQLite values to Foundation Data.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;See &lt;a href="#values"&gt;Values&lt;/a&gt; for more information on supported types (Bool, Int, String, Date, Swift enums, etc.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;NULL returns nil.&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; row &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Row.&lt;span class="pl-c1"&gt;fetchOne&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SELECT NULL&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;span class="pl-k"&gt;!&lt;/span&gt;
row[&lt;span class="pl-c1"&gt;0&lt;/span&gt;] &lt;span class="pl-k"&gt;as&lt;/span&gt; &lt;span class="pl-c1"&gt;Int&lt;/span&gt;&lt;span class="pl-k"&gt;?&lt;/span&gt; &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; nil&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;row[&lt;span class="pl-c1"&gt;0&lt;/span&gt;] &lt;span class="pl-k"&gt;as&lt;/span&gt; &lt;span class="pl-c1"&gt;Int&lt;/span&gt;  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; fatal error: could not convert NULL to Int.&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There is one exception, though: the &lt;a href="#databasevalue"&gt;DatabaseValue&lt;/a&gt; type:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;row[&lt;span class="pl-c1"&gt;0&lt;/span&gt;] &lt;span class="pl-k"&gt;as&lt;/span&gt; DatabaseValue &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; DatabaseValue.null&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Missing columns return nil.&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; row &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Row.&lt;span class="pl-c1"&gt;fetchOne&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SELECT 'foo' AS foo&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;span class="pl-k"&gt;!&lt;/span&gt;
row[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;missing&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;] &lt;span class="pl-k"&gt;as&lt;/span&gt; &lt;span class="pl-c1"&gt;String&lt;/span&gt;&lt;span class="pl-k"&gt;?&lt;/span&gt; &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; nil&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;row[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;missing&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;] &lt;span class="pl-k"&gt;as&lt;/span&gt; &lt;span class="pl-c1"&gt;String&lt;/span&gt;  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; fatal error: no such column: missing&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can explicitly check for a column presence with the &lt;code&gt;hasColumn&lt;/code&gt; method.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Invalid conversions throw a fatal error.&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; row &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Row.&lt;span class="pl-c1"&gt;fetchOne&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SELECT 'Mom’s birthday'&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;span class="pl-k"&gt;!&lt;/span&gt;
row[&lt;span class="pl-c1"&gt;0&lt;/span&gt;] &lt;span class="pl-k"&gt;as&lt;/span&gt; &lt;span class="pl-c1"&gt;String&lt;/span&gt; &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; "Mom’s birthday"&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;row[&lt;span class="pl-c1"&gt;0&lt;/span&gt;] &lt;span class="pl-k"&gt;as&lt;/span&gt; Date&lt;span class="pl-k"&gt;?&lt;/span&gt;  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; fatal error: could not convert "Mom’s birthday" to Date.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;row[&lt;span class="pl-c1"&gt;0&lt;/span&gt;] &lt;span class="pl-k"&gt;as&lt;/span&gt; Date   &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; fatal error: could not convert "Mom’s birthday" to Date.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;let&lt;/span&gt; row &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Row.&lt;span class="pl-c1"&gt;fetchOne&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SELECT 256&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;span class="pl-k"&gt;!&lt;/span&gt;
row[&lt;span class="pl-c1"&gt;0&lt;/span&gt;] &lt;span class="pl-k"&gt;as&lt;/span&gt; &lt;span class="pl-c1"&gt;Int&lt;/span&gt;    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; 256&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;row[&lt;span class="pl-c1"&gt;0&lt;/span&gt;] &lt;span class="pl-k"&gt;as&lt;/span&gt; &lt;span class="pl-c1"&gt;UInt8&lt;/span&gt;&lt;span class="pl-k"&gt;?&lt;/span&gt; &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; fatal error: could not convert 256 to UInt8.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;row[&lt;span class="pl-c1"&gt;0&lt;/span&gt;] &lt;span class="pl-k"&gt;as&lt;/span&gt; &lt;span class="pl-c1"&gt;UInt8&lt;/span&gt;  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; fatal error: could not convert 256 to UInt8.&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Those conversion fatal errors can be avoided with the &lt;a href="#databasevalue"&gt;DatabaseValue&lt;/a&gt; type:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; row &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Row.&lt;span class="pl-c1"&gt;fetchOne&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SELECT 'Mom’s birthday'&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;span class="pl-k"&gt;!&lt;/span&gt;
&lt;span class="pl-k"&gt;let&lt;/span&gt; dbValue&lt;span class="pl-k"&gt;:&lt;/span&gt; DatabaseValue &lt;span class="pl-k"&gt;=&lt;/span&gt; row[&lt;span class="pl-c1"&gt;0&lt;/span&gt;]
&lt;span class="pl-k"&gt;if&lt;/span&gt; dbValue.&lt;span class="pl-smi"&gt;isNull&lt;/span&gt; {
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Handle NULL&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;} &lt;span class="pl-k"&gt;else&lt;/span&gt; &lt;span class="pl-k"&gt;if&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; date &lt;span class="pl-k"&gt;=&lt;/span&gt; Date.&lt;span class="pl-c1"&gt;fromDatabaseValue&lt;/span&gt;(dbValue) {
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Handle valid date&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;} &lt;span class="pl-k"&gt;else&lt;/span&gt; {
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Handle invalid date&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This extra verbosity is the consequence of having to deal with an untrusted database: you may consider fixing the content of your database instead. See &lt;a href="#fatal-errors"&gt;Fatal Errors&lt;/a&gt; for more information.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;SQLite has a weak type system, and provides &lt;a href="https://www.sqlite.org/c3ref/column_blob.html" rel="nofollow"&gt;convenience conversions&lt;/a&gt; that can turn String to Int, Double to Blob, etc.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;GRDB will sometimes let those conversions go through:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; rows &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Row.&lt;span class="pl-c1"&gt;fetchCursor&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SELECT '20 small cigars'&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-k"&gt;while&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; row &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; rows.&lt;span class="pl-c1"&gt;next&lt;/span&gt;() {
    row[&lt;span class="pl-c1"&gt;0&lt;/span&gt;] &lt;span class="pl-k"&gt;as&lt;/span&gt; &lt;span class="pl-c1"&gt;Int&lt;/span&gt;   &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; 20&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Don't freak out: those conversions did not prevent SQLite from becoming the immensely successful database engine you want to use. And GRDB adds safety checks described just above. You can also prevent those convenience conversions altogether by using the &lt;a href="#databasevalue"&gt;DatabaseValue&lt;/a&gt; type.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a id="user-content-databasevalue" class="anchor" aria-hidden="true" href="#databasevalue"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;DatabaseValue&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;DatabaseValue is an intermediate type between SQLite and your values, which gives information about the raw value stored in the database.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You get DatabaseValue just like other value types:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; dbValue&lt;span class="pl-k"&gt;:&lt;/span&gt; DatabaseValue &lt;span class="pl-k"&gt;=&lt;/span&gt; row[&lt;span class="pl-c1"&gt;0&lt;/span&gt;]
&lt;span class="pl-k"&gt;let&lt;/span&gt; dbValue&lt;span class="pl-k"&gt;:&lt;/span&gt; DatabaseValue&lt;span class="pl-k"&gt;?&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; row[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;name&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;] &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; nil if and only if column does not exist&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Check for NULL:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;dbValue.&lt;span class="pl-smi"&gt;isNull&lt;/span&gt; &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Bool&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; The stored value:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;dbValue.&lt;span class="pl-smi"&gt;storage&lt;/span&gt;.&lt;span class="pl-c1"&gt;value&lt;/span&gt; &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Int64, Double, String, Data, or nil&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; All the five storage classes supported by SQLite:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;switch&lt;/span&gt; dbValue.&lt;span class="pl-smi"&gt;storage&lt;/span&gt; {
&lt;span class="pl-k"&gt;case&lt;/span&gt; .&lt;span class="pl-smi"&gt;null&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt;                 &lt;span class="pl-c1"&gt;print&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;NULL&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-k"&gt;case&lt;/span&gt; .&lt;span class="pl-c1"&gt;int64&lt;/span&gt;(&lt;span class="pl-k"&gt;let&lt;/span&gt; int64)&lt;span class="pl-k"&gt;:&lt;/span&gt;     &lt;span class="pl-c1"&gt;print&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Int64: &lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;int64&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-k"&gt;case&lt;/span&gt; .&lt;span class="pl-c1"&gt;double&lt;/span&gt;(&lt;span class="pl-k"&gt;let&lt;/span&gt; double)&lt;span class="pl-k"&gt;:&lt;/span&gt;   &lt;span class="pl-c1"&gt;print&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Double: &lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;double&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-k"&gt;case&lt;/span&gt; .&lt;span class="pl-c1"&gt;string&lt;/span&gt;(&lt;span class="pl-k"&gt;let&lt;/span&gt; string)&lt;span class="pl-k"&gt;:&lt;/span&gt;   &lt;span class="pl-c1"&gt;print&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;String: &lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;string&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-k"&gt;case&lt;/span&gt; .&lt;span class="pl-c1"&gt;blob&lt;/span&gt;(&lt;span class="pl-k"&gt;let&lt;/span&gt; data)&lt;span class="pl-k"&gt;:&lt;/span&gt;       &lt;span class="pl-c1"&gt;print&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Data: &lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;data&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can extract regular &lt;a href="#values"&gt;values&lt;/a&gt; (Bool, Int, String, Date, Swift enums, etc.) from DatabaseValue with the &lt;a href="#custom-value-types"&gt;DatabaseValueConvertible.fromDatabaseValue()&lt;/a&gt; method:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; dbValue&lt;span class="pl-k"&gt;:&lt;/span&gt; DatabaseValue &lt;span class="pl-k"&gt;=&lt;/span&gt; row[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;bookCount&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]
&lt;span class="pl-k"&gt;let&lt;/span&gt; bookCount   &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;Int&lt;/span&gt;.&lt;span class="pl-c1"&gt;fromDatabaseValue&lt;/span&gt;(dbValue)   &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Int?&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; bookCount64 &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;Int64&lt;/span&gt;.&lt;span class="pl-c1"&gt;fromDatabaseValue&lt;/span&gt;(dbValue) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Int64?&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; hasBooks    &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;Bool&lt;/span&gt;.&lt;span class="pl-c1"&gt;fromDatabaseValue&lt;/span&gt;(dbValue)  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Bool?, false when 0&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;let&lt;/span&gt; dbValue&lt;span class="pl-k"&gt;:&lt;/span&gt; DatabaseValue &lt;span class="pl-k"&gt;=&lt;/span&gt; row[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;date&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]
&lt;span class="pl-k"&gt;let&lt;/span&gt; string &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;String&lt;/span&gt;.&lt;span class="pl-c1"&gt;fromDatabaseValue&lt;/span&gt;(dbValue)     &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; "2015-09-11 18:14:15.123"&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; date   &lt;span class="pl-k"&gt;=&lt;/span&gt; Date.&lt;span class="pl-c1"&gt;fromDatabaseValue&lt;/span&gt;(dbValue)       &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Date?&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;fromDatabaseValue&lt;/code&gt; returns nil for invalid conversions:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; row &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Row.&lt;span class="pl-c1"&gt;fetchOne&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SELECT 'Mom’s birthday'&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;span class="pl-k"&gt;!&lt;/span&gt;
&lt;span class="pl-k"&gt;let&lt;/span&gt; dbValue&lt;span class="pl-k"&gt;:&lt;/span&gt; DatabaseValue &lt;span class="pl-k"&gt;=&lt;/span&gt; row[&lt;span class="pl-c1"&gt;0&lt;/span&gt;]
&lt;span class="pl-k"&gt;let&lt;/span&gt; string &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;String&lt;/span&gt;.&lt;span class="pl-c1"&gt;fromDatabaseValue&lt;/span&gt;(dbValue) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; "Mom’s birthday"&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; int    &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;Int&lt;/span&gt;.&lt;span class="pl-c1"&gt;fromDatabaseValue&lt;/span&gt;(dbValue)    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; nil&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; date   &lt;span class="pl-k"&gt;=&lt;/span&gt; Date.&lt;span class="pl-c1"&gt;fromDatabaseValue&lt;/span&gt;(dbValue)   &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; nil&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content-rows-as-dictionaries" class="anchor" aria-hidden="true" href="#rows-as-dictionaries"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Rows as Dictionaries&lt;/h4&gt;
&lt;p&gt;Row adopts the standard &lt;a href="https://developer.apple.com/documentation/swift/randomaccesscollection" rel="nofollow"&gt;RandomAccessCollection&lt;/a&gt; protocol, and can be seen as a dictionary of &lt;a href="#databasevalue"&gt;DatabaseValue&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; All the (columnName, dbValue) tuples, from left to right:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;for&lt;/span&gt; (columnName, dbValue) &lt;span class="pl-k"&gt;in&lt;/span&gt; row {
    &lt;span class="pl-k"&gt;...&lt;/span&gt;
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;You can build rows from dictionaries&lt;/strong&gt; (standard Swift dictionaries and NSDictionary). See &lt;a href="#values"&gt;Values&lt;/a&gt; for more information on supported types:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; row&lt;span class="pl-k"&gt;:&lt;/span&gt; Row &lt;span class="pl-k"&gt;=&lt;/span&gt; [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;name&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;foo&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;date&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;]
&lt;span class="pl-k"&gt;let&lt;/span&gt; row &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;Row&lt;/span&gt;([&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;name&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;foo&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;date&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;])
&lt;span class="pl-k"&gt;let&lt;/span&gt; row &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;Row&lt;/span&gt;(&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;/*&lt;/span&gt; [AnyHashable: Any] &lt;span class="pl-c"&gt;*/&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; nil if invalid dictionary&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Yet rows are not real dictionaries: they may contain duplicate columns:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; row &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Row.&lt;span class="pl-c1"&gt;fetchOne&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SELECT 1 AS foo, 2 AS foo&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;span class="pl-k"&gt;!&lt;/span&gt;
row.&lt;span class="pl-smi"&gt;columnNames&lt;/span&gt;    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; ["foo", "foo"]&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;row.&lt;span class="pl-smi"&gt;databaseValues&lt;/span&gt; &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; [1, 2]&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;row[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;foo&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]         &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; 1 (leftmost matching column)&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;for&lt;/span&gt; (columnName, dbValue) &lt;span class="pl-k"&gt;in&lt;/span&gt; row { &lt;span class="pl-k"&gt;...&lt;/span&gt; } &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; ("foo", 1), ("foo", 2)&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;When you build a dictionary from a row&lt;/strong&gt;, you have to disambiguate identical columns, and choose how to present database values. For example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A &lt;code&gt;[String: DatabaseValue]&lt;/code&gt; dictionary that keeps leftmost value in case of duplicated column name:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; dict &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;Dictionary&lt;/span&gt;(row, &lt;span class="pl-c1"&gt;uniquingKeysWith&lt;/span&gt;: { (left, &lt;span class="pl-c1"&gt;_&lt;/span&gt;) &lt;span class="pl-k"&gt;in&lt;/span&gt; left })&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A &lt;code&gt;[String: AnyObject]&lt;/code&gt; dictionary which keeps rightmost value in case of duplicated column name. This dictionary is identical to FMResultSet's resultDictionary from FMDB. It contains NSNull values for null columns, and can be shared with Objective-C:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; dict &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;Dictionary&lt;/span&gt;(
    row.&lt;span class="pl-c1"&gt;map&lt;/span&gt; { (column, dbValue) &lt;span class="pl-k"&gt;in&lt;/span&gt;
        (column, dbValue.&lt;span class="pl-smi"&gt;storage&lt;/span&gt;.&lt;span class="pl-c1"&gt;value&lt;/span&gt; &lt;span class="pl-k"&gt;as&lt;/span&gt; &lt;span class="pl-c1"&gt;AnyObject&lt;/span&gt;)
    },
    &lt;span class="pl-c1"&gt;uniquingKeysWith&lt;/span&gt;: { (&lt;span class="pl-c1"&gt;_&lt;/span&gt;, right) &lt;span class="pl-k"&gt;in&lt;/span&gt; right })&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A &lt;code&gt;[String: Any]&lt;/code&gt; dictionary that can feed, for example, JSONSerialization:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; dict &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;Dictionary&lt;/span&gt;(
    row.&lt;span class="pl-c1"&gt;map&lt;/span&gt; { (column, dbValue) &lt;span class="pl-k"&gt;in&lt;/span&gt;
        (column, dbValue.&lt;span class="pl-smi"&gt;storage&lt;/span&gt;.&lt;span class="pl-c1"&gt;value&lt;/span&gt;)
    },
    &lt;span class="pl-c1"&gt;uniquingKeysWith&lt;/span&gt;: { (left, &lt;span class="pl-c1"&gt;_&lt;/span&gt;) &lt;span class="pl-k"&gt;in&lt;/span&gt; left })&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;See the documentation of &lt;a href="https://developer.apple.com/documentation/swift/dictionary/2892961-init" rel="nofollow"&gt;&lt;code&gt;Dictionary.init(_:uniquingKeysWith:)&lt;/code&gt;&lt;/a&gt; for more information.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-value-queries" class="anchor" aria-hidden="true" href="#value-queries"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Value Queries&lt;/h3&gt;
&lt;p&gt;Instead of rows, you can directly fetch &lt;strong&gt;&lt;a href="#values"&gt;values&lt;/a&gt;&lt;/strong&gt;. Like rows, fetch them as &lt;strong&gt;cursors&lt;/strong&gt;, &lt;strong&gt;arrays&lt;/strong&gt;, or &lt;strong&gt;single&lt;/strong&gt; values (see &lt;a href="#fetching-methods"&gt;fetching methods&lt;/a&gt;). Values are extracted from the leftmost column of the SQL queries:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; dbQueue.&lt;span class="pl-smi"&gt;read&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;Int&lt;/span&gt;.&lt;span class="pl-c1"&gt;fetchCursor&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SELECT ...&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;arguments&lt;/span&gt;: &lt;span class="pl-k"&gt;...&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; A Cursor of Int&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;Int&lt;/span&gt;.&lt;span class="pl-c1"&gt;fetchAll&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SELECT ...&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;arguments&lt;/span&gt;: &lt;span class="pl-k"&gt;...&lt;/span&gt;)    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; [Int]&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;Int&lt;/span&gt;.&lt;span class="pl-c1"&gt;fetchOne&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SELECT ...&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;arguments&lt;/span&gt;: &lt;span class="pl-k"&gt;...&lt;/span&gt;)    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Int?&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; When database may contain NULL:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;Optional&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-c1"&gt;Int&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;.&lt;span class="pl-c1"&gt;fetchCursor&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SELECT ...&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;arguments&lt;/span&gt;: &lt;span class="pl-k"&gt;...&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; A Cursor of Int?&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;Optional&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-c1"&gt;Int&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;.&lt;span class="pl-c1"&gt;fetchAll&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SELECT ...&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;arguments&lt;/span&gt;: &lt;span class="pl-k"&gt;...&lt;/span&gt;)    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; [Int?]&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;}

&lt;span class="pl-k"&gt;let&lt;/span&gt; playerCount &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; dbQueue.&lt;span class="pl-smi"&gt;read&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;Int&lt;/span&gt;.&lt;span class="pl-c1"&gt;fetchOne&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SELECT COUNT(*) FROM player&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;span class="pl-k"&gt;!&lt;/span&gt;
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;fetchOne&lt;/code&gt; returns an optional value which is nil in two cases: either the SELECT statement yielded no row, or one row with a NULL value.&lt;/p&gt;
&lt;p&gt;There are many supported value types (Bool, Int, String, Date, Swift enums, etc.). See &lt;a href="#values"&gt;Values&lt;/a&gt; for more information:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; count &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;Int&lt;/span&gt;.&lt;span class="pl-c1"&gt;fetchOne&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SELECT COUNT(*) FROM player&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;span class="pl-k"&gt;!&lt;/span&gt; &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Int&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; urls &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; URL.&lt;span class="pl-c1"&gt;fetchAll&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SELECT url FROM link&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)          &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; [URL]&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-values" class="anchor" aria-hidden="true" href="#values"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Values&lt;/h2&gt;
&lt;p&gt;GRDB ships with built-in support for the following value types:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Swift Standard Library&lt;/strong&gt;: Bool, Double, Float, all signed and unsigned integer types, String, &lt;a href="#swift-enums"&gt;Swift enums&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Foundation&lt;/strong&gt;: &lt;a href="#data-and-memory-savings"&gt;Data&lt;/a&gt;, &lt;a href="#date-and-datecomponents"&gt;Date&lt;/a&gt;, &lt;a href="#date-and-datecomponents"&gt;DateComponents&lt;/a&gt;, NSNull, &lt;a href="#nsnumber-and-nsdecimalnumber"&gt;NSNumber&lt;/a&gt;, NSString, URL, &lt;a href="#uuid"&gt;UUID&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;CoreGraphics&lt;/strong&gt;: CGFloat.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="#databasevalue"&gt;DatabaseValue&lt;/a&gt;&lt;/strong&gt;, the type which gives information about the raw value stored in the database.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Full-Text Patterns&lt;/strong&gt;: &lt;a href="Documentation/FullTextSearch.md#fts3pattern"&gt;FTS3Pattern&lt;/a&gt; and &lt;a href="Documentation/FullTextSearch.md#fts5pattern"&gt;FTS5Pattern&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Generally speaking, all types that adopt the &lt;a href="#custom-value-types"&gt;DatabaseValueConvertible&lt;/a&gt; protocol.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Values can be used as &lt;a href="http://groue.github.io/GRDB.swift/docs/4.6/Structs/StatementArguments.html" rel="nofollow"&gt;statement arguments&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; url&lt;span class="pl-k"&gt;:&lt;/span&gt; URL &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;...&lt;/span&gt;
&lt;span class="pl-k"&gt;let&lt;/span&gt; verified&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;Bool&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;...&lt;/span&gt;
&lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;execute&lt;/span&gt;(
    &lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;INSERT INTO link (url, verified) VALUES (?, ?)&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
    &lt;span class="pl-c1"&gt;arguments&lt;/span&gt;: [url, verified])&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Values can be &lt;a href="#column-values"&gt;extracted from rows&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; rows &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Row.&lt;span class="pl-c1"&gt;fetchCursor&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SELECT * FROM link&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-k"&gt;while&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; row &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; rows.&lt;span class="pl-c1"&gt;next&lt;/span&gt;() {
    &lt;span class="pl-k"&gt;let&lt;/span&gt; url&lt;span class="pl-k"&gt;:&lt;/span&gt; URL &lt;span class="pl-k"&gt;=&lt;/span&gt; row[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;url&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]
    &lt;span class="pl-k"&gt;let&lt;/span&gt; verified&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;Bool&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; row[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;verified&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Values can be &lt;a href="#value-queries"&gt;directly fetched&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; urls &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; URL.&lt;span class="pl-c1"&gt;fetchAll&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SELECT url FROM link&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; [URL]&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Use values in &lt;a href="#records"&gt;Records&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;struct&lt;/span&gt; &lt;span class="pl-en"&gt;Link&lt;/span&gt;: &lt;span class="pl-e"&gt;FetchableRecord &lt;/span&gt;{
    &lt;span class="pl-k"&gt;var&lt;/span&gt; url&lt;span class="pl-k"&gt;:&lt;/span&gt; URL
    &lt;span class="pl-k"&gt;var&lt;/span&gt; isVerified&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;Bool&lt;/span&gt;
    
    &lt;span class="pl-k"&gt;init&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-en"&gt;row&lt;/span&gt;&lt;/span&gt;: Row) {
        url &lt;span class="pl-k"&gt;=&lt;/span&gt; row[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;url&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]
        isVerified &lt;span class="pl-k"&gt;=&lt;/span&gt; row[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;verified&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]
    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Use values in the &lt;a href="#the-query-interface"&gt;query interface&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; url&lt;span class="pl-k"&gt;:&lt;/span&gt; URL &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;...&lt;/span&gt;
&lt;span class="pl-k"&gt;let&lt;/span&gt; link &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Link.&lt;span class="pl-c1"&gt;filter&lt;/span&gt;(&lt;span class="pl-c1"&gt;Column&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;url&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-k"&gt;==&lt;/span&gt; url).&lt;span class="pl-c1"&gt;fetchOne&lt;/span&gt;(db)&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-data-and-memory-savings" class="anchor" aria-hidden="true" href="#data-and-memory-savings"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Data (and Memory Savings)&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Data&lt;/strong&gt; suits the BLOB SQLite columns. It can be stored and fetched from the database just like other &lt;a href="#values"&gt;values&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; rows &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Row.&lt;span class="pl-c1"&gt;fetchCursor&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SELECT data, ...&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-k"&gt;while&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; row &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; rows.&lt;span class="pl-c1"&gt;next&lt;/span&gt;() {
    &lt;span class="pl-k"&gt;let&lt;/span&gt; data&lt;span class="pl-k"&gt;:&lt;/span&gt; Data &lt;span class="pl-k"&gt;=&lt;/span&gt; row[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;data&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;At each step of the request iteration, the &lt;code&gt;row[]&lt;/code&gt; subscript creates &lt;em&gt;two copies&lt;/em&gt; of the database bytes: one fetched by SQLite, and another, stored in the Swift Data value.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;You have the opportunity to save memory&lt;/strong&gt; by not copying the data fetched by SQLite:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;while&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; row &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; rows.&lt;span class="pl-c1"&gt;next&lt;/span&gt;() {
    &lt;span class="pl-k"&gt;let&lt;/span&gt; data &lt;span class="pl-k"&gt;=&lt;/span&gt; row.&lt;span class="pl-c1"&gt;dataNoCopy&lt;/span&gt;(&lt;span class="pl-c1"&gt;named&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;data&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Data?&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The non-copied data does not live longer than the iteration step: make sure that you do not use it past this point.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-date-and-datecomponents" class="anchor" aria-hidden="true" href="#date-and-datecomponents"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Date and DateComponents&lt;/h3&gt;
&lt;p&gt;&lt;a href="#date"&gt;&lt;strong&gt;Date&lt;/strong&gt;&lt;/a&gt; and &lt;a href="#datecomponents"&gt;&lt;strong&gt;DateComponents&lt;/strong&gt;&lt;/a&gt; can be stored and fetched from the database.&lt;/p&gt;
&lt;p&gt;Here is how GRDB supports the various &lt;a href="https://www.sqlite.org/lang_datefunc.html" rel="nofollow"&gt;date formats&lt;/a&gt; supported by SQLite:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt;SQLite format&lt;/th&gt;
&lt;th align="center"&gt;Date&lt;/th&gt;
&lt;th align="center"&gt;DateComponents&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;YYYY-MM-DD&lt;/td&gt;
&lt;td align="center"&gt;Read ¹&lt;/td&gt;
&lt;td align="center"&gt;Read/Write&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;YYYY-MM-DD HH:MM&lt;/td&gt;
&lt;td align="center"&gt;Read ¹&lt;/td&gt;
&lt;td align="center"&gt;Read/Write&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;YYYY-MM-DD HH:MM:SS&lt;/td&gt;
&lt;td align="center"&gt;Read ¹&lt;/td&gt;
&lt;td align="center"&gt;Read/Write&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;YYYY-MM-DD HH:MM:SS.SSS&lt;/td&gt;
&lt;td align="center"&gt;Read/Write ¹&lt;/td&gt;
&lt;td align="center"&gt;Read/Write&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;YYYY-MM-DD&lt;strong&gt;T&lt;/strong&gt;HH:MM&lt;/td&gt;
&lt;td align="center"&gt;Read ¹&lt;/td&gt;
&lt;td align="center"&gt;Read&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;YYYY-MM-DD&lt;strong&gt;T&lt;/strong&gt;HH:MM:SS&lt;/td&gt;
&lt;td align="center"&gt;Read ¹&lt;/td&gt;
&lt;td align="center"&gt;Read&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;YYYY-MM-DD&lt;strong&gt;T&lt;/strong&gt;HH:MM:SS.SSS&lt;/td&gt;
&lt;td align="center"&gt;Read ¹&lt;/td&gt;
&lt;td align="center"&gt;Read&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;HH:MM&lt;/td&gt;
&lt;td align="center"&gt;&lt;/td&gt;
&lt;td align="center"&gt;Read/Write&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;HH:MM:SS&lt;/td&gt;
&lt;td align="center"&gt;&lt;/td&gt;
&lt;td align="center"&gt;Read/Write&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;HH:MM:SS.SSS&lt;/td&gt;
&lt;td align="center"&gt;&lt;/td&gt;
&lt;td align="center"&gt;Read/Write&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Timestamps since unix epoch&lt;/td&gt;
&lt;td align="center"&gt;Read ²&lt;/td&gt;
&lt;td align="center"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;now&lt;/code&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;¹ Dates are stored and read in the UTC time zone. Missing components are assumed to be zero.&lt;/p&gt;
&lt;p&gt;² GRDB 2+ interprets numerical values as timestamps that fuel &lt;code&gt;Date(timeIntervalSince1970:)&lt;/code&gt;. Previous GRDB versions used to interpret numbers as &lt;a href="https://en.wikipedia.org/wiki/Julian_day" rel="nofollow"&gt;julian days&lt;/a&gt;. Julian days are still supported, with the &lt;code&gt;Date(julianDay:)&lt;/code&gt; initializer.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-date" class="anchor" aria-hidden="true" href="#date"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Date&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Date&lt;/strong&gt; can be stored and fetched from the database just like other &lt;a href="#values"&gt;values&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;execute&lt;/span&gt;(
    &lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;INSERT INTO player (creationDate, ...) VALUES (?, ...)&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
    &lt;span class="pl-c1"&gt;arguments&lt;/span&gt;: [&lt;span class="pl-c1"&gt;Date&lt;/span&gt;(), &lt;span class="pl-k"&gt;...&lt;/span&gt;])

&lt;span class="pl-k"&gt;let&lt;/span&gt; row &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Row.&lt;span class="pl-c1"&gt;fetchOne&lt;/span&gt;(db, &lt;span class="pl-k"&gt;...&lt;/span&gt;)&lt;span class="pl-k"&gt;!&lt;/span&gt;
&lt;span class="pl-k"&gt;let&lt;/span&gt; creationDate&lt;span class="pl-k"&gt;:&lt;/span&gt; Date &lt;span class="pl-k"&gt;=&lt;/span&gt; row[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;creationDate&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Dates are stored using the format "YYYY-MM-DD HH:MM:SS.SSS" in the UTC time zone. It is precise to the millisecond.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;g-emoji class="g-emoji" alias="point_up" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/261d.png"&gt;☝️&lt;/g-emoji&gt; &lt;strong&gt;Note&lt;/strong&gt;: this format was chosen because it is the only format that is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Comparable (&lt;code&gt;ORDER BY date&lt;/code&gt; works)&lt;/li&gt;
&lt;li&gt;Comparable with the SQLite keyword CURRENT_TIMESTAMP (&lt;code&gt;WHERE date &amp;gt; CURRENT_TIMESTAMP&lt;/code&gt; works)&lt;/li&gt;
&lt;li&gt;Able to feed &lt;a href="https://www.sqlite.org/lang_datefunc.html" rel="nofollow"&gt;SQLite date &amp;amp; time functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Precise enough&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;When the default format does not fit your needs, customize date conversions. For example:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;execute&lt;/span&gt;(
    &lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;INSERT INTO player (creationDate, ...) VALUES (?, ...)&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
    &lt;span class="pl-c1"&gt;arguments&lt;/span&gt;: [&lt;span class="pl-c1"&gt;Date&lt;/span&gt;().&lt;span class="pl-smi"&gt;timeIntervalSinceReferenceDate&lt;/span&gt;, &lt;span class="pl-k"&gt;...&lt;/span&gt;])

&lt;span class="pl-k"&gt;let&lt;/span&gt; row &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Row.&lt;span class="pl-c1"&gt;fetchOne&lt;/span&gt;(db, &lt;span class="pl-k"&gt;...&lt;/span&gt;)&lt;span class="pl-k"&gt;!&lt;/span&gt;
&lt;span class="pl-k"&gt;let&lt;/span&gt; creationDate &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;Date&lt;/span&gt;(&lt;span class="pl-c1"&gt;timeIntervalSinceReferenceDate&lt;/span&gt;: row[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;creationDate&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;])&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;See &lt;a href="#codable-records"&gt;Codable Records&lt;/a&gt; for more date customization options.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-datecomponents" class="anchor" aria-hidden="true" href="#datecomponents"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;DateComponents&lt;/h4&gt;
&lt;p&gt;DateComponents is indirectly supported, through the &lt;strong&gt;DatabaseDateComponents&lt;/strong&gt; helper type.&lt;/p&gt;
&lt;p&gt;DatabaseDateComponents reads date components from all &lt;a href="https://www.sqlite.org/lang_datefunc.html" rel="nofollow"&gt;date formats supported by SQLite&lt;/a&gt;, and stores them in the format of your choice, from HH:MM to YYYY-MM-DD HH:MM:SS.SSS.&lt;/p&gt;
&lt;p&gt;DatabaseDateComponents can be stored and fetched from the database just like other &lt;a href="#values"&gt;values&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; components &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;DateComponents&lt;/span&gt;()
components.&lt;span class="pl-smi"&gt;year&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;1973&lt;/span&gt;
components.&lt;span class="pl-smi"&gt;month&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;9&lt;/span&gt;
components.&lt;span class="pl-smi"&gt;day&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;18&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Store "1973-09-18"&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; dbComponents &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;DatabaseDateComponents&lt;/span&gt;(components, &lt;span class="pl-c1"&gt;format&lt;/span&gt;: .&lt;span class="pl-smi"&gt;YMD&lt;/span&gt;)
&lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;execute&lt;/span&gt;(
    &lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;INSERT INTO player (birthDate, ...) VALUES (?, ...)&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
    &lt;span class="pl-c1"&gt;arguments&lt;/span&gt;: [dbComponents, &lt;span class="pl-k"&gt;...&lt;/span&gt;])

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Read "1973-09-18"&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; row &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Row.&lt;span class="pl-c1"&gt;fetchOne&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SELECT birthDate ...&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;span class="pl-k"&gt;!&lt;/span&gt;
&lt;span class="pl-k"&gt;let&lt;/span&gt; dbComponents&lt;span class="pl-k"&gt;:&lt;/span&gt; DatabaseDateComponents &lt;span class="pl-k"&gt;=&lt;/span&gt; row[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;birthDate&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]
dbComponents.&lt;span class="pl-smi"&gt;format&lt;/span&gt;         &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; .YMD (the actual format found in the database)&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;dbComponents.&lt;span class="pl-smi"&gt;dateComponents&lt;/span&gt; &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; DateComponents&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-nsnumber-and-nsdecimalnumber" class="anchor" aria-hidden="true" href="#nsnumber-and-nsdecimalnumber"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;NSNumber and NSDecimalNumber&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;NSNumber&lt;/strong&gt; can be stored and fetched from the database just like other &lt;a href="#values"&gt;values&lt;/a&gt;. Floating point NSNumbers are stored as Double. Integer and boolean, as Int64. Integers that don't fit Int64 won't be stored: you'll get a fatal error instead. Be cautious when an NSNumber contains an UInt64, for example.&lt;/p&gt;
&lt;p&gt;NSDecimalNumber deserves a longer discussion:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SQLite has no support for decimal numbers.&lt;/strong&gt; Given the table below, SQLite will actually store integers or doubles:&lt;/p&gt;
&lt;div class="highlight highlight-source-sql"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;CREATE&lt;/span&gt; &lt;span class="pl-k"&gt;TABLE&lt;/span&gt; &lt;span class="pl-en"&gt;transfer&lt;/span&gt; (
    amount &lt;span class="pl-k"&gt;DECIMAL&lt;/span&gt;(&lt;span class="pl-c1"&gt;10&lt;/span&gt;,&lt;span class="pl-c1"&gt;5&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;--&lt;/span&gt; will store integer or double, actually&lt;/span&gt;
)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This means that computations will not be exact:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;execute&lt;/span&gt;(&lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;INSERT INTO transfer (amount) VALUES (0.1)&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;execute&lt;/span&gt;(&lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;INSERT INTO transfer (amount) VALUES (0.2)&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-k"&gt;let&lt;/span&gt; sum &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; NSDecimalNumber.&lt;span class="pl-c1"&gt;fetchOne&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SELECT SUM(amount) FROM transfer&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;span class="pl-k"&gt;!&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Yikes! 0.3000000000000000512&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;print&lt;/span&gt;(sum)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Don't blame SQLite or GRDB, and instead store your decimal numbers differently.&lt;/p&gt;
&lt;p&gt;A classic technique is to store &lt;em&gt;integers&lt;/em&gt; instead, since SQLite performs exact computations of integers. For example, don't store Euros, but store cents instead:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Write&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; amount &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;NSDecimalNumber&lt;/span&gt;(&lt;span class="pl-c1"&gt;string&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;0.10&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-k"&gt;let&lt;/span&gt; integerAmount &lt;span class="pl-k"&gt;=&lt;/span&gt; amount.&lt;span class="pl-c1"&gt;multiplying&lt;/span&gt;(&lt;span class="pl-c1"&gt;byPowerOf10&lt;/span&gt;: &lt;span class="pl-c1"&gt;2&lt;/span&gt;).&lt;span class="pl-smi"&gt;int64Value&lt;/span&gt;
&lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;execute&lt;/span&gt;(&lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;INSERT INTO transfer (amount) VALUES (?)&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;arguments&lt;/span&gt;: [integerAmount])

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Read&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; integerAmount &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;Int64&lt;/span&gt;.&lt;span class="pl-c1"&gt;fetchOne&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SELECT SUM(amount) FROM transfer&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;span class="pl-k"&gt;!&lt;/span&gt;
&lt;span class="pl-k"&gt;let&lt;/span&gt; amount &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;NSDecimalNumber&lt;/span&gt;(&lt;span class="pl-c1"&gt;value&lt;/span&gt;: integerAmount).&lt;span class="pl-c1"&gt;multiplying&lt;/span&gt;(&lt;span class="pl-c1"&gt;byPowerOf10&lt;/span&gt;: &lt;span class="pl-c1"&gt;-2&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; 0.10&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-uuid" class="anchor" aria-hidden="true" href="#uuid"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;UUID&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;UUID&lt;/strong&gt; can be stored and fetched from the database just like other &lt;a href="#values"&gt;values&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;GRDB stores uuids as 16-bytes data blobs, and decodes them from both 16-bytes data blobs and strings such as "E621E1F8-C36C-495A-93FC-0C247A3E6E5F".&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-swift-enums" class="anchor" aria-hidden="true" href="#swift-enums"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Swift Enums&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Swift enums&lt;/strong&gt; and generally all types that adopt the &lt;a href="https://developer.apple.com/library/tvos/documentation/Swift/Reference/Swift_RawRepresentable_Protocol/index.html" rel="nofollow"&gt;RawRepresentable&lt;/a&gt; protocol can be stored and fetched from the database just like their raw &lt;a href="#values"&gt;values&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;enum&lt;/span&gt; &lt;span class="pl-en"&gt;Color&lt;/span&gt; : &lt;span class="pl-e"&gt;&lt;span class="pl-c1"&gt;Int&lt;/span&gt; &lt;/span&gt;{
    &lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-c1"&gt;red&lt;/span&gt;, &lt;span class="pl-c1"&gt;white&lt;/span&gt;, &lt;span class="pl-c1"&gt;rose&lt;/span&gt;
}

&lt;span class="pl-k"&gt;enum&lt;/span&gt; &lt;span class="pl-en"&gt;Grape&lt;/span&gt; : &lt;span class="pl-e"&gt;&lt;span class="pl-c1"&gt;String&lt;/span&gt; &lt;/span&gt;{
    &lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-c1"&gt;chardonnay&lt;/span&gt;, &lt;span class="pl-c1"&gt;merlot&lt;/span&gt;, &lt;span class="pl-c1"&gt;riesling&lt;/span&gt;
}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Declare empty DatabaseValueConvertible adoption&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;extension&lt;/span&gt; &lt;span class="pl-en"&gt;Color&lt;/span&gt; : &lt;span class="pl-e"&gt;DatabaseValueConvertible &lt;/span&gt;{ }
&lt;span class="pl-k"&gt;extension&lt;/span&gt; &lt;span class="pl-en"&gt;Grape&lt;/span&gt; : &lt;span class="pl-e"&gt;DatabaseValueConvertible &lt;/span&gt;{ }

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Store&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;execute&lt;/span&gt;(
    &lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;INSERT INTO wine (grape, color) VALUES (?, ?)&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
    &lt;span class="pl-c1"&gt;arguments&lt;/span&gt;: [Grape.&lt;span class="pl-smi"&gt;merlot&lt;/span&gt;, Color.&lt;span class="pl-smi"&gt;red&lt;/span&gt;])

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Read&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; rows &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Row.&lt;span class="pl-c1"&gt;fetchCursor&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SELECT * FROM wine&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-k"&gt;while&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; row &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; rows.&lt;span class="pl-c1"&gt;next&lt;/span&gt;() {
    &lt;span class="pl-k"&gt;let&lt;/span&gt; grape&lt;span class="pl-k"&gt;:&lt;/span&gt; Grape &lt;span class="pl-k"&gt;=&lt;/span&gt; row[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;grape&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]
    &lt;span class="pl-k"&gt;let&lt;/span&gt; color&lt;span class="pl-k"&gt;:&lt;/span&gt; Color &lt;span class="pl-k"&gt;=&lt;/span&gt; row[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;color&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;When a database value does not match any enum case&lt;/strong&gt;, you get a fatal error. This fatal error can be avoided with the &lt;a href="#databasevalue"&gt;DatabaseValue&lt;/a&gt; type:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; row &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Row.&lt;span class="pl-c1"&gt;fetchOne&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SELECT 'syrah'&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;span class="pl-k"&gt;!&lt;/span&gt;

row[&lt;span class="pl-c1"&gt;0&lt;/span&gt;] &lt;span class="pl-k"&gt;as&lt;/span&gt; &lt;span class="pl-c1"&gt;String&lt;/span&gt;  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; "syrah"&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;row[&lt;span class="pl-c1"&gt;0&lt;/span&gt;] &lt;span class="pl-k"&gt;as&lt;/span&gt; Grape&lt;span class="pl-k"&gt;?&lt;/span&gt;  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; fatal error: could not convert "syrah" to Grape.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;row[&lt;span class="pl-c1"&gt;0&lt;/span&gt;] &lt;span class="pl-k"&gt;as&lt;/span&gt; Grape   &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; fatal error: could not convert "syrah" to Grape.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;let&lt;/span&gt; dbValue&lt;span class="pl-k"&gt;:&lt;/span&gt; DatabaseValue &lt;span class="pl-k"&gt;=&lt;/span&gt; row[&lt;span class="pl-c1"&gt;0&lt;/span&gt;]
&lt;span class="pl-k"&gt;if&lt;/span&gt; dbValue.&lt;span class="pl-smi"&gt;isNull&lt;/span&gt; {
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Handle NULL&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;} &lt;span class="pl-k"&gt;else&lt;/span&gt; &lt;span class="pl-k"&gt;if&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; grape &lt;span class="pl-k"&gt;=&lt;/span&gt; Grape.&lt;span class="pl-c1"&gt;fromDatabaseValue&lt;/span&gt;(dbValue) {
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Handle valid grape&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;} &lt;span class="pl-k"&gt;else&lt;/span&gt; {
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Handle unknown grape&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;}&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-custom-value-types" class="anchor" aria-hidden="true" href="#custom-value-types"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Custom Value Types&lt;/h3&gt;
&lt;p&gt;Conversion to and from the database is based on the &lt;code&gt;DatabaseValueConvertible&lt;/code&gt; protocol:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;protocol&lt;/span&gt; &lt;span class="pl-en"&gt;DatabaseValueConvertible&lt;/span&gt; {
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; Returns a value that can be stored in the database.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;var&lt;/span&gt; databaseValue&lt;span class="pl-k"&gt;:&lt;/span&gt; DatabaseValue { &lt;span class="pl-k"&gt;get&lt;/span&gt; }
    
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; Returns a value initialized from dbValue, if possible.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;static&lt;/span&gt; &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;fromDatabaseValue&lt;/span&gt;(&lt;span class="pl-en"&gt;_&lt;/span&gt; &lt;span class="pl-smi"&gt;dbValue&lt;/span&gt;: DatabaseValue) &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;Self&lt;/span&gt;&lt;span class="pl-k"&gt;?&lt;/span&gt;
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;All types that adopt this protocol can be used like all other &lt;a href="#values"&gt;values&lt;/a&gt; (Bool, Int, String, Date, Swift enums, etc.)&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;databaseValue&lt;/code&gt; property returns &lt;a href="#databasevalue"&gt;DatabaseValue&lt;/a&gt;, a type that wraps the five values supported by SQLite: NULL, Int64, Double, String and Data. Since DatabaseValue has no public initializer, use &lt;code&gt;DatabaseValue.null&lt;/code&gt;, or another type that already adopts the protocol: &lt;code&gt;1.databaseValue&lt;/code&gt;, &lt;code&gt;"foo".databaseValue&lt;/code&gt;, etc. Conversion to DatabaseValue &lt;em&gt;must not&lt;/em&gt; fail.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;fromDatabaseValue()&lt;/code&gt; factory method returns an instance of your custom type if the database value contains a suitable value. If the database value does not contain a suitable value, such as "foo" for Date, &lt;code&gt;fromDatabaseValue&lt;/code&gt; &lt;em&gt;must&lt;/em&gt; return nil (GRDB will interpret this nil result as a conversion error, and react accordingly).&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-transactions-and-savepoints" class="anchor" aria-hidden="true" href="#transactions-and-savepoints"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Transactions and Savepoints&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#transactions-and-safety"&gt;Transactions and Safety&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#explicit-transactions"&gt;Explicit Transactions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#savepoints"&gt;Savepoints&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#transaction-kinds"&gt;Transaction Kinds&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-transactions-and-safety" class="anchor" aria-hidden="true" href="#transactions-and-safety"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Transactions and Safety&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;A transaction&lt;/strong&gt; is a fundamental tool of SQLite that guarantees &lt;a href="https://www.sqlite.org/transactional.html" rel="nofollow"&gt;data consistency&lt;/a&gt; as well as &lt;a href="https://sqlite.org/isolation.html" rel="nofollow"&gt;proper isolation&lt;/a&gt; between application threads and database connections.&lt;/p&gt;
&lt;p&gt;GRDB generally opens transactions for you, as a way to enforce its &lt;a href="#concurrency"&gt;concurrency guarantees&lt;/a&gt;, and provide maximal security for both your application data and application logic:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; BEGIN TRANSACTION&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; INSERT INTO credit ...&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; INSERT INTO debit ...&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; COMMIT&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; dbQueue.&lt;span class="pl-smi"&gt;write&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;Credit&lt;/span&gt;(destinationAccount, amount).&lt;span class="pl-c1"&gt;insert&lt;/span&gt;(db)
    &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;Debit&lt;/span&gt;(sourceAccount, amount).&lt;span class="pl-c1"&gt;insert&lt;/span&gt;(db)
}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; BEGIN TRANSACTION&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; INSERT INTO credit ...&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; INSERT INTO debit ...&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; COMMIT&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; dbPool.&lt;span class="pl-smi"&gt;write&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;Credit&lt;/span&gt;(destinationAccount, amount).&lt;span class="pl-c1"&gt;insert&lt;/span&gt;(db)
    &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;Debit&lt;/span&gt;(sourceAccount, amount).&lt;span class="pl-c1"&gt;insert&lt;/span&gt;(db)
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Yet you may need to exactly control when transactions take place:&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-explicit-transactions" class="anchor" aria-hidden="true" href="#explicit-transactions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Explicit Transactions&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;DatabaseQueue.inDatabase()&lt;/code&gt; and &lt;code&gt;DatabasePool.writeWithoutTransaction()&lt;/code&gt; execute your database statements outside of any transaction:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; INSERT INTO credit ...&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; INSERT INTO debit ...&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; dbQueue.&lt;span class="pl-smi"&gt;inDatabase&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;Credit&lt;/span&gt;(destinationAccount, amount).&lt;span class="pl-c1"&gt;insert&lt;/span&gt;(db)
    &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;Debit&lt;/span&gt;(sourceAccount, amount).&lt;span class="pl-c1"&gt;insert&lt;/span&gt;(db)
}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; INSERT INTO credit ...&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; INSERT INTO debit ...&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; dbPool.&lt;span class="pl-smi"&gt;writeWithoutTransaction&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;Credit&lt;/span&gt;(destinationAccount, amount).&lt;span class="pl-c1"&gt;insert&lt;/span&gt;(db)
    &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;Debit&lt;/span&gt;(sourceAccount, amount).&lt;span class="pl-c1"&gt;insert&lt;/span&gt;(db)
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Writing outside of any transaction is dangerous,&lt;/strong&gt; for two reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;In our credit/debit example, you may successfully insert a credit, but fail inserting the debit, and end up with unbalanced accounts (oops).&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; UNSAFE DATABASE INTEGRITY&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; dbQueue.&lt;span class="pl-smi"&gt;inDatabase&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt; &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; or dbPool.writeWithoutTransaction&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;Credit&lt;/span&gt;(destinationAccount, amount).&lt;span class="pl-c1"&gt;insert&lt;/span&gt;(db) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; may succeed&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;Debit&lt;/span&gt;(sourceAccount, amount).&lt;span class="pl-c1"&gt;insert&lt;/span&gt;(db)      &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; may fail&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Transactions avoid this kind of bug.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#database-pools"&gt;Database pool&lt;/a&gt; concurrent reads can see an inconsistent state of the database:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; UNSAFE CONCURRENCY&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; dbPool.&lt;span class="pl-smi"&gt;writeWithoutTransaction&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;Credit&lt;/span&gt;(destinationAccount, amount).&lt;span class="pl-c1"&gt;insert&lt;/span&gt;(db)
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; &amp;lt;- Concurrent dbPool.read sees a partial db update here&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;Debit&lt;/span&gt;(sourceAccount, amount).&lt;span class="pl-c1"&gt;insert&lt;/span&gt;(db)
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Transactions avoid this kind of bug, too.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To open explicit transactions, use one of the &lt;code&gt;Database.inTransaction&lt;/code&gt;, &lt;code&gt;DatabaseQueue.inTransaction&lt;/code&gt;, or &lt;code&gt;DatabasePool.writeInTransaction&lt;/code&gt; methods:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; BEGIN TRANSACTION&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; INSERT INTO credit ...&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; INSERT INTO debit ...&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; COMMIT&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; dbQueue.&lt;span class="pl-smi"&gt;inDatabase&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; or dbPool.writeWithoutTransaction&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-smi"&gt;inTransaction&lt;/span&gt; {
        &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;Credit&lt;/span&gt;(destinationAccount, amount).&lt;span class="pl-c1"&gt;insert&lt;/span&gt;(db)
        &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;Debit&lt;/span&gt;(sourceAccount, amount).&lt;span class="pl-c1"&gt;insert&lt;/span&gt;(db)
        &lt;span class="pl-k"&gt;return&lt;/span&gt; .&lt;span class="pl-smi"&gt;commit&lt;/span&gt;
    }
}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; BEGIN TRANSACTION&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; INSERT INTO credit ...&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; INSERT INTO debit ...&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; COMMIT&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; dbQueue.&lt;span class="pl-smi"&gt;inTransaction&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; or dbPool.writeInTransaction&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;Credit&lt;/span&gt;(destinationAccount, amount).&lt;span class="pl-c1"&gt;insert&lt;/span&gt;(db)
    &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;Debit&lt;/span&gt;(sourceAccount, amount).&lt;span class="pl-c1"&gt;insert&lt;/span&gt;(db)
    &lt;span class="pl-k"&gt;return&lt;/span&gt; .&lt;span class="pl-smi"&gt;commit&lt;/span&gt;
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If an error is thrown from the transaction block, the transaction is rollbacked and the error is rethrown by the &lt;code&gt;inTransaction&lt;/code&gt; method. If you return &lt;code&gt;.rollback&lt;/code&gt; instead of &lt;code&gt;.commit&lt;/code&gt;, the transaction is also rollbacked, but no error is thrown.&lt;/p&gt;
&lt;p&gt;You can also perform manual transaction management:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; dbQueue.&lt;span class="pl-smi"&gt;inDatabase&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; or dbPool.writeWithoutTransaction&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;beginTransaction&lt;/span&gt;()
    &lt;span class="pl-k"&gt;...&lt;/span&gt;
    &lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;commit&lt;/span&gt;()
    
    &lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;execute&lt;/span&gt;(&lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;BEGIN TRANSACTION&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    &lt;span class="pl-k"&gt;...&lt;/span&gt;
    &lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;execute&lt;/span&gt;(&lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;ROLLBACK&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Transactions can't be left opened unless you set the &lt;a href="http://groue.github.io/GRDB.swift/docs/4.6/Structs/Configuration.html" rel="nofollow"&gt;allowsUnsafeTransactions&lt;/a&gt; configuration flag:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; fatal error: A transaction has been left opened at the end of a database access&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; dbQueue.&lt;span class="pl-smi"&gt;inDatabase&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;execute&lt;/span&gt;(&lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;BEGIN TRANSACTION&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; &amp;lt;- no commit or rollback&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can ask if a transaction is currently opened:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;myCriticalMethod&lt;/span&gt;(&lt;span class="pl-en"&gt;_&lt;/span&gt; &lt;span class="pl-smi"&gt;db&lt;/span&gt;: Database) &lt;span class="pl-k"&gt;throws&lt;/span&gt; {
    &lt;span class="pl-c1"&gt;precondition&lt;/span&gt;(db.&lt;span class="pl-smi"&gt;isInsideTransaction&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;This method requires a transaction&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-k"&gt;...&lt;/span&gt;
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Yet, you have a better option than checking for transactions: critical database sections should use savepoints, described below:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;myCriticalMethod&lt;/span&gt;(&lt;span class="pl-en"&gt;_&lt;/span&gt; &lt;span class="pl-smi"&gt;db&lt;/span&gt;: Database) &lt;span class="pl-k"&gt;throws&lt;/span&gt; {
    &lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-smi"&gt;inSavepoint&lt;/span&gt; {
        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Here the database is guaranteed to be inside a transaction.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;        &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-k"&gt;...&lt;/span&gt;
    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-savepoints" class="anchor" aria-hidden="true" href="#savepoints"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Savepoints&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Statements grouped in a savepoint can be rollbacked without invalidating a whole transaction:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; dbQueue.&lt;span class="pl-smi"&gt;write&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Makes sure both inserts succeed, or none:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-smi"&gt;inSavepoint&lt;/span&gt; {
        &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;Credit&lt;/span&gt;(destinationAccount, amount).&lt;span class="pl-c1"&gt;insert&lt;/span&gt;(db)
        &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;Debit&lt;/span&gt;(sourceAccount, amount).&lt;span class="pl-c1"&gt;insert&lt;/span&gt;(db)
        &lt;span class="pl-k"&gt;return&lt;/span&gt; .&lt;span class="pl-smi"&gt;commit&lt;/span&gt;
    }
    
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Other savepoints, etc...&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If an error is thrown from the savepoint block, the savepoint is rollbacked and the error is rethrown by the &lt;code&gt;inSavepoint&lt;/code&gt; method. If you return &lt;code&gt;.rollback&lt;/code&gt; instead of &lt;code&gt;.commit&lt;/code&gt;, the savepoint is also rollbacked, but no error is thrown.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Unlike transactions, savepoints can be nested.&lt;/strong&gt; They implicitly open a transaction if no one was opened when the savepoint begins. As such, they behave just like nested transactions. Yet the database changes are only written to disk when the outermost transaction is committed:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; dbQueue.&lt;span class="pl-smi"&gt;inDatabase&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-smi"&gt;inSavepoint&lt;/span&gt; {
        &lt;span class="pl-k"&gt;...&lt;/span&gt;
        &lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-smi"&gt;inSavepoint&lt;/span&gt; {
            &lt;span class="pl-k"&gt;...&lt;/span&gt;
            &lt;span class="pl-k"&gt;return&lt;/span&gt; .&lt;span class="pl-smi"&gt;commit&lt;/span&gt;
        }
        &lt;span class="pl-k"&gt;...&lt;/span&gt;
        &lt;span class="pl-k"&gt;return&lt;/span&gt; .&lt;span class="pl-smi"&gt;commit&lt;/span&gt;  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; writes changes to disk&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;SQLite savepoints are more than nested transactions, though. For advanced uses, use &lt;a href="https://www.sqlite.org/lang_savepoint.html" rel="nofollow"&gt;SQLite savepoint documentation&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-transaction-kinds" class="anchor" aria-hidden="true" href="#transaction-kinds"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Transaction Kinds&lt;/h3&gt;
&lt;p&gt;SQLite supports &lt;a href="https://www.sqlite.org/lang_transaction.html" rel="nofollow"&gt;three kinds of transactions&lt;/a&gt;: deferred (the default), immediate, and exclusive.&lt;/p&gt;
&lt;p&gt;The transaction kind can be changed in the database configuration, or for each transaction:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; 1) Default configuration:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; dbQueue &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;DatabaseQueue&lt;/span&gt;(&lt;span class="pl-c1"&gt;path&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;...&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; BEGIN DEFERED TRANSACTION ...&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;dbQueue.&lt;span class="pl-smi"&gt;write&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt; &lt;span class="pl-k"&gt;...&lt;/span&gt; }

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; BEGIN EXCLUSIVE TRANSACTION ...&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;dbQueue.&lt;span class="pl-c1"&gt;inTransaction&lt;/span&gt;(.&lt;span class="pl-smi"&gt;exclusive&lt;/span&gt;) { db &lt;span class="pl-k"&gt;in&lt;/span&gt; &lt;span class="pl-k"&gt;...&lt;/span&gt; }

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; 2) Customized default transaction kind:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;var&lt;/span&gt; config &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;Configuration&lt;/span&gt;()
config.&lt;span class="pl-smi"&gt;defaultTransactionKind&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; .&lt;span class="pl-smi"&gt;immediate&lt;/span&gt;
&lt;span class="pl-k"&gt;let&lt;/span&gt; dbQueue &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;DatabaseQueue&lt;/span&gt;(&lt;span class="pl-c1"&gt;path&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;...&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;configuration&lt;/span&gt;: config)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; BEGIN IMMEDIATE TRANSACTION ...&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;dbQueue.&lt;span class="pl-smi"&gt;write&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt; &lt;span class="pl-k"&gt;...&lt;/span&gt; }

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; BEGIN EXCLUSIVE TRANSACTION ...&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;dbQueue.&lt;span class="pl-c1"&gt;inTransaction&lt;/span&gt;(.&lt;span class="pl-smi"&gt;exclusive&lt;/span&gt;) { db &lt;span class="pl-k"&gt;in&lt;/span&gt; &lt;span class="pl-k"&gt;...&lt;/span&gt; }&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-prepared-statements" class="anchor" aria-hidden="true" href="#prepared-statements"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Prepared Statements&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Prepared Statements&lt;/strong&gt; let you prepare an SQL query and execute it later, several times if you need, with different arguments.&lt;/p&gt;
&lt;p&gt;There are two kinds of prepared statements: &lt;strong&gt;select statements&lt;/strong&gt;, and &lt;strong&gt;update statements&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; dbQueue.&lt;span class="pl-smi"&gt;write&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;let&lt;/span&gt; updateSQL &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;INSERT INTO player (name, score) VALUES (:name, :score)&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
    &lt;span class="pl-k"&gt;let&lt;/span&gt; updateStatement &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;makeUpdateStatement&lt;/span&gt;(&lt;span class="pl-c1"&gt;sql&lt;/span&gt;: updateSQL)
    
    &lt;span class="pl-k"&gt;let&lt;/span&gt; selectSQL &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SELECT * FROM player WHERE name = ?&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
    &lt;span class="pl-k"&gt;let&lt;/span&gt; selectStatement &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;makeSelectStatement&lt;/span&gt;(&lt;span class="pl-c1"&gt;sql&lt;/span&gt;: selectSQL)
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;?&lt;/code&gt; and colon-prefixed keys like &lt;code&gt;:name&lt;/code&gt; in the SQL query are the statement arguments. You set them with arrays or dictionaries (arguments are actually of type &lt;a href="http://groue.github.io/GRDB.swift/docs/4.6/Structs/StatementArguments.html" rel="nofollow"&gt;StatementArguments&lt;/a&gt;, which happens to adopt the ExpressibleByArrayLiteral and ExpressibleByDictionaryLiteral protocols).&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;updateStatement.&lt;span class="pl-smi"&gt;arguments&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;name&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Arthur&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;score&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;1000&lt;/span&gt;]
selectStatement.&lt;span class="pl-smi"&gt;arguments&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Arthur&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After arguments are set, you can execute the prepared statement:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; updateStatement.&lt;span class="pl-c1"&gt;execute&lt;/span&gt;()&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Select statements can be used wherever a raw SQL query string would fit (see &lt;a href="#fetch-queries"&gt;fetch queries&lt;/a&gt;):&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; rows &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Row.&lt;span class="pl-c1"&gt;fetchCursor&lt;/span&gt;(selectStatement)    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; A Cursor of Row&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; players &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Player.&lt;span class="pl-c1"&gt;fetchAll&lt;/span&gt;(selectStatement) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; [Player]&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; player &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Player.&lt;span class="pl-c1"&gt;fetchOne&lt;/span&gt;(selectStatement)  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Player?&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can set the arguments at the moment of the statement execution:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; updateStatement.&lt;span class="pl-c1"&gt;execute&lt;/span&gt;(&lt;span class="pl-c1"&gt;arguments&lt;/span&gt;: [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;name&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Arthur&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;score&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;1000&lt;/span&gt;])
&lt;span class="pl-k"&gt;let&lt;/span&gt; player &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Player.&lt;span class="pl-c1"&gt;fetchOne&lt;/span&gt;(selectStatement, &lt;span class="pl-c1"&gt;arguments&lt;/span&gt;: [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Arthur&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;])&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;g-emoji class="g-emoji" alias="point_up" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/261d.png"&gt;☝️&lt;/g-emoji&gt; &lt;strong&gt;Note&lt;/strong&gt;: it is a programmer error to reuse a prepared statement that has failed: GRDB may crash if you do so.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;See &lt;a href="#row-queries"&gt;row queries&lt;/a&gt;, &lt;a href="#value-queries"&gt;value queries&lt;/a&gt;, and &lt;a href="#records"&gt;Records&lt;/a&gt; for more information.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-prepared-statements-cache" class="anchor" aria-hidden="true" href="#prepared-statements-cache"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Prepared Statements Cache&lt;/h3&gt;
&lt;p&gt;When the same query will be used several times in the lifetime of your application, you may feel a natural desire to cache prepared statements.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Don't cache statements yourself.&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;g-emoji class="g-emoji" alias="point_up" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/261d.png"&gt;☝️&lt;/g-emoji&gt; &lt;strong&gt;Note&lt;/strong&gt;: This is because you don't have the necessary tools. Statements are tied to specific SQLite connections and dispatch queues which you don't manage yourself, especially when you use &lt;a href="#database-pools"&gt;database pools&lt;/a&gt;. A change in the database schema &lt;a href="https://www.sqlite.org/compile.html#max_schema_retry" rel="nofollow"&gt;may, or may not&lt;/a&gt; invalidate a statement. On systems earlier than OSX 10.10 that don't have the &lt;a href="https://www.sqlite.org/c3ref/close.html" rel="nofollow"&gt;sqlite3_close_v2 function&lt;/a&gt;, SQLite connections won't close properly if statements have been kept alive.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Instead, use the &lt;code&gt;cachedUpdateStatement&lt;/code&gt; and &lt;code&gt;cachedSelectStatement&lt;/code&gt; methods. GRDB does all the hard caching and &lt;a href="#memory-management"&gt;memory management&lt;/a&gt; stuff for you:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; updateStatement &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;cachedUpdateStatement&lt;/span&gt;(&lt;span class="pl-c1"&gt;sql&lt;/span&gt;: sql)
&lt;span class="pl-k"&gt;let&lt;/span&gt; selectStatement &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;cachedSelectStatement&lt;/span&gt;(&lt;span class="pl-c1"&gt;sql&lt;/span&gt;: sql)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Should a cached prepared statement throw an error, don't reuse it (it is a programmer error). Instead, reload it from the cache.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-custom-sql-functions-and-aggregates" class="anchor" aria-hidden="true" href="#custom-sql-functions-and-aggregates"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Custom SQL Functions and Aggregates&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;SQLite lets you define SQL functions and aggregates.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A custom SQL function or aggregate extends SQLite:&lt;/p&gt;
&lt;div class="highlight highlight-source-sql"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;SELECT&lt;/span&gt; reverse(name) &lt;span class="pl-k"&gt;FROM&lt;/span&gt; player;   &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;--&lt;/span&gt; custom function&lt;/span&gt;
&lt;span class="pl-k"&gt;SELECT&lt;/span&gt; maxLength(name) &lt;span class="pl-k"&gt;FROM&lt;/span&gt; player; &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;--&lt;/span&gt; custom aggregate&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#custom-sql-functions"&gt;Custom SQL Functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#custom-aggregates"&gt;Custom Aggregates&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-custom-sql-functions" class="anchor" aria-hidden="true" href="#custom-sql-functions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Custom SQL Functions&lt;/h3&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; reverse &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;DatabaseFunction&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;reverse&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;argumentCount&lt;/span&gt;: &lt;span class="pl-c1"&gt;1&lt;/span&gt;, &lt;span class="pl-c1"&gt;pure&lt;/span&gt;: &lt;span class="pl-c1"&gt;true&lt;/span&gt;) { (&lt;span class="pl-c1"&gt;values&lt;/span&gt;: [DatabaseValue]) &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Extract string value, if any...&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;guard&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; string &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;String&lt;/span&gt;.&lt;span class="pl-c1"&gt;fromDatabaseValue&lt;/span&gt;(values[&lt;span class="pl-c1"&gt;0&lt;/span&gt;]) &lt;span class="pl-k"&gt;else&lt;/span&gt; {
        &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;
    }
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; ... and return reversed string:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-c1"&gt;String&lt;/span&gt;(string.&lt;span class="pl-c1"&gt;reversed&lt;/span&gt;())
}
dbQueue.&lt;span class="pl-c1"&gt;add&lt;/span&gt;(&lt;span class="pl-c1"&gt;function&lt;/span&gt;: reverse)   &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Or dbPool.add(function: ...)&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;try&lt;/span&gt; dbQueue.&lt;span class="pl-smi"&gt;read&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; "oof"&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;String&lt;/span&gt;.&lt;span class="pl-c1"&gt;fetchOne&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SELECT reverse('foo')&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;span class="pl-k"&gt;!&lt;/span&gt;
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;em&gt;function&lt;/em&gt; argument takes an array of &lt;a href="#databasevalue"&gt;DatabaseValue&lt;/a&gt;, and returns any valid &lt;a href="#values"&gt;value&lt;/a&gt; (Bool, Int, String, Date, Swift enums, etc.) The number of database values is guaranteed to be &lt;em&gt;argumentCount&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;SQLite has the opportunity to perform additional optimizations when functions are "pure", which means that their result only depends on their arguments. So make sure to set the &lt;em&gt;pure&lt;/em&gt; argument to true when possible.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Functions can take a variable number of arguments:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;When you don't provide any explicit &lt;em&gt;argumentCount&lt;/em&gt;, the function can take any number of arguments:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; averageOf &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;DatabaseFunction&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;averageOf&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;pure&lt;/span&gt;: &lt;span class="pl-c1"&gt;true&lt;/span&gt;) { (&lt;span class="pl-c1"&gt;values&lt;/span&gt;: [DatabaseValue]) &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;let&lt;/span&gt; doubles &lt;span class="pl-k"&gt;=&lt;/span&gt; values.&lt;span class="pl-smi"&gt;compactMap&lt;/span&gt; { &lt;span class="pl-c1"&gt;Double&lt;/span&gt;.&lt;span class="pl-c1"&gt;fromDatabaseValue&lt;/span&gt;(&lt;span class="pl-c1"&gt;$0&lt;/span&gt;) }
    &lt;span class="pl-k"&gt;return&lt;/span&gt; doubles.&lt;span class="pl-c1"&gt;reduce&lt;/span&gt;(&lt;span class="pl-c1"&gt;0&lt;/span&gt;, &lt;span class="pl-k"&gt;+&lt;/span&gt;) &lt;span class="pl-k"&gt;/&lt;/span&gt; &lt;span class="pl-c1"&gt;Double&lt;/span&gt;(doubles.&lt;span class="pl-c1"&gt;count&lt;/span&gt;)
}
dbQueue.&lt;span class="pl-c1"&gt;add&lt;/span&gt;(&lt;span class="pl-c1"&gt;function&lt;/span&gt;: averageOf)

&lt;span class="pl-k"&gt;try&lt;/span&gt; dbQueue.&lt;span class="pl-smi"&gt;read&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; 2.0&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;Double&lt;/span&gt;.&lt;span class="pl-c1"&gt;fetchOne&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SELECT averageOf(1, 2, 3)&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;span class="pl-k"&gt;!&lt;/span&gt;
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Functions can throw:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; sqrt &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;DatabaseFunction&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;sqrt&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;argumentCount&lt;/span&gt;: &lt;span class="pl-c1"&gt;1&lt;/span&gt;, &lt;span class="pl-c1"&gt;pure&lt;/span&gt;: &lt;span class="pl-c1"&gt;true&lt;/span&gt;) { (&lt;span class="pl-c1"&gt;values&lt;/span&gt;: [DatabaseValue]) &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;guard&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; double &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;Double&lt;/span&gt;.&lt;span class="pl-c1"&gt;fromDatabaseValue&lt;/span&gt;(values[&lt;span class="pl-c1"&gt;0&lt;/span&gt;]) &lt;span class="pl-k"&gt;else&lt;/span&gt; {
        &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;
    }
    &lt;span class="pl-k"&gt;guard&lt;/span&gt; double &lt;span class="pl-k"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt; &lt;span class="pl-k"&gt;else&lt;/span&gt; {
        &lt;span class="pl-k"&gt;throw&lt;/span&gt; &lt;span class="pl-c1"&gt;DatabaseError&lt;/span&gt;(&lt;span class="pl-c1"&gt;message&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;invalid negative number&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    }
    &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-c1"&gt;sqrt&lt;/span&gt;(double)
}
dbQueue.&lt;span class="pl-c1"&gt;add&lt;/span&gt;(&lt;span class="pl-c1"&gt;function&lt;/span&gt;: sqrt)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; SQLite error 1 with statement `SELECT sqrt(-1)`: invalid negative number&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; dbQueue.&lt;span class="pl-smi"&gt;read&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;Double&lt;/span&gt;.&lt;span class="pl-c1"&gt;fetchOne&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SELECT sqrt(-1)&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;span class="pl-k"&gt;!&lt;/span&gt;
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Use custom functions in the &lt;a href="#the-query-interface"&gt;query interface&lt;/a&gt;:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; SELECT reverseString("name") FROM player&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;Player.&lt;span class="pl-c1"&gt;select&lt;/span&gt;(reverseString.&lt;span class="pl-c1"&gt;apply&lt;/span&gt;(nameColumn))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;GRDB ships with built-in SQL functions that perform unicode-aware string transformations.&lt;/strong&gt; See &lt;a href="#unicode"&gt;Unicode&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-custom-aggregates" class="anchor" aria-hidden="true" href="#custom-aggregates"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Custom Aggregates&lt;/h3&gt;
&lt;p&gt;Before registering a custom aggregate, you need to define a type that adopts the &lt;code&gt;DatabaseAggregate&lt;/code&gt; protocol:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;protocol&lt;/span&gt; &lt;span class="pl-en"&gt;DatabaseAggregate&lt;/span&gt; {
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Initializes an aggregate&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;init&lt;/span&gt;()
    
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Called at each step of the aggregation&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;mutating&lt;/span&gt; &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;step&lt;/span&gt;(&lt;span class="pl-en"&gt;_&lt;/span&gt; &lt;span class="pl-smi"&gt;dbValues&lt;/span&gt;: [DatabaseValue]) &lt;span class="pl-k"&gt;throws&lt;/span&gt;
    
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Returns the final result&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;finalize&lt;/span&gt;() &lt;span class="pl-k"&gt;throws&lt;/span&gt; &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; DatabaseValueConvertible&lt;span class="pl-k"&gt;?&lt;/span&gt;
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;struct&lt;/span&gt; &lt;span class="pl-en"&gt;MaxLength&lt;/span&gt; : &lt;span class="pl-e"&gt;DatabaseAggregate &lt;/span&gt;{
    &lt;span class="pl-k"&gt;var&lt;/span&gt; maxLength&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;Int&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt;
    
    &lt;span class="pl-k"&gt;mutating&lt;/span&gt; &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;step&lt;/span&gt;(&lt;span class="pl-en"&gt;_&lt;/span&gt; &lt;span class="pl-smi"&gt;dbValues&lt;/span&gt;: [DatabaseValue]) {
        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; At each step, extract string value, if any...&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;        &lt;span class="pl-k"&gt;guard&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; string &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;String&lt;/span&gt;.&lt;span class="pl-c1"&gt;fromDatabaseValue&lt;/span&gt;(dbValues[&lt;span class="pl-c1"&gt;0&lt;/span&gt;]) &lt;span class="pl-k"&gt;else&lt;/span&gt; {
            &lt;span class="pl-k"&gt;return&lt;/span&gt;
        }
        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; ... and update the result&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;        &lt;span class="pl-k"&gt;let&lt;/span&gt; length &lt;span class="pl-k"&gt;=&lt;/span&gt; string.&lt;span class="pl-c1"&gt;count&lt;/span&gt;
        &lt;span class="pl-k"&gt;if&lt;/span&gt; length &lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; maxLength {
            maxLength &lt;span class="pl-k"&gt;=&lt;/span&gt; length
        }
    }
    
    &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;finalize&lt;/span&gt;() &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; DatabaseValueConvertible&lt;span class="pl-k"&gt;?&lt;/span&gt; {
        &lt;span class="pl-k"&gt;return&lt;/span&gt; maxLength
    }
}

&lt;span class="pl-k"&gt;let&lt;/span&gt; maxLength &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;DatabaseFunction&lt;/span&gt;(
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;maxLength&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
    &lt;span class="pl-c1"&gt;argumentCount&lt;/span&gt;: &lt;span class="pl-c1"&gt;1&lt;/span&gt;,
    &lt;span class="pl-c1"&gt;pure&lt;/span&gt;: &lt;span class="pl-c1"&gt;true&lt;/span&gt;,
    &lt;span class="pl-c1"&gt;aggregate&lt;/span&gt;: MaxLength.&lt;span class="pl-k"&gt;self&lt;/span&gt;)

dbQueue.&lt;span class="pl-c1"&gt;add&lt;/span&gt;(&lt;span class="pl-c1"&gt;function&lt;/span&gt;: maxLength)   &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Or dbPool.add(function: ...)&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;try&lt;/span&gt; dbQueue.&lt;span class="pl-smi"&gt;read&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Some Int&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;Int&lt;/span&gt;.&lt;span class="pl-c1"&gt;fetchOne&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SELECT maxLength(name) FROM player&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;span class="pl-k"&gt;!&lt;/span&gt;
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;step&lt;/code&gt; method of the aggregate takes an array of &lt;a href="#databasevalue"&gt;DatabaseValue&lt;/a&gt;. This array contains as many values as the &lt;em&gt;argumentCount&lt;/em&gt; parameter (or any number of values, when &lt;em&gt;argumentCount&lt;/em&gt; is omitted).&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;finalize&lt;/code&gt; method of the aggregate returns the final aggregated &lt;a href="#values"&gt;value&lt;/a&gt; (Bool, Int, String, Date, Swift enums, etc.).&lt;/p&gt;
&lt;p&gt;SQLite has the opportunity to perform additional optimizations when aggregates are "pure", which means that their result only depends on their inputs. So make sure to set the &lt;em&gt;pure&lt;/em&gt; argument to true when possible.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Use custom aggregates in the &lt;a href="#the-query-interface"&gt;query interface&lt;/a&gt;:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; SELECT maxLength("name") FROM player&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; request &lt;span class="pl-k"&gt;=&lt;/span&gt; Player.&lt;span class="pl-c1"&gt;select&lt;/span&gt;(maxLength.&lt;span class="pl-c1"&gt;apply&lt;/span&gt;(nameColumn))
&lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;Int&lt;/span&gt;.&lt;span class="pl-c1"&gt;fetchOne&lt;/span&gt;(db, request) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Int?&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-database-schema-introspection" class="anchor" aria-hidden="true" href="#database-schema-introspection"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Database Schema Introspection&lt;/h2&gt;
&lt;p&gt;GRDB comes with a set of schema introspection methods:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; dbQueue.&lt;span class="pl-smi"&gt;read&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Bool, true if the table exists&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;tableExists&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;player&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; [ColumnInfo], the columns in the table&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;columns&lt;/span&gt;(&lt;span class="pl-c1"&gt;in&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;player&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; PrimaryKeyInfo&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;primaryKey&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;player&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; [ForeignKeyInfo], the foreign keys defined on the table&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;foreignKeys&lt;/span&gt;(&lt;span class="pl-c1"&gt;on&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;player&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; [IndexInfo], the indexes defined on the table&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;indexes&lt;/span&gt;(&lt;span class="pl-c1"&gt;on&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;player&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Bool, true if column(s) is a unique key (primary key or unique index)&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;table&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;player&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;hasUniqueKey&lt;/span&gt;: [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;email&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;])
}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Bool, true if argument is the name of an internal SQLite table&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;Database.&lt;span class="pl-c1"&gt;isSQLiteInternalTable&lt;/span&gt;(&lt;span class="pl-k"&gt;...&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Bool, true if argument is the name of an internal GRDB table&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;Database.&lt;span class="pl-c1"&gt;isGRDBInternalTable&lt;/span&gt;(&lt;span class="pl-k"&gt;...&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-row-adapters" class="anchor" aria-hidden="true" href="#row-adapters"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Row Adapters&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Row adapters let you present database rows in the way expected by the row consumers.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;They basically help two incompatible row interfaces to work together. For example, a row consumer expects a column named "consumed", but the produced row has a column named "produced".&lt;/p&gt;
&lt;p&gt;In this case, the &lt;code&gt;ColumnMapping&lt;/code&gt; row adapter comes in handy:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Fetch a 'produced' column, and consume a 'consumed' column:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; adapter &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;ColumnMapping&lt;/span&gt;([&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;consumed&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;produced&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;])
&lt;span class="pl-k"&gt;let&lt;/span&gt; row &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Row.&lt;span class="pl-c1"&gt;fetchOne&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SELECT 'Hello' AS produced&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;adapter&lt;/span&gt;: adapter)&lt;span class="pl-k"&gt;!&lt;/span&gt;
row[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;consumed&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;] &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; "Hello"&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;row[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;produced&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;] &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; nil&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Row adapters are values that adopt the &lt;a href="http://groue.github.io/GRDB.swift/docs/4.6/Protocols/RowAdapter.html" rel="nofollow"&gt;RowAdapter&lt;/a&gt; protocol. You can implement your own custom adapters (&lt;a href="#what-are-experimental-features"&gt;&lt;strong&gt;&lt;g-emoji class="g-emoji" alias="fire" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f525.png"&gt;🔥&lt;/g-emoji&gt; EXPERIMENTAL&lt;/strong&gt;&lt;/a&gt;), or use one of the four built-in adapters, described below.&lt;/p&gt;
&lt;p&gt;To see how row adapters can be used, see &lt;a href="#joined-queries-support"&gt;Joined Queries Support&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-columnmapping" class="anchor" aria-hidden="true" href="#columnmapping"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;ColumnMapping&lt;/h3&gt;
&lt;p&gt;ColumnMapping renames columns. Build one with a dictionary whose keys are adapted column names, and values the column names in the raw row:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; [newName:"Hello"]&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; adapter &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;ColumnMapping&lt;/span&gt;([&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;newName&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;oldName&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;])
&lt;span class="pl-k"&gt;let&lt;/span&gt; row &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Row.&lt;span class="pl-c1"&gt;fetchOne&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SELECT 'Hello' AS oldName&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;adapter&lt;/span&gt;: adapter)&lt;span class="pl-k"&gt;!&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-suffixrowadapter" class="anchor" aria-hidden="true" href="#suffixrowadapter"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;SuffixRowAdapter&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;SuffixRowAdapter&lt;/code&gt; hides the first columns in a row:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; [b:1 c:2]&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; adapter &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;SuffixRowAdapter&lt;/span&gt;(&lt;span class="pl-c1"&gt;fromIndex&lt;/span&gt;: &lt;span class="pl-c1"&gt;1&lt;/span&gt;)
&lt;span class="pl-k"&gt;let&lt;/span&gt; row &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Row.&lt;span class="pl-c1"&gt;fetchOne&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SELECT 0 AS a, 1 AS b, 2 AS c&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;adapter&lt;/span&gt;: adapter)&lt;span class="pl-k"&gt;!&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-rangerowadapter" class="anchor" aria-hidden="true" href="#rangerowadapter"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;RangeRowAdapter&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;RangeRowAdapter&lt;/code&gt; only exposes a range of columns.&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; [b:1]&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; adapter &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;RangeRowAdapter&lt;/span&gt;(&lt;span class="pl-c1"&gt;1&lt;/span&gt;&lt;span class="pl-k"&gt;..&amp;lt;&lt;/span&gt;&lt;span class="pl-c1"&gt;2&lt;/span&gt;)
&lt;span class="pl-k"&gt;let&lt;/span&gt; row &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Row.&lt;span class="pl-c1"&gt;fetchOne&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SELECT 0 AS a, 1 AS b, 2 AS c&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;adapter&lt;/span&gt;: adapter)&lt;span class="pl-k"&gt;!&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-emptyrowadapter" class="anchor" aria-hidden="true" href="#emptyrowadapter"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;EmptyRowAdapter&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;EmptyRowAdapter&lt;/code&gt; hides all columns.&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; adapter &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;EmptyRowAdapter&lt;/span&gt;()
&lt;span class="pl-k"&gt;let&lt;/span&gt; row &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Row.&lt;span class="pl-c1"&gt;fetchOne&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SELECT 0 AS a, 1 AS b, 2 AS c&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;adapter&lt;/span&gt;: adapter)&lt;span class="pl-k"&gt;!&lt;/span&gt;
row.&lt;span class="pl-c1"&gt;isEmpty&lt;/span&gt; &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; true&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This limit adapter may turn out useful in some narrow use cases. You'll be happy to find it when you need it.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-scopeadapter" class="anchor" aria-hidden="true" href="#scopeadapter"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;ScopeAdapter&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;ScopeAdapter&lt;/code&gt; defines &lt;em&gt;row scopes&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; adapter &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;ScopeAdapter&lt;/span&gt;([
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;left&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;RangeRowAdapter&lt;/span&gt;(&lt;span class="pl-c1"&gt;0&lt;/span&gt;&lt;span class="pl-k"&gt;..&amp;lt;&lt;/span&gt;&lt;span class="pl-c1"&gt;2&lt;/span&gt;),
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;right&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;RangeRowAdapter&lt;/span&gt;(&lt;span class="pl-c1"&gt;2&lt;/span&gt;&lt;span class="pl-k"&gt;..&amp;lt;&lt;/span&gt;&lt;span class="pl-c1"&gt;4&lt;/span&gt;)])
&lt;span class="pl-k"&gt;let&lt;/span&gt; row &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Row.&lt;span class="pl-c1"&gt;fetchOne&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SELECT 0 AS a, 1 AS b, 2 AS c, 3 AS d&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;adapter&lt;/span&gt;: adapter)&lt;span class="pl-k"&gt;!&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ScopeAdapter does not change the columns and values of the fetched row. Instead, it defines &lt;em&gt;scopes&lt;/em&gt;, which you access through the &lt;code&gt;Row.scopes&lt;/code&gt; property:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;row                   &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; [a:0 b:1 c:2 d:3]&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;row.&lt;span class="pl-smi"&gt;scopes&lt;/span&gt;[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;left&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; [a:0 b:1]&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;row.&lt;span class="pl-smi"&gt;scopes&lt;/span&gt;[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;right&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]   &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; [c:2 d:3]&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;row.&lt;span class="pl-smi"&gt;scopes&lt;/span&gt;[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;missing&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;] &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; nil&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Scopes can be nested:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; adapter &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;ScopeAdapter&lt;/span&gt;([
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;left&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;ScopeAdapter&lt;/span&gt;([
        &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;left&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;RangeRowAdapter&lt;/span&gt;(&lt;span class="pl-c1"&gt;0&lt;/span&gt;&lt;span class="pl-k"&gt;..&amp;lt;&lt;/span&gt;&lt;span class="pl-c1"&gt;1&lt;/span&gt;),
        &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;right&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;RangeRowAdapter&lt;/span&gt;(&lt;span class="pl-c1"&gt;1&lt;/span&gt;&lt;span class="pl-k"&gt;..&amp;lt;&lt;/span&gt;&lt;span class="pl-c1"&gt;2&lt;/span&gt;)]),
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;right&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;ScopeAdapter&lt;/span&gt;([
        &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;left&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;RangeRowAdapter&lt;/span&gt;(&lt;span class="pl-c1"&gt;2&lt;/span&gt;&lt;span class="pl-k"&gt;..&amp;lt;&lt;/span&gt;&lt;span class="pl-c1"&gt;3&lt;/span&gt;),
        &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;right&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;RangeRowAdapter&lt;/span&gt;(&lt;span class="pl-c1"&gt;3&lt;/span&gt;&lt;span class="pl-k"&gt;..&amp;lt;&lt;/span&gt;&lt;span class="pl-c1"&gt;4&lt;/span&gt;)])
    ])
&lt;span class="pl-k"&gt;let&lt;/span&gt; row &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Row.&lt;span class="pl-c1"&gt;fetchOne&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SELECT 0 AS a, 1 AS b, 2 AS c, 3 AS d&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;adapter&lt;/span&gt;: adapter)&lt;span class="pl-k"&gt;!&lt;/span&gt;

&lt;span class="pl-k"&gt;let&lt;/span&gt; leftRow &lt;span class="pl-k"&gt;=&lt;/span&gt; row.&lt;span class="pl-smi"&gt;scopes&lt;/span&gt;[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;left&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]&lt;span class="pl-k"&gt;!&lt;/span&gt;
leftRow.&lt;span class="pl-smi"&gt;scopes&lt;/span&gt;[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;left&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; [a:0]&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;leftRow.&lt;span class="pl-smi"&gt;scopes&lt;/span&gt;[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;right&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;] &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; [b:1]&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;let&lt;/span&gt; rightRow &lt;span class="pl-k"&gt;=&lt;/span&gt; row.&lt;span class="pl-smi"&gt;scopes&lt;/span&gt;[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;right&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]&lt;span class="pl-k"&gt;!&lt;/span&gt;
rightRow.&lt;span class="pl-smi"&gt;scopes&lt;/span&gt;[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;left&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; [c:2]&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;rightRow.&lt;span class="pl-smi"&gt;scopes&lt;/span&gt;[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;right&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;] &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; [d:3]&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Any adapter can be extended with scopes:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; baseAdapter &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;RangeRowAdapter&lt;/span&gt;(&lt;span class="pl-c1"&gt;0&lt;/span&gt;&lt;span class="pl-k"&gt;..&amp;lt;&lt;/span&gt;&lt;span class="pl-c1"&gt;2&lt;/span&gt;)
&lt;span class="pl-k"&gt;let&lt;/span&gt; adapter &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;ScopeAdapter&lt;/span&gt;(&lt;span class="pl-c1"&gt;base&lt;/span&gt;: baseAdapter, &lt;span class="pl-c1"&gt;scopes&lt;/span&gt;: [
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;remainder&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;SuffixRowAdapter&lt;/span&gt;(&lt;span class="pl-c1"&gt;fromIndex&lt;/span&gt;: &lt;span class="pl-c1"&gt;2&lt;/span&gt;)])
&lt;span class="pl-k"&gt;let&lt;/span&gt; row &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Row.&lt;span class="pl-c1"&gt;fetchOne&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SELECT 0 AS a, 1 AS b, 2 AS c, 3 AS d&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;adapter&lt;/span&gt;: adapter)&lt;span class="pl-k"&gt;!&lt;/span&gt;

row &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; [a:0 b:1]&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;row.&lt;span class="pl-smi"&gt;scopes&lt;/span&gt;[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;remainder&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;] &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; [c:2 d:3]&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-raw-sqlite-pointers" class="anchor" aria-hidden="true" href="#raw-sqlite-pointers"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Raw SQLite Pointers&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;If not all SQLite APIs are exposed in GRDB, you can still use the &lt;a href="https://www.sqlite.org/c3ref/intro.html" rel="nofollow"&gt;SQLite C Interface&lt;/a&gt; and call &lt;a href="https://www.sqlite.org/c3ref/funclist.html" rel="nofollow"&gt;SQLite C functions&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Those functions are embedded right into the &lt;a href="Documentation/CustomSQLiteBuilds.md"&gt;GRDBCustom&lt;/a&gt; module. Otherwise, you'll need to import &lt;code&gt;SQLite3&lt;/code&gt;, &lt;code&gt;SQLCipher&lt;/code&gt;, or &lt;code&gt;CSQLite&lt;/code&gt;, depending on the GRDB flavor you are using:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift Package Manager&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;CSQLite&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; SQLCipher&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;SQLCipher&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; System SQLite&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;SQLite3&lt;/span&gt;

&lt;span class="pl-k"&gt;let&lt;/span&gt; sqliteVersion &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;String&lt;/span&gt;(&lt;span class="pl-c1"&gt;cString&lt;/span&gt;: &lt;span class="pl-c1"&gt;sqlite3_libversion&lt;/span&gt;())&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Raw pointers to database connections and statements are available through the &lt;code&gt;Database.sqliteConnection&lt;/code&gt; and &lt;code&gt;Statement.sqliteStatement&lt;/code&gt; properties:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; dbQueue.&lt;span class="pl-smi"&gt;read&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; The raw pointer to a database connection:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;let&lt;/span&gt; sqliteConnection &lt;span class="pl-k"&gt;=&lt;/span&gt; db.&lt;span class="pl-smi"&gt;sqliteConnection&lt;/span&gt;

    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; The raw pointer to a statement:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;let&lt;/span&gt; statement &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;makeSelectStatement&lt;/span&gt;(&lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SELECT ...&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    &lt;span class="pl-k"&gt;let&lt;/span&gt; sqliteStatement &lt;span class="pl-k"&gt;=&lt;/span&gt; statement.&lt;span class="pl-smi"&gt;sqliteStatement&lt;/span&gt;
}&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;g-emoji class="g-emoji" alias="point_up" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/261d.png"&gt;☝️&lt;/g-emoji&gt; &lt;strong&gt;Notes&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Those pointers are owned by GRDB: don't close connections or finalize statements created by GRDB.&lt;/li&gt;
&lt;li&gt;GRDB opens SQLite connections in the "&lt;a href="https://www.sqlite.org/threadsafe.html" rel="nofollow"&gt;multi-thread mode&lt;/a&gt;", which (oddly) means that &lt;strong&gt;they are not thread-safe&lt;/strong&gt;. Make sure you touch raw databases and statements inside their dedicated dispatch queues.&lt;/li&gt;
&lt;li&gt;Use the raw SQLite C Interface at your own risk. GRDB won't prevent you from shooting yourself in the foot.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h1&gt;&lt;a id="user-content-records" class="anchor" aria-hidden="true" href="#records"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Records&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;On top of the &lt;a href="#sqlite-api"&gt;SQLite API&lt;/a&gt;, GRDB provides protocols and a class&lt;/strong&gt; that help manipulating database rows as regular objects named "records":&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; dbQueue.&lt;span class="pl-smi"&gt;write&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;if&lt;/span&gt; &lt;span class="pl-k"&gt;var&lt;/span&gt; place &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Place.&lt;span class="pl-c1"&gt;fetchOne&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;key&lt;/span&gt;: &lt;span class="pl-c1"&gt;1&lt;/span&gt;) {
        place.&lt;span class="pl-smi"&gt;isFavorite&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;
        &lt;span class="pl-k"&gt;try&lt;/span&gt; place.&lt;span class="pl-c1"&gt;update&lt;/span&gt;(db)
    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Of course, you need to open a &lt;a href="#database-connections"&gt;database connection&lt;/a&gt;, and &lt;a href="#database-schema"&gt;create database tables&lt;/a&gt; first.&lt;/p&gt;
&lt;p&gt;To define your custom records, you subclass the ready-made &lt;code&gt;Record&lt;/code&gt; class, or you extend your structs and classes with protocols that come with focused sets of features: fetching methods, persistence methods, record comparison...&lt;/p&gt;
&lt;p&gt;Extending structs with record protocols is more "swifty". Subclassing the Record class is more "classic". You can choose either way. See some &lt;a href="#examples-of-record-definitions"&gt;examples of record definitions&lt;/a&gt;, and the &lt;a href="#list-of-record-methods"&gt;list of record methods&lt;/a&gt; for an overview.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;g-emoji class="g-emoji" alias="point_up" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/261d.png"&gt;☝️&lt;/g-emoji&gt; &lt;strong&gt;Note&lt;/strong&gt;: if you are familiar with Core Data's NSManagedObject or Realm's Object, you may experience a cultural shock: GRDB records are not uniqued, do not auto-update, and do not lazy-load. This is both a purpose, and a consequence of protocol-oriented programming. You should read &lt;a href="https://medium.com/@gwendal.roue/how-to-build-an-ios-application-with-sqlite-and-grdb-swift-d023a06c29b3" rel="nofollow"&gt;How to build an iOS application with SQLite and GRDB.swift&lt;/a&gt; for a general introduction.&lt;/p&gt;
&lt;p&gt;&lt;g-emoji class="g-emoji" alias="bulb" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a1.png"&gt;💡&lt;/g-emoji&gt; &lt;strong&gt;Tip&lt;/strong&gt;: after you have read this chapter, check the &lt;a href="Documentation/GoodPracticesForDesigningRecordTypes.md"&gt;Good Practices for Designing Record Types&lt;/a&gt; Guide.&lt;/p&gt;
&lt;p&gt;&lt;g-emoji class="g-emoji" alias="bulb" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a1.png"&gt;💡&lt;/g-emoji&gt; &lt;strong&gt;Tip&lt;/strong&gt;: see the &lt;a href="Documentation/DemoApps/GRDBDemoiOS/README.md"&gt;Demo Application&lt;/a&gt; for a sample app that uses records.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Overview&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#inserting-records"&gt;Inserting Records&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#fetching-records"&gt;Fetching Records&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#updating-records"&gt;Updating Records&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#deleting-records"&gt;Deleting Records&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#counting-records"&gt;Counting Records&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Protocols and the Record Class&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#record-protocols-overview"&gt;Record Protocols Overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#fetchablerecord-protocol"&gt;FetchableRecord Protocol&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tablerecord-protocol"&gt;TableRecord Protocol&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#persistablerecord-protocol"&gt;PersistableRecord Protocol&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#persistence-methods"&gt;Persistence Methods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#customizing-the-persistence-methods"&gt;Customizing the Persistence Methods&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#codable-records"&gt;Codable Records&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#record-class"&gt;Record Class&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#record-comparison"&gt;Record Comparison&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#record-customization-options"&gt;Record Customization Options&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Records in a Glance&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#examples-of-record-definitions"&gt;Examples of Record Definitions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#list-of-record-methods"&gt;List of Record Methods&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-inserting-records" class="anchor" aria-hidden="true" href="#inserting-records"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Inserting Records&lt;/h3&gt;
&lt;p&gt;To insert a record in the database, call the &lt;code&gt;insert&lt;/code&gt; method:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; player &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;Player&lt;/span&gt;(&lt;span class="pl-c1"&gt;name&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Arthur&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;email&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;arthur@example.com&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-k"&gt;try&lt;/span&gt; player.&lt;span class="pl-c1"&gt;insert&lt;/span&gt;(db)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;g-emoji class="g-emoji" alias="point_right" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f449.png"&gt;👉&lt;/g-emoji&gt; &lt;code&gt;insert&lt;/code&gt; is available for subclasses of the &lt;a href="#record-class"&gt;Record&lt;/a&gt; class, and types that adopt the &lt;a href="#persistablerecord-protocol"&gt;PersistableRecord&lt;/a&gt; protocol.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-fetching-records" class="anchor" aria-hidden="true" href="#fetching-records"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Fetching Records&lt;/h3&gt;
&lt;p&gt;To fetch records from the database, call a &lt;a href="#fetching-methods"&gt;fetching method&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; arthur &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Player.&lt;span class="pl-c1"&gt;fetchOne&lt;/span&gt;(db,            &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Player?&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SELECT * FROM players WHERE name = ?&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
    &lt;span class="pl-c1"&gt;arguments&lt;/span&gt;: [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Arthur&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;])

&lt;span class="pl-k"&gt;let&lt;/span&gt; bestPlayers &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Player                    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; [Player]&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    .&lt;span class="pl-c1"&gt;order&lt;/span&gt;(&lt;span class="pl-c1"&gt;Column&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;score&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;).&lt;span class="pl-smi"&gt;desc&lt;/span&gt;)
    .&lt;span class="pl-c1"&gt;limit&lt;/span&gt;(&lt;span class="pl-c1"&gt;10&lt;/span&gt;)
    .&lt;span class="pl-c1"&gt;fetchAll&lt;/span&gt;(db)
    
&lt;span class="pl-k"&gt;let&lt;/span&gt; spain &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Country.&lt;span class="pl-c1"&gt;fetchOne&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;key&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;ES&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Country?&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;g-emoji class="g-emoji" alias="point_right" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f449.png"&gt;👉&lt;/g-emoji&gt; Fetching from raw SQL is available for subclasses of the &lt;a href="#record-class"&gt;Record&lt;/a&gt; class, and types that adopt the &lt;a href="#fetchablerecord-protocol"&gt;FetchableRecord&lt;/a&gt; protocol.&lt;/p&gt;
&lt;p&gt;&lt;g-emoji class="g-emoji" alias="point_right" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f449.png"&gt;👉&lt;/g-emoji&gt; Fetching without SQL, using the &lt;a href="#the-query-interface"&gt;query interface&lt;/a&gt;, is available for subclasses of the &lt;a href="#record-class"&gt;Record&lt;/a&gt; class, and types that adopt both &lt;a href="#fetchablerecord-protocol"&gt;FetchableRecord&lt;/a&gt; and &lt;a href="#tablerecord-protocol"&gt;TableRecord&lt;/a&gt; protocol.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-updating-records" class="anchor" aria-hidden="true" href="#updating-records"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Updating Records&lt;/h3&gt;
&lt;p&gt;To update a record in the database, call the &lt;code&gt;update&lt;/code&gt; method:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;if&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; player &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Player.&lt;span class="pl-c1"&gt;fetchOne&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;key&lt;/span&gt;: &lt;span class="pl-c1"&gt;1&lt;/span&gt;) 
    player.&lt;span class="pl-smi"&gt;score&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;1000&lt;/span&gt;
    &lt;span class="pl-k"&gt;try&lt;/span&gt; player.&lt;span class="pl-c1"&gt;update&lt;/span&gt;(db)
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It is possible to &lt;a href="#record-comparison"&gt;avoid useless updates&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;if&lt;/span&gt; &lt;span class="pl-k"&gt;var&lt;/span&gt; player &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Player.&lt;span class="pl-c1"&gt;fetchOne&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;key&lt;/span&gt;: &lt;span class="pl-c1"&gt;1&lt;/span&gt;) {
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; does not hit the database if score has not changed&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;try&lt;/span&gt; player.&lt;span class="pl-c1"&gt;updateChanges&lt;/span&gt;(db) {
        &lt;span class="pl-c1"&gt;$0&lt;/span&gt;.&lt;span class="pl-smi"&gt;score&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;1000&lt;/span&gt;
    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For batch updates, execute an &lt;a href="#executing-updates"&gt;SQL query&lt;/a&gt;, or see the &lt;a href="#the-query-interface"&gt;query interface&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;execute&lt;/span&gt;(&lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;UPDATE player SET score = score + 1 WHERE team = 'red'&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-k"&gt;try&lt;/span&gt; Player
    .&lt;span class="pl-c1"&gt;filter&lt;/span&gt;(&lt;span class="pl-c1"&gt;Column&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;team&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-k"&gt;==&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;red&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    .&lt;span class="pl-c1"&gt;updateAll&lt;/span&gt;(db, scoreColumn &lt;span class="pl-k"&gt;+=&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;g-emoji class="g-emoji" alias="point_right" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f449.png"&gt;👉&lt;/g-emoji&gt; update methods are available for subclasses of the &lt;a href="#record-class"&gt;Record&lt;/a&gt; class, and types that adopt the &lt;a href="#persistablerecord-protocol"&gt;PersistableRecord&lt;/a&gt; protocol.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-deleting-records" class="anchor" aria-hidden="true" href="#deleting-records"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Deleting Records&lt;/h3&gt;
&lt;p&gt;To delete a record in the database, call the &lt;code&gt;delete&lt;/code&gt; method:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;if&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; player &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Player.&lt;span class="pl-c1"&gt;fetchOne&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;key&lt;/span&gt;: &lt;span class="pl-c1"&gt;1&lt;/span&gt;) {
    &lt;span class="pl-k"&gt;try&lt;/span&gt; player.&lt;span class="pl-c1"&gt;delete&lt;/span&gt;(db)
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can also delete by primary key, or any unique index:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; Player.&lt;span class="pl-c1"&gt;deleteOne&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;key&lt;/span&gt;: &lt;span class="pl-c1"&gt;1&lt;/span&gt;)
&lt;span class="pl-k"&gt;try&lt;/span&gt; Player.&lt;span class="pl-c1"&gt;deleteOne&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;key&lt;/span&gt;: [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;email&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;arthur@example.com&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;])
&lt;span class="pl-k"&gt;try&lt;/span&gt; Country.&lt;span class="pl-c1"&gt;deleteAll&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;keys&lt;/span&gt;: [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;FR&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;US&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;])&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For batch deletes, execute an &lt;a href="#executing-updates"&gt;SQL query&lt;/a&gt;, or see the &lt;a href="#the-query-interface"&gt;query interface&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;execute&lt;/span&gt;(&lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;DELETE player WHERE email IS NULL&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-k"&gt;try&lt;/span&gt; Player
    .&lt;span class="pl-c1"&gt;filter&lt;/span&gt;(&lt;span class="pl-c1"&gt;Column&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;email&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-k"&gt;==&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;)
    .&lt;span class="pl-c1"&gt;deleteAll&lt;/span&gt;(db)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;g-emoji class="g-emoji" alias="point_right" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f449.png"&gt;👉&lt;/g-emoji&gt; delete methods are available for subclasses of the &lt;a href="#record-class"&gt;Record&lt;/a&gt; class, and types that adopt the &lt;a href="#persistablerecord-protocol"&gt;PersistableRecord&lt;/a&gt; protocol.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-counting-records" class="anchor" aria-hidden="true" href="#counting-records"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Counting Records&lt;/h3&gt;
&lt;p&gt;To count records, call the &lt;code&gt;fetchCount&lt;/code&gt; method:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; playerCount&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;Int&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Player.&lt;span class="pl-c1"&gt;fetchCount&lt;/span&gt;(db)

&lt;span class="pl-k"&gt;let&lt;/span&gt; playerWithEmailCount&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;Int&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Player
    .&lt;span class="pl-c1"&gt;filter&lt;/span&gt;(&lt;span class="pl-c1"&gt;Column&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;email&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-k"&gt;==&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;)
    .&lt;span class="pl-c1"&gt;fetchCount&lt;/span&gt;(db)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;g-emoji class="g-emoji" alias="point_right" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f449.png"&gt;👉&lt;/g-emoji&gt; &lt;code&gt;fetchCount&lt;/code&gt; is available for subclasses of the &lt;a href="#record-class"&gt;Record&lt;/a&gt; class, and types that adopt the &lt;a href="#tablerecord-protocol"&gt;TableRecord&lt;/a&gt; protocol.&lt;/p&gt;
&lt;p&gt;Details follow:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#record-protocols-overview"&gt;Record Protocols Overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#fetchablerecord-protocol"&gt;FetchableRecord Protocol&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tablerecord-protocol"&gt;TableRecord Protocol&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#persistablerecord-protocol"&gt;PersistableRecord Protocol&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#codable-records"&gt;Codable Records&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#record-class"&gt;Record Class&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#record-comparison"&gt;Record Comparison&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#record-customization-options"&gt;Record Customization Options&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#examples-of-record-definitions"&gt;Examples of Record Definitions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#list-of-record-methods"&gt;List of Record Methods&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-record-protocols-overview" class="anchor" aria-hidden="true" href="#record-protocols-overview"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Record Protocols Overview&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;GRDB ships with three record protocols&lt;/strong&gt;. Your own types will adopt one or several of them, according to the abilities you want to extend your types with.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#fetchablerecord-protocol"&gt;FetchableRecord&lt;/a&gt; is able to &lt;strong&gt;decode database rows&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;It is always possible to decode rows without this protocol:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;struct&lt;/span&gt; &lt;span class="pl-en"&gt;Place&lt;/span&gt; { &lt;span class="pl-k"&gt;...&lt;/span&gt; }
&lt;span class="pl-k"&gt;try&lt;/span&gt; dbQueue.&lt;span class="pl-smi"&gt;read&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;let&lt;/span&gt; rows &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Row.&lt;span class="pl-c1"&gt;fetchAll&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SELECT * FROM place&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    &lt;span class="pl-k"&gt;let&lt;/span&gt; places&lt;span class="pl-k"&gt;:&lt;/span&gt; [Place] &lt;span class="pl-k"&gt;=&lt;/span&gt; rows.&lt;span class="pl-c1"&gt;map&lt;/span&gt; { row &lt;span class="pl-k"&gt;in&lt;/span&gt;
        &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-c1"&gt;Place&lt;/span&gt;(
            &lt;span class="pl-c1"&gt;id&lt;/span&gt;: row[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;id&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;],
            &lt;span class="pl-c1"&gt;title&lt;/span&gt;: row[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;title&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;],
            &lt;span class="pl-c1"&gt;coordinate&lt;/span&gt;: &lt;span class="pl-c1"&gt;CLLocationCoordinate2D&lt;/span&gt;(
                &lt;span class="pl-c1"&gt;latitude&lt;/span&gt;: row[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;latitude&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;],
                &lt;span class="pl-c1"&gt;longitude&lt;/span&gt;: row[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;longitude&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]))
        )
    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But FetchableRecord lets you write code that is easier to read, and more efficient as well, both in terms of performance and memory usage:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;struct&lt;/span&gt; &lt;span class="pl-en"&gt;Place&lt;/span&gt;: &lt;span class="pl-e"&gt;FetchableRecord &lt;/span&gt;{ &lt;span class="pl-k"&gt;...&lt;/span&gt; }
&lt;span class="pl-k"&gt;try&lt;/span&gt; dbQueue.&lt;span class="pl-smi"&gt;read&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;let&lt;/span&gt; places &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Place.&lt;span class="pl-c1"&gt;fetchAll&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SELECT * FROM place&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
}&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;g-emoji class="g-emoji" alias="bulb" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a1.png"&gt;💡&lt;/g-emoji&gt; &lt;strong&gt;Tip&lt;/strong&gt;: FetchableRecord can derive its implementation from the standard Decodable protocol. See &lt;a href="#codable-records"&gt;Codable Records&lt;/a&gt; for more information.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;FetchableRecord can decode database rows, but it is not able to build SQL requests for you. For that, you also need TableRecord:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#tablerecord-protocol"&gt;TableRecord&lt;/a&gt; is able to &lt;strong&gt;generate SQL queries&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;struct&lt;/span&gt; &lt;span class="pl-en"&gt;Place&lt;/span&gt;: &lt;span class="pl-e"&gt;TableRecord &lt;/span&gt;{ &lt;span class="pl-k"&gt;...&lt;/span&gt; }
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; SELECT * FROM place ORDER BY title&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; request &lt;span class="pl-k"&gt;=&lt;/span&gt; Place.&lt;span class="pl-c1"&gt;order&lt;/span&gt;(&lt;span class="pl-c1"&gt;Column&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;title&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When a type adopts both TableRecord and FetchableRecord, it can load from those requests:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;struct&lt;/span&gt; &lt;span class="pl-en"&gt;Place&lt;/span&gt;: &lt;span class="pl-e"&gt;TableRecord&lt;/span&gt;, &lt;span class="pl-e"&gt;FetchableRecord &lt;/span&gt;{ &lt;span class="pl-k"&gt;...&lt;/span&gt; }
&lt;span class="pl-k"&gt;try&lt;/span&gt; dbQueue.&lt;span class="pl-smi"&gt;read&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;let&lt;/span&gt; places &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Place.&lt;span class="pl-c1"&gt;order&lt;/span&gt;(&lt;span class="pl-c1"&gt;Column&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;title&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)).&lt;span class="pl-c1"&gt;fetchAll&lt;/span&gt;(db)
    &lt;span class="pl-k"&gt;let&lt;/span&gt; paris &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Place.&lt;span class="pl-c1"&gt;fetchOne&lt;/span&gt;(&lt;span class="pl-c1"&gt;key&lt;/span&gt;: &lt;span class="pl-c1"&gt;1&lt;/span&gt;)
}&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#persistablerecord-protocol"&gt;PersistableRecord&lt;/a&gt; is able to &lt;strong&gt;write&lt;/strong&gt;: it can create, update, and delete rows in the database:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;struct&lt;/span&gt; &lt;span class="pl-en"&gt;Place&lt;/span&gt; : &lt;span class="pl-e"&gt;PersistableRecord &lt;/span&gt;{ &lt;span class="pl-k"&gt;...&lt;/span&gt; }
&lt;span class="pl-k"&gt;try&lt;/span&gt; dbQueue.&lt;span class="pl-smi"&gt;write&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;try&lt;/span&gt; Place.&lt;span class="pl-c1"&gt;delete&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;key&lt;/span&gt;: &lt;span class="pl-c1"&gt;1&lt;/span&gt;)
    &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;Place&lt;/span&gt;(&lt;span class="pl-k"&gt;...&lt;/span&gt;).&lt;span class="pl-c1"&gt;insert&lt;/span&gt;(db)
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A persistable record can also &lt;a href="#record-comparison"&gt;compare&lt;/a&gt; itself against other records, and avoid useless database updates.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;g-emoji class="g-emoji" alias="bulb" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a1.png"&gt;💡&lt;/g-emoji&gt; &lt;strong&gt;Tip&lt;/strong&gt;: PersistableRecord can derive its implementation from the standard Encodable protocol. See &lt;a href="#codable-records"&gt;Codable Records&lt;/a&gt; for more information.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-fetchablerecord-protocol" class="anchor" aria-hidden="true" href="#fetchablerecord-protocol"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;FetchableRecord Protocol&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;The FetchableRecord protocol grants fetching methods to any type&lt;/strong&gt; that can be built from a database row:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;protocol&lt;/span&gt; &lt;span class="pl-en"&gt;FetchableRecord&lt;/span&gt; {
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; Row initializer&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;init&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-en"&gt;row&lt;/span&gt;&lt;/span&gt;: Row)
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;To use FetchableRecord&lt;/strong&gt;, subclass the &lt;a href="#record-class"&gt;Record&lt;/a&gt; class, or adopt it explicitly. For example:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;struct&lt;/span&gt; &lt;span class="pl-en"&gt;Place&lt;/span&gt; {
    &lt;span class="pl-k"&gt;var&lt;/span&gt; id&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;Int64&lt;/span&gt;&lt;span class="pl-k"&gt;?&lt;/span&gt;
    &lt;span class="pl-k"&gt;var&lt;/span&gt; title&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;String&lt;/span&gt;
    &lt;span class="pl-k"&gt;var&lt;/span&gt; coordinate&lt;span class="pl-k"&gt;:&lt;/span&gt; CLLocationCoordinate2D
}

&lt;span class="pl-k"&gt;extension&lt;/span&gt; &lt;span class="pl-en"&gt;Place&lt;/span&gt; : &lt;span class="pl-e"&gt;FetchableRecord &lt;/span&gt;{
    &lt;span class="pl-k"&gt;init&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-en"&gt;row&lt;/span&gt;&lt;/span&gt;: Row) {
        id &lt;span class="pl-k"&gt;=&lt;/span&gt; row[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;id&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]
        title &lt;span class="pl-k"&gt;=&lt;/span&gt; row[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;title&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]
        coordinate &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;CLLocationCoordinate2D&lt;/span&gt;(
            &lt;span class="pl-c1"&gt;latitude&lt;/span&gt;: row[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;latitude&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;],
            &lt;span class="pl-c1"&gt;longitude&lt;/span&gt;: row[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;longitude&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;])
    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Rows also accept column enums:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;extension&lt;/span&gt; &lt;span class="pl-en"&gt;Place&lt;/span&gt; : &lt;span class="pl-e"&gt;FetchableRecord &lt;/span&gt;{
    &lt;span class="pl-k"&gt;enum&lt;/span&gt; &lt;span class="pl-en"&gt;Columns&lt;/span&gt;: &lt;span class="pl-e"&gt;&lt;span class="pl-c1"&gt;String&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-e"&gt;ColumnExpression &lt;/span&gt;{
        &lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-c1"&gt;id&lt;/span&gt;, &lt;span class="pl-c1"&gt;title&lt;/span&gt;, &lt;span class="pl-c1"&gt;latitude&lt;/span&gt;, &lt;span class="pl-c1"&gt;longitude&lt;/span&gt;
    }
    
    &lt;span class="pl-k"&gt;init&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-en"&gt;row&lt;/span&gt;&lt;/span&gt;: Row) {
        id &lt;span class="pl-k"&gt;=&lt;/span&gt; row[Columns.&lt;span class="pl-smi"&gt;id&lt;/span&gt;]
        title &lt;span class="pl-k"&gt;=&lt;/span&gt; row[Columns.&lt;span class="pl-smi"&gt;title&lt;/span&gt;]
        coordinate &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;CLLocationCoordinate2D&lt;/span&gt;(
            &lt;span class="pl-c1"&gt;latitude&lt;/span&gt;: row[Columns.&lt;span class="pl-smi"&gt;latitude&lt;/span&gt;],
            &lt;span class="pl-c1"&gt;longitude&lt;/span&gt;: row[Columns.&lt;span class="pl-smi"&gt;longitude&lt;/span&gt;])
    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;See &lt;a href="#column-values"&gt;column values&lt;/a&gt; for more information about the &lt;code&gt;row[]&lt;/code&gt; subscript.&lt;/p&gt;
&lt;p&gt;When your record type adopts the standard Decodable protocol, you don't have to provide the implementation for &lt;code&gt;init(row:)&lt;/code&gt;. See &lt;a href="#codable-records"&gt;Codable Records&lt;/a&gt; for more information:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; That's all&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;struct&lt;/span&gt; &lt;span class="pl-en"&gt;Player&lt;/span&gt;: &lt;span class="pl-e"&gt;Decodable&lt;/span&gt;, &lt;span class="pl-e"&gt;FetchableRecord &lt;/span&gt;{
    &lt;span class="pl-k"&gt;var&lt;/span&gt; id&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;Int64&lt;/span&gt;
    &lt;span class="pl-k"&gt;var&lt;/span&gt; name&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;String&lt;/span&gt;
    &lt;span class="pl-k"&gt;var&lt;/span&gt; score&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;Int&lt;/span&gt;
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;FetchableRecord allows adopting types to be fetched from SQL queries:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; Place.&lt;span class="pl-c1"&gt;fetchCursor&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SELECT ...&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;arguments&lt;/span&gt;:&lt;span class="pl-k"&gt;...&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; A Cursor of Place&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; Place.&lt;span class="pl-c1"&gt;fetchAll&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SELECT ...&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;arguments&lt;/span&gt;:&lt;span class="pl-k"&gt;...&lt;/span&gt;)    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; [Place]&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; Place.&lt;span class="pl-c1"&gt;fetchOne&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SELECT ...&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;arguments&lt;/span&gt;:&lt;span class="pl-k"&gt;...&lt;/span&gt;)    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Place?&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;See &lt;a href="#fetching-methods"&gt;fetching methods&lt;/a&gt; for information about the &lt;code&gt;fetchCursor&lt;/code&gt;, &lt;code&gt;fetchAll&lt;/code&gt; and &lt;code&gt;fetchOne&lt;/code&gt; methods. See &lt;a href="http://groue.github.io/GRDB.swift/docs/4.6/Structs/StatementArguments.html" rel="nofollow"&gt;StatementArguments&lt;/a&gt; for more information about the query arguments.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;g-emoji class="g-emoji" alias="point_up" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/261d.png"&gt;☝️&lt;/g-emoji&gt; &lt;strong&gt;Note&lt;/strong&gt;: for performance reasons, the same row argument to &lt;code&gt;init(row:)&lt;/code&gt; is reused during the iteration of a fetch query. If you want to keep the row for later use, make sure to store a copy: &lt;code&gt;self.row = row.copy()&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;g-emoji class="g-emoji" alias="point_up" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/261d.png"&gt;☝️&lt;/g-emoji&gt; &lt;strong&gt;Note&lt;/strong&gt;: The &lt;code&gt;FetchableRecord.init(row:)&lt;/code&gt; initializer fits the needs of most applications. But some application are more demanding than others. When FetchableRecord does not exactly provide the support you need, have a look at the &lt;a href="#beyond-fetchablerecord"&gt;Beyond FetchableRecord&lt;/a&gt; chapter.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;&lt;a id="user-content-tablerecord-protocol" class="anchor" aria-hidden="true" href="#tablerecord-protocol"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TableRecord Protocol&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;The TableRecord protocol&lt;/strong&gt; generates SQL for you. To use TableRecord, subclass the &lt;a href="#record-class"&gt;Record&lt;/a&gt; class, or adopt it explicitly:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;protocol&lt;/span&gt; &lt;span class="pl-en"&gt;TableRecord&lt;/span&gt; {
    &lt;span class="pl-k"&gt;static&lt;/span&gt; &lt;span class="pl-k"&gt;var&lt;/span&gt; databaseTableName&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;String&lt;/span&gt; { &lt;span class="pl-k"&gt;get&lt;/span&gt; }
    &lt;span class="pl-k"&gt;static&lt;/span&gt; &lt;span class="pl-k"&gt;var&lt;/span&gt; databaseSelection&lt;span class="pl-k"&gt;:&lt;/span&gt; [SQLSelectable] { &lt;span class="pl-k"&gt;get&lt;/span&gt; }
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;databaseSelection&lt;/code&gt; type property is optional, and documented in the &lt;a href="#columns-selected-by-a-request"&gt;Columns Selected by a Request&lt;/a&gt; chapter.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;databaseTableName&lt;/code&gt; type property is the name of a database table. By default, it is derived from the type name:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;struct&lt;/span&gt; &lt;span class="pl-en"&gt;Place&lt;/span&gt;: &lt;span class="pl-e"&gt;TableRecord &lt;/span&gt;{ }
&lt;span class="pl-c1"&gt;print&lt;/span&gt;(Place.&lt;span class="pl-smi"&gt;databaseTableName&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; prints "place"&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Place: &lt;code&gt;place&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Country: &lt;code&gt;country&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;PostalAddress: &lt;code&gt;postalAddress&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;HTTPRequest: &lt;code&gt;httpRequest&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;TOEFL: &lt;code&gt;toefl&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can still provide a custom table name:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;struct&lt;/span&gt; &lt;span class="pl-en"&gt;Place&lt;/span&gt;: &lt;span class="pl-e"&gt;TableRecord &lt;/span&gt;{
    &lt;span class="pl-k"&gt;static&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; databaseTableName &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;location&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
}
&lt;span class="pl-c1"&gt;print&lt;/span&gt;(Place.&lt;span class="pl-smi"&gt;databaseTableName&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; prints "location"&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Subclasses of the &lt;a href="#record-class"&gt;Record&lt;/a&gt; class must always override their superclass's &lt;code&gt;databaseTableName&lt;/code&gt; property:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;Place&lt;/span&gt;: &lt;span class="pl-e"&gt;Record &lt;/span&gt;{
    &lt;span class="pl-k"&gt;override&lt;/span&gt; &lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-k"&gt;var&lt;/span&gt; databaseTableName&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;String&lt;/span&gt; {
        &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;place&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
    }
}
&lt;span class="pl-c1"&gt;print&lt;/span&gt;(Place.&lt;span class="pl-smi"&gt;databaseTableName&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; prints "place"&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When a type adopts both TableRecord and &lt;a href="#fetchablerecord-protocol"&gt;FetchableRecord&lt;/a&gt;, it can be fetched using the &lt;a href="#the-query-interface"&gt;query interface&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; SELECT * FROM place WHERE name = 'Paris'&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; paris &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Place.&lt;span class="pl-c1"&gt;filter&lt;/span&gt;(nameColumn &lt;span class="pl-k"&gt;==&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Paris&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;).&lt;span class="pl-c1"&gt;fetchOne&lt;/span&gt;(db)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;TableRecord can also fetch records by primary key:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; Player.&lt;span class="pl-c1"&gt;fetchOne&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;key&lt;/span&gt;: &lt;span class="pl-c1"&gt;1&lt;/span&gt;)              &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Player?&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; Player.&lt;span class="pl-c1"&gt;fetchAll&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;keys&lt;/span&gt;: [&lt;span class="pl-c1"&gt;1&lt;/span&gt;, &lt;span class="pl-c1"&gt;2&lt;/span&gt;, &lt;span class="pl-c1"&gt;3&lt;/span&gt;])     &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; [Player]&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;try&lt;/span&gt; Country.&lt;span class="pl-c1"&gt;fetchOne&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;key&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;FR&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)          &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Country?&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; Country.&lt;span class="pl-c1"&gt;fetchAll&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;keys&lt;/span&gt;: [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;FR&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;US&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; [Country]&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When the table has no explicit primary key, GRDB uses the &lt;a href="#the-implicit-rowid-primary-key"&gt;hidden "rowid" column&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; SELECT * FROM document WHERE rowid = 1&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; Document.&lt;span class="pl-c1"&gt;fetchOne&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;key&lt;/span&gt;: &lt;span class="pl-c1"&gt;1&lt;/span&gt;)            &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Document?&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For multiple-column primary keys and unique keys defined by unique indexes, provide a dictionary:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; SELECT * FROM citizenship WHERE citizenId = 1 AND countryCode = 'FR'&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; Citizenship.&lt;span class="pl-c1"&gt;fetchOne&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;key&lt;/span&gt;: [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;citizenId&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;countryCode&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;FR&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Citizenship?&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-persistablerecord-protocol" class="anchor" aria-hidden="true" href="#persistablerecord-protocol"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;PersistableRecord Protocol&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;GRDB record types can create, update, and delete rows in the database.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Those abilities are granted by three protocols:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Defines how a record encodes itself into the database&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;protocol&lt;/span&gt; &lt;span class="pl-en"&gt;EncodableRecord&lt;/span&gt; {
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; Defines the values persisted in the database&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;encode&lt;/span&gt;(&lt;span class="pl-en"&gt;to&lt;/span&gt; &lt;span class="pl-smi"&gt;container&lt;/span&gt;: &lt;span class="pl-k"&gt;inout&lt;/span&gt; PersistenceContainer)
}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Adds persistence methods&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;protocol&lt;/span&gt; &lt;span class="pl-en"&gt;MutablePersistableRecord&lt;/span&gt;: &lt;span class="pl-e"&gt;TableRecord&lt;/span&gt;, &lt;span class="pl-e"&gt;EncodableRecord &lt;/span&gt;{
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; Optional method that lets your adopting type store its rowID upon&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; successful insertion. Don't call it directly: it is called for you.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;mutating&lt;/span&gt; &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;didInsert&lt;/span&gt;(&lt;span class="pl-en"&gt;with&lt;/span&gt; &lt;span class="pl-smi"&gt;rowID&lt;/span&gt;: &lt;span class="pl-c1"&gt;Int64&lt;/span&gt;, &lt;span class="pl-en"&gt;for&lt;/span&gt; &lt;span class="pl-smi"&gt;column&lt;/span&gt;: &lt;span class="pl-c1"&gt;String&lt;/span&gt;&lt;span class="pl-k"&gt;?&lt;/span&gt;)
}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Adds immutability&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;protocol&lt;/span&gt; &lt;span class="pl-en"&gt;PersistableRecord&lt;/span&gt;: &lt;span class="pl-e"&gt;MutablePersistableRecord &lt;/span&gt;{
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; Non-mutating version of the optional didInsert(with:for:)&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;didInsert&lt;/span&gt;(&lt;span class="pl-en"&gt;with&lt;/span&gt; &lt;span class="pl-smi"&gt;rowID&lt;/span&gt;: &lt;span class="pl-c1"&gt;Int64&lt;/span&gt;, &lt;span class="pl-en"&gt;for&lt;/span&gt; &lt;span class="pl-smi"&gt;column&lt;/span&gt;: &lt;span class="pl-c1"&gt;String&lt;/span&gt;&lt;span class="pl-k"&gt;?&lt;/span&gt;)
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Yes, three protocols instead of one. Here is how you pick one or the other:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;If your type is a class&lt;/strong&gt;, choose &lt;code&gt;PersistableRecord&lt;/code&gt;. On top of that, implement &lt;code&gt;didInsert(with:for:)&lt;/code&gt; if the database table has an auto-incremented primary key.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;If your type is a struct, and the database table has an auto-incremented primary key&lt;/strong&gt;, choose &lt;code&gt;MutablePersistableRecord&lt;/code&gt;, and implement &lt;code&gt;didInsert(with:for:)&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Otherwise&lt;/strong&gt;, choose &lt;code&gt;PersistableRecord&lt;/code&gt;, and ignore &lt;code&gt;didInsert(with:for:)&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;code&gt;encode(to:)&lt;/code&gt; method defines which &lt;a href="#values"&gt;values&lt;/a&gt; (Bool, Int, String, Date, Swift enums, etc.) are assigned to database columns.&lt;/p&gt;
&lt;p&gt;The optional &lt;code&gt;didInsert&lt;/code&gt; method lets the adopting type store its rowID after successful insertion, and is only useful for tables that have an auto-incremented primary key. It is called from a protected dispatch queue, and serialized with all database updates.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;To use the persistable protocols&lt;/strong&gt;, subclass the &lt;a href="#record-class"&gt;Record&lt;/a&gt; class, or adopt one of them explicitly. For example:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;extension&lt;/span&gt; &lt;span class="pl-en"&gt;Place&lt;/span&gt; : &lt;span class="pl-e"&gt;MutablePersistableRecord &lt;/span&gt;{
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; The values persisted in the database&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;encode&lt;/span&gt;(&lt;span class="pl-en"&gt;to&lt;/span&gt; &lt;span class="pl-smi"&gt;container&lt;/span&gt;: &lt;span class="pl-k"&gt;inout&lt;/span&gt; PersistenceContainer) {
        container[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;id&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;] &lt;span class="pl-k"&gt;=&lt;/span&gt; id
        container[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;title&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;] &lt;span class="pl-k"&gt;=&lt;/span&gt; title
        container[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;latitude&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;] &lt;span class="pl-k"&gt;=&lt;/span&gt; coordinate.&lt;span class="pl-smi"&gt;latitude&lt;/span&gt;
        container[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;longitude&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;] &lt;span class="pl-k"&gt;=&lt;/span&gt; coordinate.&lt;span class="pl-smi"&gt;longitude&lt;/span&gt;
    }
    
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Update auto-incremented id upon successful insertion&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;mutating&lt;/span&gt; &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;didInsert&lt;/span&gt;(&lt;span class="pl-en"&gt;with&lt;/span&gt; &lt;span class="pl-smi"&gt;rowID&lt;/span&gt;: &lt;span class="pl-c1"&gt;Int64&lt;/span&gt;, &lt;span class="pl-en"&gt;for&lt;/span&gt; &lt;span class="pl-smi"&gt;column&lt;/span&gt;: &lt;span class="pl-c1"&gt;String&lt;/span&gt;&lt;span class="pl-k"&gt;?&lt;/span&gt;) {
        id &lt;span class="pl-k"&gt;=&lt;/span&gt; rowID
    }
}

&lt;span class="pl-k"&gt;var&lt;/span&gt; paris &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;Place&lt;/span&gt;(
    &lt;span class="pl-c1"&gt;id&lt;/span&gt;: &lt;span class="pl-c1"&gt;nil&lt;/span&gt;,
    &lt;span class="pl-c1"&gt;title&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Paris&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
    &lt;span class="pl-c1"&gt;coordinate&lt;/span&gt;: &lt;span class="pl-c1"&gt;CLLocationCoordinate2D&lt;/span&gt;(&lt;span class="pl-c1"&gt;latitude&lt;/span&gt;: &lt;span class="pl-c1"&gt;48.8534100&lt;/span&gt;, &lt;span class="pl-c1"&gt;longitude&lt;/span&gt;: &lt;span class="pl-c1"&gt;2.3488000&lt;/span&gt;))

&lt;span class="pl-k"&gt;try&lt;/span&gt; paris.&lt;span class="pl-c1"&gt;insert&lt;/span&gt;(db)
paris.&lt;span class="pl-smi"&gt;id&lt;/span&gt;   &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; some value&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Persistence containers also accept column enums:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;extension&lt;/span&gt; &lt;span class="pl-en"&gt;Place&lt;/span&gt; : &lt;span class="pl-e"&gt;MutablePersistableRecord &lt;/span&gt;{
    &lt;span class="pl-k"&gt;enum&lt;/span&gt; &lt;span class="pl-en"&gt;Columns&lt;/span&gt;: &lt;span class="pl-e"&gt;&lt;span class="pl-c1"&gt;String&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-e"&gt;ColumnExpression &lt;/span&gt;{
        &lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-c1"&gt;id&lt;/span&gt;, &lt;span class="pl-c1"&gt;title&lt;/span&gt;, &lt;span class="pl-c1"&gt;latitude&lt;/span&gt;, &lt;span class="pl-c1"&gt;longitude&lt;/span&gt;
    }
    
    &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;encode&lt;/span&gt;(&lt;span class="pl-en"&gt;to&lt;/span&gt; &lt;span class="pl-smi"&gt;container&lt;/span&gt;: &lt;span class="pl-k"&gt;inout&lt;/span&gt; PersistenceContainer) {
        container[Columns.&lt;span class="pl-smi"&gt;id&lt;/span&gt;] &lt;span class="pl-k"&gt;=&lt;/span&gt; id
        container[Columns.&lt;span class="pl-smi"&gt;title&lt;/span&gt;] &lt;span class="pl-k"&gt;=&lt;/span&gt; title
        container[Columns.&lt;span class="pl-smi"&gt;latitude&lt;/span&gt;] &lt;span class="pl-k"&gt;=&lt;/span&gt; coordinate.&lt;span class="pl-smi"&gt;latitude&lt;/span&gt;
        container[Columns.&lt;span class="pl-smi"&gt;longitude&lt;/span&gt;] &lt;span class="pl-k"&gt;=&lt;/span&gt; coordinate.&lt;span class="pl-smi"&gt;longitude&lt;/span&gt;
    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When your record type adopts the standard Encodable protocol, you don't have to provide the implementation for &lt;code&gt;encode(to:)&lt;/code&gt;. See &lt;a href="#codable-records"&gt;Codable Records&lt;/a&gt; for more information:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; That's all&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;struct&lt;/span&gt; &lt;span class="pl-en"&gt;Player&lt;/span&gt;: &lt;span class="pl-e"&gt;Encodable&lt;/span&gt;, &lt;span class="pl-e"&gt;MutablePersistableRecord &lt;/span&gt;{
    &lt;span class="pl-k"&gt;var&lt;/span&gt; id&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;Int64&lt;/span&gt;&lt;span class="pl-k"&gt;?&lt;/span&gt;
    &lt;span class="pl-k"&gt;var&lt;/span&gt; name&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;String&lt;/span&gt;
    &lt;span class="pl-k"&gt;var&lt;/span&gt; score&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;Int&lt;/span&gt;
    
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Update auto-incremented id upon successful insertion&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;mutating&lt;/span&gt; &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;didInsert&lt;/span&gt;(&lt;span class="pl-en"&gt;with&lt;/span&gt; &lt;span class="pl-smi"&gt;rowID&lt;/span&gt;: &lt;span class="pl-c1"&gt;Int64&lt;/span&gt;, &lt;span class="pl-en"&gt;for&lt;/span&gt; &lt;span class="pl-smi"&gt;column&lt;/span&gt;: &lt;span class="pl-c1"&gt;String&lt;/span&gt;&lt;span class="pl-k"&gt;?&lt;/span&gt;) {
        id &lt;span class="pl-k"&gt;=&lt;/span&gt; rowID
    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-persistence-methods" class="anchor" aria-hidden="true" href="#persistence-methods"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Persistence Methods&lt;/h3&gt;
&lt;p&gt;&lt;a href="#record-class"&gt;Record&lt;/a&gt; subclasses and types that adopt &lt;a href="#persistablerecord-protocol"&gt;PersistableRecord&lt;/a&gt; are given default implementations for methods that insert, update, and delete:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Instance methods&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; place.&lt;span class="pl-c1"&gt;save&lt;/span&gt;(db)                     &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; INSERT or UPDATE&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; place.&lt;span class="pl-c1"&gt;insert&lt;/span&gt;(db)                   &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; INSERT&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; place.&lt;span class="pl-c1"&gt;update&lt;/span&gt;(db)                   &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; UPDATE&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; place.&lt;span class="pl-c1"&gt;update&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;columns&lt;/span&gt;: &lt;span class="pl-k"&gt;...&lt;/span&gt;)     &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; UPDATE&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; place.&lt;span class="pl-c1"&gt;updateChanges&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;from&lt;/span&gt;: &lt;span class="pl-k"&gt;...&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Maybe UPDATE&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; place.&lt;span class="pl-c1"&gt;updateChanges&lt;/span&gt;(db) { &lt;span class="pl-k"&gt;...&lt;/span&gt; }    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Maybe UPDATE&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; place.&lt;span class="pl-c1"&gt;updateChanges&lt;/span&gt;(db)            &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Maybe UPDATE (Record class only)&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; place.&lt;span class="pl-c1"&gt;delete&lt;/span&gt;(db)                   &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; DELETE&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; place.&lt;span class="pl-c1"&gt;exists&lt;/span&gt;(db)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Type methods&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; Place.&lt;span class="pl-c1"&gt;deleteAll&lt;/span&gt;(db)                    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; DELETE&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; Place.&lt;span class="pl-c1"&gt;deleteAll&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;keys&lt;/span&gt;:&lt;span class="pl-k"&gt;...&lt;/span&gt;)          &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; DELETE&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; Place.&lt;span class="pl-c1"&gt;deleteOne&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;key&lt;/span&gt;:&lt;span class="pl-k"&gt;...&lt;/span&gt;)           &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; DELETE&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;insert&lt;/code&gt;, &lt;code&gt;update&lt;/code&gt;, &lt;code&gt;save&lt;/code&gt; and &lt;code&gt;delete&lt;/code&gt; can throw a &lt;a href="#error-handling"&gt;DatabaseError&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;update&lt;/code&gt; and &lt;code&gt;updateChanges&lt;/code&gt; can also throw a &lt;a href="#persistenceerror"&gt;PersistenceError&lt;/a&gt;, should the update fail because there is no matching row in the database.&lt;/p&gt;
&lt;p&gt;When saving an object that may or may not already exist in the database, prefer the &lt;code&gt;save&lt;/code&gt; method:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;save&lt;/code&gt; makes sure your values are stored in the database.&lt;/p&gt;
&lt;p&gt;It performs an UPDATE if the record has a non-null primary key, and then, if no row was modified, an INSERT. It directly perfoms an INSERT if the record has no primary key, or a null primary key.&lt;/p&gt;
&lt;p&gt;Despite the fact that it may execute two SQL statements, &lt;code&gt;save&lt;/code&gt; behaves as an atomic operation: GRDB won't allow any concurrent thread to sneak in (see &lt;a href="#concurrency"&gt;concurrency&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;delete&lt;/code&gt; returns whether a database row was deleted or not.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;All primary keys are supported&lt;/strong&gt;, including composite primary keys that span several columns, and the &lt;a href="#the-implicit-rowid-primary-key"&gt;implicit rowid primary key&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-customizing-the-persistence-methods" class="anchor" aria-hidden="true" href="#customizing-the-persistence-methods"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Customizing the Persistence Methods&lt;/h3&gt;
&lt;p&gt;Your custom type may want to perform extra work when the persistence methods are invoked.&lt;/p&gt;
&lt;p&gt;For example, it may want to have its UUID automatically set before inserting. Or it may want to validate its values before saving.&lt;/p&gt;
&lt;p&gt;When you subclass &lt;a href="#record-class"&gt;Record&lt;/a&gt;, you simply have to override the customized method, and call &lt;code&gt;super&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;Player&lt;/span&gt; : &lt;span class="pl-e"&gt;Record &lt;/span&gt;{
    &lt;span class="pl-k"&gt;var&lt;/span&gt; uuid&lt;span class="pl-k"&gt;:&lt;/span&gt; UUID&lt;span class="pl-k"&gt;?&lt;/span&gt;
    
    &lt;span class="pl-k"&gt;override&lt;/span&gt; &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;insert&lt;/span&gt;(&lt;span class="pl-en"&gt;_&lt;/span&gt; &lt;span class="pl-smi"&gt;db&lt;/span&gt;: Database) &lt;span class="pl-k"&gt;throws&lt;/span&gt; {
        &lt;span class="pl-k"&gt;if&lt;/span&gt; uuid &lt;span class="pl-k"&gt;==&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt; {
            uuid &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;UUID&lt;/span&gt;()
        }
        &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;super&lt;/span&gt;.&lt;span class="pl-c1"&gt;insert&lt;/span&gt;(db)
    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you use the raw &lt;a href="#persistablerecord-protocol"&gt;PersistableRecord&lt;/a&gt; protocol, use one of the &lt;em&gt;special methods&lt;/em&gt; &lt;code&gt;performInsert&lt;/code&gt;, &lt;code&gt;performUpdate&lt;/code&gt;, &lt;code&gt;performSave&lt;/code&gt;, &lt;code&gt;performDelete&lt;/code&gt;, or &lt;code&gt;performExists&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;struct&lt;/span&gt; &lt;span class="pl-en"&gt;Link&lt;/span&gt; : &lt;span class="pl-e"&gt;PersistableRecord &lt;/span&gt;{
    &lt;span class="pl-k"&gt;var&lt;/span&gt; url&lt;span class="pl-k"&gt;:&lt;/span&gt; URL
    
    &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;insert&lt;/span&gt;(&lt;span class="pl-en"&gt;_&lt;/span&gt; &lt;span class="pl-smi"&gt;db&lt;/span&gt;: Database) &lt;span class="pl-k"&gt;throws&lt;/span&gt; {
        &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;validate&lt;/span&gt;()
        &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;performInsert&lt;/span&gt;(db)
    }
    
    &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;update&lt;/span&gt;(&lt;span class="pl-en"&gt;_&lt;/span&gt; &lt;span class="pl-smi"&gt;db&lt;/span&gt;: Database, &lt;span class="pl-smi"&gt;&lt;span class="pl-en"&gt;columns&lt;/span&gt;&lt;/span&gt;: &lt;span class="pl-c1"&gt;Set&lt;/span&gt;&amp;lt;&lt;span class="pl-c1"&gt;String&lt;/span&gt;&amp;gt;) &lt;span class="pl-k"&gt;throws&lt;/span&gt; {
        &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;validate&lt;/span&gt;()
        &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;performUpdate&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;columns&lt;/span&gt;: columns)
    }
    
    &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;validate&lt;/span&gt;() &lt;span class="pl-k"&gt;throws&lt;/span&gt; {
        &lt;span class="pl-k"&gt;if&lt;/span&gt; url.&lt;span class="pl-smi"&gt;host&lt;/span&gt; &lt;span class="pl-k"&gt;==&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt; {
            &lt;span class="pl-k"&gt;throw&lt;/span&gt; &lt;span class="pl-c1"&gt;ValidationError&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;url must be absolute.&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
        }
    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;g-emoji class="g-emoji" alias="point_up" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/261d.png"&gt;☝️&lt;/g-emoji&gt; &lt;strong&gt;Note&lt;/strong&gt;: the special methods &lt;code&gt;performInsert&lt;/code&gt;, &lt;code&gt;performUpdate&lt;/code&gt;, etc. are reserved for your custom implementations. Do not use them elsewhere. Do not provide another implementation for those methods.&lt;/p&gt;
&lt;p&gt;&lt;g-emoji class="g-emoji" alias="point_up" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/261d.png"&gt;☝️&lt;/g-emoji&gt; &lt;strong&gt;Note&lt;/strong&gt;: it is recommended that you do not implement your own version of the &lt;code&gt;save&lt;/code&gt; method. Its default implementation forwards the job to &lt;code&gt;update&lt;/code&gt; or &lt;code&gt;insert&lt;/code&gt;: these are the methods that may need customization, not &lt;code&gt;save&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;&lt;a id="user-content-codable-records" class="anchor" aria-hidden="true" href="#codable-records"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Codable Records&lt;/h2&gt;
&lt;p&gt;Record types that adopt an archival protocol (&lt;a href="https://developer.apple.com/documentation/foundation/archives_and_serialization/encoding_and_decoding_custom_types" rel="nofollow"&gt;Codable, Encodable or Decodable&lt;/a&gt;) get free database support just by declaring conformance to the desired &lt;a href="#record-protocols-overview"&gt;record protocols&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Declare a record...&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;struct&lt;/span&gt; &lt;span class="pl-en"&gt;Player&lt;/span&gt;: &lt;span class="pl-e"&gt;Codable&lt;/span&gt;, &lt;span class="pl-e"&gt;FetchableRecord&lt;/span&gt;, &lt;span class="pl-e"&gt;PersistableRecord &lt;/span&gt;{
    &lt;span class="pl-k"&gt;var&lt;/span&gt; name&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;String&lt;/span&gt;
    &lt;span class="pl-k"&gt;var&lt;/span&gt; score&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;Int&lt;/span&gt;
}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; ...and there you go:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; dbQueue.&lt;span class="pl-smi"&gt;write&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;Player&lt;/span&gt;(&lt;span class="pl-c1"&gt;name&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Arthur&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;score&lt;/span&gt;: &lt;span class="pl-c1"&gt;100&lt;/span&gt;).&lt;span class="pl-c1"&gt;insert&lt;/span&gt;(db)
    &lt;span class="pl-k"&gt;let&lt;/span&gt; players &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Player.&lt;span class="pl-c1"&gt;fetchAll&lt;/span&gt;(db)
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Codable records encode and decode their properties according to their own implementation of the Encodable and Decodable protocols. Yet databases have specific requirements:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Properties are always coded according to their preferred database representation, when they have one (all &lt;a href="#values"&gt;values&lt;/a&gt; that adopt the &lt;a href="#custom-value-types"&gt;DatabaseValueConvertible&lt;/a&gt; protocol).&lt;/li&gt;
&lt;li&gt;You can customize the encoding and decoding of dates and uuids.&lt;/li&gt;
&lt;li&gt;Complex properties (arrays, dictionaries, nested structs, etc.) are stored as JSON.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For more information about Codable records, see:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#json-columns"&gt;JSON Columns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#date-and-uuid-coding-strategies"&gt;Date and UUID Coding Strategies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-userinfo-dictionary"&gt;The userInfo Dictionary&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tip-derive-columns-from-coding-keys"&gt;Tip: Derive Columns from Coding Keys&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;g-emoji class="g-emoji" alias="bulb" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a1.png"&gt;💡&lt;/g-emoji&gt; &lt;strong&gt;Tip&lt;/strong&gt;: see the &lt;a href="Documentation/DemoApps/GRDBDemoiOS/README.md"&gt;Demo Application&lt;/a&gt; for a sample app that uses Codable records.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;&lt;a id="user-content-json-columns" class="anchor" aria-hidden="true" href="#json-columns"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;JSON Columns&lt;/h3&gt;
&lt;p&gt;When a &lt;a href="#codable-records"&gt;Codable record&lt;/a&gt; contains a property that is not a simple &lt;a href="#values"&gt;value&lt;/a&gt; (Bool, Int, String, Date, Swift enums, etc.), that value is encoded and decoded as a &lt;strong&gt;JSON string&lt;/strong&gt;. For example:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;enum&lt;/span&gt; &lt;span class="pl-en"&gt;AchievementColor&lt;/span&gt;: &lt;span class="pl-e"&gt;&lt;span class="pl-c1"&gt;String&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-e"&gt;Codable &lt;/span&gt;{
    &lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-c1"&gt;bronze&lt;/span&gt;, &lt;span class="pl-c1"&gt;silver&lt;/span&gt;, &lt;span class="pl-c1"&gt;gold&lt;/span&gt;
}

&lt;span class="pl-k"&gt;struct&lt;/span&gt; &lt;span class="pl-en"&gt;Achievement&lt;/span&gt;: &lt;span class="pl-e"&gt;Codable &lt;/span&gt;{
    &lt;span class="pl-k"&gt;var&lt;/span&gt; name&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;String&lt;/span&gt;
    &lt;span class="pl-k"&gt;var&lt;/span&gt; color&lt;span class="pl-k"&gt;:&lt;/span&gt; AchievementColor
}

&lt;span class="pl-k"&gt;struct&lt;/span&gt; &lt;span class="pl-en"&gt;Player&lt;/span&gt;: &lt;span class="pl-e"&gt;Codable&lt;/span&gt;, &lt;span class="pl-e"&gt;FetchableRecord&lt;/span&gt;, &lt;span class="pl-e"&gt;PersistableRecord &lt;/span&gt;{
    &lt;span class="pl-k"&gt;var&lt;/span&gt; name&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;String&lt;/span&gt;
    &lt;span class="pl-k"&gt;var&lt;/span&gt; score&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;Int&lt;/span&gt;
    &lt;span class="pl-k"&gt;var&lt;/span&gt; achievements&lt;span class="pl-k"&gt;:&lt;/span&gt; [Achievement] &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; stored in a JSON column&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;}

&lt;span class="pl-k"&gt;try&lt;/span&gt;&lt;span class="pl-k"&gt;!&lt;/span&gt; dbQueue.&lt;span class="pl-smi"&gt;write&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; INSERT INTO player (name, score, achievements)&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; VALUES (&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;   'Arthur',&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;   100,&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;   '[{"color":"gold","name":"Use Codable Records"}]')&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;let&lt;/span&gt; achievement &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;Achievement&lt;/span&gt;(&lt;span class="pl-c1"&gt;name&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Use Codable Records&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;color&lt;/span&gt;: .&lt;span class="pl-smi"&gt;gold&lt;/span&gt;)
    &lt;span class="pl-k"&gt;let&lt;/span&gt; player &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;Player&lt;/span&gt;(&lt;span class="pl-c1"&gt;name&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Arthur&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;score&lt;/span&gt;: &lt;span class="pl-c1"&gt;100&lt;/span&gt;, &lt;span class="pl-c1"&gt;achievements&lt;/span&gt;: [achievement])
    &lt;span class="pl-k"&gt;try&lt;/span&gt; player.&lt;span class="pl-c1"&gt;insert&lt;/span&gt;(db)
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;GRDB uses the standard &lt;a href="https://developer.apple.com/documentation/foundation/jsondecoder" rel="nofollow"&gt;JSONDecoder&lt;/a&gt; and &lt;a href="https://developer.apple.com/documentation/foundation/jsonencoder" rel="nofollow"&gt;JSONEncoder&lt;/a&gt; from Foundation. By default, Data values are handled with the &lt;code&gt;.base64&lt;/code&gt; strategy, Date with the &lt;code&gt;.millisecondsSince1970&lt;/code&gt; strategy, and non conforming floats with the &lt;code&gt;.throw&lt;/code&gt; strategy.&lt;/p&gt;
&lt;p&gt;You can customize the JSON format by implementing those methods:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;protocol&lt;/span&gt; &lt;span class="pl-en"&gt;FetchableRecord&lt;/span&gt; {
    &lt;span class="pl-k"&gt;static&lt;/span&gt; &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;databaseJSONDecoder&lt;/span&gt;(&lt;span class="pl-en"&gt;for&lt;/span&gt; &lt;span class="pl-smi"&gt;column&lt;/span&gt;: &lt;span class="pl-c1"&gt;String&lt;/span&gt;) &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; JSONDecoder
}

&lt;span class="pl-k"&gt;protocol&lt;/span&gt; &lt;span class="pl-en"&gt;EncodableRecord&lt;/span&gt; {
    &lt;span class="pl-k"&gt;static&lt;/span&gt; &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;databaseJSONEncoder&lt;/span&gt;(&lt;span class="pl-en"&gt;for&lt;/span&gt; &lt;span class="pl-smi"&gt;column&lt;/span&gt;: &lt;span class="pl-c1"&gt;String&lt;/span&gt;) &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; JSONEncoder
}&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;g-emoji class="g-emoji" alias="bulb" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a1.png"&gt;💡&lt;/g-emoji&gt; &lt;strong&gt;Tip&lt;/strong&gt;: Make sure you set the JSONEncoder &lt;code&gt;sortedKeys&lt;/code&gt; option, available from iOS 11.0+, macOS 10.13+, tvOS 9.0+ and watchOS 4.0+. This option makes sure that the JSON output is stable. This stability is required for &lt;a href="#record-comparison"&gt;Record Comparison&lt;/a&gt; to work as expected, and database observation tools such as &lt;a href="#valueobservation"&gt;ValueObservation&lt;/a&gt; to accurately recognize changed records.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;&lt;a id="user-content-date-and-uuid-coding-strategies" class="anchor" aria-hidden="true" href="#date-and-uuid-coding-strategies"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Date and UUID Coding Strategies&lt;/h3&gt;
&lt;p&gt;By default, &lt;a href="#codable-records"&gt;Codable Records&lt;/a&gt; encode and decode their Date and UUID properties as described in the general &lt;a href="#date-and-datecomponents"&gt;Date and DateComponents&lt;/a&gt; and &lt;a href="#uuid"&gt;UUID&lt;/a&gt; chapters.&lt;/p&gt;
&lt;p&gt;To sum up: dates encode themselves in the "YYYY-MM-DD HH:MM:SS.SSS" format, in the UTC time zone, and decode a variety of date formats and timestamps. UUIDs encode themselves as 16-bytes data blobs, and decode both 16-bytes data blobs and strings such as "E621E1F8-C36C-495A-93FC-0C247A3E6E5F".&lt;/p&gt;
&lt;p&gt;Those behaviors can be overridden:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;protocol&lt;/span&gt; &lt;span class="pl-en"&gt;FetchableRecord&lt;/span&gt; {
    &lt;span class="pl-k"&gt;static&lt;/span&gt; &lt;span class="pl-k"&gt;var&lt;/span&gt; databaseDateDecodingStrategy&lt;span class="pl-k"&gt;:&lt;/span&gt; DatabaseDateDecodingStrategy { &lt;span class="pl-k"&gt;get&lt;/span&gt; }
}

&lt;span class="pl-k"&gt;protocol&lt;/span&gt; &lt;span class="pl-en"&gt;EncodableRecord&lt;/span&gt; {
    &lt;span class="pl-k"&gt;static&lt;/span&gt; &lt;span class="pl-k"&gt;var&lt;/span&gt; databaseDateEncodingStrategy&lt;span class="pl-k"&gt;:&lt;/span&gt; DatabaseDateEncodingStrategy { &lt;span class="pl-k"&gt;get&lt;/span&gt; }
    &lt;span class="pl-k"&gt;static&lt;/span&gt; &lt;span class="pl-k"&gt;var&lt;/span&gt; databaseUUIDEncodingStrategy&lt;span class="pl-k"&gt;:&lt;/span&gt; DatabaseUUIDEncodingStrategy { &lt;span class="pl-k"&gt;get&lt;/span&gt; }
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;See &lt;a href="https://groue.github.io/GRDB.swift/docs/4.6/Enums/DatabaseDateDecodingStrategy.html" rel="nofollow"&gt;DatabaseDateDecodingStrategy&lt;/a&gt;, &lt;a href="https://groue.github.io/GRDB.swift/docs/4.6/Enums/DatabaseDateEncodingStrategy.html" rel="nofollow"&gt;DatabaseDateEncodingStrategy&lt;/a&gt;, and &lt;a href="https://groue.github.io/GRDB.swift/docs/4.6/Enums/DatabaseUUIDEncodingStrategy.html" rel="nofollow"&gt;DatabaseUUIDEncodingStrategy&lt;/a&gt; to learn about all available strategies.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;g-emoji class="g-emoji" alias="point_up" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/261d.png"&gt;☝️&lt;/g-emoji&gt; &lt;strong&gt;Note&lt;/strong&gt;: there is no customization of uuid decoding, because UUID can already decode all its encoded variants (16-bytes blobs, and uuid strings).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;&lt;a id="user-content-the-userinfo-dictionary" class="anchor" aria-hidden="true" href="#the-userinfo-dictionary"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;The userInfo Dictionary&lt;/h3&gt;
&lt;p&gt;Your &lt;a href="#codable-records"&gt;Codable Records&lt;/a&gt; can be stored in the database, but they may also have other purposes. In this case, you may need to customize their implementations of &lt;code&gt;Decodable.init(from:)&lt;/code&gt; and &lt;code&gt;Encodable.encode(to:)&lt;/code&gt;, depending on the context.&lt;/p&gt;
&lt;p&gt;The standard way to provide such context is the &lt;code&gt;userInfo&lt;/code&gt; dictionary. Implement those properties:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;protocol&lt;/span&gt; &lt;span class="pl-en"&gt;FetchableRecord&lt;/span&gt; {
    &lt;span class="pl-k"&gt;static&lt;/span&gt; &lt;span class="pl-k"&gt;var&lt;/span&gt; databaseDecodingUserInfo&lt;span class="pl-k"&gt;:&lt;/span&gt; [CodingUserInfoKey&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;Any&lt;/span&gt;] { &lt;span class="pl-k"&gt;get&lt;/span&gt; }
}

&lt;span class="pl-k"&gt;protocol&lt;/span&gt; &lt;span class="pl-en"&gt;EncodableRecord&lt;/span&gt; {
    &lt;span class="pl-k"&gt;static&lt;/span&gt; &lt;span class="pl-k"&gt;var&lt;/span&gt; databaseEncodingUserInfo&lt;span class="pl-k"&gt;:&lt;/span&gt; [CodingUserInfoKey&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;Any&lt;/span&gt;] { &lt;span class="pl-k"&gt;get&lt;/span&gt; }
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For example, here is a Player type that customizes its decoding:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; A key that holds a decoder's name&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; decoderName &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;CodingUserInfoKey&lt;/span&gt;(&lt;span class="pl-c1"&gt;rawValue&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;decoderName&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;span class="pl-k"&gt;!&lt;/span&gt;

&lt;span class="pl-k"&gt;struct&lt;/span&gt; &lt;span class="pl-en"&gt;Player&lt;/span&gt;: &lt;span class="pl-e"&gt;FetchableRecord&lt;/span&gt;, &lt;span class="pl-e"&gt;Decodable &lt;/span&gt;{
    &lt;span class="pl-k"&gt;init&lt;/span&gt;(&lt;span class="pl-en"&gt;from&lt;/span&gt; &lt;span class="pl-smi"&gt;decoder&lt;/span&gt;: Decoder) &lt;span class="pl-k"&gt;throws&lt;/span&gt; {
        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Print the decoder name&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;        &lt;span class="pl-k"&gt;let&lt;/span&gt; decoderName &lt;span class="pl-k"&gt;=&lt;/span&gt; decoder.&lt;span class="pl-smi"&gt;userInfo&lt;/span&gt;[decoderName] &lt;span class="pl-k"&gt;as?&lt;/span&gt; &lt;span class="pl-c1"&gt;String&lt;/span&gt;
        &lt;span class="pl-c1"&gt;print&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Decoded from &lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;decoderName &lt;span class="pl-k"&gt;??&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;unknown decoder&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
        &lt;span class="pl-k"&gt;...&lt;/span&gt;
    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can have a specific decoding from JSON...&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; prints "Decoded from JSON"&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; decoder &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;JSONDecoder&lt;/span&gt;()
decoder.&lt;span class="pl-smi"&gt;userInfo&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; [decoderName&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;JSON&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]
&lt;span class="pl-k"&gt;let&lt;/span&gt; player &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; decoder.&lt;span class="pl-c1"&gt;decode&lt;/span&gt;(Player.&lt;span class="pl-k"&gt;self&lt;/span&gt;, &lt;span class="pl-c1"&gt;from&lt;/span&gt;: jsonData)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;... and another one from database rows:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;extension&lt;/span&gt; &lt;span class="pl-en"&gt;Player&lt;/span&gt;: &lt;span class="pl-e"&gt;FetchableRecord &lt;/span&gt;{
    &lt;span class="pl-k"&gt;static&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; databaseDecodingUserInfo&lt;span class="pl-k"&gt;:&lt;/span&gt; [CodingUserInfoKey&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;Any&lt;/span&gt;] &lt;span class="pl-k"&gt;=&lt;/span&gt; [decoderName&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;database row&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]
}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; prints "Decoded from database row"&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; player &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Player.&lt;span class="pl-c1"&gt;fetchOne&lt;/span&gt;(db, &lt;span class="pl-k"&gt;...&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;g-emoji class="g-emoji" alias="point_up" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/261d.png"&gt;☝️&lt;/g-emoji&gt; &lt;strong&gt;Note&lt;/strong&gt;: make sure the &lt;code&gt;databaseDecodingUserInfo&lt;/code&gt; and &lt;code&gt;databaseEncodingUserInfo&lt;/code&gt; properties are explicitly declared as &lt;code&gt;[CodingUserInfoKey: Any]&lt;/code&gt;. If they are not, the Swift compiler may silently miss the protocol requirement, resulting in sticky empty userInfo.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;&lt;a id="user-content-tip-derive-columns-from-coding-keys" class="anchor" aria-hidden="true" href="#tip-derive-columns-from-coding-keys"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tip: Derive Columns from Coding Keys&lt;/h3&gt;
&lt;p&gt;Codable types are granted with a &lt;a href="https://developer.apple.com/documentation/foundation/archives_and_serialization/encoding_and_decoding_custom_types" rel="nofollow"&gt;CodingKeys&lt;/a&gt; enum. You can use them to safely define database columns:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;struct&lt;/span&gt; &lt;span class="pl-en"&gt;Player&lt;/span&gt;: &lt;span class="pl-e"&gt;Codable &lt;/span&gt;{
    &lt;span class="pl-k"&gt;var&lt;/span&gt; id&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;Int64&lt;/span&gt;
    &lt;span class="pl-k"&gt;var&lt;/span&gt; name&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;String&lt;/span&gt;
    &lt;span class="pl-k"&gt;var&lt;/span&gt; score&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;Int&lt;/span&gt;
}

&lt;span class="pl-k"&gt;extension&lt;/span&gt; &lt;span class="pl-en"&gt;Player&lt;/span&gt;: &lt;span class="pl-e"&gt;FetchableRecord&lt;/span&gt;, &lt;span class="pl-e"&gt;PersistableRecord &lt;/span&gt;{
    &lt;span class="pl-k"&gt;enum&lt;/span&gt; &lt;span class="pl-en"&gt;Columns&lt;/span&gt; {
        &lt;span class="pl-k"&gt;static&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; id &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;Column&lt;/span&gt;(CodingKeys.&lt;span class="pl-smi"&gt;id&lt;/span&gt;)
        &lt;span class="pl-k"&gt;static&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; name &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;Column&lt;/span&gt;(CodingKeys.&lt;span class="pl-smi"&gt;name&lt;/span&gt;)
        &lt;span class="pl-k"&gt;static&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; score &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;Column&lt;/span&gt;(CodingKeys.&lt;span class="pl-smi"&gt;score&lt;/span&gt;)
    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;See the &lt;a href="#the-query-interface"&gt;query interface&lt;/a&gt; and &lt;a href="Documentation/GoodPracticesForDesigningRecordTypes.md"&gt;Good Practices for Designing Record Types&lt;/a&gt; for further information.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-record-class" class="anchor" aria-hidden="true" href="#record-class"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Record Class&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Record&lt;/strong&gt; is a class that is designed to be subclassed. It inherits its features from the &lt;a href="#record-protocols-overview"&gt;FetchableRecord, TableRecord, and PersistableRecord&lt;/a&gt; protocols. On top of that, Record instances can compare against previous versions of themselves in order to &lt;a href="#record-comparison"&gt;avoid useless updates&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Record subclasses define their custom database relationship by overriding database methods. For example:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;Place&lt;/span&gt;: &lt;span class="pl-e"&gt;Record &lt;/span&gt;{
    &lt;span class="pl-k"&gt;var&lt;/span&gt; id&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;Int64&lt;/span&gt;&lt;span class="pl-k"&gt;?&lt;/span&gt;
    &lt;span class="pl-k"&gt;var&lt;/span&gt; title&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;String&lt;/span&gt;
    &lt;span class="pl-k"&gt;var&lt;/span&gt; isFavorite&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;Bool&lt;/span&gt;
    &lt;span class="pl-k"&gt;var&lt;/span&gt; coordinate&lt;span class="pl-k"&gt;:&lt;/span&gt; CLLocationCoordinate2D
    
    &lt;span class="pl-k"&gt;init&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-en"&gt;id&lt;/span&gt;&lt;/span&gt;: &lt;span class="pl-c1"&gt;Int64&lt;/span&gt;&lt;span class="pl-k"&gt;?&lt;/span&gt;, &lt;span class="pl-smi"&gt;&lt;span class="pl-en"&gt;title&lt;/span&gt;&lt;/span&gt;: &lt;span class="pl-c1"&gt;String&lt;/span&gt;, &lt;span class="pl-smi"&gt;&lt;span class="pl-en"&gt;isFavorite&lt;/span&gt;&lt;/span&gt;: &lt;span class="pl-c1"&gt;Bool&lt;/span&gt;, &lt;span class="pl-smi"&gt;&lt;span class="pl-en"&gt;coordinate&lt;/span&gt;&lt;/span&gt;: CLLocationCoordinate2D) {
        &lt;span class="pl-c1"&gt;self&lt;/span&gt;.&lt;span class="pl-smi"&gt;id&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; id
        &lt;span class="pl-c1"&gt;self&lt;/span&gt;.&lt;span class="pl-smi"&gt;title&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; title
        &lt;span class="pl-c1"&gt;self&lt;/span&gt;.&lt;span class="pl-smi"&gt;isFavorite&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; isFavorite
        &lt;span class="pl-c1"&gt;self&lt;/span&gt;.&lt;span class="pl-smi"&gt;coordinate&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; coordinate
        &lt;span class="pl-c1"&gt;super&lt;/span&gt;.&lt;span class="pl-k"&gt;init&lt;/span&gt;()
    }
    
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; The table name&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;override&lt;/span&gt; &lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-k"&gt;var&lt;/span&gt; databaseTableName&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;String&lt;/span&gt; {
        &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;place&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
    }
    
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; The table columns&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;enum&lt;/span&gt; &lt;span class="pl-en"&gt;Columns&lt;/span&gt;: &lt;span class="pl-e"&gt;&lt;span class="pl-c1"&gt;String&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-e"&gt;ColumnExpression &lt;/span&gt;{
        &lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-c1"&gt;id&lt;/span&gt;, &lt;span class="pl-c1"&gt;title&lt;/span&gt;, &lt;span class="pl-c1"&gt;favorite&lt;/span&gt;, &lt;span class="pl-c1"&gt;latitude&lt;/span&gt;, &lt;span class="pl-c1"&gt;longitude&lt;/span&gt;
    }
    
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; Creates a record from a database row&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;required&lt;/span&gt; &lt;span class="pl-k"&gt;init&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-en"&gt;row&lt;/span&gt;&lt;/span&gt;: Row) {
        id &lt;span class="pl-k"&gt;=&lt;/span&gt; row[Columns.&lt;span class="pl-smi"&gt;id&lt;/span&gt;]
        title &lt;span class="pl-k"&gt;=&lt;/span&gt; row[Columns.&lt;span class="pl-smi"&gt;title&lt;/span&gt;]
        isFavorite &lt;span class="pl-k"&gt;=&lt;/span&gt; row[Columns.&lt;span class="pl-smi"&gt;favorite&lt;/span&gt;]
        coordinate &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;CLLocationCoordinate2D&lt;/span&gt;(
            &lt;span class="pl-c1"&gt;latitude&lt;/span&gt;: row[Columns.&lt;span class="pl-smi"&gt;latitude&lt;/span&gt;],
            &lt;span class="pl-c1"&gt;longitude&lt;/span&gt;: row[Columns.&lt;span class="pl-smi"&gt;longitude&lt;/span&gt;])
        &lt;span class="pl-c1"&gt;super&lt;/span&gt;.&lt;span class="pl-k"&gt;init&lt;/span&gt;(&lt;span class="pl-c1"&gt;row&lt;/span&gt;: row)
    }
    
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; The values persisted in the database&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;override&lt;/span&gt; &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;encode&lt;/span&gt;(&lt;span class="pl-en"&gt;to&lt;/span&gt; &lt;span class="pl-smi"&gt;container&lt;/span&gt;: &lt;span class="pl-k"&gt;inout&lt;/span&gt; PersistenceContainer) {
        container[Columns.&lt;span class="pl-smi"&gt;id&lt;/span&gt;] &lt;span class="pl-k"&gt;=&lt;/span&gt; id
        container[Columns.&lt;span class="pl-smi"&gt;title&lt;/span&gt;] &lt;span class="pl-k"&gt;=&lt;/span&gt; title
        container[Columns.&lt;span class="pl-smi"&gt;favorite&lt;/span&gt;] &lt;span class="pl-k"&gt;=&lt;/span&gt; isFavorite
        container[Columns.&lt;span class="pl-smi"&gt;latitude&lt;/span&gt;] &lt;span class="pl-k"&gt;=&lt;/span&gt; coordinate.&lt;span class="pl-smi"&gt;latitude&lt;/span&gt;
        container[Columns.&lt;span class="pl-smi"&gt;longitude&lt;/span&gt;] &lt;span class="pl-k"&gt;=&lt;/span&gt; coordinate.&lt;span class="pl-smi"&gt;longitude&lt;/span&gt;
    }
    
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; Update record ID after a successful insertion&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;override&lt;/span&gt; &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;didInsert&lt;/span&gt;(&lt;span class="pl-en"&gt;with&lt;/span&gt; &lt;span class="pl-smi"&gt;rowID&lt;/span&gt;: &lt;span class="pl-c1"&gt;Int64&lt;/span&gt;, &lt;span class="pl-en"&gt;for&lt;/span&gt; &lt;span class="pl-smi"&gt;column&lt;/span&gt;: &lt;span class="pl-c1"&gt;String&lt;/span&gt;&lt;span class="pl-k"&gt;?&lt;/span&gt;) {
        id &lt;span class="pl-k"&gt;=&lt;/span&gt; rowID
    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-record-comparison" class="anchor" aria-hidden="true" href="#record-comparison"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Record Comparison&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Records that adopt the &lt;a href="#persistablerecord-protocol"&gt;EncodableRecord&lt;/a&gt; protocol can compare against other records, or against previous versions of themselves.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This helps avoiding costly UPDATE statements when a record has not been edited.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#the-updatechanges-methods"&gt;The &lt;code&gt;updateChanges&lt;/code&gt; Methods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-databaseequals-method"&gt;The &lt;code&gt;databaseEquals&lt;/code&gt; Method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-databasechanges-and-hasdatabasechanges-methods"&gt;The &lt;code&gt;databaseChanges&lt;/code&gt; and &lt;code&gt;hasDatabaseChanges&lt;/code&gt; Methods&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-the-updatechanges-methods" class="anchor" aria-hidden="true" href="#the-updatechanges-methods"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;The &lt;code&gt;updateChanges&lt;/code&gt; Methods&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;updateChanges&lt;/code&gt; methods perform a database update of the changed columns only (and does nothing if record has no change).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;updateChanges(_:from:)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This method lets you compare two records:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;if&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; oldPlayer &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Player.&lt;span class="pl-c1"&gt;fetchOne&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;key&lt;/span&gt;: &lt;span class="pl-c1"&gt;42&lt;/span&gt;) {
    &lt;span class="pl-k"&gt;var&lt;/span&gt; newPlayer &lt;span class="pl-k"&gt;=&lt;/span&gt; oldPlayer
    newPlayer.&lt;span class="pl-smi"&gt;score&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;100&lt;/span&gt;
    &lt;span class="pl-k"&gt;if&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; newPlayer.&lt;span class="pl-c1"&gt;updateChanges&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;from&lt;/span&gt;: oldPlayer) {
        &lt;span class="pl-c1"&gt;print&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;player was modified, and updated in the database&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    } &lt;span class="pl-k"&gt;else&lt;/span&gt; {
        &lt;span class="pl-c1"&gt;print&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;player was not modified, and database was not hit&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;updateChanges(_:with:)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This method lets you update a record in place:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;if&lt;/span&gt; &lt;span class="pl-k"&gt;var&lt;/span&gt; player &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Player.&lt;span class="pl-c1"&gt;fetchOne&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;key&lt;/span&gt;: &lt;span class="pl-c1"&gt;42&lt;/span&gt;) {
    &lt;span class="pl-k"&gt;let&lt;/span&gt; modified &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; player.&lt;span class="pl-c1"&gt;updateChanges&lt;/span&gt;(db) {
        &lt;span class="pl-c1"&gt;$0&lt;/span&gt;.&lt;span class="pl-smi"&gt;score&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;100&lt;/span&gt;
    }
    &lt;span class="pl-k"&gt;if&lt;/span&gt; modified {
        &lt;span class="pl-c1"&gt;print&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;player was modified, and updated in the database&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    } &lt;span class="pl-k"&gt;else&lt;/span&gt; {
        &lt;span class="pl-c1"&gt;print&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;player was not modified, and database was not hit&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;updateChanges(_:)&lt;/code&gt; (Record class only)&lt;/p&gt;
&lt;p&gt;Instances of the &lt;a href="#record-class"&gt;Record&lt;/a&gt; class are able to compare against themselves, and know if they have changes that have not been saved since the last fetch or saving:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Record class only&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;if&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; player &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Player.&lt;span class="pl-c1"&gt;fetchOne&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;key&lt;/span&gt;: &lt;span class="pl-c1"&gt;42&lt;/span&gt;) {
    player.&lt;span class="pl-smi"&gt;score&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;100&lt;/span&gt;
    &lt;span class="pl-k"&gt;if&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; player.&lt;span class="pl-c1"&gt;updateChanges&lt;/span&gt;(db) {
        &lt;span class="pl-c1"&gt;print&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;player was modified, and updated in the database&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    } &lt;span class="pl-k"&gt;else&lt;/span&gt; {
        &lt;span class="pl-c1"&gt;print&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;player was not modified, and database was not hit&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-the-databaseequals-method" class="anchor" aria-hidden="true" href="#the-databaseequals-method"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;The &lt;code&gt;databaseEquals&lt;/code&gt; Method&lt;/h3&gt;
&lt;p&gt;This method returns whether two records have the same database representation:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; oldPlayer&lt;span class="pl-k"&gt;:&lt;/span&gt; Player &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;...&lt;/span&gt;
&lt;span class="pl-k"&gt;var&lt;/span&gt; newPlayer&lt;span class="pl-k"&gt;:&lt;/span&gt; Player &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;...&lt;/span&gt;
&lt;span class="pl-k"&gt;if&lt;/span&gt; newPlayer.&lt;span class="pl-c1"&gt;databaseEquals&lt;/span&gt;(oldPlayer) &lt;span class="pl-k"&gt;==&lt;/span&gt; &lt;span class="pl-c1"&gt;false&lt;/span&gt; {
    &lt;span class="pl-k"&gt;try&lt;/span&gt; newPlayer.&lt;span class="pl-c1"&gt;save&lt;/span&gt;(db)
}&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;g-emoji class="g-emoji" alias="point_up" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/261d.png"&gt;☝️&lt;/g-emoji&gt; &lt;strong&gt;Note&lt;/strong&gt;: The comparison is performed on the database representation of records. As long as your record type adopts the EncodableRecord protocol, you don't need to care about Equatable.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;&lt;a id="user-content-the-databasechanges-and-hasdatabasechanges-methods" class="anchor" aria-hidden="true" href="#the-databasechanges-and-hasdatabasechanges-methods"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;The &lt;code&gt;databaseChanges&lt;/code&gt; and &lt;code&gt;hasDatabaseChanges&lt;/code&gt; Methods&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;databaseChanges(from:)&lt;/code&gt; returns a dictionary of differences between two records:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; oldPlayer &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;Player&lt;/span&gt;(&lt;span class="pl-c1"&gt;id&lt;/span&gt;: &lt;span class="pl-c1"&gt;1&lt;/span&gt;, &lt;span class="pl-c1"&gt;name&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Arthur&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;score&lt;/span&gt;: &lt;span class="pl-c1"&gt;100&lt;/span&gt;)
&lt;span class="pl-k"&gt;let&lt;/span&gt; newPlayer &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;Player&lt;/span&gt;(&lt;span class="pl-c1"&gt;id&lt;/span&gt;: &lt;span class="pl-c1"&gt;1&lt;/span&gt;, &lt;span class="pl-c1"&gt;name&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Arthur&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;score&lt;/span&gt;: &lt;span class="pl-c1"&gt;1000&lt;/span&gt;)
&lt;span class="pl-k"&gt;for&lt;/span&gt; (column, oldValue) &lt;span class="pl-k"&gt;in&lt;/span&gt; newPlayer.&lt;span class="pl-c1"&gt;databaseChanges&lt;/span&gt;(&lt;span class="pl-c1"&gt;from&lt;/span&gt;: oldPlayer) {
    &lt;span class="pl-c1"&gt;print&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;column&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt; was &lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;oldValue&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
}
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; prints "score was 100"&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;a href="#record-class"&gt;Record&lt;/a&gt; class is able to compare against itself:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Record class only&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; player &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;Player&lt;/span&gt;(&lt;span class="pl-c1"&gt;id&lt;/span&gt;: &lt;span class="pl-c1"&gt;1&lt;/span&gt;, &lt;span class="pl-c1"&gt;name&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Arthur&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;score&lt;/span&gt;: &lt;span class="pl-c1"&gt;100&lt;/span&gt;)
&lt;span class="pl-k"&gt;try&lt;/span&gt; player.&lt;span class="pl-c1"&gt;insert&lt;/span&gt;(db)
player.&lt;span class="pl-smi"&gt;score&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;1000&lt;/span&gt;
&lt;span class="pl-k"&gt;for&lt;/span&gt; (column, oldValue) &lt;span class="pl-k"&gt;in&lt;/span&gt; player.&lt;span class="pl-smi"&gt;databaseChanges&lt;/span&gt; {
    &lt;span class="pl-c1"&gt;print&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;column&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt; was &lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;oldValue&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
}
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; prints "score was 100"&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href="#record-class"&gt;Record&lt;/a&gt; instances also have a &lt;code&gt;hasDatabaseChanges&lt;/code&gt; property:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Record class only&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;player.&lt;span class="pl-smi"&gt;score&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;1000&lt;/span&gt;
&lt;span class="pl-k"&gt;if&lt;/span&gt; player.&lt;span class="pl-smi"&gt;hasDatabaseChanges&lt;/span&gt; {
    &lt;span class="pl-k"&gt;try&lt;/span&gt; player.&lt;span class="pl-c1"&gt;save&lt;/span&gt;(db)
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Record.hasDatabaseChanges&lt;/code&gt; is false after a Record instance has been fetched or saved into the database. Subsequent modifications may set it, or not: &lt;code&gt;hasDatabaseChanges&lt;/code&gt; is based on value comparison. &lt;strong&gt;Setting a property to the same value does not set the changed flag&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; player &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;Player&lt;/span&gt;(&lt;span class="pl-c1"&gt;name&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Barbara&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;score&lt;/span&gt;: &lt;span class="pl-c1"&gt;750&lt;/span&gt;)
player.&lt;span class="pl-smi"&gt;hasDatabaseChanges&lt;/span&gt; &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; true&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;try&lt;/span&gt; player.&lt;span class="pl-c1"&gt;insert&lt;/span&gt;(db)
player.&lt;span class="pl-smi"&gt;hasDatabaseChanges&lt;/span&gt; &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; false&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
player.&lt;span class="pl-smi"&gt;name&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Barbara&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
player.&lt;span class="pl-smi"&gt;hasDatabaseChanges&lt;/span&gt; &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; false&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
player.&lt;span class="pl-smi"&gt;score&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;1000&lt;/span&gt;
player.&lt;span class="pl-smi"&gt;hasDatabaseChanges&lt;/span&gt; &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; true&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;player.&lt;span class="pl-smi"&gt;databaseChanges&lt;/span&gt;    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; ["score": 750]&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For an efficient algorithm which synchronizes the content of a database table with a JSON payload, check &lt;a href="Documentation/Playgrounds/JSONSynchronization.playground/Contents.swift"&gt;JSONSynchronization.playground&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-record-customization-options" class="anchor" aria-hidden="true" href="#record-customization-options"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Record Customization Options&lt;/h2&gt;
&lt;p&gt;GRDB records come with many default behaviors, that are designed to fit most situations. Many of those defaults can be customized for your specific needs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#customizing-the-persistence-methods"&gt;Customizing the Persistence Methods&lt;/a&gt;: define what happens when you call a persistance method such as &lt;code&gt;player.insert(db)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#conflict-resolution"&gt;Conflict Resolution&lt;/a&gt;: Run &lt;code&gt;INSERT OR REPLACE&lt;/code&gt; queries, and generally define what happens when a persistence method violates a unique index.&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-implicit-rowid-primary-key"&gt;The Implicit RowID Primary Key&lt;/a&gt;: all about the special &lt;code&gt;rowid&lt;/code&gt; column.&lt;/li&gt;
&lt;li&gt;&lt;a href="#columns-selected-by-a-request"&gt;Columns Selected by a Request&lt;/a&gt;: define which columns are selected by requests such as &lt;code&gt;Player.fetchAll(db)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="#beyond-fetchablerecord"&gt;Beyond FetchableRecord&lt;/a&gt;: the FetchableRecord protocol is not the end of the story.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="#codable-records"&gt;Codable Records&lt;/a&gt; have a few extra options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#json-columns"&gt;JSON Columns&lt;/a&gt;: control the format of JSON columns.&lt;/li&gt;
&lt;li&gt;&lt;a href="#date-and-uuid-coding-strategies"&gt;Date and UUID Coding Strategies&lt;/a&gt;: control the format of Date and UUID properties in your Codable records.&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-userinfo-dictionary"&gt;The userInfo Dictionary&lt;/a&gt;: adapt your Codable implementation for the database.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-conflict-resolution" class="anchor" aria-hidden="true" href="#conflict-resolution"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Conflict Resolution&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Insertions and updates can create conflicts&lt;/strong&gt;: for example, a query may attempt to insert a duplicate row that violates a unique index.&lt;/p&gt;
&lt;p&gt;Those conflicts normally end with an error. Yet SQLite let you alter the default behavior, and handle conflicts with specific policies. For example, the &lt;code&gt;INSERT OR REPLACE&lt;/code&gt; statement handles conflicts with the "replace" policy which replaces the conflicting row instead of throwing an error.&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://www.sqlite.org/lang_conflict.html" rel="nofollow"&gt;five different policies&lt;/a&gt; are: abort (the default), replace, rollback, fail, and ignore.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SQLite let you specify conflict policies at two different places:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;In the definition of the database table:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; CREATE TABLE player (&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;     id INTEGER PRIMARY KEY AUTOINCREMENT,&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;     email TEXT UNIQUE ON CONFLICT REPLACE&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; )&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;create&lt;/span&gt;(&lt;span class="pl-c1"&gt;table&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;player&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) { t &lt;span class="pl-k"&gt;in&lt;/span&gt;
    t.&lt;span class="pl-c1"&gt;autoIncrementedPrimaryKey&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;id&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    t.&lt;span class="pl-c1"&gt;column&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;email&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, .&lt;span class="pl-c1"&gt;text&lt;/span&gt;).&lt;span class="pl-c1"&gt;unique&lt;/span&gt;(&lt;span class="pl-c1"&gt;onConflict&lt;/span&gt;: .&lt;span class="pl-smi"&gt;replace&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; &amp;lt;--&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Despite the unique index on email, both inserts succeed.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; The second insert replaces the first row:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;execute&lt;/span&gt;(&lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;INSERT INTO player (email) VALUES (?)&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;arguments&lt;/span&gt;: [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;arthur@example.com&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;])
&lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;execute&lt;/span&gt;(&lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;INSERT INTO player (email) VALUES (?)&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;arguments&lt;/span&gt;: [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;arthur@example.com&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;])&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In each modification query:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; CREATE TABLE player (&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;     id INTEGER PRIMARY KEY AUTOINCREMENT,&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;     email TEXT UNIQUE&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; )&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;create&lt;/span&gt;(&lt;span class="pl-c1"&gt;table&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;player&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) { t &lt;span class="pl-k"&gt;in&lt;/span&gt;
    t.&lt;span class="pl-c1"&gt;autoIncrementedPrimaryKey&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;id&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    t.&lt;span class="pl-c1"&gt;column&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;email&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, .&lt;span class="pl-c1"&gt;text&lt;/span&gt;).&lt;span class="pl-c1"&gt;unique&lt;/span&gt;()
}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Again, despite the unique index on email, both inserts succeed.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;execute&lt;/span&gt;(&lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;INSERT OR REPLACE INTO player (email) VALUES (?)&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;arguments&lt;/span&gt;: [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;arthur@example.com&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;])
&lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;execute&lt;/span&gt;(&lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;INSERT OR REPLACE INTO player (email) VALUES (?)&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;arguments&lt;/span&gt;: [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;arthur@example.com&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;])&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When you want to handle conflicts at the query level, specify a custom &lt;code&gt;persistenceConflictPolicy&lt;/code&gt; in your type that adopts the PersistableRecord protocol. It will alter the INSERT and UPDATE queries run by the &lt;code&gt;insert&lt;/code&gt;, &lt;code&gt;update&lt;/code&gt; and &lt;code&gt;save&lt;/code&gt; &lt;a href="#persistence-methods"&gt;persistence methods&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;protocol&lt;/span&gt; &lt;span class="pl-en"&gt;MutablePersistableRecord&lt;/span&gt; {
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; The policy that handles SQLite conflicts when records are&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; inserted or updated.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; This property is optional: its default value uses the ABORT&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; policy for both insertions and updates, so that GRDB generate&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; regular INSERT and UPDATE queries.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;static&lt;/span&gt; &lt;span class="pl-k"&gt;var&lt;/span&gt; persistenceConflictPolicy&lt;span class="pl-k"&gt;:&lt;/span&gt; PersistenceConflictPolicy { &lt;span class="pl-k"&gt;get&lt;/span&gt; }
}

&lt;span class="pl-k"&gt;struct&lt;/span&gt; &lt;span class="pl-en"&gt;Player&lt;/span&gt; : &lt;span class="pl-e"&gt;MutablePersistableRecord &lt;/span&gt;{
    &lt;span class="pl-k"&gt;static&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; persistenceConflictPolicy &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;PersistenceConflictPolicy&lt;/span&gt;(
        &lt;span class="pl-c1"&gt;insert&lt;/span&gt;: .&lt;span class="pl-smi"&gt;replace&lt;/span&gt;,
        &lt;span class="pl-c1"&gt;update&lt;/span&gt;: .&lt;span class="pl-smi"&gt;replace&lt;/span&gt;)
}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; INSERT OR REPLACE INTO player (...) VALUES (...)&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; player.&lt;span class="pl-c1"&gt;insert&lt;/span&gt;(db)&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;g-emoji class="g-emoji" alias="point_up" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/261d.png"&gt;☝️&lt;/g-emoji&gt; &lt;strong&gt;Note&lt;/strong&gt;: the &lt;code&gt;ignore&lt;/code&gt; policy does not play well at all with the &lt;code&gt;didInsert&lt;/code&gt; method which notifies the rowID of inserted records. Choose your poison:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;if you specify the &lt;code&gt;ignore&lt;/code&gt; policy in the database table definition, don't implement the &lt;code&gt;didInsert&lt;/code&gt; method: it will be called with some random id in case of failed insert.&lt;/li&gt;
&lt;li&gt;if you specify the &lt;code&gt;ignore&lt;/code&gt; policy at the query level, the &lt;code&gt;didInsert&lt;/code&gt; method is never called.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;g-emoji class="g-emoji" alias="point_up" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/261d.png"&gt;☝️&lt;/g-emoji&gt; &lt;strong&gt;Note&lt;/strong&gt;: The &lt;code&gt;replace&lt;/code&gt; policy may have to delete rows so that inserts and updates can succeed. Those deletions are not reported to &lt;a href="#transactionobserver-protocol"&gt;transaction observers&lt;/a&gt; (this might change in a future release of SQLite).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;&lt;a id="user-content-the-implicit-rowid-primary-key" class="anchor" aria-hidden="true" href="#the-implicit-rowid-primary-key"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;The Implicit RowID Primary Key&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;All SQLite tables have a primary key.&lt;/strong&gt; Even when the primary key is not explicit:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; No explicit primary key&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;create&lt;/span&gt;(&lt;span class="pl-c1"&gt;table&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;event&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) { t &lt;span class="pl-k"&gt;in&lt;/span&gt;
    t.&lt;span class="pl-c1"&gt;column&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;message&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, .&lt;span class="pl-c1"&gt;text&lt;/span&gt;)
    t.&lt;span class="pl-c1"&gt;column&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;date&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, .&lt;span class="pl-smi"&gt;datetime&lt;/span&gt;)
}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; No way to define an explicit primary key&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;create&lt;/span&gt;(&lt;span class="pl-c1"&gt;virtualTable&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;book&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;using&lt;/span&gt;: &lt;span class="pl-c1"&gt;FTS4&lt;/span&gt;()) { t &lt;span class="pl-k"&gt;in&lt;/span&gt;
    t.&lt;span class="pl-c1"&gt;column&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;title&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    t.&lt;span class="pl-c1"&gt;column&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;author&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    t.&lt;span class="pl-c1"&gt;column&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;body&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The implicit primary key is stored in the hidden column &lt;code&gt;rowid&lt;/code&gt;. Hidden means that &lt;code&gt;SELECT *&lt;/code&gt; does not select it, and yet it can be selected and queried: &lt;code&gt;SELECT *, rowid ... WHERE rowid = 1&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Some GRDB methods will automatically use this hidden column when a table has no explicit primary key:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; SELECT * FROM event WHERE rowid = 1&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; event &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Event.&lt;span class="pl-c1"&gt;fetchOne&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;key&lt;/span&gt;: &lt;span class="pl-c1"&gt;1&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; DELETE FROM book WHERE rowid = 1&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; Book.&lt;span class="pl-c1"&gt;deleteOne&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;key&lt;/span&gt;: &lt;span class="pl-c1"&gt;1&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content-exposing-the-rowid-column" class="anchor" aria-hidden="true" href="#exposing-the-rowid-column"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Exposing the RowID Column&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;By default, a record type that wraps a table without any explicit primary key doesn't know about the hidden rowid column.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Without primary key, records don't have any identity, and the &lt;a href="#persistence-methods"&gt;persistence method&lt;/a&gt; can behave in undesired fashion: &lt;code&gt;update()&lt;/code&gt; throws errors, &lt;code&gt;save()&lt;/code&gt; always performs insertions and may break constraints, &lt;code&gt;exists()&lt;/code&gt; is always false.&lt;/p&gt;
&lt;p&gt;When SQLite won't let you provide an explicit primary key (as in &lt;a href="Documentation/FullTextSearch.md"&gt;full-text&lt;/a&gt; tables, for example), you may want to make your record type fully aware of the hidden rowid column:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Have the &lt;code&gt;databaseSelection&lt;/code&gt; static property (from the &lt;a href="#tablerecord-protocol"&gt;TableRecord&lt;/a&gt; protocol) return the hidden rowid column:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;struct&lt;/span&gt; &lt;span class="pl-en"&gt;Event&lt;/span&gt; : &lt;span class="pl-e"&gt;TableRecord &lt;/span&gt;{
    &lt;span class="pl-k"&gt;static&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; databaseSelection&lt;span class="pl-k"&gt;:&lt;/span&gt; [SQLSelectable] &lt;span class="pl-k"&gt;=&lt;/span&gt; [&lt;span class="pl-c1"&gt;AllColumns&lt;/span&gt;(), Column.&lt;span class="pl-smi"&gt;rowID&lt;/span&gt;]
}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; When you subclass Record, you need an override:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;Book&lt;/span&gt; : &lt;span class="pl-e"&gt;Record &lt;/span&gt;{
    &lt;span class="pl-k"&gt;override&lt;/span&gt; &lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-k"&gt;var&lt;/span&gt; databaseSelection&lt;span class="pl-k"&gt;:&lt;/span&gt; [SQLSelectable] {
        &lt;span class="pl-k"&gt;return&lt;/span&gt; [&lt;span class="pl-c1"&gt;AllColums&lt;/span&gt;(), Column.&lt;span class="pl-smi"&gt;rowID&lt;/span&gt;]
    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;GRDB will then select the &lt;code&gt;rowid&lt;/code&gt; column by default:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; SELECT *, rowid FROM event&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; events &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Event.&lt;span class="pl-c1"&gt;fetchAll&lt;/span&gt;(db)&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Have &lt;code&gt;init(row:)&lt;/code&gt; from the &lt;a href="#fetchablerecord-protocol"&gt;FetchableRecord&lt;/a&gt; protocol consume the "rowid" column:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;struct&lt;/span&gt; &lt;span class="pl-en"&gt;Event&lt;/span&gt; : &lt;span class="pl-e"&gt;FetchableRecord &lt;/span&gt;{
    &lt;span class="pl-k"&gt;var&lt;/span&gt; id&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;Int64&lt;/span&gt;&lt;span class="pl-k"&gt;?&lt;/span&gt;
    
    &lt;span class="pl-k"&gt;init&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-en"&gt;row&lt;/span&gt;&lt;/span&gt;: Row) {
        id &lt;span class="pl-k"&gt;=&lt;/span&gt; row[Column.&lt;span class="pl-smi"&gt;rowID&lt;/span&gt;]
    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Your fetched records will then know their ids:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; event &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Event.&lt;span class="pl-c1"&gt;fetchOne&lt;/span&gt;(db)&lt;span class="pl-k"&gt;!&lt;/span&gt;
event.&lt;span class="pl-smi"&gt;id&lt;/span&gt; &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; some value&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Encode the rowid in &lt;code&gt;encode(to:)&lt;/code&gt;, and keep it in the &lt;code&gt;didInsert(with:for:)&lt;/code&gt; method (both from the &lt;a href="#persistablerecord-protocol"&gt;PersistableRecord and MutablePersistableRecord&lt;/a&gt; protocols):&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;struct&lt;/span&gt; &lt;span class="pl-en"&gt;Event&lt;/span&gt; : &lt;span class="pl-e"&gt;MutablePersistableRecord &lt;/span&gt;{
    &lt;span class="pl-k"&gt;var&lt;/span&gt; id&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;Int64&lt;/span&gt;&lt;span class="pl-k"&gt;?&lt;/span&gt;
    
    &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;encode&lt;/span&gt;(&lt;span class="pl-en"&gt;to&lt;/span&gt; &lt;span class="pl-smi"&gt;container&lt;/span&gt;: &lt;span class="pl-k"&gt;inout&lt;/span&gt; PersistenceContainer) {
        container[Column.&lt;span class="pl-smi"&gt;rowID&lt;/span&gt;] &lt;span class="pl-k"&gt;=&lt;/span&gt; id
        container[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;message&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;] &lt;span class="pl-k"&gt;=&lt;/span&gt; message
        container[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;date&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;] &lt;span class="pl-k"&gt;=&lt;/span&gt; date
    }
    
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Update auto-incremented id upon successful insertion&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;mutating&lt;/span&gt; &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;didInsert&lt;/span&gt;(&lt;span class="pl-en"&gt;with&lt;/span&gt; &lt;span class="pl-smi"&gt;rowID&lt;/span&gt;: &lt;span class="pl-c1"&gt;Int64&lt;/span&gt;, &lt;span class="pl-en"&gt;for&lt;/span&gt; &lt;span class="pl-smi"&gt;column&lt;/span&gt;: &lt;span class="pl-c1"&gt;String&lt;/span&gt;&lt;span class="pl-k"&gt;?&lt;/span&gt;) {
        id &lt;span class="pl-k"&gt;=&lt;/span&gt; rowID
    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You will then be able to track your record ids, update them, or check for their existence:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; event &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;Event&lt;/span&gt;(&lt;span class="pl-c1"&gt;message&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;foo&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;date&lt;/span&gt;: &lt;span class="pl-c1"&gt;Date&lt;/span&gt;())

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Insertion sets the record id:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; event.&lt;span class="pl-c1"&gt;insert&lt;/span&gt;(db)
event.&lt;span class="pl-smi"&gt;id&lt;/span&gt; &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; some value&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Record can be updated:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;event.&lt;span class="pl-smi"&gt;message&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;bar&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;try&lt;/span&gt; event.&lt;span class="pl-c1"&gt;update&lt;/span&gt;(db)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Record knows if it exists:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;event.&lt;span class="pl-c1"&gt;exists&lt;/span&gt;(db) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; true&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;&lt;a id="user-content-beyond-fetchablerecord" class="anchor" aria-hidden="true" href="#beyond-fetchablerecord"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Beyond FetchableRecord&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Some GRDB users eventually discover that the &lt;a href="#fetchablerecord-protocol"&gt;FetchableRecord&lt;/a&gt; protocol does not fit all situations.&lt;/strong&gt; Use cases that are not well handled by FetchableRecord include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Your application needs polymorphic row decoding: it decodes some type or another, depending on the values contained in a database row.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Your application needs to decode rows with a context: each decoded value should be initialized with some extra value that does not come from the database.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Your application needs a record type that supports untrusted databases, and may fail at decoding database rows (throw an error when a row contains invalid values).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Since those use cases are not well handled by FetchableRecord, don't try to implement them on top of this protocol: you'll just fight the framework.&lt;/p&gt;
&lt;p&gt;Instead, please have a look at the &lt;a href="Documentation/Playgrounds/CustomizedDecodingOfDatabaseRows.playground/Contents.swift"&gt;CustomizedDecodingOfDatabaseRows&lt;/a&gt; playground. You'll run some sample code, and learn how to escape FetchableRecord when you need. And remember that leaving FetchableRecord will not deprive you of &lt;a href="#requests"&gt;query interface requests&lt;/a&gt; and generally all SQL generation features of the &lt;a href="#tablerecord-protocol"&gt;TableRecord&lt;/a&gt; and &lt;a href="#persistablerecord-protocol"&gt;PersistableRecord&lt;/a&gt; protocols.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-examples-of-record-definitions" class="anchor" aria-hidden="true" href="#examples-of-record-definitions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Examples of Record Definitions&lt;/h2&gt;
&lt;p&gt;We will show below how to declare a record type for the following database table:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; dbQueue.&lt;span class="pl-smi"&gt;write&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;create&lt;/span&gt;(&lt;span class="pl-c1"&gt;table&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;place&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) { t &lt;span class="pl-k"&gt;in&lt;/span&gt;
        t.&lt;span class="pl-c1"&gt;autoIncrementedPrimaryKey&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;id&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
        t.&lt;span class="pl-c1"&gt;column&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;title&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, .&lt;span class="pl-c1"&gt;text&lt;/span&gt;).&lt;span class="pl-c1"&gt;notNull&lt;/span&gt;()
        t.&lt;span class="pl-c1"&gt;column&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;isFavorite&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, .&lt;span class="pl-smi"&gt;boolean&lt;/span&gt;).&lt;span class="pl-c1"&gt;notNull&lt;/span&gt;().&lt;span class="pl-c1"&gt;defaults&lt;/span&gt;(&lt;span class="pl-c1"&gt;to&lt;/span&gt;: &lt;span class="pl-c1"&gt;false&lt;/span&gt;)
        t.&lt;span class="pl-c1"&gt;column&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;longitude&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, .&lt;span class="pl-c1"&gt;double&lt;/span&gt;).&lt;span class="pl-c1"&gt;notNull&lt;/span&gt;()
        t.&lt;span class="pl-c1"&gt;column&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;latitude&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, .&lt;span class="pl-c1"&gt;double&lt;/span&gt;).&lt;span class="pl-c1"&gt;notNull&lt;/span&gt;()
    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Each one of the three examples below is correct. You will pick one or the other depending on your personal preferences and the requirements of your application:&lt;/p&gt;
&lt;details&gt;
  &lt;summary&gt;Define a Codable struct, and adopt the record protocols you need&lt;/summary&gt;
&lt;p&gt;This is the shortest way to define a record type.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="#record-protocols-overview"&gt;Record Protocols Overview&lt;/a&gt;, and &lt;a href="#codable-records"&gt;Codable Records&lt;/a&gt; for more information.&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;struct&lt;/span&gt; &lt;span class="pl-en"&gt;Place&lt;/span&gt;: &lt;span class="pl-e"&gt;Codable &lt;/span&gt;{
    &lt;span class="pl-k"&gt;var&lt;/span&gt; id&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;Int64&lt;/span&gt;&lt;span class="pl-k"&gt;?&lt;/span&gt;
    &lt;span class="pl-k"&gt;var&lt;/span&gt; title&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;String&lt;/span&gt;
    &lt;span class="pl-k"&gt;var&lt;/span&gt; isFavorite&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;Bool&lt;/span&gt;
    &lt;span class="pl-k"&gt;private&lt;/span&gt; &lt;span class="pl-k"&gt;var&lt;/span&gt; latitude&lt;span class="pl-k"&gt;:&lt;/span&gt; CLLocationDegrees
    &lt;span class="pl-k"&gt;private&lt;/span&gt; &lt;span class="pl-k"&gt;var&lt;/span&gt; longitude&lt;span class="pl-k"&gt;:&lt;/span&gt; CLLocationDegrees
    
    &lt;span class="pl-k"&gt;var&lt;/span&gt; coordinate&lt;span class="pl-k"&gt;:&lt;/span&gt; CLLocationCoordinate2D {
        &lt;span class="pl-k"&gt;get&lt;/span&gt; {
            &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-c1"&gt;CLLocationCoordinate2D&lt;/span&gt;(
                &lt;span class="pl-c1"&gt;latitude&lt;/span&gt;: latitude,
                &lt;span class="pl-c1"&gt;longitude&lt;/span&gt;: longitude)
        }
        &lt;span class="pl-k"&gt;set&lt;/span&gt; {
            latitude &lt;span class="pl-k"&gt;=&lt;/span&gt; newValue.&lt;span class="pl-smi"&gt;latitude&lt;/span&gt;
            longitude &lt;span class="pl-k"&gt;=&lt;/span&gt; newValue.&lt;span class="pl-smi"&gt;longitude&lt;/span&gt;
        }
    }
}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; SQL generation&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;extension&lt;/span&gt; &lt;span class="pl-en"&gt;Place&lt;/span&gt;: &lt;span class="pl-e"&gt;TableRecord &lt;/span&gt;{
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; The table columns&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;enum&lt;/span&gt; &lt;span class="pl-en"&gt;Columns&lt;/span&gt; {
        &lt;span class="pl-k"&gt;static&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; id &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;Column&lt;/span&gt;(CodingKeys.&lt;span class="pl-smi"&gt;id&lt;/span&gt;)
        &lt;span class="pl-k"&gt;static&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; title &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;Column&lt;/span&gt;(CodingKeys.&lt;span class="pl-smi"&gt;title&lt;/span&gt;)
        &lt;span class="pl-k"&gt;static&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; isFavorite &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;Column&lt;/span&gt;(CodingKeys.&lt;span class="pl-smi"&gt;isFavorite&lt;/span&gt;)
        &lt;span class="pl-k"&gt;static&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; latitude &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;Column&lt;/span&gt;(CodingKeys.&lt;span class="pl-smi"&gt;latitude&lt;/span&gt;)
        &lt;span class="pl-k"&gt;static&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; longitude &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;Column&lt;/span&gt;(CodingKeys.&lt;span class="pl-smi"&gt;longitude&lt;/span&gt;)
    }
}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Fetching methods&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;extension&lt;/span&gt; &lt;span class="pl-en"&gt;Place&lt;/span&gt;: &lt;span class="pl-e"&gt;FetchableRecord &lt;/span&gt;{ }

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Persistence methods&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;extension&lt;/span&gt; &lt;span class="pl-en"&gt;Place&lt;/span&gt;: &lt;span class="pl-e"&gt;MutablePersistableRecord &lt;/span&gt;{
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Update auto-incremented id upon successful insertion&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;mutating&lt;/span&gt; &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;didInsert&lt;/span&gt;(&lt;span class="pl-en"&gt;with&lt;/span&gt; &lt;span class="pl-smi"&gt;rowID&lt;/span&gt;: &lt;span class="pl-c1"&gt;Int64&lt;/span&gt;, &lt;span class="pl-en"&gt;for&lt;/span&gt; &lt;span class="pl-smi"&gt;column&lt;/span&gt;: &lt;span class="pl-c1"&gt;String&lt;/span&gt;&lt;span class="pl-k"&gt;?&lt;/span&gt;) {
        id &lt;span class="pl-k"&gt;=&lt;/span&gt; rowID
    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;details&gt;
  &lt;summary&gt;Define a plain struct, and adopt the record protocols you need&lt;/summary&gt;
&lt;p&gt;See the &lt;a href="#record-protocols-overview"&gt;Record Protocols Overview&lt;/a&gt; for more information.&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;struct&lt;/span&gt; &lt;span class="pl-en"&gt;Place&lt;/span&gt; {
    &lt;span class="pl-k"&gt;var&lt;/span&gt; id&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;Int64&lt;/span&gt;&lt;span class="pl-k"&gt;?&lt;/span&gt;
    &lt;span class="pl-k"&gt;var&lt;/span&gt; title&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;String&lt;/span&gt;
    &lt;span class="pl-k"&gt;var&lt;/span&gt; isFavorite&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;Bool&lt;/span&gt;
    &lt;span class="pl-k"&gt;var&lt;/span&gt; coordinate&lt;span class="pl-k"&gt;:&lt;/span&gt; CLLocationCoordinate2D
}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; SQL generation&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;extension&lt;/span&gt; &lt;span class="pl-en"&gt;Place&lt;/span&gt;: &lt;span class="pl-e"&gt;TableRecord &lt;/span&gt;{
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; The table columns&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;enum&lt;/span&gt; &lt;span class="pl-en"&gt;Columns&lt;/span&gt;: &lt;span class="pl-e"&gt;&lt;span class="pl-c1"&gt;String&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-e"&gt;ColumnExpression &lt;/span&gt;{
        &lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-c1"&gt;id&lt;/span&gt;, &lt;span class="pl-c1"&gt;title&lt;/span&gt;, &lt;span class="pl-c1"&gt;isFavorite&lt;/span&gt;, &lt;span class="pl-c1"&gt;latitude&lt;/span&gt;, &lt;span class="pl-c1"&gt;longitude&lt;/span&gt;
    }
}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Fetching methods&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;extension&lt;/span&gt; &lt;span class="pl-en"&gt;Place&lt;/span&gt;: &lt;span class="pl-e"&gt;FetchableRecord &lt;/span&gt;{
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; Creates a record from a database row&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;init&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-en"&gt;row&lt;/span&gt;&lt;/span&gt;: Row) {
        id &lt;span class="pl-k"&gt;=&lt;/span&gt; row[Columns.&lt;span class="pl-smi"&gt;id&lt;/span&gt;]
        title &lt;span class="pl-k"&gt;=&lt;/span&gt; row[Columns.&lt;span class="pl-smi"&gt;title&lt;/span&gt;]
        isFavorite &lt;span class="pl-k"&gt;=&lt;/span&gt; row[Columns.&lt;span class="pl-smi"&gt;isFavorite&lt;/span&gt;]
        coordinate &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;CLLocationCoordinate2D&lt;/span&gt;(
            &lt;span class="pl-c1"&gt;latitude&lt;/span&gt;: row[Columns.&lt;span class="pl-smi"&gt;latitude&lt;/span&gt;],
            &lt;span class="pl-c1"&gt;longitude&lt;/span&gt;: row[Columns.&lt;span class="pl-smi"&gt;longitude&lt;/span&gt;])
    }
}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Persistence methods&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;extension&lt;/span&gt; &lt;span class="pl-en"&gt;Place&lt;/span&gt;: &lt;span class="pl-e"&gt;MutablePersistableRecord &lt;/span&gt;{
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; The values persisted in the database&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;encode&lt;/span&gt;(&lt;span class="pl-en"&gt;to&lt;/span&gt; &lt;span class="pl-smi"&gt;container&lt;/span&gt;: &lt;span class="pl-k"&gt;inout&lt;/span&gt; PersistenceContainer) {
        container[Columns.&lt;span class="pl-smi"&gt;id&lt;/span&gt;] &lt;span class="pl-k"&gt;=&lt;/span&gt; id
        container[Columns.&lt;span class="pl-smi"&gt;title&lt;/span&gt;] &lt;span class="pl-k"&gt;=&lt;/span&gt; title
        container[Columns.&lt;span class="pl-smi"&gt;isFavorite&lt;/span&gt;] &lt;span class="pl-k"&gt;=&lt;/span&gt; isFavorite
        container[Columns.&lt;span class="pl-smi"&gt;latitude&lt;/span&gt;] &lt;span class="pl-k"&gt;=&lt;/span&gt; coordinate.&lt;span class="pl-smi"&gt;latitude&lt;/span&gt;
        container[Columns.&lt;span class="pl-smi"&gt;longitude&lt;/span&gt;] &lt;span class="pl-k"&gt;=&lt;/span&gt; coordinate.&lt;span class="pl-smi"&gt;longitude&lt;/span&gt;
    }
    
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Update auto-incremented id upon successful insertion&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;mutating&lt;/span&gt; &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;didInsert&lt;/span&gt;(&lt;span class="pl-en"&gt;with&lt;/span&gt; &lt;span class="pl-smi"&gt;rowID&lt;/span&gt;: &lt;span class="pl-c1"&gt;Int64&lt;/span&gt;, &lt;span class="pl-en"&gt;for&lt;/span&gt; &lt;span class="pl-smi"&gt;column&lt;/span&gt;: &lt;span class="pl-c1"&gt;String&lt;/span&gt;&lt;span class="pl-k"&gt;?&lt;/span&gt;) {
        id &lt;span class="pl-k"&gt;=&lt;/span&gt; rowID
    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;details&gt;
  &lt;summary&gt;Define a plain struct optimized for fetching performance&lt;/summary&gt;
&lt;p&gt;This struct derives is persistence methpds from the standard Encodable protocol (see &lt;a href="#codable-records"&gt;Codable Records&lt;/a&gt;), but performs optimized row decoding by accessing database columns with numeric indexes.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="#record-protocols-overview"&gt;Record Protocols Overview&lt;/a&gt; for more information.&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;struct&lt;/span&gt; &lt;span class="pl-en"&gt;Place&lt;/span&gt;: &lt;span class="pl-e"&gt;Encodable &lt;/span&gt;{
    &lt;span class="pl-k"&gt;var&lt;/span&gt; id&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;Int64&lt;/span&gt;&lt;span class="pl-k"&gt;?&lt;/span&gt;
    &lt;span class="pl-k"&gt;var&lt;/span&gt; title&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;String&lt;/span&gt;
    &lt;span class="pl-k"&gt;var&lt;/span&gt; isFavorite&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;Bool&lt;/span&gt;
    &lt;span class="pl-k"&gt;private&lt;/span&gt; &lt;span class="pl-k"&gt;var&lt;/span&gt; latitude&lt;span class="pl-k"&gt;:&lt;/span&gt; CLLocationDegrees
    &lt;span class="pl-k"&gt;private&lt;/span&gt; &lt;span class="pl-k"&gt;var&lt;/span&gt; longitude&lt;span class="pl-k"&gt;:&lt;/span&gt; CLLocationDegrees
    
    &lt;span class="pl-k"&gt;var&lt;/span&gt; coordinate&lt;span class="pl-k"&gt;:&lt;/span&gt; CLLocationCoordinate2D {
        &lt;span class="pl-k"&gt;get&lt;/span&gt; {
            &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-c1"&gt;CLLocationCoordinate2D&lt;/span&gt;(
                &lt;span class="pl-c1"&gt;latitude&lt;/span&gt;: latitude,
                &lt;span class="pl-c1"&gt;longitude&lt;/span&gt;: longitude)
        }
        &lt;span class="pl-k"&gt;set&lt;/span&gt; {
            latitude &lt;span class="pl-k"&gt;=&lt;/span&gt; newValue.&lt;span class="pl-smi"&gt;latitude&lt;/span&gt;
            longitude &lt;span class="pl-k"&gt;=&lt;/span&gt; newValue.&lt;span class="pl-smi"&gt;longitude&lt;/span&gt;
        }
    }
}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; SQL generation&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;extension&lt;/span&gt; &lt;span class="pl-en"&gt;Place&lt;/span&gt;: &lt;span class="pl-e"&gt;TableRecord &lt;/span&gt;{
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; The table columns&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;enum&lt;/span&gt; &lt;span class="pl-en"&gt;Columns&lt;/span&gt; {
        &lt;span class="pl-k"&gt;static&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; id &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;Column&lt;/span&gt;(CodingKeys.&lt;span class="pl-smi"&gt;id&lt;/span&gt;)
        &lt;span class="pl-k"&gt;static&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; title &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;Column&lt;/span&gt;(CodingKeys.&lt;span class="pl-smi"&gt;title&lt;/span&gt;)
        &lt;span class="pl-k"&gt;static&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; isFavorite &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;Column&lt;/span&gt;(CodingKeys.&lt;span class="pl-smi"&gt;isFavorite&lt;/span&gt;)
        &lt;span class="pl-k"&gt;static&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; latitude &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;Column&lt;/span&gt;(CodingKeys.&lt;span class="pl-smi"&gt;latitude&lt;/span&gt;)
        &lt;span class="pl-k"&gt;static&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; longitude &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;Column&lt;/span&gt;(CodingKeys.&lt;span class="pl-smi"&gt;longitude&lt;/span&gt;)
    }
    
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; Arrange the selected columns and lock their order&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;static&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; databaseSelection&lt;span class="pl-k"&gt;:&lt;/span&gt; [SQLSelectable] &lt;span class="pl-k"&gt;=&lt;/span&gt; [
        Columns.&lt;span class="pl-smi"&gt;id&lt;/span&gt;,
        Columns.&lt;span class="pl-smi"&gt;title&lt;/span&gt;,
        Columns.&lt;span class="pl-smi"&gt;favorite&lt;/span&gt;,
        Columns.&lt;span class="pl-smi"&gt;latitude&lt;/span&gt;,
        Columns.&lt;span class="pl-smi"&gt;longitude&lt;/span&gt;]
}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Fetching methods&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;extension&lt;/span&gt; &lt;span class="pl-en"&gt;Place&lt;/span&gt;: &lt;span class="pl-e"&gt;FetchableRecord &lt;/span&gt;{
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; Creates a record from a database row&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;init&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-en"&gt;row&lt;/span&gt;&lt;/span&gt;: Row) {
        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; For high performance, use numeric indexes that match the&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; order of Place.databaseSelection&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;        id &lt;span class="pl-k"&gt;=&lt;/span&gt; row[&lt;span class="pl-c1"&gt;0&lt;/span&gt;]
        title &lt;span class="pl-k"&gt;=&lt;/span&gt; row[&lt;span class="pl-c1"&gt;1&lt;/span&gt;]
        isFavorite &lt;span class="pl-k"&gt;=&lt;/span&gt; row[&lt;span class="pl-c1"&gt;2&lt;/span&gt;]
        coordinate &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;CLLocationCoordinate2D&lt;/span&gt;(
            &lt;span class="pl-c1"&gt;latitude&lt;/span&gt;: row[&lt;span class="pl-c1"&gt;3&lt;/span&gt;],
            &lt;span class="pl-c1"&gt;longitude&lt;/span&gt;: row[&lt;span class="pl-c1"&gt;4&lt;/span&gt;])
    }
}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Persistence methods&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;extension&lt;/span&gt; &lt;span class="pl-en"&gt;Place&lt;/span&gt;: &lt;span class="pl-e"&gt;MutablePersistableRecord &lt;/span&gt;{
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Update auto-incremented id upon successful insertion&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;mutating&lt;/span&gt; &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;didInsert&lt;/span&gt;(&lt;span class="pl-en"&gt;with&lt;/span&gt; &lt;span class="pl-smi"&gt;rowID&lt;/span&gt;: &lt;span class="pl-c1"&gt;Int64&lt;/span&gt;, &lt;span class="pl-en"&gt;for&lt;/span&gt; &lt;span class="pl-smi"&gt;column&lt;/span&gt;: &lt;span class="pl-c1"&gt;String&lt;/span&gt;&lt;span class="pl-k"&gt;?&lt;/span&gt;) {
        id &lt;span class="pl-k"&gt;=&lt;/span&gt; rowID
    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;details&gt;
  &lt;summary&gt;Subclass the &lt;code&gt;Record&lt;/code&gt; class&lt;/summary&gt;
&lt;p&gt;See the &lt;a href="#record-class"&gt;Record class&lt;/a&gt; for more information.&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;Place&lt;/span&gt;: &lt;span class="pl-e"&gt;Record &lt;/span&gt;{
    &lt;span class="pl-k"&gt;var&lt;/span&gt; id&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;Int64&lt;/span&gt;&lt;span class="pl-k"&gt;?&lt;/span&gt;
    &lt;span class="pl-k"&gt;var&lt;/span&gt; title&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;String&lt;/span&gt;
    &lt;span class="pl-k"&gt;var&lt;/span&gt; isFavorite&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;Bool&lt;/span&gt;
    &lt;span class="pl-k"&gt;var&lt;/span&gt; coordinate&lt;span class="pl-k"&gt;:&lt;/span&gt; CLLocationCoordinate2D
    
    &lt;span class="pl-k"&gt;init&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-en"&gt;id&lt;/span&gt;&lt;/span&gt;: &lt;span class="pl-c1"&gt;Int64&lt;/span&gt;&lt;span class="pl-k"&gt;?&lt;/span&gt;, &lt;span class="pl-smi"&gt;&lt;span class="pl-en"&gt;title&lt;/span&gt;&lt;/span&gt;: &lt;span class="pl-c1"&gt;String&lt;/span&gt;, &lt;span class="pl-smi"&gt;&lt;span class="pl-en"&gt;isFavorite&lt;/span&gt;&lt;/span&gt;: &lt;span class="pl-c1"&gt;Bool&lt;/span&gt;, &lt;span class="pl-smi"&gt;&lt;span class="pl-en"&gt;coordinate&lt;/span&gt;&lt;/span&gt;: CLLocationCoordinate2D) {
        &lt;span class="pl-c1"&gt;self&lt;/span&gt;.&lt;span class="pl-smi"&gt;id&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; id
        &lt;span class="pl-c1"&gt;self&lt;/span&gt;.&lt;span class="pl-smi"&gt;title&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; title
        &lt;span class="pl-c1"&gt;self&lt;/span&gt;.&lt;span class="pl-smi"&gt;isFavorite&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; isFavorite
        &lt;span class="pl-c1"&gt;self&lt;/span&gt;.&lt;span class="pl-smi"&gt;coordinate&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; coordinate
        &lt;span class="pl-c1"&gt;super&lt;/span&gt;.&lt;span class="pl-k"&gt;init&lt;/span&gt;()
    }
    
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; The table name&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;override&lt;/span&gt; &lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-k"&gt;var&lt;/span&gt; databaseTableName&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;String&lt;/span&gt; {
        &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;place&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
    }
    
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; The table columns&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;enum&lt;/span&gt; &lt;span class="pl-en"&gt;Columns&lt;/span&gt;: &lt;span class="pl-e"&gt;&lt;span class="pl-c1"&gt;String&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-e"&gt;ColumnExpression &lt;/span&gt;{
        &lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-c1"&gt;id&lt;/span&gt;, &lt;span class="pl-c1"&gt;title&lt;/span&gt;, &lt;span class="pl-c1"&gt;isFavorite&lt;/span&gt;, &lt;span class="pl-c1"&gt;latitude&lt;/span&gt;, &lt;span class="pl-c1"&gt;longitude&lt;/span&gt;
    }
    
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; Creates a record from a database row&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;required&lt;/span&gt; &lt;span class="pl-k"&gt;init&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-en"&gt;row&lt;/span&gt;&lt;/span&gt;: Row) {
        id &lt;span class="pl-k"&gt;=&lt;/span&gt; row[Columns.&lt;span class="pl-smi"&gt;id&lt;/span&gt;]
        title &lt;span class="pl-k"&gt;=&lt;/span&gt; row[Columns.&lt;span class="pl-smi"&gt;title&lt;/span&gt;]
        isFavorite &lt;span class="pl-k"&gt;=&lt;/span&gt; row[Columns.&lt;span class="pl-smi"&gt;isFavorite&lt;/span&gt;]
        coordinate &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;CLLocationCoordinate2D&lt;/span&gt;(
            &lt;span class="pl-c1"&gt;latitude&lt;/span&gt;: row[Columns.&lt;span class="pl-smi"&gt;latitude&lt;/span&gt;],
            &lt;span class="pl-c1"&gt;longitude&lt;/span&gt;: row[Columns.&lt;span class="pl-smi"&gt;longitude&lt;/span&gt;])
        &lt;span class="pl-c1"&gt;super&lt;/span&gt;.&lt;span class="pl-k"&gt;init&lt;/span&gt;(&lt;span class="pl-c1"&gt;row&lt;/span&gt;: row)
    }
    
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; The values persisted in the database&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;override&lt;/span&gt; &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;encode&lt;/span&gt;(&lt;span class="pl-en"&gt;to&lt;/span&gt; &lt;span class="pl-smi"&gt;container&lt;/span&gt;: &lt;span class="pl-k"&gt;inout&lt;/span&gt; PersistenceContainer) {
        container[Columns.&lt;span class="pl-smi"&gt;id&lt;/span&gt;] &lt;span class="pl-k"&gt;=&lt;/span&gt; id
        container[Columns.&lt;span class="pl-smi"&gt;title&lt;/span&gt;] &lt;span class="pl-k"&gt;=&lt;/span&gt; title
        container[Columns.&lt;span class="pl-smi"&gt;isFavorite&lt;/span&gt;] &lt;span class="pl-k"&gt;=&lt;/span&gt; isFavorite
        container[Columns.&lt;span class="pl-smi"&gt;latitude&lt;/span&gt;] &lt;span class="pl-k"&gt;=&lt;/span&gt; coordinate.&lt;span class="pl-smi"&gt;latitude&lt;/span&gt;
        container[Columns.&lt;span class="pl-smi"&gt;longitude&lt;/span&gt;] &lt;span class="pl-k"&gt;=&lt;/span&gt; coordinate.&lt;span class="pl-smi"&gt;longitude&lt;/span&gt;
    }
    
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Update auto-incremented id upon successful insertion&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;override&lt;/span&gt; &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;didInsert&lt;/span&gt;(&lt;span class="pl-en"&gt;with&lt;/span&gt; &lt;span class="pl-smi"&gt;rowID&lt;/span&gt;: &lt;span class="pl-c1"&gt;Int64&lt;/span&gt;, &lt;span class="pl-en"&gt;for&lt;/span&gt; &lt;span class="pl-smi"&gt;column&lt;/span&gt;: &lt;span class="pl-c1"&gt;String&lt;/span&gt;&lt;span class="pl-k"&gt;?&lt;/span&gt;) {
        id &lt;span class="pl-k"&gt;=&lt;/span&gt; rowID
    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;h2&gt;&lt;a id="user-content-list-of-record-methods" class="anchor" aria-hidden="true" href="#list-of-record-methods"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;List of Record Methods&lt;/h2&gt;
&lt;p&gt;This is the list of record methods, along with their required protocols. The &lt;a href="#record-class"&gt;Record&lt;/a&gt; class adopts all these protocols, and adds a few extra methods.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Method&lt;/th&gt;
&lt;th&gt;Protocols&lt;/th&gt;
&lt;th align="center"&gt;Notes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Core Methods&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;init(row:)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="#fetchablerecord-protocol"&gt;FetchableRecord&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Type.databaseTableName&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="#tablerecord-protocol"&gt;TableRecord&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Type.databaseSelection&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="#tablerecord-protocol"&gt;TableRecord&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;a href="#columns-selected-by-a-request"&gt;*&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Type.persistenceConflictPolicy&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="#persistablerecord-protocol"&gt;PersistableRecord&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;a href="#conflict-resolution"&gt;*&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;record.encode(to:)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="#persistablerecord-protocol"&gt;EncodableRecord&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;record.didInsert(with:for:)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="#persistablerecord-protocol"&gt;PersistableRecord&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Insert and Update Records&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;record.insert(db)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="#persistablerecord-protocol"&gt;PersistableRecord&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;record.save(db)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="#persistablerecord-protocol"&gt;PersistableRecord&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;record.update(db)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="#persistablerecord-protocol"&gt;PersistableRecord&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;record.update(db, columns:...)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="#persistablerecord-protocol"&gt;PersistableRecord&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;record.updateChanges(db, from:...)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="#persistablerecord-protocol"&gt;PersistableRecord&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;a href="#record-comparison"&gt;*&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;record.updateChanges(db) { ... }&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="#persistablerecord-protocol"&gt;PersistableRecord&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;a href="#record-comparison"&gt;*&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;record.updateChanges(db)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="#record-class"&gt;Record&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;a href="#record-comparison"&gt;*&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Type.updateAll(db, ...)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="#persistablerecord-protocol"&gt;PersistableRecord&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Type.filter(...).updateAll(db, ...)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="#persistablerecord-protocol"&gt;PersistableRecord&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;a href="#list-of-record-methods-2"&gt;²&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Delete Records&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;record.delete(db)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="#persistablerecord-protocol"&gt;PersistableRecord&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Type.deleteOne(db, key:...)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="#persistablerecord-protocol"&gt;PersistableRecord&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;a href="#list-of-record-methods-1"&gt;¹&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Type.deleteAll(db)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="#persistablerecord-protocol"&gt;PersistableRecord&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Type.deleteAll(db, keys:...)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="#persistablerecord-protocol"&gt;PersistableRecord&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;a href="#list-of-record-methods-1"&gt;¹&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Type.filter(...).deleteAll(db)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="#persistablerecord-protocol"&gt;PersistableRecord&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;a href="#list-of-record-methods-2"&gt;²&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Check Record Existence&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;record.exists(db)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="#persistablerecord-protocol"&gt;PersistableRecord&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Convert Record to Dictionary&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;record.databaseDictionary&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="#persistablerecord-protocol"&gt;EncodableRecord&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Count Records&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Type.fetchCount(db)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="#tablerecord-protocol"&gt;TableRecord&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Type.filter(...).fetchCount(db)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="#tablerecord-protocol"&gt;TableRecord&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;a href="#list-of-record-methods-2"&gt;²&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Fetch Record &lt;a href="#cursors"&gt;Cursors&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Type.fetchCursor(db)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="#fetchablerecord-protocol"&gt;FetchableRecord&lt;/a&gt; &amp;amp; &lt;a href="#tablerecord-protocol"&gt;TableRecord&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Type.fetchCursor(db, keys:...)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="#fetchablerecord-protocol"&gt;FetchableRecord&lt;/a&gt; &amp;amp; &lt;a href="#tablerecord-protocol"&gt;TableRecord&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;a href="#list-of-record-methods-1"&gt;¹&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Type.fetchCursor(db, sql: sql)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="#fetchablerecord-protocol"&gt;FetchableRecord&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;a href="#list-of-record-methods-3"&gt;³&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Type.fetchCursor(statement)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="#fetchablerecord-protocol"&gt;FetchableRecord&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;a href="#list-of-record-methods-4"&gt;⁴&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Type.filter(...).fetchCursor(db)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="#fetchablerecord-protocol"&gt;FetchableRecord&lt;/a&gt; &amp;amp; &lt;a href="#tablerecord-protocol"&gt;TableRecord&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;a href="#list-of-record-methods-2"&gt;²&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Fetch Record Arrays&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Type.fetchAll(db)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="#fetchablerecord-protocol"&gt;FetchableRecord&lt;/a&gt; &amp;amp; &lt;a href="#tablerecord-protocol"&gt;TableRecord&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Type.fetchAll(db, keys:...)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="#fetchablerecord-protocol"&gt;FetchableRecord&lt;/a&gt; &amp;amp; &lt;a href="#tablerecord-protocol"&gt;TableRecord&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;a href="#list-of-record-methods-1"&gt;¹&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Type.fetchAll(db, sql: sql)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="#fetchablerecord-protocol"&gt;FetchableRecord&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;a href="#list-of-record-methods-3"&gt;³&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Type.fetchAll(statement)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="#fetchablerecord-protocol"&gt;FetchableRecord&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;a href="#list-of-record-methods-4"&gt;⁴&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Type.filter(...).fetchAll(db)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="#fetchablerecord-protocol"&gt;FetchableRecord&lt;/a&gt; &amp;amp; &lt;a href="#tablerecord-protocol"&gt;TableRecord&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;a href="#list-of-record-methods-2"&gt;²&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Fetch Individual Records&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Type.fetchOne(db)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="#fetchablerecord-protocol"&gt;FetchableRecord&lt;/a&gt; &amp;amp; &lt;a href="#tablerecord-protocol"&gt;TableRecord&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Type.fetchOne(db, key:...)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="#fetchablerecord-protocol"&gt;FetchableRecord&lt;/a&gt; &amp;amp; &lt;a href="#tablerecord-protocol"&gt;TableRecord&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;a href="#list-of-record-methods-1"&gt;¹&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Type.fetchOne(db, sql: sql)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="#fetchablerecord-protocol"&gt;FetchableRecord&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;a href="#list-of-record-methods-3"&gt;³&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Type.fetchOne(statement)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="#fetchablerecord-protocol"&gt;FetchableRecord&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;a href="#list-of-record-methods-4"&gt;⁴&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Type.filter(...).fetchOne(db)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="#fetchablerecord-protocol"&gt;FetchableRecord&lt;/a&gt; &amp;amp; &lt;a href="#tablerecord-protocol"&gt;TableRecord&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;a href="#list-of-record-methods-2"&gt;²&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;a href="#codable-records"&gt;Codable Records&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Type.databaseDecodingUserInfo&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="#fetchablerecord-protocol"&gt;FetchableRecord&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;a href="#the-userinfo-dictionary"&gt;*&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Type.databaseJSONDecoder(for:)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="#fetchablerecord-protocol"&gt;FetchableRecord&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;a href="#json-columns"&gt;*&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Type.databaseDateDecodingStrategy&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="#fetchablerecord-protocol"&gt;FetchableRecord&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;a href="#date-and-uuid-coding-strategies"&gt;*&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Type.databaseEncodingUserInfo&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="#persistablerecord-protocol"&gt;EncodableRecord&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;a href="#the-userinfo-dictionary"&gt;*&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Type.databaseJSONEncoder(for:)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="#persistablerecord-protocol"&gt;EncodableRecord&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;a href="#json-columns"&gt;*&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Type.databaseDateEncodingStrategy&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="#persistablerecord-protocol"&gt;EncodableRecord&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;a href="#date-and-uuid-coding-strategies"&gt;*&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Type.databaseUUIDEncodingStrategy&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="#persistablerecord-protocol"&gt;EncodableRecord&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;a href="#date-and-uuid-coding-strategies"&gt;*&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Define &lt;a href="Documentation/AssociationsBasics.md"&gt;Associations&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Type.belongsTo(...)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="#tablerecord-protocol"&gt;TableRecord&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;a href="Documentation/AssociationsBasics.md"&gt;*&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Type.hasMany(...)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="#tablerecord-protocol"&gt;TableRecord&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;a href="Documentation/AssociationsBasics.md"&gt;*&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Type.hasOne(...)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="#tablerecord-protocol"&gt;TableRecord&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;a href="Documentation/AssociationsBasics.md"&gt;*&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Type.hasManyThrough(...)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="#tablerecord-protocol"&gt;TableRecord&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;a href="Documentation/AssociationsBasics.md"&gt;*&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Type.hasOneThrough(...)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="#tablerecord-protocol"&gt;TableRecord&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;a href="Documentation/AssociationsBasics.md"&gt;*&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Building Query Interface &lt;a href="#requests"&gt;Requests&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;record.request(for:...)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="#tablerecord-protocol"&gt;TableRecord&lt;/a&gt; &amp;amp; &lt;a href="#persistablerecord-protocol"&gt;EncodableRecord&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;a href="Documentation/AssociationsBasics.md"&gt;*&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Type.all()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="#tablerecord-protocol"&gt;TableRecord&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;a href="#list-of-record-methods-2"&gt;²&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Type.none()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="#tablerecord-protocol"&gt;TableRecord&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;a href="#list-of-record-methods-2"&gt;²&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Type.select(...)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="#tablerecord-protocol"&gt;TableRecord&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;a href="#list-of-record-methods-2"&gt;²&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Type.select(..., as:...)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="#tablerecord-protocol"&gt;TableRecord&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;a href="#list-of-record-methods-2"&gt;²&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Type.annotated(with:...)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="#tablerecord-protocol"&gt;TableRecord&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;a href="#list-of-record-methods-2"&gt;²&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Type.filter(...)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="#tablerecord-protocol"&gt;TableRecord&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;a href="#list-of-record-methods-2"&gt;²&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Type.matching(...)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="#tablerecord-protocol"&gt;TableRecord&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;a href="#list-of-record-methods-2"&gt;²&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Type.including(all:)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="#tablerecord-protocol"&gt;TableRecord&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;a href="#list-of-record-methods-2"&gt;²&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Type.including(optional:)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="#tablerecord-protocol"&gt;TableRecord&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;a href="#list-of-record-methods-2"&gt;²&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Type.including(required:)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="#tablerecord-protocol"&gt;TableRecord&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;a href="#list-of-record-methods-2"&gt;²&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Type.joining(optional:)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="#tablerecord-protocol"&gt;TableRecord&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;a href="#list-of-record-methods-2"&gt;²&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Type.joining(required:)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="#tablerecord-protocol"&gt;TableRecord&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;a href="#list-of-record-methods-2"&gt;²&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Type.order(...)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="#tablerecord-protocol"&gt;TableRecord&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;a href="#list-of-record-methods-2"&gt;²&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Type.orderByPrimaryKey()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="#tablerecord-protocol"&gt;TableRecord&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;a href="#list-of-record-methods-2"&gt;²&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Type.having(...)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="#tablerecord-protocol"&gt;TableRecord&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;a href="#list-of-record-methods-2"&gt;²&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Type.limit(...)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="#tablerecord-protocol"&gt;TableRecord&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;a href="#list-of-record-methods-2"&gt;²&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;a href="#record-comparison"&gt;Record Comparison&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;record.databaseEquals(...)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="#persistablerecord-protocol"&gt;EncodableRecord&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;record.databaseChanges(from:...)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="#persistablerecord-protocol"&gt;EncodableRecord&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;record.updateChanges(db, from:...)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="#persistablerecord-protocol"&gt;PersistableRecord&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;record.updateChanges(db) { ... }&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="#persistablerecord-protocol"&gt;PersistableRecord&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;record.hasDatabaseChanges&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="#record-class"&gt;Record&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;record.databaseChanges&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="#record-class"&gt;Record&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;record.updateChanges(db)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="#record-class"&gt;Record&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;a name="user-content-list-of-record-methods-1"&gt;¹&lt;/a&gt; All unique keys are supported: primary keys (single-column, composite, &lt;a href="#the-implicit-rowid-primary-key"&gt;implicit RowID&lt;/a&gt;) and unique indexes:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; Player.&lt;span class="pl-c1"&gt;fetchOne&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;key&lt;/span&gt;: &lt;span class="pl-c1"&gt;1&lt;/span&gt;)                               &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Player?&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; Player.&lt;span class="pl-c1"&gt;fetchOne&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;key&lt;/span&gt;: [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;email&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;arthur@example.com&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Player?&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; Country.&lt;span class="pl-c1"&gt;fetchAll&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;keys&lt;/span&gt;: [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;FR&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;US&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;])                  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; [Country]&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a name="user-content-list-of-record-methods-2"&gt;²&lt;/a&gt; See &lt;a href="#requests"&gt;Fetch Requests&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; request &lt;span class="pl-k"&gt;=&lt;/span&gt; Player.&lt;span class="pl-c1"&gt;filter&lt;/span&gt;(emailColumn &lt;span class="pl-k"&gt;!=&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;).&lt;span class="pl-c1"&gt;order&lt;/span&gt;(nameColumn)
&lt;span class="pl-k"&gt;let&lt;/span&gt; players &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; request.&lt;span class="pl-c1"&gt;fetchAll&lt;/span&gt;(db)  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; [Player]&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; count &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; request.&lt;span class="pl-c1"&gt;fetchCount&lt;/span&gt;(db)  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Int&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a name="user-content-list-of-record-methods-3"&gt;³&lt;/a&gt; See &lt;a href="#fetch-queries"&gt;SQL queries&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; player &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Player.&lt;span class="pl-c1"&gt;fetchOne&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SELECT * FROM player WHERE id = ?&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;arguments&lt;/span&gt;: [&lt;span class="pl-c1"&gt;1&lt;/span&gt;]) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Player?&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a name="user-content-list-of-record-methods-4"&gt;⁴&lt;/a&gt; See &lt;a href="#prepared-statements"&gt;Prepared Statements&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; statement &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;makeSelectStatement&lt;/span&gt;(&lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SELECT * FROM player WHERE id = ?&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-k"&gt;let&lt;/span&gt; player &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Player.&lt;span class="pl-c1"&gt;fetchOne&lt;/span&gt;(statement, &lt;span class="pl-c1"&gt;arguments&lt;/span&gt;: [&lt;span class="pl-c1"&gt;1&lt;/span&gt;])  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Player?&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1&gt;&lt;a id="user-content-the-query-interface" class="anchor" aria-hidden="true" href="#the-query-interface"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;The Query Interface&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;The query interface lets you write pure Swift instead of SQL:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; dbQueue.&lt;span class="pl-smi"&gt;write&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Update database schema&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;create&lt;/span&gt;(&lt;span class="pl-c1"&gt;table&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;wine&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) { t &lt;span class="pl-k"&gt;in&lt;/span&gt; &lt;span class="pl-k"&gt;...&lt;/span&gt; }
    
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Fetch records&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;let&lt;/span&gt; wines &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Wine
        .&lt;span class="pl-c1"&gt;filter&lt;/span&gt;(originColumn &lt;span class="pl-k"&gt;==&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Burgundy&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
        .&lt;span class="pl-c1"&gt;order&lt;/span&gt;(priceColumn)
        .&lt;span class="pl-c1"&gt;fetchAll&lt;/span&gt;(db)
    
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Count&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;let&lt;/span&gt; count &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Wine
        .&lt;span class="pl-c1"&gt;filter&lt;/span&gt;(colorColumn &lt;span class="pl-k"&gt;==&lt;/span&gt; Color.&lt;span class="pl-smi"&gt;red&lt;/span&gt;)
        .&lt;span class="pl-c1"&gt;fetchCount&lt;/span&gt;(db)
    
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Update&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;try&lt;/span&gt; Wine
        .&lt;span class="pl-c1"&gt;filter&lt;/span&gt;(originColumn &lt;span class="pl-k"&gt;==&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Burgundy&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
        .&lt;span class="pl-c1"&gt;updateAll&lt;/span&gt;(db, priceColumn &lt;span class="pl-k"&gt;*=&lt;/span&gt; &lt;span class="pl-c1"&gt;0.75&lt;/span&gt;)
    
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Delete&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;try&lt;/span&gt; Wine
        .&lt;span class="pl-c1"&gt;filter&lt;/span&gt;(corkedColumn &lt;span class="pl-k"&gt;==&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;)
        .&lt;span class="pl-c1"&gt;deleteAll&lt;/span&gt;(db)
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You need to open a &lt;a href="#database-connections"&gt;database connection&lt;/a&gt; before you can query the database.&lt;/p&gt;
&lt;p&gt;Please bear in mind that the query interface can not generate all possible SQL queries. You may also &lt;em&gt;prefer&lt;/em&gt; writing SQL, and this is just OK. From little snippets to full queries, your SQL skills are welcome:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; dbQueue.&lt;span class="pl-smi"&gt;write&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Update database schema (with SQL)&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;execute&lt;/span&gt;(&lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;CREATE TABLE wine (...)&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Fetch records (with SQL)&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;let&lt;/span&gt; wines &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Wine.&lt;span class="pl-c1"&gt;fetchAll&lt;/span&gt;(db,
        &lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SELECT * FROM wine WHERE origin = ? ORDER BY price&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
        &lt;span class="pl-c1"&gt;arguments&lt;/span&gt;: [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Burgundy&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;])
    
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Count (with an SQL snippet)&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;let&lt;/span&gt; count &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Wine
        .&lt;span class="pl-c1"&gt;filter&lt;/span&gt;(&lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;color = ?&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;arguments&lt;/span&gt;: [Color.&lt;span class="pl-smi"&gt;red&lt;/span&gt;])
        .&lt;span class="pl-c1"&gt;fetchCount&lt;/span&gt;(db)
    
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Update (with SQL)&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;execute&lt;/span&gt;(&lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;UPDATE wine SET price = price * 0.75 WHERE origin = 'Burgundy'&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Delete (with SQL)&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;execute&lt;/span&gt;(&lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;DELETE FROM wine WHERE corked&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So don't miss the &lt;a href="#sqlite-api"&gt;SQL API&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;g-emoji class="g-emoji" alias="point_up" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/261d.png"&gt;☝️&lt;/g-emoji&gt; &lt;strong&gt;Note&lt;/strong&gt;: the generated SQL may change between GRDB releases, without notice: don't have your application rely on any specific SQL output.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#database-schema"&gt;Database Schema&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#requests"&gt;Requests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#expressions"&gt;Expressions&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sql-operators"&gt;SQL Operators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sql-functions"&gt;SQL Functions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#fetching-from-requests"&gt;Fetching from Requests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#fetching-by-key"&gt;Fetching by Key&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#fetching-aggregated-values"&gt;Fetching Aggregated Values&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#delete-requests"&gt;Delete Requests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#update-requests"&gt;Update Requests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#custom-requests"&gt;Custom Requests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="Documentation/AssociationsBasics.md"&gt;Associations and Joins&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-database-schema" class="anchor" aria-hidden="true" href="#database-schema"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Database Schema&lt;/h2&gt;
&lt;p&gt;Once granted with a &lt;a href="#database-connections"&gt;database connection&lt;/a&gt;, you can setup your database schema without writing SQL:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#create-tables"&gt;Create Tables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#modify-tables"&gt;Modify Tables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#drop-tables"&gt;Drop Tables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#create-indexes"&gt;Create Indexes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-create-tables" class="anchor" aria-hidden="true" href="#create-tables"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Create Tables&lt;/h3&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; CREATE TABLE place (&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;   id INTEGER PRIMARY KEY AUTOINCREMENT,&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;   title TEXT,&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;   favorite BOOLEAN NOT NULL DEFAULT 0,&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;   latitude DOUBLE NOT NULL,&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;   longitude DOUBLE NOT NULL&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; )&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;create&lt;/span&gt;(&lt;span class="pl-c1"&gt;table&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;place&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) { t &lt;span class="pl-k"&gt;in&lt;/span&gt;
    t.&lt;span class="pl-c1"&gt;autoIncrementedPrimaryKey&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;id&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    t.&lt;span class="pl-c1"&gt;column&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;title&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, .&lt;span class="pl-c1"&gt;text&lt;/span&gt;)
    t.&lt;span class="pl-c1"&gt;column&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;favorite&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, .&lt;span class="pl-smi"&gt;boolean&lt;/span&gt;).&lt;span class="pl-c1"&gt;notNull&lt;/span&gt;().&lt;span class="pl-c1"&gt;defaults&lt;/span&gt;(&lt;span class="pl-c1"&gt;to&lt;/span&gt;: &lt;span class="pl-c1"&gt;false&lt;/span&gt;)
    t.&lt;span class="pl-c1"&gt;column&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;longitude&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, .&lt;span class="pl-c1"&gt;double&lt;/span&gt;).&lt;span class="pl-c1"&gt;notNull&lt;/span&gt;()
    t.&lt;span class="pl-c1"&gt;column&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;latitude&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, .&lt;span class="pl-c1"&gt;double&lt;/span&gt;).&lt;span class="pl-c1"&gt;notNull&lt;/span&gt;()
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;create(table:)&lt;/code&gt; method covers nearly all SQLite table creation features. For virtual tables, see &lt;a href="Documentation/FullTextSearch.md"&gt;Full-Text Search&lt;/a&gt;, or use raw SQL.&lt;/p&gt;
&lt;p&gt;SQLite itself has many reference documents about table creation: &lt;a href="https://www.sqlite.org/lang_createtable.html" rel="nofollow"&gt;CREATE TABLE&lt;/a&gt;, &lt;a href="https://www.sqlite.org/datatype3.html" rel="nofollow"&gt;Datatypes In SQLite Version 3&lt;/a&gt;, &lt;a href="https://www.sqlite.org/foreignkeys.html" rel="nofollow"&gt;SQLite Foreign Key Support&lt;/a&gt;, &lt;a href="https://www.sqlite.org/lang_conflict.html" rel="nofollow"&gt;ON CONFLICT&lt;/a&gt;, &lt;a href="https://www.sqlite.org/withoutrowid.html" rel="nofollow"&gt;The WITHOUT ROWID Optimization&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Configure table creation&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; CREATE TABLE example ( ... )&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;create&lt;/span&gt;(&lt;span class="pl-c1"&gt;table&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;example&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) { t &lt;span class="pl-k"&gt;in&lt;/span&gt; &lt;span class="pl-k"&gt;...&lt;/span&gt; }
    
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; CREATE TEMPORARY TABLE example IF NOT EXISTS (&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;create&lt;/span&gt;(&lt;span class="pl-c1"&gt;table&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;example&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;temporary&lt;/span&gt;: &lt;span class="pl-c1"&gt;true&lt;/span&gt;, &lt;span class="pl-c1"&gt;ifNotExists&lt;/span&gt;: &lt;span class="pl-c1"&gt;true&lt;/span&gt;) { t &lt;span class="pl-k"&gt;in&lt;/span&gt; &lt;span class="pl-k"&gt;...&lt;/span&gt; }&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;g-emoji class="g-emoji" alias="bulb" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a1.png"&gt;💡&lt;/g-emoji&gt; &lt;strong&gt;Tip&lt;/strong&gt;: database table names should be singular, and camel-cased. Make them look like Swift identifiers: &lt;code&gt;place&lt;/code&gt;, &lt;code&gt;country&lt;/code&gt;, &lt;code&gt;postalAddress&lt;/code&gt;, 'httpRequest'.&lt;/p&gt;
&lt;p&gt;This will help you using &lt;a href="Documentation/AssociationsBasics.md"&gt;Associations&lt;/a&gt; when you need them. Database table names that follow another naming convention are totally OK, but you will need to perform extra configuration.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Add regular columns&lt;/strong&gt; with their name and eventual type (text, integer, double, numeric, boolean, blob, date and datetime) - see &lt;a href="https://www.sqlite.org/datatype3.html" rel="nofollow"&gt;SQLite data types&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; CREATE TABLE example (&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;   a,&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;   name TEXT,&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;   creationDate DATETIME,&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;create&lt;/span&gt;(&lt;span class="pl-c1"&gt;table&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;example&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) { t &lt;span class="pl-k"&gt;in&lt;/span&gt;
    t.&lt;span class="pl-c1"&gt;column&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;a&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    t.&lt;span class="pl-c1"&gt;column&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;name&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, .&lt;span class="pl-c1"&gt;text&lt;/span&gt;)
    t.&lt;span class="pl-c1"&gt;column&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;creationDate&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, .&lt;span class="pl-smi"&gt;datetime&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Define &lt;strong&gt;not null&lt;/strong&gt; columns, and set &lt;strong&gt;default&lt;/strong&gt; values:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; email TEXT NOT NULL,&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    t.&lt;span class="pl-c1"&gt;column&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;email&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, .&lt;span class="pl-c1"&gt;text&lt;/span&gt;).&lt;span class="pl-c1"&gt;notNull&lt;/span&gt;()
    
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; name TEXT NOT NULL DEFAULT 'Anonymous',&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    t.&lt;span class="pl-c1"&gt;column&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;name&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, .&lt;span class="pl-c1"&gt;text&lt;/span&gt;).&lt;span class="pl-c1"&gt;notNull&lt;/span&gt;().&lt;span class="pl-c1"&gt;defaults&lt;/span&gt;(&lt;span class="pl-c1"&gt;to&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Anonymous&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Use an individual column as &lt;strong&gt;primary&lt;/strong&gt;, &lt;strong&gt;unique&lt;/strong&gt;, or &lt;strong&gt;foreign key&lt;/strong&gt;. When defining a foreign key, the referenced column is the primary key of the referenced table (unless you specify otherwise):&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; id INTEGER PRIMARY KEY AUTOINCREMENT,&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    t.&lt;span class="pl-c1"&gt;autoIncrementedPrimaryKey&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;id&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; uuid TEXT PRIMARY KEY,&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    t.&lt;span class="pl-c1"&gt;column&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;uuid&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, .&lt;span class="pl-c1"&gt;text&lt;/span&gt;).&lt;span class="pl-c1"&gt;primaryKey&lt;/span&gt;()
    
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; email TEXT UNIQUE,&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    t.&lt;span class="pl-c1"&gt;column&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;email&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, .&lt;span class="pl-c1"&gt;text&lt;/span&gt;).&lt;span class="pl-c1"&gt;unique&lt;/span&gt;()
    
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; countryCode TEXT REFERENCES country(code) ON DELETE CASCADE,&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    t.&lt;span class="pl-c1"&gt;column&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;countryCode&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, .&lt;span class="pl-c1"&gt;text&lt;/span&gt;).&lt;span class="pl-c1"&gt;references&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;country&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;onDelete&lt;/span&gt;: .&lt;span class="pl-smi"&gt;cascade&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;g-emoji class="g-emoji" alias="bulb" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a1.png"&gt;💡&lt;/g-emoji&gt; &lt;strong&gt;Tip&lt;/strong&gt;: when you need an integer primary key that automatically generates unique values, it is highly recommended that you use the &lt;code&gt;autoIncrementedPrimaryKey&lt;/code&gt; method:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;create&lt;/span&gt;(&lt;span class="pl-c1"&gt;table&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;example&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) { t &lt;span class="pl-k"&gt;in&lt;/span&gt;
    t.&lt;span class="pl-c1"&gt;autoIncrementedPrimaryKey&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;id&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    &lt;span class="pl-k"&gt;...&lt;/span&gt;
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The reason for this recommendation is that auto-incremented primary keys prevent the reuse of ids. This prevents your app or &lt;a href="#database-changes-observation"&gt;database observation tools&lt;/a&gt; to think that a row was updated, when it was actually deleted, then replaced. Depending on your application needs, this may be acceptable. But usually it is not.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Create an index&lt;/strong&gt; on the column:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;    t.&lt;span class="pl-c1"&gt;column&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;score&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, .&lt;span class="pl-smi"&gt;integer&lt;/span&gt;).&lt;span class="pl-c1"&gt;indexed&lt;/span&gt;()&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For extra index options, see &lt;a href="#create-indexes"&gt;Create Indexes&lt;/a&gt; below.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Perform integrity checks&lt;/strong&gt; on individual columns, and SQLite will only let conforming rows in. In the example below, the &lt;code&gt;$0&lt;/code&gt; closure variable is a column which lets you build any SQL &lt;a href="#expressions"&gt;expression&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; name TEXT CHECK (LENGTH(name) &amp;gt; 0)&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; score INTEGER CHECK (score &amp;gt; 0)&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    t.&lt;span class="pl-c1"&gt;column&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;name&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, .&lt;span class="pl-c1"&gt;text&lt;/span&gt;).&lt;span class="pl-smi"&gt;check&lt;/span&gt; { &lt;span class="pl-c1"&gt;length&lt;/span&gt;(&lt;span class="pl-c1"&gt;$0&lt;/span&gt;) &lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt; }
    t.&lt;span class="pl-c1"&gt;column&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;score&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, .&lt;span class="pl-smi"&gt;integer&lt;/span&gt;).&lt;span class="pl-c1"&gt;check&lt;/span&gt;(&lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;score &amp;gt; 0&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Other &lt;strong&gt;table constraints&lt;/strong&gt; can involve several columns:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; PRIMARY KEY (a, b),&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    t.&lt;span class="pl-c1"&gt;primaryKey&lt;/span&gt;([&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;a&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;b&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;])
    
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; UNIQUE (a, b) ON CONFLICT REPLACE,&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    t.&lt;span class="pl-c1"&gt;uniqueKey&lt;/span&gt;([&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;a&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;b&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;], &lt;span class="pl-c1"&gt;onConfict&lt;/span&gt;: .&lt;span class="pl-smi"&gt;replace&lt;/span&gt;)
    
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; FOREIGN KEY (a, b) REFERENCES parents(c, d),&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    t.&lt;span class="pl-c1"&gt;foreignKey&lt;/span&gt;([&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;a&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;b&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;], &lt;span class="pl-c1"&gt;references&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;parents&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; CHECK (a + b &amp;lt; 10),&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    t.&lt;span class="pl-c1"&gt;check&lt;/span&gt;(&lt;span class="pl-c1"&gt;Column&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;a&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-k"&gt;+&lt;/span&gt; &lt;span class="pl-c1"&gt;Column&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;b&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt; &lt;span class="pl-c1"&gt;10&lt;/span&gt;)
    
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; CHECK (a + b &amp;lt; 10)&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    t.&lt;span class="pl-c1"&gt;check&lt;/span&gt;(&lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;a + b &amp;lt; 10&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
}&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-modify-tables" class="anchor" aria-hidden="true" href="#modify-tables"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Modify Tables&lt;/h3&gt;
&lt;p&gt;SQLite lets you rename tables, and add columns to existing tables:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; ALTER TABLE referer RENAME TO referrer&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;rename&lt;/span&gt;(&lt;span class="pl-c1"&gt;table&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;referer&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;to&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;referrer&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; ALTER TABLE player ADD COLUMN url TEXT&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;alter&lt;/span&gt;(&lt;span class="pl-c1"&gt;table&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;player&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) { t &lt;span class="pl-k"&gt;in&lt;/span&gt;
    t.&lt;span class="pl-c1"&gt;add&lt;/span&gt;(&lt;span class="pl-c1"&gt;column&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;url&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, .&lt;span class="pl-c1"&gt;text&lt;/span&gt;)
}&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;g-emoji class="g-emoji" alias="point_up" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/261d.png"&gt;☝️&lt;/g-emoji&gt; &lt;strong&gt;Note&lt;/strong&gt;: SQLite restricts the possible table alterations, and may require you to recreate dependent triggers or views. See the documentation of the &lt;a href="https://www.sqlite.org/lang_altertable.html" rel="nofollow"&gt;ALTER TABLE&lt;/a&gt; for details. See &lt;a href="#advanced-database-schema-changes"&gt;Advanced Database Schema Changes&lt;/a&gt; for a way to lift restrictions.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;&lt;a id="user-content-drop-tables" class="anchor" aria-hidden="true" href="#drop-tables"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Drop Tables&lt;/h3&gt;
&lt;p&gt;Drop tables with the &lt;code&gt;drop(table:)&lt;/code&gt; method:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;drop&lt;/span&gt;(&lt;span class="pl-c1"&gt;table&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;obsolete&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-create-indexes" class="anchor" aria-hidden="true" href="#create-indexes"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Create Indexes&lt;/h3&gt;
&lt;p&gt;Create indexes with the &lt;code&gt;create(index:)&lt;/code&gt; method:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; CREATE UNIQUE INDEX byEmail ON users(email)&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;create&lt;/span&gt;(&lt;span class="pl-c1"&gt;index&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;byEmail&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;on&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;users&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;columns&lt;/span&gt;: [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;email&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;], &lt;span class="pl-c1"&gt;unique&lt;/span&gt;: &lt;span class="pl-c1"&gt;true&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Relevant SQLite documentation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.sqlite.org/lang_createindex.html" rel="nofollow"&gt;CREATE INDEX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.sqlite.org/expridx.html" rel="nofollow"&gt;Indexes On Expressions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.sqlite.org/partialindex.html" rel="nofollow"&gt;Partial Indexes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-requests" class="anchor" aria-hidden="true" href="#requests"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Requests&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;The query interface requests&lt;/strong&gt; let you fetch values from the database:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; request &lt;span class="pl-k"&gt;=&lt;/span&gt; Player.&lt;span class="pl-c1"&gt;filter&lt;/span&gt;(emailColumn &lt;span class="pl-k"&gt;!=&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;).&lt;span class="pl-c1"&gt;order&lt;/span&gt;(nameColumn)
&lt;span class="pl-k"&gt;let&lt;/span&gt; players &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; request.&lt;span class="pl-c1"&gt;fetchAll&lt;/span&gt;(db)  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; [Player]&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; count &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; request.&lt;span class="pl-c1"&gt;fetchCount&lt;/span&gt;(db)  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Int&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;All requests start from &lt;strong&gt;a type&lt;/strong&gt; that adopts the &lt;code&gt;TableRecord&lt;/code&gt; protocol, such as a &lt;code&gt;Record&lt;/code&gt; subclass (see &lt;a href="#records"&gt;Records&lt;/a&gt;):&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;Player&lt;/span&gt; : &lt;span class="pl-e"&gt;Record &lt;/span&gt;{ &lt;span class="pl-k"&gt;...&lt;/span&gt; }&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Declare the table &lt;strong&gt;columns&lt;/strong&gt; that you want to use for filtering, or sorting:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; idColumn &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;Column&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;id&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-k"&gt;let&lt;/span&gt; nameColumn &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;Column&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;name&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can also declare column enums, if you prefer:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Columns.id and Columns.name can be used just as&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; idColumn and nameColumn declared above.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;enum&lt;/span&gt; &lt;span class="pl-en"&gt;Columns&lt;/span&gt;: &lt;span class="pl-e"&gt;&lt;span class="pl-c1"&gt;String&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-e"&gt;ColumnExpression &lt;/span&gt;{
    &lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-c1"&gt;id&lt;/span&gt;
    &lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-c1"&gt;name&lt;/span&gt;
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can now build requests with the following methods: &lt;code&gt;all&lt;/code&gt;, &lt;code&gt;none&lt;/code&gt;, &lt;code&gt;select&lt;/code&gt;, &lt;code&gt;distinct&lt;/code&gt;, &lt;code&gt;filter&lt;/code&gt;, &lt;code&gt;matching&lt;/code&gt;, &lt;code&gt;group&lt;/code&gt;, &lt;code&gt;having&lt;/code&gt;, &lt;code&gt;order&lt;/code&gt;, &lt;code&gt;reversed&lt;/code&gt;, &lt;code&gt;limit&lt;/code&gt;, &lt;code&gt;joining&lt;/code&gt;, &lt;code&gt;including&lt;/code&gt;. All those methods return another request, which you can further refine by applying another method: &lt;code&gt;Player.select(...).filter(...).order(...)&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;all()&lt;/code&gt;, &lt;code&gt;none()&lt;/code&gt;: the requests for all rows, or no row.&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; SELECT * FROM player&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;Player.&lt;span class="pl-c1"&gt;all&lt;/span&gt;()&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The hidden &lt;code&gt;rowid&lt;/code&gt; column can be selected as well &lt;a href="#the-implicit-rowid-primary-key"&gt;when you need it&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;select(...)&lt;/code&gt; and &lt;code&gt;select(..., as:)&lt;/code&gt; define the selected columns. See &lt;a href="#columns-selected-by-a-request"&gt;Columns Selected by a Request&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; SELECT name FROM player&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;Player.&lt;span class="pl-c1"&gt;select&lt;/span&gt;(nameColumn, &lt;span class="pl-c1"&gt;as&lt;/span&gt;: &lt;span class="pl-c1"&gt;String&lt;/span&gt;.&lt;span class="pl-k"&gt;self&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;annotated(with: ...)&lt;/code&gt; extends the selection with &lt;a href="Documentation/AssociationsBasics.md#association-aggregates"&gt;association aggregates&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; SELECT team.*, COUNT(DISTINCT player.rowid) AS playerCount&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; FROM team&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; LEFT JOIN player ON player.teamId = team.id&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; GROUP BY team.id&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;Team.&lt;span class="pl-c1"&gt;annotated&lt;/span&gt;(&lt;span class="pl-c1"&gt;with&lt;/span&gt;: Team.&lt;span class="pl-smi"&gt;players&lt;/span&gt;.&lt;span class="pl-c1"&gt;count&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;distinct()&lt;/code&gt; performs uniquing.&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; SELECT DISTINCT name FROM player&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;Player.&lt;span class="pl-c1"&gt;select&lt;/span&gt;(nameColumn, &lt;span class="pl-c1"&gt;as&lt;/span&gt;: &lt;span class="pl-c1"&gt;String&lt;/span&gt;.&lt;span class="pl-k"&gt;self&lt;/span&gt;).&lt;span class="pl-c1"&gt;distinct&lt;/span&gt;()&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;filter(expression)&lt;/code&gt; applies conditions.&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; SELECT * FROM player WHERE id IN (1, 2, 3)&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;Player.&lt;span class="pl-c1"&gt;filter&lt;/span&gt;([&lt;span class="pl-c1"&gt;1&lt;/span&gt;,&lt;span class="pl-c1"&gt;2&lt;/span&gt;,&lt;span class="pl-c1"&gt;3&lt;/span&gt;].&lt;span class="pl-c1"&gt;contains&lt;/span&gt;(idColumn))

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; SELECT * FROM player WHERE (name IS NOT NULL) AND (height &amp;gt; 1.75)&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;Player.&lt;span class="pl-c1"&gt;filter&lt;/span&gt;(nameColumn &lt;span class="pl-k"&gt;!=&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt; &lt;span class="pl-k"&gt;&amp;amp;&amp;amp;&lt;/span&gt; heightColumn &lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;1.75&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;filter(key:)&lt;/code&gt; and &lt;code&gt;filter(keys:)&lt;/code&gt; apply conditions on primary keys and unique keys:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; SELECT * FROM player WHERE id = 1&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;Player.&lt;span class="pl-c1"&gt;filter&lt;/span&gt;(&lt;span class="pl-c1"&gt;key&lt;/span&gt;: &lt;span class="pl-c1"&gt;1&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; SELECT * FROM country WHERE isoCode IN ('FR', 'US')&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;Country.&lt;span class="pl-c1"&gt;filter&lt;/span&gt;(&lt;span class="pl-c1"&gt;keys&lt;/span&gt;: [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;FR&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;US&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;])

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; SELECT * FROM citizenship WHERE citizenId = 1 AND countryCode = 'FR'&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;Citizenship.&lt;span class="pl-c1"&gt;filter&lt;/span&gt;(&lt;span class="pl-c1"&gt;key&lt;/span&gt;: [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;citizenId&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;countryCode&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;FR&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;])

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; SELECT * FROM player WHERE email = 'arthur@example.com'&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;Player.&lt;span class="pl-c1"&gt;filter&lt;/span&gt;(&lt;span class="pl-c1"&gt;key&lt;/span&gt;: [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;email&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;arthur@example.com&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;])&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;matching(pattern)&lt;/code&gt; performs &lt;a href="Documentation/FullTextSearch.md"&gt;full-text search&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; SELECT * FROM document WHERE document MATCH 'sqlite database'&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; pattern &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;FTS3Pattern&lt;/span&gt;(&lt;span class="pl-c1"&gt;matchingAllTokensIn&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SQLite database&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
Document.&lt;span class="pl-c1"&gt;matching&lt;/span&gt;(pattern)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When the pattern is nil, no row will match.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;group(expression, ...)&lt;/code&gt; groups rows.&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; SELECT name, MAX(score) FROM player GROUP BY name&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;Player
    .&lt;span class="pl-c1"&gt;select&lt;/span&gt;(nameColumn, &lt;span class="pl-c1"&gt;max&lt;/span&gt;(scoreColumn))
    .&lt;span class="pl-c1"&gt;group&lt;/span&gt;(nameColumn)&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;having(expression)&lt;/code&gt; applies conditions on grouped rows.&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; SELECT team, MAX(score) FROM player GROUP BY team HAVING MIN(score) &amp;gt;= 1000&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;Player
    .&lt;span class="pl-c1"&gt;select&lt;/span&gt;(teamColumn, &lt;span class="pl-c1"&gt;max&lt;/span&gt;(scoreColumn))
    .&lt;span class="pl-c1"&gt;group&lt;/span&gt;(teamColumn)
    .&lt;span class="pl-c1"&gt;having&lt;/span&gt;(&lt;span class="pl-c1"&gt;min&lt;/span&gt;(scoreColumn) &lt;span class="pl-k"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;1000&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;having(aggregate)&lt;/code&gt; applies conditions on grouped rows, according to an &lt;a href="Documentation/AssociationsBasics.md#association-aggregates"&gt;association aggregate&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; SELECT team.*&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; FROM team&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; LEFT JOIN player ON player.teamId = team.id&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; GROUP BY team.id&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; HAVING COUNT(DISTINCT player.rowid) &amp;gt;= 5&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;Team.&lt;span class="pl-c1"&gt;having&lt;/span&gt;(Team.&lt;span class="pl-smi"&gt;players&lt;/span&gt;.&lt;span class="pl-c1"&gt;count&lt;/span&gt; &lt;span class="pl-k"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;order(ordering, ...)&lt;/code&gt; sorts.&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; SELECT * FROM player ORDER BY name&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;Player.&lt;span class="pl-c1"&gt;order&lt;/span&gt;(nameColumn)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; SELECT * FROM player ORDER BY score DESC, name&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;Player.&lt;span class="pl-c1"&gt;order&lt;/span&gt;(scoreColumn.&lt;span class="pl-smi"&gt;desc&lt;/span&gt;, nameColumn)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Each &lt;code&gt;order&lt;/code&gt; call clears any previous ordering:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; SELECT * FROM player ORDER BY name&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;Player.&lt;span class="pl-c1"&gt;order&lt;/span&gt;(scoreColumn).&lt;span class="pl-c1"&gt;order&lt;/span&gt;(nameColumn)&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;orderByPrimaryKey()&lt;/code&gt; sorts by primary key:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; SELECT * FROM player ORDER BY id&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;Player.&lt;span class="pl-c1"&gt;orderByPrimaryKey&lt;/span&gt;()

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; SELECT * FROM country ORDER BY code&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;Country.&lt;span class="pl-c1"&gt;orderByPrimaryKey&lt;/span&gt;()

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; SELECT * FROM citizenship ORDER BY citizenId, countryCode&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;Citizenship.&lt;span class="pl-c1"&gt;orderByPrimaryKey&lt;/span&gt;()&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;reversed()&lt;/code&gt; reverses the eventual orderings.&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; SELECT * FROM player ORDER BY score ASC, name DESC&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;Player.&lt;span class="pl-c1"&gt;order&lt;/span&gt;(scoreColumn.&lt;span class="pl-smi"&gt;desc&lt;/span&gt;, nameColumn).&lt;span class="pl-c1"&gt;reversed&lt;/span&gt;()&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If no ordering was already specified, this method has no effect:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; SELECT * FROM player&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;Player.&lt;span class="pl-c1"&gt;all&lt;/span&gt;().&lt;span class="pl-c1"&gt;reversed&lt;/span&gt;()&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;limit(limit, offset: offset)&lt;/code&gt; limits and pages results.&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; SELECT * FROM player LIMIT 5&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;Player.&lt;span class="pl-c1"&gt;limit&lt;/span&gt;(&lt;span class="pl-c1"&gt;5&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; SELECT * FROM player LIMIT 5 OFFSET 10&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;Player.&lt;span class="pl-c1"&gt;limit&lt;/span&gt;(&lt;span class="pl-c1"&gt;5&lt;/span&gt;, &lt;span class="pl-c1"&gt;offset&lt;/span&gt;: &lt;span class="pl-c1"&gt;10&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;joining(...)&lt;/code&gt; and &lt;code&gt;including(...)&lt;/code&gt; fetch and join records through &lt;a href="Documentation/AssociationsBasics.md"&gt;Associations&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; SELECT player.*, team.*&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; FROM player&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; JOIN team ON team.id = player.teamId&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;Player.&lt;span class="pl-c1"&gt;including&lt;/span&gt;(&lt;span class="pl-c1"&gt;required&lt;/span&gt;: Player.&lt;span class="pl-smi"&gt;team&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can refine requests by chaining those methods:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; SELECT * FROM player WHERE (email IS NOT NULL) ORDER BY name&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;Player.&lt;span class="pl-c1"&gt;order&lt;/span&gt;(nameColumn).&lt;span class="pl-c1"&gt;filter&lt;/span&gt;(emailColumn &lt;span class="pl-k"&gt;!=&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;select&lt;/code&gt;, &lt;code&gt;order&lt;/code&gt;, &lt;code&gt;group&lt;/code&gt;, and &lt;code&gt;limit&lt;/code&gt; methods ignore and replace previously applied selection, orderings, grouping, and limits. On the opposite, &lt;code&gt;filter&lt;/code&gt;, &lt;code&gt;matching&lt;/code&gt;, and &lt;code&gt;having&lt;/code&gt; methods extend the query:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;Player                          &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; SELECT * FROM player&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    .&lt;span class="pl-c1"&gt;filter&lt;/span&gt;(nameColumn &lt;span class="pl-k"&gt;!=&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;)  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; WHERE (name IS NOT NULL)&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    .&lt;span class="pl-c1"&gt;filter&lt;/span&gt;(emailColumn &lt;span class="pl-k"&gt;!=&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;        AND (email IS NOT NULL)&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    .&lt;span class="pl-c1"&gt;order&lt;/span&gt;(nameColumn)          &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; - ignored -&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    .&lt;span class="pl-c1"&gt;reversed&lt;/span&gt;()                 &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; - ignored -&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    .&lt;span class="pl-c1"&gt;order&lt;/span&gt;(scoreColumn)         &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; ORDER BY score&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    .&lt;span class="pl-c1"&gt;limit&lt;/span&gt;(&lt;span class="pl-c1"&gt;20&lt;/span&gt;, &lt;span class="pl-c1"&gt;offset&lt;/span&gt;: &lt;span class="pl-c1"&gt;40&lt;/span&gt;)      &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; - ignored -&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    .&lt;span class="pl-c1"&gt;limit&lt;/span&gt;(&lt;span class="pl-c1"&gt;10&lt;/span&gt;)                  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; LIMIT 10&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Raw SQL snippets are also accepted, with eventual &lt;a href="http://groue.github.io/GRDB.swift/docs/4.6/Structs/StatementArguments.html" rel="nofollow"&gt;arguments&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; SELECT DATE(creationDate), COUNT(*) FROM player WHERE name = 'Arthur' GROUP BY date(creationDate)&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;Player
    .&lt;span class="pl-c1"&gt;select&lt;/span&gt;(&lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;DATE(creationDate), COUNT(*)&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    .&lt;span class="pl-c1"&gt;filter&lt;/span&gt;(&lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;name = ?&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;arguments&lt;/span&gt;: [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Arthur&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;])
    .&lt;span class="pl-c1"&gt;group&lt;/span&gt;(&lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;DATE(creationDate)&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-columns-selected-by-a-request" class="anchor" aria-hidden="true" href="#columns-selected-by-a-request"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Columns Selected by a Request&lt;/h3&gt;
&lt;p&gt;By default, query interface requests select all columns:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; SELECT * FROM player&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; request &lt;span class="pl-k"&gt;=&lt;/span&gt; Player.&lt;span class="pl-c1"&gt;all&lt;/span&gt;()&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;The selection can be changed for each individual requests, or for all requests built from a given type.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;select(...)&lt;/code&gt; and &lt;code&gt;select(..., as:)&lt;/code&gt; methods change the selection of a single request (see &lt;a href="#fetching-from-requests"&gt;Fetching from Requests&lt;/a&gt; for detailed information):&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; request &lt;span class="pl-k"&gt;=&lt;/span&gt; Player.&lt;span class="pl-c1"&gt;select&lt;/span&gt;(&lt;span class="pl-c1"&gt;max&lt;/span&gt;(scoreColumn))
&lt;span class="pl-k"&gt;let&lt;/span&gt; maxScore&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;Int&lt;/span&gt;&lt;span class="pl-k"&gt;?&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;Int&lt;/span&gt;.&lt;span class="pl-c1"&gt;fetchOne&lt;/span&gt;(db, request)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The default selection for a record type is controlled by the &lt;code&gt;databaseSelection&lt;/code&gt; property:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;struct&lt;/span&gt; &lt;span class="pl-en"&gt;RestrictedPlayer&lt;/span&gt; : &lt;span class="pl-e"&gt;TableRecord &lt;/span&gt;{
    &lt;span class="pl-k"&gt;static&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; databaseTableName &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;player&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
    &lt;span class="pl-k"&gt;static&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; databaseSelection&lt;span class="pl-k"&gt;:&lt;/span&gt; [SQLSelectable] &lt;span class="pl-k"&gt;=&lt;/span&gt; [&lt;span class="pl-c1"&gt;Column&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;id&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;), &lt;span class="pl-c1"&gt;Column&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;name&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)]
}

&lt;span class="pl-k"&gt;struct&lt;/span&gt; &lt;span class="pl-en"&gt;ExtendedPlayer&lt;/span&gt; : &lt;span class="pl-e"&gt;TableRecord &lt;/span&gt;{
    &lt;span class="pl-k"&gt;static&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; databaseTableName &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;player&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
    &lt;span class="pl-k"&gt;static&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; databaseSelection&lt;span class="pl-k"&gt;:&lt;/span&gt; [SQLSelectable] &lt;span class="pl-k"&gt;=&lt;/span&gt; [&lt;span class="pl-c1"&gt;AllColumns&lt;/span&gt;(), Column.&lt;span class="pl-smi"&gt;rowID&lt;/span&gt;]
}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; SELECT id, name FROM player&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; request &lt;span class="pl-k"&gt;=&lt;/span&gt; RestrictedPlayer.&lt;span class="pl-c1"&gt;all&lt;/span&gt;()

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; SELECT *, rowid FROM player&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; request &lt;span class="pl-k"&gt;=&lt;/span&gt; ExtendedPlayer.&lt;span class="pl-c1"&gt;all&lt;/span&gt;()&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;g-emoji class="g-emoji" alias="point_up" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/261d.png"&gt;☝️&lt;/g-emoji&gt; &lt;strong&gt;Note&lt;/strong&gt;: make sure the &lt;code&gt;databaseSelection&lt;/code&gt; property is explicitly declared as &lt;code&gt;[SQLSelectable]&lt;/code&gt;. If it is not, the Swift compiler may silently miss the protocol requirement, resulting in sticky &lt;code&gt;SELECT *&lt;/code&gt; requests. To verify your setup, see the &lt;a href="#how-do-i-print-a-request-as-sql"&gt;How do I print a request as SQL?&lt;/a&gt; FAQ.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;&lt;a id="user-content-expressions" class="anchor" aria-hidden="true" href="#expressions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Expressions&lt;/h2&gt;
&lt;p&gt;Feed &lt;a href="#requests"&gt;requests&lt;/a&gt; with SQL expressions built from your Swift code:&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-sql-operators" class="anchor" aria-hidden="true" href="#sql-operators"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;SQL Operators&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;=&lt;/code&gt;, &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;lt;=&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;gt;=&lt;/code&gt;, &lt;code&gt;IS&lt;/code&gt;, &lt;code&gt;IS NOT&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Comparison operators are based on the Swift operators &lt;code&gt;==&lt;/code&gt;, &lt;code&gt;!=&lt;/code&gt;, &lt;code&gt;===&lt;/code&gt;, &lt;code&gt;!==&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;lt;=&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;gt;=&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; SELECT * FROM player WHERE (name = 'Arthur')&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;Player.&lt;span class="pl-c1"&gt;filter&lt;/span&gt;(nameColumn &lt;span class="pl-k"&gt;==&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Arthur&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; SELECT * FROM player WHERE (name IS NULL)&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;Player.&lt;span class="pl-c1"&gt;filter&lt;/span&gt;(nameColumn &lt;span class="pl-k"&gt;==&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; SELECT * FROM player WHERE (score IS 1000)&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;Player.&lt;span class="pl-c1"&gt;filter&lt;/span&gt;(scoreColumn &lt;span class="pl-k"&gt;===&lt;/span&gt; &lt;span class="pl-c1"&gt;1000&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; SELECT * FROM rectangle WHERE width &amp;lt; height&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;Rectangle.&lt;span class="pl-c1"&gt;filter&lt;/span&gt;(widthColumn &lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt; heightColumn)&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;g-emoji class="g-emoji" alias="point_up" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/261d.png"&gt;☝️&lt;/g-emoji&gt; &lt;strong&gt;Note&lt;/strong&gt;: SQLite string comparison, by default, is case-sensitive and not Unicode-aware. See &lt;a href="#string-comparison"&gt;string comparison&lt;/a&gt; if you need more control.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;*&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;, &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;SQLite arithmetic operators are derived from their Swift equivalent:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; SELECT ((temperature * 1.8) + 32) AS farenheit FROM planet&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;Planet.&lt;span class="pl-c1"&gt;select&lt;/span&gt;((temperatureColumn &lt;span class="pl-k"&gt;*&lt;/span&gt; &lt;span class="pl-c1"&gt;1.8&lt;/span&gt; &lt;span class="pl-k"&gt;+&lt;/span&gt; &lt;span class="pl-c1"&gt;32&lt;/span&gt;).&lt;span class="pl-c1"&gt;forKey&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;farenheit&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;g-emoji class="g-emoji" alias="point_up" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/261d.png"&gt;☝️&lt;/g-emoji&gt; &lt;strong&gt;Note&lt;/strong&gt;: an expression like &lt;code&gt;nameColumn + "rrr"&lt;/code&gt; will be interpreted by SQLite as a numerical addition (with funny results), not as a string concatenation.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;AND&lt;/code&gt;, &lt;code&gt;OR&lt;/code&gt;, &lt;code&gt;NOT&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The SQL logical operators are derived from the Swift &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;, &lt;code&gt;||&lt;/code&gt; and &lt;code&gt;!&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; SELECT * FROM player WHERE ((NOT verified) OR (score &amp;lt; 1000))&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;Player.&lt;span class="pl-c1"&gt;filter&lt;/span&gt;(&lt;span class="pl-k"&gt;!&lt;/span&gt;verifiedColumn &lt;span class="pl-k"&gt;||&lt;/span&gt; scoreColumn &lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt; &lt;span class="pl-c1"&gt;1000&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When you want to join a sequence of expressions with &lt;code&gt;AND&lt;/code&gt; or &lt;code&gt;OR&lt;/code&gt; operators, use &lt;code&gt;joined(operator:)&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; SELECT * FROM player WHERE (verified AND (score &amp;gt;= 1000) AND (name IS NOT NULL))&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; conditions &lt;span class="pl-k"&gt;=&lt;/span&gt; [
    verifiedColumn,
    scoreColumn &lt;span class="pl-k"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;1000&lt;/span&gt;,
    nameColumn &lt;span class="pl-k"&gt;!=&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;]
Player.&lt;span class="pl-c1"&gt;filter&lt;/span&gt;(conditions.&lt;span class="pl-c1"&gt;joined&lt;/span&gt;(&lt;span class="pl-c1"&gt;operator&lt;/span&gt;: .&lt;span class="pl-smi"&gt;and&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When the sequence is empty, &lt;code&gt;joined(operator: .and)&lt;/code&gt; returns true, and &lt;code&gt;joined(operator: .or)&lt;/code&gt; returns false:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; SELECT * FROM player WHERE 1&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;Player.&lt;span class="pl-c1"&gt;filter&lt;/span&gt;([].&lt;span class="pl-c1"&gt;joined&lt;/span&gt;(&lt;span class="pl-c1"&gt;operator&lt;/span&gt;: .&lt;span class="pl-smi"&gt;and&lt;/span&gt;))

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; SELECT * FROM player WHERE 0&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;Player.&lt;span class="pl-c1"&gt;filter&lt;/span&gt;([].&lt;span class="pl-c1"&gt;joined&lt;/span&gt;(&lt;span class="pl-c1"&gt;operator&lt;/span&gt;: .&lt;span class="pl-smi"&gt;or&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;BETWEEN&lt;/code&gt;, &lt;code&gt;IN&lt;/code&gt;, &lt;code&gt;NOT IN&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;To check inclusion in a Swift sequence (array, set, range…), call the &lt;code&gt;contains&lt;/code&gt; method:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; SELECT * FROM player WHERE id IN (1, 2, 3)&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;Player.&lt;span class="pl-c1"&gt;filter&lt;/span&gt;([&lt;span class="pl-c1"&gt;1&lt;/span&gt;, &lt;span class="pl-c1"&gt;2&lt;/span&gt;, &lt;span class="pl-c1"&gt;3&lt;/span&gt;].&lt;span class="pl-c1"&gt;contains&lt;/span&gt;(idColumn))

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; SELECT * FROM player WHERE id NOT IN (1, 2, 3)&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;Player.&lt;span class="pl-c1"&gt;filter&lt;/span&gt;(&lt;span class="pl-k"&gt;!&lt;/span&gt;[&lt;span class="pl-c1"&gt;1&lt;/span&gt;, &lt;span class="pl-c1"&gt;2&lt;/span&gt;, &lt;span class="pl-c1"&gt;3&lt;/span&gt;].&lt;span class="pl-c1"&gt;contains&lt;/span&gt;(idColumn))

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; SELECT * FROM player WHERE score BETWEEN 0 AND 1000&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;Player.&lt;span class="pl-c1"&gt;filter&lt;/span&gt;((&lt;span class="pl-c1"&gt;0&lt;/span&gt;&lt;span class="pl-k"&gt;...&lt;/span&gt;&lt;span class="pl-c1"&gt;1000&lt;/span&gt;).&lt;span class="pl-c1"&gt;contains&lt;/span&gt;(scoreColumn))

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; SELECT * FROM player WHERE (score &amp;gt;= 0) AND (score &amp;lt; 1000)&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;Player.&lt;span class="pl-c1"&gt;filter&lt;/span&gt;((&lt;span class="pl-c1"&gt;0&lt;/span&gt;&lt;span class="pl-k"&gt;..&amp;lt;&lt;/span&gt;&lt;span class="pl-c1"&gt;1000&lt;/span&gt;).&lt;span class="pl-c1"&gt;contains&lt;/span&gt;(scoreColumn))

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; SELECT * FROM player WHERE initial BETWEEN 'A' AND 'N'&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;Player.&lt;span class="pl-c1"&gt;filter&lt;/span&gt;((&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;A&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;...&lt;/span&gt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;N&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;).&lt;span class="pl-c1"&gt;contains&lt;/span&gt;(initialColumn))

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; SELECT * FROM player WHERE (initial &amp;gt;= 'A') AND (initial &amp;lt; 'N')&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;Player.&lt;span class="pl-c1"&gt;filter&lt;/span&gt;((&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;A&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;..&amp;lt;&lt;/span&gt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;N&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;).&lt;span class="pl-c1"&gt;contains&lt;/span&gt;(initialColumn))&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;g-emoji class="g-emoji" alias="point_up" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/261d.png"&gt;☝️&lt;/g-emoji&gt; &lt;strong&gt;Note&lt;/strong&gt;: SQLite string comparison, by default, is case-sensitive and not Unicode-aware. See &lt;a href="#string-comparison"&gt;string comparison&lt;/a&gt; if you need more control.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;LIKE&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The SQLite LIKE operator is available as the &lt;code&gt;like&lt;/code&gt; method:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; SELECT * FROM player WHERE (email LIKE '%@example.com')&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;Player.&lt;span class="pl-c1"&gt;filter&lt;/span&gt;(emailColumn.&lt;span class="pl-c1"&gt;like&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;%@example.com&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;g-emoji class="g-emoji" alias="point_up" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/261d.png"&gt;☝️&lt;/g-emoji&gt; &lt;strong&gt;Note&lt;/strong&gt;: the SQLite LIKE operator is case-insensitive but not Unicode-aware. For example, the expression &lt;code&gt;'a' LIKE 'A'&lt;/code&gt; is true but &lt;code&gt;'æ' LIKE 'Æ'&lt;/code&gt; is false.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;MATCH&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The full-text MATCH operator is available through &lt;a href="Documentation/FullTextSearch.md#fts3pattern"&gt;FTS3Pattern&lt;/a&gt; (for FTS3 and FTS4 tables) and &lt;a href="Documentation/FullTextSearch.md#fts5pattern"&gt;FTS5Pattern&lt;/a&gt; (for FTS5):&lt;/p&gt;
&lt;p&gt;FTS3 and FTS4:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; pattern &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;FTS3Pattern&lt;/span&gt;(&lt;span class="pl-c1"&gt;matchingAllTokensIn&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SQLite database&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; SELECT * FROM document WHERE document MATCH 'sqlite database'&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;Document.&lt;span class="pl-c1"&gt;matching&lt;/span&gt;(pattern)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; SELECT * FROM document WHERE content MATCH 'sqlite database'&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;Document.&lt;span class="pl-c1"&gt;filter&lt;/span&gt;(contentColumn.&lt;span class="pl-c1"&gt;match&lt;/span&gt;(pattern))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;FTS5:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; pattern &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;FTS5Pattern&lt;/span&gt;(&lt;span class="pl-c1"&gt;matchingAllTokensIn&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SQLite database&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; SELECT * FROM document WHERE document MATCH 'sqlite database'&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;Document.&lt;span class="pl-c1"&gt;matching&lt;/span&gt;(pattern)&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-sql-functions" class="anchor" aria-hidden="true" href="#sql-functions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;SQL Functions&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ABS&lt;/code&gt;, &lt;code&gt;AVG&lt;/code&gt;, &lt;code&gt;COUNT&lt;/code&gt;, &lt;code&gt;LENGTH&lt;/code&gt;, &lt;code&gt;MAX&lt;/code&gt;, &lt;code&gt;MIN&lt;/code&gt;, &lt;code&gt;SUM&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;Those are based on the &lt;code&gt;abs&lt;/code&gt;, &lt;code&gt;average&lt;/code&gt;, &lt;code&gt;count&lt;/code&gt;, &lt;code&gt;length&lt;/code&gt;, &lt;code&gt;max&lt;/code&gt;, &lt;code&gt;min&lt;/code&gt; and &lt;code&gt;sum&lt;/code&gt; Swift functions:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; SELECT MIN(score), MAX(score) FROM player&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;Player.&lt;span class="pl-c1"&gt;select&lt;/span&gt;(&lt;span class="pl-c1"&gt;min&lt;/span&gt;(scoreColumn), &lt;span class="pl-c1"&gt;max&lt;/span&gt;(scoreColumn))

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; SELECT COUNT(name) FROM player&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;Player.&lt;span class="pl-c1"&gt;select&lt;/span&gt;(&lt;span class="pl-c1"&gt;count&lt;/span&gt;(nameColumn))

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; SELECT COUNT(DISTINCT name) FROM player&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;Player.&lt;span class="pl-c1"&gt;select&lt;/span&gt;(&lt;span class="pl-c1"&gt;count&lt;/span&gt;(&lt;span class="pl-c1"&gt;distinct&lt;/span&gt;: nameColumn))&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;IFNULL&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Use the Swift &lt;code&gt;??&lt;/code&gt; operator:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; SELECT IFNULL(name, 'Anonymous') FROM player&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;Player.&lt;span class="pl-c1"&gt;select&lt;/span&gt;(nameColumn &lt;span class="pl-k"&gt;??&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Anonymous&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; SELECT IFNULL(name, email) FROM player&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;Player.&lt;span class="pl-c1"&gt;select&lt;/span&gt;(nameColumn &lt;span class="pl-k"&gt;??&lt;/span&gt; emailColumn)&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;LOWER&lt;/code&gt;, &lt;code&gt;UPPER&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The query interface does not give access to those SQLite functions. Nothing against them, but they are not unicode aware.&lt;/p&gt;
&lt;p&gt;Instead, GRDB extends SQLite with SQL functions that call the Swift built-in string functions &lt;code&gt;capitalized&lt;/code&gt;, &lt;code&gt;lowercased&lt;/code&gt;, &lt;code&gt;uppercased&lt;/code&gt;, &lt;code&gt;localizedCapitalized&lt;/code&gt;, &lt;code&gt;localizedLowercased&lt;/code&gt; and &lt;code&gt;localizedUppercased&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;Player.&lt;span class="pl-c1"&gt;select&lt;/span&gt;(nameColumn.&lt;span class="pl-c1"&gt;uppercased&lt;/span&gt;())&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;g-emoji class="g-emoji" alias="point_up" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/261d.png"&gt;☝️&lt;/g-emoji&gt; &lt;strong&gt;Note&lt;/strong&gt;: When &lt;em&gt;comparing&lt;/em&gt; strings, you'd rather use a &lt;a href="#string-comparison"&gt;collation&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; name&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;String&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;...&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Not recommended&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;nameColumn.&lt;span class="pl-c1"&gt;uppercased&lt;/span&gt;() &lt;span class="pl-k"&gt;==&lt;/span&gt; name.&lt;span class="pl-c1"&gt;uppercased&lt;/span&gt;()

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Better&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;nameColumn.&lt;span class="pl-c1"&gt;collating&lt;/span&gt;(.&lt;span class="pl-smi"&gt;caseInsensitiveCompare&lt;/span&gt;) &lt;span class="pl-k"&gt;==&lt;/span&gt; name&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Custom SQL functions and aggregates&lt;/p&gt;
&lt;p&gt;You can apply your own &lt;a href="#custom-functions-"&gt;custom SQL functions and aggregates&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; f &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;DatabaseFunction&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;f&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-k"&gt;...&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; SELECT f(name) FROM player&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;Player.&lt;span class="pl-c1"&gt;select&lt;/span&gt;(f.&lt;span class="pl-c1"&gt;apply&lt;/span&gt;(nameColumn))&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-fetching-from-requests" class="anchor" aria-hidden="true" href="#fetching-from-requests"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Fetching from Requests&lt;/h2&gt;
&lt;p&gt;Once you have a request, you can fetch the records at the origin of the request:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Some request based on `Player`&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; request &lt;span class="pl-k"&gt;=&lt;/span&gt; Player.&lt;span class="pl-c1"&gt;filter&lt;/span&gt;(&lt;span class="pl-k"&gt;...&lt;/span&gt;)&lt;span class="pl-k"&gt;...&lt;/span&gt; &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; QueryInterfaceRequest&amp;lt;Player&amp;gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Fetch players:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; request.&lt;span class="pl-c1"&gt;fetchCursor&lt;/span&gt;(db) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; A Cursor of Player&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; request.&lt;span class="pl-c1"&gt;fetchAll&lt;/span&gt;(db)    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; [Player]&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; request.&lt;span class="pl-c1"&gt;fetchOne&lt;/span&gt;(db)    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Player?&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; allPlayers &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Player.&lt;span class="pl-c1"&gt;fetchAll&lt;/span&gt;(db)                            &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; [Player]&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; arthur &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Player.&lt;span class="pl-c1"&gt;filter&lt;/span&gt;(nameColumn &lt;span class="pl-k"&gt;==&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Arthur&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;).&lt;span class="pl-c1"&gt;fetchOne&lt;/span&gt;(db) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Player?&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;See &lt;a href="#fetching-methods"&gt;fetching methods&lt;/a&gt; for information about the &lt;code&gt;fetchCursor&lt;/code&gt;, &lt;code&gt;fetchAll&lt;/code&gt; and &lt;code&gt;fetchOne&lt;/code&gt; methods.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;You sometimes want to fetch other values&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The simplest way is to use the request as an argument to a fetching method of the desired type:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Fetch an Int&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; request &lt;span class="pl-k"&gt;=&lt;/span&gt; Player.&lt;span class="pl-c1"&gt;select&lt;/span&gt;(&lt;span class="pl-c1"&gt;max&lt;/span&gt;(scoreColumn))
&lt;span class="pl-k"&gt;let&lt;/span&gt; maxScore &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;Int&lt;/span&gt;.&lt;span class="pl-c1"&gt;fetchOne&lt;/span&gt;(db, request) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Int?&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Fetch a Row&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; request &lt;span class="pl-k"&gt;=&lt;/span&gt; Player.&lt;span class="pl-c1"&gt;select&lt;/span&gt;(&lt;span class="pl-c1"&gt;min&lt;/span&gt;(scoreColumn), &lt;span class="pl-c1"&gt;max&lt;/span&gt;(scoreColumn))
&lt;span class="pl-k"&gt;let&lt;/span&gt; row &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Row.&lt;span class="pl-c1"&gt;fetchOne&lt;/span&gt;(db, request)&lt;span class="pl-k"&gt;!&lt;/span&gt;     &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Row&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; minScore &lt;span class="pl-k"&gt;=&lt;/span&gt; row[&lt;span class="pl-c1"&gt;0&lt;/span&gt;] &lt;span class="pl-k"&gt;as&lt;/span&gt; &lt;span class="pl-c1"&gt;Int&lt;/span&gt;&lt;span class="pl-k"&gt;?&lt;/span&gt;
&lt;span class="pl-k"&gt;let&lt;/span&gt; maxScore &lt;span class="pl-k"&gt;=&lt;/span&gt; row[&lt;span class="pl-c1"&gt;1&lt;/span&gt;] &lt;span class="pl-k"&gt;as&lt;/span&gt; &lt;span class="pl-c1"&gt;Int&lt;/span&gt;&lt;span class="pl-k"&gt;?&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can also change the request so that it knows the type it has to fetch:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;With &lt;code&gt;asRequest(of:)&lt;/code&gt;, useful when you use &lt;a href="Documentation/AssociationsBasics.md"&gt;Associations&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;struct&lt;/span&gt; &lt;span class="pl-en"&gt;BookInfo&lt;/span&gt;: &lt;span class="pl-e"&gt;FetchableRecord&lt;/span&gt;, &lt;span class="pl-e"&gt;Decodable &lt;/span&gt;{
    &lt;span class="pl-k"&gt;var&lt;/span&gt; book&lt;span class="pl-k"&gt;:&lt;/span&gt; Book
    &lt;span class="pl-k"&gt;var&lt;/span&gt; author&lt;span class="pl-k"&gt;:&lt;/span&gt; Author
}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; A request of BookInfo&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; request &lt;span class="pl-k"&gt;=&lt;/span&gt; Book
    .&lt;span class="pl-c1"&gt;including&lt;/span&gt;(&lt;span class="pl-c1"&gt;required&lt;/span&gt;: Book.&lt;span class="pl-smi"&gt;author&lt;/span&gt;)
    .&lt;span class="pl-c1"&gt;asRequest&lt;/span&gt;(&lt;span class="pl-c1"&gt;of&lt;/span&gt;: BookInfo.&lt;span class="pl-k"&gt;self&lt;/span&gt;)

&lt;span class="pl-k"&gt;let&lt;/span&gt; bookInfos &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; dbQueue.&lt;span class="pl-smi"&gt;read&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;try&lt;/span&gt; request.&lt;span class="pl-c1"&gt;fetchAll&lt;/span&gt;(db) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; [BookInfo]&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;}&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;With &lt;code&gt;select(..., as:)&lt;/code&gt;, which is handy when you change the selection:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; A request of Int&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; request &lt;span class="pl-k"&gt;=&lt;/span&gt; Player.&lt;span class="pl-c1"&gt;select&lt;/span&gt;(&lt;span class="pl-c1"&gt;max&lt;/span&gt;(scoreColumn), &lt;span class="pl-c1"&gt;as&lt;/span&gt;: &lt;span class="pl-c1"&gt;Int&lt;/span&gt;.&lt;span class="pl-k"&gt;self&lt;/span&gt;)

&lt;span class="pl-k"&gt;let&lt;/span&gt; maxScore &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; dbQueue.&lt;span class="pl-smi"&gt;read&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;try&lt;/span&gt; request.&lt;span class="pl-c1"&gt;fetchOne&lt;/span&gt;(db) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Int?&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;}&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-fetching-by-key" class="anchor" aria-hidden="true" href="#fetching-by-key"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Fetching By Key&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Fetching records according to their primary key&lt;/strong&gt; is a very common task. It has a shortcut which accepts any single-column primary key:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; SELECT * FROM player WHERE id = 1&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; Player.&lt;span class="pl-c1"&gt;fetchOne&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;key&lt;/span&gt;: &lt;span class="pl-c1"&gt;1&lt;/span&gt;)              &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Player?&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; SELECT * FROM player WHERE id IN (1, 2, 3)&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; Player.&lt;span class="pl-c1"&gt;fetchAll&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;keys&lt;/span&gt;: [&lt;span class="pl-c1"&gt;1&lt;/span&gt;, &lt;span class="pl-c1"&gt;2&lt;/span&gt;, &lt;span class="pl-c1"&gt;3&lt;/span&gt;])     &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; [Player]&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; SELECT * FROM country WHERE isoCode = 'FR'&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; Country.&lt;span class="pl-c1"&gt;fetchOne&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;key&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;FR&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)          &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Country?&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; SELECT * FROM country WHERE isoCode IN ('FR', 'US')&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; Country.&lt;span class="pl-c1"&gt;fetchAll&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;keys&lt;/span&gt;: [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;FR&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;US&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; [Country]&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When the table has no explicit primary key, GRDB uses the &lt;a href="#the-implicit-rowid-primary-key"&gt;hidden "rowid" column&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; SELECT * FROM document WHERE rowid = 1&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; Document.&lt;span class="pl-c1"&gt;fetchOne&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;key&lt;/span&gt;: &lt;span class="pl-c1"&gt;1&lt;/span&gt;)            &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Document?&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For multiple-column primary keys and unique keys defined by unique indexes, provide a dictionary:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; SELECT * FROM citizenship WHERE citizenId = 1 AND countryCode = 'FR'&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; Citizenship.&lt;span class="pl-c1"&gt;fetchOne&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;key&lt;/span&gt;: [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;citizenId&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;countryCode&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;FR&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Citizenship?&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; SELECT * FROM player WHERE email = 'arthur@example.com'&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; Player.&lt;span class="pl-c1"&gt;fetchOne&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;key&lt;/span&gt;: [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;email&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;arthur@example.com&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;])              &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Player?&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;When you want to build a request and plan to fetch from it later&lt;/strong&gt;, use the &lt;code&gt;filter(key:)&lt;/code&gt; and &lt;code&gt;filter(keys:)&lt;/code&gt; methods:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; SELECT * FROM player WHERE id = 1&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; request &lt;span class="pl-k"&gt;=&lt;/span&gt; Player.&lt;span class="pl-c1"&gt;filter&lt;/span&gt;(&lt;span class="pl-c1"&gt;key&lt;/span&gt;: &lt;span class="pl-c1"&gt;1&lt;/span&gt;)
&lt;span class="pl-k"&gt;let&lt;/span&gt; player &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; request.&lt;span class="pl-c1"&gt;fetchOne&lt;/span&gt;(db)    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Player?&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; SELECT * FROM player WHERE id IN (1, 2, 3)&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; request &lt;span class="pl-k"&gt;=&lt;/span&gt; Player.&lt;span class="pl-c1"&gt;filter&lt;/span&gt;(&lt;span class="pl-c1"&gt;keys&lt;/span&gt;: [&lt;span class="pl-c1"&gt;1&lt;/span&gt;, &lt;span class="pl-c1"&gt;2&lt;/span&gt;, &lt;span class="pl-c1"&gt;3&lt;/span&gt;])
&lt;span class="pl-k"&gt;let&lt;/span&gt; players &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; request.&lt;span class="pl-c1"&gt;fetchAll&lt;/span&gt;(db)   &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; [Player]&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; SELECT * FROM country WHERE isoCode = 'FR'&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; request &lt;span class="pl-k"&gt;=&lt;/span&gt; Country.&lt;span class="pl-c1"&gt;filter&lt;/span&gt;(&lt;span class="pl-c1"&gt;key&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;FR&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-k"&gt;let&lt;/span&gt; country &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; request.&lt;span class="pl-c1"&gt;fetchOne&lt;/span&gt;(db)   &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Country?&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; SELECT * FROM country WHERE isoCode IN ('FR', 'US')&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; request &lt;span class="pl-k"&gt;=&lt;/span&gt; Country.&lt;span class="pl-c1"&gt;filter&lt;/span&gt;(&lt;span class="pl-c1"&gt;keys&lt;/span&gt;: [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;FR&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;US&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;])
&lt;span class="pl-k"&gt;let&lt;/span&gt; countries &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; request.&lt;span class="pl-c1"&gt;fetchAll&lt;/span&gt;(db) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; [Country]&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; SELECT * FROM citizenship WHERE citizenId = 1 AND countryCode = 'FR'&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; request &lt;span class="pl-k"&gt;=&lt;/span&gt; Citizenship.&lt;span class="pl-c1"&gt;filter&lt;/span&gt;(&lt;span class="pl-c1"&gt;key&lt;/span&gt;: [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;citizenId&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;countryCode&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;FR&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;])
&lt;span class="pl-k"&gt;let&lt;/span&gt; citizenship &lt;span class="pl-k"&gt;=&lt;/span&gt; request.&lt;span class="pl-c1"&gt;fetchOne&lt;/span&gt;(db)   &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Citizenship?&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; SELECT * FROM player WHERE email = 'arthur@example.com'&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; request &lt;span class="pl-k"&gt;=&lt;/span&gt; Player.&lt;span class="pl-c1"&gt;filter&lt;/span&gt;(&lt;span class="pl-c1"&gt;key&lt;/span&gt;: [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;email&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;arthur@example.com&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;])
&lt;span class="pl-k"&gt;let&lt;/span&gt; player &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; request.&lt;span class="pl-c1"&gt;fetchOne&lt;/span&gt;(db)    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Player?&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-fetching-aggregated-values" class="anchor" aria-hidden="true" href="#fetching-aggregated-values"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Fetching Aggregated Values&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Requests can count.&lt;/strong&gt; The &lt;code&gt;fetchCount()&lt;/code&gt; method returns the number of rows that would be returned by a fetch request:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; SELECT COUNT(*) FROM player&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; count &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Player.&lt;span class="pl-c1"&gt;fetchCount&lt;/span&gt;(db) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Int&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; SELECT COUNT(*) FROM player WHERE email IS NOT NULL&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; count &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Player.&lt;span class="pl-c1"&gt;filter&lt;/span&gt;(emailColumn &lt;span class="pl-k"&gt;!=&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;).&lt;span class="pl-c1"&gt;fetchCount&lt;/span&gt;(db)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; SELECT COUNT(DISTINCT name) FROM player&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; count &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Player.&lt;span class="pl-c1"&gt;select&lt;/span&gt;(nameColumn).&lt;span class="pl-c1"&gt;distinct&lt;/span&gt;().&lt;span class="pl-c1"&gt;fetchCount&lt;/span&gt;(db)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; SELECT COUNT(*) FROM (SELECT DISTINCT name, score FROM player)&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; count &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Player.&lt;span class="pl-c1"&gt;select&lt;/span&gt;(nameColumn, scoreColumn).&lt;span class="pl-c1"&gt;distinct&lt;/span&gt;().&lt;span class="pl-c1"&gt;fetchCount&lt;/span&gt;(db)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Other aggregated values&lt;/strong&gt; can also be selected and fetched (see &lt;a href="#sql-functions"&gt;SQL Functions&lt;/a&gt;):&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; request &lt;span class="pl-k"&gt;=&lt;/span&gt; Player.&lt;span class="pl-c1"&gt;select&lt;/span&gt;(&lt;span class="pl-c1"&gt;max&lt;/span&gt;(scoreColumn))
&lt;span class="pl-k"&gt;let&lt;/span&gt; maxScore &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;Int&lt;/span&gt;.&lt;span class="pl-c1"&gt;fetchOne&lt;/span&gt;(db, request) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Int?&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;let&lt;/span&gt; request &lt;span class="pl-k"&gt;=&lt;/span&gt; Player.&lt;span class="pl-c1"&gt;select&lt;/span&gt;(&lt;span class="pl-c1"&gt;min&lt;/span&gt;(scoreColumn), &lt;span class="pl-c1"&gt;max&lt;/span&gt;(scoreColumn))
&lt;span class="pl-k"&gt;let&lt;/span&gt; row &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Row.&lt;span class="pl-c1"&gt;fetchOne&lt;/span&gt;(db, request)&lt;span class="pl-k"&gt;!&lt;/span&gt;     &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Row&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; minScore &lt;span class="pl-k"&gt;=&lt;/span&gt; row[&lt;span class="pl-c1"&gt;0&lt;/span&gt;] &lt;span class="pl-k"&gt;as&lt;/span&gt; &lt;span class="pl-c1"&gt;Int&lt;/span&gt;&lt;span class="pl-k"&gt;?&lt;/span&gt;
&lt;span class="pl-k"&gt;let&lt;/span&gt; maxScore &lt;span class="pl-k"&gt;=&lt;/span&gt; row[&lt;span class="pl-c1"&gt;1&lt;/span&gt;] &lt;span class="pl-k"&gt;as&lt;/span&gt; &lt;span class="pl-c1"&gt;Int&lt;/span&gt;&lt;span class="pl-k"&gt;?&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-delete-requests" class="anchor" aria-hidden="true" href="#delete-requests"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Delete Requests&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Requests can delete records&lt;/strong&gt;, with the &lt;code&gt;deleteAll()&lt;/code&gt; method:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; DELETE FROM player&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; Player.&lt;span class="pl-c1"&gt;deleteAll&lt;/span&gt;(db)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; DELETE FROM player WHERE team = 'red'&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; Player
    .&lt;span class="pl-c1"&gt;filter&lt;/span&gt;(teamColumn &lt;span class="pl-k"&gt;==&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;red&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    .&lt;span class="pl-c1"&gt;deleteAll&lt;/span&gt;(db)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; DELETE FROM player ORDER BY score LIMIT 10&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; Player
    .&lt;span class="pl-c1"&gt;order&lt;/span&gt;(scoreColumn)
    .&lt;span class="pl-c1"&gt;limit&lt;/span&gt;(&lt;span class="pl-c1"&gt;10&lt;/span&gt;)
    .&lt;span class="pl-c1"&gt;deleteAll&lt;/span&gt;(db)&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;g-emoji class="g-emoji" alias="point_up" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/261d.png"&gt;☝️&lt;/g-emoji&gt; &lt;strong&gt;Note&lt;/strong&gt; Deletion methods are only available for records that adopts the &lt;a href="#persistablerecord-protocol"&gt;PersistableRecord&lt;/a&gt; protocol.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Deleting records according to their primary key&lt;/strong&gt; is also quite common. It has a shortcut which accepts any single-column primary key:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; DELETE FROM player WHERE id = 1&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; Player.&lt;span class="pl-c1"&gt;deleteOne&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;key&lt;/span&gt;: &lt;span class="pl-c1"&gt;1&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; DELETE FROM player WHERE id IN (1, 2, 3)&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; Player.&lt;span class="pl-c1"&gt;deleteAll&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;keys&lt;/span&gt;: [&lt;span class="pl-c1"&gt;1&lt;/span&gt;, &lt;span class="pl-c1"&gt;2&lt;/span&gt;, &lt;span class="pl-c1"&gt;3&lt;/span&gt;])

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; DELETE FROM country WHERE isoCode = 'FR'&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; Country.&lt;span class="pl-c1"&gt;deleteOne&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;key&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;FR&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; DELETE FROM country WHERE isoCode IN ('FR', 'US')&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; Country.&lt;span class="pl-c1"&gt;deleteAll&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;keys&lt;/span&gt;: [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;FR&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;US&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;])&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When the table has no explicit primary key, GRDB uses the &lt;a href="#the-implicit-rowid-primary-key"&gt;hidden "rowid" column&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; DELETE FROM document WHERE rowid = 1&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; Document.&lt;span class="pl-c1"&gt;deleteOne&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;key&lt;/span&gt;: &lt;span class="pl-c1"&gt;1&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For multiple-column primary keys and unique keys defined by unique indexes, provide a dictionary:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; DELETE FROM citizenship WHERE citizenId = 1 AND countryCode = 'FR'&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; Citizenship.&lt;span class="pl-c1"&gt;deleteOne&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;key&lt;/span&gt;: [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;citizenId&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;countryCode&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;FR&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;])

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; DELETE FROM player WHERE email = 'arthur@example.com'&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;Player.&lt;span class="pl-c1"&gt;deleteOne&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;key&lt;/span&gt;: [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;email&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;arthur@example.com&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;])&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-update-requests" class="anchor" aria-hidden="true" href="#update-requests"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Update Requests&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Requests can batch update records&lt;/strong&gt;. The &lt;code&gt;updateAll()&lt;/code&gt; method accepts &lt;em&gt;column assignments&lt;/em&gt; defined with the &lt;code&gt;&amp;lt;-&lt;/code&gt; operator:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; UPDATE player SET score = 0, isHealthy = 1&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; Player.&lt;span class="pl-c1"&gt;updateAll&lt;/span&gt;(db, scoreColumn &lt;span class="pl-k"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt;, isHealthyColumn &lt;span class="pl-k"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; UPDATE player SET score = 0 WHERE team = 'red'&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; Player
    .&lt;span class="pl-c1"&gt;filter&lt;/span&gt;(teamColumn &lt;span class="pl-k"&gt;==&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;red&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    .&lt;span class="pl-c1"&gt;updateAll&lt;/span&gt;(db, scoreColumn &lt;span class="pl-k"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; UPDATE player SET top = 1 ORDER BY score DESC LIMIT 10&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; Player
    .&lt;span class="pl-c1"&gt;order&lt;/span&gt;(scoreColumn.&lt;span class="pl-smi"&gt;desc&lt;/span&gt;)
    .&lt;span class="pl-c1"&gt;limit&lt;/span&gt;(&lt;span class="pl-c1"&gt;10&lt;/span&gt;)
    .&lt;span class="pl-c1"&gt;updateAll&lt;/span&gt;(db, topColumn &lt;span class="pl-k"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Column assignments accept any expression:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; UPDATE player SET score = score + (bonus * 2)&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; Player.&lt;span class="pl-c1"&gt;updateAll&lt;/span&gt;(db, scoreColumn &lt;span class="pl-k"&gt;&amp;lt;-&lt;/span&gt; scoreColumn &lt;span class="pl-k"&gt;+&lt;/span&gt; bonusColumn &lt;span class="pl-k"&gt;*&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As a convenience, you can also use the &lt;code&gt;+=&lt;/code&gt;, &lt;code&gt;-=&lt;/code&gt;, &lt;code&gt;*=&lt;/code&gt;, or &lt;code&gt;/=&lt;/code&gt; operators:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; UPDATE player SET score = score + (bonus * 2)&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; Player.&lt;span class="pl-c1"&gt;updateAll&lt;/span&gt;(db, scoreColumn &lt;span class="pl-k"&gt;+=&lt;/span&gt; bonusColumn &lt;span class="pl-k"&gt;*&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Default &lt;a href="#conflict-resolution"&gt;Conflict Resolution&lt;/a&gt; rules apply, and you may also provide a specific one:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; UPDATE OR IGNORE player SET ...&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; Player.&lt;span class="pl-c1"&gt;updateAll&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;onConflict&lt;/span&gt;: .&lt;span class="pl-smi"&gt;ignore&lt;/span&gt;, &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;/*&lt;/span&gt; assignments... &lt;span class="pl-c"&gt;*/&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;g-emoji class="g-emoji" alias="point_up" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/261d.png"&gt;☝️&lt;/g-emoji&gt; &lt;strong&gt;Note&lt;/strong&gt; The &lt;code&gt;updateAll&lt;/code&gt; method is only available for records that adopts the &lt;a href="#persistablerecord-protocol"&gt;PersistableRecord&lt;/a&gt; protocol.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;&lt;a id="user-content-custom-requests" class="anchor" aria-hidden="true" href="#custom-requests"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Custom Requests&lt;/h2&gt;
&lt;p&gt;Until now, we have seen &lt;a href="#requests"&gt;requests&lt;/a&gt; created from any type that adopts the &lt;a href="#tablerecord-protocol"&gt;TableRecord&lt;/a&gt; protocol:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; request &lt;span class="pl-k"&gt;=&lt;/span&gt; Player.&lt;span class="pl-c1"&gt;all&lt;/span&gt;()  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; QueryInterfaceRequest&amp;lt;Player&amp;gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Those requests of type &lt;code&gt;QueryInterfaceRequest&lt;/code&gt; can fetch and count:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; request.&lt;span class="pl-c1"&gt;fetchCursor&lt;/span&gt;(db) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; A Cursor of Player&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; request.&lt;span class="pl-c1"&gt;fetchAll&lt;/span&gt;(db)    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; [Player]&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; request.&lt;span class="pl-c1"&gt;fetchOne&lt;/span&gt;(db)    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Player?&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; request.&lt;span class="pl-c1"&gt;fetchCount&lt;/span&gt;(db)  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Int&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;When the query interface can not generate the SQL you need&lt;/strong&gt;, you can still fallback to &lt;a href="#fetch-queries"&gt;raw SQL&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Custom SQL is always welcome&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; Player.&lt;span class="pl-c1"&gt;fetchAll&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SELECT ...&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)   &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; [Player]&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But you may prefer to bring some elegance back in, and build custom requests:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; No custom SQL in sight&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; Player.&lt;span class="pl-c1"&gt;customRequest&lt;/span&gt;().&lt;span class="pl-c1"&gt;fetchAll&lt;/span&gt;(db) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; [Player]&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#fetchrequest-protocol"&gt;FetchRequest Protocol&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#building-custom-requests"&gt;Building Custom Requests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#fetching-from-custom-requests"&gt;Fetching From Custom Requests&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-fetchrequest-protocol" class="anchor" aria-hidden="true" href="#fetchrequest-protocol"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;FetchRequest Protocol&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;FetchRequest&lt;/strong&gt; is the protocol for all requests that run from a single select statement, and know how fetched rows should be interpreted:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;protocol&lt;/span&gt; &lt;span class="pl-en"&gt;FetchRequest&lt;/span&gt;: &lt;span class="pl-e"&gt;DatabaseRegionConvertible &lt;/span&gt;{
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; The type that tells how fetched rows should be decoded&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;associatedtype&lt;/span&gt; &lt;span class="pl-c1"&gt;RowDecoder&lt;/span&gt;
    
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; Returns a PreparedRequest made of a prepared statement that is ready to&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; be executed, and an eventual row adapter.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;makePreparedRequest&lt;/span&gt;(&lt;span class="pl-en"&gt;_&lt;/span&gt; &lt;span class="pl-smi"&gt;db&lt;/span&gt;: Database, &lt;span class="pl-en"&gt;forSingleResult&lt;/span&gt; &lt;span class="pl-smi"&gt;singleResult&lt;/span&gt;: &lt;span class="pl-c1"&gt;Bool&lt;/span&gt;) &lt;span class="pl-k"&gt;throws&lt;/span&gt; &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; PreparedRequest
    
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; The number of rows fetched by the request.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;fetchCount&lt;/span&gt;(&lt;span class="pl-en"&gt;_&lt;/span&gt; &lt;span class="pl-smi"&gt;db&lt;/span&gt;: Database) &lt;span class="pl-k"&gt;throws&lt;/span&gt; &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;Int&lt;/span&gt;
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When the &lt;code&gt;RowDecoder&lt;/code&gt; associated type is &lt;a href="#fetching-rows"&gt;Row&lt;/a&gt;, or a &lt;a href="#value-queries"&gt;value&lt;/a&gt;, or a type that conforms to &lt;a href="#fetchablerecord-protocol"&gt;FetchableRecord&lt;/a&gt;, the request can fetch: see &lt;a href="#fetching-from-custom-requests"&gt;Fetching From Custom Requests&lt;/a&gt; below.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;makePreparedRequest(_:forSingleResult:)&lt;/code&gt; method accepts a database connection, a &lt;code&gt;singleResult&lt;/code&gt; hint, and returns a "prepared request" made of a &lt;a href="#prepared-statements"&gt;prepared statement&lt;/a&gt; and an optional &lt;a href="#row-adapters"&gt;row adapter&lt;/a&gt;. Conforming types can use the &lt;code&gt;singleResult&lt;/code&gt; hint as an optimization opportunity, and return a statement that fetches at most one row, with a &lt;code&gt;LIMIT&lt;/code&gt; SQL clause, when possible.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;fetchCount&lt;/code&gt; method has a default implementation that builds a correct but naive SQL query from the statement returned by &lt;code&gt;prepare&lt;/code&gt;: &lt;code&gt;SELECT COUNT(*) FROM (...)&lt;/code&gt;. Adopting types can refine the counting SQL by customizing their &lt;code&gt;fetchCount&lt;/code&gt; implementation.&lt;/p&gt;
&lt;p&gt;The base &lt;code&gt;DatabaseRegionConvertible&lt;/code&gt; protocol is involved in &lt;a href="#database-changes-observation"&gt;database observation&lt;/a&gt;. For more information, see &lt;a href="#databaseregion"&gt;DatabaseRegion&lt;/a&gt;, &lt;a href="#databaseregionobservation"&gt;DatabaseRegionObservation&lt;/a&gt;, and &lt;a href="#valueobservation"&gt;ValueObservation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The FetchRequest protocol is adopted, for example, by &lt;a href="#requests"&gt;query interface requests&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; A FetchRequest whose RowDecoder associated type is Player:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; request &lt;span class="pl-k"&gt;=&lt;/span&gt; Player.&lt;span class="pl-c1"&gt;all&lt;/span&gt;()&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-building-custom-requests" class="anchor" aria-hidden="true" href="#building-custom-requests"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Building Custom Requests&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;To build custom requests&lt;/strong&gt;, you can use one of the built-in requests, derive requests from other requests, or create your own request type that adopts the &lt;a href="#fetchrequest-protocol"&gt;FetchRequest&lt;/a&gt; protocol.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://groue.github.io/GRDB.swift/docs/4.6/Structs/SQLRequest.html" rel="nofollow"&gt;SQLRequest&lt;/a&gt; is a fetch request built from raw SQL. For example:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;extension&lt;/span&gt; &lt;span class="pl-en"&gt;Player&lt;/span&gt; {
    &lt;span class="pl-k"&gt;static&lt;/span&gt; &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;filter&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-en"&gt;color&lt;/span&gt;&lt;/span&gt;: Color) &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; SQLRequest&amp;lt;Player&amp;gt; {
        &lt;span class="pl-k"&gt;return&lt;/span&gt; SQLRequest&lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt;Player&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;(
            &lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SELECT * FROM player WHERE color = ?&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
            arguments&lt;span class="pl-k"&gt;:&lt;/span&gt; [color])
    }
}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; [Player]&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; Player.&lt;span class="pl-c1"&gt;filter&lt;/span&gt;(&lt;span class="pl-c1"&gt;color&lt;/span&gt;: .&lt;span class="pl-smi"&gt;red&lt;/span&gt;).&lt;span class="pl-c1"&gt;fetchAll&lt;/span&gt;(db)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In Swift 5, you can build SQLRequest with &lt;a href="Documentation/SQLInterpolation.md"&gt;SQL Interpolation&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift 5&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;extension&lt;/span&gt; &lt;span class="pl-en"&gt;Player&lt;/span&gt; {
    &lt;span class="pl-k"&gt;static&lt;/span&gt; &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;filter&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-en"&gt;color&lt;/span&gt;&lt;/span&gt;: Color) &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; SQLRequest&amp;lt;Player&amp;gt; {
        &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SELECT * FROM player WHERE color = &lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;color&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;asRequest(of:)&lt;/code&gt; method changes the type fetched by the request. It is useful, for example, when you use &lt;a href="Documentation/AssociationsBasics.md"&gt;Associations&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;struct&lt;/span&gt; &lt;span class="pl-en"&gt;BookInfo&lt;/span&gt;: &lt;span class="pl-e"&gt;FetchableRecord&lt;/span&gt;, &lt;span class="pl-e"&gt;Decodable &lt;/span&gt;{
    &lt;span class="pl-k"&gt;var&lt;/span&gt; book&lt;span class="pl-k"&gt;:&lt;/span&gt; Book
    &lt;span class="pl-k"&gt;var&lt;/span&gt; author&lt;span class="pl-k"&gt;:&lt;/span&gt; Author
}

&lt;span class="pl-k"&gt;let&lt;/span&gt; request &lt;span class="pl-k"&gt;=&lt;/span&gt; Book
    .&lt;span class="pl-c1"&gt;including&lt;/span&gt;(&lt;span class="pl-c1"&gt;required&lt;/span&gt;: Book.&lt;span class="pl-smi"&gt;author&lt;/span&gt;)
    .&lt;span class="pl-c1"&gt;asRequest&lt;/span&gt;(&lt;span class="pl-c1"&gt;of&lt;/span&gt;: BookInfo.&lt;span class="pl-k"&gt;self&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; [BookInfo]&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; request.&lt;span class="pl-c1"&gt;fetchAll&lt;/span&gt;(db)&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;adapted(_:)&lt;/code&gt; method eases the consumption of complex rows with &lt;a href="#row-adapters"&gt;row adapters&lt;/a&gt;. See &lt;a href="#joined-queries-support"&gt;Joined Queries Support&lt;/a&gt; for some sample code that uses this method.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://groue.github.io/GRDB.swift/docs/4.6/Structs/AnyFetchRequest.html" rel="nofollow"&gt;AnyFetchRequest&lt;/a&gt;: a &lt;a href="http://chris.eidhof.nl/post/type-erasers-in-swift/" rel="nofollow"&gt;type-erased&lt;/a&gt; request.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-fetching-from-custom-requests" class="anchor" aria-hidden="true" href="#fetching-from-custom-requests"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Fetching From Custom Requests&lt;/h3&gt;
&lt;p&gt;A type adopting &lt;a href="#fetchrequest-protocol"&gt;FetchRequest&lt;/a&gt; knows exactly what it has to do when its RowDecoder associated type can decode database rows (&lt;a href="#fetching-rows"&gt;Row&lt;/a&gt; itself, &lt;a href="#value-queries"&gt;values&lt;/a&gt;, or &lt;a href="#fetchablerecord-protocol"&gt;FetchableRecord&lt;/a&gt;):&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; rowRequest &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;...&lt;/span&gt;        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Some FetchRequest that fetches Row&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; request.&lt;span class="pl-c1"&gt;fetchCursor&lt;/span&gt;(db) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; A cursor of rows&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;let&lt;/span&gt; playerRequest &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;...&lt;/span&gt;     &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Some FetchRequest that fetches Player&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; request.&lt;span class="pl-c1"&gt;fetchAll&lt;/span&gt;(db)    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; [Player]&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;let&lt;/span&gt; intRequest &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;...&lt;/span&gt;        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Some FetchRequest that fetches Int&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; request.&lt;span class="pl-c1"&gt;fetchOne&lt;/span&gt;(db)    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Int?&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; playerRequest &lt;span class="pl-k"&gt;=&lt;/span&gt; SQLRequest&lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt;Player&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;(
    &lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SELECT * FROM player WHERE color = ?&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
    arguments&lt;span class="pl-k"&gt;:&lt;/span&gt; [color])
&lt;span class="pl-k"&gt;try&lt;/span&gt; request.&lt;span class="pl-c1"&gt;fetchAll&lt;/span&gt;(db)    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; [Player]&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;See &lt;a href="#fetching-methods"&gt;fetching methods&lt;/a&gt; for information about the &lt;code&gt;fetchCursor&lt;/code&gt;, &lt;code&gt;fetchAll&lt;/code&gt; and &lt;code&gt;fetchOne&lt;/code&gt; methods.&lt;/p&gt;
&lt;p&gt;The RowDecoder type associated with the FetchRequest does not have to be Row, DatabaseValueConvertible, or FetchableRecord. See the &lt;a href="#beyond-fetchablerecord"&gt;Beyond FetchableRecord&lt;/a&gt; chapter for more information.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-migrations" class="anchor" aria-hidden="true" href="#migrations"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Migrations&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Migrations&lt;/strong&gt; are a convenient way to alter your database schema over time in a consistent and easy way.&lt;/p&gt;
&lt;p&gt;Migrations run in order, once and only once. When a user upgrades your application, only non-applied migrations are run.&lt;/p&gt;
&lt;p&gt;Inside each migration, you typically &lt;a href="#database-schema"&gt;define and update your database tables&lt;/a&gt; according to your evolving application needs:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;var&lt;/span&gt; migrator &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;DatabaseMigrator&lt;/span&gt;()

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; 1st migration&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;migrator.&lt;span class="pl-c1"&gt;registerMigration&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;v1&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;create&lt;/span&gt;(&lt;span class="pl-c1"&gt;table&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;author&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) { t &lt;span class="pl-k"&gt;in&lt;/span&gt; &lt;span class="pl-k"&gt;...&lt;/span&gt; }
    &lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;create&lt;/span&gt;(&lt;span class="pl-c1"&gt;table&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;book&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) { t &lt;span class="pl-k"&gt;in&lt;/span&gt; &lt;span class="pl-k"&gt;...&lt;/span&gt; }
    &lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;create&lt;/span&gt;(&lt;span class="pl-c1"&gt;index&lt;/span&gt;: &lt;span class="pl-k"&gt;...&lt;/span&gt;)
}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; 2nd migration&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;migrator.&lt;span class="pl-c1"&gt;registerMigration&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;v2&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;alter&lt;/span&gt;(&lt;span class="pl-c1"&gt;table&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;author&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) { t &lt;span class="pl-k"&gt;in&lt;/span&gt; &lt;span class="pl-k"&gt;...&lt;/span&gt; }
}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Migrations for future versions will be inserted here:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; // 3rd migration&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; migrator.registerMigration("...") { db in&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;     ...&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; }&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Each migration runs in a separate transaction.&lt;/strong&gt; Should one throw an error, its transaction is rollbacked, subsequent migrations do not run, and the error is eventually thrown by &lt;code&gt;migrator.migrate(dbQueue)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The memory of applied migrations is stored in the database itself&lt;/strong&gt; (in a reserved table).&lt;/p&gt;
&lt;p&gt;You migrate the database up to the latest version with the &lt;code&gt;migrate(_:)&lt;/code&gt; method:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; migrator.&lt;span class="pl-c1"&gt;migrate&lt;/span&gt;(dbQueue) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; or migrator.migrate(dbPool)&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To migrate a database up to a specific version, use &lt;code&gt;migrate(_:upTo:)&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; migrator.&lt;span class="pl-c1"&gt;migrate&lt;/span&gt;(dbQueue, &lt;span class="pl-c1"&gt;upTo&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;v2&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Migrations can only run forward:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; migrator.&lt;span class="pl-c1"&gt;migrate&lt;/span&gt;(dbQueue, &lt;span class="pl-c1"&gt;upTo&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;v2&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-k"&gt;try&lt;/span&gt; migrator.&lt;span class="pl-c1"&gt;migrate&lt;/span&gt;(dbQueue, &lt;span class="pl-c1"&gt;upTo&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;v1&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; fatal error: database is already migrated beyond migration "v1"&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Check if a migration has been applied:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; appliedMigrations &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; migrator.&lt;span class="pl-c1"&gt;appliedMigrations&lt;/span&gt;(&lt;span class="pl-c1"&gt;in&lt;/span&gt;: dbQueue)
&lt;span class="pl-k"&gt;if&lt;/span&gt; appliedMigrations.&lt;span class="pl-c1"&gt;contains&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;v2&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) {
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; "v2" migration has been applied&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;}&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-the-erasedatabaseonschemachange-option" class="anchor" aria-hidden="true" href="#the-erasedatabaseonschemachange-option"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;The &lt;code&gt;eraseDatabaseOnSchemaChange&lt;/code&gt; Option&lt;/h3&gt;
&lt;p&gt;A DatabaseMigrator can automatically wipe out the full database content, and recreate the whole database from scratch, if it detects that a migration has changed its definition:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;var&lt;/span&gt; migrator &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;DatabaseMigrator&lt;/span&gt;()
migrator.&lt;span class="pl-smi"&gt;eraseDatabaseOnSchemaChange&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Beware! This flag can destroy your precious users' data!&lt;/p&gt;
&lt;p&gt;Yet it may be useful in those two situations:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;During application development, as you are still designing migrations, and the schema changes often.&lt;/p&gt;
&lt;p&gt;In this case, it is recommended that this flag does not ship in the distributed application:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;var&lt;/span&gt; migrator &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;DatabaseMigrator&lt;/span&gt;()
#&lt;span class="pl-k"&gt;if&lt;/span&gt; DEBUG
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Speed up development by nuking the database when migrations change&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;migrator.&lt;span class="pl-smi"&gt;eraseDatabaseOnSchemaChange&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;
#&lt;span class="pl-k"&gt;endif&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When the database content can easily be recreated, such as a cache for some downloaded data.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The &lt;code&gt;eraseDatabaseOnSchemaChange&lt;/code&gt; option triggers a recreation of the database if the migrator detects a &lt;em&gt;schema change&lt;/em&gt;. A schema change is any difference in the &lt;code&gt;sqlite_master&lt;/code&gt; table, which contains the SQL used to create database tables, indexes, triggers, and views.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-advanced-database-schema-changes" class="anchor" aria-hidden="true" href="#advanced-database-schema-changes"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Advanced Database Schema Changes&lt;/h3&gt;
&lt;p&gt;SQLite does not support many schema changes, and won't let you drop a table column with "ALTER TABLE ... DROP COLUMN ...", for example.&lt;/p&gt;
&lt;p&gt;Yet any kind of schema change is still possible. The SQLite documentation explains in detail how to do so: &lt;a href="https://www.sqlite.org/lang_altertable.html#otheralter" rel="nofollow"&gt;https://www.sqlite.org/lang_altertable.html#otheralter&lt;/a&gt;. This technique requires the temporary disabling of foreign key checks, and is supported by the &lt;code&gt;registerMigrationWithDeferredForeignKeyCheck&lt;/code&gt; function:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Add a NOT NULL constraint on player.name:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;migrator.&lt;span class="pl-c1"&gt;registerMigrationWithDeferredForeignKeyCheck&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;AddNotNullCheckOnName&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;create&lt;/span&gt;(&lt;span class="pl-c1"&gt;table&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;new_player&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) { t &lt;span class="pl-k"&gt;in&lt;/span&gt;
        t.&lt;span class="pl-c1"&gt;autoIncrementedPrimaryKey&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;id&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
        t.&lt;span class="pl-c1"&gt;column&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;name&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, .&lt;span class="pl-c1"&gt;text&lt;/span&gt;).&lt;span class="pl-c1"&gt;notNull&lt;/span&gt;()
    }
    &lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;execute&lt;/span&gt;(&lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;INSERT INTO new_player SELECT * FROM player&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    &lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;drop&lt;/span&gt;(&lt;span class="pl-c1"&gt;table&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;player&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    &lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;rename&lt;/span&gt;(&lt;span class="pl-c1"&gt;table&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;new_player&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;to&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;player&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While your migration code runs with disabled foreign key checks, those are re-enabled and checked at the end of the migration, regardless of eventual errors.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-joined-queries-support" class="anchor" aria-hidden="true" href="#joined-queries-support"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Joined Queries Support&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;GRDB helps consuming joined queries with complex selection.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In this chapter, we will focus on the extraction of information from complex rows, such as the ones fetched by the query below:&lt;/p&gt;
&lt;div class="highlight highlight-source-sql"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;--&lt;/span&gt; How to consume the left, middle, and right parts of those rows?&lt;/span&gt;
&lt;span class="pl-k"&gt;SELECT&lt;/span&gt; player.&lt;span class="pl-k"&gt;*&lt;/span&gt;, team.&lt;span class="pl-k"&gt;*&lt;/span&gt;, &lt;span class="pl-c1"&gt;MAX&lt;/span&gt;(&lt;span class="pl-c1"&gt;round&lt;/span&gt;.&lt;span class="pl-c1"&gt;score&lt;/span&gt;) &lt;span class="pl-k"&gt;AS&lt;/span&gt; maxScore
&lt;span class="pl-k"&gt;FROM&lt;/span&gt; player
&lt;span class="pl-k"&gt;LEFT JOIN&lt;/span&gt; team &lt;span class="pl-k"&gt;ON&lt;/span&gt; ...
&lt;span class="pl-k"&gt;LEFT JOIN&lt;/span&gt; round &lt;span class="pl-k"&gt;ON&lt;/span&gt; ...
&lt;span class="pl-k"&gt;GROUP BY&lt;/span&gt; ...&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We will not talk about the &lt;em&gt;generation&lt;/em&gt; of joined queries, which is covered in &lt;a href="Documentation/AssociationsBasics.md"&gt;Associations&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;So what are we talking about?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It is difficult to consume rows fetched from complex joined queries, because they often contain several columns with the same name: &lt;code&gt;id&lt;/code&gt; from table &lt;code&gt;player&lt;/code&gt;, &lt;code&gt;id&lt;/code&gt; from table &lt;code&gt;team&lt;/code&gt;, etc.&lt;/p&gt;
&lt;p&gt;When such ambiguity happens, GRDB row accessors always favor the leftmost matching column. This means that &lt;code&gt;row["id"]&lt;/code&gt; would give a player id, whithout any obvious way to access the team id.&lt;/p&gt;
&lt;p&gt;A classical technique to avoid this ambiguity is to give each column a unique name. For example:&lt;/p&gt;
&lt;div class="highlight highlight-source-sql"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;--&lt;/span&gt; A classical technique&lt;/span&gt;
&lt;span class="pl-k"&gt;SELECT&lt;/span&gt; &lt;span class="pl-c1"&gt;player&lt;/span&gt;.&lt;span class="pl-c1"&gt;id&lt;/span&gt; &lt;span class="pl-k"&gt;AS&lt;/span&gt; player_id, &lt;span class="pl-c1"&gt;player&lt;/span&gt;.&lt;span class="pl-c1"&gt;name&lt;/span&gt; &lt;span class="pl-k"&gt;AS&lt;/span&gt; player_name, &lt;span class="pl-c1"&gt;team&lt;/span&gt;.&lt;span class="pl-c1"&gt;id&lt;/span&gt; &lt;span class="pl-k"&gt;AS&lt;/span&gt; team_id, &lt;span class="pl-c1"&gt;team&lt;/span&gt;.&lt;span class="pl-c1"&gt;name&lt;/span&gt; &lt;span class="pl-k"&gt;AS&lt;/span&gt; team_name, &lt;span class="pl-c1"&gt;team&lt;/span&gt;.&lt;span class="pl-c1"&gt;color&lt;/span&gt; &lt;span class="pl-k"&gt;AS&lt;/span&gt; team_color, &lt;span class="pl-c1"&gt;MAX&lt;/span&gt;(&lt;span class="pl-c1"&gt;round&lt;/span&gt;.&lt;span class="pl-c1"&gt;score&lt;/span&gt;) &lt;span class="pl-k"&gt;AS&lt;/span&gt; maxScore
&lt;span class="pl-k"&gt;FROM&lt;/span&gt; player
&lt;span class="pl-k"&gt;LEFT JOIN&lt;/span&gt; team &lt;span class="pl-k"&gt;ON&lt;/span&gt; ...
&lt;span class="pl-k"&gt;LEFT JOIN&lt;/span&gt; round &lt;span class="pl-k"&gt;ON&lt;/span&gt; ...
&lt;span class="pl-k"&gt;GROUP BY&lt;/span&gt; ...&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This technique works pretty well, but it has three drawbacks:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The selection becomes hard to read and understand.&lt;/li&gt;
&lt;li&gt;Such queries are difficult to write by hand.&lt;/li&gt;
&lt;li&gt;The mangled names are a &lt;em&gt;very&lt;/em&gt; bad fit for &lt;a href="#fetchablerecord-protocol"&gt;FetchableRecord&lt;/a&gt; types that expect specific column names. After all, if the &lt;code&gt;Team&lt;/code&gt; record type can read &lt;code&gt;SELECT * FROM team ...&lt;/code&gt;, it should be able to read &lt;code&gt;SELECT ..., team.*, ...&lt;/code&gt; as well.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We thus need another technique. &lt;strong&gt;Below we'll see how to split rows into slices, and preserve column names.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;SELECT player.*, team.*, MAX(round.score) AS maxScore FROM ...&lt;/code&gt; will be splitted into three slices: one that contains player's columns, one that contains team's columns, and a remaining slice that contains remaining column(s). The Player record type will be able to read the first slice, which contains the colums expected by the &lt;code&gt;Player.init(row:)&lt;/code&gt; initializer. In the same way, the Team record type could read the second slice.&lt;/p&gt;
&lt;p&gt;Unlike the name-mangling technique, splitting rows keeps SQL legible, accepts your hand-crafted SQL queries, and plays as nicely as possible with your existing &lt;a href="#records"&gt;record types&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#splitting-rows-an-introduction"&gt;Splitting Rows, an Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#splitting-rows-the-record-way"&gt;Splitting Rows, the Record Way&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#splitting-rows-the-request-way"&gt;Splitting Rows, the Request Way&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#splitting-rows-the-codable-way"&gt;Splitting Rows, the Codable Way&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-splitting-rows-an-introduction" class="anchor" aria-hidden="true" href="#splitting-rows-an-introduction"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Splitting Rows, an Introduction&lt;/h3&gt;
&lt;p&gt;Let's first write some introductory code, hoping that this chapter will make you understand how pieces fall together. We'll see &lt;a href="#splitting-rows-the-record-way"&gt;later&lt;/a&gt; how records will help us streamline the initial approach, how to track changes in joined requests, and how we can use the standard Decodable protocol.&lt;/p&gt;
&lt;p&gt;To split rows, we will use &lt;a href="#row-adapters"&gt;row adapters&lt;/a&gt;. Row adapters adapt rows so that row consumers see exactly the columns they want. Among other things, row adapters can define several &lt;em&gt;row scopes&lt;/em&gt; that give access to as many &lt;em&gt;row slices&lt;/em&gt;. Sounds like a perfect match.&lt;/p&gt;
&lt;p&gt;At the very beginning, there is an SQL query:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; dbQueue.&lt;span class="pl-smi"&gt;read&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;let&lt;/span&gt; sql &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"""&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-s"&gt;        SELECT player.*, team.*, MAX(round.score) AS maxScore&lt;/span&gt;
&lt;span class="pl-s"&gt;        FROM player&lt;/span&gt;
&lt;span class="pl-s"&gt;        LEFT JOIN team ON ...&lt;/span&gt;
&lt;span class="pl-s"&gt;        LEFT JOIN round ON ...&lt;/span&gt;
&lt;span class="pl-s"&gt;        GROUP BY ...&lt;/span&gt;
&lt;span class="pl-s"&gt;        &lt;span class="pl-pds"&gt;"""&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We need an adapter that extracts player columns, in a slice that has as many columns as there are columns in the player table. That's &lt;a href="#rangerowadapter"&gt;RangeRowAdapter&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; SELECT player.*, team.*, ...&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;        &amp;lt;------&amp;gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;let&lt;/span&gt; playerWidth &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;columns&lt;/span&gt;(&lt;span class="pl-c1"&gt;in&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;player&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;).&lt;span class="pl-c1"&gt;count&lt;/span&gt;
    &lt;span class="pl-k"&gt;let&lt;/span&gt; playerAdapter &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;RangeRowAdapter&lt;/span&gt;(&lt;span class="pl-c1"&gt;0&lt;/span&gt; &lt;span class="pl-k"&gt;..&amp;lt;&lt;/span&gt; playerWidth)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We also need an adapter that extracts team columns:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; SELECT player.*, team.*, ...&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;                  &amp;lt;----&amp;gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;let&lt;/span&gt; teamWidth &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;columns&lt;/span&gt;(&lt;span class="pl-c1"&gt;in&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;team&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;).&lt;span class="pl-c1"&gt;count&lt;/span&gt;
    &lt;span class="pl-k"&gt;let&lt;/span&gt; teamAdapter &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;RangeRowAdapter&lt;/span&gt;(playerWidth &lt;span class="pl-k"&gt;..&amp;lt;&lt;/span&gt; (playerWidth &lt;span class="pl-k"&gt;+&lt;/span&gt; teamWidth))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We merge those two adapters in a single &lt;a href="#scopeadapter"&gt;ScopeAdapter&lt;/a&gt; that will allow us to access both sliced rows:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;    &lt;span class="pl-k"&gt;let&lt;/span&gt; playerScope &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;player&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
    &lt;span class="pl-k"&gt;let&lt;/span&gt; teamScope &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;team&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
    &lt;span class="pl-k"&gt;let&lt;/span&gt; adapter &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;ScopeAdapter&lt;/span&gt;([
        playerScope&lt;span class="pl-k"&gt;:&lt;/span&gt; playerAdapter,
        &lt;span class="pl-c1"&gt;teamScope&lt;/span&gt;: teamAdapter])&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And now we can fetch, and start consuming our rows. You already know &lt;a href="#fetching-rows"&gt;row cursors&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;    &lt;span class="pl-k"&gt;let&lt;/span&gt; rows &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Row.&lt;span class="pl-c1"&gt;fetchCursor&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;sql&lt;/span&gt;: sql, &lt;span class="pl-c1"&gt;adapter&lt;/span&gt;: adapter)
    &lt;span class="pl-k"&gt;while&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; row &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; rows.&lt;span class="pl-c1"&gt;next&lt;/span&gt;() {&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;From a fetched row, we can build a player:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;        &lt;span class="pl-k"&gt;let&lt;/span&gt; player&lt;span class="pl-k"&gt;:&lt;/span&gt; Player &lt;span class="pl-k"&gt;=&lt;/span&gt; row[playerScope]&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the SQL query, the team is joined with the &lt;code&gt;LEFT JOIN&lt;/code&gt; operator. This means that the team may be missing: its slice may contain team values, or it may only contain NULLs. When this happens, we don't want to build a Team record, and we thus load an &lt;em&gt;optional&lt;/em&gt; Team:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;        &lt;span class="pl-k"&gt;let&lt;/span&gt; team&lt;span class="pl-k"&gt;:&lt;/span&gt; Team&lt;span class="pl-k"&gt;?&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; row[teamScope]&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And finally, we can load the maximum score, assuming that the "maxScore" column is not ambiguous:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;        &lt;span class="pl-k"&gt;let&lt;/span&gt; maxScore&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;Int&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; row[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;maxScore&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]
        
        &lt;span class="pl-c1"&gt;print&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;player: &lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;player&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
        &lt;span class="pl-c1"&gt;print&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;team: &lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;team&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
        &lt;span class="pl-c1"&gt;print&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;maxScore: &lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;maxScore&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;g-emoji class="g-emoji" alias="bulb" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a1.png"&gt;💡&lt;/g-emoji&gt; In this chapter, we have learned:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;how to use &lt;code&gt;RangeRowAdapter&lt;/code&gt; to extract a specific table's columns into a &lt;em&gt;row slice&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;how to use &lt;code&gt;ScopeAdapter&lt;/code&gt; to gives access to several row slices through named scopes.&lt;/li&gt;
&lt;li&gt;how to use Row subscripting to extract records from rows, or optional records in order to deal with left joins.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3&gt;&lt;a id="user-content-splitting-rows-the-record-way" class="anchor" aria-hidden="true" href="#splitting-rows-the-record-way"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Splitting Rows, the Record Way&lt;/h3&gt;
&lt;p&gt;Our introduction above has introduced important techniques. It uses &lt;a href="#row-adapters"&gt;row adapters&lt;/a&gt; in order to split rows. It uses Row subscripting in order to extract records from row slices.&lt;/p&gt;
&lt;p&gt;But we may want to make it more usable and robust:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It's generally easier to consume records than raw rows.&lt;/li&gt;
&lt;li&gt;Joined records not always need all columns from a table (see &lt;code&gt;TableRecord.databaseSelection&lt;/code&gt; in &lt;a href="#columns-selected-by-a-request"&gt;Columns Selected by a Request&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Building row adapters is long and error prone.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To address the first bullet, let's define a record that holds our player, optional team, and maximum score. Since it can decode database rows, it adopts the &lt;a href="#fetchablerecord-protocol"&gt;FetchableRecord&lt;/a&gt; protocol:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;struct&lt;/span&gt; &lt;span class="pl-en"&gt;PlayerInfo&lt;/span&gt; {
    &lt;span class="pl-k"&gt;var&lt;/span&gt; player&lt;span class="pl-k"&gt;:&lt;/span&gt; Player
    &lt;span class="pl-k"&gt;var&lt;/span&gt; team&lt;span class="pl-k"&gt;:&lt;/span&gt; Team&lt;span class="pl-k"&gt;?&lt;/span&gt;
    &lt;span class="pl-k"&gt;var&lt;/span&gt; maxScore&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;Int&lt;/span&gt;
}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; PlayerInfo can decode rows:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;extension&lt;/span&gt; &lt;span class="pl-en"&gt;PlayerInfo&lt;/span&gt;: &lt;span class="pl-e"&gt;FetchableRecord &lt;/span&gt;{
    &lt;span class="pl-k"&gt;private&lt;/span&gt; &lt;span class="pl-k"&gt;enum&lt;/span&gt; &lt;span class="pl-en"&gt;Scopes&lt;/span&gt; {
        &lt;span class="pl-k"&gt;static&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; player &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;player&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
        &lt;span class="pl-k"&gt;static&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; team &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;team&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
    }
    
    &lt;span class="pl-k"&gt;init&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-en"&gt;row&lt;/span&gt;&lt;/span&gt;: Row) {
        player &lt;span class="pl-k"&gt;=&lt;/span&gt; row[Scopes.&lt;span class="pl-smi"&gt;player&lt;/span&gt;]
        team &lt;span class="pl-k"&gt;=&lt;/span&gt; row[Scopes.&lt;span class="pl-smi"&gt;team&lt;/span&gt;]
        maxScore &lt;span class="pl-k"&gt;=&lt;/span&gt; row[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;maxScore&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]
    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let's now write the method that fetches PlayerInfo records:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;extension&lt;/span&gt; &lt;span class="pl-en"&gt;PlayerInfo&lt;/span&gt; {
    &lt;span class="pl-k"&gt;static&lt;/span&gt; &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;fetchAll&lt;/span&gt;(&lt;span class="pl-en"&gt;_&lt;/span&gt; &lt;span class="pl-smi"&gt;db&lt;/span&gt;: Database) &lt;span class="pl-k"&gt;throws&lt;/span&gt; &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; [PlayerInfo] {&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To acknowledge that both Player and Team records may customize their selection of the "player" and "team" columns, we'll write our SQL in a slightly different way:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Let Player and Team customize their selection:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;        &lt;span class="pl-k"&gt;let&lt;/span&gt; sql &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"""&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-s"&gt;            SELECT&lt;/span&gt;
&lt;span class="pl-s"&gt;                &lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;Player.&lt;span class="pl-c1"&gt;selectionSQL&lt;/span&gt;()&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;, -- instead of player.*&lt;/span&gt;
&lt;span class="pl-s"&gt;                &lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;Team.&lt;span class="pl-c1"&gt;selectionSQL&lt;/span&gt;()&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;,   -- instead of team.*&lt;/span&gt;
&lt;span class="pl-s"&gt;                MAX(round.score) AS maxScore&lt;/span&gt;
&lt;span class="pl-s"&gt;            FROM player&lt;/span&gt;
&lt;span class="pl-s"&gt;            LEFT JOIN team ON ...&lt;/span&gt;
&lt;span class="pl-s"&gt;            LEFT JOIN round ON ...&lt;/span&gt;
&lt;span class="pl-s"&gt;            GROUP BY ...&lt;/span&gt;
&lt;span class="pl-s"&gt;            &lt;span class="pl-pds"&gt;"""&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Player.selectionSQL()&lt;/code&gt; will output &lt;code&gt;player.*&lt;/code&gt;, unless Player defines a &lt;a href="#columns-selected-by-a-request"&gt;customized selection&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;g-emoji class="g-emoji" alias="point_up" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/261d.png"&gt;☝️&lt;/g-emoji&gt; &lt;strong&gt;Note&lt;/strong&gt;: you may also use SQL table aliases:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; sql &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"""&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-s"&gt;    SELECT&lt;/span&gt;
&lt;span class="pl-s"&gt;        &lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;Player.&lt;span class="pl-c1"&gt;selectionSQL&lt;/span&gt;(&lt;span class="pl-c1"&gt;alias&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;p&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;,&lt;/span&gt;
&lt;span class="pl-s"&gt;        &lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;Team.&lt;span class="pl-c1"&gt;selectionSQL&lt;/span&gt;(&lt;span class="pl-c1"&gt;alias&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;t&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;,&lt;/span&gt;
&lt;span class="pl-s"&gt;        MAX(r.score) AS maxScore&lt;/span&gt;
&lt;span class="pl-s"&gt;    FROM player p&lt;/span&gt;
&lt;span class="pl-s"&gt;    LEFT JOIN team t ON ...&lt;/span&gt;
&lt;span class="pl-s"&gt;    LEFT JOIN round r ON ...&lt;/span&gt;
&lt;span class="pl-s"&gt;    GROUP BY ...&lt;/span&gt;
&lt;span class="pl-s"&gt;    &lt;span class="pl-pds"&gt;"""&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now is the time to build adapters (taking in account the customized selection of both player and team). We use the &lt;code&gt;splittingRowAdapters&lt;/code&gt; global function, which builds row adapters of desired widths:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;        &lt;span class="pl-k"&gt;let&lt;/span&gt; adapters &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;splittingRowAdapters&lt;/span&gt;(&lt;span class="pl-c1"&gt;columnCounts&lt;/span&gt;: [
            Player.&lt;span class="pl-c1"&gt;numberOfSelectedColumns&lt;/span&gt;(db),
            Team.&lt;span class="pl-c1"&gt;numberOfSelectedColumns&lt;/span&gt;(db)])
    
        &lt;span class="pl-k"&gt;let&lt;/span&gt; adapter &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;ScopeAdapter&lt;/span&gt;([
            Scopes.&lt;span class="pl-smi"&gt;player&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; adapters[&lt;span class="pl-c1"&gt;0&lt;/span&gt;],
            Scopes.&lt;span class="pl-smi"&gt;team&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; adapters[&lt;span class="pl-c1"&gt;1&lt;/span&gt;]])&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;g-emoji class="g-emoji" alias="point_up" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/261d.png"&gt;☝️&lt;/g-emoji&gt; &lt;strong&gt;Note&lt;/strong&gt;: &lt;code&gt;splittingRowAdapters&lt;/code&gt; returns as many adapters as necessary to fully split a row. In the example above, it returns &lt;em&gt;three&lt;/em&gt; adapters: one for player, one for team, and one for the remaining columns.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And finally, we can fetch player infos:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;        &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; PlayerInfo.&lt;span class="pl-c1"&gt;fetchAll&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;sql&lt;/span&gt;: sql, &lt;span class="pl-c1"&gt;adapter&lt;/span&gt;: adapter)
    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And when your app needs to fetch player infos, it now reads:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Fetch player infos&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; playerInfos &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; dbQueue.&lt;span class="pl-smi"&gt;read&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;try&lt;/span&gt; PlayerInfo.&lt;span class="pl-c1"&gt;fetchAll&lt;/span&gt;(db)
}&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;g-emoji class="g-emoji" alias="bulb" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a1.png"&gt;💡&lt;/g-emoji&gt; In this chapter, we have learned:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;how to define a &lt;code&gt;FetchableRecord&lt;/code&gt; record that consumes rows fetched from a joined query.&lt;/li&gt;
&lt;li&gt;how to use &lt;code&gt;selectionSQL&lt;/code&gt; and &lt;code&gt;numberOfSelectedColumns&lt;/code&gt; in order to deal with nested record types that define custom selection.&lt;/li&gt;
&lt;li&gt;how to use &lt;code&gt;splittingRowAdapters&lt;/code&gt; in order to streamline the definition of row slices.&lt;/li&gt;
&lt;li&gt;how to gather all relevant methods and constants in a record type, fully responsible of its relationship with the database.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3&gt;&lt;a id="user-content-splitting-rows-the-request-way" class="anchor" aria-hidden="true" href="#splitting-rows-the-request-way"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Splitting Rows, the Request Way&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;PlayerInfo.fetchAll&lt;/code&gt; method &lt;a href="#splitting-rows-the-record-way"&gt;above&lt;/a&gt; directly fetches records. It's all good, but in order to profit from &lt;a href="#database-changes-observation"&gt;database observation&lt;/a&gt;, you'll need a &lt;a href="#custom-requests"&gt;custom request&lt;/a&gt; that defines a database query.&lt;/p&gt;
&lt;p&gt;It is recommended that you read the previous paragraphs before you dive in this sample code. We start with the same PlayerInfo record as above:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;struct&lt;/span&gt; &lt;span class="pl-en"&gt;PlayerInfo&lt;/span&gt; {
    &lt;span class="pl-k"&gt;var&lt;/span&gt; player&lt;span class="pl-k"&gt;:&lt;/span&gt; Player
    &lt;span class="pl-k"&gt;var&lt;/span&gt; team&lt;span class="pl-k"&gt;:&lt;/span&gt; Team&lt;span class="pl-k"&gt;?&lt;/span&gt;
    &lt;span class="pl-k"&gt;var&lt;/span&gt; maxScore&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;Int&lt;/span&gt;
}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; PlayerInfo can decode rows:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;extension&lt;/span&gt; &lt;span class="pl-en"&gt;PlayerInfo&lt;/span&gt;: &lt;span class="pl-e"&gt;FetchableRecord &lt;/span&gt;{
    &lt;span class="pl-k"&gt;private&lt;/span&gt; &lt;span class="pl-k"&gt;enum&lt;/span&gt; &lt;span class="pl-en"&gt;Scopes&lt;/span&gt; {
        &lt;span class="pl-k"&gt;static&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; player &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;player&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
        &lt;span class="pl-k"&gt;static&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; team &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;team&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
    }
    
    &lt;span class="pl-k"&gt;init&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-en"&gt;row&lt;/span&gt;&lt;/span&gt;: Row) {
        player &lt;span class="pl-k"&gt;=&lt;/span&gt; row[Scopes.&lt;span class="pl-smi"&gt;player&lt;/span&gt;]
        team &lt;span class="pl-k"&gt;=&lt;/span&gt; row[Scopes.&lt;span class="pl-smi"&gt;team&lt;/span&gt;]
        maxScore &lt;span class="pl-k"&gt;=&lt;/span&gt; row[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;maxScore&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]
    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we write a method that returns a request, and build the fetching method on top of that request:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;extension&lt;/span&gt; &lt;span class="pl-en"&gt;PlayerInfo&lt;/span&gt; {
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; The request for all player infos&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;static&lt;/span&gt; &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;all&lt;/span&gt;() &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; AdaptedFetchRequest&amp;lt;SQLRequest&amp;lt;PlayerInfo&amp;gt;&amp;gt; {
        &lt;span class="pl-k"&gt;let&lt;/span&gt; sql &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"""&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-s"&gt;            SELECT&lt;/span&gt;
&lt;span class="pl-s"&gt;                &lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;Player.&lt;span class="pl-c1"&gt;selectionSQL&lt;/span&gt;()&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;,&lt;/span&gt;
&lt;span class="pl-s"&gt;                &lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;Team.&lt;span class="pl-c1"&gt;selectionSQL&lt;/span&gt;()&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;,&lt;/span&gt;
&lt;span class="pl-s"&gt;                MAX(round.score) AS maxScore&lt;/span&gt;
&lt;span class="pl-s"&gt;            FROM player&lt;/span&gt;
&lt;span class="pl-s"&gt;            LEFT JOIN team ON ...&lt;/span&gt;
&lt;span class="pl-s"&gt;            LEFT JOIN round ON ...&lt;/span&gt;
&lt;span class="pl-s"&gt;            GROUP BY ...&lt;/span&gt;
&lt;span class="pl-s"&gt;            &lt;span class="pl-pds"&gt;"""&lt;/span&gt;&lt;/span&gt;
        &lt;span class="pl-k"&gt;return&lt;/span&gt; SQLRequest&lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt;PlayerInfo&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;(&lt;span class="pl-c1"&gt;sql&lt;/span&gt;: sql).&lt;span class="pl-smi"&gt;adapted&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
            &lt;span class="pl-k"&gt;let&lt;/span&gt; adapters &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;splittingRowAdapters&lt;/span&gt;(&lt;span class="pl-c1"&gt;columnCounts&lt;/span&gt;: [
                Player.&lt;span class="pl-c1"&gt;numberOfSelectedColumns&lt;/span&gt;(db),
                Team.&lt;span class="pl-c1"&gt;numberOfSelectedColumns&lt;/span&gt;(db)])
            &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-c1"&gt;ScopeAdapter&lt;/span&gt;([
                Scopes.&lt;span class="pl-smi"&gt;player&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; adapters[&lt;span class="pl-c1"&gt;0&lt;/span&gt;],
                Scopes.&lt;span class="pl-smi"&gt;team&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; adapters[&lt;span class="pl-c1"&gt;1&lt;/span&gt;]])
        }
    }
    
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; Fetches all player infos&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;static&lt;/span&gt; &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;fetchAll&lt;/span&gt;(&lt;span class="pl-en"&gt;_&lt;/span&gt; &lt;span class="pl-smi"&gt;db&lt;/span&gt;: Database) &lt;span class="pl-k"&gt;throws&lt;/span&gt; &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; [PlayerInfo] {
        &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;all&lt;/span&gt;().&lt;span class="pl-c1"&gt;fetchAll&lt;/span&gt;(db)
    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It is now time to use our request:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Fetch player infos&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; playerInfos &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; dbQueue.&lt;span class="pl-smi"&gt;read&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;try&lt;/span&gt; PlayerInfo.&lt;span class="pl-c1"&gt;fetchAll&lt;/span&gt;(db)
}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Track player infos with RxRGDB:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;PlayerInfo.&lt;span class="pl-c1"&gt;all&lt;/span&gt;()
    .&lt;span class="pl-smi"&gt;rx&lt;/span&gt;.&lt;span class="pl-c1"&gt;fetchAll&lt;/span&gt;(&lt;span class="pl-c1"&gt;in&lt;/span&gt;: dbQueue)
    .&lt;span class="pl-c1"&gt;subscribe&lt;/span&gt;(&lt;span class="pl-c1"&gt;onNext&lt;/span&gt;: { (&lt;span class="pl-c1"&gt;playerInfos&lt;/span&gt;: [PlayerInfo]) &lt;span class="pl-k"&gt;in&lt;/span&gt;
        &lt;span class="pl-c1"&gt;print&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Player infos have changed&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    })&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;g-emoji class="g-emoji" alias="bulb" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a1.png"&gt;💡&lt;/g-emoji&gt; In this chapter, we have learned how to define a custom request that can both fetch records from joined queries, and feed database observation tools.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;&lt;a id="user-content-splitting-rows-the-codable-way" class="anchor" aria-hidden="true" href="#splitting-rows-the-codable-way"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Splitting Rows, the Codable Way&lt;/h3&gt;
&lt;p&gt;&lt;a href="#codable-records"&gt;Codable Records&lt;/a&gt; build on top of the standard Decodable protocol in order to decode database rows.&lt;/p&gt;
&lt;p&gt;You can consume complex joined queries with Codable records as well. As a demonstration, we'll rewrite the &lt;a href="#splitting-rows-the-request-way"&gt;above&lt;/a&gt; sample code:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;struct&lt;/span&gt; &lt;span class="pl-en"&gt;Player&lt;/span&gt;: &lt;span class="pl-e"&gt;Decodable&lt;/span&gt;, &lt;span class="pl-e"&gt;FetchableRecord&lt;/span&gt;, &lt;span class="pl-e"&gt;TableRecord &lt;/span&gt;{
    &lt;span class="pl-k"&gt;var&lt;/span&gt; id&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;Int64&lt;/span&gt;
    &lt;span class="pl-k"&gt;var&lt;/span&gt; name&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;String&lt;/span&gt;
}
&lt;span class="pl-k"&gt;struct&lt;/span&gt; &lt;span class="pl-en"&gt;Team&lt;/span&gt;: &lt;span class="pl-e"&gt;Decodable&lt;/span&gt;, &lt;span class="pl-e"&gt;FetchableRecord&lt;/span&gt;, &lt;span class="pl-e"&gt;TableRecord &lt;/span&gt;{
    &lt;span class="pl-k"&gt;var&lt;/span&gt; id&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;Int64&lt;/span&gt;
    &lt;span class="pl-k"&gt;var&lt;/span&gt; name&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;String&lt;/span&gt;
    &lt;span class="pl-k"&gt;var&lt;/span&gt; color&lt;span class="pl-k"&gt;:&lt;/span&gt; Color
}
&lt;span class="pl-k"&gt;struct&lt;/span&gt; &lt;span class="pl-en"&gt;PlayerInfo&lt;/span&gt;: &lt;span class="pl-e"&gt;Decodable&lt;/span&gt;, &lt;span class="pl-e"&gt;FetchableRecord &lt;/span&gt;{
    &lt;span class="pl-k"&gt;var&lt;/span&gt; player&lt;span class="pl-k"&gt;:&lt;/span&gt; Player
    &lt;span class="pl-k"&gt;var&lt;/span&gt; team&lt;span class="pl-k"&gt;:&lt;/span&gt; Team&lt;span class="pl-k"&gt;?&lt;/span&gt;
    &lt;span class="pl-k"&gt;var&lt;/span&gt; maxScore&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;Int&lt;/span&gt;
}

&lt;span class="pl-k"&gt;extension&lt;/span&gt; &lt;span class="pl-en"&gt;PlayerInfo&lt;/span&gt; {
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; The request for all player infos&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;static&lt;/span&gt; &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;all&lt;/span&gt;() &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; AdaptedFetchRequest&amp;lt;SQLRequest&amp;lt;PlayerInfo&amp;gt;&amp;gt; {
        &lt;span class="pl-k"&gt;let&lt;/span&gt; sql &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"""&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-s"&gt;            SELECT&lt;/span&gt;
&lt;span class="pl-s"&gt;                &lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;Player.&lt;span class="pl-c1"&gt;selectionSQL&lt;/span&gt;()&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;,&lt;/span&gt;
&lt;span class="pl-s"&gt;                &lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;Team.&lt;span class="pl-c1"&gt;selectionSQL&lt;/span&gt;()&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;,&lt;/span&gt;
&lt;span class="pl-s"&gt;                MAX(round.score) AS maxScore&lt;/span&gt;
&lt;span class="pl-s"&gt;            FROM player&lt;/span&gt;
&lt;span class="pl-s"&gt;            LEFT JOIN team ON ...&lt;/span&gt;
&lt;span class="pl-s"&gt;            LEFT JOIN round ON ...&lt;/span&gt;
&lt;span class="pl-s"&gt;            GROUP BY ...&lt;/span&gt;
&lt;span class="pl-s"&gt;            &lt;span class="pl-pds"&gt;"""&lt;/span&gt;&lt;/span&gt;
        &lt;span class="pl-k"&gt;return&lt;/span&gt; SQLRequest&lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt;PlayerInfo&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;(&lt;span class="pl-c1"&gt;sql&lt;/span&gt;: sql).&lt;span class="pl-smi"&gt;adapted&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
            &lt;span class="pl-k"&gt;let&lt;/span&gt; adapters &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;splittingRowAdapters&lt;/span&gt;(&lt;span class="pl-c1"&gt;columnCounts&lt;/span&gt;: [
                Player.&lt;span class="pl-c1"&gt;numberOfSelectedColumns&lt;/span&gt;(db),
                Team.&lt;span class="pl-c1"&gt;numberOfSelectedColumns&lt;/span&gt;(db)])
            &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-c1"&gt;ScopeAdapter&lt;/span&gt;([
                CodingKeys.&lt;span class="pl-smi"&gt;player&lt;/span&gt;.&lt;span class="pl-c1"&gt;stringValue&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; adapters[&lt;span class="pl-c1"&gt;0&lt;/span&gt;],
                CodingKeys.&lt;span class="pl-smi"&gt;team&lt;/span&gt;.&lt;span class="pl-c1"&gt;stringValue&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; adapters[&lt;span class="pl-c1"&gt;1&lt;/span&gt;]])
        }
    }
    
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; Fetches all player infos&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;static&lt;/span&gt; &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;fetchAll&lt;/span&gt;(&lt;span class="pl-en"&gt;_&lt;/span&gt; &lt;span class="pl-smi"&gt;db&lt;/span&gt;: Database) &lt;span class="pl-k"&gt;throws&lt;/span&gt; &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; [PlayerInfo] {
        &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;all&lt;/span&gt;().&lt;span class="pl-c1"&gt;fetchAll&lt;/span&gt;(db)
    }
}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Fetch player infos&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; playerInfos &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; dbQueue.&lt;span class="pl-smi"&gt;read&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;try&lt;/span&gt; PlayerInfo.&lt;span class="pl-c1"&gt;fetchAll&lt;/span&gt;(db)
}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Track player infos with RxRGDB:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;PlayerInfo.&lt;span class="pl-c1"&gt;all&lt;/span&gt;()
    .&lt;span class="pl-smi"&gt;rx&lt;/span&gt;.&lt;span class="pl-c1"&gt;fetchAll&lt;/span&gt;(&lt;span class="pl-c1"&gt;in&lt;/span&gt;: dbQueue)
    .&lt;span class="pl-c1"&gt;subscribe&lt;/span&gt;(&lt;span class="pl-c1"&gt;onNext&lt;/span&gt;: { (&lt;span class="pl-c1"&gt;playerInfos&lt;/span&gt;: [PlayerInfo]) &lt;span class="pl-k"&gt;in&lt;/span&gt;
        &lt;span class="pl-c1"&gt;print&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Player infos have changed&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    })&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;g-emoji class="g-emoji" alias="bulb" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a1.png"&gt;💡&lt;/g-emoji&gt; In this chapter, we have learned how to use the &lt;code&gt;Decodable&lt;/code&gt; protocol and its associated &lt;code&gt;CodingKeys&lt;/code&gt; enum in order to dry up our code.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;&lt;a id="user-content-database-changes-observation" class="anchor" aria-hidden="true" href="#database-changes-observation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Database Changes Observation&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;SQLite notifies its host application of changes performed to the database, as well of transaction commits and rollbacks.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;GRDB puts this SQLite feature to some good use, and lets you observe the database in various ways:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#after-commit-hook"&gt;After Commit Hook&lt;/a&gt;: Handle successful transactions one by one.&lt;/li&gt;
&lt;li&gt;&lt;a href="#valueobservation-and-databaseregionobservation"&gt;ValueObservation and DatabaseRegionObservation&lt;/a&gt;: Automated tracking of database requests.&lt;/li&gt;
&lt;li&gt;&lt;a href="#transactionobserver-protocol"&gt;TransactionObserver Protocol&lt;/a&gt;: Low-level database observation.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://github.com/groue/GRDBCombine"&gt;GRDBCombine&lt;/a&gt;: Automated tracking of database changes, with &lt;a href="https://developer.apple.com/documentation/combine" rel="nofollow"&gt;Combine&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://github.com/RxSwiftCommunity/RxGRDB"&gt;RxGRDB&lt;/a&gt;: Automated tracking of database changes, with &lt;a href="https://github.com/ReactiveX/RxSwift"&gt;RxSwift&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Database observation requires that a single &lt;a href="#database-queues"&gt;database queue&lt;/a&gt; or &lt;a href="#database-pools"&gt;pool&lt;/a&gt; is kept open for all the duration of the database usage.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-after-commit-hook" class="anchor" aria-hidden="true" href="#after-commit-hook"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;After Commit Hook&lt;/h2&gt;
&lt;p&gt;When your application needs to make sure a specific database transaction has been successfully committed before it executes some work, use the &lt;code&gt;Database.afterNextTransactionCommit(_:)&lt;/code&gt; method.&lt;/p&gt;
&lt;p&gt;Its closure argument is called right after database changes have been successfully written to disk:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; dbQueue.&lt;span class="pl-smi"&gt;write&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    db.&lt;span class="pl-smi"&gt;afterNextTransactionCommit&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
        &lt;span class="pl-c1"&gt;print&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;success&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    }
    &lt;span class="pl-k"&gt;...&lt;/span&gt;
} &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; prints "success"&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The closure runs in a protected dispatch queue, serialized with all database updates.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This "after commit hook" helps synchronizing the database with other resources, such as files, or system sensors.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In the example below, a &lt;a href="https://developer.apple.com/documentation/corelocation/cllocationmanager" rel="nofollow"&gt;location manager&lt;/a&gt; starts monitoring a CLRegion if and only if it has successfully been stored in the database:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; Inserts a region in the database, and start monitoring upon&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; successful insertion.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;startMonitoring&lt;/span&gt;(&lt;span class="pl-en"&gt;_&lt;/span&gt; &lt;span class="pl-smi"&gt;db&lt;/span&gt;: Database, &lt;span class="pl-smi"&gt;&lt;span class="pl-en"&gt;region&lt;/span&gt;&lt;/span&gt;: CLRegion) &lt;span class="pl-k"&gt;throws&lt;/span&gt; {
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Make sure database is inside a transaction&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-smi"&gt;inSavepoint&lt;/span&gt; {
        
        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Save the region in the database&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;        &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;insert&lt;/span&gt;(&lt;span class="pl-k"&gt;...&lt;/span&gt;)
        
        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Start monitoring if and only if the insertion is&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; eventually committed&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;        db.&lt;span class="pl-smi"&gt;afterNextTransactionCommit&lt;/span&gt; { &lt;span class="pl-c1"&gt;_&lt;/span&gt; &lt;span class="pl-k"&gt;in&lt;/span&gt;
            &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; locationManager prefers the main queue:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;            DispatchQueue.&lt;span class="pl-smi"&gt;main&lt;/span&gt;.&lt;span class="pl-smi"&gt;async&lt;/span&gt; {
                locationManager.&lt;span class="pl-c1"&gt;startMonitoring&lt;/span&gt;(&lt;span class="pl-c1"&gt;for&lt;/span&gt;: region)
            }
        }
        
        &lt;span class="pl-k"&gt;return&lt;/span&gt; .&lt;span class="pl-smi"&gt;commit&lt;/span&gt;
    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The method above won't trigger the location manager if the transaction is eventually rollbacked (explicitly, or because of an error), as in the sample code below:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; dbQueue.&lt;span class="pl-smi"&gt;write&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; success&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;startMonitoring&lt;/span&gt;(db, region)
    
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; On error, the transaction is rollbacked, the region is not inserted, and&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; the location manager is not invoked.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;failableMethod&lt;/span&gt;(db)
}&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-valueobservation-and-databaseregionobservation" class="anchor" aria-hidden="true" href="#valueobservation-and-databaseregionobservation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;ValueObservation and DatabaseRegionObservation&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;ValueObservation and DatabaseRegionObservation&lt;/strong&gt; are two database observations tools that track changes in database &lt;a href="#requests"&gt;requests&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Let's observe all players!&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; request &lt;span class="pl-k"&gt;=&lt;/span&gt; Player.&lt;span class="pl-c1"&gt;all&lt;/span&gt;()&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href="#valueobservation"&gt;ValueObservation&lt;/a&gt; notifies your application with &lt;strong&gt;fresh values&lt;/strong&gt; (this is what most applications need &lt;g-emoji class="g-emoji" alias="+1" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f44d.png"&gt;👍&lt;/g-emoji&gt;):&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; observation &lt;span class="pl-k"&gt;=&lt;/span&gt; ValueObservation.&lt;span class="pl-smi"&gt;tracking&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;try&lt;/span&gt; request.&lt;span class="pl-c1"&gt;fetchAll&lt;/span&gt;(db)
}
&lt;span class="pl-k"&gt;let&lt;/span&gt; observer &lt;span class="pl-k"&gt;=&lt;/span&gt; observation.&lt;span class="pl-c1"&gt;start&lt;/span&gt;(
    &lt;span class="pl-c1"&gt;in&lt;/span&gt;: dbQueue,
    &lt;span class="pl-c1"&gt;onError&lt;/span&gt;: { error &lt;span class="pl-k"&gt;in&lt;/span&gt;
        &lt;span class="pl-c1"&gt;print&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;fresh players could not be fetched&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    },
    &lt;span class="pl-c1"&gt;onChange&lt;/span&gt;: { (&lt;span class="pl-c1"&gt;players&lt;/span&gt;: [Player]) &lt;span class="pl-k"&gt;in&lt;/span&gt;
        &lt;span class="pl-k"&gt;let&lt;/span&gt; names &lt;span class="pl-k"&gt;=&lt;/span&gt; players.&lt;span class="pl-c1"&gt;map&lt;/span&gt; { &lt;span class="pl-c1"&gt;$0&lt;/span&gt;.&lt;span class="pl-smi"&gt;name&lt;/span&gt; }.&lt;span class="pl-c1"&gt;joined&lt;/span&gt;(&lt;span class="pl-c1"&gt;separator&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;, &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
        &lt;span class="pl-c1"&gt;print&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Fresh players: &lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;names&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    })

&lt;span class="pl-k"&gt;try&lt;/span&gt; dbQueue.&lt;span class="pl-smi"&gt;write&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;Player&lt;/span&gt;(&lt;span class="pl-c1"&gt;name&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Arthur&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;).&lt;span class="pl-c1"&gt;insert&lt;/span&gt;(db)
}
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Prints "Fresh players: Arthur, ..."&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href="#databaseregionobservation"&gt;DatabaseRegionObservation&lt;/a&gt; notifies your application with &lt;strong&gt;database connections&lt;/strong&gt;, right after an impactful database transaction has been committed (reserved for more advanced use cases &lt;g-emoji class="g-emoji" alias="nerd_face" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f913.png"&gt;🤓&lt;/g-emoji&gt;):&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; observation &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;DatabaseRegionObservation&lt;/span&gt;(&lt;span class="pl-c1"&gt;tracking&lt;/span&gt;: request)
&lt;span class="pl-k"&gt;let&lt;/span&gt; observer &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; observation.&lt;span class="pl-c1"&gt;start&lt;/span&gt;(&lt;span class="pl-c1"&gt;in&lt;/span&gt;: dbQueue) { (&lt;span class="pl-c1"&gt;db&lt;/span&gt;: Database) &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-c1"&gt;print&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Players have changed.&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
}

&lt;span class="pl-k"&gt;try&lt;/span&gt; dbQueue.&lt;span class="pl-smi"&gt;write&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;Player&lt;/span&gt;(&lt;span class="pl-c1"&gt;name&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Barbara&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;).&lt;span class="pl-c1"&gt;insert&lt;/span&gt;(db)
}
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Prints "Players have changed."&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#valueobservation"&gt;ValueObservation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#databaseregionobservation"&gt;DatabaseRegionObservation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-valueobservation" class="anchor" aria-hidden="true" href="#valueobservation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;ValueObservation&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;ValueObservation tracks changes in the results of database &lt;a href="#requests"&gt;requests&lt;/a&gt;, and notifies fresh values whenever the database changes.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Changes are only notified after they have been committed in the database. No insertion, update, or deletion in tracked tables is missed. This includes indirect changes triggered by &lt;a href="https://www.sqlite.org/foreignkeys.html#fk_actions" rel="nofollow"&gt;foreign keys&lt;/a&gt; or &lt;a href="https://www.sqlite.org/lang_createtrigger.html" rel="nofollow"&gt;SQL triggers&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="#valueobservation-usage"&gt;ValueObservation Usage&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#valueobservationtrackingvalue"&gt;ValueObservation.tracking(value:)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#valueobservationtracking_fetch"&gt;ValueObservation.tracking(_:fetch:)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#observationforcount-observationforall-observationforfirst"&gt;observationForCount, observationForAll, observationForFirst&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#valueobservation-transformations"&gt;ValueObservation Transformations&lt;/a&gt;: &lt;a href="#valueobservationmap"&gt;map&lt;/a&gt;, &lt;a href="#valueobservationcompactmap"&gt;compactMap&lt;/a&gt;, ...&lt;/li&gt;
&lt;li&gt;&lt;a href="#valueobservation-error-handling"&gt;ValueObservation Error Handling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#valueobservation-options"&gt;ValueObservation Options&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#advanced-valueobservationtracking_reducer"&gt;Advanced: ValueObservation.tracking(_:reducer:)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-valueobservation-usage" class="anchor" aria-hidden="true" href="#valueobservation-usage"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;ValueObservation Usage&lt;/h3&gt;
&lt;p&gt;Here is a typical UIViewController which observes the database in order to keep its view up-to-date:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;PlayerViewController&lt;/span&gt;: &lt;span class="pl-e"&gt;UIViewController &lt;/span&gt;{
    &lt;span class="pl-k"&gt;@IBOutlet&lt;/span&gt; &lt;span class="pl-k"&gt;weak&lt;/span&gt; &lt;span class="pl-k"&gt;var&lt;/span&gt; nameLabel&lt;span class="pl-k"&gt;:&lt;/span&gt; UILabel&lt;span class="pl-k"&gt;!&lt;/span&gt;
    &lt;span class="pl-k"&gt;private&lt;/span&gt; &lt;span class="pl-k"&gt;var&lt;/span&gt; observer&lt;span class="pl-k"&gt;:&lt;/span&gt; TransactionObserver&lt;span class="pl-k"&gt;?&lt;/span&gt;
    
    &lt;span class="pl-k"&gt;override&lt;/span&gt; &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;viewWillAppear&lt;/span&gt;(&lt;span class="pl-en"&gt;_&lt;/span&gt; &lt;span class="pl-smi"&gt;animated&lt;/span&gt;: &lt;span class="pl-c1"&gt;Bool&lt;/span&gt;) {
        &lt;span class="pl-c1"&gt;super&lt;/span&gt;.&lt;span class="pl-c1"&gt;viewWillAppear&lt;/span&gt;(animated)
        
        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Define a ValueObservation which tracks a player&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;        &lt;span class="pl-k"&gt;let&lt;/span&gt; observation &lt;span class="pl-k"&gt;=&lt;/span&gt; ValueObservation.&lt;span class="pl-smi"&gt;tracking&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
            &lt;span class="pl-k"&gt;try&lt;/span&gt; Player.&lt;span class="pl-c1"&gt;fetchOne&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;key&lt;/span&gt;: &lt;span class="pl-c1"&gt;42&lt;/span&gt;)
        }
        
        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Start observing the database&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;        observer &lt;span class="pl-k"&gt;=&lt;/span&gt; observation.&lt;span class="pl-c1"&gt;start&lt;/span&gt;(
            &lt;span class="pl-c1"&gt;in&lt;/span&gt;: dbQueue,
            &lt;span class="pl-c1"&gt;onError&lt;/span&gt;: { error &lt;span class="pl-k"&gt;in&lt;/span&gt;
                &lt;span class="pl-c1"&gt;print&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;player could not be fetched&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
            },
            &lt;span class="pl-c1"&gt;onChange&lt;/span&gt;: { [&lt;span class="pl-k"&gt;weak&lt;/span&gt; &lt;span class="pl-c1"&gt;self&lt;/span&gt;] (&lt;span class="pl-c1"&gt;player&lt;/span&gt;: Player&lt;span class="pl-k"&gt;?&lt;/span&gt;) &lt;span class="pl-k"&gt;in&lt;/span&gt;
                &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Player has been refreshed: update view&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;                &lt;span class="pl-k"&gt;guard&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-c1"&gt;self&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;self&lt;/span&gt; &lt;span class="pl-k"&gt;else&lt;/span&gt; { &lt;span class="pl-k"&gt;return&lt;/span&gt; }
                &lt;span class="pl-c1"&gt;self&lt;/span&gt;.&lt;span class="pl-smi"&gt;nameLabel&lt;/span&gt;.&lt;span class="pl-c1"&gt;text&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; player&lt;span class="pl-k"&gt;?&lt;/span&gt;.&lt;span class="pl-smi"&gt;name&lt;/span&gt;
            })
    }
    
    &lt;span class="pl-k"&gt;override&lt;/span&gt; &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;viewWillDisappear&lt;/span&gt;(&lt;span class="pl-en"&gt;_&lt;/span&gt; &lt;span class="pl-smi"&gt;animated&lt;/span&gt;: &lt;span class="pl-c1"&gt;Bool&lt;/span&gt;) {
        &lt;span class="pl-c1"&gt;super&lt;/span&gt;.&lt;span class="pl-c1"&gt;viewWillDisappear&lt;/span&gt;(animated)
        
        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Stop observing the database&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;        observer &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;
    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;By default, all values and errors are notified on the main queue. Views can be updated right from the &lt;code&gt;onChange&lt;/code&gt; callback.&lt;/p&gt;
&lt;p&gt;By default, an initial fetch is performed as soon as the observation starts: the view is set up and ready when the &lt;code&gt;viewWillAppear&lt;/code&gt; method returns.&lt;/p&gt;
&lt;p&gt;The observer returned by the &lt;code&gt;start&lt;/code&gt; method is stored in a property of the view controller. This allows the view controller to control the duration of the observation. When the observer is deallocated, the observation stops. Meanwhile, all transactions that modify the observed player are notified, and the &lt;code&gt;nameLabel&lt;/code&gt; is kept up-to-date.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;g-emoji class="g-emoji" alias="bulb" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a1.png"&gt;💡&lt;/g-emoji&gt; &lt;strong&gt;Tip&lt;/strong&gt;: see the &lt;a href="Documentation/DemoApps/GRDBDemoiOS/README.md"&gt;Demo Application&lt;/a&gt; for a sample app that uses ValueObservation.&lt;/p&gt;
&lt;p&gt;&lt;g-emoji class="g-emoji" alias="bulb" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a1.png"&gt;💡&lt;/g-emoji&gt; &lt;strong&gt;Tip&lt;/strong&gt;: When fetching values is slow, and should never ever block the main queue, opt in for async notifications:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;override&lt;/span&gt; &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;viewWillAppear&lt;/span&gt;(&lt;span class="pl-en"&gt;_&lt;/span&gt; &lt;span class="pl-smi"&gt;animated&lt;/span&gt;: &lt;span class="pl-c1"&gt;Bool&lt;/span&gt;) {
    &lt;span class="pl-c1"&gt;super&lt;/span&gt;.&lt;span class="pl-c1"&gt;viewWillAppear&lt;/span&gt;(animated)
    
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Define a ValueObservation which tracks a player&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;let&lt;/span&gt; observation &lt;span class="pl-k"&gt;=&lt;/span&gt; ValueObservation.&lt;span class="pl-smi"&gt;tracking&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
        &lt;span class="pl-k"&gt;try&lt;/span&gt; Player.&lt;span class="pl-c1"&gt;fetchOne&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;key&lt;/span&gt;: &lt;span class="pl-c1"&gt;42&lt;/span&gt;)
    }

    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Observation is asynchronous&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    observation.&lt;span class="pl-smi"&gt;scheduling&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; .&lt;span class="pl-c1"&gt;async&lt;/span&gt;(&lt;span class="pl-c1"&gt;onQueue&lt;/span&gt;: .&lt;span class="pl-smi"&gt;main&lt;/span&gt;, &lt;span class="pl-c1"&gt;startImmediately&lt;/span&gt;: &lt;span class="pl-c1"&gt;true&lt;/span&gt;)

    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Start observing the database&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    observer &lt;span class="pl-k"&gt;=&lt;/span&gt; observation.&lt;span class="pl-c1"&gt;start&lt;/span&gt;(
        &lt;span class="pl-c1"&gt;in&lt;/span&gt;: dbQueue,
        &lt;span class="pl-c1"&gt;onError&lt;/span&gt;: { error &lt;span class="pl-k"&gt;in&lt;/span&gt;
            &lt;span class="pl-c1"&gt;print&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;player could not be fetched&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
        },
        &lt;span class="pl-c1"&gt;onChange&lt;/span&gt;: { [&lt;span class="pl-k"&gt;weak&lt;/span&gt; &lt;span class="pl-c1"&gt;self&lt;/span&gt;] (&lt;span class="pl-c1"&gt;player&lt;/span&gt;: Player&lt;span class="pl-k"&gt;?&lt;/span&gt;) &lt;span class="pl-k"&gt;in&lt;/span&gt;
            &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Player has been refreshed: update view&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;            &lt;span class="pl-k"&gt;guard&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-c1"&gt;self&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;self&lt;/span&gt; &lt;span class="pl-k"&gt;else&lt;/span&gt; { &lt;span class="pl-k"&gt;return&lt;/span&gt; }
            &lt;span class="pl-c1"&gt;self&lt;/span&gt;.&lt;span class="pl-smi"&gt;activityIndicator&lt;/span&gt;.&lt;span class="pl-c1"&gt;stopAnimating&lt;/span&gt;()
            &lt;span class="pl-c1"&gt;self&lt;/span&gt;.&lt;span class="pl-smi"&gt;nameLabel&lt;/span&gt;.&lt;span class="pl-c1"&gt;text&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; player&lt;span class="pl-k"&gt;?&lt;/span&gt;.&lt;span class="pl-smi"&gt;name&lt;/span&gt;
        })

    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Wait for player&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    activityIndicator.&lt;span class="pl-c1"&gt;startAnimating&lt;/span&gt;()
    nameLabel.&lt;span class="pl-c1"&gt;text&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;See &lt;a href="#valueobservationscheduling"&gt;ValueObservation.scheduling&lt;/a&gt; for more information.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;&lt;a id="user-content-valueobservationtrackingvalue" class="anchor" aria-hidden="true" href="#valueobservationtrackingvalue"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;ValueObservation.tracking(value:)&lt;/h3&gt;
&lt;p&gt;In order to observe database values, you will generally define a &lt;strong&gt;ValueObservation&lt;/strong&gt; which tracks the value you are interested in, and then start the observation.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Track changes in a single player&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; observation &lt;span class="pl-k"&gt;=&lt;/span&gt; ValueObservation.&lt;span class="pl-smi"&gt;tracking&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;try&lt;/span&gt; Player.&lt;span class="pl-c1"&gt;fetchOne&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;key&lt;/span&gt;: &lt;span class="pl-c1"&gt;42&lt;/span&gt;)
}

observer &lt;span class="pl-k"&gt;=&lt;/span&gt; observation.&lt;span class="pl-c1"&gt;start&lt;/span&gt;(
    &lt;span class="pl-c1"&gt;in&lt;/span&gt;: dbQueue,
    &lt;span class="pl-c1"&gt;onError&lt;/span&gt;: { error &lt;span class="pl-k"&gt;in&lt;/span&gt; &lt;span class="pl-k"&gt;...&lt;/span&gt; },
    &lt;span class="pl-c1"&gt;onChange&lt;/span&gt;: { (&lt;span class="pl-c1"&gt;player&lt;/span&gt;: Player&lt;span class="pl-k"&gt;?&lt;/span&gt;) &lt;span class="pl-k"&gt;in&lt;/span&gt;
        &lt;span class="pl-c1"&gt;print&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Fresh player: &lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;player&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    })&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;You can observe several requests and several tables if you need&lt;/strong&gt;: all writes that have an impact on the fetched values will trigger the observation, and call the &lt;code&gt;onChange&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;It may happen that such an observation notifies identical consecutive values.&lt;/strong&gt; This is because it will fetch a fresh value whenever a change &lt;em&gt;could&lt;/em&gt; happen. For example, the observation for the maximum player score will notify a fresh value everytime a score is changed, inserted, or deleted, even if the maximum score is unchanged:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Track changes in the maximum player score&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; This observation may notify duplicate values&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; observation &lt;span class="pl-k"&gt;=&lt;/span&gt; ValueObservation.&lt;span class="pl-smi"&gt;tracking&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;try&lt;/span&gt; Player.&lt;span class="pl-c1"&gt;select&lt;/span&gt;(&lt;span class="pl-c1"&gt;max&lt;/span&gt;(&lt;span class="pl-c1"&gt;Column&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;score&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)), &lt;span class="pl-c1"&gt;as&lt;/span&gt;: &lt;span class="pl-c1"&gt;Int&lt;/span&gt;.&lt;span class="pl-k"&gt;self&lt;/span&gt;).&lt;span class="pl-c1"&gt;fetchOne&lt;/span&gt;(db)
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can filter out those duplicates with the &lt;a href="#valueobservationremoveduplicates"&gt;ValueObservation.removeDuplicates&lt;/a&gt; method. It requires the observed value to adopt the Equatable protocol:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; observation &lt;span class="pl-k"&gt;=&lt;/span&gt; ValueObservation
    .&lt;span class="pl-smi"&gt;tracking&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
        &lt;span class="pl-k"&gt;try&lt;/span&gt; Player.&lt;span class="pl-c1"&gt;select&lt;/span&gt;(&lt;span class="pl-c1"&gt;max&lt;/span&gt;(&lt;span class="pl-c1"&gt;Column&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;score&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)), &lt;span class="pl-c1"&gt;as&lt;/span&gt;: &lt;span class="pl-c1"&gt;Int&lt;/span&gt;.&lt;span class="pl-k"&gt;self&lt;/span&gt;).&lt;span class="pl-c1"&gt;fetchOne&lt;/span&gt;(db)
    }
    .&lt;span class="pl-c1"&gt;removeDuplicates&lt;/span&gt;()&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We will see below other ways to define observations. They all add a little convenience, or optimization.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-valueobservationtracking_fetch" class="anchor" aria-hidden="true" href="#valueobservationtracking_fetch"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;ValueObservation.tracking(_:fetch:)&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;ValueObservation.tracking(_:fetch:)&lt;/code&gt; method is an &lt;strong&gt;optimized&lt;/strong&gt; version of the &lt;a href="#valueobservationtrackingvalue"&gt;&lt;code&gt;ValueObservation.tracking(value:)&lt;/code&gt;&lt;/a&gt; method seen above.&lt;/p&gt;
&lt;p&gt;The returned observation ouputs exactly the same results, but it can perform better when you use a &lt;a href="#database-pools"&gt;database pool&lt;/a&gt;, and the fetch is slow. It reduces write contention by fetching fresh values without blocking write accesses. When you use a &lt;a href="#database-queues"&gt;database queue&lt;/a&gt;, no optimization is applied.&lt;/p&gt;
&lt;p&gt;It accepts two arguments:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A list of observed requests.&lt;/li&gt;
&lt;li&gt;A closure that fetches a fresh value whenever one of the observed requests are modified.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Changes that happen outside of the observed requests are ignored, so make sure you fully cover the database region you want to observe. This is the price you pay for the optimization.&lt;/p&gt;
&lt;p&gt;Let's give a practical example, and observe the "Hall of Fame":&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;struct&lt;/span&gt; &lt;span class="pl-en"&gt;HallOfFame&lt;/span&gt; {
    &lt;span class="pl-k"&gt;var&lt;/span&gt; totalPlayerCount&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;Int&lt;/span&gt;
    &lt;span class="pl-k"&gt;var&lt;/span&gt; bestPlayers&lt;span class="pl-k"&gt;:&lt;/span&gt; [Player]
}

&lt;span class="pl-k"&gt;extension&lt;/span&gt; &lt;span class="pl-en"&gt;HallOfFame&lt;/span&gt; {
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; Fetch the HallOfFame&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;static&lt;/span&gt; &lt;span class="pl-c1"&gt;fetch&lt;/span&gt;(&lt;span class="pl-c1"&gt;_&lt;/span&gt; db&lt;span class="pl-k"&gt;:&lt;/span&gt; Database) &lt;span class="pl-k"&gt;throws&lt;/span&gt; &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; HallOfFame {
        &lt;span class="pl-k"&gt;let&lt;/span&gt; totalPlayerCount &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Player.&lt;span class="pl-c1"&gt;fetchCount&lt;/span&gt;(db)
        &lt;span class="pl-k"&gt;let&lt;/span&gt; bestPlayers &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Player
            .&lt;span class="pl-c1"&gt;order&lt;/span&gt;(&lt;span class="pl-c1"&gt;Column&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;score&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;).&lt;span class="pl-smi"&gt;desc&lt;/span&gt;)
            .&lt;span class="pl-c1"&gt;limit&lt;/span&gt;(&lt;span class="pl-c1"&gt;10&lt;/span&gt;)
            .&lt;span class="pl-c1"&gt;fetchAll&lt;/span&gt;(db)
        &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-c1"&gt;HallOfFame&lt;/span&gt;(
            &lt;span class="pl-c1"&gt;totalPlayerCount&lt;/span&gt;: totalPlayerCount,
            &lt;span class="pl-c1"&gt;bestPlayers&lt;/span&gt;: bestPlayers)
    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In order to track changes in the Hall of Fame in an optimized way, we see that any change to the &lt;code&gt;player&lt;/code&gt; table can impact the Hall of Fame. We thus track the request for all players, &lt;code&gt;Player.all()&lt;/code&gt;, and fetch a new Hall of Fame whenever players change:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; observation &lt;span class="pl-k"&gt;=&lt;/span&gt; ValueObservation.&lt;span class="pl-c1"&gt;tracking&lt;/span&gt;(Player.&lt;span class="pl-c1"&gt;all&lt;/span&gt;(), &lt;span class="pl-c1"&gt;fetch&lt;/span&gt;: { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;try&lt;/span&gt; HallOfFame.&lt;span class="pl-c1"&gt;fetch&lt;/span&gt;(db)
})&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;g-emoji class="g-emoji" alias="point_up" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/261d.png"&gt;☝️&lt;/g-emoji&gt; &lt;strong&gt;Note&lt;/strong&gt;: the initial parameter of &lt;code&gt;ValueObservation.tracking(_:fetch:)&lt;/code&gt; can be fed with requests, and generally speaking, values that adopt the &lt;a href="#the-databaseregionconvertible-protocol"&gt;DatabaseRegionConvertible&lt;/a&gt; protocol.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;&lt;a id="user-content-observationforcount-observationforall-observationforfirst" class="anchor" aria-hidden="true" href="#observationforcount-observationforall-observationforfirst"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;observationForCount, observationForAll, observationForFirst&lt;/h3&gt;
&lt;p&gt;Given a &lt;a href="#requests"&gt;request&lt;/a&gt;, even a &lt;a href="#custom-requests"&gt;custom request&lt;/a&gt;, you can observe its number of results, all results, or the first one:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;request.&lt;span class="pl-c1"&gt;observationForCount&lt;/span&gt;()
request.&lt;span class="pl-c1"&gt;observationForAll&lt;/span&gt;()
request.&lt;span class="pl-c1"&gt;observationForFirst&lt;/span&gt;()&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Those observations are equivalent to the following ones, defined with &lt;a href="#valueobservationtrackingvalue"&gt;&lt;code&gt;ValueObservation.tracking(value:)&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;ValueObservation.&lt;span class="pl-smi"&gt;tracking&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; request.&lt;span class="pl-c1"&gt;fetchCount&lt;/span&gt;(db) }
ValueObservation.&lt;span class="pl-smi"&gt;tracking&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; request.&lt;span class="pl-c1"&gt;fetchAll&lt;/span&gt;(db) }
ValueObservation.&lt;span class="pl-smi"&gt;tracking&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; request.&lt;span class="pl-c1"&gt;fetchOne&lt;/span&gt;(db) }&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Yet they are &lt;strong&gt;optimized&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;They perform a filtering of consecutive identical values, based on raw database values, so that you are not notified of database changes that do not impact the result of the request.&lt;/li&gt;
&lt;li&gt;They can perform better when you use a &lt;a href="#database-pools"&gt;database pool&lt;/a&gt;, and the fetch is slow.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-valueobservation-transformations" class="anchor" aria-hidden="true" href="#valueobservation-transformations"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;ValueObservation Transformations&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#valueobservationmap"&gt;ValueObservation.map&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#valueobservationcompactmap"&gt;ValueObservation.compactMap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#valueobservationremoveduplicates"&gt;ValueObservation.removeDuplicates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#valueobservationcombine"&gt;ValueObservation.combine(...)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a id="user-content-valueobservationmap" class="anchor" aria-hidden="true" href="#valueobservationmap"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;ValueObservation.map&lt;/h4&gt;
&lt;p&gt;The &lt;code&gt;map&lt;/code&gt; method lets you transform the values notified by a ValueObservation.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Observe a player's profile image&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; observation &lt;span class="pl-k"&gt;=&lt;/span&gt; ValueObservation
    .&lt;span class="pl-smi"&gt;tracking&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Player.&lt;span class="pl-c1"&gt;fetchOne&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;key&lt;/span&gt;: &lt;span class="pl-c1"&gt;42&lt;/span&gt;) }
    .&lt;span class="pl-c1"&gt;map&lt;/span&gt; { player &lt;span class="pl-k"&gt;in&lt;/span&gt; player&lt;span class="pl-k"&gt;?&lt;/span&gt;.&lt;span class="pl-c1"&gt;image&lt;/span&gt; }

&lt;span class="pl-k"&gt;let&lt;/span&gt; observer &lt;span class="pl-k"&gt;=&lt;/span&gt; observation.&lt;span class="pl-c1"&gt;start&lt;/span&gt;(
    &lt;span class="pl-c1"&gt;in&lt;/span&gt;: dbQueue,
    &lt;span class="pl-c1"&gt;onError&lt;/span&gt;: { error &lt;span class="pl-k"&gt;in&lt;/span&gt; &lt;span class="pl-k"&gt;...&lt;/span&gt; },
    &lt;span class="pl-c1"&gt;onChange&lt;/span&gt;: { (&lt;span class="pl-c1"&gt;image&lt;/span&gt;: UIImage&lt;span class="pl-k"&gt;?&lt;/span&gt;) &lt;span class="pl-k"&gt;in&lt;/span&gt;
        &lt;span class="pl-c1"&gt;print&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Player picture has changed&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    })&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The transformation closure does not run on the main queue, and is suitable for heavy computations.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-valueobservationcompactmap" class="anchor" aria-hidden="true" href="#valueobservationcompactmap"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;ValueObservation.compactMap&lt;/h4&gt;
&lt;p&gt;The &lt;code&gt;compactMap&lt;/code&gt; method lets you transform and filter the values notified by a ValueObservation. Only non-nil transformed values are notified.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Observe a player&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; observation &lt;span class="pl-k"&gt;=&lt;/span&gt; ValueObservation
    .&lt;span class="pl-smi"&gt;tracking&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Player.&lt;span class="pl-c1"&gt;fetchOne&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;key&lt;/span&gt;: &lt;span class="pl-c1"&gt;42&lt;/span&gt;) }
    .&lt;span class="pl-smi"&gt;compactMap&lt;/span&gt; { &lt;span class="pl-c1"&gt;$0&lt;/span&gt; }
    
&lt;span class="pl-k"&gt;let&lt;/span&gt; observer &lt;span class="pl-k"&gt;=&lt;/span&gt; observation.&lt;span class="pl-c1"&gt;start&lt;/span&gt;(
    &lt;span class="pl-c1"&gt;in&lt;/span&gt;: dbQueue,
    &lt;span class="pl-c1"&gt;onError&lt;/span&gt;: { error &lt;span class="pl-k"&gt;in&lt;/span&gt; &lt;span class="pl-k"&gt;...&lt;/span&gt; },
    &lt;span class="pl-c1"&gt;onChange&lt;/span&gt;: { (&lt;span class="pl-c1"&gt;player&lt;/span&gt;: Player) &lt;span class="pl-k"&gt;in&lt;/span&gt;
        &lt;span class="pl-c1"&gt;print&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Player name: &lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;player.&lt;span class="pl-smi"&gt;name&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    })&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The transformation closure does not run on the main queue, and is suitable for heavy computations.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-valueobservationremoveduplicates" class="anchor" aria-hidden="true" href="#valueobservationremoveduplicates"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;ValueObservation.removeDuplicates&lt;/h4&gt;
&lt;p&gt;The &lt;code&gt;removeDuplicates&lt;/code&gt; method filters out the consecutive equal values notified by a ValueObservation. The observed values must adopt the standard Equatable protocol.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; observation &lt;span class="pl-k"&gt;=&lt;/span&gt; ValueObservation
    .&lt;span class="pl-smi"&gt;tracking&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Player.&lt;span class="pl-c1"&gt;fetchOne&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;key&lt;/span&gt;: &lt;span class="pl-c1"&gt;42&lt;/span&gt;) }
    .&lt;span class="pl-c1"&gt;removeDuplicates&lt;/span&gt;()

&lt;span class="pl-k"&gt;let&lt;/span&gt; observer &lt;span class="pl-k"&gt;=&lt;/span&gt; observation.&lt;span class="pl-c1"&gt;start&lt;/span&gt;(
    &lt;span class="pl-c1"&gt;in&lt;/span&gt;: dbQueue,
    &lt;span class="pl-c1"&gt;onError&lt;/span&gt;: { error &lt;span class="pl-k"&gt;in&lt;/span&gt; &lt;span class="pl-k"&gt;...&lt;/span&gt; },
    &lt;span class="pl-c1"&gt;onChange&lt;/span&gt;: { (&lt;span class="pl-c1"&gt;player&lt;/span&gt;: Player) &lt;span class="pl-k"&gt;in&lt;/span&gt;
        &lt;span class="pl-c1"&gt;print&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Player: &lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;player&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    })&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;g-emoji class="g-emoji" alias="point_up" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/261d.png"&gt;☝️&lt;/g-emoji&gt; &lt;strong&gt;Note&lt;/strong&gt;: the observations returned by the &lt;a href="#observationforcount-observationforall-observationforfirst"&gt;observationForCount, observationForAll, observationForFirst&lt;/a&gt; methods already perform a similar filtering, based on raw database values.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;&lt;a id="user-content-valueobservationcombine" class="anchor" aria-hidden="true" href="#valueobservationcombine"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;ValueObservation.combine(...)&lt;/h4&gt;
&lt;p&gt;The &lt;code&gt;ValueObservation.combine(...)&lt;/code&gt; method builds a single observation from several:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Two base observations&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; playerCountObservation &lt;span class="pl-k"&gt;=&lt;/span&gt; ValueObservation.&lt;span class="pl-smi"&gt;tracking&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;try&lt;/span&gt; Player.&lt;span class="pl-c1"&gt;fetchCount&lt;/span&gt;(db)
}
&lt;span class="pl-k"&gt;let&lt;/span&gt; bestPlayersObservation &lt;span class="pl-k"&gt;=&lt;/span&gt; ValueObservation.&lt;span class="pl-smi"&gt;tracking&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;try&lt;/span&gt; Player
        .&lt;span class="pl-c1"&gt;limit&lt;/span&gt;(&lt;span class="pl-c1"&gt;10&lt;/span&gt;)
        .&lt;span class="pl-c1"&gt;order&lt;/span&gt;(&lt;span class="pl-c1"&gt;Column&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;score&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;).&lt;span class="pl-smi"&gt;desc&lt;/span&gt;)
        .&lt;span class="pl-c1"&gt;fetchAll&lt;/span&gt;(db)
}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; The combined observation&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; observation &lt;span class="pl-k"&gt;=&lt;/span&gt; ValueObservation.&lt;span class="pl-c1"&gt;combine&lt;/span&gt;(
    playerCountObservation, 
    bestPlayersObservation)
    
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Start tracking the hall of fame&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; observer &lt;span class="pl-k"&gt;=&lt;/span&gt; observation.&lt;span class="pl-c1"&gt;start&lt;/span&gt;(
    &lt;span class="pl-c1"&gt;in&lt;/span&gt;: dbQueue,
    &lt;span class="pl-c1"&gt;onError&lt;/span&gt;: { error &lt;span class="pl-k"&gt;in&lt;/span&gt; &lt;span class="pl-k"&gt;...&lt;/span&gt; },
    &lt;span class="pl-c1"&gt;onChange&lt;/span&gt;: { (totalPlayerCount, bestPlayers) &lt;span class="pl-k"&gt;in&lt;/span&gt;
        &lt;span class="pl-c1"&gt;print&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"""&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-s"&gt;            Best players out of &lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;totalPlayerCount&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;:&lt;/span&gt;
&lt;span class="pl-s"&gt;            &lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;bestPlayers&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-s"&gt;            &lt;span class="pl-pds"&gt;"""&lt;/span&gt;&lt;/span&gt;)
    })&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;combine&lt;/code&gt; also exists as an instance method:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;struct&lt;/span&gt; &lt;span class="pl-en"&gt;HallOfFame&lt;/span&gt; {
    &lt;span class="pl-k"&gt;var&lt;/span&gt; totalPlayerCount&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;Int&lt;/span&gt;
    &lt;span class="pl-k"&gt;var&lt;/span&gt; bestPlayers&lt;span class="pl-k"&gt;:&lt;/span&gt; [Player]
}

&lt;span class="pl-k"&gt;let&lt;/span&gt; observation &lt;span class="pl-k"&gt;=&lt;/span&gt; playerCountObservation.&lt;span class="pl-c1"&gt;combine&lt;/span&gt;(bestPlayersObservation) {
    &lt;span class="pl-c1"&gt;HallOfFame&lt;/span&gt;(&lt;span class="pl-c1"&gt;totalPlayerCount&lt;/span&gt;: &lt;span class="pl-c1"&gt;$0&lt;/span&gt;, &lt;span class="pl-c1"&gt;bestPlayers&lt;/span&gt;: &lt;span class="pl-c1"&gt;$1&lt;/span&gt;)
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can combine up to eight observations together. They can feed from as many database tables as needed.&lt;/p&gt;
&lt;p&gt;Combining observations provides the guarantee that notified values are &lt;a href="https://en.wikipedia.org/wiki/Consistency_(database_systems)" rel="nofollow"&gt;&lt;strong&gt;consistent&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;g-emoji class="g-emoji" alias="point_up" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/261d.png"&gt;☝️&lt;/g-emoji&gt; &lt;strong&gt;Note&lt;/strong&gt;: readers who are familiar with Reactive Programming will recognize the &lt;a href="http://reactivex.io/documentation/operators/combinelatest.html" rel="nofollow"&gt;CombineLatest&lt;/a&gt; operator in the ValueObservation &lt;code&gt;combine&lt;/code&gt; method. The reactive operator does not care about data consistency, though: if you use a Reactive layer such as &lt;a href="http://github.com/groue/GRDBCombine"&gt;GRDBCombine&lt;/a&gt; or &lt;a href="http://github.com/RxSwiftCommunity/RxGRDB"&gt;RxGRDB&lt;/a&gt;, make sure you compose observations with &lt;code&gt;ValueObservation.combine&lt;/code&gt;, not with the CombineLatest operator.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;&lt;a id="user-content-valueobservation-error-handling" class="anchor" aria-hidden="true" href="#valueobservation-error-handling"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;ValueObservation Error Handling&lt;/h3&gt;
&lt;p&gt;When you start an observation, the &lt;code&gt;onError&lt;/code&gt; callback is called whenever fresh values could not be fetched. It is scheduled just like values (see &lt;a href="#valueobservationscheduling"&gt;ValueObservation.scheduling&lt;/a&gt;):&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; observer &lt;span class="pl-k"&gt;=&lt;/span&gt; observation.&lt;span class="pl-c1"&gt;start&lt;/span&gt;(
    &lt;span class="pl-c1"&gt;in&lt;/span&gt;: dbQueue,
    &lt;span class="pl-c1"&gt;onError&lt;/span&gt;: { error &lt;span class="pl-k"&gt;in&lt;/span&gt;
        &lt;span class="pl-c1"&gt;print&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;fresh value could not be fetched&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    },
    &lt;span class="pl-c1"&gt;onChange&lt;/span&gt;: { value &lt;span class="pl-k"&gt;in&lt;/span&gt;
        &lt;span class="pl-c1"&gt;print&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;fresh value: &lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;value&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    })&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;An error does not stop the observation. After an error has been received, subsequent transactions may succeed in notifying fresh values. You may witness such temporary errors when the database becomes temporarily unreachable, for example due to &lt;a href="#data-protection"&gt;data protection&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Depending on the way your application wants to deal with such errors, you may want to tighten your control on the scheduling of database accesses with &lt;a href="#databaseregionobservation"&gt;DatabaseRegionObservation&lt;/a&gt;. See also the reactive companion libraries &lt;a href="http://github.com/groue/GRDBCombine"&gt;GRDBCombine&lt;/a&gt; and &lt;a href="http://github.com/RxSwiftCommunity/RxGRDB"&gt;RxGRDB&lt;/a&gt;, which stop observation whenever a ValueObservation error happens.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;onError&lt;/code&gt; callback can be omitted, but this is &lt;strong&gt;not recommended&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Not recommended: omitting the onError callback&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; observer &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; observation.&lt;span class="pl-c1"&gt;start&lt;/span&gt;(&lt;span class="pl-c1"&gt;in&lt;/span&gt;: dbQueue) { value &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-c1"&gt;print&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;fresh value: &lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;value&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
}&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-valueobservation-options" class="anchor" aria-hidden="true" href="#valueobservation-options"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;ValueObservation Options&lt;/h3&gt;
&lt;p&gt;Some behaviors of value observations can be configured:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#valueobservationscheduling"&gt;ValueObservation.scheduling&lt;/a&gt;: Control the dispatching of notified values.&lt;/li&gt;
&lt;li&gt;&lt;a href="#valueobservationrequireswriteaccess"&gt;ValueObservation.requiresWriteAccess&lt;/a&gt;: Allow observations to write in the database.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a id="user-content-valueobservationscheduling" class="anchor" aria-hidden="true" href="#valueobservationscheduling"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;ValueObservation.scheduling&lt;/h4&gt;
&lt;p&gt;The &lt;code&gt;scheduling&lt;/code&gt; property lets you control how fresh values are notified:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;.mainQueue&lt;/code&gt; (the default): all values are notified on the main queue.&lt;/p&gt;
&lt;p&gt;If the observation starts on the main queue, an initial value is notified right upon subscription, synchronously:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; On main queue&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; observer &lt;span class="pl-k"&gt;=&lt;/span&gt; observation.&lt;span class="pl-c1"&gt;start&lt;/span&gt;(
    &lt;span class="pl-c1"&gt;in&lt;/span&gt;: dbQueue,
    &lt;span class="pl-c1"&gt;onError&lt;/span&gt;: { error &lt;span class="pl-k"&gt;in&lt;/span&gt; &lt;span class="pl-k"&gt;...&lt;/span&gt; },
    &lt;span class="pl-c1"&gt;onChange&lt;/span&gt;: { value &lt;span class="pl-k"&gt;in&lt;/span&gt;
        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; On main queue&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;        &lt;span class="pl-c1"&gt;print&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;fresh value: &lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;value&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    })
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; &amp;lt;- Here "fresh value" is already printed.&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If the observation does not start on the main queue, an initial value is also notified on the main queue, but asynchronously:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Not on the main queue&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; observer &lt;span class="pl-k"&gt;=&lt;/span&gt; observation.&lt;span class="pl-c1"&gt;start&lt;/span&gt;(
    &lt;span class="pl-c1"&gt;in&lt;/span&gt;: dbQueue,
    &lt;span class="pl-c1"&gt;onError&lt;/span&gt;: { error &lt;span class="pl-k"&gt;in&lt;/span&gt; &lt;span class="pl-k"&gt;...&lt;/span&gt; },
    &lt;span class="pl-c1"&gt;onChange&lt;/span&gt;: { value &lt;span class="pl-k"&gt;in&lt;/span&gt;
        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; On main queue&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;        &lt;span class="pl-c1"&gt;print&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;fresh value: &lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;value&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    })&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After the initial value has been notified, all subsequent values are notified asynchronously:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; dbQueue.&lt;span class="pl-smi"&gt;write&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt; &lt;span class="pl-k"&gt;...&lt;/span&gt; }
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; &amp;lt;- Eventually prints "fresh value" on the main queue&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;.async(onQueue:startImmediately:)&lt;/code&gt;: all values are asychronously notified on the specified queue.&lt;/p&gt;
&lt;p&gt;An initial value is fetched and notified if &lt;code&gt;startImmediately&lt;/code&gt; is true.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; On main queue&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;var&lt;/span&gt; observation &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;...&lt;/span&gt;
observation.&lt;span class="pl-smi"&gt;scheduling&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; .&lt;span class="pl-c1"&gt;async&lt;/span&gt;(&lt;span class="pl-c1"&gt;onQueue&lt;/span&gt;: .&lt;span class="pl-smi"&gt;main&lt;/span&gt;, &lt;span class="pl-c1"&gt;startImmediately&lt;/span&gt;: &lt;span class="pl-c1"&gt;true&lt;/span&gt;)
&lt;span class="pl-k"&gt;let&lt;/span&gt; observer &lt;span class="pl-k"&gt;=&lt;/span&gt; observation.&lt;span class="pl-c1"&gt;start&lt;/span&gt;(
    &lt;span class="pl-c1"&gt;in&lt;/span&gt;: dbQueue,
    &lt;span class="pl-c1"&gt;onError&lt;/span&gt;: { error &lt;span class="pl-k"&gt;in&lt;/span&gt; &lt;span class="pl-k"&gt;...&lt;/span&gt; },
    &lt;span class="pl-c1"&gt;onChange&lt;/span&gt;: { value &lt;span class="pl-k"&gt;in&lt;/span&gt;
        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; On main queue&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;        &lt;span class="pl-c1"&gt;print&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;fresh value: &lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;value&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    })
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; &amp;lt;- Eventually prints "fresh value"&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;unsafe(startImmediately:)&lt;/code&gt;: values are not all notified on the same dispatch queue.&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;startImmediately&lt;/code&gt; is true, an initial value is notified right upon subscription, synchronously, on the dispatch queue which starts the observation.&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; On any queue&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;var&lt;/span&gt; observation &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;...&lt;/span&gt;
observation.&lt;span class="pl-smi"&gt;scheduling&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; .&lt;span class="pl-c1"&gt;unsafe&lt;/span&gt;(&lt;span class="pl-c1"&gt;startImmediately&lt;/span&gt;: &lt;span class="pl-c1"&gt;true&lt;/span&gt;)
&lt;span class="pl-k"&gt;let&lt;/span&gt; observer &lt;span class="pl-k"&gt;=&lt;/span&gt; observation.&lt;span class="pl-c1"&gt;start&lt;/span&gt;(
    &lt;span class="pl-c1"&gt;in&lt;/span&gt;: dbQueue,
    &lt;span class="pl-c1"&gt;onError&lt;/span&gt;: { error &lt;span class="pl-k"&gt;in&lt;/span&gt; &lt;span class="pl-k"&gt;...&lt;/span&gt; },
    &lt;span class="pl-c1"&gt;onChange&lt;/span&gt;: { value &lt;span class="pl-k"&gt;in&lt;/span&gt;
        &lt;span class="pl-c1"&gt;print&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;fresh value: &lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;value&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    })
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; &amp;lt;- Here "fresh value" is already printed.&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After the initial value has been notified, all subsequent values are notified on unspecified queues.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;g-emoji class="g-emoji" alias="point_up" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/261d.png"&gt;☝️&lt;/g-emoji&gt; &lt;strong&gt;Note&lt;/strong&gt;: this unsafe mode is intended for third-party libraries that provide their own scheduling engine.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a id="user-content-valueobservationrequireswriteaccess" class="anchor" aria-hidden="true" href="#valueobservationrequireswriteaccess"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;ValueObservation.requiresWriteAccess&lt;/h4&gt;
&lt;p&gt;The &lt;code&gt;requiresWriteAccess&lt;/code&gt; property is false by default. When true, a ValueObservation has a write access to the database, and its fetches are automatically wrapped in a &lt;a href="#transactions-and-savepoints"&gt;savepoint&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;var&lt;/span&gt; observation &lt;span class="pl-k"&gt;=&lt;/span&gt; ValueObservation.&lt;span class="pl-smi"&gt;tracking&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; write access allowed&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;...&lt;/span&gt;
}
observation.&lt;span class="pl-smi"&gt;requiresWriteAccess&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When you use a &lt;a href="#database-pools"&gt;database pool&lt;/a&gt;, don't use this flag unless you really need it. Observations with write access are less efficient because they block all writes for the whole duration of a fetch.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-advanced-valueobservationtracking_reducer" class="anchor" aria-hidden="true" href="#advanced-valueobservationtracking_reducer"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Advanced: ValueObservation.tracking(_:reducer:)&lt;/h3&gt;
&lt;p&gt;The most low-level way to define a ValueObservation is to create one from an observed database region (see above), and a &lt;strong&gt;reducer&lt;/strong&gt; that adopts the &lt;strong&gt;ValueReducer&lt;/strong&gt; protocol (&lt;a href="#what-are-experimental-features"&gt;&lt;strong&gt;&lt;g-emoji class="g-emoji" alias="fire" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f525.png"&gt;🔥&lt;/g-emoji&gt; EXPERIMENTAL&lt;/strong&gt;&lt;/a&gt;):&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;protocol&lt;/span&gt; &lt;span class="pl-en"&gt;ValueReducer&lt;/span&gt; {
    &lt;span class="pl-k"&gt;associatedtype&lt;/span&gt; &lt;span class="pl-c1"&gt;Fetched&lt;/span&gt;
    &lt;span class="pl-k"&gt;associatedtype&lt;/span&gt; &lt;span class="pl-c1"&gt;Value&lt;/span&gt;
    
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; Fetches a database value&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;fetch&lt;/span&gt;(&lt;span class="pl-en"&gt;_&lt;/span&gt; &lt;span class="pl-smi"&gt;db&lt;/span&gt;: Database) &lt;span class="pl-k"&gt;throws&lt;/span&gt; &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; Fetched
    
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; Returns a notified value&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;mutating&lt;/span&gt; &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;value&lt;/span&gt;(&lt;span class="pl-en"&gt;_&lt;/span&gt; &lt;span class="pl-smi"&gt;fetched&lt;/span&gt;: Fetched) &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;Value&lt;/span&gt;&lt;span class="pl-k"&gt;?&lt;/span&gt;
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;fetch&lt;/code&gt; method is called upon changes in the observed &lt;a href="#databaseregion"&gt;database region&lt;/a&gt;. It runs inside a protected dispatch queue and is guaranteed an immutable view of the last committed state of the database.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;value&lt;/code&gt; method transforms a fetched value into a notified value. It returns nil if the observer should not be notified. It runs inside a dispatch queue called the "reduce queue", which is not the main queue, and not a database queue.&lt;/p&gt;
&lt;p&gt;The sample code below counts the number of times the player table is modified:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;var&lt;/span&gt; count &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt;
&lt;span class="pl-k"&gt;let&lt;/span&gt; reducer &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;AnyValueReducer&lt;/span&gt;(
    &lt;span class="pl-c1"&gt;fetch&lt;/span&gt;: { &lt;span class="pl-c1"&gt;_&lt;/span&gt; &lt;span class="pl-k"&gt;in&lt;/span&gt; &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;/*&lt;/span&gt; don't fetch anything &lt;span class="pl-c"&gt;*/&lt;/span&gt;&lt;/span&gt; },
    &lt;span class="pl-c1"&gt;value&lt;/span&gt;: { &lt;span class="pl-c1"&gt;_&lt;/span&gt; &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;Int&lt;/span&gt;&lt;span class="pl-k"&gt;?&lt;/span&gt; &lt;span class="pl-k"&gt;in&lt;/span&gt;
        &lt;span class="pl-k"&gt;defer&lt;/span&gt; { count &lt;span class="pl-k"&gt;+=&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt; }
        &lt;span class="pl-k"&gt;return&lt;/span&gt; count })
&lt;span class="pl-k"&gt;let&lt;/span&gt; observation &lt;span class="pl-k"&gt;=&lt;/span&gt; ValueObservation.&lt;span class="pl-c1"&gt;tracking&lt;/span&gt;(Player.&lt;span class="pl-c1"&gt;all&lt;/span&gt;(), &lt;span class="pl-c1"&gt;reducer&lt;/span&gt;: { &lt;span class="pl-c1"&gt;_&lt;/span&gt; &lt;span class="pl-k"&gt;in&lt;/span&gt; reducer })
&lt;span class="pl-k"&gt;let&lt;/span&gt; observer &lt;span class="pl-k"&gt;=&lt;/span&gt; observation.&lt;span class="pl-c1"&gt;start&lt;/span&gt;(
    &lt;span class="pl-c1"&gt;in&lt;/span&gt;: dbQueue,
    &lt;span class="pl-c1"&gt;onError&lt;/span&gt;: { error &lt;span class="pl-k"&gt;in&lt;/span&gt; &lt;span class="pl-k"&gt;...&lt;/span&gt; },
    &lt;span class="pl-c1"&gt;onChange&lt;/span&gt;: { (&lt;span class="pl-c1"&gt;count&lt;/span&gt;: &lt;span class="pl-c1"&gt;Int&lt;/span&gt;) &lt;span class="pl-k"&gt;in&lt;/span&gt;
        &lt;span class="pl-c1"&gt;print&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Number of transactions that have modified players: &lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;count&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    })
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Prints "Number of transactions that have modified players: 0"&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;try&lt;/span&gt; dbQueue.&lt;span class="pl-smi"&gt;write&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;Player&lt;/span&gt;(&lt;span class="pl-k"&gt;...&lt;/span&gt;).&lt;span class="pl-c1"&gt;insert&lt;/span&gt;(db)
}
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Prints "Number of transactions that have modified players: 1"&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-databaseregionobservation" class="anchor" aria-hidden="true" href="#databaseregionobservation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;DatabaseRegionObservation&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;DatabaseRegionObservation tracks changes in database &lt;a href="#requests"&gt;requests&lt;/a&gt;, and notifies each impactful &lt;a href="#transactions-and-savepoints"&gt;transaction&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;No insertion, update, or deletion in the tracked tables is missed. This includes indirect changes triggered by &lt;a href="https://www.sqlite.org/foreignkeys.html#fk_actions" rel="nofollow"&gt;foreign keys&lt;/a&gt; or &lt;a href="https://www.sqlite.org/lang_createtrigger.html" rel="nofollow"&gt;SQL triggers&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;DatabaseRegionObservation calls your application right after changes have been committed in the database, and before any other thread had any opportunity to perform further changes. &lt;em&gt;This is a pretty strong guarantee, that most applications do not really need.&lt;/em&gt; Instead, most applications prefer to be notified with fresh values: make sure you check &lt;a href="#valueobservation"&gt;ValueObservation&lt;/a&gt; before using DatabaseRegionObservation.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-databaseregionobservation-usage" class="anchor" aria-hidden="true" href="#databaseregionobservation-usage"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;DatabaseRegionObservation Usage&lt;/h3&gt;
&lt;p&gt;Define an observation by providing one or several requests to track:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Track all players&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; observation &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;DatabaseRegionObservation&lt;/span&gt;(&lt;span class="pl-c1"&gt;tracking&lt;/span&gt;: Player.&lt;span class="pl-c1"&gt;all&lt;/span&gt;())&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then start the observation from a &lt;a href="#database-queues"&gt;database queue&lt;/a&gt; or &lt;a href="#database-pools"&gt;pool&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; observer &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; observation.&lt;span class="pl-c1"&gt;start&lt;/span&gt;(&lt;span class="pl-c1"&gt;in&lt;/span&gt;: dbQueue) { (&lt;span class="pl-c1"&gt;db&lt;/span&gt;: Database) &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-c1"&gt;print&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Players were changed&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And enjoy the changes notifications:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; dbQueue.&lt;span class="pl-smi"&gt;write&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;Player&lt;/span&gt;(&lt;span class="pl-c1"&gt;name&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Arthur&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;).&lt;span class="pl-c1"&gt;insert&lt;/span&gt;(db)
}
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Prints "Players were changed"&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;By default, the observation lasts until the observer returned by the &lt;code&gt;start&lt;/code&gt; method is deallocated. See &lt;a href="#databaseregionobservationextent"&gt;DatabaseRegionObservation.extent&lt;/a&gt; for more details.&lt;/p&gt;
&lt;p&gt;You can also feed DatabaseRegionObservation with &lt;a href="#databaseregion"&gt;DatabaseRegion&lt;/a&gt;, or any type which conforms to the &lt;a href="#the-databaseregionconvertible-protocol"&gt;DatabaseRegionConvertible&lt;/a&gt; protocol. For example:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Observe the full database&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; observation &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;DatabaseRegionObservation&lt;/span&gt;(&lt;span class="pl-c1"&gt;tracking&lt;/span&gt;: DatabaseRegion.&lt;span class="pl-smi"&gt;fullDatabase&lt;/span&gt;)
&lt;span class="pl-k"&gt;let&lt;/span&gt; observer &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; observation.&lt;span class="pl-c1"&gt;start&lt;/span&gt;(&lt;span class="pl-c1"&gt;in&lt;/span&gt;: dbQueue) { (&lt;span class="pl-c1"&gt;db&lt;/span&gt;: Database) &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-c1"&gt;print&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Database was changed&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
}&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-databaseregionobservation-use-cases" class="anchor" aria-hidden="true" href="#databaseregionobservation-use-cases"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;DatabaseRegionObservation Use Cases&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;There are very few use cases for DatabaseRegionObservation&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;One needs to write in the database after an impactful transaction.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;One needs to synchronize the content of the database file with some external resources, like other files, or system sensors like CLRegion monitoring.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;On iOS, one needs to process a database transaction before the operating system had any opportunity to put the application in the suspended state.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;One want to build a &lt;a href="#database-snapshots"&gt;database snapshot&lt;/a&gt; with a guaranteed snapshot content.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Outside of those use cases, it is much likely &lt;em&gt;wrong&lt;/em&gt; to use a DatabaseRegionObservation. Please check other &lt;a href="#database-changes-observation"&gt;Database Observation&lt;/a&gt; options.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-databaseregionobservationextent" class="anchor" aria-hidden="true" href="#databaseregionobservationextent"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;DatabaseRegionObservation.extent&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;extent&lt;/code&gt; property lets you specify the duration of the observation. See &lt;a href="#observation-extent"&gt;Observation Extent&lt;/a&gt; for more details:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; This observation lasts until the database connection is closed&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;var&lt;/span&gt; observation &lt;span class="pl-k"&gt;=&lt;/span&gt; DatabaseRegionObservation&lt;span class="pl-k"&gt;...&lt;/span&gt;
observation.&lt;span class="pl-smi"&gt;extent&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; .&lt;span class="pl-smi"&gt;databaseLifetime&lt;/span&gt;
&lt;span class="pl-c1"&gt;_&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; observation.&lt;span class="pl-c1"&gt;start&lt;/span&gt;(&lt;span class="pl-c1"&gt;in&lt;/span&gt;: dbQueue) { db &lt;span class="pl-k"&gt;in&lt;/span&gt; &lt;span class="pl-k"&gt;...&lt;/span&gt; }&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The default extent is &lt;code&gt;.observerLifetime&lt;/code&gt;: the observation stops when the observer returned by &lt;code&gt;start&lt;/code&gt; is deallocated.&lt;/p&gt;
&lt;p&gt;Regardless of the extent of an observation, you can always stop observation with the &lt;code&gt;remove(transactionObserver:)&lt;/code&gt; method:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Start&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; observer &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; observation.&lt;span class="pl-c1"&gt;start&lt;/span&gt;(&lt;span class="pl-c1"&gt;in&lt;/span&gt;: dbQueue) { db &lt;span class="pl-k"&gt;in&lt;/span&gt; &lt;span class="pl-k"&gt;...&lt;/span&gt; }

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Stop&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;dbQueue.&lt;span class="pl-c1"&gt;remove&lt;/span&gt;(&lt;span class="pl-c1"&gt;transactionObserver&lt;/span&gt;: observer)&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-transactionobserver-protocol" class="anchor" aria-hidden="true" href="#transactionobserver-protocol"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TransactionObserver Protocol&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;TransactionObserver&lt;/code&gt; protocol lets you &lt;strong&gt;observe individual database changes and transactions&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;protocol&lt;/span&gt; &lt;span class="pl-en"&gt;TransactionObserver&lt;/span&gt; : &lt;span class="pl-k"&gt;class&lt;/span&gt; {
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; Notifies a database change:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; - event.kind (insert, update, or delete)&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; - event.tableName&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; - event.rowID&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; For performance reasons, the event is only valid for the duration of&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; this method call. If you need to keep it longer, store a copy:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; event.copy().&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;databaseDidChange&lt;/span&gt;(&lt;span class="pl-en"&gt;with&lt;/span&gt; &lt;span class="pl-smi"&gt;event&lt;/span&gt;: DatabaseEvent)
    
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; Filters the database changes that should be notified to the&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; `databaseDidChange(with:)` method.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;observes&lt;/span&gt;(&lt;span class="pl-en"&gt;eventsOfKind&lt;/span&gt; &lt;span class="pl-smi"&gt;eventKind&lt;/span&gt;: DatabaseEventKind) &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;Bool&lt;/span&gt;
    
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; An opportunity to rollback pending changes by throwing an error.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;databaseWillCommit&lt;/span&gt;() &lt;span class="pl-k"&gt;throws&lt;/span&gt;
    
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; Database changes have been committed.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;databaseDidCommit&lt;/span&gt;(&lt;span class="pl-en"&gt;_&lt;/span&gt; &lt;span class="pl-smi"&gt;db&lt;/span&gt;: Database)
    
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; Database changes have been rollbacked.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;databaseDidRollback&lt;/span&gt;(&lt;span class="pl-en"&gt;_&lt;/span&gt; &lt;span class="pl-smi"&gt;db&lt;/span&gt;: Database)
}&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#activate-a-transaction-observer"&gt;Activate a Transaction Observer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#database-changes-and-transactions"&gt;Database Changes And Transactions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#filtering-database-events"&gt;Filtering Database Events&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#observation-extent"&gt;Observation Extent&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#databaseregion"&gt;DatabaseRegion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#support-for-sqlite-pre-update-hooks"&gt;Support for SQLite Pre-Update Hooks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-activate-a-transaction-observer" class="anchor" aria-hidden="true" href="#activate-a-transaction-observer"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Activate a Transaction Observer&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;To activate a transaction observer, add it to the database queue or pool:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; observer &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;MyObserver&lt;/span&gt;()
dbQueue.&lt;span class="pl-c1"&gt;add&lt;/span&gt;(&lt;span class="pl-c1"&gt;transactionObserver&lt;/span&gt;: observer)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;By default, database holds weak references to its transaction observers: they are not retained, and stop getting notifications after they are deallocated. See &lt;a href="#observation-extent"&gt;Observation Extent&lt;/a&gt; for more options.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-database-changes-and-transactions" class="anchor" aria-hidden="true" href="#database-changes-and-transactions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Database Changes And Transactions&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;A transaction observer is notified of all database changes&lt;/strong&gt;: inserts, updates and deletes. This includes indirect changes triggered by ON DELETE and ON UPDATE actions associated to &lt;a href="https://www.sqlite.org/foreignkeys.html#fk_actions" rel="nofollow"&gt;foreign keys&lt;/a&gt;, and &lt;a href="https://www.sqlite.org/lang_createtrigger.html" rel="nofollow"&gt;SQL triggers&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;g-emoji class="g-emoji" alias="point_up" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/261d.png"&gt;☝️&lt;/g-emoji&gt; &lt;strong&gt;Note&lt;/strong&gt;: the changes that are not notified are changes to internal system tables (such as &lt;code&gt;sqlite_master&lt;/code&gt;), changes to &lt;a href="https://www.sqlite.org/withoutrowid.html" rel="nofollow"&gt;&lt;code&gt;WITHOUT ROWID&lt;/code&gt;&lt;/a&gt; tables, and the deletion of duplicate rows triggered by &lt;a href="https://www.sqlite.org/lang_conflict.html" rel="nofollow"&gt;&lt;code&gt;ON CONFLICT REPLACE&lt;/code&gt;&lt;/a&gt; clauses (this last exception might change in a future release of SQLite).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Notified changes are not actually written to disk until the &lt;a href="#transactions-and-savepoints"&gt;transaction&lt;/a&gt; commits, and the &lt;code&gt;databaseDidCommit&lt;/code&gt; callback is called. On the other side, &lt;code&gt;databaseDidRollback&lt;/code&gt; confirms their invalidation:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; dbQueue.&lt;span class="pl-smi"&gt;write&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;execute&lt;/span&gt;(&lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;INSERT ...&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; 1. didChange&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;execute&lt;/span&gt;(&lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;UPDATE ...&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; 2. didChange&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;}                                     &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; 3. willCommit, 4. didCommit&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;try&lt;/span&gt; dbQueue.&lt;span class="pl-smi"&gt;inTransaction&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;execute&lt;/span&gt;(&lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;INSERT ...&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; 1. didChange&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;execute&lt;/span&gt;(&lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;UPDATE ...&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; 2. didChange&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;return&lt;/span&gt; .&lt;span class="pl-smi"&gt;rollback&lt;/span&gt;                  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; 3. didRollback&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;}

&lt;span class="pl-k"&gt;try&lt;/span&gt; dbQueue.&lt;span class="pl-smi"&gt;write&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;execute&lt;/span&gt;(&lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;INSERT ...&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; 1. didChange&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;throw&lt;/span&gt; &lt;span class="pl-c1"&gt;SomeError&lt;/span&gt;()
}                                     &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; 2. didRollback&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Database statements that are executed outside of any transaction do not drop off the radar:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; dbQueue.&lt;span class="pl-smi"&gt;inDatabase&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;execute&lt;/span&gt;(&lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;INSERT ...&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; 1. didChange, 2. willCommit, 3. didCommit&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;execute&lt;/span&gt;(&lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;UPDATE ...&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; 4. didChange, 5. willCommit, 6. didCommit&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Changes that are on hold because of a &lt;a href="https://www.sqlite.org/lang_savepoint.html" rel="nofollow"&gt;savepoint&lt;/a&gt; are only notified after the savepoint has been released. This makes sure that notified events are only events that have an opportunity to be committed:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; dbQueue.&lt;span class="pl-smi"&gt;inTransaction&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;execute&lt;/span&gt;(&lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;INSERT ...&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)            &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; 1. didChange&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    
    &lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;execute&lt;/span&gt;(&lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SAVEPOINT foo&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    &lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;execute&lt;/span&gt;(&lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;UPDATE ...&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)            &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; delayed&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;execute&lt;/span&gt;(&lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;UPDATE ...&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)            &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; delayed&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;execute&lt;/span&gt;(&lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;RELEASE SAVEPOINT foo&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; 2. didChange, 3. didChange&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    
    &lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;execute&lt;/span&gt;(&lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SAVEPOINT foo&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    &lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;execute&lt;/span&gt;(&lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;UPDATE ...&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)            &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; not notified&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;execute&lt;/span&gt;(&lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;ROLLBACK TO SAVEPOINT foo&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    
    &lt;span class="pl-k"&gt;return&lt;/span&gt; .&lt;span class="pl-smi"&gt;commit&lt;/span&gt;                               &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; 4. willCommit, 5. didCommit&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Eventual errors&lt;/strong&gt; thrown from &lt;code&gt;databaseWillCommit&lt;/code&gt; are exposed to the application code:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;do&lt;/span&gt; {
    &lt;span class="pl-k"&gt;try&lt;/span&gt; dbQueue.&lt;span class="pl-smi"&gt;inTransaction&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
        &lt;span class="pl-k"&gt;...&lt;/span&gt;
        &lt;span class="pl-k"&gt;return&lt;/span&gt; .&lt;span class="pl-smi"&gt;commit&lt;/span&gt;           &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; 1. willCommit (throws), 2. didRollback&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    }
} &lt;span class="pl-k"&gt;catch&lt;/span&gt; {
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; 3. The error thrown by the transaction observer.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;}&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;g-emoji class="g-emoji" alias="point_up" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/261d.png"&gt;☝️&lt;/g-emoji&gt; &lt;strong&gt;Note&lt;/strong&gt;: all callbacks are called in a protected dispatch queue, and serialized with all database updates.&lt;/p&gt;
&lt;p&gt;&lt;g-emoji class="g-emoji" alias="point_up" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/261d.png"&gt;☝️&lt;/g-emoji&gt; &lt;strong&gt;Note&lt;/strong&gt;: the databaseDidChange(with:) and databaseWillCommit() callbacks must not touch the SQLite database. This limitation does not apply to databaseDidCommit and databaseDidRollback which can use their database argument.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="#databaseregionobservation"&gt;DatabaseRegionObservation&lt;/a&gt;, &lt;a href="#valueobservation"&gt;ValueObservation&lt;/a&gt;, &lt;a href="http://github.com/groue/GRDBCombine"&gt;GRDBCombine&lt;/a&gt;, and &lt;a href="http://github.com/RxSwiftCommunity/RxGRDB"&gt;RxGRDB&lt;/a&gt; are all based on the TransactionObserver protocol.&lt;/p&gt;
&lt;p&gt;See also &lt;a href="https://gist.github.com/groue/2e21172719e634657dfd"&gt;TableChangeObserver.swift&lt;/a&gt;, which shows a transaction observer that notifies of modified database tables with NSNotificationCenter.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-filtering-database-events" class="anchor" aria-hidden="true" href="#filtering-database-events"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Filtering Database Events&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Transaction observers can avoid being notified of database changes they are not interested in.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The filtering happens in the &lt;code&gt;observes(eventsOfKind:)&lt;/code&gt; method, which tells whether the observer wants notification of specific kinds of changes, or not. For example, here is how an observer can focus on the changes that happen on the "player" database table:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;PlayerObserver&lt;/span&gt;: &lt;span class="pl-e"&gt;TransactionObserver &lt;/span&gt;{
    &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;observes&lt;/span&gt;(&lt;span class="pl-en"&gt;eventsOfKind&lt;/span&gt; &lt;span class="pl-smi"&gt;eventKind&lt;/span&gt;: DatabaseEventKind) &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;Bool&lt;/span&gt; {
        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Only observe changes to the "player" table.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;        &lt;span class="pl-k"&gt;return&lt;/span&gt; eventKind.&lt;span class="pl-smi"&gt;tableName&lt;/span&gt; &lt;span class="pl-k"&gt;==&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;player&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
    }
    
    &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;databaseDidChange&lt;/span&gt;(&lt;span class="pl-en"&gt;with&lt;/span&gt; &lt;span class="pl-smi"&gt;event&lt;/span&gt;: DatabaseEvent) {
        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; This method is only called for changes that happen to&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; the "player" table.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Generally speaking, the &lt;code&gt;observes(eventsOfKind:)&lt;/code&gt; method can distinguish insertions from deletions and updates, and is also able to inspect the columns that are about to be changed:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;PlayerScoreObserver&lt;/span&gt;: &lt;span class="pl-e"&gt;TransactionObserver &lt;/span&gt;{
    &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;observes&lt;/span&gt;(&lt;span class="pl-en"&gt;eventsOfKind&lt;/span&gt; &lt;span class="pl-smi"&gt;eventKind&lt;/span&gt;: DatabaseEventKind) &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;Bool&lt;/span&gt; {
        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Only observe changes to the "score" column of the "player" table.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;        &lt;span class="pl-k"&gt;switch&lt;/span&gt; eventKind {
        &lt;span class="pl-k"&gt;case&lt;/span&gt; .&lt;span class="pl-c1"&gt;insert&lt;/span&gt;(&lt;span class="pl-k"&gt;let&lt;/span&gt; tableName)&lt;span class="pl-k"&gt;:&lt;/span&gt;
            &lt;span class="pl-k"&gt;return&lt;/span&gt; tableName &lt;span class="pl-k"&gt;==&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;player&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
        &lt;span class="pl-k"&gt;case&lt;/span&gt; .&lt;span class="pl-c1"&gt;delete&lt;/span&gt;(&lt;span class="pl-k"&gt;let&lt;/span&gt; tableName)&lt;span class="pl-k"&gt;:&lt;/span&gt;
            &lt;span class="pl-k"&gt;return&lt;/span&gt; tableName &lt;span class="pl-k"&gt;==&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;player&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
        &lt;span class="pl-k"&gt;case&lt;/span&gt; .&lt;span class="pl-c1"&gt;update&lt;/span&gt;(&lt;span class="pl-k"&gt;let&lt;/span&gt; tableName, &lt;span class="pl-k"&gt;let&lt;/span&gt; columnNames)&lt;span class="pl-k"&gt;:&lt;/span&gt;
            &lt;span class="pl-k"&gt;return&lt;/span&gt; tableName &lt;span class="pl-k"&gt;==&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;player&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;&amp;amp;&amp;amp;&lt;/span&gt; columnNames.&lt;span class="pl-c1"&gt;contains&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;score&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
        }
    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When the &lt;code&gt;observes(eventsOfKind:)&lt;/code&gt; method returns false for all event kinds, the observer is still notified of commits and rollbacks:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;PureTransactionObserver&lt;/span&gt;: &lt;span class="pl-e"&gt;TransactionObserver &lt;/span&gt;{
    &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;observes&lt;/span&gt;(&lt;span class="pl-en"&gt;eventsOfKind&lt;/span&gt; &lt;span class="pl-smi"&gt;eventKind&lt;/span&gt;: DatabaseEventKind) &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;Bool&lt;/span&gt; {
        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Ignore all individual changes&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;        &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-c1"&gt;false&lt;/span&gt;
    }
    
    &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;databaseDidChange&lt;/span&gt;(&lt;span class="pl-en"&gt;with&lt;/span&gt; &lt;span class="pl-smi"&gt;event&lt;/span&gt;: DatabaseEvent) { &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;/*&lt;/span&gt; Never called &lt;span class="pl-c"&gt;*/&lt;/span&gt;&lt;/span&gt; }
    &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;databaseWillCommit&lt;/span&gt;() &lt;span class="pl-k"&gt;throws&lt;/span&gt; { &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;/*&lt;/span&gt; Called before commit &lt;span class="pl-c"&gt;*/&lt;/span&gt;&lt;/span&gt; }
    &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;databaseDidRollback&lt;/span&gt;(&lt;span class="pl-en"&gt;_&lt;/span&gt; &lt;span class="pl-smi"&gt;db&lt;/span&gt;: Database) { &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;/*&lt;/span&gt; Called on rollback &lt;span class="pl-c"&gt;*/&lt;/span&gt;&lt;/span&gt; }
    &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;databaseDidCommit&lt;/span&gt;(&lt;span class="pl-en"&gt;_&lt;/span&gt; &lt;span class="pl-smi"&gt;db&lt;/span&gt;: Database) { &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;/*&lt;/span&gt; Called on commit &lt;span class="pl-c"&gt;*/&lt;/span&gt;&lt;/span&gt; }
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For more information about event filtering, see &lt;a href="#databaseregion"&gt;DatabaseRegion&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-observation-extent" class="anchor" aria-hidden="true" href="#observation-extent"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Observation Extent&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;You can specify how long an observer is notified of database changes and transactions.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;remove(transactionObserver:)&lt;/code&gt; method explicitly stops notifications, at any time:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; From a database queue or pool:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;dbQueue.&lt;span class="pl-c1"&gt;remove&lt;/span&gt;(&lt;span class="pl-c1"&gt;transactionObserver&lt;/span&gt;: observer)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; From a database connection:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;dbQueue.&lt;span class="pl-smi"&gt;inDatabase&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    db.&lt;span class="pl-c1"&gt;remove&lt;/span&gt;(&lt;span class="pl-c1"&gt;transactionObserver&lt;/span&gt;: observer)
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Alternatively, use the &lt;code&gt;extent&lt;/code&gt; parameter of the &lt;code&gt;add(transactionObserver:extent:)&lt;/code&gt; method:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; observer &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;MyObserver&lt;/span&gt;()

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; On a database queue or pool:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;dbQueue.&lt;span class="pl-c1"&gt;add&lt;/span&gt;(&lt;span class="pl-c1"&gt;transactionObserver&lt;/span&gt;: observer) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; default extent&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;dbQueue.&lt;span class="pl-c1"&gt;add&lt;/span&gt;(&lt;span class="pl-c1"&gt;transactionObserver&lt;/span&gt;: observer, &lt;span class="pl-c1"&gt;extent&lt;/span&gt;: .&lt;span class="pl-smi"&gt;observerLifetime&lt;/span&gt;)
dbQueue.&lt;span class="pl-c1"&gt;add&lt;/span&gt;(&lt;span class="pl-c1"&gt;transactionObserver&lt;/span&gt;: observer, &lt;span class="pl-c1"&gt;extent&lt;/span&gt;: .&lt;span class="pl-smi"&gt;nextTransaction&lt;/span&gt;)
dbQueue.&lt;span class="pl-c1"&gt;add&lt;/span&gt;(&lt;span class="pl-c1"&gt;transactionObserver&lt;/span&gt;: observer, &lt;span class="pl-c1"&gt;extent&lt;/span&gt;: .&lt;span class="pl-smi"&gt;databaseLifetime&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; On a database connection:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;dbQueue.&lt;span class="pl-smi"&gt;inDatabase&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    db.&lt;span class="pl-c1"&gt;add&lt;/span&gt;(&lt;span class="pl-c1"&gt;transactionObserver&lt;/span&gt;: &lt;span class="pl-k"&gt;...&lt;/span&gt;)
}&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The default extent is &lt;code&gt;.observerLifetime&lt;/code&gt;: the database holds a weak reference to the observer, and the observation automatically ends when the observer is deallocated. Meanwhile, observer is notified of all changes and transactions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;.nextTransaction&lt;/code&gt; activates the observer until the current or next transaction completes. The database keeps a strong reference to the observer until its &lt;code&gt;databaseDidCommit&lt;/code&gt; or &lt;code&gt;databaseDidRollback&lt;/code&gt; method is eventually called. Hereafter the observer won't get any further notification.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;.databaseLifetime&lt;/code&gt; has the database retain and notify the observer until the database connection is closed.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Finally, an observer may ignore all database changes until the end of the current transaction:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;PlayerObserver&lt;/span&gt;: &lt;span class="pl-e"&gt;TransactionObserver &lt;/span&gt;{
    &lt;span class="pl-k"&gt;var&lt;/span&gt; playerTableWasModified &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;false&lt;/span&gt;
    
    &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;observes&lt;/span&gt;(&lt;span class="pl-en"&gt;eventsOfKind&lt;/span&gt; &lt;span class="pl-smi"&gt;eventKind&lt;/span&gt;: DatabaseEventKind) &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;Bool&lt;/span&gt; {
        &lt;span class="pl-k"&gt;return&lt;/span&gt; eventKind.&lt;span class="pl-smi"&gt;tableName&lt;/span&gt; &lt;span class="pl-k"&gt;==&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;player&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
    }
    
    &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;databaseDidChange&lt;/span&gt;(&lt;span class="pl-en"&gt;with&lt;/span&gt; &lt;span class="pl-smi"&gt;event&lt;/span&gt;: DatabaseEvent) {
        playerTableWasModified &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;
        
        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; It is pointless to keep on tracking further changes:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;        &lt;span class="pl-c1"&gt;stopObservingDatabaseChangesUntilNextTransaction&lt;/span&gt;()
    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After &lt;code&gt;stopObservingDatabaseChangesUntilNextTransaction()&lt;/code&gt;, the &lt;code&gt;databaseDidChange(with:)&lt;/code&gt; method will not be notified of any change for the remaining duration of the current transaction. This helps GRDB optimize database observation.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-databaseregion" class="anchor" aria-hidden="true" href="#databaseregion"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;DatabaseRegion&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://groue.github.io/GRDB.swift/docs/4.6/Structs/DatabaseRegion.html" rel="nofollow"&gt;DatabaseRegion&lt;/a&gt; is a type that helps observing changes in the results of a database &lt;a href="#requests"&gt;request&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;A request knows which database modifications can impact its results. It can communicate this information to &lt;a href="#transactionobserver-protocol"&gt;transaction observers&lt;/a&gt; by the way of a DatabaseRegion.&lt;/p&gt;
&lt;p&gt;DatabaseRegion fuels, for example, &lt;a href="#valueobservation-and-databaseregionobservation"&gt;ValueObservation and DatabaseRegionObservation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A region notifies &lt;em&gt;potential&lt;/em&gt; changes, not &lt;em&gt;actual&lt;/em&gt; changes in the results of a request.&lt;/strong&gt; A change is notified if and only if a statement has actually modified the tracked tables and columns by inserting, updating, or deleting a row.&lt;/p&gt;
&lt;p&gt;For example, if you observe the region of &lt;code&gt;Player.select(max(Column("score")))&lt;/code&gt;, then you'll get be notified of all changes performed on the &lt;code&gt;score&lt;/code&gt; column of the &lt;code&gt;player&lt;/code&gt; table (updates, insertions and deletions), even if they do not modify the value of the maximum score. However, you will not get any notification for changes performed on other database tables, or updates to other columns of the player table.&lt;/p&gt;
&lt;p&gt;For more details, see the &lt;a href="http://groue.github.io/GRDB.swift/docs/4.6/Structs/DatabaseRegion.html#/s:4GRDB14DatabaseRegionV10isModified2bySbAA0B5EventV_tF" rel="nofollow"&gt;reference&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-the-databaseregionconvertible-protocol" class="anchor" aria-hidden="true" href="#the-databaseregionconvertible-protocol"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;The DatabaseRegionConvertible Protocol&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;DatabaseRegionConvertible&lt;/strong&gt; is a protocol for all types that can turn into a &lt;a href="#databaseregion"&gt;DatabaseRegion&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;protocol&lt;/span&gt; &lt;span class="pl-en"&gt;DatabaseRegionConvertible&lt;/span&gt; {
    &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;databaseRegion&lt;/span&gt;(&lt;span class="pl-en"&gt;_&lt;/span&gt; &lt;span class="pl-smi"&gt;db&lt;/span&gt;: Database) &lt;span class="pl-k"&gt;throws&lt;/span&gt; &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; DatabaseRegion
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;All &lt;a href="#requests"&gt;requests&lt;/a&gt; adopt this protocol, and this allows them to be observed with &lt;a href="#databaseregionobservation"&gt;DatabaseRegionObservation&lt;/a&gt; and &lt;a href="#valueobservation"&gt;ValueObservation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Use this protocol when you want to encapsulate your complex requests in a dedicated type, and still profit from optimized observation APIs. See &lt;a href="#valueobservationtracking_fetch"&gt;&lt;code&gt;ValueObservation.tracking(_:fetch:)&lt;/code&gt;&lt;/a&gt; for more information.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-support-for-sqlite-pre-update-hooks" class="anchor" aria-hidden="true" href="#support-for-sqlite-pre-update-hooks"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Support for SQLite Pre-Update Hooks&lt;/h3&gt;
&lt;p&gt;When SQLite is built with the SQLITE_ENABLE_PREUPDATE_HOOK option, TransactionObserverType gets an extra callback which lets you observe individual column values in the rows modified by a transaction:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;protocol&lt;/span&gt; &lt;span class="pl-en"&gt;TransactionObserverType&lt;/span&gt; : &lt;span class="pl-k"&gt;class&lt;/span&gt; {
    #&lt;span class="pl-k"&gt;if&lt;/span&gt; SQLITE_ENABLE_PREUPDATE_HOOK
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; Notifies before a database change (insert, update, or delete)&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; with change information (initial / final values for the row's&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; columns).&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; The event is only valid for the duration of this method call. If you&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; need to keep it longer, store a copy: event.copy().&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;databaseWillChange&lt;/span&gt;(&lt;span class="pl-en"&gt;with&lt;/span&gt; &lt;span class="pl-smi"&gt;event&lt;/span&gt;: DatabasePreUpdateEvent)
    #&lt;span class="pl-k"&gt;endif&lt;/span&gt;
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This extra API can be activated in two ways:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Use the GRDB.swift CocoaPod with a custom compilation option, as below. It uses the system SQLite, which is compiled with SQLITE_ENABLE_PREUPDATE_HOOK support, but only on iOS 11.0+ (we don't know the minimum version of macOS, tvOS, watchOS):&lt;/p&gt;
&lt;div class="highlight highlight-source-ruby"&gt;&lt;pre&gt;pod &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;GRDB.swift&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;
platform &lt;span class="pl-c1"&gt;:ios&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;11.0&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; or above&lt;/span&gt;

post_install &lt;span class="pl-k"&gt;do&lt;/span&gt; |&lt;span class="pl-smi"&gt;installer&lt;/span&gt;|
  installer.pods_project.targets.&lt;span class="pl-c1"&gt;select&lt;/span&gt; { |&lt;span class="pl-smi"&gt;target&lt;/span&gt;| target.name &lt;span class="pl-k"&gt;==&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;GRDB.swift&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; }.each &lt;span class="pl-k"&gt;do&lt;/span&gt; |&lt;span class="pl-smi"&gt;target&lt;/span&gt;|
    target.build_configurations.each &lt;span class="pl-k"&gt;do&lt;/span&gt; |&lt;span class="pl-smi"&gt;config&lt;/span&gt;|
      &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Enable extra GRDB APIs&lt;/span&gt;
      config.build_settings[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;OTHER_SWIFT_FLAGS&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;] &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;$(inherited) -D SQLITE_ENABLE_PREUPDATE_HOOK&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
      &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Enable extra SQLite APIs&lt;/span&gt;
      config.build_settings[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;GCC_PREPROCESSOR_DEFINITIONS&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;] &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;$(inherited) GRDB_SQLITE_ENABLE_PREUPDATE_HOOK=1&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
    &lt;span class="pl-k"&gt;end&lt;/span&gt;
  &lt;span class="pl-k"&gt;end&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;g-emoji class="g-emoji" alias="warning" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/26a0.png"&gt;⚠️&lt;/g-emoji&gt; &lt;strong&gt;Warning&lt;/strong&gt;: make sure you use the right platform version! You will get runtime errors on devices with a lower version.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;g-emoji class="g-emoji" alias="point_up" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/261d.png"&gt;☝️&lt;/g-emoji&gt; &lt;strong&gt;Note&lt;/strong&gt;: the &lt;code&gt;GRDB_SQLITE_ENABLE_PREUPDATE_HOOK=1&lt;/code&gt; option in &lt;code&gt;GCC_PREPROCESSOR_DEFINITIONS&lt;/code&gt; defines some C function prototypes that are lacking from the system &lt;code&gt;&amp;lt;sqlite3.h&amp;gt;&lt;/code&gt; header. When Xcode eventually ships with an SDK that includes a complete header, you may get a compiler error about duplicate function definitions. When this happens, just remove this &lt;code&gt;GRDB_SQLITE_ENABLE_PREUPDATE_HOOK=1&lt;/code&gt; option.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use a &lt;a href="Documentation/CustomSQLiteBuilds.md"&gt;custom SQLite build&lt;/a&gt; and activate the &lt;code&gt;SQLITE_ENABLE_PREUPDATE_HOOK&lt;/code&gt; compilation option.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;&lt;a id="user-content-encryption" class="anchor" aria-hidden="true" href="#encryption"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Encryption&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;GRDB can encrypt your database with &lt;a href="http://sqlcipher.net" rel="nofollow"&gt;SQLCipher&lt;/a&gt; v3.4+.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Use &lt;a href="http://cocoapods.org/" rel="nofollow"&gt;CocoaPods&lt;/a&gt;, and specify in your &lt;code&gt;Podfile&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-ruby"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; GRDB with SQLCipher 4&lt;/span&gt;
pod &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;GRDB.swift/SQLCipher&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;
pod &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;SQLCipher&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;~&amp;gt; 4.0&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; GRDB with SQLCipher 3&lt;/span&gt;
pod &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;GRDB.swift/SQLCipher&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;
pod &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;SQLCipher&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;~&amp;gt; 3.4&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#creating-or-opening-an-encrypted-database"&gt;Creating or Opening an Encrypted Database&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#changing-the-passphrase-of-an-encrypted-database"&gt;Changing the Passphrase of an Encrypted Database&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#exporting-a-database-to-an-encrypted-database"&gt;Exporting a Database to an Encrypted Database&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#security-considerations"&gt;Security Considerations&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-creating-or-opening-an-encrypted-database" class="anchor" aria-hidden="true" href="#creating-or-opening-an-encrypted-database"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Creating or Opening an Encrypted Database&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;You create and open an encrypted database&lt;/strong&gt; by providing a passphrase to your &lt;a href="#database-connections"&gt;database connection&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;var&lt;/span&gt; config &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;Configuration&lt;/span&gt;()
config.&lt;span class="pl-smi"&gt;prepareDatabase&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;usePassphrase&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;secret&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
}
&lt;span class="pl-k"&gt;let&lt;/span&gt; dbQueue &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;DatabaseQueue&lt;/span&gt;(&lt;span class="pl-c1"&gt;path&lt;/span&gt;: dbPath, &lt;span class="pl-c1"&gt;configuration&lt;/span&gt;: config)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It is also in &lt;code&gt;prepareDatabase&lt;/code&gt; that you perform other &lt;a href="https://www.zetetic.net/sqlcipher/sqlcipher-api/" rel="nofollow"&gt;SQLCipher configuration steps&lt;/a&gt; that must happen early in the lifetime of a SQLCipher connection. For example:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;var&lt;/span&gt; config &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;Configuration&lt;/span&gt;()
config.&lt;span class="pl-smi"&gt;prepareDatabase&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;usePassphrase&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;secret&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    &lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;execute&lt;/span&gt;(&lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;PRAGMA cipher_page_size = ...&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    &lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;execute&lt;/span&gt;(&lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;PRAGMA kdf_iter = ...&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
}
&lt;span class="pl-k"&gt;let&lt;/span&gt; dbQueue &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;DatabaseQueue&lt;/span&gt;(&lt;span class="pl-c1"&gt;path&lt;/span&gt;: dbPath, &lt;span class="pl-c1"&gt;configuration&lt;/span&gt;: config)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When you want to open an existing SQLCipher 3 database with SQLCipher 4, you may want to run the &lt;code&gt;cipher_compatibility&lt;/code&gt; pragma:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Open an SQLCipher 3 database with SQLCipher 4&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;var&lt;/span&gt; config &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;Configuration&lt;/span&gt;()
config.&lt;span class="pl-smi"&gt;prepareDatabase&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;usePassphrase&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;secret&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    &lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;execute&lt;/span&gt;(&lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;PRAGMA cipher_compatibility = 3&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
}
&lt;span class="pl-k"&gt;let&lt;/span&gt; dbQueue &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;DatabaseQueue&lt;/span&gt;(&lt;span class="pl-c1"&gt;path&lt;/span&gt;: dbPath, &lt;span class="pl-c1"&gt;configuration&lt;/span&gt;: config)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;See &lt;a href="https://www.zetetic.net/blog/2018/11/30/sqlcipher-400-release/" rel="nofollow"&gt;SQLCipher 4.0.0 Release&lt;/a&gt; and &lt;a href="https://discuss.zetetic.net/t/upgrading-to-sqlcipher-4/3283" rel="nofollow"&gt;Upgrading to SQLCipher 4&lt;/a&gt; for more information.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-changing-the-passphrase-of-an-encrypted-database" class="anchor" aria-hidden="true" href="#changing-the-passphrase-of-an-encrypted-database"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Changing the Passphrase of an Encrypted Database&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;You can change the passphrase&lt;/strong&gt; of an already encrypted database.&lt;/p&gt;
&lt;p&gt;When you use a &lt;a href="#database-queues"&gt;database queue&lt;/a&gt;, open the database with the old passphrase, and then apply the new passphrase:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; dbQueue.&lt;span class="pl-smi"&gt;write&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;changePassphrase&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;newSecret&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When you use a &lt;a href="#database-pools"&gt;database pool&lt;/a&gt;, make sure that no concurrent read can happen by changing the passphrase within the &lt;code&gt;barrierWriteWithoutTransaction&lt;/code&gt; block. You must also ensure all future reads open a new database connection by calling the &lt;code&gt;invalidateReadOnlyConnections&lt;/code&gt; method:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; dbPool.&lt;span class="pl-smi"&gt;barrierWriteWithoutTransaction&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;changePassphrase&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;newSecret&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    dbPool.&lt;span class="pl-c1"&gt;invalidateReadOnlyConnections&lt;/span&gt;()
}&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;g-emoji class="g-emoji" alias="point_up" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/261d.png"&gt;☝️&lt;/g-emoji&gt; &lt;strong&gt;Note&lt;/strong&gt;: When an application wants to keep on using a database queue or pool after the passphrase has changed, it is responsible for providing the correct passphrase to the &lt;code&gt;usePassphrase&lt;/code&gt; method called in the database preparation function. Consider:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; WRONG: this won't work across a passphrase change&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; passphrase &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;getPassphrase&lt;/span&gt;()
&lt;span class="pl-k"&gt;var&lt;/span&gt; config &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;Configuration&lt;/span&gt;()
config.&lt;span class="pl-smi"&gt;prepareDatabase&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;usePassphrase&lt;/span&gt;(passphrase)
}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; CORRECT: get the latest passphrase when it is needed&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;var&lt;/span&gt; config &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;Configuration&lt;/span&gt;()
config.&lt;span class="pl-smi"&gt;prepareDatabase&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;let&lt;/span&gt; passphrase &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;getPassphrase&lt;/span&gt;()
    &lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;usePassphrase&lt;/span&gt;(passphrase)
}&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;g-emoji class="g-emoji" alias="point_up" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/261d.png"&gt;☝️&lt;/g-emoji&gt; &lt;strong&gt;Note&lt;/strong&gt;: The &lt;code&gt;DatabasePool.barrierWriteWithoutTransaction&lt;/code&gt; method does not prevent &lt;a href="#database-snapshots"&gt;database snapshots&lt;/a&gt; from accessing the database during the passphrase change, or after the new passphrase has been applied to the database. Those database accesses may throw errors. Applications should provide their own mechanism for invalidating open snapshots before the passphrase is changed.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;g-emoji class="g-emoji" alias="point_up" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/261d.png"&gt;☝️&lt;/g-emoji&gt; &lt;strong&gt;Note&lt;/strong&gt;: Instead of changing the passphrase "in place" as described here, you can also export the database in a new encrypted database that uses the new passphrase. See &lt;a href="#exporting-a-database-to-an-encrypted-database"&gt;Exporting a Database to an Encrypted Database&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;&lt;a id="user-content-exporting-a-database-to-an-encrypted-database" class="anchor" aria-hidden="true" href="#exporting-a-database-to-an-encrypted-database"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Exporting a Database to an Encrypted Database&lt;/h3&gt;
&lt;p&gt;Providing a passphrase won't encrypt a clear-text database that already exists, though. SQLCipher can't do that, and you will get an error instead: &lt;code&gt;SQLite error 26: file is encrypted or is not a database&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Instead, create a new encrypted database, at a distinct location, and export the content of the existing database. This can both encrypt a clear-text database, or change the passphrase of an encrypted databaase.&lt;/p&gt;
&lt;p&gt;The technique to do that is &lt;a href="https://discuss.zetetic.net/t/how-to-encrypt-a-plaintext-sqlite-database-to-use-sqlcipher-and-avoid-file-is-encrypted-or-is-not-a-database-errors/868/1" rel="nofollow"&gt;documented&lt;/a&gt; by SQLCipher.&lt;/p&gt;
&lt;p&gt;With GRDB, it gives:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; The existing database&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; existingDBQueue &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;DatabaseQueue&lt;/span&gt;(&lt;span class="pl-c1"&gt;path&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/path/to/existing.db&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; The new encrypted database, at some distinct location:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;var&lt;/span&gt; config &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;Configuration&lt;/span&gt;()
config.&lt;span class="pl-smi"&gt;prepareDatabase&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;usePassphrase&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;secret&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
}
&lt;span class="pl-k"&gt;let&lt;/span&gt; newDBQueue &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;DatabaseQueue&lt;/span&gt;(&lt;span class="pl-c1"&gt;path&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/path/to/new.db&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;configuration&lt;/span&gt;: config)

&lt;span class="pl-k"&gt;try&lt;/span&gt; existingDBQueue.&lt;span class="pl-smi"&gt;inDatabase&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;execute&lt;/span&gt;(
        &lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"""&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-s"&gt;            ATTACH DATABASE ? AS encrypted KEY ?;&lt;/span&gt;
&lt;span class="pl-s"&gt;            SELECT sqlcipher_export('encrypted');&lt;/span&gt;
&lt;span class="pl-s"&gt;            DETACH DATABASE encrypted;&lt;/span&gt;
&lt;span class="pl-s"&gt;            &lt;span class="pl-pds"&gt;"""&lt;/span&gt;&lt;/span&gt;,
        &lt;span class="pl-c1"&gt;arguments&lt;/span&gt;: [newDBQueue.&lt;span class="pl-smi"&gt;path&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;secret&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;])
}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Now the export is completed, and the existing database can be deleted.&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-security-considerations" class="anchor" aria-hidden="true" href="#security-considerations"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Security Considerations&lt;/h3&gt;
&lt;h4&gt;&lt;a id="user-content-managing-the-lifetime-of-the-passphrase-string" class="anchor" aria-hidden="true" href="#managing-the-lifetime-of-the-passphrase-string"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Managing the lifetime of the passphrase string&lt;/h4&gt;
&lt;p&gt;It is recommended to avoid keeping the passphrase in memory longer than necessary. To do this, make sure you load the passphrase from inside the &lt;code&gt;prepareDatabase&lt;/code&gt; function:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; NOT RECOMMENDED: this keeps the passphrase in memory longer than necessary&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; passphrase &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;getPassphrase&lt;/span&gt;()
&lt;span class="pl-k"&gt;var&lt;/span&gt; config &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;Configuration&lt;/span&gt;()
config.&lt;span class="pl-smi"&gt;prepareDatabase&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;usePassphrase&lt;/span&gt;(passphrase)
}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; RECOMMENDED: only load the passphrase when it is needed&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;var&lt;/span&gt; config &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;Configuration&lt;/span&gt;()
config.&lt;span class="pl-smi"&gt;prepareDatabase&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;let&lt;/span&gt; passphrase &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;getPassphrase&lt;/span&gt;()
    &lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;usePassphrase&lt;/span&gt;(passphrase)
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This technique manages the lifetime of the passphrase string. Some demanding users will want to go further, and manage the lifetime of the raw passphrase bytes. See below.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-managing-the-lifetime-of-the-passphrase-bytes" class="anchor" aria-hidden="true" href="#managing-the-lifetime-of-the-passphrase-bytes"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Managing the lifetime of the passphrase bytes&lt;/h4&gt;
&lt;p&gt;GRDB offers convenience methods for providing the database passphrases as Swift strings: &lt;code&gt;usePassphrase(_:)&lt;/code&gt; and &lt;code&gt;changePassphrase(_:)&lt;/code&gt;. Those methods don't keep the passphrase String in memory longer than necessary. But they are as secure as the standard String type: the lifetime of actual passphrase bytes in memory is not under control.&lt;/p&gt;
&lt;p&gt;When you want to precisely manage the passphrase bytes, talk directly to SQLCipher, using its raw C functions.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;GRDB&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;SQLCipher&lt;/span&gt;

&lt;span class="pl-k"&gt;var&lt;/span&gt; config &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;Configuration&lt;/span&gt;()
config.&lt;span class="pl-smi"&gt;prepareDatabase&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;...&lt;/span&gt; &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Carefully load passphrase bytes&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;let&lt;/span&gt; code &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;sqlite3_key&lt;/span&gt;(db.&lt;span class="pl-smi"&gt;sqliteConnection&lt;/span&gt;, &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;/*&lt;/span&gt; passphrase bytes &lt;span class="pl-c"&gt;*/&lt;/span&gt;&lt;/span&gt;)
    &lt;span class="pl-k"&gt;...&lt;/span&gt; &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Carefully dispose passphrase bytes&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;guard&lt;/span&gt; code &lt;span class="pl-k"&gt;==&lt;/span&gt; SQLITE_OK &lt;span class="pl-k"&gt;else&lt;/span&gt; {
        &lt;span class="pl-k"&gt;throw&lt;/span&gt; &lt;span class="pl-c1"&gt;DatabaseError&lt;/span&gt;(
            &lt;span class="pl-c1"&gt;resultCode&lt;/span&gt;: &lt;span class="pl-c1"&gt;ResultCode&lt;/span&gt;(&lt;span class="pl-c1"&gt;rawValue&lt;/span&gt;: code), 
            &lt;span class="pl-c1"&gt;message&lt;/span&gt;: db.&lt;span class="pl-smi"&gt;lastErrorMessage&lt;/span&gt;)
    }
}
&lt;span class="pl-k"&gt;let&lt;/span&gt; dbQueue &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;DatabaseQueue&lt;/span&gt;(&lt;span class="pl-c1"&gt;path&lt;/span&gt;: dbPath, &lt;span class="pl-c1"&gt;configuration&lt;/span&gt;: config)&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content-passphrase-availability-vs-database-availability" class="anchor" aria-hidden="true" href="#passphrase-availability-vs-database-availability"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Passphrase availability vs. Database availability&lt;/h4&gt;
&lt;p&gt;When the passphrase is securely stored in the system keychain, your application can protect it using the &lt;a href="https://developer.apple.com/documentation/security/ksecattraccessible" rel="nofollow"&gt;&lt;code&gt;kSecAttrAccessible&lt;/code&gt;&lt;/a&gt; attribute.&lt;/p&gt;
&lt;p&gt;Such protection prevents GRDB from creating SQLite connections when the passphrase is not available:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;var&lt;/span&gt; config &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;Configuration&lt;/span&gt;()
config.&lt;span class="pl-smi"&gt;prepareDatabase&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;let&lt;/span&gt; passphrase &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;loadPassphraseFromSystemKeychain&lt;/span&gt;()
    &lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;usePassphrase&lt;/span&gt;(passphrase)
}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Success if and only if the passphrase is available&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; dbQueue &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;DatabaseQueue&lt;/span&gt;(&lt;span class="pl-c1"&gt;path&lt;/span&gt;: dbPath, &lt;span class="pl-c1"&gt;configuration&lt;/span&gt;: config)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For the same reason, &lt;a href="#database-pools"&gt;database pools&lt;/a&gt;, which open SQLite connections on demand, may fail at any time as soon as the passphrase becomes unavailable:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Success if and only if the passphrase is available&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; dbPool &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;DatabasePool&lt;/span&gt;(&lt;span class="pl-c1"&gt;path&lt;/span&gt;: dbPath, &lt;span class="pl-c1"&gt;configuration&lt;/span&gt;: config)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; May fail if passphrase has turned unavailable&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; dbPool.&lt;span class="pl-smi"&gt;read&lt;/span&gt; { &lt;span class="pl-k"&gt;...&lt;/span&gt; }

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; May trigger value observation failure if passphrase has turned unavailable&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; dbPool.&lt;span class="pl-smi"&gt;write&lt;/span&gt; { &lt;span class="pl-k"&gt;...&lt;/span&gt; }&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Because DatabasePool maintains a pool of long-lived SQLite connections, some database accesses will use an existing connection, and succeed. And some other database accesses will fail, as soon as the pool wants to open a new connection. It is impossible to predict which accesses will succeed or fail.&lt;/p&gt;
&lt;p&gt;For the same reason, a database queue, which also maintains a long-lived SQLite connection, will remain available even after the passphrase has turned unavailable.&lt;/p&gt;
&lt;p&gt;Applications are thus responsible for protecting database accesses when the passphrase is unavailable. To this end, they can use &lt;a href="#data-protection"&gt;Data Protection&lt;/a&gt;. They can also destroy their instances of database queue or pool when the passphrase becomes unavailable.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-backup" class="anchor" aria-hidden="true" href="#backup"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Backup&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;You can backup (copy) a database into another.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Backups can for example help you copying an in-memory database to and from a database file when you implement NSDocument subclasses.&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; source&lt;span class="pl-k"&gt;:&lt;/span&gt; DatabaseQueue &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;...&lt;/span&gt;      &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; or DatabasePool&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; destination&lt;span class="pl-k"&gt;:&lt;/span&gt; DatabaseQueue &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;...&lt;/span&gt; &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; or DatabasePool&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; source.&lt;span class="pl-c1"&gt;backup&lt;/span&gt;(&lt;span class="pl-c1"&gt;to&lt;/span&gt;: destination)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;backup&lt;/code&gt; method blocks the current thread until the destination database contains the same contents as the source database.&lt;/p&gt;
&lt;p&gt;When the source is a &lt;a href="#database-pools"&gt;database pool&lt;/a&gt;, concurrent writes can happen during the backup. Those writes may, or may not, be reflected in the backup, but they won't trigger any error.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-avoiding-sql-injection" class="anchor" aria-hidden="true" href="#avoiding-sql-injection"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Avoiding SQL Injection&lt;/h2&gt;
&lt;p&gt;SQL injection is a technique that lets an attacker nuke your database.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/cecf339daf48ee4cfe86f33630c3732cdc2ab0e1/68747470733a2f2f696d67732e786b63642e636f6d2f636f6d6963732f6578706c6f6974735f6f665f615f6d6f6d2e706e67"&gt;&lt;img src="https://camo.githubusercontent.com/cecf339daf48ee4cfe86f33630c3732cdc2ab0e1/68747470733a2f2f696d67732e786b63642e636f6d2f636f6d6963732f6578706c6f6974735f6f665f615f6d6f6d2e706e67" alt="XKCD: Exploits of a Mom" data-canonical-src="https://imgs.xkcd.com/comics/exploits_of_a_mom.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://xkcd.com/327/" rel="nofollow"&gt;https://xkcd.com/327/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here is an example of code that is vulnerable to SQL injection:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; BAD BAD BAD&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; id &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;
&lt;span class="pl-k"&gt;let&lt;/span&gt; name &lt;span class="pl-k"&gt;=&lt;/span&gt; textField.&lt;span class="pl-c1"&gt;text&lt;/span&gt;
&lt;span class="pl-k"&gt;try&lt;/span&gt; dbQueue.&lt;span class="pl-smi"&gt;write&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;execute&lt;/span&gt;(&lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;UPDATE students SET name = '&lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;name&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;' WHERE id = &lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;id&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If the user enters a funny string like &lt;code&gt;Robert'; DROP TABLE students; --&lt;/code&gt;, SQLite will see the following SQL, and drop your database table instead of updating a name as intended:&lt;/p&gt;
&lt;div class="highlight highlight-source-sql"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;UPDATE&lt;/span&gt; students &lt;span class="pl-k"&gt;SET&lt;/span&gt; name &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;Robert&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;;
&lt;span class="pl-k"&gt;DROP&lt;/span&gt; &lt;span class="pl-k"&gt;TABLE&lt;/span&gt; students;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;--&lt;/span&gt;' WHERE id = 1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To avoid those problems, &lt;strong&gt;never embed raw values in your SQL queries&lt;/strong&gt;. The only correct technique is to provide &lt;a href="#executing-updates"&gt;arguments&lt;/a&gt; to your raw SQL queries:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; name &lt;span class="pl-k"&gt;=&lt;/span&gt; textField.&lt;span class="pl-c1"&gt;text&lt;/span&gt;
&lt;span class="pl-k"&gt;try&lt;/span&gt; dbQueue.&lt;span class="pl-smi"&gt;write&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Good&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;execute&lt;/span&gt;(
        &lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;UPDATE students SET name = ? WHERE id = ?&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
        &lt;span class="pl-c1"&gt;arguments&lt;/span&gt;: [name, id])
    
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Just as good&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;execute&lt;/span&gt;(
        &lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;UPDATE students SET name = :name WHERE id = :id&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
        &lt;span class="pl-c1"&gt;arguments&lt;/span&gt;: [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;name&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; name, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;id&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; id])
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When you use &lt;a href="#records"&gt;records&lt;/a&gt; and the &lt;a href="#the-query-interface"&gt;query interface&lt;/a&gt;, GRDB always prevents SQL injection for you:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; id &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;
&lt;span class="pl-k"&gt;let&lt;/span&gt; name &lt;span class="pl-k"&gt;=&lt;/span&gt; textField.&lt;span class="pl-c1"&gt;text&lt;/span&gt;
&lt;span class="pl-k"&gt;try&lt;/span&gt; dbQueue.&lt;span class="pl-smi"&gt;write&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;if&lt;/span&gt; &lt;span class="pl-k"&gt;var&lt;/span&gt; student &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Student.&lt;span class="pl-c1"&gt;fetchOne&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;key&lt;/span&gt;: id) {
        student.&lt;span class="pl-smi"&gt;name&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; name
        &lt;span class="pl-k"&gt;try&lt;/span&gt; student.&lt;span class="pl-c1"&gt;update&lt;/span&gt;(db)
    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-error-handling" class="anchor" aria-hidden="true" href="#error-handling"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Error Handling&lt;/h2&gt;
&lt;p&gt;GRDB can throw &lt;a href="#databaseerror"&gt;DatabaseError&lt;/a&gt;, &lt;a href="#persistenceerror"&gt;PersistenceError&lt;/a&gt;, or crash your program with a &lt;a href="#fatal-errors"&gt;fatal error&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Considering that a local database is not some JSON loaded from a remote server, GRDB focuses on &lt;strong&gt;trusted databases&lt;/strong&gt;. Dealing with &lt;a href="#how-to-deal-with-untrusted-inputs"&gt;untrusted databases&lt;/a&gt; requires extra care.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#databaseerror"&gt;DatabaseError&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#persistenceerror"&gt;PersistenceError&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#fatal-errors"&gt;Fatal Errors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#how-to-deal-with-untrusted-inputs"&gt;How to Deal with Untrusted Inputs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#error-log"&gt;Error Log&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-databaseerror" class="anchor" aria-hidden="true" href="#databaseerror"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;DatabaseError&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;DatabaseError&lt;/strong&gt; are thrown on SQLite errors:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;do&lt;/span&gt; {
    &lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;execute&lt;/span&gt;(
        &lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;INSERT INTO pet (masterId, name) VALUES (?, ?)&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
        &lt;span class="pl-c1"&gt;arguments&lt;/span&gt;: [&lt;span class="pl-c1"&gt;1&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Bobby&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;])
} &lt;span class="pl-k"&gt;catch&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; error &lt;span class="pl-k"&gt;as&lt;/span&gt; DatabaseError {
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; The SQLite error code: 19 (SQLITE_CONSTRAINT)&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    error.&lt;span class="pl-smi"&gt;resultCode&lt;/span&gt;
    
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; The extended error code: 787 (SQLITE_CONSTRAINT_FOREIGNKEY)&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    error.&lt;span class="pl-smi"&gt;extendedResultCode&lt;/span&gt;
    
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; The eventual SQLite message: FOREIGN KEY constraint failed&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    error.&lt;span class="pl-smi"&gt;message&lt;/span&gt;
    
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; The eventual erroneous SQL query&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; "INSERT INTO pet (masterId, name) VALUES (?, ?)"&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    error.&lt;span class="pl-smi"&gt;sql&lt;/span&gt;
    
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Full error description:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; "SQLite error 19 with statement `INSERT INTO pet (masterId, name)&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;  VALUES (?, ?)` arguments [1, "Bobby"]: FOREIGN KEY constraint failed""&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    error.&lt;span class="pl-c1"&gt;description&lt;/span&gt;
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;SQLite uses codes to distinguish between various errors:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;do&lt;/span&gt; {
    &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-k"&gt;...&lt;/span&gt;
} &lt;span class="pl-k"&gt;catch&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; error &lt;span class="pl-k"&gt;as&lt;/span&gt; DatabaseError &lt;span class="pl-k"&gt;where&lt;/span&gt; error.&lt;span class="pl-smi"&gt;extendedResultCode&lt;/span&gt; &lt;span class="pl-k"&gt;==&lt;/span&gt; .&lt;span class="pl-smi"&gt;SQLITE_CONSTRAINT_FOREIGNKEY&lt;/span&gt; {
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; foreign key constraint error&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;} &lt;span class="pl-k"&gt;catch&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; error &lt;span class="pl-k"&gt;as&lt;/span&gt; DatabaseError &lt;span class="pl-k"&gt;where&lt;/span&gt; error.&lt;span class="pl-smi"&gt;resultCode&lt;/span&gt; &lt;span class="pl-k"&gt;==&lt;/span&gt; .&lt;span class="pl-smi"&gt;SQLITE_CONSTRAINT&lt;/span&gt; {
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; any other constraint error&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;} &lt;span class="pl-k"&gt;catch&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; error &lt;span class="pl-k"&gt;as&lt;/span&gt; DatabaseError {
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; any other database error&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the example above, &lt;code&gt;error.extendedResultCode&lt;/code&gt; is a precise &lt;a href="https://www.sqlite.org/rescode.html#extended_result_code_list" rel="nofollow"&gt;extended result code&lt;/a&gt;, and &lt;code&gt;error.resultCode&lt;/code&gt; is a less precise &lt;a href="https://www.sqlite.org/rescode.html#primary_result_code_list" rel="nofollow"&gt;primary result code&lt;/a&gt;. Extended result codes are refinements of primary result codes, as &lt;code&gt;SQLITE_CONSTRAINT_FOREIGNKEY&lt;/code&gt; is to &lt;code&gt;SQLITE_CONSTRAINT&lt;/code&gt;, for example. See &lt;a href="https://www.sqlite.org/rescode.html" rel="nofollow"&gt;SQLite result codes&lt;/a&gt; for more information.&lt;/p&gt;
&lt;p&gt;As a convenience, extended result codes match their primary result code in a switch statement:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;do&lt;/span&gt; {
    &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-k"&gt;...&lt;/span&gt;
} &lt;span class="pl-k"&gt;catch&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; error &lt;span class="pl-k"&gt;as&lt;/span&gt; DatabaseError {
    &lt;span class="pl-k"&gt;switch&lt;/span&gt; error.&lt;span class="pl-smi"&gt;extendedResultCode&lt;/span&gt; {
    &lt;span class="pl-k"&gt;case&lt;/span&gt; ResultCode.&lt;span class="pl-smi"&gt;SQLITE_CONSTRAINT_FOREIGNKEY&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt;
        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; foreign key constraint error&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;case&lt;/span&gt; ResultCode.&lt;span class="pl-smi"&gt;SQLITE_CONSTRAINT&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt;
        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; any other constraint error&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;default&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt;
        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; any other database error&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;g-emoji class="g-emoji" alias="warning" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/26a0.png"&gt;⚠️&lt;/g-emoji&gt; &lt;strong&gt;Warning&lt;/strong&gt;: SQLite has progressively introduced extended result codes accross its versions. The &lt;a href="http://www.sqlite.org/changes.html" rel="nofollow"&gt;SQLite release notes&lt;/a&gt; are unfortunately not quite clear about that: write your handling of extended result codes with care.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;&lt;a id="user-content-persistenceerror" class="anchor" aria-hidden="true" href="#persistenceerror"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;PersistenceError&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;PersistenceError&lt;/strong&gt; is thrown by the &lt;a href="#persistablerecord-protocol"&gt;PersistableRecord&lt;/a&gt; protocol, in a single case: when the &lt;code&gt;update&lt;/code&gt; method could not find any row to update:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;do&lt;/span&gt; {
    &lt;span class="pl-k"&gt;try&lt;/span&gt; player.&lt;span class="pl-c1"&gt;update&lt;/span&gt;(db)
} &lt;span class="pl-k"&gt;catch&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; PersistenceError.&lt;span class="pl-c1"&gt;recordNotFound&lt;/span&gt;(&lt;span class="pl-c1"&gt;databaseTableName&lt;/span&gt;: table, &lt;span class="pl-c1"&gt;key&lt;/span&gt;: key) {
    &lt;span class="pl-c1"&gt;print&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Key &lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;key&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt; was not found in table &lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;table&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;.&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
}&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-fatal-errors" class="anchor" aria-hidden="true" href="#fatal-errors"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Fatal Errors&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Fatal errors notify that the program, or the database, has to be changed.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;They uncover programmer errors, false assumptions, and prevent misuses. Here are a few examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;The code asks for a non-optional value, when the database contains NULL:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; fatal error: could not convert NULL to String.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; name&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;String&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; row[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;name&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Solution: fix the contents of the database, use &lt;a href="#create-tables"&gt;NOT NULL constraints&lt;/a&gt;, or load an optional:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; name&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;String&lt;/span&gt;&lt;span class="pl-k"&gt;?&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; row[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;name&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Conversion from database value to Swift type fails:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; fatal error: could not convert "Mom’s birthday" to Date.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; date&lt;span class="pl-k"&gt;:&lt;/span&gt; Date &lt;span class="pl-k"&gt;=&lt;/span&gt; row[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;date&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; fatal error: could not convert "" to URL.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; url&lt;span class="pl-k"&gt;:&lt;/span&gt; URL &lt;span class="pl-k"&gt;=&lt;/span&gt; row[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;url&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Solution: fix the contents of the database, or use &lt;a href="#databasevalue"&gt;DatabaseValue&lt;/a&gt; to handle all possible cases:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; dbValue&lt;span class="pl-k"&gt;:&lt;/span&gt; DatabaseValue &lt;span class="pl-k"&gt;=&lt;/span&gt; row[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;date&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]
&lt;span class="pl-k"&gt;if&lt;/span&gt; dbValue.&lt;span class="pl-smi"&gt;isNull&lt;/span&gt; {
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Handle NULL&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;} &lt;span class="pl-k"&gt;else&lt;/span&gt; &lt;span class="pl-k"&gt;if&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; date &lt;span class="pl-k"&gt;=&lt;/span&gt; Date.&lt;span class="pl-c1"&gt;fromDatabaseValue&lt;/span&gt;(dbValue) {
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Handle valid date&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;} &lt;span class="pl-k"&gt;else&lt;/span&gt; {
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Handle invalid date&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;}&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;The database can't guarantee that the code does what it says:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; fatal error: table player has no unique index on column email&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; Player.&lt;span class="pl-c1"&gt;deleteOne&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;key&lt;/span&gt;: [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;email&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;arthur@example.com&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;])&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Solution: add a unique index to the player.email column, or use the &lt;code&gt;deleteAll&lt;/code&gt; method to make it clear that you may delete more than one row:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; Player.&lt;span class="pl-c1"&gt;filter&lt;/span&gt;(&lt;span class="pl-c1"&gt;Column&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;email&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-k"&gt;==&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;arthur@example.com&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;).&lt;span class="pl-c1"&gt;deleteAll&lt;/span&gt;(db)&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Database connections are not reentrant:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; fatal error: Database methods are not reentrant.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;dbQueue.&lt;span class="pl-smi"&gt;write&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    dbQueue.&lt;span class="pl-smi"&gt;write&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
        &lt;span class="pl-k"&gt;...&lt;/span&gt;
    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Solution: avoid reentrancy, and instead pass a database connection along.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-how-to-deal-with-untrusted-inputs" class="anchor" aria-hidden="true" href="#how-to-deal-with-untrusted-inputs"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;How to Deal with Untrusted Inputs&lt;/h3&gt;
&lt;p&gt;Let's consider the code below:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; sql &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SELECT ...&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Some untrusted arguments for the query&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; arguments&lt;span class="pl-k"&gt;:&lt;/span&gt; [&lt;span class="pl-c1"&gt;String&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;Any&lt;/span&gt;] &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;...&lt;/span&gt;
&lt;span class="pl-k"&gt;let&lt;/span&gt; rows &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Row.&lt;span class="pl-c1"&gt;fetchCursor&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;sql&lt;/span&gt;: sql, &lt;span class="pl-c1"&gt;arguments&lt;/span&gt;: &lt;span class="pl-c1"&gt;StatementArguments&lt;/span&gt;(arguments))

&lt;span class="pl-k"&gt;while&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; row &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; rows.&lt;span class="pl-c1"&gt;next&lt;/span&gt;() {
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Some untrusted database value:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;let&lt;/span&gt; date&lt;span class="pl-k"&gt;:&lt;/span&gt; Date&lt;span class="pl-k"&gt;?&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; row[&lt;span class="pl-c1"&gt;0&lt;/span&gt;]
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It has two opportunities to throw fatal errors:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Untrusted arguments&lt;/strong&gt;: The dictionary may contain values that do not conform to the &lt;a href="#values"&gt;DatabaseValueConvertible protocol&lt;/a&gt;, or may miss keys required by the statement.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Untrusted database content&lt;/strong&gt;: The row may contain a non-null value that can't be turned into a date.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In such a situation, you can still avoid fatal errors by exposing and handling each failure point, one level down in the GRDB API:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Untrusted arguments&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;if&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; arguments &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;StatementArguments&lt;/span&gt;(arguments) {
    &lt;span class="pl-k"&gt;let&lt;/span&gt; statement &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;makeSelectStatement&lt;/span&gt;(&lt;span class="pl-c1"&gt;sql&lt;/span&gt;: sql)
    &lt;span class="pl-k"&gt;try&lt;/span&gt; statement.&lt;span class="pl-c1"&gt;validate&lt;/span&gt;(&lt;span class="pl-c1"&gt;arguments&lt;/span&gt;: arguments)
    statement.&lt;span class="pl-c1"&gt;unsafeSetArguments&lt;/span&gt;(arguments)
    
    &lt;span class="pl-k"&gt;var&lt;/span&gt; cursor &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Row.&lt;span class="pl-c1"&gt;fetchCursor&lt;/span&gt;(statement)
    &lt;span class="pl-k"&gt;while&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; row &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; iterator.&lt;span class="pl-c1"&gt;next&lt;/span&gt;() {
        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Untrusted database content&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;        &lt;span class="pl-k"&gt;let&lt;/span&gt; dbValue&lt;span class="pl-k"&gt;:&lt;/span&gt; DatabaseValue &lt;span class="pl-k"&gt;=&lt;/span&gt; row[&lt;span class="pl-c1"&gt;0&lt;/span&gt;]
        &lt;span class="pl-k"&gt;if&lt;/span&gt; dbValue.&lt;span class="pl-smi"&gt;isNull&lt;/span&gt; {
            &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Handle NULL&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;        &lt;span class="pl-k"&gt;if&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; date &lt;span class="pl-k"&gt;=&lt;/span&gt; Date.&lt;span class="pl-c1"&gt;fromDatabaseValue&lt;/span&gt;(dbValue) {
            &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Handle valid date&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;        } &lt;span class="pl-k"&gt;else&lt;/span&gt; {
            &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Handle invalid date&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;        }
    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;See &lt;a href="#prepared-statements"&gt;prepared statements&lt;/a&gt; and &lt;a href="#databasevalue"&gt;DatabaseValue&lt;/a&gt; for more information.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-error-log" class="anchor" aria-hidden="true" href="#error-log"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Error Log&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;SQLite can be configured to invoke a callback function containing an error code and a terse error message whenever anomalies occur.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This global error callback must be configured early in the lifetime of your application:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;Database.&lt;span class="pl-smi"&gt;logError&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; { (resultCode, message) &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-c1"&gt;NSLog&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;%@&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SQLite error &lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;resultCode&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;: &lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;message&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
}&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;g-emoji class="g-emoji" alias="warning" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/26a0.png"&gt;⚠️&lt;/g-emoji&gt; &lt;strong&gt;Warning&lt;/strong&gt;: Database.logError must be set before any database connection is opened. This includes the connections that your application opens with GRDB, but also connections opened by other tools, such as third-party libraries. Setting it after a connection has been opened is an SQLite misuse, and has no effect.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;See &lt;a href="https://sqlite.org/errlog.html" rel="nofollow"&gt;The Error And Warning Log&lt;/a&gt; for more information.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-unicode" class="anchor" aria-hidden="true" href="#unicode"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Unicode&lt;/h2&gt;
&lt;p&gt;SQLite lets you store unicode strings in the database.&lt;/p&gt;
&lt;p&gt;However, SQLite does not provide any unicode-aware string transformations or comparisons.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-unicode-functions" class="anchor" aria-hidden="true" href="#unicode-functions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Unicode functions&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;UPPER&lt;/code&gt; and &lt;code&gt;LOWER&lt;/code&gt; built-in SQLite functions are not unicode-aware:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; "JéRôME"&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;String&lt;/span&gt;.&lt;span class="pl-c1"&gt;fetchOne&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SELECT UPPER('Jérôme')&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;GRDB extends SQLite with &lt;a href="#custom-sql-functions-and-aggregates"&gt;SQL functions&lt;/a&gt; that call the Swift built-in string functions &lt;code&gt;capitalized&lt;/code&gt;, &lt;code&gt;lowercased&lt;/code&gt;, &lt;code&gt;uppercased&lt;/code&gt;, &lt;code&gt;localizedCapitalized&lt;/code&gt;, &lt;code&gt;localizedLowercased&lt;/code&gt; and &lt;code&gt;localizedUppercased&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; "JÉRÔME"&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; uppercased &lt;span class="pl-k"&gt;=&lt;/span&gt; DatabaseFunction.&lt;span class="pl-smi"&gt;uppercase&lt;/span&gt;
&lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;String&lt;/span&gt;.&lt;span class="pl-c1"&gt;fetchOne&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SELECT &lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;uppercased.&lt;span class="pl-smi"&gt;name&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;('Jérôme')&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Those unicode-aware string functions are also readily available in the &lt;a href="#sql-functions"&gt;query interface&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;Player.&lt;span class="pl-c1"&gt;select&lt;/span&gt;(nameColumn.&lt;span class="pl-smi"&gt;uppercased&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-string-comparison" class="anchor" aria-hidden="true" href="#string-comparison"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;String Comparison&lt;/h3&gt;
&lt;p&gt;SQLite compares strings in many occasions: when you sort rows according to a string column, or when you use a comparison operator such as &lt;code&gt;=&lt;/code&gt; and &lt;code&gt;&amp;lt;=&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The comparison result comes from a &lt;em&gt;collating function&lt;/em&gt;, or &lt;em&gt;collation&lt;/em&gt;. SQLite comes with three built-in collations that do not support Unicode: &lt;a href="https://www.sqlite.org/datatype3.html#collation" rel="nofollow"&gt;binary, nocase, and rtrim&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;GRDB comes with five extra collations that leverage unicode-aware comparisons based on the standard Swift String comparison functions and operators:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;unicodeCompare&lt;/code&gt; (uses the built-in &lt;code&gt;&amp;lt;=&lt;/code&gt; and &lt;code&gt;==&lt;/code&gt; Swift operators)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;caseInsensitiveCompare&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;localizedCaseInsensitiveCompare&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;localizedCompare&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;localizedStandardCompare&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A collation can be applied to a table column. All comparisons involving this column will then automatically trigger the comparison function:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-c1"&gt;create&lt;/span&gt;(&lt;span class="pl-c1"&gt;table&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;player&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) { t &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Guarantees case-insensitive email unicity&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    t.&lt;span class="pl-c1"&gt;column&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;email&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, .&lt;span class="pl-c1"&gt;text&lt;/span&gt;).&lt;span class="pl-c1"&gt;unique&lt;/span&gt;().&lt;span class="pl-c1"&gt;collate&lt;/span&gt;(.&lt;span class="pl-smi"&gt;nocase&lt;/span&gt;)
    
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Sort names in a localized case insensitive way&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    t.&lt;span class="pl-c1"&gt;column&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;name&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, .&lt;span class="pl-c1"&gt;text&lt;/span&gt;).&lt;span class="pl-c1"&gt;collate&lt;/span&gt;(.&lt;span class="pl-smi"&gt;localizedCaseInsensitiveCompare&lt;/span&gt;)
}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Players are sorted in a localized case insensitive way:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; players &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Player.&lt;span class="pl-c1"&gt;order&lt;/span&gt;(nameColumn).&lt;span class="pl-c1"&gt;fetchAll&lt;/span&gt;(db)&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;g-emoji class="g-emoji" alias="warning" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/26a0.png"&gt;⚠️&lt;/g-emoji&gt; &lt;strong&gt;Warning&lt;/strong&gt;: SQLite &lt;em&gt;requires&lt;/em&gt; host applications to provide the definition of any collation other than binary, nocase and rtrim. When a database file has to be shared or migrated to another SQLite library of platform (such as the Android version of your application), make sure you provide a compatible collation.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you can't or don't want to define the comparison behavior of a column (see warning above), you can still use an explicit collation in SQL requests and in the &lt;a href="#the-query-interface"&gt;query interface&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; collation &lt;span class="pl-k"&gt;=&lt;/span&gt; DatabaseCollation.&lt;span class="pl-smi"&gt;localizedCaseInsensitiveCompare&lt;/span&gt;
&lt;span class="pl-k"&gt;let&lt;/span&gt; players &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Player.&lt;span class="pl-c1"&gt;fetchAll&lt;/span&gt;(db,
    &lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SELECT * FROM player ORDER BY name COLLATE &lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;collation.&lt;span class="pl-smi"&gt;name&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;)&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-k"&gt;let&lt;/span&gt; players &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Player.&lt;span class="pl-c1"&gt;order&lt;/span&gt;(nameColumn.&lt;span class="pl-c1"&gt;collating&lt;/span&gt;(collation)).&lt;span class="pl-c1"&gt;fetchAll&lt;/span&gt;(db)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;You can also define your own collations&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; collation &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;DatabaseCollation&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;customCollation&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) { (lhs, rhs) &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; NSComparisonResult &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; return the comparison of lhs and rhs strings.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;}
dbQueue.&lt;span class="pl-c1"&gt;add&lt;/span&gt;(&lt;span class="pl-c1"&gt;collation&lt;/span&gt;: collation) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Or dbPool.add(collation: ...)&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-memory-management" class="anchor" aria-hidden="true" href="#memory-management"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Memory Management&lt;/h2&gt;
&lt;p&gt;Both SQLite and GRDB use non-essential memory that help them perform better.&lt;/p&gt;
&lt;p&gt;You can reclaim this memory with the &lt;code&gt;releaseMemory&lt;/code&gt; method:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Release as much memory as possible.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;dbQueue.&lt;span class="pl-c1"&gt;releaseMemory&lt;/span&gt;()
dbPool.&lt;span class="pl-c1"&gt;releaseMemory&lt;/span&gt;()&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This method blocks the current thread until all current database accesses are completed, and the memory collected.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-memory-management-on-ios" class="anchor" aria-hidden="true" href="#memory-management-on-ios"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Memory Management on iOS&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;The iOS operating system likes applications that do not consume much memory.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#database-queues"&gt;Database queues&lt;/a&gt; and &lt;a href="#database-pools"&gt;pools&lt;/a&gt; can call the &lt;code&gt;releaseMemory&lt;/code&gt; method for you, when application receives memory warnings, and when application enters background: call the &lt;code&gt;setupMemoryManagement&lt;/code&gt; method after creating the queue or pool instance:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let dbQueue = try DatabaseQueue(...)
dbQueue.setupMemoryManagement(in: UIApplication.shared)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;a id="user-content-data-protection" class="anchor" aria-hidden="true" href="#data-protection"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Data Protection&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://developer.apple.com/library/content/documentation/iPhone/Conceptual/iPhoneOSProgrammingGuide/StrategiesforImplementingYourApp/StrategiesforImplementingYourApp.html#//apple_ref/doc/uid/TP40007072-CH5-SW21" rel="nofollow"&gt;Data Protection&lt;/a&gt; lets you protect files so that they are encrypted and unavailable until the device is unlocked.&lt;/p&gt;
&lt;p&gt;Data protection can be enabled &lt;a href="https://developer.apple.com/library/content/documentation/IDEs/Conceptual/AppDistributionGuide/AddingCapabilities/AddingCapabilities.html#//apple_ref/doc/uid/TP40012582-CH26-SW30" rel="nofollow"&gt;globally&lt;/a&gt; for all files created by an application.&lt;/p&gt;
&lt;p&gt;You can also explicitly protect a database, by configuring its enclosing &lt;em&gt;directory&lt;/em&gt;. This will not only protect the database file, but also all &lt;a href="https://www.sqlite.org/tempfiles.html" rel="nofollow"&gt;temporary files&lt;/a&gt; created by SQLite (including the persistent &lt;code&gt;.shm&lt;/code&gt; and &lt;code&gt;.wal&lt;/code&gt; files created by &lt;a href="#database-pools"&gt;database pools&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;For example, to explicitly use &lt;a href="https://developer.apple.com/reference/foundation/fileprotectiontype/1616200-complete" rel="nofollow"&gt;complete&lt;/a&gt; protection:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Paths&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; fileManager &lt;span class="pl-k"&gt;=&lt;/span&gt; FileManager.&lt;span class="pl-smi"&gt;default&lt;/span&gt;
&lt;span class="pl-k"&gt;let&lt;/span&gt; directoryURL &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; fileManager
    .&lt;span class="pl-c1"&gt;url&lt;/span&gt;(&lt;span class="pl-c1"&gt;for&lt;/span&gt;: .&lt;span class="pl-smi"&gt;applicationSupportDirectory&lt;/span&gt;, &lt;span class="pl-c1"&gt;in&lt;/span&gt;: .&lt;span class="pl-smi"&gt;userDomainMask&lt;/span&gt;, &lt;span class="pl-c1"&gt;appropriateFor&lt;/span&gt;: &lt;span class="pl-c1"&gt;nil&lt;/span&gt;, &lt;span class="pl-c1"&gt;create&lt;/span&gt;: &lt;span class="pl-c1"&gt;true&lt;/span&gt;)
    .&lt;span class="pl-c1"&gt;appendingPathComponent&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;database&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;isDirectory&lt;/span&gt;: &lt;span class="pl-c1"&gt;true&lt;/span&gt;)
&lt;span class="pl-k"&gt;let&lt;/span&gt; databaseURL &lt;span class="pl-k"&gt;=&lt;/span&gt; directoryURL.&lt;span class="pl-c1"&gt;appendingPathComponent&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;db.sqlite&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Create directory if needed&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;var&lt;/span&gt; isDirectory&lt;span class="pl-k"&gt;:&lt;/span&gt; ObjCBool &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;false&lt;/span&gt;
&lt;span class="pl-k"&gt;if&lt;/span&gt; &lt;span class="pl-k"&gt;!&lt;/span&gt;fileManager.&lt;span class="pl-c1"&gt;fileExists&lt;/span&gt;(&lt;span class="pl-c1"&gt;atPath&lt;/span&gt;: directoryURL.&lt;span class="pl-smi"&gt;path&lt;/span&gt;, &lt;span class="pl-c1"&gt;isDirectory&lt;/span&gt;: &lt;span class="pl-k"&gt;&amp;amp;&lt;/span&gt;isDirectory) {
    &lt;span class="pl-k"&gt;try&lt;/span&gt; fileManager.&lt;span class="pl-c1"&gt;createDirectory&lt;/span&gt;(&lt;span class="pl-c1"&gt;atPath&lt;/span&gt;: directoryURL.&lt;span class="pl-smi"&gt;path&lt;/span&gt;, &lt;span class="pl-c1"&gt;withIntermediateDirectories&lt;/span&gt;: &lt;span class="pl-c1"&gt;false&lt;/span&gt;)
} &lt;span class="pl-k"&gt;else&lt;/span&gt; &lt;span class="pl-k"&gt;if&lt;/span&gt; &lt;span class="pl-k"&gt;!&lt;/span&gt;isDirectory.&lt;span class="pl-c1"&gt;boolValue&lt;/span&gt; {
    &lt;span class="pl-k"&gt;throw&lt;/span&gt; &lt;span class="pl-c1"&gt;NSError&lt;/span&gt;(&lt;span class="pl-c1"&gt;domain&lt;/span&gt;: NSCocoaErrorDomain, &lt;span class="pl-c1"&gt;code&lt;/span&gt;: NSFileWriteFileExistsError, &lt;span class="pl-c1"&gt;userInfo&lt;/span&gt;: &lt;span class="pl-c1"&gt;nil&lt;/span&gt;)
}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Enable data protection&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; fileManager.&lt;span class="pl-c1"&gt;setAttributes&lt;/span&gt;([.&lt;span class="pl-smi"&gt;protectionKey&lt;/span&gt; &lt;span class="pl-k"&gt;:&lt;/span&gt; FileProtectionType.&lt;span class="pl-smi"&gt;complete&lt;/span&gt;], &lt;span class="pl-c1"&gt;ofItemAtPath&lt;/span&gt;: directoryURL.&lt;span class="pl-smi"&gt;path&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Open database&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; dbQueue &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;DatabaseQueue&lt;/span&gt;(&lt;span class="pl-c1"&gt;path&lt;/span&gt;: databaseURL.&lt;span class="pl-smi"&gt;path&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When a database is protected, an application that runs in the background on a locked device won't be able to read or write from it. Instead, it will get &lt;a href="#error-handling"&gt;DatabaseError&lt;/a&gt; with code &lt;a href="https://www.sqlite.org/rescode.html#ioerr" rel="nofollow"&gt;&lt;code&gt;SQLITE_IOERR&lt;/code&gt;&lt;/a&gt; (10) "disk I/O error", or &lt;a href="https://www.sqlite.org/rescode.html#auth" rel="nofollow"&gt;&lt;code&gt;SQLITE_AUTH&lt;/code&gt;&lt;/a&gt; (23) "not authorized".&lt;/p&gt;
&lt;p&gt;You can catch those errors and wait for &lt;a href="https://developer.apple.com/reference/uikit/uiapplicationdelegate/1623044-applicationprotecteddatadidbecom" rel="nofollow"&gt;UIApplicationDelegate.applicationProtectedDataDidBecomeAvailable(_:)&lt;/a&gt; or &lt;a href="https://developer.apple.com/reference/uikit/uiapplicationprotecteddatadidbecomeavailable" rel="nofollow"&gt;UIApplicationProtectedDataDidBecomeAvailable&lt;/a&gt; notification in order to retry the failed database operation.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-concurrency" class="anchor" aria-hidden="true" href="#concurrency"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Concurrency&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#guarantees-and-rules"&gt;Guarantees and Rules&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#differences-between-database-queues-and-pools"&gt;Differences between Database Queues and Pools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#advanced-databasepool"&gt;Advanced DatabasePool&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#database-snapshots"&gt;Database Snapshots&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#databasewriter-and-databasereader-protocols"&gt;DatabaseWriter and DatabaseReader Protocols&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#asynchronous-apis"&gt;Asynchronous APIs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#unsafe-concurrency-apis"&gt;Unsafe Concurrency APIs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dealing-with-external-connections"&gt;Dealing with External Connections&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-guarantees-and-rules" class="anchor" aria-hidden="true" href="#guarantees-and-rules"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Guarantees and Rules&lt;/h3&gt;
&lt;p&gt;GRDB ships with three concurrency modes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#database-queues"&gt;DatabaseQueue&lt;/a&gt; opens a single database connection, and serializes all database accesses.&lt;/li&gt;
&lt;li&gt;&lt;a href="#database-pools"&gt;DatabasePool&lt;/a&gt; manages a pool of several database connections, and allows concurrent reads and writes.&lt;/li&gt;
&lt;li&gt;&lt;a href="#database-snapshots"&gt;DatabaseSnapshot&lt;/a&gt; opens a single read-only database connection on an unchanging database content, and (currently) serializes all database accesses&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;All foster application safety&lt;/strong&gt;: regardless of the concurrency mode you choose, GRDB provides you with the same guarantees, as long as you follow three rules.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;img class="emoji" title=":bowtie:" alt=":bowtie:" src="https://github.githubassets.com/images/icons/emoji/bowtie.png" height="20" width="20" align="absmiddle"&gt; &lt;strong&gt;Guarantee 1: writes are always serialized&lt;/strong&gt;. At every moment, there is no more than a single thread that is writing into the database.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Database writes always happen in a unique serial dispatch queue, named the &lt;em&gt;writer protected dispatch queue&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;img class="emoji" title=":bowtie:" alt=":bowtie:" src="https://github.githubassets.com/images/icons/emoji/bowtie.png" height="20" width="20" align="absmiddle"&gt; &lt;strong&gt;Guarantee 2: reads are always isolated&lt;/strong&gt;. This means that they are guaranteed an immutable view of the database, and that you can perform subsequent fetches without fearing eventual concurrent writes to mess with your application logic:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; dbPool.&lt;span class="pl-smi"&gt;read&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt; &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; or dbQueue.read&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Guaranteed to be equal&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;let&lt;/span&gt; count1 &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Player.&lt;span class="pl-c1"&gt;fetchCount&lt;/span&gt;(db)
    &lt;span class="pl-k"&gt;let&lt;/span&gt; count2 &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Player.&lt;span class="pl-c1"&gt;fetchCount&lt;/span&gt;(db)
}&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;In &lt;a href="#database-queues"&gt;database queues&lt;/a&gt;, reads happen in the same protected dispatch queue as writes: isolation is just a consequence of the serialization of database accesses&lt;/p&gt;
&lt;p&gt;&lt;a href="#database-pools"&gt;Database pools&lt;/a&gt; and &lt;a href="#database-snapshots"&gt;snapshots&lt;/a&gt; both use the "snapshot isolation" made possible by SQLite's WAL mode (see &lt;a href="https://sqlite.org/isolation.html" rel="nofollow"&gt;Isolation In SQLite&lt;/a&gt;).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;img class="emoji" title=":bowtie:" alt=":bowtie:" src="https://github.githubassets.com/images/icons/emoji/bowtie.png" height="20" width="20" align="absmiddle"&gt; &lt;strong&gt;Guarantee 3: requests don't fail&lt;/strong&gt;, unless a database constraint violation, a &lt;a href="#error-handling"&gt;programmer mistake&lt;/a&gt;, or a very low-level issue such as a disk error or an unreadable database file. GRDB grants &lt;em&gt;correct&lt;/em&gt; use of SQLite, and particularly avoids locking errors and other SQLite misuses.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Those guarantees hold as long as you follow three rules:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;g-emoji class="g-emoji" alias="point_up" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/261d.png"&gt;☝️&lt;/g-emoji&gt; &lt;strong&gt;Rule 1&lt;/strong&gt;: Have a unique instance of DatabaseQueue or DatabasePool connected to any database file.&lt;/p&gt;
&lt;p&gt;This means that opening a new connection each time you access the database is a bad idea. Do share a single connection instead.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="Documentation/DemoApps/GRDBDemoiOS/README.md"&gt;Demo Application&lt;/a&gt; for a sample app that sets up a single database queue that is available throughout the application.&lt;/p&gt;
&lt;p&gt;If there are several instances of database queues or pools that write in the same database, a multi-threaded application will eventually face "database is locked" errors. See &lt;a href="#dealing-with-external-connections"&gt;Dealing with External Connections&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; SAFE CONCURRENCY&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;fetchCurrentUser&lt;/span&gt;(&lt;span class="pl-en"&gt;_&lt;/span&gt; &lt;span class="pl-smi"&gt;db&lt;/span&gt;: Database) &lt;span class="pl-k"&gt;throws&lt;/span&gt; &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; User&lt;span class="pl-k"&gt;?&lt;/span&gt; {
    &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; User.&lt;span class="pl-c1"&gt;fetchOne&lt;/span&gt;(db)
}
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; dbQueue is a singleton defined somewhere in your app&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; user &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; dbQueue.&lt;span class="pl-smi"&gt;read&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt; &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; or dbPool.read&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;fetchCurrentUser&lt;/span&gt;(db)
}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; UNSAFE CONCURRENCY&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; This method fails when some other thread is currently writing into&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; the database.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;currentUser&lt;/span&gt;() &lt;span class="pl-k"&gt;throws&lt;/span&gt; &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; User&lt;span class="pl-k"&gt;?&lt;/span&gt; {
    &lt;span class="pl-k"&gt;let&lt;/span&gt; dbQueue &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;DatabaseQueue&lt;/span&gt;(&lt;span class="pl-k"&gt;...&lt;/span&gt;)
    &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; dbQueue.&lt;span class="pl-smi"&gt;read&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
        &lt;span class="pl-k"&gt;try&lt;/span&gt; User.&lt;span class="pl-c1"&gt;fetchOne&lt;/span&gt;(db)
    }
}
&lt;span class="pl-k"&gt;let&lt;/span&gt; user &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;currentUser&lt;/span&gt;()&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;g-emoji class="g-emoji" alias="point_up" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/261d.png"&gt;☝️&lt;/g-emoji&gt; &lt;strong&gt;Rule 2&lt;/strong&gt;: Group related statements within a single call to a DatabaseQueue or DatabasePool database access method (or use &lt;a href="#database-snapshots"&gt;snapshots&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Database access methods isolate your groups of related statements against eventual database updates performed by other threads, and guarantee a consistent view of the database. This isolation is only guaranteed &lt;em&gt;inside&lt;/em&gt; the closure argument of those methods. Two consecutive calls &lt;em&gt;do not&lt;/em&gt; guarantee isolation:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; SAFE CONCURRENCY&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; dbPool.&lt;span class="pl-smi"&gt;read&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; or dbQueue.read&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Guaranteed to be equal:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;let&lt;/span&gt; count1 &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Place.&lt;span class="pl-c1"&gt;fetchCount&lt;/span&gt;(db)
    &lt;span class="pl-k"&gt;let&lt;/span&gt; count2 &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Place.&lt;span class="pl-c1"&gt;fetchCount&lt;/span&gt;(db)
}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; UNSAFE CONCURRENCY&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Those two values may be different because some other thread may have&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; modified the database between the two blocks:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; count1 &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; dbPool.&lt;span class="pl-smi"&gt;read&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Place.&lt;span class="pl-c1"&gt;fetchCount&lt;/span&gt;(db) }
&lt;span class="pl-k"&gt;let&lt;/span&gt; count2 &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; dbPool.&lt;span class="pl-smi"&gt;read&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Place.&lt;span class="pl-c1"&gt;fetchCount&lt;/span&gt;(db) }&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the same vein, when you fetch values that depends on some database updates, group them:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; SAFE CONCURRENCY&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; dbPool.&lt;span class="pl-smi"&gt;write&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; The count is guaranteed to be non-zero&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;Place&lt;/span&gt;(&lt;span class="pl-k"&gt;...&lt;/span&gt;).&lt;span class="pl-c1"&gt;insert&lt;/span&gt;(db)
    &lt;span class="pl-k"&gt;let&lt;/span&gt; count &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Place.&lt;span class="pl-c1"&gt;fetchCount&lt;/span&gt;(db)
}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; UNSAFE CONCURRENCY&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; The count may be zero because some other thread may have performed&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; a deletion between the two blocks:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; dbPool.&lt;span class="pl-smi"&gt;write&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;Place&lt;/span&gt;(&lt;span class="pl-k"&gt;...&lt;/span&gt;).&lt;span class="pl-c1"&gt;insert&lt;/span&gt;(db) }
&lt;span class="pl-k"&gt;let&lt;/span&gt; count &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; dbPool.&lt;span class="pl-smi"&gt;read&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Place.&lt;span class="pl-c1"&gt;fetchCount&lt;/span&gt;(db) }&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;On that last example, see &lt;a href="#advanced-databasepool"&gt;Advanced DatabasePool&lt;/a&gt; if you look after extra performance.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;g-emoji class="g-emoji" alias="point_up" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/261d.png"&gt;☝️&lt;/g-emoji&gt; &lt;strong&gt;Rule 3&lt;/strong&gt;: When you perform several modifications of the database that temporarily put the database in an inconsistent state, make sure those modifications are grouped within a &lt;a href="#transactions-and-savepoints"&gt;transaction&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; SAFE CONCURRENCY&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; dbPool.&lt;span class="pl-smi"&gt;write&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;               &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; or dbQueue.write&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;Credit&lt;/span&gt;(destinationAccount, amount).&lt;span class="pl-c1"&gt;insert&lt;/span&gt;(db)
    &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;Debit&lt;/span&gt;(sourceAccount, amount).&lt;span class="pl-c1"&gt;insert&lt;/span&gt;(db)
}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; SAFE CONCURRENCY&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; dbPool.&lt;span class="pl-smi"&gt;writeInTransaction&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; or dbQueue.inTransaction&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;Credit&lt;/span&gt;(destinationAccount, amount).&lt;span class="pl-c1"&gt;insert&lt;/span&gt;(db)
    &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;Debit&lt;/span&gt;(sourceAccount, amount).&lt;span class="pl-c1"&gt;insert&lt;/span&gt;(db)
    &lt;span class="pl-k"&gt;return&lt;/span&gt; .&lt;span class="pl-smi"&gt;commit&lt;/span&gt;
}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; UNSAFE CONCURRENCY&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; dbPool.&lt;span class="pl-smi"&gt;writeWithoutTransaction&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;Credit&lt;/span&gt;(destinationAccount, amount).&lt;span class="pl-c1"&gt;insert&lt;/span&gt;(db)
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; &amp;lt;- Concurrent dbPool.read sees a partial db update here&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;Debit&lt;/span&gt;(sourceAccount, amount).&lt;span class="pl-c1"&gt;insert&lt;/span&gt;(db)
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Without transaction, &lt;code&gt;DatabasePool.read { ... }&lt;/code&gt; may see the first statement, but not the second, and access a database where the balance of accounts is not zero. A highly bug-prone situation.&lt;/p&gt;
&lt;p&gt;So do use &lt;a href="#transactions-and-savepoints"&gt;transactions&lt;/a&gt; in order to guarantee database consistency accross your application threads: that's what they are made for.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-differences-between-database-queues-and-pools" class="anchor" aria-hidden="true" href="#differences-between-database-queues-and-pools"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Differences between Database Queues and Pools&lt;/h3&gt;
&lt;p&gt;Despite the common &lt;a href="#guarantees-and-rules"&gt;guarantees and rules&lt;/a&gt; shared by &lt;a href="#database-queues"&gt;database queues&lt;/a&gt; and &lt;a href="#database-pools"&gt;pools&lt;/a&gt;, those two database accessors don't have the same behavior.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Database queues&lt;/strong&gt; serialize all database accesses, reads, and writes. There is never more than one thread that uses the database. In the image below, we see how three threads can see the database as time passes:&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/eb9e0b2b85ee780c5f12797a1e89636a8badefdd/68747470733a2f2f63646e2e7261776769742e636f6d2f67726f75652f475244422e73776966742f6d61737465722f446f63756d656e746174696f6e2f496d616765732f446174616261736551756575655363686564756c696e672e737667"&gt;&lt;img src="https://camo.githubusercontent.com/eb9e0b2b85ee780c5f12797a1e89636a8badefdd/68747470733a2f2f63646e2e7261776769742e636f6d2f67726f75652f475244422e73776966742f6d61737465722f446f63756d656e746174696f6e2f496d616765732f446174616261736551756575655363686564756c696e672e737667" alt="DatabaseQueueScheduling" data-canonical-src="https://cdn.rawgit.com/groue/GRDB.swift/master/Documentation/Images/DatabaseQueueScheduling.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Database pools&lt;/strong&gt; also serialize all writes. But they allow concurrent reads and writes, and isolate reads so that they don't see changes performed by other threads. This gives a very different picture:&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/9ca1a98ae185a5c052806290122221a743b0ba65/68747470733a2f2f63646e2e7261776769742e636f6d2f67726f75652f475244422e73776966742f6d61737465722f446f63756d656e746174696f6e2f496d616765732f4461746162617365506f6f6c5363686564756c696e672e737667"&gt;&lt;img src="https://camo.githubusercontent.com/9ca1a98ae185a5c052806290122221a743b0ba65/68747470733a2f2f63646e2e7261776769742e636f6d2f67726f75652f475244422e73776966742f6d61737465722f446f63756d656e746174696f6e2f496d616765732f4461746162617365506f6f6c5363686564756c696e672e737667" alt="DatabasePoolScheduling" data-canonical-src="https://cdn.rawgit.com/groue/GRDB.swift/master/Documentation/Images/DatabasePoolScheduling.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;See how, with database pools, two reads can see different database states at the same time.&lt;/p&gt;
&lt;p&gt;For more information about database pools, grab information about SQLite &lt;a href="https://www.sqlite.org/wal.html" rel="nofollow"&gt;WAL mode&lt;/a&gt; and &lt;a href="https://sqlite.org/isolation.html" rel="nofollow"&gt;snapshot isolation&lt;/a&gt;. See &lt;a href="#database-changes-observation"&gt;Database Observation&lt;/a&gt; when you look after automatic notifications of database changes.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-advanced-databasepool" class="anchor" aria-hidden="true" href="#advanced-databasepool"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Advanced DatabasePool&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#the-concurrenread-method"&gt;The &lt;code&gt;concurrenRead&lt;/code&gt; Method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-barrierwritewithouttransaction-method"&gt;The &lt;code&gt;barrierWriteWithoutTransaction&lt;/code&gt; Method&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a id="user-content-the-concurrenread-method" class="anchor" aria-hidden="true" href="#the-concurrenread-method"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;The &lt;code&gt;concurrenRead&lt;/code&gt; Method&lt;/h4&gt;
&lt;p&gt;&lt;a href="#database-pools"&gt;Database pools&lt;/a&gt; are very concurrent, since all reads can run in parallel, and can even run during write operations. But writes are still serialized: at any given point in time, there is no more than a single thread that is writing into the database.&lt;/p&gt;
&lt;p&gt;When your application modifies the database, and then reads some value that depends on those modifications, you may want to avoid locking the writer queue longer than necessary:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; dbPool.&lt;span class="pl-smi"&gt;write&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Increment the number of players&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;Player&lt;/span&gt;(&lt;span class="pl-k"&gt;...&lt;/span&gt;).&lt;span class="pl-c1"&gt;insert&lt;/span&gt;(db)
    
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Read the number of players. The writer queue is still locked :-(&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;let&lt;/span&gt; count &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Player.&lt;span class="pl-c1"&gt;fetchCount&lt;/span&gt;(db)
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A wrong solution is to chain a write then a read, as below. Don't do that, because another thread may modify the database in between, and make the read unreliable:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; WRONG&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; dbPool.&lt;span class="pl-smi"&gt;write&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Increment the number of players&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;Player&lt;/span&gt;(&lt;span class="pl-k"&gt;...&lt;/span&gt;).&lt;span class="pl-c1"&gt;insert&lt;/span&gt;(db)
}
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; &amp;lt;- other threads can write in the database here&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; dbPool.&lt;span class="pl-smi"&gt;read&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Read some random value :-(&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;let&lt;/span&gt; count &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Player.&lt;span class="pl-c1"&gt;fetchCount&lt;/span&gt;(db)
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The correct solution is the &lt;code&gt;concurrentRead&lt;/code&gt; method, which must be called from within a write block, outside of any transaction.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;concurrentRead&lt;/code&gt; returns a &lt;strong&gt;future value&lt;/strong&gt; which you consume on any dispatch queue, with the &lt;code&gt;wait()&lt;/code&gt; method:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; CORRECT&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; futureCount&lt;span class="pl-k"&gt;:&lt;/span&gt; DatabaseFuture&lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-c1"&gt;Int&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; dbPool.&lt;span class="pl-smi"&gt;writeWithoutTransaction&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; increment the number of players&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;Player&lt;/span&gt;(&lt;span class="pl-k"&gt;...&lt;/span&gt;).&lt;span class="pl-c1"&gt;insert&lt;/span&gt;(db)
    
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; &amp;lt;- not in a transaction here&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;let&lt;/span&gt; futureCount &lt;span class="pl-k"&gt;=&lt;/span&gt; dbPool.&lt;span class="pl-smi"&gt;concurrentRead&lt;/span&gt; { db
        &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Player.&lt;span class="pl-c1"&gt;fetchCount&lt;/span&gt;(db)
    }
    &lt;span class="pl-k"&gt;return&lt;/span&gt; futureCount
}
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; &amp;lt;- The writer queue has been unlocked :-)&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Wait for the player count&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; count&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;Int&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; futureCount.&lt;span class="pl-c1"&gt;wait&lt;/span&gt;()&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;concurrentRead&lt;/code&gt; blocks until it can guarantee its closure argument an isolated access to the last committed state of the database. It then asynchronously executes the closure.&lt;/p&gt;
&lt;p&gt;The closure can run concurrently with eventual updates performed after &lt;code&gt;concurrentRead&lt;/code&gt;: those updates won't be visible from within the closure. In the example below, the number of players is guaranteed to be non-zero, even though it is fetched concurrently with the player deletion:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; dbPool.&lt;span class="pl-smi"&gt;writeWithoutTransaction&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Increment the number of players&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;Player&lt;/span&gt;(&lt;span class="pl-k"&gt;...&lt;/span&gt;).&lt;span class="pl-c1"&gt;insert&lt;/span&gt;(db)
    
    &lt;span class="pl-k"&gt;let&lt;/span&gt; futureCount &lt;span class="pl-k"&gt;=&lt;/span&gt; dbPool.&lt;span class="pl-smi"&gt;concurrentRead&lt;/span&gt; { db
        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Guaranteed to be non-zero&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;        &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Player.&lt;span class="pl-c1"&gt;fetchCount&lt;/span&gt;(db)
    }
    
    &lt;span class="pl-k"&gt;try&lt;/span&gt; Player.&lt;span class="pl-c1"&gt;deleteAll&lt;/span&gt;(db)
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href="#transactionobserver-protocol"&gt;Transaction Observers&lt;/a&gt; can also use &lt;code&gt;concurrentRead&lt;/code&gt; in their &lt;code&gt;databaseDidCommit&lt;/code&gt; method in order to process database changes without blocking other threads that want to write into the database.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-the-barrierwritewithouttransaction-method" class="anchor" aria-hidden="true" href="#the-barrierwritewithouttransaction-method"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;The &lt;code&gt;barrierWriteWithoutTransaction&lt;/code&gt; Method&lt;/h4&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; dbPool.&lt;span class="pl-smi"&gt;barrierWriteWithoutTransaction&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Exclusive database access&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The barrier write guarantees exclusive access to the database: the method blocks until all concurrent database accesses are completed, reads and writes, and postpones all other accesses until it completes.&lt;/p&gt;
&lt;p&gt;There is a known limitation: reads performed by &lt;a href="#database-snapshots"&gt;database snapshots&lt;/a&gt; are out of scope, and may run concurrently with the barrier.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-database-snapshots" class="anchor" aria-hidden="true" href="#database-snapshots"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Database Snapshots&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="#database-pools"&gt;Database pool&lt;/a&gt; can take snapshots.&lt;/strong&gt; A database snapshot sees an unchanging database content, as it existed at the moment it was created.&lt;/p&gt;
&lt;p&gt;"Unchanging" means that a snapshot never sees any database modifications during all its lifetime. And yet it doesn't prevent database updates. This "magic" is made possible by SQLite's WAL mode (see &lt;a href="https://sqlite.org/isolation.html" rel="nofollow"&gt;Isolation In SQLite&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;You create snapshots from a &lt;a href="#database-pools"&gt;database pool&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; snapshot &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; dbPool.&lt;span class="pl-c1"&gt;makeSnapshot&lt;/span&gt;()&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can create as many snapshots as you need, regardless of the &lt;a href="#databasepool-configuration"&gt;maximum number of readers&lt;/a&gt; in the pool. A snapshot database connection is closed when the snapshot gets deallocated.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A snapshot can be used from any thread.&lt;/strong&gt; Its &lt;code&gt;read&lt;/code&gt; methods is synchronous, and blocks the current thread until your database statements are executed:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Read values:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; snapshot.&lt;span class="pl-smi"&gt;read&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;let&lt;/span&gt; players &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Player.&lt;span class="pl-c1"&gt;fetchAll&lt;/span&gt;(db)
    &lt;span class="pl-k"&gt;let&lt;/span&gt; playerCount &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Player.&lt;span class="pl-c1"&gt;fetchCount&lt;/span&gt;(db)
}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Extract a value from the database:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; playerCount &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; snapshot.&lt;span class="pl-smi"&gt;read&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;try&lt;/span&gt; Player.&lt;span class="pl-c1"&gt;fetchCount&lt;/span&gt;(db)
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When you want to control the latest committed changes seen by a snapshot, create the snapshot from the pool's writer protected dispatch queue, outside of any transaction:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; snapshot1 &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; dbPool.&lt;span class="pl-smi"&gt;writeWithoutTransaction&lt;/span&gt; { db &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; DatabaseSnapshot &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;try&lt;/span&gt; db.&lt;span class="pl-smi"&gt;inTransaction&lt;/span&gt; {
        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; delete all players&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;        &lt;span class="pl-k"&gt;try&lt;/span&gt; Player.&lt;span class="pl-c1"&gt;deleteAll&lt;/span&gt;()
        &lt;span class="pl-k"&gt;return&lt;/span&gt; .&lt;span class="pl-smi"&gt;commit&lt;/span&gt;
    }
    
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; &amp;lt;- not in a transaction here&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;return&lt;/span&gt; dbPool.&lt;span class="pl-c1"&gt;makeSnapshot&lt;/span&gt;()
}
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; &amp;lt;- Other threads may modify the database here&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; snapshot2 &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; dbPool.&lt;span class="pl-c1"&gt;makeSnapshot&lt;/span&gt;()

&lt;span class="pl-k"&gt;try&lt;/span&gt; snapshot1.&lt;span class="pl-smi"&gt;read&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Guaranteed to be zero&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;try&lt;/span&gt; Player.&lt;span class="pl-c1"&gt;fetchCount&lt;/span&gt;(db)
}

&lt;span class="pl-k"&gt;try&lt;/span&gt; snapshot2.&lt;span class="pl-smi"&gt;read&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Could be anything&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;try&lt;/span&gt; Player.&lt;span class="pl-c1"&gt;fetchCount&lt;/span&gt;(db)
}&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;g-emoji class="g-emoji" alias="point_up" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/261d.png"&gt;☝️&lt;/g-emoji&gt; &lt;strong&gt;Note&lt;/strong&gt;: snapshots currently serialize all database accesses. In the future, snapshots may allow concurrent reads.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;&lt;a id="user-content-databasewriter-and-databasereader-protocols" class="anchor" aria-hidden="true" href="#databasewriter-and-databasereader-protocols"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;DatabaseWriter and DatabaseReader Protocols&lt;/h3&gt;
&lt;p&gt;Both DatabaseQueue and DatabasePool adopt the &lt;a href="http://groue.github.io/GRDB.swift/docs/4.6/Protocols/DatabaseReader.html" rel="nofollow"&gt;DatabaseReader&lt;/a&gt; and &lt;a href="http://groue.github.io/GRDB.swift/docs/4.6/Protocols/DatabaseWriter.html" rel="nofollow"&gt;DatabaseWriter&lt;/a&gt; protocols. DatabaseSnapshot adopts DatabaseReader only.&lt;/p&gt;
&lt;p&gt;These protocols provide a unified API that let you write generic code that targets all concurrency modes. They fuel, for example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#migrations"&gt;Migrations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#databaseregionobservation"&gt;DatabaseRegionObservation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#valueobservation"&gt;ValueObservation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://github.com/groue/GRDBCombine"&gt;GRDBCombine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://github.com/RxSwiftCommunity/RxGRDB"&gt;RxGRDB&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Only five types adopt those protocols: DatabaseQueue, DatabasePool, DatabaseSnapshot, AnyDatabaseReader, and AnyDatabaseWriter. Expanding this set is not supported: any future GRDB release may break your custom writers and readers, without notice.&lt;/p&gt;
&lt;p&gt;DatabaseReader and DatabaseWriter provide the &lt;em&gt;smallest&lt;/em&gt; common guarantees: they don't erase the differences between queues, pools, and snapshots. See for example &lt;a href="#differences-between-database-queues-and-pools"&gt;Differences between Database Queues and Pools&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;However, you can prevent some parts of your application from writing in the database by giving them a DatabaseReader:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; This class can read in the database, but can't write into it.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;MyReadOnlyComponent&lt;/span&gt; {
    &lt;span class="pl-k"&gt;let&lt;/span&gt; reader&lt;span class="pl-k"&gt;:&lt;/span&gt; DatabaseReader
    
    &lt;span class="pl-k"&gt;init&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-en"&gt;reader&lt;/span&gt;&lt;/span&gt;: DatabaseReader) {
        &lt;span class="pl-c1"&gt;self&lt;/span&gt;.&lt;span class="pl-smi"&gt;reader&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; reader
    }
}

&lt;span class="pl-k"&gt;let&lt;/span&gt; dbQueue&lt;span class="pl-k"&gt;:&lt;/span&gt; DatabaseQueue &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;...&lt;/span&gt;
&lt;span class="pl-k"&gt;let&lt;/span&gt; component &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;MyReadOnlyComponent&lt;/span&gt;(&lt;span class="pl-c1"&gt;reader&lt;/span&gt;: dbQueue)&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;g-emoji class="g-emoji" alias="point_up" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/261d.png"&gt;☝️&lt;/g-emoji&gt; &lt;strong&gt;Note&lt;/strong&gt;: DatabaseReader is not a &lt;strong&gt;secure&lt;/strong&gt; way to prevent an application component from writing in the database, because write access is just a cast away:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;if&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; dbQueue &lt;span class="pl-k"&gt;=&lt;/span&gt; reader &lt;span class="pl-k"&gt;as?&lt;/span&gt; DatabaseQueue {
    &lt;span class="pl-k"&gt;try&lt;/span&gt; dbQueue.&lt;span class="pl-smi"&gt;write&lt;/span&gt; { &lt;span class="pl-k"&gt;...&lt;/span&gt; }
}&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;h3&gt;&lt;a id="user-content-asynchronous-apis" class="anchor" aria-hidden="true" href="#asynchronous-apis"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Asynchronous APIs&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Database queues, pools, snapshots, as well as their common protocols &lt;code&gt;DatabaseReader&lt;/code&gt; and &lt;code&gt;DatabaseWriter&lt;/code&gt; provide asynchronous database access methods.&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#asyncread"&gt;&lt;code&gt;asyncRead&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#asyncwrite"&gt;&lt;code&gt;asyncWrite&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#asyncwritewithouttransaction"&gt;&lt;code&gt;asyncWriteWithoutTransaction&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#asyncconcurrentread"&gt;&lt;code&gt;asyncConcurrentRead&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a id="user-content-asyncread" class="anchor" aria-hidden="true" href="#asyncread"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;code&gt;asyncRead&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;The &lt;code&gt;asyncRead&lt;/code&gt; method can be used from any thread. It submits your database statements for asynchronous execution on a protected dispatch queue:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;reader.&lt;span class="pl-smi"&gt;asyncRead&lt;/span&gt; { (&lt;span class="pl-c1"&gt;result&lt;/span&gt;: Result&lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt;Database&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;) &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;try&lt;/span&gt; {
        &lt;span class="pl-k"&gt;let&lt;/span&gt; db &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; result.&lt;span class="pl-c1"&gt;get&lt;/span&gt;()
        &lt;span class="pl-k"&gt;let&lt;/span&gt; players &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Player.&lt;span class="pl-c1"&gt;fetchAll&lt;/span&gt;(db)
    } &lt;span class="pl-k"&gt;catch&lt;/span&gt; {
        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; handle error&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The argument function accepts a standard &lt;code&gt;Result&amp;lt;Database, Error&amp;gt;&lt;/code&gt; which may contain a failure if it was impossible to start a reading access to the database.&lt;/p&gt;
&lt;p&gt;Any attempt at modifying the database throws an error.&lt;/p&gt;
&lt;p&gt;When you use a &lt;a href="#database-queues"&gt;database queue&lt;/a&gt; or a &lt;a href="#database-snapshots"&gt;database snapshot&lt;/a&gt;, the read has to wait for any eventual concurrent database access performed by this queue or snapshot to complete.&lt;/p&gt;
&lt;p&gt;When you use a &lt;a href="#database-pools"&gt;database pool&lt;/a&gt;, reads are generally non-blocking, unless the maximum number of concurrent reads has been reached. In this case, a read has to wait for another read to complete. That maximum number can be &lt;a href="#databasepool-configuration"&gt;configured&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;g-emoji class="g-emoji" alias="point_up" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/261d.png"&gt;☝️&lt;/g-emoji&gt; &lt;strong&gt;Note&lt;/strong&gt;: because it uses the standard &lt;code&gt;Result&lt;/code&gt; type, &lt;code&gt;asyncRead&lt;/code&gt; is only available with a Swift 5+ compiler, starting Xcode 10.2.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;&lt;a id="user-content-asyncwrite" class="anchor" aria-hidden="true" href="#asyncwrite"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;code&gt;asyncWrite&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;The &lt;code&gt;asyncWrite&lt;/code&gt; method can be used from any thread. It submits your database statements for asynchronous execution on a protected dispatch queue, wrapped inside a &lt;a href="#transactions-and-savepoints"&gt;database transaction&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;writer.&lt;span class="pl-c1"&gt;asyncWrite&lt;/span&gt;({ (&lt;span class="pl-c1"&gt;db&lt;/span&gt;: Database) &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;Player&lt;/span&gt;(&lt;span class="pl-k"&gt;...&lt;/span&gt;).&lt;span class="pl-c1"&gt;insert&lt;/span&gt;(db)
}, &lt;span class="pl-c1"&gt;completion&lt;/span&gt;: { (&lt;span class="pl-c1"&gt;db&lt;/span&gt;: Database, &lt;span class="pl-c1"&gt;result&lt;/span&gt;: Result&lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-c1"&gt;Void&lt;/span&gt;, &lt;span class="pl-c1"&gt;Error&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;) &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;switch&lt;/span&gt; result {
    &lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; .&lt;span class="pl-smi"&gt;success&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt;
        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; handle transaction success&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; .&lt;span class="pl-c1"&gt;failure&lt;/span&gt;(error)&lt;span class="pl-k"&gt;:&lt;/span&gt;
        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; handle transaction error&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    }
})&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;asyncWrite&lt;/code&gt; accepts two function arguments. The first one executes your database updates. The second one is a completion function which accepts a database connection and the result of the asynchronous transaction.&lt;/p&gt;
&lt;p&gt;On the first unhandled error during database updates, all changes are reverted, the whole transaction is rollbacked, and the error is passed to the completion function.&lt;/p&gt;
&lt;p&gt;When the transaction completes successfully, the result of the first function is contained in the standard &lt;code&gt;Result&lt;/code&gt; passed to the completion function:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;writer.&lt;span class="pl-c1"&gt;asyncWrite&lt;/span&gt;({ (&lt;span class="pl-c1"&gt;db&lt;/span&gt;: Database) &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;Int&lt;/span&gt; &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;Player&lt;/span&gt;(&lt;span class="pl-k"&gt;...&lt;/span&gt;).&lt;span class="pl-c1"&gt;insert&lt;/span&gt;(db)
    &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Player.&lt;span class="pl-c1"&gt;fetchCount&lt;/span&gt;(db)
}, &lt;span class="pl-c1"&gt;completion&lt;/span&gt;: { (&lt;span class="pl-c1"&gt;db&lt;/span&gt;: Database, &lt;span class="pl-c1"&gt;result&lt;/span&gt;: Result&lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-c1"&gt;Int&lt;/span&gt;, &lt;span class="pl-c1"&gt;Error&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;) &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;switch&lt;/span&gt; result {
    &lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; .&lt;span class="pl-c1"&gt;success&lt;/span&gt;(newPlayerCount)&lt;span class="pl-k"&gt;:&lt;/span&gt;
        &lt;span class="pl-c1"&gt;print&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;new player count: &lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;newPlayerCount&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    &lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; .&lt;span class="pl-c1"&gt;failure&lt;/span&gt;(error)&lt;span class="pl-k"&gt;:&lt;/span&gt;
        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; handle transaction error&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    }
})&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The scheduled asynchronous transaction has to wait for any eventual concurrent database write to complete before it can start.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;g-emoji class="g-emoji" alias="point_up" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/261d.png"&gt;☝️&lt;/g-emoji&gt; &lt;strong&gt;Note&lt;/strong&gt;: because it uses the standard &lt;code&gt;Result&lt;/code&gt; type, &lt;code&gt;asyncWrite&lt;/code&gt; is only available with a Swift 5+ compiler, starting Xcode 10.2.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;&lt;a id="user-content-asyncwritewithouttransaction" class="anchor" aria-hidden="true" href="#asyncwritewithouttransaction"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;code&gt;asyncWriteWithoutTransaction&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;The &lt;code&gt;asyncWriteWithoutTransaction&lt;/code&gt; method can be used from any thread. It submits your database statements for asynchronous execution on a protected dispatch queue, outside of any transaction:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;writer.&lt;span class="pl-smi"&gt;asyncWriteWithoutTransaction&lt;/span&gt; { (&lt;span class="pl-c1"&gt;db&lt;/span&gt;: Database) &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;try&lt;/span&gt; {
        &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;Player&lt;/span&gt;(&lt;span class="pl-k"&gt;...&lt;/span&gt;).&lt;span class="pl-c1"&gt;insert&lt;/span&gt;(db)
    } &lt;span class="pl-k"&gt;catch&lt;/span&gt; {
        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; handle error&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Writing outside of any transaction is dangerous.&lt;/strong&gt; You should almost always prefer the &lt;code&gt;asyncWrite&lt;/code&gt; method described above. Please see &lt;a href="#transactions-and-savepoints"&gt;Transactions and Savepoints&lt;/a&gt; for more information.&lt;/p&gt;
&lt;p&gt;The scheduled asynchronous updates have to wait for any eventual concurrent database write to complete before they can start.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-asyncconcurrentread" class="anchor" aria-hidden="true" href="#asyncconcurrentread"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;code&gt;asyncConcurrentRead&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;The &lt;code&gt;asyncConcurrentRead&lt;/code&gt; method is available on database pools only. It is the asynchronous equivalent of the &lt;code&gt;concurrentRead&lt;/code&gt; described in the &lt;a href="#advanced-databasepool"&gt;Advanced DatabasePool&lt;/a&gt; chapter.&lt;/p&gt;
&lt;p&gt;It must be called from a writing dispatch queue, outside of any transaction. You'll get a fatal error otherwise.&lt;/p&gt;
&lt;p&gt;The closure argument is guaranteed to see the database in the last committed state at the moment this method is called. Eventual concurrent database updates are &lt;em&gt;not visible&lt;/em&gt; inside the block.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;asyncConcurrentRead&lt;/code&gt; blocks until it can guarantee its closure argument an isolated access to the last committed state of the database. It then asynchronously executes the closure.&lt;/p&gt;
&lt;p&gt;In the example below, the number of players is fetched concurrently with the player insertion. Yet the future is guaranteed to return zero:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; writer.&lt;span class="pl-smi"&gt;asyncWriteWithoutTransaction&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;do&lt;/span&gt; {
        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Delete all players&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;        &lt;span class="pl-k"&gt;try&lt;/span&gt; Player.&lt;span class="pl-c1"&gt;deleteAll&lt;/span&gt;()
        
        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; &amp;lt;- not in a transaction here&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Count players concurrently&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;        writer.&lt;span class="pl-smi"&gt;asyncConcurrentRead&lt;/span&gt; { (&lt;span class="pl-c1"&gt;result&lt;/span&gt;: Result&lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt;Database&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;) &lt;span class="pl-k"&gt;in&lt;/span&gt;
            &lt;span class="pl-k"&gt;try&lt;/span&gt; {
                &lt;span class="pl-k"&gt;let&lt;/span&gt; db &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; result.&lt;span class="pl-c1"&gt;get&lt;/span&gt;()
                &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Guaranteed to be zero&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;                &lt;span class="pl-k"&gt;let&lt;/span&gt; count &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Player.&lt;span class="pl-c1"&gt;fetchCount&lt;/span&gt;()
            } &lt;span class="pl-k"&gt;catch&lt;/span&gt; {
                &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; handle error&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;            }
        }
        
        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Insert a player&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;        &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;Player&lt;/span&gt;(&lt;span class="pl-k"&gt;...&lt;/span&gt;).&lt;span class="pl-c1"&gt;insert&lt;/span&gt;(db)
    } &lt;span class="pl-k"&gt;catch&lt;/span&gt; {
        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; handle error&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;g-emoji class="g-emoji" alias="point_up" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/261d.png"&gt;☝️&lt;/g-emoji&gt; &lt;strong&gt;Note&lt;/strong&gt;: because it uses the standard &lt;code&gt;Result&lt;/code&gt; type, &lt;code&gt;asyncWriteWithoutTransaction&lt;/code&gt; is only available with a Swift 5+ compiler, starting Xcode 10.2.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;&lt;a id="user-content-unsafe-concurrency-apis" class="anchor" aria-hidden="true" href="#unsafe-concurrency-apis"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Unsafe Concurrency APIs&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Database queues, pools, snapshots, as well as their common protocols &lt;code&gt;DatabaseReader&lt;/code&gt; and &lt;code&gt;DatabaseWriter&lt;/code&gt; provide &lt;em&gt;unsafe&lt;/em&gt; database access methods.&lt;/strong&gt; Unsafe APIs lift &lt;a href="#guarantees-and-rules"&gt;concurrency guarantees&lt;/a&gt;, and allow advanced yet unsafe patterns.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;unsafeRead&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;unsafeRead&lt;/code&gt; method is synchronous, and blocks the current thread until your database statements are executed in a protected dispatch queue. GRDB does just the bare minimum to provide a database connection that can read.&lt;/p&gt;
&lt;p&gt;When used on a database pool, reads are no longer isolated:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;dbPool.&lt;span class="pl-smi"&gt;unsafeRead&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Those two values may be different because some other thread&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; may have inserted or deleted a player between the two requests:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;let&lt;/span&gt; count1 &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Player.&lt;span class="pl-c1"&gt;fetchCount&lt;/span&gt;(db)
    &lt;span class="pl-k"&gt;let&lt;/span&gt; count2 &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Player.&lt;span class="pl-c1"&gt;fetchCount&lt;/span&gt;(db)
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When used on a database queue, the closure argument is allowed to write in the database.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;unsafeReentrantRead&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;unsafeReentrantRead&lt;/code&gt; behaves just as &lt;code&gt;unsafeRead&lt;/code&gt; (see above), and allows reentrant calls:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;dbPool.&lt;span class="pl-smi"&gt;read&lt;/span&gt; { db1 &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; No "Database methods are not reentrant" fatal error:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    dbPool.&lt;span class="pl-smi"&gt;unsafeReentrantRead&lt;/span&gt; { db2 &lt;span class="pl-k"&gt;in&lt;/span&gt;
        dbPool.&lt;span class="pl-smi"&gt;unsafeReentrantRead&lt;/span&gt; { db3 &lt;span class="pl-k"&gt;in&lt;/span&gt;
            &lt;span class="pl-k"&gt;...&lt;/span&gt;
        }
    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Reentrant database accesses make it very easy to break the second &lt;a href="#guarantees-and-rules"&gt;safety rule&lt;/a&gt;, which says: "group related statements within a single call to a DatabaseQueue or DatabasePool database access method.". Using a reentrant method is pretty much likely the sign of a wrong application architecture that needs refactoring.&lt;/p&gt;
&lt;p&gt;There is a single valid use case for reentrant methods, which is when you are unable to control database access scheduling.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;unsafeReentrantWrite&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;unsafeReentrantWrite&lt;/code&gt; method is synchronous, and blocks the current thread until your database statements are executed in a protected dispatch queue. Writes are serialized: eventual concurrent database updates are postponed until the block has executed.&lt;/p&gt;
&lt;p&gt;Reentrant calls are allowed:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;dbQueue.&lt;span class="pl-smi"&gt;write&lt;/span&gt; { db1 &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; No "Database methods are not reentrant" fatal error:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    dbQueue.&lt;span class="pl-smi"&gt;unsafeReentrantWrite&lt;/span&gt; { db2 &lt;span class="pl-k"&gt;in&lt;/span&gt;
        dbQueue.&lt;span class="pl-smi"&gt;unsafeReentrantWrite&lt;/span&gt; { db3 &lt;span class="pl-k"&gt;in&lt;/span&gt;
            &lt;span class="pl-k"&gt;...&lt;/span&gt;
        }
    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Reentrant database accesses make it very easy to break the second &lt;a href="#guarantees-and-rules"&gt;safety rule&lt;/a&gt;, which says: "group related statements within a single call to a DatabaseQueue or DatabasePool database access method.". Using a reentrant method is pretty much likely the sign of a wrong application architecture that needs refactoring.&lt;/p&gt;
&lt;p&gt;There is a single valid use case for reentrant methods, which is when you are unable to control database access scheduling.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-dealing-with-external-connections" class="anchor" aria-hidden="true" href="#dealing-with-external-connections"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Dealing with External Connections&lt;/h3&gt;
&lt;p&gt;The first rule of GRDB is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="#guarantees-and-rules"&gt;Rule 1&lt;/a&gt;&lt;/strong&gt;: Have a unique instance of DatabaseQueue or DatabasePool connected to any database file.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This means that dealing with external connections is not a focus of GRDB. &lt;a href="#guarantees-and-rules"&gt;Guarantees&lt;/a&gt; of GRDB may or may not hold as soon as some external connection modifies a database.&lt;/p&gt;
&lt;p&gt;If you absolutely need multiple connections, then:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Reconsider your position&lt;/li&gt;
&lt;li&gt;Read about &lt;a href="https://www.sqlite.org/isolation.html" rel="nofollow"&gt;isolation in SQLite&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Learn about &lt;a href="https://www.sqlite.org/lang_transaction.html" rel="nofollow"&gt;locks and transactions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Become a master of the &lt;a href="https://www.sqlite.org/wal.html" rel="nofollow"&gt;WAL mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Prepare to setup a &lt;a href="https://www.sqlite.org/c3ref/busy_handler.html" rel="nofollow"&gt;busy handler&lt;/a&gt; with &lt;a href="http://groue.github.io/GRDB.swift/docs/4.6/Structs/Configuration.html" rel="nofollow"&gt;Configuration.busyMode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/groue/GRDB.swift/issues"&gt;Ask questions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-performance" class="anchor" aria-hidden="true" href="#performance"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Performance&lt;/h2&gt;
&lt;p&gt;GRDB is a reasonably fast library, and can deliver quite efficient SQLite access. See &lt;a href="https://github.com/groue/GRDB.swift/wiki/Performance"&gt;Comparing the Performances of Swift SQLite libraries&lt;/a&gt; for an overview.&lt;/p&gt;
&lt;p&gt;You'll find below general advice when you do look after performance:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Focus&lt;/li&gt;
&lt;li&gt;Know your platform&lt;/li&gt;
&lt;li&gt;Use transactions&lt;/li&gt;
&lt;li&gt;Don't do useless work&lt;/li&gt;
&lt;li&gt;Learn about SQL strengths and weaknesses&lt;/li&gt;
&lt;li&gt;Avoid strings &amp;amp; dictionaries&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-performance-tip-focus" class="anchor" aria-hidden="true" href="#performance-tip-focus"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Performance tip: focus&lt;/h3&gt;
&lt;p&gt;You don't know which part of your program needs improvement until you have run a benchmarking tool.&lt;/p&gt;
&lt;p&gt;Don't make any assumption, avoid optimizing code too early, and use &lt;a href="https://developer.apple.com/library/ios/documentation/ToolsLanguages/Conceptual/Xcode_Overview/MeasuringPerformance.html" rel="nofollow"&gt;Instruments&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-performance-tip-know-your-platform" class="anchor" aria-hidden="true" href="#performance-tip-know-your-platform"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Performance tip: know your platform&lt;/h3&gt;
&lt;p&gt;If your application processes a huge JSON file and inserts thousands of rows in the database right from the main thread, it will quite likely become unresponsive, and provide a sub-quality user experience.&lt;/p&gt;
&lt;p&gt;If not done yet, read the &lt;a href="https://developer.apple.com/library/ios/documentation/General/Conceptual/ConcurrencyProgrammingGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40008091" rel="nofollow"&gt;Concurrency Programming Guide&lt;/a&gt; and learn how to perform heavy computations without blocking your application.&lt;/p&gt;
&lt;p&gt;Most GRBD APIs are &lt;a href="#database-connections"&gt;synchronous&lt;/a&gt;. Spawning them into parallel queues is as easy as:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;DispatchQueue.&lt;span class="pl-c1"&gt;global&lt;/span&gt;().&lt;span class="pl-smi"&gt;async&lt;/span&gt; { 
    dbQueue.&lt;span class="pl-smi"&gt;write&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Perform database work&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    }
    DispatchQueue.&lt;span class="pl-smi"&gt;main&lt;/span&gt;.&lt;span class="pl-smi"&gt;async&lt;/span&gt; { 
        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; update your user interface&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-performance-tip-use-transactions" class="anchor" aria-hidden="true" href="#performance-tip-use-transactions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Performance tip: use transactions&lt;/h3&gt;
&lt;p&gt;Performing multiple updates to the database is much faster when executed inside a &lt;a href="#transactions-and-savepoints"&gt;transaction&lt;/a&gt;. This is because a transaction allows SQLite to postpone writing changes to disk until the final commit:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Inefficient&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; dbQueue.&lt;span class="pl-smi"&gt;inDatabase&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt; &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; or dbPool.writeWithoutTransaction&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;for&lt;/span&gt; player &lt;span class="pl-k"&gt;in&lt;/span&gt; players {
        &lt;span class="pl-k"&gt;try&lt;/span&gt; player.&lt;span class="pl-c1"&gt;insert&lt;/span&gt;(db)
    }
}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Efficient&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; dbQueue.&lt;span class="pl-smi"&gt;write&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;      &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; or dbPool.write&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;for&lt;/span&gt; player &lt;span class="pl-k"&gt;in&lt;/span&gt; players {
        &lt;span class="pl-k"&gt;try&lt;/span&gt; player.&lt;span class="pl-c1"&gt;insert&lt;/span&gt;(db)
    }
}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Efficient&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; dbQueue.&lt;span class="pl-smi"&gt;inTransaction&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt; &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; or dbPool.writeInTransaction&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;for&lt;/span&gt; player &lt;span class="pl-k"&gt;in&lt;/span&gt; players {
        &lt;span class="pl-k"&gt;try&lt;/span&gt; player.&lt;span class="pl-c1"&gt;insert&lt;/span&gt;(db)
    }
    &lt;span class="pl-k"&gt;return&lt;/span&gt; .&lt;span class="pl-smi"&gt;commit&lt;/span&gt;
}&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-performance-tip-dont-do-useless-work" class="anchor" aria-hidden="true" href="#performance-tip-dont-do-useless-work"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Performance tip: don't do useless work&lt;/h3&gt;
&lt;p&gt;Obviously, no code is faster than any code.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Don't fetch columns you don't use&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; SELECT * FROM player&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; Player.&lt;span class="pl-c1"&gt;fetchAll&lt;/span&gt;(db)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; SELECT id, name FROM player&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; Player.&lt;span class="pl-c1"&gt;select&lt;/span&gt;(idColumn, nameColumn).&lt;span class="pl-c1"&gt;fetchAll&lt;/span&gt;(db)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If your Player type can't be built without other columns (it has non-optional properties for other columns), &lt;em&gt;do define and use a different type&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;See &lt;a href="#columns-selected-by-a-request"&gt;Columns Selected by a Request&lt;/a&gt; for more information.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Don't fetch rows you don't use&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Use &lt;a href="#fetching-methods"&gt;fetchOne&lt;/a&gt; when you need a single value, and otherwise limit your queries at the database level:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Wrong way: this code may discard hundreds of useless database rows&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; players &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Player.&lt;span class="pl-c1"&gt;order&lt;/span&gt;(scoreColumn.&lt;span class="pl-smi"&gt;desc&lt;/span&gt;).&lt;span class="pl-c1"&gt;fetchAll&lt;/span&gt;(db)
&lt;span class="pl-k"&gt;let&lt;/span&gt; hallOfFame &lt;span class="pl-k"&gt;=&lt;/span&gt; players.&lt;span class="pl-c1"&gt;prefix&lt;/span&gt;(&lt;span class="pl-c1"&gt;5&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Better way&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; hallOfFame &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Player.&lt;span class="pl-c1"&gt;order&lt;/span&gt;(scoreColumn.&lt;span class="pl-smi"&gt;desc&lt;/span&gt;).&lt;span class="pl-c1"&gt;limit&lt;/span&gt;(&lt;span class="pl-c1"&gt;5&lt;/span&gt;).&lt;span class="pl-c1"&gt;fetchAll&lt;/span&gt;(db)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Don't copy values unless necessary&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Particularly: the Array returned by the &lt;code&gt;fetchAll&lt;/code&gt; method, and the cursor returned by &lt;code&gt;fetchCursor&lt;/code&gt; aren't the same:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;fetchAll&lt;/code&gt; copies all values from the database into memory, when &lt;code&gt;fetchCursor&lt;/code&gt; iterates database results as they are generated by SQLite, taking profit from SQLite efficiency.&lt;/p&gt;
&lt;p&gt;You should only load arrays if you need to keep them for later use (such as iterating their contents in the main thread). Otherwise, use &lt;code&gt;fetchCursor&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;See &lt;a href="#fetching-methods"&gt;fetching methods&lt;/a&gt; for more information about &lt;code&gt;fetchAll&lt;/code&gt; and &lt;code&gt;fetchCursor&lt;/code&gt;. See also the &lt;a href="#data-and-memory-savings"&gt;Row.dataNoCopy&lt;/a&gt; method.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Don't update rows unless necessary&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;An UPDATE statement is costly: SQLite has to look for the updated row, update values, and write changes to disk.&lt;/p&gt;
&lt;p&gt;When the overwritten values are the same as the existing ones, it's thus better to avoid performing the UPDATE statement:.&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;if&lt;/span&gt; player.&lt;span class="pl-smi"&gt;hasDatabaseChanges&lt;/span&gt; {
    &lt;span class="pl-k"&gt;try&lt;/span&gt; player.&lt;span class="pl-c1"&gt;update&lt;/span&gt;(db)
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;See &lt;a href="#record-comparison"&gt;Record Comparison&lt;/a&gt; for more information.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-performance-tip-learn-about-sql-strengths-and-weaknesses" class="anchor" aria-hidden="true" href="#performance-tip-learn-about-sql-strengths-and-weaknesses"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Performance tip: learn about SQL strengths and weaknesses&lt;/h3&gt;
&lt;p&gt;Consider a simple use case: your store application has to display a list of authors with the number of available books:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;J. M. Coetzee (6)&lt;/li&gt;
&lt;li&gt;Herman Melville (1)&lt;/li&gt;
&lt;li&gt;Alice Munro (3)&lt;/li&gt;
&lt;li&gt;Kim Stanley Robinson (7)&lt;/li&gt;
&lt;li&gt;Oliver Sacks (4)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The following code is inefficient. It is an example of the &lt;a href="http://stackoverflow.com/questions/97197/what-is-the-n1-selects-issue" rel="nofollow"&gt;N+1 problem&lt;/a&gt;, because it performs one query to load the authors, and then N queries, as many as there are authors. This turns very inefficient as the number of authors grows:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; SELECT * FROM author&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; authors &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Author.&lt;span class="pl-c1"&gt;fetchAll&lt;/span&gt;(db)
&lt;span class="pl-k"&gt;for&lt;/span&gt; author &lt;span class="pl-k"&gt;in&lt;/span&gt; authors {
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; SELECT COUNT(*) FROM book WHERE authorId = ...&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    author.&lt;span class="pl-smi"&gt;bookCount&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Book.&lt;span class="pl-c1"&gt;filter&lt;/span&gt;(authorIdColumn &lt;span class="pl-k"&gt;==&lt;/span&gt; author.&lt;span class="pl-smi"&gt;id&lt;/span&gt;).&lt;span class="pl-c1"&gt;fetchCount&lt;/span&gt;(db)
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Instead, perform &lt;em&gt;a single query&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; sql &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"""&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-s"&gt;    SELECT author.*, COUNT(book.id) AS bookCount&lt;/span&gt;
&lt;span class="pl-s"&gt;    FROM author&lt;/span&gt;
&lt;span class="pl-s"&gt;    LEFT JOIN book ON book.authorId = author.id&lt;/span&gt;
&lt;span class="pl-s"&gt;    GROUP BY author.id&lt;/span&gt;
&lt;span class="pl-s"&gt;    &lt;span class="pl-pds"&gt;"""&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;let&lt;/span&gt; authors &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Author.&lt;span class="pl-c1"&gt;fetchAll&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;sql&lt;/span&gt;: sql)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the example above, consider extending your Author with an extra bookCount property, or define and use a different type.&lt;/p&gt;
&lt;p&gt;Generally, define indexes on your database tables, and use SQLite's efficient query planning:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.sqlite.org/queryplanner.html" rel="nofollow"&gt;Query Planning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.sqlite.org/lang_createindex.html" rel="nofollow"&gt;CREATE INDEX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.sqlite.org/optoverview.html" rel="nofollow"&gt;The SQLite Query Planner&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.sqlite.org/eqp.html" rel="nofollow"&gt;EXPLAIN QUERY PLAN&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-performance-tip-avoid-strings--dictionaries" class="anchor" aria-hidden="true" href="#performance-tip-avoid-strings--dictionaries"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Performance tip: avoid strings &amp;amp; dictionaries&lt;/h3&gt;
&lt;p&gt;The String and Dictionary Swift types are better avoided when you look for the best performance.&lt;/p&gt;
&lt;p&gt;Now GRDB &lt;a href="#records"&gt;records&lt;/a&gt;, for your convenience, do use strings and dictionaries:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;Player&lt;/span&gt; : &lt;span class="pl-e"&gt;Record &lt;/span&gt;{
    &lt;span class="pl-k"&gt;var&lt;/span&gt; id&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;Int64&lt;/span&gt;&lt;span class="pl-k"&gt;?&lt;/span&gt;
    &lt;span class="pl-k"&gt;var&lt;/span&gt; name&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;String&lt;/span&gt;
    &lt;span class="pl-k"&gt;var&lt;/span&gt; email&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;String&lt;/span&gt;
    
    &lt;span class="pl-k"&gt;required&lt;/span&gt; &lt;span class="pl-k"&gt;init&lt;/span&gt;(&lt;span class="pl-en"&gt;_&lt;/span&gt; &lt;span class="pl-smi"&gt;row&lt;/span&gt;: Row) {
        id &lt;span class="pl-k"&gt;=&lt;/span&gt; row[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;id&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]       &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; String&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;        name &lt;span class="pl-k"&gt;=&lt;/span&gt; row[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;name&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]   &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; String&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;        email &lt;span class="pl-k"&gt;=&lt;/span&gt; row[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;email&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;] &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; String&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;        &lt;span class="pl-c1"&gt;super&lt;/span&gt;.&lt;span class="pl-k"&gt;init&lt;/span&gt;()
    }
    
    &lt;span class="pl-k"&gt;override&lt;/span&gt; &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;encode&lt;/span&gt;(&lt;span class="pl-en"&gt;to&lt;/span&gt; &lt;span class="pl-smi"&gt;container&lt;/span&gt;: &lt;span class="pl-k"&gt;inout&lt;/span&gt; PersistenceContainer) {
        container[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;id&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;] &lt;span class="pl-k"&gt;=&lt;/span&gt; id              &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; String&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;        container[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;name&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;] &lt;span class="pl-k"&gt;=&lt;/span&gt; name          &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; String&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;        container[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;email&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;] &lt;span class="pl-k"&gt;=&lt;/span&gt; email        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; String&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When convenience hurts performance, you can still use records, but you have better avoiding their string and dictionary-based methods.&lt;/p&gt;
&lt;p&gt;For example, when fetching values, prefer loading columns by index:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Strings &amp;amp; dictionaries&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; players &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Player.&lt;span class="pl-c1"&gt;fetchAll&lt;/span&gt;(db)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Column indexes&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; SELECT id, name, email FROM player&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; request &lt;span class="pl-k"&gt;=&lt;/span&gt; Player.&lt;span class="pl-c1"&gt;select&lt;/span&gt;(idColumn, nameColumn, emailColumn)
&lt;span class="pl-k"&gt;let&lt;/span&gt; rows &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Row.&lt;span class="pl-c1"&gt;fetchCursor&lt;/span&gt;(db, request)
&lt;span class="pl-k"&gt;while&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; row &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; rows.&lt;span class="pl-c1"&gt;next&lt;/span&gt;() {
    &lt;span class="pl-k"&gt;let&lt;/span&gt; id&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;Int64&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; row[&lt;span class="pl-c1"&gt;0&lt;/span&gt;]
    &lt;span class="pl-k"&gt;let&lt;/span&gt; name&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;String&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; row[&lt;span class="pl-c1"&gt;1&lt;/span&gt;]
    &lt;span class="pl-k"&gt;let&lt;/span&gt; email&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;String&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; row[&lt;span class="pl-c1"&gt;2&lt;/span&gt;]
    &lt;span class="pl-k"&gt;let&lt;/span&gt; player &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;Player&lt;/span&gt;(&lt;span class="pl-c1"&gt;id&lt;/span&gt;: id, &lt;span class="pl-c1"&gt;name&lt;/span&gt;: name, &lt;span class="pl-c1"&gt;email&lt;/span&gt;: email)
    &lt;span class="pl-k"&gt;...&lt;/span&gt;
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When inserting values, use reusable &lt;a href="#prepared-statements"&gt;prepared statements&lt;/a&gt;, and set statements values with an &lt;em&gt;array&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Strings &amp;amp; dictionaries&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;for&lt;/span&gt; player &lt;span class="pl-k"&gt;in&lt;/span&gt; players {
    &lt;span class="pl-k"&gt;try&lt;/span&gt; player.&lt;span class="pl-c1"&gt;insert&lt;/span&gt;(db)
}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Prepared statement&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; insertStatement &lt;span class="pl-k"&gt;=&lt;/span&gt; db.&lt;span class="pl-c1"&gt;prepareStatement&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;INSERT INTO player (name, email) VALUES (?, ?)&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-k"&gt;for&lt;/span&gt; player &lt;span class="pl-k"&gt;in&lt;/span&gt; players {
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Only use the unsafe arguments setter if you are sure that you provide&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; all statement arguments. A mistake can store unexpected values in&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; the database.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    insertStatement.&lt;span class="pl-c1"&gt;unsafeSetArguments&lt;/span&gt;([player.&lt;span class="pl-smi"&gt;name&lt;/span&gt;, player.&lt;span class="pl-smi"&gt;email&lt;/span&gt;])
    &lt;span class="pl-k"&gt;try&lt;/span&gt; insertStatement.&lt;span class="pl-c1"&gt;execute&lt;/span&gt;()
}&lt;/pre&gt;&lt;/div&gt;
&lt;h1&gt;&lt;a id="user-content-faq" class="anchor" aria-hidden="true" href="#faq"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;FAQ&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#how-do-i-create-a-database-in-my-application"&gt;How do I create a database in my application?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#how-do-i-open-a-database-stored-as-a-resource-of-my-application"&gt;How do I open a database stored as a resource of my application?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#how-do-i-close-a-database-connection"&gt;How do I close a database connection?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#how-do-i-print-a-request-as-sql"&gt;How do I print a request as SQL?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#generic-parameter-t-could-not-be-inferred"&gt;Generic parameter 'T' could not be inferred&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sqlite-error-10-disk-io-error-sqlite-error-23-not-authorized"&gt;SQLite error 10 "disk I/O error", SQLite error 23 "not authorized"&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sqlite-error-21-wrong-number-of-statement-arguments-with-like-queries"&gt;SQLite error 21 "wrong number of statement arguments" with LIKE queries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#what-are-experimental-features"&gt;What Are Experimental Features?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-how-do-i-create-a-database-in-my-application" class="anchor" aria-hidden="true" href="#how-do-i-create-a-database-in-my-application"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;How do I create a database in my application?&lt;/h3&gt;
&lt;p&gt;This question assumes that your application has to create a new database from scratch. If your app has to open an existing database that is embedded inside your application as a resource, see &lt;a href="#how-do-i-open-a-database-stored-as-a-resource-of-my-application"&gt;How do I open a database stored as a resource of my application?&lt;/a&gt; instead.&lt;/p&gt;
&lt;p&gt;The database has to be stored in a valid place where it can be created and modified. For example, in the &lt;a href="https://developer.apple.com/library/content/documentation/FileManagement/Conceptual/FileSystemProgrammingGuide/FileSystemOverview/FileSystemOverview.html" rel="nofollow"&gt;Application Support directory&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; databaseURL &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; FileManager.&lt;span class="pl-smi"&gt;default&lt;/span&gt;
    .&lt;span class="pl-c1"&gt;url&lt;/span&gt;(&lt;span class="pl-c1"&gt;for&lt;/span&gt;: .&lt;span class="pl-smi"&gt;applicationSupportDirectory&lt;/span&gt;, &lt;span class="pl-c1"&gt;in&lt;/span&gt;: .&lt;span class="pl-smi"&gt;userDomainMask&lt;/span&gt;, &lt;span class="pl-c1"&gt;appropriateFor&lt;/span&gt;: &lt;span class="pl-c1"&gt;nil&lt;/span&gt;, &lt;span class="pl-c1"&gt;create&lt;/span&gt;: &lt;span class="pl-c1"&gt;true&lt;/span&gt;)
    .&lt;span class="pl-c1"&gt;appendingPathComponent&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;db.sqlite&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-k"&gt;let&lt;/span&gt; dbQueue &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;DatabaseQueue&lt;/span&gt;(&lt;span class="pl-c1"&gt;path&lt;/span&gt;: databaseURL.&lt;span class="pl-smi"&gt;path&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-how-do-i-open-a-database-stored-as-a-resource-of-my-application" class="anchor" aria-hidden="true" href="#how-do-i-open-a-database-stored-as-a-resource-of-my-application"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;How do I open a database stored as a resource of my application?&lt;/h3&gt;
&lt;p&gt;If your application does not need to modify the database, open a read-only &lt;a href="#database-connections"&gt;connection&lt;/a&gt; to your resource:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;var&lt;/span&gt; config &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;Configuration&lt;/span&gt;()
config.&lt;span class="pl-smi"&gt;readonly&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;
&lt;span class="pl-k"&gt;let&lt;/span&gt; dbPath &lt;span class="pl-k"&gt;=&lt;/span&gt; Bundle.&lt;span class="pl-smi"&gt;main&lt;/span&gt;.&lt;span class="pl-c1"&gt;path&lt;/span&gt;(&lt;span class="pl-c1"&gt;forResource&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;db&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;ofType&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;sqlite&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;span class="pl-k"&gt;!&lt;/span&gt;
&lt;span class="pl-k"&gt;let&lt;/span&gt; dbQueue &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;DatabaseQueue&lt;/span&gt;(&lt;span class="pl-c1"&gt;path&lt;/span&gt;: dbPath, &lt;span class="pl-c1"&gt;configuration&lt;/span&gt;: config)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If the application should modify the database, you need to copy it to a place where it can be modified. For example, in the &lt;a href="https://developer.apple.com/library/content/documentation/FileManagement/Conceptual/FileSystemProgrammingGuide/FileSystemOverview/FileSystemOverview.html" rel="nofollow"&gt;Application Support directory&lt;/a&gt;. Only then, open a &lt;a href="#database-connections"&gt;connection&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; fileManager &lt;span class="pl-k"&gt;=&lt;/span&gt; FileManager.&lt;span class="pl-smi"&gt;default&lt;/span&gt;
&lt;span class="pl-k"&gt;let&lt;/span&gt; dbPath &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; fileManager
    .&lt;span class="pl-c1"&gt;url&lt;/span&gt;(&lt;span class="pl-c1"&gt;for&lt;/span&gt;: .&lt;span class="pl-smi"&gt;applicationSupportDirectory&lt;/span&gt;, &lt;span class="pl-c1"&gt;in&lt;/span&gt;: .&lt;span class="pl-smi"&gt;userDomainMask&lt;/span&gt;, &lt;span class="pl-c1"&gt;appropriateFor&lt;/span&gt;: &lt;span class="pl-c1"&gt;nil&lt;/span&gt;, &lt;span class="pl-c1"&gt;create&lt;/span&gt;: &lt;span class="pl-c1"&gt;true&lt;/span&gt;)
    .&lt;span class="pl-c1"&gt;appendingPathComponent&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;db.sqlite&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    .&lt;span class="pl-smi"&gt;path&lt;/span&gt;
&lt;span class="pl-k"&gt;if&lt;/span&gt; &lt;span class="pl-k"&gt;!&lt;/span&gt;fileManager.&lt;span class="pl-c1"&gt;fileExists&lt;/span&gt;(&lt;span class="pl-c1"&gt;atPath&lt;/span&gt;: dbPath) {
    &lt;span class="pl-k"&gt;let&lt;/span&gt; dbResourcePath &lt;span class="pl-k"&gt;=&lt;/span&gt; Bundle.&lt;span class="pl-smi"&gt;main&lt;/span&gt;.&lt;span class="pl-c1"&gt;path&lt;/span&gt;(&lt;span class="pl-c1"&gt;forResource&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;db&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;ofType&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;sqlite&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;span class="pl-k"&gt;!&lt;/span&gt;
    &lt;span class="pl-k"&gt;try&lt;/span&gt; fileManager.&lt;span class="pl-c1"&gt;copyItem&lt;/span&gt;(&lt;span class="pl-c1"&gt;atPath&lt;/span&gt;: dbResourcePath, &lt;span class="pl-c1"&gt;toPath&lt;/span&gt;: dbPath)
}
&lt;span class="pl-k"&gt;let&lt;/span&gt; dbQueue &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;DatabaseQueue&lt;/span&gt;(&lt;span class="pl-c1"&gt;path&lt;/span&gt;: dbPath)&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-how-do-i-close-a-database-connection" class="anchor" aria-hidden="true" href="#how-do-i-close-a-database-connection"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;How do I close a database connection?&lt;/h3&gt;
&lt;p&gt;Database connections are managed by &lt;a href="#database-queues"&gt;database queues&lt;/a&gt; and &lt;a href="#database-pools"&gt;pools&lt;/a&gt;. A connection is closed when its database queue or pool is deallocated, and all usages of this connection are completed.&lt;/p&gt;
&lt;p&gt;Database accesses that run in background threads postpone the closing of connections.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-how-do-i-print-a-request-as-sql" class="anchor" aria-hidden="true" href="#how-do-i-print-a-request-as-sql"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;How do I print a request as SQL?&lt;/h3&gt;
&lt;p&gt;When you want to debug a request that does not deliver the expected results, you may want to print the SQL that is actually executed.&lt;/p&gt;
&lt;p&gt;You can turn your request into a &lt;code&gt;SQLRequest&lt;/code&gt; instance:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;try&lt;/span&gt; dbQueue.&lt;span class="pl-smi"&gt;read&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;let&lt;/span&gt; request &lt;span class="pl-k"&gt;=&lt;/span&gt; Wine
        .&lt;span class="pl-c1"&gt;filter&lt;/span&gt;(originColumn &lt;span class="pl-k"&gt;==&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Burgundy&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
        .&lt;span class="pl-c1"&gt;order&lt;/span&gt;(priceColumn)
    
    &lt;span class="pl-k"&gt;let&lt;/span&gt; sqlRequest &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;SQLRequest&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;request&lt;/span&gt;: request)
    &lt;span class="pl-c1"&gt;print&lt;/span&gt;(sqlRequest.&lt;span class="pl-smi"&gt;sql&lt;/span&gt;)
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Prints SELECT * FROM wine WHERE origin = ? ORDER BY price&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-c1"&gt;print&lt;/span&gt;(sqlRequest.&lt;span class="pl-smi"&gt;arguments&lt;/span&gt;)
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Prints ["Burgundy"]&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Another option is to setup a tracing function that will print out all SQL requests executed by your application. You provide the trace function when you connect to the database:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;var&lt;/span&gt; config &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;Configuration&lt;/span&gt;()
config.&lt;span class="pl-smi"&gt;trace&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; { &lt;span class="pl-c1"&gt;print&lt;/span&gt;(&lt;span class="pl-c1"&gt;$0&lt;/span&gt;) } &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Prints all SQL statements&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; dbQueue &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;DatabaseQueue&lt;/span&gt;(&lt;span class="pl-c1"&gt;path&lt;/span&gt;: dbPath, &lt;span class="pl-c1"&gt;configuration&lt;/span&gt;: config)

&lt;span class="pl-k"&gt;try&lt;/span&gt; dbQueue.&lt;span class="pl-smi"&gt;read&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;let&lt;/span&gt; wines &lt;span class="pl-k"&gt;=&lt;/span&gt; Wine
        .&lt;span class="pl-c1"&gt;filter&lt;/span&gt;(originColumn &lt;span class="pl-k"&gt;==&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Burgundy&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
        .&lt;span class="pl-c1"&gt;order&lt;/span&gt;(priceColumn)
        .&lt;span class="pl-c1"&gt;fetchAll&lt;/span&gt;(db)
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Prints SELECT * FROM wine WHERE origin = 'Burgundy' ORDER BY price&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;}&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;g-emoji class="g-emoji" alias="point_up" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/261d.png"&gt;☝️&lt;/g-emoji&gt; &lt;strong&gt;Note&lt;/strong&gt;: the generated SQL may change between GRDB releases, without notice: don't have your application rely on any specific SQL output.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;&lt;a id="user-content-generic-parameter-t-could-not-be-inferred" class="anchor" aria-hidden="true" href="#generic-parameter-t-could-not-be-inferred"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Generic parameter 'T' could not be inferred&lt;/h3&gt;
&lt;p&gt;You may get this error when using the &lt;code&gt;read&lt;/code&gt; and &lt;code&gt;write&lt;/code&gt; methods of database queues and pools:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Generic parameter 'T' could not be inferred&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; string &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; dbQueue.&lt;span class="pl-smi"&gt;read&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;let&lt;/span&gt; result &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;String&lt;/span&gt;.&lt;span class="pl-c1"&gt;fetchOne&lt;/span&gt;(db, &lt;span class="pl-k"&gt;...&lt;/span&gt;)
    &lt;span class="pl-k"&gt;return&lt;/span&gt; result
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is a limitation of the Swift compiler.&lt;/p&gt;
&lt;p&gt;The general workaround is to explicitly declare the type of the closure result:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; General Workaround&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; string &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; dbQueue.&lt;span class="pl-smi"&gt;read&lt;/span&gt; { db &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;String&lt;/span&gt;&lt;span class="pl-k"&gt;?&lt;/span&gt; &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;let&lt;/span&gt; result &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;String&lt;/span&gt;.&lt;span class="pl-c1"&gt;fetchOne&lt;/span&gt;(db, &lt;span class="pl-k"&gt;...&lt;/span&gt;)
    &lt;span class="pl-k"&gt;return&lt;/span&gt; result
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can also, when possible, write a single-line closure:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Single-line closure workaround:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; string &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; dbQueue.&lt;span class="pl-smi"&gt;read&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;String&lt;/span&gt;.&lt;span class="pl-c1"&gt;fetchOne&lt;/span&gt;(db, &lt;span class="pl-k"&gt;...&lt;/span&gt;)
}&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-sqlite-error-10-disk-io-error-sqlite-error-23-not-authorized" class="anchor" aria-hidden="true" href="#sqlite-error-10-disk-io-error-sqlite-error-23-not-authorized"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;SQLite error 10 "disk I/O error", SQLite error 23 "not authorized"&lt;/h3&gt;
&lt;p&gt;Those errors may be the sign that SQLite can't access the database due to &lt;a href="#data-protection"&gt;data protection&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;When your application should be able to run in the background on a locked device, it has to catch this error, and, for example, wait for &lt;a href="https://developer.apple.com/reference/uikit/uiapplicationdelegate/1623044-applicationprotecteddatadidbecom" rel="nofollow"&gt;UIApplicationDelegate.applicationProtectedDataDidBecomeAvailable(_:)&lt;/a&gt; or &lt;a href="https://developer.apple.com/reference/uikit/uiapplicationprotecteddatadidbecomeavailable" rel="nofollow"&gt;UIApplicationProtectedDataDidBecomeAvailable&lt;/a&gt; notification and retry the failed database operation.&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;do&lt;/span&gt; {
    &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-k"&gt;...&lt;/span&gt;
} &lt;span class="pl-k"&gt;catch&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; error &lt;span class="pl-k"&gt;as&lt;/span&gt; DatabaseError &lt;span class="pl-k"&gt;where&lt;/span&gt;
    error.&lt;span class="pl-smi"&gt;resultCode&lt;/span&gt; &lt;span class="pl-k"&gt;==&lt;/span&gt; .&lt;span class="pl-smi"&gt;SQLITE_IOERR&lt;/span&gt; &lt;span class="pl-k"&gt;||&lt;/span&gt;
    error.&lt;span class="pl-smi"&gt;resultCode&lt;/span&gt; &lt;span class="pl-k"&gt;==&lt;/span&gt; .&lt;span class="pl-smi"&gt;SQLITE_AUTH&lt;/span&gt;
{
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Handle possible data protection error&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This error can also be prevented altogether by using a more relaxed &lt;a href="https://developer.apple.com/reference/foundation/filemanager/1653059-file_protection_values" rel="nofollow"&gt;file protection&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-sqlite-error-21-wrong-number-of-statement-arguments-with-like-queries" class="anchor" aria-hidden="true" href="#sqlite-error-21-wrong-number-of-statement-arguments-with-like-queries"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;SQLite error 21 "wrong number of statement arguments" with LIKE queries&lt;/h3&gt;
&lt;p&gt;You may get the error "wrong number of statement arguments" when executing a LIKE query similar to:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; name &lt;span class="pl-k"&gt;=&lt;/span&gt; textField.&lt;span class="pl-c1"&gt;text&lt;/span&gt;
&lt;span class="pl-k"&gt;let&lt;/span&gt; players &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; dbQueue.&lt;span class="pl-smi"&gt;read&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;try&lt;/span&gt; Player.&lt;span class="pl-c1"&gt;fetchAll&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SELECT * FROM player WHERE name LIKE '%?%'&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;arguments&lt;/span&gt;: [name])
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The problem lies in the &lt;code&gt;'%?%'&lt;/code&gt; pattern.&lt;/p&gt;
&lt;p&gt;SQLite only interprets &lt;code&gt;?&lt;/code&gt; as a parameter when it is a placeholder for a whole value (int, double, string, blob, null). In this incorrect query, &lt;code&gt;?&lt;/code&gt; is just a character in the &lt;code&gt;'%?%'&lt;/code&gt; string: it is not a query parameter, and is not processed in any way. See &lt;a href="https://www.sqlite.org/lang_expr.html#varparam" rel="nofollow"&gt;https://www.sqlite.org/lang_expr.html#varparam&lt;/a&gt; for more information about SQLite parameters.&lt;/p&gt;
&lt;p&gt;To fix the error, you can feed the request with the pattern itself, instead of the name:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; name &lt;span class="pl-k"&gt;=&lt;/span&gt; textField.&lt;span class="pl-c1"&gt;text&lt;/span&gt;
&lt;span class="pl-k"&gt;let&lt;/span&gt; players&lt;span class="pl-k"&gt;:&lt;/span&gt; [Player] &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; dbQueue.&lt;span class="pl-smi"&gt;read&lt;/span&gt; { db &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;let&lt;/span&gt; pattern &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;%&lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;name&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;%&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
    &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; Player.&lt;span class="pl-c1"&gt;fetchAll&lt;/span&gt;(db, &lt;span class="pl-c1"&gt;sql&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SELECT * FROM player WHERE name LIKE ?&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;arguments&lt;/span&gt;: [pattern])
}&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-what-are-experimental-features" class="anchor" aria-hidden="true" href="#what-are-experimental-features"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;What Are Experimental Features?&lt;/h3&gt;
&lt;p&gt;Since GRDB 1.0, all backwards compatibility guarantees of &lt;a href="http://semver.org" rel="nofollow"&gt;semantic versioning&lt;/a&gt; apply: no breaking change will happen until the next major version of the library.&lt;/p&gt;
&lt;p&gt;There is an exception, though: &lt;em&gt;experimental features&lt;/em&gt;, marked with the "&lt;strong&gt;&lt;g-emoji class="g-emoji" alias="fire" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f525.png"&gt;🔥&lt;/g-emoji&gt; EXPERIMENTAL&lt;/strong&gt;" badge. Those are advanced features that are too young, or lack user feedback. They are not stabilized yet.&lt;/p&gt;
&lt;p&gt;Those experimental features are not protected by semantic versioning, and may break between two minor releases of the library. To help them becoming stable, &lt;a href="https://github.com/groue/GRDB.swift/issues"&gt;your feedback&lt;/a&gt; is greatly appreciated.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-sample-code" class="anchor" aria-hidden="true" href="#sample-code"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Sample Code&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;a href="#documentation"&gt;Documentation&lt;/a&gt; is full of GRDB snippets.&lt;/li&gt;
&lt;li&gt;&lt;a href="Documentation/DemoApps/GRDBDemoiOS/README.md"&gt;Demo Application&lt;/a&gt;: A sample iOS application.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/groue/WWDCCompanion"&gt;WWDC Companion&lt;/a&gt;: A sample iOS application.&lt;/li&gt;
&lt;li&gt;Check &lt;code&gt;GRDB.xcworkspace&lt;/code&gt;: it contains GRDB-enabled playgrounds to play with.&lt;/li&gt;
&lt;li&gt;How to synchronize a database table with a JSON payload: &lt;a href="Documentation/Playgrounds/JSONSynchronization.playground/Contents.swift"&gt;JSONSynchronization.playground&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Thanks&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://pierlis.com" rel="nofollow"&gt;Pierlis&lt;/a&gt;, where we write great software.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/alextrob"&gt;@alextrob&lt;/a&gt;, &lt;a href="https://github.com/bellebethcooper"&gt;@bellebethcooper&lt;/a&gt;, &lt;a href="https://github.com/bfad"&gt;@bfad&lt;/a&gt;, &lt;a href="https://github.com/cfilipov"&gt;@cfilipov&lt;/a&gt;, &lt;a href="https://github.com/charlesmchen-signal"&gt;@charlesmchen-signal&lt;/a&gt;, &lt;a href="https://github.com/Chiliec"&gt;@Chiliec&lt;/a&gt;, &lt;a href="https://github.com/chrisballinger"&gt;@chrisballinger&lt;/a&gt;, &lt;a href="https://github.com/darrenclark"&gt;@darrenclark&lt;/a&gt;, &lt;a href="https://github.com/davidkraus"&gt;@davidkraus&lt;/a&gt;, &lt;a href="http://github.com/fpillet"&gt;@fpillet&lt;/a&gt;, &lt;a href="https://github.com/gusrota"&gt;@gusrota&lt;/a&gt;, &lt;a href="https://github.com/hartbit"&gt;@hartbit&lt;/a&gt;, &lt;a href="https://github.com/kdubb"&gt;@kdubb&lt;/a&gt;, &lt;a href="https://github.com/kluufger"&gt;@kluufger&lt;/a&gt;, &lt;a href="https://github.com/KyleLeneau"&gt;@KyleLeneau&lt;/a&gt;, &lt;a href="https://github.com/Marus"&gt;@Marus&lt;/a&gt;, &lt;a href="https://github.com/michaelkirk-signal"&gt;@michaelkirk-signal&lt;/a&gt;, &lt;a href="https://github.com/pakko972"&gt;@pakko972&lt;/a&gt;, &lt;a href="https://github.com/peter-ss"&gt;@peter-ss&lt;/a&gt;, &lt;a href="https://github.com/pierlo"&gt;@pierlo&lt;/a&gt;, &lt;a href="https://github.com/pocketpixels"&gt;@pocketpixels&lt;/a&gt;, &lt;a href="https://github.com/robcas3"&gt;@robcas3&lt;/a&gt;, &lt;a href="https://github.com/runhum"&gt;@runhum&lt;/a&gt;, &lt;a href="https://github.com/schveiguy"&gt;@schveiguy&lt;/a&gt;, &lt;a href="https://github.com/SD10"&gt;@SD10&lt;/a&gt;, &lt;a href="https://github.com/sobri909"&gt;@sobri909&lt;/a&gt;, &lt;a href="https://github.com/sroddy"&gt;@sroddy&lt;/a&gt;, &lt;a href="https://github.com/swiftlyfalling"&gt;@swiftlyfalling&lt;/a&gt;, &lt;a href="https://github.com/Timac"&gt;@Timac&lt;/a&gt;, &lt;a href="https://github.com/valexa"&gt;@valexa&lt;/a&gt;, and &lt;a href="https://github.com/zmeyc"&gt;@zmeyc&lt;/a&gt; for their contributions, help, and feedback on GRDB.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/aymerick"&gt;@aymerick&lt;/a&gt; and &lt;a href="https://github.com/kali"&gt;@kali&lt;/a&gt; because SQL.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ccgus/fmdb"&gt;ccgus/fmdb&lt;/a&gt; for its excellency.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href="https://www.w3.org/Provider/Style/URI" rel="nofollow"&gt;URIs don't change: people change them.&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-changes-tracking" class="anchor" aria-hidden="true" href="#changes-tracking"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Changes Tracking&lt;/h4&gt;
&lt;p&gt;This chapter has been renamed &lt;a href="#record-comparison"&gt;Record Comparison&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-fetchedrecordscontroller" class="anchor" aria-hidden="true" href="#fetchedrecordscontroller"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;FetchedRecordsController&lt;/h4&gt;
&lt;p&gt;This chapter has &lt;a href="Documentation/FetchedRecordsController.md"&gt;moved&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-persistable-protocol" class="anchor" aria-hidden="true" href="#persistable-protocol"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Persistable Protocol&lt;/h4&gt;
&lt;p&gt;This protocol has been renamed &lt;a href="#persistablerecord-protocol"&gt;PersistableRecord&lt;/a&gt; in GRDB 3.0.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-rowconvertible-protocol" class="anchor" aria-hidden="true" href="#rowconvertible-protocol"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;RowConvertible Protocol&lt;/h4&gt;
&lt;p&gt;This protocol has been renamed &lt;a href="#fetchablerecord-protocol"&gt;FetchableRecord&lt;/a&gt; in GRDB 3.0.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-tablemapping-protocol" class="anchor" aria-hidden="true" href="#tablemapping-protocol"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TableMapping Protocol&lt;/h4&gt;
&lt;p&gt;This protocol has been renamed &lt;a href="#tablerecord-protocol"&gt;TableRecord&lt;/a&gt; in GRDB 3.0.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-customized-decoding-of-database-rows" class="anchor" aria-hidden="true" href="#customized-decoding-of-database-rows"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Customized Decoding of Database Rows&lt;/h4&gt;
&lt;p&gt;This chapter has been renamed &lt;a href="#beyond-fetchablerecord"&gt;Beyond FetchableRecord&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-full-text-search" class="anchor" aria-hidden="true" href="#full-text-search"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Full-Text Search&lt;/h4&gt;
&lt;p&gt;This chapter has &lt;a href="Documentation/FullTextSearch.md"&gt;moved&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-enabling-fts5-support" class="anchor" aria-hidden="true" href="#enabling-fts5-support"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Enabling FTS5 Support&lt;/h4&gt;
&lt;p&gt;This chapter has &lt;a href="Documentation/FullTextSearch.md#enabling-fts5-support"&gt;moved&lt;/a&gt;.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>groue</author><guid isPermaLink="false">https://github.com/groue/GRDB.swift</guid><pubDate>Mon, 18 Nov 2019 00:11:00 GMT</pubDate></item><item><title>LoopKit/Loop #12 in Swift, This week</title><link>https://github.com/LoopKit/Loop</link><description>&lt;p&gt;&lt;i&gt;An automated insulin delivery app template for iOS, built on LoopKit&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-loop-for-ios" class="anchor" aria-hidden="true" href="#loop-for-ios"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Loop for iOS&lt;/h1&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="/Loop/Assets.xcassets/AppIcon.appiconset/Icon-Small-40%402x.png?raw=true"&gt;&lt;img src="/Loop/Assets.xcassets/AppIcon.appiconset/Icon-Small-40%402x.png?raw=true" alt="App Icon" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://travis-ci.org/LoopKit/Loop" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/8efb1d006e27ed688a187c2a43bdcea812474ecc/68747470733a2f2f7472617669732d63692e6f72672f4c6f6f704b69742f4c6f6f702e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/LoopKit/Loop.svg?branch=master" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://loop.zulipchat.com" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/11c063c06dacad518cf3aa987986e97ef2018727/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f7a756c69702d6a6f696e5f636861742d627269676874677265656e2e737667" alt="Join the chat at https://loop.zulipchat.com" data-canonical-src="https://img.shields.io/badge/zulip-join_chat-brightgreen.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Loop is an app template for building an automated insulin delivery system. It is a stone resting on the boulders of work done by many others.&lt;/p&gt;
&lt;p&gt;Loop is built on top of &lt;a href="https://github.com/LoopKit/LoopKit"&gt;LoopKit&lt;/a&gt;. LoopKit is a set of frameworks that provide data storage, retrieval, and calculation, as well as boilerplate view controllers used in Loop.&lt;/p&gt;
&lt;p&gt;Please understand that this project:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Is highly experimental&lt;/li&gt;
&lt;li&gt;Is not approved for therapy&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="/Documentation/Screenshots/Phone%20Graphs.png"&gt;&lt;img src="/Documentation/Screenshots/Phone%20Graphs.png?raw=true" alt="Screenshot of status screen" width="170" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="/Documentation/Screenshots/Phone%20Bolus.png"&gt;&lt;img src="/Documentation/Screenshots/Phone%20Bolus.png?raw=true" alt="Screenshot of bolus screen" width="170" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="/Documentation/Screenshots/Phone%20Notification%20Battery.png"&gt;&lt;img src="/Documentation/Screenshots/Phone%20Notification%20Battery.png?raw=true" alt="Screenshot of battery change notification" width="170" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="/Documentation/Screenshots/Phone%20Notification%20Loop%20Failure.png"&gt;&lt;img src="/Documentation/Screenshots/Phone%20Notification%20Loop%20Failure.png?raw=true" alt="Screenshot of loop failure notification" width="170" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="/Documentation/Screenshots/Phone%20Notification%20Bolus%20Failure.png"&gt;&lt;img src="/Documentation/Screenshots/Phone%20Notification%20Bolus%20Failure.png?raw=true" alt="Screenshot of bolus failure notification" width="170" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="/Documentation/Screenshots/Watch%20Complication.png"&gt;&lt;img src="/Documentation/Screenshots/Watch%20Complication.png?raw=true" alt="Screenshot of glucose complication on Apple Watch" width="141" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="/Documentation/Screenshots/Watch%20Carb%20Entry.png"&gt;&lt;img src="/Documentation/Screenshots/Watch%20Carb%20Entry.png?raw=true" alt="Screenshot of carb entry on Apple Watch" width="141" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="/Documentation/Screenshots/Watch%20Bolus.png"&gt;&lt;img src="/Documentation/Screenshots/Watch%20Bolus.png?raw=true" alt="Screenshot of bolus entry on Apple Watch" width="141" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="/Documentation/Screenshots/Watch%20Menu.png"&gt;&lt;img src="/Documentation/Screenshots/Watch%20Menu.png?raw=true" alt="Screenshot of the app menu on Apple Watch" width="141" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="/Documentation/Screenshots/Watch%20Notification%20Reservoir.png"&gt;&lt;img src="/Documentation/Screenshots/Watch%20Notification%20Reservoir.png?raw=true" alt="Screenshot of bolus failure notification on Apple Watch" width="141" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="/Documentation/Screenshots/Watch%20Notification%20Bolus%20Failure.png"&gt;&lt;img src="/Documentation/Screenshots/Watch%20Notification%20Bolus%20Failure.png?raw=true" alt="Screenshot of bolus failure notification on Apple Watch" width="141" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Documentation&lt;/h1&gt;
&lt;p&gt;Please visit the &lt;a href="https://loopkit.github.io/loopdocs/" rel="nofollow"&gt;Loop Docs&lt;/a&gt; for installation, algorithm, and other details.&lt;/p&gt;
&lt;p&gt;For FAQs and other tips, refer to the &lt;a href="https://github.com/LoopKit/Loop/wiki"&gt;Wiki&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;(Note: there is also a tab for the Wiki at the top of this page)&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-license-and-code-of-conduct" class="anchor" aria-hidden="true" href="#license-and-code-of-conduct"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;License and Code of Conduct&lt;/h1&gt;
&lt;p&gt;Please read the &lt;a href="/LICENSE.md"&gt;LICENSE&lt;/a&gt; and &lt;a href="/CODE_OF_CONDUCT.md"&gt;CODE_OF_CONDUCT&lt;/a&gt;&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>LoopKit</author><guid isPermaLink="false">https://github.com/LoopKit/Loop</guid><pubDate>Mon, 18 Nov 2019 00:12:00 GMT</pubDate></item><item><title>raywenderlich/swift-algorithm-club #13 in Swift, This week</title><link>https://github.com/raywenderlich/swift-algorithm-club</link><description>&lt;p&gt;&lt;i&gt;Algorithms and data structures in Swift, with explanations!&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body markdown" data-path="README.markdown"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="Images/SwiftAlgorithm-410-transp.png"&gt;&lt;img src="Images/SwiftAlgorithm-410-transp.png" alt="Swift Algorithm Club" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-welcome-to-the-swift-algorithm-club" class="anchor" aria-hidden="true" href="#welcome-to-the-swift-algorithm-club"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Welcome to the Swift Algorithm Club!&lt;/h1&gt;
&lt;p&gt;Here you'll find implementations of popular algorithms and data structures in everyone's favorite new language Swift, with detailed explanations of how they work.&lt;/p&gt;
&lt;p&gt;If you're a computer science student who needs to learn this stuff for exams -- or if you're a self-taught programmer who wants to brush up on the theory behind your craft -- you've come to the right place!&lt;/p&gt;
&lt;p&gt;The goal of this project is to &lt;strong&gt;explain how algorithms work&lt;/strong&gt;. The focus is on clarity and readability of the code, not on making a reusable library that you can drop into your own projects. That said, most of the code should be ready for production use but you may need to tweak it to fit into your own codebase.&lt;/p&gt;
&lt;p&gt;Code is compatible with &lt;strong&gt;Xcode 10&lt;/strong&gt; and &lt;strong&gt;Swift 4.2&lt;/strong&gt;. We'll keep this updated with the latest version of Swift. If you're interested in a GitHub pages version of the repo, check out &lt;a href="https://aquarchitect.github.io/swift-algorithm-club/" rel="nofollow"&gt;this&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;g-emoji class="g-emoji" alias="heart_eyes" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f60d.png"&gt;😍&lt;/g-emoji&gt; &lt;strong&gt;Suggestions and contributions are welcome!&lt;/strong&gt; &lt;g-emoji class="g-emoji" alias="heart_eyes" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f60d.png"&gt;😍&lt;/g-emoji&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-important-links" class="anchor" aria-hidden="true" href="#important-links"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Important links&lt;/h2&gt;
&lt;p&gt;&lt;a href="What%20are%20Algorithms.markdown"&gt;What are algorithms and data structures?&lt;/a&gt; Pancakes!&lt;/p&gt;
&lt;p&gt;&lt;a href="Why%20Algorithms.markdown"&gt;Why learn algorithms?&lt;/a&gt; Worried this isn't your cup of tea? Then read this.&lt;/p&gt;
&lt;p&gt;&lt;a href="Big-O%20Notation.markdown"&gt;Big-O notation&lt;/a&gt;. We often say things like, "This algorithm is &lt;strong&gt;O(n)&lt;/strong&gt;." If you don't know what that means, read this first.&lt;/p&gt;
&lt;p&gt;&lt;a href="Algorithm%20Design.markdown"&gt;Algorithm design techniques&lt;/a&gt;. How do you create your own algorithms?&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/raywenderlich/swift-algorithm-club/blob/master/.github/CONTRIBUTING.md"&gt;How to contribute&lt;/a&gt;. Report an issue to leave feedback, or submit a pull request.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-where-to-start" class="anchor" aria-hidden="true" href="#where-to-start"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Where to start?&lt;/h2&gt;
&lt;p&gt;If you're new to algorithms and data structures, here are a few good ones to start out with:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="Stack/"&gt;Stack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="Queue/"&gt;Queue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="Insertion%20Sort/"&gt;Insertion Sort&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="Binary%20Search/"&gt;Binary Search&lt;/a&gt; and &lt;a href="Binary%20Search%20Tree/"&gt;Binary Search Tree&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="Merge%20Sort/"&gt;Merge Sort&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="Boyer-Moore-Horspool/"&gt;Boyer-Moore string search&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-the-algorithms" class="anchor" aria-hidden="true" href="#the-algorithms"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;The algorithms&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-searching" class="anchor" aria-hidden="true" href="#searching"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Searching&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="Linear%20Search/"&gt;Linear Search&lt;/a&gt;. Find an element in an array.&lt;/li&gt;
&lt;li&gt;&lt;a href="Binary%20Search/"&gt;Binary Search&lt;/a&gt;. Quickly find elements in a sorted array.&lt;/li&gt;
&lt;li&gt;&lt;a href="Count%20Occurrences/"&gt;Count Occurrences&lt;/a&gt;. Count how often a value appears in an array.&lt;/li&gt;
&lt;li&gt;&lt;a href="Select%20Minimum%20Maximum"&gt;Select Minimum / Maximum&lt;/a&gt;. Find the minimum/maximum value in an array.&lt;/li&gt;
&lt;li&gt;&lt;a href="Kth%20Largest%20Element/"&gt;k-th Largest Element&lt;/a&gt;. Find the &lt;em&gt;k&lt;/em&gt;-th largest element in an array, such as the median.&lt;/li&gt;
&lt;li&gt;&lt;a href="Selection%20Sampling/"&gt;Selection Sampling&lt;/a&gt;. Randomly choose a bunch of items from a collection.&lt;/li&gt;
&lt;li&gt;&lt;a href="Union-Find/"&gt;Union-Find&lt;/a&gt;. Keeps track of disjoint sets and lets you quickly merge them.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-string-search" class="anchor" aria-hidden="true" href="#string-search"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;String Search&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="Brute-Force%20String%20Search/"&gt;Brute-Force String Search&lt;/a&gt;. A naive method.&lt;/li&gt;
&lt;li&gt;&lt;a href="Boyer-Moore-Horspool/"&gt;Boyer-Moore&lt;/a&gt;. A fast method to search for substrings. It skips ahead based on a look-up table, to avoid looking at every character in the text.&lt;/li&gt;
&lt;li&gt;&lt;a href="Knuth-Morris-Pratt/"&gt;Knuth-Morris-Pratt&lt;/a&gt;. A linear-time string algorithm that returns indexes of all occurrencies of a given pattern.&lt;/li&gt;
&lt;li&gt;&lt;a href="Rabin-Karp/"&gt;Rabin-Karp&lt;/a&gt;  Faster search by using hashing.&lt;/li&gt;
&lt;li&gt;&lt;a href="Longest%20Common%20Subsequence/"&gt;Longest Common Subsequence&lt;/a&gt;. Find the longest sequence of characters that appear in the same order in both strings.&lt;/li&gt;
&lt;li&gt;&lt;a href="Z-Algorithm/"&gt;Z-Algorithm&lt;/a&gt;. Finds all instances of a pattern in a String, and returns the indexes of where the pattern starts within the String.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-sorting" class="anchor" aria-hidden="true" href="#sorting"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Sorting&lt;/h3&gt;
&lt;p&gt;It's fun to see how sorting algorithms work, but in practice you'll almost never have to provide your own sorting routines. Swift's own &lt;code&gt;sort()&lt;/code&gt; is more than up to the job. But if you're curious, read on...&lt;/p&gt;
&lt;p&gt;Basic sorts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="Insertion%20Sort/"&gt;Insertion Sort&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="Selection%20Sort/"&gt;Selection Sort&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="Shell%20Sort/"&gt;Shell Sort&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Fast sorts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="Quicksort/"&gt;Quicksort&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="Merge%20Sort/"&gt;Merge Sort&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="Heap%20Sort/"&gt;Heap Sort&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hybrid sorts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="Introsort/"&gt;Introsort&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Special-purpose sorts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="Counting%20Sort/"&gt;Counting Sort&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="Radix%20Sort/"&gt;Radix Sort&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="Topological%20Sort/"&gt;Topological Sort&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Bad sorting algorithms (don't use these!):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="Bubble%20Sort/"&gt;Bubble Sort&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="Slow%20Sort/"&gt;Slow Sort&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-compression" class="anchor" aria-hidden="true" href="#compression"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Compression&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="Run-Length%20Encoding/"&gt;Run-Length Encoding (RLE)&lt;/a&gt;. Store repeated values as a single byte and a count.&lt;/li&gt;
&lt;li&gt;&lt;a href="Huffman%20Coding/"&gt;Huffman Coding&lt;/a&gt;. Store more common elements using a smaller number of bits.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-miscellaneous" class="anchor" aria-hidden="true" href="#miscellaneous"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Miscellaneous&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="Shuffle/"&gt;Shuffle&lt;/a&gt;. Randomly rearranges the contents of an array.&lt;/li&gt;
&lt;li&gt;&lt;a href="Comb%20Sort/"&gt;Comb Sort&lt;/a&gt;. An improve upon the Bubble Sort algorithm.&lt;/li&gt;
&lt;li&gt;&lt;a href="Convex%20Hull/"&gt;Convex Hull&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="Miller-Rabin%20Primality%20Test/"&gt;Miller-Rabin Primality Test&lt;/a&gt;. Is the number a prime number?&lt;/li&gt;
&lt;li&gt;&lt;a href="MinimumCoinChange/"&gt;MinimumCoinChange&lt;/a&gt;. A showcase for dynamic programming.&lt;/li&gt;
&lt;li&gt;&lt;a href="Genetic/"&gt;Genetic&lt;/a&gt;. A simple example on how to slowly mutate a value to its ideal form, in the context of biological evolution.&lt;/li&gt;
&lt;li&gt;&lt;a href="Myers%20Difference%20Algorithm/"&gt;Myers Difference Algorithm&lt;/a&gt;. Finding the longest common subsequence of two sequences.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-mathematics" class="anchor" aria-hidden="true" href="#mathematics"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Mathematics&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="GCD/"&gt;Greatest Common Divisor (GCD)&lt;/a&gt;. Special bonus: the least common multiple.&lt;/li&gt;
&lt;li&gt;&lt;a href="Combinatorics/"&gt;Permutations and Combinations&lt;/a&gt;. Get your combinatorics on!&lt;/li&gt;
&lt;li&gt;&lt;a href="Shunting%20Yard/"&gt;Shunting Yard Algorithm&lt;/a&gt;. Convert infix expressions to postfix.&lt;/li&gt;
&lt;li&gt;&lt;a href="Karatsuba%20Multiplication/"&gt;Karatsuba Multiplication&lt;/a&gt;. Another take on elementary multiplication.&lt;/li&gt;
&lt;li&gt;&lt;a href="HaversineDistance/"&gt;Haversine Distance&lt;/a&gt;. Calculating the distance between 2 points from a sphere.&lt;/li&gt;
&lt;li&gt;&lt;a href="Strassen%20Matrix%20Multiplication/"&gt;Strassen's Multiplication Matrix&lt;/a&gt;. Efficient way to handle matrix multiplication.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-machine-learning" class="anchor" aria-hidden="true" href="#machine-learning"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Machine learning&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="K-Means/"&gt;k-Means Clustering&lt;/a&gt;. Unsupervised classifier that partitions data into &lt;em&gt;k&lt;/em&gt; clusters.&lt;/li&gt;
&lt;li&gt;k-Nearest Neighbors&lt;/li&gt;
&lt;li&gt;&lt;a href="Linear%20Regression/"&gt;Linear Regression&lt;/a&gt;. A technique for creating a model of the relationship between two (or more) variable quantities.&lt;/li&gt;
&lt;li&gt;Logistic Regression&lt;/li&gt;
&lt;li&gt;Neural Networks&lt;/li&gt;
&lt;li&gt;PageRank&lt;/li&gt;
&lt;li&gt;&lt;a href="Naive%20Bayes%20Classifier/"&gt;Naive Bayes Classifier&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="Simulated%20annealing/"&gt;Simulated annealing&lt;/a&gt;. Probabilistic technique for approximating the global maxima in a (often discrete) large search space.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-data-structures" class="anchor" aria-hidden="true" href="#data-structures"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Data structures&lt;/h2&gt;
&lt;p&gt;The choice of data structure for a particular task depends on a few things.&lt;/p&gt;
&lt;p&gt;First, there is the shape of your data and the kinds of operations that you'll need to perform on it. If you want to look up objects by a key you need some kind of dictionary; if your data is hierarchical in nature you want a tree structure of some sort; if your data is sequential you want a stack or queue.&lt;/p&gt;
&lt;p&gt;Second, it matters what particular operations you'll be performing most, as certain data structures are optimized for certain actions. For example, if you often need to find the most important object in a collection, then a heap or priority queue is more optimal than a plain array.&lt;/p&gt;
&lt;p&gt;Most of the time using just the built-in &lt;code&gt;Array&lt;/code&gt;, &lt;code&gt;Dictionary&lt;/code&gt;, and &lt;code&gt;Set&lt;/code&gt; types is sufficient, but sometimes you may want something more fancy...&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-variations-on-arrays" class="anchor" aria-hidden="true" href="#variations-on-arrays"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Variations on arrays&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="Array2D/"&gt;Array2D&lt;/a&gt;. A two-dimensional array with fixed dimensions. Useful for board games.&lt;/li&gt;
&lt;li&gt;&lt;a href="Bit%20Set/"&gt;Bit Set&lt;/a&gt;. A fixed-size sequence of &lt;em&gt;n&lt;/em&gt; bits.&lt;/li&gt;
&lt;li&gt;&lt;a href="Fixed%20Size%20Array/"&gt;Fixed Size Array&lt;/a&gt;. When you know beforehand how large your data will be, it might be more efficient to use an old-fashioned array with a fixed size.&lt;/li&gt;
&lt;li&gt;&lt;a href="Ordered%20Array/"&gt;Ordered Array&lt;/a&gt;. An array that is always sorted.&lt;/li&gt;
&lt;li&gt;&lt;a href="Rootish%20Array%20Stack/"&gt;Rootish Array Stack&lt;/a&gt;. A space and time efficient variation on Swift arrays.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-queues" class="anchor" aria-hidden="true" href="#queues"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Queues&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="Stack/"&gt;Stack&lt;/a&gt;. Last-in, first-out!&lt;/li&gt;
&lt;li&gt;&lt;a href="Queue/"&gt;Queue&lt;/a&gt;. First-in, first-out!&lt;/li&gt;
&lt;li&gt;&lt;a href="Deque/"&gt;Deque&lt;/a&gt;. A double-ended queue.&lt;/li&gt;
&lt;li&gt;&lt;a href="Priority%20Queue"&gt;Priority Queue&lt;/a&gt;. A queue where the most important element is always at the front.&lt;/li&gt;
&lt;li&gt;&lt;a href="Ring%20Buffer/"&gt;Ring Buffer&lt;/a&gt;. Also known as a circular buffer. An array of a certain size that conceptually wraps around back to the beginning.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-lists" class="anchor" aria-hidden="true" href="#lists"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Lists&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="Linked%20List/"&gt;Linked List&lt;/a&gt;. A sequence of data items connected through links. Covers both singly and doubly linked lists.&lt;/li&gt;
&lt;li&gt;&lt;a href="Skip-List/"&gt;Skip-List&lt;/a&gt;. Skip List is a probabilistic data-structure with same logarithmic time bound and efficiency as AVL/ or Red-Black tree and provides a clever compromise to efficiently support search and update operations.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-trees" class="anchor" aria-hidden="true" href="#trees"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Trees&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="Tree/"&gt;Tree&lt;/a&gt;. A general-purpose tree structure.&lt;/li&gt;
&lt;li&gt;&lt;a href="Binary%20Tree/"&gt;Binary Tree&lt;/a&gt;. A tree where each node has at most two children.&lt;/li&gt;
&lt;li&gt;&lt;a href="Binary%20Search%20Tree/"&gt;Binary Search Tree (BST)&lt;/a&gt;. A binary tree that orders its nodes in a way that allows for fast queries.&lt;/li&gt;
&lt;li&gt;&lt;a href="Red-Black%20Tree/"&gt;Red-Black Tree&lt;/a&gt;. A self balancing binary search tree.&lt;/li&gt;
&lt;li&gt;&lt;a href="Splay%20Tree/"&gt;Splay Tree&lt;/a&gt;. A self balancing binary search tree that enables fast retrieval of recently updated elements.&lt;/li&gt;
&lt;li&gt;&lt;a href="Threaded%20Binary%20Tree/"&gt;Threaded Binary Tree&lt;/a&gt;. A binary tree that maintains a few extra variables for cheap and fast in-order traversals.&lt;/li&gt;
&lt;li&gt;&lt;a href="Segment%20Tree/"&gt;Segment Tree&lt;/a&gt;. Can quickly compute a function over a portion of an array.
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/raywenderlich/swift-algorithm-club/tree/master/Segment%20Tree/LazyPropagation"&gt;Lazy Propagation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;kd-Tree&lt;/li&gt;
&lt;li&gt;&lt;a href="Sparse%20Table/"&gt;Sparse Table&lt;/a&gt;. Another take on quickly computing a function over a portion of an array, but this time we'll make it even quicker!.&lt;/li&gt;
&lt;li&gt;&lt;a href="Heap/"&gt;Heap&lt;/a&gt;. A binary tree stored in an array, so it doesn't use pointers. Makes a great priority queue.&lt;/li&gt;
&lt;li&gt;Fibonacci Heap&lt;/li&gt;
&lt;li&gt;&lt;a href="Trie/"&gt;Trie&lt;/a&gt;. A special type of tree used to store associative data structures.&lt;/li&gt;
&lt;li&gt;&lt;a href="B-Tree/"&gt;B-Tree&lt;/a&gt;. A self-balancing search tree, in which nodes can have more than two children.&lt;/li&gt;
&lt;li&gt;&lt;a href="QuadTree/"&gt;QuadTree&lt;/a&gt;. A tree with 4 children.&lt;/li&gt;
&lt;li&gt;&lt;a href="Octree/"&gt;Octree&lt;/a&gt;. A tree with 8 children.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-hashing" class="anchor" aria-hidden="true" href="#hashing"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Hashing&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="Hash%20Table/"&gt;Hash Table&lt;/a&gt;. Allows you to store and retrieve objects by a key. This is how the dictionary type is usually implemented.&lt;/li&gt;
&lt;li&gt;Hash Functions&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-sets" class="anchor" aria-hidden="true" href="#sets"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Sets&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="Bloom%20Filter/"&gt;Bloom Filter&lt;/a&gt;. A constant-memory data structure that probabilistically tests whether an element is in a set.&lt;/li&gt;
&lt;li&gt;&lt;a href="Hash%20Set/"&gt;Hash Set&lt;/a&gt;. A set implemented using a hash table.&lt;/li&gt;
&lt;li&gt;&lt;a href="Multiset/"&gt;Multiset&lt;/a&gt;. A set where the number of times an element is added matters. (Also known as a bag.)&lt;/li&gt;
&lt;li&gt;&lt;a href="Ordered%20Set/"&gt;Ordered Set&lt;/a&gt;. A set where the order of items matters.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-graphs" class="anchor" aria-hidden="true" href="#graphs"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Graphs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="Graph/"&gt;Graph&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="Breadth-First%20Search/"&gt;Breadth-First Search (BFS)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="Depth-First%20Search/"&gt;Depth-First Search (DFS)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="Shortest%20Path%20%28Unweighted%29/"&gt;Shortest Path&lt;/a&gt; on an unweighted tree&lt;/li&gt;
&lt;li&gt;&lt;a href="Single-Source%20Shortest%20Paths%20(Weighted)/"&gt;Single-Source Shortest Paths&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="Minimum%20Spanning%20Tree%20%28Unweighted%29/"&gt;Minimum Spanning Tree&lt;/a&gt; on an unweighted tree&lt;/li&gt;
&lt;li&gt;&lt;a href="Minimum%20Spanning%20Tree/"&gt;Minimum Spanning Tree&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="All-Pairs%20Shortest%20Paths/"&gt;All-Pairs Shortest Paths&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="Dijkstra%20Algorithm/"&gt;Dijkstra's shortest path algorithm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-puzzles" class="anchor" aria-hidden="true" href="#puzzles"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Puzzles&lt;/h2&gt;
&lt;p&gt;A lot of software developer interview questions consist of algorithmic puzzles. Here is a small selection of fun ones. For more puzzles (with answers), see &lt;a href="http://elementsofprogramminginterviews.com/" rel="nofollow"&gt;here&lt;/a&gt; and &lt;a href="http://www.crackingthecodinginterview.com" rel="nofollow"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="Two-Sum%20Problem/"&gt;Two-Sum Problem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="3Sum%20and%204Sum/"&gt;Three-Sum/Four-Sum Problem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="Fizz%20Buzz/"&gt;Fizz Buzz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="Monty%20Hall%20Problem/"&gt;Monty Hall Problem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="Palindromes/"&gt;Finding Palindromes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="DiningPhilosophers/"&gt;Dining Philosophers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="Egg%20Drop%20Problem/"&gt;Egg Drop Problem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="Encode%20and%20Decode%20Tree/"&gt;Encoding and Decoding Binary Tree&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="Closest%20Pair/"&gt;Closest Pair&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-learn-more" class="anchor" aria-hidden="true" href="#learn-more"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Learn more!&lt;/h2&gt;
&lt;p&gt;Like what you see? Check out &lt;a href="https://store.raywenderlich.com/products/data-structures-and-algorithms-in-swift" rel="nofollow"&gt;Data Structures &amp;amp; Algorithms in Swift&lt;/a&gt;, the official book by the Swift Algorithm Club team!&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="Images/DataStructuresAndAlgorithmsInSwiftBook.png"&gt;&lt;img src="Images/DataStructuresAndAlgorithmsInSwiftBook.png" alt="Data Structures &amp;amp; Algorithms in Swift Book" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You’ll start with the fundamental structures of linked lists, queues and stacks, and see how to implement them in a highly Swift-like way. Move on to working with various types of trees, including general purpose trees, binary trees, AVL trees, binary search trees, and tries.&lt;/p&gt;
&lt;p&gt;Go beyond bubble and insertion sort with better-performing algorithms, including mergesort, radix sort, heap sort, and quicksort. Learn how to construct directed, non-directed and weighted graphs to represent many real-world models, and traverse graphs and trees efficiently with breadth-first, depth-first, Dijkstra’s and Prim’s algorithms to solve problems such as finding the shortest path or lowest cost in a network.&lt;/p&gt;
&lt;p&gt;By the end of this book, you’ll have hands-on experience solving common issues with data structures and algorithms — and you’ll be well on your way to developing your own efficient and useful implementations!&lt;/p&gt;
&lt;p&gt;You can find the book on the &lt;a href="https://store.raywenderlich.com/products/data-structures-and-algorithms-in-swift" rel="nofollow"&gt;raywenderlich.com store&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-credits" class="anchor" aria-hidden="true" href="#credits"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Credits&lt;/h2&gt;
&lt;p&gt;The Swift Algorithm Club was originally created by &lt;a href="https://github.com/hollance"&gt;Matthijs Hollemans&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It is now maintained by &lt;a href="https://www.raywenderlich.com/u/jomoka" rel="nofollow"&gt;Vincent Ngo&lt;/a&gt;, &lt;a href="https://github.com/kelvinlauKL"&gt;Kelvin Lau&lt;/a&gt;, and &lt;a href="https://github.com/richard-ash"&gt;Richard Ash&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The Swift Algorithm Club is a collaborative effort from the &lt;a href="https://github.com/raywenderlich/swift-algorithm-club/graphs/contributors"&gt;most algorithmic members&lt;/a&gt; of the &lt;a href="https://www.raywenderlich.com" rel="nofollow"&gt;raywenderlich.com&lt;/a&gt; community. We're always looking for help - why not &lt;a href=".github/CONTRIBUTING.md"&gt;join the club&lt;/a&gt;? :]&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-license" class="anchor" aria-hidden="true" href="#license"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;License&lt;/h2&gt;
&lt;p&gt;All content is licensed under the terms of the MIT open source license.&lt;/p&gt;
&lt;p&gt;By posting here, or by submitting any pull request through this forum, you agree that all content you submit or create, both code and text, is subject to this license.  Razeware, LLC, and others will have all the rights described in the license regarding this content.  The precise terms of this license may be found &lt;a href="https://github.com/raywenderlich/swift-algorithm-club/blob/master/LICENSE.txt"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://travis-ci.org/raywenderlich/swift-algorithm-club" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/d686248464ea87440457e93704b5f54191acc804/68747470733a2f2f7472617669732d63692e6f72672f72617977656e6465726c6963682f73776966742d616c676f726974686d2d636c75622e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/raywenderlich/swift-algorithm-club.svg?branch=master" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>raywenderlich</author><guid isPermaLink="false">https://github.com/raywenderlich/swift-algorithm-club</guid><pubDate>Mon, 18 Nov 2019 00:13:00 GMT</pubDate></item><item><title>mozilla-mobile/firefox-ios #14 in Swift, This week</title><link>https://github.com/mozilla-mobile/firefox-ios</link><description>&lt;p&gt;&lt;i&gt;Firefox for iOS&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-firefox-for-ios---" class="anchor" aria-hidden="true" href="#firefox-for-ios---"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Firefox for iOS &lt;a href="https://codebeat.co/projects/github-com-mozilla-firefox-ios" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/20b5b52f8d698b6663ae70eefc16b0946571e009/68747470733a2f2f636f6465626561742e636f2f6261646765732f36376535386236642d626338392d346632322d626138662d373636386139633135633561" alt="codebeat badge" data-canonical-src="https://codebeat.co/badges/67e58b6d-bc89-4f22-ba8f-7668a9c15c5a" style="max-width:100%;"&gt;&lt;/a&gt; &lt;a href="https://dashboard.buddybuild.com/apps/57bf25c0f096bc01001e21e0/build/latest" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/fa67952a021d36ddae3ef0471b6c020db91a40fa/68747470733a2f2f64617368626f6172642e62756464796275696c642e636f6d2f6170692f737461747573496d6167653f61707049443d353762663235633066303936626330313030316532316530266272616e63683d6d6173746572266275696c643d6c6174657374" alt="BuddyBuild" data-canonical-src="https://dashboard.buddybuild.com/api/statusImage?appID=57bf25c0f096bc01001e21e0&amp;amp;branch=master&amp;amp;build=latest" style="max-width:100%;"&gt;&lt;/a&gt; &lt;a href="https://codecov.io/gh/mozilla-mobile/firefox-ios/branch/master" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/9528dbfe07462ac8ebe1b38a983ea97be198f375/68747470733a2f2f636f6465636f762e696f2f67682f6d6f7a696c6c612d6d6f62696c652f66697265666f782d696f732f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/mozilla-mobile/firefox-ios/branch/master/graph/badge.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Download on the &lt;a href="https://itunes.apple.com/app/firefox-web-browser/id989804926" rel="nofollow"&gt;App Store&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-this-branch-master" class="anchor" aria-hidden="true" href="#this-branch-master"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;This branch (master)&lt;/h2&gt;
&lt;p&gt;This branch only works with Xcode 11 and supports iOS 11.0 and above&lt;/p&gt;
&lt;p&gt;Please make sure you aim your pull requests in the right direction.&lt;/p&gt;
&lt;p&gt;For bug fixes and features for a specific release use the version branch.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-getting-involved" class="anchor" aria-hidden="true" href="#getting-involved"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Getting involved&lt;/h2&gt;
&lt;p&gt;Want to contribute but don't know where to start? Here is a list of &lt;a href="https://github.com/mozilla-mobile/firefox-ios/issues?q=is%3Aissue+is%3Aopen+label%3A%22Contributor+OK+%F0%9F%A4%9D%22"&gt;issues that are contributor friendly&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-building-the-code" class="anchor" aria-hidden="true" href="#building-the-code"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Building the code&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Install the latest &lt;a href="https://developer.apple.com/xcode/downloads/" rel="nofollow"&gt;Xcode developer tools&lt;/a&gt; from Apple.&lt;/li&gt;
&lt;li&gt;Install Carthage
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;brew update
brew install carthage&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;Clone the repository:
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;git clone https://github.com/mozilla-mobile/firefox-ios&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;Pull in the project dependencies:
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;cd&lt;/span&gt; firefox-ios
sh ./bootstrap.sh&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;Open &lt;code&gt;Client.xcodeproj&lt;/code&gt; in Xcode.&lt;/li&gt;
&lt;li&gt;Build the &lt;code&gt;Fennec&lt;/code&gt; scheme in Xcode.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;&lt;a id="user-content-building-user-scripts" class="anchor" aria-hidden="true" href="#building-user-scripts"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Building User Scripts&lt;/h2&gt;
&lt;p&gt;User Scripts (JavaScript injected into the &lt;code&gt;WKWebView&lt;/code&gt;) are compiled, concatenated and minified using &lt;a href="https://webpack.js.org/" rel="nofollow"&gt;webpack&lt;/a&gt;. User Scripts to be aggregated are placed in the following directories:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/Client
|-- /Frontend
    |-- /UserContent
        |-- /UserScripts
            |-- /AllFrames
            |   |-- /AtDocumentEnd
            |   |-- /AtDocumentStart
            |-- /MainFrame
                |-- /AtDocumentEnd
                |-- /AtDocumentStart
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This reduces the total possible number of User Scripts down to four. The compiled output from concatenating and minifying the User Scripts placed in these folders resides in &lt;code&gt;/Client/Assets&lt;/code&gt; and are named accordingly:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;AllFramesAtDocumentEnd.js&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AllFramesAtDocumentStart.js&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MainFrameAtDocumentEnd.js&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MainFrameAtDocumentStart.js&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To simplify the build process, these compiled files are checked-in to this repository. When adding or editing User Scripts, these files can be re-compiled with &lt;code&gt;webpack&lt;/code&gt; manually. This requires Node.js to be installed and all required &lt;code&gt;npm&lt;/code&gt; packages can be installed by running &lt;code&gt;npm install&lt;/code&gt; in the root directory of the project. User Scripts can be compiled by running the following &lt;code&gt;npm&lt;/code&gt; command in the root directory of the project:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm run build
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;a id="user-content-contributor-guidelines" class="anchor" aria-hidden="true" href="#contributor-guidelines"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contributor guidelines&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-creating-a-pull-request" class="anchor" aria-hidden="true" href="#creating-a-pull-request"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Creating a pull request&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;All pull requests must be associated with a specific Issue. If an issue doesn't exist please first create it.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-swift-style" class="anchor" aria-hidden="true" href="#swift-style"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Swift style&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Swift code should generally follow the conventions listed at &lt;a href="https://github.com/raywenderlich/swift-style-guide"&gt;https://github.com/raywenderlich/swift-style-guide&lt;/a&gt;.
&lt;ul&gt;
&lt;li&gt;Exception: we use 4-space indentation instead of 2.&lt;/li&gt;
&lt;li&gt;This is a loose standard. We do our best to follow this style&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-whitespace" class="anchor" aria-hidden="true" href="#whitespace"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Whitespace&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;New code should not contain any trailing whitespace.&lt;/li&gt;
&lt;li&gt;We recommend enabling both the "Automatically trim trailing whitespace" and "Including whitespace-only lines" preferences in Xcode (under Text Editing).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git rebase --whitespace=fix&lt;/code&gt; can also be used to remove whitespace from your commits before issuing a pull request.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-commits" class="anchor" aria-hidden="true" href="#commits"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Commits&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Each commit should have a single clear purpose. If a commit contains multiple unrelated changes, those changes should be split into separate commits.&lt;/li&gt;
&lt;li&gt;If a commit requires another commit to build properly, those commits should be squashed.&lt;/li&gt;
&lt;li&gt;Follow-up commits for any review comments should be squashed. Do not include "Fixed PR comments", merge commits, or other "temporary" commits in pull requests.&lt;/li&gt;
&lt;/ul&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>mozilla-mobile</author><guid isPermaLink="false">https://github.com/mozilla-mobile/firefox-ios</guid><pubDate>Mon, 18 Nov 2019 00:14:00 GMT</pubDate></item><item><title>ninjaprox/NVActivityIndicatorView #15 in Swift, This week</title><link>https://github.com/ninjaprox/NVActivityIndicatorView</link><description>&lt;p&gt;&lt;i&gt;A collection of awesome loading animations&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-nvactivityindicatorview" class="anchor" aria-hidden="true" href="#nvactivityindicatorview"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;NVActivityIndicatorView&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://travis-ci.org/ninjaprox/NVActivityIndicatorView" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/2407ce3bc76f106817054e6a934f11e75970dd9f/68747470733a2f2f7472617669732d63692e6f72672f6e696e6a6170726f782f4e564163746976697479496e64696361746f72566965772e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/ninjaprox/NVActivityIndicatorView.svg?branch=master" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://img.shields.io/cocoapods/v/NVActivityIndicatorView.svg" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/1dfe75fd808314fb6e66be27cfb2cd24cc004783/68747470733a2f2f696d672e736869656c64732e696f2f636f636f61706f64732f762f4e564163746976697479496e64696361746f72566965772e737667" alt="Cocoapods Compatible" data-canonical-src="https://img.shields.io/cocoapods/v/NVActivityIndicatorView.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://github.com/Carthage/Carthage"&gt;&lt;img src="https://camo.githubusercontent.com/3dc8a44a2c3f7ccd5418008d1295aae48466c141/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f43617274686167652d636f6d70617469626c652d3442433531442e7376673f7374796c653d666c6174" alt="Carthage Compatible" data-canonical-src="https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://houndci.com" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/1c940d021ef775a44e0880bc3ba124a6bee5fefb/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f52657669657765645f62792d486f756e642d3845363442302e737667" alt="Reviewed by Hound" data-canonical-src="https://img.shields.io/badge/Reviewed_by-Hound-8E64B0.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-introduction" class="anchor" aria-hidden="true" href="#introduction"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Introduction&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;NVActivityIndicatorView&lt;/code&gt; is a collection of awesome loading animations.&lt;/p&gt;
&lt;p&gt;This is original a fork from &lt;a href="https://github.com/gontovnik/DGActivityIndicatorView"&gt;DGActivityIndicatorView&lt;/a&gt;, inspired by &lt;a href="https://github.com/ConnorAtherton/loaders.css"&gt;Loaders.css&lt;/a&gt;, written in Swift with full implementation of animations, plus more.&lt;/p&gt;
&lt;p&gt;You can also find Objective-C version of this &lt;a href="https://github.com/ninjaprox/DGActivityIndicatorView"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-demo" class="anchor" aria-hidden="true" href="#demo"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Demo&lt;/h2&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/ninjaprox/NVActivityIndicatorView/master/Demo.gif"&gt;&lt;img src="https://raw.githubusercontent.com/ninjaprox/NVActivityIndicatorView/master/Demo.gif" alt="alt tag" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For first-hand experience, just open the project and run it.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-animation-types" class="anchor" aria-hidden="true" href="#animation-types"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Animation types&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1. ballPulse&lt;/td&gt;
&lt;td&gt;2. ballGridPulse&lt;/td&gt;
&lt;td&gt;3. ballClipRotate&lt;/td&gt;
&lt;td&gt;4. squareSpin&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5. ballClipRotatePulse&lt;/td&gt;
&lt;td&gt;6. ballClipRotateMultiple&lt;/td&gt;
&lt;td&gt;7. ballPulseRise&lt;/td&gt;
&lt;td&gt;8. ballRotate&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;9. cubeTransition&lt;/td&gt;
&lt;td&gt;10. ballZigZag&lt;/td&gt;
&lt;td&gt;11. ballZigZagDeflect&lt;/td&gt;
&lt;td&gt;12. ballTrianglePath&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;13. ballScale&lt;/td&gt;
&lt;td&gt;14. lineScale&lt;/td&gt;
&lt;td&gt;15. lineScaleParty&lt;/td&gt;
&lt;td&gt;16. ballScaleMultiple&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;17. ballPulseSync&lt;/td&gt;
&lt;td&gt;18. ballBeat&lt;/td&gt;
&lt;td&gt;19. lineScalePulseOut&lt;/td&gt;
&lt;td&gt;20. lineScalePulseOutRapid&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;21. ballScaleRipple&lt;/td&gt;
&lt;td&gt;22. ballScaleRippleMultiple&lt;/td&gt;
&lt;td&gt;23. ballSpinFadeLoader&lt;/td&gt;
&lt;td&gt;24. lineSpinFadeLoader&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;25. triangleSkewSpin&lt;/td&gt;
&lt;td&gt;26. pacman&lt;/td&gt;
&lt;td&gt;27. ballGridBeat&lt;/td&gt;
&lt;td&gt;28. semiCircleSpin&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;29. ballRotateChase&lt;/td&gt;
&lt;td&gt;30. orbit&lt;/td&gt;
&lt;td&gt;31. audioEqualizer&lt;/td&gt;
&lt;td&gt;32. circleStrokeSpin&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installation&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-cocoapods" class="anchor" aria-hidden="true" href="#cocoapods"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Cocoapods&lt;/h3&gt;
&lt;p&gt;Install &lt;a href="https://cocoapods.org/#install" rel="nofollow"&gt;Cocoapods&lt;/a&gt; if need be.&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;$ gem install cocoapods&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Add &lt;code&gt;NVActivityIndicatorView&lt;/code&gt; in your &lt;code&gt;Podfile&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-ruby"&gt;&lt;pre&gt;use_frameworks!

pod &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;NVActivityIndicatorView&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you're using &lt;code&gt;NVActivityIndicatorView&lt;/code&gt; in an app extension, use &lt;code&gt;NVActivityIndicatorView/AppExtension&lt;/code&gt; instead.&lt;/p&gt;
&lt;div class="highlight highlight-source-ruby"&gt;&lt;pre&gt;use_frameworks!

pod &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;NVActivityIndicatorView/AppExtension&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then, run the following command.&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;$ pod install&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note:&lt;/strong&gt; Please refer to the migration note for version &lt;a href="#version-370"&gt;&lt;code&gt;3.7.0&lt;/code&gt;&lt;/a&gt; below.&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-carthage" class="anchor" aria-hidden="true" href="#carthage"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Carthage&lt;/h3&gt;
&lt;p&gt;Install &lt;a href="https://github.com/Carthage/Carthage#installing-carthage"&gt;Carthage&lt;/a&gt; if need be.&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;$ brew update
$ brew install carthage&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Add &lt;code&gt;NVActivityIndicatorView&lt;/code&gt; in your &lt;code&gt;Cartfile&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-ruby"&gt;&lt;pre&gt;github &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;ninjaprox/NVActivityIndicatorView&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Run &lt;code&gt;carthage&lt;/code&gt; to build the framework and drag the built &lt;code&gt;NVActivityIndicatorView.framework&lt;/code&gt; in the folder appropriateto the platform, e.g. iOS, tvOS, into your Xcode project.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note:&lt;/strong&gt; You might encounter compile issue, if so please use &lt;code&gt;carthage&lt;/code&gt; branch instead. Check issue &lt;a href="https://github.com/ninjaprox/NVActivityIndicatorView/issues/101"&gt;#101&lt;/a&gt; for more information.&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-manual" class="anchor" aria-hidden="true" href="#manual"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Manual&lt;/h3&gt;
&lt;p&gt;Copy &lt;code&gt;NVActivityIndicatorView&lt;/code&gt; folder to your project. That's it.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note:&lt;/strong&gt; Make sure that all files in &lt;code&gt;NVActivityIndicatorView&lt;/code&gt; included in Compile Sources in Build Phases.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you encounter issues while uploading the app to iTunes Connect, remove the &lt;code&gt;Info.plist&lt;/code&gt; file in &lt;code&gt;NVActivityIndicatorView&lt;/code&gt;. Check issue &lt;a href="https://github.com/ninjaprox/NVActivityIndicatorView/issues/129"&gt;#129&lt;/a&gt; for more information.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-migration" class="anchor" aria-hidden="true" href="#migration"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Migration&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-version-440" class="anchor" aria-hidden="true" href="#version-440"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Version 4.4.0&lt;/h3&gt;
&lt;p&gt;This version requires Xcode 10.1 and Swift 4.2.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-version-400" class="anchor" aria-hidden="true" href="#version-400"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Version 4.0.0&lt;/h3&gt;
&lt;p&gt;This version requires Xcode 9.0 and Swift 4.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-version-370" class="anchor" aria-hidden="true" href="#version-370"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Version 3.7.0&lt;/h3&gt;
&lt;p&gt;This version splits &lt;code&gt;NVActivityIndicatorView&lt;/code&gt; pod to 2 subpods &lt;code&gt;NVActivityIndicatorView/Presenter&lt;/code&gt; and &lt;code&gt;NVActivityIndicatorView/AppExtension&lt;/code&gt;. There is no need to change &lt;code&gt;pod NVActivityIndicatorView&lt;/code&gt; to &lt;code&gt;pod NVActivityIndicatorView/Presenter&lt;/code&gt; since it will be installed by default if you use the main pod name.&lt;/p&gt;
&lt;p&gt;However, if you want to use &lt;code&gt;NVActivityIndicatorView&lt;/code&gt; in an app extension, use &lt;code&gt;pod NVActivityIndicatorView/AppExtension&lt;/code&gt; instead.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note:&lt;/strong&gt; Related issue &lt;a href="https://github.com/ninjaprox/NVActivityIndicatorView/issues/119"&gt;#119&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Usage&lt;/h2&gt;
&lt;p&gt;Firstly, import &lt;code&gt;NVActivityIndicatorView&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;NVActivityIndicatorView&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-initialization" class="anchor" aria-hidden="true" href="#initialization"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Initialization&lt;/h3&gt;
&lt;p&gt;Then, there are two ways you can create &lt;code&gt;NVActivityIndicatorView&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;By storyboard, changing class of any &lt;code&gt;UIView&lt;/code&gt; to &lt;code&gt;NVActivityIndicatorView&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note:&lt;/strong&gt; Set Module to &lt;code&gt;NVActivityIndicatorView&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;By code, using initializer. All parameters other than &lt;code&gt;frame&lt;/code&gt; are optional and &lt;code&gt;NVActivityIndicatorView.DEFAULT_*&lt;/code&gt; are used as default values.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;NVActivityIndicatorView&lt;/span&gt;(&lt;span class="pl-c1"&gt;frame&lt;/span&gt;: frame, &lt;span class="pl-c1"&gt;type&lt;/span&gt;: type, &lt;span class="pl-c1"&gt;color&lt;/span&gt;: color, &lt;span class="pl-c1"&gt;padding&lt;/span&gt;: padding)&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-control" class="anchor" aria-hidden="true" href="#control"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Control&lt;/h3&gt;
&lt;p&gt;Start animating.&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;activityIndicatorView.&lt;span class="pl-c1"&gt;startAnimating&lt;/span&gt;()&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Stop animating.&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;activityIndicatorView.&lt;span class="pl-c1"&gt;stopAnimating&lt;/span&gt;()&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Determine if it is animating.&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;animating &lt;span class="pl-k"&gt;=&lt;/span&gt; activityIndicatorView.&lt;span class="pl-smi"&gt;isAnimating&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-change-properties" class="anchor" aria-hidden="true" href="#change-properties"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Change properties&lt;/h3&gt;
&lt;p&gt;In storyboard, you can change all properties in Attributes inspector tab of Utilities panel.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note:&lt;/strong&gt; Use one of values (case-insensitive) in &lt;a href="#animation-types"&gt;Animation types&lt;/a&gt; for &lt;code&gt;Type Name&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;All properties are public so you can change them after initializing.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note:&lt;/strong&gt; All changes must be made before calling &lt;code&gt;startAnimating()&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-ui-blocker" class="anchor" aria-hidden="true" href="#ui-blocker"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;UI blocker&lt;/h3&gt;
&lt;p&gt;By conforming &lt;code&gt;NVActivityIndicatorViewable&lt;/code&gt; protocol, you can use &lt;code&gt;NVActivityIndicatorView&lt;/code&gt; as UI blocker for &lt;code&gt;UIViewController&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;ViewController&lt;/span&gt;: &lt;span class="pl-e"&gt;UIViewController&lt;/span&gt;, &lt;span class="pl-e"&gt;NVActivityIndicatorViewable &lt;/span&gt;{ }&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Start animating.&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;startAnimating&lt;/span&gt;(size, message) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; plus other parameters as in initializer.&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Stop animating.&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;stopAnimating&lt;/span&gt;()&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Check if it is animating.&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;animating &lt;span class="pl-k"&gt;=&lt;/span&gt; isAnimating&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or you can use &lt;code&gt;NVActivityIndicatorPresenter&lt;/code&gt; to display UI blocker anywhere.&lt;/p&gt;
&lt;p&gt;Start animating.&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; activityData &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;ActivityData&lt;/span&gt;()

NVActivityIndicatorPresenter.&lt;span class="pl-smi"&gt;sharedInstance&lt;/span&gt;.&lt;span class="pl-c1"&gt;startAnimating&lt;/span&gt;(activityData)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note:&lt;/strong&gt; Check &lt;a href="https://nvactivityindicatorview.vinhis.me" rel="nofollow"&gt;documentation&lt;/a&gt; for detail of &lt;code&gt;ActivityData&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Stop animating.&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;NVActivityIndicatorPresenter.&lt;span class="pl-smi"&gt;sharedInstance&lt;/span&gt;.&lt;span class="pl-c1"&gt;stopAnimating&lt;/span&gt;()&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Change message.&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;NVActivityIndicatorPresenter.&lt;span class="pl-smi"&gt;sharedInstance&lt;/span&gt;.&lt;span class="pl-c1"&gt;setMessage&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Done&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Check if it is animating.&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;animating &lt;span class="pl-k"&gt;=&lt;/span&gt; NVActivityIndicatorPresenter.&lt;span class="pl-smi"&gt;sharedInstance&lt;/span&gt;.&lt;span class="pl-smi"&gt;isAnimating&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content-fade-inout-animation" class="anchor" aria-hidden="true" href="#fade-inout-animation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Fade in/out animation&lt;/h4&gt;
&lt;p&gt;You have control over showing and hiding UI blocker animation.&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;startAnimating&lt;/span&gt;(&lt;span class="pl-c1"&gt;fadeInAnimation&lt;/span&gt;: fadeInAnimation)
&lt;span class="pl-c1"&gt;stopAnimating&lt;/span&gt;(fadeOutAnimation)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Check &lt;code&gt;DEFAULT_FADE_IN_ANIMATION&lt;/code&gt; and &lt;code&gt;DEFAULT_FADE_OUT_ANIMATION&lt;/code&gt; for examples of how to implement animation.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-acknowledgment" class="anchor" aria-hidden="true" href="#acknowledgment"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Acknowledgment&lt;/h2&gt;
&lt;p&gt;Thanks &lt;a href="https://github.com/ConnorAtherton"&gt;Connor Atherton&lt;/a&gt; for great loaders and &lt;a href="https://github.com/gontovnik"&gt;Danil Gontovnik&lt;/a&gt; for kick-start.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-license" class="anchor" aria-hidden="true" href="#license"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;License&lt;/h2&gt;
&lt;p&gt;The MIT License (MIT)&lt;/p&gt;
&lt;p&gt;Copyright (c) 2016 Vinh Nguyen &lt;a href="http://twitter.com/ninjaprox" rel="nofollow"&gt;@ninjaprox&lt;/a&gt;&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>ninjaprox</author><guid isPermaLink="false">https://github.com/ninjaprox/NVActivityIndicatorView</guid><pubDate>Mon, 18 Nov 2019 00:15:00 GMT</pubDate></item><item><title>mxcl/PromiseKit #16 in Swift, This week</title><link>https://github.com/mxcl/PromiseKit</link><description>&lt;p&gt;&lt;i&gt;Promises for Swift &amp; ObjC.&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="../gh-pages/public/img/logo-tight.png"&gt;&lt;img src="../gh-pages/public/img/logo-tight.png" alt="PromiseKit" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://cocoapods.org/pods/PromiseKit" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/c15ee18886b7426341e502b764d0a76d81970b57/68747470733a2f2f696d672e736869656c64732e696f2f636f636f61706f64732f762f50726f6d6973654b69742e7376673f6c6162656c3d76657273696f6e" alt="badge-pod" data-canonical-src="https://img.shields.io/cocoapods/v/PromiseKit.svg?label=version" style="max-width:100%;"&gt;&lt;/a&gt; &lt;a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/98c220d03f8bf6b21af781b82d06fbf5e755d0be/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c616e6775616765732d53776966742532302537432532304f626a432d6f72616e67652e737667"&gt;&lt;img src="https://camo.githubusercontent.com/98c220d03f8bf6b21af781b82d06fbf5e755d0be/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c616e6775616765732d53776966742532302537432532304f626a432d6f72616e67652e737667" alt="badge-languages" data-canonical-src="https://img.shields.io/badge/languages-Swift%20%7C%20ObjC-orange.svg" style="max-width:100%;"&gt;&lt;/a&gt; &lt;a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/3dd4a24e33f01ed9376e333f35ddd306208eda86/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f737570706f7274732d436f636f61506f64732532302537432532304361727468616765253230253743253230416363696f2532302537432532305377696674504d2d677265656e2e737667"&gt;&lt;img src="https://camo.githubusercontent.com/3dd4a24e33f01ed9376e333f35ddd306208eda86/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f737570706f7274732d436f636f61506f64732532302537432532304361727468616765253230253743253230416363696f2532302537432532305377696674504d2d677265656e2e737667" alt="badge-pms" data-canonical-src="https://img.shields.io/badge/supports-CocoaPods%20%7C%20Carthage%20%7C%20Accio%20%7C%20SwiftPM-green.svg" style="max-width:100%;"&gt;&lt;/a&gt; &lt;a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/efcda9fe2c564128d079066be8138688f3f0465f/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f706c6174666f726d732d6d61634f53253230253743253230694f5325323025374325323077617463684f5325323025374325323074764f532532302537432532304c696e75782d6c69676874677265792e737667"&gt;&lt;img src="https://camo.githubusercontent.com/efcda9fe2c564128d079066be8138688f3f0465f/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f706c6174666f726d732d6d61634f53253230253743253230694f5325323025374325323077617463684f5325323025374325323074764f532532302537432532304c696e75782d6c69676874677265792e737667" alt="badge-platforms" data-canonical-src="https://img.shields.io/badge/platforms-macOS%20%7C%20iOS%20%7C%20watchOS%20%7C%20tvOS%20%7C%20Linux-lightgrey.svg" style="max-width:100%;"&gt;&lt;/a&gt; &lt;a href="https://travis-ci.org/mxcl/PromiseKit" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/b9838a922b5c46736da485cc0ff2c06eaf350995/68747470733a2f2f7472617669732d63692e6f72672f6d78636c2f50726f6d6973654b69742e7376673f6272616e63683d6d6173746572" alt="badge-travis" data-canonical-src="https://travis-ci.org/mxcl/PromiseKit.svg?branch=master" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Promises simplify asynchronous programming, freeing you up to focus on the more
important things. They are easy to learn, easy to master and result in clearer,
more readable code. Your co-workers will thank you.&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;UIApplication.&lt;span class="pl-smi"&gt;shared&lt;/span&gt;.&lt;span class="pl-smi"&gt;isNetworkActivityIndicatorVisible&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;

&lt;span class="pl-k"&gt;let&lt;/span&gt; fetchImage &lt;span class="pl-k"&gt;=&lt;/span&gt; URLSession.&lt;span class="pl-smi"&gt;shared&lt;/span&gt;.&lt;span class="pl-c1"&gt;dataTask&lt;/span&gt;(.&lt;span class="pl-smi"&gt;promise&lt;/span&gt;, &lt;span class="pl-c1"&gt;with&lt;/span&gt;: url).&lt;span class="pl-smi"&gt;compactMap&lt;/span&gt;{ &lt;span class="pl-c1"&gt;UIImage&lt;/span&gt;(&lt;span class="pl-c1"&gt;data&lt;/span&gt;: &lt;span class="pl-c1"&gt;$0&lt;/span&gt;.&lt;span class="pl-smi"&gt;data&lt;/span&gt;) }
&lt;span class="pl-k"&gt;let&lt;/span&gt; fetchLocation &lt;span class="pl-k"&gt;=&lt;/span&gt; CLLocationManager.&lt;span class="pl-c1"&gt;requestLocation&lt;/span&gt;().&lt;span class="pl-smi"&gt;lastValue&lt;/span&gt;

firstly {
    &lt;span class="pl-c1"&gt;when&lt;/span&gt;(&lt;span class="pl-c1"&gt;fulfilled&lt;/span&gt;: fetchImage, fetchLocation)
}.&lt;span class="pl-smi"&gt;done&lt;/span&gt; { image, location &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-c1"&gt;self&lt;/span&gt;.&lt;span class="pl-smi"&gt;imageView&lt;/span&gt;.&lt;span class="pl-c1"&gt;image&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; image
    &lt;span class="pl-c1"&gt;self&lt;/span&gt;.&lt;span class="pl-smi"&gt;label&lt;/span&gt;.&lt;span class="pl-c1"&gt;text&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;location&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
}.&lt;span class="pl-smi"&gt;ensure&lt;/span&gt; {
    UIApplication.&lt;span class="pl-smi"&gt;shared&lt;/span&gt;.&lt;span class="pl-smi"&gt;isNetworkActivityIndicatorVisible&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;false&lt;/span&gt;
}.&lt;span class="pl-smi"&gt;catch&lt;/span&gt; { error &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-c1"&gt;self&lt;/span&gt;.&lt;span class="pl-c1"&gt;show&lt;/span&gt;(&lt;span class="pl-c1"&gt;UIAlertController&lt;/span&gt;(&lt;span class="pl-c1"&gt;for&lt;/span&gt;: error), &lt;span class="pl-c1"&gt;sender&lt;/span&gt;: &lt;span class="pl-c1"&gt;self&lt;/span&gt;)
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;PromiseKit is a thoughtful and complete implementation of promises for any
platform that has a &lt;code&gt;swiftc&lt;/code&gt;. It has &lt;em&gt;excellent&lt;/em&gt; Objective-C bridging and
&lt;em&gt;delightful&lt;/em&gt; specializations for iOS, macOS, tvOS and watchOS. It is a top-100
pod used in many of the most popular apps in the world.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://codecov.io/gh/mxcl/PromiseKit" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/c6e5c784c54f92152d6984a9f5e5b3b5e10549bf/68747470733a2f2f636f6465636f762e696f2f67682f6d78636c2f50726f6d6973654b69742f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/mxcl/PromiseKit/branch/master/graph/badge.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-promisekit-7-alpha" class="anchor" aria-hidden="true" href="#promisekit-7-alpha"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;PromiseKit 7 Alpha&lt;/h1&gt;
&lt;p&gt;We are testing PromiseKit 7 alpha, it is Swift 5 only. It is tagged and thus
importable in all package managers.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-promisekit-6" class="anchor" aria-hidden="true" href="#promisekit-6"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;PromiseKit 6&lt;/h1&gt;
&lt;p&gt;&lt;a href="http://mxcl.dev/PromiseKit/news/2018/02/PromiseKit-6.0-Released/" rel="nofollow"&gt;Release notes and migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-quick-start" class="anchor" aria-hidden="true" href="#quick-start"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Quick Start&lt;/h1&gt;
&lt;p&gt;In your &lt;a href="https://guides.cocoapods.org/syntax/podfile.html" rel="nofollow"&gt;Podfile&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-ruby"&gt;&lt;pre&gt;use_frameworks!

target &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Change Me!&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  pod &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;PromiseKit&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;~&amp;gt; 6.8&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;The above gives an Xcode warning? See our &lt;a href="Documentation/Installation.md"&gt;Installation Guide&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;PromiseKit 6, 5 and 4 support Xcode 8.3, 9.x and 10.0; Swift 3.1,
3.2, 3.3, 3.4, 4.0, 4.1, 4.2, 4.3 and 5.0 (development snapshots); iOS, macOS,
tvOS, watchOS, Linux and Android; CocoaPods, Carthage and SwiftPM;
(&lt;a href="https://travis-ci.org/mxcl/PromiseKit" rel="nofollow"&gt;CI Matrix&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;For Carthage, SwiftPM, Accio, etc., or for instructions when using older Swifts or Xcodes, see our &lt;a href="Documentation/Installation.md"&gt;Installation Guide&lt;/a&gt;. We recommend
&lt;a href="https://github.com/Carthage/Carthage"&gt;Carthage&lt;/a&gt; or
&lt;a href="https://github.com/JamitLabs/Accio"&gt;Accio&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-professionally-supported-promisekit-is-now-available" class="anchor" aria-hidden="true" href="#professionally-supported-promisekit-is-now-available"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Professionally Supported PromiseKit is Now Available&lt;/h1&gt;
&lt;p&gt;TideLift gives software development teams a single source for purchasing
and maintaining their software, with professional grade assurances from
the experts who know it best, while seamlessly integrating with existing
tools.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://tidelift.com/subscription/pkg/cocoapods-promisekit?utm_source=cocoapods-promisekit&amp;amp;utm_medium=referral&amp;amp;utm_campaign=readme" rel="nofollow"&gt;Get Professional Support for PromiseKit with TideLift&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-promisekit-is-thousands-of-hours-of-work" class="anchor" aria-hidden="true" href="#promisekit-is-thousands-of-hours-of-work"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;PromiseKit is Thousands of Hours of Work&lt;/h1&gt;
&lt;p&gt;Hey there, I’m Max Howell. I’m a prolific producer of open source software and
probably you already use some of it (I created &lt;a href="https://brew.sh" rel="nofollow"&gt;&lt;code&gt;brew&lt;/code&gt;&lt;/a&gt;). I work full-time on
open source and it’s hard; currently &lt;em&gt;I earn less than minimum wage&lt;/em&gt;. Please
help me continue my work, I appreciate it 🙏🏻&lt;/p&gt;
&lt;a href="https://www.patreon.com/mxcl" rel="nofollow"&gt;
	&lt;img src="https://camo.githubusercontent.com/c11c9bdf1f6c2a1d80afb11859984a61f0fadfa6/68747470733a2f2f63352e70617472656f6e2e636f6d2f65787465726e616c2f6c6f676f2f6265636f6d655f615f706174726f6e5f627574746f6e4032782e706e67" width="160" data-canonical-src="https://c5.patreon.com/external/logo/become_a_patron_button@2x.png" style="max-width:100%;"&gt;
&lt;/a&gt;
&lt;p&gt;&lt;a href="http://mxcl.dev/#donate" rel="nofollow"&gt;Other ways to say thanks&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Documentation&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Handbook
&lt;ul&gt;
&lt;li&gt;&lt;a href="Documentation/GettingStarted.md"&gt;Getting Started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="Documentation/CommonPatterns.md"&gt;Promises: Common Patterns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="Documentation/FAQ.md"&gt;Frequently Asked Questions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Manual
&lt;ul&gt;
&lt;li&gt;&lt;a href="Documentation/Installation.md"&gt;Installation Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="Documentation/ObjectiveC.md"&gt;Objective-C Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="Documentation/Troubleshooting.md"&gt;Troubleshooting&lt;/a&gt; (e.g., solutions to common compile errors)&lt;/li&gt;
&lt;li&gt;&lt;a href="Documentation/Appendix.md"&gt;Appendix&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mxcl.dev/PromiseKit/reference/v6/Classes/Promise.html" rel="nofollow"&gt;API Reference&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;a id="user-content-extensions" class="anchor" aria-hidden="true" href="#extensions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Extensions&lt;/h1&gt;
&lt;p&gt;Promises are only as useful as the asynchronous tasks they represent. Thus, we
have converted (almost) all of Apple’s APIs to promises. The default CocoaPod
provides Promises and the extensions for Foundation and UIKit. The other
extensions are available by specifying additional subspecs in your &lt;code&gt;Podfile&lt;/code&gt;,
e.g.:&lt;/p&gt;
&lt;div class="highlight highlight-source-ruby"&gt;&lt;pre&gt;pod &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;PromiseKit/MapKit&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;          &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; MKDirections().calculate().then { /*…*/ }&lt;/span&gt;
pod &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;PromiseKit/CoreLocation&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; CLLocationManager.requestLocation().then { /*…*/ }&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;All our extensions are separate repositories at the &lt;a href="https://github.com/PromiseKit"&gt;PromiseKit organization&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-i-dont-want-the-extensions" class="anchor" aria-hidden="true" href="#i-dont-want-the-extensions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;I don't want the extensions!&lt;/h2&gt;
&lt;p&gt;Then don’t have them:&lt;/p&gt;
&lt;div class="highlight highlight-source-ruby"&gt;&lt;pre&gt;pod &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;PromiseKit/CorePromise&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;~&amp;gt; 6.8&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; Carthage installations come with no extensions by default.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;&lt;a id="user-content-choose-your-networking-library" class="anchor" aria-hidden="true" href="#choose-your-networking-library"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Choose Your Networking Library&lt;/h2&gt;
&lt;p&gt;Promise chains commonly start with a network operation. Thus, we offer
extensions for &lt;code&gt;URLSession&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; pod 'PromiseKit/Foundation'  # https://github.com/PromiseKit/Foundation&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
firstly {
    URLSession.&lt;span class="pl-smi"&gt;shared&lt;/span&gt;.&lt;span class="pl-c1"&gt;dataTask&lt;/span&gt;(.&lt;span class="pl-smi"&gt;promise&lt;/span&gt;, &lt;span class="pl-c1"&gt;with&lt;/span&gt;: &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;makeUrlRequest&lt;/span&gt;()).&lt;span class="pl-c1"&gt;validate&lt;/span&gt;()
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; ^^ we provide `.validate()` so that eg. 404s get converted to errors&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;}.&lt;span class="pl-c1"&gt;map&lt;/span&gt; {
    &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;JSONDecoder&lt;/span&gt;().&lt;span class="pl-c1"&gt;decode&lt;/span&gt;(Foo.&lt;span class="pl-k"&gt;self&lt;/span&gt;, &lt;span class="pl-c1"&gt;with&lt;/span&gt;: &lt;span class="pl-c1"&gt;$0&lt;/span&gt;.&lt;span class="pl-smi"&gt;data&lt;/span&gt;)
}.&lt;span class="pl-smi"&gt;done&lt;/span&gt; { foo &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;…&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;}.&lt;span class="pl-smi"&gt;catch&lt;/span&gt; { error &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;…&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;}

&lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;makeUrlRequest&lt;/span&gt;() &lt;span class="pl-k"&gt;throws&lt;/span&gt; &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; URLRequest {
    &lt;span class="pl-k"&gt;var&lt;/span&gt; rq &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;URLRequest&lt;/span&gt;(&lt;span class="pl-c1"&gt;url&lt;/span&gt;: url)
    rq.&lt;span class="pl-smi"&gt;httpMethod&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;POST&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
    rq.&lt;span class="pl-c1"&gt;addValue&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;application/json&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;forHTTPHeaderField&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Content-Type&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    rq.&lt;span class="pl-c1"&gt;addValue&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;application/json&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;forHTTPHeaderField&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Accept&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    rq.&lt;span class="pl-smi"&gt;httpBody&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;JSONEncoder&lt;/span&gt;().&lt;span class="pl-c1"&gt;encode&lt;/span&gt;(obj)
    &lt;span class="pl-k"&gt;return&lt;/span&gt; rq
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And &lt;a href="http://github.com/PromiseKit/Alamofire-"&gt;Alamofire&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; pod 'PromiseKit/Alamofire'  # https://github.com/PromiseKit/Alamofire-&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
firstly {
    Alamofire
        .&lt;span class="pl-c1"&gt;request&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;http://example.com&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;method&lt;/span&gt;: .&lt;span class="pl-smi"&gt;post&lt;/span&gt;, &lt;span class="pl-c1"&gt;parameters&lt;/span&gt;: params)
        .&lt;span class="pl-c1"&gt;responseDecodable&lt;/span&gt;(Foo.&lt;span class="pl-k"&gt;self&lt;/span&gt;)
}.&lt;span class="pl-smi"&gt;done&lt;/span&gt; { foo &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;…&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;}.&lt;span class="pl-smi"&gt;catch&lt;/span&gt; { error &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;…&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Nowadays, considering that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We almost always POST JSON&lt;/li&gt;
&lt;li&gt;We now have &lt;code&gt;JSONDecoder&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;PromiseKit now has &lt;code&gt;map&lt;/code&gt; and other functional primitives&lt;/li&gt;
&lt;li&gt;PromiseKit (like Alamofire, but not raw-&lt;code&gt;URLSession&lt;/code&gt;) also defaults to having
callbacks go to the main thread&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We recommend vanilla &lt;code&gt;URLSession&lt;/code&gt;. It uses fewer black boxes and sticks closer to the metal. Alamofire was essential until the three bullet points above
became true, but nowadays it isn’t really necessary.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-support" class="anchor" aria-hidden="true" href="#support"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Support&lt;/h1&gt;
&lt;p&gt;Please check our &lt;a href="Documentation/Troubleshooting.md"&gt;Troubleshooting Guide&lt;/a&gt;, and
if after that you still have a question, ask at our &lt;a href="https://gitter.im/mxcl/PromiseKit" rel="nofollow"&gt;Gitter chat channel&lt;/a&gt; or on &lt;a href="https://github.com/mxcl/PromiseKit/issues/new"&gt;our bug tracker&lt;/a&gt;.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>mxcl</author><guid isPermaLink="false">https://github.com/mxcl/PromiseKit</guid><pubDate>Mon, 18 Nov 2019 00:16:00 GMT</pubDate></item><item><title>Quick/Nimble #17 in Swift, This week</title><link>https://github.com/Quick/Nimble</link><description>&lt;p&gt;&lt;i&gt;A Matcher Framework for Swift and Objective-C&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-nimble" class="anchor" aria-hidden="true" href="#nimble"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Nimble&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://travis-ci.org/Quick/Nimble" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/33e652a42c0be3c96797217d05c7b5e5f33a38ef/68747470733a2f2f7472617669732d63692e6f72672f517569636b2f4e696d626c652e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/Quick/Nimble.svg?branch=master" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://cocoapods.org/pods/Nimble" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/4d38b35e502bc6c1a59fc266bb6ce52291237514/68747470733a2f2f696d672e736869656c64732e696f2f636f636f61706f64732f762f4e696d626c652e737667" alt="CocoaPods" data-canonical-src="https://img.shields.io/cocoapods/v/Nimble.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://github.com/Carthage/Carthage"&gt;&lt;img src="https://camo.githubusercontent.com/3dc8a44a2c3f7ccd5418008d1295aae48466c141/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f43617274686167652d636f6d70617469626c652d3442433531442e7376673f7374796c653d666c6174" alt="Carthage Compatible" data-canonical-src="https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://github.com/JamitLabs/Accio"&gt;&lt;img src="https://camo.githubusercontent.com/e502cdc2b27c1f2b2590f061d37b984ba3957c26/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f416363696f2d737570706f727465642d3041374346352e7376673f7374796c653d666c6174" alt="Accio supported" data-canonical-src="https://img.shields.io/badge/Accio-supported-0A7CF5.svg?style=flat" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://cocoapods.org/pods/Nimble" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/260d11f464288550b03bddaaa292b713804a9ce1/68747470733a2f2f696d672e736869656c64732e696f2f636f636f61706f64732f702f4e696d626c652e737667" alt="Platforms" data-canonical-src="https://img.shields.io/cocoapods/p/Nimble.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://houndci.com" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/1c940d021ef775a44e0880bc3ba124a6bee5fefb/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f52657669657765645f62792d486f756e642d3845363442302e737667" alt="Reviewed by Hound" data-canonical-src="https://img.shields.io/badge/Reviewed_by-Hound-8E64B0.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Use Nimble to express the expected outcomes of Swift
or Objective-C expressions. Inspired by
&lt;a href="https://github.com/pivotal/cedar"&gt;Cedar&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-k"&gt;+&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;equal&lt;/span&gt;(&lt;span class="pl-c1"&gt;2&lt;/span&gt;))
&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(&lt;span class="pl-c1"&gt;1.2&lt;/span&gt;).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;beCloseTo&lt;/span&gt;(&lt;span class="pl-c1"&gt;1.1&lt;/span&gt;, &lt;span class="pl-c1"&gt;within&lt;/span&gt;: &lt;span class="pl-c1"&gt;0.1&lt;/span&gt;))
&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(&lt;span class="pl-c1"&gt;3&lt;/span&gt;) &lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;
&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;seahorse&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;contain&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;sea&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
&lt;span class="pl-c1"&gt;expect&lt;/span&gt;([&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Atlantic&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Pacific&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]).&lt;span class="pl-c1"&gt;toNot&lt;/span&gt;(&lt;span class="pl-c1"&gt;contain&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Mississippi&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(ocean.&lt;span class="pl-smi"&gt;isClean&lt;/span&gt;).&lt;span class="pl-c1"&gt;toEventually&lt;/span&gt;(&lt;span class="pl-c1"&gt;beTruthy&lt;/span&gt;())&lt;/pre&gt;&lt;/div&gt;
&lt;h1&gt;&lt;a id="user-content-how-to-use-nimble" class="anchor" aria-hidden="true" href="#how-to-use-nimble"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;How to Use Nimble&lt;/h1&gt;


&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;  &lt;em&gt;generated with &lt;a href="https://github.com/thlorenz/doctoc"&gt;DocToc&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#some-background-expressing-outcomes-using-assertions-in-xctest"&gt;Some Background: Expressing Outcomes Using Assertions in XCTest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#nimble-expectations-using-expectto"&gt;Nimble: Expectations Using &lt;code&gt;expect(...).to&lt;/code&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#custom-failure-messages"&gt;Custom Failure Messages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#type-safety"&gt;Type Safety&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#operator-overloads"&gt;Operator Overloads&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#lazily-computed-values"&gt;Lazily Computed Values&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#c-primitives"&gt;C Primitives&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#asynchronous-expectations"&gt;Asynchronous Expectations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#objective-c-support"&gt;Objective-C Support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#disabling-objective-c-shorthand"&gt;Disabling Objective-C Shorthand&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#built-in-matcher-functions"&gt;Built-in Matcher Functions&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#type-checking"&gt;Type Checking&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#equivalence"&gt;Equivalence&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#identity"&gt;Identity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#comparisons"&gt;Comparisons&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#typesclasses"&gt;Types/Classes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#truthiness"&gt;Truthiness&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#swift-assertions"&gt;Swift Assertions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#swift-error-handling"&gt;Swift Error Handling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#exceptions"&gt;Exceptions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#collection-membership"&gt;Collection Membership&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#strings"&gt;Strings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#collection-elements"&gt;Collection Elements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#collection-count"&gt;Collection Count&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#notifications"&gt;Notifications&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#matching-a-value-to-any-of-a-group-of-matchers"&gt;Matching a value to any of a group of matchers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#custom-validation"&gt;Custom Validation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#writing-your-own-matchers"&gt;Writing Your Own Matchers&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#predicateresult"&gt;PredicateResult&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#lazy-evaluation"&gt;Lazy Evaluation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#type-checking-via-swift-generics"&gt;Type Checking via Swift Generics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#customizing-failure-messages"&gt;Customizing Failure Messages&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#basic-customization"&gt;Basic Customization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#full-customization"&gt;Full Customization&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#supporting-objective-c"&gt;Supporting Objective-C&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#properly-handling-nil-in-objective-c-matchers"&gt;Properly Handling &lt;code&gt;nil&lt;/code&gt; in Objective-C Matchers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#migrating-from-the-old-matcher-api"&gt;Migrating from the Old Matcher API&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#minimal-step---use-predicate"&gt;Minimal Step - Use &lt;code&gt;.predicate&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#convert-to-use-predicate-type-with-old-matcher-constructor"&gt;Convert to use &lt;code&gt;Predicate&lt;/code&gt; Type with Old Matcher Constructor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#convert-to-predicate-type-with-preferred-constructor"&gt;Convert to &lt;code&gt;Predicate&lt;/code&gt; Type with Preferred Constructor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#deprecation-roadmap"&gt;Deprecation Roadmap&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#installing-nimble"&gt;Installing Nimble&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#installing-nimble-as-a-submodule"&gt;Installing Nimble as a Submodule&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#installing-nimble-via-cocoapods"&gt;Installing Nimble via CocoaPods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#installing-nimble-via-accio"&gt;Installing Nimble via Accio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#using-nimble-without-xctest"&gt;Using Nimble without XCTest&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;&lt;a id="user-content-some-background-expressing-outcomes-using-assertions-in-xctest" class="anchor" aria-hidden="true" href="#some-background-expressing-outcomes-using-assertions-in-xctest"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Some Background: Expressing Outcomes Using Assertions in XCTest&lt;/h1&gt;
&lt;p&gt;Apple's Xcode includes the XCTest framework, which provides
assertion macros to test whether code behaves properly.
For example, to assert that &lt;code&gt;1 + 1 = 2&lt;/code&gt;, XCTest has you write:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c1"&gt;XCTAssertEqual&lt;/span&gt;(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-k"&gt;+&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;, &lt;span class="pl-c1"&gt;2&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;expected one plus one to equal two&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or, in Objective-C:&lt;/p&gt;
&lt;div class="highlight highlight-source-objc"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Objective-C&lt;/span&gt;

&lt;span class="pl-en"&gt;XCTAssertEqual&lt;/span&gt;(&lt;span class="pl-c1"&gt;1&lt;/span&gt; + &lt;span class="pl-c1"&gt;1&lt;/span&gt;, &lt;span class="pl-c1"&gt;2&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;@"&lt;/span&gt;expected one plus one to equal two&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;);&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;XCTest assertions have a couple of drawbacks:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Not enough macros.&lt;/strong&gt; There's no easy way to assert that a string
contains a particular substring, or that a number is less than or
equal to another.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;It's hard to write asynchronous tests.&lt;/strong&gt; XCTest forces you to write
a lot of boilerplate code.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Nimble addresses these concerns.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-nimble-expectations-using-expectto" class="anchor" aria-hidden="true" href="#nimble-expectations-using-expectto"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Nimble: Expectations Using &lt;code&gt;expect(...).to&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;Nimble allows you to express expectations using a natural,
easily understood language:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;Nimble&lt;/span&gt;

&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(seagull.&lt;span class="pl-smi"&gt;squawk&lt;/span&gt;).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;equal&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Squee!&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight highlight-source-objc"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Objective-C&lt;/span&gt;

@import Nimble;

&lt;span class="pl-en"&gt;expect&lt;/span&gt;(seagull.squawk).to(equal(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;@"&lt;/span&gt;Squee!&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;));&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;expect&lt;/code&gt; function autocompletes to include &lt;code&gt;file:&lt;/code&gt; and &lt;code&gt;line:&lt;/code&gt;,
but these parameters are optional. Use the default values to have
Xcode highlight the correct line when an expectation is not met.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To perform the opposite expectation--to assert something is &lt;em&gt;not&lt;/em&gt;
equal--use &lt;code&gt;toNot&lt;/code&gt; or &lt;code&gt;notTo&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;Nimble&lt;/span&gt;

&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(seagull.&lt;span class="pl-smi"&gt;squawk&lt;/span&gt;).&lt;span class="pl-c1"&gt;toNot&lt;/span&gt;(&lt;span class="pl-c1"&gt;equal&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Oh, hello there!&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(seagull.&lt;span class="pl-smi"&gt;squawk&lt;/span&gt;).&lt;span class="pl-c1"&gt;notTo&lt;/span&gt;(&lt;span class="pl-c1"&gt;equal&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Oh, hello there!&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight highlight-source-objc"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Objective-C&lt;/span&gt;

@import Nimble;

&lt;span class="pl-en"&gt;expect&lt;/span&gt;(seagull.squawk).toNot(equal(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;@"&lt;/span&gt;Oh, hello there!&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;));
&lt;span class="pl-en"&gt;expect&lt;/span&gt;(seagull.squawk).notTo(equal(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;@"&lt;/span&gt;Oh, hello there!&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;));&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-custom-failure-messages" class="anchor" aria-hidden="true" href="#custom-failure-messages"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Custom Failure Messages&lt;/h2&gt;
&lt;p&gt;Would you like to add more information to the test's failure messages? Use the &lt;code&gt;description&lt;/code&gt; optional argument to add your own text:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-k"&gt;+&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;equal&lt;/span&gt;(&lt;span class="pl-c1"&gt;3&lt;/span&gt;))
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; failed - expected to equal &amp;lt;3&amp;gt;, got &amp;lt;2&amp;gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-k"&gt;+&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;equal&lt;/span&gt;(&lt;span class="pl-c1"&gt;3&lt;/span&gt;), &lt;span class="pl-c1"&gt;description&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Make sure libKindergartenMath is loaded&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; failed - Make sure libKindergartenMath is loaded&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; expected to equal &amp;lt;3&amp;gt;, got &amp;lt;2&amp;gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or the *WithDescription version in Objective-C:&lt;/p&gt;
&lt;div class="highlight highlight-source-objc"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Objective-C&lt;/span&gt;

@import Nimble;

&lt;span class="pl-en"&gt;expect&lt;/span&gt;(@(&lt;span class="pl-c1"&gt;1&lt;/span&gt;+&lt;span class="pl-c1"&gt;1&lt;/span&gt;)).to(equal(@&lt;span class="pl-c1"&gt;3&lt;/span&gt;));
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; failed - expected to equal &amp;lt;3.0000&amp;gt;, got &amp;lt;2.0000&amp;gt;&lt;/span&gt;

&lt;span class="pl-en"&gt;expect&lt;/span&gt;(@(&lt;span class="pl-c1"&gt;1&lt;/span&gt;+&lt;span class="pl-c1"&gt;1&lt;/span&gt;)).toWithDescription(equal(@&lt;span class="pl-c1"&gt;3&lt;/span&gt;), @"Make sure libKindergartenMath is loaded");
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; failed - Make sure libKindergartenMath is loaded&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; expected to equal &amp;lt;3.0000&amp;gt;, got &amp;lt;2.0000&amp;gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-type-safety" class="anchor" aria-hidden="true" href="#type-safety"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Type Safety&lt;/h2&gt;
&lt;p&gt;Nimble makes sure you don't compare two types that don't match:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Does not compile:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-k"&gt;+&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;equal&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Squee!&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;Nimble uses generics--only available in Swift--to ensure
type correctness. That means type checking is
not available when using Nimble in Objective-C. &lt;g-emoji class="g-emoji" alias="sob" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f62d.png"&gt;😭&lt;/g-emoji&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;&lt;a id="user-content-operator-overloads" class="anchor" aria-hidden="true" href="#operator-overloads"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Operator Overloads&lt;/h2&gt;
&lt;p&gt;Tired of so much typing? With Nimble, you can use overloaded operators
like &lt;code&gt;==&lt;/code&gt; for equivalence, or &lt;code&gt;&amp;gt;&lt;/code&gt; for comparisons:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if squawk does not equal "Hi!":&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(seagull.&lt;span class="pl-smi"&gt;squawk&lt;/span&gt;) &lt;span class="pl-k"&gt;!=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Hi!&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 10 is greater than 2:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(&lt;span class="pl-c1"&gt;10&lt;/span&gt;) &lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;Operator overloads are only available in Swift, so you won't be able
to use this syntax in Objective-C. &lt;g-emoji class="g-emoji" alias="broken_heart" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f494.png"&gt;💔&lt;/g-emoji&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;&lt;a id="user-content-lazily-computed-values" class="anchor" aria-hidden="true" href="#lazily-computed-values"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Lazily Computed Values&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;expect&lt;/code&gt; function doesn't evaluate the value it's given until it's
time to match. So Nimble can test whether an expression raises an
exception once evaluated:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Note: Swift currently doesn't have exceptions.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;       Only Objective-C code can raise exceptions&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;       that Nimble will catch.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;       (see https://github.com/Quick/Nimble/issues/220#issuecomment-172667064)&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; exception &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;NSException&lt;/span&gt;(
    &lt;span class="pl-c1"&gt;name&lt;/span&gt;: NSInternalInconsistencyException,
    &lt;span class="pl-c1"&gt;reason&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Not enough fish in the sea.&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
    &lt;span class="pl-c1"&gt;userInfo&lt;/span&gt;: [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;something&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;is fishy&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;])
expect { exception.&lt;span class="pl-c1"&gt;raise&lt;/span&gt;() }.&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;raiseException&lt;/span&gt;())

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Also, you can customize raiseException to be more specific&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;expect { exception.&lt;span class="pl-c1"&gt;raise&lt;/span&gt;() }.&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;raiseException&lt;/span&gt;(&lt;span class="pl-c1"&gt;named&lt;/span&gt;: NSInternalInconsistencyException))
expect { exception.&lt;span class="pl-c1"&gt;raise&lt;/span&gt;() }.&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;raiseException&lt;/span&gt;(
    &lt;span class="pl-c1"&gt;named&lt;/span&gt;: NSInternalInconsistencyException,
    &lt;span class="pl-c1"&gt;reason&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Not enough fish in the sea&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
expect { exception.&lt;span class="pl-c1"&gt;raise&lt;/span&gt;() }.&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;raiseException&lt;/span&gt;(
    &lt;span class="pl-c1"&gt;named&lt;/span&gt;: NSInternalInconsistencyException,
    &lt;span class="pl-c1"&gt;reason&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Not enough fish in the sea&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
    &lt;span class="pl-c1"&gt;userInfo&lt;/span&gt;: [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;something&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;is fishy&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Objective-C works the same way, but you must use the &lt;code&gt;expectAction&lt;/code&gt;
macro when making an expectation on an expression that has no return
value:&lt;/p&gt;
&lt;div class="highlight highlight-source-objc"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Objective-C&lt;/span&gt;

&lt;span class="pl-c1"&gt;NSException&lt;/span&gt; *exception = [&lt;span class="pl-c1"&gt;NSException&lt;/span&gt; &lt;span class="pl-c1"&gt;exceptionWithName:&lt;/span&gt;&lt;span class="pl-c1"&gt;NSInternalInconsistencyException&lt;/span&gt;
                                                 &lt;span class="pl-c1"&gt;reason:&lt;/span&gt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;@"&lt;/span&gt;Not enough fish in the sea.&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
                                               &lt;span class="pl-c1"&gt;userInfo:&lt;/span&gt;&lt;span class="pl-c1"&gt;nil&lt;/span&gt;];
&lt;span class="pl-en"&gt;expectAction&lt;/span&gt;(^{ [exception &lt;span class="pl-c1"&gt;raise&lt;/span&gt;]; }).to(raiseException());

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Use the property-block syntax to be more specific.&lt;/span&gt;
&lt;span class="pl-en"&gt;expectAction&lt;/span&gt;(^{ [exception &lt;span class="pl-c1"&gt;raise&lt;/span&gt;]; }).to(raiseException().named(&lt;span class="pl-c1"&gt;NSInternalInconsistencyException&lt;/span&gt;));
&lt;span class="pl-en"&gt;expectAction&lt;/span&gt;(^{ [exception &lt;span class="pl-c1"&gt;raise&lt;/span&gt;]; }).to(raiseException().
    named(&lt;span class="pl-c1"&gt;NSInternalInconsistencyException&lt;/span&gt;).
    reason(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Not enough fish in the sea&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;));
&lt;span class="pl-en"&gt;expectAction&lt;/span&gt;(^{ [exception &lt;span class="pl-c1"&gt;raise&lt;/span&gt;]; }).to(raiseException().
    named(&lt;span class="pl-c1"&gt;NSInternalInconsistencyException&lt;/span&gt;).
    reason(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Not enough fish in the sea&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;).
    userInfo(@{&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;@"&lt;/span&gt;something&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;@"&lt;/span&gt;is fishy&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}));

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; You can also pass a block for custom matching of the raised exception&lt;/span&gt;
&lt;span class="pl-en"&gt;expectAction&lt;/span&gt;(exception.raise()).to(raiseException().satisfyingBlock(^(&lt;span class="pl-c1"&gt;NSException&lt;/span&gt; *exception) {
    &lt;span class="pl-c1"&gt;expect&lt;/span&gt;(exception.&lt;span class="pl-smi"&gt;name&lt;/span&gt;).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;beginWith&lt;/span&gt;(&lt;span class="pl-c1"&gt;NSInternalInconsistencyException&lt;/span&gt;));
}));&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-c-primitives" class="anchor" aria-hidden="true" href="#c-primitives"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;C Primitives&lt;/h2&gt;
&lt;p&gt;Some testing frameworks make it hard to test primitive C values.
In Nimble, it just works:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;let&lt;/span&gt; actual&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;CInt&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;
&lt;span class="pl-k"&gt;let&lt;/span&gt; expectedValue&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;CInt&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;
&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(actual).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;equal&lt;/span&gt;(expectedValue))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In fact, Nimble uses type inference, so you can write the above
without explicitly specifying both types:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-k"&gt;as&lt;/span&gt; &lt;span class="pl-c1"&gt;CInt&lt;/span&gt;).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;equal&lt;/span&gt;(&lt;span class="pl-c1"&gt;1&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;In Objective-C, Nimble only supports Objective-C objects. To
make expectations on primitive C values, wrap then in an object
literal:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight highlight-source-objc"&gt;&lt;pre&gt;&lt;span class="pl-en"&gt;expect&lt;/span&gt;(@(&lt;span class="pl-c1"&gt;1&lt;/span&gt; + &lt;span class="pl-c1"&gt;1&lt;/span&gt;)).to(equal(@&lt;span class="pl-c1"&gt;2&lt;/span&gt;));&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-asynchronous-expectations" class="anchor" aria-hidden="true" href="#asynchronous-expectations"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Asynchronous Expectations&lt;/h2&gt;
&lt;p&gt;In Nimble, it's easy to make expectations on values that are updated
asynchronously. Just use &lt;code&gt;toEventually&lt;/code&gt; or &lt;code&gt;toEventuallyNot&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;DispatchQueue.&lt;span class="pl-smi"&gt;main&lt;/span&gt;.&lt;span class="pl-smi"&gt;async&lt;/span&gt; {
    ocean.&lt;span class="pl-c1"&gt;add&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;dolphins&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    ocean.&lt;span class="pl-c1"&gt;add&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;whales&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
}
&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(ocean).&lt;span class="pl-c1"&gt;toEventually&lt;/span&gt;(&lt;span class="pl-c1"&gt;contain&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;dolphins&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;whales&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight highlight-source-objc"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Objective-C&lt;/span&gt;

&lt;span class="pl-en"&gt;dispatch_async&lt;/span&gt;(dispatch_get_main_queue(), ^{
    [ocean &lt;span class="pl-c1"&gt;add:&lt;/span&gt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;@"&lt;/span&gt;dolphins&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;];
    [ocean &lt;span class="pl-c1"&gt;add:&lt;/span&gt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;@"&lt;/span&gt;whales&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;];
});
&lt;span class="pl-en"&gt;expect&lt;/span&gt;(ocean).toEventually(contain(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;@"&lt;/span&gt;dolphins&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;@"&lt;/span&gt;whales&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;));&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note: toEventually triggers its polls on the main thread. Blocking the main
thread will cause Nimble to stop the run loop. This can cause test pollution
for whatever incomplete code that was running on the main thread.  Blocking the
main thread can be caused by blocking IO, calls to sleep(), deadlocks, and
synchronous IPC.&lt;/p&gt;
&lt;p&gt;In the above example, &lt;code&gt;ocean&lt;/code&gt; is constantly re-evaluated. If it ever
contains dolphins and whales, the expectation passes. If &lt;code&gt;ocean&lt;/code&gt; still
doesn't contain them, even after being continuously re-evaluated for one
whole second, the expectation fails.&lt;/p&gt;
&lt;p&gt;Sometimes it takes more than a second for a value to update. In those
cases, use the &lt;code&gt;timeout&lt;/code&gt; parameter:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Waits three seconds for ocean to contain "starfish":&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(ocean).&lt;span class="pl-c1"&gt;toEventually&lt;/span&gt;(&lt;span class="pl-c1"&gt;contain&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;starfish&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;), &lt;span class="pl-c1"&gt;timeout&lt;/span&gt;: &lt;span class="pl-c1"&gt;3&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Evaluate someValue every 0.2 seconds repeatedly until it equals 100, or fails if it timeouts after 5.5 seconds.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(someValue).&lt;span class="pl-c1"&gt;toEventually&lt;/span&gt;(&lt;span class="pl-c1"&gt;equal&lt;/span&gt;(&lt;span class="pl-c1"&gt;100&lt;/span&gt;), &lt;span class="pl-c1"&gt;timeout&lt;/span&gt;: &lt;span class="pl-c1"&gt;5.5&lt;/span&gt;, &lt;span class="pl-c1"&gt;pollInterval&lt;/span&gt;: &lt;span class="pl-c1"&gt;0.2&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight highlight-source-objc"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Objective-C&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Waits three seconds for ocean to contain "starfish":&lt;/span&gt;
&lt;span class="pl-en"&gt;expect&lt;/span&gt;(ocean).withTimeout(&lt;span class="pl-c1"&gt;3&lt;/span&gt;).toEventually(contain(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;@"&lt;/span&gt;starfish&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;));&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can also provide a callback by using the &lt;code&gt;waitUntil&lt;/code&gt; function:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
waitUntil { done &lt;span class="pl-k"&gt;in&lt;/span&gt;
    ocean.&lt;span class="pl-smi"&gt;goFish&lt;/span&gt; { success &lt;span class="pl-k"&gt;in&lt;/span&gt;
        &lt;span class="pl-c1"&gt;expect&lt;/span&gt;(success).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;beTrue&lt;/span&gt;())
        &lt;span class="pl-c1"&gt;done&lt;/span&gt;()
    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight highlight-source-objc"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Objective-C&lt;/span&gt;

&lt;span class="pl-en"&gt;waitUntil&lt;/span&gt;(^(&lt;span class="pl-k"&gt;void&lt;/span&gt; (^done)(&lt;span class="pl-k"&gt;void&lt;/span&gt;)){
    [ocean &lt;span class="pl-c1"&gt;goFishWithHandler:&lt;/span&gt;^(&lt;span class="pl-c1"&gt;BOOL&lt;/span&gt; success){
        &lt;span class="pl-c1"&gt;expect&lt;/span&gt;(success).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;beTrue&lt;/span&gt;());
        &lt;span class="pl-c1"&gt;done&lt;/span&gt;();
    }];
});&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;waitUntil&lt;/code&gt; also optionally takes a timeout parameter:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c1"&gt;waitUntil&lt;/span&gt;(&lt;span class="pl-c1"&gt;timeout&lt;/span&gt;: &lt;span class="pl-c1"&gt;10&lt;/span&gt;) { done &lt;span class="pl-k"&gt;in&lt;/span&gt;
    ocean.&lt;span class="pl-smi"&gt;goFish&lt;/span&gt; { success &lt;span class="pl-k"&gt;in&lt;/span&gt;
        &lt;span class="pl-c1"&gt;expect&lt;/span&gt;(success).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;beTrue&lt;/span&gt;())
        &lt;span class="pl-c1"&gt;done&lt;/span&gt;()
    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight highlight-source-objc"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Objective-C&lt;/span&gt;

&lt;span class="pl-en"&gt;waitUntilTimeout&lt;/span&gt;(&lt;span class="pl-c1"&gt;10&lt;/span&gt;, ^(&lt;span class="pl-k"&gt;void&lt;/span&gt; (^done)(&lt;span class="pl-k"&gt;void&lt;/span&gt;)){
    [ocean &lt;span class="pl-c1"&gt;goFishWithHandler:&lt;/span&gt;^(&lt;span class="pl-c1"&gt;BOOL&lt;/span&gt; success){
        &lt;span class="pl-c1"&gt;expect&lt;/span&gt;(success).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;beTrue&lt;/span&gt;());
        &lt;span class="pl-c1"&gt;done&lt;/span&gt;();
    }];
});&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note: &lt;code&gt;waitUntil&lt;/code&gt; triggers its timeout code on the main thread. Blocking the main
thread will cause Nimble to stop the run loop to continue. This can cause test
pollution for whatever incomplete code that was running on the main thread.
Blocking the main thread can be caused by blocking IO, calls to sleep(),
deadlocks, and synchronous IPC.&lt;/p&gt;
&lt;p&gt;In some cases (e.g. when running on slower machines) it can be useful to modify
the default timeout and poll interval values. This can be done as follows:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Increase the global timeout to 5 seconds:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;Nimble.&lt;span class="pl-smi"&gt;AsyncDefaults&lt;/span&gt;.&lt;span class="pl-smi"&gt;Timeout&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Slow the polling interval to 0.1 seconds:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;Nimble.&lt;span class="pl-smi"&gt;AsyncDefaults&lt;/span&gt;.&lt;span class="pl-smi"&gt;PollInterval&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;0.1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-objective-c-support" class="anchor" aria-hidden="true" href="#objective-c-support"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Objective-C Support&lt;/h2&gt;
&lt;p&gt;Nimble has full support for Objective-C. However, there are two things
to keep in mind when using Nimble in Objective-C:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;All parameters passed to the &lt;code&gt;expect&lt;/code&gt; function, as well as matcher
functions like &lt;code&gt;equal&lt;/code&gt;, must be Objective-C objects or can be converted into
an &lt;code&gt;NSObject&lt;/code&gt; equivalent:&lt;/p&gt;
&lt;div class="highlight highlight-source-objc"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Objective-C&lt;/span&gt;

@import Nimble;

&lt;span class="pl-en"&gt;expect&lt;/span&gt;(@(&lt;span class="pl-c1"&gt;1&lt;/span&gt; + &lt;span class="pl-c1"&gt;1&lt;/span&gt;)).to(equal(@&lt;span class="pl-c1"&gt;2&lt;/span&gt;));
&lt;span class="pl-en"&gt;expect&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;@"&lt;/span&gt;Hello world&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;).to(contain(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;@"&lt;/span&gt;world&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;));

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Boxed as NSNumber *&lt;/span&gt;
&lt;span class="pl-en"&gt;expect&lt;/span&gt;(&lt;span class="pl-c1"&gt;2&lt;/span&gt;).to(equal(&lt;span class="pl-c1"&gt;2&lt;/span&gt;));
&lt;span class="pl-en"&gt;expect&lt;/span&gt;(&lt;span class="pl-c1"&gt;1.2&lt;/span&gt;).to(beLessThan(&lt;span class="pl-c1"&gt;2.0&lt;/span&gt;));
&lt;span class="pl-en"&gt;expect&lt;/span&gt;(&lt;span class="pl-c1"&gt;true&lt;/span&gt;).to(beTruthy());

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Boxed as NSString *&lt;/span&gt;
&lt;span class="pl-en"&gt;expect&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Hello world&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;).to(equal(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Hello world&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;));

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Boxed as NSRange&lt;/span&gt;
&lt;span class="pl-en"&gt;expect&lt;/span&gt;(&lt;span class="pl-c1"&gt;NSMakeRange&lt;/span&gt;(&lt;span class="pl-c1"&gt;1&lt;/span&gt;, &lt;span class="pl-c1"&gt;10&lt;/span&gt;)).to(equal(&lt;span class="pl-c1"&gt;NSMakeRange&lt;/span&gt;(&lt;span class="pl-c1"&gt;1&lt;/span&gt;, &lt;span class="pl-c1"&gt;10&lt;/span&gt;)));&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To make an expectation on an expression that does not return a value,
such as &lt;code&gt;-[NSException raise]&lt;/code&gt;, use &lt;code&gt;expectAction&lt;/code&gt; instead of
&lt;code&gt;expect&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-objc"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Objective-C&lt;/span&gt;

&lt;span class="pl-en"&gt;expectAction&lt;/span&gt;(^{ [exception &lt;span class="pl-c1"&gt;raise&lt;/span&gt;]; }).to(raiseException());&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The following types are currently converted to an &lt;code&gt;NSObject&lt;/code&gt; type:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;C Numeric types&lt;/strong&gt; are converted to &lt;code&gt;NSNumber *&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NSRange&lt;/code&gt; is converted to &lt;code&gt;NSValue *&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;char *&lt;/code&gt; is converted to &lt;code&gt;NSString *&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For the following matchers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;equal&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;beGreaterThan&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;beGreaterThanOrEqual&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;beLessThan&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;beLessThanOrEqual&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;beCloseTo&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;beTrue&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;beFalse&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;beTruthy&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;beFalsy&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;haveCount&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you would like to see more, &lt;a href="https://github.com/Quick/Nimble/issues"&gt;file an issue&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-disabling-objective-c-shorthand" class="anchor" aria-hidden="true" href="#disabling-objective-c-shorthand"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Disabling Objective-C Shorthand&lt;/h2&gt;
&lt;p&gt;Nimble provides a shorthand for expressing expectations using the
&lt;code&gt;expect&lt;/code&gt; function. To disable this shorthand in Objective-C, define the
&lt;code&gt;NIMBLE_DISABLE_SHORT_SYNTAX&lt;/code&gt; macro somewhere in your code before
importing Nimble:&lt;/p&gt;
&lt;div class="highlight highlight-source-objc"&gt;&lt;pre&gt;#&lt;span class="pl-k"&gt;define&lt;/span&gt; &lt;span class="pl-en"&gt;NIMBLE_DISABLE_SHORT_SYNTAX&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;

@import Nimble;

&lt;span class="pl-en"&gt;NMB_expect&lt;/span&gt;(^{ &lt;span class="pl-k"&gt;return&lt;/span&gt; seagull.&lt;span class="pl-smi"&gt;squawk&lt;/span&gt;; }, __FILE__, __LINE__).to(NMB_equal(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;@"&lt;/span&gt;Squee!&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;));&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;Disabling the shorthand is useful if you're testing functions with
names that conflict with Nimble functions, such as &lt;code&gt;expect&lt;/code&gt; or
&lt;code&gt;equal&lt;/code&gt;. If that's not the case, there's no point in disabling the
shorthand.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;&lt;a id="user-content-built-in-matcher-functions" class="anchor" aria-hidden="true" href="#built-in-matcher-functions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Built-in Matcher Functions&lt;/h1&gt;
&lt;p&gt;Nimble includes a wide variety of matcher functions.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-type-checking" class="anchor" aria-hidden="true" href="#type-checking"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Type Checking&lt;/h2&gt;
&lt;p&gt;Nimble supports checking the type membership of any kind of object, whether
Objective-C conformant or not:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;protocol&lt;/span&gt; &lt;span class="pl-en"&gt;SomeProtocol&lt;/span&gt;{}
&lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;SomeClassConformingToProtocol&lt;/span&gt;: &lt;span class="pl-e"&gt;SomeProtocol&lt;/span&gt;{}
&lt;span class="pl-k"&gt;struct&lt;/span&gt; &lt;span class="pl-en"&gt;SomeStructConformingToProtocol&lt;/span&gt;: &lt;span class="pl-e"&gt;SomeProtocol&lt;/span&gt;{}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; The following tests pass&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(&lt;span class="pl-c1"&gt;1&lt;/span&gt;).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;beAKindOf&lt;/span&gt;(&lt;span class="pl-c1"&gt;Int&lt;/span&gt;.&lt;span class="pl-k"&gt;self&lt;/span&gt;))
&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;turtle&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;beAKindOf&lt;/span&gt;(&lt;span class="pl-c1"&gt;String&lt;/span&gt;.&lt;span class="pl-k"&gt;self&lt;/span&gt;))

&lt;span class="pl-k"&gt;let&lt;/span&gt; classObject &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;SomeClassConformingToProtocol&lt;/span&gt;()
&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(classObject).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;beAKindOf&lt;/span&gt;(SomeProtocol.&lt;span class="pl-k"&gt;self&lt;/span&gt;))
&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(classObject).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;beAKindOf&lt;/span&gt;(SomeClassConformingToProtocol.&lt;span class="pl-k"&gt;self&lt;/span&gt;))
&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(classObject).&lt;span class="pl-c1"&gt;toNot&lt;/span&gt;(&lt;span class="pl-c1"&gt;beAKindOf&lt;/span&gt;(SomeStructConformingToProtocol.&lt;span class="pl-k"&gt;self&lt;/span&gt;))

&lt;span class="pl-k"&gt;let&lt;/span&gt; structObject &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;SomeStructConformingToProtocol&lt;/span&gt;()
&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(structObject).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;beAKindOf&lt;/span&gt;(SomeProtocol.&lt;span class="pl-k"&gt;self&lt;/span&gt;))
&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(structObject).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;beAKindOf&lt;/span&gt;(SomeStructConformingToProtocol.&lt;span class="pl-k"&gt;self&lt;/span&gt;))
&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(structObject).&lt;span class="pl-c1"&gt;toNot&lt;/span&gt;(&lt;span class="pl-c1"&gt;beAKindOf&lt;/span&gt;(SomeClassConformingToProtocol.&lt;span class="pl-k"&gt;self&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight highlight-source-objc"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Objective-C&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; The following tests pass&lt;/span&gt;
&lt;span class="pl-c1"&gt;NSMutableArray&lt;/span&gt; *array = [&lt;span class="pl-c1"&gt;NSMutableArray&lt;/span&gt; &lt;span class="pl-c1"&gt;array&lt;/span&gt;];
&lt;span class="pl-en"&gt;expect&lt;/span&gt;(array).to(beAKindOf([&lt;span class="pl-c1"&gt;NSArray&lt;/span&gt; &lt;span class="pl-c1"&gt;class&lt;/span&gt;]));
&lt;span class="pl-en"&gt;expect&lt;/span&gt;(@&lt;span class="pl-c1"&gt;1&lt;/span&gt;).toNot(beAKindOf([&lt;span class="pl-c1"&gt;NSNull&lt;/span&gt; &lt;span class="pl-c1"&gt;class&lt;/span&gt;]));&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Objects can be tested for their exact types using the &lt;code&gt;beAnInstanceOf&lt;/code&gt; matcher:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;protocol&lt;/span&gt; &lt;span class="pl-en"&gt;SomeProtocol&lt;/span&gt;{}
&lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;SomeClassConformingToProtocol&lt;/span&gt;: &lt;span class="pl-e"&gt;SomeProtocol&lt;/span&gt;{}
&lt;span class="pl-k"&gt;struct&lt;/span&gt; &lt;span class="pl-en"&gt;SomeStructConformingToProtocol&lt;/span&gt;: &lt;span class="pl-e"&gt;SomeProtocol&lt;/span&gt;{}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Unlike the 'beKindOf' matcher, the 'beAnInstanceOf' matcher only&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; passes if the object is the EXACT type requested. The following&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; tests pass -- note its behavior when working in an inheritance hierarchy.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(&lt;span class="pl-c1"&gt;1&lt;/span&gt;).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;beAnInstanceOf&lt;/span&gt;(&lt;span class="pl-c1"&gt;Int&lt;/span&gt;.&lt;span class="pl-k"&gt;self&lt;/span&gt;))
&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;turtle&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;beAnInstanceOf&lt;/span&gt;(&lt;span class="pl-c1"&gt;String&lt;/span&gt;.&lt;span class="pl-k"&gt;self&lt;/span&gt;))

&lt;span class="pl-k"&gt;let&lt;/span&gt; classObject &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;SomeClassConformingToProtocol&lt;/span&gt;()
&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(classObject).&lt;span class="pl-c1"&gt;toNot&lt;/span&gt;(&lt;span class="pl-c1"&gt;beAnInstanceOf&lt;/span&gt;(SomeProtocol.&lt;span class="pl-k"&gt;self&lt;/span&gt;))
&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(classObject).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;beAnInstanceOf&lt;/span&gt;(SomeClassConformingToProtocol.&lt;span class="pl-k"&gt;self&lt;/span&gt;))
&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(classObject).&lt;span class="pl-c1"&gt;toNot&lt;/span&gt;(&lt;span class="pl-c1"&gt;beAnInstanceOf&lt;/span&gt;(SomeStructConformingToProtocol.&lt;span class="pl-k"&gt;self&lt;/span&gt;))

&lt;span class="pl-k"&gt;let&lt;/span&gt; structObject &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;SomeStructConformingToProtocol&lt;/span&gt;()
&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(structObject).&lt;span class="pl-c1"&gt;toNot&lt;/span&gt;(&lt;span class="pl-c1"&gt;beAnInstanceOf&lt;/span&gt;(SomeProtocol.&lt;span class="pl-k"&gt;self&lt;/span&gt;))
&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(structObject).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;beAnInstanceOf&lt;/span&gt;(SomeStructConformingToProtocol.&lt;span class="pl-k"&gt;self&lt;/span&gt;))
&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(structObject).&lt;span class="pl-c1"&gt;toNot&lt;/span&gt;(&lt;span class="pl-c1"&gt;beAnInstanceOf&lt;/span&gt;(SomeClassConformingToProtocol.&lt;span class="pl-k"&gt;self&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-equivalence" class="anchor" aria-hidden="true" href="#equivalence"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Equivalence&lt;/h2&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'actual' is equivalent to 'expected':&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(actual).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;equal&lt;/span&gt;(expected))
&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(actual) &lt;span class="pl-k"&gt;==&lt;/span&gt; expected

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'actual' is not equivalent to 'expected':&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(actual).&lt;span class="pl-c1"&gt;toNot&lt;/span&gt;(&lt;span class="pl-c1"&gt;equal&lt;/span&gt;(expected))
&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(actual) &lt;span class="pl-k"&gt;!=&lt;/span&gt; expected&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight highlight-source-objc"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Objective-C&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'actual' is equivalent to 'expected':&lt;/span&gt;
&lt;span class="pl-en"&gt;expect&lt;/span&gt;(actual).to(equal(expected))

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'actual' is not equivalent to 'expected':&lt;/span&gt;
expect(actual).toNot(equal(expected))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Values must be &lt;code&gt;Equatable&lt;/code&gt;, &lt;code&gt;Comparable&lt;/code&gt;, or subclasses of &lt;code&gt;NSObject&lt;/code&gt;.
&lt;code&gt;equal&lt;/code&gt; will always fail when used to compare one or more &lt;code&gt;nil&lt;/code&gt; values.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-identity" class="anchor" aria-hidden="true" href="#identity"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Identity&lt;/h2&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'actual' has the same pointer address as 'expected':&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(actual).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;beIdenticalTo&lt;/span&gt;(expected))
&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(actual) &lt;span class="pl-k"&gt;===&lt;/span&gt; expected

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'actual' does not have the same pointer address as 'expected':&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(actual).&lt;span class="pl-c1"&gt;toNot&lt;/span&gt;(&lt;span class="pl-c1"&gt;beIdenticalTo&lt;/span&gt;(expected))
&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(actual) &lt;span class="pl-k"&gt;!==&lt;/span&gt; expected&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It is important to remember that &lt;code&gt;beIdenticalTo&lt;/code&gt; only makes sense when comparing
types with reference semantics, which have a notion of identity. In Swift,
that means types that are defined as a &lt;code&gt;class&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This matcher will not work when comparing types with value semantics such as
those defined as a &lt;code&gt;struct&lt;/code&gt; or &lt;code&gt;enum&lt;/code&gt;. If you need to compare two value types,
consider what it means for instances of your type to be identical. This may mean
comparing individual properties or, if it makes sense to do so, conforming your type
to &lt;code&gt;Equatable&lt;/code&gt; and using Nimble's equivalence matchers instead.&lt;/p&gt;
&lt;div class="highlight highlight-source-objc"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Objective-C&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'actual' has the same pointer address as 'expected':&lt;/span&gt;
&lt;span class="pl-en"&gt;expect&lt;/span&gt;(actual).to(beIdenticalTo(expected));

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'actual' does not have the same pointer address as 'expected':&lt;/span&gt;
&lt;span class="pl-en"&gt;expect&lt;/span&gt;(actual).toNot(beIdenticalTo(expected));&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-comparisons" class="anchor" aria-hidden="true" href="#comparisons"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Comparisons&lt;/h2&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(actual).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;beLessThan&lt;/span&gt;(expected))
&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(actual) &lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt; expected

&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(actual).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;beLessThanOrEqualTo&lt;/span&gt;(expected))
&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(actual) &lt;span class="pl-k"&gt;&amp;lt;=&lt;/span&gt; expected

&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(actual).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;beGreaterThan&lt;/span&gt;(expected))
&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(actual) &lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; expected

&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(actual).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;beGreaterThanOrEqualTo&lt;/span&gt;(expected))
&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(actual) &lt;span class="pl-k"&gt;&amp;gt;=&lt;/span&gt; expected&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight highlight-source-objc"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Objective-C&lt;/span&gt;

&lt;span class="pl-en"&gt;expect&lt;/span&gt;(actual).to(beLessThan(expected));
&lt;span class="pl-en"&gt;expect&lt;/span&gt;(actual).to(beLessThanOrEqualTo(expected));
&lt;span class="pl-en"&gt;expect&lt;/span&gt;(actual).to(beGreaterThan(expected));
&lt;span class="pl-en"&gt;expect&lt;/span&gt;(actual).to(beGreaterThanOrEqualTo(expected));&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;Values given to the comparison matchers above must implement
&lt;code&gt;Comparable&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Because of how computers represent floating point numbers, assertions
that two floating point numbers be equal will sometimes fail. To express
that two numbers should be close to one another within a certain margin
of error, use &lt;code&gt;beCloseTo&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(actual).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;beCloseTo&lt;/span&gt;(expected, &lt;span class="pl-c1"&gt;within&lt;/span&gt;: delta))&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight highlight-source-objc"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Objective-C&lt;/span&gt;

&lt;span class="pl-en"&gt;expect&lt;/span&gt;(actual).to(beCloseTo(expected).within(delta));&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For example, to assert that &lt;code&gt;10.01&lt;/code&gt; is close to &lt;code&gt;10&lt;/code&gt;, you can write:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(&lt;span class="pl-c1"&gt;10.01&lt;/span&gt;).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;beCloseTo&lt;/span&gt;(&lt;span class="pl-c1"&gt;10&lt;/span&gt;, &lt;span class="pl-c1"&gt;within&lt;/span&gt;: &lt;span class="pl-c1"&gt;0.1&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight highlight-source-objc"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Objective-C&lt;/span&gt;

&lt;span class="pl-en"&gt;expect&lt;/span&gt;(@(&lt;span class="pl-c1"&gt;10.01&lt;/span&gt;)).to(beCloseTo(@&lt;span class="pl-c1"&gt;10&lt;/span&gt;).within(&lt;span class="pl-c1"&gt;0.1&lt;/span&gt;));&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There is also an operator shortcut available in Swift:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(actual) &lt;span class="pl-k"&gt;≈&lt;/span&gt; expected
&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(actual) &lt;span class="pl-k"&gt;≈&lt;/span&gt; (expected, delta)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(Type &lt;kbd&gt;option&lt;/kbd&gt;+&lt;kbd&gt;x&lt;/kbd&gt; to get &lt;code&gt;≈&lt;/code&gt; on a U.S. keyboard)&lt;/p&gt;
&lt;p&gt;The former version uses the default delta of 0.0001. Here is yet another way to do this:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(actual) &lt;span class="pl-k"&gt;≈&lt;/span&gt; expected &lt;span class="pl-k"&gt;±&lt;/span&gt; delta
&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(actual) &lt;span class="pl-k"&gt;==&lt;/span&gt; expected &lt;span class="pl-k"&gt;±&lt;/span&gt; delta
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(Type &lt;kbd&gt;option&lt;/kbd&gt;+&lt;kbd&gt;shift&lt;/kbd&gt;+&lt;kbd&gt;=&lt;/kbd&gt; to get &lt;code&gt;±&lt;/code&gt; on a U.S. keyboard)&lt;/p&gt;
&lt;p&gt;If you are comparing arrays of floating point numbers, you'll find the following useful:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c1"&gt;expect&lt;/span&gt;([&lt;span class="pl-c1"&gt;0.0&lt;/span&gt;, &lt;span class="pl-c1"&gt;2.0&lt;/span&gt;]) &lt;span class="pl-k"&gt;≈&lt;/span&gt; [&lt;span class="pl-c1"&gt;0.0001&lt;/span&gt;, &lt;span class="pl-c1"&gt;2.0001&lt;/span&gt;]
&lt;span class="pl-c1"&gt;expect&lt;/span&gt;([&lt;span class="pl-c1"&gt;0.0&lt;/span&gt;, &lt;span class="pl-c1"&gt;2.0&lt;/span&gt;]).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;beCloseTo&lt;/span&gt;([&lt;span class="pl-c1"&gt;0.1&lt;/span&gt;, &lt;span class="pl-c1"&gt;2.1&lt;/span&gt;], &lt;span class="pl-c1"&gt;within&lt;/span&gt;: &lt;span class="pl-c1"&gt;0.1&lt;/span&gt;))
&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;Values given to the &lt;code&gt;beCloseTo&lt;/code&gt; matcher must be coercable into a
&lt;code&gt;Double&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;&lt;a id="user-content-typesclasses" class="anchor" aria-hidden="true" href="#typesclasses"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Types/Classes&lt;/h2&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'instance' is an instance of 'aClass':&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(instance).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;beAnInstanceOf&lt;/span&gt;(aClass))

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'instance' is an instance of 'aClass' or any of its subclasses:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(instance).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;beAKindOf&lt;/span&gt;(aClass))&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight highlight-source-objc"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Objective-C&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'instance' is an instance of 'aClass':&lt;/span&gt;
&lt;span class="pl-en"&gt;expect&lt;/span&gt;(instance).to(beAnInstanceOf(aClass));

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'instance' is an instance of 'aClass' or any of its subclasses:&lt;/span&gt;
&lt;span class="pl-en"&gt;expect&lt;/span&gt;(instance).to(beAKindOf(aClass));&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;Instances must be Objective-C objects: subclasses of &lt;code&gt;NSObject&lt;/code&gt;,
or Swift objects bridged to Objective-C with the &lt;code&gt;@objc&lt;/code&gt; prefix.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;For example, to assert that &lt;code&gt;dolphin&lt;/code&gt; is a kind of &lt;code&gt;Mammal&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(dolphin).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;beAKindOf&lt;/span&gt;(Mammal))&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight highlight-source-objc"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Objective-C&lt;/span&gt;

&lt;span class="pl-en"&gt;expect&lt;/span&gt;(dolphin).to(beAKindOf([Mammal &lt;span class="pl-c1"&gt;class&lt;/span&gt;]));&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;beAnInstanceOf&lt;/code&gt; uses the &lt;code&gt;-[NSObject isMemberOfClass:]&lt;/code&gt; method to
test membership. &lt;code&gt;beAKindOf&lt;/code&gt; uses &lt;code&gt;-[NSObject isKindOfClass:]&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;&lt;a id="user-content-truthiness" class="anchor" aria-hidden="true" href="#truthiness"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Truthiness&lt;/h2&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'actual' is not nil, true, or an object with a boolean value of true:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(actual).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;beTruthy&lt;/span&gt;())

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'actual' is only true (not nil or an object conforming to Boolean true):&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(actual).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;beTrue&lt;/span&gt;())

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'actual' is nil, false, or an object with a boolean value of false:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(actual).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;beFalsy&lt;/span&gt;())

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'actual' is only false (not nil or an object conforming to Boolean false):&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(actual).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;beFalse&lt;/span&gt;())

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'actual' is nil:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(actual).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;beNil&lt;/span&gt;())&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight highlight-source-objc"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Objective-C&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'actual' is not nil, true, or an object with a boolean value of true:&lt;/span&gt;
&lt;span class="pl-en"&gt;expect&lt;/span&gt;(actual).to(beTruthy());

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'actual' is only true (not nil or an object conforming to Boolean true):&lt;/span&gt;
&lt;span class="pl-en"&gt;expect&lt;/span&gt;(actual).to(beTrue());

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'actual' is nil, false, or an object with a boolean value of false:&lt;/span&gt;
&lt;span class="pl-en"&gt;expect&lt;/span&gt;(actual).to(beFalsy());

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'actual' is only false (not nil or an object conforming to Boolean false):&lt;/span&gt;
&lt;span class="pl-en"&gt;expect&lt;/span&gt;(actual).to(beFalse());

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'actual' is nil:&lt;/span&gt;
&lt;span class="pl-en"&gt;expect&lt;/span&gt;(actual).to(beNil());&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-swift-assertions" class="anchor" aria-hidden="true" href="#swift-assertions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Swift Assertions&lt;/h2&gt;
&lt;p&gt;If you're using Swift, you can use the &lt;code&gt;throwAssertion&lt;/code&gt; matcher to check if an assertion is thrown (e.g. &lt;code&gt;fatalError()&lt;/code&gt;). This is made possible by &lt;a href="https://github.com/mattgallagher"&gt;@mattgallagher&lt;/a&gt;'s &lt;a href="https://github.com/mattgallagher/CwlPreconditionTesting"&gt;CwlPreconditionTesting&lt;/a&gt; library.&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'somethingThatThrows()' throws an assertion, &lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; such as by calling 'fatalError()' or if a precondition fails:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;expect { &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;somethingThatThrows&lt;/span&gt;() }.&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;throwAssertion&lt;/span&gt;())
expect { () &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;Void&lt;/span&gt; &lt;span class="pl-k"&gt;in&lt;/span&gt; &lt;span class="pl-c1"&gt;fatalError&lt;/span&gt;() }.&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;throwAssertion&lt;/span&gt;())
expect { &lt;span class="pl-c1"&gt;precondition&lt;/span&gt;(&lt;span class="pl-c1"&gt;false&lt;/span&gt;) }.&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;throwAssertion&lt;/span&gt;())

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if throwing an NSError is not equal to throwing an assertion:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;expect { &lt;span class="pl-k"&gt;throw&lt;/span&gt; &lt;span class="pl-c1"&gt;NSError&lt;/span&gt;(&lt;span class="pl-c1"&gt;domain&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;test&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;code&lt;/span&gt;: &lt;span class="pl-c1"&gt;0&lt;/span&gt;, &lt;span class="pl-c1"&gt;userInfo&lt;/span&gt;: &lt;span class="pl-c1"&gt;nil&lt;/span&gt;) }.&lt;span class="pl-c1"&gt;toNot&lt;/span&gt;(&lt;span class="pl-c1"&gt;throwAssertion&lt;/span&gt;())

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if the code after the precondition check is not run:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;var&lt;/span&gt; reachedPoint1 &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;false&lt;/span&gt;
&lt;span class="pl-k"&gt;var&lt;/span&gt; reachedPoint2 &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;false&lt;/span&gt;
expect {
    reachedPoint1 &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;
    &lt;span class="pl-c1"&gt;precondition&lt;/span&gt;(&lt;span class="pl-c1"&gt;false&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;condition message&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    reachedPoint2 &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;
}.&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;throwAssertion&lt;/span&gt;())

&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(reachedPoint1) &lt;span class="pl-k"&gt;==&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;
&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(reachedPoint2) &lt;span class="pl-k"&gt;==&lt;/span&gt; &lt;span class="pl-c1"&gt;false&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This feature is only available in Swift.&lt;/li&gt;
&lt;li&gt;It is only supported for &lt;code&gt;x86_64&lt;/code&gt; binaries, meaning &lt;em&gt;you cannot run this matcher on iOS devices, only simulators&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;The tvOS simulator is supported, but using a different mechanism, requiring you to turn off the &lt;code&gt;Debug executable&lt;/code&gt; scheme setting for your tvOS scheme's Test configuration.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-swift-error-handling" class="anchor" aria-hidden="true" href="#swift-error-handling"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Swift Error Handling&lt;/h2&gt;
&lt;p&gt;You can use the &lt;code&gt;throwError&lt;/code&gt; matcher to check if an error is thrown.&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'somethingThatThrows()' throws an 'Error':&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;expect { &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;somethingThatThrows&lt;/span&gt;() }.&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;throwError&lt;/span&gt;())

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'somethingThatThrows()' throws an error within a particular domain:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;expect { &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;somethingThatThrows&lt;/span&gt;() }.&lt;span class="pl-c1"&gt;to&lt;/span&gt;(throwError { (&lt;span class="pl-c1"&gt;error&lt;/span&gt;: &lt;span class="pl-c1"&gt;Error&lt;/span&gt;) &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-c1"&gt;expect&lt;/span&gt;(error.&lt;span class="pl-smi"&gt;_domain&lt;/span&gt;).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;equal&lt;/span&gt;(NSCocoaErrorDomain))
})

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'somethingThatThrows()' throws a particular error enum case:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;expect { &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;somethingThatThrows&lt;/span&gt;() }.&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;throwError&lt;/span&gt;(NSCocoaError.&lt;span class="pl-smi"&gt;PropertyListReadCorruptError&lt;/span&gt;))

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'somethingThatThrows()' throws an error of a particular type:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;expect { &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;somethingThatThrows&lt;/span&gt;() }.&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;throwError&lt;/span&gt;(&lt;span class="pl-c1"&gt;errorType&lt;/span&gt;: NimbleError.&lt;span class="pl-k"&gt;self&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When working directly with &lt;code&gt;Error&lt;/code&gt; values, using the &lt;code&gt;matchError&lt;/code&gt; matcher
allows you to perform certain checks on the error itself without having to
explicitly cast the error.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;matchError&lt;/code&gt; matcher allows you to check whether or not the error:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;is the same &lt;em&gt;type&lt;/em&gt; of error you are expecting.&lt;/li&gt;
&lt;li&gt;represents a particular error value that you are expecting.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This can be useful when using &lt;code&gt;Result&lt;/code&gt; or &lt;code&gt;Promise&lt;/code&gt; types, for example.&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;let&lt;/span&gt; actual&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;Error&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;...&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'actual' represents any error value from the NimbleErrorEnum type:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(actual).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;matchError&lt;/span&gt;(NimbleErrorEnum.&lt;span class="pl-k"&gt;self&lt;/span&gt;))

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'actual' represents the case 'timeout' from the NimbleErrorEnum type:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(actual).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;matchError&lt;/span&gt;(NimbleErrorEnum.&lt;span class="pl-smi"&gt;timeout&lt;/span&gt;))

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'actual' contains an NSError equal to the one provided:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(actual).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;matchError&lt;/span&gt;(&lt;span class="pl-c1"&gt;NSError&lt;/span&gt;(&lt;span class="pl-c1"&gt;domain&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;err&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;code&lt;/span&gt;: &lt;span class="pl-c1"&gt;123&lt;/span&gt;, &lt;span class="pl-c1"&gt;userInfo&lt;/span&gt;: &lt;span class="pl-c1"&gt;nil&lt;/span&gt;)))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note: This feature is only available in Swift.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-exceptions" class="anchor" aria-hidden="true" href="#exceptions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Exceptions&lt;/h2&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'actual', when evaluated, raises an exception:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(actual).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;raiseException&lt;/span&gt;())

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'actual' raises an exception with the given name:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(actual).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;raiseException&lt;/span&gt;(&lt;span class="pl-c1"&gt;named&lt;/span&gt;: name))

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'actual' raises an exception with the given name and reason:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(actual).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;raiseException&lt;/span&gt;(&lt;span class="pl-c1"&gt;named&lt;/span&gt;: name, &lt;span class="pl-c1"&gt;reason&lt;/span&gt;: reason))

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'actual' raises an exception which passes expectations defined in the given closure:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; (in this case, if the exception's name begins with "a r")&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;expect { exception.&lt;span class="pl-c1"&gt;raise&lt;/span&gt;() }.&lt;span class="pl-c1"&gt;to&lt;/span&gt;(raiseException { (&lt;span class="pl-c1"&gt;exception&lt;/span&gt;: NSException) &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-c1"&gt;expect&lt;/span&gt;(exception.&lt;span class="pl-smi"&gt;name&lt;/span&gt;).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;beginWith&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;a r&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
})&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight highlight-source-objc"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Objective-C&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'actual', when evaluated, raises an exception:&lt;/span&gt;
&lt;span class="pl-en"&gt;expect&lt;/span&gt;(actual).to(raiseException())

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'actual' raises an exception with the given name&lt;/span&gt;
expect(actual).to(raiseException().named(name))

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'actual' raises an exception with the given name and reason:&lt;/span&gt;
expect(actual).to(raiseException().named(name).reason(reason))

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'actual' raises an exception and it passes expectations defined in the given block:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; (in this case, if name begins with "a r")&lt;/span&gt;
expect(actual).to(raiseException().satisfyingBlock(^(&lt;span class="pl-c1"&gt;NSException&lt;/span&gt; *exception) {
    &lt;span class="pl-c1"&gt;expect&lt;/span&gt;(exception.&lt;span class="pl-smi"&gt;name&lt;/span&gt;).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;beginWith&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;@"&lt;/span&gt;a r&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;));
}));&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note: Swift currently doesn't have exceptions (see &lt;a href="https://github.com/Quick/Nimble/issues/220#issuecomment-172667064"&gt;#220&lt;/a&gt;).
Only Objective-C code can raise exceptions that Nimble will catch.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-collection-membership" class="anchor" aria-hidden="true" href="#collection-membership"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Collection Membership&lt;/h2&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if all of the expected values are members of 'actual':&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(actual).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;contain&lt;/span&gt;(expected&lt;span class="pl-k"&gt;...&lt;/span&gt;))

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'actual' is empty (i.e. it contains no elements):&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(actual).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;beEmpty&lt;/span&gt;())&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight highlight-source-objc"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Objective-C&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if expected is a member of 'actual':&lt;/span&gt;
&lt;span class="pl-en"&gt;expect&lt;/span&gt;(actual).to(contain(expected));

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'actual' is empty (i.e. it contains no elements):&lt;/span&gt;
&lt;span class="pl-en"&gt;expect&lt;/span&gt;(actual).to(beEmpty());&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;In Swift &lt;code&gt;contain&lt;/code&gt; takes any number of arguments. The expectation
passes if all of them are members of the collection. In Objective-C,
&lt;code&gt;contain&lt;/code&gt; only takes one argument &lt;a href="https://github.com/Quick/Nimble/issues/27"&gt;for now&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;For example, to assert that a list of sea creature names contains
"dolphin" and "starfish":&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c1"&gt;expect&lt;/span&gt;([&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;whale&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;dolphin&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;starfish&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;contain&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;dolphin&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;starfish&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight highlight-source-objc"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Objective-C&lt;/span&gt;

&lt;span class="pl-en"&gt;expect&lt;/span&gt;(@[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;@"&lt;/span&gt;whale&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;@"&lt;/span&gt;dolphin&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;@"&lt;/span&gt;starfish&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]).to(contain(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;@"&lt;/span&gt;dolphin&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;));
&lt;span class="pl-en"&gt;expect&lt;/span&gt;(@[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;@"&lt;/span&gt;whale&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;@"&lt;/span&gt;dolphin&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;@"&lt;/span&gt;starfish&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]).to(contain(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;@"&lt;/span&gt;starfish&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;));&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;contain&lt;/code&gt; and &lt;code&gt;beEmpty&lt;/code&gt; expect collections to be instances of
&lt;code&gt;NSArray&lt;/code&gt;, &lt;code&gt;NSSet&lt;/code&gt;, or a Swift collection composed of &lt;code&gt;Equatable&lt;/code&gt; elements.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To test whether a set of elements is present at the beginning or end of
an ordered collection, use &lt;code&gt;beginWith&lt;/code&gt; and &lt;code&gt;endWith&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if the elements in expected appear at the beginning of 'actual':&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(actual).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;beginWith&lt;/span&gt;(expected&lt;span class="pl-k"&gt;...&lt;/span&gt;))

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if the the elements in expected come at the end of 'actual':&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(actual).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;endWith&lt;/span&gt;(expected&lt;span class="pl-k"&gt;...&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight highlight-source-objc"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Objective-C&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if the elements in expected appear at the beginning of 'actual':&lt;/span&gt;
&lt;span class="pl-en"&gt;expect&lt;/span&gt;(actual).to(beginWith(expected));

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if the the elements in expected come at the end of 'actual':&lt;/span&gt;
&lt;span class="pl-en"&gt;expect&lt;/span&gt;(actual).to(endWith(expected));&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;beginWith&lt;/code&gt; and &lt;code&gt;endWith&lt;/code&gt; expect collections to be instances of
&lt;code&gt;NSArray&lt;/code&gt;, or ordered Swift collections composed of &lt;code&gt;Equatable&lt;/code&gt;
elements.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Like &lt;code&gt;contain&lt;/code&gt;, in Objective-C &lt;code&gt;beginWith&lt;/code&gt; and &lt;code&gt;endWith&lt;/code&gt; only support
a single argument &lt;a href="https://github.com/Quick/Nimble/issues/27"&gt;for now&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For code that returns collections of complex objects without a strict
ordering, there is the &lt;code&gt;containElementSatisfying&lt;/code&gt; matcher:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;struct&lt;/span&gt; &lt;span class="pl-en"&gt;Turtle&lt;/span&gt; {
    &lt;span class="pl-k"&gt;let&lt;/span&gt; color&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;String&lt;/span&gt;
}

&lt;span class="pl-k"&gt;let&lt;/span&gt; turtles&lt;span class="pl-k"&gt;:&lt;/span&gt; [Turtle] &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;functionThatReturnsSomeTurtlesInAnyOrder&lt;/span&gt;()

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; This set of matchers passes regardless of whether the array is &lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; [{color: "blue"}, {color: "green"}] or [{color: "green"}, {color: "blue"}]:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(turtles).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;containElementSatisfying&lt;/span&gt;({ turtle &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;return&lt;/span&gt; turtle.&lt;span class="pl-c1"&gt;color&lt;/span&gt; &lt;span class="pl-k"&gt;==&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;green&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
}))
&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(turtles).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;containElementSatisfying&lt;/span&gt;({ turtle &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;return&lt;/span&gt; turtle.&lt;span class="pl-c1"&gt;color&lt;/span&gt; &lt;span class="pl-k"&gt;==&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;blue&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
}, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;that is a turtle with color 'blue'&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; The second matcher will incorporate the provided string in the error message&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; should it fail&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight highlight-source-objc"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Objective-C&lt;/span&gt;

&lt;span class="pl-k"&gt;@interface&lt;/span&gt; &lt;span class="pl-en"&gt;Turtle&lt;/span&gt; : &lt;span class="pl-e"&gt;NSObject&lt;/span&gt;
&lt;span class="pl-k"&gt;@property&lt;/span&gt; (&lt;span class="pl-k"&gt;nonatomic&lt;/span&gt;, &lt;span class="pl-k"&gt;readonly&lt;/span&gt;, &lt;span class="pl-k"&gt;nonnull&lt;/span&gt;) &lt;span class="pl-c1"&gt;NSString&lt;/span&gt; *color;
&lt;span class="pl-k"&gt;@end&lt;/span&gt;

&lt;span class="pl-k"&gt;@implementation&lt;/span&gt; &lt;span class="pl-en"&gt;Turtle&lt;/span&gt; 
&lt;span class="pl-k"&gt;@end&lt;/span&gt;

&lt;span class="pl-c1"&gt;NSArray&lt;/span&gt;&amp;lt;Turtle *&amp;gt; * __nonnull turtles = functionThatReturnsSomeTurtlesInAnyOrder();

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; This set of matchers passes regardless of whether the array is &lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; [{color: "blue"}, {color: "green"}] or [{color: "green"}, {color: "blue"}]:&lt;/span&gt;

&lt;span class="pl-en"&gt;expect&lt;/span&gt;(turtles).to(containElementSatisfying(^&lt;span class="pl-c1"&gt;BOOL&lt;/span&gt;(&lt;span class="pl-c1"&gt;id&lt;/span&gt; __nonnull object) {
    &lt;span class="pl-k"&gt;return&lt;/span&gt; [[turtle &lt;span class="pl-c1"&gt;color&lt;/span&gt;] &lt;span class="pl-c1"&gt;isEqualToString:&lt;/span&gt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;@"&lt;/span&gt;green&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;];
}));
&lt;span class="pl-en"&gt;expect&lt;/span&gt;(turtles).to(containElementSatisfying(^&lt;span class="pl-c1"&gt;BOOL&lt;/span&gt;(&lt;span class="pl-c1"&gt;id&lt;/span&gt; __nonnull object) {
    &lt;span class="pl-k"&gt;return&lt;/span&gt; [[turtle &lt;span class="pl-c1"&gt;color&lt;/span&gt;] &lt;span class="pl-c1"&gt;isEqualToString:&lt;/span&gt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;@"&lt;/span&gt;blue&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;];
}));&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-strings" class="anchor" aria-hidden="true" href="#strings"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Strings&lt;/h2&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'actual' contains 'substring':&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(actual).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;contain&lt;/span&gt;(substring))

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'actual' begins with 'prefix':&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(actual).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;beginWith&lt;/span&gt;(&lt;span class="pl-k"&gt;prefix&lt;/span&gt;))

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'actual' ends with 'suffix':&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(actual).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;endWith&lt;/span&gt;(suffix))

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'actual' represents the empty string, "":&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(actual).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;beEmpty&lt;/span&gt;())

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'actual' matches the regular expression defined in 'expected':&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(actual).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;match&lt;/span&gt;(expected))&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight highlight-source-objc"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Objective-C&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'actual' contains 'substring':&lt;/span&gt;
&lt;span class="pl-en"&gt;expect&lt;/span&gt;(actual).to(contain(expected));

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'actual' begins with 'prefix':&lt;/span&gt;
&lt;span class="pl-en"&gt;expect&lt;/span&gt;(actual).to(beginWith(prefix));

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'actual' ends with 'suffix':&lt;/span&gt;
&lt;span class="pl-en"&gt;expect&lt;/span&gt;(actual).to(endWith(suffix));

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'actual' represents the empty string, "":&lt;/span&gt;
&lt;span class="pl-en"&gt;expect&lt;/span&gt;(actual).to(beEmpty());

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'actual' matches the regular expression defined in 'expected':&lt;/span&gt;
&lt;span class="pl-en"&gt;expect&lt;/span&gt;(actual).to(match(expected))&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-collection-elements" class="anchor" aria-hidden="true" href="#collection-elements"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Collection Elements&lt;/h2&gt;
&lt;p&gt;Nimble provides a means to check that all elements of a collection pass a given expectation.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-swift" class="anchor" aria-hidden="true" href="#swift"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Swift&lt;/h3&gt;
&lt;p&gt;In Swift, the collection must be an instance of a type conforming to
&lt;code&gt;Sequence&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Providing a custom function:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;expect&lt;/span&gt;([&lt;span class="pl-c1"&gt;1&lt;/span&gt;, &lt;span class="pl-c1"&gt;2&lt;/span&gt;, &lt;span class="pl-c1"&gt;3&lt;/span&gt;, &lt;span class="pl-c1"&gt;4&lt;/span&gt;]).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(allPass { &lt;span class="pl-c1"&gt;$0&lt;/span&gt;&lt;span class="pl-k"&gt;!&lt;/span&gt; &lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt; })

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Composing the expectation with another matcher:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;expect&lt;/span&gt;([&lt;span class="pl-c1"&gt;1&lt;/span&gt;, &lt;span class="pl-c1"&gt;2&lt;/span&gt;, &lt;span class="pl-c1"&gt;3&lt;/span&gt;, &lt;span class="pl-c1"&gt;4&lt;/span&gt;]).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;allPass&lt;/span&gt;(&lt;span class="pl-c1"&gt;beLessThan&lt;/span&gt;(&lt;span class="pl-c1"&gt;5&lt;/span&gt;)))&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-objective-c" class="anchor" aria-hidden="true" href="#objective-c"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Objective-C&lt;/h3&gt;
&lt;p&gt;In Objective-C, the collection must be an instance of a type which implements
the &lt;code&gt;NSFastEnumeration&lt;/code&gt; protocol, and whose elements are instances of a type
which subclasses &lt;code&gt;NSObject&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Additionally, unlike in Swift, there is no override to specify a custom
matcher function.&lt;/p&gt;
&lt;div class="highlight highlight-source-objc"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Objective-C&lt;/span&gt;

&lt;span class="pl-en"&gt;expect&lt;/span&gt;(@[@&lt;span class="pl-c1"&gt;1&lt;/span&gt;, @&lt;span class="pl-c1"&gt;2&lt;/span&gt;, @&lt;span class="pl-c1"&gt;3&lt;/span&gt;, @&lt;span class="pl-c1"&gt;4&lt;/span&gt;]).to(allPass(beLessThan(@&lt;span class="pl-c1"&gt;5&lt;/span&gt;)));&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-collection-count" class="anchor" aria-hidden="true" href="#collection-count"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Collection Count&lt;/h2&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'actual' contains the 'expected' number of elements:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(actual).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;haveCount&lt;/span&gt;(expected))

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'actual' does _not_ contain the 'expected' number of elements:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(actual).&lt;span class="pl-c1"&gt;notTo&lt;/span&gt;(&lt;span class="pl-c1"&gt;haveCount&lt;/span&gt;(expected))&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight highlight-source-objc"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Objective-C&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'actual' contains the 'expected' number of elements:&lt;/span&gt;
&lt;span class="pl-en"&gt;expect&lt;/span&gt;(actual).to(haveCount(expected))

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'actual' does _not_ contain the 'expected' number of elements:&lt;/span&gt;
expect(actual).notTo(haveCount(expected))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For Swift, the actual value must be an instance of a type conforming to &lt;code&gt;Collection&lt;/code&gt;.
For example, instances of &lt;code&gt;Array&lt;/code&gt;, &lt;code&gt;Dictionary&lt;/code&gt;, or &lt;code&gt;Set&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For Objective-C, the actual value must be one of the following classes, or their subclasses:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;NSArray&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NSDictionary&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NSSet&lt;/code&gt;, or&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NSHashTable&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-notifications" class="anchor" aria-hidden="true" href="#notifications"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Notifications&lt;/h2&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; testNotification &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;Notification&lt;/span&gt;(&lt;span class="pl-c1"&gt;name&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Foo&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;object&lt;/span&gt;: &lt;span class="pl-c1"&gt;nil&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; passes if the closure in expect { ... } posts a notification to the default&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; notification center.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;expect {
    NotificationCenter.&lt;span class="pl-smi"&gt;default&lt;/span&gt;.&lt;span class="pl-c1"&gt;postNotification&lt;/span&gt;(testNotification)
}.&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;postNotifications&lt;/span&gt;(&lt;span class="pl-c1"&gt;equal&lt;/span&gt;([testNotification]))

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; passes if the closure in expect { ... } posts a notification to a given&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; notification center&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; notificationCenter &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;NotificationCenter&lt;/span&gt;()
expect {
    notificationCenter.&lt;span class="pl-c1"&gt;postNotification&lt;/span&gt;(testNotification)
}.&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;postNotifications&lt;/span&gt;(&lt;span class="pl-c1"&gt;equal&lt;/span&gt;([testNotification]), &lt;span class="pl-c1"&gt;fromNotificationCenter&lt;/span&gt;: notificationCenter))&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;This matcher is only available in Swift.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;&lt;a id="user-content-matching-a-value-to-any-of-a-group-of-matchers" class="anchor" aria-hidden="true" href="#matching-a-value-to-any-of-a-group-of-matchers"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Matching a value to any of a group of matchers&lt;/h2&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; passes if actual is either less than 10 or greater than 20&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(actual).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;satisfyAnyOf&lt;/span&gt;(&lt;span class="pl-c1"&gt;beLessThan&lt;/span&gt;(&lt;span class="pl-c1"&gt;10&lt;/span&gt;), &lt;span class="pl-c1"&gt;beGreaterThan&lt;/span&gt;(&lt;span class="pl-c1"&gt;20&lt;/span&gt;)))

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; can include any number of matchers -- the following will pass&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; **be careful** -- too many matchers can be the sign of an unfocused test&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(&lt;span class="pl-c1"&gt;6&lt;/span&gt;).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;satisfyAnyOf&lt;/span&gt;(&lt;span class="pl-c1"&gt;equal&lt;/span&gt;(&lt;span class="pl-c1"&gt;2&lt;/span&gt;), &lt;span class="pl-c1"&gt;equal&lt;/span&gt;(&lt;span class="pl-c1"&gt;3&lt;/span&gt;), &lt;span class="pl-c1"&gt;equal&lt;/span&gt;(&lt;span class="pl-c1"&gt;4&lt;/span&gt;), &lt;span class="pl-c1"&gt;equal&lt;/span&gt;(&lt;span class="pl-c1"&gt;5&lt;/span&gt;), &lt;span class="pl-c1"&gt;equal&lt;/span&gt;(&lt;span class="pl-c1"&gt;6&lt;/span&gt;), &lt;span class="pl-c1"&gt;equal&lt;/span&gt;(&lt;span class="pl-c1"&gt;7&lt;/span&gt;)))

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; in Swift you also have the option to use the || operator to achieve a similar function&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(&lt;span class="pl-c1"&gt;82&lt;/span&gt;).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;beLessThan&lt;/span&gt;(&lt;span class="pl-c1"&gt;50&lt;/span&gt;) &lt;span class="pl-k"&gt;||&lt;/span&gt; &lt;span class="pl-c1"&gt;beGreaterThan&lt;/span&gt;(&lt;span class="pl-c1"&gt;80&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight highlight-source-objc"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Objective-C&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; passes if actual is either less than 10 or greater than 20&lt;/span&gt;
&lt;span class="pl-en"&gt;expect&lt;/span&gt;(actual).to(satisfyAnyOf(beLessThan(@&lt;span class="pl-c1"&gt;10&lt;/span&gt;), beGreaterThan(@&lt;span class="pl-c1"&gt;20&lt;/span&gt;)))

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; can include any number of matchers -- the following will pass&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; **be careful** -- too many matchers can be the sign of an unfocused test&lt;/span&gt;
expect(@&lt;span class="pl-c1"&gt;6&lt;/span&gt;).to(satisfyAnyOf(equal(@&lt;span class="pl-c1"&gt;2&lt;/span&gt;), equal(@&lt;span class="pl-c1"&gt;3&lt;/span&gt;), equal(@&lt;span class="pl-c1"&gt;4&lt;/span&gt;), equal(@&lt;span class="pl-c1"&gt;5&lt;/span&gt;), equal(@&lt;span class="pl-c1"&gt;6&lt;/span&gt;), equal(@&lt;span class="pl-c1"&gt;7&lt;/span&gt;)))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note: This matcher allows you to chain any number of matchers together. This provides flexibility,
but if you find yourself chaining many matchers together in one test, consider whether you
could instead refactor that single test into multiple, more precisely focused tests for
better coverage.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-custom-validation" class="anchor" aria-hidden="true" href="#custom-validation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Custom Validation&lt;/h2&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; passes if .succeeded is returned from the closure&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;expect&lt;/span&gt;({
    &lt;span class="pl-k"&gt;guard&lt;/span&gt; &lt;span class="pl-k"&gt;case&lt;/span&gt; .&lt;span class="pl-smi"&gt;enumCaseWithAssociatedValueThatIDontCareAbout&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; actual &lt;span class="pl-k"&gt;else&lt;/span&gt; {
        &lt;span class="pl-k"&gt;return&lt;/span&gt; .&lt;span class="pl-c1"&gt;failed&lt;/span&gt;(&lt;span class="pl-c1"&gt;reason&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;wrong enum case&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    }

    &lt;span class="pl-k"&gt;return&lt;/span&gt; .&lt;span class="pl-smi"&gt;succeeded&lt;/span&gt;
}).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;succeed&lt;/span&gt;())

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; passes if .failed is returned from the closure&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;expect&lt;/span&gt;({
    &lt;span class="pl-k"&gt;guard&lt;/span&gt; &lt;span class="pl-k"&gt;case&lt;/span&gt; .&lt;span class="pl-smi"&gt;enumCaseWithAssociatedValueThatIDontCareAbout&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; actual &lt;span class="pl-k"&gt;else&lt;/span&gt; {
        &lt;span class="pl-k"&gt;return&lt;/span&gt; .&lt;span class="pl-c1"&gt;failed&lt;/span&gt;(&lt;span class="pl-c1"&gt;reason&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;wrong enum case&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    }

    &lt;span class="pl-k"&gt;return&lt;/span&gt; .&lt;span class="pl-smi"&gt;succeeded&lt;/span&gt;
}).&lt;span class="pl-c1"&gt;notTo&lt;/span&gt;(&lt;span class="pl-c1"&gt;succeed&lt;/span&gt;())&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;String&lt;/code&gt; provided with &lt;code&gt;.failed()&lt;/code&gt; is shown when the test fails.&lt;/p&gt;
&lt;p&gt;When using &lt;code&gt;toEventually()&lt;/code&gt; be careful not to make state changes or run process intensive code since this closure will be ran many times.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-writing-your-own-matchers" class="anchor" aria-hidden="true" href="#writing-your-own-matchers"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Writing Your Own Matchers&lt;/h1&gt;
&lt;p&gt;In Nimble, matchers are Swift functions that take an expected
value and return a &lt;code&gt;Predicate&lt;/code&gt; closure. Take &lt;code&gt;equal&lt;/code&gt;, for example:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;public&lt;/span&gt; &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;equal&lt;/span&gt;&amp;lt;&lt;span class="pl-c1"&gt;T&lt;/span&gt;: &lt;span class="pl-e"&gt;&lt;span class="pl-c1"&gt;Equatable&lt;/span&gt;&lt;/span&gt;&amp;gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-en"&gt;expectedValue&lt;/span&gt;&lt;/span&gt;: T&lt;span class="pl-k"&gt;?&lt;/span&gt;) &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; Predicate&amp;lt;T&amp;gt; {
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Can be shortened to:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;   Predicate { actual in  ... }&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; But shown with types here for clarity.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;return&lt;/span&gt; Predicate { (&lt;span class="pl-c1"&gt;actualExpression&lt;/span&gt;: Expression&lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt;T&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;) &lt;span class="pl-k"&gt;throws&lt;/span&gt; &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; PredicateResult &lt;span class="pl-k"&gt;in&lt;/span&gt;
        &lt;span class="pl-k"&gt;let&lt;/span&gt; msg &lt;span class="pl-k"&gt;=&lt;/span&gt; ExpectationMessage.&lt;span class="pl-c1"&gt;expectedActualValueTo&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;equal &amp;lt;&lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;expectedValue&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;&amp;gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
        &lt;span class="pl-k"&gt;if&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; actualValue &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; actualExpression.&lt;span class="pl-c1"&gt;evaluate&lt;/span&gt;() {
            &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-c1"&gt;PredicateResult&lt;/span&gt;(
                &lt;span class="pl-c1"&gt;bool&lt;/span&gt;: actualValue &lt;span class="pl-k"&gt;==&lt;/span&gt; expectedValue&lt;span class="pl-k"&gt;!&lt;/span&gt;,
                &lt;span class="pl-c1"&gt;message&lt;/span&gt;: msg
            )
        } &lt;span class="pl-k"&gt;else&lt;/span&gt; {
            &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-c1"&gt;PredicateResult&lt;/span&gt;(
                &lt;span class="pl-c1"&gt;status&lt;/span&gt;: .&lt;span class="pl-smi"&gt;fail&lt;/span&gt;,
                &lt;span class="pl-c1"&gt;message&lt;/span&gt;: msg.&lt;span class="pl-c1"&gt;appendedBeNilHint&lt;/span&gt;()
            )
        }
    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The return value of a &lt;code&gt;Predicate&lt;/code&gt; closure is a &lt;code&gt;PredicateResult&lt;/code&gt; that indicates
whether the actual value matches the expectation and what error message to
display on failure.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The actual &lt;code&gt;equal&lt;/code&gt; matcher function does not match when
&lt;code&gt;expected&lt;/code&gt; are nil; the example above has been edited for brevity.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Since matchers are just Swift functions, you can define them anywhere:
at the top of your test file, in a file shared by all of your tests, or
in an Xcode project you distribute to others.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you write a matcher you think everyone can use, consider adding it
to Nimble's built-in set of matchers by sending a pull request! Or
distribute it yourself via GitHub.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;For examples of how to write your own matchers, just check out the
&lt;a href="https://github.com/Quick/Nimble/tree/master/Sources/Nimble/Matchers"&gt;&lt;code&gt;Matchers&lt;/code&gt; directory&lt;/a&gt;
to see how Nimble's built-in set of matchers are implemented. You can
also check out the tips below.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-predicateresult" class="anchor" aria-hidden="true" href="#predicateresult"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;PredicateResult&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;PredicateResult&lt;/code&gt; is the return struct that &lt;code&gt;Predicate&lt;/code&gt; return to indicate
success and failure. A &lt;code&gt;PredicateResult&lt;/code&gt; is made up of two values:
&lt;code&gt;PredicateStatus&lt;/code&gt; and &lt;code&gt;ExpectationMessage&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Instead of a boolean, &lt;code&gt;PredicateStatus&lt;/code&gt; captures a trinary set of values:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;public&lt;/span&gt; &lt;span class="pl-k"&gt;enum&lt;/span&gt; &lt;span class="pl-en"&gt;PredicateStatus&lt;/span&gt; {
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; The predicate "passes" with the given expression&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; eg - expect(1).to(equal(1))&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-c1"&gt;matches&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; The predicate "fails" with the given expression&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; eg - expect(1).toNot(equal(1))&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-c1"&gt;doesNotMatch&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; The predicate never "passes" with the given expression, even if negated&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; eg - expect(nil as Int?).toNot(equal(1))&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-c1"&gt;fail&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; ...&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Meanwhile, &lt;code&gt;ExpectationMessage&lt;/code&gt; provides messaging semantics for error reporting.&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;public&lt;/span&gt; &lt;span class="pl-k"&gt;indirect&lt;/span&gt; &lt;span class="pl-k"&gt;enum&lt;/span&gt; &lt;span class="pl-en"&gt;ExpectationMessage&lt;/span&gt; {
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Emits standard error message:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; eg - "expected to &amp;lt;string&amp;gt;, got &amp;lt;actual&amp;gt;"&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-c1"&gt;expectedActualValueTo&lt;/span&gt;(&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;/*&lt;/span&gt; message: &lt;span class="pl-c"&gt;*/&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;String&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Allows any free-form message&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; eg - "&amp;lt;string&amp;gt;"&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-c1"&gt;fail&lt;/span&gt;(&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;/*&lt;/span&gt; message: &lt;span class="pl-c"&gt;*/&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;String&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; ...&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Predicates should usually depend on either &lt;code&gt;.expectedActualValueTo(..)&lt;/code&gt; or
&lt;code&gt;.fail(..)&lt;/code&gt; when reporting errors. Special cases can be used for the other enum
cases.&lt;/p&gt;
&lt;p&gt;Finally, if your Predicate utilizes other Predicates, you can utilize
&lt;code&gt;.appended(details:)&lt;/code&gt; and &lt;code&gt;.appended(message:)&lt;/code&gt; methods to annotate an existing
error with more details.&lt;/p&gt;
&lt;p&gt;A common message to append is failing on nils. For that, &lt;code&gt;.appendedBeNilHint()&lt;/code&gt;
can be used.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-lazy-evaluation" class="anchor" aria-hidden="true" href="#lazy-evaluation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Lazy Evaluation&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;actualExpression&lt;/code&gt; is a lazy, memoized closure around the value provided to the
&lt;code&gt;expect&lt;/code&gt; function. The expression can either be a closure or a value directly
passed to &lt;code&gt;expect(...)&lt;/code&gt;. In order to determine whether that value matches,
custom matchers should call &lt;code&gt;actualExpression.evaluate()&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;public&lt;/span&gt; &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;beNil&lt;/span&gt;&amp;lt;&lt;span class="pl-c1"&gt;T&lt;/span&gt;&amp;gt;() &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; Predicate&amp;lt;T&amp;gt; {
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Predicate.simpleNilable(..) automatically generates ExpectationMessage for&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; us based on the string we provide to it. Also, the 'Nilable' postfix indicates&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; that this Predicate supports matching against nil actualExpressions, instead of&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; always resulting in a PredicateStatus.fail result -- which is true for&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Predicate.simple(..)&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;return&lt;/span&gt; Predicate.&lt;span class="pl-c1"&gt;simpleNilable&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;be nil&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) { actualExpression &lt;span class="pl-k"&gt;in&lt;/span&gt;
        &lt;span class="pl-k"&gt;let&lt;/span&gt; actualValue &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; actualExpression.&lt;span class="pl-c1"&gt;evaluate&lt;/span&gt;()
        &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-c1"&gt;PredicateStatus&lt;/span&gt;(&lt;span class="pl-c1"&gt;bool&lt;/span&gt;: actualValue &lt;span class="pl-k"&gt;==&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;)
    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the above example, &lt;code&gt;actualExpression&lt;/code&gt; is not &lt;code&gt;nil&lt;/code&gt; -- it is a closure
that returns a value. The value it returns, which is accessed via the
&lt;code&gt;evaluate()&lt;/code&gt; method, may be &lt;code&gt;nil&lt;/code&gt;. If that value is &lt;code&gt;nil&lt;/code&gt;, the &lt;code&gt;beNil&lt;/code&gt;
matcher function returns &lt;code&gt;true&lt;/code&gt;, indicating that the expectation passed.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-type-checking-via-swift-generics" class="anchor" aria-hidden="true" href="#type-checking-via-swift-generics"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Type Checking via Swift Generics&lt;/h2&gt;
&lt;p&gt;Using Swift's generics, matchers can constrain the type of the actual value
passed to the &lt;code&gt;expect&lt;/code&gt; function by modifying the return type.&lt;/p&gt;
&lt;p&gt;For example, the following matcher, &lt;code&gt;haveDescription&lt;/code&gt;, only accepts actual
values that implement the &lt;code&gt;Printable&lt;/code&gt; protocol. It checks their &lt;code&gt;description&lt;/code&gt;
against the one provided to the matcher function, and passes if they are the same:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;public&lt;/span&gt; &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;haveDescription&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-en"&gt;description&lt;/span&gt;&lt;/span&gt;: &lt;span class="pl-c1"&gt;String&lt;/span&gt;) &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; Predicate&amp;lt;Printable&lt;span class="pl-k"&gt;?&lt;/span&gt;&amp;gt; {
    &lt;span class="pl-k"&gt;return&lt;/span&gt; Predicate.&lt;span class="pl-c1"&gt;simple&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;have description&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) { actual &lt;span class="pl-k"&gt;in&lt;/span&gt;
        &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-c1"&gt;PredicateStatus&lt;/span&gt;(&lt;span class="pl-c1"&gt;bool&lt;/span&gt;: actual.&lt;span class="pl-c1"&gt;evaluate&lt;/span&gt;().&lt;span class="pl-c1"&gt;description&lt;/span&gt; &lt;span class="pl-k"&gt;==&lt;/span&gt; description)
    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-customizing-failure-messages" class="anchor" aria-hidden="true" href="#customizing-failure-messages"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Customizing Failure Messages&lt;/h2&gt;
&lt;p&gt;When using &lt;code&gt;Predicate.simple(..)&lt;/code&gt; or &lt;code&gt;Predicate.simpleNilable(..)&lt;/code&gt;, Nimble
outputs the following failure message when an expectation fails:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; where `message` is the first string argument and&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; `actual` is the actual value received in `expect(..)`&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;expected to &lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;message&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;, got &amp;lt;&lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;actual&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;&amp;gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can customize this message by modifying the way you create a &lt;code&gt;Predicate&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-basic-customization" class="anchor" aria-hidden="true" href="#basic-customization"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Basic Customization&lt;/h3&gt;
&lt;p&gt;For slightly more complex error messaging, receive the created failure message
with &lt;code&gt;Predicate.define(..)&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;public&lt;/span&gt; &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;equal&lt;/span&gt;&amp;lt;&lt;span class="pl-c1"&gt;T&lt;/span&gt;: &lt;span class="pl-e"&gt;&lt;span class="pl-c1"&gt;Equatable&lt;/span&gt;&lt;/span&gt;&amp;gt;(&lt;span class="pl-en"&gt;_&lt;/span&gt; &lt;span class="pl-smi"&gt;expectedValue&lt;/span&gt;: T&lt;span class="pl-k"&gt;?&lt;/span&gt;) &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; Predicate&amp;lt;T&amp;gt; {
    &lt;span class="pl-k"&gt;return&lt;/span&gt; Predicate.&lt;span class="pl-c1"&gt;define&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;equal &amp;lt;&lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;&lt;span class="pl-c1"&gt;stringify&lt;/span&gt;(expectedValue)&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;&amp;gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) { actualExpression, msg &lt;span class="pl-k"&gt;in&lt;/span&gt;
        &lt;span class="pl-k"&gt;let&lt;/span&gt; actualValue &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; actualExpression.&lt;span class="pl-c1"&gt;evaluate&lt;/span&gt;()
        &lt;span class="pl-k"&gt;let&lt;/span&gt; matches &lt;span class="pl-k"&gt;=&lt;/span&gt; actualValue &lt;span class="pl-k"&gt;==&lt;/span&gt; expectedValue &lt;span class="pl-k"&gt;&amp;amp;&amp;amp;&lt;/span&gt; expectedValue &lt;span class="pl-k"&gt;!=&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;
        &lt;span class="pl-k"&gt;if&lt;/span&gt; expectedValue &lt;span class="pl-k"&gt;==&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt; &lt;span class="pl-k"&gt;||&lt;/span&gt; actualValue &lt;span class="pl-k"&gt;==&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt; {
            &lt;span class="pl-k"&gt;if&lt;/span&gt; expectedValue &lt;span class="pl-k"&gt;==&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt; &lt;span class="pl-k"&gt;&amp;amp;&amp;amp;&lt;/span&gt; actualValue &lt;span class="pl-k"&gt;!=&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt; {
                &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-c1"&gt;PredicateResult&lt;/span&gt;(
                    &lt;span class="pl-c1"&gt;status&lt;/span&gt;: .&lt;span class="pl-smi"&gt;fail&lt;/span&gt;,
                    &lt;span class="pl-c1"&gt;message&lt;/span&gt;: msg.&lt;span class="pl-c1"&gt;appendedBeNilHint&lt;/span&gt;()
                )
            }
            &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-c1"&gt;PredicateResult&lt;/span&gt;(&lt;span class="pl-c1"&gt;status&lt;/span&gt;: .&lt;span class="pl-smi"&gt;fail&lt;/span&gt;, &lt;span class="pl-c1"&gt;message&lt;/span&gt;: msg)
        }
        &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-c1"&gt;PredicateResult&lt;/span&gt;(&lt;span class="pl-c1"&gt;bool&lt;/span&gt;: matches, &lt;span class="pl-c1"&gt;message&lt;/span&gt;: msg)
    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the example above, &lt;code&gt;msg&lt;/code&gt; is defined based on the string given to
&lt;code&gt;Predicate.define&lt;/code&gt;. The code looks akin to:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;let&lt;/span&gt; msg &lt;span class="pl-k"&gt;=&lt;/span&gt; ExpectationMessage.&lt;span class="pl-c1"&gt;expectedActualValueTo&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;equal &amp;lt;&lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;&lt;span class="pl-c1"&gt;stringify&lt;/span&gt;(expectedValue)&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;&amp;gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-full-customization" class="anchor" aria-hidden="true" href="#full-customization"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Full Customization&lt;/h3&gt;
&lt;p&gt;To fully customize the behavior of the Predicate, use the overload that expects
a &lt;code&gt;PredicateResult&lt;/code&gt; to be returned.&lt;/p&gt;
&lt;p&gt;Along with &lt;code&gt;PredicateResult&lt;/code&gt;, there are other &lt;code&gt;ExpectationMessage&lt;/code&gt; enum values you can use:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;public&lt;/span&gt; &lt;span class="pl-k"&gt;indirect&lt;/span&gt; &lt;span class="pl-k"&gt;enum&lt;/span&gt; &lt;span class="pl-en"&gt;ExpectationMessage&lt;/span&gt; {
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Emits standard error message:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; eg - "expected to &amp;lt;message&amp;gt;, got &amp;lt;actual&amp;gt;"&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-c1"&gt;expectedActualValueTo&lt;/span&gt;(&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;/*&lt;/span&gt; message: &lt;span class="pl-c"&gt;*/&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;String&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Allows any free-form message&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; eg - "&amp;lt;message&amp;gt;"&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-c1"&gt;fail&lt;/span&gt;(&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;/*&lt;/span&gt; message: &lt;span class="pl-c"&gt;*/&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;String&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Emits standard error message with a custom actual value instead of the default.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; eg - "expected to &amp;lt;message&amp;gt;, got &amp;lt;actual&amp;gt;"&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-c1"&gt;expectedCustomValueTo&lt;/span&gt;(&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;/*&lt;/span&gt; message: &lt;span class="pl-c"&gt;*/&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;String&lt;/span&gt;, &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;/*&lt;/span&gt; actual: &lt;span class="pl-c"&gt;*/&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;String&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Emits standard error message without mentioning the actual value&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; eg - "expected to &amp;lt;message&amp;gt;"&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-c1"&gt;expectedTo&lt;/span&gt;(&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;/*&lt;/span&gt; message: &lt;span class="pl-c"&gt;*/&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;String&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; ...&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For matchers that compose other matchers, there are a handful of helper
functions to annotate messages.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;appended(message: String)&lt;/code&gt; is used to append to the original failure message:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; produces "expected to be true, got &amp;lt;actual&amp;gt; (use beFalse() for inverse)"&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; appended message do show up inline in Xcode.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;.&lt;span class="pl-c1"&gt;expectedActualValueTo&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;be true&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;).&lt;span class="pl-c1"&gt;appended&lt;/span&gt;(&lt;span class="pl-c1"&gt;message&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt; (use beFalse() for inverse)&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For a more comprehensive message that spans multiple lines, use
&lt;code&gt;appended(details: String)&lt;/code&gt; instead:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; produces "expected to be true, got &amp;lt;actual&amp;gt;\n\nuse beFalse() for inverse\nor use beNil()"&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; details do not show inline in Xcode, but do show up in test logs.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;.&lt;span class="pl-c1"&gt;expectedActualValueTo&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;be true&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;).&lt;span class="pl-c1"&gt;appended&lt;/span&gt;(&lt;span class="pl-c1"&gt;details&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;use beFalse() for inverse&lt;span class="pl-cce"&gt;\n&lt;/span&gt;or use beNil()&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-supporting-objective-c" class="anchor" aria-hidden="true" href="#supporting-objective-c"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Supporting Objective-C&lt;/h2&gt;
&lt;p&gt;To use a custom matcher written in Swift from Objective-C, you'll have
to extend the &lt;code&gt;NMBObjCMatcher&lt;/code&gt; class, adding a new class method for your
custom matcher. The example below defines the class method
&lt;code&gt;+[NMBObjCMatcher beNilMatcher]&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;extension&lt;/span&gt; &lt;span class="pl-en"&gt;NMBObjCMatcher&lt;/span&gt; {
    &lt;span class="pl-k"&gt;public&lt;/span&gt; &lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;beNilMatcher&lt;/span&gt;() &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; NMBObjCMatcher {
        &lt;span class="pl-k"&gt;return&lt;/span&gt; NMBObjCMatcher { actualBlock, failureMessage, location &lt;span class="pl-k"&gt;in&lt;/span&gt;
            &lt;span class="pl-k"&gt;let&lt;/span&gt; block &lt;span class="pl-k"&gt;=&lt;/span&gt; ({ &lt;span class="pl-c1"&gt;actualBlock&lt;/span&gt;() &lt;span class="pl-k"&gt;as&lt;/span&gt; NSObject&lt;span class="pl-k"&gt;?&lt;/span&gt; })
            &lt;span class="pl-k"&gt;let&lt;/span&gt; expr &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;Expression&lt;/span&gt;(&lt;span class="pl-c1"&gt;expression&lt;/span&gt;: block, &lt;span class="pl-c1"&gt;location&lt;/span&gt;: location)
            &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-c1"&gt;beNil&lt;/span&gt;().&lt;span class="pl-c1"&gt;matches&lt;/span&gt;(expr, &lt;span class="pl-c1"&gt;failureMessage&lt;/span&gt;: failureMessage)
        }
    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The above allows you to use the matcher from Objective-C:&lt;/p&gt;
&lt;div class="highlight highlight-source-objc"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Objective-C&lt;/span&gt;

&lt;span class="pl-en"&gt;expect&lt;/span&gt;(actual).to([NMBObjCMatcher &lt;span class="pl-c1"&gt;beNilMatcher&lt;/span&gt;]());&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To make the syntax easier to use, define a C function that calls the
class method:&lt;/p&gt;
&lt;div class="highlight highlight-source-objc"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Objective-C&lt;/span&gt;

FOUNDATION_EXPORT &lt;span class="pl-k"&gt;id&lt;/span&gt;&amp;lt;NMBMatcher&amp;gt; &lt;span class="pl-en"&gt;beNil&lt;/span&gt;() {
    &lt;span class="pl-k"&gt;return&lt;/span&gt; [NMBObjCMatcher &lt;span class="pl-c1"&gt;beNilMatcher&lt;/span&gt;];
}&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-properly-handling-nil-in-objective-c-matchers" class="anchor" aria-hidden="true" href="#properly-handling-nil-in-objective-c-matchers"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Properly Handling &lt;code&gt;nil&lt;/code&gt; in Objective-C Matchers&lt;/h3&gt;
&lt;p&gt;When supporting Objective-C, make sure you handle &lt;code&gt;nil&lt;/code&gt; appropriately.
Like &lt;a href="https://github.com/pivotal/cedar/issues/100"&gt;Cedar&lt;/a&gt;,
&lt;strong&gt;most matchers do not match with nil&lt;/strong&gt;. This is to bring prevent test
writers from being surprised by &lt;code&gt;nil&lt;/code&gt; values where they did not expect
them.&lt;/p&gt;
&lt;p&gt;Nimble provides the &lt;code&gt;beNil&lt;/code&gt; matcher function for test writer that want
to make expectations on &lt;code&gt;nil&lt;/code&gt; objects:&lt;/p&gt;
&lt;div class="highlight highlight-source-objc"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Objective-C&lt;/span&gt;

&lt;span class="pl-en"&gt;expect&lt;/span&gt;(&lt;span class="pl-c1"&gt;nil&lt;/span&gt;).to(equal(&lt;span class="pl-c1"&gt;nil&lt;/span&gt;)); &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; fails&lt;/span&gt;
&lt;span class="pl-en"&gt;expect&lt;/span&gt;(&lt;span class="pl-c1"&gt;nil&lt;/span&gt;).to(beNil());    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; passes&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If your matcher does not want to match with nil, you use &lt;code&gt;NonNilMatcherFunc&lt;/code&gt;
and the &lt;code&gt;canMatchNil&lt;/code&gt; constructor on &lt;code&gt;NMBObjCMatcher&lt;/code&gt;. Using both types will
automatically generate expected value failure messages when they're nil.&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;public&lt;/span&gt; &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;beginWith&lt;/span&gt;&amp;lt;&lt;span class="pl-c1"&gt;S&lt;/span&gt;: &lt;span class="pl-e"&gt;&lt;span class="pl-c1"&gt;Sequence&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;T&lt;/span&gt;: &lt;span class="pl-e"&gt;&lt;span class="pl-c1"&gt;Equatable&lt;/span&gt; &lt;/span&gt;&lt;span class="pl-k"&gt;where&lt;/span&gt; S.&lt;span class="pl-c1"&gt;Iterator&lt;/span&gt;.&lt;span class="pl-c1"&gt;Element&lt;/span&gt; &lt;span class="pl-k"&gt;==&lt;/span&gt; T&amp;gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-en"&gt;startingElement&lt;/span&gt;&lt;/span&gt;: T) &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; NonNilMatcherFunc&amp;lt;S&amp;gt; {
    &lt;span class="pl-k"&gt;return&lt;/span&gt; NonNilMatcherFunc { actualExpression, failureMessage &lt;span class="pl-k"&gt;in&lt;/span&gt;
        failureMessage.&lt;span class="pl-smi"&gt;postfixMessage&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;begin with &amp;lt;&lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;startingElement&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;&amp;gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
        &lt;span class="pl-k"&gt;if&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; actualValue &lt;span class="pl-k"&gt;=&lt;/span&gt; actualExpression.&lt;span class="pl-c1"&gt;evaluate&lt;/span&gt;() {
            &lt;span class="pl-k"&gt;var&lt;/span&gt; actualGenerator &lt;span class="pl-k"&gt;=&lt;/span&gt; actualValue.&lt;span class="pl-c1"&gt;makeIterator&lt;/span&gt;()
            &lt;span class="pl-k"&gt;return&lt;/span&gt; actualGenerator.&lt;span class="pl-c1"&gt;next&lt;/span&gt;() &lt;span class="pl-k"&gt;==&lt;/span&gt; startingElement
        }
        &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-c1"&gt;false&lt;/span&gt;
    }
}

&lt;span class="pl-k"&gt;extension&lt;/span&gt; &lt;span class="pl-en"&gt;NMBObjCMatcher&lt;/span&gt; {
    &lt;span class="pl-k"&gt;public&lt;/span&gt; &lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;beginWithMatcher&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-en"&gt;expected&lt;/span&gt;&lt;/span&gt;: &lt;span class="pl-c1"&gt;AnyObject&lt;/span&gt;) &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; NMBObjCMatcher {
        &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-c1"&gt;NMBObjCMatcher&lt;/span&gt;(&lt;span class="pl-c1"&gt;canMatchNil&lt;/span&gt;: &lt;span class="pl-c1"&gt;false&lt;/span&gt;) { actualExpression, failureMessage &lt;span class="pl-k"&gt;in&lt;/span&gt;
            &lt;span class="pl-k"&gt;let&lt;/span&gt; actual &lt;span class="pl-k"&gt;=&lt;/span&gt; actualExpression.&lt;span class="pl-c1"&gt;evaluate&lt;/span&gt;()
            &lt;span class="pl-k"&gt;let&lt;/span&gt; expr &lt;span class="pl-k"&gt;=&lt;/span&gt; actualExpression.&lt;span class="pl-smi"&gt;cast&lt;/span&gt; { &lt;span class="pl-c1"&gt;$0&lt;/span&gt; &lt;span class="pl-k"&gt;as?&lt;/span&gt; NMBOrderedCollection }
            &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-c1"&gt;beginWith&lt;/span&gt;(expected).&lt;span class="pl-c1"&gt;matches&lt;/span&gt;(expr, &lt;span class="pl-c1"&gt;failureMessage&lt;/span&gt;: failureMessage)
        }
    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-migrating-from-the-old-matcher-api" class="anchor" aria-hidden="true" href="#migrating-from-the-old-matcher-api"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Migrating from the Old Matcher API&lt;/h2&gt;
&lt;p&gt;Previously (&lt;code&gt;&amp;lt;7.0.0&lt;/code&gt;), Nimble supported matchers via the following types:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Matcher&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NonNilMatcherFunc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MatcherFunc&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All of those types have been replaced by &lt;code&gt;Predicate&lt;/code&gt;. While migrating can be a
lot of work, Nimble currently provides several steps to aid migration of your
custom matchers:&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-minimal-step---use-predicate" class="anchor" aria-hidden="true" href="#minimal-step---use-predicate"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Minimal Step - Use &lt;code&gt;.predicate&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Nimble provides an extension to the old types that automatically naively
converts those types to the newer &lt;code&gt;Predicate&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;public&lt;/span&gt; &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;beginWith&lt;/span&gt;&amp;lt;&lt;span class="pl-c1"&gt;S&lt;/span&gt;: &lt;span class="pl-e"&gt;&lt;span class="pl-c1"&gt;Sequence&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;T&lt;/span&gt;: &lt;span class="pl-e"&gt;&lt;span class="pl-c1"&gt;Equatable&lt;/span&gt; &lt;/span&gt;&lt;span class="pl-k"&gt;where&lt;/span&gt; S.&lt;span class="pl-c1"&gt;Iterator&lt;/span&gt;.&lt;span class="pl-c1"&gt;Element&lt;/span&gt; &lt;span class="pl-k"&gt;==&lt;/span&gt; T&amp;gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-en"&gt;startingElement&lt;/span&gt;&lt;/span&gt;: T) &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; Predicate&amp;lt;S&amp;gt; {
    &lt;span class="pl-k"&gt;return&lt;/span&gt; NonNilMatcherFunc { actualExpression, failureMessage &lt;span class="pl-k"&gt;in&lt;/span&gt;
        failureMessage.&lt;span class="pl-smi"&gt;postfixMessage&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;begin with &amp;lt;&lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;startingElement&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;&amp;gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
        &lt;span class="pl-k"&gt;if&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; actualValue &lt;span class="pl-k"&gt;=&lt;/span&gt; actualExpression.&lt;span class="pl-c1"&gt;evaluate&lt;/span&gt;() {
            &lt;span class="pl-k"&gt;var&lt;/span&gt; actualGenerator &lt;span class="pl-k"&gt;=&lt;/span&gt; actualValue.&lt;span class="pl-c1"&gt;makeIterator&lt;/span&gt;()
            &lt;span class="pl-k"&gt;return&lt;/span&gt; actualGenerator.&lt;span class="pl-c1"&gt;next&lt;/span&gt;() &lt;span class="pl-k"&gt;==&lt;/span&gt; startingElement
        }
        &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-c1"&gt;false&lt;/span&gt;
    }.&lt;span class="pl-smi"&gt;predicate&lt;/span&gt;
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is the simpliest way to externally support &lt;code&gt;Predicate&lt;/code&gt; which allows easier
composition than the old Nimble matcher interface, with minimal effort to change.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-convert-to-use-predicate-type-with-old-matcher-constructor" class="anchor" aria-hidden="true" href="#convert-to-use-predicate-type-with-old-matcher-constructor"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Convert to use &lt;code&gt;Predicate&lt;/code&gt; Type with Old Matcher Constructor&lt;/h3&gt;
&lt;p&gt;The second most convenient step is to utilize special constructors that
&lt;code&gt;Predicate&lt;/code&gt; supports that closely align to the constructors of the old Nimble
matcher types.&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;public&lt;/span&gt; &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;beginWith&lt;/span&gt;&amp;lt;&lt;span class="pl-c1"&gt;S&lt;/span&gt;: &lt;span class="pl-e"&gt;&lt;span class="pl-c1"&gt;Sequence&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;T&lt;/span&gt;: &lt;span class="pl-e"&gt;&lt;span class="pl-c1"&gt;Equatable&lt;/span&gt; &lt;/span&gt;&lt;span class="pl-k"&gt;where&lt;/span&gt; S.&lt;span class="pl-c1"&gt;Iterator&lt;/span&gt;.&lt;span class="pl-c1"&gt;Element&lt;/span&gt; &lt;span class="pl-k"&gt;==&lt;/span&gt; T&amp;gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-en"&gt;startingElement&lt;/span&gt;&lt;/span&gt;: T) &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; Predicate&amp;lt;S&amp;gt; {
    &lt;span class="pl-k"&gt;return&lt;/span&gt; Predicate.&lt;span class="pl-smi"&gt;fromDeprecatedClosure&lt;/span&gt; { actualExpression, failureMessage &lt;span class="pl-k"&gt;in&lt;/span&gt;
        failureMessage.&lt;span class="pl-smi"&gt;postfixMessage&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;begin with &amp;lt;&lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;startingElement&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;&amp;gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
        &lt;span class="pl-k"&gt;if&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; actualValue &lt;span class="pl-k"&gt;=&lt;/span&gt; actualExpression.&lt;span class="pl-c1"&gt;evaluate&lt;/span&gt;() {
            &lt;span class="pl-k"&gt;var&lt;/span&gt; actualGenerator &lt;span class="pl-k"&gt;=&lt;/span&gt; actualValue.&lt;span class="pl-c1"&gt;makeIterator&lt;/span&gt;()
            &lt;span class="pl-k"&gt;return&lt;/span&gt; actualGenerator.&lt;span class="pl-c1"&gt;next&lt;/span&gt;() &lt;span class="pl-k"&gt;==&lt;/span&gt; startingElement
        }
        &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-c1"&gt;false&lt;/span&gt;
    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This allows you to completely drop the old types from your code, although the
intended behavior may alter slightly to what is desired.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-convert-to-predicate-type-with-preferred-constructor" class="anchor" aria-hidden="true" href="#convert-to-predicate-type-with-preferred-constructor"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Convert to &lt;code&gt;Predicate&lt;/code&gt; Type with Preferred Constructor&lt;/h3&gt;
&lt;p&gt;Finally, you can convert to the native &lt;code&gt;Predicate&lt;/code&gt; format using one of the
constructors not used to assist in the migration.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-deprecation-roadmap" class="anchor" aria-hidden="true" href="#deprecation-roadmap"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Deprecation Roadmap&lt;/h3&gt;
&lt;p&gt;Nimble 7 introduces &lt;code&gt;Predicate&lt;/code&gt; but will support the old types with warning
deprecations. A couple major releases of Nimble will remain backwards
compatible with the old matcher api, although new features may not be
backported.&lt;/p&gt;
&lt;p&gt;The deprecating plan is a 3 major versions removal. Which is as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Introduce new &lt;code&gt;Predicate&lt;/code&gt; API, deprecation warning for old matcher APIs.
(Nimble &lt;code&gt;v7.x.x&lt;/code&gt;, &lt;code&gt;v8.x.x&lt;/code&gt; and &lt;code&gt;v9.x.x&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Introduce warnings on migration-path features (&lt;code&gt;.predicate&lt;/code&gt;,
&lt;code&gt;Predicate&lt;/code&gt;-constructors with similar arguments to old API). (Nimble
&lt;code&gt;v10.x.x&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Remove old API. (Nimble &lt;code&gt;v11.x.x&lt;/code&gt;)&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;&lt;a id="user-content-installing-nimble" class="anchor" aria-hidden="true" href="#installing-nimble"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installing Nimble&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Nimble can be used on its own, or in conjunction with its sister
project, &lt;a href="https://github.com/Quick/Quick"&gt;Quick&lt;/a&gt;. To install both
Quick and Nimble, follow &lt;a href="https://github.com/Quick/Quick/blob/master/Documentation/en-us/InstallingQuick.md"&gt;the installation instructions in the Quick
Documentation&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Nimble can currently be installed in one of two ways: using CocoaPods, or with
git submodules.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-installing-nimble-as-a-submodule" class="anchor" aria-hidden="true" href="#installing-nimble-as-a-submodule"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installing Nimble as a Submodule&lt;/h2&gt;
&lt;p&gt;To use Nimble as a submodule to test your macOS, iOS or tvOS applications, follow
these 4 easy steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Clone the Nimble repository&lt;/li&gt;
&lt;li&gt;Add Nimble.xcodeproj to the Xcode workspace for your project&lt;/li&gt;
&lt;li&gt;Link Nimble.framework to your test target&lt;/li&gt;
&lt;li&gt;Start writing expectations!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For more detailed instructions on each of these steps,
read &lt;a href="https://github.com/Quick/Quick#how-to-install-quick"&gt;How to Install Quick&lt;/a&gt;.
Ignore the steps involving adding Quick to your project in order to
install just Nimble.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-installing-nimble-via-cocoapods" class="anchor" aria-hidden="true" href="#installing-nimble-via-cocoapods"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installing Nimble via CocoaPods&lt;/h2&gt;
&lt;p&gt;To use Nimble in CocoaPods to test your macOS, iOS or tvOS applications, add
Nimble to your podfile and add the &lt;code&gt;use_frameworks!&lt;/code&gt; line to enable Swift
support for CocoaPods.&lt;/p&gt;
&lt;div class="highlight highlight-source-ruby"&gt;&lt;pre&gt;platform &lt;span class="pl-c1"&gt;:ios&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;8.0&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;

source &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;https://github.com/CocoaPods/Specs.git&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Whatever pods you need for your app go here&lt;/span&gt;

target &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;YOUR_APP_NAME_HERE_Tests&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;:exclusive&lt;/span&gt; =&amp;gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  use_frameworks!
  pod &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;Nimble&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;~&amp;gt; 6.0.0&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally run &lt;code&gt;pod install&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-installing-nimble-via-accio" class="anchor" aria-hidden="true" href="#installing-nimble-via-accio"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installing Nimble via Accio&lt;/h2&gt;
&lt;p&gt;Add the following to your Package.swift:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;.&lt;span class="pl-c1"&gt;package&lt;/span&gt;(&lt;span class="pl-c1"&gt;url&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;https://github.com/Quick/Nimble.git&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, .&lt;span class="pl-c1"&gt;upToNextMajor&lt;/span&gt;(&lt;span class="pl-c1"&gt;from&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;8.0.1&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)),&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next, add &lt;code&gt;Nimble&lt;/code&gt; to your App targets dependencies like so:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;.&lt;span class="pl-c1"&gt;testTarget&lt;/span&gt;(
    &lt;span class="pl-c1"&gt;name&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;AppTests&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
    &lt;span class="pl-c1"&gt;dependencies&lt;/span&gt;: [
        &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Nimble&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
    ]
),&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then run &lt;code&gt;accio update&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-using-nimble-without-xctest" class="anchor" aria-hidden="true" href="#using-nimble-without-xctest"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Using Nimble without XCTest&lt;/h2&gt;
&lt;p&gt;Nimble is integrated with XCTest to allow it work well when used in Xcode test
bundles, however it can also be used in a standalone app. After installing
Nimble using one of the above methods, there are two additional steps required
to make this work.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a custom assertion handler and assign an instance of it to the
global &lt;code&gt;NimbleAssertionHandler&lt;/code&gt; variable. For example:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;MyAssertionHandler&lt;/span&gt; : &lt;span class="pl-e"&gt;AssertionHandler &lt;/span&gt;{
    &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;assert&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-en"&gt;assertion&lt;/span&gt;&lt;/span&gt;: &lt;span class="pl-c1"&gt;Bool&lt;/span&gt;, &lt;span class="pl-smi"&gt;&lt;span class="pl-en"&gt;message&lt;/span&gt;&lt;/span&gt;: FailureMessage, &lt;span class="pl-smi"&gt;&lt;span class="pl-en"&gt;location&lt;/span&gt;&lt;/span&gt;: SourceLocation) {
        &lt;span class="pl-k"&gt;if&lt;/span&gt; (&lt;span class="pl-k"&gt;!&lt;/span&gt;assertion) {
            &lt;span class="pl-c1"&gt;print&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Expectation failed: &lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;message.&lt;span class="pl-c1"&gt;stringValue&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
        }
    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Somewhere before you use any assertions&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;NimbleAssertionHandler &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;MyAssertionHandler&lt;/span&gt;()&lt;/pre&gt;&lt;/div&gt;
&lt;ol start="2"&gt;
&lt;li&gt;Add a post-build action to fix an issue with the Swift XCTest support
library being unnecessarily copied into your app&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Edit your scheme in Xcode, and navigate to Build -&amp;gt; Post-actions&lt;/li&gt;
&lt;li&gt;Click the "+" icon and select "New Run Script Action"&lt;/li&gt;
&lt;li&gt;Open the "Provide build settings from" dropdown and select your target&lt;/li&gt;
&lt;li&gt;Enter the following script contents:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;rm "${SWIFT_STDLIB_TOOL_DESTINATION_DIR}/libswiftXCTest.dylib"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can now use Nimble assertions in your code and handle failures as you see
fit.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>Quick</author><guid isPermaLink="false">https://github.com/Quick/Nimble</guid><pubDate>Mon, 18 Nov 2019 00:17:00 GMT</pubDate></item><item><title>jonkykong/SideMenu #18 in Swift, This week</title><link>https://github.com/jonkykong/SideMenu</link><description>&lt;p&gt;&lt;i&gt;Simple side/slide menu control for iOS, no code necessary! Lots of customization. Add it to your project in 5 minutes or less.&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content--sidemenu" class="anchor" aria-hidden="true" href="#-sidemenu"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;▤ SideMenu&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://circleci.com/gh/jonkykong/SideMenu" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/ff6527970f9858d2e0c9225002cef4291310e41e/68747470733a2f2f636972636c6563692e636f6d2f67682f6a6f6e6b796b6f6e672f536964654d656e752e7376673f7374796c653d737667" alt="CircleCI" data-canonical-src="https://circleci.com/gh/jonkykong/SideMenu.svg?style=svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="http://cocoapods.org/pods/SideMenu" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/76995976b159deaff5183d7a0b00ee4a762e55f3/68747470733a2f2f696d672e736869656c64732e696f2f636f636f61706f64732f762f536964654d656e752e7376673f7374796c653d666c61742d737175617265" alt="Version" data-canonical-src="https://img.shields.io/cocoapods/v/SideMenu.svg?style=flat-square" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://github.com/Carthage/Carthage"&gt;&lt;img src="https://camo.githubusercontent.com/3192219757eff6dc3d9b5670d4afd942df1f9b65/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f43617274686167652d636f6d70617469626c652d3442433531442e7376673f7374796c653d666c61742d737175617265" alt="Carthage compatible" data-canonical-src="https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat-square" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="http://cocoapods.org/pods/SideMenu" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/3e671bbe068c251af33647f7386bd3504483858c/68747470733a2f2f696d672e736869656c64732e696f2f636f636f61706f64732f6c2f536964654d656e752e7376673f7374796c653d666c61742d737175617265" alt="License" data-canonical-src="https://img.shields.io/cocoapods/l/SideMenu.svg?style=flat-square" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="http://cocoapods.org/pods/SideMenu" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/a2f3bfbb817de6cc8c07ff50d09c86e6c1bbf9dd/68747470733a2f2f696d672e736869656c64732e696f2f636f636f61706f64732f702f536964654d656e752e7376673f7374796c653d666c61742d737175617265" alt="Platform" data-canonical-src="https://img.shields.io/cocoapods/p/SideMenu.svg?style=flat-square" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-if-you-like-sidemenu-give-it-a--at-the-top-right-of-this-page" class="anchor" aria-hidden="true" href="#if-you-like-sidemenu-give-it-a--at-the-top-right-of-this-page"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;If you like SideMenu, give it a ★ at the top right of this page.&lt;/h3&gt;
&lt;h4&gt;&lt;a id="user-content-sidemenu-needs-your-help-if-youre-a-skilled-ios-developer-and-want-to-help-maintain-this-repository-and-answer-issues-asked-by-the-community-please-send-me-an-email" class="anchor" aria-hidden="true" href="#sidemenu-needs-your-help-if-youre-a-skilled-ios-developer-and-want-to-help-maintain-this-repository-and-answer-issues-asked-by-the-community-please-send-me-an-email"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;SideMenu needs your help! If you're a skilled iOS developer and want to help maintain this repository and answer issues asked by the community, please &lt;a href="mailto:yo@massappeal.co?subject=I%20Want%20To%20Help!"&gt;send me an email&lt;/a&gt;.&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;Hi, I'm Jon Kent and I am an iOS designer, developer, and mobile strategist. I love coffee and play the drums.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="mailto:yo@massappeal.co?subject=Let's%20build%20something%20amazing"&gt;&lt;strong&gt;Hire me&lt;/strong&gt;&lt;/a&gt; to help you make cool stuff. &lt;em&gt;Note: If you're having a problem with SideMenu, please open an &lt;a href="https://github.com/jonkykong/SideMenu/issues/new"&gt;issue&lt;/a&gt; and do not email me.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Check out my &lt;a href="http://massappeal.co" rel="nofollow"&gt;website&lt;/a&gt; to see some of my other projects.&lt;/li&gt;
&lt;li&gt;Building and maintaining this &lt;strong&gt;free&lt;/strong&gt; library takes a lot of my time and &lt;strong&gt;saves you time&lt;/strong&gt;. Please consider paying it forward by supporting me with a small amount to my &lt;a href="https://www.paypal.com/cgi-bin/webscr?cmd=_donations&amp;amp;business=contact%40jonkent%2eme&amp;amp;lc=US&amp;amp;currency_code=USD&amp;amp;bn=PP%2dDonationsBF%3abtn_donateCC_LG%2egif%3aNonHosted" rel="nofollow"&gt;PayPal&lt;/a&gt;. (only &lt;strong&gt;13&lt;/strong&gt; people have donated since 12/23/15 but &lt;strong&gt;thank you&lt;/strong&gt; to those who have!)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="#overview"&gt;Overview&lt;/a&gt;&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#preview-samples"&gt;Preview Samples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="#requirements"&gt;Requirements&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="#installation"&gt;Installation&lt;/a&gt;&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#cocoapods"&gt;CocoaPods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#carthage"&gt;Carthage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#swift-package-manager"&gt;Swift Package Manager&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="#usage"&gt;Usage&lt;/a&gt;&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#code-less-storyboard-implementation"&gt;Code-less Storyboard Implementation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#code-implementation"&gt;Code Implementation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="#customization"&gt;Customization&lt;/a&gt;&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sidemenumanager"&gt;SideMenuManager&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sidemenunavigationcontroller"&gt;SideMenuNavigationController&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sidemenunavigationcontrollerdelegate"&gt;SideMenuNavigationControllerDelegate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#advanced"&gt;Advanced&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#known-issues"&gt;Known Issues&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#thank-you"&gt;Thank You&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#license"&gt;License&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-overview" class="anchor" aria-hidden="true" href="#overview"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Overview&lt;/h2&gt;
&lt;p&gt;SideMenu is a simple and versatile side menu control written in Swift.&lt;/p&gt;
&lt;ul class="contains-task-list"&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; &lt;strong&gt;It can be implemented in storyboard without a single line of &lt;a href="#code-less-storyboard-implementation"&gt;code&lt;/a&gt;.&lt;/strong&gt;&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; Eight standard animation styles to choose from (there's even a parallax effect if you want to get weird).&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; Highly customizable without needing to write tons of custom code.&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; Supports continuous swiping between side menus on boths sides in a single gesture.&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; Global menu configuration. Set-up once and be done for all screens.&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; Menus can be presented and dismissed the same as any other view controller since this control uses &lt;a href="https://developer.apple.com/library/content/featuredarticles/ViewControllerPGforiPhoneOS/CustomizingtheTransitionAnimations.html" rel="nofollow"&gt;custom transitions&lt;/a&gt;.&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; Animations use your view controllers, not snapshots.&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; Properly handles screen rotation and in-call status bar height changes.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Check out the example project to see it in action!&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-preview-samples" class="anchor" aria-hidden="true" href="#preview-samples"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Preview Samples&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Slide Out&lt;/th&gt;
&lt;th&gt;Slide In&lt;/th&gt;
&lt;th&gt;Dissolve&lt;/th&gt;
&lt;th&gt;Slide In + Out&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/jonkykong/SideMenu/master/etc/SlideOut.gif"&gt;&lt;img src="https://raw.githubusercontent.com/jonkykong/SideMenu/master/etc/SlideOut.gif" alt="" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/jonkykong/SideMenu/master/etc/SlideIn.gif"&gt;&lt;img src="https://raw.githubusercontent.com/jonkykong/SideMenu/master/etc/SlideIn.gif" alt="" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/jonkykong/SideMenu/master/etc/Dissolve.gif"&gt;&lt;img src="https://raw.githubusercontent.com/jonkykong/SideMenu/master/etc/Dissolve.gif" alt="" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/jonkykong/SideMenu/master/etc/InOut.gif"&gt;&lt;img src="https://raw.githubusercontent.com/jonkykong/SideMenu/master/etc/InOut.gif" alt="" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a id="user-content-requirements" class="anchor" aria-hidden="true" href="#requirements"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Requirements&lt;/h2&gt;
&lt;ul class="contains-task-list"&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; Xcode 11.&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; Swift 5.&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; iOS 10 or higher.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installation&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-cocoapods" class="anchor" aria-hidden="true" href="#cocoapods"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;CocoaPods&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://cocoapods.org" rel="nofollow"&gt;CocoaPods&lt;/a&gt; is a dependency manager for Cocoa projects. You can install it with the following command:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;$ gem install cocoapods&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To integrate SideMenu into your Xcode project using CocoaPods, specify it in your &lt;code&gt;Podfile&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-ruby"&gt;&lt;pre&gt;source &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;https://github.com/CocoaPods/Specs.git&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;
platform &lt;span class="pl-c1"&gt;:ios&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;10.0&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;
use_frameworks!

pod &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;SideMenu&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; For Swift 5 use:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; pod 'SideMenu', '~&amp;gt; 6.0'&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; For Swift 4.2 (no longer maintained) use:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; pod 'SideMenu', '~&amp;gt; 5.0'&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then, run the following command:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;$ pod install&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-carthage" class="anchor" aria-hidden="true" href="#carthage"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Carthage&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/Carthage/Carthage"&gt;Carthage&lt;/a&gt; is a decentralized dependency manager that builds your dependencies and provides you with binary frameworks.&lt;/p&gt;
&lt;p&gt;You can install Carthage with &lt;a href="http://brew.sh/" rel="nofollow"&gt;Homebrew&lt;/a&gt; using the following command:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;$ brew update
$ brew install carthage&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To integrate SideMenu into your Xcode project using Carthage, specify it in your &lt;code&gt;Cartfile&lt;/code&gt;:&lt;/p&gt;
&lt;pre lang="ogdl"&gt;&lt;code&gt;github "jonkykong/SideMenu" "master"
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-swift-package-manager" class="anchor" aria-hidden="true" href="#swift-package-manager"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Swift Package Manager&lt;/h3&gt;
&lt;p&gt;The &lt;a href="https://swift.org/package-manager/" rel="nofollow"&gt;Swift Package Manager&lt;/a&gt; is a tool for automating the distribution of Swift code and is integrated into the &lt;code&gt;swift&lt;/code&gt; compiler. It is in early development, but SideMenu does support its use on supported platforms.&lt;/p&gt;
&lt;p&gt;Once you have your Swift package set up, adding SideMenu as a dependency is as easy as adding it to the &lt;code&gt;dependencies&lt;/code&gt; value of your &lt;code&gt;Package.swift&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;dependencies&lt;span class="pl-k"&gt;:&lt;/span&gt; [
    .&lt;span class="pl-c1"&gt;package&lt;/span&gt;(&lt;span class="pl-c1"&gt;url&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;https://github.com/jonkykong/SideMenu.git&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;from&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;6.0.0&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
]&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Usage&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-code-less-storyboard-implementation" class="anchor" aria-hidden="true" href="#code-less-storyboard-implementation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Code-less Storyboard Implementation&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Create a Navigation Controller for a side menu. Set the &lt;code&gt;Custom Class&lt;/code&gt; of the Navigation Controller to be &lt;code&gt;SideMenuNavigationController&lt;/code&gt; in the &lt;strong&gt;Identity Inspector&lt;/strong&gt;. Set the &lt;code&gt;Module&lt;/code&gt; to &lt;code&gt;SideMenu&lt;/code&gt; (ignore this step if you've manually added SideMenu to your project). Create a Root View Controller for the Navigation Controller (shown as a UITableViewController below). Set up any Triggered Segues you want in that view controller.
&lt;a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/jonkykong/SideMenu/master/etc/Screenshot1.png"&gt;&lt;img src="https://raw.githubusercontent.com/jonkykong/SideMenu/master/etc/Screenshot1.png" alt="" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Set the &lt;code&gt;Left Side&lt;/code&gt; property of the &lt;code&gt;SideMenuNavigationController&lt;/code&gt; to On if you want it to appear from the left side of the screen, or Off/Default if you want it to appear from the right side.
&lt;a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/jonkykong/SideMenu/master/etc/Screenshot2.png"&gt;&lt;img src="https://raw.githubusercontent.com/jonkykong/SideMenu/master/etc/Screenshot2.png" alt="" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add a UIButton or UIBarButton to a view controller that you want to display the menu from. Set that button's Triggered Segues action to modally present the Navigation Controller from step 1.
&lt;a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/jonkykong/SideMenu/master/etc/Screenshot3.png"&gt;&lt;img src="https://raw.githubusercontent.com/jonkykong/SideMenu/master/etc/Screenshot3.png" alt="" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That's it. &lt;em&gt;Note: you can only enable gestures in code.&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-code-implementation" class="anchor" aria-hidden="true" href="#code-implementation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Code Implementation&lt;/h3&gt;
&lt;p&gt;First:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;SideMenu&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;From a button, do something like this:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Define the menu&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; menu &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;SideMenuNavigationController&lt;/span&gt;(&lt;span class="pl-c1"&gt;rootViewController&lt;/span&gt;: YourViewController)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; SideMenuNavigationController is a subclass of UINavigationController, so do any additional configuration &lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; of it here like setting its viewControllers. If you're using storyboards, you'll want to do something like:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; let menu = storyboard!.instantiateViewController(withIdentifier: "RightMenu") as! SideMenuNavigationController&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;present&lt;/span&gt;(menu, &lt;span class="pl-c1"&gt;animated&lt;/span&gt;: &lt;span class="pl-c1"&gt;true&lt;/span&gt;, &lt;span class="pl-c1"&gt;completion&lt;/span&gt;: &lt;span class="pl-c1"&gt;nil&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To dismiss a menu programmatically, do something like this:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;dismiss&lt;/span&gt;(&lt;span class="pl-c1"&gt;animated&lt;/span&gt;: &lt;span class="pl-c1"&gt;true&lt;/span&gt;, &lt;span class="pl-c1"&gt;completion&lt;/span&gt;: &lt;span class="pl-c1"&gt;nil&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To use gestures you have to use the &lt;code&gt;SideMenuManager&lt;/code&gt;. In your &lt;code&gt;AppDelegate&lt;/code&gt; do something like this:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Define the menus&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; leftMenuNavigationController &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;SideMenuNavigationController&lt;/span&gt;(&lt;span class="pl-c1"&gt;rootViewController&lt;/span&gt;: YourViewController)
SideMenuManager.&lt;span class="pl-smi"&gt;default&lt;/span&gt;.&lt;span class="pl-smi"&gt;leftMenuNavigationController&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; leftMenuNavigationController

&lt;span class="pl-k"&gt;let&lt;/span&gt; rightMenuNavigationController &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;SideMenuNavigationController&lt;/span&gt;(&lt;span class="pl-c1"&gt;rootViewController&lt;/span&gt;: YourViewController)
SideMenuManager.&lt;span class="pl-smi"&gt;default&lt;/span&gt;.&lt;span class="pl-smi"&gt;rightMenuNavigationController&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; rightMenuNavigationController

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Setup gestures: the left and/or right menus must be set up (above) for these to work.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Note that these continue to work on the Navigation Controller independent of the view controller it displays!&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;SideMenuManager.&lt;span class="pl-smi"&gt;default&lt;/span&gt;.&lt;span class="pl-c1"&gt;addPanGestureToPresent&lt;/span&gt;(&lt;span class="pl-c1"&gt;toView&lt;/span&gt;: &lt;span class="pl-c1"&gt;self&lt;/span&gt;.&lt;span class="pl-smi"&gt;navigationController&lt;/span&gt;&lt;span class="pl-k"&gt;!&lt;/span&gt;.&lt;span class="pl-smi"&gt;navigationBar&lt;/span&gt;)
SideMenuManager.&lt;span class="pl-smi"&gt;default&lt;/span&gt;.&lt;span class="pl-c1"&gt;addScreenEdgePanGesturesToPresent&lt;/span&gt;(&lt;span class="pl-c1"&gt;toView&lt;/span&gt;: &lt;span class="pl-c1"&gt;self&lt;/span&gt;.&lt;span class="pl-smi"&gt;navigationController&lt;/span&gt;&lt;span class="pl-k"&gt;!&lt;/span&gt;.&lt;span class="pl-c1"&gt;view&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; (Optional) Prevent status bar area from turning black when menu appears:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;leftMenuNavigationController.&lt;span class="pl-smi"&gt;statusBarEndAlpha&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Copy all settings to the other menu&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;rightMenuNavigationController.&lt;span class="pl-smi"&gt;settings&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; leftMenuNavigationController.&lt;span class="pl-smi"&gt;settings&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That's it.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-customization" class="anchor" aria-hidden="true" href="#customization"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Customization&lt;/h3&gt;
&lt;h4&gt;&lt;a id="user-content-sidemenumanager" class="anchor" aria-hidden="true" href="#sidemenumanager"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;SideMenuManager&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;SideMenuManager&lt;/code&gt; supports the following:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; The left menu.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;open&lt;/span&gt; &lt;span class="pl-k"&gt;var&lt;/span&gt; leftMenuNavigationController&lt;span class="pl-k"&gt;:&lt;/span&gt; SideMenuNavigationController&lt;span class="pl-k"&gt;?&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; The right menu.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;public&lt;/span&gt; &lt;span class="pl-k"&gt;var&lt;/span&gt; rightMenuNavigationController&lt;span class="pl-k"&gt;:&lt;/span&gt; SideMenuNavigationController&lt;span class="pl-k"&gt;?&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;/**&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt; Adds screen edge gestures for both left and right sides to a view to present a menu.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt; - Parameter toView: The view to add gestures to.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt; - Returns: The array of screen edge gestures added to `toView`.&lt;/span&gt;
&lt;span class="pl-c"&gt; &lt;span class="pl-c"&gt;*/&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;@discardableResult&lt;/span&gt; &lt;span class="pl-k"&gt;public&lt;/span&gt; &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;addScreenEdgePanGesturesToPresent&lt;/span&gt;(&lt;span class="pl-en"&gt;toView&lt;/span&gt; &lt;span class="pl-smi"&gt;view&lt;/span&gt;: UIView) &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; [UIScreenEdgePanGestureRecognizer]
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;/**&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt; Adds screen edge gestures to a view to present a menu.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt; - Parameter toView: The view to add gestures to.&lt;/span&gt;
&lt;span class="pl-c"&gt; - Parameter forMenu: The menu (left or right) you want to add a gesture for.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt; - Returns: The screen edge gestures added to `toView`.&lt;/span&gt;
&lt;span class="pl-c"&gt; &lt;span class="pl-c"&gt;*/&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;@discardableResult&lt;/span&gt; &lt;span class="pl-k"&gt;public&lt;/span&gt; &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;addScreenEdgePanGesturesToPresent&lt;/span&gt;(&lt;span class="pl-en"&gt;toView&lt;/span&gt; &lt;span class="pl-smi"&gt;view&lt;/span&gt;: UIView, &lt;span class="pl-en"&gt;forMenu&lt;/span&gt; &lt;span class="pl-smi"&gt;side&lt;/span&gt;: PresentDirection) &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; UIScreenEdgePanGestureRecognizer
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;/**&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt; Adds a pan edge gesture to a view to present menus.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt; - Parameter toView: The view to add a pan gesture to.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt; - Returns: The pan gesture added to `toView`.&lt;/span&gt;
&lt;span class="pl-c"&gt; &lt;span class="pl-c"&gt;*/&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;@discardableResult&lt;/span&gt; &lt;span class="pl-k"&gt;public&lt;/span&gt; &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;addPanGestureToPresent&lt;/span&gt;(&lt;span class="pl-en"&gt;toView&lt;/span&gt; &lt;span class="pl-smi"&gt;view&lt;/span&gt;: UIView) &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; UIPanGestureRecognizer&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content-sidemenunavigationcontroller" class="anchor" aria-hidden="true" href="#sidemenunavigationcontroller"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;SideMenuNavigationController&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;SideMenuNavigationController&lt;/code&gt; supports the following:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; Prevents the same view controller (or a view controller of the same class) from being pushed more than once. Defaults to true.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;var&lt;/span&gt; allowPushOfSameClassTwice&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;Bool&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; Forces menus to always animate when appearing or disappearing, regardless of a pushed view controller's animation.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;var&lt;/span&gt; alwaysAnimate&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;Bool&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; The animation options when a menu is displayed. Ignored when displayed with a gesture.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;var&lt;/span&gt; animationOptions&lt;span class="pl-k"&gt;:&lt;/span&gt; UIView.&lt;span class="pl-smi"&gt;AnimationOptions&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; .&lt;span class="pl-smi"&gt;curveEaseInOut&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;/**&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt; The blur effect style of the menu if the menu's root view controller is a UITableViewController or UICollectionViewController.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt; - Note: If you want cells in a UITableViewController menu to show vibrancy, make them a subclass of UITableViewVibrantCell.&lt;/span&gt;
&lt;span class="pl-c"&gt; &lt;span class="pl-c"&gt;*/&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;var&lt;/span&gt; blurEffectStyle&lt;span class="pl-k"&gt;:&lt;/span&gt; UIBlurEffect.&lt;span class="pl-smi"&gt;Style&lt;/span&gt;&lt;span class="pl-k"&gt;?&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; Duration of the remaining animation when the menu is partially dismissed with gestures. Default is 0.35 seconds.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;var&lt;/span&gt; completeGestureDuration&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;Double&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;0.35&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; Animation curve of the remaining animation when the menu is partially dismissed with gestures. Default is .easeIn.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;var&lt;/span&gt; completionCurve&lt;span class="pl-k"&gt;:&lt;/span&gt; UIView.&lt;span class="pl-smi"&gt;AnimationCurve&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; .&lt;span class="pl-smi"&gt;curveEaseInOut&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; Duration of the animation when the menu is dismissed without gestures. Default is 0.35 seconds.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;var&lt;/span&gt; dismissDuration&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;Double&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;0.35&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; Automatically dismisses the menu when another view is presented from it.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;var&lt;/span&gt; dismissOnPresent&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;Bool&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; Automatically dismisses the menu when another view controller is pushed from it.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;var&lt;/span&gt; dismissOnPush&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;Bool&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; Automatically dismisses the menu when the screen is rotated.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;var&lt;/span&gt; dismissOnRotation&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;Bool&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; Automatically dismisses the menu when app goes to the background.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;var&lt;/span&gt; dismissWhenBackgrounded&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;Bool&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; Enable or disable a swipe gesture that dismisses the menu. Will not be triggered when `presentingViewControllerUserInteractionEnabled` is set to true. Default is true.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;var&lt;/span&gt; enableSwipeToDismissGesture&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;Bool&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; Enable or disable a tap gesture that dismisses the menu. Will not be triggered when `presentingViewControllerUserInteractionEnabled` is set to true. Default is true.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;var&lt;/span&gt; enableTapToDismissGesture&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;Bool&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; The animation initial spring velocity when a menu is displayed. Ignored when displayed with a gesture.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;var&lt;/span&gt; initialSpringVelocity&lt;span class="pl-k"&gt;:&lt;/span&gt; CGFloat &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; Whether the menu appears on the right or left side of the screen. Right is the default. This property cannot be changed after the menu has loaded.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;var&lt;/span&gt; leftSide&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;Bool&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;false&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; Width of the menu when presented on screen, showing the existing view controller in the remaining space. Default is zero.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;var&lt;/span&gt; menuWidth&lt;span class="pl-k"&gt;:&lt;/span&gt; CGFloat &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;240&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; Duration of the animation when the menu is presented without gestures. Default is 0.35 seconds.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;var&lt;/span&gt; presentDuration&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;Double&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;0.35&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; Enable or disable interaction with the presenting view controller while the menu is displayed. Enabling may make it difficult to dismiss the menu or cause exceptions if the user tries to present and already presented menu. `presentingViewControllerUseSnapshot` must also set to false. Default is false.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;var&lt;/span&gt; presentingViewControllerUserInteractionEnabled&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;Bool&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;false&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; Use a snapshot for the presenting vierw controller while the menu is displayed. Useful when layout changes occur during transitions. Not recommended for apps that support rotation. Default is false.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;var&lt;/span&gt; presentingViewControllerUseSnapshot&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;Bool&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;false&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; The presentation style of the menu.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;var&lt;/span&gt; presentationStyle&lt;span class="pl-k"&gt;:&lt;/span&gt; SideMenuPresentStyle &lt;span class="pl-k"&gt;=&lt;/span&gt; .&lt;span class="pl-smi"&gt;viewSlideOut&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;/**&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt; The push style of the menu.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt; There are six modes in MenuPushStyle:&lt;/span&gt;
&lt;span class="pl-c"&gt; - defaultBehavior: The view controller is pushed onto the stack.&lt;/span&gt;
&lt;span class="pl-c"&gt; - popWhenPossible: If a view controller already in the stack is of the same class as the pushed view controller, the stack is instead popped back to the existing view controller. This behavior can help users from getting lost in a deep navigation stack.&lt;/span&gt;
&lt;span class="pl-c"&gt; - preserve: If a view controller already in the stack is of the same class as the pushed view controller, the existing view controller is pushed to the end of the stack. This behavior is similar to a UITabBarController.&lt;/span&gt;
&lt;span class="pl-c"&gt; - preserveAndHideBackButton: Same as .preserve and back buttons are automatically hidden.&lt;/span&gt;
&lt;span class="pl-c"&gt; - replace: Any existing view controllers are released from the stack and replaced with the pushed view controller. Back buttons are automatically hidden. This behavior is ideal if view controllers require a lot of memory or their state doesn't need to be preserved..&lt;/span&gt;
&lt;span class="pl-c"&gt; - subMenu: Unlike all other behaviors that push using the menu's presentingViewController, this behavior pushes view controllers within the menu.  Use this behavior if you want to display a sub menu.&lt;/span&gt;
&lt;span class="pl-c"&gt; &lt;span class="pl-c"&gt;*/&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;var&lt;/span&gt; pushStyle&lt;span class="pl-k"&gt;:&lt;/span&gt; MenuPushStyle &lt;span class="pl-k"&gt;=&lt;/span&gt; .&lt;span class="pl-smi"&gt;default&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; Draws `presentationStyle.backgroundColor` behind the status bar. Default is 1.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;var&lt;/span&gt; statusBarEndAlpha&lt;span class="pl-k"&gt;:&lt;/span&gt; CGFloat &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; The animation spring damping when a menu is displayed. Ignored when displayed with a gesture.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;var&lt;/span&gt; usingSpringWithDamping&lt;span class="pl-k"&gt;:&lt;/span&gt; CGFloat &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; Indicates if the menu is anywhere in the view hierarchy, even if covered by another view controller.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;var&lt;/span&gt; isHidden&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;Bool&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content-sidemenupresentstyle" class="anchor" aria-hidden="true" href="#sidemenupresentstyle"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;SideMenuPresentStyle&lt;/h4&gt;
&lt;p&gt;There are 8 pre-defined &lt;code&gt;SideMenuPresentStyle&lt;/code&gt; options:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; Menu slides in over the existing view.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;static&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; menuSlideIn&lt;span class="pl-k"&gt;:&lt;/span&gt; SideMenuPresentStyle
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; The existing view slides out to reveal the menu underneath.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;static&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; viewSlideOut&lt;span class="pl-k"&gt;:&lt;/span&gt; SideMenuPresentStyle
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; The existing view slides out while the menu slides in.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;static&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; viewSlideOutMenuIn&lt;span class="pl-k"&gt;:&lt;/span&gt; SideMenuPresentStyle
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; The menu dissolves in over the existing view.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;static&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; menuDissolveIn&lt;span class="pl-k"&gt;:&lt;/span&gt; SideMenuPresentStyle
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; The existing view slides out while the menu partially slides in.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;static&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; viewSlideOutMenuPartialIn&lt;span class="pl-k"&gt;:&lt;/span&gt; SideMenuPresentStyle
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; The existing view slides out while the menu slides out from under it.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;static&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; viewSlideOutMenuOut&lt;span class="pl-k"&gt;:&lt;/span&gt; SideMenuPresentStyle
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; The existing view slides out while the menu partially slides out from under it.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;static&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; viewSlideOutMenuPartialOut&lt;span class="pl-k"&gt;:&lt;/span&gt; SideMenuPresentStyle
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; The existing view slides out and shrinks to reveal the menu underneath.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;static&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; viewSlideOutMenuZoom&lt;span class="pl-k"&gt;:&lt;/span&gt; SideMenuPresentStyle&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content-sidemenunavigationcontrollerdelegate" class="anchor" aria-hidden="true" href="#sidemenunavigationcontrollerdelegate"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;SideMenuNavigationControllerDelegate&lt;/h4&gt;
&lt;p&gt;To receive notifications when a menu is displayed from a view controller, have it adhere to the  &lt;code&gt;SideMenuNavigationControllerDelegate&lt;/code&gt; protocol:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;extension&lt;/span&gt; &lt;span class="pl-en"&gt;MyViewController&lt;/span&gt;: &lt;span class="pl-e"&gt;SideMenuNavigationControllerDelegate &lt;/span&gt;{

    &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;sideMenuWillAppear&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-en"&gt;menu&lt;/span&gt;&lt;/span&gt;: SideMenuNavigationController, &lt;span class="pl-smi"&gt;&lt;span class="pl-en"&gt;animated&lt;/span&gt;&lt;/span&gt;: &lt;span class="pl-c1"&gt;Bool&lt;/span&gt;) {
        &lt;span class="pl-c1"&gt;print&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SideMenu Appearing! (animated: &lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;animated&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;)&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    }

    &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;sideMenuDidAppear&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-en"&gt;menu&lt;/span&gt;&lt;/span&gt;: SideMenuNavigationController, &lt;span class="pl-smi"&gt;&lt;span class="pl-en"&gt;animated&lt;/span&gt;&lt;/span&gt;: &lt;span class="pl-c1"&gt;Bool&lt;/span&gt;) {
        &lt;span class="pl-c1"&gt;print&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SideMenu Appeared! (animated: &lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;animated&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;)&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    }

    &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;sideMenuWillDisappear&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-en"&gt;menu&lt;/span&gt;&lt;/span&gt;: SideMenuNavigationController, &lt;span class="pl-smi"&gt;&lt;span class="pl-en"&gt;animated&lt;/span&gt;&lt;/span&gt;: &lt;span class="pl-c1"&gt;Bool&lt;/span&gt;) {
        &lt;span class="pl-c1"&gt;print&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SideMenu Disappearing! (animated: &lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;animated&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;)&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    }

    &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;sideMenuDidDisappear&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-en"&gt;menu&lt;/span&gt;&lt;/span&gt;: SideMenuNavigationController, &lt;span class="pl-smi"&gt;&lt;span class="pl-en"&gt;animated&lt;/span&gt;&lt;/span&gt;: &lt;span class="pl-c1"&gt;Bool&lt;/span&gt;) {
        &lt;span class="pl-c1"&gt;print&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SideMenu Disappeared! (animated: &lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;animated&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;)&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note: setting the  &lt;code&gt;sideMenuDelegate&lt;/code&gt; property on &lt;code&gt;SideMenuNavigationController&lt;/code&gt; is optional. If your view controller adheres to the protocol then the methods will be called automatically.&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-advanced" class="anchor" aria-hidden="true" href="#advanced"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Advanced&lt;/h3&gt;
&lt;details&gt;
&lt;summary&gt;Click for Details&lt;/summary&gt;
&lt;h4&gt;&lt;a id="user-content-multiple-sidemenumanagers" class="anchor" aria-hidden="true" href="#multiple-sidemenumanagers"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Multiple SideMenuManagers&lt;/h4&gt;
&lt;p&gt;For simplicity, &lt;code&gt;SideMenuManager.default&lt;/code&gt; serves as the primary instance as most projects will only need one menu across all screens. If you need to show a different SideMenu using gestures, such as from a modal view controller presented from a previous SideMenu, do the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Declare a variable containing your custom &lt;code&gt;SideMenuManager&lt;/code&gt; instance. You may want it to define it globally and configure it in your app delegate if menus will be used on multiple screens.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; customSideMenuManager &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;SideMenuManager&lt;/span&gt;()&lt;/pre&gt;&lt;/div&gt;
&lt;ol start="2"&gt;
&lt;li&gt;Setup and display menus with your custom instance the same as you would with the  &lt;code&gt;SideMenuManager.default&lt;/code&gt; instance.&lt;/li&gt;
&lt;li&gt;If using Storyboards, subclass your instance of &lt;code&gt;SideMenuNavigationController&lt;/code&gt; and set its &lt;code&gt;sideMenuManager&lt;/code&gt; property to your custom instance. This must be done before &lt;code&gt;viewDidLoad&lt;/code&gt; is called:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;MySideMenuNavigationController&lt;/span&gt;: &lt;span class="pl-e"&gt;SideMenuNavigationController &lt;/span&gt;{

    &lt;span class="pl-k"&gt;let&lt;/span&gt; customSideMenuManager &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;SideMenuManager&lt;/span&gt;()

    &lt;span class="pl-k"&gt;override&lt;/span&gt; &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;awakeFromNib&lt;/span&gt;() {
        &lt;span class="pl-c1"&gt;super&lt;/span&gt;.&lt;span class="pl-c1"&gt;awakeFromNib&lt;/span&gt;()

        sideMenuManager &lt;span class="pl-k"&gt;=&lt;/span&gt; customSideMenuManager
    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Alternatively, you can set  &lt;code&gt;sideMenuManager&lt;/code&gt; from the view controller that segues to your SideMenuNavigationController:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;override&lt;/span&gt; &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;prepare&lt;/span&gt;(&lt;span class="pl-en"&gt;for&lt;/span&gt; &lt;span class="pl-smi"&gt;segue&lt;/span&gt;: UIStoryboardSegue, &lt;span class="pl-smi"&gt;&lt;span class="pl-en"&gt;sender&lt;/span&gt;&lt;/span&gt;: &lt;span class="pl-c1"&gt;Any&lt;/span&gt;&lt;span class="pl-k"&gt;?&lt;/span&gt;) {
    &lt;span class="pl-k"&gt;if&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; sideMenuNavigationController &lt;span class="pl-k"&gt;=&lt;/span&gt; segue.&lt;span class="pl-smi"&gt;destination&lt;/span&gt; &lt;span class="pl-k"&gt;as?&lt;/span&gt; SideMenuNavigationController {
        sideMenuNavigationController.&lt;span class="pl-smi"&gt;sideMenuManager&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; customSideMenuManager
    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Important: displaying SideMenu instances directly over each other is not supported. Use &lt;code&gt;menuPushStyle = .subMenu&lt;/code&gt; to display multi-level menus instead.&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-sidemenupresentationstyle" class="anchor" aria-hidden="true" href="#sidemenupresentationstyle"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;SideMenuPresentationStyle&lt;/h3&gt;
&lt;p&gt;If you want to create your own custom presentation style, create a subclass of &lt;code&gt;SideMenuPresentationStyle&lt;/code&gt; and set your menu's &lt;code&gt;presentationStyle&lt;/code&gt; to it:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;MyPresentStyle&lt;/span&gt;: &lt;span class="pl-e"&gt;SideMenuPresentationStyle &lt;/span&gt;{

    &lt;span class="pl-k"&gt;override&lt;/span&gt; &lt;span class="pl-k"&gt;init&lt;/span&gt;() {
        &lt;span class="pl-c1"&gt;super&lt;/span&gt;.&lt;span class="pl-k"&gt;init&lt;/span&gt;()
        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; Background color behind the views and status bar color&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;        backgroundColor &lt;span class="pl-k"&gt;=&lt;/span&gt; .&lt;span class="pl-smi"&gt;black&lt;/span&gt;
        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; The starting alpha value of the menu before it appears&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;        menuStartAlpha &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;
        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; Whether or not the menu is on top. If false, the presenting view is on top. Shadows are applied to the view on top.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;        menuOnTop &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;false&lt;/span&gt;
        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; The amount the menu is translated along the x-axis. Zero is stationary, negative values are off-screen, positive values are on screen.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;        menuTranslateFactor &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt;
        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; The amount the menu is scaled. Less than one shrinks the view, larger than one grows the view.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;        menuScaleFactor &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;
        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; The color of the shadow applied to the top most view.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;        onTopShadowColor &lt;span class="pl-k"&gt;=&lt;/span&gt; .&lt;span class="pl-smi"&gt;black&lt;/span&gt;
        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; The radius of the shadow applied to the top most view.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;        onTopShadowRadius &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt;
        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; The opacity of the shadow applied to the top most view.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;        onTopShadowOpacity &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt;
        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; The offset of the shadow applied to the top most view.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;        onTopShadowOffset &lt;span class="pl-k"&gt;=&lt;/span&gt; .&lt;span class="pl-smi"&gt;zero&lt;/span&gt;
        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; The ending alpha of the presenting view when the menu is fully displayed.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;        presentingEndAlpha &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;
        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; The amount the presenting view is translated along the x-axis. Zero is stationary, negative values are off-screen, positive values are on screen.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;        presentingTranslateFactor &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt;
        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; The amount the presenting view is scaled. Less than one shrinks the view, larger than one grows the view.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;        presentingScaleFactor &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;
        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; The strength of the parallax effect on the presenting view once the menu is displayed.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;        presentingParallaxStrength &lt;span class="pl-k"&gt;=&lt;/span&gt; .&lt;span class="pl-smi"&gt;zero&lt;/span&gt;
    }

    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; This method is called just before the presentation transition begins. Use this to setup any animations. The super method does not need to be called.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;override&lt;/span&gt; &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;presentationTransitionWillBegin&lt;/span&gt;(&lt;span class="pl-en"&gt;to&lt;/span&gt; &lt;span class="pl-smi"&gt;presentedViewController&lt;/span&gt;: UIViewController, &lt;span class="pl-en"&gt;from&lt;/span&gt; &lt;span class="pl-smi"&gt;presentingViewController&lt;/span&gt;: UIViewController) {}
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; This method is called during the presentation animation. Use this to animate anything alongside the menu animation. The super method does not need to be called.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;override&lt;/span&gt; &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;presentationTransition&lt;/span&gt;(&lt;span class="pl-en"&gt;to&lt;/span&gt; &lt;span class="pl-smi"&gt;presentedViewController&lt;/span&gt;: UIViewController, &lt;span class="pl-en"&gt;from&lt;/span&gt; &lt;span class="pl-smi"&gt;presentingViewController&lt;/span&gt;: UIViewController) {}
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; This method is called when the presentation transition ends. Use this to finish any animations. The super method does not need to be called.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;override&lt;/span&gt; &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;presentationTransitionDidEnd&lt;/span&gt;(&lt;span class="pl-en"&gt;to&lt;/span&gt; &lt;span class="pl-smi"&gt;presentedViewController&lt;/span&gt;: UIViewController, &lt;span class="pl-en"&gt;from&lt;/span&gt; &lt;span class="pl-smi"&gt;presentingViewController&lt;/span&gt;: UIViewController, &lt;span class="pl-en"&gt;_&lt;/span&gt; &lt;span class="pl-smi"&gt;completed&lt;/span&gt;: &lt;span class="pl-c1"&gt;Bool&lt;/span&gt;) {}
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; This method is called just before the dismissal transition begins. Use this to setup any animations. The super method does not need to be called.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;override&lt;/span&gt; &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;dismissalTransitionWillBegin&lt;/span&gt;(&lt;span class="pl-en"&gt;to&lt;/span&gt; &lt;span class="pl-smi"&gt;presentedViewController&lt;/span&gt;: UIViewController, &lt;span class="pl-en"&gt;from&lt;/span&gt; &lt;span class="pl-smi"&gt;presentingViewController&lt;/span&gt;: UIViewController) {}
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; This method is called during the dismissal animation. Use this to animate anything alongside the menu animation. The super method does not need to be called.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;override&lt;/span&gt; &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;dismissalTransition&lt;/span&gt;(&lt;span class="pl-en"&gt;to&lt;/span&gt; &lt;span class="pl-smi"&gt;presentedViewController&lt;/span&gt;: UIViewController, &lt;span class="pl-en"&gt;from&lt;/span&gt; &lt;span class="pl-smi"&gt;presentingViewController&lt;/span&gt;: UIViewController) {}
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; This method is called when the dismissal transition ends. Use this to finish any animations. The super method does not need to be called.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;override&lt;/span&gt; &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;dismissalTransitionDidEnd&lt;/span&gt;(&lt;span class="pl-en"&gt;to&lt;/span&gt; &lt;span class="pl-smi"&gt;presentedViewController&lt;/span&gt;: UIViewController, &lt;span class="pl-en"&gt;from&lt;/span&gt; &lt;span class="pl-smi"&gt;presentingViewController&lt;/span&gt;: UIViewController, &lt;span class="pl-en"&gt;_&lt;/span&gt; &lt;span class="pl-smi"&gt;completed&lt;/span&gt;: &lt;span class="pl-c1"&gt;Bool&lt;/span&gt;) {}
}&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;h2&gt;&lt;a id="user-content-known-issues" class="anchor" aria-hidden="true" href="#known-issues"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Known Issues&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Issue &lt;a href="https://github.com/jonkykong/SideMenu/issues/258"&gt;#258&lt;/a&gt;. Using &lt;code&gt;presentingViewControllerUseSnapshot&lt;/code&gt; can help preserve the experience.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-thank-you" class="anchor" aria-hidden="true" href="#thank-you"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Thank You&lt;/h2&gt;
&lt;p&gt;A special thank you to everyone that has &lt;a href="https://github.com/jonkykong/SideMenu/graphs/contributors"&gt;contributed&lt;/a&gt; to this library to make it better. Your support is appreciated!&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-license" class="anchor" aria-hidden="true" href="#license"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;License&lt;/h2&gt;
&lt;p&gt;SideMenu is available under the MIT license. See the LICENSE file for more info.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>jonkykong</author><guid isPermaLink="false">https://github.com/jonkykong/SideMenu</guid><pubDate>Mon, 18 Nov 2019 00:18:00 GMT</pubDate></item><item><title>apple/swift-nio #19 in Swift, This week</title><link>https://github.com/apple/swift-nio</link><description>&lt;p&gt;&lt;i&gt;Event-driven network application framework for high performance protocol servers &amp; clients, non-blocking.&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-swiftnio" class="anchor" aria-hidden="true" href="#swiftnio"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;SwiftNIO&lt;/h1&gt;
&lt;p&gt;SwiftNIO is a cross-platform asynchronous event-driven network application framework
for rapid development of maintainable high performance protocol servers &amp;amp; clients.&lt;/p&gt;
&lt;p&gt;It's like &lt;a href="https://netty.io" rel="nofollow"&gt;Netty&lt;/a&gt;, but written for Swift.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-repository-organization" class="anchor" aria-hidden="true" href="#repository-organization"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Repository organization&lt;/h3&gt;
&lt;p&gt;The SwiftNIO project is split across multiple repositories:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Repository&lt;/th&gt;
&lt;th&gt;NIO 2 (Swift 5+)&lt;/th&gt;
&lt;th&gt;NIO 1 (Swift 4+)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/apple/swift-nio"&gt;https://github.com/apple/swift-nio&lt;/a&gt; &lt;br&gt; SwiftNIO core&lt;/td&gt;
&lt;td&gt;&lt;code&gt;from: "2.0.0"&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;from: "1.0.0"&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/apple/swift-nio-ssl"&gt;https://github.com/apple/swift-nio-ssl&lt;/a&gt; &lt;br&gt; TLS (SSL) support&lt;/td&gt;
&lt;td&gt;&lt;code&gt;from: "2.0.0"&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;from: "1.0.0"&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/apple/swift-nio-http2"&gt;https://github.com/apple/swift-nio-http2&lt;/a&gt;&lt;br&gt; HTTP/2 support&lt;/td&gt;
&lt;td&gt;&lt;code&gt;from: "1.0.0"&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;from: "0.1.0"&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/apple/swift-nio-extras"&gt;https://github.com/apple/swift-nio-extras&lt;/a&gt; &lt;br&gt;useful additions around SwiftNIO&lt;/td&gt;
&lt;td&gt;&lt;code&gt;from: "1.0.0"&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;from: "0.1.0"&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/apple/swift-nio-transport-services"&gt;https://github.com/apple/swift-nio-transport-services&lt;/a&gt; &lt;br&gt; first-class support for macOS, iOS, and tvOS&lt;/td&gt;
&lt;td&gt;&lt;code&gt;from: "1.0.0"&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;from: "0.1.0"&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;&lt;a id="user-content-supported-platforms" class="anchor" aria-hidden="true" href="#supported-platforms"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Supported Platforms&lt;/h3&gt;
&lt;p&gt;SwiftNIO aims to support all of the platforms where Swift is supported. Currently, it is developed and tested on macOS and Linux, and is known to support the following operating system versions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ubuntu 14.04+&lt;/li&gt;
&lt;li&gt;macOS 10.12+; (macOS 10.14+, iOS 12+, or tvOS 12+ with &lt;a href="https://github.com/apple/swift-nio-transport-services"&gt;swift-nio-transport-services&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-swift-versions" class="anchor" aria-hidden="true" href="#swift-versions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Swift versions&lt;/h3&gt;
&lt;h4&gt;&lt;a id="user-content-swiftnio-1" class="anchor" aria-hidden="true" href="#swiftnio-1"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;SwiftNIO 1&lt;/h4&gt;
&lt;p&gt;The latest released SwiftNIO 1 version supports Swift 4.0, 4.1, 4.2, and 5.0.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-swiftnio-2" class="anchor" aria-hidden="true" href="#swiftnio-2"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;SwiftNIO 2&lt;/h4&gt;
&lt;p&gt;The latest released SwiftNIO 2 version supports only Swift 5.0 &amp;amp; 5.1. If you have a SwiftNIO 1 application or library that you would like to migrate to SwiftNIO 2, please check out the &lt;a href="docs/migration-guide-NIO1-to-NIO2.md"&gt;migration guide&lt;/a&gt; we prepared for you.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-compatibility" class="anchor" aria-hidden="true" href="#compatibility"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Compatibility&lt;/h3&gt;
&lt;p&gt;SwiftNIO follows &lt;a href="https://semver.org/#semantic-versioning-200" rel="nofollow"&gt;SemVer 2.0.0&lt;/a&gt; with a separate document declaring &lt;a href="docs/public-api.md"&gt;SwiftNIO's Public API&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;What this means for you is that you should depend on SwiftNIO with a version range that covers everything from the minimum SwiftNIO version you require up to the next major version.
In SwiftPM that can be easily done specifying for example &lt;code&gt;from: "2.0.0"&lt;/code&gt; meaning that you support SwiftNIO in every version starting from 2.0.0 up to (excluding) 3.0.0.
SemVer and SwiftNIO's Public API guarantees should result in a working program without having to worry about testing every single version for compatibility.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-conceptual-overview" class="anchor" aria-hidden="true" href="#conceptual-overview"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Conceptual Overview&lt;/h2&gt;
&lt;p&gt;SwiftNIO is fundamentally a low-level tool for building high-performance networking applications in Swift. It particularly targets those use-cases where using a "thread-per-connection" model of concurrency is inefficient or untenable. This is a common limitation when building servers that use a large number of relatively low-utilization connections, such as HTTP servers.&lt;/p&gt;
&lt;p&gt;To achieve its goals SwiftNIO extensively uses "non-blocking I/O": hence the name! Non-blocking I/O differs from the more common blocking I/O model because the application does not wait for data to be sent to or received from the network: instead, SwiftNIO asks for the kernel to notify it when I/O operations can be performed without waiting.&lt;/p&gt;
&lt;p&gt;SwiftNIO does not aim to provide high-level solutions like, for example, web frameworks do. Instead, SwiftNIO is focused on providing the low-level building blocks for these higher-level applications. When it comes to building a web application, most users will not want to use SwiftNIO directly: instead, they'll want to use one of the many great web frameworks available in the Swift ecosystem. Those web frameworks, however, may choose to use SwiftNIO under the covers to provide their networking support.&lt;/p&gt;
&lt;p&gt;The following sections will describe the low-level tools that SwiftNIO provides, and provide a quick overview of how to work with them. If you feel comfortable with these concepts, then you can skip right ahead to the other sections of this README.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-basic-architecture" class="anchor" aria-hidden="true" href="#basic-architecture"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Basic Architecture&lt;/h3&gt;
&lt;p&gt;The basic building blocks of SwiftNIO are the following 8 types of objects:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Protocols/EventLoopGroup.html" rel="nofollow"&gt;&lt;code&gt;EventLoopGroup&lt;/code&gt;&lt;/a&gt;, a protocol&lt;/li&gt;
&lt;li&gt;&lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Protocols/EventLoop.html" rel="nofollow"&gt;&lt;code&gt;EventLoop&lt;/code&gt;&lt;/a&gt;, a protocol&lt;/li&gt;
&lt;li&gt;&lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Protocols/Channel.html" rel="nofollow"&gt;&lt;code&gt;Channel&lt;/code&gt;&lt;/a&gt;, a protocol&lt;/li&gt;
&lt;li&gt;&lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Protocols/ChannelHandler.html" rel="nofollow"&gt;&lt;code&gt;ChannelHandler&lt;/code&gt;&lt;/a&gt;, a protocol&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Bootstrap&lt;/code&gt;, several related structures&lt;/li&gt;
&lt;li&gt;&lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Structs/ByteBuffer.html" rel="nofollow"&gt;&lt;code&gt;ByteBuffer&lt;/code&gt;&lt;/a&gt;, a struct&lt;/li&gt;
&lt;li&gt;&lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Classes/EventLoopFuture.html" rel="nofollow"&gt;&lt;code&gt;EventLoopFuture&lt;/code&gt;&lt;/a&gt;, a generic class&lt;/li&gt;
&lt;li&gt;&lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Structs/EventLoopPromise.html" rel="nofollow"&gt;&lt;code&gt;EventLoopPromise&lt;/code&gt;&lt;/a&gt;, a generic struct.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All SwiftNIO applications are ultimately constructed of these various components.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-eventloops-and-eventloopgroups" class="anchor" aria-hidden="true" href="#eventloops-and-eventloopgroups"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;EventLoops and EventLoopGroups&lt;/h4&gt;
&lt;p&gt;The basic I/O primitive of SwiftNIO is the event loop. The event loop is an object that waits for events (usually I/O related events, such as "data received") to happen and then fires some kind of callback when they do. In almost all SwiftNIO applications there will be relatively few event loops: usually only one or two per CPU core the application wants to use. Generally speaking event loops run for the entire lifetime of your application, spinning in an endless loop dispatching events.&lt;/p&gt;
&lt;p&gt;Event loops are gathered together into event loop &lt;em&gt;groups&lt;/em&gt;. These groups provide a mechanism to distribute work around the event loops. For example, when listening for inbound connections the listening socket will be registered on one event loop. However, we don't want all connections that are accepted on that listening socket to be registered with the same event loop, as that would potentially overload one event loop while leaving the others empty. For that reason, the event loop group provides the ability to spread load across multiple event loops.&lt;/p&gt;
&lt;p&gt;In SwiftNIO today there is one &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Protocols/EventLoopGroup.html" rel="nofollow"&gt;&lt;code&gt;EventLoopGroup&lt;/code&gt;&lt;/a&gt; implementation, and two &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Protocols/EventLoop.html" rel="nofollow"&gt;&lt;code&gt;EventLoop&lt;/code&gt;&lt;/a&gt; implementations. For production applications there is the &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Classes/MultiThreadedEventLoopGroup.html" rel="nofollow"&gt;&lt;code&gt;MultiThreadedEventLoopGroup&lt;/code&gt;&lt;/a&gt;, an &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Protocols/EventLoopGroup.html" rel="nofollow"&gt;&lt;code&gt;EventLoopGroup&lt;/code&gt;&lt;/a&gt; that creates a number of threads (using the POSIX &lt;a href="https://en.wikipedia.org/wiki/POSIX_Threads" rel="nofollow"&gt;&lt;code&gt;pthreads&lt;/code&gt;&lt;/a&gt; library) and places one &lt;code&gt;SelectableEventLoop&lt;/code&gt; on each one. The &lt;code&gt;SelectableEventLoop&lt;/code&gt; is an event loop that uses a selector (either &lt;a href="https://en.wikipedia.org/wiki/Kqueue" rel="nofollow"&gt;&lt;code&gt;kqueue&lt;/code&gt;&lt;/a&gt; or &lt;a href="https://en.wikipedia.org/wiki/Epoll" rel="nofollow"&gt;&lt;code&gt;epoll&lt;/code&gt;&lt;/a&gt; depending on the target system) to manage I/O events from file descriptors and to dispatch work. Additionally, there is the &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Classes/EmbeddedEventLoop.html" rel="nofollow"&gt;&lt;code&gt;EmbeddedEventLoop&lt;/code&gt;&lt;/a&gt;, which is a dummy event loop that is used primarily for testing purposes.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Protocols/EventLoop.html" rel="nofollow"&gt;&lt;code&gt;EventLoop&lt;/code&gt;&lt;/a&gt;s have a number of important properties. Most vitally, they are the way all work gets done in SwiftNIO applications. In order to ensure thread-safety, any work that wants to be done on almost any of the other objects in SwiftNIO must be dispatched via an &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Protocols/EventLoop.html" rel="nofollow"&gt;&lt;code&gt;EventLoop&lt;/code&gt;&lt;/a&gt;. &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Protocols/EventLoop.html" rel="nofollow"&gt;&lt;code&gt;EventLoop&lt;/code&gt;&lt;/a&gt; objects own almost all the other objects in a SwiftNIO application, and understanding their execution model is critical for building high-performance SwiftNIO applications.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-channels-channel-handlers-channel-pipelines-and-channel-contexts" class="anchor" aria-hidden="true" href="#channels-channel-handlers-channel-pipelines-and-channel-contexts"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Channels, Channel Handlers, Channel Pipelines, and Channel Contexts&lt;/h4&gt;
&lt;p&gt;While &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Protocols/EventLoop.html" rel="nofollow"&gt;&lt;code&gt;EventLoop&lt;/code&gt;&lt;/a&gt;s are critical to the way SwiftNIO works, most users will not interact with them substantially beyond asking them to create &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Structs/EventLoopPromise.html" rel="nofollow"&gt;&lt;code&gt;EventLoopPromise&lt;/code&gt;&lt;/a&gt;s and to schedule work. The parts of a SwiftNIO application most users will spend the most time interacting with are &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Protocols/Channel.html" rel="nofollow"&gt;&lt;code&gt;Channel&lt;/code&gt;&lt;/a&gt;s and &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Protocols/ChannelHandler.html" rel="nofollow"&gt;&lt;code&gt;ChannelHandler&lt;/code&gt;&lt;/a&gt;s.&lt;/p&gt;
&lt;p&gt;Almost every file descriptor that a user interacts with in a SwiftNIO program is associated with a single &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Protocols/Channel.html" rel="nofollow"&gt;&lt;code&gt;Channel&lt;/code&gt;&lt;/a&gt;. The &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Protocols/Channel.html" rel="nofollow"&gt;&lt;code&gt;Channel&lt;/code&gt;&lt;/a&gt; owns this file descriptor, and is responsible for managing its lifetime. It is also responsible for processing inbound and outbound events on that file descriptor: whenever the event loop has an event that corresponds to a file descriptor, it will notify the &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Protocols/Channel.html" rel="nofollow"&gt;&lt;code&gt;Channel&lt;/code&gt;&lt;/a&gt; that owns that file descriptor.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Protocols/Channel.html" rel="nofollow"&gt;&lt;code&gt;Channel&lt;/code&gt;&lt;/a&gt;s by themselves, however, are not useful. After all, it is a rare application that doesn't want to do anything with the data it sends or receives on a socket! So the other important part of the &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Protocols/Channel.html" rel="nofollow"&gt;&lt;code&gt;Channel&lt;/code&gt;&lt;/a&gt; is the &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Classes/ChannelPipeline.html" rel="nofollow"&gt;&lt;code&gt;ChannelPipeline&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Classes/ChannelPipeline.html" rel="nofollow"&gt;&lt;code&gt;ChannelPipeline&lt;/code&gt;&lt;/a&gt; is a sequence of objects, called &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Protocols/ChannelHandler.html" rel="nofollow"&gt;&lt;code&gt;ChannelHandler&lt;/code&gt;&lt;/a&gt;s, that process events on a &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Protocols/Channel.html" rel="nofollow"&gt;&lt;code&gt;Channel&lt;/code&gt;&lt;/a&gt;. The &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Protocols/ChannelHandler.html" rel="nofollow"&gt;&lt;code&gt;ChannelHandler&lt;/code&gt;&lt;/a&gt;s process these events one after another, in order, mutating and transforming events as they go. This can be thought of as a data processing pipeline; hence the name &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Classes/ChannelPipeline.html" rel="nofollow"&gt;&lt;code&gt;ChannelPipeline&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;All &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Protocols/ChannelHandler.html" rel="nofollow"&gt;&lt;code&gt;ChannelHandler&lt;/code&gt;&lt;/a&gt;s are either Inbound or Outbound handlers, or both. Inbound handlers process "inbound" events: events like reading data from a socket, reading socket close, or other kinds of events initiated by remote peers. Outbound handlers process "outbound" events, such as writes, connection attempts, and local socket closes.&lt;/p&gt;
&lt;p&gt;Each handler processes the events in order. For example, read events are passed from the front of the pipeline to the back, one handler at a time, while write events are passed from the back of the pipeline to the front. Each handler may, at any time, generate either inbound or outbound events that will be sent to the next handler in whichever direction is appropriate. This allows handlers to split up reads, coalesce writes, delay connection attempts, and generally perform arbitrary transformations of events.&lt;/p&gt;
&lt;p&gt;In general, &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Protocols/ChannelHandler.html" rel="nofollow"&gt;&lt;code&gt;ChannelHandler&lt;/code&gt;&lt;/a&gt;s are designed to be highly re-usable components. This means they tend to be designed to be as small as possible, performing one specific data transformation. This allows handlers to be composed together in novel and flexible ways, which helps with code reuse and encapsulation.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Protocols/ChannelHandler.html" rel="nofollow"&gt;&lt;code&gt;ChannelHandler&lt;/code&gt;&lt;/a&gt;s are able to keep track of where they are in a &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Classes/ChannelPipeline.html" rel="nofollow"&gt;&lt;code&gt;ChannelPipeline&lt;/code&gt;&lt;/a&gt; by using a &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Classes/ChannelHandlerContext.html" rel="nofollow"&gt;&lt;code&gt;ChannelHandlerContext&lt;/code&gt;&lt;/a&gt;. These objects contain references to the previous and next channel handler in the pipeline, ensuring that it is always possible for a &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Protocols/ChannelHandler.html" rel="nofollow"&gt;&lt;code&gt;ChannelHandler&lt;/code&gt;&lt;/a&gt; to emit events while it remains in a pipeline.&lt;/p&gt;
&lt;p&gt;SwiftNIO ships with many &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Protocols/ChannelHandler.html" rel="nofollow"&gt;&lt;code&gt;ChannelHandler&lt;/code&gt;&lt;/a&gt;s built in that provide useful functionality, such as HTTP parsing. In addition, high-performance applications will want to provide as much of their logic as possible in &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Protocols/ChannelHandler.html" rel="nofollow"&gt;&lt;code&gt;ChannelHandler&lt;/code&gt;&lt;/a&gt;s, as it helps avoid problems with context switching.&lt;/p&gt;
&lt;p&gt;Additionally, SwiftNIO ships with a few &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Protocols/Channel.html" rel="nofollow"&gt;&lt;code&gt;Channel&lt;/code&gt;&lt;/a&gt; implementations. In particular, it ships with &lt;code&gt;ServerSocketChannel&lt;/code&gt;, a &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Protocols/Channel.html" rel="nofollow"&gt;&lt;code&gt;Channel&lt;/code&gt;&lt;/a&gt; for sockets that accept inbound connections; &lt;code&gt;SocketChannel&lt;/code&gt;, a &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Protocols/Channel.html" rel="nofollow"&gt;&lt;code&gt;Channel&lt;/code&gt;&lt;/a&gt; for TCP connections; &lt;code&gt;DatagramChannel&lt;/code&gt;, a &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Protocols/Channel.html" rel="nofollow"&gt;&lt;code&gt;Channel&lt;/code&gt;&lt;/a&gt; for UDP sockets; and &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Classes/EmbeddedChannel.html" rel="nofollow"&gt;&lt;code&gt;EmbeddedChannel&lt;/code&gt;&lt;/a&gt;, a &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Protocols/Channel.html" rel="nofollow"&gt;&lt;code&gt;Channel&lt;/code&gt;&lt;/a&gt; primarily used for testing.&lt;/p&gt;
&lt;h5&gt;&lt;a id="user-content-a-note-on-blocking" class="anchor" aria-hidden="true" href="#a-note-on-blocking"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;A Note on Blocking&lt;/h5&gt;
&lt;p&gt;One of the important notes about &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Classes/ChannelPipeline.html" rel="nofollow"&gt;&lt;code&gt;ChannelPipeline&lt;/code&gt;&lt;/a&gt;s is that they are thread-safe. This is very important for writing SwiftNIO applications, as it allows you to write much simpler &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Protocols/ChannelHandler.html" rel="nofollow"&gt;&lt;code&gt;ChannelHandler&lt;/code&gt;&lt;/a&gt;s in the knowledge that they will not require synchronization.&lt;/p&gt;
&lt;p&gt;However, this is achieved by dispatching all code on the &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Classes/ChannelPipeline.html" rel="nofollow"&gt;&lt;code&gt;ChannelPipeline&lt;/code&gt;&lt;/a&gt; on the same thread as the &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Protocols/EventLoop.html" rel="nofollow"&gt;&lt;code&gt;EventLoop&lt;/code&gt;&lt;/a&gt;. This means that, as a general rule, &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Protocols/ChannelHandler.html" rel="nofollow"&gt;&lt;code&gt;ChannelHandler&lt;/code&gt;&lt;/a&gt;s &lt;strong&gt;must not&lt;/strong&gt; call blocking code without dispatching it to a background thread. If a &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Protocols/ChannelHandler.html" rel="nofollow"&gt;&lt;code&gt;ChannelHandler&lt;/code&gt;&lt;/a&gt; blocks for any reason, all &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Protocols/Channel.html" rel="nofollow"&gt;&lt;code&gt;Channel&lt;/code&gt;&lt;/a&gt;s attached to the parent &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Protocols/EventLoop.html" rel="nofollow"&gt;&lt;code&gt;EventLoop&lt;/code&gt;&lt;/a&gt; will be unable to progress until the blocking call completes.&lt;/p&gt;
&lt;p&gt;This is a common concern while writing SwiftNIO applications. If it is useful to write code in a blocking style, it is highly recommended that you dispatch work to a different thread when you're done with it in your pipeline.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-bootstrap" class="anchor" aria-hidden="true" href="#bootstrap"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Bootstrap&lt;/h4&gt;
&lt;p&gt;While it is possible to configure and register &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Protocols/Channel.html" rel="nofollow"&gt;&lt;code&gt;Channel&lt;/code&gt;&lt;/a&gt;s with &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Protocols/EventLoop.html" rel="nofollow"&gt;&lt;code&gt;EventLoop&lt;/code&gt;&lt;/a&gt;s directly, it is generally more useful to have a higher-level abstraction to handle this work.&lt;/p&gt;
&lt;p&gt;For this reason, SwiftNIO ships a number of &lt;code&gt;Bootstrap&lt;/code&gt; objects whose purpose is to streamline the creation of channels. Some &lt;code&gt;Bootstrap&lt;/code&gt; objects also provide other functionality, such as support for Happy Eyeballs for making TCP connection attempts.&lt;/p&gt;
&lt;p&gt;Currently SwiftNIO ships with three &lt;code&gt;Bootstrap&lt;/code&gt; objects: &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Classes/ServerBootstrap.html" rel="nofollow"&gt;&lt;code&gt;ServerBootstrap&lt;/code&gt;&lt;/a&gt;, for bootstrapping listening channels; &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Classes/ClientBootstrap.html" rel="nofollow"&gt;&lt;code&gt;ClientBootstrap&lt;/code&gt;&lt;/a&gt;, for bootstrapping client TCP channels; and &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Classes/DatagramBootstrap.html" rel="nofollow"&gt;&lt;code&gt;DatagramBootstrap&lt;/code&gt;&lt;/a&gt; for bootstrapping UDP channels.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-bytebuffer" class="anchor" aria-hidden="true" href="#bytebuffer"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;ByteBuffer&lt;/h4&gt;
&lt;p&gt;The majority of the work in a SwiftNIO application involves shuffling buffers of bytes around. At the very least, data is sent and received to and from the network in the form of buffers of bytes. For this reason it's very important to have a high-performance data structure that is optimized for the kind of work SwiftNIO applications perform.&lt;/p&gt;
&lt;p&gt;For this reason, SwiftNIO provides &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Structs/ByteBuffer.html" rel="nofollow"&gt;&lt;code&gt;ByteBuffer&lt;/code&gt;&lt;/a&gt;, a fast copy-on-write byte buffer that forms a key building block of most SwiftNIO applications.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Structs/ByteBuffer.html" rel="nofollow"&gt;&lt;code&gt;ByteBuffer&lt;/code&gt;&lt;/a&gt; provides a number of useful features, and in addition provides a number of hooks to use it in an "unsafe" mode. This turns off bounds checking for improved performance, at the cost of potentially opening your application up to memory correctness problems.&lt;/p&gt;
&lt;p&gt;In general, it is highly recommended that you use the &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Structs/ByteBuffer.html" rel="nofollow"&gt;&lt;code&gt;ByteBuffer&lt;/code&gt;&lt;/a&gt; in its safe mode at all times.&lt;/p&gt;
&lt;p&gt;For more details on the API of &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Structs/ByteBuffer.html" rel="nofollow"&gt;&lt;code&gt;ByteBuffer&lt;/code&gt;&lt;/a&gt;, please see our API documentation, linked below.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-promises-and-futures" class="anchor" aria-hidden="true" href="#promises-and-futures"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Promises and Futures&lt;/h4&gt;
&lt;p&gt;One major difference between writing concurrent code and writing synchronous code is that not all actions will complete immediately. For example, when you write data on a channel, it is possible that the event loop will not be able to immediately flush that write out to the network. For this reason, SwiftNIO provides &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Structs/EventLoopPromise.html" rel="nofollow"&gt;&lt;code&gt;EventLoopPromise&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Classes/EventLoopFuture.html" rel="nofollow"&gt;&lt;code&gt;EventLoopFuture&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt; to manage operations that complete &lt;em&gt;asynchronously&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;An &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Classes/EventLoopFuture.html" rel="nofollow"&gt;&lt;code&gt;EventLoopFuture&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt; is essentially a container for the return value of a function that will be populated &lt;em&gt;at some time in the future&lt;/em&gt;. Each &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Classes/EventLoopFuture.html" rel="nofollow"&gt;&lt;code&gt;EventLoopFuture&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt; has a corresponding &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Structs/EventLoopPromise.html" rel="nofollow"&gt;&lt;code&gt;EventLoopPromise&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt;, which is the object that the result will be put into. When the promise is succeeded, the future will be fulfilled.&lt;/p&gt;
&lt;p&gt;If you had to poll the future to detect when it completed that would be quite inefficient, so &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Classes/EventLoopFuture.html" rel="nofollow"&gt;&lt;code&gt;EventLoopFuture&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt; is designed to have managed callbacks. Essentially, you can hang callbacks off the future that will be executed when a result is available. The &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Classes/EventLoopFuture.html" rel="nofollow"&gt;&lt;code&gt;EventLoopFuture&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt; will even carefully arrange the scheduling to ensure that these callbacks always execute on the event loop that initially created the promise, which helps ensure that you don't need too much synchronization around &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Classes/EventLoopFuture.html" rel="nofollow"&gt;&lt;code&gt;EventLoopFuture&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt; callbacks.&lt;/p&gt;
&lt;p&gt;Another important topic for consideration is the difference between how the promise passed to &lt;code&gt;close&lt;/code&gt; works as opposed to &lt;code&gt;closeFuture&lt;/code&gt; on a &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Protocols/Channel.html" rel="nofollow"&gt;&lt;code&gt;Channel&lt;/code&gt;&lt;/a&gt;. For example, the promise passed into &lt;code&gt;close&lt;/code&gt; will succeed after the &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Protocols/Channel.html" rel="nofollow"&gt;&lt;code&gt;Channel&lt;/code&gt;&lt;/a&gt; is closed down but before the &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Classes/ChannelPipeline.html" rel="nofollow"&gt;&lt;code&gt;ChannelPipeline&lt;/code&gt;&lt;/a&gt; is completely cleared out. This will allow you to take action on the &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Classes/ChannelPipeline.html" rel="nofollow"&gt;&lt;code&gt;ChannelPipeline&lt;/code&gt;&lt;/a&gt; before it is completely cleared out, if needed. If it is desired to wait for the &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Protocols/Channel.html" rel="nofollow"&gt;&lt;code&gt;Channel&lt;/code&gt;&lt;/a&gt; to close down and the &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Classes/ChannelPipeline.html" rel="nofollow"&gt;&lt;code&gt;ChannelPipeline&lt;/code&gt;&lt;/a&gt; to be cleared out without any further action, then the better option would be to wait for the &lt;code&gt;closeFuture&lt;/code&gt; to succeed.&lt;/p&gt;
&lt;p&gt;There are several functions for applying callbacks to &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Classes/EventLoopFuture.html" rel="nofollow"&gt;&lt;code&gt;EventLoopFuture&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt;, depending on how and when you want them to execute. Details of these functions is left to the API documentation.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-design-philosophy" class="anchor" aria-hidden="true" href="#design-philosophy"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Design Philosophy&lt;/h3&gt;
&lt;p&gt;SwiftNIO is designed to be a powerful tool for building networked applications and frameworks, but it is not intended to be the perfect solution for all levels of abstraction. SwiftNIO is tightly focused on providing the basic I/O primitives and protocol implementations at low levels of abstraction, leaving more expressive but slower abstractions to the wider community to build. The intention is that SwiftNIO will be a building block for server-side applications, not necessarily the framework those applications will use directly.&lt;/p&gt;
&lt;p&gt;Applications that need extremely high performance from their networking stack may choose to use SwiftNIO directly in order to reduce the overhead of their abstractions. These applications should be able to maintain extremely high performance with relatively little maintenance cost. SwiftNIO also focuses on providing useful abstractions for this use-case, such that extremely high performance network servers can be built directly.&lt;/p&gt;
&lt;p&gt;The core SwiftNIO repository will contain a few extremely important protocol implementations, such as HTTP, directly in tree. However, we believe that most protocol implementations should be decoupled from the release cycle of the underlying networking stack, as the release cadence is likely to be very different (either much faster or much slower). For this reason, we actively encourage the community to develop and maintain their protocol implementations out-of-tree. Indeed, some first-party SwiftNIO protocol implementations, including our TLS and HTTP/2 bindings, are developed out-of-tree!&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Documentation&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/index.html" rel="nofollow"&gt;API documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-example-usage" class="anchor" aria-hidden="true" href="#example-usage"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Example Usage&lt;/h2&gt;
&lt;p&gt;There are currently several example projects that demonstrate how to use SwiftNIO.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;chat client&lt;/strong&gt; &lt;a href="https://github.com/apple/swift-nio/tree/master/Sources/NIOChatClient"&gt;https://github.com/apple/swift-nio/tree/master/Sources/NIOChatClient&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;chat server&lt;/strong&gt; &lt;a href="https://github.com/apple/swift-nio/tree/master/Sources/NIOChatServer"&gt;https://github.com/apple/swift-nio/tree/master/Sources/NIOChatServer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;echo client&lt;/strong&gt; &lt;a href="https://github.com/apple/swift-nio/tree/master/Sources/NIOEchoClient"&gt;https://github.com/apple/swift-nio/tree/master/Sources/NIOEchoClient&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;echo server&lt;/strong&gt; &lt;a href="https://github.com/apple/swift-nio/tree/master/Sources/NIOEchoServer"&gt;https://github.com/apple/swift-nio/tree/master/Sources/NIOEchoServer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;UDP echo client&lt;/strong&gt; &lt;a href="https://github.com/apple/swift-nio/tree/master/Sources/NIOUDPEchoClient"&gt;https://github.com/apple/swift-nio/tree/master/Sources/NIOUDPEchoClient&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;UDP echo server&lt;/strong&gt; &lt;a href="https://github.com/apple/swift-nio/tree/master/Sources/NIOUDPEchoServer"&gt;https://github.com/apple/swift-nio/tree/master/Sources/NIOUDPEchoServer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;HTTP client&lt;/strong&gt; &lt;a href="https://github.com/apple/swift-nio/tree/master/Sources/NIOHTTP1Client"&gt;https://github.com/apple/swift-nio/tree/master/Sources/NIOHTTP1Client&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;HTTP server&lt;/strong&gt; &lt;a href="https://github.com/apple/swift-nio/tree/master/Sources/NIOHTTP1Server"&gt;https://github.com/apple/swift-nio/tree/master/Sources/NIOHTTP1Server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;WebSocket client&lt;/strong&gt; &lt;a href="https://github.com/apple/swift-nio/tree/master/Sources/NIOWebSocketClient"&gt;https://github.com/apple/swift-nio/tree/master/Sources/NIOWebSocketClient&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;WebSocket server&lt;/strong&gt; &lt;a href="https://github.com/apple/swift-nio/tree/master/Sources/NIOWebSocketServer"&gt;https://github.com/apple/swift-nio/tree/master/Sources/NIOWebSocketServer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-getting-started" class="anchor" aria-hidden="true" href="#getting-started"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Getting Started&lt;/h2&gt;
&lt;p&gt;SwiftNIO primarily uses &lt;a href="https://swift.org/package-manager/" rel="nofollow"&gt;SwiftPM&lt;/a&gt; as its build tool, so we recommend using that as well. If you want to depend on SwiftNIO in your own project, it's as simple as adding a &lt;code&gt;dependencies&lt;/code&gt; clause to your &lt;code&gt;Package.swift&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;dependencies&lt;span class="pl-k"&gt;:&lt;/span&gt; [
    .&lt;span class="pl-c1"&gt;package&lt;/span&gt;(&lt;span class="pl-c1"&gt;url&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;https://github.com/apple/swift-nio.git&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;from&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;2.0.0&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
]&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and then adding the appropriate SwiftNIO module(s) to your target dependencies.&lt;/p&gt;
&lt;p&gt;If your project is set up as an Xcode project and you're using Xcode 11+, you can add SwiftNIO as a dependency to your
Xcode project by clicking File -&amp;gt; Swift Packages -&amp;gt; Add Package Dependency. In the upcoming dialog, please enter
&lt;code&gt;https://github.com/apple/swift-nio.git&lt;/code&gt; and click Next twice. Finally, select the targets you are planning to use (for
example &lt;code&gt;NIO&lt;/code&gt;, &lt;code&gt;NIOHTTP1&lt;/code&gt;, and &lt;code&gt;NIOFoundationCompat&lt;/code&gt;) and click finish. Now will be able to &lt;code&gt;import NIO&lt;/code&gt; (as well as all
the other targets you have selected) in your project.&lt;/p&gt;
&lt;p&gt;To work on SwiftNIO itself, or to investigate some of the demonstration applications, you can clone the repository directly and use SwiftPM to help build it. For example, you can run the following commands to compile and run the example echo server:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;swift build
swift &lt;span class="pl-c1"&gt;test&lt;/span&gt;
swift run NIOEchoServer&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To verify that it is working, you can use another shell to attempt to connect to it:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;echo&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Hello SwiftNIO&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;|&lt;/span&gt; nc localhost 9999&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If all goes well, you'll see the message echoed back to you.&lt;/p&gt;
&lt;p&gt;To work on SwiftNIO in Xcode 11+, you can just open the &lt;code&gt;Package.swift&lt;/code&gt;
file in Xcode and use Xcode's support for SwiftPM Packages.&lt;/p&gt;
&lt;p&gt;If you want to develop SwiftNIO with Xcode 10, you have to generate an Xcode project:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;swift package generate-xcodeproj&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-an-alternative-using-docker-compose" class="anchor" aria-hidden="true" href="#an-alternative-using-docker-compose"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;An alternative: using &lt;code&gt;docker-compose&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Alternatively, you may want to develop or test with &lt;code&gt;docker-compose&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;First make sure you have &lt;a href="https://www.docker.com/community-edition" rel="nofollow"&gt;Docker&lt;/a&gt; installed, next run the following commands:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;docker-compose -f docker/docker-compose.yaml run test&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Will create a base image with Swift runtime and other build and test dependencies, compile SwiftNIO and run the unit and integration tests&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;docker-compose -f docker/docker-compose.yaml up echo&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Will create a base image, compile SwiftNIO, and run a sample &lt;code&gt;NIOEchoServer&lt;/code&gt; on
&lt;code&gt;localhost:9999&lt;/code&gt;. Test it by &lt;code&gt;echo Hello SwiftNIO | nc localhost 9999&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;docker-compose -f docker/docker-compose.yaml up http&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Will create a base image, compile SwiftNIO, and run a sample &lt;code&gt;NIOHTTP1Server&lt;/code&gt; on
&lt;code&gt;localhost:8888&lt;/code&gt;. Test it by &lt;code&gt;curl http://localhost:8888&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-developing-swiftnio" class="anchor" aria-hidden="true" href="#developing-swiftnio"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Developing SwiftNIO&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: This section is only relevant if you would like to develop SwiftNIO yourself. You can ignore the information here if you just want to use SwiftNIO as a SwiftPM package.&lt;/p&gt;
&lt;p&gt;For the most part, SwiftNIO development is as straightforward as any other SwiftPM project. With that said, we do have a few processes that are worth understanding before you contribute. For details, please see &lt;code&gt;CONTRIBUTING.md&lt;/code&gt; in this repository.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-prerequisites" class="anchor" aria-hidden="true" href="#prerequisites"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Prerequisites&lt;/h3&gt;
&lt;p&gt;SwiftNIO's &lt;code&gt;master&lt;/code&gt; branch is the development branch for the next releases of SwiftNIO 2, it's Swift 5-only.&lt;/p&gt;
&lt;p&gt;To be able to compile and run SwiftNIO and the integration tests, you need to
have a few prerequisites installed on your system.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-macos" class="anchor" aria-hidden="true" href="#macos"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;macOS&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Xcode 10.2 or newer, Xcode 11 recommended.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-linux" class="anchor" aria-hidden="true" href="#linux"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Linux&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Swift 5.0 or 5.1 (recommended) from &lt;a href="https://swift.org/download/#releases" rel="nofollow"&gt;swift.org/download&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;netcat (for integration tests only)&lt;/li&gt;
&lt;li&gt;lsof (for integration tests only)&lt;/li&gt;
&lt;li&gt;shasum (for integration tests only)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a id="user-content-ubuntu-1804" class="anchor" aria-hidden="true" href="#ubuntu-1804"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Ubuntu 18.04&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;# install swift tarball from https://swift.org/downloads
apt-get install -y git curl libatomic1 libxml2 netcat-openbsd lsof perl
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-fedora-28" class="anchor" aria-hidden="true" href="#fedora-28"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Fedora 28+&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;dnf install swift-lang /usr/bin/nc /usr/bin/lsof /usr/bin/shasum
&lt;/code&gt;&lt;/pre&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>apple</author><guid isPermaLink="false">https://github.com/apple/swift-nio</guid><pubDate>Mon, 18 Nov 2019 00:19:00 GMT</pubDate></item><item><title>onevcat/Kingfisher #20 in Swift, This week</title><link>https://github.com/onevcat/Kingfisher</link><description>&lt;p&gt;&lt;i&gt;A lightweight, pure-Swift library for downloading and caching images from the web.&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;p align="center"&gt;
&lt;a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/onevcat/Kingfisher/master/images/logo.png"&gt;&lt;img src="https://raw.githubusercontent.com/onevcat/Kingfisher/master/images/logo.png" alt="Kingfisher" title="Kingfisher" width="557" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p align="center"&gt;
&lt;a href="https://github.com/onevcat/Kingfisher/actions?query=workflow%3Abuild"&gt;&lt;img src="https://github.com/onevcat/kingfisher/workflows/build/badge.svg?branch=master" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="http://onevcat.github.io/Kingfisher/" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/0f5426bc074b33d5a330b98e1dce5bf3d87e5f94/68747470733a2f2f696d672e736869656c64732e696f2f636f636f61706f64732f762f4b696e676669736865722e7376673f7374796c653d666c6174" data-canonical-src="https://img.shields.io/cocoapods/v/Kingfisher.svg?style=flat" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://github.com/Carthage/Carthage/"&gt;&lt;img src="https://camo.githubusercontent.com/3dc8a44a2c3f7ccd5418008d1295aae48466c141/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f43617274686167652d636f6d70617469626c652d3442433531442e7376673f7374796c653d666c6174" data-canonical-src="https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://swift.org/package-manager/" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/378b1808fd201a4bb4c9a2e8f78ac6322bca15f2/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f53504d2d737570706f727465642d4445354334332e7376673f7374796c653d666c6174" data-canonical-src="https://img.shields.io/badge/SPM-supported-DE5C43.svg?style=flat" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://github.com/JamitLabs/Accio"&gt;&lt;img src="https://camo.githubusercontent.com/e502cdc2b27c1f2b2590f061d37b984ba3957c26/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f416363696f2d737570706f727465642d3041374346352e7376673f7374796c653d666c6174" data-canonical-src="https://img.shields.io/badge/Accio-supported-0A7CF5.svg?style=flat" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;br&gt;
&lt;a href="https://raw.githubusercontent.com/onevcat/Kingfisher/master/LICENSE" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/7813112d6e92298f067080fa7f1039037de6809e/68747470733a2f2f696d672e736869656c64732e696f2f636f636f61706f64732f6c2f4b696e676669736865722e7376673f7374796c653d666c6174" data-canonical-src="https://img.shields.io/cocoapods/l/Kingfisher.svg?style=flat" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="http://onevcat.github.io/Kingfisher/" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/770175f6c01d89c84a020706126a9e6399ff76c4/68747470733a2f2f696d672e736869656c64732e696f2f636f636f61706f64732f702f4b696e676669736865722e7376673f7374796c653d666c6174" data-canonical-src="https://img.shields.io/cocoapods/p/Kingfisher.svg?style=flat" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="#backers" alt="sponsors on Open Collective"&gt;&lt;img src="https://camo.githubusercontent.com/e71884fe161a4e78c2519d99a629add57501a45d/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f4b696e676669736865722f6261636b6572732f62616467652e737667" data-canonical-src="https://opencollective.com/Kingfisher/backers/badge.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="#sponsors" alt="Sponsors on Open Collective"&gt;&lt;img src="https://camo.githubusercontent.com/3545542879b4432fd8748e3d007d642226b334ce/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f4b696e676669736865722f73706f6e736f72732f62616467652e737667" data-canonical-src="https://opencollective.com/Kingfisher/sponsors/badge.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;Kingfisher is a powerful, pure-Swift library for downloading and caching images from the web. It provides you a chance to use a pure-Swift way to work with remote images in your next app.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-features" class="anchor" aria-hidden="true" href="#features"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Features&lt;/h2&gt;
&lt;ul class="contains-task-list"&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; Asynchronous image downloading and caching.&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; Loading image from either &lt;code&gt;URLSession&lt;/code&gt;-based networking or local provided data.&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; Useful image processors and filters provided.&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; Multiple-layer hybrid cache for both memory and disk.&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; Fine control on cache behavior. Customizable expiration date and size limit.&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; Cancelable downloading and auto-reusing previous downloaded content to improve performance.&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; Independent components. Use the downloader, caching system and image processors separately as you need.&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; Prefetching images and showing them from cache to boost your app.&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; View extensions for &lt;code&gt;UIImageView&lt;/code&gt;, &lt;code&gt;NSImageView&lt;/code&gt;, &lt;code&gt;NSButton&lt;/code&gt; and &lt;code&gt;UIButton&lt;/code&gt; to directly set an image from a URL.&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; Built-in transition animation when setting images.&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; Customizable placeholder and indicator while loading images.&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; Extensible image processing and image format easily.&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; SwiftUI support.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-kingfisher-101" class="anchor" aria-hidden="true" href="#kingfisher-101"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Kingfisher 101&lt;/h3&gt;
&lt;p&gt;The simplest use-case is setting an image to an image view with the &lt;code&gt;UIImageView&lt;/code&gt; extension:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; url &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;URL&lt;/span&gt;(&lt;span class="pl-c1"&gt;string&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;https://example.com/image.png&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
imageView.&lt;span class="pl-smi"&gt;kf&lt;/span&gt;.&lt;span class="pl-c1"&gt;setImage&lt;/span&gt;(&lt;span class="pl-c1"&gt;with&lt;/span&gt;: url)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Kingfisher will download the image from &lt;code&gt;url&lt;/code&gt;, send it to both memory cache and disk cache, and display it in &lt;code&gt;imageView&lt;/code&gt;. When you set with the same URL later, the image will be retrieved from cache and shown immediately.&lt;/p&gt;
&lt;p&gt;It also works if you use SwiftUI:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;KingfisherSwiftUI&lt;/span&gt;

&lt;span class="pl-k"&gt;var&lt;/span&gt; body&lt;span class="pl-k"&gt;:&lt;/span&gt; some View {
    &lt;span class="pl-c1"&gt;KFImage&lt;/span&gt;(&lt;span class="pl-c1"&gt;URL&lt;/span&gt;(&lt;span class="pl-c1"&gt;string&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;https://example.com/image.png&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;span class="pl-k"&gt;!&lt;/span&gt;)
}&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-a-more-advanced-example" class="anchor" aria-hidden="true" href="#a-more-advanced-example"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;A More Advanced Example&lt;/h3&gt;
&lt;p&gt;With the powerful options, you can do hard tasks with Kingfisher in a simple way. For example, the code below:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Downloads a high-resolution image.&lt;/li&gt;
&lt;li&gt;Downsamples it to match the image view size.&lt;/li&gt;
&lt;li&gt;Makes it round cornered with a given radius.&lt;/li&gt;
&lt;li&gt;Shows a system indicator and a placeholder image while downloading.&lt;/li&gt;
&lt;li&gt;When prepared, it animates the small thumbnail image with a "fade in" effect.&lt;/li&gt;
&lt;li&gt;The original large image is also cached to disk for later use, to get rid of downloading it again in a detail view.&lt;/li&gt;
&lt;li&gt;A console log is printed when the task finishes, either for success or failure.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; url &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;URL&lt;/span&gt;(&lt;span class="pl-c1"&gt;string&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;https://example.com/high_resolution_image.png&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-k"&gt;let&lt;/span&gt; processor &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;DownsamplingImageProcessor&lt;/span&gt;(&lt;span class="pl-c1"&gt;size&lt;/span&gt;: imageView.&lt;span class="pl-c1"&gt;size&lt;/span&gt;)
             &lt;span class="pl-k"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;RoundCornerImageProcessor&lt;/span&gt;(&lt;span class="pl-c1"&gt;cornerRadius&lt;/span&gt;: &lt;span class="pl-c1"&gt;20&lt;/span&gt;)
imageView.&lt;span class="pl-smi"&gt;kf&lt;/span&gt;.&lt;span class="pl-smi"&gt;indicatorType&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; .&lt;span class="pl-smi"&gt;activity&lt;/span&gt;
imageView.&lt;span class="pl-smi"&gt;kf&lt;/span&gt;.&lt;span class="pl-c1"&gt;setImage&lt;/span&gt;(
    &lt;span class="pl-c1"&gt;with&lt;/span&gt;: url,
    &lt;span class="pl-c1"&gt;placeholder&lt;/span&gt;: &lt;span class="pl-c1"&gt;UIImage&lt;/span&gt;(&lt;span class="pl-c1"&gt;named&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;placeholderImage&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;),
    &lt;span class="pl-c1"&gt;options&lt;/span&gt;: [
        .&lt;span class="pl-c1"&gt;processor&lt;/span&gt;(processor),
        .&lt;span class="pl-c1"&gt;scaleFactor&lt;/span&gt;(UIScreen.&lt;span class="pl-smi"&gt;main&lt;/span&gt;.&lt;span class="pl-smi"&gt;scale&lt;/span&gt;),
        .&lt;span class="pl-c1"&gt;transition&lt;/span&gt;(.&lt;span class="pl-c1"&gt;fade&lt;/span&gt;(&lt;span class="pl-c1"&gt;1&lt;/span&gt;)),
        .&lt;span class="pl-smi"&gt;cacheOriginalImage&lt;/span&gt;
    ])
{
    result &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;switch&lt;/span&gt; result {
    &lt;span class="pl-k"&gt;case&lt;/span&gt; .&lt;span class="pl-c1"&gt;success&lt;/span&gt;(&lt;span class="pl-k"&gt;let&lt;/span&gt; value)&lt;span class="pl-k"&gt;:&lt;/span&gt;
        &lt;span class="pl-c1"&gt;print&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Task done for: &lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;value.&lt;span class="pl-smi"&gt;source&lt;/span&gt;.&lt;span class="pl-c1"&gt;url&lt;/span&gt;&lt;span class="pl-k"&gt;?&lt;/span&gt;.&lt;span class="pl-smi"&gt;absoluteString&lt;/span&gt; &lt;span class="pl-k"&gt;??&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    &lt;span class="pl-k"&gt;case&lt;/span&gt; .&lt;span class="pl-c1"&gt;failure&lt;/span&gt;(&lt;span class="pl-k"&gt;let&lt;/span&gt; error)&lt;span class="pl-k"&gt;:&lt;/span&gt;
        &lt;span class="pl-c1"&gt;print&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Job failed: &lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;error.&lt;span class="pl-smi"&gt;localizedDescription&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It is really a very common situation I can meet in my daily work. Think about how many lines you need to write without Kingfisher. You will fall in love with it if you give it a try!&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-learn-more" class="anchor" aria-hidden="true" href="#learn-more"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Learn More&lt;/h3&gt;
&lt;p&gt;To learn the using of Kingfisher by more examples, take a look at the &lt;a href="https://github.com/onevcat/Kingfisher/wiki/Cheat-Sheet"&gt;Cheat Sheet&lt;/a&gt;. There we summarized most common tasks in Kingfisher, you can get a better idea on what this framework can do. There are also some tips for performance in the same page, remember to check them too.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-requirements" class="anchor" aria-hidden="true" href="#requirements"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Requirements&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;iOS 10.0+ / macOS 10.12+ / tvOS 10.0+ / watchOS 3.0+&lt;/li&gt;
&lt;li&gt;Swift 4.0+&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://github.com/onevcat/Kingfisher/wiki/Kingfisher-5.0-Migration-Guide"&gt;Kingfisher 5.0 Migration&lt;/a&gt; - Kingfisher 5.x is NOT fully compatible with version 4.x. However, the migration is not difficult. Depending on your use cases, it may take no effect or several minutes to modify your existing code for the new version. Please follow the &lt;a href="https://github.com/onevcat/Kingfisher/wiki/Kingfisher-5.0-Migration-Guide"&gt;migration guide&lt;/a&gt; when you prepare to upgrade Kingfisher in your project.&lt;/p&gt;
&lt;p&gt;If you are using an even earlier version, see the guides below to know the steps for migrating.&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Kingfisher 4.0 Migration - Kingfisher 3.x should be source compatible to Kingfisher 4. The reason for a major update is that we need to specify the Swift version explicitly for Xcode. All deprecated methods in Kingfisher 3 has been removed, so please ensure you have no warning left before you migrate from Kingfisher 3 to Kingfisher 4. If you have any trouble in migrating, please open an issue to discuss.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/onevcat/Kingfisher/wiki/Kingfisher-3.0-Migration-Guide"&gt;Kingfisher 3.0 Migration&lt;/a&gt; - If you are upgrading to Kingfisher 3.x from an earlier version, please read this for more information.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2&gt;&lt;a id="user-content-next-steps" class="anchor" aria-hidden="true" href="#next-steps"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Next Steps&lt;/h2&gt;
&lt;p&gt;We prepared a &lt;a href="https://github.com/onevcat/Kingfisher/wiki"&gt;wiki page&lt;/a&gt;. You can find tons of useful things there.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/onevcat/Kingfisher/wiki/Installation-Guide"&gt;Installation Guide&lt;/a&gt; - Follow it to integrate Kingfisher into your project.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/onevcat/Kingfisher/wiki/Cheat-Sheet"&gt;Cheat Sheet&lt;/a&gt;- Curious about what Kingfisher could do and how would it look like when used in your project? See this page for useful code snippets. If you are already familiar with Kingfisher, you could also learn new tricks to improve the way you use Kingfisher!&lt;/li&gt;
&lt;li&gt;&lt;a href="http://onevcat.github.io/Kingfisher/" rel="nofollow"&gt;API Reference&lt;/a&gt; - Lastly, please remember to read the full whenever you may need a more detailed reference.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-other" class="anchor" aria-hidden="true" href="#other"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Other&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-future-of-kingfisher" class="anchor" aria-hidden="true" href="#future-of-kingfisher"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Future of Kingfisher&lt;/h3&gt;
&lt;p&gt;I want to keep Kingfisher lightweight. This framework will focus on providing a simple solution for downloading and caching images. This doesn’t mean the framework can’t be improved. Kingfisher is far from perfect, so necessary and useful updates will be made to make it better.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-developments-and-tests" class="anchor" aria-hidden="true" href="#developments-and-tests"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Developments and Tests&lt;/h3&gt;
&lt;p&gt;Any contributing and pull requests are warmly welcome. However, before you plan to implement some features or try to fix an uncertain issue, it is recommended to open a discussion first. It would be appreciated if your pull requests could build and with all tests green. :)&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-about-the-logo" class="anchor" aria-hidden="true" href="#about-the-logo"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;About the logo&lt;/h3&gt;
&lt;p&gt;The logo of Kingfisher is inspired by &lt;a href="http://en.wikipedia.org/wiki/Tangram" rel="nofollow"&gt;Tangram (七巧板)&lt;/a&gt;, a dissection puzzle consisting of seven flat shapes from China. I believe she's a kingfisher bird instead of a swift, but someone insists that she is a pigeon. I guess I should give her a name. Hi, guys, do you have any suggestions?&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-contact" class="anchor" aria-hidden="true" href="#contact"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contact&lt;/h3&gt;
&lt;p&gt;Follow and contact me on &lt;a href="http://twitter.com/onevcat" rel="nofollow"&gt;Twitter&lt;/a&gt; or &lt;a href="http://weibo.com/onevcat" rel="nofollow"&gt;Sina Weibo&lt;/a&gt;. If you find an issue, just &lt;a href="https://github.com/onevcat/Kingfisher/issues/new"&gt;open a ticket&lt;/a&gt;. Pull requests are warmly welcome as well.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-contributors" class="anchor" aria-hidden="true" href="#contributors"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contributors&lt;/h2&gt;
&lt;p&gt;This project exists thanks to all the people who contribute. &lt;a href="https://github.com/onevcat/Kingfisher/blob/master/CONTRIBUTING.md"&gt;[Contribute]&lt;/a&gt;.
&lt;a href="https://opencollective.com/kingfisher#backer" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/22cc36c7a90c6c32d8699076d341051dc2884508/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f6b696e676669736865722f636f6e7472696275746f72732e7376673f77696474683d383930" data-canonical-src="https://opencollective.com/kingfisher/contributors.svg?width=890" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-backers" class="anchor" aria-hidden="true" href="#backers"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Backers&lt;/h2&gt;
&lt;p&gt;Thank you to all our backers! Your support is really important for the project and encourages us to continue. &lt;g-emoji class="g-emoji" alias="pray" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64f.png"&gt;🙏&lt;/g-emoji&gt; [&lt;a href="https://opencollective.com/kingfisher#backer" rel="nofollow"&gt;Become a backer&lt;/a&gt;]&lt;/p&gt;
&lt;p&gt;&lt;a href="https://opencollective.com/kingfisher#backers" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/52ce3d5e2601e5e98842aef1a393677fc5baca9a/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f6b696e676669736865722f6261636b6572732e7376673f77696474683d383930" data-canonical-src="https://opencollective.com/kingfisher/backers.svg?width=890" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-sponsors" class="anchor" aria-hidden="true" href="#sponsors"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Sponsors&lt;/h2&gt;
&lt;p&gt;Support this project by becoming a sponsor. Your logo will show up here with a link to your website. [&lt;a href="https://opencollective.com/kingfisher#sponsor" rel="nofollow"&gt;Become a sponsor&lt;/a&gt;]&lt;/p&gt;
&lt;p&gt;&lt;a href="https://opencollective.com/kingfisher/sponsor/0/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/29f631c84bf7ef3b91920939f068daf61b731dc3/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f6b696e676669736865722f73706f6e736f722f302f6176617461722e737667" data-canonical-src="https://opencollective.com/kingfisher/sponsor/0/avatar.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://opencollective.com/kingfisher/sponsor/1/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/98e3049fb9dd378e709dbe634b0dd4215d16a0ed/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f6b696e676669736865722f73706f6e736f722f312f6176617461722e737667" data-canonical-src="https://opencollective.com/kingfisher/sponsor/1/avatar.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://opencollective.com/kingfisher/sponsor/2/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/ab53edfb00b9619d7715f24b40cdc0afd15ad807/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f6b696e676669736865722f73706f6e736f722f322f6176617461722e737667" data-canonical-src="https://opencollective.com/kingfisher/sponsor/2/avatar.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://opencollective.com/kingfisher/sponsor/3/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/4a73b9b27386238fb79b153254b3cd12880f0b06/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f6b696e676669736865722f73706f6e736f722f332f6176617461722e737667" data-canonical-src="https://opencollective.com/kingfisher/sponsor/3/avatar.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://opencollective.com/kingfisher/sponsor/4/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/c8f68602f268e2e561cc0762ae3bda4a0f0eddbd/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f6b696e676669736865722f73706f6e736f722f342f6176617461722e737667" data-canonical-src="https://opencollective.com/kingfisher/sponsor/4/avatar.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://opencollective.com/kingfisher/sponsor/5/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/d36be979bf4a1a52d6ada492ded2e7d2c5e870ec/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f6b696e676669736865722f73706f6e736f722f352f6176617461722e737667" data-canonical-src="https://opencollective.com/kingfisher/sponsor/5/avatar.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://opencollective.com/kingfisher/sponsor/6/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/2976cc566e20343f507af2305c6c9265a6bbb876/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f6b696e676669736865722f73706f6e736f722f362f6176617461722e737667" data-canonical-src="https://opencollective.com/kingfisher/sponsor/6/avatar.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://opencollective.com/kingfisher/sponsor/7/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/041d09519b90b022d698d686ab7de6233a67c6e9/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f6b696e676669736865722f73706f6e736f722f372f6176617461722e737667" data-canonical-src="https://opencollective.com/kingfisher/sponsor/7/avatar.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://opencollective.com/kingfisher/sponsor/8/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/996a9cb4dc04a2c201adeaa7cef7928b0128d063/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f6b696e676669736865722f73706f6e736f722f382f6176617461722e737667" data-canonical-src="https://opencollective.com/kingfisher/sponsor/8/avatar.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://opencollective.com/kingfisher/sponsor/9/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/f4dc13b033ee37727b920cb4d9e973a1de2aa17b/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f6b696e676669736865722f73706f6e736f722f392f6176617461722e737667" data-canonical-src="https://opencollective.com/kingfisher/sponsor/9/avatar.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-license" class="anchor" aria-hidden="true" href="#license"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;License&lt;/h3&gt;
&lt;p&gt;Kingfisher is released under the MIT license. See LICENSE for details.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>onevcat</author><guid isPermaLink="false">https://github.com/onevcat/Kingfisher</guid><pubDate>Mon, 18 Nov 2019 00:20:00 GMT</pubDate></item><item><title>SwiftUIExtensions/Grid #21 in Swift, This week</title><link>https://github.com/SwiftUIExtensions/Grid</link><description>&lt;p&gt;&lt;i&gt;:rocket: SwiftUI Grid with custom styles.&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-swiftui-grid" class="anchor" aria-hidden="true" href="#swiftui-grid"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;SwiftUI Grid&lt;/h1&gt;
&lt;p&gt;SwiftUI Grid view layout with custom styles.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-features" class="anchor" aria-hidden="true" href="#features"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ZStack based layout&lt;/li&gt;
&lt;li&gt;Vertical and horizontal scrolling&lt;/li&gt;
&lt;li&gt;Supports all apple platforms&lt;/li&gt;
&lt;li&gt;Custom styles (ModularGridStyle, StaggeredGridStyle)&lt;/li&gt;
&lt;li&gt;SwiftUI code patterns (StyleStructs, EnvironmentValues, ViewBuilder)&lt;/li&gt;
&lt;li&gt;Active development for production apps&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Open &lt;code&gt;/Examples/GridExamples.xcodeproj&lt;/code&gt; for more examples for iOS, macOS, watchOS and tvOS&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-styles" class="anchor" aria-hidden="true" href="#styles"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Styles&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-modulargridstyle-default" class="anchor" aria-hidden="true" href="#modulargridstyle-default"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;ModularGridStyle (Default)&lt;/h3&gt;

&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="Resources/iPad1.png"&gt;&lt;img src="Resources/iPad1.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;Grid&lt;/span&gt;(colors) {
    &lt;span class="pl-c1"&gt;Rectangle&lt;/span&gt;()
        .&lt;span class="pl-c1"&gt;foregroundColor&lt;/span&gt;(&lt;span class="pl-c1"&gt;$0&lt;/span&gt;)
}
.&lt;span class="pl-c1"&gt;gridStyle&lt;/span&gt;(
    &lt;span class="pl-c1"&gt;ModularGridStyle&lt;/span&gt;(&lt;span class="pl-c1"&gt;columns&lt;/span&gt;: .&lt;span class="pl-c1"&gt;auto&lt;/span&gt;(.&lt;span class="pl-c1"&gt;min&lt;/span&gt;(&lt;span class="pl-c1"&gt;100&lt;/span&gt;)), &lt;span class="pl-c1"&gt;rows&lt;/span&gt;: .&lt;span class="pl-c1"&gt;auto&lt;/span&gt;(.&lt;span class="pl-c1"&gt;min&lt;/span&gt;(&lt;span class="pl-c1"&gt;100&lt;/span&gt;)))
)&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-staggeredgridstyle" class="anchor" aria-hidden="true" href="#staggeredgridstyle"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;StaggeredGridStyle&lt;/h3&gt;

&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="Resources/iPad2.png"&gt;&lt;img src="Resources/iPad2.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;Grid&lt;/span&gt;(&lt;span class="pl-c1"&gt;1&lt;/span&gt;&lt;span class="pl-k"&gt;...&lt;/span&gt;&lt;span class="pl-c1"&gt;69&lt;/span&gt;, &lt;span class="pl-c1"&gt;id&lt;/span&gt;: \.&lt;span class="pl-k"&gt;self&lt;/span&gt;) { index &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-c1"&gt;Image&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;index&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
        .&lt;span class="pl-c1"&gt;resizable&lt;/span&gt;()
        .&lt;span class="pl-c1"&gt;scaledToFit&lt;/span&gt;()
}
.&lt;span class="pl-c1"&gt;gridStyle&lt;/span&gt;(
    &lt;span class="pl-c1"&gt;StaggeredGridStyle&lt;/span&gt;(&lt;span class="pl-c1"&gt;tracks&lt;/span&gt;: &lt;span class="pl-c1"&gt;8&lt;/span&gt;, &lt;span class="pl-c1"&gt;axis&lt;/span&gt;: .&lt;span class="pl-smi"&gt;horizontal&lt;/span&gt;, &lt;span class="pl-c1"&gt;spacing&lt;/span&gt;: &lt;span class="pl-c1"&gt;4&lt;/span&gt;)
)&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-preferences" class="anchor" aria-hidden="true" href="#preferences"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Preferences&lt;/h2&gt;
&lt;p&gt;Get item size and position with preferences&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;struct&lt;/span&gt; &lt;span class="pl-en"&gt;CardsView&lt;/span&gt;: &lt;span class="pl-e"&gt;View &lt;/span&gt;{
    &lt;span class="pl-k"&gt;@State&lt;/span&gt; &lt;span class="pl-k"&gt;var&lt;/span&gt; selection&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;Int&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt;
    
    &lt;span class="pl-k"&gt;var&lt;/span&gt; body&lt;span class="pl-k"&gt;:&lt;/span&gt; some View {
        &lt;span class="pl-c1"&gt;Grid&lt;/span&gt;(&lt;span class="pl-c1"&gt;0&lt;/span&gt;&lt;span class="pl-k"&gt;..&amp;lt;&lt;/span&gt;&lt;span class="pl-c1"&gt;100&lt;/span&gt;) { number &lt;span class="pl-k"&gt;in&lt;/span&gt;
            &lt;span class="pl-c1"&gt;Card&lt;/span&gt;(&lt;span class="pl-c1"&gt;title&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;number&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
                .&lt;span class="pl-smi"&gt;onTapGesture&lt;/span&gt; {
                    &lt;span class="pl-c1"&gt;self&lt;/span&gt;.&lt;span class="pl-smi"&gt;selection&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; number
                }
        }
        .&lt;span class="pl-c1"&gt;padding&lt;/span&gt;()
        .&lt;span class="pl-c1"&gt;overlayPreferenceValue&lt;/span&gt;(GridItemBoundsPreferencesKey.&lt;span class="pl-k"&gt;self&lt;/span&gt;) { preferences &lt;span class="pl-k"&gt;in&lt;/span&gt;
            &lt;span class="pl-c1"&gt;RoundedRectangle&lt;/span&gt;(&lt;span class="pl-c1"&gt;cornerRadius&lt;/span&gt;: &lt;span class="pl-c1"&gt;16&lt;/span&gt;)
                .&lt;span class="pl-c1"&gt;strokeBorder&lt;/span&gt;(&lt;span class="pl-c1"&gt;lineWidth&lt;/span&gt;: &lt;span class="pl-c1"&gt;4&lt;/span&gt;)
                .&lt;span class="pl-c1"&gt;foregroundColor&lt;/span&gt;(.&lt;span class="pl-smi"&gt;white&lt;/span&gt;)
                .&lt;span class="pl-c1"&gt;frame&lt;/span&gt;(
                    &lt;span class="pl-c1"&gt;width&lt;/span&gt;: preferences[&lt;span class="pl-c1"&gt;self&lt;/span&gt;.&lt;span class="pl-smi"&gt;selection&lt;/span&gt;].&lt;span class="pl-smi"&gt;width&lt;/span&gt;,
                    &lt;span class="pl-c1"&gt;height&lt;/span&gt;: preferences[&lt;span class="pl-c1"&gt;self&lt;/span&gt;.&lt;span class="pl-smi"&gt;selection&lt;/span&gt;].&lt;span class="pl-smi"&gt;height&lt;/span&gt;
                )
                .&lt;span class="pl-c1"&gt;position&lt;/span&gt;(
                    &lt;span class="pl-c1"&gt;x&lt;/span&gt;: preferences[&lt;span class="pl-c1"&gt;self&lt;/span&gt;.&lt;span class="pl-smi"&gt;selection&lt;/span&gt;].&lt;span class="pl-smi"&gt;midX&lt;/span&gt;,
                    &lt;span class="pl-c1"&gt;y&lt;/span&gt;: preferences[&lt;span class="pl-c1"&gt;self&lt;/span&gt;.&lt;span class="pl-smi"&gt;selection&lt;/span&gt;].&lt;span class="pl-smi"&gt;midY&lt;/span&gt;
                )
                .&lt;span class="pl-c1"&gt;animation&lt;/span&gt;(.&lt;span class="pl-smi"&gt;linear&lt;/span&gt;)
        }
    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-sdks" class="anchor" aria-hidden="true" href="#sdks"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;SDKs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;iOS 13+&lt;/li&gt;
&lt;li&gt;Mac Catalyst 13.0+&lt;/li&gt;
&lt;li&gt;macOS 10.15+&lt;/li&gt;
&lt;li&gt;watchOS 6+&lt;/li&gt;
&lt;li&gt;Xcode 11.0+&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-roadmap" class="anchor" aria-hidden="true" href="#roadmap"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Roadmap&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Animations&lt;/li&gt;
&lt;li&gt;'CSS Grid'-like features&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-code-contibutions" class="anchor" aria-hidden="true" href="#code-contibutions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Code Contibutions&lt;/h2&gt;
&lt;p&gt;Feel free to contribute via fork/pull request to master branch. If you want to request a feature or report a bug please start a new issue.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-coffee-contibutions" class="anchor" aria-hidden="true" href="#coffee-contibutions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Coffee Contibutions&lt;/h2&gt;
&lt;p&gt;If you find this project useful please consider becoming a sponsor.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>SwiftUIExtensions</author><guid isPermaLink="false">https://github.com/SwiftUIExtensions/Grid</guid><pubDate>Mon, 18 Nov 2019 00:21:00 GMT</pubDate></item><item><title>Quick/Quick #22 in Swift, This week</title><link>https://github.com/Quick/Quick</link><description>&lt;p&gt;&lt;i&gt;The Swift (and Objective-C) testing framework.&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/bcd71a03c67bd89a4cfc390c7c22cc4f06db91b1/687474703a2f2f662e636c2e6c792f6974656d732f30723145313932433152306232673251336832772f517569636b4c6f676f5f436f6c6f722e706e67"&gt;&lt;img src="https://camo.githubusercontent.com/bcd71a03c67bd89a4cfc390c7c22cc4f06db91b1/687474703a2f2f662e636c2e6c792f6974656d732f30723145313932433152306232673251336832772f517569636b4c6f676f5f436f6c6f722e706e67" alt="" data-canonical-src="http://f.cl.ly/items/0r1E192C1R0b2g2Q3h2w/QuickLogo_Color.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://travis-ci.org/Quick/Quick" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/dcc8a78312e91eebe17c044f463b541138333433/68747470733a2f2f7472617669732d63692e6f72672f517569636b2f517569636b2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/Quick/Quick.svg?branch=master" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://cocoapods.org/pods/Quick" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/ba63156f546b0fd6afd502fbd9b9eb7fb0902d26/68747470733a2f2f696d672e736869656c64732e696f2f636f636f61706f64732f762f517569636b2e737667" alt="CocoaPods" data-canonical-src="https://img.shields.io/cocoapods/v/Quick.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://github.com/Carthage/Carthage"&gt;&lt;img src="https://camo.githubusercontent.com/3dc8a44a2c3f7ccd5418008d1295aae48466c141/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f43617274686167652d636f6d70617469626c652d3442433531442e7376673f7374796c653d666c6174" alt="Carthage Compatible" data-canonical-src="https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://github.com/JamitLabs/Accio"&gt;&lt;img src="https://camo.githubusercontent.com/e502cdc2b27c1f2b2590f061d37b984ba3957c26/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f416363696f2d737570706f727465642d3041374346352e7376673f7374796c653d666c6174" alt="Accio supported" data-canonical-src="https://img.shields.io/badge/Accio-supported-0A7CF5.svg?style=flat" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://cocoapods.org/pods/Quick" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/f3222c744930e7f6041ac150ab618c12ae26c8e1/68747470733a2f2f696d672e736869656c64732e696f2f636f636f61706f64732f702f517569636b2e737667" alt="Platforms" data-canonical-src="https://img.shields.io/cocoapods/p/Quick.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://houndci.com" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/1c940d021ef775a44e0880bc3ba124a6bee5fefb/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f52657669657765645f62792d486f756e642d3845363442302e737667" alt="Reviewed by Hound" data-canonical-src="https://img.shields.io/badge/Reviewed_by-Hound-8E64B0.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Quick is a behavior-driven development framework for Swift and Objective-C.
Inspired by &lt;a href="https://github.com/rspec/rspec"&gt;RSpec&lt;/a&gt;, &lt;a href="https://github.com/specta/specta"&gt;Specta&lt;/a&gt;, and &lt;a href="https://github.com/onsi/ginkgo"&gt;Ginkgo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/Quick/Assets/master/Screenshots/QuickSpec%20screenshot.png"&gt;&lt;img src="https://raw.githubusercontent.com/Quick/Assets/master/Screenshots/QuickSpec%20screenshot.png" alt="" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;Quick&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;Nimble&lt;/span&gt;

&lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;TableOfContentsSpec&lt;/span&gt;: &lt;span class="pl-e"&gt;QuickSpec &lt;/span&gt;{
  &lt;span class="pl-k"&gt;override&lt;/span&gt; &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;spec&lt;/span&gt;() {
    &lt;span class="pl-c1"&gt;describe&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;the 'Documentation' directory&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) {
      &lt;span class="pl-c1"&gt;it&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;has everything you need to get started&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) {
        &lt;span class="pl-k"&gt;let&lt;/span&gt; sections &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;Directory&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Documentation&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;).&lt;span class="pl-smi"&gt;sections&lt;/span&gt;
        &lt;span class="pl-c1"&gt;expect&lt;/span&gt;(sections).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;contain&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Organized Tests with Quick Examples and Example Groups&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
        &lt;span class="pl-c1"&gt;expect&lt;/span&gt;(sections).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;contain&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Installing Quick&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
      }

      &lt;span class="pl-c1"&gt;context&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;if it doesn't have what you're looking for&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) {
        &lt;span class="pl-c1"&gt;it&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;needs to be updated&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) {
          &lt;span class="pl-k"&gt;let&lt;/span&gt; you &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;You&lt;/span&gt;(&lt;span class="pl-c1"&gt;awesome&lt;/span&gt;: &lt;span class="pl-c1"&gt;true&lt;/span&gt;)
          expect{you.&lt;span class="pl-smi"&gt;submittedAnIssue&lt;/span&gt;}.&lt;span class="pl-c1"&gt;toEventually&lt;/span&gt;(&lt;span class="pl-c1"&gt;beTruthy&lt;/span&gt;())
        }
      }
    }
  }
}&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content-nimble" class="anchor" aria-hidden="true" href="#nimble"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Nimble&lt;/h4&gt;
&lt;p&gt;Quick comes together with &lt;a href="https://github.com/Quick/Nimble"&gt;Nimble&lt;/a&gt; — a matcher framework for your tests. You can learn why &lt;code&gt;XCTAssert()&lt;/code&gt; statements make your expectations unclear and how to fix that using Nimble assertions &lt;a href="./Documentation/en-us/NimbleAssertions.md"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-swift-version" class="anchor" aria-hidden="true" href="#swift-version"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Swift Version&lt;/h2&gt;
&lt;p&gt;Certain versions of Quick and Nimble only support certain versions of Swift. Depending on which version of Swift your project uses, you should use specific versions of Quick and Nimble. Use the table below to determine which versions of Quick and Nimble are compatible with your project.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt;Swift version&lt;/th&gt;
&lt;th align="left"&gt;Quick version&lt;/th&gt;
&lt;th align="left"&gt;Nimble version&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Swift 4.2&lt;/td&gt;
&lt;td align="left"&gt;v1.3.2 or later&lt;/td&gt;
&lt;td align="left"&gt;v7.3.2 or later&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Swift 3 / Swift 4&lt;/td&gt;
&lt;td align="left"&gt;v1.0.0 or later&lt;/td&gt;
&lt;td align="left"&gt;v5.0.0 or later&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Swift 2.2 / Swift 2.3&lt;/td&gt;
&lt;td align="left"&gt;v0.9.3&lt;/td&gt;
&lt;td align="left"&gt;v4.1.0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Documentation&lt;/h2&gt;
&lt;p&gt;All documentation can be found in the &lt;a href="./Documentation"&gt;Documentation folder&lt;/a&gt;, including &lt;a href="./Documentation/en-us/InstallingQuick.md"&gt;detailed installation instructions&lt;/a&gt; for CocoaPods, Carthage, Git submodules, and more. For example, you can install Quick and &lt;a href="https://github.com/Quick/Nimble"&gt;Nimble&lt;/a&gt; using CocoaPods by adding the following to your Podfile:&lt;/p&gt;
&lt;div class="highlight highlight-source-ruby"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Podfile&lt;/span&gt;

use_frameworks!

target &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;MyApp&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Normal libraries&lt;/span&gt;

  abstract_target &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;Tests&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
    inherit! &lt;span class="pl-c1"&gt;:search_paths&lt;/span&gt;
    target &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;MyAppTests&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
    target &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;MyAppUITests&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;

    pod &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;Quick&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;
    pod &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;Nimble&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-k"&gt;end&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-projects-using-quick" class="anchor" aria-hidden="true" href="#projects-using-quick"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Projects using Quick&lt;/h2&gt;
&lt;p&gt;Over ten-thousand apps use either Quick and Nimble however, as they are not included in the app binary, neither appear in “Top Used Libraries” blog posts. Therefore, it would be greatly appreciated to remind contributors that their efforts are valued by compiling a list of organizations and projects that use them.&lt;/p&gt;
&lt;p&gt;Does your organization or project use Quick and Nimble? If yes, &lt;a href="https://github.com/Quick/Quick/wiki/Projects-using-Quick"&gt;please add your project to the list&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-who-uses-quick" class="anchor" aria-hidden="true" href="#who-uses-quick"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Who uses Quick&lt;/h2&gt;
&lt;p&gt;Similar to projects using Quick, it would be nice to hear why people use Quick and Nimble. Are there features you love? Are there features that are just okay? Are there some features we have that no one uses?&lt;/p&gt;
&lt;p&gt;Have something positive to say about Quick (or Nimble)? If yes, &lt;a href="https://github.com/Quick/Quick/wiki/Who-uses-Quick"&gt;provide a testimonial here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-license" class="anchor" aria-hidden="true" href="#license"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;License&lt;/h2&gt;
&lt;p&gt;Apache 2.0 license. See the &lt;a href="LICENSE"&gt;&lt;code&gt;LICENSE&lt;/code&gt;&lt;/a&gt; file for details.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>Quick</author><guid isPermaLink="false">https://github.com/Quick/Quick</guid><pubDate>Mon, 18 Nov 2019 00:22:00 GMT</pubDate></item><item><title>GitHawkApp/GitHawk #23 in Swift, This week</title><link>https://github.com/GitHawkApp/GitHawk</link><description>&lt;p&gt;&lt;i&gt;The best iOS app for GitHub.&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;p&gt;&lt;a href="https://itunes.apple.com/app/githawk-for-github/id1252320249" rel="nofollow"&gt;&lt;img src="images/githawk-pulse.gif" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p align="center"&gt;&lt;a href="https://itunes.apple.com/app/githawk-for-github/id1252320249" rel="nofollow"&gt;&lt;img src="images/app-store-badge.png" width="250" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p align="center"&gt;
    &lt;a href="https://www.bitrise.io/app/a912ff037bca7072" rel="nofollow"&gt;
        &lt;img src="https://camo.githubusercontent.com/d262f8eb19d1f3b7cf0fd87d4b5d3a07942ff8fe/68747470733a2f2f6170702e626974726973652e696f2f6170702f613931326666303337626361373037322f7374617475732e7376673f746f6b656e3d504d70427339752d43374342494b50774e4c534a7267266272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://app.bitrise.io/app/a912ff037bca7072/status.svg?token=PMpBs9u-C7CBIKPwNLSJrg&amp;amp;branch=master" style="max-width:100%;"&gt;
    &lt;/a&gt;
    &lt;a href="https://testflight.apple.com/join/QIVXLkkn" rel="nofollow"&gt;
      &lt;img src="https://camo.githubusercontent.com/1d341836e296e007d8e0ea08a074b05b0ba223f5/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4a6f696e2d54657374466c696768742d626c75652e737667" alt="Join TestFlight" data-canonical-src="https://img.shields.io/badge/Join-TestFlight-blue.svg" style="max-width:100%;"&gt;
    &lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;GitHawk is the highest rated iOS app for GitHub.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Features&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;g-emoji class="g-emoji" alias="zero" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/0030-20e3.png"&gt;0️⃣&lt;/g-emoji&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;Inbox Zero&lt;/em&gt; your notifications&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;g-emoji class="g-emoji" alias="memo" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4dd.png"&gt;📝&lt;/g-emoji&gt;&lt;/td&gt;
&lt;td&gt;Comment even faster than on GitHub desktop&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;g-emoji class="g-emoji" alias="+1" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f44d.png"&gt;👍&lt;/g-emoji&gt;&lt;/td&gt;
&lt;td&gt;The only app with emoji reactions!&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;g-emoji class="g-emoji" alias="zap" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/26a1.png"&gt;⚡️&lt;/g-emoji&gt;&lt;/td&gt;
&lt;td&gt;Native markdown rendering&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img class="emoji" title=":octocat:" alt=":octocat:" src="https://github.githubassets.com/images/icons/emoji/octocat.png" height="20" width="20" align="absmiddle"&gt;&lt;/td&gt;
&lt;td&gt;100% free and open source&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a id="user-content-contributing" class="anchor" aria-hidden="true" href="#contributing"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contributing&lt;/h2&gt;
&lt;p&gt;We are always looking for contributions from &lt;strong&gt;all skill levels&lt;/strong&gt;! A great way to get started is by helping &lt;a href="https://github.com/GitHawkApp/GitHawk/issues?utf8=%E2%9C%93&amp;amp;q=is%3Aissue+is%3Aopen+label%3A%22%F0%9F%90%9B+bug%22"&gt;organize and/or squish bugs&lt;/a&gt;. If you're looking to ease your way into the project try out a &lt;a href="https://github.com/GitHawkApp/GitHawk/issues?utf8=%E2%9C%93&amp;amp;q=is%3Aissue+is%3Aopen+label%3A%22%E2%9C%A8+good+first+issue%22+"&gt;good first issue&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-highest-priority-needs" class="anchor" aria-hidden="true" href="#highest-priority-needs"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Highest Priority Needs:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;g-emoji class="g-emoji" alias="woman_office_worker" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f469-1f4bc.png"&gt;👩‍💼&lt;/g-emoji&gt; &lt;strong&gt;Product Manager&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;We have some &lt;a href="https://github.com/GitHawkApp/GitHawk/projects"&gt;projects&lt;/a&gt; and tons of unorganized/unprioritized &lt;a href="https://github.com/GitHawkApp/GitHawk/issues?utf8=%E2%9C%93&amp;amp;q=is%3Aissue+is%3Aopen+label%3A%22%F0%9F%86%95+feature+request%22+"&gt;features&lt;/a&gt;. GitHawk needs someone to own the product direction!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;g-emoji class="g-emoji" alias="woman_artist" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f469-1f3a8.png"&gt;👩‍🎨&lt;/g-emoji&gt; &lt;strong&gt;Designer&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Like making unique UIs? So do we! We value keeping GitHawk's UX close to core iOS, but, when necessary, create our own high-quality UI components. Helping design for GitHawk is a great opportunity to try new ideas out!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;g-emoji class="g-emoji" alias="woman_technologist" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f469-1f4bb.png"&gt;👩‍💻&lt;/g-emoji&gt; &lt;strong&gt;iOS Project Management&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;There is a &lt;em&gt;lot&lt;/em&gt; of low-hanging fruit with our project setup, test and deployment automation, build optimizations, and more! I (&lt;a href="https://github.com/rnystrom"&gt;@rnystrom&lt;/a&gt;) have no idea what I'm doing here. Come point us in the right direction!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installation&lt;/h2&gt;
&lt;p&gt;If you want to build GitHawk locally, run &lt;code&gt;npm install&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To get started, you will need to install node (&lt;code&gt;brew install node&lt;/code&gt;), then run these instructions:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;git clone https://github.com/GitHawkApp/GitHawk.git
&lt;span class="pl-c1"&gt;cd&lt;/span&gt; GitHawk
bundle
bundle &lt;span class="pl-c1"&gt;exec&lt;/span&gt; pod install
npm install
open Freetime.xcworkspace/&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will install &lt;a href="https://github.com/apollographql/apollo-codegen"&gt;apollo-codegen&lt;/a&gt; that is required to generate the GraphQL models.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="https://github.com/GitHawkApp/GitHawk/blob/master/Setup.md"&gt;setup guide&lt;/a&gt; for details about API keys and environment variables.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-open-source--copying" class="anchor" aria-hidden="true" href="#open-source--copying"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Open Source &amp;amp; Copying&lt;/h2&gt;
&lt;p&gt;We ship GitHawk on the App Store for free and provide its entire source code for free as well. In the spirit of openness, GitHawk is licensed under MIT so that you can use my code in your app, if you choose.&lt;/p&gt;
&lt;p&gt;However, &lt;strong&gt;please do not ship this app&lt;/strong&gt; under your own account. Paid or free.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-why-are-we-building-this" class="anchor" aria-hidden="true" href="#why-are-we-building-this"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Why are we building this?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Push &lt;a href="https://instagram.github.io/IGListKit/" rel="nofollow"&gt;IGListKit&lt;/a&gt; + Swift to its limits&lt;/li&gt;
&lt;li&gt;Better GitHub project management on mobile&lt;/li&gt;
&lt;li&gt;Explore &lt;a href="https://developer.github.com/v4/"&gt;GitHub's GraphQL API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Scratch my Swift-itch&lt;/li&gt;
&lt;li&gt;Create a real, complex app in the open&lt;/li&gt;
&lt;/ul&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>GitHawkApp</author><guid isPermaLink="false">https://github.com/GitHawkApp/GitHawk</guid><pubDate>Mon, 18 Nov 2019 00:23:00 GMT</pubDate></item><item><title>kickstarter/ios-oss #24 in Swift, This week</title><link>https://github.com/kickstarter/ios-oss</link><description>&lt;p&gt;&lt;i&gt;Kickstarter for iOS. Bring new ideas to life, anywhere.&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;p&gt;&lt;a href="https://www.kickstarter.com" rel="nofollow"&gt;&lt;img src=".github/ksr-wordmark.svg" width="36%" alt="Kickstarter for iOS" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://circleci.com/gh/kickstarter/ios-oss" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/091cc0c2d70cb8a92a8f8267c4faf239c8396655/68747470733a2f2f636972636c6563692e636f6d2f67682f6b69636b737461727465722f696f732d6f73732e7376673f7374796c653d737667" alt="Circle CI" data-canonical-src="https://circleci.com/gh/kickstarter/ios-oss.svg?style=svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Welcome to Kickstarter’s open source iOS app! Come on in, take your shoes off,
stay a while—explore how Kickstarter’s native squad has built and continues to
build the app.&lt;/p&gt;
&lt;p&gt;We’ve also open sourced our &lt;a href="https://github.com/kickstarter/android-oss"&gt;Android app&lt;/a&gt;,
and read more about our journey to open source &lt;a href="https://kickstarter.engineering/open-sourcing-our-android-and-ios-apps-6891be909fcd" rel="nofollow"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-getting-started" class="anchor" aria-hidden="true" href="#getting-started"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Getting Started&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Install Xcode.&lt;/li&gt;
&lt;li&gt;Clone this repository.&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;make bootstrap&lt;/code&gt; to install tools and dependencies.&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;make test-all&lt;/code&gt; to build and run tests on all platforms.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;* To provide a mock version that serves up hard-coded data immediately, set &lt;code&gt;KsApi.Secrets.isOSS&lt;/code&gt; = &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-some-fun-things-to-explore" class="anchor" aria-hidden="true" href="#some-fun-things-to-explore"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Some fun things to explore&lt;/h2&gt;
&lt;p&gt;If you’re just looking for a quick glance at a few things we’re particularly
proud of, look no further:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The &lt;a href="https://github.com/kickstarter/ios-oss/tree/master/Screenshots/_64"&gt;&lt;code&gt;Screenshots&lt;/code&gt;&lt;/a&gt;
directory holds nearly 500 screenshots of various screens in every language,
device and edge-case state that we like to make sure stays true. For example,
a backer viewing a project in French
&lt;a href="https://github.com/kickstarter/ios-oss/blob/d33bfbff8dee212eb46328cfcfe64f5aa90afc7b/Screenshots/_64/Kickstarter_Framework_iOSTests.ProjectPamphletContentViewControllerTests/testBacker_LiveProject_lang_fr_device_phone4_7inch%402x.png"&gt;here&lt;/a&gt;
, or a creator looking at their dashboard in German and on an iPad
&lt;a href="https://github.com/kickstarter/ios-oss/blob/64f79ce6a03a8fad9b7024a43c17b4ae5f264d31/Screenshots/_64/Kickstarter_Framework_iOSTests.DashboardViewControllerTests/testView_lang_de_device_pad%402x.png"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We use Swift Playgrounds for &lt;a href="https://youtu.be/A0VaIKK2ijM?t=26m47s" rel="nofollow"&gt;iterative development and styling&lt;/a&gt;.
Most major screens in the app get a corresponding playground where we can see a
wide variety of devices, languages and data in real time. Browse our collection of
playgrounds &lt;a href="https://github.com/kickstarter/ios-oss/tree/master/Kickstarter-iOS.playground/Pages"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=EpTlqx6NjYo" rel="nofollow"&gt;We use view models&lt;/a&gt; as
a lightweight way to isolate side effects and embrace a functional core. We
write &lt;a href="https://github.com/kickstarter/ios-oss/tree/master/Library/ViewModels"&gt;these&lt;/a&gt;
as a pure mapping of input signals to output signals, and &lt;a href="https://github.com/kickstarter/ios-oss/tree/master/Library/ViewModels"&gt;test&lt;/a&gt;
them heavily, including tests for localization, accessibility and event
tracking.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Documentation&lt;/h2&gt;
&lt;p&gt;While we’re at it, why not share our docs? Check out the
&lt;a href="https://github.com/kickstarter/native-docs"&gt;native docs&lt;/a&gt; we have written so far
for more documentation.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-dependencies" class="anchor" aria-hidden="true" href="#dependencies"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Dependencies&lt;/h2&gt;
&lt;p&gt;We make heavy use of the following projects, and so it can be helpful to be
familiar with them:&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-1st-party" class="anchor" aria-hidden="true" href="#1st-party"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1st party&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://circleci.com/gh/kickstarter/Kickstarter-Prelude" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/2515efd4aee725ff0536986064432437af63e4af/68747470733a2f2f636972636c6563692e636f6d2f67682f6b69636b737461727465722f4b69636b737461727465722d5072656c7564652e7376673f7374796c653d737667" alt="Circle CI" data-canonical-src="https://circleci.com/gh/kickstarter/Kickstarter-Prelude.svg?style=svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://github.com/kickstarter/Kickstarter-Prelude"&gt;Prelude&lt;/a&gt;: Foundation of
types and functions we feel are missing from the Swift standard library.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://circleci.com/gh/kickstarter/Kickstarter-ReactiveExtensions" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/470c289753142e563825f4cce1d0bf0cdd31ac09/68747470733a2f2f636972636c6563692e636f6d2f67682f6b69636b737461727465722f4b69636b737461727465722d5265616374697665457874656e73696f6e732e7376673f7374796c653d73766726" alt="Circle CI" data-canonical-src="https://circleci.com/gh/kickstarter/Kickstarter-ReactiveExtensions.svg?style=svg&amp;amp;" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://github.com/kickstarter/Kickstarter-ReactiveExtensions"&gt;ReactiveExtensions&lt;/a&gt;:
A collection of operators we like to add to ReactiveCocoa.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-3rd-party" class="anchor" aria-hidden="true" href="#3rd-party"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3rd party&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Alamofire/AlamofireImage"&gt;AlamofireImage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/thoughtbot/Argo"&gt;Argo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/facebook/ios-snapshot-test-case"&gt;FBSnapshotTestCase&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ReactiveCocoa/ReactiveSwift"&gt;ReactiveSwift&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Notices for 3rd party libraries in this repository are contained in
&lt;code&gt;NOTICE.md&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-contributing" class="anchor" aria-hidden="true" href="#contributing"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contributing&lt;/h2&gt;
&lt;p&gt;We intend for this project to be an educational resource: we are excited to
share our wins, mistakes, and methodology of iOS development as we work
in the open. Our primary focus is to continue improving the app for our users in
line with our roadmap.&lt;/p&gt;
&lt;p&gt;The best way to submit feedback and report bugs is to open a GitHub issue.
Please be sure to include your operating system, device, version number, and
steps to reproduce reported bugs. Keep in mind that all participants will be
expected to follow our code of conduct.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-code-of-conduct" class="anchor" aria-hidden="true" href="#code-of-conduct"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Code of Conduct&lt;/h2&gt;
&lt;p&gt;We aim to share our knowledge and findings as we work daily to improve our
product, for our community, in a safe and open space. We work as we live, as
kind and considerate human beings who learn and grow from giving and receiving
positive, constructive feedback. We reserve the right to delete or ban any
behavior violating this base foundation of respect.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-find-this-interesting" class="anchor" aria-hidden="true" href="#find-this-interesting"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Find this interesting?&lt;/h2&gt;
&lt;p&gt;We do too, and we’re &lt;a href="https://www.kickstarter.com/jobs?ref=gh_ios_oss" rel="nofollow"&gt;hiring&lt;/a&gt;!&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-license" class="anchor" aria-hidden="true" href="#license"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;License&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;Copyright 2019 Kickstarter, PBC.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
&lt;/code&gt;&lt;/pre&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>kickstarter</author><guid isPermaLink="false">https://github.com/kickstarter/ios-oss</guid><pubDate>Mon, 18 Nov 2019 00:24:00 GMT</pubDate></item><item><title>glushchenko/fsnotes #25 in Swift, This week</title><link>https://github.com/glushchenko/fsnotes</link><description>&lt;p&gt;&lt;i&gt;Notes manager for macOS/iOS&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;p&gt;&lt;a href="https://travis-ci.com/glushchenko/fsnotes" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/9e88b2cfef615c7a02bd8776762aca88cc666dc4/68747470733a2f2f7472617669732d63692e636f6d2f676c7573686368656e6b6f2f66736e6f7465732e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/glushchenko/fsnotes.svg?branch=master" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-notes-manager-for-macosios" class="anchor" aria-hidden="true" href="#notes-manager-for-macosios"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Notes manager for macOS/iOS&lt;/h2&gt;
&lt;p&gt;File System notes (FSNotes): is modern notational velocity (nvALT) on steroids.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-macos-app" class="anchor" aria-hidden="true" href="#macos-app"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;macOS app&lt;/h3&gt;
&lt;p&gt;Our application respect open formats: &lt;strong&gt;Plaintext, Markdown, RTF&lt;/strong&gt;, and stores data in the file system. You can view, edit, copy data in a favorite external editor and see the live result in FSNotes.&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/glushchenko/fsnotes/master/code.png"&gt;&lt;img src="https://raw.githubusercontent.com/glushchenko/fsnotes/master/code.png" alt="macOS FSNotes" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-key-features" class="anchor" aria-hidden="true" href="#key-features"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Key features&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Keyboard centric.&lt;/li&gt;
&lt;li&gt;Global shortcuts (clipboard save/search).&lt;/li&gt;
&lt;li&gt;Markdown and RTF markup (files stored on disk as Plaintext and Rich Text).&lt;/li&gt;
&lt;li&gt;Markdown preview mode.&lt;/li&gt;
&lt;li&gt;Elastic two-pane view (vertical and horizontal layout).&lt;/li&gt;
&lt;li&gt;Blazing fast and lightweight (working fine with 10k+ files)&lt;/li&gt;
&lt;li&gt;Open files in finder work with external editors (changes seamless live sync with UI).&lt;/li&gt;
&lt;li&gt;Pin/Unpin important notes on the top.&lt;/li&gt;
&lt;li&gt;Synchronization over iCloud Drive.&lt;/li&gt;
&lt;li&gt;Multi-folder storage.&lt;/li&gt;
&lt;li&gt;Fast copy Markdown code to clipboard.&lt;/li&gt;
&lt;li&gt;Live Markdown highlighting with code blocks (over 170 languages).&lt;/li&gt;
&lt;li&gt;Themes for code highlighting.&lt;/li&gt;
&lt;li&gt;Markdown images preview in the editor.&lt;/li&gt;
&lt;li&gt;Images drag and drop or copy &amp;amp; paste.&lt;/li&gt;
&lt;li&gt;Tags.&lt;/li&gt;
&lt;li&gt;Dark mode (macOS Mojave and higher).&lt;/li&gt;
&lt;li&gt;Encryption AES-256.&lt;/li&gt;
&lt;li&gt;Mermaid and MathJax support.&lt;/li&gt;
&lt;li&gt;Git versioning and scheduled backups.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;FSNotes is written on &lt;strong&gt;Swift 5&lt;/strong&gt;, open-source (MIT license)&lt;/p&gt;
&lt;a href="https://itunes.apple.com/app/fsnotes/id1277179284" rel="nofollow"&gt;
	&lt;img src="https://camo.githubusercontent.com/5ed5e388e60064b6cc7875c86b0c8159bb656f7e/68747470733a2f2f66736e6f742e65732f696d672f62616467652d646f776e6c6f61642d6f6e2d7468652d6d61632d6170702d73746f72652e737667" alt="" data-canonical-src="https://fsnot.es/img/badge-download-on-the-mac-app-store.svg" style="max-width:100%;"&gt;
&lt;/a&gt; 
&lt;hr&gt;
&lt;h3&gt;&lt;a id="user-content-ios-app" class="anchor" aria-hidden="true" href="#ios-app"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;iOS app&lt;/h3&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/9c6444c16343b73302bf4fa636119d75cc63394f/68747470733a2f2f663030312e6261636b626c617a6562322e636f6d2f66696c652f6f672d66696c65732f696f732e706e67"&gt;&lt;img src="https://camo.githubusercontent.com/9c6444c16343b73302bf4fa636119d75cc63394f/68747470733a2f2f663030312e6261636b626c617a6562322e636f6d2f66696c652f6f672d66696c65732f696f732e706e67" alt="iOS FSNotes" data-canonical-src="https://f001.backblazeb2.com/file/og-files/ios.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-key-features-1" class="anchor" aria-hidden="true" href="#key-features-1"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Key features&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;iCloud Drive support (Files.app folder available).&lt;/li&gt;
&lt;li&gt;Fast note creation (3DTouch + configurable default keyboard).&lt;/li&gt;
&lt;li&gt;Pin/Unpin with macOS companion sync.&lt;/li&gt;
&lt;li&gt;RTF and Markdown markup.&lt;/li&gt;
&lt;li&gt;Markdown editor with highlighting (code blocks too).&lt;/li&gt;
&lt;li&gt;Search with keywords highlighting.&lt;/li&gt;
&lt;li&gt;Sharing extension.&lt;/li&gt;
&lt;/ul&gt;
&lt;a href="https://itunes.apple.com/app/fsnotes-manager/id1346501102" rel="nofollow"&gt;
	&lt;img src="https://camo.githubusercontent.com/7b533252447bdbf800fff1299c3564449669c410/68747470733a2f2f66736e6f742e65732f696d672f62616467652d646f776e6c6f61642d6f6e2d7468652d6170702d73746f72652e737667" alt="" data-canonical-src="https://fsnot.es/img/badge-download-on-the-app-store.svg" style="max-width:100%;"&gt;
&lt;/a&gt; 
&lt;/article&gt;&lt;/div&gt;</description><author>glushchenko</author><guid isPermaLink="false">https://github.com/glushchenko/fsnotes</guid><pubDate>Mon, 18 Nov 2019 00:25:00 GMT</pubDate></item></channel></rss>