<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>GitHub Trending: Clojure, Today</title><link>https://github.com/trending/clojure?since=daily</link><description>The top repositories on GitHub for clojure, measured daily</description><pubDate>Tue, 12 Nov 2019 01:08:27 GMT</pubDate><lastBuildDate>Tue, 12 Nov 2019 01:08:27 GMT</lastBuildDate><generator>PyRSS2Gen-1.1.0</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><ttl>720</ttl><item><title>tonsky/FiraCode #1 in Clojure, Today</title><link>https://github.com/tonsky/FiraCode</link><description>&lt;p&gt;&lt;i&gt;Monospaced font with programming ligatures&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h2&gt;&lt;a id="user-content-fira-code-monospaced-font-with-programming-ligatures" class="anchor" aria-hidden="true" href="#fira-code-monospaced-font-with-programming-ligatures"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Fira Code: monospaced font with programming ligatures&lt;/h2&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="./showcases/fira_code_logo.svg"&gt;&lt;img src="./showcases/fira_code_logo.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-problem" class="anchor" aria-hidden="true" href="#problem"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Problem&lt;/h3&gt;
&lt;p&gt;Programmers use a lot of symbols, often encoded with several characters. For the human brain, sequences like &lt;code&gt;-&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;=&lt;/code&gt; or &lt;code&gt;:=&lt;/code&gt; are single logical tokens, even if they take two or three characters on the screen. Your eye spends a non-zero amount of energy to scan, parse and join multiple characters into a single logical one. Ideally, all programming languages should be designed with full-fledged Unicode symbols for operators, but that’s not the case yet.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-solution" class="anchor" aria-hidden="true" href="#solution"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Solution&lt;/h3&gt;
&lt;h4&gt;&lt;a id="user-content-download-v2--how-to-install--troubleshooting--news--updates" class="anchor" aria-hidden="true" href="#download-v2--how-to-install--troubleshooting--news--updates"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="https://github.com/tonsky/FiraCode/releases/download/2/FiraCode_2.zip"&gt;Download v.2&lt;/a&gt; · &lt;a href="https://github.com/tonsky/FiraCode/wiki"&gt;How to install&lt;/a&gt; · &lt;a href="https://github.com/tonsky/FiraCode/wiki#troubleshooting"&gt;Troubleshooting&lt;/a&gt; · &lt;a href="https://twitter.com/FiraCode" rel="nofollow"&gt;News &amp;amp; updates&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://patreon.com/tonsky" rel="nofollow"&gt;&lt;img src="./fira_code_patreon.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Fira Code is an extension of the Fira Mono font containing a set of ligatures for common programming multi-character combinations. This is just a font rendering feature: underlying code remains ASCII-compatible. This helps to read and understand code faster. For some frequent sequences like &lt;code&gt;..&lt;/code&gt; or &lt;code&gt;//&lt;/code&gt;, ligatures allow us to correct spacing.&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="./showcases/all_ligatures.png"&gt;&lt;img src="./showcases/all_ligatures.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-code-examples" class="anchor" aria-hidden="true" href="#code-examples"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Code examples&lt;/h3&gt;
&lt;p&gt;Ruby:&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="./showcases/ruby.png"&gt;&lt;img src="./showcases/ruby.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;JavaScript:&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="./showcases/javascript.png"&gt;&lt;img src="./showcases/javascript.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;PHP:&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="./showcases/php.png"&gt;&lt;img src="./showcases/php.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Erlang:&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="./showcases/erlang.png"&gt;&lt;img src="./showcases/erlang.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Elixir:&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="/showcases/elixir.png"&gt;&lt;img src="/showcases/elixir.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Go:&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="./showcases/go.png"&gt;&lt;img src="./showcases/go.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;LiveScript:&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="./showcases/livescript.png"&gt;&lt;img src="./showcases/livescript.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Clojure:&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="./showcases/clojure.png"&gt;&lt;img src="./showcases/clojure.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Swift:&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="./showcases/swift.png"&gt;&lt;img src="./showcases/swift.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Stylistic sets:&lt;/p&gt;
&lt;p&gt;See &lt;a href="https://github.com/tonsky/FiraCode/wiki/How-to-enable-stylistic-sets"&gt;How to enable&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="./showcases/stylistic_sets.png"&gt;&lt;img src="./showcases/stylistic_sets.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-terminal-support" class="anchor" aria-hidden="true" href="#terminal-support"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Terminal support&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Works&lt;/th&gt;
&lt;th&gt;Doesn’t work&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Butterfly&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Alacritty&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;crosh&lt;/strong&gt; (ChromeOS, &lt;a href="https://github.com/tonsky/FiraCode/wiki/ChromeOS-Terminal"&gt;instructions&lt;/a&gt;)&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Windows Console (conhost.exe)&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Hyper.app&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Cmder&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;iTerm 2&lt;/strong&gt; (&lt;a href="https://gitlab.com/gnachman/iterm2/issues/3568#note_13118332" rel="nofollow"&gt;3.1+&lt;/a&gt;)&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;ConEmu&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Kitty&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;GNOME Terminal&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Konsole&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;mate-terminal&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;mintty&lt;/strong&gt; (partial support &lt;a href="https://github.com/mintty/mintty/issues/601"&gt;2.8.3+&lt;/a&gt;)&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;PuTTY&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;QTerminal&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;rxvt&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Terminal.app&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;xterm&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Termux&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;ZOC&lt;/strong&gt; (Windows)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Token2Shell/MD&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;gtkterm, guake, LXTerminal, sakura, Terminator, xfce4-terminal,&lt;/strong&gt; and other libvte-based terminals (&lt;a href="https://bugzilla.gnome.org/show_bug.cgi?id=584160" rel="nofollow"&gt;bug report&lt;/a&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;upterm&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Windows Terminal&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;ZOC&lt;/strong&gt; (macOS)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;&lt;a id="user-content-editor-support" class="anchor" aria-hidden="true" href="#editor-support"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Editor support&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Works&lt;/th&gt;
&lt;th&gt;Doesn’t work&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Abricotine&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Arduino IDE&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Android Studio&lt;/strong&gt; (2.3+, &lt;a href="https://github.com/tonsky/FiraCode/wiki/Intellij-products-instructions"&gt;instructions&lt;/a&gt;)&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Adobe Dreamweaver&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Anjuta&lt;/strong&gt; (unless at the EOF)&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Delphi IDE&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;AppCode&lt;/strong&gt; (2016.2+, &lt;a href="https://github.com/tonsky/FiraCode/wiki/Intellij-products-instructions"&gt;instructions&lt;/a&gt;)&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Eclipse&lt;/strong&gt; (Windows, &lt;a href="https://bugs.eclipse.org/bugs/show_bug.cgi?id=398656" rel="nofollow"&gt;vote here&lt;/a&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Atom&lt;/strong&gt; 1.1 or newer (&lt;a href="https://github.com/tonsky/FiraCode/wiki/Atom-instructions"&gt;instructions&lt;/a&gt;)&lt;/td&gt;
&lt;td&gt;Standalone &lt;strong&gt;Emacs&lt;/strong&gt; (&lt;a href="https://github.com/tonsky/FiraCode/wiki/Emacs-instructions"&gt;workaround&lt;/a&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;BBEdit/TextWrangler&lt;/strong&gt; (v. 11 only, &lt;a href="https://github.com/tonsky/FiraCode/wiki/BBEdit-instructions"&gt;instructions&lt;/a&gt;)&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Geany&lt;/strong&gt; (Windows)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Brackets&lt;/strong&gt; (with &lt;a href="https://github.com/polo2ro/firacode-in-brackets"&gt;this plugin&lt;/a&gt;)&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;gVim&lt;/strong&gt; (Windows &lt;a href="https://github.com/tonsky/FiraCode/issues/462"&gt;workaround&lt;/a&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Chocolat&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;IDLE&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;CLion&lt;/strong&gt; (2016.2+, &lt;a href="https://github.com/tonsky/FiraCode/wiki/Intellij-products-instructions"&gt;instructions&lt;/a&gt;)&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;KDevelop 4&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Cloud9&lt;/strong&gt; (&lt;a href="https://github.com/tonsky/FiraCode/wiki/Cloud9-Instructions"&gt;instructions&lt;/a&gt;)&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Monkey Studio IDE&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Coda 2&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;CodeLite&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Eclipse&lt;/strong&gt; (macOS 4.7+, Linux)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;elementary Code&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Geany&lt;/strong&gt; (macOS)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;gEdit / Pluma&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;GNOME Builder&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;GoormIDE&lt;/strong&gt; (&lt;a href="https://github.com/tonsky/FiraCode/wiki/GoormIDE-Instructions"&gt;instructions&lt;/a&gt;)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;IntelliJ IDEA&lt;/strong&gt; (2016.2+, &lt;a href="https://github.com/tonsky/FiraCode/wiki/Intellij-products-instructions"&gt;instructions&lt;/a&gt;)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Kate, KWrite&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;KDevelop 5+&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Komodo&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Leafpad&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;LibreOffice&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;LightTable&lt;/strong&gt; (&lt;a href="https://github.com/tonsky/FiraCode/wiki/LightTable-instructions"&gt;instructions&lt;/a&gt;)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;LINQPad&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;MacVim&lt;/strong&gt; 7.4 or newer (&lt;a href="https://github.com/tonsky/FiraCode/wiki/MacVim-instructions"&gt;instructions&lt;/a&gt;)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Mancy&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Meld&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Mousepad&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;NeoVim-gtk&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;NetBeans&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Notepad&lt;/strong&gt; (Windows)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Notepad++&lt;/strong&gt; (with a &lt;a href="https://github.com/notepad-plus-plus/notepad-plus-plus/issues/2287#issuecomment-256638098"&gt;workaround&lt;/a&gt;)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;PhpStorm&lt;/strong&gt; (2016.2+, &lt;a href="https://github.com/tonsky/FiraCode/wiki/Intellij-products-instructions"&gt;instructions&lt;/a&gt;)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;PyCharm&lt;/strong&gt; (2016.2+, &lt;a href="https://github.com/tonsky/FiraCode/wiki/Intellij-products-instructions"&gt;instructions&lt;/a&gt;)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;QtCreator&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Rider&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;RStudio&lt;/strong&gt; (&lt;a href="https://github.com/tonsky/FiraCode/wiki/RStudio-instructions"&gt;instructions&lt;/a&gt;)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;RubyMine&lt;/strong&gt; (2016.2+, &lt;a href="https://github.com/tonsky/FiraCode/wiki/Intellij-products-instructions"&gt;instructions&lt;/a&gt;)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Scratch&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Scribus&lt;/strong&gt; (1.5.3+)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;SublimeText&lt;/strong&gt; (3146+)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Spyder IDE&lt;/strong&gt; (only with Qt5)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;SuperCollider 3&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;TextAdept&lt;/strong&gt; (Linux, macOS)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;TextEdit&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;TextMate 2&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;VimR&lt;/strong&gt; (&lt;a href="https://github.com/qvacua/vimr/wiki#ligatures"&gt;instructions&lt;/a&gt;)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Visual Studio&lt;/strong&gt; (2015+, &lt;a href="https://github.com/tonsky/FiraCode/wiki/Visual-Studio-Instructions"&gt;instructions&lt;/a&gt;)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Visual Studio Code&lt;/strong&gt; (&lt;a href="https://github.com/tonsky/FiraCode/wiki/VS-Code-Instructions"&gt;instructions&lt;/a&gt;)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;WebStorm&lt;/strong&gt; (2016.2+, &lt;a href="https://github.com/tonsky/FiraCode/wiki/Intellij-products-instructions"&gt;instructions&lt;/a&gt;)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Xamarin Studio/Monodevelop&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Xcode&lt;/strong&gt; (8.0+, otherwise &lt;a href="https://github.com/robertvojta/LigatureXcodePlugin"&gt;with plugin&lt;/a&gt;)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Probably work: &lt;strong&gt;Smultron, Vico&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Under question: &lt;strong&gt;Code::Blocks IDE&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;&lt;a id="user-content-browser-support" class="anchor" aria-hidden="true" href="#browser-support"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Browser support&lt;/h3&gt;
&lt;div class="highlight highlight-text-html-basic"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;&amp;lt;!--&lt;/span&gt; HTML &lt;span class="pl-c"&gt;--&amp;gt;&lt;/span&gt;&lt;/span&gt;
&amp;lt;&lt;span class="pl-ent"&gt;link&lt;/span&gt; &lt;span class="pl-e"&gt;rel&lt;/span&gt;=&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;stylesheet&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-e"&gt;href&lt;/span&gt;=&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;https://cdn.jsdelivr.net/gh/tonsky/FiraCode@1.207/distr/fira_code.css&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&amp;gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight highlight-source-css"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;/*&lt;/span&gt; CSS &lt;span class="pl-c"&gt;*/&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;@import&lt;/span&gt; &lt;span class="pl-c1"&gt;url&lt;/span&gt;(&lt;span class="pl-v"&gt;https://cdn.jsdelivr.net/gh/tonsky/FiraCode@1.207/distr/fira_code.css&lt;/span&gt;);&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight highlight-source-css"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;/*&lt;/span&gt; Specify in CSS &lt;span class="pl-c"&gt;*/&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-ent"&gt;code&lt;/span&gt; { &lt;span class="pl-c1"&gt;&lt;span class="pl-c1"&gt;font-family&lt;/span&gt;&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;Fira Code&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;monospace&lt;/span&gt;; }

&lt;span class="pl-k"&gt;@supports&lt;/span&gt; (&lt;span class="pl-c1"&gt;font-variation-settings&lt;/span&gt;: &lt;span class="pl-c1"&gt;normal&lt;/span&gt;) {
  &lt;span class="pl-ent"&gt;code&lt;/span&gt; { &lt;span class="pl-c1"&gt;&lt;span class="pl-c1"&gt;font-family&lt;/span&gt;&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;Fira Code VF&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;monospace&lt;/span&gt;; }
}&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;IE 10+, Edge: enable with &lt;code&gt;font-feature-settings: "calt";&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Firefox&lt;/li&gt;
&lt;li&gt;Safari&lt;/li&gt;
&lt;li&gt;Chromium-based browsers (Chrome, Opera)&lt;/li&gt;
&lt;li&gt;ACE&lt;/li&gt;
&lt;li&gt;CodeMirror (enable with &lt;code&gt;font-variant-ligatures: contextual;&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-projects-using-fira-code" class="anchor" aria-hidden="true" href="#projects-using-fira-code"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Projects using Fira Code&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;All &lt;a href="https://www.jetbrains.com/" rel="nofollow"&gt;JetBrains products&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://codepen.io/" rel="nofollow"&gt;CodePen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.blink.sh/" rel="nofollow"&gt;Blink Shell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://app.klipse.tech/" rel="nofollow"&gt;Klipse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://ilyabirman.net/" rel="nofollow"&gt;IlyaBirman.net&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://evilmartians.com/" rel="nofollow"&gt;EvilMartians.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://webmakerapp.com/" rel="nofollow"&gt;Web Maker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://fromscratch.rocks/" rel="nofollow"&gt;FromScratch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pep20.org/" rel="nofollow"&gt;PEP20.org&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-alternatives" class="anchor" aria-hidden="true" href="#alternatives"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Alternatives&lt;/h3&gt;
&lt;p&gt;Other monospaced fonts with ligatures:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/i-tu/Hasklig"&gt;Hasklig&lt;/a&gt; (free)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.fsd.it/fonts/pragmatapro.htm" rel="nofollow"&gt;PragmataPro&lt;/a&gt; (€59)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://larsenwork.com/monoid/" rel="nofollow"&gt;Monoid&lt;/a&gt; (free)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/kika/fixedsys"&gt;Fixedsys Excelsior&lt;/a&gt; (free)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://be5invis.github.io/Iosevka/" rel="nofollow"&gt;Iosevka&lt;/a&gt; (free)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/SSNikolaevich/DejaVuSansCode"&gt;DejaVu Sans Code&lt;/a&gt; (free)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rubjo.github.io/victor-mono/" rel="nofollow"&gt;Victor Mono&lt;/a&gt; (free)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/microsoft/cascadia-code"&gt;Cascadia Code&lt;/a&gt; (free)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-building-fira-code-locally" class="anchor" aria-hidden="true" href="#building-fira-code-locally"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Building Fira Code locally&lt;/h3&gt;
&lt;p&gt;In case you want to alter FiraCode.glyphs and build OTF/TTF/WOFF files yourself, this is setup I use on macOS:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; install all required build tools&lt;/span&gt;
./script/bootstrap

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; build the font files&lt;/span&gt;
./script/build

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; install OTFs to ~/Library/Fonts&lt;/span&gt;
./script/install&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-credits" class="anchor" aria-hidden="true" href="#credits"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Credits&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Author: Nikita Prokopov &lt;a href="https://twitter.com/nikitonsky" rel="nofollow"&gt;@nikitonsky&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Based on: &lt;a href="https://github.com/mozilla/Fira"&gt;Fira Mono&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Inspired by: &lt;a href="https://github.com/i-tu/Hasklig"&gt;Hasklig&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>tonsky</author><guid isPermaLink="false">https://github.com/tonsky/FiraCode</guid><pubDate>Tue, 12 Nov 2019 00:01:00 GMT</pubDate></item><item><title>clojure/clojurescript #2 in Clojure, Today</title><link>https://github.com/clojure/clojurescript</link><description>&lt;p&gt;&lt;i&gt;Clojure to JS compiler&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h2&gt;&lt;a id="user-content-what-is-clojurescript" class="anchor" aria-hidden="true" href="#what-is-clojurescript"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;What is ClojureScript?&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://clojurescript.org" rel="nofollow"&gt;ClojureScript&lt;/a&gt; is a compiler for &lt;a href="http://clojure.org" rel="nofollow"&gt;Clojure&lt;/a&gt; that targets JavaScript. It is designed to emit JavaScript code which is compatible with the advanced compilation mode of the &lt;a href="https://developers.google.com/closure/compiler/" rel="nofollow"&gt;Google Closure&lt;/a&gt; optimizing compiler.&lt;/p&gt;
&lt;p&gt;Official web site: &lt;a href="http://clojurescript.org" rel="nofollow"&gt;http://clojurescript.org&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-releases-and-dependency-information" class="anchor" aria-hidden="true" href="#releases-and-dependency-information"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Releases and dependency information&lt;/h2&gt;
&lt;p&gt;Latest stable release: 1.10.520&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://search.maven.org/#search%7Cgav%7C1%7Cg%3A%22org.clojure%22%20AND%20a%3A%22clojurescript%22" rel="nofollow"&gt;All released versions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="http://github.com/technomancy/leiningen/"&gt;Leiningen&lt;/a&gt; dependency information:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[org.clojure/clojurescript "1.10.520"]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href="http://maven.apache.org" rel="nofollow"&gt;Maven&lt;/a&gt; dependency information:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;
  &amp;lt;groupId&amp;gt;org.clojure&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;clojurescript&amp;lt;/artifactId&amp;gt;
  &amp;lt;version&amp;gt;1.10.520&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;a id="user-content-getting-started" class="anchor" aria-hidden="true" href="#getting-started"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Getting Started&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Read the &lt;a href="http://clojurescript.org/guides/quick-start" rel="nofollow"&gt;Quick Start&lt;/a&gt; guide.&lt;/li&gt;
&lt;li&gt;Read the &lt;a href="http://clojurescript.org" rel="nofollow"&gt;Documentation&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Try a &lt;a href="http://clojurescript.org/guides" rel="nofollow"&gt;tutorial&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://clojurescript.org/community/companies" rel="nofollow"&gt;Companies using ClojureScript&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-questions-feedback" class="anchor" aria-hidden="true" href="#questions-feedback"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Questions, Feedback?&lt;/h2&gt;
&lt;p&gt;Please point all of your questions and feedback to the
&lt;a href="http://groups.google.com/group/clojure" rel="nofollow"&gt;Clojure mailing list&lt;/a&gt;. There
is a community run
&lt;a href="http://groups.google.com/group/clojurescript" rel="nofollow"&gt;ClojureScript user mailing list&lt;/a&gt; and
the IRC channel, &lt;code&gt;#clojurescript&lt;/code&gt; on &lt;a href="https://freenode.net/" rel="nofollow"&gt;freenode.net&lt;/a&gt;, is quite active.
There is also a community run &lt;a href="http://clojurians.slack.com" rel="nofollow"&gt;Slack channel&lt;/a&gt;. The
Jira bug/feature tracking application is located at
&lt;a href="http://dev.clojure.org/jira/browse/CLJS" rel="nofollow"&gt;http://dev.clojure.org/jira/browse/CLJS&lt;/a&gt;. Before submitting issues
please read the
&lt;a href="https://github.com/clojure/clojurescript/wiki/Reporting-Issues"&gt;Reporting Issues&lt;/a&gt;
page first.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-developers-welcome" class="anchor" aria-hidden="true" href="#developers-welcome"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Developers Welcome&lt;/h2&gt;
&lt;p&gt;ClojureScript operates under the same license as Clojure. All
contributors must have a signed CA (Contributor's Agreement) and
submit their patch via the appropriate channels. If you're interested
in contributing to the project, please see the
&lt;a href="http://clojure.org/contributing" rel="nofollow"&gt;contributing&lt;/a&gt; page on
&lt;a href="http://clojure.org" rel="nofollow"&gt;clojure.org&lt;/a&gt;. For more information about working
on the compiler and testing check the
&lt;a href="http://github.com/clojure/clojurescript/wiki/Developers"&gt;Developer section of the wiki&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-yourkit" class="anchor" aria-hidden="true" href="#yourkit"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;YourKit&lt;/h2&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/522ec07ba979f767228bfa281844244a64ed57b7/687474703a2f2f7777772e796f75726b69742e636f6d2f696d616765732f796b6c6f676f2e706e67"&gt;&lt;img src="https://camo.githubusercontent.com/522ec07ba979f767228bfa281844244a64ed57b7/687474703a2f2f7777772e796f75726b69742e636f6d2f696d616765732f796b6c6f676f2e706e67" data-canonical-src="http://www.yourkit.com/images/yklogo.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;YourKit has given an open source license for their profiler, greatly simplifying the profiling of ClojureScript performance.&lt;/p&gt;
&lt;p&gt;YourKit supports open source projects with its full-featured Java Profiler.
YourKit, LLC is the creator of &lt;a href="http://www.yourkit.com/java/profiler/index.jsp" rel="nofollow"&gt;YourKit Java Profiler&lt;/a&gt;
and &lt;a href="http://www.yourkit.com/.net/profiler/index.jsp" rel="nofollow"&gt;YourKit .NET Profiler&lt;/a&gt;,
innovative and intelligent tools for profiling Java and .NET applications.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-license" class="anchor" aria-hidden="true" href="#license"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;License&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;Copyright (c) Rich Hickey. All rights reserved. The use and
distribution terms for this software are covered by the Eclipse
Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)
which can be found in the file epl-v10.html at the root of this
distribution. By using this software in any fashion, you are
agreeing to be bound by the terms of this license. You must
not remove this notice, or any other, from this software.
&lt;/code&gt;&lt;/pre&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>clojure</author><guid isPermaLink="false">https://github.com/clojure/clojurescript</guid><pubDate>Tue, 12 Nov 2019 00:02:00 GMT</pubDate></item><item><title>day8/re-frame #3 in Clojure, Today</title><link>https://github.com/day8/re-frame</link><description>&lt;p&gt;&lt;i&gt;A Reagent Framework For Writing SPAs, in Clojurescript.&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="/images/logo/re-frame_128w.png?raw=true"&gt;&lt;img src="/images/logo/re-frame_128w.png?raw=true" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-derived-values-flowing" class="anchor" aria-hidden="true" href="#derived-values-flowing"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Derived Values, Flowing&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;This, milord, is my family's axe. We have owned it for almost nine hundred years, see. Of course,
sometimes it needed a new blade. And sometimes it has required a new handle, new designs on the
metalwork, a little refreshing of the ornamentation ... but is this not the nine hundred-year-old
axe of my family? And because it has changed gently over time, it is still a pretty good axe,
y'know. Pretty good.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;-- Terry Pratchett, The Fifth Elephant &lt;br&gt;
    reflecting on identity, flow and derived values  (aka &lt;a href="https://en.wikipedia.org/wiki/Ship_of_Theseus" rel="nofollow"&gt;The Ship of Theseus&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://github.com/day8/re-frame/actions?workflow=ci"&gt;&lt;img src="https://github.com/day8/re-frame/workflows/ci/badge.svg" alt="CI" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://github.com/day8/re-frame/actions?workflow=cd"&gt;&lt;img src="https://github.com/day8/re-frame/workflows/cd/badge.svg" alt="CD" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://github.com/day8/re-frame/tags"&gt;&lt;img src="https://camo.githubusercontent.com/7d3c19c3058ac25e469a26c6a0819b07a32b019b/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f762f7461672f646179382f72652d6672616d653f7374796c653d666c6174" alt="GitHub tag (latest by date)" data-canonical-src="https://img.shields.io/github/v/tag/day8/re-frame?style=flat" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://clojars.org/re-frame" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/bc7eb06028ccf73b1a2f788e022e3ff28061cd12/68747470733a2f2f696d672e736869656c64732e696f2f636c6f6a6172732f762f72652d6672616d652e737667" alt="Clojars Project" data-canonical-src="https://img.shields.io/clojars/v/re-frame.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://github.com/day8/re-frame/issues"&gt;&lt;img src="https://camo.githubusercontent.com/2d137905516dc886ce38ece8e8df3d49a993da29/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732d7261772f646179382f72652d6672616d653f7374796c653d666c6174" alt="GitHub issues" data-canonical-src="https://img.shields.io/github/issues-raw/day8/re-frame?style=flat" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://github.com/day8/re-frame/pulls"&gt;&lt;img src="https://camo.githubusercontent.com/d7e5f10e0a9d7b72debdcc642f77efe7301dc01b/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732d70722f646179382f72652d6672616d65" alt="GitHub pull requests" data-canonical-src="https://img.shields.io/github/issues-pr/day8/re-frame" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="license.txt"&gt;&lt;img src="https://camo.githubusercontent.com/498f19805b2c1326abfd0f122bb670d2929aa987/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f646179382f72652d6672616d652e737667" alt="License" data-canonical-src="https://img.shields.io/github/license/day8/re-frame.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-re-frame" class="anchor" aria-hidden="true" href="#re-frame"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;re-frame&lt;/h2&gt;
&lt;p&gt;re-frame is a pattern for writing &lt;a href="http://en.wikipedia.org/wiki/Single-page_application" rel="nofollow"&gt;SPAs&lt;/a&gt; in ClojureScript, using &lt;a href="http://reagent-project.github.io/" rel="nofollow"&gt;Reagent&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;McCoy might report "It's MVC, Jim, but not as we know it".  And you would respond
"McCoy, you trouble maker, why even mention an OO pattern?
re-frame is a &lt;strong&gt;functional framework&lt;/strong&gt;."&lt;/p&gt;
&lt;p&gt;Being a functional framework, it is about two things: data, and the functions
which transform that data.  And, because it is a reactive framework, the &lt;a href="https://www.youtube.com/watch?v=ZgqFlowyfTA&amp;amp;t=80" rel="nofollow"&gt;"data coordinates the functions"&lt;/a&gt; (and not the other way around).&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-why-should-you-care" class="anchor" aria-hidden="true" href="#why-should-you-care"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Why Should You Care?&lt;/h2&gt;
&lt;p&gt;Perhaps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You want to develop an &lt;a href="http://en.wikipedia.org/wiki/Single-page_application" rel="nofollow"&gt;SPA&lt;/a&gt; in ClojureScript, and you are looking for a framework.&lt;/li&gt;
&lt;li&gt;You believe Facebook did something magnificent when it created React, and
you are curious about the further implications. Is the combination of
&lt;code&gt;reactive programming&lt;/code&gt;, &lt;code&gt;functional programming&lt;/code&gt; and &lt;code&gt;immutable data&lt;/code&gt; going to
&lt;strong&gt;completely change everything&lt;/strong&gt;?  And, if so, what would that look like in a language
that embraces those paradigms?&lt;/li&gt;
&lt;li&gt;You're taking a &lt;a href="http://www.eli.sdsu.edu/courses/fall15/cs696/index.html" rel="nofollow"&gt;Functional Design and Programming course&lt;/a&gt; at San Diego State University
and you have a re-frame/reagent assignment due.  You've left the reading a bit late, right?&lt;/li&gt;
&lt;li&gt;You know Redux, Elm, Cycle.js or Pux and you're
interested in a ClojureScript implementation.
In this space, re-frame is very old, hopefully in a Gandalf kind of way.
First designed in Dec 2014, it even slightly pre-dates the official Elm Architecture,
although thankfully we were influenced by early-Elm concepts like &lt;code&gt;foldp&lt;/code&gt; and &lt;code&gt;lift&lt;/code&gt;, as well as
Clojure projects like &lt;a href="https://github.com/pedestal/pedestal-app"&gt;Pedestal App&lt;/a&gt;, &lt;a href="https://github.com/swannodette/om"&gt;Om&lt;/a&gt; and &lt;a href="http://hoplon.io/" rel="nofollow"&gt;Hoplon&lt;/a&gt;. Since then,
re-frame has pioneered ideas like event handler middleware,
coeffect accretion, and de-duplicated signal graphs.&lt;/li&gt;
&lt;li&gt;Which brings us to the most important point: &lt;strong&gt;re-frame is impressively buzzword compliant&lt;/strong&gt;. It has reactivity,
unidirectional data flow, pristinely pure functions,
interceptors, coeffects, conveyor belts, statechart-friendliness (FSM)
and claims an immaculate hammock conception. It also has a charming
xkcd reference (soon) and a hilarious, insiders-joke T-shirt,
ideal for conferences (in design).  What could possibly go wrong?&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;&lt;a id="user-content-it-leverages-data" class="anchor" aria-hidden="true" href="#it-leverages-data"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;It Leverages Data&lt;/h2&gt;
&lt;p&gt;You might already know that ClojureScript is a modern Lisp, and that
Lisps are &lt;strong&gt;homoiconic&lt;/strong&gt;.  If not, you do now.&lt;/p&gt;
&lt;p&gt;This homoiconic bit is significant. It means you program in a Lisp by creating and
assembling Lisp data structures. Dwell on that for a moment. You are &lt;strong&gt;programming in data&lt;/strong&gt;.
The functions which later transform data, themselves start as data.&lt;/p&gt;
&lt;p&gt;Clojure programmers place particular emphasis on the primacy of data, and
they like to meditate on aphorisms like &lt;strong&gt;data is the ultimate in late binding&lt;/strong&gt;.
(Less productively, they also like re-watching Rich Hickey videos, and wishing
their hair was darker and more curly)&lt;/p&gt;
&lt;p&gt;I cannot stress enough what a big deal this is. It may seem
like a syntax curiosity at first but, when the penny drops for
you on this, it tends to be a profound moment. And once you
understand the importance of this concept at the language level,
you naturally want to leverage similar power at the library and system levels.&lt;/p&gt;
&lt;p&gt;So, it will come as no surprise, then, to know that re-frame has a
data oriented design. Events are data. Effects are data. DOM is data.
The functions which transform data are registered and looked up via
data. Interceptors (data) are preferred over middleware (higher
order functions). Etc.&lt;/p&gt;
&lt;p&gt;And, on a related arc, re-frame applications are reactive
and that further elevates the importance of data because, in a reactive architecture,
it is the arrival of data which &lt;a href="https://www.youtube.com/watch?v=ZgqFlowyfTA&amp;amp;t=80" rel="nofollow"&gt;coordinates the calling of functions&lt;/a&gt; (and not the other way around).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Data - that's the way we roll.&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-it-is-a-loop" class="anchor" aria-hidden="true" href="#it-is-a-loop"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;It is a loop&lt;/h2&gt;
&lt;p&gt;Architecturally, re-frame implements "a perpetual loop".&lt;/p&gt;
&lt;p&gt;To build an app, you hang pure functions on certain parts of this loop,
and re-frame looks after the &lt;strong&gt;conveyance of data&lt;/strong&gt;
around the loop, into and out of the transforming functions you
provide - hence a tag line of "Derived Values, Flowing".&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-it-does-physics" class="anchor" aria-hidden="true" href="#it-does-physics"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;It does Physics&lt;/h3&gt;
&lt;p&gt;Remember this diagram from school? The water cycle, right?&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="/images/the-water-cycle.png?raw=true"&gt;&lt;img height="350px" align="right" src="/images/the-water-cycle.png?raw=true" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Two distinct stages, involving water in different phases, being acted upon
by different forces: gravity working one way, evaporation/convection the other.&lt;/p&gt;
&lt;p&gt;To understand re-frame, &lt;strong&gt;imagine data flowing around that loop instead of water&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;re-frame
provides the conveyance of the data around the loop - the equivalent of gravity, evaporation and convection.
You design what's flowing and then you hang functions off the loop at
various points to compute the data's phase changes (again, data flow coordinates code).&lt;/p&gt;
&lt;p&gt;Sure, right now, you're thinking "lazy sod - make a proper Computer Science-y diagram". But, no.
Joe Armstrong says "don't break the laws of physics" - I'm sure
you've seen the videos - and if he says to do something, you do it
(unless Rich Hickey disagrees, and says to do something else). So,
this diagram, apart from being a plausible analogy which might help
you to understand re-frame, is &lt;strong&gt;practically proof&lt;/strong&gt; it does physics.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-it-is-a-6-domino-cascade" class="anchor" aria-hidden="true" href="#it-is-a-6-domino-cascade"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;It is a 6-domino cascade&lt;/h2&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="/images/Readme/Dominoes-small.jpg?raw=true"&gt;&lt;img align="right" src="/images/Readme/Dominoes-small.jpg?raw=true" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Computationally, each iteration of the loop involves a
six domino cascade.&lt;/p&gt;
&lt;p&gt;One domino triggers the next, which triggers the next, et cetera, boom, boom, boom, until we are
back at the beginning of the loop, and the dominoes reset to attention
again, ready for the next iteration of the same cascade.&lt;/p&gt;
&lt;p&gt;The six dominoes are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Event dispatch&lt;/li&gt;
&lt;li&gt;Event handling&lt;/li&gt;
&lt;li&gt;Effect handling&lt;/li&gt;
&lt;li&gt;Query&lt;/li&gt;
&lt;li&gt;View&lt;/li&gt;
&lt;li&gt;DOM&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let's have a first look at each them.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-1st-domino---event-dispatch" class="anchor" aria-hidden="true" href="#1st-domino---event-dispatch"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1st Domino - Event Dispatch&lt;/h3&gt;
&lt;p&gt;An &lt;code&gt;event&lt;/code&gt; is sent when something happens - the user
clicks a button, or a websocket receives a new message.&lt;/p&gt;
&lt;p&gt;Without the impulse of a triggering &lt;code&gt;event&lt;/code&gt;, no six domino cascade occurs.
It is only because of &lt;code&gt;event&lt;/code&gt;s that a re-frame app is propelled,
loop iteration after loop iteration, from one state to the next.&lt;/p&gt;
&lt;p&gt;re-frame is &lt;code&gt;event&lt;/code&gt; driven.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-2nd-domino---event-handling" class="anchor" aria-hidden="true" href="#2nd-domino---event-handling"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2nd Domino - Event Handling&lt;/h3&gt;
&lt;p&gt;In response to an &lt;code&gt;event&lt;/code&gt;, an application must decide what action to take.
This is known as &lt;code&gt;event handling&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Event handler functions compute how an event should change "the world",
which is to say that they compute the &lt;code&gt;side effects&lt;/code&gt; of the event.
Or, more accurately, they compute a declarative &lt;strong&gt;description of the required
&lt;code&gt;side effects&lt;/code&gt;&lt;/strong&gt;, represented as a data structure. (So &lt;code&gt;event handlers&lt;/code&gt;
are just functions which compute data).&lt;/p&gt;
&lt;p&gt;Much of the time, an event will only cause &lt;code&gt;side effects&lt;/code&gt; to the SPA's
"application state", but sometimes the outside world must also be affected:
localstore, cookies, databases, emails, logs, etc.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-3rd-domino---effect-handling" class="anchor" aria-hidden="true" href="#3rd-domino---effect-handling"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3rd Domino - Effect Handling&lt;/h3&gt;
&lt;p&gt;In this step, the &lt;code&gt;side effects&lt;/code&gt;, returned by the previous step (as data), are actioned/performed.&lt;/p&gt;
&lt;p&gt;Now, to a functional programmer, &lt;code&gt;effects&lt;/code&gt; are scary in a
&lt;a href="https://www.google.com.au/search?q=xenomorph" rel="nofollow"&gt;xenomorph kind of way&lt;/a&gt;.
Nothing messes with functional purity
quite like the need for side effects. On the other hand, &lt;code&gt;effects&lt;/code&gt; are
marvelous because they move the app forward. Without them,
an app stays stuck in one state forever, never achieving anything.&lt;/p&gt;
&lt;p&gt;So re-frame embraces the protagonist nature of &lt;code&gt;effects&lt;/code&gt; - the entire, unruly zoo of them - but
it does so in a controlled and largely hidden way, and in a manner which is debuggable, auditable, mockable and pluggable.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-were-now-at-a-pivot-point" class="anchor" aria-hidden="true" href="#were-now-at-a-pivot-point"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;We're Now At A Pivot Point&lt;/h3&gt;
&lt;p&gt;Domino 3 just changed the world and, very often, one particular part of it: the &lt;strong&gt;application state&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;re-frame's &lt;code&gt;app state&lt;/code&gt; is held in one place - think of it like you
would an in-memory, central database for the app (details later).&lt;/p&gt;
&lt;p&gt;Any changes to &lt;code&gt;app state&lt;/code&gt; trigger the next part of the cascade
involving dominoes 4-5-6.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-theres-a-formula-for-it" class="anchor" aria-hidden="true" href="#theres-a-formula-for-it"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;There's a Formula For It&lt;/h3&gt;
&lt;p&gt;The 4-5-6 domino cascade implements the formula made famous by Facebook's ground-breaking React library:&lt;br&gt;
&lt;code&gt;v = f(s)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;A view, &lt;code&gt;v&lt;/code&gt;, is a function, &lt;code&gt;f&lt;/code&gt;, of the app state, &lt;code&gt;s&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Said another way, there are functions &lt;code&gt;f&lt;/code&gt; that compute which DOM nodes, &lt;code&gt;v&lt;/code&gt;,
should be displayed to the user when the application is in a given app state, &lt;code&gt;s&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Or, to capture the dynamics we'd say: &lt;strong&gt;over time&lt;/strong&gt;, as &lt;code&gt;s&lt;/code&gt; changes, &lt;code&gt;f&lt;/code&gt;
will be re-run each time to compute new &lt;code&gt;v&lt;/code&gt;, forever keeping &lt;code&gt;v&lt;/code&gt; up to date with the current &lt;code&gt;s&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Or, with yet another emphasis: &lt;strong&gt;over time&lt;/strong&gt; what is presented to the user changes in response to application state changes.&lt;/p&gt;
&lt;p&gt;In our case, domino 3 changes &lt;code&gt;s&lt;/code&gt;, the application state,
and, in response, dominoes 4-5-6 are concerned with re-running &lt;code&gt;f&lt;/code&gt; to compute the new &lt;code&gt;v&lt;/code&gt;
shown to the user.&lt;/p&gt;
&lt;p&gt;Except, of course, there are nuances.  For instance, there's no single &lt;code&gt;f&lt;/code&gt; to run.
There may be many functions which collectively build the overall DOM,
and only part of &lt;code&gt;s&lt;/code&gt; may change at any one time, so only part of the
&lt;code&gt;v&lt;/code&gt; (DOM) need be re-computed and updated. And some parts of &lt;code&gt;v&lt;/code&gt; might not
be showing right now.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-domino-4---query" class="anchor" aria-hidden="true" href="#domino-4---query"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Domino 4 - Query&lt;/h3&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="/images/Readme/6dominoes.png?raw=true"&gt;&lt;img align="right" src="/images/Readme/6dominoes.png?raw=true" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Domino 4 is about extracting data from "app state", and providing it
in the right format for view functions (which are Domino 5).&lt;/p&gt;
&lt;p&gt;Domino 4 is a novel and efficient de-duplicated signal graph which
runs query functions on the app state, &lt;code&gt;s&lt;/code&gt;, efficiently computing
reactive, multi-layered, "materialised views" of &lt;code&gt;s&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Relax about any unfamiliar terminology, you'll soon
see how simple the code actually is.&lt;/p&gt;
&lt;p&gt;(&lt;em&gt;&lt;code&gt;react-redux&lt;/code&gt; programmers:&lt;/em&gt; query functions serve essentially the same purpose as &lt;code&gt;mapStateToProps&lt;/code&gt;)&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-domino-5---view" class="anchor" aria-hidden="true" href="#domino-5---view"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Domino 5 - View&lt;/h3&gt;
&lt;p&gt;Domino 5 is one or more &lt;strong&gt;view functions&lt;/strong&gt; (aka Reagent components) that compute the
UI DOM that should be displayed to the user.&lt;/p&gt;
&lt;p&gt;To render the right UI, they need to source application state, which is
delivered reactively via the queries of Domino 4. They
compute hiccup-formatted data, which is a description of the DOM required.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-domino-6---dom" class="anchor" aria-hidden="true" href="#domino-6---dom"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Domino 6 - DOM&lt;/h3&gt;
&lt;p&gt;You don't write Domino 6 - it is handled for you
by Reagent/React. I mention it here
for completeness and to fully close the loop.&lt;/p&gt;
&lt;p&gt;This is the step in which the hiccup-formatted
"descriptions of required DOM", returned by the view functions of Domino 5, are made real.
The browser DOM nodes are mutated.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-managing-mutation" class="anchor" aria-hidden="true" href="#managing-mutation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Managing mutation&lt;/h2&gt;
&lt;p&gt;The two sub-cascades 1-2-3 and 4-5-6 have a similar structure.&lt;/p&gt;
&lt;p&gt;In each, it is the second to last domino which
computes "data descriptions" of mutations required, and it is
the last domino which does the dirty work and realises these descriptions.&lt;/p&gt;
&lt;p&gt;In both cases, you don't need to worry yourself about this dirty work. re-frame looks
after those dominoes.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-a-cascade-of-simple-functions" class="anchor" aria-hidden="true" href="#a-cascade-of-simple-functions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;A Cascade Of Simple Functions&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;You'll (mostly) be writing pure functions&lt;/strong&gt; which
can be described, understood and
tested independently. They take data, transform it and return new data.&lt;/p&gt;
&lt;p&gt;The loop itself is mechanical and predictable in operation.
So, there's a regularity to how a re-frame app goes about its business,
which leads, in turn, to an ease in reasoning and debugging.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-the-dominoes-again---with-code-fragments" class="anchor" aria-hidden="true" href="#the-dominoes-again---with-code-fragments"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;The Dominoes Again - With Code Fragments&lt;/h2&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="/images/Readme/todolist.png?raw=true"&gt;&lt;img align="right" src="/images/Readme/todolist.png?raw=true" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So that was the view of re-frame from 60,000 feet. We'll now shift down to 30,000 feet
and look again at each domino, but this time with code fragments.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Imagine:&lt;/strong&gt; we're working on a SPA which displays a list of items. You have
just clicked the "delete" button next to the 3rd item in the list.&lt;/p&gt;
&lt;p&gt;In response, what happens within this imaginary re-frame app? Here's a sketch
of the six domino cascade:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Don't expect
to completely grok the terse code presented below. We're still at 30,000 feet. Details later.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;&lt;a id="user-content-code-for-domino-1" class="anchor" aria-hidden="true" href="#code-for-domino-1"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Code For Domino 1&lt;/h3&gt;
&lt;p&gt;The delete button for that 3rd item will be rendered by a ViewFunction which looks like this:&lt;/p&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;defn&lt;/span&gt; &lt;span class="pl-e"&gt;delete-button&lt;/span&gt; 
  [item-id]
  [&lt;span class="pl-c1"&gt;:div.garbage-bin&lt;/span&gt; 
     &lt;span class="pl-c1"&gt;:on-click&lt;/span&gt; #(&lt;span class="pl-en"&gt;re-frame.core/dispatch&lt;/span&gt; [&lt;span class="pl-c1"&gt;:delete-item&lt;/span&gt; item-id])])&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That &lt;code&gt;on-click&lt;/code&gt; handler uses re-frame's &lt;code&gt;dispatch&lt;/code&gt; to emit an &lt;code&gt;event&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;A re-frame &lt;code&gt;event&lt;/code&gt; is a vector and, in this case,
it has 2 elements: &lt;code&gt;[:delete-item 2486]&lt;/code&gt; (where &lt;code&gt;2486&lt;/code&gt; is the made-up id for that 3rd item).&lt;/p&gt;
&lt;p&gt;The first element of an event vector,
&lt;code&gt;:delete-item&lt;/code&gt;, is the kind of event. The rest is optional, useful data about the
&lt;code&gt;event&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Events express intent in a domain specific way.
They are the language of your re-frame system.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-code-for-domino-2" class="anchor" aria-hidden="true" href="#code-for-domino-2"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Code For Domino 2&lt;/h3&gt;
&lt;p&gt;An &lt;code&gt;event handler&lt;/code&gt; (function), called say &lt;code&gt;h&lt;/code&gt;, is called to
compute the &lt;code&gt;effect&lt;/code&gt; of the event &lt;code&gt;[:delete-item 2486]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;On app startup, &lt;code&gt;re-frame.core/reg-event-fx&lt;/code&gt; would have been used to
register this &lt;code&gt;h&lt;/code&gt; as the handler for  &lt;code&gt;:delete-item&lt;/code&gt; events, like this:&lt;/p&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;(&lt;span class="pl-en"&gt;re-frame.core/reg-event-fx&lt;/span&gt;   &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; a part of the re-frame API&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:delete-item&lt;/span&gt;                &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; the kind of event&lt;/span&gt;
  h)                          &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; the handler function for this kind of event&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;h&lt;/code&gt; is written to take two arguments:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;a &lt;code&gt;coeffects&lt;/code&gt; map which contains the current state of the world (including app state)&lt;/li&gt;
&lt;li&gt;the &lt;code&gt;event&lt;/code&gt; to handle&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It is the job of &lt;code&gt;h&lt;/code&gt; to compute how the world should be changed by the event, and
it returns a map of &lt;code&gt;effects&lt;/code&gt; - a description of those changes.&lt;/p&gt;
&lt;p&gt;Here's a sketch (we are at 30,000 feet):&lt;/p&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;defn&lt;/span&gt; &lt;span class="pl-e"&gt;h&lt;/span&gt;                               &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; maybe choose a better name like `delete-item`&lt;/span&gt;
 [coeffects event]                    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; `coeffects` holds the current state of the world.  &lt;/span&gt;
 (&lt;span class="pl-k"&gt;let&lt;/span&gt; [item-id (&lt;span class="pl-en"&gt;second&lt;/span&gt; event)         &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; extract id from event vector&lt;/span&gt;
       db      (&lt;span class="pl-c1"&gt;:db&lt;/span&gt; coeffects)]       &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; extract the current application state&lt;/span&gt;
   {&lt;span class="pl-c1"&gt;:db&lt;/span&gt;  (&lt;span class="pl-en"&gt;dissoc-in&lt;/span&gt; db [&lt;span class="pl-c1"&gt;:items&lt;/span&gt; item-id])})) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; effect is "change app state to ..."&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;re-frame has ways (described in later tutorials) to inject necessary aspects
of the world into that first &lt;code&gt;coeffects&lt;/code&gt; argument (map). Different
event handlers need different "things" to get their job done. But
current "application state" is one aspect of the world which is
invariably needed, and it is available by default in the &lt;code&gt;:db&lt;/code&gt; key.&lt;/p&gt;
&lt;p&gt;BTW, here is a more idiomatic rewrite of &lt;code&gt;h&lt;/code&gt; which uses &lt;code&gt;destructuring&lt;/code&gt; of the args:&lt;/p&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;defn&lt;/span&gt; &lt;span class="pl-e"&gt;h&lt;/span&gt; 
  [{&lt;span class="pl-c1"&gt;:keys&lt;/span&gt; [db]} [_ item-id]]    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; &amp;lt;--- new: obtain db and id directly&lt;/span&gt;
  {&lt;span class="pl-c1"&gt;:db&lt;/span&gt;  (&lt;span class="pl-en"&gt;dissoc-in&lt;/span&gt; db [&lt;span class="pl-c1"&gt;:items&lt;/span&gt; item-id])}) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; same as before&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-code-for-domino-3" class="anchor" aria-hidden="true" href="#code-for-domino-3"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Code For Domino 3&lt;/h3&gt;
&lt;p&gt;An &lt;code&gt;effect handler&lt;/code&gt; (function) actions the &lt;code&gt;effects&lt;/code&gt; returned by &lt;code&gt;h&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here's what &lt;code&gt;h&lt;/code&gt; returned:&lt;/p&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;{&lt;span class="pl-c1"&gt;:db&lt;/span&gt;  (&lt;span class="pl-en"&gt;dissoc-in&lt;/span&gt; db [&lt;span class="pl-c1"&gt;:items&lt;/span&gt; &lt;span class="pl-c1"&gt;2486&lt;/span&gt;])}   &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; db is a map of some structure&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Each key of the map identifies one kind
of &lt;code&gt;effect&lt;/code&gt;, and the value for that key supplies further details.
The map returned by &lt;code&gt;h&lt;/code&gt; only has one key, so there's only one effect.&lt;/p&gt;
&lt;p&gt;A key of &lt;code&gt;:db&lt;/code&gt; means to update the app state with the key's value.&lt;/p&gt;
&lt;p&gt;This update of "app state" is a mutative step, facilitated by re-frame
which has a built-in &lt;code&gt;effects handler&lt;/code&gt; for the &lt;code&gt;:db&lt;/code&gt; effect.&lt;/p&gt;
&lt;p&gt;Why the name &lt;code&gt;:db&lt;/code&gt;?  Well, re-frame sees "app state" as something of an in-memory
database. More on this in a following tutorial.&lt;/p&gt;
&lt;p&gt;Just to be clear, if &lt;code&gt;h&lt;/code&gt; had returned:&lt;/p&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;{&lt;span class="pl-c1"&gt;:wear&lt;/span&gt;  {&lt;span class="pl-c1"&gt;:pants&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;velour flares&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;  &lt;span class="pl-c1"&gt;:belt&lt;/span&gt; &lt;span class="pl-c1"&gt;false&lt;/span&gt;}
 &lt;span class="pl-c1"&gt;:tweet&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Okay, yes, I am Satoshi. #coverblown&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then, the two effects handlers registered for &lt;code&gt;:wear&lt;/code&gt; and &lt;code&gt;:tweet&lt;/code&gt; would
be called to action those two effects. And, no, re-frame
does not supply standard effect handlers for either, so you would have had
to have written them yourself (see how in a later tutorial).&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-code-for-domino-4" class="anchor" aria-hidden="true" href="#code-for-domino-4"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Code For Domino 4&lt;/h3&gt;
&lt;p&gt;We now start the &lt;code&gt;v = f(s)&lt;/code&gt; part of the flow.&lt;/p&gt;
&lt;p&gt;The application state
&lt;code&gt;s&lt;/code&gt; has just changed (via Domino 3) and now boom, boom go Dominoes 4, 5,
and 6, at the end of which we have a new view, &lt;code&gt;v&lt;/code&gt;, being shown to the user.&lt;/p&gt;
&lt;p&gt;In this domino 4, a query (function) over this app state is automatically
called.  This query function "extracts" data from application state, and
then computes "a materialised view" of the application state - producing
data which is useful to the view functions of domino, 5.&lt;/p&gt;
&lt;p&gt;Now, in this particular case, the query function is pretty trivial.
Because the items are stored in app state, there's not a lot
to compute and, instead, it acts strictly like an extractor or accessor,
just plucking the list of items out of application state:&lt;/p&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;defn&lt;/span&gt; &lt;span class="pl-e"&gt;query-fn&lt;/span&gt;
  [db v]         &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; db is current app state, v the query vector&lt;/span&gt;
  (&lt;span class="pl-c1"&gt;:items&lt;/span&gt; db))   &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; not much of a materialised view&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;On program startup, such a &lt;code&gt;query-fn&lt;/code&gt; must be associated with a &lt;code&gt;query-id&lt;/code&gt;,
(so it can be used via &lt;code&gt;subscribe&lt;/code&gt; in domino 5) using &lt;code&gt;re-frame.core/reg-sub&lt;/code&gt;,
like this:&lt;/p&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;(&lt;span class="pl-en"&gt;re-frame.core/reg-sub&lt;/span&gt;  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; part of the re-frame API&lt;/span&gt;
   &lt;span class="pl-c1"&gt;:query-items&lt;/span&gt;         &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; query id  &lt;/span&gt;
   query-fn)            &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; query fn&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Which says "if, in domino 5, you see a &lt;code&gt;(subscribe [:query-items])&lt;/code&gt;, then
use &lt;code&gt;query-fn&lt;/code&gt; to compute it".&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-code-for-domino-5" class="anchor" aria-hidden="true" href="#code-for-domino-5"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Code For Domino 5&lt;/h3&gt;
&lt;p&gt;Because the query function for &lt;code&gt;:query-items&lt;/code&gt; just re-computed a new value,
any view (function) which uses a &lt;code&gt;(subscribe [:query-items])&lt;/code&gt;
is called automatically (reactively) to re-compute new DOM.&lt;/p&gt;
&lt;p&gt;View functions compute a data structure, in hiccup format, describing
the DOM nodes required. In this "items" case, the view functions will &lt;em&gt;not&lt;/em&gt; be generating
hiccup for the just-deleted item obviously but, other than this,
the hiccup computed "this time" will be the same as "last time".&lt;/p&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;defn&lt;/span&gt; &lt;span class="pl-e"&gt;items-view&lt;/span&gt;
  []
  (&lt;span class="pl-k"&gt;let&lt;/span&gt; [items  (&lt;span class="pl-en"&gt;subscribe&lt;/span&gt; [&lt;span class="pl-c1"&gt;:query-items&lt;/span&gt;])]  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; source items from app state&lt;/span&gt;
    [&lt;span class="pl-c1"&gt;:div&lt;/span&gt; (&lt;span class="pl-en"&gt;map&lt;/span&gt; item-render @items)]))   &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; assume item-render already written&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice how &lt;code&gt;items&lt;/code&gt; is "sourced" from "app state" via &lt;code&gt;re-frame.core/subscribe&lt;/code&gt;.
It is called with a vector argument, and the first element of that vector is
a query-id which identifies the "materialised view" required by the view.&lt;/p&gt;
&lt;p&gt;Note: &lt;code&gt;subscribe&lt;/code&gt; queries can be parameterised. So, in real world apps
you might have this:&lt;br&gt;
&lt;code&gt;(subscribe [:items "blue"])&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The vector identifies, first, the query, and then
supplies further arguments. You could think of that as
representing &lt;code&gt;select * from Items where colour="blue"&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Except there's no SQL available and you would be the one to implement
the more sophisticated &lt;code&gt;query-fn&lt;/code&gt; capable of handling the
"where" argument. More in later tutorials.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-code-for-domino-6" class="anchor" aria-hidden="true" href="#code-for-domino-6"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Code For Domino 6&lt;/h3&gt;
&lt;p&gt;The hiccup returned by the view function
is made into real browser DOM by Reagent/React. No code from you required. Just happens.&lt;/p&gt;
&lt;p&gt;The DOM computed "this
time" will be the same as "last time", &lt;strong&gt;except&lt;/strong&gt; for the absence of DOM for the
deleted item, so the mutation will be to remove those now-missing
DOM nodes from the browser.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-3-4-5-6-summary" class="anchor" aria-hidden="true" href="#3-4-5-6-summary"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3-4-5-6 Summary&lt;/h3&gt;
&lt;p&gt;The key point to understand about our 3-4-5-6 example is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a change to app state ...&lt;/li&gt;
&lt;li&gt;triggers query functions to rerun ...&lt;/li&gt;
&lt;li&gt;which triggers view functions to rerun&lt;/li&gt;
&lt;li&gt;which causes modified browser DOM&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Boom, boom, boom go the dominoes. It is a reactive data flow.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-aaaaand-were-done" class="anchor" aria-hidden="true" href="#aaaaand-were-done"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Aaaaand we're done&lt;/h3&gt;
&lt;p&gt;At this point, the re-frame app returns to a quiescent state,
waiting for the next event.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-so-your-job-is-" class="anchor" aria-hidden="true" href="#so-your-job-is-"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;So, your job is ...&lt;/h2&gt;
&lt;p&gt;When building a re-frame app, you:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;design your app's information model (data and schema layer)&lt;/li&gt;
&lt;li&gt;write and register event handler functions  (control and transition layer)  (domino 2)&lt;/li&gt;
&lt;li&gt;(once in a blue moon) write and register effect and coeffect handler
functions (domino 3) which do the mutative dirty work of which we dare not
speak.&lt;/li&gt;
&lt;li&gt;write and register query functions which implement nodes in a signal graph (query layer) (domino 4)&lt;/li&gt;
&lt;li&gt;write Reagent view functions  (view layer)  (domino 5)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-re-frame-is-mature-and-proven-in-the-large" class="anchor" aria-hidden="true" href="#re-frame-is-mature-and-proven-in-the-large"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;re-frame is mature and proven in the large&lt;/h2&gt;
&lt;p&gt;re-frame was released in early 2015, and has since
&lt;a href="https://www.fullcontact.com" rel="nofollow"&gt;been&lt;/a&gt; successfully
&lt;a href="https://www.nubank.com.br" rel="nofollow"&gt;used&lt;/a&gt; by
&lt;a href="http://open.mediaexpress.reuters.com/" rel="nofollow"&gt;quite&lt;/a&gt; a
&lt;a href="https://rokt.com/" rel="nofollow"&gt;few&lt;/a&gt; companies and
individuals to build complex apps, many running beyond 40K lines of
ClojureScript.&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="/images/scale-changes-everything.jpg?raw=true"&gt;&lt;img align="right" src="/images/scale-changes-everything.jpg?raw=true" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Scale changes everything.&lt;/strong&gt; Frameworks
are just pesky overhead at small scale - measure them instead by how they help
you tame the complexity of bigger apps, and in this regard re-frame has
worked out well. Some have been effusive in their praise.&lt;/p&gt;
&lt;p&gt;Having said that, re-frame remains a work in progress and it falls
short in a couple of ways - for example it doesn't work as well as we'd
like with devcards, because it is a framework, rather than a library.
We're still puzzling over some aspects and tweaking as we go. All designs
represent a point in the possible design space, with pros and cons.&lt;/p&gt;
&lt;p&gt;And, yes, re-frame is fast, straight out of the box. And, yes, it has
a good testing story (unit and behavioural). And, yes, it works with your build
tools (like figwheel or shadow-cljs) to create
a powerful hot-loading development story. And, yes, it has
fun specialist tooling, and a community,
and useful 3rd party libraries.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-where-do-i-go-next" class="anchor" aria-hidden="true" href="#where-do-i-go-next"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Where Do I Go Next?&lt;/h2&gt;
&lt;p&gt;At this point, you know 50% of re-frame.  &lt;br&gt;
The full &lt;a href="/docs/README.md"&gt;docs are here&lt;/a&gt; and the &lt;a href="/docs/FAQs/README.md"&gt;FAQs are here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There are two example apps to play with: &lt;br&gt;
&lt;a href="https://github.com/day8/re-frame/tree/master/examples"&gt;https://github.com/day8/re-frame/tree/master/examples&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Use a template to create your own project: &lt;br&gt;
Client only:  &lt;a href="https://github.com/day8/re-frame-template"&gt;https://github.com/day8/re-frame-template&lt;/a&gt;  &lt;br&gt;
Full Stack: &lt;a href="http://www.luminusweb.net/" rel="nofollow"&gt;http://www.luminusweb.net/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And please be sure to review these further resources: &lt;br&gt;
&lt;a href="https://github.com/day8/re-frame/blob/master/docs/External-Resources.md"&gt;https://github.com/day8/re-frame/blob/master/docs/External-Resources.md&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-t-shirt-unlocked" class="anchor" aria-hidden="true" href="#t-shirt-unlocked"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;T-Shirt Unlocked&lt;/h3&gt;
&lt;p&gt;Good news.  If you've read this far,
your insiders T-shirt will be arriving soon - it will feature turtles,
&lt;a href="http://xkcd.com/1416/" rel="nofollow"&gt;xkcd&lt;/a&gt; and something about "data all the way down".
But we're still working on the hilarious caption bit. Open a
repo issue with a suggestion.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>day8</author><guid isPermaLink="false">https://github.com/day8/re-frame</guid><pubDate>Tue, 12 Nov 2019 00:03:00 GMT</pubDate></item><item><title>Olical/conjure #4 in Clojure, Today</title><link>https://github.com/Olical/conjure</link><description>&lt;p&gt;&lt;i&gt;Neovim Clojure(Script) tooling over prepl&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-conjure-" class="anchor" aria-hidden="true" href="#conjure-"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Conjure &lt;a href="http://clojurians.net" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/63a5baa7f7941496612f7e17dbda8d5370770593/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636861742d253233636f6e6a7572652d677265656e2e7376673f7374796c653d666c6174" alt="Slack" data-canonical-src="https://img.shields.io/badge/chat-%23conjure-green.svg?style=flat" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://clojure.org/" rel="nofollow"&gt;Clojure&lt;/a&gt; (and &lt;a href="https://clojurescript.org/" rel="nofollow"&gt;ClojureScript&lt;/a&gt;) tooling for &lt;a href="https://neovim.io/" rel="nofollow"&gt;Neovim&lt;/a&gt; over a socket prepl connection.&lt;/p&gt;
&lt;p&gt;Be sure to check out the &lt;a href="https://github.com/Olical/conjure/wiki"&gt;Conjure wiki&lt;/a&gt; for various articles and guides that'll help you get up and running. I also regularly write about Conjure and prepl related topics at &lt;a href="https://oli.me.uk" rel="nofollow"&gt;oli.me.uk&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-overview" class="anchor" aria-hidden="true" href="#overview"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Overview&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Declarative connection configuration through &lt;code&gt;.conjure.edn&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Connect to multiple Clojure or ClojureScript prepls at once.&lt;/li&gt;
&lt;li&gt;Output buffer, like a REPL you can edit!&lt;/li&gt;
&lt;li&gt;Liberal use of virtual text to display documentation and results.&lt;/li&gt;
&lt;li&gt;Omnicompletion (&lt;code&gt;&amp;lt;C-x&amp;gt;&amp;lt;C-o&amp;gt;&lt;/code&gt;) through &lt;a href="https://github.com/alexander-yakushev/compliment"&gt;Complement&lt;/a&gt; (ClojureScript support &lt;em&gt;soon&lt;/em&gt;).&lt;/li&gt;
&lt;li&gt;Documentation displayed as you type (or with &lt;code&gt;K&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Refreshing of changed namespaces (Clojure only).&lt;/li&gt;
&lt;li&gt;Hooks to allow integration with &lt;a href="https://github.com/cognitect-labs/REBL-distro"&gt;REBL&lt;/a&gt; or any such tool.&lt;/li&gt;
&lt;li&gt;Evaluate a form at a &lt;a href="https://vim.fandom.com/wiki/Using_marks" rel="nofollow"&gt;mark&lt;/a&gt; (&lt;code&gt;&amp;lt;localleader&amp;gt;em{KEY}&lt;/code&gt;), even if it's in another file!&lt;/li&gt;
&lt;li&gt;Go to definition.&lt;/li&gt;
&lt;li&gt;Test running.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-install" class="anchor" aria-hidden="true" href="#install"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Install&lt;/h2&gt;
&lt;p&gt;Use your favourite plugin manager, I recommend &lt;a href="https://github.com/junegunn/vim-plug"&gt;vim-plug&lt;/a&gt;, to fetch and AOT compile Conjure.&lt;/p&gt;
&lt;p&gt;I strongly suggest you use a tag and then subscribe to releases through the GitHub repository. This will allow you to keep up to date without having your workflow disrupted by an unexpected breaking change, not that I &lt;em&gt;intend&lt;/em&gt; to release any.&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;Plug &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;Olical/conjure&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;, { &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;tag&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;v2.1.0&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;do&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;bin/compile&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt; }&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;No dependencies are required in your project, tools for features such as completion and namespace refreshing will be injected upon connection. The initial connection to a prepl will take a few seconds because of this, I think it's worth it.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-hello-world" class="anchor" aria-hidden="true" href="#hello-world"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Hello, World!&lt;/h2&gt;
&lt;p&gt;Here's a minimal example of using Conjure after successfully installing it. In an empty directory we'll create this simple &lt;code&gt;.conjure.edn&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;{&lt;span class="pl-c1"&gt;:conns&lt;/span&gt; {&lt;span class="pl-c1"&gt;:dev&lt;/span&gt; {&lt;span class="pl-c1"&gt;:port&lt;/span&gt; &lt;span class="pl-c1"&gt;5678&lt;/span&gt;}}}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Conjure is now configured to connect to a local prepl on port &lt;code&gt;5678&lt;/code&gt;, let's start the prepl with this command in another terminal.&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;clojure -J-Dclojure.server.jvm=&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;{:port 5678 :accept clojure.core.server/io-prepl}&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;You can read more about starting prepls in my &lt;a href="https://oli.me.uk/2019-03-22-clojure-socket-prepl-cookbook/" rel="nofollow"&gt;Clojure socket prepl cookbook&lt;/a&gt; post. Also check out &lt;a href="https://github.com/Olical/propel"&gt;Propel&lt;/a&gt;, my tool that helps you start prepls in various ways. I've written about using Propel in &lt;a href="https://oli.me.uk/2019-09-14-repling-into-projects-with-prepl-and-propel/" rel="nofollow"&gt;REPLing into projects with prepl and Propel&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And now all we need to do is open a Clojure file, write some code and evaluate it. Here's a clip of what you should see with autocompletion, documentation lookup and evaluation.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://asciinema.org/a/267614" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/a581ee02481e51069517935bf4a47a2aff9ba360/68747470733a2f2f61736369696e656d612e6f72672f612f3236373631342e7376673f743d3234" alt="asciicast" data-canonical-src="https://asciinema.org/a/267614.svg?t=24" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-autocompletion" class="anchor" aria-hidden="true" href="#autocompletion"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Autocompletion&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/Shougo/deoplete.nvim"&gt;Deoplete&lt;/a&gt;, once installed, will work out of the box to provide fully asynchronous completion as you type. You will probably want to configure it to pop up more often using a snippet I found in the &lt;a href="https://github.com/clojure-vim/async-clj-omni"&gt;async-clj-omni&lt;/a&gt; repository.&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;call&lt;/span&gt; &lt;span class="pl-en"&gt;deoplete#custom#option&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;keyword_patterns&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;, {&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;clojure&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;[\w!$%&amp;amp;*+/:&amp;lt;=&amp;gt;?@\^_~\-\.#]*&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;})&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you prefer to use &lt;a href="https://github.com/neoclide/coc.nvim"&gt;CoC&lt;/a&gt; you can add &lt;a href="https://github.com/jlesquembre/coc-conjure"&gt;coc-conjure&lt;/a&gt; to get the same asynchronous completion experience.&lt;/p&gt;
&lt;p&gt;The Python to hook up Deoplete and the JavaScript to connect CoC should be good enough of an example for how you can write your own plugin for another completion framework. There's a JSON RPC server inside Conjure you can connect to that allows you to execute anything within Conjure, including fetching completions or evaluating code.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-configuration" class="anchor" aria-hidden="true" href="#configuration"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Configuration&lt;/h2&gt;
&lt;p&gt;Conjure is configured through a mixture of Vim Script variables and the &lt;code&gt;.conjure.edn&lt;/code&gt; file (the dot prefix is optional). The &lt;code&gt;.conjure.edn&lt;/code&gt; file in your local directory will be deeply merged with every other one found in parent directories.&lt;/p&gt;
&lt;p&gt;This means you can store configuration all the way up your directory tree as well as global things in &lt;code&gt;~/.config/conjure/.conjure.edn&lt;/code&gt;, you can override specific values with your project local configuration file. &lt;code&gt;~/.config&lt;/code&gt; should be the default value of your &lt;code&gt;XDG_CONFIG_HOME&lt;/code&gt; environment variable which Conjure respects.&lt;/p&gt;
&lt;p&gt;Once configured you'll simply need to open up a Clojure or ClojureScript file and the connections will be made automatically. To synchronise the configuration and connections when Neovim is already open simply execute &lt;code&gt;ConjureUp&lt;/code&gt; (&lt;code&gt;&amp;lt;localleader&amp;gt;cu&lt;/code&gt; by default) after making your changes.&lt;/p&gt;
&lt;p&gt;If you get anything wrong in your &lt;code&gt;.conjure.edn&lt;/code&gt; you'll see a spec validation error formatted by &lt;a href="https://github.com/bhb/expound"&gt;expound&lt;/a&gt; which should help you work it out.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-conjureedn" class="anchor" aria-hidden="true" href="#conjureedn"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;code&gt;.conjure.edn&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Shown below is a completely configured &lt;code&gt;.conjure.edn&lt;/code&gt;. Typically, you may expect your &lt;code&gt;.conjure.edn&lt;/code&gt; to contain 1-5 lines as Conjure works mostly out-of-the-box without the need for a lot of scaffolding or configuration.&lt;/p&gt;
&lt;p&gt;The file is technically read as Clojure, so you can use things like &lt;code&gt;#"..."&lt;/code&gt; for regular expressions and &lt;code&gt;#(...)&lt;/code&gt; to define functions in hooks. Don't let the .edn extension fool you.&lt;/p&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;{&lt;span class="pl-c1"&gt;:conns&lt;/span&gt;
 {&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Minimal example.&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:api&lt;/span&gt; {&lt;span class="pl-c1"&gt;:port&lt;/span&gt; &lt;span class="pl-c1"&gt;5885&lt;/span&gt;}

  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; ClojureScript.&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:frontend&lt;/span&gt; {&lt;span class="pl-c1"&gt;:port&lt;/span&gt; &lt;span class="pl-c1"&gt;5556&lt;/span&gt;

             &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; You'll need to explicitly tell Conjure if it's a ClojureScript connection.&lt;/span&gt;
             &lt;span class="pl-c1"&gt;:lang&lt;/span&gt; &lt;span class="pl-c1"&gt;:cljs&lt;/span&gt;}

  &lt;span class="pl-c1"&gt;:staging&lt;/span&gt; {&lt;span class="pl-c1"&gt;:host&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;foo.com&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
            &lt;span class="pl-c1"&gt;:port&lt;/span&gt; &lt;span class="pl-c1"&gt;5557&lt;/span&gt;

            &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Only use this connection for files with the following extensions.&lt;/span&gt;
            &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Clojure defaults: clj, cljc and edn.&lt;/span&gt;
            &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; ClojureScript defaults: cljs, cljc and edn.&lt;/span&gt;
            &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; So we could remove edn and add a custom one with...&lt;/span&gt;
            &lt;span class="pl-c1"&gt;:extensions&lt;/span&gt; #{&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;clj&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;cljc&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;foo&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}

            &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; You can also limit the scope of a connection to a set of specific directories.&lt;/span&gt;
            &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; This can be useful if your config file presides over multiple projects.&lt;/span&gt;
            &lt;span class="pl-c1"&gt;:dirs&lt;/span&gt; #{&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;foo&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;bar&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}

            &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Finally, if neither of the above filtering tools are enough for&lt;/span&gt;
            &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; your use case, you can use the following option to exclude paths&lt;/span&gt;
            &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; based on any function you want.&lt;/span&gt;
            &lt;span class="pl-c1"&gt;:exclude-path?&lt;/span&gt; #(&lt;span class="pl-en"&gt;clojure.string/includes?&lt;/span&gt; % &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;dev&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)}

  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; You can slurp in valid EDN which allows you to use random port files from other tools (such as Propel!).&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; If the file doesn't exist yet, the connection will simply be ignored because of the nil :port value.&lt;/span&gt;

  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; As an example, this will start a JVM prepl and write the random port to .prepl-port.&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; clj -Sdeps '{:deps {olical/propel {:mvn/version "1.3.0"}}}' -m propel.main -w&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:propel&lt;/span&gt; {&lt;span class="pl-c1"&gt;:port&lt;/span&gt; #slurp-edn &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;.prepl-port&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;

           &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Disabled connections will be ignored on ConjureUp.&lt;/span&gt;
           &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Connections can be enabled and disabled with `:ConjureUp -staging +boot`&lt;/span&gt;
           &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; This allows for toggling parts of your config that may contain different custom mappings.&lt;/span&gt;
           &lt;span class="pl-c1"&gt;:enabled?&lt;/span&gt; &lt;span class="pl-c1"&gt;false&lt;/span&gt;}}

 &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Hooks are optional (yet powerful) and are described in more detail in the section below.&lt;/span&gt;
 &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; The hook shown here is used to configure the namespace refresh tooling.&lt;/span&gt;
 &lt;span class="pl-c1"&gt;:hooks&lt;/span&gt;
 {&lt;span class="pl-c1"&gt;:refresh&lt;/span&gt; (&lt;span class="pl-k"&gt;fn&lt;/span&gt; [opts]
             &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; opts defaults to nil for the refresh hook.&lt;/span&gt;
             (&lt;span class="pl-en"&gt;merge&lt;/span&gt; opts
                    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Function to run before refreshing.&lt;/span&gt;
                    &lt;span class="pl-c1"&gt;:before&lt;/span&gt; my.ns/stop

                    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Function to run after refreshing successfully.&lt;/span&gt;
                    &lt;span class="pl-c1"&gt;:after&lt;/span&gt; my.ns/start

                    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Directories to search for changed namespaces in.&lt;/span&gt;
                    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Defaults to all directories on the Java classpath.&lt;/span&gt;
                    &lt;span class="pl-c1"&gt;:dirs&lt;/span&gt; #{&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;src&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}))}}&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-hooks" class="anchor" aria-hidden="true" href="#hooks"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Hooks&lt;/h3&gt;
&lt;p&gt;Conjure exposes hooks through the &lt;code&gt;.conjure.edn&lt;/code&gt; configuration. You can set &lt;code&gt;:hooks&lt;/code&gt; at the top level of your &lt;code&gt;.conjure.edn&lt;/code&gt; alongside &lt;code&gt;:conns&lt;/code&gt; or inside a specific connection in order to limit the scope of the &lt;code&gt;hook&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;:hooks&lt;/code&gt; within a specific connection will override &lt;code&gt;:hooks&lt;/code&gt; at the top level.&lt;/p&gt;
&lt;p&gt;A hook is a function that takes a single argument and, in some cases, returns the modified version of that value for Conjure to use.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:refresh&lt;/code&gt; is used to configure the options to &lt;code&gt;ConjureRefresh&lt;/code&gt;. Return a map containing your required configuration.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:eval&lt;/code&gt; is called just before an evaluation with the code as a string. You can alter that string and return the new version.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:result!&lt;/code&gt; is run with a map of the &lt;code&gt;:code&lt;/code&gt; that was called and the &lt;code&gt;:result&lt;/code&gt; value as data. This can be sent off to &lt;a href="https://github.com/cognitect-labs/REBL-distro"&gt;REBL&lt;/a&gt; or a similar tool. The return value of this function is ignored.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:connect!&lt;/code&gt; is run in every prepl when you execute &lt;code&gt;ConjureUp&lt;/code&gt;. You can use this to start servers (or &lt;a href="https://github.com/cognitect-labs/REBL-distro"&gt;REBL&lt;/a&gt;!), just make sure you set a flag or something to prevent it starting a new one on every &lt;code&gt;ConjureUp&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a id="user-content-integrating-rebl" class="anchor" aria-hidden="true" href="#integrating-rebl"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Integrating REBL&lt;/h4&gt;
&lt;p&gt;If you have &lt;a href="https://github.com/cognitect-labs/REBL-distro"&gt;REBL&lt;/a&gt; downloaded and configured in your &lt;code&gt;deps.edn&lt;/code&gt; you can ask Conjure to open it upon connection &lt;em&gt;and&lt;/em&gt; additionally send the results of evaluations for display and analysis.&lt;/p&gt;
&lt;p&gt;Here is an example of configuring a connection-specific hook to use REBL:&lt;/p&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;{&lt;span class="pl-c1"&gt;:conns&lt;/span&gt;
 {&lt;span class="pl-c1"&gt;:dev&lt;/span&gt; {&lt;span class="pl-c1"&gt;:port&lt;/span&gt; #slurp-edn &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;.prepl-port&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
        &lt;span class="pl-c1"&gt;:hooks&lt;/span&gt; {&lt;span class="pl-c1"&gt;:connect!&lt;/span&gt; (&lt;span class="pl-k"&gt;fn&lt;/span&gt; [conn]
                            (&lt;span class="pl-k"&gt;do&lt;/span&gt;
                              (&lt;span class="pl-k"&gt;require&lt;/span&gt; 'cognitect.rebl)
                              ((&lt;span class="pl-en"&gt;resolve&lt;/span&gt; 'cognitect.rebl/ui))))
                &lt;span class="pl-c1"&gt;:result!&lt;/span&gt; (&lt;span class="pl-k"&gt;fn&lt;/span&gt; [{&lt;span class="pl-c1"&gt;:keys&lt;/span&gt; [code result]}]
                           (&lt;span class="pl-en"&gt;cognitect.rebl/submit&lt;/span&gt; code result))}}}}&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content-timing-your-evaluations" class="anchor" aria-hidden="true" href="#timing-your-evaluations"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Timing your evaluations&lt;/h4&gt;
&lt;p&gt;Shown below is a simple example of a (top-level) &lt;code&gt;:eval&lt;/code&gt; hook that prints out how long each evaluation takes to compute.&lt;/p&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;{&lt;span class="pl-c1"&gt;:conns&lt;/span&gt;
 {&lt;span class="pl-c1"&gt;:dev&lt;/span&gt; {&lt;span class="pl-c1"&gt;:port&lt;/span&gt; #slurp-edn &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;.prepl-port&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}}
 &lt;span class="pl-c1"&gt;:hooks&lt;/span&gt; {&lt;span class="pl-c1"&gt;:eval&lt;/span&gt; #(&lt;span class="pl-en"&gt;str&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;(time &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; % &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-cce"&gt;\n&lt;/span&gt;)&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)}}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You could put &lt;code&gt;:hooks&lt;/code&gt; inside the &lt;code&gt;:dev&lt;/code&gt; connection if you want but it depends on your particular use cases and project requirements.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Important!&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Take note of how I've added a newline to the code for the &lt;code&gt;:eval&lt;/code&gt; hook. This prevents a fun issue where evaluating code with a line comment at the end removes your closing parenthesis!&lt;/p&gt;
&lt;p&gt;If we evaluated this code through visual selection, for example.&lt;/p&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;(&lt;span class="pl-en"&gt;+&lt;/span&gt; &lt;span class="pl-c1"&gt;10&lt;/span&gt; &lt;span class="pl-c1"&gt;20&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Hmm&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It would result in the following code being executed, I hope it makes the issue clear!&lt;/p&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;(&lt;span class="pl-en"&gt;time&lt;/span&gt; (&lt;span class="pl-en"&gt;+&lt;/span&gt; &lt;span class="pl-c1"&gt;10&lt;/span&gt; &lt;span class="pl-c1"&gt;20&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Hmm)&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-options" class="anchor" aria-hidden="true" href="#options"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Options&lt;/h3&gt;
&lt;p&gt;You may set these globals with &lt;code&gt;let&lt;/code&gt; &lt;em&gt;before&lt;/em&gt; Conjure is loaded to configure it's behaviour.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Variable&lt;/th&gt;
&lt;th&gt;Default value&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;g:conjure_default_mappings&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;v:true&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Enable default key mappings.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;g:conjure_map_prefix&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;"&amp;lt;localleader&amp;gt;"&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Prefix to most of the default mappings.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;g:conjure_log_direction&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;"vertical"&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;How to split the log window. Either &lt;code&gt;"vertical"&lt;/code&gt; or &lt;code&gt;"horizontal"&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;g:conjure_log_size_small&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;25&lt;/code&gt; (%)&lt;/td&gt;
&lt;td&gt;Regular size of the log window when it opens automatically.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;g:conjure_log_size_large&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;50&lt;/code&gt; (%)&lt;/td&gt;
&lt;td&gt;Size of the log window when explicitly opened by  &lt;code&gt;ConjureOpenLog&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;g:conjure_log_auto_close&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;v:true&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Enable closing the log window as you enter insert mode in a Clojure buffer.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;g:conjure_log_blacklist&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;[]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Don't open the log window for specific kinds of messages. To suppress &lt;code&gt;conjure/up&lt;/code&gt; you'd use &lt;code&gt;["up"]&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;g:conjure_fold_multiline_results&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;v:false&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Fold multiline results in the log window.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;g:conjure_quick_doc_normal_mode&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;v:true&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Enable small doc strings appearing as virtual text in normal mode.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;g:conjure_quick_doc_insert_mode&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;v:true&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Enable small doc strings appearing as virtual text in insert mode as you type.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;g:conjure_quick_doc_time&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;250&lt;/code&gt; (ms)&lt;/td&gt;
&lt;td&gt;How long your cursor has to hold before the quick doc will be queried, if enabled.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;g:conjure_omnifunc&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;v:true&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Enable Conjure's built in omnifunc.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Here's all of the possible values that you could add to &lt;code&gt;g:conjure_log_blacklist&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;up&lt;/code&gt; - Output from &lt;code&gt;ConjureUp&lt;/code&gt; and other connection related information.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;status&lt;/code&gt; - Output from &lt;code&gt;ConjureStatus&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;eval&lt;/code&gt; - Code you just evaluated, not the result, and which connection it went to.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ret&lt;/code&gt; - Returned value from an evaluation (when it's a single line).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ret-multiline&lt;/code&gt; - Returned value from an evaluation (when it's multiple lines).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;out&lt;/code&gt; - From &lt;code&gt;stdout&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;err&lt;/code&gt; - From &lt;code&gt;stderr&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tap&lt;/code&gt; - Results from &lt;code&gt;(tap&amp;gt; ...)&lt;/code&gt; calls within an evaluation, great for debugging.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;doc&lt;/code&gt; - Documentation output.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;source&lt;/code&gt; - Source output.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;load-file&lt;/code&gt; - Path to the file you just loaded from disk and which connection it went to.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;test&lt;/code&gt; - Test results.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;refresh&lt;/code&gt; - Namespace refreshing, you'll also get some &lt;code&gt;out&lt;/code&gt; and a &lt;code&gt;ret&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here's my current configuration as a real world example. My log buffer opens across the bottom of my screen and will only open for things that I can't see through the virtual text display.&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-smi"&gt;&lt;span class="pl-k"&gt;g:&lt;/span&gt;conjure_log_direction&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;horizontal&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-smi"&gt;&lt;span class="pl-k"&gt;g:&lt;/span&gt;conjure_log_blacklist&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;up&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;ret&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;ret-multiline&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;load-file&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;eval&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-mappings" class="anchor" aria-hidden="true" href="#mappings"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Mappings&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Command&lt;/th&gt;
&lt;th&gt;Mapping&lt;/th&gt;
&lt;th&gt;Configuration&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ConjureUp&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;localleader&amp;gt;cu&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;g:conjure_nmap_up&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Synchronise connections with your &lt;code&gt;.conjure.edn&lt;/code&gt; config files, takes flags like &lt;code&gt;-foo +bar&lt;/code&gt; which will set the &lt;code&gt;:enabled?&lt;/code&gt; flags of matching connections.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ConjureStatus&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;localleader&amp;gt;cs&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;g:conjure_nmap_status&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Display the current connections in the log buffer.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ConjureEval&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;localleader&amp;gt;ew&lt;/code&gt; (word under cursor)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;g:conjure_nmap_eval_word&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Evaluate the argument in the appropriate prepl.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ConjureEvalSelection&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;localleader&amp;gt;ee&lt;/code&gt; (visual mode)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;g:conjure_vmap_eval_selection&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Evaluates the current (or previous) visual selection.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ConjureEvalCurrentForm&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;localleader&amp;gt;ee&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;g:conjure_nmap_eval_current_form&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Evaluates the form under the cursor.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ConjureEvalRootForm&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;localleader&amp;gt;er&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;g:conjure_nmap_eval_root_form&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Evaluates the outermost form under the cursor.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ConjureEvalFormAtMark&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;localleader&amp;gt;em{KEY}&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;g:conjure_nmap_eval_form_at_mark&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Jump to the &lt;a href="https://vim.fandom.com/wiki/Using_marks" rel="nofollow"&gt;mark&lt;/a&gt; denoted by the &lt;code&gt;{KEY}&lt;/code&gt; you press, evaluate the form found there and then jump back to where you started.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ConjureEvalBuffer&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;localleader&amp;gt;eb&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;g:conjure_nmap_eval_buffer&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Evaluate the entire buffer (not from the disk).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ConjureLoadFile&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;localleader&amp;gt;ef&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;g:conjure_nmap_eval_file&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Load and evaluate the file from the disk.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ConjureDoc&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;K&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;g:conjure_nmap_doc&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Display the documentation for the given symbol in the log buffer.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ConjureSource&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;localleader&amp;gt;ss&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;g:conjure_nmap_source&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Display the source for the given symbol in the log buffer.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ConjureDefinition&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;gd&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;g:conjure_nmap_definition&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Go to the source of the given symbol, providing we can find it - falls back to vanilla &lt;code&gt;gd&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ConjureOpenLog&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;localleader&amp;gt;cl&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;g:conjure_nmap_open_log&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Open and focus the log buffer in a large window.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ConjureCloseLog&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;localleader&amp;gt;cq&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;g:conjure_nmap_close_log&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Close the log window if it's open in this tab.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ConjureToggleLog&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;localleader&amp;gt;cL&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;g:conjure_nmap_toggle_log&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Open or close the log depending on it's current state.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ConjureRunTests&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;localleader&amp;gt;tt&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;g:conjure_nmap_run_tests&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Run tests in the current namespace and it's &lt;code&gt;-test&lt;/code&gt; equivalent (as well as the other way around) or with the provided namespace names separated by spaces.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ConjureRunAllTests&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;localleader&amp;gt;ta&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;g:conjure_nmap_run_all_tests&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Run all tests with an optional namespace filter regex.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ConjureRefresh&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;localleader&amp;gt;rr&lt;/code&gt; &lt;code&gt;&amp;lt;localleader&amp;gt;rR&lt;/code&gt; &lt;code&gt;&amp;lt;localleader&amp;gt;rc&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;g:conjure_nmap_refresh_changed&lt;/code&gt; &lt;code&gt;g:conjure_nmap_refresh_all&lt;/code&gt; &lt;code&gt;g:conjure_nmap_refresh_clear&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Clojure only, refresh namespaces, takes &lt;code&gt;changed&lt;/code&gt;, &lt;code&gt;all&lt;/code&gt; or &lt;code&gt;clear&lt;/code&gt; as an argument.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;To override a mapping such as for evaluating the outermost form while respecting the prefix option you'd use the following.&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-smi"&gt;&lt;span class="pl-k"&gt;g:&lt;/span&gt;conjure_nmap_eval_root_form&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-smi"&gt;&lt;span class="pl-k"&gt;g:&lt;/span&gt;conjure_map_prefix&lt;/span&gt; . &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;eE&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-issues" class="anchor" aria-hidden="true" href="#issues"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Issues&lt;/h2&gt;
&lt;p&gt;When you encounter an issue, please reproduce it with logging enabled like so.&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;CONJURE_LOG_PATH=conjure.log nvim&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then open a new issue with as much context as possible with the logging output pasted below or in a GitHub gist.&lt;/p&gt;
&lt;p&gt;If you're worried about sensitive material entering the logs, feel free to redact anything you can find, send it to me privately or &lt;a href="https://keybase.io/olical" rel="nofollow"&gt;encrypted&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-contributions" class="anchor" aria-hidden="true" href="#contributions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contributions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Adhere to &lt;a href="./.github/CODE_OF_CONDUCT.md"&gt;&lt;code&gt;.github/CODE_OF_CONDUCT.md&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Search to see if what you're thinking about has been discussed before.&lt;/li&gt;
&lt;li&gt;Raise an issue and talk about what you want to do.&lt;/li&gt;
&lt;li&gt;Develop your change on a branch in the style of the rest of the project.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Please see &lt;a href="./.github/CONTRIBUTING.md"&gt;&lt;code&gt;.github/CONTRIBUTING.md&lt;/code&gt;&lt;/a&gt; for more details.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-rationale-and-history" class="anchor" aria-hidden="true" href="#rationale-and-history"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Rationale and history&lt;/h2&gt;
&lt;p&gt;I've always been a Vim user, historically to edit things like JavaScript and Python, and probably always will be. There's great emulations out there but they never quite cut it for me.&lt;/p&gt;
&lt;p&gt;Once I got into Clojure and eventually got a job writing it I started to consider alternatives that would help me learn and grow as a Clojure developer. Spacemacs did a pretty good job but I still felt weird after about a year of usage, Emacs never sat well with me.&lt;/p&gt;
&lt;p&gt;So since I couldn't leave Vim I had to use nREPL + vim-fireplace which is pretty damn great but I hit quite a few issues around CIDER + nREPL + vim-fireplace versions bumping or changing from under me. I don't think these problems are wide spread but it was enough to kick me into building my own tooling.&lt;/p&gt;
&lt;p&gt;I was fascinated by the idea of "a REPL is all you need", no middleware, no plugins for the server, just a REPL you can send code to. The socket prepl is perfect for this since it's built into Clojure but it's undocumented, so I've been researching how it works and how to use it for over a year now. I've submitted multiple patches to Clojure and ClojureScript to fix and improve it various ways.&lt;/p&gt;
&lt;p&gt;Conjure was always going to be a remote plugin for Neovim, I was never going to write it in Vim Script. I started out with Rust since it would have a tiny footprint while remaining expressive. I eventually gave up on that approach since I'm not an experienced Rust programmer, I then tried ClojureScript but gave up on that because I couldn't stand working with nodejs again.&lt;/p&gt;
&lt;p&gt;The third and final approach you see here is almost entirely Clojure with a little Lua and Vim Script glue code thrown in. I have always mandated no dependencies required in your project and I'm still sticking to that. All Conjure needs to run is a socket prepl.&lt;/p&gt;
&lt;p&gt;It works near enough exactly the same in Clojure and ClojureScript which is another core tenant of the project. There's no piggieback or sidecar dance, you just connect to either kind of connection and start editing.&lt;/p&gt;
&lt;p&gt;So, Conjure is born from my frustrations of slightly brittle or complex tooling (maybe only in my experience!) and ClojureScript being a special case as opposed to another first class citizen. I wanted a tool that would just connect and work with very little configuration with a "Vim first" way of thinking.&lt;/p&gt;
&lt;p&gt;I hope Conjure is a joy to use, that's what I'm trying to achieve.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-unlicenced" class="anchor" aria-hidden="true" href="#unlicenced"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Unlicenced&lt;/h2&gt;
&lt;p&gt;Find the full &lt;a href="http://unlicense.org/" rel="nofollow"&gt;unlicense&lt;/a&gt; in the &lt;code&gt;UNLICENSE&lt;/code&gt; file, but here's a snippet.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This is free and unencumbered software released into the public domain.&lt;/p&gt;
&lt;p&gt;Anyone is free to copy, modify, publish, use, compile, sell, or distribute this software, either in source code form or as a compiled binary, for any purpose, commercial or non-commercial, and by any means.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>Olical</author><guid isPermaLink="false">https://github.com/Olical/conjure</guid><pubDate>Tue, 12 Nov 2019 00:04:00 GMT</pubDate></item><item><title>cloojure/graalvm #5 in Clojure, Today</title><link>https://github.com/cloojure/graalvm</link><description>&lt;p&gt;&lt;i&gt;100x speedup of Clojure as a native executable using GraalVM&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body adoc" data-path="README.adoc"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-hello-graalvm" class="anchor" aria-hidden="true" href="#hello-graalvm"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Hello GraalVM!&lt;/h1&gt;
&lt;div id="user-content-preamble"&gt;
&lt;div&gt;
&lt;div&gt;
&lt;p&gt;Clojure native executable using GraalVM.  &lt;strong&gt;&lt;strong&gt;100x Speedup!&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h2 id="user-content-overview"&gt;&lt;a id="user-content-overview" class="anchor" aria-hidden="true" href="#overview"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Overview&lt;/h2&gt;
&lt;div&gt;
&lt;div&gt;
&lt;p&gt;&lt;a href="https://www.graalvm.org/" rel="nofollow"&gt;GraalVM&lt;/a&gt;
is an alternative compiler which can compile Clojure (and many other languages) into a native,
statically-linked executable.  This executable runs with minimal memory and minimum startup time,
just like a C/C++ version of "Hello, World!".&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h2 id="user-content-install-graalvm"&gt;&lt;a id="user-content-install-graalvm" class="anchor" aria-hidden="true" href="#install-graalvm"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Install GraalVM&lt;/h2&gt;
&lt;div&gt;
&lt;div&gt;
&lt;p&gt;The GraalVM distribution is a full OpenJDK-8 distribution.  I always install packages like
this in &lt;code&gt;/opt&lt;/code&gt;, so the final install dir looks like:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;/opt/graalvm-ce-19.2.1&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h3 id="user-content-download-graalvm"&gt;&lt;a id="user-content-download-graalvm" class="anchor" aria-hidden="true" href="#download-graalvm"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Download GraalVM&lt;/h3&gt;
&lt;div&gt;
&lt;p&gt;Download the GraalVM tar file from the
&lt;a href="https://github.com/oracle/graal/releases"&gt;the GraalVM Releases page&lt;/a&gt;.  Unpack the tar
file and install it in &lt;code&gt;/opt&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;~&lt;/span&gt; &lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;alias&lt;/span&gt; d=&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;ls -ldF&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;

&lt;span class="pl-k"&gt;~&lt;/span&gt; &lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;cd&lt;/span&gt; &lt;span class="pl-k"&gt;~&lt;/span&gt;/Downloads
&lt;span class="pl-k"&gt;~&lt;/span&gt;/Downloads &lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; d graalvm&lt;span class="pl-k"&gt;*&lt;/span&gt;
-rw-r--r--@ 1 r634165  RBSWA&lt;span class="pl-cce"&gt;\D&lt;/span&gt;omain Users  349548861 Nov  6 13:39 graalvm-ce-darwin-amd64-19.2.1.tar.gz

&lt;span class="pl-k"&gt;~&lt;/span&gt;/Downloads &lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; mkdir -p tmp&lt;span class="pl-k"&gt;;&lt;/span&gt; &lt;span class="pl-c1"&gt;cd&lt;/span&gt; tmp
&lt;span class="pl-k"&gt;~&lt;/span&gt;/Downloads/tmp &lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; ls -al
total 0
drwxr-xr-x   2 r634165  RBSWA&lt;span class="pl-cce"&gt;\D&lt;/span&gt;omain Users   64 Nov  6 13:42 ./
drwx------+ 16 r634165  RBSWA&lt;span class="pl-cce"&gt;\D&lt;/span&gt;omain Users  512 Nov  8 11:44 ../

&lt;span class="pl-k"&gt;~&lt;/span&gt;/Downloads/tmp &lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; tar -xf ../graalvm-ce-darwin-amd64-19.2.1.tar.gz
&lt;span class="pl-k"&gt;~&lt;/span&gt;/Downloads/tmp &lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; d &lt;span class="pl-k"&gt;*&lt;/span&gt;
drwxr-xr-x  3 r634165  RBSWA&lt;span class="pl-cce"&gt;\D&lt;/span&gt;omain Users  96 Nov  8 11:45 graalvm-ce-19.2.1/

&lt;span class="pl-k"&gt;~&lt;/span&gt;/Downloads/tmp &lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; sudo mkdir -p /opt
Password:

&lt;span class="pl-k"&gt;~&lt;/span&gt;/Downloads/tmp &lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; sudo mv graalvm-ce-19.2.1  /opt
&lt;span class="pl-k"&gt;~&lt;/span&gt;/Downloads/tmp &lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;cd&lt;/span&gt; /opt
/opt &lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; d graal&lt;span class="pl-k"&gt;*&lt;/span&gt;
drwxr-xr-x  3 r634165  RBSWA&lt;span class="pl-cce"&gt;\D&lt;/span&gt;omain Users  96 Nov  8 11:45 graalvm-ce-19.2.1/

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; I like to create a symbolic link so our ~/.bashrc file doesn't need to change when we upgrade graalvm versions&lt;/span&gt;
/opt &lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; sudo ln -s graalvm-ce-19.2.1 graalvm

&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; d /opt/graal&lt;span class="pl-k"&gt;*&lt;/span&gt;
lrwxr-xr-x  1 root     wheel               17 Nov  8 09:56 /opt/graalvm@ -&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; graalvm-ce-19.2.1
drwxr-xr-x  3 r634165  RBSWA&lt;span class="pl-cce"&gt;\D&lt;/span&gt;omain Users  96 Nov  6 13:42 /opt/graalvm-ce-19.2.1/&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h3 id="user-content-configure-your-environment"&gt;&lt;a id="user-content-configure-your-environment" class="anchor" aria-hidden="true" href="#configure-your-environment"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Configure your environment&lt;/h3&gt;
&lt;div&gt;
&lt;p&gt;I have the following basic setup in &lt;code&gt;~/.bashrc&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Utility functions to ease PATH-building syntax&lt;/span&gt;
&lt;span class="pl-k"&gt;function&lt;/span&gt; &lt;span class="pl-en"&gt;path_prepend()&lt;/span&gt; {
    &lt;span class="pl-k"&gt;local&lt;/span&gt; path_search_dir=&lt;span class="pl-smi"&gt;$1&lt;/span&gt;
    &lt;span class="pl-k"&gt;export&lt;/span&gt; PATH=&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-smi"&gt;${path_search_dir}&lt;/span&gt;:&lt;span class="pl-smi"&gt;${PATH}&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
}
&lt;span class="pl-k"&gt;function&lt;/span&gt; &lt;span class="pl-en"&gt;path_append()&lt;/span&gt; {
    &lt;span class="pl-k"&gt;local&lt;/span&gt; path_search_dir=&lt;span class="pl-smi"&gt;$1&lt;/span&gt;
    &lt;span class="pl-k"&gt;export&lt;/span&gt; PATH=&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-smi"&gt;${PATH}&lt;/span&gt;:&lt;span class="pl-smi"&gt;${path_search_dir}&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Basic PATH&lt;/span&gt;
&lt;span class="pl-k"&gt;export&lt;/span&gt; PATH=.
    path_append &lt;span class="pl-smi"&gt;${HOME}&lt;/span&gt;/bin
    path_append &lt;span class="pl-smi"&gt;${HOME}&lt;/span&gt;/opt/bin
    path_append /opt/bin
    path_append /usr/local/bin
    path_append /usr/bin
    path_append /bin

&lt;span class="pl-k"&gt;function&lt;/span&gt; &lt;span class="pl-en"&gt;graalvm()&lt;/span&gt; {
  &lt;span class="pl-k"&gt;export&lt;/span&gt; JAVA_HOME=/opt/graalvm/Contents/Home
  path_prepend &lt;span class="pl-smi"&gt;${JAVA_HOME}&lt;/span&gt;/bin
  java -version
}
&lt;span class="pl-k"&gt;function&lt;/span&gt; &lt;span class="pl-en"&gt;java13()&lt;/span&gt; {
  &lt;span class="pl-k"&gt;export&lt;/span&gt; JAVA_HOME=&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;$(&lt;/span&gt;/usr/libexec/java_home -v 13&lt;span class="pl-pds"&gt;)&lt;/span&gt;&lt;/span&gt;  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Mac OSX java trick&lt;/span&gt;
  path_prepend &lt;span class="pl-smi"&gt;${JAVA_HOME}&lt;/span&gt;/bin
  java -version
}

java13 &lt;span class="pl-k"&gt;&amp;gt;&amp;amp;&lt;/span&gt; /dev/null  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; set java13 to be default&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Verify you can switch your environment from the default Java (here, jdk13) to GraalVM’s version of OpenJDK-8:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;~&lt;/span&gt;/expr/graalvm &lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; java -version    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; when login, we were using jdk13&lt;/span&gt;
java version &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;13&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; 2019-09-17
Java(TM) SE Runtime Environment (build 13+33)
Java HotSpot(TM) 64-Bit Server VM (build 13+33, mixed mode, sharing)

&lt;span class="pl-k"&gt;~&lt;/span&gt;/expr/graalvm &lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; graalvm          &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; now, switch to GraalVM (jdk8)&lt;/span&gt;
openjdk version &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;1.8.0_232&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
OpenJDK Runtime Environment (build 1.8.0_232-20191009173705.graal.jdk8u-src-tar-gz-b07)
OpenJDK 64-Bit GraalVM CE 19.2.1 (build 25.232-b07-jvmci-19.2-b03, mixed mode)&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h2 id="user-content-run-hello-world-normally"&gt;&lt;a id="user-content-run-hello-world-normally" class="anchor" aria-hidden="true" href="#run-hello-world-normally"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Run hello-world normally&lt;/h2&gt;
&lt;div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;~&lt;/span&gt;/expr/graalvm &lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-k"&gt;time&lt;/span&gt; lein &lt;span class="pl-k"&gt;do&lt;/span&gt; clean, run
Hello, World&lt;span class="pl-k"&gt;!&lt;/span&gt;
Goodbye...
lein &lt;span class="pl-k"&gt;do&lt;/span&gt; clean, run  9.92s user 0.84s system 225% cpu 4.780 total&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h2 id="user-content-create-the-uberjar-and-run-it"&gt;&lt;a id="user-content-create-the-uberjar-and-run-it" class="anchor" aria-hidden="true" href="#create-the-uberjar-and-run-it"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Create the uberjar and run it&lt;/h2&gt;
&lt;div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;~&lt;/span&gt;/expr/graalvm &lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-k"&gt;time&lt;/span&gt; lein uberjar
Compiling hello-world.core
Created /Users/r634165/expr/graalvm/target/hello-world-0.1.0-SNAPSHOT.jar
Created /Users/r634165/expr/graalvm/target/hello-world-0.1.0-SNAPSHOT-standalone.jar
lein uberjar  11.21s user 2.71s system 182% cpu 7.626 total

&lt;span class="pl-k"&gt;~&lt;/span&gt;/expr/graalvm &lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-k"&gt;time&lt;/span&gt; java -jar target/hello-world-0.1.0-SNAPSHOT-standalone.jar
Hello, World&lt;span class="pl-k"&gt;!&lt;/span&gt;
Goodbye...
java -jar target/hello-world-0.1.0-SNAPSHOT-standalone.jar  2.67s user 0.26s system 226% cpu 1.297 total&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;So, it took 7.6 sec to compile and package the uberjar, and 1.3 seconds to run the uberjar.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h2 id="user-content-create-the-native-executable-and-run-it"&gt;&lt;a id="user-content-create-the-native-executable-and-run-it" class="anchor" aria-hidden="true" href="#create-the-native-executable-and-run-it"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Create the native executable and run it&lt;/h2&gt;
&lt;div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;~&lt;/span&gt;/expr/graalvm &lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; lein native
Build on Server(pid: 59523, port: 58080)&lt;span class="pl-k"&gt;*&lt;/span&gt;
[./target/hello-world:59523]    classlist:   2,895.07 ms
[./target/hello-world:59523]        (cap):   1,955.86 ms
[./target/hello-world:59523]        setup:   3,245.68 ms
[./target/hello-world:59523]   (typeflow):   4,537.50 ms
[./target/hello-world:59523]    (objects):   2,574.54 ms
[./target/hello-world:59523]   (features):     276.47 ms
[./target/hello-world:59523]     analysis:   7,572.88 ms
[./target/hello-world:59523]     (clinit):     146.73 ms
[./target/hello-world:59523]     universe:     436.47 ms
[./target/hello-world:59523]      (parse):     528.53 ms
[./target/hello-world:59523]     (inline):   1,580.97 ms
[./target/hello-world:59523]    (compile):   5,630.39 ms
[./target/hello-world:59523]      compile:   8,228.69 ms
[./target/hello-world:59523]        image:     875.32 ms
[./target/hello-world:59523]        write:     558.38 ms
[./target/hello-world:59523]      [total]:  24,045.25 ms&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;The GraalVM compiler is similar to the Google Closure compiler used to make GMail, etc super-compact &amp;amp; lightning-fast to
download &amp;amp; run over the internet.  Besides compiling the source code, it performs a static analysis to eliminate all
unreachable code, in addition to normal optimization steps.  This results in a minimal executable size, and the
fast startup we expect from a statically linked executable (for example, the &lt;code&gt;ls&lt;/code&gt; command).&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;~&lt;/span&gt;/expr/graalvm &lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-k"&gt;time&lt;/span&gt; target/hello-world
Hello, World&lt;span class="pl-k"&gt;!&lt;/span&gt;
Goodbye...
target/hello-world  0.00s user 0.00s system 52% cpu 0.009 total&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;&lt;strong&gt;Yes, you read that right!&lt;/strong&gt;  Instead of taking 1.3 seconds to run the uberjar, we needed less than 0.01 seconds
to run the native executable, for &lt;strong&gt;a speedup of over 130x&lt;/strong&gt; !&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Just for fun, let’s compare to the &lt;code&gt;ls&lt;/code&gt; command:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;~&lt;/span&gt;/expr/graalvm &lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-k"&gt;time&lt;/span&gt; ls -ldF &lt;span class="pl-k"&gt;*&lt;/span&gt;
-rw-r--r--  1 r634165  RBSWA&lt;span class="pl-cce"&gt;\D&lt;/span&gt;omain Users  14199 Nov  6 13:51 LICENSE
-rw-r--r--  1 r634165  RBSWA&lt;span class="pl-cce"&gt;\D&lt;/span&gt;omain Users   7126 Nov  8 12:47 README.adoc
drwxr-xr-x  3 r634165  RBSWA&lt;span class="pl-cce"&gt;\D&lt;/span&gt;omain Users     96 Nov  8 10:48 doc/
-rw-r--r--  1 r634165  RBSWA&lt;span class="pl-cce"&gt;\D&lt;/span&gt;omain Users   1528 Nov  7 10:57 hello-world.iml
-rw-r--r--  1 r634165  RBSWA&lt;span class="pl-cce"&gt;\D&lt;/span&gt;omain Users    657 Nov  7 10:56 project.clj
drwxr-xr-x  2 r634165  RBSWA&lt;span class="pl-cce"&gt;\D&lt;/span&gt;omain Users     64 Nov  6 13:51 resources/
drwxr-xr-x  3 r634165  RBSWA&lt;span class="pl-cce"&gt;\D&lt;/span&gt;omain Users     96 Nov  6 13:51 src/
drwxr-xr-x  7 r634165  RBSWA&lt;span class="pl-cce"&gt;\D&lt;/span&gt;omain Users    224 Nov  8 12:06 target/

ls -ldF &lt;span class="pl-k"&gt;*&lt;/span&gt;  0.00s user 0.00s system 61% cpu 0.010 total&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;This command required 0.01 seconds, and it is apparent that Clojure+GraalVM has
achieved parity with command-line utilities written in C.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h2 id="user-content-dont-forget-about-memory-usage"&gt;&lt;a id="user-content-dont-forget-about-memory-usage" class="anchor" aria-hidden="true" href="#dont-forget-about-memory-usage"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Don’t forget about memory usage!&lt;/h2&gt;
&lt;div&gt;
&lt;div&gt;
&lt;p&gt;Note that using &lt;code&gt;time&lt;/code&gt; as above resolves to a shell built-in command.  We can get more information
from the standard Unix version of &lt;code&gt;time&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; JVM+UberJar&lt;/span&gt;
&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; /usr/bin/time -l  java -jar target/hello-world-0.1.0-SNAPSHOT-standalone.jar
Hello, World&lt;span class="pl-k"&gt;!&lt;/span&gt;
Goodbye...

        1.20 real         2.47 user         0.24 sys
 409346048  maximum resident &lt;span class="pl-c1"&gt;set&lt;/span&gt; size
    100469  page reclaims
      3569  involuntary context switches


&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Static Executable&lt;/span&gt;
&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; /usr/bin/time -l  target/hello-world
Hello, World&lt;span class="pl-k"&gt;!&lt;/span&gt;
Goodbye...
        0.00 real         0.00 user         0.00 sys
   2560000  maximum resident &lt;span class="pl-c1"&gt;set&lt;/span&gt; size
       657  page reclaims
         4  involuntary context switches&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;So we see that the maximem RSS memory requirement was reduced from 409 Mb to 2 Mb.  &lt;strong&gt;Yes, an
improvement over 200x!&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h2 id="user-content-uses-for-clojuregraalvm"&gt;&lt;a id="user-content-uses-for-clojuregraalvm" class="anchor" aria-hidden="true" href="#uses-for-clojuregraalvm"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Uses for Clojure+GraalVM&lt;/h2&gt;
&lt;div&gt;
&lt;div&gt;
&lt;p&gt;Anywhere you want to use your favorite language in a constrained environment, where startup speed
and/or memory usage is a concern.  Obvious use-cases include command-line utilities and cloud
serverless functions such as AWS Lambda.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h2 id="user-content-see-also"&gt;&lt;a id="user-content-see-also" class="anchor" aria-hidden="true" href="#see-also"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;See also:&lt;/h2&gt;
&lt;div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://youtu.be/topKYJgv6qA" rel="nofollow"&gt;Nice ClojureD video&lt;/a&gt; by Jan Stepien&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Bruno Bonacci’s &lt;a href="https://github.com/BrunoBonacci/graalvm-clojure/blob/master/doc/clojure-graalvm-native-binary.md"&gt;GraalVM Clojure Demo&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The GraalVM Project &lt;a href="https://www.graalvm.org/" rel="nofollow"&gt;Homepage&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GraalVM &lt;a href="https://github.com/oracle/graal/releases"&gt;Downloads&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h2 id="user-content-license"&gt;&lt;a id="user-content-license" class="anchor" aria-hidden="true" href="#license"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;License&lt;/h2&gt;
&lt;div&gt;
&lt;div&gt;
&lt;p&gt;Copyright © 2019 Alan Thompson&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;This program and the accompanying materials are made available under the
terms of the Eclipse Public License 2.0 which is available at
&lt;a href="http://www.eclipse.org/legal/epl-2.0" rel="nofollow"&gt;http://www.eclipse.org/legal/epl-2.0&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;This Source Code may also be made available under the following Secondary
Licenses when the conditions for such availability set forth in the Eclipse
Public License, v. 2.0 are satisfied: GNU General Public License as published by
the Free Software Foundation, either version 2 of the License, or (at your
option) any later version, with the GNU Classpath Exception which is available
at &lt;a href="https://www.gnu.org/software/classpath/license.html" rel="nofollow"&gt;https://www.gnu.org/software/classpath/license.html&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/article&gt;&lt;/div&gt;</description><author>cloojure</author><guid isPermaLink="false">https://github.com/cloojure/graalvm</guid><pubDate>Tue, 12 Nov 2019 00:05:00 GMT</pubDate></item><item><title>seancorfield/next-jdbc #6 in Clojure, Today</title><link>https://github.com/seancorfield/next-jdbc</link><description>&lt;p&gt;&lt;i&gt;A new low-level Clojure wrapper for JDBC-based access to databases.&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-nextjdbc-" class="anchor" aria-hidden="true" href="#nextjdbc-"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;next.jdbc &lt;a href="https://circleci.com/gh/seancorfield/next-jdbc/tree/master" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/9c47bd5d0524b42173a7f4056f921ce2f6c0c8bc/68747470733a2f2f636972636c6563692e636f6d2f67682f7365616e636f726669656c642f6e6578742d6a6462632f747265652f6d61737465722e7376673f7374796c653d737667" alt="CircleCI" data-canonical-src="https://circleci.com/gh/seancorfield/next-jdbc/tree/master.svg?style=svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;The next generation of &lt;code&gt;clojure.java.jdbc&lt;/code&gt;: a new low-level Clojure wrapper for JDBC-based access to databases.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-tldr" class="anchor" aria-hidden="true" href="#tldr"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TL;DR&lt;/h2&gt;
&lt;p&gt;The latest versions on Clojars and on cljdoc:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://clojars.org/seancorfield/next.jdbc" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/cc5dbab4ecfd463a47191a19718468f15b256a6b/68747470733a2f2f636c6f6a6172732e6f72672f7365616e636f726669656c642f6e6578742e6a6462632f6c61746573742d76657273696f6e2e737667" alt="Clojars Project" data-canonical-src="https://clojars.org/seancorfield/next.jdbc/latest-version.svg" style="max-width:100%;"&gt;&lt;/a&gt; &lt;a href="https://cljdoc.org/d/seancorfield/next.jdbc/CURRENT" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/b418da46b109d5b65264595b3c26d53583598c5f/68747470733a2f2f636c6a646f632e6f72672f62616467652f7365616e636f726669656c642f6e6578742e6a646263" alt="cljdoc badge" data-canonical-src="https://cljdoc.org/badge/seancorfield/next.jdbc" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This documentation is for the 1.0.9 release -- &lt;a href="CHANGELOG.md"&gt;see the CHANGELOG&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/doc/getting-started.md"&gt;Getting Started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/doc/migration-from-clojure-java-jdbc.md"&gt;Migrating from &lt;code&gt;clojure.java.jdbc&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Feedback via &lt;a href="https://github.com/seancorfield/next-jdbc/issues"&gt;issues&lt;/a&gt; or in the &lt;a href="https://clojurians.slack.com/messages/C1Q164V29/details/" rel="nofollow"&gt;&lt;code&gt;#sql&lt;/code&gt; channel on the Clojurians Slack&lt;/a&gt; or the &lt;a href="https://clojurians.zulipchat.com/#narrow/stream/152063-sql" rel="nofollow"&gt;&lt;code&gt;#sql&lt;/code&gt; stream on the Clojurians Zulip&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-motivation" class="anchor" aria-hidden="true" href="#motivation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Motivation&lt;/h2&gt;
&lt;p&gt;Why another JDBC library? Why a different API from &lt;code&gt;clojure.java.jdbc&lt;/code&gt;?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Performance: there's a surprising amount of overhead in how &lt;code&gt;ResultSet&lt;/code&gt; objects are converted to sequences of hash maps in &lt;code&gt;clojure.java.jdbc&lt;/code&gt; – which can be really noticeable for large result sets – so I wanted a better way to handle that. There's also quite a bit of overhead and complexity in all the conditional logic and parsing that is associated with &lt;code&gt;db-spec&lt;/code&gt;-as-hash-map.&lt;/li&gt;
&lt;li&gt;A more modern API, based on using qualified keywords and transducers etc: &lt;code&gt;:qualifier&lt;/code&gt; and &lt;code&gt;reducible-query&lt;/code&gt; in recent &lt;code&gt;clojure.java.jdbc&lt;/code&gt; versions were steps toward that but there's a lot of "legacy" API in the library and I want to present a more focused, more streamlined API so folks naturally use the &lt;code&gt;IReduceInit&lt;/code&gt; / transducer approach from day one and benefit from qualified keywords.&lt;/li&gt;
&lt;li&gt;Simplicity: &lt;code&gt;clojure.java.jdbc&lt;/code&gt; uses a variety of ways to execute SQL which can lead to inconsistencies and surprises – &lt;code&gt;query&lt;/code&gt;, &lt;code&gt;execute!&lt;/code&gt;, and &lt;code&gt;db-do-commands&lt;/code&gt; are all different ways to execute different types of SQL statement so you have to remember which is which and you often have to watch out for restrictions in the underlying JDBC API.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Those were my three primary drivers. In addition, the &lt;code&gt;db-spec&lt;/code&gt;-as-hash-map approach in &lt;code&gt;clojure.java.jdbc&lt;/code&gt; has caused a lot of frustration and confusion in the past, especially with the wide range of conflicting options that are supported. &lt;code&gt;next.jdbc&lt;/code&gt; is heavily protocol-based so it's easier to mix'n'match how you use it with direct Java JDBC code (and the protocol-based approach contributes to the improved performance overall). There's a much clearer path of &lt;code&gt;db-spec&lt;/code&gt; -&amp;gt; &lt;code&gt;DataSource&lt;/code&gt; -&amp;gt; &lt;code&gt;Connection&lt;/code&gt; now, which should steer people toward more connection reuse and better performing apps.&lt;/p&gt;
&lt;p&gt;I also wanted &lt;code&gt;datafy&lt;/code&gt;/&lt;code&gt;nav&lt;/code&gt; support baked right in (it was added to &lt;code&gt;clojure.java.jdbc&lt;/code&gt; back in December 2018 as an undocumented, experimental API in a separate namespace). It is the default behavior for &lt;code&gt;execute!&lt;/code&gt; and &lt;code&gt;execute-one!&lt;/code&gt;. The protocol-based function &lt;code&gt;next.jdbc.result-set/datafiable-row&lt;/code&gt; can be used with &lt;code&gt;plan&lt;/code&gt; if you need to add &lt;code&gt;datafy&lt;/code&gt;/&lt;code&gt;nav&lt;/code&gt; support to rows you are creating in your reduction.&lt;/p&gt;
&lt;p&gt;As &lt;code&gt;next.jdbc&lt;/code&gt; moved from alpha to beta, the last breaking change was made (renaming &lt;code&gt;reducible!&lt;/code&gt; to &lt;code&gt;plan&lt;/code&gt;) and the API should be considered stable. Only accretive and fixative changes will be made from now on.&lt;/p&gt;
&lt;p&gt;After a month of alpha builds being available for testing, the first beta build was released on May 24th, 2019. A release candidate followed on June 4th and the "gold" (1.0.0) release was on June 12th. In addition to the small, core API in &lt;code&gt;next.jdbc&lt;/code&gt;, there are "syntactic sugar" SQL functions (&lt;code&gt;insert!&lt;/code&gt;, &lt;code&gt;query&lt;/code&gt;, &lt;code&gt;update!&lt;/code&gt;, and &lt;code&gt;delete!&lt;/code&gt;) available in &lt;code&gt;next.jdbc.sql&lt;/code&gt; that are similar to the main API in &lt;code&gt;clojure.java.jdbc&lt;/code&gt;. See &lt;a href="/doc/migration-from-clojure-java-jdbc.md"&gt;Migrating from &lt;code&gt;clojure.java.jdbc&lt;/code&gt;&lt;/a&gt; for more detail about the differences.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Usage&lt;/h2&gt;
&lt;p&gt;The primary concepts behind &lt;code&gt;next.jdbc&lt;/code&gt; are that you start by producing a &lt;code&gt;javax.sql.DataSource&lt;/code&gt;. You can create a pooled datasource object using your preferred library (c3p0, hikari-cp, etc). You can use &lt;code&gt;next.jdbc&lt;/code&gt;'s &lt;code&gt;get-datasource&lt;/code&gt; function to create a &lt;code&gt;DataSource&lt;/code&gt; from a &lt;code&gt;db-spec&lt;/code&gt; hash map or from a JDBC URL (string). The underlying protocol, &lt;code&gt;Sourceable&lt;/code&gt;, can be extended to allow more things to be turned into a &lt;code&gt;DataSource&lt;/code&gt; (and can be extended via metadata on an object as well as via types).&lt;/p&gt;
&lt;p&gt;From a &lt;code&gt;DataSource&lt;/code&gt;, either you or &lt;code&gt;next.jdbc&lt;/code&gt; can create a &lt;code&gt;java.sql.Connection&lt;/code&gt; via the &lt;code&gt;get-connection&lt;/code&gt; function. You can specify an options hash map to &lt;code&gt;get-connection&lt;/code&gt; to modify the connection that is created: &lt;code&gt;:read-only&lt;/code&gt;, &lt;code&gt;:auto-commit&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The primary SQL execution API in &lt;code&gt;next.jdbc&lt;/code&gt; is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;plan&lt;/code&gt; -- yields an &lt;code&gt;IReduceInit&lt;/code&gt; that, when reduced, executes the SQL statement and then reduces over the &lt;code&gt;ResultSet&lt;/code&gt; with as little overhead as possible.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;execute!&lt;/code&gt; -- executes the SQL statement and produces a vector of realized hash maps, that use qualified keywords for the column names, of the form &lt;code&gt;:&amp;lt;table&amp;gt;/&amp;lt;column&amp;gt;&lt;/code&gt;. If you join across multiple tables, the qualified keywords will reflect the originating tables for each of the columns. If the SQL produces named values that do not come from an associated table, a simple, unqualified keyword will be used. The realized hash maps returned by &lt;code&gt;execute!&lt;/code&gt; are &lt;code&gt;Datafiable&lt;/code&gt; and thus &lt;code&gt;Navigable&lt;/code&gt; (see Clojure 1.10's &lt;code&gt;datafy&lt;/code&gt; and &lt;code&gt;nav&lt;/code&gt; functions, and tools like Cognitect's REBL). Alternatively, you can specify &lt;code&gt;{:builder-fn rs/as-arrays}&lt;/code&gt; and produce a vector with column names followed by vectors of row values. &lt;code&gt;rs/as-maps&lt;/code&gt; is the default for &lt;code&gt;:builder-fn&lt;/code&gt; but there are also &lt;code&gt;rs/as-unqualified-maps&lt;/code&gt; and &lt;code&gt;rs/as-unqualified-arrays&lt;/code&gt; if you want unqualified &lt;code&gt;:&amp;lt;column&amp;gt;&lt;/code&gt; column names (and there are also lower-case variants of all of these).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;execute-one!&lt;/code&gt; -- executes the SQL or DDL statement and produces a single realized hash map. The realized hash map returned by &lt;code&gt;execute-one!&lt;/code&gt; is &lt;code&gt;Datafiable&lt;/code&gt; and thus &lt;code&gt;Navigable&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In addition, there are API functions to create &lt;code&gt;PreparedStatement&lt;/code&gt;s (&lt;code&gt;prepare&lt;/code&gt;) from &lt;code&gt;Connection&lt;/code&gt;s, which can be passed to &lt;code&gt;plan&lt;/code&gt;, &lt;code&gt;execute!&lt;/code&gt;, or &lt;code&gt;execute-one!&lt;/code&gt;, and to run code inside a transaction (the &lt;code&gt;transact&lt;/code&gt; function and the &lt;code&gt;with-transaction&lt;/code&gt; macro).&lt;/p&gt;
&lt;p&gt;Since &lt;code&gt;next.jdbc&lt;/code&gt; uses raw Java JDBC types, you can use &lt;code&gt;with-open&lt;/code&gt; directly to reuse connections and ensure they are cleaned up correctly:&lt;/p&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;  (&lt;span class="pl-k"&gt;let&lt;/span&gt; [my-datasource (&lt;span class="pl-en"&gt;jdbc/get-datasource&lt;/span&gt; {&lt;span class="pl-c1"&gt;:dbtype&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;...&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;:dbname&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;...&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; ...})]
    (&lt;span class="pl-en"&gt;with-open&lt;/span&gt; [connection (&lt;span class="pl-en"&gt;jdbc/get-connection&lt;/span&gt; my-datasource)]
      (&lt;span class="pl-en"&gt;jdbc/execute!&lt;/span&gt; connection [...])
      (&lt;span class="pl-en"&gt;reduce&lt;/span&gt; my-fn init-value (&lt;span class="pl-en"&gt;jdbc/plan&lt;/span&gt; connection [...]))
      (&lt;span class="pl-en"&gt;jdbc/execute!&lt;/span&gt; connection [...])))&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-usage-scenarios" class="anchor" aria-hidden="true" href="#usage-scenarios"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Usage scenarios&lt;/h3&gt;
&lt;p&gt;There are three intended usage scenarios that have driven the design of the API:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Execute a SQL statement and process it in a single eager operation, which may allow for the results to be streamed from the database (how to persuade JDBC to do that is database-specific!), and which cleans up resources before returning the result -- even if the reduction is short-circuited via &lt;code&gt;reduced&lt;/code&gt;. This usage is supported by &lt;code&gt;plan&lt;/code&gt;. This is likely to be the fastest approach and should be the first option you consider for SQL queries.&lt;/li&gt;
&lt;li&gt;Execute a SQL or DDL statement to obtain a single, fully-realized, &lt;code&gt;Datafiable&lt;/code&gt; hash map that represents either the first row from a &lt;code&gt;ResultSet&lt;/code&gt;, the first generated keys result (again, from a &lt;code&gt;ResultSet&lt;/code&gt;), or the first result where neither of those are available (&lt;code&gt;next.jdbc&lt;/code&gt; yields &lt;code&gt;{:next.jdbc/update-count N}&lt;/code&gt; when it can only return an update count). This usage is supported by &lt;code&gt;execute-one!&lt;/code&gt;. This is probably your best choice for most non-query operations.&lt;/li&gt;
&lt;li&gt;Execute a SQL statement to obtain a fully-realized, &lt;code&gt;Datafiable&lt;/code&gt; result set -- a vector of hash maps. This usage is supported by &lt;code&gt;execute!&lt;/code&gt;. You can also produce a vector of column names/row values (&lt;code&gt;next.jdbc.result-set/as-arrays&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In addition, convenience functions -- "syntactic sugar" -- are provided to insert rows, run queries, update rows, and delete rows, using the same names as in &lt;code&gt;clojure.java.jdbc&lt;/code&gt;. These are in &lt;code&gt;next.jdbc.sql&lt;/code&gt; since they involve SQL creation -- they are not considered part of the core API.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-more-detailed-documentation" class="anchor" aria-hidden="true" href="#more-detailed-documentation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;More Detailed Documentation&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/doc/getting-started.md"&gt;Getting Started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/doc/friendly-sql-functions.md"&gt;Friendly SQL Functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/doc/result-set-builders.md"&gt;Result Set Builders&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/doc/prepared-statements.md"&gt;Prepared Statements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/doc/transactions.md"&gt;Transactions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/doc/all-the-options.md"&gt;All The Options&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/doc/datafy-nav-and-schema.md"&gt;&lt;code&gt;datafy&lt;/code&gt;, &lt;code&gt;nav&lt;/code&gt;, and &lt;code&gt;:schema&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/doc/migration-from-clojure-java-jdbc.md"&gt;Migration from &lt;code&gt;clojure.java.jdbc&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-license" class="anchor" aria-hidden="true" href="#license"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;License&lt;/h2&gt;
&lt;p&gt;Copyright © 2018-2019 Sean Corfield&lt;/p&gt;
&lt;p&gt;Distributed under the Eclipse Public License version 1.0.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>seancorfield</author><guid isPermaLink="false">https://github.com/seancorfield/next-jdbc</guid><pubDate>Tue, 12 Nov 2019 00:06:00 GMT</pubDate></item></channel></rss>