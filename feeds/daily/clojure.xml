<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>GitHub Trending: Clojure, Today</title><link>https://github.com/trending/clojure?since=daily</link><description>The top repositories on GitHub for clojure, measured daily</description><pubDate>Sun, 05 Jan 2020 01:06:54 GMT</pubDate><lastBuildDate>Sun, 05 Jan 2020 01:06:54 GMT</lastBuildDate><generator>PyRSS2Gen-1.1.0</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><ttl>720</ttl><item><title>borkdude/clj-kondo #1 in Clojure, Today</title><link>https://github.com/borkdude/clj-kondo</link><description>&lt;p&gt;&lt;i&gt;A linter for Clojure code that sparks joy.&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="logo/logo-300dpi.png"&gt;&lt;img src="logo/logo-300dpi.png" width="400px" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://circleci.com/gh/borkdude/clj-kondo/tree/master" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e478e0d6d427b6bbd08b50acfbf3314aaef80ab5/68747470733a2f2f636972636c6563692e636f6d2f67682f626f726b647564652f636c6a2d6b6f6e646f2f747265652f6d61737465722e7376673f7374796c653d736869656c64" alt="CircleCI" data-canonical-src="https://circleci.com/gh/borkdude/clj-kondo/tree/master.svg?style=shield" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://ci.appveyor.com/project/borkdude/clj-kondo/branch/master" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/3c5ad219023a16716381f6cee47529e7c85765c2/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f336a64726f376d7531376e76337262332f6272616e63682f6d61737465723f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/3jdro7mu17nv3rb3/branch/master?svg=true" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://clojars.org/clj-kondo" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/c17f11be4a26b1d39054e8817d2a70f3f111d08c/68747470733a2f2f696d672e736869656c64732e696f2f636c6f6a6172732f762f636c6a2d6b6f6e646f2e737667" alt="Clojars Project" data-canonical-src="https://img.shields.io/clojars/v/clj-kondo.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://cljdoc.org/d/clj-kondo/clj-kondo/CURRENT" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/a5b39521007a6599d4a294c424c2a6a2c1016e73/68747470733a2f2f636c6a646f632e6f72672f62616467652f636c6a2d6b6f6e646f2f636c6a2d6b6f6e646f" alt="cljdoc badge" data-canonical-src="https://cljdoc.org/badge/clj-kondo/clj-kondo" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://clojurians.slack.com/messages/CHY97NXE2" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/5d32eacbaaf4d06e17885b5da976a2d0cb18238e/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f736c61636b2d6a6f696e5f636861742d627269676874677265656e2e737667" alt="project chat" data-canonical-src="https://img.shields.io/badge/slack-join_chat-brightgreen.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A linter for Clojure code that sparks joy.&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="screenshots/demo.png"&gt;&lt;img src="screenshots/demo.png" width="50%" align="right" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
    &lt;p lang="en" dir="ltr"&gt;Thanks a lot for clj-kondo. It is like a companion for me. It has made clojure fun again.&lt;/p&gt;
    â€”
    &lt;a href="https://github.com/geraldodev"&gt;@geraldodev&lt;/a&gt; on Clojurians Slack
&lt;/blockquote&gt;
&lt;h2&gt;&lt;a id="user-content-rationale" class="anchor" aria-hidden="true" href="#rationale"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Rationale&lt;/h2&gt;
&lt;p&gt;Clj-kondo performs static analysis on Clojure, ClojureScript and EDN, without the need of a running REPL. It informs you about potential errors while you are typing.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-features" class="anchor" aria-hidden="true" href="#features"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Features&lt;/h2&gt;
&lt;p&gt;Clj-kondo detects:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;inline &lt;code&gt;def&lt;/code&gt; expressions&lt;/li&gt;
&lt;li&gt;redundant &lt;code&gt;do&lt;/code&gt; and &lt;code&gt;let&lt;/code&gt; wrappings&lt;/li&gt;
&lt;li&gt;arity errors:
&lt;ul&gt;
&lt;li&gt;within the same namespace and across namespaces&lt;/li&gt;
&lt;li&gt;of static Java method calls&lt;/li&gt;
&lt;li&gt;of local &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;letfn&lt;/code&gt; binding calls&lt;/li&gt;
&lt;li&gt;of recursive calls (including &lt;code&gt;recur&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;unused private vars&lt;/li&gt;
&lt;li&gt;private and deprecated var usage&lt;/li&gt;
&lt;li&gt;required but unused namespaces&lt;/li&gt;
&lt;li&gt;referred but unused vars&lt;/li&gt;
&lt;li&gt;duplicate requires&lt;/li&gt;
&lt;li&gt;unused function arguments and let bindings&lt;/li&gt;
&lt;li&gt;unused imports&lt;/li&gt;
&lt;li&gt;redefined vars&lt;/li&gt;
&lt;li&gt;unresolved symbols and namespaces&lt;/li&gt;
&lt;li&gt;misplaced docstrings&lt;/li&gt;
&lt;li&gt;duplicate map keys and set elements&lt;/li&gt;
&lt;li&gt;missing map keys&lt;/li&gt;
&lt;li&gt;invalid number of forms in binding vectors&lt;/li&gt;
&lt;li&gt;missing assertions in &lt;code&gt;clojure.test/deftest&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;alias consistency&lt;/li&gt;
&lt;li&gt;&lt;a href="doc/types.md"&gt;type checking&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Datalog syntax checking&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;before your REPL knows it.&lt;/p&gt;
&lt;p&gt;It suggests several style guide recommendations, such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;rules from Stuart Sierra's &lt;a href="https://stuartsierra.com/2016/clojure-how-to-ns.html" rel="nofollow"&gt;how to ns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;use &lt;code&gt;:else&lt;/code&gt; as the catch-all test expression in &lt;code&gt;cond&lt;/code&gt; (see &lt;a href="https://github.com/bbatsov/clojure-style-guide#else-keyword-in-cond"&gt;Clojure style guide&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;use &lt;code&gt;seq&lt;/code&gt; instead of &lt;code&gt;(not (empty? ,,,))&lt;/code&gt; (see &lt;a href="https://github.com/bbatsov/clojure-style-guide#nil-punning"&gt;Clojure style guide&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="screenshots/wrong-arity.png"&gt;&lt;img src="screenshots/wrong-arity.png" width="50%" align="right" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It has support for syntax of commonly used macros like
&lt;code&gt;clojure.core.async/alt!!&lt;/code&gt;, &lt;code&gt;schema.core/defn&lt;/code&gt; and &lt;code&gt;potemkin/import-vars&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;It provides &lt;a href="analysis"&gt;analysis data&lt;/a&gt; so you build your own custom linters.&lt;/p&gt;
&lt;p&gt;This linter is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;compatible with &lt;code&gt;.clj&lt;/code&gt;, &lt;code&gt;.cljs&lt;/code&gt;, &lt;code&gt;.cljc&lt;/code&gt; and &lt;code&gt;.edn&lt;/code&gt; files&lt;/li&gt;
&lt;li&gt;build tool and editor agnostic&lt;/li&gt;
&lt;li&gt;a static code analyzer&lt;/li&gt;
&lt;li&gt;compiled to native code using GraalVM&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Try clj-kondo at the &lt;a href="https://clj-kondo.michielborkent.nl" rel="nofollow"&gt;interactive playground&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="doc/install.md"&gt;Installation&lt;/a&gt;&lt;/h2&gt;
&lt;h2&gt;&lt;a id="user-content-running-on-the-jvm" class="anchor" aria-hidden="true" href="#running-on-the-jvm"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="doc/jvm.md"&gt;Running on the JVM&lt;/a&gt;&lt;/h2&gt;
&lt;h2&gt;&lt;a id="user-content-running-with-docker" class="anchor" aria-hidden="true" href="#running-with-docker"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="doc/docker.md"&gt;Running with Docker&lt;/a&gt;&lt;/h2&gt;
&lt;h2&gt;&lt;a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Usage&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-command-line" class="anchor" aria-hidden="true" href="#command-line"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Command line&lt;/h3&gt;
&lt;p&gt;Lint from stdin:&lt;/p&gt;
&lt;div class="highlight highlight-text-shell-session"&gt;&lt;pre&gt;$ &lt;span class="pl-s1"&gt;&lt;span class="pl-c1"&gt;echo&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;(def x (def x 1))&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;|&lt;/span&gt; clj-kondo --lint -&lt;/span&gt;
&lt;span class="pl-c1"&gt;&amp;lt;stdin&amp;gt;:1:8: warning: inline def&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Lint a file:&lt;/p&gt;
&lt;div class="highlight highlight-text-shell-session"&gt;&lt;pre&gt;$ &lt;span class="pl-s1"&gt;&lt;span class="pl-c1"&gt;echo&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;(def x (def x 1))&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; /tmp/foo.clj&lt;/span&gt;
$ &lt;span class="pl-s1"&gt;clj-kondo --lint /tmp/foo.clj&lt;/span&gt;
&lt;span class="pl-c1"&gt;/tmp/foo.clj:1:8: warning: inline def&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Lint a directory:&lt;/p&gt;
&lt;div class="highlight highlight-text-shell-session"&gt;&lt;pre&gt;$ &lt;span class="pl-s1"&gt;clj-kondo --lint src&lt;/span&gt;
&lt;span class="pl-c1"&gt;src/clj_kondo/test.cljs:7:1: warning: redundant do&lt;/span&gt;
&lt;span class="pl-c1"&gt;src/clj_kondo/calls.clj:291:3: error: Wrong number of args (1) passed to clj-kondo.calls/analyze-calls&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Lint a project classpath:&lt;/p&gt;
&lt;div class="highlight highlight-text-shell-session"&gt;&lt;pre&gt;$ &lt;span class="pl-s1"&gt;clj-kondo --lint &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;$(&lt;/span&gt;lein classpath&lt;span class="pl-pds"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-project-setup" class="anchor" aria-hidden="true" href="#project-setup"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Project setup&lt;/h2&gt;
&lt;p&gt;To detect lint errors across namespaces in your project, a cache is needed. To
let clj-kondo know where to create one, make a &lt;code&gt;.clj-kondo&lt;/code&gt; directory in the
root of your project, meaning on the same level as your &lt;code&gt;project.clj&lt;/code&gt;,
&lt;code&gt;deps.edn&lt;/code&gt; or &lt;code&gt;build.boot&lt;/code&gt;. A cache will be created inside of it when you run
&lt;code&gt;clj-kondo&lt;/code&gt;.  Before linting inside your editor, it is recommended to lint the
entire classpath to teach &lt;code&gt;clj-kondo&lt;/code&gt; about all the libraries you are using,
including Clojure and/or ClojureScript itself:&lt;/p&gt;
&lt;div class="highlight highlight-text-shell-session"&gt;&lt;pre&gt;$ &lt;span class="pl-s1"&gt;clj-kondo --lint &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&amp;lt;classpath&amp;gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Build tool specific ways to get a classpath:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;lein classpath&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boot with-cp -w -f -&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;clojure -Spath&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So for &lt;code&gt;lein&lt;/code&gt; the entire command would be:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ clj-kondo --lint "$(lein classpath)"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you are ready to lint single files using &lt;a href="doc/editor-integration.md"&gt;editor
integration&lt;/a&gt;. A simulation of what happens when you
edit a file in your editor:&lt;/p&gt;
&lt;div class="highlight highlight-text-shell-session"&gt;&lt;pre&gt;$ &lt;span class="pl-s1"&gt;&lt;span class="pl-c1"&gt;echo&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;(select-keys)&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;|&lt;/span&gt; clj-kondo --lang cljs --lint -&lt;/span&gt;
&lt;span class="pl-c1"&gt;&amp;lt;stdin&amp;gt;:1:1: error: Wrong number of args (0) passed to cljs.core/select-keys&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Since clj-kondo now knows about your version of ClojureScript via the cache,
it detects that the number of arguments you passed to &lt;code&gt;select-keys&lt;/code&gt; is
invalid. Each time you edit a file, the cache is incrementally updated, so
clj-kondo is informed about new functions you just wrote.&lt;/p&gt;
&lt;p&gt;If you want to use a different directory to read and write the cache, use the
&lt;code&gt;--cache-dir&lt;/code&gt; option. To disable the cache even if you have a &lt;code&gt;.clj-kondo&lt;/code&gt;
directory, use &lt;code&gt;--cache false&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-configuration" class="anchor" aria-hidden="true" href="#configuration"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="doc/config.md"&gt;Configuration&lt;/a&gt;&lt;/h2&gt;
&lt;h2&gt;&lt;a id="user-content-editor-integration" class="anchor" aria-hidden="true" href="#editor-integration"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="doc/editor-integration.md"&gt;Editor integration&lt;/a&gt;&lt;/h2&gt;
&lt;h2&gt;&lt;a id="user-content-exit-codes" class="anchor" aria-hidden="true" href="#exit-codes"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Exit codes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0&lt;/code&gt;: no errors or warnings were found&lt;/li&gt;
&lt;li&gt;&lt;code&gt;2&lt;/code&gt;: more than one warning was found&lt;/li&gt;
&lt;li&gt;&lt;code&gt;3&lt;/code&gt;: more than one error was found&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All other error codes indicate an unexpected error.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-ci-integration" class="anchor" aria-hidden="true" href="#ci-integration"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="doc/ci-integration.md"&gt;CI Integration&lt;/a&gt;&lt;/h2&gt;
&lt;h2&gt;&lt;a id="user-content-analysis-data" class="anchor" aria-hidden="true" href="#analysis-data"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="analysis"&gt;Analysis data&lt;/a&gt;&lt;/h2&gt;
&lt;h2&gt;&lt;a id="user-content-developer-documentation" class="anchor" aria-hidden="true" href="#developer-documentation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="doc/dev.md"&gt;Developer documentation&lt;/a&gt;&lt;/h2&gt;
&lt;h2&gt;&lt;a id="user-content-thanks-to" class="anchor" aria-hidden="true" href="#thanks-to"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Thanks to:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/candid82/joker"&gt;joker&lt;/a&gt; for inspiration&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/xsc/rewrite-clj"&gt;rewrite-clj&lt;/a&gt; for the Clojure parser code&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jonase/eastwood"&gt;eastwood&lt;/a&gt; for &lt;code&gt;var-info.edn&lt;/code&gt; and inspiration&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/borkdude/clj-kondo/graphs/contributors"&gt;contributors&lt;/a&gt; and
other users posting issues with bug reports and ideas&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/tonsky"&gt;Nikita Prokopov&lt;/a&gt; for the logo&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-support-this-project" class="anchor" aria-hidden="true" href="#support-this-project"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Support this project&lt;/h2&gt;
&lt;p&gt;Do you enjoy this project? Consider buying me a &lt;a href="https://ko-fi.com/borkdude" rel="nofollow"&gt;hot
beverage&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-license" class="anchor" aria-hidden="true" href="#license"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;License&lt;/h2&gt;
&lt;p&gt;Copyright Â© 2019 Michiel Borkent&lt;/p&gt;
&lt;p&gt;Distributed under the EPL License, same as Clojure. See LICENSE.&lt;/p&gt;
&lt;p&gt;The directory &lt;code&gt;inlined&lt;/code&gt; contains source from &lt;a href="https://github.com/clojure/tools.reader"&gt;&lt;code&gt;tools.reader&lt;/code&gt;&lt;/a&gt; which is licensed under the EPL license.&lt;/p&gt;
&lt;p&gt;The directory &lt;code&gt;parser&lt;/code&gt; contains modified source from &lt;a href="https://github.com/xsc/rewrite-clj"&gt;&lt;code&gt;rewrite-clj&lt;/code&gt;&lt;/a&gt; which is licensed under the MIT license.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>borkdude</author><guid isPermaLink="false">https://github.com/borkdude/clj-kondo</guid><pubDate>Sun, 05 Jan 2020 00:01:00 GMT</pubDate></item><item><title>adamtornhill/code-maat #2 in Clojure, Today</title><link>https://github.com/adamtornhill/code-maat</link><description>&lt;p&gt;&lt;i&gt;A command line tool to mine and analyze data from version-control systems&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;p&gt;&lt;a href="https://travis-ci.org/adamtornhill/code-maat" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/57aa34be42476fe7e7bd6845ac6b440f20dc6b9e/68747470733a2f2f7472617669732d63692e6f72672f6164616d746f726e68696c6c2f636f64652d6d6161742e706e67" alt="Build Status" data-canonical-src="https://travis-ci.org/adamtornhill/code-maat.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-code-maat" class="anchor" aria-hidden="true" href="#code-maat"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Code Maat&lt;/h1&gt;
&lt;p&gt;Code Maat is a command line tool used to mine and analyze data from version-control systems (VCS).&lt;/p&gt;
&lt;p&gt;Code Maat was developed to accompany the discussions in my books &lt;a href="https://pragprog.com/book/atcrime/your-code-as-a-crime-scene" rel="nofollow"&gt;Your Code as a Crime Scene&lt;/a&gt; and
&lt;a href="https://pragprog.com/book/atevol/software-design-x-rays" rel="nofollow"&gt;Software Design X-Rays&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Note that the analyses have evolved into &lt;a href="https://codescene.io/" rel="nofollow"&gt;CodeScene&lt;/a&gt;, which automates all the analyses found in Code Maat and several new ones.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://codescene.io/projects/6410/jobs/latest-successful/results" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/074a79d18d60333a0c8ee2c9a7ed95a4c41721c8/68747470733a2f2f636f64657363656e652e696f2f70726f6a656374732f363431302f7374617475732e737667" alt="" data-canonical-src="https://codescene.io/projects/6410/status.svg" style="max-width:100%;"&gt; Get more details at &lt;strong&gt;codescene.io&lt;/strong&gt;.&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-the-ideas-behind-code-maat" class="anchor" aria-hidden="true" href="#the-ideas-behind-code-maat"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;The ideas behind Code Maat&lt;/h2&gt;
&lt;p&gt;To understand large-scale software systems we need to look at their evolution. The history of our system provides us with data we cannot derive from a single snapshot of the source code. Instead VCS data blends technical, social and organizational information along a temporal axis that let us map out our interaction patterns in the code. Analyzing these patterns gives us early warnings on potential design issues and development bottlenecks, as well as suggesting new modularities based on actual interactions with the code. Addressing these issues saves costs, simplifies maintenance and let us evolve our systems in the direction of how we actually work with the code.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-about-the-name" class="anchor" aria-hidden="true" href="#about-the-name"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;About the name&lt;/h3&gt;
&lt;p&gt;Maat was a goddess in ancient Egyptian myth. She was the one who gave us order out of the initial chaos in the universe. Code Maat hopes to continue the work of Maat, albeit on a smaller basis, by highlighting code with chaotic development practices and suggest the directions of future refactorings to bring order to it. Further, maat was used in ancient Egypt as a concept of truth. And metrics never lie (except when they do).&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-license" class="anchor" aria-hidden="true" href="#license"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;License&lt;/h2&gt;
&lt;p&gt;Copyright Â© 2013 Adam Tornhill&lt;/p&gt;
&lt;p&gt;Distributed under the &lt;a href="http://www.gnu.org/licenses/gpl.html" rel="nofollow"&gt;GNU General Public License v3.0&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Usage&lt;/h2&gt;
&lt;p&gt;Code Maat is written in Clojure. To build it from source, use &lt;a href="https://github.com/technomancy/leiningen"&gt;leiningen&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;   lein uberjar
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The command above will create a standalone &lt;code&gt;jar&lt;/code&gt; containing all the dependencies.&lt;/p&gt;
&lt;p&gt;Add the following line to your leiningen dependencies in case you want to use Code Maat as a library:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;   [code-maat "1.0.1"]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can also build code-maat as a Docker image:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  docker build -t code-maat-app .
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Code Maat operates on log files from version-control systems. The supported version-control systems are &lt;code&gt;git&lt;/code&gt;, Mercurial (&lt;code&gt;hg&lt;/code&gt;), &lt;code&gt;svn&lt;/code&gt;, Perforce (&lt;code&gt;p4&lt;/code&gt;), and Team Foundation Server (&lt;code&gt;tfs&lt;/code&gt;). The log files are generated by using the version-control systems themselves as described in the following sections.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-generating-input-data" class="anchor" aria-hidden="true" href="#generating-input-data"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Generating input data&lt;/h3&gt;
&lt;h4&gt;&lt;a id="user-content-preparations" class="anchor" aria-hidden="true" href="#preparations"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Preparations&lt;/h4&gt;
&lt;p&gt;To analyze our VCS data we need to define a temporal period of interest. Over time, many design issues do get fixed and we don't want old data to interfere with our current analysis of the code. To limit the data Code Maat will consider, use one of the following flags depending on your version-control system:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;git:&lt;/em&gt; Use the &lt;code&gt;--after=&amp;lt;date&amp;gt;&lt;/code&gt; to specify the last date of interest. The &lt;code&gt;&amp;lt;date&amp;gt;&lt;/code&gt; is given as &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;hg:&lt;/em&gt; Use the &lt;code&gt;--date&lt;/code&gt; switch to specify the last date of interest. The value is given as &lt;code&gt;"&amp;gt;YYYY-MM-DD"&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;svn:&lt;/em&gt; Use the &lt;code&gt;-r&lt;/code&gt; option to specify a range of interest, for example &lt;code&gt;-r {20130820}:HEAD&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;p4:&lt;/em&gt; Use the &lt;code&gt;-m&lt;/code&gt; option to specify the last specified number of changelists, for example &lt;code&gt;-m 1000&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;tfs:&lt;/em&gt; Use the &lt;code&gt;/stopafter&lt;/code&gt; option to specify the number of changesets, for example &lt;code&gt;/stopafter:1000&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a id="user-content-generate-a-subversion-log-file-using-the-following-command" class="anchor" aria-hidden="true" href="#generate-a-subversion-log-file-using-the-following-command"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Generate a Subversion log file using the following command:&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;      svn log -v --xml &amp;gt; logfile.log -r {YYYYmmDD}:HEAD
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;&lt;a id="user-content-generate-a-git-log-file-using-the-following-command" class="anchor" aria-hidden="true" href="#generate-a-git-log-file-using-the-following-command"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Generate a git log file using the following command:&lt;/h4&gt;
&lt;p&gt;The first options is the legacy format used in Your Code As A Crime Scene. Use the &lt;code&gt;-c git&lt;/code&gt; parse option when &lt;a href="#running-code-maat"&gt;Running Code Maat&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;      git log --pretty=format:'[%h] %aN %ad %s' --date=short --numstat --after=YYYY-MM-DD
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There's a second supported Git format as well. It's more tolerant and faster to parse, so please prefer it over the plain &lt;code&gt;git&lt;/code&gt; format described above. Use the &lt;code&gt;-c git2&lt;/code&gt; parse option when &lt;a href="#running-code-maat"&gt;Running Code Maat&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;      git log --all --numstat --date=short --pretty=format:'--%h--%ad--%aN' --no-renames --after=YYYY-MM-DD
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Many codebases include third-party content or non-code artefacts,  which might generate noise in the analyses.
You can exclude such content via git's pathspecs that limit paths on the command line.
For example, let's say you want to exclude everything in a &lt;code&gt;vendor/ folder&lt;/code&gt;. You would then append the following pattern to the &lt;code&gt;git log&lt;/code&gt; commands above:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;       -- . ":(exclude)vendor/*"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To exclude multiple folders, you just append more pathspecs:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;       -- . ":(exclude)vendor/" ":(exclude)test/"
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;&lt;a id="user-content-generate-a-mercurial-log-file-using-the-following-command" class="anchor" aria-hidden="true" href="#generate-a-mercurial-log-file-using-the-following-command"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Generate a Mercurial log file using the following command:&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;      hg log --template "rev: {rev} author: {author} date: {date|shortdate} files:\n{files %'{file}\n'}\n" --date "&amp;gt;YYYY-MM-DD"
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;&lt;a id="user-content-generate-a-perforce-log-file-using-the-following-command" class="anchor" aria-hidden="true" href="#generate-a-perforce-log-file-using-the-following-command"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Generate a Perforce log file using the following command:&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;      p4 changes -s submitted -m 5000 //depot/project/... | cut -d ' ' -f 2 | xargs -I commitid -n1 sh -c 'p4 describe -s commitid | grep -v "^\s*$" &amp;amp;&amp;amp; echo ""'
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;&lt;a id="user-content-generate-a-tfs-log-file-using-the-following-command-from-a-developer-command-prompt" class="anchor" aria-hidden="true" href="#generate-a-tfs-log-file-using-the-following-command-from-a-developer-command-prompt"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Generate a TFS log file using the following command from a Developer command-prompt:&lt;/h4&gt;
&lt;h6&gt;&lt;a id="user-content-note--the-tfs-cli-tool-does-not-support-custom-date-formatting--the-parser-currently-only-supports-the-en-us-default--friday-january-1-2016-11235-pm---you-may-need-to-adjust-your-system-locale-settings-before-using-the-following-command" class="anchor" aria-hidden="true" href="#note--the-tfs-cli-tool-does-not-support-custom-date-formatting--the-parser-currently-only-supports-the-en-us-default--friday-january-1-2016-11235-pm---you-may-need-to-adjust-your-system-locale-settings-before-using-the-following-command"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Note:  The TFS CLI tool does not support custom date formatting.  The parser currently only supports the en-us default:  Friday, January 1, 2016 1:12:35 PM - you may need to adjust your system locale settings before using the following command.&lt;/h6&gt;
&lt;pre&gt;&lt;code&gt;      tf hist /path/to/workspace /noprompt /format:detailed /recursive
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-running-code-maat" class="anchor" aria-hidden="true" href="#running-code-maat"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Running Code Maat&lt;/h3&gt;
&lt;p&gt;You can run Code Maat directly from leiningen:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;	  lein run -l logfile.log -c &amp;lt;vcs&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you've built a standalone jar (&lt;code&gt;lein uberjar&lt;/code&gt;), run it with a simple java invocation. Please note that you need at least Java 8 installed:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; 	  java -jar code-maat-0.8.6.jar -l logfile.log -c &amp;lt;vcs&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you've built a docker container, then you can run it as&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    docker run -v /home/xx/src/code-maat:/data -it code-maat-app -l /data/logfile.log -c &amp;lt;vcs&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;where the /home/xx/src/code-maat is the host's directory containing the file logfile.log.&lt;/p&gt;
&lt;p&gt;When invoked with &lt;code&gt;-h&lt;/code&gt;, Code Maat prints its usage:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;         adam$ java -jar code-maat-0.9.0.jar
         This is Code Maat, a program used to collect statistics from a VCS.
         Version: 0.9.0-SNAPSHOT
         
         Usage: program-name -l log-file [options]
         
         Options:
           -l, --log LOG                                         Log file with input data
           -c, --version-control VCS                             Input vcs module type: supports svn, git, git2, hg, p4, or tfs
           -a, --analysis ANALYSIS                      authors  The analysis to run (abs-churn, age, author-churn, authors, communication, coupling, entity-churn, entity-effort, entity-ownership, fragmentation, identity, main-dev, main-dev-by-revs, messages, refactoring-main-dev, revisions, soc, summary)
          --input-encoding INPUT-ENCODING                        Specify an encoding other than UTF-8 for the log file
           -r, --rows ROWS                                       Max rows in output
           -g, --group GROUP                                     A file with a pre-defined set of layers. The data will be aggregated according to the group of layers.
           -n, --min-revs MIN-REVS                      5        Minimum number of revisions to include an entity in the analysis
           -m, --min-shared-revs MIN-SHARED-REVS        5        Minimum number of shared revisions to include an entity in the analysis
           -i, --min-coupling MIN-COUPLING              30       Minimum degree of coupling (in percentage) to consider
           -x, --max-coupling MAX-COUPLING              100      Maximum degree of coupling (in percentage) to consider
           -s, --max-changeset-size MAX-CHANGESET-SIZE  30       Maximum number of modules in a change set if it shall be included in a coupling analysis
           -e, --expression-to-match MATCH-EXPRESSION            A regex to match against commit messages. Used with -messages analyses
           -t, --temporal-period TEMPORAL-PERIOD                 Instructs Code Maat to consider all commits during the same day as a single, logical commit
           -d, --age-time-now AGE-TIME_NOW                       Specify a date as YYYY-MM-dd that counts as time zero when doing a code age analysis
           -h, --help
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-optional-specify-an-encoding" class="anchor" aria-hidden="true" href="#optional-specify-an-encoding"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Optional: specify an encoding&lt;/h3&gt;
&lt;p&gt;By default, Code Maat expects your log files to be UTF-8. If you use another encoding, override the default with &lt;code&gt;--input-encoding&lt;/code&gt;, for example &lt;code&gt;--input-encoding UTF-16BE&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-generating-a-summary" class="anchor" aria-hidden="true" href="#generating-a-summary"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Generating a summary&lt;/h4&gt;
&lt;p&gt;When starting out, I find it useful to get an overview of the mined data. With the &lt;code&gt;summary&lt;/code&gt; analysis, Code Maat produces such an overview:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;   java -jar code-maat-0.9.0.jar -l logfile.log -c git -a summary
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The resulting output is on csv format:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;          statistic,                 value
          number-of-commits,           919
          number-of-entities,          730
          number-of-entities-changed, 3397
          number-of-authors,            79
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you use the second Git format, just specify &lt;code&gt;git2&lt;/code&gt; instead:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;   java -jar code-maat-0.9.0.jar -l logfile2.log -c git2 -a summary
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;&lt;a id="user-content-mining-organizational-metrics" class="anchor" aria-hidden="true" href="#mining-organizational-metrics"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Mining organizational metrics&lt;/h4&gt;
&lt;p&gt;By default, Code Maat runs an analysis on the number of authors per module. The authors analysis is based on the idea that the more developers working on a module, the larger the communication challenges. The analysis is invoked with the following command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;   java -jar code-maat-0.9.0.jar -l logfile.log -c git
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The resulting output is on CSV format:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;          entity,         n-authors, n-revs
          InfoUtils.java, 12,        60
          BarChart.java,   7,        30
          Page.java,       4,        27
          ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In example above, the first column gives us the name of module, the second the total number of distinct authors that have made commits on that module, and the third column gives us the total number of revisions of the module. Taken together, these metrics serve as predictors of defects and quality issues.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-mining-logical-coupling" class="anchor" aria-hidden="true" href="#mining-logical-coupling"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Mining logical coupling&lt;/h4&gt;
&lt;p&gt;Logical coupling refers to modules that tend to change together. Modules that are logically coupled have a hidden, implicit dependency between them such that a change to one of them leads to a predictable change in the coupled module. To analyze the logical coupling in a system, invoke Code Maat with the following arguments:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;          java -jar code-maat-0.9.0.jar -l logfile.log -c git -a coupling
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The resulting output is on CSV format:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;          entity,          coupled,        degree,  average-revs
          InfoUtils.java,  Page.java,      78,      44
          InfoUtils.java,  BarChart.java,  62,      45
          ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the example above, the first column (&lt;code&gt;entity&lt;/code&gt;) gives us the name of the module, the second (&lt;code&gt;coupled&lt;/code&gt;) gives us the name of a logically coupled module, the third column (&lt;code&gt;degree&lt;/code&gt;) gives us the coupling as a percentage (0-100), and finally &lt;code&gt;average-revs&lt;/code&gt; gives us the average number of revisions of the two modules. To interpret the data, consider the &lt;code&gt;InfoUtils.java&lt;/code&gt; module in the example output above. The coupling tells us that each time it's modified, it's a 78% risk/chance that we'll have to change our &lt;code&gt;Page.java&lt;/code&gt; module too. Since there's probably no reason they should change together, the analysis points to a part of the code worth investigating as a potential target for a future refactoring.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-calculate-code-age" class="anchor" aria-hidden="true" href="#calculate-code-age"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Calculate code age&lt;/h3&gt;
&lt;p&gt;The change frequency of code is a factor that should (but rarely do) drive the evolution of a software architecture. In general, you want to stabilize as much code as possible. A failure to stabilize means that you need to maintain a working knowledge of those parts of the code for the life-time of the system.&lt;/p&gt;
&lt;p&gt;One way to measure the stability of a software architecture is by a code age analysis:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;          java -jar code-maat-0.9.0.jar -l logfile.log -c git -a age
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;age&lt;/code&gt; analysis grades each module based on the date of last change. The measurement unit is age in months. Here's how the result may look:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;          entity,age-months
          src/code_maat/app/app.clj,2
          project.clj,4
          src/code_maat/parsers/perforce.clj,5
          ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By default, Code Maat uses the current date as starting point for a code age analysis. You specify a different start time with the command line argument &lt;code&gt;--age-time-now&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;By using the techniques from &lt;a href="https://pragprog.com/book/atcrime/your-code-as-a-crime-scene" rel="nofollow"&gt;Your Code as a Crime Scene&lt;/a&gt; we visualize the system with each module marked-up by its age (the more &lt;code&gt;red&lt;/code&gt;, the more recent changes to the code):&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="doc/imgs/code_age_sample.png"&gt;&lt;img src="doc/imgs/code_age_sample.png" alt="code age visualized" style="max-width:100%;"&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-visualise-your-results" class="anchor" aria-hidden="true" href="#visualise-your-results"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Visualise your Results&lt;/h3&gt;
&lt;p&gt;Code Maat doesn't include any visualizations itself. However, you do have a bunch of options.&lt;/p&gt;
&lt;p&gt;One option is &lt;a href="http://www.empear.com/#empear-products" rel="nofollow"&gt;CodeScene&lt;/a&gt; which is &lt;a href="https://codescene.io/" rel="nofollow"&gt;free for open source&lt;/a&gt; and delivers all these analyses as a service. CodeScene is also available in an &lt;a href="http://www.empear.com/products/codescene-on-premise/" rel="nofollow"&gt;on-premise version&lt;/a&gt;. CodeScene is a complete application with automated repository mining, visualizations, and is built around the ideas prototyped in Code Maat.&lt;/p&gt;
&lt;p&gt;I also present a whole suite of different visualization techniques and options in &lt;a href="https://pragprog.com/book/atcrime/your-code-as-a-crime-scene" rel="nofollow"&gt;Your Code as a Crime Scene&lt;/a&gt;, so do check out the book if you want to dive deeper. You can also look at some of the basic tools I've open sourced such as &lt;a href="https://github.com/adamtornhill/MetricsTreeMap"&gt;Metrics Tree Map&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="doc/imgs/tree_map_sample.png"&gt;&lt;img src="doc/imgs/tree_map_sample.png" alt="coupling visualized" style="max-width:100%;"&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Yet another alternative is to save the generated CSV to a file and import it into a spreadsheet program such as OpenOffice or Excel. That allows us to generate charts such as the ones below:&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="doc/imgs/coupling_sample.png"&gt;&lt;img src="doc/imgs/coupling_sample.png" alt="coupling visualized" style="max-width:100%;"&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-code-churn-measures" class="anchor" aria-hidden="true" href="#code-churn-measures"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Code churn measures&lt;/h2&gt;
&lt;p&gt;Code churn is related to post-release defects. Modules with higher churn tend to have more defects. There are several different aspects of code churn. I intend to support several of them in Code Maat.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-absolute-churn" class="anchor" aria-hidden="true" href="#absolute-churn"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Absolute churn&lt;/h3&gt;
&lt;p&gt;The absolute code churn numbers are calculated with the &lt;code&gt;-a abs-churn&lt;/code&gt; option. Note that the option is only available for &lt;code&gt;git&lt;/code&gt;. The analysis will output a CSV table with the churn accumulated per date:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;         date,       added, deleted
         2013-08-09,   259,      20
         2013-08-19,   146,      77
         2013-08-21,     5,       6
         2013-08-20,   773,     121
         2013-08-30,   349,     185
         ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Visualizing the result allows us to spot general trends over time:&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="doc/imgs/abs_churn_sample.png"&gt;&lt;img src="doc/imgs/abs_churn_sample.png" alt="abs churn visualized" style="max-width:100%;"&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-churn-by-author" class="anchor" aria-hidden="true" href="#churn-by-author"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Churn by author&lt;/h3&gt;
&lt;p&gt;The idea behind this analysis is to get an idea of the overall contributions by each individual. The analysis is invoked with the &lt;code&gt;-a author-churn&lt;/code&gt; option. The result will be given as CSV:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;         author,        added, deleted
         Adam Tornhill, 13826,    1670
         Some One Else,   123,      80
         Mr Petersen,       3,       3
         ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And, of course, you wouldn't use this data for any performance evaluation; it wouldn't serve well (in case anything should be rewarded it would be a net deletion of code - there's too much of it in the world).&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-churn-by-entity" class="anchor" aria-hidden="true" href="#churn-by-entity"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Churn by entity&lt;/h3&gt;
&lt;p&gt;The pre-release churn of a module is a good predictor of its number of post-release defects. Such an analysis is supported in Code Maat by the &lt;code&gt;-a entity-churn&lt;/code&gt; option.&lt;/p&gt;
&lt;p&gt;Note: Some research suggests that relative churn measures are better, while others don't find any significant differences. The metrics calculated by Code Maat are absolute for now because it's easier to calculate. I'm likely to include support for relative churn too.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-ownership-patterns" class="anchor" aria-hidden="true" href="#ownership-patterns"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Ownership patterns&lt;/h2&gt;
&lt;p&gt;Once we have mined the organizational metrics described above, we may find we have multiple developers working on the same modules. How is their effort distributed? Does a particular module have a major developer or is everyone contributing a small piece? Let's find out by running the &lt;code&gt;-a entity-ownership&lt;/code&gt; analysis. This analysis gives us the following output:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;         entity,               author,  added, deleted
         analysis/authors.clj,    apt,    164,      98
         analysis/authors.clj,    qew,     81,      10
         analysis/authors.clj,     jt,     42,      32
         analysis/entities.clj,   apt,     72,      24
         ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Another ownership view is to consider the effort spent by individual authors on the different entities in the system. This analysis is run by the &lt;code&gt;-a entity-effort&lt;/code&gt; option. The analysis gives us the following table:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;         entity,                author, author-revs, total-revs
         analysis/authors.clj,     apt,           5,         10
         analysis/authors.clj,     qew,           3,         10
         analysis/authors.clj,      jt,           1,         10
         analysis/authors.clj,     apt,           1,         10
         ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This information may be a useful guide to find the right author to discuss functionality and potential refactorings with. Just note that the ownership metrics are sensitive to the same biases as the churn metrics; they're both heuristics and no absolute truths.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-temporal-periods" class="anchor" aria-hidden="true" href="#temporal-periods"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Temporal periods&lt;/h2&gt;
&lt;p&gt;Sometimes we'd like to find patterns that manifests themselves over multiple commits. Code Maat provides the &lt;code&gt;--temporal-period&lt;/code&gt; switch that let you consider all commits within a day as a logical change. Just provide the switch and add a digit - in the future that digit may even mean something; Right now the aggregation is limited to commits within a single day.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-intermediate-results" class="anchor" aria-hidden="true" href="#intermediate-results"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Intermediate results&lt;/h3&gt;
&lt;p&gt;Code Maat supports an &lt;code&gt;identity&lt;/code&gt; analysis. By using this switch, Code Maat will output the intermediate parse result of the raw VCS file. This can be useful either as a debug aid or as input to other tools.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-jvm-options" class="anchor" aria-hidden="true" href="#jvm-options"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;JVM options&lt;/h3&gt;
&lt;p&gt;Code Maat uses the Incanter library. By default, Incanter will create an &lt;code&gt;awt frame&lt;/code&gt;. You can suppress the frame by providing the following option to your &lt;code&gt;java&lt;/code&gt; command: &lt;code&gt;-Djava.awt.headless=true&lt;/code&gt;.
Code Maat is quite memory hungry, particularly when working with larger change sets. Thus, I recommend specifying a larger heap size than the &lt;code&gt;JVM&lt;/code&gt; defaults: &lt;code&gt;-Xmx4g&lt;/code&gt;.
Note that when running Code Maat through &lt;a href="https://github.com/technomancy/leiningen"&gt;leiningen&lt;/a&gt;, those options are already configured in the &lt;code&gt;project.clj&lt;/code&gt; file.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-limitations" class="anchor" aria-hidden="true" href="#limitations"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Limitations&lt;/h2&gt;
&lt;p&gt;The current version of Code Maat processes all its content in memory. Thus, it may not scale to large input files (however, it depends a lot on the combination of parser and analysis). The recommendation is to limit the input by specifying a sensible start date (as discussed initially, you want to do that anyway to avoid confounds in the analysis).&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-future-directions" class="anchor" aria-hidden="true" href="#future-directions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Future directions&lt;/h2&gt;
&lt;p&gt;In future versions of Code Maat I plan to add more analysis methods such as code churn and developer patterns.
I also plan on direct visualization support and a database backed analysis to allow processing of larger log files. Further, I plan to add a worked example. That example will be a case study of some well-known open source code. Until then, I hope you find Code Maat useful in its initial shape.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>adamtornhill</author><guid isPermaLink="false">https://github.com/adamtornhill/code-maat</guid><pubDate>Sun, 05 Jan 2020 00:02:00 GMT</pubDate></item><item><title>LightTable/LightTable #3 in Clojure, Today</title><link>https://github.com/LightTable/LightTable</link><description>&lt;p&gt;&lt;i&gt;The Light Table IDE â›º&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-light-table" class="anchor" aria-hidden="true" href="#light-table"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Light Table&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://travis-ci.org/LightTable/LightTable" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/220e02276217af792fcbfdce4f254ad316feba8b/68747470733a2f2f7472617669732d63692e6f72672f4c696768745461626c652f4c696768745461626c652e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/LightTable/LightTable.svg?branch=master" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://semaphoreci.com/lighttable/lighttable" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/3474d590a1f48ce933106905746492f25f5445c3/68747470733a2f2f73656d6170686f726563692e636f6d2f6170692f76312f6c696768747461626c652f6c696768747461626c652f6272616e636865732f6d61737465722f62616467652e737667" alt="Build Status" data-canonical-src="https://semaphoreci.com/api/v1/lighttable/lighttable/branches/master/badge.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://ci.appveyor.com/project/prertik/lighttable-1rj5p" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/229996b08be64777c0abfab840d19ba44ad2f340/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6b776e6265673934376c75656732646c3f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/kwnbeg947lueg2dl?svg=true" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://circleci.com/gh/LightTable/LightTable" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/75b5e361722ca8f65797ca190f548582ddc2cf5b/68747470733a2f2f636972636c6563692e636f6d2f67682f4c696768745461626c652f4c696768745461626c652e7376673f7374796c653d737667" alt="CircleCI" data-canonical-src="https://circleci.com/gh/LightTable/LightTable.svg?style=svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://codecov.io/gh/LightTable/LightTable" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/223e518687e09cbf0b215b93e4ea5ded3124e568/68747470733a2f2f636f6465636f762e696f2f67682f4c696768745461626c652f4c696768745461626c652f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/LightTable/LightTable/branch/master/graph/badge.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/b537d15b45e72de24fa88cfc3d5b2609f17d491e/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f646f776e6c6f6164732f4c696768745461626c652f4c696768745461626c652f6c61746573742f746f74616c2e7376673f7374796c653d666f722d7468652d6261646765"&gt;&lt;img src="https://camo.githubusercontent.com/b537d15b45e72de24fa88cfc3d5b2609f17d491e/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f646f776e6c6f6164732f4c696768745461626c652f4c696768745461626c652f6c61746573742f746f74616c2e7376673f7374796c653d666f722d7468652d6261646765" alt="" data-canonical-src="https://img.shields.io/github/downloads/LightTable/LightTable/latest/total.svg?style=for-the-badge" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://repology.org/metapackage/lighttable/versions" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/6dedfeead057cbe6edd89fcaf3ee4b2b01329c28/68747470733a2f2f7265706f6c6f67792e6f72672f62616467652f74696e792d7265706f732f6c696768747461626c652e737667" alt="Packaging status" data-canonical-src="https://repology.org/badge/tiny-repos/lighttable.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://gitter.im/LightTable/LightTable?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/da2edb525cde1455a622c58c0effc3a90b9a181c/68747470733a2f2f6261646765732e6769747465722e696d2f4a6f696e253230436861742e737667" alt="Join the chat at https://gitter.im/LightTable/LightTable" data-canonical-src="https://badges.gitter.im/Join%20Chat.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://www.codeshelter.co/" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/3ba4ca04397b0e8d4c04806b12d31c710635baa5/68747470733a2f2f7777772e636f64657368656c7465722e636f2f7374617469632f6261646765732f62616467652d666c61742e737667" alt="Code Shelter" data-canonical-src="https://www.codeshelter.co/static/badges/badge-flat.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Light Table is a next generation code editor that connects you to your creation with instant feedback. Light Table is very customizable and can display anything a &lt;a href="http://www.chromium.org/" rel="nofollow"&gt;Chromium browser&lt;/a&gt; can.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-this-is-a-development-branch-and-is-not-clean-like-master-and-can-have-many-breakages" class="anchor" aria-hidden="true" href="#this-is-a-development-branch-and-is-not-clean-like-master-and-can-have-many-breakages"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;This is a development branch and is not clean like &lt;code&gt;master&lt;/code&gt; and can have many breakages.&lt;/h3&gt;
&lt;h2&gt;&lt;a id="user-content-downloads" class="anchor" aria-hidden="true" href="#downloads"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Downloads&lt;/h2&gt;
&lt;p&gt;Prebuilt binaries are available through &lt;a href="http://lighttable.com" rel="nofollow"&gt;lighttable.com&lt;/a&gt;. To build and use a developer version of Light Table &lt;a href="doc/developer-install.md"&gt;see these instructions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For OSX users, the install process involves the following steps until we officially sign our OSX App:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In Finder, Ctrl-click on LightTable.app/ and select Open.&lt;/li&gt;
&lt;li&gt;When you see &lt;a href="https://cloud.githubusercontent.com/assets/11994/11731454/85181e90-9f69-11e5-9c65-f6aa4228005c.png" rel="nofollow"&gt;this prompt&lt;/a&gt; about LightTable being unidentified, click Open.&lt;/li&gt;
&lt;li&gt;If Ctrl-click doesn't work for you, open System Preferences &amp;gt; Security &amp;amp; Privacy &amp;gt; General, temporarily change "Allow apps downloaded from:" to Anywhere and double click on LightTable.app.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Documentation&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;See &lt;a href="http://docs.lighttable.com/" rel="nofollow"&gt;docs.lighttable.com&lt;/a&gt; for official user documentation and tutorials.&lt;/li&gt;
&lt;li&gt;See the &lt;a href="https://github.com/LightTable/LightTable/wiki"&gt;community wiki&lt;/a&gt; which includes a &lt;a href="https://github.com/LightTable/LightTable/wiki/FAQ"&gt;User FAQ&lt;/a&gt; and a &lt;a href="https://github.com/LightTable/LightTable/wiki/For-Users"&gt;For Users page&lt;/a&gt; for additional links.&lt;/li&gt;
&lt;li&gt;For a typical Light Table workflow, &lt;a href="doc/workflow.md"&gt;read this&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;To understand how Light Table works, read about its &lt;a href="doc/BOT.md"&gt;BOT architecture&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;See &lt;a href="http://lighttable.github.io/LightTable/api/index.html" rel="nofollow"&gt;Light Table's API docs&lt;/a&gt; to see what
plugin authors have access to.&lt;/li&gt;
&lt;li&gt;If you're a user coming from vim or emacs see the &lt;a href="https://github.com/LightTable/LightTable/wiki/For-Vim-Users"&gt;For Vim Users&lt;/a&gt; and &lt;a href="https://github.com/LightTable/LightTable/wiki/For-Emacs-Users"&gt;For Emacs Users&lt;/a&gt; guides.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-plugins" class="anchor" aria-hidden="true" href="#plugins"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Plugins&lt;/h2&gt;
&lt;p&gt;Light Table has a powerful plugin system that allows almost any aspect of the editor to be extended and customized. With over &lt;a href="https://github.com/LightTable/plugin-metadata"&gt;100+ plugins&lt;/a&gt;, the community is able to offer eval support for new languages, create domain-specific IDEs and much more. If you're interested in writing your own plugin, see the &lt;a href="http://docs.lighttable.com/#write-a-plugin" rel="nofollow"&gt;Write a Plugin&lt;/a&gt; and &lt;a href="http://docs.lighttable.com/#submit-a-plugin" rel="nofollow"&gt;Submit a Plugin&lt;/a&gt; docs. For an example ClojureScript plugin, see &lt;a href="https://github.com/LightTable/LightTable-Declassifier"&gt;LightTable-Declassifier&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-community" class="anchor" aria-hidden="true" href="#community"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Community&lt;/h2&gt;
&lt;p&gt;Want to ask a question or just say hi? Please do :). Our mailing list is the &lt;a href="https://groups.google.com/forum/#!forum/light-table-discussion" rel="nofollow"&gt;Light Table Google group&lt;/a&gt;. We also hang out in &lt;code&gt;#lighttable&lt;/code&gt; on Freenode IRC.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-for-developers" class="anchor" aria-hidden="true" href="#for-developers"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;For Developers&lt;/h2&gt;
&lt;p&gt;LightTable is primarily written in &lt;a href="http://clojure.org/clojurescript" rel="nofollow"&gt;ClojureScript&lt;/a&gt;. If you aren't familiar with it, check out &lt;a href="https://github.com/swannodette/lt-cljs-tutorial"&gt;David Nolen's tutorial&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In order to develop for Light Table, you will need to &lt;a href="doc/developer-install.md"&gt;install a developer version of Light Table&lt;/a&gt;. For more information, read &lt;a href="https://github.com/LightTable/LightTable/blob/master/CONTRIBUTING.md#code-contributions"&gt;CONTRIBUTING.md&lt;/a&gt; and &lt;a href="https://github.com/LightTable/LightTable/wiki/For-Developers"&gt;For Developers&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-license" class="anchor" aria-hidden="true" href="#license"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;License&lt;/h2&gt;
&lt;p&gt;All files in this project are under the &lt;a href="LICENSE.md"&gt;LICENSE.md&lt;/a&gt; license unless otherwise stated in the file or by a dependency's license file.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-credits" class="anchor" aria-hidden="true" href="#credits"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Credits&lt;/h2&gt;
&lt;p&gt;Big thanks to all our &lt;a href="https://github.com/LightTable/LightTable/graphs/contributors"&gt;contributors&lt;/a&gt;!
Thanks of course to Kodowa for all they have done for Light Table and also to Cognitect for providing friday contributions for one of the core team members.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>LightTable</author><guid isPermaLink="false">https://github.com/LightTable/LightTable</guid><pubDate>Sun, 05 Jan 2020 00:03:00 GMT</pubDate></item><item><title>reagent-project/reagent #4 in Clojure, Today</title><link>https://github.com/reagent-project/reagent</link><description>&lt;p&gt;&lt;i&gt;A minimalistic ClojureScript interface to React.js&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-reagent" class="anchor" aria-hidden="true" href="#reagent"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Reagent&lt;/h1&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="logo.png"&gt;&lt;img src="logo.png" alt="Reagent-Project" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A simple &lt;a href="http://github.com/clojure/clojurescript"&gt;ClojureScript&lt;/a&gt; interface to &lt;a href="http://facebook.github.io/react/" rel="nofollow"&gt;React&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Reagent provides a way to write efficient React components using (almost) nothing but plain ClojureScript functions.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="http://reagent-project.github.io/" rel="nofollow"&gt;Detailed intro with live examples&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="http://reagent-project.github.io/news/index.html" rel="nofollow"&gt;News&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://cljdoc.org/d/reagent/reagent/0.8.1/doc/documentation-index" rel="nofollow"&gt;Documentation, 0.8&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Documentation, next release, 0.9&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="http://reagent-project.github.io/docs/master/" rel="nofollow"&gt;API docs&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/reagent-project/reagent/tree/master/doc"&gt;Tutorials and FAQ&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Community discussion and support channels&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://clojurians.slack.com/messages/reagent/" rel="nofollow"&gt;#reagent&lt;/a&gt;&lt;/strong&gt; channel in &lt;a href="http://clojurians.net/" rel="nofollow"&gt;Clojure Slack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://groups.google.com/forum/#!forum/reagent-project" rel="nofollow"&gt;Reagent Project Mailing List&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Commercial video material&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.jacekschae.com/learn-reagent-free/tycit?coupon=REAGENT" rel="nofollow"&gt;Learn Reagent Free&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.jacekschae.com/learn-reagent-pro/tycit?coupon=REAGENT" rel="nofollow"&gt;Learn Reagent Pro&lt;/a&gt; (Affiliate link, $30 discount)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.jacekschae.com/learn-re-frame-free/tycit?coupon=REAGENT" rel="nofollow"&gt;Learn Re-frame Free&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.jacekschae.com/learn-re-frame-pro/tycit?coupon=REAGENT" rel="nofollow"&gt;Learn Re-frame Pro&lt;/a&gt; (Affiliate link, $30 discount)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://purelyfunctional.tv/guide/reagent/" rel="nofollow"&gt;purelyfunctional.tv &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://lambdaisland.com/collections/react-reagent-re-frame" rel="nofollow"&gt;Lambda Island Videos&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Usage&lt;/h3&gt;
&lt;p&gt;To create a new Reagent project using &lt;a href="http://leiningen.org/" rel="nofollow"&gt;Leiningen&lt;/a&gt; template simply run:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;lein new reagent myproject
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you wish to only create the assets for ClojureScript without a Clojure backend then do the following instead:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;lein new reagent-frontend myproject
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will setup a new Reagent project with some reasonable defaults, see here for more &lt;a href="https://github.com/reagent-project/reagent-template"&gt;details&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To use Reagent in an existing project you add this to your dependencies in &lt;code&gt;project.clj&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://clojars.org/reagent" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/f6baff29ae89778c8b04949509bf21d0ddbd005e/687474703a2f2f636c6f6a6172732e6f72672f72656167656e742f6c61746573742d76657273696f6e2e737667" alt="Clojars Project" data-canonical-src="http://clojars.org/reagent/latest-version.svg" style="max-width:100%;"&gt;&lt;/a&gt; &lt;br&gt;
&lt;a href="https://circleci.com/gh/reagent-project/reagent" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/6ff69ee723e4781a137a2ec49df44f54d7d1b624/68747470733a2f2f636972636c6563692e636f6d2f67682f72656167656e742d70726f6a6563742f72656167656e742e7376673f7374796c653d737667" alt="CircleCI" data-canonical-src="https://circleci.com/gh/reagent-project/reagent.svg?style=svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is all you need to do if you want the standard version of React. If you want to use your own build of React (or React from a CDN), you have to use &lt;code&gt;:exclusions&lt;/code&gt; variant of the dependency, and also provide &lt;code&gt;react&lt;/code&gt; and &lt;code&gt;react-dom&lt;/code&gt; namespaces (by creating &lt;code&gt;.cljs&lt;/code&gt; files with just &lt;code&gt;ns&lt;/code&gt; form, or by adding your own &lt;code&gt;:foreign-libs&lt;/code&gt; entries).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[reagent "0.x.x" :exclusions [cljsjs/react cljsjs/react-dom]]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Examples&lt;/h2&gt;
&lt;p&gt;Reagent uses &lt;a href="https://github.com/weavejester/hiccup"&gt;Hiccup-like&lt;/a&gt; markup instead of React's sort-of html. It looks like this:&lt;/p&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;defn&lt;/span&gt; &lt;span class="pl-e"&gt;some-component&lt;/span&gt; []
  [&lt;span class="pl-c1"&gt;:div&lt;/span&gt;
   [&lt;span class="pl-c1"&gt;:h3&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;I am a component!&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]
   [&lt;span class="pl-c1"&gt;:p.someclass&lt;/span&gt;
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;I have &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; [&lt;span class="pl-c1"&gt;:strong&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;bold&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]
    [&lt;span class="pl-c1"&gt;:span&lt;/span&gt; {&lt;span class="pl-c1"&gt;:style&lt;/span&gt; {&lt;span class="pl-c1"&gt;:color&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;red&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}} &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt; and red&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt; text.&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]])&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Reagent extends standard Hiccup in one way: it is possible to "squeeze" elements together by using a &lt;code&gt;&amp;gt;&lt;/code&gt; character.&lt;/p&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;[&lt;span class="pl-c1"&gt;:div&lt;/span&gt;
  [&lt;span class="pl-c1"&gt;:p&lt;/span&gt;
    [&lt;span class="pl-c1"&gt;:b&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Nested Element&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]]]&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;can be written as:&lt;/p&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;[&lt;span class="pl-c1"&gt;:div&amp;gt;p&amp;gt;b&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Nested Element&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Since version 0.8:&lt;/strong&gt; The &lt;code&gt;:class&lt;/code&gt; attribute also supports collections of classes, and nil values are removed:&lt;/p&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;[&lt;span class="pl-c1"&gt;:div&lt;/span&gt; {&lt;span class="pl-c1"&gt;:class&lt;/span&gt; [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;a-class&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; (&lt;span class="pl-k"&gt;when&lt;/span&gt; active? &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;active&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;b-class&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]}]&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;You can use one component inside another:&lt;/p&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;defn&lt;/span&gt; &lt;span class="pl-e"&gt;calling-component&lt;/span&gt; []
  [&lt;span class="pl-c1"&gt;:div&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Parent component&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
   [some-component]])&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And pass properties from one component to another:&lt;/p&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;defn&lt;/span&gt; &lt;span class="pl-e"&gt;child&lt;/span&gt; [name]
  [&lt;span class="pl-c1"&gt;:p&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Hi, I am &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; name])

(&lt;span class="pl-k"&gt;defn&lt;/span&gt; &lt;span class="pl-e"&gt;childcaller&lt;/span&gt; []
  [child &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Foo Bar&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;])&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You mount the component into the DOM like this:&lt;/p&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;defn&lt;/span&gt; &lt;span class="pl-e"&gt;mountit&lt;/span&gt; []
  (&lt;span class="pl-en"&gt;r/render&lt;/span&gt; [childcaller]
            (&lt;span class="pl-en"&gt;.-body&lt;/span&gt; js/document)))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;assuming we have imported Reagent like this:&lt;/p&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;ns&lt;/span&gt; &lt;span class="pl-e"&gt;example&lt;/span&gt;
  (&lt;span class="pl-c1"&gt;:require&lt;/span&gt; [reagent.core &lt;span class="pl-c1"&gt;:as&lt;/span&gt; r]))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;State is handled using Reagent's version of &lt;code&gt;atom&lt;/code&gt;, like this:&lt;/p&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;defonce&lt;/span&gt; &lt;span class="pl-e"&gt;click-count&lt;/span&gt; (&lt;span class="pl-en"&gt;r/atom&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt;))

(&lt;span class="pl-k"&gt;defn&lt;/span&gt; &lt;span class="pl-e"&gt;state-ful-with-atom&lt;/span&gt; []
  [&lt;span class="pl-c1"&gt;:div&lt;/span&gt; {&lt;span class="pl-c1"&gt;:on-click&lt;/span&gt; #(&lt;span class="pl-en"&gt;swap!&lt;/span&gt; click-count inc)}
   &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;I have been clicked &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; @click-count &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt; times.&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;])&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Any component that dereferences a &lt;code&gt;reagent.core/atom&lt;/code&gt; will be automatically re-rendered.&lt;/p&gt;
&lt;p&gt;If you want do some setting up when the component is first created, the component function can return a new function that will be called to do the actual rendering:&lt;/p&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;defn&lt;/span&gt; &lt;span class="pl-e"&gt;timer-component&lt;/span&gt; []
  (&lt;span class="pl-k"&gt;let&lt;/span&gt; [seconds-elapsed (&lt;span class="pl-en"&gt;r/atom&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt;)]
    (&lt;span class="pl-k"&gt;fn&lt;/span&gt; []
      (&lt;span class="pl-en"&gt;js/setTimeout&lt;/span&gt; #(&lt;span class="pl-en"&gt;swap!&lt;/span&gt; seconds-elapsed inc) &lt;span class="pl-c1"&gt;1000&lt;/span&gt;)
      [&lt;span class="pl-c1"&gt;:div&lt;/span&gt;
       &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Seconds Elapsed: &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; @seconds-elapsed])))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This way you can avoid using React's lifecycle callbacks like &lt;code&gt;getInitialState&lt;/code&gt; and &lt;code&gt;componentWillMount&lt;/code&gt; most of the time.&lt;/p&gt;
&lt;p&gt;But you can still use them if you want to, either using &lt;code&gt;reagent.core/create-class&lt;/code&gt; or by attaching meta-data to a component function:&lt;/p&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;defonce&lt;/span&gt; &lt;span class="pl-e"&gt;my-html&lt;/span&gt; (&lt;span class="pl-en"&gt;r/atom&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))

(&lt;span class="pl-k"&gt;defn&lt;/span&gt; &lt;span class="pl-e"&gt;plain-component&lt;/span&gt; []
  [&lt;span class="pl-c1"&gt;:p&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;My html is &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; @my-html])

(&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-e"&gt;component-with-callback&lt;/span&gt;
  (&lt;span class="pl-en"&gt;with-meta&lt;/span&gt; plain-component
    {&lt;span class="pl-c1"&gt;:component-did-mount&lt;/span&gt;
     (&lt;span class="pl-k"&gt;fn&lt;/span&gt; [this]
       (&lt;span class="pl-en"&gt;reset!&lt;/span&gt; my-html (&lt;span class="pl-en"&gt;.-innerHTML&lt;/span&gt; (&lt;span class="pl-en"&gt;reagent/dom-node&lt;/span&gt; this))))}))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;See the examples directory for more examples.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-performance" class="anchor" aria-hidden="true" href="#performance"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Performance&lt;/h2&gt;
&lt;p&gt;React is pretty darn fast, and so is Reagent. It should even be faster than plain old javascript React a lot of the time, since ClojureScript allows us to skip a lot of unnecessary rendering (through judicious use of React's &lt;code&gt;shouldComponentUpdate&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;The ClojureScript overhead is kept down, thanks to lots of caching.&lt;/p&gt;
&lt;p&gt;Code size is a little bigger than React.js, but still quite small. The todomvc example clocks in at roughly 79K gzipped, using advanced compilation.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-about" class="anchor" aria-hidden="true" href="#about"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;About&lt;/h2&gt;
&lt;p&gt;The idea and some of the code for making components atom-like comes from &lt;a href="https://github.com/piranha/pump"&gt;pump&lt;/a&gt;. The reactive-atom idea (and some code) comes from &lt;a href="https://github.com/lynaghk/reflex"&gt;reflex&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The license is MIT.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>reagent-project</author><guid isPermaLink="false">https://github.com/reagent-project/reagent</guid><pubDate>Sun, 05 Jan 2020 00:04:00 GMT</pubDate></item><item><title>metabase/metabase #5 in Clojure, Today</title><link>https://github.com/metabase/metabase</link><description>&lt;p&gt;&lt;i&gt;The simplest, fastest way to get business intelligence and analytics  to everyone in your company :yum:&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-metabase" class="anchor" aria-hidden="true" href="#metabase"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Metabase&lt;/h1&gt;
&lt;p&gt;Metabase is the easy, open source way for everyone in your company to ask questions and learn from data.&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="docs/metabase-product-screenshot.png"&gt;&lt;img src="docs/metabase-product-screenshot.png" alt="Metabase Product Screenshot" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/metabase/metabase/releases"&gt;&lt;img src="https://camo.githubusercontent.com/ea5e30e904914ce7e90f1545526b8a6cc043618e/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f72656c656173652f6d657461626173652f6d657461626173652e7376673f6c6162656c3d6c617465737425323072656c65617365" alt="Latest Release" data-canonical-src="https://img.shields.io/github/release/metabase/metabase.svg?label=latest%20release" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://raw.githubusercontent.com/metabase/metabase/master/LICENSE.txt" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/b59a8ca795689678e6caf56900294059cfe64ba3/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4147504c2d3035423843432e737667" alt="GitHub license" data-canonical-src="https://img.shields.io/badge/license-AGPL-05B8CC.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://circleci.com/gh/metabase/metabase" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/a81f1ec3024eb4ce825b1eb8604cfc01e5a4b62c/68747470733a2f2f636972636c6563692e636f6d2f67682f6d657461626173652f6d657461626173652e7376673f7374796c653d73766726636972636c652d746f6b656e3d33636366306161383431303238616630323766326163396538646631376365363033653930656639" alt="Circle CI" data-canonical-src="https://circleci.com/gh/metabase/metabase.svg?style=svg&amp;amp;circle-token=3ccf0aa841028af027f2ac9e8df17ce603e90ef9" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://gitter.im/metabase/metabase" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/315f2b9c3a2b05d7fef4a53142339050088ff7d4/68747470733a2f2f6261646765732e6769747465722e696d2f6d657461626173652f6d657461626173652e706e67" alt="Gitter chat" data-canonical-src="https://badges.gitter.im/metabase/metabase.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-features" class="anchor" aria-hidden="true" href="#features"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Features&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;5 minute &lt;a href="https://metabase.com/docs/latest/setting-up-metabase.html" rel="nofollow"&gt;setup&lt;/a&gt; (We're not kidding)&lt;/li&gt;
&lt;li&gt;Let anyone on your team &lt;a href="https://metabase.com/docs/latest/users-guide/04-asking-questions.html" rel="nofollow"&gt;ask questions&lt;/a&gt; without knowing SQL&lt;/li&gt;
&lt;li&gt;Rich beautiful &lt;a href="https://metabase.com/docs/latest/users-guide/06-sharing-answers.html" rel="nofollow"&gt;dashboards&lt;/a&gt; with auto refresh and fullscreen&lt;/li&gt;
&lt;li&gt;SQL Mode for analysts and data pros&lt;/li&gt;
&lt;li&gt;Create canonical &lt;a href="https://metabase.com/docs/latest/administration-guide/07-segments-and-metrics.html" rel="nofollow"&gt;segments and metrics&lt;/a&gt; for your team to use&lt;/li&gt;
&lt;li&gt;Send data to Slack or email on a schedule with &lt;a href="https://metabase.com/docs/latest/users-guide/10-pulses.html" rel="nofollow"&gt;Pulses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;View data in Slack anytime with &lt;a href="https://metabase.com/docs/latest/users-guide/11-metabot.html" rel="nofollow"&gt;MetaBot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metabase.com/docs/latest/administration-guide/03-metadata-editing.html" rel="nofollow"&gt;Humanize data&lt;/a&gt; for your team by renaming, annotating and hiding fields&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For more information check out &lt;a href="https://metabase.com/" rel="nofollow"&gt;metabase.com&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-supported-databases" class="anchor" aria-hidden="true" href="#supported-databases"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Supported databases&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Postgres&lt;/li&gt;
&lt;li&gt;MySQL&lt;/li&gt;
&lt;li&gt;Druid&lt;/li&gt;
&lt;li&gt;SQL Server&lt;/li&gt;
&lt;li&gt;Redshift&lt;/li&gt;
&lt;li&gt;MongoDB&lt;/li&gt;
&lt;li&gt;Google BigQuery&lt;/li&gt;
&lt;li&gt;SQLite&lt;/li&gt;
&lt;li&gt;H2&lt;/li&gt;
&lt;li&gt;Oracle&lt;/li&gt;
&lt;li&gt;Vertica&lt;/li&gt;
&lt;li&gt;Presto&lt;/li&gt;
&lt;li&gt;Snowflake&lt;/li&gt;
&lt;li&gt;SparkSQL&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Don't see your favorite database? File an issue to let us know.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installation&lt;/h2&gt;
&lt;p&gt;Metabase can be run just about anywhere so checkout our &lt;a href="https://metabase.com/docs/latest/operations-guide/start.html#installing-and-running-metabase" rel="nofollow"&gt;Installation Guides&lt;/a&gt; for detailed instructions for various deployments.  Here's the TLDR:&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-docker" class="anchor" aria-hidden="true" href="#docker"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Docker&lt;/h3&gt;
&lt;p&gt;To run Metabase via Docker, just type&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;docker run -d -p 3000:3000 --name metabase metabase/metabase&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-jvm-jar" class="anchor" aria-hidden="true" href="#jvm-jar"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;JVM Jar&lt;/h3&gt;
&lt;p&gt;To run the jar you will need to have a Java Runtime installed. As a quick check to see if you system already has one, try&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;java -version&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you see something like&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;java version &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;1.8.0_51&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
Java(TM) SE Runtime Environment (build 1.8.0_51-b16)
Java HotSpot(TM) 64-Bit Server VM (build 25.51-b03, mixed mode)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;you are good to go. Otherwise, download the Java Runtime Environment at &lt;a href="http://java.com/" rel="nofollow"&gt;http://java.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Go to the &lt;a href="https://metabase.com/start/" rel="nofollow"&gt;Metabase Download Page&lt;/a&gt; and download the current build. Place the downloaded jar into a newly created directory (as it will create some files when it is run), and run it on the command line:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;java -jar metabase.jar&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, open a browser and go to &lt;a href="http://localhost:3000" rel="nofollow"&gt;http://localhost:3000&lt;/a&gt; , and you will be asked a set of questions that will set up a user account, and then you can add a database connection. For this to work you will need to get some information about which database you want to connect to, such as the Host Name and Port that it is running on, the Database Name and the User and Password that you will be using.&lt;/p&gt;
&lt;p&gt;Once you have added this connection, you will be taken into the app and you'll be ready to ask your first question.&lt;/p&gt;
&lt;p&gt;For a more detailed walkthrough, check out our &lt;a href="docs/getting-started.md"&gt;Getting Started&lt;/a&gt; guide.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-frequently-asked-questions" class="anchor" aria-hidden="true" href="#frequently-asked-questions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Frequently Asked Questions&lt;/h1&gt;
&lt;p&gt;Some questions come up over and over again. Check here first:
&lt;a href="docs/faq.md"&gt;FAQ&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-security-disclosure" class="anchor" aria-hidden="true" href="#security-disclosure"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Security Disclosure&lt;/h1&gt;
&lt;p&gt;Security is very important to us. If you discover any issue regarding security, please disclose the information responsibly by sending an email to &lt;a href="mailto:security@metabase.com"&gt;security@metabase.com&lt;/a&gt; and not by creating a GitHub issue.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-contributing" class="anchor" aria-hidden="true" href="#contributing"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contributing&lt;/h1&gt;
&lt;p&gt;To get started with a development installation of the Metabase, follow the instructions at our &lt;a href="docs/developers-guide.md"&gt;Developers Guide&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Then take a look at our &lt;a href="docs/contributing.md"&gt;Contribution Guide&lt;/a&gt; for information about our process and where you can fit in!&lt;/p&gt;
&lt;p&gt;Talk to other contributors &lt;a href="https://gitter.im/metabase/metabase" rel="nofollow"&gt;in our Gitter room&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-internationalization" class="anchor" aria-hidden="true" href="#internationalization"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Internationalization&lt;/h1&gt;
&lt;p&gt;We want Metabase to be available in as many languages as possible. See what translations are available and help contribute to internationalization using our project &lt;a href="https://poeditor.com/join/project/ynjQmwSsGh" rel="nofollow"&gt;over at POEditor&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-extending-and-deep-integrations" class="anchor" aria-hidden="true" href="#extending-and-deep-integrations"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Extending and Deep Integrations&lt;/h1&gt;
&lt;p&gt;Metabase also allows you to hit our Query API directly from Javascript to integrate the simple analytics we provide with your own application or third party services to do things like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Build moderation interfaces&lt;/li&gt;
&lt;li&gt;Export subsets of your users to third party marketing automation software&lt;/li&gt;
&lt;li&gt;Provide a specialized customer lookup application for the people in your company&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;a id="user-content-danger-zone" class="anchor" aria-hidden="true" href="#danger-zone"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Danger zone&lt;/h1&gt;
&lt;p&gt;The button below will deploy the branch where this README.md lives onto Heroku. Metabase developers use it to deploy branches of Metabase to test our PRs, etc. We DO NOT recommend you using this for production. Instead, please use a &lt;a href="https://metabase.com/start" rel="nofollow"&gt;stable build&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://heroku.com/deploy" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/83b0e95b38892b49184e07ad572c94c8038323fb/68747470733a2f2f7777772e6865726f6b7563646e2e636f6d2f6465706c6f792f627574746f6e2e737667" alt="Deploy" data-canonical-src="https://www.herokucdn.com/deploy/button.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-license" class="anchor" aria-hidden="true" href="#license"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;License&lt;/h1&gt;
&lt;p&gt;Unless otherwise noted, all Metabase source files are made available under the terms of the GNU Affero General Public License (AGPL).&lt;/p&gt;
&lt;p&gt;See &lt;a href="https://github.com/metabase/metabase/blob/master/LICENSE.txt"&gt;LICENSE.txt&lt;/a&gt; for details and exceptions.&lt;/p&gt;
&lt;p&gt;Unless otherwise noted, all files Â© 2019 Metabase, Inc.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>metabase</author><guid isPermaLink="false">https://github.com/metabase/metabase</guid><pubDate>Sun, 05 Jan 2020 00:05:00 GMT</pubDate></item><item><title>borkdude/sci #6 in Clojure, Today</title><link>https://github.com/borkdude/sci</link><description>&lt;p&gt;&lt;i&gt;Small Clojure Interpreter&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="logo/logo-300dpi.png"&gt;&lt;img src="logo/logo-300dpi.png" width="100px" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://circleci.com/gh/borkdude/sci/tree/master" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/08cd8ab8d5d58945077f30e61c25704ea421937d/68747470733a2f2f636972636c6563692e636f6d2f67682f626f726b647564652f7363692f747265652f6d61737465722e7376673f7374796c653d736869656c64" alt="CircleCI" data-canonical-src="https://circleci.com/gh/borkdude/sci/tree/master.svg?style=shield" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://clojars.org/borkdude/sci" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/80f41ff368767c16dfb2695d1f472b65677dfda6/68747470733a2f2f696d672e736869656c64732e696f2f636c6f6a6172732f762f626f726b647564652f7363692e737667" alt="Clojars Project" data-canonical-src="https://img.shields.io/clojars/v/borkdude/sci.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://www.npmjs.com/package/@borkdude/sci" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/ed34181aef3828517d477b396728f60dd5f5f30a/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f40626f726b647564652f736369" alt="NPM Project" data-canonical-src="https://img.shields.io/npm/v/@borkdude/sci" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://cljdoc.org/d/borkdude/sci/CURRENT" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/2f28e762ac4c9154a34ec7fcbffa8dc245d39624/68747470733a2f2f636c6a646f632e6f72672f62616467652f626f726b647564652f736369" alt="cljdoc badge" data-canonical-src="https://cljdoc.org/badge/borkdude/sci" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://app.slack.com/client/T03RZGPFR/CLX41ASCS" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/5d32eacbaaf4d06e17885b5da976a2d0cb18238e/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f736c61636b2d6a6f696e5f636861742d627269676874677265656e2e737667" alt="project chat" data-canonical-src="https://img.shields.io/badge/slack-join_chat-brightgreen.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Small Clojure Interpreter&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
    &lt;p lang="en" dir="ltr"&gt;I want a limited dialect of Clojure for a single-purpose, scripted application. Sci will fit nicely.&lt;/p&gt;
    â€”
    &lt;a href="https://twitter.com/tiagoluchini/status/1193144124142211073" rel="nofollow"&gt;@tiagoluchini&lt;/a&gt;
&lt;/blockquote&gt;
&lt;h2&gt;&lt;a id="user-content-quickstart" class="anchor" aria-hidden="true" href="#quickstart"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Quickstart&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-use-from-clojurescript" class="anchor" aria-hidden="true" href="#use-from-clojurescript"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Use from Clojure(Script)&lt;/h3&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;require&lt;/span&gt; '[sci.core &lt;span class="pl-c1"&gt;:as&lt;/span&gt; sci])
(&lt;span class="pl-en"&gt;sci/eval-string&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;(inc 1)&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) =&amp;gt; &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; 2&lt;/span&gt;
(&lt;span class="pl-en"&gt;sci/eval-string&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;(inc x)&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; {&lt;span class="pl-c1"&gt;:bindings&lt;/span&gt; {'x &lt;span class="pl-c1"&gt;2&lt;/span&gt;}}) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;;=&amp;gt; 3&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href="#Usage"&gt;More&lt;/a&gt; on how to use sci from Clojure.
Use from &lt;a href="#use-from-javaScript"&gt;JavaScript&lt;/a&gt;. Use from &lt;a href="#use-from-java"&gt;Java&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-rationale" class="anchor" aria-hidden="true" href="#rationale"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Rationale&lt;/h2&gt;
&lt;p&gt;You want to evaluate code from user input, or use Clojure for a DSL inside
configuration files, but &lt;code&gt;eval&lt;/code&gt; isn't safe or simply doesn't work.&lt;/p&gt;
&lt;p&gt;This library works with:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Clojure on the JVM&lt;/li&gt;
&lt;li&gt;Clojure compiled with GraalVM native&lt;/li&gt;
&lt;li&gt;ClojureScript, even when compiled with &lt;code&gt;:advanced&lt;/code&gt;, and (as a consequence) JavaScript&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It is used in:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/borkdude/babashka"&gt;Babashka&lt;/a&gt;. A Clojure scripting tool that plays well with Bash.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/retrogradeorbit/bootleg"&gt;Bootleg&lt;/a&gt;. An HTML templating CLI.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/liquidz/dad"&gt;Dad&lt;/a&gt;. A configuration management tool.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dundalek/closh"&gt;Closh&lt;/a&gt;. Bash-like shell based on Clojure. GraalVM port is work in progress.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/borkdude/jet"&gt;Jet&lt;/a&gt;. CLI to convert between JSON, EDN and Transit.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/metosin/malli"&gt;Malli&lt;/a&gt;. Plain data Schemas for Clojure/Script.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-status" class="anchor" aria-hidden="true" href="#status"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Status&lt;/h2&gt;
&lt;p&gt;Experimental. Breaking changes are expected to happen at this phase.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installation&lt;/h2&gt;
&lt;p&gt;Use as a dependency:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://clojars.org/borkdude/sci" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/80f41ff368767c16dfb2695d1f472b65677dfda6/68747470733a2f2f696d672e736869656c64732e696f2f636c6f6a6172732f762f626f726b647564652f7363692e737667" alt="Clojars Project" data-canonical-src="https://img.shields.io/clojars/v/borkdude/sci.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://www.npmjs.com/package/@borkdude/sci" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/ed34181aef3828517d477b396728f60dd5f5f30a/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f40626f726b647564652f736369" alt="NPM Project" data-canonical-src="https://img.shields.io/npm/v/@borkdude/sci" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-api-docs" class="anchor" aria-hidden="true" href="#api-docs"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;API docs&lt;/h2&gt;
&lt;p&gt;For Clojure, see the generated &lt;a href="https://borkdude.github.io/sci/doc/codox" rel="nofollow"&gt;codox&lt;/a&gt;
documentation. For Java, see the generated &lt;a href="https://borkdude.github.io/sci/doc/javadoc/index.html" rel="nofollow"&gt;Java
documentation&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Usage&lt;/h2&gt;
&lt;p&gt;Currently the only API function is &lt;code&gt;sci.core/eval-string&lt;/code&gt; which takes a string
to evaluate and an optional options map.&lt;/p&gt;
&lt;p&gt;In &lt;code&gt;sci&lt;/code&gt;, &lt;code&gt;defn&lt;/code&gt; does not mutate the outside world, only the evaluation
context inside a call to &lt;code&gt;sci/eval-string&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;By default &lt;code&gt;sci&lt;/code&gt; only enables access to the pure non-side-effecting functions in
Clojure.  More functions can be enabled, at your own risk, using &lt;code&gt;:bindings&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;user=&amp;gt; (&lt;span class="pl-k"&gt;require&lt;/span&gt; '[sci.core &lt;span class="pl-c1"&gt;:as&lt;/span&gt; sci])
user=&amp;gt; (&lt;span class="pl-en"&gt;sci/eval-string&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;(println &lt;span class="pl-cce"&gt;\"&lt;/span&gt;hello&lt;span class="pl-cce"&gt;\"&lt;/span&gt;)&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; {&lt;span class="pl-c1"&gt;:bindings&lt;/span&gt; {'println println}})
hello
&lt;span class="pl-c1"&gt;nil&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It is also possible to provide namespaces which can be required:&lt;/p&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;user=&amp;gt; (&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-e"&gt;opts&lt;/span&gt; {&lt;span class="pl-c1"&gt;:namespaces&lt;/span&gt; {'foo.bar {'println println}}})
user=&amp;gt; (&lt;span class="pl-en"&gt;sci/eval-string&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;(require '[foo.bar :as lib]) (lib/println &lt;span class="pl-cce"&gt;\"&lt;/span&gt;hello&lt;span class="pl-cce"&gt;\"&lt;/span&gt;)&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; opts)
hello
&lt;span class="pl-c1"&gt;nil&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can provide a list of allowed symbols. Using other symbols causes an exception:&lt;/p&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;user=&amp;gt; (&lt;span class="pl-en"&gt;sci/eval-string&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;(inc 1)&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; {&lt;span class="pl-c1"&gt;:allow&lt;/span&gt; '[inc]})
&lt;span class="pl-c1"&gt;2&lt;/span&gt;
user=&amp;gt; (&lt;span class="pl-en"&gt;sci/eval-string&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;(dec 1)&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; {&lt;span class="pl-c1"&gt;:allow&lt;/span&gt; '[inc]})
ExceptionInfo dec is not allowed! [at line &lt;span class="pl-c1"&gt;1&lt;/span&gt;, column &lt;span class="pl-c1"&gt;2&lt;/span&gt;]  clojure.core/ex-info (&lt;span class="pl-en"&gt;core.clj:4739&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Providing a list of disallowed symbols has the opposite effect:&lt;/p&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;user=&amp;gt; (&lt;span class="pl-en"&gt;sci/eval-string&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;(inc 1)&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; {&lt;span class="pl-c1"&gt;:deny&lt;/span&gt; '[inc]})
ExceptionInfo inc is not allowed! [at line &lt;span class="pl-c1"&gt;1&lt;/span&gt;, column &lt;span class="pl-c1"&gt;2&lt;/span&gt;]  clojure.core/ex-info (&lt;span class="pl-en"&gt;core.clj:4739&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Preventing forever lasting evaluation of infinite sequences can be achieved with
&lt;code&gt;:realize-max&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;user=&amp;gt; (&lt;span class="pl-en"&gt;sci/eval-string&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;(vec (range))&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; {&lt;span class="pl-c1"&gt;:realize-max&lt;/span&gt; &lt;span class="pl-c1"&gt;10&lt;/span&gt;})
ExceptionInfo Maximum number of elements realized: &lt;span class="pl-c1"&gt;10&lt;/span&gt; [at line &lt;span class="pl-c1"&gt;1&lt;/span&gt;, column &lt;span class="pl-c1"&gt;1&lt;/span&gt;]  clojure.core/ex-info (&lt;span class="pl-en"&gt;core.clj:4739&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The preset &lt;code&gt;:termination-safe&lt;/code&gt;, which is currently &lt;code&gt;{:deny '[loop recur trampoline] :realize-max 100}&lt;/code&gt;, is helpful for making expressions terminate:&lt;/p&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;user=&amp;gt; (&lt;span class="pl-en"&gt;sci/eval-string&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;(loop [] (recur))&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; {&lt;span class="pl-c1"&gt;:preset&lt;/span&gt; &lt;span class="pl-c1"&gt;:termination-safe&lt;/span&gt;})
ExceptionInfo &lt;span class="pl-k"&gt;loop&lt;/span&gt; is not allowed! [at line &lt;span class="pl-c1"&gt;1&lt;/span&gt;, column &lt;span class="pl-c1"&gt;2&lt;/span&gt;]  clojure.core/ex-info (&lt;span class="pl-en"&gt;core.clj:4739&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Providing a macro as a binding can be done by providing a normal function that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;has &lt;code&gt;:sci/macro&lt;/code&gt; on the metadata set to &lt;code&gt;true&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;has two extra arguments at the start for &lt;code&gt;&amp;amp;form&lt;/code&gt; and &lt;code&gt;&amp;amp;env&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;user=&amp;gt; (&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-e"&gt;do-twice&lt;/span&gt; ^:sci/macro (&lt;span class="pl-k"&gt;fn&lt;/span&gt; [_&amp;amp;env _&amp;amp;form x] (&lt;span class="pl-en"&gt;list&lt;/span&gt; 'do x x)))
user=&amp;gt; (&lt;span class="pl-en"&gt;sci/eval-string&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;(do-twice (f))&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; {&lt;span class="pl-c1"&gt;:bindings&lt;/span&gt; {'do-twice do-twice 'f #(&lt;span class="pl-en"&gt;println&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;hello&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)}})
hello
hello
&lt;span class="pl-c1"&gt;nil&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-vars" class="anchor" aria-hidden="true" href="#vars"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Vars&lt;/h2&gt;
&lt;p&gt;Sci has a var type, distinguished from Clojure vars. In a sci program these vars
are created with &lt;code&gt;def&lt;/code&gt; and &lt;code&gt;defn&lt;/code&gt; just like in normal Clojure:&lt;/p&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-e"&gt;x&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;)
(&lt;span class="pl-k"&gt;defn&lt;/span&gt; &lt;span class="pl-e"&gt;foo&lt;/span&gt; [] &lt;span class="pl-e"&gt;x&lt;/span&gt;)
(&lt;span class="pl-en"&gt;foo&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;;=&amp;gt; 1&lt;/span&gt;
(&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-e"&gt;x&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;)
(&lt;span class="pl-en"&gt;foo&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;;=&amp;gt; 2&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Dynamic vars with thread-local bindings are also supported:&lt;/p&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;def&lt;/span&gt; ^:dynamic *x* &lt;span class="pl-c1"&gt;1&lt;/span&gt;)
(&lt;span class="pl-k"&gt;binding&lt;/span&gt; [*x* &lt;span class="pl-c1"&gt;10&lt;/span&gt;] x) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;;=&amp;gt; 10&lt;/span&gt;
(&lt;span class="pl-k"&gt;binding&lt;/span&gt; [*x* &lt;span class="pl-c1"&gt;10&lt;/span&gt;] (&lt;span class="pl-en"&gt;set!&lt;/span&gt; x &lt;span class="pl-c1"&gt;12&lt;/span&gt;) x) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;;=&amp;gt; 12&lt;/span&gt;
x &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;;=&amp;gt; 1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Pre-creating vars that can be used in a sci program can be done using
&lt;code&gt;sci/new-var&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-e"&gt;x&lt;/span&gt; (&lt;span class="pl-en"&gt;sci/new-var&lt;/span&gt; 'x &lt;span class="pl-c1"&gt;10&lt;/span&gt;))
(&lt;span class="pl-en"&gt;sci/eval-string&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;(inc x)&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; {&lt;span class="pl-c1"&gt;:bindings&lt;/span&gt; {'x x}}) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;;=&amp;gt; 11&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To create a dynamic sci var you can set metadata or use &lt;code&gt;sci/new-dynamic-var&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;require&lt;/span&gt; '[sci.core] &lt;span class="pl-c1"&gt;:as&lt;/span&gt; sci)
(&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-e"&gt;x1&lt;/span&gt; (&lt;span class="pl-en"&gt;sci/new-var&lt;/span&gt; 'x &lt;span class="pl-c1"&gt;10&lt;/span&gt; {&lt;span class="pl-c1"&gt;:dynamic&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;}))
(&lt;span class="pl-en"&gt;sci/eval-string&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;(binding [*x* 12] (inc *x*))&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; {&lt;span class="pl-c1"&gt;:bindings&lt;/span&gt; {'*x* x1}}) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;;=&amp;gt; 13&lt;/span&gt;
(&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-e"&gt;x2&lt;/span&gt; (&lt;span class="pl-en"&gt;sci/new-dynamic-var&lt;/span&gt; 'x &lt;span class="pl-c1"&gt;10&lt;/span&gt;))
(&lt;span class="pl-en"&gt;sci/eval-string&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;(binding [*x* 12] (inc *x*))&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; {&lt;span class="pl-c1"&gt;:bindings&lt;/span&gt; {'*x* x2}}) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;;=&amp;gt; 13&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Pre-created sci vars can also be externally rebound:&lt;/p&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-e"&gt;x&lt;/span&gt; (&lt;span class="pl-en"&gt;sci/new-dynamic-var&lt;/span&gt; 'x &lt;span class="pl-c1"&gt;10&lt;/span&gt;))
(&lt;span class="pl-en"&gt;sci/binding&lt;/span&gt; [x &lt;span class="pl-c1"&gt;11&lt;/span&gt;] (&lt;span class="pl-en"&gt;sci/eval-string&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;(inc *x*)&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; {&lt;span class="pl-c1"&gt;:bindings&lt;/span&gt; {'*x* x2}})) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;;=&amp;gt; 11&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The dynamic vars &lt;code&gt;*in*&lt;/code&gt;, &lt;code&gt;*out*&lt;/code&gt;, &lt;code&gt;*err*&lt;/code&gt; in a sci program correspond to the
dynamic sci vars &lt;code&gt;sci.core/in&lt;/code&gt;, &lt;code&gt;sci.core/out&lt;/code&gt; and &lt;code&gt;sci.core/err&lt;/code&gt; in API. These
vars can be rebound as well:&lt;/p&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-e"&gt;sw&lt;/span&gt; (&lt;span class="pl-en"&gt;java.io.StringWriter.&lt;/span&gt;))
(&lt;span class="pl-en"&gt;sci/binding&lt;/span&gt; [sci/out sw] (&lt;span class="pl-en"&gt;sci/eval-string&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;(println &lt;span class="pl-cce"&gt;\"&lt;/span&gt;hello&lt;span class="pl-cce"&gt;\"&lt;/span&gt;)&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;;=&amp;gt; nil&lt;/span&gt;
(&lt;span class="pl-en"&gt;str&lt;/span&gt; sw) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;;=&amp;gt; "hello\n"&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A shorthand for rebinding &lt;code&gt;sci/out&lt;/code&gt; is &lt;code&gt;sci/with-out-str&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;(&lt;span class="pl-en"&gt;sci/with-out-str&lt;/span&gt; (&lt;span class="pl-en"&gt;sci/eval-string&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;(println &lt;span class="pl-cce"&gt;\"&lt;/span&gt;hello&lt;span class="pl-cce"&gt;\"&lt;/span&gt;)&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;;=&amp;gt; "hello\n"&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-stdoud-and-stdin" class="anchor" aria-hidden="true" href="#stdoud-and-stdin"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Stdoud and stdin&lt;/h2&gt;
&lt;p&gt;To enable printing to &lt;code&gt;stdoud&lt;/code&gt; and reading from &lt;code&gt;stdin&lt;/code&gt; you can bind
&lt;code&gt;sci.core/out&lt;/code&gt; and &lt;code&gt;sci.core/in&lt;/code&gt; to &lt;code&gt;*out*&lt;/code&gt; and &lt;code&gt;*in*&lt;/code&gt; respectively:&lt;/p&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;(&lt;span class="pl-en"&gt;sci/binding&lt;/span&gt; [sci/out *out*
              sci/in *in*]
  (&lt;span class="pl-en"&gt;sci/eval-string&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;(print &lt;span class="pl-cce"&gt;\"&lt;/span&gt;Type your name!&lt;span class="pl-cce"&gt;\n&lt;/span&gt;&amp;gt; &lt;span class="pl-cce"&gt;\"&lt;/span&gt;)&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
  (&lt;span class="pl-en"&gt;sci/eval-string&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;(flush)&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
  (&lt;span class="pl-k"&gt;let&lt;/span&gt; [name (&lt;span class="pl-en"&gt;sci/eval-string&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;(read-line)&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)]
    (&lt;span class="pl-en"&gt;sci/eval-string&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;(printf &lt;span class="pl-cce"&gt;\"&lt;/span&gt;Hello %s!&lt;span class="pl-cce"&gt;\"&lt;/span&gt; name)&lt;/span&gt;
&lt;span class="pl-s"&gt;                      (flush)&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
                     {&lt;span class="pl-c1"&gt;:bindings&lt;/span&gt; {'name name}})))
Type your name!
&amp;gt; Michiel
Hello Michiel!&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-futures" class="anchor" aria-hidden="true" href="#futures"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Futures&lt;/h2&gt;
&lt;p&gt;Creating threads with &lt;code&gt;future&lt;/code&gt; and &lt;code&gt;pmap&lt;/code&gt; is disabled by default, but can be
enabled by requiring &lt;code&gt;sci.addons&lt;/code&gt; and applying the &lt;code&gt;sci.addons/future&lt;/code&gt; function
to the sci options:&lt;/p&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;ns&lt;/span&gt; &lt;span class="pl-e"&gt;my.sci.app&lt;/span&gt;
  (&lt;span class="pl-c1"&gt;:require&lt;/span&gt;
   [sci.core &lt;span class="pl-c1"&gt;:as&lt;/span&gt; sci]
   [sci.addons &lt;span class="pl-c1"&gt;:as&lt;/span&gt; addons]))

(&lt;span class="pl-en"&gt;sci/eval-string&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;@(future (inc x))&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
                 (&lt;span class="pl-en"&gt;-&amp;gt;&lt;/span&gt; {&lt;span class="pl-c1"&gt;:bindings&lt;/span&gt; {'x &lt;span class="pl-c1"&gt;1&lt;/span&gt;}}
                     (&lt;span class="pl-en"&gt;addons/future&lt;/span&gt;)))
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;;=&amp;gt; 2&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For conveying thread-local sci bindings to an external &lt;code&gt;future&lt;/code&gt; use
&lt;code&gt;sci.core/future&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;ns&lt;/span&gt; &lt;span class="pl-e"&gt;my.sci.app&lt;/span&gt;
  (&lt;span class="pl-c1"&gt;:require&lt;/span&gt;
   [sci.core &lt;span class="pl-c1"&gt;:as&lt;/span&gt; sci]
   [sci.addons &lt;span class="pl-c1"&gt;:as&lt;/span&gt; addons]))

(&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-e"&gt;x&lt;/span&gt; (&lt;span class="pl-en"&gt;sci/new-dynamic-var&lt;/span&gt; 'x &lt;span class="pl-c1"&gt;10&lt;/span&gt;))

@(&lt;span class="pl-en"&gt;sci/binding&lt;/span&gt; [x &lt;span class="pl-c1"&gt;11&lt;/span&gt;]
   (&lt;span class="pl-en"&gt;sci/future&lt;/span&gt;
     (&lt;span class="pl-en"&gt;sci/eval-string&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;@(future (inc x))&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
                      (&lt;span class="pl-en"&gt;-&amp;gt;&lt;/span&gt; {&lt;span class="pl-c1"&gt;:bindings&lt;/span&gt; {'x @x}}
                          (&lt;span class="pl-en"&gt;addons/future&lt;/span&gt;)))))
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;;=&amp;gt; 12&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-classes" class="anchor" aria-hidden="true" href="#classes"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Classes&lt;/h2&gt;
&lt;p&gt;Adding support for classes is done via the &lt;code&gt;:classes&lt;/code&gt; option:&lt;/p&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;(&lt;span class="pl-en"&gt;sci/eval-string&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;(java.util.UUID/randomUUID)&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  {&lt;span class="pl-c1"&gt;:classes&lt;/span&gt; {'java.util.UUID java.util.UUID}})
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;;=&amp;gt; #uuid "312ba519-37e2-4109-b164-97fb140b57b0"&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To make this work with &lt;code&gt;GraalVM&lt;/code&gt; you will also need to add an entry to your
&lt;a href="https://github.com/oracle/graal/blob/master/substratevm/REFLECTION.md"&gt;reflection
config&lt;/a&gt;
for this class. Also see &lt;a href="reflection.json"&gt;&lt;code&gt;reflection.json&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-feature-parity" class="anchor" aria-hidden="true" href="#feature-parity"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Feature parity&lt;/h2&gt;
&lt;p&gt;Currently the following special forms/macros are supported: &lt;code&gt;def&lt;/code&gt;, &lt;code&gt;fn&lt;/code&gt;,
function literals (&lt;code&gt;#(inc %)&lt;/code&gt;), &lt;code&gt;defn&lt;/code&gt;, &lt;code&gt;quote&lt;/code&gt;, &lt;code&gt;do&lt;/code&gt;,&lt;code&gt;if&lt;/code&gt;, &lt;code&gt;if-let&lt;/code&gt;, &lt;code&gt;if-not&lt;/code&gt;,
&lt;code&gt;when&lt;/code&gt;, &lt;code&gt;when-let&lt;/code&gt;, &lt;code&gt;when-not&lt;/code&gt;, &lt;code&gt;cond&lt;/code&gt;, &lt;code&gt;let&lt;/code&gt;, &lt;code&gt;letfn&lt;/code&gt;, &lt;code&gt;and&lt;/code&gt;, &lt;code&gt;or&lt;/code&gt;, &lt;code&gt;-&amp;gt;&lt;/code&gt;,
&lt;code&gt;-&amp;gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;as-&amp;gt;&lt;/code&gt;, &lt;code&gt;comment&lt;/code&gt;, &lt;code&gt;loop&lt;/code&gt;, &lt;code&gt;lazy-seq&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;doseq&lt;/code&gt;, &lt;code&gt;case&lt;/code&gt;,
&lt;code&gt;try/catch/finally&lt;/code&gt;, &lt;code&gt;declare&lt;/code&gt;, &lt;code&gt;cond-&amp;gt;&lt;/code&gt;, &lt;code&gt;cond-&amp;gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;some-&amp;gt;&lt;/code&gt;, &lt;code&gt;require&lt;/code&gt;,
&lt;code&gt;import&lt;/code&gt;, &lt;code&gt;in-ns&lt;/code&gt;, &lt;code&gt;ns&lt;/code&gt;, &lt;code&gt;binding&lt;/code&gt;, &lt;code&gt;with-out-str&lt;/code&gt;, &lt;code&gt;with-in-str&lt;/code&gt;, &lt;code&gt;future&lt;/code&gt;. Sci
also supports user defined macros.&lt;/p&gt;
&lt;p&gt;More examples of what is currently possible can be found at
&lt;a href="https://github.com/borkdude/babashka"&gt;babashka&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you miss something, feel free to post an issue.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-caveats" class="anchor" aria-hidden="true" href="#caveats"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Caveats&lt;/h2&gt;
&lt;p&gt;To make the &lt;code&gt;rand-*&lt;/code&gt; functions behave well when compiling to a GraalVM native binary, use this setting:&lt;/p&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;--initialize-at-run-time=java.lang.Math\$RandomNumberGeneratorHolder&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-use-from-javascript" class="anchor" aria-hidden="true" href="#use-from-javascript"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Use from JavaScript&lt;/h2&gt;
&lt;div class="highlight highlight-source-js"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-k"&gt;const&lt;/span&gt; { &lt;span class="pl-c1"&gt;evalString&lt;/span&gt; } &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;require&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;@borkdude/sci&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;);
&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-k"&gt;const&lt;/span&gt; &lt;span class="pl-c1"&gt;opts&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; {bindings&lt;span class="pl-k"&gt;:&lt;/span&gt; {&lt;span class="pl-en"&gt;f&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-k"&gt;function&lt;/span&gt;() { &lt;span class="pl-en"&gt;console&lt;/span&gt;.&lt;span class="pl-c1"&gt;log&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;hello&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;); }}};
&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;evalString&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;(dotimes [i 2] (f))&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, opts);
hello
hello&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note for JavaScript users: the JS API is similar to the Clojure one. Instead of
symbols and keywords it expects strings. Instead of kebab-case, use
camelCase. Read &lt;a href="#Usage"&gt;here&lt;/a&gt; how to use sci from Clojure.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-use-from-java" class="anchor" aria-hidden="true" href="#use-from-java"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Use from Java&lt;/h2&gt;
&lt;div class="highlight highlight-source-java"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-smi"&gt;borkdude.sci.*&lt;/span&gt;;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-smi"&gt;borkdude.sci.options.*&lt;/span&gt;;

&lt;span class="pl-smi"&gt;Namespace&lt;/span&gt; fooBar &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;new&lt;/span&gt; &lt;span class="pl-smi"&gt;Namespace&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;foo.bar&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;);
fooBar&lt;span class="pl-k"&gt;.&lt;/span&gt;addVar(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;x&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;1&lt;/span&gt;);
&lt;span class="pl-smi"&gt;Options&lt;/span&gt; opts &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;new&lt;/span&gt; &lt;span class="pl-smi"&gt;Options&lt;/span&gt;()&lt;span class="pl-k"&gt;.&lt;/span&gt;addNamespace(fooBar);
&lt;span class="pl-smi"&gt;Sci&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;evalString(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;foo.bar/x&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, opts); &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; returns 1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note for Java users: the Java API for is conceptually similar to the Clojure
one, but made more idiomatic for Java users. Check the generated &lt;a href="https://borkdude.github.io/sci/doc/javadoc/index.html" rel="nofollow"&gt;Java
documentation&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-test" class="anchor" aria-hidden="true" href="#test"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Test&lt;/h2&gt;
&lt;p&gt;Required: &lt;code&gt;lein&lt;/code&gt;, the &lt;code&gt;clojure&lt;/code&gt; CLI and GraalVM.&lt;/p&gt;
&lt;p&gt;To succesfully run the GraalVM tests, you will have to compile the binary first
with &lt;code&gt;script/compile&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To run all tests:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;script/test/all
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For running individual tests, see the scripts in &lt;code&gt;script/test&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-thanks" class="anchor" aria-hidden="true" href="#thanks"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Thanks&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.adgoji.com/" rel="nofollow"&gt;adgoji&lt;/a&gt; for financial support&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-license" class="anchor" aria-hidden="true" href="#license"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;License&lt;/h2&gt;
&lt;p&gt;Copyright Â© 2019 Michiel Borkent&lt;/p&gt;
&lt;p&gt;Distributed under the Eclipse Public License 1.0. This project contains code
from Clojure and ClojureScript which are also licensed under the EPL 1.0. See
LICENSE.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>borkdude</author><guid isPermaLink="false">https://github.com/borkdude/sci</guid><pubDate>Sun, 05 Jan 2020 00:06:00 GMT</pubDate></item><item><title>day8/re-frame #7 in Clojure, Today</title><link>https://github.com/day8/re-frame</link><description>&lt;p&gt;&lt;i&gt;A Reagent Framework For Writing SPAs, in Clojurescript.&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="/images/logo/re-frame_128w.png?raw=true"&gt;&lt;img src="/images/logo/re-frame_128w.png?raw=true" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-derived-values-flowing" class="anchor" aria-hidden="true" href="#derived-values-flowing"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Derived Values, Flowing&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;This, milord, is my family's axe. We have owned it for almost nine hundred years, see. Of course,
sometimes it needed a new blade. And sometimes it has required a new handle, new designs on the
metalwork, a little refreshing of the ornamentation ... but is this not the nine hundred-year-old
axe of my family? And because it has changed gently over time, it is still a pretty good axe,
y'know. Pretty good.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;-- Terry Pratchett, The Fifth Elephant &lt;br&gt;
Â Â Â  reflecting on identity, flow and derived values  (aka &lt;a href="https://en.wikipedia.org/wiki/Ship_of_Theseus" rel="nofollow"&gt;The Ship of Theseus&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://github.com/day8/re-frame/actions?workflow=ci"&gt;&lt;img src="https://github.com/day8/re-frame/workflows/ci/badge.svg" alt="CI" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://github.com/day8/re-frame/actions?workflow=cd"&gt;&lt;img src="https://github.com/day8/re-frame/workflows/cd/badge.svg" alt="CD" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://github.com/day8/re-frame/tags"&gt;&lt;img src="https://camo.githubusercontent.com/7d3c19c3058ac25e469a26c6a0819b07a32b019b/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f762f7461672f646179382f72652d6672616d653f7374796c653d666c6174" alt="GitHub tag (latest by date)" data-canonical-src="https://img.shields.io/github/v/tag/day8/re-frame?style=flat" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://clojars.org/re-frame" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/bc7eb06028ccf73b1a2f788e022e3ff28061cd12/68747470733a2f2f696d672e736869656c64732e696f2f636c6f6a6172732f762f72652d6672616d652e737667" alt="Clojars Project" data-canonical-src="https://img.shields.io/clojars/v/re-frame.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://github.com/day8/re-frame/issues"&gt;&lt;img src="https://camo.githubusercontent.com/2d137905516dc886ce38ece8e8df3d49a993da29/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732d7261772f646179382f72652d6672616d653f7374796c653d666c6174" alt="GitHub issues" data-canonical-src="https://img.shields.io/github/issues-raw/day8/re-frame?style=flat" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://github.com/day8/re-frame/pulls"&gt;&lt;img src="https://camo.githubusercontent.com/d7e5f10e0a9d7b72debdcc642f77efe7301dc01b/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732d70722f646179382f72652d6672616d65" alt="GitHub pull requests" data-canonical-src="https://img.shields.io/github/issues-pr/day8/re-frame" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="license.txt"&gt;&lt;img src="https://camo.githubusercontent.com/498f19805b2c1326abfd0f122bb670d2929aa987/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f646179382f72652d6672616d652e737667" alt="License" data-canonical-src="https://img.shields.io/github/license/day8/re-frame.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-re-frame" class="anchor" aria-hidden="true" href="#re-frame"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;re-frame&lt;/h2&gt;
&lt;p&gt;re-frame is a pattern for writing &lt;a href="http://en.wikipedia.org/wiki/Single-page_application" rel="nofollow"&gt;SPAs&lt;/a&gt; in ClojureScript, using &lt;a href="http://reagent-project.github.io/" rel="nofollow"&gt;Reagent&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;McCoy might report "It's MVC, Jim, but not as we know it".  And you would respond
"McCoy, you trouble maker, why even mention an OO pattern?
re-frame is a &lt;strong&gt;functional framework&lt;/strong&gt;."&lt;/p&gt;
&lt;p&gt;Being a functional framework, it is about two things: data, and the functions
which transform that data.  And, because it is a reactive framework, the &lt;a href="https://www.youtube.com/watch?v=ZgqFlowyfTA&amp;amp;t=80" rel="nofollow"&gt;"data coordinates the functions"&lt;/a&gt; (and not the other way around).&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-why-should-you-care" class="anchor" aria-hidden="true" href="#why-should-you-care"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Why Should You Care?&lt;/h2&gt;
&lt;p&gt;Perhaps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You want to develop an &lt;a href="http://en.wikipedia.org/wiki/Single-page_application" rel="nofollow"&gt;SPA&lt;/a&gt; in ClojureScript, and you are looking for a framework.&lt;/li&gt;
&lt;li&gt;You believe Facebook did something magnificent when it created React, and
you are curious about the further implications. Is the combination of
&lt;code&gt;reactive programming&lt;/code&gt;, &lt;code&gt;functional programming&lt;/code&gt; and &lt;code&gt;immutable data&lt;/code&gt; going to
&lt;strong&gt;completely change everything&lt;/strong&gt;?  And, if so, what would that look like in a language
that embraces those paradigms?&lt;/li&gt;
&lt;li&gt;You're taking a &lt;a href="http://www.eli.sdsu.edu/courses/fall15/cs696/index.html" rel="nofollow"&gt;Functional Design and Programming course&lt;/a&gt; at San Diego State University
and you have a re-frame/reagent assignment due.  You've left the reading a bit late, right?&lt;/li&gt;
&lt;li&gt;You know Redux, Elm, Cycle.js or Pux and you're
interested in a ClojureScript implementation.
In this space, re-frame is very old, hopefully in a Gandalf kind of way.
First designed in Dec 2014, it even slightly pre-dates the official Elm Architecture,
although thankfully we were influenced by early-Elm concepts like &lt;code&gt;foldp&lt;/code&gt; and &lt;code&gt;lift&lt;/code&gt;, as well as
Clojure projects like &lt;a href="https://github.com/pedestal/pedestal-app"&gt;Pedestal App&lt;/a&gt;, &lt;a href="https://github.com/swannodette/om"&gt;Om&lt;/a&gt; and &lt;a href="http://hoplon.io/" rel="nofollow"&gt;Hoplon&lt;/a&gt;. Since then,
re-frame has pioneered ideas like event handler middleware,
coeffect accretion, and de-duplicated signal graphs.&lt;/li&gt;
&lt;li&gt;Which brings us to the most important point: &lt;strong&gt;re-frame is impressively buzzword compliant&lt;/strong&gt;. It has reactivity,
unidirectional data flow, pristinely pure functions,
interceptors, coeffects, conveyor belts, statechart-friendliness (FSM)
and claims an immaculate hammock conception. It also has a charming
xkcd reference (soon) and a hilarious, insiders-joke T-shirt,
ideal for conferences (in design).  What could possibly go wrong?&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;&lt;a id="user-content-it-leverages-data" class="anchor" aria-hidden="true" href="#it-leverages-data"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;It Leverages Data&lt;/h2&gt;
&lt;p&gt;You might already know that ClojureScript is a modern Lisp, and that
Lisps are &lt;strong&gt;homoiconic&lt;/strong&gt;.  If not, you do now.&lt;/p&gt;
&lt;p&gt;This homoiconic bit is significant. It means you program in a Lisp by creating and
assembling Lisp data structures. Dwell on that for a moment. You are &lt;strong&gt;programming in data&lt;/strong&gt;.
The functions which later transform data, themselves start as data.&lt;/p&gt;
&lt;p&gt;Clojure programmers place particular emphasis on the primacy of data, and
they like to meditate on aphorisms like &lt;strong&gt;data is the ultimate in late binding&lt;/strong&gt;.
(Less productively, they also like re-watching Rich Hickey videos, and wishing
their hair was darker and more curly)&lt;/p&gt;
&lt;p&gt;I cannot stress enough what a big deal this is. It may seem
like a syntax curiosity at first but, when the penny drops for
you on this, it tends to be a profound moment. And once you
understand the importance of this concept at the language level,
you naturally want to leverage similar power at the library and system levels.&lt;/p&gt;
&lt;p&gt;So, it will come as no surprise, then, to know that re-frame has a
data oriented design. Events are data. Effects are data. DOM is data.
The functions which transform data are registered and looked up via
data. Interceptors (data) are preferred over middleware (higher
order functions). Etc.&lt;/p&gt;
&lt;p&gt;And, on a related arc, re-frame applications are reactive
and that further elevates the importance of data because, in a reactive architecture,
it is the arrival of data which &lt;a href="https://www.youtube.com/watch?v=ZgqFlowyfTA&amp;amp;t=80" rel="nofollow"&gt;coordinates the calling of functions&lt;/a&gt; (and not the other way around).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Data - that's the way we roll.&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-it-is-a-loop" class="anchor" aria-hidden="true" href="#it-is-a-loop"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;It is a loop&lt;/h2&gt;
&lt;p&gt;Architecturally, re-frame implements "a perpetual loop".&lt;/p&gt;
&lt;p&gt;To build an app, you hang pure functions on certain parts of this loop,
and re-frame looks after the &lt;strong&gt;conveyance of data&lt;/strong&gt;
around the loop, into and out of the transforming functions you
provide - hence a tag line of "Derived Values, Flowing".&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-it-does-physics" class="anchor" aria-hidden="true" href="#it-does-physics"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;It does Physics&lt;/h3&gt;
&lt;p&gt;Remember this diagram from school? The water cycle, right?&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="/images/the-water-cycle.png?raw=true"&gt;&lt;img height="350px" align="right" src="/images/the-water-cycle.png?raw=true" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Two distinct stages, involving water in different phases, being acted upon
by different forces: gravity working one way, evaporation/convection the other.&lt;/p&gt;
&lt;p&gt;To understand re-frame, &lt;strong&gt;imagine data flowing around that loop instead of water&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;re-frame
provides the conveyance of the data around the loop - the equivalent of gravity, evaporation and convection.
You design what's flowing and then you hang functions off the loop at
various points to compute the data's phase changes (again, data flow coordinates code).&lt;/p&gt;
&lt;p&gt;Sure, right now, you're thinking "lazy sod - make a proper Computer Science-y diagram". But, no.
Joe Armstrong says "don't break the laws of physics" - I'm sure
you've seen the videos - and if he says to do something, you do it
(unless Rich Hickey disagrees, and says to do something else). So,
this diagram, apart from being a plausible analogy which might help
you to understand re-frame, is &lt;strong&gt;practically proof&lt;/strong&gt; it does physics.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-it-is-a-6-domino-cascade" class="anchor" aria-hidden="true" href="#it-is-a-6-domino-cascade"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;It is a 6-domino cascade&lt;/h2&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="/images/Readme/Dominoes-small.jpg?raw=true"&gt;&lt;img align="right" src="/images/Readme/Dominoes-small.jpg?raw=true" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Computationally, each iteration of the loop involves a
six domino cascade.&lt;/p&gt;
&lt;p&gt;One domino triggers the next, which triggers the next, et cetera, boom, boom, boom, until we are
back at the beginning of the loop, and the dominoes reset to attention
again, ready for the next iteration of the same cascade.&lt;/p&gt;
&lt;p&gt;The six dominoes are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Event dispatch&lt;/li&gt;
&lt;li&gt;Event handling&lt;/li&gt;
&lt;li&gt;Effect handling&lt;/li&gt;
&lt;li&gt;Query&lt;/li&gt;
&lt;li&gt;View&lt;/li&gt;
&lt;li&gt;DOM&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let's have a first look at each them.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-1st-domino---event-dispatch" class="anchor" aria-hidden="true" href="#1st-domino---event-dispatch"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1st Domino - Event Dispatch&lt;/h3&gt;
&lt;p&gt;An &lt;code&gt;event&lt;/code&gt; is sent when something happens - the user
clicks a button, or a websocket receives a new message.&lt;/p&gt;
&lt;p&gt;Without the impulse of a triggering &lt;code&gt;event&lt;/code&gt;, no six domino cascade occurs.
It is only because of &lt;code&gt;event&lt;/code&gt;s that a re-frame app is propelled,
loop iteration after loop iteration, from one state to the next.&lt;/p&gt;
&lt;p&gt;re-frame is &lt;code&gt;event&lt;/code&gt; driven.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-2nd-domino---event-handling" class="anchor" aria-hidden="true" href="#2nd-domino---event-handling"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2nd Domino - Event Handling&lt;/h3&gt;
&lt;p&gt;In response to an &lt;code&gt;event&lt;/code&gt;, an application must decide what action to take.
This is known as &lt;code&gt;event handling&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Event handler functions compute how an event should change "the world",
which is to say that they compute the &lt;code&gt;side effects&lt;/code&gt; of the event.
Or, more accurately, they compute a declarative &lt;strong&gt;description of the required
&lt;code&gt;side effects&lt;/code&gt;&lt;/strong&gt;, represented as a data structure. (So &lt;code&gt;event handlers&lt;/code&gt;
are just functions which compute data).&lt;/p&gt;
&lt;p&gt;Much of the time, an event will only cause &lt;code&gt;side effects&lt;/code&gt; to the SPA's
"application state", but sometimes the outside world must also be affected:
localstore, cookies, databases, emails, logs, etc.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-3rd-domino---effect-handling" class="anchor" aria-hidden="true" href="#3rd-domino---effect-handling"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3rd Domino - Effect Handling&lt;/h3&gt;
&lt;p&gt;In this step, the &lt;code&gt;side effects&lt;/code&gt;, returned by the previous step (as data), are actioned/performed.&lt;/p&gt;
&lt;p&gt;Now, to a functional programmer, &lt;code&gt;effects&lt;/code&gt; are scary in a
&lt;a href="https://www.google.com.au/search?q=xenomorph" rel="nofollow"&gt;xenomorph kind of way&lt;/a&gt;.
Nothing messes with functional purity
quite like the need for side effects. On the other hand, &lt;code&gt;effects&lt;/code&gt; are
marvelous because they move the app forward. Without them,
an app stays stuck in one state forever, never achieving anything.&lt;/p&gt;
&lt;p&gt;So re-frame embraces the protagonist nature of &lt;code&gt;effects&lt;/code&gt; - the entire, unruly zoo of them - but
it does so in a controlled and largely hidden way, and in a manner which is debuggable, auditable, mockable and pluggable.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-were-now-at-a-pivot-point" class="anchor" aria-hidden="true" href="#were-now-at-a-pivot-point"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;We're Now At A Pivot Point&lt;/h3&gt;
&lt;p&gt;Domino 3 just changed the world and, very often, one particular part of it: the &lt;strong&gt;application state&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;re-frame's &lt;code&gt;app state&lt;/code&gt; is held in one place - think of it like you
would an in-memory, central database for the app (details later).&lt;/p&gt;
&lt;p&gt;Any changes to &lt;code&gt;app state&lt;/code&gt; trigger the next part of the cascade
involving dominoes 4-5-6.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-theres-a-formula-for-it" class="anchor" aria-hidden="true" href="#theres-a-formula-for-it"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;There's a Formula For It&lt;/h3&gt;
&lt;p&gt;The 4-5-6 domino cascade implements the formula made famous by Facebook's ground-breaking React library:&lt;br&gt;
&lt;code&gt;v = f(s)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;A view, &lt;code&gt;v&lt;/code&gt;, is a function, &lt;code&gt;f&lt;/code&gt;, of the app state, &lt;code&gt;s&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Said another way, there are functions &lt;code&gt;f&lt;/code&gt; that compute which DOM nodes, &lt;code&gt;v&lt;/code&gt;,
should be displayed to the user when the application is in a given app state, &lt;code&gt;s&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Or, to capture the dynamics we'd say: &lt;strong&gt;over time&lt;/strong&gt;, as &lt;code&gt;s&lt;/code&gt; changes, &lt;code&gt;f&lt;/code&gt;
will be re-run each time to compute new &lt;code&gt;v&lt;/code&gt;, forever keeping &lt;code&gt;v&lt;/code&gt; up to date with the current &lt;code&gt;s&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Or, with yet another emphasis: &lt;strong&gt;over time&lt;/strong&gt; what is presented to the user changes in response to application state changes.&lt;/p&gt;
&lt;p&gt;In our case, domino 3 changes &lt;code&gt;s&lt;/code&gt;, the application state,
and, in response, dominoes 4-5-6 are concerned with re-running &lt;code&gt;f&lt;/code&gt; to compute the new &lt;code&gt;v&lt;/code&gt;
shown to the user.&lt;/p&gt;
&lt;p&gt;Except, of course, there are nuances.  For instance, there's no single &lt;code&gt;f&lt;/code&gt; to run.
There may be many functions which collectively build the overall DOM,
and only part of &lt;code&gt;s&lt;/code&gt; may change at any one time, so only part of the
&lt;code&gt;v&lt;/code&gt; (DOM) need be re-computed and updated. And some parts of &lt;code&gt;v&lt;/code&gt; might not
be showing right now.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-domino-4---query" class="anchor" aria-hidden="true" href="#domino-4---query"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Domino 4 - Query&lt;/h3&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="/images/Readme/6dominoes.png?raw=true"&gt;&lt;img align="right" src="/images/Readme/6dominoes.png?raw=true" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Domino 4 is about extracting data from "app state", and providing it
in the right format for view functions (which are Domino 5).&lt;/p&gt;
&lt;p&gt;Domino 4 is a novel and efficient de-duplicated signal graph which
runs query functions on the app state, &lt;code&gt;s&lt;/code&gt;, efficiently computing
reactive, multi-layered, "materialised views" of &lt;code&gt;s&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Relax about any unfamiliar terminology, you'll soon
see how simple the code actually is.&lt;/p&gt;
&lt;p&gt;(&lt;em&gt;&lt;code&gt;react-redux&lt;/code&gt; programmers:&lt;/em&gt; query functions serve essentially the same purpose as &lt;code&gt;mapStateToProps&lt;/code&gt;)&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-domino-5---view" class="anchor" aria-hidden="true" href="#domino-5---view"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Domino 5 - View&lt;/h3&gt;
&lt;p&gt;Domino 5 is one or more &lt;strong&gt;view functions&lt;/strong&gt; (aka Reagent components) that compute the
UI DOM that should be displayed to the user.&lt;/p&gt;
&lt;p&gt;To render the right UI, they need to source application state, which is
delivered reactively via the queries of Domino 4. They
compute hiccup-formatted data, which is a description of the DOM required.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-domino-6---dom" class="anchor" aria-hidden="true" href="#domino-6---dom"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Domino 6 - DOM&lt;/h3&gt;
&lt;p&gt;You don't write Domino 6 - it is handled for you
by Reagent/React. I mention it here
for completeness and to fully close the loop.&lt;/p&gt;
&lt;p&gt;This is the step in which the hiccup-formatted
"descriptions of required DOM", returned by the view functions of Domino 5, are made real.
The browser DOM nodes are mutated.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-managing-mutation" class="anchor" aria-hidden="true" href="#managing-mutation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Managing mutation&lt;/h2&gt;
&lt;p&gt;The two sub-cascades 1-2-3 and 4-5-6 have a similar structure.&lt;/p&gt;
&lt;p&gt;In each, it is the second to last domino which
computes "data descriptions" of mutations required, and it is
the last domino which does the dirty work and realises these descriptions.&lt;/p&gt;
&lt;p&gt;In both cases, you don't need to worry yourself about this dirty work. re-frame looks
after those dominoes.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-a-cascade-of-simple-functions" class="anchor" aria-hidden="true" href="#a-cascade-of-simple-functions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;A Cascade Of Simple Functions&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;You'll (mostly) be writing pure functions&lt;/strong&gt; which
can be described, understood and
tested independently. They take data, transform it and return new data.&lt;/p&gt;
&lt;p&gt;The loop itself is mechanical and predictable in operation.
So, there's a regularity to how a re-frame app goes about its business,
which leads, in turn, to an ease in reasoning and debugging.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-the-dominoes-again---with-code-fragments" class="anchor" aria-hidden="true" href="#the-dominoes-again---with-code-fragments"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;The Dominoes Again - With Code Fragments&lt;/h2&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="/images/Readme/todolist.png?raw=true"&gt;&lt;img align="right" src="/images/Readme/todolist.png?raw=true" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So that was the view of re-frame from 60,000 feet. We'll now shift down to 30,000 feet
and look again at each domino, but this time with code fragments.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Imagine:&lt;/strong&gt; we're working on a SPA which displays a list of items. You have
just clicked the "delete" button next to the 3rd item in the list.&lt;/p&gt;
&lt;p&gt;In response, what happens within this imaginary re-frame app? Here's a sketch
of the six domino cascade:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Don't expect
to completely grok the terse code presented below. We're still at 30,000 feet. Details later.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;&lt;a id="user-content-code-for-domino-1" class="anchor" aria-hidden="true" href="#code-for-domino-1"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Code For Domino 1&lt;/h3&gt;
&lt;p&gt;The delete button for that 3rd item will be rendered by a ViewFunction which looks like this:&lt;/p&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;defn&lt;/span&gt; &lt;span class="pl-e"&gt;delete-button&lt;/span&gt; 
  [item-id]
  [&lt;span class="pl-c1"&gt;:div.garbage-bin&lt;/span&gt; 
     &lt;span class="pl-c1"&gt;:on-click&lt;/span&gt; #(&lt;span class="pl-en"&gt;re-frame.core/dispatch&lt;/span&gt; [&lt;span class="pl-c1"&gt;:delete-item&lt;/span&gt; item-id])])&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That &lt;code&gt;on-click&lt;/code&gt; handler uses re-frame's &lt;code&gt;dispatch&lt;/code&gt; to emit an &lt;code&gt;event&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;A re-frame &lt;code&gt;event&lt;/code&gt; is a vector and, in this case,
it has 2 elements: &lt;code&gt;[:delete-item 2486]&lt;/code&gt; (where &lt;code&gt;2486&lt;/code&gt; is the made-up id for that 3rd item).&lt;/p&gt;
&lt;p&gt;The first element of an event vector,
&lt;code&gt;:delete-item&lt;/code&gt;, is the kind of event. The rest is optional, useful data about the
&lt;code&gt;event&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Events express intent in a domain specific way.
They are the language of your re-frame system.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-code-for-domino-2" class="anchor" aria-hidden="true" href="#code-for-domino-2"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Code For Domino 2&lt;/h3&gt;
&lt;p&gt;An &lt;code&gt;event handler&lt;/code&gt; (function), called say &lt;code&gt;h&lt;/code&gt;, is called to
compute the &lt;code&gt;effect&lt;/code&gt; of the event &lt;code&gt;[:delete-item 2486]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;On app startup, &lt;code&gt;re-frame.core/reg-event-fx&lt;/code&gt; would have been used to
register this &lt;code&gt;h&lt;/code&gt; as the handler for  &lt;code&gt;:delete-item&lt;/code&gt; events, like this:&lt;/p&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;(&lt;span class="pl-en"&gt;re-frame.core/reg-event-fx&lt;/span&gt;   &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; a part of the re-frame API&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:delete-item&lt;/span&gt;                &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; the kind of event&lt;/span&gt;
  h)                          &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; the handler function for this kind of event&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;h&lt;/code&gt; is written to take two arguments:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;a &lt;code&gt;coeffects&lt;/code&gt; map which contains the current state of the world (including app state)&lt;/li&gt;
&lt;li&gt;the &lt;code&gt;event&lt;/code&gt; to handle&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It is the job of &lt;code&gt;h&lt;/code&gt; to compute how the world should be changed by the event, and
it returns a map of &lt;code&gt;effects&lt;/code&gt; - a description of those changes.&lt;/p&gt;
&lt;p&gt;Here's a sketch (we are at 30,000 feet):&lt;/p&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;defn&lt;/span&gt; &lt;span class="pl-e"&gt;h&lt;/span&gt;                               &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; maybe choose a better name like `delete-item`&lt;/span&gt;
 [coeffects event]                    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; `coeffects` holds the current state of the world.  &lt;/span&gt;
 (&lt;span class="pl-k"&gt;let&lt;/span&gt; [item-id (&lt;span class="pl-en"&gt;second&lt;/span&gt; event)         &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; extract id from event vector&lt;/span&gt;
       db      (&lt;span class="pl-c1"&gt;:db&lt;/span&gt; coeffects)]       &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; extract the current application state&lt;/span&gt;
   {&lt;span class="pl-c1"&gt;:db&lt;/span&gt;  (&lt;span class="pl-en"&gt;dissoc-in&lt;/span&gt; db [&lt;span class="pl-c1"&gt;:items&lt;/span&gt; item-id])})) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; effect is "change app state to ..."&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;re-frame has ways (described in later tutorials) to inject necessary aspects
of the world into that first &lt;code&gt;coeffects&lt;/code&gt; argument (map). Different
event handlers need different "things" to get their job done. But
current "application state" is one aspect of the world which is
invariably needed, and it is available by default in the &lt;code&gt;:db&lt;/code&gt; key.&lt;/p&gt;
&lt;p&gt;BTW, here is a more idiomatic rewrite of &lt;code&gt;h&lt;/code&gt; which uses &lt;code&gt;destructuring&lt;/code&gt; of the args:&lt;/p&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;defn&lt;/span&gt; &lt;span class="pl-e"&gt;h&lt;/span&gt; 
  [{&lt;span class="pl-c1"&gt;:keys&lt;/span&gt; [db]} [_ item-id]]    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; &amp;lt;--- new: obtain db and id directly&lt;/span&gt;
  {&lt;span class="pl-c1"&gt;:db&lt;/span&gt;  (&lt;span class="pl-en"&gt;dissoc-in&lt;/span&gt; db [&lt;span class="pl-c1"&gt;:items&lt;/span&gt; item-id])}) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; same as before&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-code-for-domino-3" class="anchor" aria-hidden="true" href="#code-for-domino-3"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Code For Domino 3&lt;/h3&gt;
&lt;p&gt;An &lt;code&gt;effect handler&lt;/code&gt; (function) actions the &lt;code&gt;effects&lt;/code&gt; returned by &lt;code&gt;h&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here's what &lt;code&gt;h&lt;/code&gt; returned:&lt;/p&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;{&lt;span class="pl-c1"&gt;:db&lt;/span&gt;  (&lt;span class="pl-en"&gt;dissoc-in&lt;/span&gt; db [&lt;span class="pl-c1"&gt;:items&lt;/span&gt; &lt;span class="pl-c1"&gt;2486&lt;/span&gt;])}   &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; db is a map of some structure&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Each key of the map identifies one kind
of &lt;code&gt;effect&lt;/code&gt;, and the value for that key supplies further details.
The map returned by &lt;code&gt;h&lt;/code&gt; only has one key, so there's only one effect.&lt;/p&gt;
&lt;p&gt;A key of &lt;code&gt;:db&lt;/code&gt; means to update the app state with the key's value.&lt;/p&gt;
&lt;p&gt;This update of "app state" is a mutative step, facilitated by re-frame
which has a built-in &lt;code&gt;effects handler&lt;/code&gt; for the &lt;code&gt;:db&lt;/code&gt; effect.&lt;/p&gt;
&lt;p&gt;Why the name &lt;code&gt;:db&lt;/code&gt;?  Well, re-frame sees "app state" as something of an in-memory
database. More on this in a following tutorial.&lt;/p&gt;
&lt;p&gt;Just to be clear, if &lt;code&gt;h&lt;/code&gt; had returned:&lt;/p&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;{&lt;span class="pl-c1"&gt;:wear&lt;/span&gt;  {&lt;span class="pl-c1"&gt;:pants&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;velour flares&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;  &lt;span class="pl-c1"&gt;:belt&lt;/span&gt; &lt;span class="pl-c1"&gt;false&lt;/span&gt;}
 &lt;span class="pl-c1"&gt;:tweet&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Okay, yes, I am Satoshi. #coverblown&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then, the two effects handlers registered for &lt;code&gt;:wear&lt;/code&gt; and &lt;code&gt;:tweet&lt;/code&gt; would
be called to action those two effects. And, no, re-frame
does not supply standard effect handlers for either, so you would have had
to have written them yourself (see how in a later tutorial).&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-code-for-domino-4" class="anchor" aria-hidden="true" href="#code-for-domino-4"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Code For Domino 4&lt;/h3&gt;
&lt;p&gt;We now start the &lt;code&gt;v = f(s)&lt;/code&gt; part of the flow.&lt;/p&gt;
&lt;p&gt;The application state
&lt;code&gt;s&lt;/code&gt; has just changed (via Domino 3) and now boom, boom go Dominoes 4, 5,
and 6, at the end of which we have a new view, &lt;code&gt;v&lt;/code&gt;, being shown to the user.&lt;/p&gt;
&lt;p&gt;In this domino 4, a query (function) over this app state is automatically
called.  This query function "extracts" data from application state, and
then computes "a materialised view" of the application state - producing
data which is useful to the view functions of domino, 5.&lt;/p&gt;
&lt;p&gt;Now, in this particular case, the query function is pretty trivial.
Because the items are stored in app state, there's not a lot
to compute and, instead, it acts strictly like an extractor or accessor,
just plucking the list of items out of application state:&lt;/p&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;defn&lt;/span&gt; &lt;span class="pl-e"&gt;query-fn&lt;/span&gt;
  [db v]         &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; db is current app state, v the query vector&lt;/span&gt;
  (&lt;span class="pl-c1"&gt;:items&lt;/span&gt; db))   &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; not much of a materialised view&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;On program startup, such a &lt;code&gt;query-fn&lt;/code&gt; must be associated with a &lt;code&gt;query-id&lt;/code&gt;,
(so it can be used via &lt;code&gt;subscribe&lt;/code&gt; in domino 5) using &lt;code&gt;re-frame.core/reg-sub&lt;/code&gt;,
like this:&lt;/p&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;(&lt;span class="pl-en"&gt;re-frame.core/reg-sub&lt;/span&gt;  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; part of the re-frame API&lt;/span&gt;
   &lt;span class="pl-c1"&gt;:query-items&lt;/span&gt;         &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; query id  &lt;/span&gt;
   query-fn)            &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; query fn&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Which says "if, in domino 5, you see a &lt;code&gt;(subscribe [:query-items])&lt;/code&gt;, then
use &lt;code&gt;query-fn&lt;/code&gt; to compute it".&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-code-for-domino-5" class="anchor" aria-hidden="true" href="#code-for-domino-5"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Code For Domino 5&lt;/h3&gt;
&lt;p&gt;Because the query function for &lt;code&gt;:query-items&lt;/code&gt; just re-computed a new value,
any view (function) which uses a &lt;code&gt;(subscribe [:query-items])&lt;/code&gt;
is called automatically (reactively) to re-compute new DOM.&lt;/p&gt;
&lt;p&gt;View functions compute a data structure, in hiccup format, describing
the DOM nodes required. In this "items" case, the view functions will &lt;em&gt;not&lt;/em&gt; be generating
hiccup for the just-deleted item obviously but, other than this,
the hiccup computed "this time" will be the same as "last time".&lt;/p&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;defn&lt;/span&gt; &lt;span class="pl-e"&gt;items-view&lt;/span&gt;
  []
  (&lt;span class="pl-k"&gt;let&lt;/span&gt; [items  (&lt;span class="pl-en"&gt;subscribe&lt;/span&gt; [&lt;span class="pl-c1"&gt;:query-items&lt;/span&gt;])]  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; source items from app state&lt;/span&gt;
    [&lt;span class="pl-c1"&gt;:div&lt;/span&gt; (&lt;span class="pl-en"&gt;map&lt;/span&gt; item-render @items)]))   &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; assume item-render already written&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice how &lt;code&gt;items&lt;/code&gt; is "sourced" from "app state" via &lt;code&gt;re-frame.core/subscribe&lt;/code&gt;.
It is called with a vector argument, and the first element of that vector is
a query-id which identifies the "materialised view" required by the view.&lt;/p&gt;
&lt;p&gt;Note: &lt;code&gt;subscribe&lt;/code&gt; queries can be parameterised. So, in real world apps
you might have this:&lt;br&gt;
&lt;code&gt;(subscribe [:items "blue"])&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The vector identifies, first, the query, and then
supplies further arguments. You could think of that as
representing &lt;code&gt;select * from Items where colour="blue"&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Except there's no SQL available and you would be the one to implement
the more sophisticated &lt;code&gt;query-fn&lt;/code&gt; capable of handling the
"where" argument. More in later tutorials.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-code-for-domino-6" class="anchor" aria-hidden="true" href="#code-for-domino-6"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Code For Domino 6&lt;/h3&gt;
&lt;p&gt;The hiccup returned by the view function
is made into real browser DOM by Reagent/React. No code from you required. Just happens.&lt;/p&gt;
&lt;p&gt;The DOM computed "this
time" will be the same as "last time", &lt;strong&gt;except&lt;/strong&gt; for the absence of DOM for the
deleted item, so the mutation will be to remove those now-missing
DOM nodes from the browser.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-3-4-5-6-summary" class="anchor" aria-hidden="true" href="#3-4-5-6-summary"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3-4-5-6 Summary&lt;/h3&gt;
&lt;p&gt;The key point to understand about our 3-4-5-6 example is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a change to app state ...&lt;/li&gt;
&lt;li&gt;triggers query functions to rerun ...&lt;/li&gt;
&lt;li&gt;which triggers view functions to rerun&lt;/li&gt;
&lt;li&gt;which causes modified browser DOM&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Boom, boom, boom go the dominoes. It is a reactive data flow.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-aaaaand-were-done" class="anchor" aria-hidden="true" href="#aaaaand-were-done"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Aaaaand we're done&lt;/h3&gt;
&lt;p&gt;At this point, the re-frame app returns to a quiescent state,
waiting for the next event.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-so-your-job-is-" class="anchor" aria-hidden="true" href="#so-your-job-is-"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;So, your job is ...&lt;/h2&gt;
&lt;p&gt;When building a re-frame app, you:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;design your app's information model (data and schema layer)&lt;/li&gt;
&lt;li&gt;write and register event handler functions  (control and transition layer)  (domino 2)&lt;/li&gt;
&lt;li&gt;(once in a blue moon) write and register effect and coeffect handler
functions (domino 3) which do the mutative dirty work of which we dare not
speak.&lt;/li&gt;
&lt;li&gt;write and register query functions which implement nodes in a signal graph (query layer) (domino 4)&lt;/li&gt;
&lt;li&gt;write Reagent view functions  (view layer)  (domino 5)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-re-frame-is-mature-and-proven-in-the-large" class="anchor" aria-hidden="true" href="#re-frame-is-mature-and-proven-in-the-large"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;re-frame is mature and proven in the large&lt;/h2&gt;
&lt;p&gt;re-frame was released in early 2015, and has since
&lt;a href="https://www.fullcontact.com" rel="nofollow"&gt;been&lt;/a&gt; successfully
&lt;a href="https://www.nubank.com.br" rel="nofollow"&gt;used&lt;/a&gt; by
&lt;a href="http://open.mediaexpress.reuters.com/" rel="nofollow"&gt;quite&lt;/a&gt; a
&lt;a href="https://rokt.com/" rel="nofollow"&gt;few&lt;/a&gt; companies and
individuals to build complex apps, many running beyond 40K lines of
ClojureScript.&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="/images/scale-changes-everything.jpg?raw=true"&gt;&lt;img align="right" src="/images/scale-changes-everything.jpg?raw=true" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Scale changes everything.&lt;/strong&gt; Frameworks
are just pesky overhead at small scale - measure them instead by how they help
you tame the complexity of bigger apps, and in this regard re-frame has
worked out well. Some have been effusive in their praise.&lt;/p&gt;
&lt;p&gt;Having said that, re-frame remains a work in progress and it falls
short in a couple of ways - for example it doesn't work as well as we'd
like with devcards, because it is a framework, rather than a library.
We're still puzzling over some aspects and tweaking as we go. All designs
represent a point in the possible design space, with pros and cons.&lt;/p&gt;
&lt;p&gt;And, yes, re-frame is fast, straight out of the box. And, yes, it has
a good testing story (unit and behavioural). And, yes, it works with your build
tools (like figwheel or shadow-cljs) to create
a powerful hot-loading development story. And, yes, it has
fun specialist tooling, and a community,
and useful 3rd party libraries.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-where-do-i-go-next" class="anchor" aria-hidden="true" href="#where-do-i-go-next"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Where Do I Go Next?&lt;/h2&gt;
&lt;p&gt;At this point, you know 50% of re-frame.  &lt;br&gt;
The full &lt;a href="/docs/README.md"&gt;docs are here&lt;/a&gt; and the &lt;a href="/docs/FAQs/README.md"&gt;FAQs are here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There are two example apps to play with: &lt;br&gt;
&lt;a href="https://github.com/day8/re-frame/tree/master/examples"&gt;https://github.com/day8/re-frame/tree/master/examples&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Use a template to create your own project: &lt;br&gt;
Client only:  &lt;a href="https://github.com/day8/re-frame-template"&gt;https://github.com/day8/re-frame-template&lt;/a&gt;  &lt;br&gt;
Full Stack: &lt;a href="http://www.luminusweb.net/" rel="nofollow"&gt;http://www.luminusweb.net/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And please be sure to review these further resources: &lt;br&gt;
&lt;a href="https://github.com/day8/re-frame/blob/master/docs/External-Resources.md"&gt;https://github.com/day8/re-frame/blob/master/docs/External-Resources.md&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-t-shirt-unlocked" class="anchor" aria-hidden="true" href="#t-shirt-unlocked"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;T-Shirt Unlocked&lt;/h3&gt;
&lt;p&gt;Good news.  If you've read this far,
your insiders T-shirt will be arriving soon - it will feature turtles,
&lt;a href="http://xkcd.com/1416/" rel="nofollow"&gt;xkcd&lt;/a&gt; and something about "data all the way down".
But we're still working on the hilarious caption bit. Open a
repo issue with a suggestion.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>day8</author><guid isPermaLink="false">https://github.com/day8/re-frame</guid><pubDate>Sun, 05 Jan 2020 00:07:00 GMT</pubDate></item></channel></rss>