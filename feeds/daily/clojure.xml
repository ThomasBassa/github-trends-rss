<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>GitHub Trending: Clojure, Today</title><link>https://github.com/trending/clojure?since=daily</link><description>The top repositories on GitHub for clojure, measured daily</description><pubDate>Sat, 02 Nov 2019 02:38:39 GMT</pubDate><lastBuildDate>Sat, 02 Nov 2019 02:38:39 GMT</lastBuildDate><generator>PyRSS2Gen-1.1.0</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><ttl>720</ttl><item><title>metabase/metabase #1 in Clojure, Today</title><link>https://github.com/metabase/metabase</link><description>&lt;p&gt;&lt;i&gt;The simplest, fastest way to get business intelligence and analytics  to everyone in your company :yum:&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-metabase" class="anchor" aria-hidden="true" href="#metabase"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Metabase&lt;/h1&gt;
&lt;p&gt;Metabase is the easy, open source way for everyone in your company to ask questions and learn from data.&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="docs/metabase-product-screenshot.png"&gt;&lt;img src="docs/metabase-product-screenshot.png" alt="Metabase Product Screenshot" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/metabase/metabase/releases"&gt;&lt;img src="https://camo.githubusercontent.com/ea5e30e904914ce7e90f1545526b8a6cc043618e/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f72656c656173652f6d657461626173652f6d657461626173652e7376673f6c6162656c3d6c617465737425323072656c65617365" alt="Latest Release" data-canonical-src="https://img.shields.io/github/release/metabase/metabase.svg?label=latest%20release" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://raw.githubusercontent.com/metabase/metabase/master/LICENSE.txt" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/b59a8ca795689678e6caf56900294059cfe64ba3/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4147504c2d3035423843432e737667" alt="GitHub license" data-canonical-src="https://img.shields.io/badge/license-AGPL-05B8CC.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://circleci.com/gh/metabase/metabase" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/a81f1ec3024eb4ce825b1eb8604cfc01e5a4b62c/68747470733a2f2f636972636c6563692e636f6d2f67682f6d657461626173652f6d657461626173652e7376673f7374796c653d73766726636972636c652d746f6b656e3d33636366306161383431303238616630323766326163396538646631376365363033653930656639" alt="Circle CI" data-canonical-src="https://circleci.com/gh/metabase/metabase.svg?style=svg&amp;amp;circle-token=3ccf0aa841028af027f2ac9e8df17ce603e90ef9" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://gitter.im/metabase/metabase" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/315f2b9c3a2b05d7fef4a53142339050088ff7d4/68747470733a2f2f6261646765732e6769747465722e696d2f6d657461626173652f6d657461626173652e706e67" alt="Gitter chat" data-canonical-src="https://badges.gitter.im/metabase/metabase.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-features" class="anchor" aria-hidden="true" href="#features"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Features&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;5 minute &lt;a href="https://metabase.com/docs/latest/setting-up-metabase.html" rel="nofollow"&gt;setup&lt;/a&gt; (We're not kidding)&lt;/li&gt;
&lt;li&gt;Let anyone on your team &lt;a href="https://metabase.com/docs/latest/users-guide/04-asking-questions.html" rel="nofollow"&gt;ask questions&lt;/a&gt; without knowing SQL&lt;/li&gt;
&lt;li&gt;Rich beautiful &lt;a href="https://metabase.com/docs/latest/users-guide/06-sharing-answers.html" rel="nofollow"&gt;dashboards&lt;/a&gt; with auto refresh and fullscreen&lt;/li&gt;
&lt;li&gt;SQL Mode for analysts and data pros&lt;/li&gt;
&lt;li&gt;Create canonical &lt;a href="https://metabase.com/docs/latest/administration-guide/07-segments-and-metrics.html" rel="nofollow"&gt;segments and metrics&lt;/a&gt; for your team to use&lt;/li&gt;
&lt;li&gt;Send data to Slack or email on a schedule with &lt;a href="https://metabase.com/docs/latest/users-guide/10-pulses.html" rel="nofollow"&gt;Pulses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;View data in Slack anytime with &lt;a href="https://metabase.com/docs/latest/users-guide/11-metabot.html" rel="nofollow"&gt;MetaBot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metabase.com/docs/latest/administration-guide/03-metadata-editing.html" rel="nofollow"&gt;Humanize data&lt;/a&gt; for your team by renaming, annotating and hiding fields&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For more information check out &lt;a href="https://metabase.com/" rel="nofollow"&gt;metabase.com&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-supported-databases" class="anchor" aria-hidden="true" href="#supported-databases"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Supported databases&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Postgres&lt;/li&gt;
&lt;li&gt;MySQL&lt;/li&gt;
&lt;li&gt;Druid&lt;/li&gt;
&lt;li&gt;SQL Server&lt;/li&gt;
&lt;li&gt;Redshift&lt;/li&gt;
&lt;li&gt;MongoDB&lt;/li&gt;
&lt;li&gt;Google BigQuery&lt;/li&gt;
&lt;li&gt;SQLite&lt;/li&gt;
&lt;li&gt;H2&lt;/li&gt;
&lt;li&gt;Oracle&lt;/li&gt;
&lt;li&gt;Vertica&lt;/li&gt;
&lt;li&gt;Presto&lt;/li&gt;
&lt;li&gt;Snowflake&lt;/li&gt;
&lt;li&gt;SparkSQL&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Don't see your favorite database? File an issue to let us know.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installation&lt;/h2&gt;
&lt;p&gt;Metabase can be run just about anywhere so checkout our &lt;a href="https://metabase.com/docs/latest/operations-guide/start.html#installing-and-running-metabase" rel="nofollow"&gt;Installation Guides&lt;/a&gt; for detailed instructions for various deployments.  Here's the TLDR:&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-docker" class="anchor" aria-hidden="true" href="#docker"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Docker&lt;/h3&gt;
&lt;p&gt;To run Metabase via Docker, just type&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;docker run -d -p 3000:3000 --name metabase metabase/metabase&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-jvm-jar" class="anchor" aria-hidden="true" href="#jvm-jar"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;JVM Jar&lt;/h3&gt;
&lt;p&gt;To run the jar you will need to have a Java Runtime installed. As a quick check to see if you system already has one, try&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;java -version&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you see something like&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;java version &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;1.8.0_51&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
Java(TM) SE Runtime Environment (build 1.8.0_51-b16)
Java HotSpot(TM) 64-Bit Server VM (build 25.51-b03, mixed mode)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;you are good to go. Otherwise, download the Java Runtime Environment at &lt;a href="http://java.com/" rel="nofollow"&gt;http://java.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Go to the &lt;a href="https://metabase.com/start/" rel="nofollow"&gt;Metabase Download Page&lt;/a&gt; and download the current build. Place the downloaded jar into a newly created directory (as it will create some files when it is run), and run it on the command line:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;java -jar metabase.jar&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, open a browser and go to &lt;a href="http://localhost:3000" rel="nofollow"&gt;http://localhost:3000&lt;/a&gt; , and you will be asked a set of questions that will set up a user account, and then you can add a database connection. For this to work you will need to get some information about which database you want to connect to, such as the Host Name and Port that it is running on, the Database Name and the User and Password that you will be using.&lt;/p&gt;
&lt;p&gt;Once you have added this connection, you will be taken into the app and you'll be ready to ask your first question.&lt;/p&gt;
&lt;p&gt;For a more detailed walkthrough, check out our &lt;a href="docs/getting-started.md"&gt;Getting Started&lt;/a&gt; guide.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-frequently-asked-questions" class="anchor" aria-hidden="true" href="#frequently-asked-questions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Frequently Asked Questions&lt;/h1&gt;
&lt;p&gt;Some questions come up over and over again. Check here first:
&lt;a href="docs/faq.md"&gt;FAQ&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-security-disclosure" class="anchor" aria-hidden="true" href="#security-disclosure"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Security Disclosure&lt;/h1&gt;
&lt;p&gt;Security is very important to us. If you discover any issue regarding security, please disclose the information responsibly by sending an email to &lt;a href="mailto:security@metabase.com"&gt;security@metabase.com&lt;/a&gt; and not by creating a GitHub issue.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-contributing" class="anchor" aria-hidden="true" href="#contributing"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contributing&lt;/h1&gt;
&lt;p&gt;To get started with a development installation of the Metabase, follow the instructions at our &lt;a href="docs/developers-guide.md"&gt;Developers Guide&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Then take a look at our &lt;a href="docs/contributing.md"&gt;Contribution Guide&lt;/a&gt; for information about our process and where you can fit in!&lt;/p&gt;
&lt;p&gt;Talk to other contributors &lt;a href="https://gitter.im/metabase/metabase" rel="nofollow"&gt;in our Gitter room&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-internationalization" class="anchor" aria-hidden="true" href="#internationalization"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Internationalization&lt;/h1&gt;
&lt;p&gt;We want Metabase to be avaliable in as many languages as possible. See what translations are avaliable and help contribute to internationalization using our project &lt;a href="https://poeditor.com/join/project/ynjQmwSsGh" rel="nofollow"&gt;over at POEditor&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-extending-and-deep-integrations" class="anchor" aria-hidden="true" href="#extending-and-deep-integrations"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Extending and Deep Integrations&lt;/h1&gt;
&lt;p&gt;Metabase also allows you to hit our Query API directly from Javascript to integrate the simple analytics we provide with your own application or third party services to do things like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Build moderation interfaces&lt;/li&gt;
&lt;li&gt;Export subsets of your users to third party marketing automation software&lt;/li&gt;
&lt;li&gt;Provide a specialized customer lookup application for the people in your company&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;a id="user-content-danger-zone" class="anchor" aria-hidden="true" href="#danger-zone"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Danger zone&lt;/h1&gt;
&lt;p&gt;The button below will deploy the branch where this README.md lives onto Heroku. Metabase developers use it to deploy branches of Metabase to test our PRs, etc. We DO NOT recommend you using this for production. Instead, please use a &lt;a href="https://metabase.com/start" rel="nofollow"&gt;stable build&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://heroku.com/deploy" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/83b0e95b38892b49184e07ad572c94c8038323fb/68747470733a2f2f7777772e6865726f6b7563646e2e636f6d2f6465706c6f792f627574746f6e2e737667" alt="Deploy" data-canonical-src="https://www.herokucdn.com/deploy/button.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-license" class="anchor" aria-hidden="true" href="#license"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;License&lt;/h1&gt;
&lt;p&gt;Unless otherwise noted, all Metabase source files are made available under the terms of the GNU Affero General Public License (AGPL).&lt;/p&gt;
&lt;p&gt;See &lt;a href="https://github.com/metabase/metabase/blob/master/LICENSE.txt"&gt;LICENSE.txt&lt;/a&gt; for details and exceptions.&lt;/p&gt;
&lt;p&gt;Unless otherwise noted, all files © 2019 Metabase, Inc.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>metabase</author><guid isPermaLink="false">https://github.com/metabase/metabase</guid><pubDate>Sat, 02 Nov 2019 00:01:00 GMT</pubDate></item><item><title>swarmpit/swarmpit #2 in Clojure, Today</title><link>https://github.com/swarmpit/swarmpit</link><description>&lt;p&gt;&lt;i&gt;Lightweight mobile-friendly Docker Swarm management UI&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;p&gt;&lt;a href="http://swarmpit.io" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/7b95f2d692e0b1f8846ee401423c71673f8b4c3e/687474703a2f2f737761726d7069742e696f2f696d672f6c6f676f2d737761726d7069742e7376673f7231" alt="swarmpit" data-canonical-src="http://swarmpit.io/img/logo-swarmpit.svg?r1" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Lightweight mobile-friendly Docker Swarm management UI&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/swarmpit/swarmpit/releases"&gt;&lt;img src="https://camo.githubusercontent.com/4eacd0efdb76e07b7818dcd9539e7f7a57f18ffd/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f72656c656173652d7072652f737761726d7069742f737761726d7069742e737667" alt="version" data-canonical-src="https://img.shields.io/github/release-pre/swarmpit/swarmpit.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://gitter.im/swarmpit_io/swarmpit" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/f8014beacaaaa00713148f4d4bf3d1e0fb880a77/68747470733a2f2f6261646765732e6769747465722e696d2f7472657a6f722f636f6d6d756e6974792e737667" alt="gitter" data-canonical-src="https://badges.gitter.im/trezor/community.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://travis-ci.org/swarmpit/swarmpit" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/b941badfd7a5594c3ffbf5d2f77a83c29c8af7b5/68747470733a2f2f7472617669732d63692e6f72672f737761726d7069742f737761726d7069742e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/swarmpit/swarmpit.svg?branch=master" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://github.com/swarmpit/swarmpit/pulls"&gt;&lt;img src="https://camo.githubusercontent.com/d4e0f63e9613ee474a7dfdc23c240b9795712c96/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f5052732d77656c636f6d652d627269676874677265656e2e737667" alt="PRs Welcome" data-canonical-src="https://img.shields.io/badge/PRs-welcome-brightgreen.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;amp;hosted_button_id=KD4RQBDWFE25U" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/d5d24e33e2f4b6fe53987419a21b203c03789a8f/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f446f6e6174652d50617950616c2d677265656e2e737667" alt="Donate" data-canonical-src="https://img.shields.io/badge/Donate-PayPal-green.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/swarmpit/swarmpit/master/resources/public/imac.png"&gt;&lt;img src="https://raw.githubusercontent.com/swarmpit/swarmpit/master/resources/public/imac.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Swarmpit provides simple and easy to use interface for your Docker Swarm cluster. You can manage your stacks, services, secrets, volumes, networks etc. After linking your Docker Hub account or custom registry, private repositories can be easily deployed on Swarm. Best of all, you can share this management console securely with your whole team.&lt;/p&gt;
&lt;p&gt;More details about future and past releases can be found in &lt;a href="ROADMAP.md"&gt;ROADMAP.md&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://twitter.com/swarmpit_io" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/6a286b4bf866a433717546d0801794019561b5bb/68747470733a2f2f696d672e736869656c64732e696f2f747769747465722f75726c2f68747470732f747769747465722e636f6d2f666f6c645f6c6566742e7376673f7374796c653d736f6369616c266c6162656c3d466f6c6c6f77253230253430737761726d7069745f696f" alt="Twitter URL" data-canonical-src="https://img.shields.io/twitter/url/https/twitter.com/fold_left.svg?style=social&amp;amp;label=Follow%20%40swarmpit_io" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installation&lt;/h2&gt;
&lt;p&gt;The only dependency for Swarmpit deployment is Docker with Swarm initialized, we are supporting Docker 1.13 and newer.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-package-installer" class="anchor" aria-hidden="true" href="#package-installer"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Package installer&lt;/h3&gt;
&lt;p&gt;Installer is your guide to setup Swarmpit platform. For more details see the &lt;a href="https://github.com/swarmpit/installer"&gt;installer&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-stable-version" class="anchor" aria-hidden="true" href="#stable-version"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Stable version&lt;/h4&gt;
&lt;p&gt;Deploy our current milestone version&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker run -it --rm \
  --name swarmpit-installer \
  --volume /var/run/docker.sock:/var/run/docker.sock \
  swarmpit/install:1.7
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;&lt;a id="user-content-edge-version" class="anchor" aria-hidden="true" href="#edge-version"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Edge version&lt;/h4&gt;
&lt;p&gt;Deploy latest version for the brave and true&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker run -it --rm \
  --name swarmpit-installer \
  --volume /var/run/docker.sock:/var/run/docker.sock \
  swarmpit/install:edge
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-manual-installation" class="anchor" aria-hidden="true" href="#manual-installation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Manual installation&lt;/h3&gt;
&lt;p&gt;Simply deploy Swarmpit by using a compose file from our git repo.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clone https://github.com/swarmpit/swarmpit
docker stack deploy -c swarmpit/docker-compose.yml swarmpit
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href="docker-compose.yml"&gt;This stack&lt;/a&gt; is a composition of 4 services:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;app - Swarmpit&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/swarmpit/agent"&gt;agent&lt;/a&gt; - Swarmpit agent&lt;/li&gt;
&lt;li&gt;db - CouchDB (Application data)&lt;/li&gt;
&lt;li&gt;influxdb - InfluxDB (Cluster statistics)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Feel free to edit the stackfile to change an application port and we strongly recommend to specify following volumes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;db-data&lt;/li&gt;
&lt;li&gt;influxdb-data&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;to shared-volume driver type of your choice. Alternatively, you can link db service to the specific node by using &lt;a href="https://docs.docker.com/compose/compose-file/#placement" rel="nofollow"&gt;constraint&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Swarmpit is published on port &lt;code&gt;888&lt;/code&gt; by default.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-development" class="anchor" aria-hidden="true" href="#development"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Development&lt;/h2&gt;
&lt;p&gt;Swarmpit is written purely in Clojure and utilizes React on front-end. CouchDB is used to persist application data &amp;amp; InfluxDB for cluster statistics.&lt;/p&gt;
&lt;p&gt;Everything about building, issue reporting and setting up development environment can be found in &lt;a href="CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-demo" class="anchor" aria-hidden="true" href="#demo"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Demo&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://play-with-docker.com?stack=https://raw.githubusercontent.com/swarmpit/swarmpit/master/docker-compose.yml" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/015b87ebc1ecffe10832e34ea8a44ce1af0cd35b/68747470733a2f2f63646e2e7261776769742e636f6d2f706c61792d776974682d646f636b65722f737461636b732f63666632323433382f6173736574732f696d616765732f627574746f6e2e706e67" alt="Try in PWD" data-canonical-src="https://cdn.rawgit.com/play-with-docker/stacks/cff22438/assets/images/button.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Deploys Swarmpit to play-with-docker sandbox. Please wait few moments till application is up and running before accessing
port 888. Initialization might take a few seconds.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>swarmpit</author><guid isPermaLink="false">https://github.com/swarmpit/swarmpit</guid><pubDate>Sat, 02 Nov 2019 00:02:00 GMT</pubDate></item><item><title>day8/re-frame #3 in Clojure, Today</title><link>https://github.com/day8/re-frame</link><description>&lt;p&gt;&lt;i&gt;A Reagent Framework For Writing SPAs, in Clojurescript.&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="/images/logo/re-frame_128w.png?raw=true"&gt;&lt;img src="/images/logo/re-frame_128w.png?raw=true" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-derived-values-flowing" class="anchor" aria-hidden="true" href="#derived-values-flowing"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Derived Values, Flowing&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;This, milord, is my family's axe. We have owned it for almost nine hundred years, see. Of course,
sometimes it needed a new blade. And sometimes it has required a new handle, new designs on the
metalwork, a little refreshing of the ornamentation ... but is this not the nine hundred-year-old
axe of my family? And because it has changed gently over time, it is still a pretty good axe,
y'know. Pretty good.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;-- Terry Pratchett, The Fifth Elephant &lt;br&gt;
    reflecting on identity, flow and derived values  (aka &lt;a href="https://en.wikipedia.org/wiki/Ship_of_Theseus" rel="nofollow"&gt;The Ship of Theseus&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://github.com/day8/re-frame/actions?workflow=ci"&gt;&lt;img src="https://github.com/day8/re-frame/workflows/ci/badge.svg" alt="CI" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://github.com/day8/re-frame/tags"&gt;&lt;img src="https://camo.githubusercontent.com/7d3c19c3058ac25e469a26c6a0819b07a32b019b/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f762f7461672f646179382f72652d6672616d653f7374796c653d666c6174" alt="GitHub tag (latest by date)" data-canonical-src="https://img.shields.io/github/v/tag/day8/re-frame?style=flat" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://clojars.org/re-frame" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/bc7eb06028ccf73b1a2f788e022e3ff28061cd12/68747470733a2f2f696d672e736869656c64732e696f2f636c6f6a6172732f762f72652d6672616d652e737667" alt="Clojars Project" data-canonical-src="https://img.shields.io/clojars/v/re-frame.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://github.com/day8/re-frame/issues"&gt;&lt;img src="https://camo.githubusercontent.com/2d137905516dc886ce38ece8e8df3d49a993da29/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732d7261772f646179382f72652d6672616d653f7374796c653d666c6174" alt="GitHub issues" data-canonical-src="https://img.shields.io/github/issues-raw/day8/re-frame?style=flat" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://github.com/day8/re-frame/pulls"&gt;&lt;img src="https://camo.githubusercontent.com/d7e5f10e0a9d7b72debdcc642f77efe7301dc01b/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732d70722f646179382f72652d6672616d65" alt="GitHub pull requests" data-canonical-src="https://img.shields.io/github/issues-pr/day8/re-frame" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="license.txt"&gt;&lt;img src="https://camo.githubusercontent.com/498f19805b2c1326abfd0f122bb670d2929aa987/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f646179382f72652d6672616d652e737667" alt="License" data-canonical-src="https://img.shields.io/github/license/day8/re-frame.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-re-frame" class="anchor" aria-hidden="true" href="#re-frame"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;re-frame&lt;/h2&gt;
&lt;p&gt;re-frame is a pattern for writing &lt;a href="http://en.wikipedia.org/wiki/Single-page_application" rel="nofollow"&gt;SPAs&lt;/a&gt; in ClojureScript, using &lt;a href="http://reagent-project.github.io/" rel="nofollow"&gt;Reagent&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;McCoy might report "It's MVC, Jim, but not as we know it".  And you would respond
"McCoy, you trouble maker, why even mention an OO pattern?
re-frame is a &lt;strong&gt;functional framework&lt;/strong&gt;."&lt;/p&gt;
&lt;p&gt;Being a functional framework, it is about two things: data, and the functions
which transform that data.  And, because it is a reactive framework, the &lt;a href="https://www.youtube.com/watch?v=ZgqFlowyfTA&amp;amp;t=80" rel="nofollow"&gt;"data coordinates the functions"&lt;/a&gt; (and not the other way around).&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-why-should-you-care" class="anchor" aria-hidden="true" href="#why-should-you-care"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Why Should You Care?&lt;/h2&gt;
&lt;p&gt;Perhaps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You want to develop an &lt;a href="http://en.wikipedia.org/wiki/Single-page_application" rel="nofollow"&gt;SPA&lt;/a&gt; in ClojureScript, and you are looking for a framework.&lt;/li&gt;
&lt;li&gt;You believe Facebook did something magnificent when it created React, and
you are curious about the further implications. Is the combination of
&lt;code&gt;reactive programming&lt;/code&gt;, &lt;code&gt;functional programming&lt;/code&gt; and &lt;code&gt;immutable data&lt;/code&gt; going to
&lt;strong&gt;completely change everything&lt;/strong&gt;?  And, if so, what would that look like in a language
that embraces those paradigms?&lt;/li&gt;
&lt;li&gt;You're taking a &lt;a href="http://www.eli.sdsu.edu/courses/fall15/cs696/index.html" rel="nofollow"&gt;Functional Design and Programming course&lt;/a&gt; at San Diego State University
and you have a re-frame/reagent assignment due.  You've left the reading a bit late, right?&lt;/li&gt;
&lt;li&gt;You know Redux, Elm, Cycle.js or Pux and you're
interested in a ClojureScript implementation.
In this space, re-frame is very old, hopefully in a Gandalf kind of way.
First designed in Dec 2014, it even slightly pre-dates the official Elm Architecture,
although thankfully we were influenced by early-Elm concepts like &lt;code&gt;foldp&lt;/code&gt; and &lt;code&gt;lift&lt;/code&gt;, as well as
Clojure projects like &lt;a href="https://github.com/pedestal/pedestal-app"&gt;Pedestal App&lt;/a&gt;, &lt;a href="https://github.com/swannodette/om"&gt;Om&lt;/a&gt; and &lt;a href="http://hoplon.io/" rel="nofollow"&gt;Hoplon&lt;/a&gt;. Since then,
re-frame has pioneered ideas like event handler middleware,
coeffect accretion, and de-duplicated signal graphs.&lt;/li&gt;
&lt;li&gt;Which brings us to the most important point: &lt;strong&gt;re-frame is impressively buzzword compliant&lt;/strong&gt;. It has reactivity,
unidirectional data flow, pristinely pure functions,
interceptors, coeffects, conveyor belts, statechart-friendliness (FSM)
and claims an immaculate hammock conception. It also has a charming
xkcd reference (soon) and a hilarious, insiders-joke T-shirt,
ideal for conferences (in design).  What could possibly go wrong?&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;&lt;a id="user-content-it-leverages-data" class="anchor" aria-hidden="true" href="#it-leverages-data"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;It Leverages Data&lt;/h2&gt;
&lt;p&gt;You might already know that ClojureScript is a modern Lisp, and that
Lisps are &lt;strong&gt;homoiconic&lt;/strong&gt;.  If not, you do now.&lt;/p&gt;
&lt;p&gt;This homoiconic bit is significant. It means you program in a Lisp by creating and
assembling Lisp data structures. Dwell on that for a moment. You are &lt;strong&gt;programming in data&lt;/strong&gt;.
The functions which later transform data, themselves start as data.&lt;/p&gt;
&lt;p&gt;Clojure programmers place particular emphasis on the primacy of data, and
they like to meditate on aphorisms like &lt;strong&gt;data is the ultimate in late binding&lt;/strong&gt;.
(Less productively, they also like re-watching Rich Hickey videos, and wishing
their hair was darker and more curly)&lt;/p&gt;
&lt;p&gt;I cannot stress enough what a big deal this is. It may seem
like a syntax curiosity at first but, when the penny drops for
you on this, it tends to be a profound moment. And once you
understand the importance of this concept at the language level,
you naturally want to leverage similar power at the library and system levels.&lt;/p&gt;
&lt;p&gt;So, it will come as no surprise, then, to know that re-frame has a
data oriented design. Events are data. Effects are data. DOM is data.
The functions which transform data are registered and looked up via
data. Interceptors (data) are preferred over middleware (higher
order functions). Etc.&lt;/p&gt;
&lt;p&gt;And, on a related arc, re-frame applications are reactive
and that further elevates the importance of data because, in a reactive architecture,
it is the arrival of data which &lt;a href="https://www.youtube.com/watch?v=ZgqFlowyfTA&amp;amp;t=80" rel="nofollow"&gt;coordinates the calling of functions&lt;/a&gt; (and not the other way around).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Data - that's the way we roll.&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-it-is-a-loop" class="anchor" aria-hidden="true" href="#it-is-a-loop"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;It is a loop&lt;/h2&gt;
&lt;p&gt;Architecturally, re-frame implements "a perpetual loop".&lt;/p&gt;
&lt;p&gt;To build an app, you hang pure functions on certain parts of this loop,
and re-frame looks after the &lt;strong&gt;conveyance of data&lt;/strong&gt;
around the loop, into and out of the transforming functions you
provide - hence a tag line of "Derived Values, Flowing".&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-it-does-physics" class="anchor" aria-hidden="true" href="#it-does-physics"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;It does Physics&lt;/h3&gt;
&lt;p&gt;Remember this diagram from school? The water cycle, right?&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="/images/the-water-cycle.png?raw=true"&gt;&lt;img height="350px" align="right" src="/images/the-water-cycle.png?raw=true" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Two distinct stages, involving water in different phases, being acted upon
by different forces: gravity working one way, evaporation/convection the other.&lt;/p&gt;
&lt;p&gt;To understand re-frame, &lt;strong&gt;imagine data flowing around that loop instead of water&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;re-frame
provides the conveyance of the data around the loop - the equivalent of gravity, evaporation and convection.
You design what's flowing and then you hang functions off the loop at
various points to compute the data's phase changes (again, data flow coordinates code).&lt;/p&gt;
&lt;p&gt;Sure, right now, you're thinking "lazy sod - make a proper Computer Science-y diagram". But, no.
Joe Armstrong says "don't break the laws of physics" - I'm sure
you've seen the videos - and if he says to do something, you do it
(unless Rich Hickey disagrees, and says to do something else). So,
this diagram, apart from being a plausible analogy which might help
you to understand re-frame, is &lt;strong&gt;practically proof&lt;/strong&gt; it does physics.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-it-is-a-6-domino-cascade" class="anchor" aria-hidden="true" href="#it-is-a-6-domino-cascade"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;It is a 6-domino cascade&lt;/h2&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="/images/Readme/Dominoes-small.jpg?raw=true"&gt;&lt;img align="right" src="/images/Readme/Dominoes-small.jpg?raw=true" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Computationally, each iteration of the loop involves a
six domino cascade.&lt;/p&gt;
&lt;p&gt;One domino triggers the next, which triggers the next, et cetera, boom, boom, boom, until we are
back at the beginning of the loop, and the dominoes reset to attention
again, ready for the next iteration of the same cascade.&lt;/p&gt;
&lt;p&gt;The six dominoes are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Event dispatch&lt;/li&gt;
&lt;li&gt;Event handling&lt;/li&gt;
&lt;li&gt;Effect handling&lt;/li&gt;
&lt;li&gt;Query&lt;/li&gt;
&lt;li&gt;View&lt;/li&gt;
&lt;li&gt;DOM&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let's have a first look at each them.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-1st-domino---event-dispatch" class="anchor" aria-hidden="true" href="#1st-domino---event-dispatch"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1st Domino - Event Dispatch&lt;/h3&gt;
&lt;p&gt;An &lt;code&gt;event&lt;/code&gt; is sent when something happens - the user
clicks a button, or a websocket receives a new message.&lt;/p&gt;
&lt;p&gt;Without the impulse of a triggering &lt;code&gt;event&lt;/code&gt;, no six domino cascade occurs.
It is only because of &lt;code&gt;event&lt;/code&gt;s that a re-frame app is propelled,
loop iteration after loop iteration, from one state to the next.&lt;/p&gt;
&lt;p&gt;re-frame is &lt;code&gt;event&lt;/code&gt; driven.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-2nd-domino---event-handling" class="anchor" aria-hidden="true" href="#2nd-domino---event-handling"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2nd Domino - Event Handling&lt;/h3&gt;
&lt;p&gt;In response to an &lt;code&gt;event&lt;/code&gt;, an application must decide what action to take.
This is known as &lt;code&gt;event handling&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Event handler functions compute how an event should change "the world",
which is to say that they compute the &lt;code&gt;side effects&lt;/code&gt; of the event.
Or, more accurately, they compute a declarative &lt;strong&gt;description of the required
&lt;code&gt;side effects&lt;/code&gt;&lt;/strong&gt;, represented as a data structure. (So &lt;code&gt;event handlers&lt;/code&gt;
are just functions which compute data).&lt;/p&gt;
&lt;p&gt;Much of the time, an event will only cause &lt;code&gt;side effects&lt;/code&gt; to the SPA's
"application state", but sometimes the outside world must also be affected:
localstore, cookies, databases, emails, logs, etc.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-3rd-domino---effect-handling" class="anchor" aria-hidden="true" href="#3rd-domino---effect-handling"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3rd Domino - Effect Handling&lt;/h3&gt;
&lt;p&gt;In this step, the &lt;code&gt;side effects&lt;/code&gt;, returned by the previous step (as data), are actioned/performed.&lt;/p&gt;
&lt;p&gt;Now, to a functional programmer, &lt;code&gt;effects&lt;/code&gt; are scary in a
&lt;a href="https://www.google.com.au/search?q=xenomorph" rel="nofollow"&gt;xenomorph kind of way&lt;/a&gt;.
Nothing messes with functional purity
quite like the need for side effects. On the other hand, &lt;code&gt;effects&lt;/code&gt; are
marvelous because they move the app forward. Without them,
an app stays stuck in one state forever, never achieving anything.&lt;/p&gt;
&lt;p&gt;So re-frame embraces the protagonist nature of &lt;code&gt;effects&lt;/code&gt; - the entire, unruly zoo of them - but
it does so in a controlled and largely hidden way, and in a manner which is debuggable, auditable, mockable and pluggable.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-were-now-at-a-pivot-point" class="anchor" aria-hidden="true" href="#were-now-at-a-pivot-point"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;We're Now At A Pivot Point&lt;/h3&gt;
&lt;p&gt;Domino 3 just changed the world and, very often, one particular part of it: the &lt;strong&gt;application state&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;re-frame's &lt;code&gt;app state&lt;/code&gt; is held in one place - think of it like you
would an in-memory, central database for the app (details later).&lt;/p&gt;
&lt;p&gt;Any changes to &lt;code&gt;app state&lt;/code&gt; trigger the next part of the cascade
involving dominoes 4-5-6.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-theres-a-formula-for-it" class="anchor" aria-hidden="true" href="#theres-a-formula-for-it"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;There's a Formula For It&lt;/h3&gt;
&lt;p&gt;The 4-5-6 domino cascade implements the formula made famous by Facebook's ground-breaking React library:&lt;br&gt;
&lt;code&gt;v = f(s)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;A view, &lt;code&gt;v&lt;/code&gt;, is a function, &lt;code&gt;f&lt;/code&gt;, of the app state, &lt;code&gt;s&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Said another way, there are functions &lt;code&gt;f&lt;/code&gt; that compute which DOM nodes, &lt;code&gt;v&lt;/code&gt;,
should be displayed to the user when the application is in a given app state, &lt;code&gt;s&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Or, to capture the dynamics we'd say: &lt;strong&gt;over time&lt;/strong&gt;, as &lt;code&gt;s&lt;/code&gt; changes, &lt;code&gt;f&lt;/code&gt;
will be re-run each time to compute new &lt;code&gt;v&lt;/code&gt;, forever keeping &lt;code&gt;v&lt;/code&gt; up to date with the current &lt;code&gt;s&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Or, with yet another emphasis: &lt;strong&gt;over time&lt;/strong&gt; what is presented to the user changes in response to application state changes.&lt;/p&gt;
&lt;p&gt;In our case, domino 3 changes &lt;code&gt;s&lt;/code&gt;, the application state,
and, in response, dominoes 4-5-6 are concerned with re-running &lt;code&gt;f&lt;/code&gt; to compute the new &lt;code&gt;v&lt;/code&gt;
shown to the user.&lt;/p&gt;
&lt;p&gt;Except, of course, there are nuances.  For instance, there's no single &lt;code&gt;f&lt;/code&gt; to run.
There may be many functions which collectively build the overall DOM,
and only part of &lt;code&gt;s&lt;/code&gt; may change at any one time, so only part of the
&lt;code&gt;v&lt;/code&gt; (DOM) need be re-computed and updated. And some parts of &lt;code&gt;v&lt;/code&gt; might not
be showing right now.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-domino-4---query" class="anchor" aria-hidden="true" href="#domino-4---query"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Domino 4 - Query&lt;/h3&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="/images/Readme/6dominoes.png?raw=true"&gt;&lt;img align="right" src="/images/Readme/6dominoes.png?raw=true" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Domino 4 is about extracting data from "app state", and providing it
in the right format for view functions (which are Domino 5).&lt;/p&gt;
&lt;p&gt;Domino 4 is a novel and efficient de-duplicated signal graph which
runs query functions on the app state, &lt;code&gt;s&lt;/code&gt;, efficiently computing
reactive, multi-layered, "materialised views" of &lt;code&gt;s&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Relax about any unfamiliar terminology, you'll soon
see how simple the code actually is.&lt;/p&gt;
&lt;p&gt;(&lt;em&gt;&lt;code&gt;react-redux&lt;/code&gt; programmers:&lt;/em&gt; query functions serve essentially the same purpose as &lt;code&gt;mapStateToProps&lt;/code&gt;)&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-domino-5---view" class="anchor" aria-hidden="true" href="#domino-5---view"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Domino 5 - View&lt;/h3&gt;
&lt;p&gt;Domino 5 is one or more &lt;strong&gt;view functions&lt;/strong&gt; (aka Reagent components) that compute the
UI DOM that should be displayed to the user.&lt;/p&gt;
&lt;p&gt;To render the right UI, they need to source application state, which is
delivered reactively via the queries of Domino 4. They
compute hiccup-formatted data, which is a description of the DOM required.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-domino-6---dom" class="anchor" aria-hidden="true" href="#domino-6---dom"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Domino 6 - DOM&lt;/h3&gt;
&lt;p&gt;You don't write Domino 6 - it is handled for you
by Reagent/React. I mention it here
for completeness and to fully close the loop.&lt;/p&gt;
&lt;p&gt;This is the step in which the hiccup-formatted
"descriptions of required DOM", returned by the view functions of Domino 5, are made real.
The browser DOM nodes are mutated.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-managing-mutation" class="anchor" aria-hidden="true" href="#managing-mutation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Managing mutation&lt;/h2&gt;
&lt;p&gt;The two sub-cascades 1-2-3 and 4-5-6 have a similar structure.&lt;/p&gt;
&lt;p&gt;In each, it is the second to last domino which
computes "data descriptions" of mutations required, and it is
the last domino which does the dirty work and realises these descriptions.&lt;/p&gt;
&lt;p&gt;In both cases, you don't need to worry yourself about this dirty work. re-frame looks
after those dominoes.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-a-cascade-of-simple-functions" class="anchor" aria-hidden="true" href="#a-cascade-of-simple-functions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;A Cascade Of Simple Functions&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;You'll (mostly) be writing pure functions&lt;/strong&gt; which
can be described, understood and
tested independently. They take data, transform it and return new data.&lt;/p&gt;
&lt;p&gt;The loop itself is mechanical and predictable in operation.
So, there's a regularity to how a re-frame app goes about its business,
which leads, in turn, to an ease in reasoning and debugging.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-the-dominoes-again---with-code-fragments" class="anchor" aria-hidden="true" href="#the-dominoes-again---with-code-fragments"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;The Dominoes Again - With Code Fragments&lt;/h2&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="/images/Readme/todolist.png?raw=true"&gt;&lt;img align="right" src="/images/Readme/todolist.png?raw=true" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So that was the view of re-frame from 60,000 feet. We'll now shift down to 30,000 feet
and look again at each domino, but this time with code fragments.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Imagine:&lt;/strong&gt; we're working on a SPA which displays a list of items. You have
just clicked the "delete" button next to the 3rd item in the list.&lt;/p&gt;
&lt;p&gt;In response, what happens within this imaginary re-frame app? Here's a sketch
of the six domino cascade:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Don't expect
to completely grok the terse code presented below. We're still at 30,000 feet. Details later.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;&lt;a id="user-content-code-for-domino-1" class="anchor" aria-hidden="true" href="#code-for-domino-1"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Code For Domino 1&lt;/h3&gt;
&lt;p&gt;The delete button for that 3rd item will be rendered by a ViewFunction which looks like this:&lt;/p&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;defn&lt;/span&gt; &lt;span class="pl-e"&gt;delete-button&lt;/span&gt; 
  [item-id]
  [&lt;span class="pl-c1"&gt;:div.garbage-bin&lt;/span&gt; 
     &lt;span class="pl-c1"&gt;:on-click&lt;/span&gt; #(&lt;span class="pl-en"&gt;re-frame.core/dispatch&lt;/span&gt; [&lt;span class="pl-c1"&gt;:delete-item&lt;/span&gt; item-id])])&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That &lt;code&gt;on-click&lt;/code&gt; handler uses re-frame's &lt;code&gt;dispatch&lt;/code&gt; to emit an &lt;code&gt;event&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;A re-frame &lt;code&gt;event&lt;/code&gt; is a vector and, in this case,
it has 2 elements: &lt;code&gt;[:delete-item 2486]&lt;/code&gt; (where &lt;code&gt;2486&lt;/code&gt; is the made-up id for that 3rd item).&lt;/p&gt;
&lt;p&gt;The first element of an event vector,
&lt;code&gt;:delete-item&lt;/code&gt;, is the kind of event. The rest is optional, useful data about the
&lt;code&gt;event&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Events express intent in a domain specific way.
They are the language of your re-frame system.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-code-for-domino-2" class="anchor" aria-hidden="true" href="#code-for-domino-2"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Code For Domino 2&lt;/h3&gt;
&lt;p&gt;An &lt;code&gt;event handler&lt;/code&gt; (function), called say &lt;code&gt;h&lt;/code&gt;, is called to
compute the &lt;code&gt;effect&lt;/code&gt; of the event &lt;code&gt;[:delete-item 2486]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;On app startup, &lt;code&gt;re-frame.core/reg-event-fx&lt;/code&gt; would have been used to
register this &lt;code&gt;h&lt;/code&gt; as the handler for  &lt;code&gt;:delete-item&lt;/code&gt; events, like this:&lt;/p&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;(&lt;span class="pl-en"&gt;re-frame.core/reg-event-fx&lt;/span&gt;   &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; a part of the re-frame API&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:delete-item&lt;/span&gt;                &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; the kind of event&lt;/span&gt;
  h)                          &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; the handler function for this kind of event&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;h&lt;/code&gt; is written to take two arguments:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;a &lt;code&gt;coeffects&lt;/code&gt; map which contains the current state of the world (including app state)&lt;/li&gt;
&lt;li&gt;the &lt;code&gt;event&lt;/code&gt; to handle&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It is the job of &lt;code&gt;h&lt;/code&gt; to compute how the world should be changed by the event, and
it returns a map of &lt;code&gt;effects&lt;/code&gt; - a description of those changes.&lt;/p&gt;
&lt;p&gt;Here's a sketch (we are at 30,000 feet):&lt;/p&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;defn&lt;/span&gt; &lt;span class="pl-e"&gt;h&lt;/span&gt;                               &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; maybe choose a better name like `delete-item`&lt;/span&gt;
 [coeffects event]                    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; `coeffects` holds the current state of the world.  &lt;/span&gt;
 (&lt;span class="pl-k"&gt;let&lt;/span&gt; [item-id (&lt;span class="pl-en"&gt;second&lt;/span&gt; event)         &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; extract id from event vector&lt;/span&gt;
       db      (&lt;span class="pl-c1"&gt;:db&lt;/span&gt; coeffects)]       &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; extract the current application state&lt;/span&gt;
   {&lt;span class="pl-c1"&gt;:db&lt;/span&gt;  (&lt;span class="pl-en"&gt;dissoc-in&lt;/span&gt; db [&lt;span class="pl-c1"&gt;:items&lt;/span&gt; item-id])})) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; effect is "change app state to ..."&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;re-frame has ways (described in later tutorials) to inject necessary aspects
of the world into that first &lt;code&gt;coeffects&lt;/code&gt; argument (map). Different
event handlers need different "things" to get their job done. But
current "application state" is one aspect of the world which is
invariably needed, and it is available by default in the &lt;code&gt;:db&lt;/code&gt; key.&lt;/p&gt;
&lt;p&gt;BTW, here is a more idiomatic rewrite of &lt;code&gt;h&lt;/code&gt; which uses &lt;code&gt;destructuring&lt;/code&gt; of the args:&lt;/p&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;defn&lt;/span&gt; &lt;span class="pl-e"&gt;h&lt;/span&gt; 
  [{&lt;span class="pl-c1"&gt;:keys&lt;/span&gt; [db]} [_ item-id]]    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; &amp;lt;--- new: obtain db and id directly&lt;/span&gt;
  {&lt;span class="pl-c1"&gt;:db&lt;/span&gt;  (&lt;span class="pl-en"&gt;dissoc-in&lt;/span&gt; db [&lt;span class="pl-c1"&gt;:items&lt;/span&gt; item-id])}) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; same as before&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-code-for-domino-3" class="anchor" aria-hidden="true" href="#code-for-domino-3"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Code For Domino 3&lt;/h3&gt;
&lt;p&gt;An &lt;code&gt;effect handler&lt;/code&gt; (function) actions the &lt;code&gt;effects&lt;/code&gt; returned by &lt;code&gt;h&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here's what &lt;code&gt;h&lt;/code&gt; returned:&lt;/p&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;{&lt;span class="pl-c1"&gt;:db&lt;/span&gt;  (&lt;span class="pl-en"&gt;dissoc-in&lt;/span&gt; db [&lt;span class="pl-c1"&gt;:items&lt;/span&gt; &lt;span class="pl-c1"&gt;2486&lt;/span&gt;])}   &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; db is a map of some structure&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Each key of the map identifies one kind
of &lt;code&gt;effect&lt;/code&gt;, and the value for that key supplies further details.
The map returned by &lt;code&gt;h&lt;/code&gt; only has one key, so there's only one effect.&lt;/p&gt;
&lt;p&gt;A key of &lt;code&gt;:db&lt;/code&gt; means to update the app state with the key's value.&lt;/p&gt;
&lt;p&gt;This update of "app state" is a mutative step, facilitated by re-frame
which has a built-in &lt;code&gt;effects handler&lt;/code&gt; for the &lt;code&gt;:db&lt;/code&gt; effect.&lt;/p&gt;
&lt;p&gt;Why the name &lt;code&gt;:db&lt;/code&gt;?  Well, re-frame sees "app state" as something of an in-memory
database. More on this in a following tutorial.&lt;/p&gt;
&lt;p&gt;Just to be clear, if &lt;code&gt;h&lt;/code&gt; had returned:&lt;/p&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;{&lt;span class="pl-c1"&gt;:wear&lt;/span&gt;  {&lt;span class="pl-c1"&gt;:pants&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;velour flares&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;  &lt;span class="pl-c1"&gt;:belt&lt;/span&gt; &lt;span class="pl-c1"&gt;false&lt;/span&gt;}
 &lt;span class="pl-c1"&gt;:tweet&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Okay, yes, I am Satoshi. #coverblown&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then, the two effects handlers registered for &lt;code&gt;:wear&lt;/code&gt; and &lt;code&gt;:tweet&lt;/code&gt; would
be called to action those two effects. And, no, re-frame
does not supply standard effect handlers for either, so you would have had
to have written them yourself (see how in a later tutorial).&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-code-for-domino-4" class="anchor" aria-hidden="true" href="#code-for-domino-4"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Code For Domino 4&lt;/h3&gt;
&lt;p&gt;We now start the &lt;code&gt;v = f(s)&lt;/code&gt; part of the flow.&lt;/p&gt;
&lt;p&gt;The application state
&lt;code&gt;s&lt;/code&gt; has just changed (via Domino 3) and now boom, boom go Dominoes 4, 5,
and 6, at the end of which we have a new view, &lt;code&gt;v&lt;/code&gt;, being shown to the user.&lt;/p&gt;
&lt;p&gt;In this domino 4, a query (function) over this app state is automatically
called.  This query function "extracts" data from application state, and
then computes "a materialised view" of the application state - producing
data which is useful to the view functions of domino, 5.&lt;/p&gt;
&lt;p&gt;Now, in this particular case, the query function is pretty trivial.
Because the items are stored in app state, there's not a lot
to compute and, instead, it acts strictly like an extractor or accessor,
just plucking the list of items out of application state:&lt;/p&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;defn&lt;/span&gt; &lt;span class="pl-e"&gt;query-fn&lt;/span&gt;
  [db v]         &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; db is current app state, v the query vector&lt;/span&gt;
  (&lt;span class="pl-c1"&gt;:items&lt;/span&gt; db))   &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; not much of a materialised view&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;On program startup, such a &lt;code&gt;query-fn&lt;/code&gt; must be associated with a &lt;code&gt;query-id&lt;/code&gt;,
(so it can be used via &lt;code&gt;subscribe&lt;/code&gt; in domino 5) using &lt;code&gt;re-frame.core/reg-sub&lt;/code&gt;,
like this:&lt;/p&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;(&lt;span class="pl-en"&gt;re-frame.core/reg-sub&lt;/span&gt;  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; part of the re-frame API&lt;/span&gt;
   &lt;span class="pl-c1"&gt;:query-items&lt;/span&gt;         &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; query id  &lt;/span&gt;
   query-fn)            &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; query fn&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Which says "if, in domino 5, you see a &lt;code&gt;(subscribe [:query-items])&lt;/code&gt;, then
use &lt;code&gt;query-fn&lt;/code&gt; to compute it".&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-code-for-domino-5" class="anchor" aria-hidden="true" href="#code-for-domino-5"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Code For Domino 5&lt;/h3&gt;
&lt;p&gt;Because the query function for &lt;code&gt;:query-items&lt;/code&gt; just re-computed a new value,
any view (function) which uses a &lt;code&gt;(subscribe [:query-items])&lt;/code&gt;
is called automatically (reactively) to re-compute new DOM.&lt;/p&gt;
&lt;p&gt;View functions compute a data structure, in hiccup format, describing
the DOM nodes required. In this "items" case, the view functions will &lt;em&gt;not&lt;/em&gt; be generating
hiccup for the just-deleted item obviously but, other than this,
the hiccup computed "this time" will be the same as "last time".&lt;/p&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;defn&lt;/span&gt; &lt;span class="pl-e"&gt;items-view&lt;/span&gt;
  []
  (&lt;span class="pl-k"&gt;let&lt;/span&gt; [items  (&lt;span class="pl-en"&gt;subscribe&lt;/span&gt; [&lt;span class="pl-c1"&gt;:query-items&lt;/span&gt;])]  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; source items from app state&lt;/span&gt;
    [&lt;span class="pl-c1"&gt;:div&lt;/span&gt; (&lt;span class="pl-en"&gt;map&lt;/span&gt; item-render @items)]))   &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; assume item-render already written&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice how &lt;code&gt;items&lt;/code&gt; is "sourced" from "app state" via &lt;code&gt;re-frame.core/subscribe&lt;/code&gt;.
It is called with a vector argument, and the first element of that vector is
a query-id which identifies the "materialised view" required by the view.&lt;/p&gt;
&lt;p&gt;Note: &lt;code&gt;subscribe&lt;/code&gt; queries can be parameterised. So, in real world apps
you might have this:&lt;br&gt;
&lt;code&gt;(subscribe [:items "blue"])&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The vector identifies, first, the query, and then
supplies further arguments. You could think of that as
representing &lt;code&gt;select * from Items where colour="blue"&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Except there's no SQL available and you would be the one to implement
the more sophisticated &lt;code&gt;query-fn&lt;/code&gt; capable of handling the
"where" argument. More in later tutorials.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-code-for-domino-6" class="anchor" aria-hidden="true" href="#code-for-domino-6"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Code For Domino 6&lt;/h3&gt;
&lt;p&gt;The hiccup returned by the view function
is made into real browser DOM by Reagent/React. No code from you required. Just happens.&lt;/p&gt;
&lt;p&gt;The DOM computed "this
time" will be the same as "last time", &lt;strong&gt;except&lt;/strong&gt; for the absence of DOM for the
deleted item, so the mutation will be to remove those now-missing
DOM nodes from the browser.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-3-4-5-6-summary" class="anchor" aria-hidden="true" href="#3-4-5-6-summary"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3-4-5-6 Summary&lt;/h3&gt;
&lt;p&gt;The key point to understand about our 3-4-5-6 example is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a change to app state ...&lt;/li&gt;
&lt;li&gt;triggers query functions to rerun ...&lt;/li&gt;
&lt;li&gt;which triggers view functions to rerun&lt;/li&gt;
&lt;li&gt;which causes modified browser DOM&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Boom, boom, boom go the dominoes. It is a reactive data flow.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-aaaaand-were-done" class="anchor" aria-hidden="true" href="#aaaaand-were-done"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Aaaaand we're done&lt;/h3&gt;
&lt;p&gt;At this point, the re-frame app returns to a quiescent state,
waiting for the next event.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-so-your-job-is-" class="anchor" aria-hidden="true" href="#so-your-job-is-"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;So, your job is ...&lt;/h2&gt;
&lt;p&gt;When building a re-frame app, you:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;design your app's information model (data and schema layer)&lt;/li&gt;
&lt;li&gt;write and register event handler functions  (control and transition layer)  (domino 2)&lt;/li&gt;
&lt;li&gt;(once in a blue moon) write and register effect and coeffect handler
functions (domino 3) which do the mutative dirty work of which we dare not
speak.&lt;/li&gt;
&lt;li&gt;write and register query functions which implement nodes in a signal graph (query layer) (domino 4)&lt;/li&gt;
&lt;li&gt;write Reagent view functions  (view layer)  (domino 5)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-re-frame-is-mature-and-proven-in-the-large" class="anchor" aria-hidden="true" href="#re-frame-is-mature-and-proven-in-the-large"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;re-frame is mature and proven in the large&lt;/h2&gt;
&lt;p&gt;re-frame was released in early 2015, and has since
&lt;a href="https://www.fullcontact.com" rel="nofollow"&gt;been&lt;/a&gt; successfully
&lt;a href="https://www.nubank.com.br" rel="nofollow"&gt;used&lt;/a&gt; by
&lt;a href="http://open.mediaexpress.reuters.com/" rel="nofollow"&gt;quite&lt;/a&gt; a
&lt;a href="https://rokt.com/" rel="nofollow"&gt;few&lt;/a&gt; companies and
individuals to build complex apps, many running beyond 40K lines of
ClojureScript.&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="/images/scale-changes-everything.jpg?raw=true"&gt;&lt;img align="right" src="/images/scale-changes-everything.jpg?raw=true" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Scale changes everything.&lt;/strong&gt; Frameworks
are just pesky overhead at small scale - measure them instead by how they help
you tame the complexity of bigger apps, and in this regard re-frame has
worked out well. Some have been effusive in their praise.&lt;/p&gt;
&lt;p&gt;Having said that, re-frame remains a work in progress and it falls
short in a couple of ways - for example it doesn't work as well as we'd
like with devcards, because it is a framework, rather than a library.
We're still puzzling over some aspects and tweaking as we go. All designs
represent a point in the possible design space, with pros and cons.&lt;/p&gt;
&lt;p&gt;And, yes, re-frame is fast, straight out of the box. And, yes, it has
a good testing story (unit and behavioural). And, yes, it works with your build
tools (like figwheel or shadow-cljs) to create
a powerful hot-loading development story. And, yes, it has
fun specialist tooling, and a community,
and useful 3rd party libraries.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-where-do-i-go-next" class="anchor" aria-hidden="true" href="#where-do-i-go-next"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Where Do I Go Next?&lt;/h2&gt;
&lt;p&gt;At this point, you know 50% of re-frame.  &lt;br&gt;
The full &lt;a href="/docs/README.md"&gt;docs are here&lt;/a&gt; and the &lt;a href="/docs/FAQs/README.md"&gt;FAQs are here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There are two example apps to play with: &lt;br&gt;
&lt;a href="https://github.com/day8/re-frame/tree/master/examples"&gt;https://github.com/day8/re-frame/tree/master/examples&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Use a template to create your own project: &lt;br&gt;
Client only:  &lt;a href="https://github.com/day8/re-frame-template"&gt;https://github.com/day8/re-frame-template&lt;/a&gt;  &lt;br&gt;
Full Stack: &lt;a href="http://www.luminusweb.net/" rel="nofollow"&gt;http://www.luminusweb.net/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And please be sure to review these further resources: &lt;br&gt;
&lt;a href="https://github.com/day8/re-frame/blob/master/docs/External-Resources.md"&gt;https://github.com/day8/re-frame/blob/master/docs/External-Resources.md&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-t-shirt-unlocked" class="anchor" aria-hidden="true" href="#t-shirt-unlocked"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;T-Shirt Unlocked&lt;/h3&gt;
&lt;p&gt;Good news.  If you've read this far,
your insiders T-shirt will be arriving soon - it will feature turtles,
&lt;a href="http://xkcd.com/1416/" rel="nofollow"&gt;xkcd&lt;/a&gt; and something about "data all the way down".
But we're still working on the hilarious caption bit. Open a
repo issue with a suggestion.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>day8</author><guid isPermaLink="false">https://github.com/day8/re-frame</guid><pubDate>Sat, 02 Nov 2019 00:03:00 GMT</pubDate></item></channel></rss>