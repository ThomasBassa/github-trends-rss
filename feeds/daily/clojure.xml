<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>GitHub Trending: Clojure, Today</title><link>https://github.com/trending/clojure?since=daily</link><description>The top repositories on GitHub for clojure, measured daily</description><pubDate>Thu, 09 Jan 2020 01:08:09 GMT</pubDate><lastBuildDate>Thu, 09 Jan 2020 01:08:09 GMT</lastBuildDate><generator>PyRSS2Gen-1.1.0</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><ttl>720</ttl><item><title>metabase/metabase #1 in Clojure, Today</title><link>https://github.com/metabase/metabase</link><description>&lt;p&gt;&lt;i&gt;The simplest, fastest way to get business intelligence and analytics  to everyone in your company :yum:&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-metabase" class="anchor" aria-hidden="true" href="#metabase"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Metabase&lt;/h1&gt;
&lt;p&gt;Metabase is the easy, open source way for everyone in your company to ask questions and learn from data.&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="docs/metabase-product-screenshot.png"&gt;&lt;img src="docs/metabase-product-screenshot.png" alt="Metabase Product Screenshot" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/metabase/metabase/releases"&gt;&lt;img src="https://camo.githubusercontent.com/ea5e30e904914ce7e90f1545526b8a6cc043618e/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f72656c656173652f6d657461626173652f6d657461626173652e7376673f6c6162656c3d6c617465737425323072656c65617365" alt="Latest Release" data-canonical-src="https://img.shields.io/github/release/metabase/metabase.svg?label=latest%20release" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://raw.githubusercontent.com/metabase/metabase/master/LICENSE.txt" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/b59a8ca795689678e6caf56900294059cfe64ba3/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4147504c2d3035423843432e737667" alt="GitHub license" data-canonical-src="https://img.shields.io/badge/license-AGPL-05B8CC.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://circleci.com/gh/metabase/metabase" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/a81f1ec3024eb4ce825b1eb8604cfc01e5a4b62c/68747470733a2f2f636972636c6563692e636f6d2f67682f6d657461626173652f6d657461626173652e7376673f7374796c653d73766726636972636c652d746f6b656e3d33636366306161383431303238616630323766326163396538646631376365363033653930656639" alt="Circle CI" data-canonical-src="https://circleci.com/gh/metabase/metabase.svg?style=svg&amp;amp;circle-token=3ccf0aa841028af027f2ac9e8df17ce603e90ef9" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://gitter.im/metabase/metabase" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/315f2b9c3a2b05d7fef4a53142339050088ff7d4/68747470733a2f2f6261646765732e6769747465722e696d2f6d657461626173652f6d657461626173652e706e67" alt="Gitter chat" data-canonical-src="https://badges.gitter.im/metabase/metabase.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-features" class="anchor" aria-hidden="true" href="#features"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Features&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;5 minute &lt;a href="https://metabase.com/docs/latest/setting-up-metabase.html" rel="nofollow"&gt;setup&lt;/a&gt; (We're not kidding)&lt;/li&gt;
&lt;li&gt;Let anyone on your team &lt;a href="https://metabase.com/docs/latest/users-guide/04-asking-questions.html" rel="nofollow"&gt;ask questions&lt;/a&gt; without knowing SQL&lt;/li&gt;
&lt;li&gt;Rich beautiful &lt;a href="https://metabase.com/docs/latest/users-guide/06-sharing-answers.html" rel="nofollow"&gt;dashboards&lt;/a&gt; with auto refresh and fullscreen&lt;/li&gt;
&lt;li&gt;SQL Mode for analysts and data pros&lt;/li&gt;
&lt;li&gt;Create canonical &lt;a href="https://metabase.com/docs/latest/administration-guide/07-segments-and-metrics.html" rel="nofollow"&gt;segments and metrics&lt;/a&gt; for your team to use&lt;/li&gt;
&lt;li&gt;Send data to Slack or email on a schedule with &lt;a href="https://metabase.com/docs/latest/users-guide/10-pulses.html" rel="nofollow"&gt;Pulses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;View data in Slack anytime with &lt;a href="https://metabase.com/docs/latest/users-guide/11-metabot.html" rel="nofollow"&gt;MetaBot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metabase.com/docs/latest/administration-guide/03-metadata-editing.html" rel="nofollow"&gt;Humanize data&lt;/a&gt; for your team by renaming, annotating and hiding fields&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For more information check out &lt;a href="https://metabase.com/" rel="nofollow"&gt;metabase.com&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-supported-databases" class="anchor" aria-hidden="true" href="#supported-databases"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Supported databases&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Postgres&lt;/li&gt;
&lt;li&gt;MySQL&lt;/li&gt;
&lt;li&gt;Druid&lt;/li&gt;
&lt;li&gt;SQL Server&lt;/li&gt;
&lt;li&gt;Redshift&lt;/li&gt;
&lt;li&gt;MongoDB&lt;/li&gt;
&lt;li&gt;Google BigQuery&lt;/li&gt;
&lt;li&gt;SQLite&lt;/li&gt;
&lt;li&gt;H2&lt;/li&gt;
&lt;li&gt;Oracle&lt;/li&gt;
&lt;li&gt;Vertica&lt;/li&gt;
&lt;li&gt;Presto&lt;/li&gt;
&lt;li&gt;Snowflake&lt;/li&gt;
&lt;li&gt;SparkSQL&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Don't see your favorite database? File an issue to let us know.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installation&lt;/h2&gt;
&lt;p&gt;Metabase can be run just about anywhere so checkout our &lt;a href="https://metabase.com/docs/latest/operations-guide/start.html#installing-and-running-metabase" rel="nofollow"&gt;Installation Guides&lt;/a&gt; for detailed instructions for various deployments.  Here's the TLDR:&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-docker" class="anchor" aria-hidden="true" href="#docker"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Docker&lt;/h3&gt;
&lt;p&gt;To run Metabase via Docker, just type&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;docker run -d -p 3000:3000 --name metabase metabase/metabase&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-jvm-jar" class="anchor" aria-hidden="true" href="#jvm-jar"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;JVM Jar&lt;/h3&gt;
&lt;p&gt;To run the jar you will need to have a Java Runtime installed. As a quick check to see if you system already has one, try&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;java -version&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you see something like&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;java version &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;1.8.0_51&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
Java(TM) SE Runtime Environment (build 1.8.0_51-b16)
Java HotSpot(TM) 64-Bit Server VM (build 25.51-b03, mixed mode)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;you are good to go. Otherwise, download the Java Runtime Environment at &lt;a href="http://java.com/" rel="nofollow"&gt;http://java.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Go to the &lt;a href="https://metabase.com/start/" rel="nofollow"&gt;Metabase Download Page&lt;/a&gt; and download the current build. Place the downloaded jar into a newly created directory (as it will create some files when it is run), and run it on the command line:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;java -jar metabase.jar&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, open a browser and go to &lt;a href="http://localhost:3000" rel="nofollow"&gt;http://localhost:3000&lt;/a&gt; , and you will be asked a set of questions that will set up a user account, and then you can add a database connection. For this to work you will need to get some information about which database you want to connect to, such as the Host Name and Port that it is running on, the Database Name and the User and Password that you will be using.&lt;/p&gt;
&lt;p&gt;Once you have added this connection, you will be taken into the app and you'll be ready to ask your first question.&lt;/p&gt;
&lt;p&gt;For a more detailed walkthrough, check out our &lt;a href="docs/getting-started.md"&gt;Getting Started&lt;/a&gt; guide.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-frequently-asked-questions" class="anchor" aria-hidden="true" href="#frequently-asked-questions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Frequently Asked Questions&lt;/h1&gt;
&lt;p&gt;Some questions come up over and over again. Check here first:
&lt;a href="docs/faq.md"&gt;FAQ&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-security-disclosure" class="anchor" aria-hidden="true" href="#security-disclosure"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Security Disclosure&lt;/h1&gt;
&lt;p&gt;Security is very important to us. If you discover any issue regarding security, please disclose the information responsibly by sending an email to &lt;a href="mailto:security@metabase.com"&gt;security@metabase.com&lt;/a&gt; and not by creating a GitHub issue.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-contributing" class="anchor" aria-hidden="true" href="#contributing"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contributing&lt;/h1&gt;
&lt;p&gt;To get started with a development installation of the Metabase, follow the instructions at our &lt;a href="docs/developers-guide.md"&gt;Developers Guide&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Then take a look at our &lt;a href="docs/contributing.md"&gt;Contribution Guide&lt;/a&gt; for information about our process and where you can fit in!&lt;/p&gt;
&lt;p&gt;Talk to other contributors &lt;a href="https://gitter.im/metabase/metabase" rel="nofollow"&gt;in our Gitter room&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-internationalization" class="anchor" aria-hidden="true" href="#internationalization"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Internationalization&lt;/h1&gt;
&lt;p&gt;We want Metabase to be available in as many languages as possible. See what translations are available and help contribute to internationalization using our project &lt;a href="https://poeditor.com/join/project/ynjQmwSsGh" rel="nofollow"&gt;over at POEditor&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-extending-and-deep-integrations" class="anchor" aria-hidden="true" href="#extending-and-deep-integrations"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Extending and Deep Integrations&lt;/h1&gt;
&lt;p&gt;Metabase also allows you to hit our Query API directly from Javascript to integrate the simple analytics we provide with your own application or third party services to do things like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Build moderation interfaces&lt;/li&gt;
&lt;li&gt;Export subsets of your users to third party marketing automation software&lt;/li&gt;
&lt;li&gt;Provide a specialized customer lookup application for the people in your company&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;a id="user-content-danger-zone" class="anchor" aria-hidden="true" href="#danger-zone"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Danger zone&lt;/h1&gt;
&lt;p&gt;The button below will deploy the branch where this README.md lives onto Heroku. Metabase developers use it to deploy branches of Metabase to test our PRs, etc. We DO NOT recommend you using this for production. Instead, please use a &lt;a href="https://metabase.com/start" rel="nofollow"&gt;stable build&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://heroku.com/deploy" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/83b0e95b38892b49184e07ad572c94c8038323fb/68747470733a2f2f7777772e6865726f6b7563646e2e636f6d2f6465706c6f792f627574746f6e2e737667" alt="Deploy" data-canonical-src="https://www.herokucdn.com/deploy/button.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-license" class="anchor" aria-hidden="true" href="#license"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;License&lt;/h1&gt;
&lt;p&gt;Unless otherwise noted, all Metabase source files are made available under the terms of the GNU Affero General Public License (AGPL).&lt;/p&gt;
&lt;p&gt;See &lt;a href="https://github.com/metabase/metabase/blob/master/LICENSE.txt"&gt;LICENSE.txt&lt;/a&gt; for details and exceptions.&lt;/p&gt;
&lt;p&gt;Unless otherwise noted, all files © 2019 Metabase, Inc.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>metabase</author><guid isPermaLink="false">https://github.com/metabase/metabase</guid><pubDate>Thu, 09 Jan 2020 00:01:00 GMT</pubDate></item><item><title>nubank/basic-microservice-example #2 in Clojure, Today</title><link>https://github.com/nubank/basic-microservice-example</link><description>&lt;p&gt;&lt;i&gt;Simple sketch of how we layout a clojure microservice&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-basic-microservice-example" class="anchor" aria-hidden="true" href="#basic-microservice-example"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;basic-microservice-example&lt;/h1&gt;
&lt;p&gt;A simplistic example of how Nubank organizes and tests microservices.&lt;/p&gt;
&lt;p&gt;This is a really basic savings account microservice that doesn't really do much other than serve as an example.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-architecture" class="anchor" aria-hidden="true" href="#architecture"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Architecture&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-ports-and-adapters-microservice" class="anchor" aria-hidden="true" href="#ports-and-adapters-microservice"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;ports and adapters microservice&lt;/h3&gt;
&lt;p&gt;At Nubank we organize our microservices using the "ports and adapters architecture", also known as "hexagonal architecture".&lt;/p&gt;
&lt;p&gt;With this architecture, code is organized into several layers: &lt;code&gt;logic&lt;/code&gt;, &lt;code&gt;controllers&lt;/code&gt;, &lt;code&gt;adapters&lt;/code&gt;, and &lt;code&gt;ports&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-logic" class="anchor" aria-hidden="true" href="#logic"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;logic&lt;/h4&gt;
&lt;p&gt;Deals with pure business logic and shouldn't have side-effects or throw exceptions.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-controllers" class="anchor" aria-hidden="true" href="#controllers"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;controllers&lt;/h4&gt;
&lt;p&gt;The "glue" between all the other layers, orchestrating calls between pure business logic, adapters, and ports.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-adapters" class="anchor" aria-hidden="true" href="#adapters"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;adapters&lt;/h4&gt;
&lt;p&gt;The layer that converts external data representations into internal ones, and vice-versa. Acts as buffer to protect the service from changes in the outside world; when a data representation changes, you only need to change how the adapters deal with it.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-ports" class="anchor" aria-hidden="true" href="#ports"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;ports&lt;/h4&gt;
&lt;p&gt;The layer that communicates with the outside world, such as http, kafka, and datomic.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-components" class="anchor" aria-hidden="true" href="#components"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;components&lt;/h3&gt;
&lt;p&gt;We use the &lt;a href="https://github.com/stuartsierra/component"&gt;components&lt;/a&gt; abstraction to organize our &lt;code&gt;ports&lt;/code&gt; (e.g. HTTP client, datomic client, redis client) and any other logic that needs to track mutable state or encode dependencies between stateful components. For every environment (e.g. test, e2e, prod, staging...) we have a different version of our component systems, enabling us to easily inject mocks or different implementations for different contexts.&lt;/p&gt;
&lt;p&gt;We make components available to incoming http and kafka handlers. For instance, the pedestal http handlers have access to things like the datomic or HTTP components, and pass them down to the controller level for general use.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-http-client" class="anchor" aria-hidden="true" href="#http-client"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;http client&lt;/h4&gt;
&lt;p&gt;Our http client logic is split into two components:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;http&lt;/code&gt;: this component defines serialization and error handling logic. In this example repository the this logic is basically non-existent due to the overhead making the code useful to the general public.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;http-impl&lt;/code&gt;; this component defines the http client library we use. We started with &lt;code&gt;http-kit&lt;/code&gt; but have recently migrated away from this to &lt;code&gt;finagle&lt;/code&gt; due to stability issues.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a id="user-content-storage" class="anchor" aria-hidden="true" href="#storage"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;storage&lt;/h4&gt;
&lt;p&gt;In the case of this example service, we define a rudimentary in-memory storage component. In our actual services we generally use a datomic component.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-pedestal-related-components" class="anchor" aria-hidden="true" href="#pedestal-related-components"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;pedestal-related components&lt;/h4&gt;
&lt;p&gt;We use pedestal for or http serving layer, but we deconstruct pedestal logic into several different components, deviating from the structure you would see in the pedestal starter template.&lt;/p&gt;
&lt;h5&gt;&lt;a id="user-content-routes" class="anchor" aria-hidden="true" href="#routes"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;routes&lt;/h5&gt;
&lt;p&gt;Encapsulates the pedestal http routes. This example project doesn't make use of this abstraction, but in Nubank's internal microservices we use the routes component to give us the ability to create bookmarks for urls and reference them in various contexts, like our http client component. In addition, we can extend the routes programmatically with operational routes related to other components, for instance providing http routes for starting and stopping the topic consumer in our kafka component.&lt;/p&gt;
&lt;h5&gt;&lt;a id="user-content-service" class="anchor" aria-hidden="true" href="#service"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;service&lt;/h5&gt;
&lt;p&gt;Builds the pedestal service conifguration. Since it defines the interceptors for the http handlers, this &lt;code&gt;service&lt;/code&gt; component needs to depend on all components we want to be available in those handlers, such as the http client and storage client.&lt;/p&gt;
&lt;h5&gt;&lt;a id="user-content-servlet" class="anchor" aria-hidden="true" href="#servlet"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;servlet&lt;/h5&gt;
&lt;p&gt;Contains logic to start the servlet&lt;/p&gt;
&lt;p&gt;For instance the difference between the dev and mock servlets is that the mock servlet, used in integration tests, creates the server but doesn't actually start it.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-tests" class="anchor" aria-hidden="true" href="#tests"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tests&lt;/h2&gt;
&lt;p&gt;At Nubank we use &lt;a href="https://github.com/marick/Midje"&gt;Midje&lt;/a&gt; as our test framework.
We've structured our integration tests to follow a world-transition system that is encoded in the &lt;a href="https://github.com/nubank/selvage"&gt;&lt;code&gt;selvage&lt;/code&gt; &lt;code&gt;flow&lt;/code&gt;&lt;/a&gt; macro.
Lastly, to check the form of nested data-structures during testing we employ &lt;a href="https://github.com/nubank/matcher-combinators"&gt;&lt;code&gt;matcher-combinators&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-unit" class="anchor" aria-hidden="true" href="#unit"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Unit&lt;/h3&gt;
&lt;p&gt;Straw-man examples of what our unit tests may look like can be found in &lt;a href="https://github.com/nubank/basic-microservice-example/blob/master/test/basic_microservice_example/controller_test.clj"&gt;&lt;code&gt;controller-test&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-integration" class="anchor" aria-hidden="true" href="#integration"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Integration&lt;/h3&gt;
&lt;p&gt;A straw-man example of how we do integration testing can be found in &lt;a href="https://github.com/nubank/basic-microservice-example/blob/master/test/basic_microservice_example/account_flow.clj"&gt;&lt;code&gt;account-flow&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;More of an explanation of how &lt;code&gt;selvage&lt;/code&gt; &lt;code&gt;flow&lt;/code&gt; tests work can be in the &lt;a href="https://github.com/nubank/selvage"&gt;selvage repository&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-running-tests" class="anchor" aria-hidden="true" href="#running-tests"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Running tests&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;lein midje :autotest
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;a id="user-content-running-the-dev-server" class="anchor" aria-hidden="true" href="#running-the-dev-server"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Running the (dev) server&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Start the application: &lt;code&gt;lein run&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Go to &lt;a href="http://localhost:8080/" rel="nofollow"&gt;localhost:8080&lt;/a&gt; to see: &lt;code&gt;Hello World!&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;&lt;a id="user-content-developing-your-service" class="anchor" aria-hidden="true" href="#developing-your-service"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Developing your service&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Start a new REPL: &lt;code&gt;lein repl&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Start your service in dev-mode: &lt;code&gt;(def dev-serv (run-dev))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Connect your editor to the running REPL session.
Re-evaluated code will be seen immediately in the service.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;&lt;a id="user-content-missing-aspects" class="anchor" aria-hidden="true" href="#missing-aspects"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Missing aspects&lt;/h2&gt;
&lt;p&gt;Since this is a simple example of how Nubank's microservices are structured, many aspects are missing:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;endpoint schemas: our service http and kafka endpoints are always annotated with schemas.&lt;/li&gt;
&lt;li&gt;better adapter examples: since endpoint schemas aren't a part of this example, our adapters from external to internal data representations aren't very interesting or representative.&lt;/li&gt;
&lt;li&gt;kafka component: we make heavy use of kafka and have wrapped producer and consumer logic in components and also developed mocks for them.&lt;/li&gt;
&lt;li&gt;and much more: datomic component, proper config component that does a waterfall of overriding, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>nubank</author><guid isPermaLink="false">https://github.com/nubank/basic-microservice-example</guid><pubDate>Thu, 09 Jan 2020 00:02:00 GMT</pubDate></item><item><title>nubank/state-flow #3 in Clojure, Today</title><link>https://github.com/nubank/state-flow</link><description>&lt;p&gt;&lt;i&gt;Integration testing framework using a state monad in the backend for building and composing flows&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-stateflow" class="anchor" aria-hidden="true" href="#stateflow"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;StateFlow&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://clojars.org/nubank/state-flow" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/7c83412e270e6a8cae31d092ce3e4ca36dcd528b/68747470733a2f2f696d672e736869656c64732e696f2f636c6f6a6172732f762f6e7562616e6b2f73746174652d666c6f772e737667" alt="Clojars Project" data-canonical-src="https://img.shields.io/clojars/v/nubank/state-flow.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;An integration testing framework for building and composing test flows with support for clojure.test and midje&lt;/p&gt;
&lt;p&gt;StateFlow provides a compositional approach to implementing integration tests. The goal is to reduce coupling between test steps in order to support reuse and composition of flows.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-the-flow-macro" class="anchor" aria-hidden="true" href="#the-flow-macro"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;The flow macro&lt;/h2&gt;
&lt;p&gt;Defining a flow is done with the &lt;code&gt;flow&lt;/code&gt; macro, which expects a description and a variable number of steps that can be other flows, bindings or primitives.&lt;/p&gt;
&lt;p&gt;Flow macro syntax:&lt;/p&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;(&lt;span class="pl-en"&gt;flow&lt;/span&gt; &amp;lt;description&amp;gt; &amp;lt;flow/bindings/primitive&amp;gt;*)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The flow macro defines a sequence of steps to be executed having some state as a reference.
It can be thought about as a function mapping some state to a pair of &lt;code&gt;(fn [&amp;lt;state&amp;gt;] [&amp;lt;return-value&amp;gt;, &amp;lt;possibly-updated-state&amp;gt;])&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Once defined, you can run it with &lt;code&gt;(state-flow.core/run! (flow ...) &amp;lt;initial-state&amp;gt;)&lt;/code&gt;.
Each step will be executed in sequence, passing the state to the next step and the result will be a pair &lt;code&gt;[&amp;lt;return-value&amp;gt;, &amp;lt;final-state&amp;gt;]&lt;/code&gt;.
The return value of running the flow is the return value of the last step that was run.&lt;/p&gt;
&lt;p&gt;If you are using the library for integration testing, the initial state is usually a representation of your service components,
a system using &lt;a href="https://github.com/stuartsierra/component"&gt;Stuart Sierra's Component&lt;/a&gt; library or other similar facility. You can also run the same flow with different initial states without any problem.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-primitives" class="anchor" aria-hidden="true" href="#primitives"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Primitives&lt;/h3&gt;
&lt;p&gt;Primitives are the fundamental building blocks of flows and are
enough to build any kind of flow. Each one returns a function of the
state. These functions are wrapped in Records in order to support
Protocols, but you can just think of them as functions.&lt;/p&gt;
&lt;p&gt;Below we list the main primitives and a model for the sort of function
each represents. The names of the primatives are derived from
&lt;a href="https://wiki.haskell.org/State_Monad" rel="nofollow"&gt;https://wiki.haskell.org/State_Monad&lt;/a&gt;, which you should read if you
want to understand how StateFlow works, but you should not need to
read in order to use StateFlow.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Returning current state&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;state-flow.state/get
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;=&amp;gt; (fn [s] [s s])&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Returning the application of a function on the current state&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;(&lt;span class="pl-en"&gt;state-flow.state/gets&lt;/span&gt; f)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;=&amp;gt; (fn [s] [(f s) s])&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Resetting a new state&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;(&lt;span class="pl-en"&gt;state-flow.state/put&lt;/span&gt; new-s)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;=&amp;gt; (fn [s] [s new-s])&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Updating the state by applying a function&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;(&lt;span class="pl-en"&gt;state-flow.state/modify&lt;/span&gt; f)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;=&amp;gt; (fn [s] [s (f s)])&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Returning an arbitrary value&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;(&lt;span class="pl-en"&gt;state-flow.state/return&lt;/span&gt; v)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;=&amp;gt; (fn [s] [v s])&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-bindings" class="anchor" aria-hidden="true" href="#bindings"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Bindings&lt;/h3&gt;
&lt;p&gt;Bindings take advantage of the return values of flows to compose other flows and have the following syntax:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[(&amp;lt;symbol&amp;gt; &amp;lt;flow/primitive&amp;gt;)+]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;They work pretty much like &lt;code&gt;let&lt;/code&gt; bindings but the left symbol binds to the &lt;em&gt;return value&lt;/em&gt; of the flow on the right.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-flow-example" class="anchor" aria-hidden="true" href="#flow-example"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Flow Example&lt;/h3&gt;
&lt;p&gt;Suppose our system state is made out of a simple map with &lt;code&gt;{:value &amp;lt;value&amp;gt;}&lt;/code&gt;. We can make a flow that just
fetches the value bound to &lt;code&gt;:value&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-e"&gt;get-value&lt;/span&gt; (&lt;span class="pl-en"&gt;state/gets&lt;/span&gt; &lt;span class="pl-c1"&gt;:value&lt;/span&gt;))
(&lt;span class="pl-en"&gt;state-flow/run!&lt;/span&gt; get-value {&lt;span class="pl-c1"&gt;:value&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;})
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt; =&amp;gt; [4 {:value 4}]&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can use &lt;code&gt;state/modify&lt;/code&gt; to modify the state. Here's a flow that increments the value:&lt;/p&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-e"&gt;inc-value&lt;/span&gt; (&lt;span class="pl-en"&gt;state/modify&lt;/span&gt; #(&lt;span class="pl-en"&gt;update&lt;/span&gt; % &lt;span class="pl-c1"&gt;:value&lt;/span&gt; inc)))
(&lt;span class="pl-en"&gt;state-flow/run!&lt;/span&gt; inc-value {&lt;span class="pl-c1"&gt;:value&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;})
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt; =&amp;gt; [{:value 4} {:value 5}]&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Bindings enable us to compose simple flows into more complex flows.
If, instead of returning the value, we wanted to return the value
multiplied by two, we could do it like this:&lt;/p&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-e"&gt;double-value&lt;/span&gt;
  (&lt;span class="pl-en"&gt;flow&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;get double value&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
    [value get-value]
    (&lt;span class="pl-en"&gt;state/return&lt;/span&gt; (&lt;span class="pl-en"&gt;*&lt;/span&gt; value &lt;span class="pl-c1"&gt;2&lt;/span&gt;))))
(&lt;span class="pl-en"&gt;state-flow/run!&lt;/span&gt; double-value {&lt;span class="pl-c1"&gt;:value&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;})
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt; =&amp;gt; [8 {:value 4}]&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or we could increment the value first and then return it doubled:&lt;/p&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-e"&gt;inc-and-double-value&lt;/span&gt;
  (&lt;span class="pl-en"&gt;flow&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;increment and double value&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
    inc-value
    [value get-value]
    (&lt;span class="pl-en"&gt;state/return&lt;/span&gt; (&lt;span class="pl-en"&gt;*&lt;/span&gt; value &lt;span class="pl-c1"&gt;2&lt;/span&gt;))))
(&lt;span class="pl-en"&gt;state-flow/run!&lt;/span&gt; inc-and-double-value {&lt;span class="pl-c1"&gt;:value&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;})
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt; =&amp;gt; [10 {:value 5}]&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-clojuretest-support" class="anchor" aria-hidden="true" href="#clojuretest-support"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Clojure.test Support&lt;/h2&gt;
&lt;p&gt;The way we can use flows to make &lt;code&gt;clojure.test&lt;/code&gt; tests is by using &lt;code&gt;match?&lt;/code&gt;.
&lt;code&gt;match?&lt;/code&gt; is a flow that will make a &lt;code&gt;clojure.test&lt;/code&gt; assertion and the &lt;a href="https://github.com/nubank/matcher-combinators/"&gt;&lt;code&gt;nubank/matcher-combinators&lt;/code&gt;&lt;/a&gt; library
for the actual checking and failure messages. &lt;code&gt;match?&lt;/code&gt; asks for a string description, a value (or a flow returning a value) and a matcher-combinators matcher (or value to be checked against). Not passing a matcher defaults to &lt;code&gt;matchers/embeds&lt;/code&gt; behaviour.&lt;/p&gt;
&lt;p&gt;The assertions should be wrapped in a &lt;code&gt;defflow&lt;/code&gt;. &lt;code&gt;defflow&lt;/code&gt; will define a test (using &lt;code&gt;deftest&lt;/code&gt;)
that when run, will execute the flow with the parameters that we set. Here are some very simple examples
of tests defined using &lt;code&gt;defflow&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;defflow&lt;/span&gt; &lt;span class="pl-e"&gt;my-flow&lt;/span&gt;
  (&lt;span class="pl-en"&gt;match?&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;simple test&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;)
  (&lt;span class="pl-en"&gt;match?&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;embeds&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; {&lt;span class="pl-c1"&gt;:a&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;:b&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;} {&lt;span class="pl-c1"&gt;:a&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;}))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or with custom parameters:&lt;/p&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;defflow&lt;/span&gt; &lt;span class="pl-e"&gt;my-flow&lt;/span&gt; {&lt;span class="pl-c1"&gt;:init&lt;/span&gt; aux.init! &lt;span class="pl-c1"&gt;:runner&lt;/span&gt; (&lt;span class="pl-en"&gt;comp&lt;/span&gt; run! s/with-fn-validation)}
  (&lt;span class="pl-en"&gt;match?&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;simple test&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;)
  (&lt;span class="pl-en"&gt;match?&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;simple test 2&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;defflow&lt;/span&gt; &lt;span class="pl-e"&gt;my-flow&lt;/span&gt; {&lt;span class="pl-c1"&gt;:init&lt;/span&gt; (&lt;span class="pl-en"&gt;constantly&lt;/span&gt; {&lt;span class="pl-c1"&gt;:value&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;
                                     &lt;span class="pl-c1"&gt;:map&lt;/span&gt; {&lt;span class="pl-c1"&gt;:a&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;:b&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;}})}
  [value (&lt;span class="pl-en"&gt;state/gets&lt;/span&gt; &lt;span class="pl-c1"&gt;:value&lt;/span&gt;)]
  (&lt;span class="pl-en"&gt;match?&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;value is correct&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; value &lt;span class="pl-c1"&gt;1&lt;/span&gt;)
  (&lt;span class="pl-en"&gt;match?&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;embeds&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; (&lt;span class="pl-en"&gt;state/gets&lt;/span&gt; &lt;span class="pl-c1"&gt;:map&lt;/span&gt;) {&lt;span class="pl-c1"&gt;:b&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;}))&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-midje-support" class="anchor" aria-hidden="true" href="#midje-support"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Midje Support&lt;/h2&gt;
&lt;p&gt;The way to write midje tests with StateFlow is by using &lt;code&gt;verify&lt;/code&gt;.
&lt;code&gt;verify&lt;/code&gt; is a function that takes three arguments: a description, a value or step and another value or midje checker
and produces a step that when executed, verifies that the second argument matches the third argument. It replicates the functionality of a &lt;code&gt;fact&lt;/code&gt; from midje.
In fact, if a simple value is passed as second argument, what it does is simply call &lt;code&gt;fact&lt;/code&gt; internally when the flow is executed.&lt;/p&gt;
&lt;p&gt;Verify returns a step that will make the check and return something. If the second argument is a value, it will return this argument. If the second argument is itself a step, it will return the last return value of the step that was passed. This makes it possible to use the result of verify on a later part of the flow execution if that is desired.&lt;/p&gt;
&lt;p&gt;Say we have a step for making a POST request that stores data in datomic (&lt;code&gt;store-data-request&lt;/code&gt;),
and we also have a step that fetches this data from db (&lt;code&gt;fetch-data&lt;/code&gt;). We want to check that after we make the POST, the data is persisted:&lt;/p&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;:require&lt;/span&gt;
  [state-flow.core &lt;span class="pl-c1"&gt;:refer&lt;/span&gt; [flow]]
  [state-flow.midje &lt;span class="pl-c1"&gt;:refer&lt;/span&gt; [verify]])

(&lt;span class="pl-k"&gt;defn&lt;/span&gt; &lt;span class="pl-e"&gt;stores-data-in-db&lt;/span&gt;
  [data]
  (&lt;span class="pl-en"&gt;flow&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;save data&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
    (&lt;span class="pl-en"&gt;store-data-request&lt;/span&gt; data)
    [saved-data (&lt;span class="pl-en"&gt;fetch-data&lt;/span&gt;)]
    (&lt;span class="pl-en"&gt;verify&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;data is stored in db&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
      saved-data
      expected-data)))&lt;/pre&gt;&lt;/div&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>nubank</author><guid isPermaLink="false">https://github.com/nubank/state-flow</guid><pubDate>Thu, 09 Jan 2020 00:03:00 GMT</pubDate></item><item><title>nubank/matcher-combinators #4 in Clojure, Today</title><link>https://github.com/nubank/matcher-combinators</link><description>&lt;p&gt;&lt;i&gt;Library for creating matcher combinator to compare nested data structures&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-matcher-combinators" class="anchor" aria-hidden="true" href="#matcher-combinators"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;matcher-combinators&lt;/h1&gt;
&lt;p&gt;Library for creating matcher combinator to compare nested data structures&lt;/p&gt;
&lt;p&gt;&lt;em&gt;current version:&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://clojars.org/nubank/matcher-combinators" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/4633d157194805726742984e8cf703074b3951cf/68747470733a2f2f696d672e736869656c64732e696f2f636c6f6a6172732f762f6e7562616e6b2f6d6174636865722d636f6d62696e61746f72732e737667" alt="Current Version" data-canonical-src="https://img.shields.io/clojars/v/nubank/matcher-combinators.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;docs:&lt;/em&gt;
&lt;a href="https://cljdoc.xyz/d/nubank/matcher-combinators/" rel="nofollow"&gt;Found on cljdoc&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-motivation" class="anchor" aria-hidden="true" href="#motivation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Motivation&lt;/h2&gt;
&lt;p&gt;Clojure's built-in data structures get you a long way when trying to codify and solve difficult problems. A solid selection of core functions allow you to easily create and access core data structures. Unfortunately, this flexibility does not extend to testing: a comprehensive yet extensible way to assert that the data fits a particular structure seems to be lacking.&lt;/p&gt;
&lt;p&gt;This library addresses this issue by providing composable matcher combinators that can be used as building blocks to effectively test functions that evaluate to nested data-structures.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-features" class="anchor" aria-hidden="true" href="#features"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Pretty-printed diffs when the actual result doesn't match the expected matcher&lt;/li&gt;
&lt;li&gt;Integrates with &lt;code&gt;clojure.test&lt;/code&gt; and &lt;code&gt;midje&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Good readability by providing default interpretations of core Clojure data-structures as matcher combinators&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Midje checkers&lt;/th&gt;
&lt;th&gt;Matcher combinators&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a target="_blank" rel="noopener noreferrer" href="doc/images/midje_check.png"&gt;&lt;img src="doc/images/midje_check.png" alt="midje checkers" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a target="_blank" rel="noopener noreferrer" href="doc/images/matcher_check.png"&gt;&lt;img src="doc/images/matcher_check.png" alt="matcher combinators check" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Midje checkers failure output&lt;/th&gt;
&lt;th&gt;Matcher combinators failure output&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a target="_blank" rel="noopener noreferrer" href="doc/images/midje_failure.png"&gt;&lt;img src="doc/images/midje_failure.png" alt="midje checker failure output" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a target="_blank" rel="noopener noreferrer" href="doc/images/matcher_output.png"&gt;&lt;img src="doc/images/matcher_output.png" alt="matcher combinators failure output" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Usage&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-midje" class="anchor" aria-hidden="true" href="#midje"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Midje:&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;matcher-combinators.midje&lt;/code&gt; namespace defines the &lt;code&gt;match&lt;/code&gt; and &lt;code&gt;throws-match&lt;/code&gt; midje-style checkers. These should be used on the right-side of the midje &lt;code&gt;fact&lt;/code&gt; check arrows (&lt;code&gt;=&amp;gt;&lt;/code&gt;)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;match&lt;/code&gt;: This checker is used to wrap a matcher-combinator asserts that the provided value satisfies the matcher.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;throws-match&lt;/code&gt;: This checker wraps a matcher-combinator and optionally a throwable subclass. It asserts that an exception (of the given class) is raised and the &lt;code&gt;ex-data&lt;/code&gt; satisfies the provided matcher.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;require&lt;/span&gt; '[midje.sweet &lt;span class="pl-c1"&gt;:refer&lt;/span&gt; &lt;span class="pl-c1"&gt;:all&lt;/span&gt;]
         '[matcher-combinators.matchers &lt;span class="pl-c1"&gt;:as&lt;/span&gt; m]
         '[matcher-combinators.midje &lt;span class="pl-c1"&gt;:refer&lt;/span&gt; [match]])
(&lt;span class="pl-en"&gt;fact&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;matching a map exactly&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  {&lt;span class="pl-c1"&gt;:a&lt;/span&gt; {&lt;span class="pl-c1"&gt;:bb&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;:cc&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;} &lt;span class="pl-c1"&gt;:d&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;} =&amp;gt; (&lt;span class="pl-en"&gt;match&lt;/span&gt; (&lt;span class="pl-en"&gt;m/equals&lt;/span&gt; {&lt;span class="pl-c1"&gt;:a&lt;/span&gt; (&lt;span class="pl-en"&gt;m/embeds&lt;/span&gt; {&lt;span class="pl-c1"&gt;:bb&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;}) &lt;span class="pl-c1"&gt;:d&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;}))
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; but when a map isn't immediately wrapped, it is interpreted as an `embeds` matcher&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; so you can write the previous check as:&lt;/span&gt;
  {&lt;span class="pl-c1"&gt;:a&lt;/span&gt; {&lt;span class="pl-c1"&gt;:bb&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;:cc&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;} &lt;span class="pl-c1"&gt;:d&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;} =&amp;gt; (&lt;span class="pl-en"&gt;match&lt;/span&gt; (&lt;span class="pl-en"&gt;m/equals&lt;/span&gt; {&lt;span class="pl-c1"&gt;:a&lt;/span&gt; {&lt;span class="pl-c1"&gt;:bb&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;} &lt;span class="pl-c1"&gt;:d&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;})))

(&lt;span class="pl-en"&gt;fact&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;you can assert an exception is thrown &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Assert _some_ exception is raised and the ex-data inside satisfies the matcher&lt;/span&gt;
  (&lt;span class="pl-k"&gt;throw&lt;/span&gt; (&lt;span class="pl-en"&gt;ex-info&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;foo&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; {&lt;span class="pl-c1"&gt;:foo&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;:bar&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;})) =&amp;gt; (&lt;span class="pl-k"&gt;throws-match&lt;/span&gt; {&lt;span class="pl-c1"&gt;:foo&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;})

  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Assert _a specific_ exception is raised and the ex-data inside satisfies the matcher&lt;/span&gt;
  (&lt;span class="pl-k"&gt;throw&lt;/span&gt; (&lt;span class="pl-en"&gt;ex-info&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;foo&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; {&lt;span class="pl-c1"&gt;:foo&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;:bar&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;})) =&amp;gt; (&lt;span class="pl-k"&gt;throws-match&lt;/span&gt; ExceptionInfo {&lt;span class="pl-c1"&gt;:foo&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;}))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that you can also use the &lt;code&gt;match&lt;/code&gt; checker to match arguments within midje's &lt;code&gt;provided&lt;/code&gt; construct:&lt;/p&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;(&lt;span class="pl-en"&gt;unfinished&lt;/span&gt; f)
(&lt;span class="pl-en"&gt;fact&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;using matchers in provided statements&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  (&lt;span class="pl-en"&gt;f&lt;/span&gt; [&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;]) =&amp;gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;
  (&lt;span class="pl-en"&gt;provided&lt;/span&gt;
    (&lt;span class="pl-en"&gt;f&lt;/span&gt; (&lt;span class="pl-en"&gt;match&lt;/span&gt; [odd? even? odd?])) =&amp;gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-clojuretest" class="anchor" aria-hidden="true" href="#clojuretest"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;code&gt;clojure.test&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Require the &lt;code&gt;matcher-combinators.test&lt;/code&gt; namespace, which will extend &lt;code&gt;clojure.test&lt;/code&gt;'s &lt;code&gt;is&lt;/code&gt; macro to accept the &lt;code&gt;match?&lt;/code&gt; and &lt;code&gt;thrown-match?&lt;/code&gt; directives.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;match?&lt;/code&gt;: The first argument should be the matcher-combinator represented the expected value, and the second argument should be the expression being checked.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;thrown-match?&lt;/code&gt;: The first argument should be a throwable subclass, the second a matcher-combinators, and the third the expression being checked.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;require&lt;/span&gt; '[clojure.test &lt;span class="pl-c1"&gt;:refer&lt;/span&gt; &lt;span class="pl-c1"&gt;:all&lt;/span&gt;]
         '[matcher-combinators.test] &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; needed for defining `match?`&lt;/span&gt;
         '[matcher-combinators.matchers &lt;span class="pl-c1"&gt;:as&lt;/span&gt; m])
(&lt;span class="pl-k"&gt;deftest&lt;/span&gt; &lt;span class="pl-e"&gt;basic-sequence-matching&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; by default a sequentials are interpreted as a `equals` matcher&lt;/span&gt;
  (&lt;span class="pl-en"&gt;is&lt;/span&gt; (&lt;span class="pl-en"&gt;match?&lt;/span&gt; [&lt;span class="pl-c1"&gt;1&lt;/span&gt; odd?] [&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;]))
  (&lt;span class="pl-en"&gt;is&lt;/span&gt; (&lt;span class="pl-en"&gt;match?&lt;/span&gt; (&lt;span class="pl-en"&gt;m/prefix&lt;/span&gt; [&lt;span class="pl-c1"&gt;1&lt;/span&gt; odd?]) [&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;])))

(&lt;span class="pl-k"&gt;defn&lt;/span&gt; &lt;span class="pl-e"&gt;bang!&lt;/span&gt; [] (&lt;span class="pl-k"&gt;throw&lt;/span&gt; (&lt;span class="pl-en"&gt;ex-info&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;an exception&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; {&lt;span class="pl-c1"&gt;:foo&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;:bar&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;})))

(&lt;span class="pl-k"&gt;deftest&lt;/span&gt; &lt;span class="pl-e"&gt;exception-matching&lt;/span&gt;
  (&lt;span class="pl-en"&gt;is&lt;/span&gt; (&lt;span class="pl-en"&gt;thrown-match?&lt;/span&gt; ExceptionInfo
                     {&lt;span class="pl-c1"&gt;:foo&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;}
                     (&lt;span class="pl-en"&gt;bang!&lt;/span&gt;))))&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-matchers" class="anchor" aria-hidden="true" href="#matchers"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Matchers&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-default-matchers" class="anchor" aria-hidden="true" href="#default-matchers"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;default matchers&lt;/h3&gt;
&lt;p&gt;If a data-structure isn't wrapped in a specific matcher-combinator the default interpretation is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;map: &lt;code&gt;embeds&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;sequential: &lt;code&gt;equals&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;set: &lt;code&gt;equals&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;number, date, and other base data-structure: &lt;code&gt;equals&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;regex: &lt;code&gt;regex&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-built-in-matchers" class="anchor" aria-hidden="true" href="#built-in-matchers"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;built-in matchers&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;equals&lt;/code&gt; operates over base values, maps, sequences, and sets&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;base values (string, int, function, etc.): matches when the given value is exactly the same as the &lt;code&gt;expected&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;map: matches when
&lt;ol&gt;
&lt;li&gt;the keys of the &lt;code&gt;expected&lt;/code&gt; map are equal to the given map's keys&lt;/li&gt;
&lt;li&gt;the value matchers of &lt;code&gt;expected&lt;/code&gt; map matches the given map's values&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;sequence: matches when the &lt;code&gt;expected&lt;/code&gt; sequences's matchers match the given sequence. Similar to midje's &lt;code&gt;(just expected)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;set: matches when all the elements in the given set can be matched with a matcher in &lt;code&gt;expected&lt;/code&gt; set and each matcher is used exactly once.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;embeds&lt;/code&gt; operates over maps, sequences, and sets&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;map: matches when the map contains some of the same key/values as the &lt;code&gt;expected&lt;/code&gt; map.&lt;/li&gt;
&lt;li&gt;sequence: order-agnostic matcher that will match when provided a subset of the &lt;code&gt;expected&lt;/code&gt; sequence. Similar to midje's &lt;code&gt;(contains expected :in-any-order :gaps-ok)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;set: matches when all the matchers in the &lt;code&gt;expected&lt;/code&gt; set can be matched with an element in the provided set. There may be more elements in the provided set than there are matchers.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;prefix&lt;/code&gt; operates over sequences&lt;/p&gt;
&lt;p&gt;matches when provided a (ordered) prefix of the &lt;code&gt;expected&lt;/code&gt; sequence. Similar to midje's &lt;code&gt;(contains expected)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;in-any-order&lt;/code&gt; operates over sequences&lt;/p&gt;
&lt;p&gt;matches when the given a sequence that is the same as the &lt;code&gt;expected&lt;/code&gt; sequence but with elements in a different order.  Similar to midje's &lt;code&gt;(just expected :in-any-order)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;set-equals&lt;/code&gt;/&lt;code&gt;set-embeds&lt;/code&gt; similar behavior to &lt;code&gt;equals&lt;/code&gt;/&lt;code&gt;embeds&lt;/code&gt; for sets, but allows one to specify the matchers using a sequence so that duplicate matchers are not removed. For example, &lt;code&gt;(equals #{odd? odd?})&lt;/code&gt; becomes &lt;code&gt;(equals #{odd})&lt;/code&gt;, so to get arround this one should use &lt;code&gt;(set-equals [odd? odd])&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;regex&lt;/code&gt;: matches the &lt;code&gt;actual-value-found&lt;/code&gt; when provided an &lt;code&gt;expected-regex&lt;/code&gt; using &lt;code&gt;(re-find expected-regex actual-value-found)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;absent&lt;/code&gt;: for use in the context of maps. Matches when the actual map is missing the key pointing to the &lt;code&gt;absent&lt;/code&gt; matcher. For example &lt;code&gt;(is (match? {:a absent :b 1} {:b 1}))&lt;/code&gt; matches but &lt;code&gt;(is (match? {:a absent :b 1} {:a 0 :b 1}))&lt;/code&gt; won't.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-building-new-matchers" class="anchor" aria-hidden="true" href="#building-new-matchers"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;building new matchers&lt;/h3&gt;
&lt;p&gt;You can extend your data-types to work with &lt;code&gt;matcher-combinators&lt;/code&gt; by implemented the &lt;a href="https://github.com/nubank/matcher-combinators/blob/066da1a07ab620a6c63bbb0ce8e1b6b3a4ccd956/src/matcher_combinators/core.clj#L5-L9"&gt;&lt;code&gt;Matcher&lt;/code&gt; protocol&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;An example of this in the wild can be seen in the &lt;code&gt;abracad&lt;/code&gt; library &lt;a href="https://github.com/nubank/abracad/blob/b52e6a7114461f50bdacc2cf09a1de08f707b9f3/test/abracad/custom_types_test.clj#L15-L20"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-overriding-default-matchers" class="anchor" aria-hidden="true" href="#overriding-default-matchers"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Overriding default matchers&lt;/h2&gt;
&lt;p&gt;Inside the context of &lt;code&gt;match?&lt;/code&gt; (clojure.test) / &lt;code&gt;match&lt;/code&gt; (midje), data-structures are assigned default matchers, which eliminates the need to wrap data-structures with matcher-combinators when your desired matching behavior matches the defaults.&lt;/p&gt;
&lt;p&gt;But what if your desired matching behavior deviates from the defaults?&lt;/p&gt;
&lt;p&gt;For example, if you want to do exact map matching you need to use a log of &lt;code&gt;m/equals&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;deftest&lt;/span&gt; &lt;span class="pl-e"&gt;exact-map-matching-by-hand&lt;/span&gt;
  (&lt;span class="pl-en"&gt;is&lt;/span&gt; (&lt;span class="pl-en"&gt;match?&lt;/span&gt; (&lt;span class="pl-en"&gt;m/equals&lt;/span&gt; {&lt;span class="pl-c1"&gt;:a&lt;/span&gt; (&lt;span class="pl-en"&gt;m/equals&lt;/span&gt; {&lt;span class="pl-c1"&gt;:b&lt;/span&gt; (&lt;span class="pl-en"&gt;m/equals&lt;/span&gt; {&lt;span class="pl-c1"&gt;:c&lt;/span&gt; odd?})})}))
              {&lt;span class="pl-c1"&gt;:a&lt;/span&gt; {&lt;span class="pl-c1"&gt;:b&lt;/span&gt; {&lt;span class="pl-c1"&gt;:c&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;}}})
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; without m/equals, the system defaults to m/embeds for maps,&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; which has looser matching properties&lt;/span&gt;
  (&lt;span class="pl-en"&gt;is&lt;/span&gt; (&lt;span class="pl-en"&gt;match?&lt;/span&gt; {&lt;span class="pl-c1"&gt;:a&lt;/span&gt; {&lt;span class="pl-c1"&gt;:b&lt;/span&gt; {&lt;span class="pl-c1"&gt;:c&lt;/span&gt; odd?}}}
              {&lt;span class="pl-c1"&gt;:a&lt;/span&gt; {&lt;span class="pl-c1"&gt;:b&lt;/span&gt; {&lt;span class="pl-c1"&gt;:c&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;:extra-c&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt;} &lt;span class="pl-c1"&gt;:extra-b&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt;} &lt;span class="pl-c1"&gt;:extra-a&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt;})))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This verbosity can be avoided by redefining the matcher data-type defaults&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-clojuretest-1" class="anchor" aria-hidden="true" href="#clojuretest-1"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;clojure.test&lt;/h3&gt;
&lt;p&gt;You can register a custom &lt;code&gt;clojure.test&lt;/code&gt; match assert expression if you are going to use it a few times:&lt;/p&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;defmethod&lt;/span&gt; &lt;span class="pl-e"&gt;clojure.test&lt;/span&gt;/&lt;span class="pl-e"&gt;assert-expr&lt;/span&gt; '&lt;span class="pl-e"&gt;match-equals?&lt;/span&gt; [msg form]
  (&lt;span class="pl-en"&gt;matcher-combinators.test/build-match-assert&lt;/span&gt; 'match-equals? {clojure.lang.IPersistentMap m/equals} msg form))

(&lt;span class="pl-k"&gt;deftest&lt;/span&gt; &lt;span class="pl-e"&gt;match-equals-test&lt;/span&gt;
  (&lt;span class="pl-en"&gt;is&lt;/span&gt; (&lt;span class="pl-en"&gt;match-equals?&lt;/span&gt; {&lt;span class="pl-c1"&gt;:a&lt;/span&gt; {&lt;span class="pl-c1"&gt;:b&lt;/span&gt; {&lt;span class="pl-c1"&gt;:c&lt;/span&gt; odd?}}}
                     {&lt;span class="pl-c1"&gt;:a&lt;/span&gt; {&lt;span class="pl-c1"&gt;:b&lt;/span&gt; {&lt;span class="pl-c1"&gt;:c&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;}}})))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or if you want a one-off override of defaults, it can be done &lt;code&gt;match-with?&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(deftest one-off-match-equals
  (is (match-with? {clojure.lang.IPersistentMap m/equals}
                   {:a {:b {:c odd?}}}
                   {:a {:b {:c 1}}})))
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;&lt;a id="user-content-built-in-matching-context" class="anchor" aria-hidden="true" href="#built-in-matching-context"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;built-in matching context&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;match?&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;match-with?&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;match-equals?&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-midje-1" class="anchor" aria-hidden="true" href="#midje-1"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;midje&lt;/h3&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;(&lt;span class="pl-en"&gt;fact&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;match-with example&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  {&lt;span class="pl-c1"&gt;:a&lt;/span&gt; {&lt;span class="pl-c1"&gt;:b&lt;/span&gt; {&lt;span class="pl-c1"&gt;:c&lt;/span&gt; odd?}}} =&amp;gt; (&lt;span class="pl-en"&gt;match-with&lt;/span&gt; {clojure.lang.IPersistentMap m/equals}
                                     {&lt;span class="pl-c1"&gt;:a&lt;/span&gt; {&lt;span class="pl-c1"&gt;:b&lt;/span&gt; {&lt;span class="pl-c1"&gt;:c&lt;/span&gt; odd?}}}))
(&lt;span class="pl-en"&gt;fact&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;match-equals example&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  {&lt;span class="pl-c1"&gt;:a&lt;/span&gt; {&lt;span class="pl-c1"&gt;:b&lt;/span&gt; {&lt;span class="pl-c1"&gt;:c&lt;/span&gt; odd?}}} =&amp;gt; (&lt;span class="pl-en"&gt;match-equals&lt;/span&gt; {&lt;span class="pl-c1"&gt;:a&lt;/span&gt; {&lt;span class="pl-c1"&gt;:b&lt;/span&gt; {&lt;span class="pl-c1"&gt;:c&lt;/span&gt; odd?}}}))&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content-built-in-matching-context-1" class="anchor" aria-hidden="true" href="#built-in-matching-context-1"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;built-in matching context&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;match&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;match-with&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;match-roughly&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;match-equals&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Or you can build your own, for example:&lt;/p&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-e"&gt;match-equals&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;match but using strict `equals` matching behavior for maps, even nested ones.&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  (&lt;span class="pl-en"&gt;match-with&lt;/span&gt; {clojure.lang.IPersistentMap matchers/equals}))&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-running-tests" class="anchor" aria-hidden="true" href="#running-tests"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Running tests&lt;/h2&gt;
&lt;p&gt;The project contains &lt;code&gt;midje&lt;/code&gt;, &lt;code&gt;clojure.test&lt;/code&gt;, and &lt;code&gt;cljs.test&lt;/code&gt; tests.&lt;/p&gt;
&lt;p&gt;To run Clojure tests:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;lein midje
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To run Clojurescript tests:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;lein test-node
&lt;/code&gt;&lt;/pre&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>nubank</author><guid isPermaLink="false">https://github.com/nubank/matcher-combinators</guid><pubDate>Thu, 09 Jan 2020 00:04:00 GMT</pubDate></item><item><title>nubank/clj-bigpanda #5 in Clojure, Today</title><link>https://github.com/nubank/clj-bigpanda</link><description>&lt;p&gt;&lt;i&gt;A clojure library for BigPanda Alerts and Deployments&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-clj-bigpanda" class="anchor" aria-hidden="true" href="#clj-bigpanda"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;clj-bigpanda&lt;/h1&gt;
&lt;p&gt;A Clojure library for interacting with &lt;a href="https://bigpanda.io" rel="nofollow"&gt;BigPanda&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Feel free to contribute!&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Usage&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-alerts" class="anchor" aria-hidden="true" href="#alerts"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Alerts&lt;/h3&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;require&lt;/span&gt; '[clj-bigpanda.events &lt;span class="pl-c1"&gt;:as&lt;/span&gt; events])
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt; set token and appkey&lt;/span&gt;
(&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-e"&gt;bigpanda-auth&lt;/span&gt; {&lt;span class="pl-c1"&gt;:token&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;123123-my-token&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;:appkey&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;312312-my-appkey&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;})
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt; pass it your auth and an alert&lt;/span&gt;
(&lt;span class="pl-en"&gt;events/create-alert&lt;/span&gt; bigpanda-auth {&lt;span class="pl-c1"&gt;:status&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;critical&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;:host&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;my-db-1&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;:check&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;CPU&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;})&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-deployments" class="anchor" aria-hidden="true" href="#deployments"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Deployments&lt;/h3&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;require&lt;/span&gt; '[clj-bigpanda.events &lt;span class="pl-c1"&gt;:as&lt;/span&gt; events])
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt; set token and appkey&lt;/span&gt;
(&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-e"&gt;bigpanda-auth&lt;/span&gt; {&lt;span class="pl-c1"&gt;:token&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;123123-my-token&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;:appkey&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;312312-my-appkey&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;})
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt; pass it your auth and a deployment start&lt;/span&gt;
(&lt;span class="pl-en"&gt;events/start-deployment&lt;/span&gt; bigpanda-auth {&lt;span class="pl-c1"&gt;:hosts&lt;/span&gt; [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;prod-api-1&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;prod-api-2&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;] &lt;span class="pl-c1"&gt;:version&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;0.8.2&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;:component&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;billing&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;})
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt; pass it your auth and a deployment end&lt;/span&gt;
(&lt;span class="pl-en"&gt;events/end-deployment&lt;/span&gt; bigpanda-auth {&lt;span class="pl-c1"&gt;:hosts&lt;/span&gt; [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;prod-api-1&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;prod-api-2&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;] &lt;span class="pl-c1"&gt;:version&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;0.8.2&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;:component&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;billing&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;:status&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;success&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;})&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-tests" class="anchor" aria-hidden="true" href="#tests"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tests&lt;/h2&gt;
&lt;p&gt;Run tests with &lt;code&gt;lein test&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-license" class="anchor" aria-hidden="true" href="#license"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;License&lt;/h2&gt;
&lt;p&gt;Copyright (C) 2016 Nubank &lt;a href="mailto:tech@nubank.com.br"&gt;tech@nubank.com.br&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Distributed under the Eclipse Public License, the same as Clojure.&lt;/p&gt;
&lt;p&gt;Based on clj-librato project: &lt;a href="https://github.com/aphyr/clj-librato"&gt;https://github.com/aphyr/clj-librato&lt;/a&gt;&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>nubank</author><guid isPermaLink="false">https://github.com/nubank/clj-bigpanda</guid><pubDate>Thu, 09 Jan 2020 00:05:00 GMT</pubDate></item><item><title>nubank/selvage #6 in Clojure, Today</title><link>https://github.com/nubank/selvage</link><description>&lt;p&gt;&lt;i&gt;Testing at the edges with a world-transition style integration test framework&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-selvage" class="anchor" aria-hidden="true" href="#selvage"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;selvage&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;noun:
the edge of woven fabric finished so as to prevent raveling&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Integration testing at the edges of a microservice.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-what-are-selvage-tests" class="anchor" aria-hidden="true" href="#what-are-selvage-tests"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;What are selvage tests?&lt;/h3&gt;
&lt;p&gt;Selvage tests are integration-style tests for a single service that use the flow macro.&lt;/p&gt;
&lt;p&gt;The entry point for selvage tests are the endpoints of the service: http handlers and kafka consumers.
Hence, all internal service code remains un-mocked, but external communications with HTTP, kafka, and other components like S3, redis, etc, are mocked.&lt;/p&gt;
&lt;p&gt;Flows follow a world-transition pattern. The flow starts with a base world state, which is an empty map, and each subsequent form in the flow is either a transition, query, or check step.&lt;/p&gt;
&lt;p&gt;Given that service code isn't mocked in selvage tests, schema validation is enabled by default within the &lt;code&gt;flow&lt;/code&gt; macro.&lt;/p&gt;
&lt;p&gt;The flow structure can also be the basis for end-to-end (&lt;code&gt;e2e&lt;/code&gt;) style tests. In the case of &lt;code&gt;e2e&lt;/code&gt; tests, incoming/outgoing correspondences aren't mocked, so flow transitions make can send HTTP requests or produce kafka messages that will be processed by fully spun up services.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-backing-test-framework" class="anchor" aria-hidden="true" href="#backing-test-framework"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;backing test-framework&lt;/h3&gt;
&lt;p&gt;Flows make use of a host test-framework to assert checks over the state of the world. Currently two test-frameworks are supported:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Midje&lt;/code&gt; via the &lt;code&gt;flow&lt;/code&gt; macro in the &lt;code&gt;selvage.midje.flow&lt;/code&gt; namespace&lt;/li&gt;
&lt;li&gt;&lt;code&gt;clojure.test&lt;/code&gt; via the &lt;code&gt;defflow&lt;/code&gt; macro in the &lt;code&gt;selvage.test.flow&lt;/code&gt; namespace&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-system-components" class="anchor" aria-hidden="true" href="#system-components"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;system components&lt;/h3&gt;
&lt;p&gt;Selvage flows are capable of testing a single service's logic, that is, everything that lies between the incoming data (http endpoints and kafka consumer handlers) and outgoing data (http client requests and kafka message production). Thus, to trigger things like message consumption, we need access to the service's various components.&lt;/p&gt;
&lt;p&gt;Convention is write an &lt;code&gt;init!&lt;/code&gt; transition function that initializes the system components and stores it in the world under the &lt;code&gt;:system&lt;/code&gt; key.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-world" class="anchor" aria-hidden="true" href="#world"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;world&lt;/h3&gt;
&lt;p&gt;The world is a map that stores:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;state used by helper functions, for instance, the (mock) http component&lt;/li&gt;
&lt;li&gt;values to be checked inside of Midje &lt;code&gt;fact&lt;/code&gt;s&lt;/li&gt;
&lt;li&gt;intermediate values to be used in future computations&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-steps" class="anchor" aria-hidden="true" href="#steps"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;steps&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Transition functions&lt;/strong&gt;: a 1-arity function that must take in a world and return a world. They generally have side-effects, store results under keys for checking, and by principal avoid mocking as much as possible.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Checks&lt;/strong&gt;: are Midje &lt;code&gt;fact&lt;/code&gt; or &lt;code&gt;facts&lt;/code&gt; expressions that should perform checks over values stored in the world. Since facts don't modify the world, or accept a world argument, the world is made available within facts via the &lt;code&gt;*world*&lt;/code&gt; dynamic variable. Checks are retriable; the &lt;code&gt;flow&lt;/code&gt; macro will re-run checks that fail until they succeed or a timeout is reached.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Query functions&lt;/strong&gt;: retriable transition functions defined using &lt;code&gt;selvage.{midje|test}.flow/defnq&lt;/code&gt; and &lt;code&gt;selvage.{midje|test}.flow/fnq&lt;/code&gt;. If running the function fails, it will be retried. This functionality is generally only used in flows for end-to-end tests, when you want to get data from a potentially flaky source like over http.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-simple-clojuretest-example" class="anchor" aria-hidden="true" href="#simple-clojuretest-example"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;simple &lt;code&gt;clojure.test&lt;/code&gt; example&lt;/h3&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;ns&lt;/span&gt; &lt;span class="pl-e"&gt;selvage.clojure-test-example&lt;/span&gt;
  (&lt;span class="pl-c1"&gt;:require&lt;/span&gt; [selvage.test.flow &lt;span class="pl-c1"&gt;:refer&lt;/span&gt; [*world* &lt;span class="pl-k"&gt;defcheck&lt;/span&gt; &lt;span class="pl-k"&gt;defflow&lt;/span&gt;]]
            [my-mocks.http &lt;span class="pl-c1"&gt;:refer&lt;/span&gt; [GET]]
            [my-mocks.kafka.mock-consumer &lt;span class="pl-c1"&gt;:as&lt;/span&gt; kafka.mock-consumer]
            [my-service.components &lt;span class="pl-c1"&gt;:as&lt;/span&gt; components]))

(&lt;span class="pl-k"&gt;defn&lt;/span&gt; &lt;span class="pl-e"&gt;init!&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;setup components and store them in the world&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  [world]
  (&lt;span class="pl-k"&gt;let&lt;/span&gt; [system (&lt;span class="pl-en"&gt;components/ensure-system-up!&lt;/span&gt;)]
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; .. code to setup kafka, http, etc services ..&lt;/span&gt;
    (&lt;span class="pl-en"&gt;assoc&lt;/span&gt; world &lt;span class="pl-c1"&gt;:system&lt;/span&gt; system)))

(&lt;span class="pl-k"&gt;defn&lt;/span&gt; &lt;span class="pl-e"&gt;load-bill&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Hit service's endpoint to access bill data&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  [bill-id world]
  (&lt;span class="pl-k"&gt;let&lt;/span&gt; [url (&lt;span class="pl-en"&gt;str&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/admin/bill/&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; id &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)]
    (&lt;span class="pl-en"&gt;assoc&lt;/span&gt; world &lt;span class="pl-c1"&gt;:bill&lt;/span&gt; (&lt;span class="pl-en"&gt;GET&lt;/span&gt; &lt;span class="pl-c1"&gt;:json&lt;/span&gt; url &lt;span class="pl-c1"&gt;200&lt;/span&gt;))))

(&lt;span class="pl-k"&gt;defcheck&lt;/span&gt; &lt;span class="pl-e"&gt;check-loaded-bill-total&lt;/span&gt;
  (&lt;span class="pl-en"&gt;is&lt;/span&gt; (&lt;span class="pl-en"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt; (&lt;span class="pl-en"&gt;-&amp;gt;&lt;/span&gt; *world* &lt;span class="pl-c1"&gt;:bill&lt;/span&gt; &lt;span class="pl-c1"&gt;:total&lt;/span&gt;))))

(&lt;span class="pl-k"&gt;defflow&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;simple clojure.test backed flow&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; the world starts out as an empty map: {}&lt;/span&gt;

  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; transition step that initializes the system components and store them in the world&lt;/span&gt;
  &lt;span class="pl-e"&gt;init!&lt;/span&gt;

  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; transition step that triggers service code via an http endpoint&lt;/span&gt;
  (&lt;span class="pl-en"&gt;partial&lt;/span&gt; load-bill #uuid &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;3290571d-09c3-4f08-99ec-a0bad7c4c546&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)

  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; inline check step&lt;/span&gt;
  (&lt;span class="pl-en"&gt;testing&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;check the loaded bill name&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
    (&lt;span class="pl-en"&gt;is&lt;/span&gt; (&lt;span class="pl-en"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Radhia Cousot&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
           (&lt;span class="pl-en"&gt;-&amp;gt;&lt;/span&gt; *world* &lt;span class="pl-c1"&gt;:bill&lt;/span&gt; &lt;span class="pl-c1"&gt;:name&lt;/span&gt;))))

  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; check step defined outside of the flow&lt;/span&gt;
  &lt;span class="pl-e"&gt;check-loaded-bill-total&lt;/span&gt;

  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; transition step that triggers service code via kafka message consumption&lt;/span&gt;
  (&lt;span class="pl-k"&gt;fn&lt;/span&gt; [world]
    (&lt;span class="pl-k"&gt;let&lt;/span&gt; [message  {&lt;span class="pl-c1"&gt;:topic&lt;/span&gt;   &lt;span class="pl-c1"&gt;:publish-bill&lt;/span&gt;
                    &lt;span class="pl-c1"&gt;:message&lt;/span&gt; {&lt;span class="pl-c1"&gt;:total&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;
                              &lt;span class="pl-c1"&gt;:name&lt;/span&gt;  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Radhia Cousot&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}}
          consumer (&lt;span class="pl-en"&gt;-&amp;gt;&lt;/span&gt; world &lt;span class="pl-c1"&gt;:system&lt;/span&gt; &lt;span class="pl-c1"&gt;:consumer&lt;/span&gt;)]
      (&lt;span class="pl-en"&gt;kafka.mock-consumer/consume!&lt;/span&gt; message))
      &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; don't forget that transition steps always return a world&lt;/span&gt;
      world)

  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; consuming a message doesn't return anything, but we can check behavior by&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; checking messages produced, outgoing http calls, and updated results from&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; subsequent incoming http calls&lt;/span&gt;
  &lt;span class="pl-e"&gt;...&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-simple-midje-example" class="anchor" aria-hidden="true" href="#simple-midje-example"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;simple Midje example&lt;/h3&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;ns&lt;/span&gt; &lt;span class="pl-e"&gt;selvage.midje-example&lt;/span&gt;
  (&lt;span class="pl-c1"&gt;:require&lt;/span&gt; [selvage.midje.flow &lt;span class="pl-c1"&gt;:refer&lt;/span&gt; [*world* flow]]
            [my-mocks.http &lt;span class="pl-c1"&gt;:refer&lt;/span&gt; [GET]]
            [my-mocks.kafka.mock-consumer &lt;span class="pl-c1"&gt;:as&lt;/span&gt; kafka.mock-consumer]
            [my-service.components &lt;span class="pl-c1"&gt;:as&lt;/span&gt; components]))

(&lt;span class="pl-k"&gt;defn&lt;/span&gt; &lt;span class="pl-e"&gt;init!&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;setup components and store them in the world&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  [world]
  (&lt;span class="pl-k"&gt;let&lt;/span&gt; [system (&lt;span class="pl-en"&gt;components/ensure-system-up!&lt;/span&gt;)]
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; .. code to setup kafka, http, etc services ..&lt;/span&gt;
    (&lt;span class="pl-en"&gt;assoc&lt;/span&gt; world &lt;span class="pl-c1"&gt;:system&lt;/span&gt; system)))

(&lt;span class="pl-k"&gt;defn&lt;/span&gt; &lt;span class="pl-e"&gt;load-bill&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Hit service's endpoint to access bill data&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  [bill-id world]
  (&lt;span class="pl-k"&gt;let&lt;/span&gt; [url (&lt;span class="pl-en"&gt;str&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/admin/bill/&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; id &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)]
    (&lt;span class="pl-en"&gt;assoc&lt;/span&gt; world &lt;span class="pl-c1"&gt;:bill&lt;/span&gt; (&lt;span class="pl-en"&gt;GET&lt;/span&gt; &lt;span class="pl-c1"&gt;:json&lt;/span&gt; url &lt;span class="pl-c1"&gt;200&lt;/span&gt;))))

(&lt;span class="pl-en"&gt;flow&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; the world starts out as an empty map: {}&lt;/span&gt;

  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; transition step that initializes the system components and store them in the world&lt;/span&gt;
  init!

  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; transition step that triggers service code via an http endpoint&lt;/span&gt;
  (&lt;span class="pl-en"&gt;partial&lt;/span&gt; load-bill #uuid &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;3290571d-09c3-4f08-99ec-a0bad7c4c546&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)

  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; check step&lt;/span&gt;
  (&lt;span class="pl-en"&gt;fact&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;check the loaded bill&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
    (&lt;span class="pl-c1"&gt;:bill&lt;/span&gt; *world*) =&amp;gt; {&lt;span class="pl-c1"&gt;:total&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;
                        &lt;span class="pl-c1"&gt;:name&lt;/span&gt;  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Radhia Cousot&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;})

  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; transition step that triggers service code via kafka message consumption&lt;/span&gt;
  (&lt;span class="pl-k"&gt;fn&lt;/span&gt; [world]
    (&lt;span class="pl-k"&gt;let&lt;/span&gt; [message  {&lt;span class="pl-c1"&gt;:topic&lt;/span&gt;   &lt;span class="pl-c1"&gt;:publish-bill&lt;/span&gt;
                    &lt;span class="pl-c1"&gt;:message&lt;/span&gt; {&lt;span class="pl-c1"&gt;:total&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;
                              &lt;span class="pl-c1"&gt;:name&lt;/span&gt;  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Radhia Cousot&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}}
          consumer (&lt;span class="pl-en"&gt;-&amp;gt;&lt;/span&gt; world &lt;span class="pl-c1"&gt;:system&lt;/span&gt; &lt;span class="pl-c1"&gt;:consumer&lt;/span&gt;)]
      (&lt;span class="pl-en"&gt;kafka.mock-consumer/consume!&lt;/span&gt; message))
      &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; don't forget that transition steps always return a world&lt;/span&gt;
      world)

  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; consuming a message doesn't return anything, but we can check behavior by&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; checking messages produced, outgoing http calls, and updated results from&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; subsequent incoming http calls&lt;/span&gt;
  ...)&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-probing-with-retry-sequences" class="anchor" aria-hidden="true" href="#probing-with-retry-sequences"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;probing with retry sequences&lt;/h3&gt;
&lt;p&gt;Check and query steps within a flow are retriable.
The &lt;code&gt;flow&lt;/code&gt; macro will group adjacent retriable steps into a sequence.
When one step in a sequence fails, the entire sequence will be retried.
This allows for nice probing behavior:&lt;/p&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;require&lt;/span&gt; '[selvage.midje.flow &lt;span class="pl-c1"&gt;:refer&lt;/span&gt; [flow fnq]]
(&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-e"&gt;counter&lt;/span&gt; (&lt;span class="pl-en"&gt;atom&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt;))

(&lt;span class="pl-en"&gt;flow&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;query / check probing example&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; a transition isn't retriable, so it won't get grouped in a sequence&lt;/span&gt;
  (&lt;span class="pl-k"&gt;fn&lt;/span&gt; [w] (&lt;span class="pl-en"&gt;println&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;transition step run once&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) w)

  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; a query that starts 'succeeding' after 3 calls&lt;/span&gt;
  (&lt;span class="pl-en"&gt;fnq&lt;/span&gt; [w]
    (&lt;span class="pl-k"&gt;if&lt;/span&gt; (&lt;span class="pl-en"&gt;&amp;lt;&lt;/span&gt; (&lt;span class="pl-en"&gt;swap!&lt;/span&gt; counter inc) &lt;span class="pl-c1"&gt;3&lt;/span&gt;)
      (&lt;span class="pl-k"&gt;do&lt;/span&gt; (&lt;span class="pl-en"&gt;println&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;fail query&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
          (&lt;span class="pl-k"&gt;throw&lt;/span&gt; (&lt;span class="pl-en"&gt;Exception.&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;try again&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)))
      (&lt;span class="pl-k"&gt;do&lt;/span&gt; (&lt;span class="pl-en"&gt;println&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;pass query&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
          w)))

  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; this check is grouped with the above query into a 'retriable sequence'&lt;/span&gt;
  (&lt;span class="pl-en"&gt;fact&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;queried 10 times?&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; @counter =&amp;gt; &lt;span class="pl-c1"&gt;10&lt;/span&gt;))

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; results in the following output:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; "transition step run once"&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; "fail query"&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; "fail query"&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; "fail query"&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; "pass query"&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; ... 6x "pass query"&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; true&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-dynamic-variables" class="anchor" aria-hidden="true" href="#dynamic-variables"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;dynamic variables&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;*probe-timeout*&lt;/code&gt;: keep retrying query and check steps until this millisecond timeout has elapsed.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;*probe-sleep-period*&lt;/code&gt;: time in milliseconds to wait before retrying a query or check step.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;*verbose*&lt;/code&gt;: controls whether the step should be logged to stdout and splunk.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;*world*&lt;/code&gt;: the current world, which is made available within check steps.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a id="user-content-using-bindings-with-midje" class="anchor" aria-hidden="true" href="#using-bindings-with-midje"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Using bindings with Midje&lt;/h4&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;ns&lt;/span&gt; &lt;span class="pl-e"&gt;selvage.midje-binding-example&lt;/span&gt;
  (&lt;span class="pl-c1"&gt;:require&lt;/span&gt; [selvage.midje.flow &lt;span class="pl-c1"&gt;:refer&lt;/span&gt; [*world* *verbose* flow]]

(&lt;span class="pl-k"&gt;binding&lt;/span&gt; [*verbose* &lt;span class="pl-c1"&gt;true&lt;/span&gt;]
  (&lt;span class="pl-en"&gt;flow&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;setting *verbose* with midje flow&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
    (&lt;span class="pl-en"&gt;fact&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;inside the flow *verbose* is set to true&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
      *verbose* =&amp;gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;)))&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content-using-bindings-with-clojuretest" class="anchor" aria-hidden="true" href="#using-bindings-with-clojuretest"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Using bindings with clojure.test&lt;/h4&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;ns&lt;/span&gt; &lt;span class="pl-e"&gt;selvage.clojure-test-binding-example&lt;/span&gt;
  (&lt;span class="pl-c1"&gt;:require&lt;/span&gt; [selvage.test.flow &lt;span class="pl-c1"&gt;:refer&lt;/span&gt; [*world* *verbose* &lt;span class="pl-k"&gt;defflow&lt;/span&gt;]]

(&lt;span class="pl-k"&gt;defn&lt;/span&gt; &lt;span class="pl-e"&gt;example-wrapper&lt;/span&gt; [flow]
  (&lt;span class="pl-k"&gt;binding&lt;/span&gt; [*verbose* &lt;span class="pl-c1"&gt;true&lt;/span&gt;]
    (&lt;span class="pl-en"&gt;flow&lt;/span&gt;)))

(&lt;span class="pl-k"&gt;defflow&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;using binding with defflow requires a wrapper&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  {&lt;span class="pl-c1"&gt;:wrapper-fn&lt;/span&gt; example-wrapper}

  (&lt;span class="pl-en"&gt;testing&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;given the provided wrapper function, *verbose* is set to true&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
    (&lt;span class="pl-en"&gt;is&lt;/span&gt; (&lt;span class="pl-en"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt; *verbose*))))&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-editor-integration" class="anchor" aria-hidden="true" href="#editor-integration"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Editor Integration&lt;/h3&gt;
&lt;h4&gt;&lt;a id="user-content-emacs--cider" class="anchor" aria-hidden="true" href="#emacs--cider"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Emacs / Cider&lt;/h4&gt;
&lt;p&gt;In order to run tests defined via the &lt;code&gt;defflow&lt;/code&gt; macro in
&lt;a href="https://cider.readthedocs.io/en/latest/running_tests/" rel="nofollow"&gt;Cider&lt;/a&gt;, the
&lt;code&gt;defflow&lt;/code&gt; symbol can be added to the &lt;code&gt;cider-test-defining-forms&lt;/code&gt; list.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;add-to-list&lt;/span&gt; &lt;span class="pl-c1"&gt;'cider-test-defining-forms&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;defflow&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>nubank</author><guid isPermaLink="false">https://github.com/nubank/selvage</guid><pubDate>Thu, 09 Jan 2020 00:06:00 GMT</pubDate></item><item><title>nubank/docopt.clj #7 in Clojure, Today</title><link>https://github.com/nubank/docopt.clj</link><description>&lt;p&gt;&lt;i&gt;[No description found.]&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-docoptclj" class="anchor" aria-hidden="true" href="#docoptclj"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;docopt.clj&lt;/h1&gt;
&lt;p&gt;Clojure implementation of the &lt;a href="http://docopt.org/" rel="nofollow"&gt;docopt&lt;/a&gt; description language.&lt;/p&gt;
&lt;p&gt;Forked from &lt;a href="https://github.com/signalpillar"&gt;@signalpillar&lt;/a&gt;'s &lt;a href="https://github.com/signalpillar/docopt.clj"&gt;fork&lt;/a&gt; of docopt, &lt;a href="https://github.com/docopt/docopt.clj/"&gt;originally&lt;/a&gt; by &lt;a href="https://github.com/postamar"&gt;@postamar&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Usage&lt;/h2&gt;
&lt;p&gt;Save the following script and make it executable with &lt;code&gt;chmod +x&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-clojure"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#!&lt;/span&gt;/bin/sh&lt;/span&gt;
#_(
  DEPS='
   {&lt;span class="pl-c1"&gt;:deps&lt;/span&gt; {docopt
             {&lt;span class="pl-c1"&gt;:git/url&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;https://github.com/nubank/docopt.clj&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
               &lt;span class="pl-c1"&gt;:sha&lt;/span&gt;    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;5191b7ef3ef3f80b4e19c1cd4800333c7ad2513f&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}}}
   '

  OPTS='
  -J-Xms256m -J-Xmx256m
  -J-client
  -J-Dclojure.spec.skip-macros=true
  '

  exec clojure $OPTS -Sdeps &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;$DEPS&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; -i &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;$0&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; -m docopt.example &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;$@&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
)

(&lt;span class="pl-k"&gt;ns&lt;/span&gt; &lt;span class="pl-e"&gt;docopt.example&lt;/span&gt;
  (&lt;span class="pl-c1"&gt;:require&lt;/span&gt; [docopt.core &lt;span class="pl-c1"&gt;:as&lt;/span&gt; docopt]))

(&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-e"&gt;usage&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Test application.&lt;/span&gt;
&lt;span class="pl-s"&gt;&lt;/span&gt;
&lt;span class="pl-s"&gt;Usage: test-script [options]&lt;/span&gt;
&lt;span class="pl-s"&gt;&lt;/span&gt;
&lt;span class="pl-s"&gt;Options:&lt;/span&gt;
&lt;span class="pl-s"&gt;  --an-arg &amp;lt;something&amp;gt;  An argument&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
(&lt;span class="pl-k"&gt;defn&lt;/span&gt; &lt;span class="pl-e"&gt;-main&lt;/span&gt; [&amp;amp; args]
  (&lt;span class="pl-en"&gt;docopt/docopt&lt;/span&gt; usage args
                 (&lt;span class="pl-k"&gt;fn&lt;/span&gt; [arg-map]
                   (&lt;span class="pl-en"&gt;println&lt;/span&gt; arg-map)
                   (&lt;span class="pl-en"&gt;println&lt;/span&gt; (&lt;span class="pl-en"&gt;arg-map&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;--an-arg&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)))))&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;$ chmod +x test-script
$ ./test-script --an-arg &lt;span class="pl-c1"&gt;test&lt;/span&gt;
{--an-arg test}
&lt;span class="pl-c1"&gt;test&lt;/span&gt;
$ ./test-script &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; displays the help text&lt;/span&gt;
Test application.

Usage: testapp [options]

Options:
  --an-arg &lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt;something&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;  An argument&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-tests" class="anchor" aria-hidden="true" href="#tests"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tests&lt;/h2&gt;
&lt;p&gt;Run &lt;code&gt;lein test&lt;/code&gt; to validate all tests.
The tests are automatically downloaded from the language-agnostic
&lt;code&gt;testcases.docopt&lt;/code&gt; file in the reference implementation, master branch commit
&lt;a href="https://github.com/docopt/docopt/tree/511d1c57b59cd2ed663a9f9e181b5160ce97e728"&gt;511d1c57b5&lt;/a&gt;.
Please feel free to (re)open an issue in case this implementation falls behind.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-license" class="anchor" aria-hidden="true" href="#license"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;License&lt;/h2&gt;
&lt;p&gt;&lt;a href="LICENSE"&gt;MIT license&lt;/a&gt;.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>nubank</author><guid isPermaLink="false">https://github.com/nubank/docopt.clj</guid><pubDate>Thu, 09 Jan 2020 00:07:00 GMT</pubDate></item><item><title>nubank/new-grad-template #8 in Clojure, Today</title><link>https://github.com/nubank/new-grad-template</link><description>&lt;p&gt;&lt;i&gt;[No description found.]&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-new-grad-template" class="anchor" aria-hidden="true" href="#new-grad-template"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;new-grad-template&lt;/h1&gt;
&lt;h2&gt;&lt;a id="user-content-prerequisites" class="anchor" aria-hidden="true" href="#prerequisites"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Prerequisites&lt;/h2&gt;
&lt;p&gt;You will need &lt;a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" rel="nofollow"&gt;Java JDK&lt;/a&gt; 8 or above and &lt;a href="https://leiningen.org/" rel="nofollow"&gt;Leiningen&lt;/a&gt; 2.0.0 or above installed.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-running-tests" class="anchor" aria-hidden="true" href="#running-tests"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Running Tests&lt;/h2&gt;
&lt;p&gt;To run tests, run:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;lein midje
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;All tests should pass, you should see this output:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;All checks (3) succeeded.
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;a id="user-content-running" class="anchor" aria-hidden="true" href="#running"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Running&lt;/h2&gt;
&lt;p&gt;To start a web server for the application, run:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;lein ring server
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Your browser should open &lt;a href="http://localhost:3000" rel="nofollow"&gt;http://localhost:3000&lt;/a&gt; and prints &lt;code&gt;Hello World&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-license" class="anchor" aria-hidden="true" href="#license"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;License&lt;/h2&gt;
&lt;p&gt;Copyright © 2017 Nubank&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>nubank</author><guid isPermaLink="false">https://github.com/nubank/new-grad-template</guid><pubDate>Thu, 09 Jan 2020 00:08:00 GMT</pubDate></item><item><title>Bronsa/om #9 in Clojure, Today</title><link>https://github.com/Bronsa/om</link><description>&lt;p&gt;&lt;i&gt;[No description found.]&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-om" class="anchor" aria-hidden="true" href="#om"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;OM&lt;/h1&gt;
&lt;p&gt;who knows&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>Bronsa</author><guid isPermaLink="false">https://github.com/Bronsa/om</guid><pubDate>Thu, 09 Jan 2020 00:09:00 GMT</pubDate></item><item><title>swarmpit/swarmpit #10 in Clojure, Today</title><link>https://github.com/swarmpit/swarmpit</link><description>&lt;p&gt;&lt;i&gt;Lightweight mobile-friendly Docker Swarm management UI&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;p&gt;&lt;a href="http://swarmpit.io" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/7b95f2d692e0b1f8846ee401423c71673f8b4c3e/687474703a2f2f737761726d7069742e696f2f696d672f6c6f676f2d737761726d7069742e7376673f7231" alt="swarmpit" data-canonical-src="http://swarmpit.io/img/logo-swarmpit.svg?r1" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Lightweight mobile-friendly Docker Swarm management UI&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/swarmpit/swarmpit/releases"&gt;&lt;img src="https://camo.githubusercontent.com/4eacd0efdb76e07b7818dcd9539e7f7a57f18ffd/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f72656c656173652d7072652f737761726d7069742f737761726d7069742e737667" alt="version" data-canonical-src="https://img.shields.io/github/release-pre/swarmpit/swarmpit.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://gitter.im/swarmpit_io/swarmpit" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/f8014beacaaaa00713148f4d4bf3d1e0fb880a77/68747470733a2f2f6261646765732e6769747465722e696d2f7472657a6f722f636f6d6d756e6974792e737667" alt="gitter" data-canonical-src="https://badges.gitter.im/trezor/community.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://travis-ci.org/swarmpit/swarmpit" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/b941badfd7a5594c3ffbf5d2f77a83c29c8af7b5/68747470733a2f2f7472617669732d63692e6f72672f737761726d7069742f737761726d7069742e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/swarmpit/swarmpit.svg?branch=master" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://github.com/swarmpit/swarmpit/pulls"&gt;&lt;img src="https://camo.githubusercontent.com/d4e0f63e9613ee474a7dfdc23c240b9795712c96/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f5052732d77656c636f6d652d627269676874677265656e2e737667" alt="PRs Welcome" data-canonical-src="https://img.shields.io/badge/PRs-welcome-brightgreen.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;amp;hosted_button_id=KD4RQBDWFE25U" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/d5d24e33e2f4b6fe53987419a21b203c03789a8f/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f446f6e6174652d50617950616c2d677265656e2e737667" alt="Donate" data-canonical-src="https://img.shields.io/badge/Donate-PayPal-green.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/swarmpit/swarmpit/master/resources/public/imac.png"&gt;&lt;img src="https://raw.githubusercontent.com/swarmpit/swarmpit/master/resources/public/imac.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Swarmpit provides simple and easy to use interface for your Docker Swarm cluster. You can manage your stacks, services, secrets, volumes, networks etc. After linking your Docker Hub account or custom registry, private repositories can be easily deployed on Swarm. Best of all, you can share this management console securely with your whole team.&lt;/p&gt;
&lt;p&gt;More details about future and past releases can be found in &lt;a href="ROADMAP.md"&gt;ROADMAP.md&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://twitter.com/swarmpit_io" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/6a286b4bf866a433717546d0801794019561b5bb/68747470733a2f2f696d672e736869656c64732e696f2f747769747465722f75726c2f68747470732f747769747465722e636f6d2f666f6c645f6c6566742e7376673f7374796c653d736f6369616c266c6162656c3d466f6c6c6f77253230253430737761726d7069745f696f" alt="Twitter URL" data-canonical-src="https://img.shields.io/twitter/url/https/twitter.com/fold_left.svg?style=social&amp;amp;label=Follow%20%40swarmpit_io" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installation&lt;/h2&gt;
&lt;p&gt;The only dependency for Swarmpit deployment is Docker with Swarm initialized, we are supporting Docker 1.13 and newer. Linux hosts on x86 and ARM architectures are supported as well.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-package-installer" class="anchor" aria-hidden="true" href="#package-installer"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Package installer&lt;/h3&gt;
&lt;p&gt;Installer is your guide to setup Swarmpit platform. For more details see the &lt;a href="https://github.com/swarmpit/installer"&gt;installer&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-stable-version" class="anchor" aria-hidden="true" href="#stable-version"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Stable version&lt;/h4&gt;
&lt;p&gt;Deploy our current milestone version&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker run -it --rm \
  --name swarmpit-installer \
  --volume /var/run/docker.sock:/var/run/docker.sock \
  swarmpit/install:1.8
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;&lt;a id="user-content-edge-version" class="anchor" aria-hidden="true" href="#edge-version"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Edge version&lt;/h4&gt;
&lt;p&gt;Deploy latest version for the brave and true&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker run -it --rm \
  --name swarmpit-installer \
  --volume /var/run/docker.sock:/var/run/docker.sock \
  swarmpit/install:edge
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-manual-installation" class="anchor" aria-hidden="true" href="#manual-installation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Manual installation&lt;/h3&gt;
&lt;p&gt;Deploy Swarmpit by using a compose file from our git repo with branch of corresponding version.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clone https://github.com/swarmpit/swarmpit -b master
docker stack deploy -c swarmpit/docker-compose.yml swarmpit
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For ARM based cluster use custom compose file.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clone https://github.com/swarmpit/swarmpit -b master
docker stack deploy -c swarmpit/docker-compose.arm.yml swarmpit
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href="docker-compose.yml"&gt;This stack&lt;/a&gt; is a composition of 4 services:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;app - Swarmpit&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/swarmpit/agent"&gt;agent&lt;/a&gt; - Swarmpit agent&lt;/li&gt;
&lt;li&gt;db - CouchDB (Application data)&lt;/li&gt;
&lt;li&gt;influxdb - InfluxDB (Cluster statistics)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Feel free to edit the stackfile to change an application port and we strongly recommend to specify following volumes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;db-data&lt;/li&gt;
&lt;li&gt;influxdb-data&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;to shared-volume driver type of your choice. Alternatively, you can link db service to the specific node by using &lt;a href="https://docs.docker.com/compose/compose-file/#placement" rel="nofollow"&gt;constraint&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Swarmpit is published on port &lt;code&gt;888&lt;/code&gt; by default.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-development" class="anchor" aria-hidden="true" href="#development"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Development&lt;/h2&gt;
&lt;p&gt;Swarmpit is written purely in Clojure and utilizes React on front-end. CouchDB is used to persist application data &amp;amp; InfluxDB for cluster statistics.&lt;/p&gt;
&lt;p&gt;Everything about building, issue reporting and setting up development environment can be found in &lt;a href="CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-demo" class="anchor" aria-hidden="true" href="#demo"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Demo&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://play-with-docker.com?stack=https://raw.githubusercontent.com/swarmpit/swarmpit/master/docker-compose.yml" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/015b87ebc1ecffe10832e34ea8a44ce1af0cd35b/68747470733a2f2f63646e2e7261776769742e636f6d2f706c61792d776974682d646f636b65722f737461636b732f63666632323433382f6173736574732f696d616765732f627574746f6e2e706e67" alt="Try in PWD" data-canonical-src="https://cdn.rawgit.com/play-with-docker/stacks/cff22438/assets/images/button.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Deploys Swarmpit to play-with-docker sandbox. Please wait few moments till application is up and running before accessing
port 888. Initialization might take a few seconds.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>swarmpit</author><guid isPermaLink="false">https://github.com/swarmpit/swarmpit</guid><pubDate>Thu, 09 Jan 2020 00:10:00 GMT</pubDate></item></channel></rss>