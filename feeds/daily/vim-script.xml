<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>GitHub Trending: Vim script, Today</title><link>https://github.com/trending/vim-script?since=daily</link><description>The top repositories on GitHub for vim-script, measured daily</description><pubDate>Thu, 06 Feb 2020 01:10:41 GMT</pubDate><lastBuildDate>Thu, 06 Feb 2020 01:10:41 GMT</lastBuildDate><generator>PyRSS2Gen-1.1.0</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><ttl>720</ttl><item><title>junegunn/fzf.vim #1 in Vim script, Today</title><link>https://github.com/junegunn/fzf.vim</link><description>&lt;p&gt;&lt;i&gt;fzf :heart: vim&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-fzf-heart-vim" class="anchor" aria-hidden="true" href="#fzf-heart-vim"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;fzf &lt;g-emoji class="g-emoji" alias="heart" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2764.png"&gt;❤️&lt;/g-emoji&gt; vim&lt;/h1&gt;
&lt;p&gt;Things you can do with &lt;a href="https://github.com/junegunn/fzf"&gt;fzf&lt;/a&gt; and Vim.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-rationale" class="anchor" aria-hidden="true" href="#rationale"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Rationale&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/junegunn/fzf"&gt;fzf&lt;/a&gt; in itself is not a Vim plugin, and the official repository only
provides the &lt;a href="https://github.com/junegunn/fzf/blob/master/README-VIM.md#fzfrun"&gt;basic wrapper function&lt;/a&gt; for Vim and it's up to the users to
write their own Vim commands with it. However, I've learned that many users of
fzf are not familiar with Vimscript and are looking for the "default"
implementation of the features they can find in the alternative Vim plugins.&lt;/p&gt;
&lt;p&gt;This repository is a bundle of fzf-based commands and mappings extracted from
my &lt;a href="https://github.com/junegunn/dotfiles/blob/master/vimrc"&gt;.vimrc&lt;/a&gt; to address such needs. They are &lt;em&gt;not&lt;/em&gt; designed to be
flexible or configurable, and there's no guarantee of backward-compatibility.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-why-you-should-use-fzf-on-vim" class="anchor" aria-hidden="true" href="#why-you-should-use-fzf-on-vim"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Why you should use fzf on Vim&lt;/h2&gt;
&lt;p&gt;Because you can and you love fzf.&lt;/p&gt;
&lt;p&gt;fzf runs asynchronously and can be orders of magnitude faster than similar Vim
plugins. However, the benefit may not be noticeable if the size of the input
is small, which is the case for many of the commands provided here.
Nevertheless I wrote them anyway since it's really easy to implement custom
selector with fzf.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installation&lt;/h2&gt;
&lt;p&gt;fzf.vim depends on the basic Vim plugin of &lt;a href="https://github.com/junegunn/fzf"&gt;the main fzf
repository&lt;/a&gt;, which means you need to &lt;strong&gt;set up both "fzf" and
"fzf.vim" on Vim&lt;/strong&gt;. To learn more about fzf/Vim integration, see
&lt;a href="https://github.com/junegunn/fzf/blob/master/README-VIM.md"&gt;README-VIM&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-using-vim-plug" class="anchor" aria-hidden="true" href="#using-vim-plug"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Using &lt;a href="https://github.com/junegunn/vim-plug"&gt;vim-plug&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;Plug &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;junegunn/fzf&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;, { &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;do&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;./install --bin&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt; }
Plug &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;junegunn/fzf.vim&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Make sure to use Vim 7.4 or above&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;do&lt;/code&gt; option makes sure that you have the latest version of fzf binary&lt;/li&gt;
&lt;li&gt;If you have already installed fzf using &lt;a href="https://brew.sh/" rel="nofollow"&gt;Homebrew&lt;/a&gt;, and do
not wish to have another copy on your system, replace the first line with
&lt;code&gt;Plug '/usr/local/opt/fzf'&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;If you want to set up fzf globally on your system only using vim-plug, you
can write &lt;code&gt;Plug 'junegunn/fzf', { 'do': './install --all' }&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-commands" class="anchor" aria-hidden="true" href="#commands"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Commands&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Command&lt;/th&gt;
&lt;th&gt;List&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;:Files [PATH]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Files (similar to &lt;code&gt;:FZF&lt;/code&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;:GFiles [OPTS]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Git files (&lt;code&gt;git ls-files&lt;/code&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;:GFiles?&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Git files (&lt;code&gt;git status&lt;/code&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;:Buffers&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Open buffers&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;:Colors&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Color schemes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;:Ag [PATTERN]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/ggreer/the_silver_searcher"&gt;ag&lt;/a&gt; search result (&lt;code&gt;ALT-A&lt;/code&gt; to select all, &lt;code&gt;ALT-D&lt;/code&gt; to deselect all)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;:Rg [PATTERN]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/BurntSushi/ripgrep"&gt;rg&lt;/a&gt; search result (&lt;code&gt;ALT-A&lt;/code&gt; to select all, &lt;code&gt;ALT-D&lt;/code&gt; to deselect all)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;:Lines [QUERY]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Lines in loaded buffers&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;:BLines [QUERY]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Lines in the current buffer&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;:Tags [QUERY]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Tags in the project (&lt;code&gt;ctags -R&lt;/code&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;:BTags [QUERY]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Tags in the current buffer&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;:Marks&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Marks&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;:Windows&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Windows&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;:Locate PATTERN&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;locate&lt;/code&gt; command output&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;:History&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;v:oldfiles&lt;/code&gt; and open buffers&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;:History:&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Command history&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;:History/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Search history&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;:Snippets&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Snippets (&lt;a href="https://github.com/SirVer/ultisnips"&gt;UltiSnips&lt;/a&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;:Commits&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Git commits (requires &lt;a href="https://github.com/tpope/vim-fugitive"&gt;fugitive.vim&lt;/a&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;:BCommits&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Git commits for the current buffer&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;:Commands&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Commands&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;:Maps&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Normal mode mappings&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;:Helptags&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Help tags &lt;sup id="user-content-a1"&gt;&lt;a href="#helptags"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;:Filetypes&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;File types&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;Most commands support &lt;code&gt;CTRL-T&lt;/code&gt; / &lt;code&gt;CTRL-X&lt;/code&gt; / &lt;code&gt;CTRL-V&lt;/code&gt; key
bindings to open in a new tab, a new split, or in a new vertical split&lt;/li&gt;
&lt;li&gt;Bang-versions of the commands (e.g. &lt;code&gt;Ag!&lt;/code&gt;) will open fzf in fullscreen&lt;/li&gt;
&lt;li&gt;You can set &lt;code&gt;g:fzf_command_prefix&lt;/code&gt; to give the same prefix to the commands
&lt;ul&gt;
&lt;li&gt;e.g. &lt;code&gt;let g:fzf_command_prefix = 'Fzf'&lt;/code&gt; and you have &lt;code&gt;FzfFiles&lt;/code&gt;, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(&lt;a name="user-content-helptags"&gt;1&lt;/a&gt;: &lt;code&gt;Helptags&lt;/code&gt; will shadow the command of the same name
from &lt;a href="https://github.com/tpope/vim-pathogen"&gt;pathogen&lt;/a&gt;. But its functionality is still available via &lt;code&gt;call pathogen#helptags()&lt;/code&gt;. &lt;a href="#a1"&gt;↩&lt;/a&gt;)&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-customization" class="anchor" aria-hidden="true" href="#customization"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Customization&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-global-options" class="anchor" aria-hidden="true" href="#global-options"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Global options&lt;/h3&gt;
&lt;p&gt;Every command in fzf.vim internally calls &lt;code&gt;fzf#wrap&lt;/code&gt; function of the main
repository which supports a set of global option variables. So please read
through &lt;a href="https://github.com/junegunn/fzf/blob/master/README-VIM.md"&gt;README-VIM&lt;/a&gt; to learn more about them.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-command-local-options" class="anchor" aria-hidden="true" href="#command-local-options"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Command-local options&lt;/h3&gt;
&lt;p&gt;A few commands in fzf.vim can be customized with global option variables shown
below.&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;"&lt;/span&gt; [Buffers] Jump to the existing window if possible&lt;/span&gt;
&lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-smi"&gt;&lt;span class="pl-k"&gt;g:&lt;/span&gt;fzf_buffers_jump&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;"&lt;/span&gt; [[B]Commits] Customize the options used by 'git log':&lt;/span&gt;
&lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-smi"&gt;&lt;span class="pl-k"&gt;g:&lt;/span&gt;fzf_commits_log_options&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;--graph --color=always --format="%C(auto)%h%d %s %C(black)%C(bold)%cr"&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;"&lt;/span&gt; [Tags] Command to generate tags file&lt;/span&gt;
&lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-smi"&gt;&lt;span class="pl-k"&gt;g:&lt;/span&gt;fzf_tags_command&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;ctags -R&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;"&lt;/span&gt; [Commands] --expect expression for directly executing the command&lt;/span&gt;
&lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-smi"&gt;&lt;span class="pl-k"&gt;g:&lt;/span&gt;fzf_commands_expect&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;alt-enter,ctrl-x&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-advanced-customization" class="anchor" aria-hidden="true" href="#advanced-customization"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Advanced customization&lt;/h3&gt;
&lt;h4&gt;&lt;a id="user-content-vim-functions" class="anchor" aria-hidden="true" href="#vim-functions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Vim functions&lt;/h4&gt;
&lt;p&gt;Each command in fzf.vim is backed by a Vim function. You can override
a command or define a variation of it by calling its corresponding function.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Command&lt;/th&gt;
&lt;th&gt;Vim function&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Files&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;fzf#vim#files(dir, [spec dict], [fullscreen bool])&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;GFiles&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;fzf#vim#gitfiles(git_options, [spec dict], [fullscreen bool])&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;GFiles?&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;fzf#vim#gitfiles('?', [spec dict], [fullscreen bool])&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Buffers&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;fzf#vim#buffers([spec dict], [fullscreen bool])&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Colors&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;fzf#vim#colors([spec dict], [fullscreen bool])&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Rg&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;fzf#vim#grep(command, [has_column bool], [spec dict], [fullscreen bool])&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;...&lt;/td&gt;
&lt;td&gt;...&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;(We can see that the last two optional arguments of each function are
identical. They are directly passed to &lt;code&gt;fzf#wrap&lt;/code&gt; function. If you haven't
read &lt;a href="https://github.com/junegunn/fzf/blob/master/README-VIM.md"&gt;README-VIM&lt;/a&gt; already, please read it before proceeding.)&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-example-customizing-files-command" class="anchor" aria-hidden="true" href="#example-customizing-files-command"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Example: Customizing &lt;code&gt;Files&lt;/code&gt; command&lt;/h4&gt;
&lt;p&gt;This is the default definition of &lt;code&gt;Files&lt;/code&gt; command:&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;command&lt;/span&gt;&lt;span class="pl-k"&gt;!&lt;/span&gt; &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-c1"&gt;bang&lt;/span&gt; -&lt;span class="pl-en"&gt;nargs&lt;/span&gt;=? -&lt;span class="pl-en"&gt;complete&lt;/span&gt;=&lt;span class="pl-c1"&gt;dir&lt;/span&gt; Files &lt;span class="pl-c1"&gt;call&lt;/span&gt; &lt;span class="pl-en"&gt;fzf#vim#files&lt;/span&gt;(&lt;span class="pl-c1"&gt;&amp;lt;q-args&amp;gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;&amp;lt;bang&amp;gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;0&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let's say you want to a variation of it called &lt;code&gt;ProjectFiles&lt;/code&gt; that only
searches inside &lt;code&gt;~/projects&lt;/code&gt; directory. Then you can do it like this:&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;command&lt;/span&gt;&lt;span class="pl-k"&gt;!&lt;/span&gt; &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-c1"&gt;bang&lt;/span&gt; ProjectFiles &lt;span class="pl-c1"&gt;call&lt;/span&gt; &lt;span class="pl-en"&gt;fzf#vim#files&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;~/projects&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;&amp;lt;bang&amp;gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;0&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or, if you want to override the command with different fzf options, just pass
a custom spec to the function.&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;command&lt;/span&gt;&lt;span class="pl-k"&gt;!&lt;/span&gt; &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-c1"&gt;bang&lt;/span&gt; -&lt;span class="pl-en"&gt;nargs&lt;/span&gt;=? -&lt;span class="pl-en"&gt;complete&lt;/span&gt;=&lt;span class="pl-c1"&gt;dir&lt;/span&gt; Files
    &lt;span class="pl-cce"&gt;\ &lt;/span&gt;&lt;span class="pl-c1"&gt;call&lt;/span&gt; &lt;span class="pl-en"&gt;fzf#vim#files&lt;/span&gt;(&lt;span class="pl-c1"&gt;&amp;lt;q-args&amp;gt;&lt;/span&gt;, {&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;options&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;: [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;--layout=reverse&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;--info=inline&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;]}, &lt;span class="pl-c1"&gt;&amp;lt;bang&amp;gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;0&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Want a preview window?&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;command&lt;/span&gt;&lt;span class="pl-k"&gt;!&lt;/span&gt; &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-c1"&gt;bang&lt;/span&gt; -&lt;span class="pl-en"&gt;nargs&lt;/span&gt;=? -&lt;span class="pl-en"&gt;complete&lt;/span&gt;=&lt;span class="pl-c1"&gt;dir&lt;/span&gt; Files
    &lt;span class="pl-cce"&gt;\ &lt;/span&gt;&lt;span class="pl-c1"&gt;call&lt;/span&gt; &lt;span class="pl-en"&gt;fzf#vim#files&lt;/span&gt;(&lt;span class="pl-c1"&gt;&amp;lt;q-args&amp;gt;&lt;/span&gt;, {&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;options&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;: [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;--layout=reverse&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;--info=inline&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;--preview&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;cat {}&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;]}, &lt;span class="pl-c1"&gt;&amp;lt;bang&amp;gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;0&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It kind of works, but you probably want a nicer previewer program than &lt;code&gt;cat&lt;/code&gt;.
fzf.vim ships &lt;a href="bin/preview.sh"&gt;a versatile preview script&lt;/a&gt; you can readily
use. It internally executes &lt;a href="https://github.com/sharkdp/bat"&gt;bat&lt;/a&gt; for syntax
highlighting, so make sure to install it.&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;command&lt;/span&gt;&lt;span class="pl-k"&gt;!&lt;/span&gt; &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-c1"&gt;bang&lt;/span&gt; -&lt;span class="pl-en"&gt;nargs&lt;/span&gt;=? -&lt;span class="pl-en"&gt;complete&lt;/span&gt;=&lt;span class="pl-c1"&gt;dir&lt;/span&gt; Files
    &lt;span class="pl-cce"&gt;\ &lt;/span&gt;&lt;span class="pl-c1"&gt;call&lt;/span&gt; &lt;span class="pl-en"&gt;fzf#vim#files&lt;/span&gt;(&lt;span class="pl-c1"&gt;&amp;lt;q-args&amp;gt;&lt;/span&gt;, {&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;options&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;: [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;--layout=reverse&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;--info=inline&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;--preview&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;~/.vim/plugged/fzf.vim/bin/preview.sh {}&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;]}, &lt;span class="pl-c1"&gt;&amp;lt;bang&amp;gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;0&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However, it's not ideal to hard-code the path to the script which can be
different in different circumstances. So in order to make it easier to set up
the previewer, fzf.vim provides &lt;code&gt;fzf#vim#with_preview&lt;/code&gt; helper function.
Similarly to &lt;code&gt;fzf#wrap&lt;/code&gt;, it takes a spec dictionary and returns a copy of it
with additional preview options.&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;command&lt;/span&gt;&lt;span class="pl-k"&gt;!&lt;/span&gt; &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-c1"&gt;bang&lt;/span&gt; -&lt;span class="pl-en"&gt;nargs&lt;/span&gt;=? -&lt;span class="pl-en"&gt;complete&lt;/span&gt;=&lt;span class="pl-c1"&gt;dir&lt;/span&gt; Files
    &lt;span class="pl-cce"&gt;\ &lt;/span&gt;&lt;span class="pl-c1"&gt;call&lt;/span&gt; &lt;span class="pl-en"&gt;fzf#vim#files&lt;/span&gt;(&lt;span class="pl-c1"&gt;&amp;lt;q-args&amp;gt;&lt;/span&gt;, &lt;span class="pl-en"&gt;fzf#vim#with_preview&lt;/span&gt;({&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;options&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;: [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;--layout=reverse&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;--info=inline&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;]}), &lt;span class="pl-c1"&gt;&amp;lt;bang&amp;gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;0&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can just omit the spec argument if you only want the previewer.&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;command&lt;/span&gt;&lt;span class="pl-k"&gt;!&lt;/span&gt; &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-c1"&gt;bang&lt;/span&gt; -&lt;span class="pl-en"&gt;nargs&lt;/span&gt;=? -&lt;span class="pl-en"&gt;complete&lt;/span&gt;=&lt;span class="pl-c1"&gt;dir&lt;/span&gt; Files
    &lt;span class="pl-cce"&gt;\ &lt;/span&gt;&lt;span class="pl-c1"&gt;call&lt;/span&gt; &lt;span class="pl-en"&gt;fzf#vim#files&lt;/span&gt;(&lt;span class="pl-c1"&gt;&amp;lt;q-args&amp;gt;&lt;/span&gt;, &lt;span class="pl-en"&gt;fzf#vim#with_preview&lt;/span&gt;(), &lt;span class="pl-c1"&gt;&amp;lt;bang&amp;gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;0&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content-example-git-grep-wrapper" class="anchor" aria-hidden="true" href="#example-git-grep-wrapper"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Example: &lt;code&gt;git grep&lt;/code&gt; wrapper&lt;/h4&gt;
&lt;p&gt;The following example implements &lt;code&gt;GGrep&lt;/code&gt; command that works similarly to
predefined &lt;code&gt;Ag&lt;/code&gt; or &lt;code&gt;Rg&lt;/code&gt; using &lt;code&gt;fzf#vim#grep&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The second argument to &lt;code&gt;fzf#vim#grep&lt;/code&gt; is 0 (false), because &lt;code&gt;git grep&lt;/code&gt; does
not print column numbers.&lt;/li&gt;
&lt;li&gt;We set the base directory to git root by setting &lt;code&gt;dir&lt;/code&gt; attribute in spec
dictionary.&lt;/li&gt;
&lt;li&gt;&lt;a href="bin/preview.sh"&gt;The preview script&lt;/a&gt; supports &lt;code&gt;grep&lt;/code&gt; format
(&lt;code&gt;FILE_PATH:LINE_NO:...&lt;/code&gt;), so we can just wrap the spec with
&lt;code&gt;fzf#vim#with_preview&lt;/code&gt; as before to enable previewer.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;command&lt;/span&gt;&lt;span class="pl-k"&gt;!&lt;/span&gt; &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-c1"&gt;bang&lt;/span&gt; -&lt;span class="pl-en"&gt;nargs&lt;/span&gt;=&lt;span class="pl-k"&gt;*&lt;/span&gt; GGrep
  &lt;span class="pl-cce"&gt;\ &lt;/span&gt;&lt;span class="pl-c1"&gt;call&lt;/span&gt; &lt;span class="pl-en"&gt;fzf#vim#grep&lt;/span&gt;(
  &lt;span class="pl-cce"&gt;\ &lt;/span&gt;  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;git grep --line-number &lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;.&lt;span class="pl-en"&gt;shellescape&lt;/span&gt;(&lt;span class="pl-c1"&gt;&amp;lt;q-args&amp;gt;&lt;/span&gt;), &lt;span class="pl-c1"&gt;0&lt;/span&gt;,
  &lt;span class="pl-cce"&gt;\ &lt;/span&gt;  &lt;span class="pl-en"&gt;fzf#vim#with_preview&lt;/span&gt;({&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;dir&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;: &lt;span class="pl-en"&gt;systemlist&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;git rev-parse --show-toplevel&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;)[&lt;span class="pl-c1"&gt;0&lt;/span&gt;]}), &lt;span class="pl-c1"&gt;&amp;lt;bang&amp;gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;0&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content-example-rg-command-with-preview-window" class="anchor" aria-hidden="true" href="#example-rg-command-with-preview-window"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Example: &lt;code&gt;Rg&lt;/code&gt; command with preview window&lt;/h4&gt;
&lt;p&gt;You can see the definition of &lt;code&gt;Rg&lt;/code&gt; command with &lt;code&gt;:command Rg&lt;/code&gt;. With the
information, you can redefine it with the preview window enabled. In this
case, we're only interested in setting up the preview window, so we will omit
the spec argument to &lt;code&gt;fzf#vim#preview&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;command&lt;/span&gt;&lt;span class="pl-k"&gt;!&lt;/span&gt; &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-c1"&gt;bang&lt;/span&gt; -&lt;span class="pl-en"&gt;nargs&lt;/span&gt;=&lt;span class="pl-k"&gt;*&lt;/span&gt; Rg
  &lt;span class="pl-cce"&gt;\ &lt;/span&gt;&lt;span class="pl-c1"&gt;call&lt;/span&gt; &lt;span class="pl-en"&gt;fzf#vim#grep&lt;/span&gt;(
  &lt;span class="pl-cce"&gt;\ &lt;/span&gt;  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;rg --column --line-number --no-heading --color=always --smart-case &lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;.&lt;span class="pl-en"&gt;shellescape&lt;/span&gt;(&lt;span class="pl-c1"&gt;&amp;lt;q-args&amp;gt;&lt;/span&gt;), &lt;span class="pl-c1"&gt;1&lt;/span&gt;,
  &lt;span class="pl-cce"&gt;\ &lt;/span&gt;  &lt;span class="pl-en"&gt;fzf#vim#with_preview&lt;/span&gt;(), &lt;span class="pl-c1"&gt;&amp;lt;bang&amp;gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;0&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content-example-advanced-ripgrep-integration" class="anchor" aria-hidden="true" href="#example-advanced-ripgrep-integration"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Example: Advanced ripgrep integration&lt;/h4&gt;
&lt;p&gt;In the default implementation of &lt;code&gt;Rg&lt;/code&gt;, ripgrep process starts only once with
the initial query (e.g. &lt;code&gt;:Rg foo&lt;/code&gt;) and fzf filters the output of the process.&lt;/p&gt;
&lt;p&gt;This is okay in most cases because fzf is quite performant even with millions
of lines, but we can make fzf completely delegate its search responsibliity to
ripgrep process by making it restart ripgrep whenever the query string is
updated. In this scenario, fzf becomes a simple selector interface rather than
a "fuzzy finder".&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We will name the new command all-uppercase &lt;code&gt;RG&lt;/code&gt; so we can still access the
default version.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--bind 'change:reload:rg ... {q}'&lt;/code&gt; will make fzf restart ripgrep process
whenever the query string, denoted by &lt;code&gt;{q}&lt;/code&gt;, is changed.&lt;/li&gt;
&lt;li&gt;With &lt;code&gt;--phony&lt;/code&gt; option, fzf will no longer perform search. The query string
you type on fzf prompt is only used for restarting ripgrep process.&lt;/li&gt;
&lt;li&gt;Also note that we enabled previewer with &lt;code&gt;fzf#vim#with_preview&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;function&lt;/span&gt;&lt;span class="pl-k"&gt;!&lt;/span&gt; &lt;span class="pl-en"&gt;RipgrepFzf&lt;/span&gt;(query, fullscreen)
  &lt;span class="pl-k"&gt;let&lt;/span&gt; command_fmt &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;rg --column --line-number --no-heading --color=always --smart-case %s || true&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-k"&gt;let&lt;/span&gt; initial_command &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;printf&lt;/span&gt;(command_fmt, &lt;span class="pl-en"&gt;shellescape&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-k"&gt;a:&lt;/span&gt;query&lt;/span&gt;))
  &lt;span class="pl-k"&gt;let&lt;/span&gt; reload_command &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;printf&lt;/span&gt;(command_fmt, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;{q}&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;)
  &lt;span class="pl-k"&gt;let&lt;/span&gt; spec &lt;span class="pl-k"&gt;=&lt;/span&gt; {&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;options&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;: [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;--phony&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;--query&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-smi"&gt;&lt;span class="pl-k"&gt;a:&lt;/span&gt;query&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;--bind&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;change:reload:&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;.reload_command]}
  &lt;span class="pl-c1"&gt;call&lt;/span&gt; &lt;span class="pl-en"&gt;fzf#vim#grep&lt;/span&gt;(initial_command, &lt;span class="pl-c1"&gt;1&lt;/span&gt;, &lt;span class="pl-en"&gt;fzf#vim#with_preview&lt;/span&gt;(spec), &lt;span class="pl-smi"&gt;&lt;span class="pl-k"&gt;a:&lt;/span&gt;fullscreen&lt;/span&gt;)
&lt;span class="pl-k"&gt;endfunction&lt;/span&gt;

&lt;span class="pl-c1"&gt;command&lt;/span&gt;&lt;span class="pl-k"&gt;!&lt;/span&gt; -&lt;span class="pl-en"&gt;nargs&lt;/span&gt;=&lt;span class="pl-k"&gt;*&lt;/span&gt; &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-c1"&gt;bang&lt;/span&gt; RG &lt;span class="pl-c1"&gt;call&lt;/span&gt; &lt;span class="pl-en"&gt;RipgrepFzf&lt;/span&gt;(&lt;span class="pl-c1"&gt;&amp;lt;q-args&amp;gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;&amp;lt;bang&amp;gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;0&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-mappings" class="anchor" aria-hidden="true" href="#mappings"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Mappings&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Mapping&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;plug&amp;gt;(fzf-maps-n)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Normal mode mappings&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;plug&amp;gt;(fzf-maps-i)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Insert mode mappings&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;plug&amp;gt;(fzf-maps-x)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Visual mode mappings&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;plug&amp;gt;(fzf-maps-o)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Operator-pending mappings&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;plug&amp;gt;(fzf-complete-word)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;cat /usr/share/dict/words&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;plug&amp;gt;(fzf-complete-path)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Path completion using &lt;code&gt;find&lt;/code&gt; (file + dir)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;plug&amp;gt;(fzf-complete-file)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;File completion using &lt;code&gt;find&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;plug&amp;gt;(fzf-complete-file-ag)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;File completion using &lt;code&gt;ag&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;plug&amp;gt;(fzf-complete-line)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Line completion (all open buffers)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;plug&amp;gt;(fzf-complete-buffer-line)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Line completion (current buffer only)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;&lt;a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Usage&lt;/h3&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;"&lt;/span&gt; Mapping selecting mappings&lt;/span&gt;
&lt;span class="pl-c1"&gt;nmap&lt;/span&gt; &lt;span class="pl-c1"&gt;&amp;lt;leader&amp;gt;&amp;lt;tab&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;&amp;lt;plug&amp;gt;&lt;/span&gt;(fzf&lt;span class="pl-k"&gt;-&lt;/span&gt;maps&lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-c1"&gt;n&lt;/span&gt;)
&lt;span class="pl-c1"&gt;xmap&lt;/span&gt; &lt;span class="pl-c1"&gt;&amp;lt;leader&amp;gt;&amp;lt;tab&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;&amp;lt;plug&amp;gt;&lt;/span&gt;(fzf&lt;span class="pl-k"&gt;-&lt;/span&gt;maps&lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-c1"&gt;x&lt;/span&gt;)
&lt;span class="pl-c1"&gt;omap&lt;/span&gt; &lt;span class="pl-c1"&gt;&amp;lt;leader&amp;gt;&amp;lt;tab&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;&amp;lt;plug&amp;gt;&lt;/span&gt;(fzf&lt;span class="pl-k"&gt;-&lt;/span&gt;maps&lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-c1"&gt;o&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;"&lt;/span&gt; Insert mode completion&lt;/span&gt;
&lt;span class="pl-c1"&gt;imap&lt;/span&gt; &lt;span class="pl-c1"&gt;&amp;lt;c-x&amp;gt;&amp;lt;c-k&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;&amp;lt;plug&amp;gt;&lt;/span&gt;(fzf&lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-c1"&gt;complete&lt;/span&gt;&lt;span class="pl-k"&gt;-&lt;/span&gt;word)
&lt;span class="pl-c1"&gt;imap&lt;/span&gt; &lt;span class="pl-c1"&gt;&amp;lt;c-x&amp;gt;&amp;lt;c-f&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;&amp;lt;plug&amp;gt;&lt;/span&gt;(fzf&lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-c1"&gt;complete&lt;/span&gt;&lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-c1"&gt;path&lt;/span&gt;)
&lt;span class="pl-c1"&gt;imap&lt;/span&gt; &lt;span class="pl-c1"&gt;&amp;lt;c-x&amp;gt;&amp;lt;c-j&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;&amp;lt;plug&amp;gt;&lt;/span&gt;(fzf&lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-c1"&gt;complete&lt;/span&gt;&lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-c1"&gt;file&lt;/span&gt;&lt;span class="pl-k"&gt;-&lt;/span&gt;ag)
&lt;span class="pl-c1"&gt;imap&lt;/span&gt; &lt;span class="pl-c1"&gt;&amp;lt;c-x&amp;gt;&amp;lt;c-l&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;&amp;lt;plug&amp;gt;&lt;/span&gt;(fzf&lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-c1"&gt;complete&lt;/span&gt;&lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-c1"&gt;line&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;"&lt;/span&gt; Advanced customization using Vim function&lt;/span&gt;
&lt;span class="pl-c1"&gt;inoremap&lt;/span&gt; &lt;span class="pl-c1"&gt;&amp;lt;expr&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;&amp;lt;c-x&amp;gt;&amp;lt;c-k&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;fzf#vim#complete#word&lt;/span&gt;({&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;left&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;15%&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;})&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-completion-helper" class="anchor" aria-hidden="true" href="#completion-helper"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Completion helper&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;fzf#vim#complete&lt;/code&gt; is a helper function for creating custom fuzzy completion
using fzf. If the first parameter is a command string or a Vim list, it will
be used as the source.&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;"&lt;/span&gt; Replace the default dictionary completion with fzf-based fuzzy completion&lt;/span&gt;
&lt;span class="pl-c1"&gt;inoremap&lt;/span&gt; &lt;span class="pl-c1"&gt;&amp;lt;expr&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;&amp;lt;c-x&amp;gt;&amp;lt;c-k&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;fzf#vim#complete&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;cat /usr/share/dict/words&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For advanced uses, you can pass an options dictionary to the function. The set
of options is pretty much identical to that for &lt;code&gt;fzf#run&lt;/code&gt; only with the
following exceptions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;reducer&lt;/code&gt; (funcref)
&lt;ul&gt;
&lt;li&gt;Reducer transforms the output lines of fzf into a single string value&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;prefix&lt;/code&gt; (string or funcref; default: &lt;code&gt;\k*$&lt;/code&gt;)
&lt;ul&gt;
&lt;li&gt;Regular expression pattern to extract the completion prefix&lt;/li&gt;
&lt;li&gt;Or a function to extract completion prefix&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Both &lt;code&gt;source&lt;/code&gt; and &lt;code&gt;options&lt;/code&gt; can be given as funcrefs that take the
completion prefix as the argument and return the final value&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sink&lt;/code&gt; or &lt;code&gt;sink*&lt;/code&gt; are ignored&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;"&lt;/span&gt; Global line completion (not just open buffers. ripgrep required.)&lt;/span&gt;
&lt;span class="pl-c1"&gt;inoremap&lt;/span&gt; &lt;span class="pl-c1"&gt;&amp;lt;expr&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;&amp;lt;c-x&amp;gt;&amp;lt;c-l&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;fzf#vim#complete&lt;/span&gt;(&lt;span class="pl-en"&gt;fzf#wrap&lt;/span&gt;({
  &lt;span class="pl-cce"&gt;\ &lt;/span&gt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;prefix&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;^.*$&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;,
  &lt;span class="pl-cce"&gt;\ &lt;/span&gt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;source&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;rg -n ^ --color always&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;,
  &lt;span class="pl-cce"&gt;\ &lt;/span&gt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;options&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;--ansi --delimiter : --nth 3..&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;,
  &lt;span class="pl-cce"&gt;\ &lt;/span&gt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;reducer&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;: { &lt;span class="pl-c1"&gt;lines&lt;/span&gt; &lt;span class="pl-k"&gt;-&lt;/span&gt;&amp;gt; &lt;span class="pl-en"&gt;join&lt;/span&gt;(&lt;span class="pl-en"&gt;split&lt;/span&gt;(&lt;span class="pl-c1"&gt;lines&lt;/span&gt;[&lt;span class="pl-c1"&gt;0&lt;/span&gt;], &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;:\zs&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;)[&lt;span class="pl-c1"&gt;2&lt;/span&gt;:], &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;) }}))&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content-reducer-example" class="anchor" aria-hidden="true" href="#reducer-example"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Reducer example&lt;/h4&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;function&lt;/span&gt;&lt;span class="pl-k"&gt;!&lt;/span&gt; &lt;span class="pl-en"&gt;&lt;span class="pl-k"&gt;s:&lt;/span&gt;make_sentence&lt;/span&gt;(&lt;span class="pl-c1"&gt;lines&lt;/span&gt;)
  &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-en"&gt;substitute&lt;/span&gt;(&lt;span class="pl-en"&gt;join&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-k"&gt;a:&lt;/span&gt;lines&lt;/span&gt;), &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;^.&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;\=toupper(submatch(0))&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;).&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;.&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;endfunction&lt;/span&gt;

&lt;span class="pl-c1"&gt;inoremap&lt;/span&gt; &lt;span class="pl-c1"&gt;&amp;lt;expr&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;&amp;lt;c-x&amp;gt;&amp;lt;c-s&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;fzf#vim#complete&lt;/span&gt;({
  &lt;span class="pl-cce"&gt;\ &lt;/span&gt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;source&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;:  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;cat /usr/share/dict/words&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;,
  &lt;span class="pl-cce"&gt;\ &lt;/span&gt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;reducer&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;: &lt;span class="pl-k"&gt;function&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;&amp;lt;sid&amp;gt;make_sentence&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;),
  &lt;span class="pl-cce"&gt;\ &lt;/span&gt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;options&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;--multi --reverse --margin 15%,0&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;,
  &lt;span class="pl-cce"&gt;\ &lt;/span&gt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;left&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;:    &lt;span class="pl-c1"&gt;20&lt;/span&gt;})&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-status-line-of-terminal-buffer" class="anchor" aria-hidden="true" href="#status-line-of-terminal-buffer"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Status line of terminal buffer&lt;/h2&gt;
&lt;p&gt;When fzf starts in a terminal buffer (see &lt;a href="https://github.com/junegunn/fzf/blob/master/README-VIM.md#fzf-inside-terminal-buffer"&gt;fzf/README-VIM.md&lt;/a&gt;), you
may want to customize the statusline of the containing buffer.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-hide-statusline" class="anchor" aria-hidden="true" href="#hide-statusline"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Hide statusline&lt;/h3&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;autocmd&lt;/span&gt;&lt;span class="pl-k"&gt;!&lt;/span&gt; &lt;span class="pl-c1"&gt;FileType&lt;/span&gt; fzf &lt;span class="pl-c1"&gt;set&lt;/span&gt; &lt;span class="pl-c1"&gt;laststatus&lt;/span&gt;&lt;span class="pl-k"&gt;=&lt;/span&gt;&lt;span class="pl-c1"&gt;0&lt;/span&gt; &lt;span class="pl-c1"&gt;noshowmode&lt;/span&gt; &lt;span class="pl-c1"&gt;noruler&lt;/span&gt;
  &lt;span class="pl-cce"&gt;\|&lt;/span&gt; &lt;span class="pl-c1"&gt;autocmd&lt;/span&gt; &lt;span class="pl-c1"&gt;BufLeave&lt;/span&gt; &lt;span class="pl-c1"&gt;&amp;lt;buffer&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;set&lt;/span&gt; &lt;span class="pl-c1"&gt;laststatus&lt;/span&gt;&lt;span class="pl-k"&gt;=&lt;/span&gt;&lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;showmode&lt;/span&gt; &lt;span class="pl-c1"&gt;ruler&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-custom-statusline" class="anchor" aria-hidden="true" href="#custom-statusline"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Custom statusline&lt;/h3&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;function&lt;/span&gt;&lt;span class="pl-k"&gt;!&lt;/span&gt; &lt;span class="pl-en"&gt;&lt;span class="pl-k"&gt;s:&lt;/span&gt;fzf_statusline&lt;/span&gt;()
&lt;span class="pl-c"&gt;  &lt;span class="pl-c"&gt;"&lt;/span&gt; Override statusline as you like&lt;/span&gt;
  &lt;span class="pl-c1"&gt;highlight&lt;/span&gt; fzf1 ctermfg&lt;span class="pl-k"&gt;=&lt;/span&gt;&lt;span class="pl-c1"&gt;161&lt;/span&gt; ctermbg&lt;span class="pl-k"&gt;=&lt;/span&gt;&lt;span class="pl-c1"&gt;251&lt;/span&gt;
  &lt;span class="pl-c1"&gt;highlight&lt;/span&gt; fzf2 ctermfg&lt;span class="pl-k"&gt;=&lt;/span&gt;&lt;span class="pl-c1"&gt;23&lt;/span&gt; ctermbg&lt;span class="pl-k"&gt;=&lt;/span&gt;&lt;span class="pl-c1"&gt;251&lt;/span&gt;
  &lt;span class="pl-c1"&gt;highlight&lt;/span&gt; fzf3 ctermfg&lt;span class="pl-k"&gt;=&lt;/span&gt;&lt;span class="pl-c1"&gt;237&lt;/span&gt; ctermbg&lt;span class="pl-k"&gt;=&lt;/span&gt;&lt;span class="pl-c1"&gt;251&lt;/span&gt;
  &lt;span class="pl-c1"&gt;setlocal&lt;/span&gt; &lt;span class="pl-c1"&gt;statusline&lt;/span&gt;&lt;span class="pl-k"&gt;=&lt;/span&gt;&lt;span class="pl-k"&gt;%&lt;/span&gt;#fzf1#&lt;span class="pl-cce"&gt;\ &lt;/span&gt;&amp;gt;&lt;span class="pl-cce"&gt;\ &lt;/span&gt;&lt;span class="pl-k"&gt;%&lt;/span&gt;#fzf2#fz&lt;span class="pl-k"&gt;%&lt;/span&gt;#fzf3#&lt;span class="pl-c1"&gt;f&lt;/span&gt;
&lt;span class="pl-k"&gt;endfunction&lt;/span&gt;

&lt;span class="pl-c1"&gt;autocmd&lt;/span&gt;&lt;span class="pl-k"&gt;!&lt;/span&gt; &lt;span class="pl-c1"&gt;User&lt;/span&gt; FzfStatusLine &lt;span class="pl-c1"&gt;call&lt;/span&gt; &lt;span class="pl-c1"&gt;&amp;lt;SID&amp;gt;&lt;/span&gt;&lt;span class="pl-en"&gt;fzf_statusline&lt;/span&gt;()&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-license" class="anchor" aria-hidden="true" href="#license"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;License&lt;/h2&gt;
&lt;p&gt;MIT&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>junegunn</author><guid isPermaLink="false">https://github.com/junegunn/fzf.vim</guid><pubDate>Thu, 06 Feb 2020 00:01:00 GMT</pubDate></item><item><title>neovim/neovim #2 in Vim script, Today</title><link>https://github.com/neovim/neovim</link><description>&lt;p&gt;&lt;i&gt;Vim-fork focused on extensibility and usability&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;p&gt;&lt;a href="https://neovim.io" rel="nofollow"&gt;&lt;img src="https://raw.githubusercontent.com/neovim/neovim.github.io/master/logos/neovim-logo-300x87.png" alt="Neovim" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://neovim.io/doc" rel="nofollow"&gt;Documentation&lt;/a&gt; |
&lt;a href="https://gitter.im/neovim/neovim" rel="nofollow"&gt;Chat&lt;/a&gt; |
&lt;a href="https://twitter.com/Neovim" rel="nofollow"&gt;Twitter&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://travis-ci.org/neovim/neovim" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/4ae883a40da36ec54b61cdc90a202be7d479938b/68747470733a2f2f7472617669732d63692e6f72672f6e656f76696d2f6e656f76696d2e7376673f6272616e63683d6d6173746572" alt="Travis build status" data-canonical-src="https://travis-ci.org/neovim/neovim.svg?branch=master" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://ci.appveyor.com/project/neovim/neovim/branch/master" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/765b8f2fa3c9d35e5b9a2b1eec022664c3ded03c/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f757264716a72696b35753532316661632f6272616e63682f6d61737465723f7376673d74727565" alt="AppVeyor build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/urdqjrik5u521fac/branch/master?svg=true" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://codecov.io/gh/neovim/neovim" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/d164c547ae645eb6c337136499cdc8d970412dbc/68747470733a2f2f696d672e736869656c64732e696f2f636f6465636f762f632f6769746875622f6e656f76696d2f6e656f76696d2e737667" alt="Codecov coverage" data-canonical-src="https://img.shields.io/codecov/c/github/neovim/neovim.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://scan.coverity.com/projects/2227" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/298688ea36ec02e81c1652a28a9bc73d3f8077d8/68747470733a2f2f7363616e2e636f7665726974792e636f6d2f70726f6a656374732f323232372f62616467652e737667" alt="Coverity Scan analysis" data-canonical-src="https://scan.coverity.com/projects/2227/badge.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://neovim.io/doc/reports/clang" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/5d95f05d82c2324906e4a2fb9c965e169ec94f55/68747470733a2f2f6e656f76696d2e696f2f646f632f7265706f7274732f636c616e672f62616467652e737667" alt="Clang analysis" data-canonical-src="https://neovim.io/doc/reports/clang/badge.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://neovim.io/doc/reports/pvs/PVS-studio.html.d" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/d38e422483d49e5668f5eacd1a1bd0de9650122d/68747470733a2f2f6e656f76696d2e696f2f646f632f7265706f7274732f7076732f62616467652e737667" alt="PVS-Studio analysis" data-canonical-src="https://neovim.io/doc/reports/pvs/badge.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://repology.org/metapackage/neovim" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/85f2d3c291cba0d6d9aee65a54ffe7a90843dbd9/68747470733a2f2f7265706f6c6f67792e6f72672f62616467652f74696e792d7265706f732f6e656f76696d2e737667" alt="Packages" data-canonical-src="https://repology.org/badge/tiny-repos/neovim.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://buildd.debian.org/neovim" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/54185923c78bfbe8a3323b0d175585f89923b341/68747470733a2f2f6261646765732e64656269616e2e6e65742f6261646765732f64656269616e2f74657374696e672f6e656f76696d2f76657273696f6e2e737667" alt="Debian CI" data-canonical-src="https://badges.debian.net/badges/debian/testing/neovim/version.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://github.com/neovim/neovim/releases/"&gt;&lt;img src="https://camo.githubusercontent.com/1030ce55cd509e8acadde31d00775e8be3de1f16/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f646f776e6c6f6164732f6e656f76696d2f6e656f76696d2f746f74616c2e7376673f6d61784167653d32353932303031" alt="Downloads" data-canonical-src="https://img.shields.io/github/downloads/neovim/neovim/total.svg?maxAge=2592001" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://snapcraft.io/nvim" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/f49c292c314555be104f34039679ad94e4337ae7/68747470733a2f2f736e617063726166742e696f2f2f6e76696d2f62616467652e737667" alt="nvim" data-canonical-src="https://snapcraft.io//nvim/badge.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Neovim is a project that seeks to aggressively refactor Vim in order to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Simplify maintenance and encourage &lt;a href="CONTRIBUTING.md"&gt;contributions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Split the work between multiple developers&lt;/li&gt;
&lt;li&gt;Enable &lt;a href="https://github.com/neovim/neovim/wiki/Related-projects#gui"&gt;advanced UIs&lt;/a&gt; without modifications to the core&lt;/li&gt;
&lt;li&gt;Maximize &lt;a href="https://github.com/neovim/neovim/wiki/Plugin-UI-architecture"&gt;extensibility&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;See the &lt;a href="https://github.com/neovim/neovim/wiki/Introduction"&gt;Introduction&lt;/a&gt; wiki page and &lt;a href="https://neovim.io/roadmap/" rel="nofollow"&gt;Roadmap&lt;/a&gt;
for more information.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-features" class="anchor" aria-hidden="true" href="#features"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Modern &lt;a href="https://github.com/neovim/neovim/wiki/Related-projects#gui"&gt;GUIs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/neovim/neovim/wiki/Related-projects#api-clients"&gt;API access&lt;/a&gt;
from any language including C/C++, C#, Clojure, D, Elixir, Go, Haskell, Java,
JavaScript/Node.js, Julia, Lisp, Lua, Perl, Python, Racket, Ruby, Rust&lt;/li&gt;
&lt;li&gt;Embedded, scriptable &lt;a href="https://neovim.io/doc/user/nvim_terminal_emulator.html" rel="nofollow"&gt;terminal emulator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Asynchronous &lt;a href="https://github.com/neovim/neovim/pull/2247"&gt;job control&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/neovim/neovim/pull/2506"&gt;Shared data (shada)&lt;/a&gt; among multiple editor instances&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/neovim/neovim/pull/3470"&gt;XDG base directories&lt;/a&gt; support&lt;/li&gt;
&lt;li&gt;Compatible with most Vim plugins, including Ruby and Python plugins&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;See &lt;a href="https://neovim.io/doc/user/vim_diff.html#nvim-features" rel="nofollow"&gt;&lt;code&gt;:help nvim-features&lt;/code&gt;&lt;/a&gt; for the full list!&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-install-from-package" class="anchor" aria-hidden="true" href="#install-from-package"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Install from package&lt;/h2&gt;
&lt;p&gt;Pre-built packages for Windows, macOS, and Linux are found on the
&lt;a href="https://github.com/neovim/neovim/releases/"&gt;Releases&lt;/a&gt; page.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/neovim/neovim/wiki/Installing-Neovim#install-from-package"&gt;Managed packages&lt;/a&gt; are in Homebrew, &lt;a href="https://packages.debian.org/testing/neovim" rel="nofollow"&gt;Debian&lt;/a&gt;, &lt;a href="http://packages.ubuntu.com/search?keywords=neovim" rel="nofollow"&gt;Ubuntu&lt;/a&gt;, &lt;a href="https://apps.fedoraproject.org/packages/neovim" rel="nofollow"&gt;Fedora&lt;/a&gt;, &lt;a href="https://www.archlinux.org/packages/?q=neovim" rel="nofollow"&gt;Arch Linux&lt;/a&gt;,
&lt;a href="https://packages.gentoo.org/packages/app-editors/neovim" rel="nofollow"&gt;Gentoo&lt;/a&gt;, and more!&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-install-from-source" class="anchor" aria-hidden="true" href="#install-from-source"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Install from source&lt;/h2&gt;
&lt;p&gt;The build is CMake-based, but a Makefile is provided as a convenience.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;make CMAKE_BUILD_TYPE=RelWithDebInfo
sudo make install
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To install to a non-default location:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;make CMAKE_INSTALL_PREFIX=/full/path/
make install
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To skip bundled (&lt;code&gt;third-party/*&lt;/code&gt;) dependencies:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Install the dependencies using a package manager.
&lt;pre&gt;&lt;code&gt;sudo apt install gperf luajit luarocks libuv1-dev libluajit-5.1-dev libunibilium-dev libmsgpack-dev libtermkey-dev libvterm-dev libutf8proc-dev
sudo luarocks build mpack
sudo luarocks build lpeg
sudo luarocks build inspect
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;Build with &lt;code&gt;USE_BUNDLED=OFF&lt;/code&gt;:
&lt;pre&gt;&lt;code&gt;make CMAKE_BUILD_TYPE=RelWithDebInfo USE_BUNDLED=OFF
sudo make install
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To inspect the build, these CMake features are useful:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cmake --build build --target help&lt;/code&gt; lists all build targets.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;build/CMakeCache.txt&lt;/code&gt; (or &lt;code&gt;cmake -LAH build/&lt;/code&gt;) contains the resolved values of all CMake variables.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;build/compile_commands.json&lt;/code&gt; shows the full compiler invocations for each translation unit.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;See the &lt;a href="https://github.com/neovim/neovim/wiki/Building-Neovim"&gt;Building Neovim&lt;/a&gt; wiki page for details.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-transitioning-from-vim" class="anchor" aria-hidden="true" href="#transitioning-from-vim"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Transitioning from Vim&lt;/h2&gt;
&lt;p&gt;See &lt;a href="https://neovim.io/doc/user/nvim.html#nvim-from-vim" rel="nofollow"&gt;&lt;code&gt;:help nvim-from-vim&lt;/code&gt;&lt;/a&gt; for instructions.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-project-layout" class="anchor" aria-hidden="true" href="#project-layout"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Project layout&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;├─ ci/              build automation
├─ cmake/           build scripts
├─ runtime/         user plugins/docs
├─ src/nvim/        application source code (see src/nvim/README.md)
│  ├─ api/          API subsystem
│  ├─ eval/         VimL subsystem
│  ├─ event/        event-loop subsystem
│  ├─ generators/   code generation (pre-compilation)
│  ├─ lib/          generic data structures
│  ├─ lua/          Lua subsystem
│  ├─ msgpack_rpc/  RPC subsystem
│  ├─ os/           low-level platform code
│  └─ tui/          built-in UI
├─ third-party/     CMake subproject to build dependencies
└─ test/            tests (see test/README.md)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;a id="user-content-license" class="anchor" aria-hidden="true" href="#license"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;License&lt;/h2&gt;
&lt;p&gt;Neovim contributions since &lt;a href="https://github.com/neovim/neovim/commit/b17d9691a24099c9210289f16afb1a498a89d803"&gt;b17d96&lt;/a&gt; are licensed under the
Apache 2.0 license, except for contributions copied from Vim (identified by the
&lt;code&gt;vim-patch&lt;/code&gt; token). See LICENSE for details.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Vim is Charityware.  You can use and copy it as much as you like, but you are
encouraged to make a donation for needy children in Uganda.  Please see the
kcc section of the vim docs or visit the ICCF web site, available at these URLs:

        http://iccf-holland.org/
        http://www.vim.org/iccf/
        http://www.iccf.nl/

You can also sponsor the development of Vim.  Vim sponsors can vote for
features.  The money goes to Uganda anyway.
&lt;/code&gt;&lt;/pre&gt;

&lt;/article&gt;&lt;/div&gt;</description><author>neovim</author><guid isPermaLink="false">https://github.com/neovim/neovim</guid><pubDate>Thu, 06 Feb 2020 00:02:00 GMT</pubDate></item><item><title>mhinz/vim-galore #3 in Vim script, Today</title><link>https://github.com/mhinz/vim-galore</link><description>&lt;p&gt;&lt;i&gt;:mortar_board: All things Vim!&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;div align="center"&gt;
  &lt;br&gt;&lt;br&gt;&lt;br&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/mhinz/vim-galore/master/static/images/logo-vim-galore.png"&gt;&lt;img src="https://raw.githubusercontent.com/mhinz/vim-galore/master/static/images/logo-vim-galore.png" alt="vim-galore logo" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;
  &lt;div&gt;
    &lt;a href="https://github.com/wsdjeg/vim-galore-zh_cn"&gt;Chinese&lt;/a&gt; |
    &lt;a href="http://postd.cc/?s=vim-galore" rel="nofollow"&gt;Japanese&lt;/a&gt; |
    &lt;a href="https://github.com/lsrdg/vim-galore"&gt;Portuguese&lt;/a&gt; |
    &lt;a href="http://givi.olnd.ru/vim-galore/vim-galore-ru.html" rel="nofollow"&gt;Russian&lt;/a&gt;
    &lt;div&gt;
      &lt;br&gt;
      &lt;sub&gt;Licensed under &lt;a href="https://creativecommons.org/licenses/by-sa/4.0" rel="nofollow"&gt;CC BY-SA 4.0&lt;/a&gt;.&lt;/sub&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;br&gt;&lt;br&gt;
&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-intro" class="anchor" aria-hidden="true" href="#intro"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#intro-1"&gt;Intro&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#what-is-vim"&gt;What is Vim?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-vim-philosophy"&gt;The Vim Philosophy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#first-steps"&gt;First steps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#minimal-vimrc"&gt;Minimal vimrc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#what-kind-of-vim-am-i-running"&gt;What kind of Vim am I running?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cheatsheets"&gt;Cheatsheets&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-basics" class="anchor" aria-hidden="true" href="#basics"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#basics-1"&gt;Basics&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#buffers-windows-tabs"&gt;Buffers, windows, tabs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#active-loaded-listed-named-buffers"&gt;Active, loaded, listed, named buffers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#argument-list"&gt;Argument list&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#mappings"&gt;Mappings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#mapleader"&gt;Mapleader&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#registers"&gt;Registers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ranges"&gt;Ranges&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#marks"&gt;Marks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#completion"&gt;Completion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#motions-operators-text-objects"&gt;Motions, operators, text objects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#autocmds"&gt;Autocmds&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#changelist-jumplist"&gt;Changelist, jumplist&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#undo-tree"&gt;Undo tree&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#quickfix-and-location-lists"&gt;Quickfix and location lists&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#macros"&gt;Macros&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#colorschemes"&gt;Colorschemes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#folding"&gt;Folding&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sessions"&gt;Sessions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#locality"&gt;Locality&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#usage-1"&gt;Usage&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#getting-help-offline"&gt;Getting help offline&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#getting-help-offline-alternative"&gt;Getting help offline (alternative)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#getting-help-online"&gt;Getting help online&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#autocmds-in-practice"&gt;Autocmds in practice&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#user-events"&gt;User events&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#nested-autocmds"&gt;Nested autocmds&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#clipboard"&gt;Clipboard&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#clipboard-usage-windows-macos"&gt;Clipboard usage (Windows, macOS)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#clipboard-usage-linux-bsd-"&gt;Clipboard usage (Linux, BSD, ...)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#restore-cursor-position-when-opening-file"&gt;Restore cursor position when opening file&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#temporary-files"&gt;Temporary files&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#backup-files"&gt;Backup files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#swap-files"&gt;Swap files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#undo-files"&gt;Undo files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#viminfo-files"&gt;Viminfo files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#example-configuration-for-temporary-files"&gt;Example configuration for temporary files&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#editing-remote-files"&gt;Editing remote files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#managing-plugins"&gt;Managing plugins&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#block-insert"&gt;Block insert&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#running-external-programs-and-using-filters"&gt;Running external programs and using filters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cscope"&gt;Cscope&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#matchit"&gt;MatchIt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#true-colors"&gt;True colors&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-tips" class="anchor" aria-hidden="true" href="#tips"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#tips-1"&gt;Tips&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#go-to-other-end-of-selected-text"&gt;Go to other end of selected text&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#saner-behavior-of-n-and-n"&gt;Saner behavior of n and N&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#saner-command-line-history"&gt;Saner command-line history&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#saner-ctrl-l"&gt;Saner CTRL-L&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#disable-audible-and-visual-bells"&gt;Disable audible and visual bells&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#quickly-move-current-line"&gt;Quickly move current line&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#quickly-add-empty-lines"&gt;Quickly add empty lines&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#quickly-edit-your-macros"&gt;Quickly edit your macros&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#quickly-jump-to-header-or-source-file"&gt;Quickly jump to header or source file&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#quickly-change-font-size-in-gui"&gt;Quickly change font size in GUI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#change-cursor-style-dependent-on-mode"&gt;Change cursor style dependent on mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dont-lose-selection-when-shifting-sidewards"&gt;Don't lose selection when shifting sidewards&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#reload-a-file-on-saving"&gt;Reload a file on saving&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#smarter-cursorline"&gt;Smarter cursorline&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#faster-keyword-completion"&gt;Faster keyword completion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cosmetic-changes-to-colorschemes"&gt;Cosmetic changes to colorschemes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-commands" class="anchor" aria-hidden="true" href="#commands"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#commands-1"&gt;Commands&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#global-and-vglobal"&gt;:global and :vglobal&lt;/a&gt; - Execute a command on all matching lines.&lt;/li&gt;
&lt;li&gt;&lt;a href="#normal-and-execute"&gt;:normal and :execute&lt;/a&gt; - The scripting dream team.&lt;/li&gt;
&lt;li&gt;&lt;a href="#redir-and-execute"&gt;:redir and execute()&lt;/a&gt; - Capture command output.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-debugging" class="anchor" aria-hidden="true" href="#debugging"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#debugging-1"&gt;Debugging&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#general-tips"&gt;General tips&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#verbosity"&gt;Verbosity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#profiling-startup-time"&gt;Profiling startup time&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#profiling-at-runtime"&gt;Profiling at runtime&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#debugging-vim-scripts"&gt;Debugging Vim scripts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#debugging-syntax-files"&gt;Debugging syntax files&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-miscellaneous" class="anchor" aria-hidden="true" href="#miscellaneous"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#miscellaneous-1"&gt;Miscellaneous&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#additional-resources"&gt;Additional resources&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#vim-distributions"&gt;Vim distributions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#standard-plugins"&gt;Standard plugins&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#map-capslock-to-control"&gt;Map CapsLock to Control&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#generating-html-from-buffer"&gt;Generating HTML from buffer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#easter-eggs"&gt;Easter eggs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#why-hjkl-for-navigation"&gt;Why hjkl for navigation?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-common-problems" class="anchor" aria-hidden="true" href="#common-problems"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#common-problems-1"&gt;Common problems&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#editing-small-files-is-slow"&gt;Editing small files is slow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#editing-huge-files-is-slow"&gt;Editing huge files is slow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#bracketed-paste-or-why-do-i-have-to-set-paste-all-the-time"&gt;Bracketed paste (or why do I have to set 'paste' all the time?)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#delays-when-using-escape-key-in-terminal"&gt;Delays when using escape key in terminal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#function-search-undo"&gt;Function search undo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-technical-quirks" class="anchor" aria-hidden="true" href="#technical-quirks"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#technical-quirks-1"&gt;Technical quirks&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#newline-used-for-nul"&gt;Newline used for NUL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-terminology" class="anchor" aria-hidden="true" href="#terminology"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#terminology-1"&gt;Terminology&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#vim-script-vimscript-viml"&gt;Vim script? Vimscript? VimL?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-list-of-colorschemes" class="anchor" aria-hidden="true" href="#list-of-colorschemes"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="PLUGINS.md#colorschemes-1"&gt;List of colorschemes&lt;/a&gt;&lt;/h3&gt;
&lt;h3&gt;&lt;a id="user-content-list-of-plugins" class="anchor" aria-hidden="true" href="#list-of-plugins"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="PLUGINS.md"&gt;List of plugins&lt;/a&gt;&lt;/h3&gt;
&lt;br&gt;
&lt;h1&gt;&lt;a id="user-content-intro-1" class="anchor" aria-hidden="true" href="#intro-1"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Intro&lt;/h1&gt;
&lt;h2&gt;&lt;a id="user-content-what-is-vim" class="anchor" aria-hidden="true" href="#what-is-vim"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;What is Vim?&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://www.vim.org" rel="nofollow"&gt;Vim&lt;/a&gt; is a text editor with a long line of ancestors that
goes back to &lt;a href="https://en.wikipedia.org/wiki/QED_(text_editor)" rel="nofollow"&gt;qed&lt;/a&gt;. &lt;a href="https://en.wikipedia.org/wiki/Bram_Moolenaar" rel="nofollow"&gt;Bram
Moolenaar&lt;/a&gt; released it in 1991.&lt;/p&gt;
&lt;p&gt;The project is hosted online at &lt;a href="http://www.vim.org/index.php" rel="nofollow"&gt;vim.org&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Getting Vim: Use your favourite package manager or visit the &lt;a href="http://www.vim.org/download.php" rel="nofollow"&gt;download
page&lt;/a&gt; from vim.org.&lt;/p&gt;
&lt;p&gt;Discussions and user questions are best done on the
&lt;a href="https://groups.google.com/forum/#!forum/vim_use" rel="nofollow"&gt;vim_use&lt;/a&gt; mailing list or using
IRC (&lt;a href="https://freenode.net" rel="nofollow"&gt;Freenode&lt;/a&gt;) in the &lt;code&gt;#vim&lt;/code&gt; channel.&lt;/p&gt;
&lt;p&gt;Development happens on &lt;a href="https://github.com/vim/vim"&gt;GitHub&lt;/a&gt;, discussions on the
&lt;a href="https://groups.google.com/forum/#!forum/vim_dev" rel="nofollow"&gt;vim_dev&lt;/a&gt; mailing list.&lt;/p&gt;
&lt;p&gt;Read &lt;a href="http://www.viemu.com/a-why-vi-vim.html" rel="nofollow"&gt;Why, oh WHY, do those #?@! nutheads use
vi?&lt;/a&gt; to see common misconceptions about
Vim explained.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-the-vim-philosophy" class="anchor" aria-hidden="true" href="#the-vim-philosophy"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;The Vim Philosophy&lt;/h2&gt;
&lt;p&gt;Vim adheres to the modal editing philosophy. This means that it provides
multiple modes and the meaning of keys changes according to the mode. You
navigate files in &lt;em&gt;normal mode&lt;/em&gt;, you insert text in &lt;em&gt;insert mode&lt;/em&gt;, you select
lines in &lt;em&gt;visual mode&lt;/em&gt;, you access commands in &lt;em&gt;command-line mode&lt;/em&gt; and so on.
This might sound complicated at first, but has a huge advantage: you don't have
to break your fingers by holding several keys at once, most of the time you
simply press them one after the other. The more common the task, the fewer keys
are needed.&lt;/p&gt;
&lt;p&gt;A related concept that works well with modal editing are operators and motions.
&lt;em&gt;Operators&lt;/em&gt; start a certain action, e.g. changing, removing, or selecting text.
Afterwards you specify the region of text you want to act on using a &lt;em&gt;motion&lt;/em&gt;.
To change everything between parentheses, use &lt;code&gt;ci(&lt;/code&gt; (read &lt;em&gt;change inner
parentheses&lt;/em&gt;). To remove an entire paragraph of text, use &lt;code&gt;dap&lt;/code&gt; (read &lt;em&gt;delete
around paragraph&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;If you see advanced Vim users working, you'll notice that they speak the
&lt;em&gt;language of Vim&lt;/em&gt; as well as pianists handle their instruments. Complex
operations are done using only a few key presses. They don't even think about it
anymore as &lt;a href="https://en.wikipedia.org/wiki/Muscle_memory" rel="nofollow"&gt;muscle memory&lt;/a&gt; took
over already. This reduces &lt;a href="https://en.wikipedia.org/wiki/Cognitive_load" rel="nofollow"&gt;cognitive
load&lt;/a&gt; and helps to focus on the
actual task.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-first-steps" class="anchor" aria-hidden="true" href="#first-steps"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;First steps&lt;/h2&gt;
&lt;p&gt;Vim comes bundled with an interactive tutorial that teaches the most basic
things you need to know about. You can start it from the shell:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ vimtutor
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Don't be put off by how boring it looks like and work through the exercises. The
editors or IDEs you used before were most probably all non-modal, so working by
switching modes will seem awkward at first, but the more you use Vim, the more
it becomes &lt;a href="https://en.wikipedia.org/wiki/Muscle_memory" rel="nofollow"&gt;muscle memory&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Vim was bolted on &lt;a href="https://en.wikipedia.org/wiki/Stevie_(text_editor)" rel="nofollow"&gt;Stevie&lt;/a&gt;, a
&lt;a href="https://en.wikipedia.org/wiki/Vi" rel="nofollow"&gt;vi&lt;/a&gt; clone, and supports two operating modes:
"compatible" and "nocompatible". Using Vim in compatible mode means using vi
defaults for all options, opposed to Vim defaults. As long as you didn't create
a user vimrc yet or started Vim with &lt;code&gt;vim -N&lt;/code&gt;, compatible mode is assumed! Don't
use Vim in compatible mode. Just don't.&lt;/p&gt;
&lt;p&gt;Next steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create your own &lt;a href="#minimal-vimrc"&gt;vimrc&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Have some &lt;a href="#cheatsheets"&gt;cheatsheets&lt;/a&gt; ready for the first weeks.&lt;/li&gt;
&lt;li&gt;Read through the &lt;a href="#basics-1"&gt;basics&lt;/a&gt; section to learn what is even possible.&lt;/li&gt;
&lt;li&gt;Learn on demand! You never finish learning Vim. If you encounter any
problems, just look for it on the internet. Your problem was solved already.
Vim comes with great documentation and knowing how to navigate it is a must:
&lt;a href="#getting-help-offline"&gt;Getting help offline&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Have a look at the &lt;a href="#additional-resources"&gt;additional resources&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;One last advice: Please learn how to use Vim properly before starting to add all
kinds of hyped &lt;a href="#managing-plugins"&gt;plugins&lt;/a&gt; that only implement features that
Vim already supports natively.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-minimal-vimrc" class="anchor" aria-hidden="true" href="#minimal-vimrc"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Minimal vimrc&lt;/h2&gt;
&lt;p&gt;The user vimrc can be put into &lt;code&gt;~/.vimrc&lt;/code&gt; or for the sake of better separation
into &lt;code&gt;~/.vim/vimrc&lt;/code&gt;. The latter makes it easy to put the entire configuration
under version control and upload it to, let's say GitHub.&lt;/p&gt;
&lt;p&gt;You find many "minimal vimrcs" all over the net, and maybe my version isn't as
minimal as it should be, but it provides a good set of sane settings that I deem
to be useful for starting out.&lt;/p&gt;
&lt;p&gt;Eventually you have to read up on all the mentioned settings anyway and decide
for yourself. :-)&lt;/p&gt;
&lt;p&gt;So here it is: &lt;a href="static/minimal-vimrc.vim"&gt;minimal-vimrc&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In case you're interested, here's
&lt;a href="https://github.com/mhinz/dotfiles/blob/master/.vim/vimrc"&gt;my vimrc&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TIP&lt;/strong&gt;: Most plugin authors maintain several plugins and also publish their
vimrc on GitHub (often in a repository called "vim-config" or "dotfiles"), so
whenever you find a plugin you like, look up its maintainer's GitHub page and
look through the repositories.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-what-kind-of-vim-am-i-running" class="anchor" aria-hidden="true" href="#what-kind-of-vim-am-i-running"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;What kind of Vim am I running?&lt;/h2&gt;
&lt;p&gt;Looking at &lt;code&gt;:version&lt;/code&gt; will give you all the information you need to know about
how the currently running Vim binary was compiled.&lt;/p&gt;
&lt;p&gt;The first line tells you when the binary was compiled and the version, e.g. 7.4.
One of the next lines states &lt;code&gt;Included patches: 1-1051&lt;/code&gt;, which is the patch
level. Thus, your exact Vim version is 7.4.1051.&lt;/p&gt;
&lt;p&gt;Another line states something like &lt;code&gt;Tiny version without GUI&lt;/code&gt; or &lt;code&gt;Huge version with GUI&lt;/code&gt;. The obvious information from that is whether your Vim includes GUI
support, e.g. for starting &lt;code&gt;gvim&lt;/code&gt; from the shell or running &lt;code&gt;:gui&lt;/code&gt; from Vim
within a terminal emulator. The other important information is the &lt;code&gt;Tiny&lt;/code&gt; and
&lt;code&gt;Huge&lt;/code&gt;. Vim distinguishes between feature sets called &lt;code&gt;tiny&lt;/code&gt;, &lt;code&gt;small&lt;/code&gt;, &lt;code&gt;normal&lt;/code&gt;,
&lt;code&gt;big&lt;/code&gt;, and &lt;code&gt;huge&lt;/code&gt;, all enabling different subsets of features.&lt;/p&gt;
&lt;p&gt;The majority of &lt;code&gt;:version&lt;/code&gt; output is consumed by the feature list itself.
&lt;code&gt;+clipboard&lt;/code&gt; means the clipboard feature was compiled in, &lt;code&gt;-clipboard&lt;/code&gt; means it
wasn't compiled in.&lt;/p&gt;
&lt;p&gt;A few Vim features need to be compiled in for them to work. E.g. for &lt;code&gt;:prof&lt;/code&gt; to
work, you need a Vim with a huge feature set, because that set enables the
&lt;code&gt;+profile&lt;/code&gt; feature.&lt;/p&gt;
&lt;p&gt;If that's not the case and you installed Vim from a package manager, make sure
to install a package called &lt;code&gt;vim-x&lt;/code&gt;, &lt;code&gt;vim-x11&lt;/code&gt;, &lt;code&gt;vim-gtk&lt;/code&gt;, &lt;code&gt;vim-gnome&lt;/code&gt; or
similar, since these packages usually come with the huge feature set.&lt;/p&gt;
&lt;p&gt;You can also test for the version or features programmatically:&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;"&lt;/span&gt; Do something if running at least Vim 7.4.42 with +profile enabled.&lt;/span&gt;
&lt;span class="pl-k"&gt;if&lt;/span&gt; (&lt;span class="pl-smi"&gt;&lt;span class="pl-k"&gt;v:&lt;/span&gt;version&lt;/span&gt;&lt;span class="pl-k"&gt; &amp;gt; &lt;/span&gt;&lt;span class="pl-c1"&gt;704&lt;/span&gt; &lt;span class="pl-k"&gt;||&lt;/span&gt; &lt;span class="pl-smi"&gt;&lt;span class="pl-k"&gt;v:&lt;/span&gt;version&lt;/span&gt; &lt;span class="pl-k"&gt;==&lt;/span&gt; &lt;span class="pl-c1"&gt;704&lt;/span&gt; &lt;span class="pl-k"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="pl-en"&gt;has&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;patch42&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;)) &lt;span class="pl-k"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="pl-en"&gt;has&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;profile&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-c"&gt;  &lt;span class="pl-c"&gt;"&lt;/span&gt; do stuff&lt;/span&gt;
&lt;span class="pl-k"&gt;endif&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Help:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:h :version
:h feature-list
:h +feature-list
:h has-patch
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;a id="user-content-cheatsheets" class="anchor" aria-hidden="true" href="#cheatsheets"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Cheatsheets&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://people.csail.mit.edu/vgod/vim/vim-cheat-sheet-en.png" rel="nofollow"&gt;http://people.csail.mit.edu/vgod/vim/vim-cheat-sheet-en.png&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cdn.shopify.com/s/files/1/0165/4168/files/preview.png" rel="nofollow"&gt;https://cdn.shopify.com/s/files/1/0165/4168/files/preview.png&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://michael.peopleofhonoronly.com/vim/vim_cheat_sheet_for_programmers_screen.png" rel="nofollow"&gt;http://michael.peopleofhonoronly.com/vim/vim_cheat_sheet_for_programmers_screen.png&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.rosipov.com/images/posts/vim-movement-commands-cheatsheet.png" rel="nofollow"&gt;http://www.rosipov.com/images/posts/vim-movement-commands-cheatsheet.png&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Or quickly open a cheatsheet from within Vim: &lt;a href="https://github.com/lifepillar/vim-cheat40"&gt;vim-cheat40&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-basics-1" class="anchor" aria-hidden="true" href="#basics-1"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Basics&lt;/h1&gt;
&lt;h2&gt;&lt;a id="user-content-buffers-windows-tabs" class="anchor" aria-hidden="true" href="#buffers-windows-tabs"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Buffers, windows, tabs&lt;/h2&gt;
&lt;p&gt;Vim is a text editor. Every time text is shown, the text is part of a
&lt;strong&gt;buffer&lt;/strong&gt;. Each file will be opened in its own buffer. Plugins show stuff in
their own buffers etc.&lt;/p&gt;
&lt;p&gt;Buffers have many attributes, e.g. whether the text it contains is modifiable,
or whether it is associated with a file and thus needs to be synchronized to
disk on saving.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Windows&lt;/strong&gt; are viewports &lt;em&gt;onto&lt;/em&gt; buffers. If you want to view several files at
the same time or even different locations of the same file, you use windows.&lt;/p&gt;
&lt;p&gt;And please, please don't call them &lt;em&gt;splits&lt;/em&gt;. You can split a window in two, but
that doesn't make them &lt;em&gt;splits&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Windows can be split vertically or horizontally and the heights and widths of
existing windows can be altered, too. Therefore, you can use whatever window
layout you prefer.&lt;/p&gt;
&lt;p&gt;A &lt;strong&gt;tab page&lt;/strong&gt; (or just tab) is a collection of windows. Thus, if you want to
use multiple window layouts, use tabs.&lt;/p&gt;
&lt;p&gt;Putting it in a nutshell, if you start Vim without arguments, you'll have one
tab page that holds one window that shows one buffer.&lt;/p&gt;
&lt;p&gt;By the way, the buffer list is global and you can access any buffer from any
tab.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-active-loaded-listed-named-buffers" class="anchor" aria-hidden="true" href="#active-loaded-listed-named-buffers"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Active, loaded, listed, named buffers&lt;/h2&gt;
&lt;p&gt;Run Vim like this &lt;code&gt;vim file1&lt;/code&gt;. The file's content will be loaded into a buffer.
You have a &lt;strong&gt;loaded buffer&lt;/strong&gt; now. The content of the buffer is only synchronized
to disk (written back to the file) if you save it within Vim.&lt;/p&gt;
&lt;p&gt;Since the buffer is also shown in a window, it's also an &lt;strong&gt;active buffer&lt;/strong&gt;. Now
if you load another file via &lt;code&gt;:e file2&lt;/code&gt;, &lt;code&gt;file1&lt;/code&gt; will become a &lt;strong&gt;hidden buffer&lt;/strong&gt;
and &lt;code&gt;file2&lt;/code&gt; the active one.&lt;/p&gt;
&lt;p&gt;Both buffers are also &lt;strong&gt;listed&lt;/strong&gt;, thus they will get listed in the output of
&lt;code&gt;:ls&lt;/code&gt;. Plugin buffers or help buffers are often marked as unlisted, since
they're not regular files you usually edit with a text editor. Listed and
unlisted buffers can be shown via &lt;code&gt;:ls!&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Unnamed buffers&lt;/strong&gt;, also often used by plugins, are buffers that don't have an
associated filename. E.g. &lt;code&gt;:enew&lt;/code&gt; will create an unnamed scratch buffer. Add
some text and write it to disk via &lt;code&gt;:w /tmp/foo&lt;/code&gt;, and it will become a named
buffer.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-argument-list" class="anchor" aria-hidden="true" href="#argument-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Argument list&lt;/h2&gt;
&lt;p&gt;The &lt;a href="#buffers-windows-tabs"&gt;global buffer list&lt;/a&gt; is a Vim thing. Before that, in
vi, there only used to be the argument list, which is also available in Vim.&lt;/p&gt;
&lt;p&gt;Every filename given to Vim on the shell command-line, is remembered in the
argument list. There can be multiple argument lists: by default all arguments
are put into the global argument list, but you can use &lt;code&gt;:arglocal&lt;/code&gt; to create a
new argument list that is local to the window.&lt;/p&gt;
&lt;p&gt;List the current arguments with &lt;code&gt;:args&lt;/code&gt;. Switch between files from the argument
list with &lt;code&gt;:next&lt;/code&gt;, &lt;code&gt;:previous&lt;/code&gt;, &lt;code&gt;:first&lt;/code&gt;, &lt;code&gt;:last&lt;/code&gt; and friends. Alter it with
&lt;code&gt;:argadd&lt;/code&gt;, &lt;code&gt;:argdelete&lt;/code&gt; or &lt;code&gt;:args&lt;/code&gt; with a list of files.&lt;/p&gt;
&lt;p&gt;If you should prefer using the buffer or argument list for working with files is
a matter of taste. My impression is that most people use the buffer list
exclusively.&lt;/p&gt;
&lt;p&gt;Nevertheless, there is one huge use case for the argument list: batch processing
via &lt;code&gt;:argdo&lt;/code&gt;! A simple refactoring example:&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;:&lt;span class="pl-c1"&gt;args&lt;/span&gt; &lt;span class="pl-k"&gt;**&lt;/span&gt;/&lt;span class="pl-k"&gt;*&lt;/span&gt;.[&lt;span class="pl-c1"&gt;ch&lt;/span&gt;]
:&lt;span class="pl-c1"&gt;argdo&lt;/span&gt; &lt;span class="pl-k"&gt;%&lt;/span&gt;&lt;span class="pl-c1"&gt;s&lt;/span&gt;&lt;span class="pl-sr"&gt;/foo/&lt;/span&gt;&lt;span class="pl-c1"&gt;bar&lt;/span&gt;/ge | &lt;span class="pl-c1"&gt;update&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This replaces all occurrences of "foo" by "bar" in all C source and header files
from the current directory and below.&lt;/p&gt;
&lt;p&gt;Help: &lt;code&gt;:h argument-list&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-mappings" class="anchor" aria-hidden="true" href="#mappings"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Mappings&lt;/h2&gt;
&lt;p&gt;You can define your own mappings with the &lt;code&gt;:map&lt;/code&gt; family of commands. Each
command of that family defines a mapping for a certain set of modes. Technically
Vim comes with a whopping 12 modes, 6 of them can be mapped. Additionally, some
commands act on multiple modes at once.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Recursive&lt;/th&gt;
&lt;th&gt;Non-recursive&lt;/th&gt;
&lt;th&gt;Unmap&lt;/th&gt;
&lt;th&gt;Modes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;:map&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:noremap&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:unmap&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;normal, visual, operator-pending&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;:nmap&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:nnoremap&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:nunmap&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;normal&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;:xmap&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:xnoremap&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:xunmap&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;visual&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;:cmap&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:cnoremap&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:cunmap&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;command-line&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;:omap&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:onoremap&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:ounmap&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;operator-pending&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;:imap&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:inoremap&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:iunmap&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;insert&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;E.g. this defines the mapping for normal mode only:&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;:&lt;span class="pl-c1"&gt;nmap&lt;/span&gt; &lt;span class="pl-c1"&gt;&amp;lt;space&amp;gt;&lt;/span&gt; :&lt;span class="pl-c1"&gt;echo&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;foo&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;&amp;lt;cr&amp;gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Unmap it again by using &lt;code&gt;:nunmap &amp;lt;space&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For a few more but rather uncommon modes (or combinations of them), see &lt;code&gt;:h map-modes&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So far, so good. There's only one problem that can be pretty confusing to
beginners: &lt;code&gt;:nmap&lt;/code&gt; is &lt;em&gt;recursive&lt;/em&gt;! That is, the right-hand side takes other
mappings into account.&lt;/p&gt;
&lt;p&gt;So you defined a mapping that simply echoes "Foo":&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;:&lt;span class="pl-c1"&gt;nmap&lt;/span&gt; &lt;span class="pl-c1"&gt;b&lt;/span&gt; :&lt;span class="pl-c1"&gt;echo&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Foo&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;&amp;lt;cr&amp;gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But what if you want to map the default behavior of &lt;code&gt;b&lt;/code&gt; (going one word back) to
another key?&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;:&lt;span class="pl-c1"&gt;nmap&lt;/span&gt; &lt;span class="pl-c1"&gt;a&lt;/span&gt; &lt;span class="pl-c1"&gt;b&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you hit &lt;kbd&gt;a&lt;/kbd&gt;, we expect the cursor to go back a word, but instead
"Foo" is printed in the command-line! Because the right-hand side, &lt;code&gt;b&lt;/code&gt;, was
mapped to another action already, namely &lt;code&gt;:echo "Foo"&amp;lt;cr&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The proper way to resolve this problem is to use a &lt;em&gt;non-recursive&lt;/em&gt; mapping
instead:&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;:&lt;span class="pl-c1"&gt;nnoremap&lt;/span&gt; &lt;span class="pl-c1"&gt;a&lt;/span&gt; &lt;span class="pl-c1"&gt;b&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Rule of thumb: Always use non-recursive mappings unless recursing is actually
desired.&lt;/p&gt;
&lt;p&gt;Look up your mappings by not giving a right-hand side. E.g. &lt;code&gt;:nmap&lt;/code&gt; shows all
normal mappings and &lt;code&gt;:nmap &amp;lt;leader&amp;gt;&lt;/code&gt; shows all normal mappings that start with
the mapleader.&lt;/p&gt;
&lt;p&gt;If you want to disable a standard mapping, map them to the special &lt;code&gt;&amp;lt;nop&amp;gt;&lt;/code&gt;
character, e.g. &lt;code&gt;:noremap &amp;lt;left&amp;gt; &amp;lt;nop&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Help:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:h key-notation
:h mapping
:h 05.3
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;a id="user-content-mapleader" class="anchor" aria-hidden="true" href="#mapleader"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Mapleader&lt;/h2&gt;
&lt;p&gt;The mapleader is simply a placeholder than can be used with custom mappings and
is set to &lt;code&gt;\&lt;/code&gt; by default.&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;nnoremap&lt;/span&gt; &lt;span class="pl-c1"&gt;&amp;lt;leader&amp;gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;h&lt;/span&gt; :&lt;span class="pl-c1"&gt;helpgrep&lt;/span&gt;&lt;span class="pl-c1"&gt;&amp;lt;space&amp;gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This mapping is triggered by &lt;code&gt;\h&lt;/code&gt;. If you want to use &lt;code&gt;&amp;lt;space&amp;gt;h&lt;/code&gt; instead:&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; mapleader &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt; &lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-c1"&gt;nnoremap&lt;/span&gt; &lt;span class="pl-c1"&gt;&amp;lt;leader&amp;gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;h&lt;/span&gt; :&lt;span class="pl-c1"&gt;helpgrep&lt;/span&gt;&lt;span class="pl-c1"&gt;&amp;lt;space&amp;gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Moreover, there is &lt;code&gt;&amp;lt;localleader&amp;gt;&lt;/code&gt; that is the local counterpart to &lt;code&gt;&amp;lt;leader&amp;gt;&lt;/code&gt;
and is supposed to be used for mappings that are local to the buffer, eg.
filetype-specific plugins. It also defaults to &lt;code&gt;\&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Set the mapleaders before mappings! All leader mappings that are in
effect already, won't change just because the mapleader was changed. &lt;code&gt;:nmap &amp;lt;leader&amp;gt;&lt;/code&gt; will show all normal mode leader mappings with the mapleader resolved
already, so use it to double-check your mappings.&lt;/p&gt;
&lt;p&gt;See &lt;code&gt;:h mapleader&lt;/code&gt; and &lt;code&gt;:h maplocalleader&lt;/code&gt; for more.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-registers" class="anchor" aria-hidden="true" href="#registers"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Registers&lt;/h2&gt;
&lt;p&gt;Registers are slots that save text. Copying text into a register is called
&lt;strong&gt;yanking&lt;/strong&gt; and extracting text from a register is called &lt;strong&gt;pasting&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Vim provides the following registers:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Character&lt;/th&gt;
&lt;th&gt;Filled by?&lt;/th&gt;
&lt;th&gt;Readonly?&lt;/th&gt;
&lt;th&gt;Contains text from?&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Unnamed&lt;/td&gt;
&lt;td&gt;&lt;code&gt;"&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;vim&lt;/td&gt;
&lt;td&gt;[ ]&lt;/td&gt;
&lt;td&gt;Last yank or deletion. (&lt;code&gt;d&lt;/code&gt;, &lt;code&gt;c&lt;/code&gt;, &lt;code&gt;s&lt;/code&gt;, &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Numbered&lt;/td&gt;
&lt;td&gt;&lt;code&gt;0&lt;/code&gt; to &lt;code&gt;9&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;vim&lt;/td&gt;
&lt;td&gt;[ ]&lt;/td&gt;
&lt;td&gt;Register &lt;code&gt;0&lt;/code&gt;: Last yank. Register &lt;code&gt;1&lt;/code&gt;: Last deletion. Register &lt;code&gt;2&lt;/code&gt;: Second last deletion. And so on. Think of registers &lt;code&gt;1&lt;/code&gt;-&lt;code&gt;9&lt;/code&gt; as a read-only &lt;a href="https://en.wikipedia.org/wiki/Queue_(abstract_data_type)" rel="nofollow"&gt;queue&lt;/a&gt; with 9 elements.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Small delete&lt;/td&gt;
&lt;td&gt;&lt;code&gt;-&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;vim&lt;/td&gt;
&lt;td&gt;[ ]&lt;/td&gt;
&lt;td&gt;Last deletion that was less than one line.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Named&lt;/td&gt;
&lt;td&gt;&lt;code&gt;a&lt;/code&gt; to &lt;code&gt;z&lt;/code&gt;, &lt;code&gt;A&lt;/code&gt; to &lt;code&gt;Z&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;user&lt;/td&gt;
&lt;td&gt;[ ]&lt;/td&gt;
&lt;td&gt;If you yank to register &lt;code&gt;a&lt;/code&gt;, you replace its text. If you yank to register &lt;code&gt;A&lt;/code&gt;, you append to the text in register &lt;code&gt;a&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Read-only&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:&lt;/code&gt;, &lt;code&gt;.&lt;/code&gt;, &lt;code&gt;%&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;vim&lt;/td&gt;
&lt;td&gt;[x]&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:&lt;/code&gt;: Last command, &lt;code&gt;.&lt;/code&gt;: Last inserted text, &lt;code&gt;%&lt;/code&gt;: Current filename.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Alternate buffer&lt;/td&gt;
&lt;td&gt;&lt;code&gt;#&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;vim&lt;/td&gt;
&lt;td&gt;[ ]&lt;/td&gt;
&lt;td&gt;Most of the time the previously visited buffer of the current window. See &lt;code&gt;:h alternate-file&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Expression&lt;/td&gt;
&lt;td&gt;&lt;code&gt;=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;user&lt;/td&gt;
&lt;td&gt;[ ]&lt;/td&gt;
&lt;td&gt;Evaluation of the VimL expression that was yanked. E.g. do this in insert mode: &lt;code&gt;&amp;lt;c-r&amp;gt;=5+5&amp;lt;cr&amp;gt;&lt;/code&gt; and "10" will be inserted in the buffer.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Selection&lt;/td&gt;
&lt;td&gt;&lt;code&gt;+&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;vim&lt;/td&gt;
&lt;td&gt;[ ]&lt;/td&gt;
&lt;td&gt;&lt;code&gt;*&lt;/code&gt; and &lt;code&gt;+&lt;/code&gt; are the &lt;a href="#clipboard"&gt;clipboard&lt;/a&gt; registers.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Drop&lt;/td&gt;
&lt;td&gt;&lt;code&gt;~&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;vim&lt;/td&gt;
&lt;td&gt;[x]&lt;/td&gt;
&lt;td&gt;From last drag'n'drop.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Black hole&lt;/td&gt;
&lt;td&gt;&lt;code&gt;_&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;vim&lt;/td&gt;
&lt;td&gt;[ ]&lt;/td&gt;
&lt;td&gt;If you don't want any other registers implicitly affected. E.g. &lt;code&gt;"_dd&lt;/code&gt; deletes the current line without affecting registers &lt;code&gt;"&lt;/code&gt;, &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Last search pattern&lt;/td&gt;
&lt;td&gt;&lt;code&gt;/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;vim&lt;/td&gt;
&lt;td&gt;[ ]&lt;/td&gt;
&lt;td&gt;Last pattern used with &lt;code&gt;/&lt;/code&gt;, &lt;code&gt;?&lt;/code&gt;, &lt;code&gt;:global&lt;/code&gt;, etc.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Each register that is not readonly can be set by the user:&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;:&lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-smi"&gt;@/&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;register&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Afterwards &lt;kbd&gt;n&lt;/kbd&gt; would jump to the next occurrence of "register".&lt;/p&gt;
&lt;p&gt;There are numerous exceptions when registers get implicitly filled, so be sure
to read &lt;code&gt;:h registers&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Yank with &lt;code&gt;y&lt;/code&gt; and paste with &lt;code&gt;p&lt;/code&gt;/&lt;code&gt;P&lt;/code&gt;, but mind that Vim distinguishes between
characterwise and linewise visual selections. See &lt;code&gt;:h linewise&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example: linewise&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;yy&lt;/code&gt; (or just &lt;code&gt;Y&lt;/code&gt;) yanks the current line, move the cursor somewhere else, use
&lt;code&gt;p&lt;/code&gt; to paste below the current line &lt;code&gt;P&lt;/code&gt; for pasting above it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example: charwise&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Yank the first word with &lt;code&gt;0yw&lt;/code&gt;, move somewhere else, paste after the cursor on
the current line with &lt;code&gt;p&lt;/code&gt; and before the cursor with &lt;code&gt;P&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example: explicit naming of register&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;"aY&lt;/code&gt; yanks the current line into register &lt;code&gt;a&lt;/code&gt;. Move to another line. &lt;code&gt;"AY&lt;/code&gt;
appends the current line to register &lt;code&gt;a&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I suggest playing around with all these registers a bit and constantly checking
&lt;code&gt;:reg&lt;/code&gt;, so you can see what's actually happening.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Fun fact&lt;/strong&gt;: In Emacs "yanking" stands for pasting (or &lt;em&gt;reinserting previously
killed text&lt;/em&gt;) not copying.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-ranges" class="anchor" aria-hidden="true" href="#ranges"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Ranges&lt;/h2&gt;
&lt;p&gt;Ranges are pretty easy to understand, but many Vimmers don't know about their
full potential.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Many commands take ranges.&lt;/li&gt;
&lt;li&gt;An address denotes a certain line.&lt;/li&gt;
&lt;li&gt;A range is either a single address or a pair of addresses separated by either
&lt;code&gt;,&lt;/code&gt; or &lt;code&gt;;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Ranges tell commands which lines to act on.&lt;/li&gt;
&lt;li&gt;Most commands act only on the current line by default. Notable exceptions are
&lt;code&gt;:write&lt;/code&gt; and &lt;code&gt;:global&lt;/code&gt; which act on all lines.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The usage of ranges is pretty intuitive, so here are some examples (using &lt;code&gt;:d&lt;/code&gt;
as short form of &lt;code&gt;:delete&lt;/code&gt;):&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Command&lt;/th&gt;
&lt;th&gt;Lines acted on&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;:d&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Current line.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;:.d&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Current line.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;:1d&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;First line.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;:$d&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Last line.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;:1,$d&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;All lines.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;:%d&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;All lines (syntactic sugar for &lt;code&gt;1,$&lt;/code&gt;).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;:.,5d&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Current line to line 5.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;:,5d&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Also current line to line 5.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;:,+3d&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Current line and the next 3 lines.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;:1,+3d&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;First line to current line + 3.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;:,-3d&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Current line and the last 3 lines. (Vim will prompt you, since this is a reversed range.)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;:3,'xdelete&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Lines 3 to the line marked by &lt;a href="#marks"&gt;mark&lt;/a&gt; x.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;:/^foo/,$delete&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;From the next line that starts with "foo" to the end.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;:/^foo/+1,$delete&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;From the line after the line that starts with "foo" to the end.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Note that instead of &lt;code&gt;,&lt;/code&gt;, &lt;code&gt;;&lt;/code&gt; can be used as a separator. The difference is that
in the case of &lt;code&gt;from,to&lt;/code&gt;, the &lt;em&gt;to&lt;/em&gt; is relative to the current line, but when
using &lt;code&gt;from;to&lt;/code&gt;, the &lt;em&gt;to&lt;/em&gt; is relative to the address of &lt;em&gt;from&lt;/em&gt;! Assuming you're
on line 5, &lt;code&gt;:1,+1d&lt;/code&gt; would delete lines 1 to 6, whereas &lt;code&gt;:1;+1d&lt;/code&gt; would only
delete lines 1 and 2.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;/&lt;/code&gt; address can be preceded with another address. This allows you to &lt;em&gt;stack&lt;/em&gt;
patterns, e.g.:&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;:&lt;span class="pl-sr"&gt;/foo//bar//quux/&lt;/span&gt;&lt;span class="pl-c1"&gt;d&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This would delete the first line containing "quux" after the first line
containing "bar" after the first line containing "foo" after the current line.&lt;/p&gt;
&lt;p&gt;Sometimes Vim automatically prepends the command-line with a range. E.g. start a
visual line selection with &lt;code&gt;V&lt;/code&gt;, select some lines and type &lt;code&gt;:&lt;/code&gt;. The command-line
will be populated with the range &lt;code&gt;'&amp;lt;,'&amp;gt;&lt;/code&gt;, which means the following command will
use the previously selected lines as a range. (This is also why you sometimes
see mappings like &lt;code&gt;:vnoremap foo :&amp;lt;c-u&amp;gt;command&lt;/code&gt;. Here &lt;code&gt;&amp;lt;c-u&amp;gt;&lt;/code&gt; is used to remove
the range, because Vim will throw an error when giving a range to a command that
doesn't support it.)&lt;/p&gt;
&lt;p&gt;Another example is using &lt;code&gt;!!&lt;/code&gt; in normal mode. This will populate the
command-line with &lt;code&gt;:.!&lt;/code&gt;. If followed by an external program, that program's
output would replace the current line. So you could replace the current
paragraph with the output of ls by using &lt;code&gt;:?^$?+1,/^$/-1!ls&lt;/code&gt;. Fancy!&lt;/p&gt;
&lt;p&gt;Help:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:h cmdline-ranges
:h 10.3
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;a id="user-content-marks" class="anchor" aria-hidden="true" href="#marks"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Marks&lt;/h2&gt;
&lt;p&gt;You use marks to remember a position, that is line number and column, in a file.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Marks&lt;/th&gt;
&lt;th&gt;Set by..&lt;/th&gt;
&lt;th&gt;Usage&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;a&lt;/code&gt; - &lt;code&gt;z&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;User&lt;/td&gt;
&lt;td&gt;Local to file, thus only valid within one file. Jumping to a lowercase mark, means jumping within the current file.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;A&lt;/code&gt; - &lt;code&gt;Z&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;User&lt;/td&gt;
&lt;td&gt;Global, thus valid between files. Also called &lt;em&gt;file marks&lt;/em&gt;. Jumping to a file mark may switch to another buffer.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;0&lt;/code&gt; - &lt;code&gt;9&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;viminfo&lt;/td&gt;
&lt;td&gt;&lt;code&gt;0&lt;/code&gt; is the position when the viminfo file was written last. In practice this means when the last Vim process ended. &lt;code&gt;1&lt;/code&gt; is the position of when the second last Vim process ended and so on.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Put &lt;code&gt;'&lt;/code&gt;/&lt;code&gt;g'&lt;/code&gt; or &lt;code&gt;`&lt;/code&gt;/&lt;code&gt;g`&lt;/code&gt; in front of a mark to form a motion.&lt;/p&gt;
&lt;p&gt;Use &lt;code&gt;mm&lt;/code&gt; to remember the current position with mark "m". Move around the file
and then jump back via &lt;code&gt;'m&lt;/code&gt; (first non-blank) or &lt;code&gt;`m&lt;/code&gt; (exact column).
Lowercase marks will be remembered after exiting Vim, if you tell your viminfo
file to do so, see &lt;code&gt;:h viminfo-'&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Use &lt;code&gt;mM&lt;/code&gt; to remember the current position with file mark "M". Switch to another
buffer and switch back via &lt;code&gt;'M&lt;/code&gt; or &lt;code&gt;`M&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Other motions include:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Motion&lt;/th&gt;
&lt;th&gt;Jump to..&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;'[&lt;/code&gt;, &lt;code&gt;`[&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;First line or character of previously changed or yanked text.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;']&lt;/code&gt;, &lt;code&gt;`]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Last line or character of previously changed or yanked text.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;'&amp;lt;&lt;/code&gt;, &lt;code&gt;`&amp;lt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Beginning line or character of last visual selection.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;'&amp;gt;&lt;/code&gt;, &lt;code&gt;`&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Ending line or character of last visual selection.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;''&lt;/code&gt;, &lt;code&gt;``&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Position before the latest jump.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;'"&lt;/code&gt;, &lt;code&gt;`"&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Position when last exiting the current buffer.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;'^&lt;/code&gt;, &lt;code&gt;`^&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Position where last insertion stopped.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;'.&lt;/code&gt;, &lt;code&gt;`.&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Position where last change was made.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;'(&lt;/code&gt;, &lt;code&gt;`(&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Start of current sentence.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;')&lt;/code&gt;, &lt;code&gt;`)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;End of current sentence.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;'{&lt;/code&gt;, &lt;code&gt;`{&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Start of current paragraph.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;'}&lt;/code&gt;, &lt;code&gt;`}&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;End of current paragraph.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Marks can also be used in a &lt;a href="#ranges"&gt;range&lt;/a&gt;. You probably saw this before and
wondered what it means: Select some text in visual mode and do &lt;code&gt;:&lt;/code&gt;, the
command-line will be prepended with &lt;code&gt;:'&amp;lt;,'&amp;gt;&lt;/code&gt;, which means the following command
would get a range that denotes the visual selection.&lt;/p&gt;
&lt;p&gt;Use &lt;code&gt;:marks&lt;/code&gt; to list all marks. Read everything in &lt;code&gt;:h mark-motions&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-completion" class="anchor" aria-hidden="true" href="#completion"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Completion&lt;/h2&gt;
&lt;p&gt;Vim provides many kinds of insert mode completions. If there are multiple
matches, a popup menu will let you navigate to the match of your choice.&lt;/p&gt;
&lt;p&gt;Typical kinds of completion are tags, functions from imported modules or
libraries, file names, dictionary or simply words from the current buffer.&lt;/p&gt;
&lt;p&gt;Vim provides a mapping for each kind of completion and they all start with
&lt;code&gt;&amp;lt;c-x&amp;gt;&lt;/code&gt; (remember to use them in insert mode):&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Mapping&lt;/th&gt;
&lt;th&gt;Kind&lt;/th&gt;
&lt;th&gt;Help&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;c-x&amp;gt;&amp;lt;c-l&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;whole lines&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:h i^x^l&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;c-x&amp;gt;&amp;lt;c-n&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;keywords from current file&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:h i^x^n&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;c-x&amp;gt;&amp;lt;c-k&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;keywords from &lt;code&gt;'dictionary'&lt;/code&gt; option&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:h i^x^k&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;c-x&amp;gt;&amp;lt;c-t&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;keywords from &lt;code&gt;'thesaurus'&lt;/code&gt; option&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:h i^x^t&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;c-x&amp;gt;&amp;lt;c-i&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;keywords from current and included files&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:h i^x^i&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;c-x&amp;gt;&amp;lt;c-]&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;tags&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:h i^x^]&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;c-x&amp;gt;&amp;lt;c-f&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;file names&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:h i^x^f&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;c-x&amp;gt;&amp;lt;c-d&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;definitions or macros&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:h i^x^d&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;c-x&amp;gt;&amp;lt;c-v&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Vim commands&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:h i^x^v&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;c-x&amp;gt;&amp;lt;c-u&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;user defined (as specified in &lt;code&gt;'completefunc'&lt;/code&gt;)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:h i^x^u&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;c-x&amp;gt;&amp;lt;c-o&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;omni completion (as specified in &lt;code&gt;'omnifunc'&lt;/code&gt;)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:h i^x^o&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;c-x&amp;gt;s&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;spelling suggestions&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:h i^Xs&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;People might be confused about the difference between user defined completion
and omni completion, but technically they do the same thing. They take a
function that inspects the current position and return a list of suggestions.
User defined completion is defined by the user for their own personal purposes.
(Surprise!) It could be anything. Omni completion is meant for filetype-specific
purposes, like completing struct members or class methods, and is often set by
filetype plugins.&lt;/p&gt;
&lt;p&gt;Vim also allows for completing multiple kinds at once by setting the
&lt;code&gt;'complete'&lt;/code&gt; option. By default that option includes quite a lot, so be sure to
trim it to your taste. You can trigger this completion by using either &lt;code&gt;&amp;lt;c-n&amp;gt;&lt;/code&gt;
(next) and &lt;code&gt;&amp;lt;c-p&amp;gt;&lt;/code&gt; (previous), which also happen to be the keys used for
choosing entries in the popup menu. See &lt;code&gt;:h i^n&lt;/code&gt; and &lt;code&gt;:h 'complete'&lt;/code&gt; for more on
this.&lt;/p&gt;
&lt;p&gt;Be sure to check out &lt;code&gt;:h 'completeopt'&lt;/code&gt; for configuring the behaviour of the
popup menu. The default is quite sane, but I prefer adding "noselect" as well.&lt;/p&gt;
&lt;p&gt;Help:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:h ins-completion
:h popupmenu-keys
:h new-omni-completion
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;a id="user-content-motions-operators-text-objects" class="anchor" aria-hidden="true" href="#motions-operators-text-objects"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Motions, operators, text objects&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Motions&lt;/strong&gt; move the cursor. You all know &lt;code&gt;h&lt;/code&gt;/&lt;code&gt;j&lt;/code&gt;/&lt;code&gt;k&lt;/code&gt;/&lt;code&gt;l&lt;/code&gt;. Or &lt;code&gt;w&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt;. Even
&lt;code&gt;/&lt;/code&gt; is a motion. They also take a count. &lt;code&gt;2?the&amp;lt;cr&amp;gt;&lt;/code&gt; jumps to the second last
occurrence of "the".&lt;/p&gt;
&lt;p&gt;See &lt;code&gt;:h navigation&lt;/code&gt; and everything below for all available motions.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Operators&lt;/strong&gt; act on a region of text, e.g. &lt;code&gt;d&lt;/code&gt;, &lt;code&gt;~&lt;/code&gt;, &lt;code&gt;gU&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt; to name just a
few. They get used in two contexts, either in normal or visual mode. In normal
mode, operators come first followed by a motion, e.g. &lt;code&gt;&amp;gt;j&lt;/code&gt;. In visual mode,
operators simply act on the selection, e.g. &lt;code&gt;Vjd&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Like motions, operators take a count, e.g. &lt;code&gt;2gUw&lt;/code&gt; makes the rest of the current
word and the next one uppercase. Since motions and operators take counts,
&lt;code&gt;2gU2w&lt;/code&gt; works just as well and executes &lt;code&gt;gU2w&lt;/code&gt; twice.&lt;/p&gt;
&lt;p&gt;See &lt;code&gt;:h operator&lt;/code&gt; for all available operators. Use &lt;code&gt;:set tildeop&lt;/code&gt; to make &lt;code&gt;~&lt;/code&gt;
act as an operator.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Text objects&lt;/strong&gt; act on the surrounding area, opposed to motions that act into
one direction. Actually they work on objects, e.g. a whole word, a whole
sentence, everything between parentheses, and so on.&lt;/p&gt;
&lt;p&gt;Text objects can't be used to move the cursor in normal mode, because even the
most-skilled cursors can't jump into two directions at the same time. It works
in visual mode though, because then one side of the object is already selected
and the cursor simply jumps to the other side.&lt;/p&gt;
&lt;p&gt;Text objects start with either &lt;code&gt;i&lt;/code&gt; (think &lt;em&gt;inner&lt;/em&gt;) or &lt;code&gt;a&lt;/code&gt; (think &lt;em&gt;around&lt;/em&gt;)
followed by a character denoting the object. With &lt;code&gt;i&lt;/code&gt; it only acts on the object
itself, with &lt;code&gt;a&lt;/code&gt; on the object plus trailing whitespace. E.g. &lt;code&gt;diw&lt;/code&gt; deletes the
current word and &lt;code&gt;ci(&lt;/code&gt; changes everything between parentheses.&lt;/p&gt;
&lt;p&gt;Text objects take a count. Imagine &lt;code&gt;((( )))&lt;/code&gt; and the cursor on or between the
most inner parentheses, then &lt;code&gt;d2a(&lt;/code&gt; will remove the 2 inner pairs of parentheses
and everything in between.&lt;/p&gt;
&lt;p&gt;See &lt;code&gt;:h text-objects&lt;/code&gt; for all available text objects.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-autocmds" class="anchor" aria-hidden="true" href="#autocmds"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Autocmds&lt;/h2&gt;
&lt;p&gt;You can trigger an action after many events in Vim, such as a buffer being
saved or Vim having started up, by so-called &lt;em&gt;autocmds&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Vim relies extensively on autocmds. Don't believe me? Check &lt;code&gt;:au&lt;/code&gt;, but don't let
the output overwhelm you. These are all the autocmds that are in effect right
now!&lt;/p&gt;
&lt;p&gt;See &lt;code&gt;:h {event}&lt;/code&gt; for a quick overview of all available events and &lt;code&gt;:h autocmd-events-abc&lt;/code&gt; for more details.&lt;/p&gt;
&lt;p&gt;A typical example would be filetype-specific settings:&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;autocmd&lt;/span&gt; &lt;span class="pl-c1"&gt;FileType&lt;/span&gt; &lt;span class="pl-c1"&gt;ruby&lt;/span&gt; &lt;span class="pl-c1"&gt;setlocal&lt;/span&gt; &lt;span class="pl-c1"&gt;shiftwidth&lt;/span&gt;&lt;span class="pl-k"&gt;=&lt;/span&gt;&lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;softtabstop&lt;/span&gt;&lt;span class="pl-k"&gt;=&lt;/span&gt;&lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;comments&lt;/span&gt;&lt;span class="pl-k"&gt;-=&lt;/span&gt;:#&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But how does a buffer even know that it contains Ruby code? Because another
autocmd detected it as that and set the filetype accordingly which again
triggered the &lt;code&gt;FileType&lt;/code&gt; event.&lt;/p&gt;
&lt;p&gt;One of the first things everyone adds to their vimrc is &lt;code&gt;filetype on&lt;/code&gt;. This
simply means that &lt;code&gt;filetype.vim&lt;/code&gt; is read at startup which sets autocmds for
almost all filetypes under the sun.&lt;/p&gt;
&lt;p&gt;If you're brave enough, have a look at it: &lt;code&gt;:e $VIMRUNTIME/filetype.vim&lt;/code&gt;. Search
for "Ruby" and you'll find that Vim simply uses the file extension &lt;code&gt;.rb&lt;/code&gt; to
detect Ruby files:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: Autocmds of the same event are executed in the order they were
created. &lt;code&gt;:au&lt;/code&gt; shows them in the correct order.&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;au&lt;/span&gt; &lt;span class="pl-c1"&gt;BufNewFile&lt;/span&gt;,&lt;span class="pl-c1"&gt;BufRead&lt;/span&gt; &lt;span class="pl-k"&gt;*&lt;/span&gt;.rb,&lt;span class="pl-k"&gt;*&lt;/span&gt;.rbw  &lt;span class="pl-c1"&gt;setf&lt;/span&gt; &lt;span class="pl-c1"&gt;ruby&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;BufNewFile&lt;/code&gt; and &lt;code&gt;BufRead&lt;/code&gt; events in this case are hardcoded in the C
sources of Vim and get emitted everytime you open a file via &lt;code&gt;:e&lt;/code&gt; and similar
commands. Afterwards all the hundreds of filetypes from &lt;code&gt;filetype.vim&lt;/code&gt; are
tested for.&lt;/p&gt;
&lt;p&gt;Putting it in a nutshell, Vim makes heavy use of events and autocmds but also
exposes a clean interface to hook into that event-driven system for
customization.&lt;/p&gt;
&lt;p&gt;Help: &lt;code&gt;:h autocommand&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-changelist-jumplist" class="anchor" aria-hidden="true" href="#changelist-jumplist"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Changelist, jumplist&lt;/h2&gt;
&lt;p&gt;The positions of the last 100 changes are kept in the &lt;strong&gt;changelist&lt;/strong&gt;. Several
small changes on the same line will be merged together, but the position will be
that of the last change nevertheless (in case you added something in the middle
of the line).&lt;/p&gt;
&lt;p&gt;Every time you jump, the position &lt;em&gt;before&lt;/em&gt; the jump is remembered in the
&lt;strong&gt;jumplist&lt;/strong&gt;. A jumplist has up to 100 entries. Each window has its own
jumplist. When you split a window, the jumplist is copied.&lt;/p&gt;
&lt;p&gt;A jump is one of the following commands: &lt;code&gt;'&lt;/code&gt;, &lt;code&gt;`&lt;/code&gt;, &lt;code&gt;G&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;, &lt;code&gt;?&lt;/code&gt;, &lt;code&gt;n&lt;/code&gt;, &lt;code&gt;N&lt;/code&gt;,
&lt;code&gt;%&lt;/code&gt;, &lt;code&gt;(&lt;/code&gt;, &lt;code&gt;)&lt;/code&gt;, &lt;code&gt;[[&lt;/code&gt;, &lt;code&gt;]]&lt;/code&gt;, &lt;code&gt;{&lt;/code&gt;, &lt;code&gt;}&lt;/code&gt;, &lt;code&gt;:s&lt;/code&gt;, &lt;code&gt;:tag&lt;/code&gt;, &lt;code&gt;L&lt;/code&gt;, &lt;code&gt;M&lt;/code&gt;, &lt;code&gt;H&lt;/code&gt; and commands
that start editing a new file.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;List&lt;/th&gt;
&lt;th&gt;List all entries&lt;/th&gt;
&lt;th&gt;Go to older position&lt;/th&gt;
&lt;th&gt;Go to newer position&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;jumplist&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:jumps&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;[count]&amp;lt;c-o&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;[count]&amp;lt;c-i&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;changelist&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:changes&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;[count]g;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;[count]g,&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;When you list all entries, a marker &lt;code&gt;&amp;gt;&lt;/code&gt; will be used to show the current
position. Usually that will be below position 1, the latest position.&lt;/p&gt;
&lt;p&gt;If you want both lists to persist after restarting Vim, you need to use the
viminfo file and &lt;code&gt;:h viminfo-'&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: The position before the latest jump is also kept as a &lt;a href="#marks"&gt;mark&lt;/a&gt;
and can be jumped to via &lt;code&gt;``&lt;/code&gt; or &lt;code&gt;''&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Help:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:h changelist
:h jumplist
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;a id="user-content-undo-tree" class="anchor" aria-hidden="true" href="#undo-tree"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Undo tree&lt;/h2&gt;
&lt;p&gt;The latest changes to the text state are remembered. You can use &lt;em&gt;undo&lt;/em&gt; to
revert changes and &lt;em&gt;redo&lt;/em&gt; to reapply previously reverted changes.&lt;/p&gt;
&lt;p&gt;The important bit to understand it that the data structure holding recent
changes is not a
&lt;a href="https://en.wikipedia.org/wiki/Queue_(abstract_data_type)" rel="nofollow"&gt;queue&lt;/a&gt; but a
&lt;a href="https://en.wikipedia.org/wiki/Tree_(data_structure)" rel="nofollow"&gt;tree&lt;/a&gt;! Your changes are
nodes in the tree and each (but the top node) has a parent node. Each node keeps
information about the changed text and time. A branch is a series of nodes that
starts from any node and goes up to the top node. New branches get created when
you undo a change and then insert something else.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ifoo&amp;lt;esc&amp;gt;
obar&amp;lt;esc&amp;gt;
obaz&amp;lt;esc&amp;gt;
u
oquux&amp;lt;esc&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you have 3 lines and the undo tree looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;     foo(1)
       /
    bar(2)
   /      \
baz(3)   quux(4)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The undo tree has 4 changes. The numbers represent the &lt;em&gt;time&lt;/em&gt; the nodes were
created.&lt;/p&gt;
&lt;p&gt;Now there are two ways to traverse this tree, let's call them &lt;em&gt;branch-wise&lt;/em&gt; and
&lt;em&gt;time-wise&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Undo (&lt;code&gt;u&lt;/code&gt;) and redo (&lt;code&gt;&amp;lt;c-r&amp;gt;&lt;/code&gt;) work branch-wise. They go up and down the current
branch. &lt;code&gt;u&lt;/code&gt; will revert the text state to the one of node "bar". Another &lt;code&gt;u&lt;/code&gt;
will revert the text state even further, to the one of node "foo". Now &lt;code&gt;&amp;lt;c-r&amp;gt;&lt;/code&gt;
goes back to the state of node "bar" and another &lt;code&gt;&amp;lt;c-r&amp;gt;&lt;/code&gt; to the state of node
"quux". (There's no way to reach node "baz" using branch-wise commands anymore.)&lt;/p&gt;
&lt;p&gt;Opposed to this, &lt;code&gt;g-&lt;/code&gt; and &lt;code&gt;g+&lt;/code&gt; work time-wise. Thus, &lt;code&gt;g-&lt;/code&gt; won't revert to the
state of node "bar", like &lt;code&gt;u&lt;/code&gt; does, but to the chronologically previous state,
node "baz". Another &lt;code&gt;g-&lt;/code&gt; would revert the state to the one of node "bar" and so
on. Thus, &lt;code&gt;g-&lt;/code&gt; and &lt;code&gt;g+&lt;/code&gt; simply go back and forth in time, respectively.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Command / Mapping&lt;/th&gt;
&lt;th&gt;Action&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;[count]u&lt;/code&gt;, &lt;code&gt;:undo [count]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Undo [count] changes.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;[count]&amp;lt;c-r&amp;gt;&lt;/code&gt;, &lt;code&gt;:redo&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Redo [count] changes.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;U&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Undo all changes to the line of the latest change.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;[count]g-&lt;/code&gt;, &lt;code&gt;:earlier [count]?&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Go to older text state [count] times. The "?" can be either "s", "m", "h", "d", or "f". E.g. &lt;code&gt;:earlier 2d&lt;/code&gt; goes to the text state from 2 days ago. &lt;code&gt;:earlier 1f&lt;/code&gt; will go to the state of the latest file save.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;[count]g+&lt;/code&gt;, &lt;code&gt;:later [count]?&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Same as above, but other direction.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The undo tree is kept in memory and will be lost when Vim quits. See &lt;a href="#undo-files"&gt;Undo
files&lt;/a&gt; for how to enable persistent undo.&lt;/p&gt;
&lt;p&gt;If you're confused by the undo tree,
&lt;a href="https://github.com/mbbill/undotree"&gt;undotree&lt;/a&gt; does a great job at visualizing
it.&lt;/p&gt;
&lt;p&gt;Help:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:h undo.txt
:h usr_32
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;a id="user-content-quickfix-and-location-lists" class="anchor" aria-hidden="true" href="#quickfix-and-location-lists"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Quickfix and location lists&lt;/h2&gt;
&lt;p&gt;The quickfix list is a data structure that holds file positions. Essentially,
each entry in the quickfix list consists of a file path, a line number and
optional column, and a description.&lt;/p&gt;
&lt;p&gt;Typical use cases are assembling compiler errors or results of a grep tool.&lt;/p&gt;
&lt;p&gt;Vim has a special type of buffer for showing the quickfix list: the quickfix
buffer. Each line in the quickfix buffer shows one entry from the quickfix list.&lt;/p&gt;
&lt;p&gt;Usually you open a new window to display the quickfix list: the quickfix window.
When that happens, the last window gets associated with the quickfix window.&lt;/p&gt;
&lt;p&gt;In the quickfix buffer &lt;code&gt;&amp;lt;cr&amp;gt;&lt;/code&gt; opens the selected entry in the associated window
and &lt;code&gt;&amp;lt;c-w&amp;gt;&amp;lt;cr&amp;gt;&lt;/code&gt; in a new window.&lt;/p&gt;
&lt;p&gt;The quickfix list was named after the "quick fix" feature from the &lt;a href="https://en.wikipedia.org/wiki/Aztec_C" rel="nofollow"&gt;Aztec C
compiler&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Actually there are two kinds of lists: quickfix and location lists. They behave
almost the same, but have the follwing differences:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;There is only one quickfix list. There can be multiple location lists; one per
window.&lt;/li&gt;
&lt;li&gt;They use slightly different commands for navigation.&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Action&lt;/th&gt;
&lt;th&gt;Quickfix&lt;/th&gt;
&lt;th&gt;Location&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;open window&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:copen&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:lopen&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;close window&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:cclose&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:lclose&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;next entry&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:cnext&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:lnext&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;previous entry&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:cprevious&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:lprevious&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;first entry&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:cfirst&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:lfirst&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;last entry&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:clast&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:llast&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Mind that the quickfix and location windows don't need to be open for these
commands to work.&lt;/p&gt;
&lt;p&gt;See &lt;code&gt;:h quickfix&lt;/code&gt; for more information and a full list of commands.&lt;/p&gt;
&lt;p&gt;For conciseness, &lt;em&gt;quickfix&lt;/em&gt; and &lt;em&gt;location&lt;/em&gt; are often abbreviated as &lt;em&gt;qf&lt;/em&gt; and
&lt;em&gt;loc&lt;/em&gt; respectively.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;Let us use our good old friend &lt;code&gt;grep&lt;/code&gt; for searching the files in the current
directory recursively for a certain query and put the results in the quickfix
list.&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;:&lt;span class="pl-k"&gt;let&lt;/span&gt; &amp;amp;&lt;span class="pl-c1"&gt;grepprg&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;grep -Rn $* .&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;
:&lt;span class="pl-c1"&gt;grep&lt;/span&gt;&lt;span class="pl-k"&gt;!&lt;/span&gt; foo
&lt;span class="pl-c1"&gt;&amp;lt;grep output - hit enter&amp;gt;&lt;/span&gt;
:&lt;span class="pl-c1"&gt;copen&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Assuming any files contained the string "foo", it should be shown now in the
quickfix window.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-macros" class="anchor" aria-hidden="true" href="#macros"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Macros&lt;/h2&gt;
&lt;p&gt;Vim allows &lt;em&gt;recording&lt;/em&gt; typed characters into a &lt;a href="#registers"&gt;register&lt;/a&gt;. It's a
great way to automate certain tasks on the fly. (For more elaborate tasks, Vim
scripting should be used instead.)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Start recording by typing &lt;code&gt;q&lt;/code&gt; followed by the register, e.g. &lt;code&gt;q&lt;/code&gt;. (The
command-line will signify this via "recording @q".)&lt;/li&gt;
&lt;li&gt;Stop recording by hitting &lt;code&gt;q&lt;/code&gt; once again.&lt;/li&gt;
&lt;li&gt;Execute the macro via &lt;code&gt;[count]@q&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Repeat the last used macro via &lt;code&gt;[count]@@&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Insert a line and repeat it 10 times:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;qq
iabc&amp;lt;cr&amp;gt;&amp;lt;esc&amp;gt;
q
10@q
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(The same could be done without macros: &lt;code&gt;oabc&amp;lt;esc&amp;gt;10.&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;For adding line numbers in front of all lines, start on the first line and add
"1. " to it manually. Increment the number under the cursor by using &lt;code&gt;&amp;lt;c-a&amp;gt;&lt;/code&gt;,
displayed as &lt;code&gt;^A&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;qq
0yf jP0^A
q
1000@q
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here we simply hope that the file doesn't contain more than 1000 lines when
using &lt;code&gt;1000@q&lt;/code&gt;, but we can also use a &lt;em&gt;recursive macro&lt;/em&gt;, which executes until
the macro can't be applied to a line anymore:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;qq
0yf jP0^A@q
q
@q
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(The same could be done without macros: &lt;code&gt;:%s/^/\=line('.') . '. '&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;Mind that I also show how to achieve the same without using macros, but this
mostly works only for such simple examples. For more complex automation, macros
are the bomb!&lt;/p&gt;
&lt;p&gt;Also see: &lt;a href="#quickly-edit-your-macros"&gt;Quickly edit your macros&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Help:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:h recording
:h 'lazyredraw'
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;a id="user-content-colorschemes" class="anchor" aria-hidden="true" href="#colorschemes"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Colorschemes&lt;/h2&gt;
&lt;p&gt;Colorschemes are the way to style your Vim. Vim consists of many components and
each of those can be customized with different colors for the foreground,
background and a few other attributes like bold text etc. They can be set like
this:&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;:&lt;span class="pl-c1"&gt;highlight&lt;/span&gt; &lt;span class="pl-c1"&gt;Normal&lt;/span&gt; ctermbg&lt;span class="pl-k"&gt;=&lt;/span&gt;&lt;span class="pl-c1"&gt;1&lt;/span&gt; guibg&lt;span class="pl-k"&gt;=&lt;/span&gt;&lt;span class="pl-c1"&gt;red&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This would paint the background of the editor red. See &lt;code&gt;:h :highlight&lt;/code&gt; for more
information.&lt;/p&gt;
&lt;p&gt;So, colorschemes are mostly collections of &lt;code&gt;:highlight&lt;/code&gt; commands.&lt;/p&gt;
&lt;p&gt;Actually, most colorschemes are really 2 colorschemes! The example above sets
colors via &lt;code&gt;ctermbg&lt;/code&gt; and &lt;code&gt;guibg&lt;/code&gt;. The former definition (&lt;code&gt;cterm*&lt;/code&gt;) will only be
used if Vim was started in a terminal emulator, e.g. xterm. The latter (&lt;code&gt;gui*&lt;/code&gt;)
will be used in graphical environments like gvim or MacVim.&lt;/p&gt;
&lt;p&gt;If you ever happen to use a colorscheme in terminal Vim and the colors don't
look like the ones in the screenshot at all, chances are that the colorscheme
only defines colors for the GUI. Conversely, if you use a graphical Vim (e.g.
gvim or MacVim) and the colors look off, the colorscheme might only define
colors for the terminal.&lt;/p&gt;
&lt;p&gt;The latter case can be "solved" by enabling true colors in Neovim or Vim
7.4.1830 and newer. This makes terminal Vim use the GUI definitions instead, but
also requires the terminal emulator itself and all software in between (e.g.
tmux) to be capable of handling true colors. (&lt;a href="https://gist.github.com/XVilka/8346728"&gt;This
gist&lt;/a&gt; gives a good overview about the
topic.)&lt;/p&gt;
&lt;p&gt;Help:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:h 'termguicolors'&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="PLUGINS.md#colorschemes-1"&gt;List of colorschemes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cosmetic-changes-to-colorschemes"&gt;Cosmetic changes to colorschemes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-folding" class="anchor" aria-hidden="true" href="#folding"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Folding&lt;/h2&gt;
&lt;p&gt;Every text (or source code) has a certain structure. If you have a structure, it
means you have regions of logically separated text. Folding allows to "fold"
such a region into a single line and displaying a short description. There are
many commands that act on these regions called &lt;em&gt;folds&lt;/em&gt;. Folds can be nested.&lt;/p&gt;
&lt;p&gt;Vim distinguishes between several types of fold methods:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;'foldmethod'&lt;/th&gt;
&lt;th&gt;Usage&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;diff&lt;/td&gt;
&lt;td&gt;Used in diff windows to fold unchanged text.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;expr&lt;/td&gt;
&lt;td&gt;Uses &lt;code&gt;'foldexpr'&lt;/code&gt; to basically create a new fold method.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;indent&lt;/td&gt;
&lt;td&gt;Folds based on indentation.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;manual&lt;/td&gt;
&lt;td&gt;Create folds yourself via &lt;code&gt;zf&lt;/code&gt;, &lt;code&gt;zF&lt;/code&gt;, and &lt;code&gt;:fold&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;marker&lt;/td&gt;
&lt;td&gt;Folds based on markers in the text (often in comments).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;syntax&lt;/td&gt;
&lt;td&gt;Folds based on syntax, e.g. folding &lt;code&gt;if&lt;/code&gt; blocks.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: Folding can be computationally intensive! If you experience any
performance drawbacks (small delays when typing), have a look at
&lt;a href="https://github.com/Konfekt/FastFold"&gt;FastFold&lt;/a&gt;, which prevents Vim from
updating folds when it's not needed.&lt;/p&gt;
&lt;p&gt;Help:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:h usr_28
:h folds
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;a id="user-content-sessions" class="anchor" aria-hidden="true" href="#sessions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Sessions&lt;/h2&gt;
&lt;p&gt;If you save a &lt;strong&gt;view&lt;/strong&gt; (&lt;code&gt;:h :mkview&lt;/code&gt;), the current state of the window (and
options and mappings) gets saved for later use (&lt;code&gt;:h :loadview&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;A &lt;strong&gt;session&lt;/strong&gt; saves the views of all windows plus global settings. It basically
makes a snapshot of your current Vim instance and saves it in a session file.
Let me stress this: it saves the current state; everything done after saving a
session won't be part of the session file. To "update" a session, simply write
it out again.&lt;/p&gt;
&lt;p&gt;This makes it perfect for saving your &lt;em&gt;projects&lt;/em&gt; and easy to switch between
them.&lt;/p&gt;
&lt;p&gt;Try it right now! Open a few windows and tabs and do &lt;code&gt;:mksession Foo.vim&lt;/code&gt;. If
you omit the filename, &lt;code&gt;Session.vim&lt;/code&gt; will be assumed. The file will be saved to
the current working directory, check &lt;code&gt;:pwd&lt;/code&gt;. Restart Vim and do &lt;code&gt;:source Foo.vim&lt;/code&gt; and voilà, the buffer list, window layout, mappings, working directory
etc. should all be the same as before you saved the session. Do some more work
and update the session by overwriting the already existing session file with
&lt;code&gt;:mksession! Foo.vim&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Note that a session file is really just a collection of Vim commands that are
supposed to restore a certain state of a Vim instance, so feel free to take a
look at it: &lt;code&gt;:vs Foo.vim&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can tell Vim what things to save in a session by setting &lt;code&gt;'sessionoptions'&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For scripting purposes Vim keeps the name of the last sourced or written session
in the internal variable &lt;code&gt;v:this_session&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Help:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:h Session
:h 'sessionoptions'
:h v:this_session
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;a id="user-content-locality" class="anchor" aria-hidden="true" href="#locality"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Locality&lt;/h2&gt;
&lt;p&gt;Many of the concepts mentioned above also have &lt;em&gt;local&lt;/em&gt; counterparts:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Global&lt;/th&gt;
&lt;th&gt;Local&lt;/th&gt;
&lt;th&gt;Scope&lt;/th&gt;
&lt;th&gt;Help&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;:set&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:setlocal&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;buffer or window&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:h local-options&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;:map&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:map &amp;lt;buffer&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;buffer&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:h :map-local&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;:autocmd&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:autocmd * &amp;lt;buffer&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;buffer&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:h autocmd-buflocal&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;:cd&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:lcd&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;window&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:h :lcd&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;leader&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;localleader&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;buffer&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:h maplocalleader&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;a href="https://vimhelp.appspot.com/usr_41.txt.html#41.2" rel="nofollow"&gt;Variables also have different scopes&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-usage-1" class="anchor" aria-hidden="true" href="#usage-1"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Usage&lt;/h1&gt;
&lt;h2&gt;&lt;a id="user-content-getting-help-offline" class="anchor" aria-hidden="true" href="#getting-help-offline"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Getting help offline&lt;/h2&gt;
&lt;p&gt;Vim comes with great documentation in the form of single text files with a
special layout. Vim uses a system based on tags for accessing certain parts of
those help files.&lt;/p&gt;
&lt;p&gt;First of all, read this: &lt;code&gt;:help :help&lt;/code&gt;. This will open the file
&lt;code&gt;$VIMRUNTIME/doc/helphelp.txt&lt;/code&gt; in a new window and jump to the &lt;code&gt;:help&lt;/code&gt; tag
within that file.&lt;/p&gt;
&lt;p&gt;A few simple rules:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;options are enclosed in single quotes, e.g. &lt;code&gt;:h 'textwidth'&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;VimL functions end in &lt;code&gt;()&lt;/code&gt;, e.g. &lt;code&gt;:h reverse()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;commands start with &lt;code&gt;:&lt;/code&gt;, e.g. &lt;code&gt;:h :echo&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can use &lt;code&gt;&amp;lt;c-d&amp;gt;&lt;/code&gt; (this is &lt;kbd&gt;ctrl&lt;/kbd&gt;+&lt;kbd&gt;d&lt;/kbd&gt;) to list all tags that
match the currently entered query. E.g. &lt;code&gt;:h tab&amp;lt;c-d&amp;gt;&lt;/code&gt; will get you a list of all
tags from &lt;code&gt;tab&lt;/code&gt; over &lt;code&gt;'softtabstop'&lt;/code&gt; to &lt;code&gt;setting-guitablabel&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You want to list all VimL functions? Simple: &lt;code&gt;:h ()&amp;lt;c-d&amp;gt;&lt;/code&gt;. You want to list all
VimL functions that concern windows? &lt;code&gt;:h win*()&amp;lt;c-d&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This quickly becomes second nature, but especially in the beginning, you
sometimes don't know any part of the tag you are looking for. You can only
imagine some keywords that could be involved. &lt;code&gt;:helpgrep&lt;/code&gt; to the rescue!&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:helpgrep backwards
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will look for "backwards" in all documentation files and jump to the first
match. The matches will be assembled in the quickfix list. Use &lt;code&gt;:cn&lt;/code&gt;/&lt;code&gt;:cp&lt;/code&gt; to
jump to the next/previous match. Or use &lt;code&gt;:copen&lt;/code&gt; to open the quickfix window,
navigate to an entry and hit &lt;code&gt;&amp;lt;cr&amp;gt;&lt;/code&gt; to jump to that match. See &lt;code&gt;:h quickfix&lt;/code&gt; for
the whole truth.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-getting-help-offline-alternative" class="anchor" aria-hidden="true" href="#getting-help-offline-alternative"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Getting help offline (alternative)&lt;/h2&gt;
&lt;p&gt;This list was compiled by @chrisbra, one of the most active Vim developers, and
posted to &lt;a href="https://groups.google.com/forum/#!forum/vim_dev" rel="nofollow"&gt;vim_dev&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It's reposted here with minor changes.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;If you know what you are looking for, it is usually easier to search for it
using the help system, because the subjects follow a certain style guide.&lt;/p&gt;
&lt;p&gt;Also, the help has the advantage of belonging to your particular Vim version, so
that obsolete topics or topics that have been added later won't turn up.&lt;/p&gt;
&lt;p&gt;Therefore, it is essential to learn the help system and the language it uses.
Here are some examples (not necessarily complete and I might have forgotten
something).&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Options are enclosed in single quotes. So you would use &lt;code&gt;:h 'list'&lt;/code&gt; to go to
the help topic for the list option. If you only know, you are looking for a
certain option, you can also do &lt;code&gt;:h options.txt&lt;/code&gt; to open the help page which
describes all option handling and then you can search using regular
expressions e.g. &lt;code&gt;/width&lt;/code&gt;. Certain options have their own namespace, e.g. &lt;code&gt;:h cpo-a&lt;/code&gt;, &lt;code&gt;:h cpo-A&lt;/code&gt;, &lt;code&gt;:h cpo-b&lt;/code&gt;, and so on.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Normal mode commands are just that. Use &lt;code&gt;:h gt&lt;/code&gt; to go to the help page for
the "gt" command.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Regexp items always start with "/", so &lt;code&gt;:h /\+&lt;/code&gt; takes you to the help item
for the "+" quantifier in Vim regexes. If you need to know anything about
regular expressions, start reading at &lt;code&gt;:h pattern.txt&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Key combinations. They usually start with a single letter indicating the mode
for which they can be used. E.g. &lt;code&gt;:h i_CTRL-X&lt;/code&gt; takes you to the family of
CTRL-X commands for insert mode which can be used to auto complete different
things. Note that certain keys will always be written the same, e.g. Control
will always be CTRL. Note, for normal mode commands, the "n" is left away,
e.g. &lt;code&gt;:h CTRL-A&lt;/code&gt;. In contrast, &lt;code&gt;:h c_CTRL-R&lt;/code&gt; will describe what CTRL-R does
when entering commands in the command line and &lt;code&gt;:h v_Ctrl-A&lt;/code&gt; talks about
incrementing numbers in visual mode and &lt;code&gt;:h g_CTRL-A&lt;/code&gt; talks about the g
command (thus you have to press "g" then ). Here the "g" stand for
the normal command "g" which always expect a second key before doing
something similar to the commands starting with "z".&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Registers always start with "quote" so use &lt;code&gt;:h quote&lt;/code&gt; to find out about the
special ":" register.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Vim script (VimL) is available at &lt;code&gt;:h eval.txt&lt;/code&gt;. Certain aspects of the
language are available at &lt;code&gt;:h expr-X&lt;/code&gt; where 'X' is a single letter, e.g. &lt;code&gt;:h expr-!&lt;/code&gt; will take you to the topic describing the '!' (Not) operator for
VimL. Also important, see &lt;code&gt;:h function-list&lt;/code&gt; to find a short description of
all functions available.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mappings are talked about in the help page &lt;code&gt;:h map.txt&lt;/code&gt;. Use &lt;code&gt;:h mapmode-i&lt;/code&gt;
to find out about the &lt;code&gt;:imap&lt;/code&gt; command. Also use &lt;code&gt;:map-topic&lt;/code&gt; to find out
about certain subtopics particular for mappings (e.g. &lt;code&gt;:h :map-local&lt;/code&gt; for
buffer-local mappings or &lt;code&gt;:h map_bar&lt;/code&gt; for how the '|' is handled in mappings.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Command definitions are talked about at &lt;code&gt;:h command-*&lt;/code&gt;, so use :h command-bar
to find out about the '!' argument for custom commands.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Window management commands always start with CTRL-W, so you find the
corresponding help at &lt;code&gt;:h CTRL-W_*&lt;/code&gt; (e.g. &lt;code&gt;:h CTRL-W_p&lt;/code&gt; for switch to the
previously accessed window). You can also access &lt;code&gt;:h windows.txt&lt;/code&gt; and read
your way through, if you are looking for window handling command.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ex commands always start with ":", so &lt;code&gt;:h :s&lt;/code&gt; covers the ":s" command.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use CTRL-D after typing a topic and let Vim try to complete to all available
topics.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use &lt;code&gt;:helpgrep&lt;/code&gt; to search in all help pages (usually also includes help
pages by installed plugins). See &lt;code&gt;:h :helpgrep&lt;/code&gt; for how to use it. Once you
have searched for a topic, all matches are available in the quickfix (or
location) window which can be opened with &lt;code&gt;:copen&lt;/code&gt; or &lt;code&gt;:lopen&lt;/code&gt;. There you
can also use &lt;code&gt;/&lt;/code&gt; to further filter the matches.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;:h helphelp&lt;/code&gt; contains some information on how to use the help.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The user manual. This describes help topics for beginners in a rather
friendly way. Start at &lt;code&gt;:h usr_toc.txt&lt;/code&gt; to find the table of content (as you
might have guessed). Skimming over that help to find certain topics, .e.g
you will find an entry "Digraphs" and "Entering special characters" in
chapter 24 (so use &lt;code&gt;:h usr_24.txt&lt;/code&gt; to go to that particular help page).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Highlighting groups always start with &lt;code&gt;hl-*&lt;/code&gt;. E.g. &lt;code&gt;:h hl-WarningMsg&lt;/code&gt; talks
about the "WarningMsg" highlighting group.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Syntax highlighting is namespaced to ":syn-topic", e.g. &lt;code&gt;:h :syn-conceal&lt;/code&gt;
talks about the conceal argument for the :syn command.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Quickfix commands usually start with ":c", while location list commands
usually start with ":l".&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;:h BufWinLeave&lt;/code&gt; talks about the BufWinLeave autocmd. Also, &lt;code&gt;:h autocommands-events&lt;/code&gt; talks about all possible events.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Startup arguments always start with "-", so &lt;code&gt;:h -f&lt;/code&gt; takes you to the help of
the "-f" command switch of Vim.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Compiled extra features always start with "+", so &lt;code&gt;:h +conceal&lt;/code&gt; talks about
the conceal support.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Error codes can be looked up directly in the help. &lt;code&gt;:h E297&lt;/code&gt; takes you
exactly to the description of the error message. Sometimes however, those
error codes are not described, but rather are listed at the Vim command that
usually causes this. E.g. &lt;code&gt;:h hE128&lt;/code&gt; takes you directly to the &lt;code&gt;:function&lt;/code&gt;
command.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Documentation for included syntax files is usually available at &lt;code&gt;:h ft-*-syntax&lt;/code&gt;. E.g. &lt;code&gt;:h ft-c-syntax&lt;/code&gt; talks about the C syntax file and the
options it provides. Sometimes, additional sections for omni completion (&lt;code&gt;:h ft-php-omni&lt;/code&gt;) or filetype plugins (&lt;code&gt;:h ft-tex-plugin&lt;/code&gt;) are available.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Also, a link to the user documentation (which describes certain commands more
from a user perspective and less detailed) will be mentioned at the top of help
pages if they are available. So &lt;code&gt;:h pattern.txt&lt;/code&gt; mentions the user guide topics
&lt;code&gt;:h 03.9&lt;/code&gt; and &lt;code&gt;:h usr_27&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-getting-help-online" class="anchor" aria-hidden="true" href="#getting-help-online"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Getting help online&lt;/h2&gt;
&lt;p&gt;If you have an issue you can't resolve or are in need of general guidance, see
the &lt;a href="https://groups.google.com/forum/#!forum/vim_use" rel="nofollow"&gt;vim_use&lt;/a&gt; mailing list.
Another great resource is using
&lt;a href="https://de.wikipedia.org/wiki/Internet_Relay_Chat" rel="nofollow"&gt;IRC&lt;/a&gt;. The channel &lt;code&gt;#vim&lt;/code&gt; on
&lt;a href="https://freenode.net" rel="nofollow"&gt;Freenode&lt;/a&gt; is huge and usually full of helpful people.&lt;/p&gt;
&lt;p&gt;If you want to report a Vim bug, use the
&lt;a href="https://groups.google.com/forum/#!forum/vim_dev" rel="nofollow"&gt;vim_dev&lt;/a&gt; mailing list.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-autocmds-in-practice" class="anchor" aria-hidden="true" href="#autocmds-in-practice"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Autocmds in practice&lt;/h2&gt;
&lt;p&gt;You can trigger any event right now: &lt;code&gt;:doautocmd BufRead&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-user-events" class="anchor" aria-hidden="true" href="#user-events"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;User events&lt;/h3&gt;
&lt;p&gt;Especially for plugins it's useful to create your own "User" events:&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;function&lt;/span&gt;&lt;span class="pl-k"&gt;!&lt;/span&gt; &lt;span class="pl-en"&gt;Chibby&lt;/span&gt;()
&lt;span class="pl-c"&gt;  &lt;span class="pl-c"&gt;"&lt;/span&gt; A lot of stuff is happening here.&lt;/span&gt;
&lt;span class="pl-c"&gt;  &lt;span class="pl-c"&gt;"&lt;/span&gt; And at last..&lt;/span&gt;
  doautocmd &lt;span class="pl-c1"&gt;User&lt;/span&gt; ChibbyExit
&lt;span class="pl-k"&gt;endfunction&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now users of your plugin can execute anything when Chibby finishes running:&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;autocmd&lt;/span&gt; &lt;span class="pl-c1"&gt;User&lt;/span&gt; ChibbyExit &lt;span class="pl-c1"&gt;call&lt;/span&gt; &lt;span class="pl-en"&gt;ChibbyCleanup&lt;/span&gt;()&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;By the way, if there's no "catching" :autocmd, :doautocmd will output a pesky
"No matching autocommands" message. That's why many plugins use &lt;code&gt;silent doautocmd ...&lt;/code&gt; instead. But this has the disadvantage, that you can't simply use
&lt;code&gt;echo "foo"&lt;/code&gt; in the :autocmd, you have to use &lt;code&gt;unsilent echo "foo"&lt;/code&gt; instead..&lt;/p&gt;
&lt;p&gt;That's why it's better to check if there even is a receiving autocmd and not
bothering emitting the event otherwise:&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;if&lt;/span&gt; &lt;span class="pl-en"&gt;exists&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;#User#ChibbyExit&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;)
  doautocmd &lt;span class="pl-c1"&gt;User&lt;/span&gt; ChibbyExit
&lt;span class="pl-k"&gt;endif&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Help: &lt;code&gt;:h User&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-nested-autocmds" class="anchor" aria-hidden="true" href="#nested-autocmds"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Nested autocmds&lt;/h3&gt;
&lt;p&gt;By default, autocmds do not nest! If an autocmd executes a command, which in
turn would usually trigger another event, it won't happen.&lt;/p&gt;
&lt;p&gt;Let's say every time you start Vim, you want to automatically open your vimrc:&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;autocmd&lt;/span&gt; &lt;span class="pl-c1"&gt;VimEnter&lt;/span&gt; &lt;span class="pl-k"&gt;*&lt;/span&gt; &lt;span class="pl-c1"&gt;edit&lt;/span&gt; &lt;span class="pl-c1"&gt;$MYVIMRC&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When you now start Vim, it will open your vimrc, but the first thing you'll
notice is that there won't be any highlighting although usually there would be.&lt;/p&gt;
&lt;p&gt;The problem is that &lt;code&gt;:edit&lt;/code&gt; in your non-nested autocmd won't trigger the
"BufRead" event, so the filetype never gets set to "vim" and
&lt;code&gt;$VIMRUNTIME/syntax/vim.vim&lt;/code&gt; never sourced. See &lt;code&gt;:au BufRead *.vim&lt;/code&gt;. Use this
instead:&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;autocmd&lt;/span&gt; &lt;span class="pl-c1"&gt;VimEnter&lt;/span&gt; &lt;span class="pl-k"&gt;*&lt;/span&gt; nested &lt;span class="pl-c1"&gt;edit&lt;/span&gt; &lt;span class="pl-c1"&gt;$MYVIMRC&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Help: &lt;code&gt;:h autocmd-nested&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-clipboard" class="anchor" aria-hidden="true" href="#clipboard"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Clipboard&lt;/h2&gt;
&lt;p&gt;Required &lt;a href="#what-kind-of-vim-am-i-running"&gt;features&lt;/a&gt;: &lt;code&gt;+clipboard&lt;/code&gt; and optionally
&lt;code&gt;+xterm_clipboard&lt;/code&gt; if you want to use the &lt;code&gt;'clipboard'&lt;/code&gt; option on a Unix system
with a Vim that doesn't have GUI support.&lt;/p&gt;
&lt;p&gt;Help:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:h 'clipboard'
:h gui-clipboard
:h gui-selections
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Also see: &lt;a href="#bracketed-paste-or-why-do-i-have-to-set-paste-all-the-time"&gt;Bracketed paste (or why do I have to set 'paste' all the
time?)&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-clipboard-usage-windows-macos" class="anchor" aria-hidden="true" href="#clipboard-usage-windows-macos"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Clipboard usage (Windows, macOS)&lt;/h3&gt;
&lt;p&gt;Windows comes with a
&lt;a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms649012(v=vs.85).aspx" rel="nofollow"&gt;clipboard&lt;/a&gt;
and macOS comes with a
&lt;a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/PasteboardGuide106/Introduction/Introduction.html#//apple_ref/doc/uid/TP40008100-SW1" rel="nofollow"&gt;pasteboard&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Both work like most users would expect them to work. You copy selected text with
&lt;code&gt;ctrl+c&lt;/code&gt;/&lt;code&gt;cmd+c&lt;/code&gt; and paste them in another application with &lt;code&gt;ctrl+v&lt;/code&gt;/&lt;code&gt;cmd+v&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Note that copied text is actually transferred to the clipboard, so you can close
the application you copied from before pasting in another application without
problems.&lt;/p&gt;
&lt;p&gt;Whenever this happens, the clipboard register &lt;code&gt;*&lt;/code&gt; gets filled with the
selection. From Vim use &lt;code&gt;"*y&lt;/code&gt; and &lt;code&gt;"*p&lt;/code&gt; to yank and paste from the clipboard
respectively.&lt;/p&gt;
&lt;p&gt;If you don't even want to specify the &lt;code&gt;*&lt;/code&gt; register all the time, put this in
your vimrc:&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;set&lt;/span&gt; &lt;span class="pl-c1"&gt;clipboard&lt;/span&gt;&lt;span class="pl-k"&gt;=&lt;/span&gt;unnamed&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Usually all yank/delete/put operations fill the &lt;code&gt;"&lt;/code&gt; register, now the &lt;code&gt;*&lt;/code&gt;
register is used for the same operations, therefore simply &lt;code&gt;y&lt;/code&gt; and &lt;code&gt;p&lt;/code&gt; will be
enough.&lt;/p&gt;
&lt;p&gt;Let me repeat: Using the option above means that every yank/paste, even when
only used in the same Vim window, will alter the clipboard. Decide for yourself
if this is useful or not.&lt;/p&gt;
&lt;p&gt;If you're even too lazy to type &lt;code&gt;y&lt;/code&gt;, you can send every visual selection to the
clipboard by using these settings:&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;set&lt;/span&gt; &lt;span class="pl-c1"&gt;clipboard&lt;/span&gt;&lt;span class="pl-k"&gt;=&lt;/span&gt;unnamed,autoselect
&lt;span class="pl-c1"&gt;set&lt;/span&gt; &lt;span class="pl-c1"&gt;guioptions&lt;/span&gt;&lt;span class="pl-k"&gt;+=&lt;/span&gt;&lt;span class="pl-c1"&gt;a&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Help:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:h clipboard-unnamed
:h autoselect
:h 'go_a'
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-clipboard-usage-linux-bsd-" class="anchor" aria-hidden="true" href="#clipboard-usage-linux-bsd-"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Clipboard usage (Linux, BSD, ...)&lt;/h3&gt;
&lt;p&gt;If your OS uses &lt;a href="http://www.x.org/wiki" rel="nofollow"&gt;X&lt;/a&gt;, things work a bit different. X
implements the &lt;a href="http://www.x.org/releases/X11R7.7/doc/xproto/x11protocol.html" rel="nofollow"&gt;X Window System
Protocol&lt;/a&gt; which
happens to be at major version 11 since 1987, hence X is also often called X11.&lt;/p&gt;
&lt;p&gt;Prior, in X10, &lt;a href="http://www.x.org/releases/X11R7.7/doc/xorg-docs/icccm/icccm.html#Peer_to_Peer_Communication_by_Means_of_Cut_Buffers" rel="nofollow"&gt;cut
buffers&lt;/a&gt;
were introduced that kind of worked like a &lt;em&gt;clipboard&lt;/em&gt; as in copied text was
actually held by X and it was accessible by all other applications. This
mechanism still exists in X, but its use is deprecated now and most software
doesn't use it anymore.&lt;/p&gt;
&lt;p&gt;Nowadays data is transferred between applications by the means of
&lt;a href="http://www.x.org/releases/X11R7.7/doc/xorg-docs/icccm/icccm.html#Peer_to_Peer_Communication_by_Means_of_Selections" rel="nofollow"&gt;selections&lt;/a&gt;.
From the 3 &lt;em&gt;selection atoms&lt;/em&gt; defined, only 2 are used in practice: PRIMARY and
CLIPBOARD.&lt;/p&gt;
&lt;p&gt;Selections work roughly like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Program A: &amp;lt;ctrl+c&amp;gt;
Program A: assert ownership of CLIPBOARD
Program B: &amp;lt;ctrl+v&amp;gt;
Program B: note that ownership of CLIPBOARD is hold by Program A
Program B: request data from Program A
Program A: respond to request and send data to Program B
Program B: receives data from Program A and inserts it into the window
&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Selection&lt;/th&gt;
&lt;th&gt;When used?&lt;/th&gt;
&lt;th&gt;How to paste?&lt;/th&gt;
&lt;th&gt;How to access from Vim?&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;PRIMARY&lt;/td&gt;
&lt;td&gt;Selecting text&lt;/td&gt;
&lt;td&gt;&lt;code&gt;middle-click&lt;/code&gt;, &lt;code&gt;shift+insert&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;*&lt;/code&gt; register&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CLIPBOARD&lt;/td&gt;
&lt;td&gt;Selecting text and &lt;code&gt;ctrl+c&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ctrl+v&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;+&lt;/code&gt; register&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: Selections (no, not even the CLIPBOARD selection) are never kept in
the X server! Thus, you lose the data copied with &lt;code&gt;ctrl+c&lt;/code&gt; when the application
closes.&lt;/p&gt;
&lt;p&gt;Use &lt;code&gt;"*p&lt;/code&gt; to paste the PRIMARY selection or &lt;code&gt;"+y1G&lt;/code&gt; to yank the entire file to
the CLIPBOARD selection.&lt;/p&gt;
&lt;p&gt;If you happen to access one of the two registers all the time, consider using:&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;set&lt;/span&gt; &lt;span class="pl-c1"&gt;clipboard&lt;/span&gt;^&lt;span class="pl-k"&gt;=&lt;/span&gt;unnamed&lt;span class="pl-c"&gt;      &lt;span class="pl-c"&gt;"&lt;/span&gt; * register&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;"&lt;/span&gt; or&lt;/span&gt;
&lt;span class="pl-c1"&gt;set&lt;/span&gt; &lt;span class="pl-c1"&gt;clipboard&lt;/span&gt;^&lt;span class="pl-k"&gt;=&lt;/span&gt;unnamedplus&lt;span class="pl-c"&gt;  &lt;span class="pl-c"&gt;"&lt;/span&gt; + register&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(The &lt;code&gt;^=&lt;/code&gt; is used to prepend to the default value, &lt;code&gt;:h :set^=&lt;/code&gt;.)&lt;/p&gt;
&lt;p&gt;This will make all yank/delete/put operations use either &lt;code&gt;*&lt;/code&gt; or &lt;code&gt;+&lt;/code&gt; instead of
the unnamed register &lt;code&gt;"&lt;/code&gt;. Afterwards you can simply use &lt;code&gt;y&lt;/code&gt; or &lt;code&gt;p&lt;/code&gt; for accessing
your chosen X selection.&lt;/p&gt;
&lt;p&gt;Help:&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;:&lt;span class="pl-c1"&gt;h&lt;/span&gt; &lt;span class="pl-c1"&gt;clipboard&lt;/span&gt;&lt;span class="pl-k"&gt;-&lt;/span&gt;unnamed
:&lt;span class="pl-c1"&gt;h&lt;/span&gt; &lt;span class="pl-c1"&gt;clipboard&lt;/span&gt;&lt;span class="pl-k"&gt;-&lt;/span&gt;unnamedplus&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-restore-cursor-position-when-opening-file" class="anchor" aria-hidden="true" href="#restore-cursor-position-when-opening-file"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Restore cursor position when opening file&lt;/h2&gt;
&lt;p&gt;When you open a file, the cursor will be positioned at line 1, column 1.
Fortunately the viminfo file remembers &lt;a href="#marks"&gt;marks&lt;/a&gt;. The &lt;code&gt;"&lt;/code&gt; mark contains
the position in the buffer where you left off.&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;autocmd&lt;/span&gt; &lt;span class="pl-c1"&gt;BufReadPost&lt;/span&gt; &lt;span class="pl-k"&gt;*&lt;/span&gt;
    &lt;span class="pl-cce"&gt;\ &lt;/span&gt;&lt;span class="pl-k"&gt;if&lt;/span&gt; &lt;span class="pl-en"&gt;line&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;'&lt;span class="pl-cce"&gt;\"&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;span class="pl-k"&gt; &amp;gt; &lt;/span&gt;&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-k"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="pl-en"&gt;line&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;'&lt;span class="pl-cce"&gt;\"&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-k"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="pl-en"&gt;line&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;$&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) |
    &lt;span class="pl-cce"&gt;\ &lt;/span&gt;  &lt;span class="pl-c1"&gt;execute&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;normal! g`&lt;span class="pl-cce"&gt;\"&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; |
    &lt;span class="pl-cce"&gt;\ &lt;/span&gt;&lt;span class="pl-k"&gt;endif&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Read: If the mark &lt;code&gt;"&lt;/code&gt; contains a line number greater than line 1 but not greater
than the last line in the file, jump to it.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:h viminfo-'
:h `quote
:h g`
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;a id="user-content-temporary-files" class="anchor" aria-hidden="true" href="#temporary-files"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Temporary files&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-backup-files" class="anchor" aria-hidden="true" href="#backup-files"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Backup files&lt;/h3&gt;
&lt;p&gt;Before saving a file, Vim creates a backup file. If writing to disk was
successful, the backup file will be deleted.&lt;/p&gt;
&lt;p&gt;With &lt;code&gt;:set backup&lt;/code&gt;, the backup will persist. This means, the backup file will
always have the same content as the original file &lt;em&gt;before&lt;/em&gt; the most recent save.
It's up to you to decide whether this is useful or not.&lt;/p&gt;
&lt;p&gt;You can disable backups entirely with &lt;code&gt;:set nobackup nowritebackup&lt;/code&gt;, but you
shouldn't need to nowadays. &lt;code&gt;'writebackup'&lt;/code&gt; is a security feature that makes
sure that you don't lose the original file in case saving it should ever fail,
no matter whether you keep the backup file afterwards or not.&lt;/p&gt;
&lt;p&gt;If you frequently use Vim to edit huge files, &lt;a href="#editing-huge-files-is-slow"&gt;and you probably
shouldn't&lt;/a&gt;, you can exclude those from backups with
&lt;code&gt;'backupskip'&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Vim knows different ways to create a backup: &lt;em&gt;copying&lt;/em&gt; and &lt;em&gt;renaming&lt;/em&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Copying&lt;/strong&gt;
&lt;ol&gt;
&lt;li&gt;A full copy of the original file is created and used as backup.&lt;/li&gt;
&lt;li&gt;The original file gets emptied and then filled with the content of the
Vim buffer.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Renaming&lt;/strong&gt;
&lt;ol&gt;
&lt;li&gt;The original file is renamed to the backup file.&lt;/li&gt;
&lt;li&gt;The content of the Vim buffer gets written to a new file with the name of
the original file.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;See &lt;code&gt;:h 'backupcopy'&lt;/code&gt; for all the nitty-gritty details.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Demo:&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;:&lt;span class="pl-c1"&gt;set&lt;/span&gt; &lt;span class="pl-c1"&gt;backup&lt;/span&gt; &lt;span class="pl-c1"&gt;backupskip&lt;/span&gt;&lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;backupdir&lt;/span&gt;&lt;span class="pl-k"&gt;=&lt;/span&gt;. &lt;span class="pl-c1"&gt;backupext&lt;/span&gt;&lt;span class="pl-k"&gt;=&lt;/span&gt;&lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-c1"&gt;backup&lt;/span&gt;
:&lt;span class="pl-c1"&gt;e&lt;/span&gt; &lt;span class="pl-sr"&gt;/tmp/&lt;/span&gt;foo
ifoo&lt;span class="pl-c1"&gt;&amp;lt;esc&amp;gt;&lt;/span&gt;
:&lt;span class="pl-c1"&gt;w&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;"&lt;/span&gt; original file gets created, no need for backup file&lt;/span&gt;
obar&lt;span class="pl-c1"&gt;&amp;lt;esc&amp;gt;&lt;/span&gt;
:&lt;span class="pl-c1"&gt;w&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;"&lt;/span&gt; backup file is created, original file gets updated&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight highlight-source-diff"&gt;&lt;pre&gt;$ diff -u /tmp/foo-backup /tmp/foo
&lt;span class="pl-md"&gt;--- /tmp/foo-backup     2017-04-22 15:05:13.000000000 +0200&lt;/span&gt;
&lt;span class="pl-mi1"&gt;+++ /tmp/foo    2017-04-22 15:05:25.000000000 +0200&lt;/span&gt;
&lt;span class="pl-mdr"&gt;@@ -1 +1,2 @@&lt;/span&gt;
 foo
&lt;span class="pl-mi1"&gt;&lt;span class="pl-mi1"&gt;+&lt;/span&gt;bar&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr&gt;
&lt;pre&gt;&lt;code&gt;:h backup
:h write-fail
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-swap-files" class="anchor" aria-hidden="true" href="#swap-files"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Swap files&lt;/h3&gt;
&lt;p&gt;When editing a file, unsaved changes get written to a swap file.&lt;/p&gt;
&lt;p&gt;Get the name of the current swap file with &lt;code&gt;:swapname&lt;/code&gt;. Disable them with &lt;code&gt;:set noswapfile&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;A swap file gets updated either all 200 characters or when nothing was typed for
4 seconds. They get deleted when you stop editing the file. You can change these
numbers with &lt;code&gt;:h 'updatecount'&lt;/code&gt; and &lt;code&gt;:h 'updatetime'&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If Vim gets killed (e.g. power outage), you lose all changes since the last time
the file was written to disk, but the swap file won't be deleted. Now, if you
edit the file again, Vim will offer the chance to recover the file from the swap
file.&lt;/p&gt;
&lt;p&gt;When two people try to edit the same file, the second person will get a notice
that the swap file already exists. It prevents people from trying to save
different versions of a file. If you don't want that behaviour, see &lt;code&gt;:h 'directory'&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:h swap-file
:h usr_11
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-undo-files" class="anchor" aria-hidden="true" href="#undo-files"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Undo files&lt;/h3&gt;
&lt;p&gt;The &lt;a href="#undo-tree"&gt;undo tree&lt;/a&gt; is kept in memory and will be lost when Vim quits.
If you want it to persist, &lt;code&gt;:set undofile&lt;/code&gt;. This will save the undo file for
&lt;code&gt;~/foo.c&lt;/code&gt; in &lt;code&gt;~/foo.c.un~&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:h 'undofile'
:h undo-persistence
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-viminfo-files" class="anchor" aria-hidden="true" href="#viminfo-files"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Viminfo files&lt;/h3&gt;
&lt;p&gt;When backup, swap, and undo files are all about text state, viminfo files are
used for saving everything else that would otherwise be lost when quitting Vim.
The viminfo file keeps histories (command line, search, input), registers,
marks, buffer list, global variables etc.&lt;/p&gt;
&lt;p&gt;By default, the viminfo is written to &lt;code&gt;~/.viminfo&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:h viminfo
:h 'viminfo'
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-example-configuration-for-temporary-files" class="anchor" aria-hidden="true" href="#example-configuration-for-temporary-files"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Example configuration for temporary files&lt;/h3&gt;
&lt;p&gt;Put all temporary files in their own directory under &lt;code&gt;~/.vim/files&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;"&lt;/span&gt; create directory if needed&lt;/span&gt;
&lt;span class="pl-k"&gt;if&lt;/span&gt; &lt;span class="pl-k"&gt;!&lt;/span&gt;&lt;span class="pl-en"&gt;isdirectory&lt;/span&gt;(&lt;span class="pl-c1"&gt;$HOME&lt;/span&gt;.&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;/.vim/files&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-k"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="pl-en"&gt;exists&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;*mkdir&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;)
  &lt;span class="pl-c1"&gt;call&lt;/span&gt; &lt;span class="pl-en"&gt;mkdir&lt;/span&gt;(&lt;span class="pl-c1"&gt;$HOME&lt;/span&gt;.&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;/.vim/files&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-k"&gt;endif&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;"&lt;/span&gt; backup files&lt;/span&gt;
&lt;span class="pl-c1"&gt;set&lt;/span&gt; &lt;span class="pl-c1"&gt;backup&lt;/span&gt;
&lt;span class="pl-c1"&gt;set&lt;/span&gt; &lt;span class="pl-c1"&gt;backupdir&lt;/span&gt;   &lt;span class="pl-k"&gt;=&lt;/span&gt;&lt;span class="pl-c1"&gt;$HOME&lt;/span&gt;&lt;span class="pl-sr"&gt;/.vim/&lt;/span&gt;&lt;span class="pl-c1"&gt;files&lt;/span&gt;&lt;span class="pl-sr"&gt;/backup/&lt;/span&gt;
&lt;span class="pl-c1"&gt;set&lt;/span&gt; &lt;span class="pl-c1"&gt;backupext&lt;/span&gt;   &lt;span class="pl-k"&gt;=&lt;/span&gt;&lt;span class="pl-k"&gt;-&lt;/span&gt;vimbackup
&lt;span class="pl-c1"&gt;set&lt;/span&gt; &lt;span class="pl-c1"&gt;backupskip&lt;/span&gt;  &lt;span class="pl-k"&gt;=&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;"&lt;/span&gt; swap files&lt;/span&gt;
&lt;span class="pl-c1"&gt;set&lt;/span&gt; &lt;span class="pl-c1"&gt;directory&lt;/span&gt;   &lt;span class="pl-k"&gt;=&lt;/span&gt;&lt;span class="pl-c1"&gt;$HOME&lt;/span&gt;&lt;span class="pl-sr"&gt;/.vim/&lt;/span&gt;&lt;span class="pl-c1"&gt;files&lt;/span&gt;&lt;span class="pl-sr"&gt;/swap/&lt;/span&gt;/
&lt;span class="pl-c1"&gt;set&lt;/span&gt; &lt;span class="pl-c1"&gt;updatecount&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt;&lt;span class="pl-c1"&gt;100&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;"&lt;/span&gt; undo files&lt;/span&gt;
&lt;span class="pl-c1"&gt;set&lt;/span&gt; &lt;span class="pl-c1"&gt;undofile&lt;/span&gt;
&lt;span class="pl-c1"&gt;set&lt;/span&gt; &lt;span class="pl-c1"&gt;undodir&lt;/span&gt;     &lt;span class="pl-k"&gt;=&lt;/span&gt;&lt;span class="pl-c1"&gt;$HOME&lt;/span&gt;&lt;span class="pl-sr"&gt;/.vim/&lt;/span&gt;&lt;span class="pl-c1"&gt;files&lt;/span&gt;&lt;span class="pl-sr"&gt;/undo/&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;"&lt;/span&gt; viminfo files&lt;/span&gt;
&lt;span class="pl-c1"&gt;set&lt;/span&gt; &lt;span class="pl-c1"&gt;viminfo&lt;/span&gt;     &lt;span class="pl-k"&gt;=&lt;/span&gt;'&lt;span class="pl-c1"&gt;100&lt;/span&gt;,&lt;span class="pl-c1"&gt;n&lt;/span&gt;&lt;span class="pl-c1"&gt;$HOME&lt;/span&gt;&lt;span class="pl-sr"&gt;/.vim/&lt;/span&gt;&lt;span class="pl-c1"&gt;files&lt;/span&gt;&lt;span class="pl-sr"&gt;/info/&lt;/span&gt;&lt;span class="pl-c1"&gt;viminfo&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-editing-remote-files" class="anchor" aria-hidden="true" href="#editing-remote-files"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Editing remote files&lt;/h2&gt;
&lt;p&gt;Vim comes with the netrw plugin that enables editing remote files. Actually it
transfers the remote file to a local temporary file via scp, opens a buffer
using that file, and writes the changes back to the remote file on saving.&lt;/p&gt;
&lt;p&gt;This is extremely useful if you want to use your local configuration opposed to
ssh'ing into a server and use whatever the admins want you to use.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:e scp://bram@awesome.site.com/.vimrc
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you have a &lt;code&gt;~/.ssh/config&lt;/code&gt; set up already, this gets used automatically:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Host awesome
    HostName awesome.site.com
    Port 1234
    User bram
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Assuming the above content in &lt;code&gt;~/.ssh/config&lt;/code&gt;, this works just as well:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:e scp://awesome/.vimrc
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Similar can be done with a &lt;code&gt;~/.netrc&lt;/code&gt;, see &lt;code&gt;:h netrw-netrc&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Make sure to read &lt;code&gt;:h netrw-ssh-hack&lt;/code&gt; and &lt;code&gt;:h g:netrw_ssh_cmd&lt;/code&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Another possibility is using &lt;a href="https://wiki.archlinux.org/index.php/Sshfs" rel="nofollow"&gt;sshfs&lt;/a&gt;
which uses &lt;a href="https://en.wikipedia.org/wiki/Filesystem_in_Userspace" rel="nofollow"&gt;FUSE&lt;/a&gt; to
mount a remote filesystem into your local filesystem.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-managing-plugins" class="anchor" aria-hidden="true" href="#managing-plugins"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Managing plugins&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/tpope/vim-pathogen"&gt;Pathogen&lt;/a&gt; was the first popular tool for
managing plugins. Actually it just adjusts the &lt;em&gt;runtimepath&lt;/em&gt; (&lt;code&gt;:h 'rtp'&lt;/code&gt;) to
include all the things put under a certain directory. You have to clone the
repositories of the plugins there yourself.&lt;/p&gt;
&lt;p&gt;Real plugin managers expose commands that help you to install and update plugins
from within Vim.&lt;/p&gt;
&lt;p&gt;&lt;a href="PLUGINS.md#plugin-managers"&gt;List of plugin managers&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-block-insert" class="anchor" aria-hidden="true" href="#block-insert"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Block insert&lt;/h2&gt;
&lt;p&gt;This is a technique to insert the same text on multiple consecutive lines at the
same time. See this
&lt;a href="https://raw.githubusercontent.com/mhinz/vim-galore/master/static/images/content-block_insert.gif" rel="nofollow"&gt;demo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Switch to visual block mode with &lt;code&gt;&amp;lt;c-v&amp;gt;&lt;/code&gt;. Afterwards go down for a few lines.
Hit &lt;code&gt;I&lt;/code&gt; or &lt;code&gt;A&lt;/code&gt; and start entering your text.&lt;/p&gt;
&lt;p&gt;It might be a bit confusing at first, but text is always entered for the current
line and only after finishing the current insertion, the same text will be
applied to all other lines of the prior visual selection.&lt;/p&gt;
&lt;p&gt;So a simple example is &lt;code&gt;&amp;lt;c-v&amp;gt;3jItext&amp;lt;esc&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you have lines of different length and want to append the same text right
after the end of each line, do this: &lt;code&gt;&amp;lt;c-v&amp;gt;3j$Atext&amp;lt;esc&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Sometime you need to place the cursor somewhere after the end of the current
line. You can't do that by default, but you can set the &lt;code&gt;virtualedit&lt;/code&gt; option:&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;set&lt;/span&gt; &lt;span class="pl-c1"&gt;virtualedit&lt;/span&gt;&lt;span class="pl-k"&gt;=&lt;/span&gt;&lt;span class="pl-c1"&gt;all&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Afterwards &lt;code&gt;$10l&lt;/code&gt; or &lt;code&gt;90|&lt;/code&gt; work even after the end of the line.&lt;/p&gt;
&lt;p&gt;See &lt;code&gt;:h blockwise-examples&lt;/code&gt; for more info. It might seem complicated at first,
but quickly becomes second nature.&lt;/p&gt;
&lt;p&gt;If you want to get real fancy, have a look at
&lt;a href="https://github.com/terryma/vim-multiple-cursors"&gt;multiple-cursors&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-running-external-programs-and-using-filters" class="anchor" aria-hidden="true" href="#running-external-programs-and-using-filters"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Running external programs and using filters&lt;/h2&gt;
&lt;p&gt;Disclaimer: Vim is single-threaded, so running an external program in the
foreground will block everything else. Sure, you can use one of Vim's
programming interfaces, e.g. Lua, and use its thread support, but during that
time the Vim process is blocked nevertheless. Neovim fixed that by adding a
proper job API.&lt;/p&gt;
&lt;p&gt;(Apparently Bram is thinking about adding job control to Vim as well. If you
have a very recent version, see &lt;code&gt;:helpgrep startjob&lt;/code&gt;.)&lt;/p&gt;
&lt;p&gt;Use &lt;code&gt;:!&lt;/code&gt; to start a job. If you want to list the files in the current working
directory, use &lt;code&gt;:!ls&lt;/code&gt;. Use &lt;code&gt;|&lt;/code&gt; for piping in the shell as usual, e.g. &lt;code&gt;:!ls -1 | sort | tail -n5&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Without a range, the output of &lt;code&gt;:!&lt;/code&gt; will be shown in a scrollable window. On the
other hand, if a range is given, these lines will be
&lt;a href="https://en.wikipedia.org/wiki/Filter_(software)" rel="nofollow"&gt;filtered&lt;/a&gt;. This means they
will be piped to the
&lt;a href="https://en.wikipedia.org/wiki/Standard_streams#Standard_input_.28stdin.29" rel="nofollow"&gt;stdin&lt;/a&gt;
of the filter program and after processing be replaced by the
&lt;a href="https://en.wikipedia.org/wiki/Standard_streams#Standard_output_.28stdout.29" rel="nofollow"&gt;stdout&lt;/a&gt;
of the filter. E.g. for prepending numbers to the next 5 lines, use this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:.,+4!nl -ba -w1 -s' '
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since manually adding the range is quite burdensome, Vim also provides some
helpers for convenience. As always with ranges, you can also select lines in
visual mode and then hit &lt;code&gt;:&lt;/code&gt;. There's also an operator &lt;code&gt;!&lt;/code&gt; that takes a motion.
E.g. &lt;code&gt;!ip!sort&lt;/code&gt; will sort the lines of the current paragraph.&lt;/p&gt;
&lt;p&gt;A good use case for filtering is the &lt;a href="https://golang.org" rel="nofollow"&gt;Go programming
language&lt;/a&gt;. The indentation is pretty opinionated, it even
comes with a filter called &lt;code&gt;gofmt&lt;/code&gt; for indenting Go source code properly. So
plugins for Go often provide helper commands called &lt;code&gt;:Fmt&lt;/code&gt; that basically do
&lt;code&gt;:%!gofmt&lt;/code&gt;, so they indent all lines in the file.&lt;/p&gt;
&lt;p&gt;People often use &lt;code&gt;:r !prog&lt;/code&gt; to put the output of prog below the current line,
which is fine for scripts, but when doing it on the fly, I find it easier to use
&lt;code&gt;!!ls&lt;/code&gt; instead, which replaces the current line.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:h filter
:h :read!
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;a id="user-content-cscope" class="anchor" aria-hidden="true" href="#cscope"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Cscope&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://cscope.sourceforge.net/" rel="nofollow"&gt;Cscope&lt;/a&gt; does more things than
&lt;a href="http://ctags.sourceforge.net/" rel="nofollow"&gt;ctags&lt;/a&gt;, but only supports C (and C++ and Java to
some extent).&lt;/p&gt;
&lt;p&gt;Whereas a tags file only knows where a symbol was defined, a cscope database
knows much more about your data:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Where is this symbol defined?&lt;/li&gt;
&lt;li&gt;Where is this symbol used?&lt;/li&gt;
&lt;li&gt;What is this global symbol's definition?&lt;/li&gt;
&lt;li&gt;Where did this variable get its value?&lt;/li&gt;
&lt;li&gt;Where is this function in the source files?&lt;/li&gt;
&lt;li&gt;What functions call this function?&lt;/li&gt;
&lt;li&gt;What functions are called by this function?&lt;/li&gt;
&lt;li&gt;Where does the message "out of space" come from?&lt;/li&gt;
&lt;li&gt;Where is this source file in the directory structure?&lt;/li&gt;
&lt;li&gt;What files include this header file?&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-1-build-the-database" class="anchor" aria-hidden="true" href="#1-build-the-database"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. Build the database&lt;/h3&gt;
&lt;p&gt;Do this in the root of your project:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;$ cscope -bqR&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will create 3 files: &lt;code&gt;cscope{,.in,.po}.out&lt;/code&gt; in the current working
directory. Think of them as your database.&lt;/p&gt;
&lt;p&gt;Unfortunately &lt;code&gt;cscope&lt;/code&gt; only analyzes &lt;code&gt;*.[c|h|y|l]&lt;/code&gt; files by default. If you want
to use cscope for a Java project instead, do this:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;$ find &lt;span class="pl-c1"&gt;.&lt;/span&gt; -name &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;*.java&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; cscope.files
$ cscope -bq&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-2-add-the-database" class="anchor" aria-hidden="true" href="#2-add-the-database"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. Add the database&lt;/h3&gt;
&lt;p&gt;Open a connection to your freshly built database:&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;:&lt;span class="pl-c1"&gt;cs&lt;/span&gt; &lt;span class="pl-c1"&gt;add&lt;/span&gt; &lt;span class="pl-c1"&gt;cscope&lt;/span&gt;.out&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Verify that the connection was made:&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;:&lt;span class="pl-c1"&gt;cs&lt;/span&gt; show&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(Yes, you can add multiple connections.)&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-3-query-the-database" class="anchor" aria-hidden="true" href="#3-query-the-database"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. Query the database&lt;/h3&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;:&lt;span class="pl-c1"&gt;cs&lt;/span&gt; &lt;span class="pl-c1"&gt;find&lt;/span&gt; &lt;span class="pl-c1"&gt;&amp;lt;kind&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;&amp;lt;query&amp;gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;E.g. &lt;code&gt;:cs find d foo&lt;/code&gt; will list all functions that are called by &lt;code&gt;foo(...)&lt;/code&gt;.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Kind&lt;/th&gt;
&lt;th&gt;Explanation&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;s&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;s&lt;/strong&gt;ymbol: find all references to the token&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;g&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;g&lt;/strong&gt;lobal: find global definition(s) of the token&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;c&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;c&lt;/strong&gt;alls: find all calls to the function&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;t&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;t&lt;/strong&gt;ext: find all instances of the text&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;e&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;e&lt;/strong&gt;grep: egrep search for the word&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;f&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;f&lt;/strong&gt;ile: open the filename&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;i&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;i&lt;/strong&gt;ncludes: find files that include the filename&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;d&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;d&lt;/strong&gt;epends: find functions called by this function&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;I suggest some convenience mappings e.g.:&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;nnoremap&lt;/span&gt; &lt;span class="pl-c1"&gt;&amp;lt;buffer&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;&amp;lt;leader&amp;gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;cs&lt;/span&gt; :&lt;span class="pl-c1"&gt;cscope&lt;/span&gt; &lt;span class="pl-c1"&gt;find&lt;/span&gt; &lt;span class="pl-c1"&gt;s&lt;/span&gt;  &lt;span class="pl-c1"&gt;&amp;lt;c-r&amp;gt;&lt;/span&gt;&lt;span class="pl-k"&gt;=&lt;/span&gt;&lt;span class="pl-en"&gt;expand&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;&amp;lt;cword&amp;gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;)&lt;span class="pl-c1"&gt;&amp;lt;cr&amp;gt;&amp;lt;cr&amp;gt;&lt;/span&gt;
&lt;span class="pl-c1"&gt;nnoremap&lt;/span&gt; &lt;span class="pl-c1"&gt;&amp;lt;buffer&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;&amp;lt;leader&amp;gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;cg&lt;/span&gt; :&lt;span class="pl-c1"&gt;cscope&lt;/span&gt; &lt;span class="pl-c1"&gt;find&lt;/span&gt; &lt;span class="pl-c1"&gt;g&lt;/span&gt;  &lt;span class="pl-c1"&gt;&amp;lt;c-r&amp;gt;&lt;/span&gt;&lt;span class="pl-k"&gt;=&lt;/span&gt;&lt;span class="pl-en"&gt;expand&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;&amp;lt;cword&amp;gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;)&lt;span class="pl-c1"&gt;&amp;lt;cr&amp;gt;&amp;lt;cr&amp;gt;&lt;/span&gt;
&lt;span class="pl-c1"&gt;nnoremap&lt;/span&gt; &lt;span class="pl-c1"&gt;&amp;lt;buffer&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;&amp;lt;leader&amp;gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;cc&lt;/span&gt; :&lt;span class="pl-c1"&gt;cscope&lt;/span&gt; &lt;span class="pl-c1"&gt;find&lt;/span&gt; &lt;span class="pl-c1"&gt;c&lt;/span&gt;  &lt;span class="pl-c1"&gt;&amp;lt;c-r&amp;gt;&lt;/span&gt;&lt;span class="pl-k"&gt;=&lt;/span&gt;&lt;span class="pl-en"&gt;expand&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;&amp;lt;cword&amp;gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;)&lt;span class="pl-c1"&gt;&amp;lt;cr&amp;gt;&amp;lt;cr&amp;gt;&lt;/span&gt;
&lt;span class="pl-c1"&gt;nnoremap&lt;/span&gt; &lt;span class="pl-c1"&gt;&amp;lt;buffer&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;&amp;lt;leader&amp;gt;&lt;/span&gt;ct :&lt;span class="pl-c1"&gt;cscope&lt;/span&gt; &lt;span class="pl-c1"&gt;find&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;  &lt;span class="pl-c1"&gt;&amp;lt;c-r&amp;gt;&lt;/span&gt;&lt;span class="pl-k"&gt;=&lt;/span&gt;&lt;span class="pl-en"&gt;expand&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;&amp;lt;cword&amp;gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;)&lt;span class="pl-c1"&gt;&amp;lt;cr&amp;gt;&amp;lt;cr&amp;gt;&lt;/span&gt;
&lt;span class="pl-c1"&gt;nnoremap&lt;/span&gt; &lt;span class="pl-c1"&gt;&amp;lt;buffer&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;&amp;lt;leader&amp;gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;ce&lt;/span&gt; :&lt;span class="pl-c1"&gt;cscope&lt;/span&gt; &lt;span class="pl-c1"&gt;find&lt;/span&gt; &lt;span class="pl-c1"&gt;e&lt;/span&gt;  &lt;span class="pl-c1"&gt;&amp;lt;c-r&amp;gt;&lt;/span&gt;&lt;span class="pl-k"&gt;=&lt;/span&gt;&lt;span class="pl-en"&gt;expand&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;&amp;lt;cword&amp;gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;)&lt;span class="pl-c1"&gt;&amp;lt;cr&amp;gt;&amp;lt;cr&amp;gt;&lt;/span&gt;
&lt;span class="pl-c1"&gt;nnoremap&lt;/span&gt; &lt;span class="pl-c1"&gt;&amp;lt;buffer&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;&amp;lt;leader&amp;gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;cf&lt;/span&gt; :&lt;span class="pl-c1"&gt;cscope&lt;/span&gt; &lt;span class="pl-c1"&gt;find&lt;/span&gt; &lt;span class="pl-c1"&gt;f&lt;/span&gt;  &lt;span class="pl-c1"&gt;&amp;lt;c-r&amp;gt;&lt;/span&gt;&lt;span class="pl-k"&gt;=&lt;/span&gt;&lt;span class="pl-en"&gt;expand&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;&amp;lt;cfile&amp;gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;)&lt;span class="pl-c1"&gt;&amp;lt;cr&amp;gt;&amp;lt;cr&amp;gt;&lt;/span&gt;
&lt;span class="pl-c1"&gt;nnoremap&lt;/span&gt; &lt;span class="pl-c1"&gt;&amp;lt;buffer&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;&amp;lt;leader&amp;gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;ci&lt;/span&gt; :&lt;span class="pl-c1"&gt;cscope&lt;/span&gt; &lt;span class="pl-c1"&gt;find&lt;/span&gt; &lt;span class="pl-c1"&gt;i&lt;/span&gt; ^&lt;span class="pl-c1"&gt;&amp;lt;c-r&amp;gt;&lt;/span&gt;&lt;span class="pl-k"&gt;=&lt;/span&gt;&lt;span class="pl-en"&gt;expand&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;&amp;lt;cfile&amp;gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;)&lt;span class="pl-c1"&gt;&amp;lt;cr&amp;gt;&lt;/span&gt;&lt;span class="pl-smi"&gt;$&lt;/span&gt;&lt;span class="pl-c1"&gt;&amp;lt;cr&amp;gt;&lt;/span&gt;
&lt;span class="pl-c1"&gt;nnoremap&lt;/span&gt; &lt;span class="pl-c1"&gt;&amp;lt;buffer&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;&amp;lt;leader&amp;gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;cd&lt;/span&gt; :&lt;span class="pl-c1"&gt;cscope&lt;/span&gt; &lt;span class="pl-c1"&gt;find&lt;/span&gt; &lt;span class="pl-c1"&gt;d&lt;/span&gt;  &lt;span class="pl-c1"&gt;&amp;lt;c-r&amp;gt;&lt;/span&gt;&lt;span class="pl-k"&gt;=&lt;/span&gt;&lt;span class="pl-en"&gt;expand&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;&amp;lt;cword&amp;gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;)&lt;span class="pl-c1"&gt;&amp;lt;cr&amp;gt;&amp;lt;cr&amp;gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So, when &lt;code&gt;:tag&lt;/code&gt; (or &lt;code&gt;&amp;lt;c-]&amp;gt;&lt;/code&gt;) jumps to a definition from the tags file, &lt;code&gt;:cstag&lt;/code&gt;
does the same, but also takes connected cscope databases into account. The
option &lt;code&gt;'cscopetag'&lt;/code&gt; makes &lt;code&gt;:tag&lt;/code&gt; act like &lt;code&gt;:cstag&lt;/code&gt; automatically. This is very
convenient if you already have tag-related mappings.&lt;/p&gt;
&lt;p&gt;Help: &lt;code&gt;:h cscope&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-matchit" class="anchor" aria-hidden="true" href="#matchit"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;MatchIt&lt;/h2&gt;
&lt;p&gt;Since Vim is written in C, a lot of features assume C-like syntax. By default,
if your cursor is on &lt;code&gt;{&lt;/code&gt; or &lt;code&gt;#endif&lt;/code&gt;, you can use &lt;code&gt;%&lt;/code&gt; to jump to the
corresponding &lt;code&gt;}&lt;/code&gt; or &lt;code&gt;#ifdef&lt;/code&gt; respectively.&lt;/p&gt;
&lt;p&gt;Vim comes bundled with a plugin called matchit.vim which is not enabled by
default. It makes &lt;code&gt;%&lt;/code&gt; also cycle through HTML tags, if/else/endif constructs in
VimL etc. and introduces a few new commands.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-installation-for-vim-8" class="anchor" aria-hidden="true" href="#installation-for-vim-8"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installation for Vim 8&lt;/h4&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;"&lt;/span&gt; vimrc&lt;/span&gt;
&lt;span class="pl-c1"&gt;packadd&lt;/span&gt;&lt;span class="pl-k"&gt;!&lt;/span&gt; matchit&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content-installation-for-vim-7-and-older" class="anchor" aria-hidden="true" href="#installation-for-vim-7-and-older"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installation for Vim 7 and older&lt;/h4&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;"&lt;/span&gt; vimrc&lt;/span&gt;
&lt;span class="pl-c1"&gt;runtime&lt;/span&gt; macros/matchit.&lt;span class="pl-c1"&gt;vim&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Since the documentation of matchit is pretty extensive, I suggest also doing the
following once:&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;:&lt;span class="pl-k"&gt;!&lt;/span&gt;&lt;span class="pl-c1"&gt;mkdir&lt;/span&gt; &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-c1"&gt;p&lt;/span&gt; &lt;span class="pl-c1"&gt;~/.vim/doc&lt;/span&gt;
:&lt;span class="pl-k"&gt;!&lt;/span&gt;&lt;span class="pl-c1"&gt;cp&lt;/span&gt; &lt;span class="pl-c1"&gt;$VIMRUNTIME&lt;/span&gt;&lt;span class="pl-sr"&gt;/macros/&lt;/span&gt;matchit.txt &lt;span class="pl-c1"&gt;~/.vim/doc&lt;/span&gt;
:&lt;span class="pl-c1"&gt;helptags&lt;/span&gt; &lt;span class="pl-c1"&gt;~/.vim/doc&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content-small-intro" class="anchor" aria-hidden="true" href="#small-intro"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Small intro&lt;/h4&gt;
&lt;p&gt;The plugin is ready to use now. See &lt;code&gt;:h matchit-intro&lt;/code&gt; for the supported
commands and &lt;code&gt;:h matchit-languages&lt;/code&gt; for the supported languages.&lt;/p&gt;
&lt;p&gt;That said, it's easy to define your own matching pairs:&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;autocmd&lt;/span&gt; &lt;span class="pl-c1"&gt;FileType&lt;/span&gt; &lt;span class="pl-c1"&gt;python&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-smi"&gt;&lt;span class="pl-k"&gt;b:&lt;/span&gt;match_words&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;\&amp;lt;if\&amp;gt;:\&amp;lt;elif\&amp;gt;:\&amp;lt;else\&amp;gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Afterwards you can cycle through these 3 statements in any Python file by using
&lt;code&gt;%&lt;/code&gt; (forward) or &lt;code&gt;g%&lt;/code&gt; (backward).&lt;/p&gt;
&lt;p&gt;Help:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:h matchit-install
:h matchit
:h b:match_words
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;a id="user-content-true-colors" class="anchor" aria-hidden="true" href="#true-colors"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;True colors&lt;/h2&gt;
&lt;p&gt;Using true colors in a terminal emulator means being able to use 24 bits for RGB
colors. That makes 16777216 (2^24) colors instead of the usual 256.&lt;/p&gt;
&lt;p&gt;As explained &lt;a href="#colorschemes"&gt;here&lt;/a&gt;, colorschemes can actually be &lt;em&gt;two&lt;/em&gt;
colorschemes by having definitions for terminals (xterm) and for GUIs (gvim).
This made sense before terminal emulators learned about true colors.&lt;/p&gt;
&lt;p&gt;After &lt;code&gt;:set termguicolors&lt;/code&gt;, Vim starts emitting escape sequences only understood
by a terminal emulator that supports true colors. When your colors look weird,
chances are your terminal emulator doesn't support true colors or your
colorcheme has no GUI colors defined.&lt;/p&gt;
&lt;p&gt;Many people use the terminal multiplexer
&lt;a href="https://github.com/tmux/tmux/wiki"&gt;tmux&lt;/a&gt; which basically sits in between the
terminal emulator and Vim. To make tmux &lt;em&gt;forward&lt;/em&gt; the true color escape
sequences emitted by Vim, you have to put the following in the user's
&lt;code&gt;.tmux.conf&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;set-option -g  default-terminal 'tmux-256color'
set-option -ga terminal-overrides ',xterm-256color:Tc'
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;The first line should be the same for most people and denotes the &lt;code&gt;$TERM&lt;/code&gt; to
be used &lt;em&gt;within&lt;/em&gt; tmux.&lt;/li&gt;
&lt;li&gt;The second line adds the tmux-specific &lt;code&gt;Tc&lt;/code&gt; (true color) capability to the
other terminfo entries of &lt;code&gt;xterm-256color&lt;/code&gt;. Obviously this assumes that the
user is using &lt;code&gt;TERM=xterm-256color&lt;/code&gt; &lt;em&gt;outside&lt;/em&gt; of tmux.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, here is the checklist for enabling true colors:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Read &lt;code&gt;:h 'termguicolors'&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Put &lt;code&gt;set termguicolors&lt;/code&gt; in your vimrc.&lt;/li&gt;
&lt;li&gt;Make sure your colorscheme has color definitions for GUIs. (It should contain
lines with &lt;code&gt;guifg&lt;/code&gt; and &lt;code&gt;guibg&lt;/code&gt;.)&lt;/li&gt;
&lt;li&gt;Make sure your terminal emulator of choice supports true colors.&lt;/li&gt;
&lt;li&gt;Using tmux? Configure it to add the &lt;code&gt;Tc&lt;/code&gt; capability.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A popular reference for colors in the terminal:
&lt;a href="https://gist.github.com/XVilka/8346728"&gt;https://gist.github.com/XVilka/8346728&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-tips-1" class="anchor" aria-hidden="true" href="#tips-1"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tips&lt;/h1&gt;
&lt;h2&gt;&lt;a id="user-content-go-to-other-end-of-selected-text" class="anchor" aria-hidden="true" href="#go-to-other-end-of-selected-text"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Go to other end of selected text&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;o&lt;/code&gt; and &lt;code&gt;O&lt;/code&gt; in a visual selection make the cursor go to the other end. Try with
blockwise selection to see the difference. This is useful for quickly changing
the size of the selected text.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:h v_o
:h v_O
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;a id="user-content-saner-behavior-of-n-and-n" class="anchor" aria-hidden="true" href="#saner-behavior-of-n-and-n"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Saner behavior of n and N&lt;/h2&gt;
&lt;p&gt;The direction of &lt;code&gt;n&lt;/code&gt; and &lt;code&gt;N&lt;/code&gt; depends on whether &lt;code&gt;/&lt;/code&gt; or &lt;code&gt;?&lt;/code&gt; was used for
searching forward or backward respectively. This is pretty confusing to me.&lt;/p&gt;
&lt;p&gt;If you want &lt;code&gt;n&lt;/code&gt; to always search forward and &lt;code&gt;N&lt;/code&gt; backward, use this:&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;nnoremap&lt;/span&gt; &lt;span class="pl-c1"&gt;&amp;lt;expr&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;n&lt;/span&gt;  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;Nn&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;[&lt;span class="pl-smi"&gt;&lt;span class="pl-k"&gt;v:&lt;/span&gt;searchforward&lt;/span&gt;]
&lt;span class="pl-c1"&gt;xnoremap&lt;/span&gt; &lt;span class="pl-c1"&gt;&amp;lt;expr&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;n&lt;/span&gt;  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;Nn&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;[&lt;span class="pl-smi"&gt;&lt;span class="pl-k"&gt;v:&lt;/span&gt;searchforward&lt;/span&gt;]
&lt;span class="pl-c1"&gt;onoremap&lt;/span&gt; &lt;span class="pl-c1"&gt;&amp;lt;expr&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;n&lt;/span&gt;  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;Nn&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;[&lt;span class="pl-smi"&gt;&lt;span class="pl-k"&gt;v:&lt;/span&gt;searchforward&lt;/span&gt;]

&lt;span class="pl-c1"&gt;nnoremap&lt;/span&gt; &lt;span class="pl-c1"&gt;&amp;lt;expr&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;N&lt;/span&gt;  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;nN&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;[&lt;span class="pl-smi"&gt;&lt;span class="pl-k"&gt;v:&lt;/span&gt;searchforward&lt;/span&gt;]
&lt;span class="pl-c1"&gt;xnoremap&lt;/span&gt; &lt;span class="pl-c1"&gt;&amp;lt;expr&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;N&lt;/span&gt;  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;nN&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;[&lt;span class="pl-smi"&gt;&lt;span class="pl-k"&gt;v:&lt;/span&gt;searchforward&lt;/span&gt;]
&lt;span class="pl-c1"&gt;onoremap&lt;/span&gt; &lt;span class="pl-c1"&gt;&amp;lt;expr&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;N&lt;/span&gt;  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;nN&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;[&lt;span class="pl-smi"&gt;&lt;span class="pl-k"&gt;v:&lt;/span&gt;searchforward&lt;/span&gt;]&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-saner-command-line-history" class="anchor" aria-hidden="true" href="#saner-command-line-history"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Saner command-line history&lt;/h2&gt;
&lt;p&gt;If you're anything like me, you're used to going to next and previous items via
&lt;code&gt;&amp;lt;c-n&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;c-p&amp;gt;&lt;/code&gt; respectively. By default, this also works in the
command-line and recalls older or more recent command-lines from history.&lt;/p&gt;
&lt;p&gt;So far, so good. But &lt;code&gt;&amp;lt;up&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;down&amp;gt;&lt;/code&gt; are even smarter! They recall the
command-line whose beginning matches the current command-line. E.g. &lt;code&gt;:echo &amp;lt;up&amp;gt;&lt;/code&gt;
may change to &lt;code&gt;:echo "Vim rocks!"&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Of course, I don't want you to reach to the arrow keys, just map it instead:&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;cnoremap&lt;/span&gt; &lt;span class="pl-c1"&gt;&amp;lt;c-n&amp;gt;&lt;/span&gt;  &lt;span class="pl-c1"&gt;&amp;lt;down&amp;gt;&lt;/span&gt;
&lt;span class="pl-c1"&gt;cnoremap&lt;/span&gt; &lt;span class="pl-c1"&gt;&amp;lt;c-p&amp;gt;&lt;/span&gt;  &lt;span class="pl-c1"&gt;&amp;lt;up&amp;gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I depend on this behaviour several times a day.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-saner-ctrl-l" class="anchor" aria-hidden="true" href="#saner-ctrl-l"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Saner CTRL-L&lt;/h2&gt;
&lt;p&gt;By default, &lt;code&gt;&amp;lt;c-l&amp;gt;&lt;/code&gt; clears and redraws the screen (like &lt;code&gt;:redraw!&lt;/code&gt;). The
following mapping does the same, plus de-highlighting the matches found via &lt;code&gt;/&lt;/code&gt;,
&lt;code&gt;?&lt;/code&gt; etc., plus fixing syntax highlighting (sometimes Vim loses highlighting due
to complex highlighting rules), plus force updating the syntax highlighting in
diff mode:&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;nnoremap&lt;/span&gt; &lt;span class="pl-c1"&gt;&amp;lt;leader&amp;gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;l&lt;/span&gt; :&lt;span class="pl-c1"&gt;nohlsearch&lt;/span&gt;&lt;span class="pl-c1"&gt;&amp;lt;cr&amp;gt;&lt;/span&gt;:&lt;span class="pl-c1"&gt;diffupdate&lt;/span&gt;&lt;span class="pl-c1"&gt;&amp;lt;cr&amp;gt;&lt;/span&gt;:&lt;span class="pl-c1"&gt;syntax&lt;/span&gt; &lt;span class="pl-c1"&gt;sync&lt;/span&gt; &lt;span class="pl-c1"&gt;fromstart&lt;/span&gt;&lt;span class="pl-c1"&gt;&amp;lt;cr&amp;gt;&amp;lt;c-l&amp;gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-disable-audible-and-visual-bells" class="anchor" aria-hidden="true" href="#disable-audible-and-visual-bells"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Disable audible and visual bells&lt;/h2&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;set&lt;/span&gt; &lt;span class="pl-c1"&gt;noerrorbells&lt;/span&gt;
&lt;span class="pl-c1"&gt;set&lt;/span&gt; &lt;span class="pl-c1"&gt;novisualbell&lt;/span&gt;
&lt;span class="pl-c1"&gt;set&lt;/span&gt; &lt;span class="pl-c1"&gt;t_vb&lt;/span&gt;&lt;span class="pl-k"&gt;=&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;See &lt;a href="http://vim.wikia.com/wiki/Disable_beeping" rel="nofollow"&gt;Vim Wiki: Disable beeping&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-quickly-move-current-line" class="anchor" aria-hidden="true" href="#quickly-move-current-line"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Quickly move current line&lt;/h2&gt;
&lt;p&gt;Sometimes I need a quick way to move the current line above or below:&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;nnoremap&lt;/span&gt; [&lt;span class="pl-c1"&gt;e&lt;/span&gt;  :&lt;span class="pl-c1"&gt;&amp;lt;c-u&amp;gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;execute&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;move -1-&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;. &lt;span class="pl-smi"&gt;&lt;span class="pl-k"&gt;v:&lt;/span&gt;count1&lt;/span&gt;&lt;span class="pl-c1"&gt;&amp;lt;cr&amp;gt;&lt;/span&gt;
&lt;span class="pl-c1"&gt;nnoremap&lt;/span&gt; ]&lt;span class="pl-c1"&gt;e&lt;/span&gt;  :&lt;span class="pl-c1"&gt;&amp;lt;c-u&amp;gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;execute&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;move +&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;. &lt;span class="pl-smi"&gt;&lt;span class="pl-k"&gt;v:&lt;/span&gt;count1&lt;/span&gt;&lt;span class="pl-c1"&gt;&amp;lt;cr&amp;gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;These mappings also take a count, so &lt;code&gt;2]e&lt;/code&gt; moves the current line 2 lines below.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-quickly-add-empty-lines" class="anchor" aria-hidden="true" href="#quickly-add-empty-lines"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Quickly add empty lines&lt;/h2&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;nnoremap&lt;/span&gt; [&lt;span class="pl-c1"&gt;&amp;lt;space&amp;gt;&lt;/span&gt;  :&lt;span class="pl-c1"&gt;&amp;lt;c-u&amp;gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;put&lt;/span&gt;&lt;span class="pl-k"&gt;!&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt;&lt;span class="pl-en"&gt;repeat&lt;/span&gt;(&lt;span class="pl-en"&gt;nr2char&lt;/span&gt;(&lt;span class="pl-c1"&gt;10&lt;/span&gt;), &lt;span class="pl-smi"&gt;&lt;span class="pl-k"&gt;v:&lt;/span&gt;count1&lt;/span&gt;)&lt;span class="pl-c1"&gt;&amp;lt;cr&amp;gt;&lt;/span&gt;'[
&lt;span class="pl-c1"&gt;nnoremap&lt;/span&gt; ]&lt;span class="pl-c1"&gt;&amp;lt;space&amp;gt;&lt;/span&gt;  :&lt;span class="pl-c1"&gt;&amp;lt;c-u&amp;gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;put&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt;&lt;span class="pl-en"&gt;repeat&lt;/span&gt;(&lt;span class="pl-en"&gt;nr2char&lt;/span&gt;(&lt;span class="pl-c1"&gt;10&lt;/span&gt;), &lt;span class="pl-smi"&gt;&lt;span class="pl-k"&gt;v:&lt;/span&gt;count1&lt;/span&gt;)&lt;span class="pl-c1"&gt;&amp;lt;cr&amp;gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now &lt;code&gt;5[&amp;lt;space&amp;gt;&lt;/code&gt; inserts 5 blank lines above the current line.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-quickly-edit-your-macros" class="anchor" aria-hidden="true" href="#quickly-edit-your-macros"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Quickly edit your macros&lt;/h2&gt;
&lt;p&gt;This is a real gem! The mapping takes a register (or &lt;code&gt;*&lt;/code&gt; by default) and opens
it in the cmdline-window. Hit &lt;code&gt;&amp;lt;cr&amp;gt;&lt;/code&gt; when you're done editing for setting the
register.&lt;/p&gt;
&lt;p&gt;I often use this to correct typos I did while recording a macro.&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;nnoremap&lt;/span&gt; &lt;span class="pl-c1"&gt;&amp;lt;leader&amp;gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;m&lt;/span&gt;  :&lt;span class="pl-c1"&gt;&amp;lt;c-u&amp;gt;&amp;lt;c-r&amp;gt;&amp;lt;c-r&amp;gt;&lt;/span&gt;&lt;span class="pl-k"&gt;=&lt;/span&gt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;let @&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;. &lt;span class="pl-smi"&gt;&lt;span class="pl-k"&gt;v:&lt;/span&gt;register&lt;/span&gt; .&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt; = &lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;. &lt;span class="pl-en"&gt;string&lt;/span&gt;(&lt;span class="pl-en"&gt;getreg&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-k"&gt;v:&lt;/span&gt;register&lt;/span&gt;))&lt;span class="pl-c1"&gt;&amp;lt;cr&amp;gt;&amp;lt;c-f&amp;gt;&amp;lt;left&amp;gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Use it like this &lt;code&gt;&amp;lt;leader&amp;gt;m&lt;/code&gt; or &lt;code&gt;"q&amp;lt;leader&amp;gt;m&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Notice the use of &lt;code&gt;&amp;lt;c-r&amp;gt;&amp;lt;c-r&amp;gt;&lt;/code&gt; to make sure that the &lt;code&gt;&amp;lt;c-r&amp;gt;&lt;/code&gt; is inserted
literally. See &lt;code&gt;:h c_^R^R&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-quickly-jump-to-header-or-source-file" class="anchor" aria-hidden="true" href="#quickly-jump-to-header-or-source-file"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Quickly jump to header or source file&lt;/h2&gt;
&lt;p&gt;This technique can probably be applied to many filetypes. It sets &lt;em&gt;file marks&lt;/em&gt;
(see &lt;code&gt;:h marks&lt;/code&gt;) when leaving a source or header file, so you can quickly jump
back to the last accessed one by using &lt;code&gt;'C&lt;/code&gt; or &lt;code&gt;'H&lt;/code&gt; (see &lt;code&gt;:h 'A&lt;/code&gt;).&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;autocmd&lt;/span&gt; &lt;span class="pl-c1"&gt;BufLeave&lt;/span&gt; &lt;span class="pl-k"&gt;*&lt;/span&gt;.{&lt;span class="pl-c1"&gt;c&lt;/span&gt;,&lt;span class="pl-c1"&gt;cpp&lt;/span&gt;} &lt;span class="pl-c1"&gt;mark&lt;/span&gt; C
&lt;span class="pl-c1"&gt;autocmd&lt;/span&gt; &lt;span class="pl-c1"&gt;BufLeave&lt;/span&gt; &lt;span class="pl-k"&gt;*&lt;/span&gt;.&lt;span class="pl-c1"&gt;h&lt;/span&gt;       &lt;span class="pl-c1"&gt;mark&lt;/span&gt; H&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: The info is saved in the viminfo file, so make sure that &lt;code&gt;:set viminfo?&lt;/code&gt; includes &lt;code&gt;:h viminfo-'&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-quickly-change-font-size-in-gui" class="anchor" aria-hidden="true" href="#quickly-change-font-size-in-gui"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Quickly change font size in GUI&lt;/h2&gt;
&lt;p&gt;I think this was taken from tpope's config:&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;command&lt;/span&gt;&lt;span class="pl-k"&gt;!&lt;/span&gt; Bigger  :&lt;span class="pl-k"&gt;let&lt;/span&gt; &amp;amp;&lt;span class="pl-c1"&gt;guifont&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;substitute&lt;/span&gt;(&amp;amp;&lt;span class="pl-c1"&gt;guifont&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;\d\+$&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;\=submatch(0)+1&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-c1"&gt;command&lt;/span&gt;&lt;span class="pl-k"&gt;!&lt;/span&gt; Smaller :&lt;span class="pl-k"&gt;let&lt;/span&gt; &amp;amp;&lt;span class="pl-c1"&gt;guifont&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;substitute&lt;/span&gt;(&amp;amp;&lt;span class="pl-c1"&gt;guifont&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;\d\+$&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;\=submatch(0)-1&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-change-cursor-style-dependent-on-mode" class="anchor" aria-hidden="true" href="#change-cursor-style-dependent-on-mode"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Change cursor style dependent on mode&lt;/h2&gt;
&lt;p&gt;I like to use a block cursor in normal mode, i-beam cursor in insert mode, and
underline cursor in replace mode.&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;if&lt;/span&gt; &lt;span class="pl-en"&gt;empty&lt;/span&gt;(&lt;span class="pl-c1"&gt;$TMUX&lt;/span&gt;)
  &lt;span class="pl-k"&gt;let&lt;/span&gt; &amp;amp;&lt;span class="pl-c1"&gt;t_SI&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-cce"&gt;\&amp;lt;&lt;/span&gt;Esc&amp;gt;]50;CursorShape=1&lt;span class="pl-cce"&gt;\x&lt;/span&gt;7&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-k"&gt;let&lt;/span&gt; &amp;amp;&lt;span class="pl-c1"&gt;t_EI&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-cce"&gt;\&amp;lt;&lt;/span&gt;Esc&amp;gt;]50;CursorShape=0&lt;span class="pl-cce"&gt;\x&lt;/span&gt;7&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-k"&gt;let&lt;/span&gt; &amp;amp;&lt;span class="pl-c1"&gt;t_SR&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-cce"&gt;\&amp;lt;&lt;/span&gt;Esc&amp;gt;]50;CursorShape=2&lt;span class="pl-cce"&gt;\x&lt;/span&gt;7&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;else&lt;/span&gt;
  &lt;span class="pl-k"&gt;let&lt;/span&gt; &amp;amp;&lt;span class="pl-c1"&gt;t_SI&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-cce"&gt;\&amp;lt;&lt;/span&gt;Esc&amp;gt;Ptmux;&lt;span class="pl-cce"&gt;\&amp;lt;&lt;/span&gt;Esc&amp;gt;&lt;span class="pl-cce"&gt;\&amp;lt;&lt;/span&gt;Esc&amp;gt;]50;CursorShape=1&lt;span class="pl-cce"&gt;\x&lt;/span&gt;7&lt;span class="pl-cce"&gt;\&amp;lt;&lt;/span&gt;Esc&amp;gt;&lt;span class="pl-cce"&gt;\\&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-k"&gt;let&lt;/span&gt; &amp;amp;&lt;span class="pl-c1"&gt;t_EI&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-cce"&gt;\&amp;lt;&lt;/span&gt;Esc&amp;gt;Ptmux;&lt;span class="pl-cce"&gt;\&amp;lt;&lt;/span&gt;Esc&amp;gt;&lt;span class="pl-cce"&gt;\&amp;lt;&lt;/span&gt;Esc&amp;gt;]50;CursorShape=0&lt;span class="pl-cce"&gt;\x&lt;/span&gt;7&lt;span class="pl-cce"&gt;\&amp;lt;&lt;/span&gt;Esc&amp;gt;&lt;span class="pl-cce"&gt;\\&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-k"&gt;let&lt;/span&gt; &amp;amp;&lt;span class="pl-c1"&gt;t_SR&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-cce"&gt;\&amp;lt;&lt;/span&gt;Esc&amp;gt;Ptmux;&lt;span class="pl-cce"&gt;\&amp;lt;&lt;/span&gt;Esc&amp;gt;&lt;span class="pl-cce"&gt;\&amp;lt;&lt;/span&gt;Esc&amp;gt;]50;CursorShape=2&lt;span class="pl-cce"&gt;\x&lt;/span&gt;7&lt;span class="pl-cce"&gt;\&amp;lt;&lt;/span&gt;Esc&amp;gt;&lt;span class="pl-cce"&gt;\\&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;endif&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This simply tells Vim to print a certain sequence of characters (&lt;a href="https://en.wikipedia.org/wiki/Escape_sequence" rel="nofollow"&gt;escape
sequence&lt;/a&gt;) when entering/leaving
insert mode. The underlying terminal, or programs like
&lt;a href="https://tmux.github.io" rel="nofollow"&gt;tmux&lt;/a&gt; that sit between Vim and the terminal, will
process and evaluate it.&lt;/p&gt;
&lt;p&gt;There's one drawback though: there are many terminal emulator implementations
and not all use the same sequences for doing the same things. The sequences used
above might not work with your implementation. Your implementation might not
even support different cursor styles. Check the documentation.&lt;/p&gt;
&lt;p&gt;The example above works with iTerm2.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-dont-lose-selection-when-shifting-sidewards" class="anchor" aria-hidden="true" href="#dont-lose-selection-when-shifting-sidewards"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Don't lose selection when shifting sidewards&lt;/h2&gt;
&lt;p&gt;If you select one or more lines, you can use &lt;code&gt;&amp;lt;&lt;/code&gt; and &lt;code&gt;&amp;gt;&lt;/code&gt; for shifting them
sidewards. Unfortunately you immediately lose the selection afterwards.&lt;/p&gt;
&lt;p&gt;You can use &lt;code&gt;gv&lt;/code&gt; to reselect the last selection (see &lt;code&gt;:h gv&lt;/code&gt;), thus you can work
around it like this:&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;xnoremap&lt;/span&gt;&lt;span class="pl-k"&gt; &amp;lt; &lt;/span&gt; &amp;lt;gv
&lt;span class="pl-c1"&gt;xnoremap&lt;/span&gt;&lt;span class="pl-k"&gt; &amp;gt; &lt;/span&gt; &amp;gt;gv&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now you can use &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; on your visual selection without any problems.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: The same can be achieved using &lt;code&gt;.&lt;/code&gt;, which repeats the last change.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-reload-a-file-on-saving" class="anchor" aria-hidden="true" href="#reload-a-file-on-saving"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Reload a file on saving&lt;/h2&gt;
&lt;p&gt;Using &lt;a href="#autocmds"&gt;autocmds&lt;/a&gt; you can do anything on saving a file, e.g. sourcing
it in case of a dotfile or running a linter to check for syntactical errors in
your source code.&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;autocmd&lt;/span&gt; &lt;span class="pl-c1"&gt;BufWritePost&lt;/span&gt; &lt;span class="pl-c1"&gt;$MYVIMRC&lt;/span&gt; &lt;span class="pl-c1"&gt;source&lt;/span&gt; &lt;span class="pl-c1"&gt;$MYVIMRC&lt;/span&gt;
&lt;span class="pl-c1"&gt;autocmd&lt;/span&gt; &lt;span class="pl-c1"&gt;BufWritePost&lt;/span&gt; &lt;span class="pl-c1"&gt;~/.Xdefaults&lt;/span&gt; &lt;span class="pl-c1"&gt;call&lt;/span&gt; &lt;span class="pl-en"&gt;system&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;xrdb ~/.Xdefaults&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-smarter-cursorline" class="anchor" aria-hidden="true" href="#smarter-cursorline"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Smarter cursorline&lt;/h2&gt;
&lt;p&gt;I love the cursorline, but I only want to use it in the current window and not
when being in insert mode:&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;autocmd&lt;/span&gt; &lt;span class="pl-c1"&gt;InsertLeave&lt;/span&gt;,&lt;span class="pl-c1"&gt;WinEnter&lt;/span&gt; &lt;span class="pl-k"&gt;*&lt;/span&gt; &lt;span class="pl-c1"&gt;set&lt;/span&gt; &lt;span class="pl-c1"&gt;cursorline&lt;/span&gt;
&lt;span class="pl-c1"&gt;autocmd&lt;/span&gt; &lt;span class="pl-c1"&gt;InsertEnter&lt;/span&gt;,&lt;span class="pl-c1"&gt;WinLeave&lt;/span&gt; &lt;span class="pl-k"&gt;*&lt;/span&gt; &lt;span class="pl-c1"&gt;set&lt;/span&gt; &lt;span class="pl-c1"&gt;nocursorline&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-faster-keyword-completion" class="anchor" aria-hidden="true" href="#faster-keyword-completion"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Faster keyword completion&lt;/h2&gt;
&lt;p&gt;The keyword completion (&lt;code&gt;&amp;lt;c-n&amp;gt;&lt;/code&gt;/&lt;code&gt;&amp;lt;c-p&amp;gt;&lt;/code&gt;) tries completing whatever is listed in
the &lt;code&gt;'complete'&lt;/code&gt; option. By default, this also includes tags (which can be
annoying) and scanning all included files (which can be very slow). If you can
live without these things, disable them:&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;set&lt;/span&gt; &lt;span class="pl-c1"&gt;complete&lt;/span&gt;&lt;span class="pl-k"&gt;-=&lt;/span&gt;&lt;span class="pl-c1"&gt;i&lt;/span&gt;&lt;span class="pl-c"&gt;   &lt;span class="pl-c"&gt;"&lt;/span&gt; disable scanning included files&lt;/span&gt;
&lt;span class="pl-c1"&gt;set&lt;/span&gt; &lt;span class="pl-c1"&gt;complete&lt;/span&gt;&lt;span class="pl-k"&gt;-=&lt;/span&gt;&lt;span class="pl-c1"&gt;t&lt;/span&gt;&lt;span class="pl-c"&gt;   &lt;span class="pl-c"&gt;"&lt;/span&gt; disable searching tags&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-cosmetic-changes-to-colorschemes" class="anchor" aria-hidden="true" href="#cosmetic-changes-to-colorschemes"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Cosmetic changes to colorschemes&lt;/h2&gt;
&lt;p&gt;Always use a dark gray statusline, no matter what colorscheme is chosen:&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;autocmd&lt;/span&gt; &lt;span class="pl-c1"&gt;ColorScheme&lt;/span&gt; &lt;span class="pl-k"&gt;*&lt;/span&gt; &lt;span class="pl-c1"&gt;highlight&lt;/span&gt; &lt;span class="pl-c1"&gt;StatusLine&lt;/span&gt; ctermbg&lt;span class="pl-k"&gt;=&lt;/span&gt;&lt;span class="pl-c1"&gt;darkgray&lt;/span&gt; cterm&lt;span class="pl-k"&gt;=&lt;/span&gt;&lt;span class="pl-c1"&gt;NONE&lt;/span&gt; guibg&lt;span class="pl-k"&gt;=&lt;/span&gt;&lt;span class="pl-c1"&gt;darkgray&lt;/span&gt; &lt;span class="pl-c1"&gt;gui&lt;/span&gt;&lt;span class="pl-k"&gt;=&lt;/span&gt;&lt;span class="pl-c1"&gt;NONE&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This triggers every time you use &lt;code&gt;:colorscheme ...&lt;/code&gt;. If you want it to trigger
only for a certain colorscheme:&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;autocmd&lt;/span&gt; &lt;span class="pl-c1"&gt;ColorScheme&lt;/span&gt; desert &lt;span class="pl-c1"&gt;highlight&lt;/span&gt; &lt;span class="pl-c1"&gt;StatusLine&lt;/span&gt; ctermbg&lt;span class="pl-k"&gt;=&lt;/span&gt;&lt;span class="pl-c1"&gt;darkgray&lt;/span&gt; cterm&lt;span class="pl-k"&gt;=&lt;/span&gt;&lt;span class="pl-c1"&gt;NONE&lt;/span&gt; guibg&lt;span class="pl-k"&gt;=&lt;/span&gt;&lt;span class="pl-c1"&gt;darkgray&lt;/span&gt; &lt;span class="pl-c1"&gt;gui&lt;/span&gt;&lt;span class="pl-k"&gt;=&lt;/span&gt;&lt;span class="pl-c1"&gt;NONE&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This triggers only for &lt;code&gt;:colorscheme desert&lt;/code&gt;.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-commands-1" class="anchor" aria-hidden="true" href="#commands-1"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Commands&lt;/h1&gt;
&lt;p&gt;Useful commands that are good to know. Use &lt;code&gt;:h :&amp;lt;command name&amp;gt;&lt;/code&gt; to learn more
about them, e.g. &lt;code&gt;:h :global&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-global-and-vglobal" class="anchor" aria-hidden="true" href="#global-and-vglobal"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;:global and :vglobal&lt;/h2&gt;
&lt;p&gt;Execute a command on all matching lines. E.g. &lt;code&gt;:global /regexp/ print&lt;/code&gt; will use
&lt;code&gt;:print&lt;/code&gt; on all lines that contain "regexp".&lt;/p&gt;
&lt;p&gt;Fun fact: You probably all know good old grep, the filter program written by Ken
Thompson. What does it do? It prints all lines matching a certain regular
expression! Now guess the short form of &lt;code&gt;:global /regexp/ print&lt;/code&gt;? That's right!
It's &lt;code&gt;:g/re/p&lt;/code&gt;. Ken Thompson was inspired by vi's &lt;code&gt;:global&lt;/code&gt; when he wrote grep.&lt;/p&gt;
&lt;p&gt;Despite its name, &lt;code&gt;:global&lt;/code&gt; only acts on all lines by default, but it also takes
a range. Assume you want use &lt;code&gt;:delete&lt;/code&gt; on all lines from the current line to the
next blank line (matched by the regular expression &lt;code&gt;^$&lt;/code&gt;) that contain "foo":&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;:,&lt;span class="pl-sr"&gt;/^$/&lt;/span&gt;&lt;span class="pl-c1"&gt;g&lt;/span&gt;&lt;span class="pl-sr"&gt;/foo/&lt;/span&gt;&lt;span class="pl-c1"&gt;d&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For executing commands on all lines that do &lt;em&gt;not&lt;/em&gt; match a given pattern, use
&lt;code&gt;:global!&lt;/code&gt; or its alias &lt;code&gt;:vglobal&lt;/code&gt; (think &lt;em&gt;inVerse&lt;/em&gt;) instead.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-normal-and-execute" class="anchor" aria-hidden="true" href="#normal-and-execute"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;:normal and :execute&lt;/h2&gt;
&lt;p&gt;These commands are commonly used in Vim scripts.&lt;/p&gt;
&lt;p&gt;With &lt;code&gt;:normal&lt;/code&gt; you can do normal mode mappings from the command-line. E.g.
&lt;code&gt;:normal! 4j&lt;/code&gt; will make the cursor go down 4 lines (without using any custom
mapping for "j" due to the "!").&lt;/p&gt;
&lt;p&gt;Mind that &lt;code&gt;:normal&lt;/code&gt; also takes a &lt;a href="#ranges"&gt;range&lt;/a&gt;, so &lt;code&gt;:%norm! Iabc&lt;/code&gt; would
prepend "abc" to every line.&lt;/p&gt;
&lt;p&gt;With &lt;code&gt;:execute&lt;/code&gt; you can mix commands with expressions. Assume you edit a C
source file and want to switch to its header file:&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;:&lt;span class="pl-c1"&gt;execute&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;edit&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-en"&gt;fnamemodify&lt;/span&gt;(&lt;span class="pl-en"&gt;expand&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;%&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;), &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;:r&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;) . &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;.h&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Both commands are often used together. Assume you want to make the cursor go
down "n" lines:&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;:&lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-c1"&gt;n&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;
:&lt;span class="pl-c1"&gt;execute&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;normal!&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;n&lt;/span&gt; . &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;j&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-redir-and-execute" class="anchor" aria-hidden="true" href="#redir-and-execute"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;:redir and execute()&lt;/h2&gt;
&lt;p&gt;Many commands print messages and &lt;code&gt;:redir&lt;/code&gt; allows to redirect that output. You
can redirect to files, &lt;a href="#registers"&gt;registers&lt;/a&gt; or variables.&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;:&lt;span class="pl-c1"&gt;redir&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt;&amp;gt; &lt;span class="pl-c1"&gt;var&lt;/span&gt;
:&lt;span class="pl-c1"&gt;reg&lt;/span&gt;
:&lt;span class="pl-c1"&gt;redir&lt;/span&gt; END
:&lt;span class="pl-c1"&gt;echo&lt;/span&gt; &lt;span class="pl-c1"&gt;var&lt;/span&gt;
:&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;"&lt;/span&gt; For fun let's also put it onto the current buffer.&lt;/span&gt;
:&lt;span class="pl-c1"&gt;put&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt;&lt;span class="pl-c1"&gt;var&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In Vim 8 there is an even shorter way:&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;:&lt;span class="pl-c1"&gt;put&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt;&lt;span class="pl-en"&gt;execute&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;reg&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Help:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:h :redir
:h execute()
&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;&lt;a id="user-content-debugging-1" class="anchor" aria-hidden="true" href="#debugging-1"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Debugging&lt;/h1&gt;
&lt;h2&gt;&lt;a id="user-content-general-tips" class="anchor" aria-hidden="true" href="#general-tips"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;General tips&lt;/h2&gt;
&lt;p&gt;If you encounter a strange behaviour, try reproducing it like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;vim -u NONE -N
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will start Vim without vimrc (thus default settings) and in nocompatible
mode (which makes it use Vim defaults instead of vi defaults). (See &lt;code&gt;:h --noplugin&lt;/code&gt; for other combinations of what to load at start.)&lt;/p&gt;
&lt;p&gt;If you can still reproduce it now, it's most likely a bug in Vim itself! Report
it to the &lt;a href="https://groups.google.com/forum/#!forum/vim_dev" rel="nofollow"&gt;vim_dev&lt;/a&gt; mailing
list. Most of the time the issue won't be resolved at this time and you'll have
to further investigate.&lt;/p&gt;
&lt;p&gt;Plugins often introduce new/changed/faulty behaviour. E.g. if it happens on
saving, check &lt;code&gt;:verb au BufWritePost&lt;/code&gt; to get a list of potential culprits.&lt;/p&gt;
&lt;p&gt;If you're using a plugin manager, comment them out until you find the culprit.&lt;/p&gt;
&lt;p&gt;Issue is still not resolved? If it's not a plugin, it must be your other
settings, so maybe your options or autocmds etc.&lt;/p&gt;
&lt;p&gt;Time to use binary search. Repeatedly split the search space in two until you
find the culprit line. Due to the nature of binary division, it won't take many
steps.&lt;/p&gt;
&lt;p&gt;In practice, it works like this: Put the &lt;code&gt;:finish&lt;/code&gt; command in the middle of your
vimrc. Vim will skip everything after it. If it still happens, the problem is in
the active upper half. Move the &lt;code&gt;:finish&lt;/code&gt; to the middle of &lt;em&gt;that&lt;/em&gt; half.
Otherwise, the issue is in the inactive lower half. Move the &lt;code&gt;:finish&lt;/code&gt; to the
middle of &lt;em&gt;that&lt;/em&gt; half. And so on.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-verbosity" class="anchor" aria-hidden="true" href="#verbosity"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Verbosity&lt;/h2&gt;
&lt;p&gt;Another useful way for observing what Vim is currently doing is increasing the
verbosity level. Currently Vim supports 9 different levels. See &lt;code&gt;:h 'verbose'&lt;/code&gt;
for the full list.&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;:&lt;span class="pl-c1"&gt;e&lt;/span&gt; &lt;span class="pl-sr"&gt;/tmp/&lt;/span&gt;foo
:&lt;span class="pl-c1"&gt;set&lt;/span&gt; &lt;span class="pl-c1"&gt;verbose&lt;/span&gt;&lt;span class="pl-k"&gt;=&lt;/span&gt;&lt;span class="pl-c1"&gt;2&lt;/span&gt;
:&lt;span class="pl-c1"&gt;w&lt;/span&gt;
:&lt;span class="pl-c1"&gt;set&lt;/span&gt; &lt;span class="pl-c1"&gt;verbose&lt;/span&gt;&lt;span class="pl-k"&gt;=&lt;/span&gt;&lt;span class="pl-c1"&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This would show all the files that get sourced, e.g. the undo file or various
plugins that act on saving.&lt;/p&gt;
&lt;p&gt;If you only want increase verbosity for a single command, there's also
&lt;code&gt;:verbose&lt;/code&gt;, which simply gets put in front of any other command. It takes the
verbosity level as count and defaults to 1:&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;:&lt;span class="pl-c1"&gt;verb&lt;/span&gt; &lt;span class="pl-c1"&gt;set&lt;/span&gt; &lt;span class="pl-c1"&gt;verbose&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;"&lt;/span&gt;  verbose=1&lt;/span&gt;
:&lt;span class="pl-c1"&gt;10&lt;/span&gt;verb &lt;span class="pl-c1"&gt;set&lt;/span&gt; &lt;span class="pl-c1"&gt;verbose&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;"&lt;/span&gt;  verbose=10&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It's very often used with its default verbosity level 1 to show where an option
was set last:&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;:&lt;span class="pl-c1"&gt;verb&lt;/span&gt; &lt;span class="pl-c1"&gt;set&lt;/span&gt; &lt;span class="pl-c1"&gt;ai&lt;/span&gt;?
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;"&lt;/span&gt;      Last set from ~/.vim/vimrc&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Naturally, the higher the verbosity level the more overwhelming the output. But
fear no more, you can simply redirect the output to a file:&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;:&lt;span class="pl-c1"&gt;set&lt;/span&gt; &lt;span class="pl-c1"&gt;verbosefile&lt;/span&gt;&lt;span class="pl-k"&gt;=&lt;/span&gt;&lt;span class="pl-sr"&gt;/tmp/&lt;/span&gt;foo | &lt;span class="pl-c1"&gt;15&lt;/span&gt;verbose &lt;span class="pl-c1"&gt;echo&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;foo&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; | &lt;span class="pl-c1"&gt;vsplit&lt;/span&gt; &lt;span class="pl-sr"&gt;/tmp/&lt;/span&gt;foo&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can also enable verbosity at starting time, with the &lt;code&gt;-V&lt;/code&gt; option. It
defaults to verbosity level 10. E.g. &lt;code&gt;vim -V5&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-profiling-startup-time" class="anchor" aria-hidden="true" href="#profiling-startup-time"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Profiling startup time&lt;/h2&gt;
&lt;p&gt;Vim startup feels slow? Time to crunch some numbers:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;vim --startuptime /tmp/startup.log +q &amp;amp;&amp;amp; vim /tmp/startup.log
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The first column is the most important as it shows the elapsed absolute time. If
there is a big jump in time between two lines, the second line is either a very
big file or a file with faulty VimL code that is worth investigating.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-profiling-at-runtime" class="anchor" aria-hidden="true" href="#profiling-at-runtime"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Profiling at runtime&lt;/h2&gt;
&lt;p&gt;Required &lt;a href="#what-kind-of-vim-am-i-running"&gt;feature&lt;/a&gt;: &lt;code&gt;+profile&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Vim provides a built-in capability for profiling at runtime and is a great way
to find slow code in your environment.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;:profile&lt;/code&gt; command takes a bunch of sub-commands for specifying what to
profile.&lt;/p&gt;
&lt;p&gt;If you want to profile &lt;em&gt;everything&lt;/em&gt;, do this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:profile start /tmp/profile.log
:profile file *
:profile func *
&amp;lt;do something in Vim&amp;gt;
:qa
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Vim keeps the profiling information in memory and only writes it out to the
logfile on exit. (Neovim has fixed this using &lt;code&gt;:profile dump&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Have a look at &lt;code&gt;/tmp/profile.log&lt;/code&gt;. All code that was executed during profiling
will be shown. Every line, how often it was executed and how much time it took.&lt;/p&gt;
&lt;p&gt;Jump to the bottom of the log. Here are two different sections &lt;code&gt;FUNCTIONS SORTED ON TOTAL TIME&lt;/code&gt; and &lt;code&gt;FUNCTIONS SORTED ON SELF TIME&lt;/code&gt; that are worth gold. At a
quick glance you can see which functions are taking the longest.&lt;/p&gt;
&lt;p&gt;You can use &lt;code&gt;:profile&lt;/code&gt; during startup as well:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ vim --cmd 'prof start prof.log | prof file * | prof func *' test.c
:q
$ tail -50 prof.log
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;a id="user-content-debugging-vim-scripts" class="anchor" aria-hidden="true" href="#debugging-vim-scripts"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Debugging Vim scripts&lt;/h2&gt;
&lt;p&gt;If you ever used a command-line debugger before, &lt;code&gt;:debug&lt;/code&gt; will quickly feel
familiar.&lt;/p&gt;
&lt;p&gt;Simply prepend &lt;code&gt;:debug&lt;/code&gt; to any other command and you'll be put into debug mode.
That is, the execution will stop at the first line about to be executed and that
line will be displayed.&lt;/p&gt;
&lt;p&gt;See &lt;code&gt;:h &amp;gt;cont&lt;/code&gt; and below for the 6 available debugger commands and note that,
like in gdb and similar debuggers, you can also use their short forms: &lt;code&gt;c&lt;/code&gt;, &lt;code&gt;q&lt;/code&gt;,
&lt;code&gt;n&lt;/code&gt;, &lt;code&gt;s&lt;/code&gt;, &lt;code&gt;i&lt;/code&gt;, and &lt;code&gt;f&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Apart from that those, you're free to use any Vim command, e.g. &lt;code&gt;:echo myvar&lt;/code&gt;,
which gets executed in the context of the current position in the code.&lt;/p&gt;
&lt;p&gt;You basically get a
&lt;a href="https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop" rel="nofollow"&gt;REPL&lt;/a&gt; by
simply using &lt;code&gt;:debug 1&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;It would be a pain if you had to single-step through every single line, so of
course we can define breakpoints, too. (Breakpoints are called breakpoints,
because the execution stops when they're hit, thus you can simply skip code
you're not interested in.) See &lt;code&gt;:h :breakadd&lt;/code&gt;, &lt;code&gt;:h :breakdel&lt;/code&gt;, and &lt;code&gt;:h :breaklist&lt;/code&gt; for further details.&lt;/p&gt;
&lt;p&gt;Let's assume you want to know what code is run every time you save a file:&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;:&lt;span class="pl-c1"&gt;au&lt;/span&gt; &lt;span class="pl-c1"&gt;BufWritePost&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;"&lt;/span&gt; signify  BufWritePost&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;"&lt;/span&gt;     *         call sy#start()&lt;/span&gt;
:&lt;span class="pl-c1"&gt;breakadd&lt;/span&gt; func &lt;span class="pl-k"&gt;*&lt;/span&gt;&lt;span class="pl-c1"&gt;start&lt;/span&gt;
:&lt;span class="pl-c1"&gt;w&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;"&lt;/span&gt; Breakpoint in "sy#start" line 1&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;"&lt;/span&gt; Entering Debug mode.  Type "cont" to continue.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;"&lt;/span&gt; function sy#start&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;"&lt;/span&gt; line 1: if g:signify_locked&lt;/span&gt;
&amp;gt;&lt;span class="pl-c1"&gt;s&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;"&lt;/span&gt; function sy#start&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;"&lt;/span&gt; line 3: endif&lt;/span&gt;
&amp;gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;"&lt;/span&gt; function sy#start&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;"&lt;/span&gt; line 5: let sy_path = resolve(expand('%:p'))&lt;/span&gt;
&amp;gt;&lt;span class="pl-c1"&gt;q&lt;/span&gt;
:&lt;span class="pl-c1"&gt;breakdel&lt;/span&gt; &lt;span class="pl-k"&gt;*&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you can see, using &lt;code&gt;&amp;lt;cr&amp;gt;&lt;/code&gt; will repeat the previous debugger command, &lt;code&gt;s&lt;/code&gt; in
this case.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;:debug&lt;/code&gt; can be used in combination with the &lt;a href="#verbosity"&gt;verbose&lt;/a&gt; option.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-debugging-syntax-files" class="anchor" aria-hidden="true" href="#debugging-syntax-files"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Debugging syntax files&lt;/h2&gt;
&lt;p&gt;Syntax files are often the cause for slowdowns due to wrong and/or complex
regular expressions. If the &lt;code&gt;+profile&lt;/code&gt; &lt;a href="#what-kind-of-vim-am-i-running"&gt;feature&lt;/a&gt;
is compiled in, Vim provides the super useful &lt;code&gt;:syntime&lt;/code&gt; command.&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;:&lt;span class="pl-c1"&gt;syntime&lt;/span&gt; &lt;span class="pl-c1"&gt;on&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;"&lt;/span&gt; hit &amp;lt;c-l&amp;gt; a few times to redraw the window which causes the syntax rules to get applied again&lt;/span&gt;
:&lt;span class="pl-c1"&gt;syntime&lt;/span&gt; &lt;span class="pl-c1"&gt;off&lt;/span&gt;
:&lt;span class="pl-c1"&gt;syntime&lt;/span&gt; &lt;span class="pl-c1"&gt;report&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The output contains important metrics. E.g. you can see which regexp takes too
long and should be optimized or which regexps are used all the time but never
even match.&lt;/p&gt;
&lt;p&gt;See &lt;code&gt;:h :syntime&lt;/code&gt;.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-miscellaneous-1" class="anchor" aria-hidden="true" href="#miscellaneous-1"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Miscellaneous&lt;/h1&gt;
&lt;h2&gt;&lt;a id="user-content-additional-resources" class="anchor" aria-hidden="true" href="#additional-resources"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Additional resources&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Resource&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="http://www.moolenaar.net/habits.html" rel="nofollow"&gt;Seven habits of effective text editing&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;By Bram Moolenaar, the author of Vim.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="http://www.moolenaar.net/habits_2007.pdf" rel="nofollow"&gt;Seven habits of effective text editing 2.0 (PDF)&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;See above.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="http://www.ibm.com/developerworks/views/linux/libraryview.jsp?sort_order=asc&amp;amp;sort_by=Title&amp;amp;search_by=scripting+the+vim+editor" rel="nofollow"&gt;IBM DeveloperWorks: Scripting the Vim editor&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Five-part series on Vim scripting.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="http://learnvimscriptthehardway.stevelosh.com" rel="nofollow"&gt;Learn Vimscript the Hard Way&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Develop a Vim plugin from scratch.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="http://www.amazon.com/Practical-Vim-Edit-Speed-Thought/dp/1680501275/" rel="nofollow"&gt;Practical Vim (2nd Edition)&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Hands down the best book about Vim.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="http://www.viemu.com/a-why-vi-vim.html" rel="nofollow"&gt;Why, oh WHY, do those #?@! nutheads use vi?&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Common misconceptions explained.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="http://stackoverflow.com/a/1220118" rel="nofollow"&gt;Your problem with Vim is that you don't grok vi&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Concise, informative and correct. A real gem.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;&lt;a id="user-content-screencasts" class="anchor" aria-hidden="true" href="#screencasts"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Screencasts&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://vimcasts.org/episodes/archive" rel="nofollow"&gt;vimcasts.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/channel/UCXPHFM88IlFn68OmLwtPmZA" rel="nofollow"&gt;By wincent&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://derekwyatt.org/vim/tutorials/index.html" rel="nofollow"&gt;By Derek Wyatt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-vim-distributions" class="anchor" aria-hidden="true" href="#vim-distributions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Vim distributions&lt;/h2&gt;
&lt;p&gt;Vim distributions are bundles of custom settings and plugins for Vim.&lt;/p&gt;
&lt;p&gt;More advanced users know how to configure their editor anyway, so distributions
are mostly targeted at beginners. If you think about that, it's quite
paradoxical though: Making it easier by adding even more things to learn about?&lt;/p&gt;
&lt;p&gt;I know that many people don't want to spend hours and hours on customizing an
editor (and actually you never stop customizing your vimrc when you finally got
hooked), but eventually you only get efficient in Vim when you take the time to
learn it properly.&lt;/p&gt;
&lt;p&gt;Repeat after me: "A programmer should know their tools."&lt;/p&gt;
&lt;p&gt;Anyway, if you know what you're doing, you might draw some inspiration from
looking at a few distributions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://cream.sourceforge.net" rel="nofollow"&gt;cream&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/carlhuda/janus.git"&gt;janus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/SpaceVim/SpaceVim"&gt;spacevim&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/spf13/spf13-vim"&gt;spf13&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-standard-plugins" class="anchor" aria-hidden="true" href="#standard-plugins"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Standard plugins&lt;/h2&gt;
&lt;p&gt;Many people are surprised by the fact that Vim comes with a handful of standard
plugins. Some get loaded by default (&lt;code&gt;:e $VIMRUNTIME/plugin&lt;/code&gt;) and some are not
(&lt;code&gt;:e $VIMRUNTIME/pack/dist/opt&lt;/code&gt;). Read &lt;code&gt;:h pack-add&lt;/code&gt; on how to source the
latter.&lt;/p&gt;
&lt;p&gt;Most of the plugins that get loaded by default will never get used, though.
Disable them as you see fit. They will still be shown as sourced
(&lt;code&gt;:scriptnames&lt;/code&gt;), but only the first lines actually get read before Vim bails
out. No further code (mappings, commands, logic) will be processed.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Plugin&lt;/th&gt;
&lt;th&gt;Disable it using..&lt;/th&gt;
&lt;th&gt;Help&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;2html&lt;/td&gt;
&lt;td&gt;&lt;code&gt;let g:loaded_2html_plugin = 1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:h 2html&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;getscript&lt;/td&gt;
&lt;td&gt;&lt;code&gt;let g:loaded_getscriptPlugin = 1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:h pi_getscript&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;gzip&lt;/td&gt;
&lt;td&gt;&lt;code&gt;let g:loaded_gzip = 1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:h pi_gzip&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;logipat&lt;/td&gt;
&lt;td&gt;&lt;code&gt;let g:loaded_logipat = 1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:h pi_logipat&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;matchparen&lt;/td&gt;
&lt;td&gt;&lt;code&gt;let g:loaded_matchparen = 1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:h pi_paren&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;netrw&lt;/td&gt;
&lt;td&gt;&lt;code&gt;let g:loaded_netrwPlugin = 1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:h pi_netrw&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;rrhelper&lt;/td&gt;
&lt;td&gt;&lt;code&gt;let g:loaded_rrhelper = 1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:e $VIMRUNTIME/plugin/rrhelper.vim&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;spellfile&lt;/td&gt;
&lt;td&gt;&lt;code&gt;let g:loaded_spellfile_plugin = 1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:h spellfile.vim&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tar&lt;/td&gt;
&lt;td&gt;&lt;code&gt;let g:loaded_tarPlugin = 1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:h pi_tar&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;vimball&lt;/td&gt;
&lt;td&gt;&lt;code&gt;let g:loaded_vimballPlugin = 1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:h pi_vimball&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;zip&lt;/td&gt;
&lt;td&gt;&lt;code&gt;let g:loaded_zipPlugin = 1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:h pi_zip&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a id="user-content-map-capslock-to-control" class="anchor" aria-hidden="true" href="#map-capslock-to-control"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Map CapsLock to Control&lt;/h2&gt;
&lt;p&gt;CapsLock belongs to the most useless keys on your keyboard, but it's much easier
to reach than the Control key, since it lies on your &lt;a href="https://raw.githubusercontent.com/mhinz/vim-galore/master/static/images/content-homerow.png" rel="nofollow"&gt;home
row&lt;/a&gt;.
Mapping CapsLock to Control is a great way to prevent or at least reduce
&lt;a href="https://de.wikipedia.org/wiki/Repetitive-Strain-Injury-Syndrom" rel="nofollow"&gt;RSI&lt;/a&gt; if you
program a lot.&lt;/p&gt;
&lt;p&gt;Attention: When you get used to it, you can't live without it anymore.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;macOS&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;System Preferences -&amp;gt; Keyboard -&amp;gt; Keyboard Tab -&amp;gt; Modifier Keys&lt;/code&gt;. Change
"CapsLock" to "Control".&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Linux&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;To change the keys in X, put this in your &lt;code&gt;~/.xmodmap&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;remove Lock = Caps_Lock
keysym Caps_Lock = Control_L
add Control = Control_L
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Afterwards source it via &lt;code&gt;$ xmodmap ~/.xmodmap&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;An alternative would be using &lt;a href="https://github.com/oblitum/caps2esc"&gt;caps2esc&lt;/a&gt; or
&lt;a href="https://github.com/alols/xcape"&gt;xcape&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Windows&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;See &lt;a href="http://superuser.com/questions/764782/map-caps-lock-to-control-in-windows-8-1" rel="nofollow"&gt;superuser.com: Map Caps-Lock to Control in Windows
8.1&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-generating-html-from-buffer" class="anchor" aria-hidden="true" href="#generating-html-from-buffer"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Generating HTML from buffer&lt;/h2&gt;
&lt;p&gt;Generate HTML from any buffer using &lt;code&gt;:TOhtml&lt;/code&gt; from the 2html &lt;a href="#standard-plugins"&gt;standard
plugin&lt;/a&gt;. The output can be used for printing or easy web
publishing.&lt;/p&gt;
&lt;p&gt;The command creates a new buffer of the same name with &lt;code&gt;.html&lt;/code&gt; appended. The
colors are the same as seen in Vim. They depend on the
&lt;a href="#colorschemes"&gt;colorscheme&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The plugin knows several options to finetune the output, e.g. for setting the
encoding and font.&lt;/p&gt;
&lt;p&gt;See &lt;code&gt;:h :TOhtml&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-easter-eggs" class="anchor" aria-hidden="true" href="#easter-eggs"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Easter eggs&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Command&lt;/th&gt;
&lt;th&gt;Message&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;:Ni!&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Do you demand a shrubbery?&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;:h 'sm'&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;NOTE: Use of the short form is rated PG.&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;:h 42&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;What is the meaning of life, the universe and everything? Douglas Adams, the only person who knew what this question really was about is now dead, unfortunately.  So now you might wonder what the meaning of death is...&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;:h UserGettingBored&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;When the user presses the same key 42 times. Just kidding! :-)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;:h bar&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Ceci n'est pas une pipe.&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;:h holy-grail&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;You found it, Arthur!&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;:h map-modes&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:nunmap can also be used outside of a monastery.&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;:help!&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;E478: Don't panic!&lt;/code&gt; (Glitch? When used in a help buffer (&lt;code&gt;buftype=help&lt;/code&gt;) this works like &lt;code&gt;:h help.txt&lt;/code&gt; instead.)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;:smile&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Try it out yourself. ;-) Added in 7.4.1005.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a id="user-content-why-hjkl-for-navigation" class="anchor" aria-hidden="true" href="#why-hjkl-for-navigation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Why hjkl for navigation?&lt;/h2&gt;
&lt;p&gt;When &lt;a href="https://en.wikipedia.org/wiki/Bill_Joy" rel="nofollow"&gt;Bill Joy&lt;/a&gt; created
&lt;a href="https://en.wikipedia.org/wiki/Vi" rel="nofollow"&gt;vi&lt;/a&gt;, a predecessor of Vim, he did it on a
&lt;a href="https://en.wikipedia.org/wiki/ADM-3A" rel="nofollow"&gt;ADM-3A&lt;/a&gt; which had no extra cursor buttons
but used, you might already guessed it, hjkl instead.&lt;/p&gt;
&lt;p&gt;Keyboard layout: &lt;a href="https://raw.githubusercontent.com/mhinz/vim-galore/master/static/images/content-adm-3a-layout.jpg" rel="nofollow"&gt;click&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This also shows why &lt;code&gt;~&lt;/code&gt; is used to denote the home directory on Unix systems.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-common-problems-1" class="anchor" aria-hidden="true" href="#common-problems-1"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Common problems&lt;/h1&gt;
&lt;h2&gt;&lt;a id="user-content-editing-small-files-is-slow" class="anchor" aria-hidden="true" href="#editing-small-files-is-slow"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Editing small files is slow&lt;/h2&gt;
&lt;p&gt;There are two things which can have a huge impact on performance:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Complex &lt;strong&gt;regular expressions&lt;/strong&gt;. Particular the Ruby syntax file caused
people to have slowdowns in the past. (Also see &lt;a href="#debugging-syntax-files"&gt;Debugging syntax files&lt;/a&gt;.)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Screen redraws&lt;/strong&gt;. Some features force all lines to redraw.&lt;/li&gt;
&lt;/ol&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Typical culprit&lt;/th&gt;
&lt;th&gt;Why?&lt;/th&gt;
&lt;th&gt;Solution?&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;:set cursorline&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Causes all lines to redraw.&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:set nocursorline&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;:set cursorcolumn&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Causes all lines to redraw.&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:set nocursorcolumn&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;:set relativenumber&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Causes all lines to redraw.&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:set norelativenumber&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;:set foldmethod=syntax&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;If the syntax file is slow already, this makes it even worse.&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:set foldmethod=manual&lt;/code&gt;, &lt;code&gt;:set foldmethod=marker&lt;/code&gt; or &lt;a href="https://github.com/Konfekt/FastFold"&gt;FastFold&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;:set synmaxcol=3000&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Due to internal representation, Vim has problems with long lines in general. Highlights columns till column 3000.&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:set synmaxcol=200&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;matchparen.vim&lt;/td&gt;
&lt;td&gt;Loaded by default. Uses regular expressions to find the accompanying parenthesis.&lt;/td&gt;
&lt;td&gt;Disable plugin: &lt;code&gt;:h matchparen&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: You only need to do this if you experience actual performance
drawbacks. In most cases using the things mentioned above is absolutely fine.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-editing-huge-files-is-slow" class="anchor" aria-hidden="true" href="#editing-huge-files-is-slow"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Editing huge files is slow&lt;/h2&gt;
&lt;p&gt;The biggest issue with big files is, that Vim reads the whole file at once. This
is done due to how buffers are represented internally.
(&lt;a href="https://groups.google.com/forum/#!topic/vim_dev/oY3i8rqYGD4/discussion" rel="nofollow"&gt;Discussion on vim_dev@&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;If you only want to read, &lt;code&gt;tail hugefile | vim -&lt;/code&gt; is a good workaround.&lt;/p&gt;
&lt;p&gt;If you can live without syntax, settings and plugins for the moment:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ vim -u NONE -N
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This should make navigation quite a lot faster, especially since no expensive
regular expressions for syntax highlighting are used. You should also tell Vim
not to use swapfiles and viminfo files to avoid long delays on writing:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ vim -n -u NONE -i NONE -N
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Putting it in a nutshell, try to avoid using Vim when intending to write really
huge files. :\&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-bracketed-paste-or-why-do-i-have-to-set-paste-all-the-time" class="anchor" aria-hidden="true" href="#bracketed-paste-or-why-do-i-have-to-set-paste-all-the-time"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Bracketed paste (or why do I have to set 'paste' all the time?)&lt;/h2&gt;
&lt;p&gt;Bracketed paste mode allows terminal emulators to distinguish between typed text
and pasted text.&lt;/p&gt;
&lt;p&gt;Did you ever tried pasting code into Vim and afterwards everything seemed messed
up?&lt;/p&gt;
&lt;p&gt;This only happens if you paste via &lt;code&gt;cmd+v&lt;/code&gt;, &lt;code&gt;shift-insert&lt;/code&gt;, &lt;code&gt;middle-click&lt;/code&gt; etc.
because then you're just throwing text at the terminal emulator. Vim doesn't
know that you just pasted the text, it thinks you're an extremely fast typist.
Accordingly, it tries to indent the lines and fails.&lt;/p&gt;
&lt;p&gt;Obviously this is not an issue, if you paste using Vim's registers, e.g. &lt;code&gt;"+p&lt;/code&gt;,
because then Vim knows that you're actually pasting.&lt;/p&gt;
&lt;p&gt;To workaround this, you have to &lt;code&gt;:set paste&lt;/code&gt;, so it gets pasted as-is. See &lt;code&gt;:h 'paste'&lt;/code&gt; and &lt;code&gt;:h 'pastetoggle'&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you're fed up with toggling &lt;code&gt;'paste'&lt;/code&gt; all the time, have a look at this fine
plugin that does it for you:
&lt;a href="https://github.com/ConradIrwin/vim-bracketed-paste"&gt;bracketed-paste&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Additional read from the same author as the plugin:
&lt;a href="http://cirw.in/blog/bracketed-paste" rel="nofollow"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Neovim&lt;/strong&gt;: Neovim tries to make all of this much more seamless and sets
bracketed paste mode automatically if the terminal emulator supports it.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-delays-when-using-escape-key-in-terminal" class="anchor" aria-hidden="true" href="#delays-when-using-escape-key-in-terminal"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Delays when using escape key in terminal&lt;/h2&gt;
&lt;p&gt;If you live in the command-line, you probably use a so-called &lt;em&gt;terminal
emulator&lt;/em&gt; like xterm, gnome-terminal, iTerm2, etc. (opposed to a real
&lt;a href="https://en.wikipedia.org/wiki/Computer_terminal" rel="nofollow"&gt;terminal&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Like their ancestors, terminal emulators use &lt;a href="https://en.wikipedia.org/wiki/Escape_sequence" rel="nofollow"&gt;escape
sequences&lt;/a&gt; (or &lt;em&gt;control
sequences&lt;/em&gt;) to control things like moving the cursor, changing text colors, etc.
They're simply strings of ASCII characters starting with an escape character
(displayed in &lt;a href="https://en.wikipedia.org/wiki/Caret_notation" rel="nofollow"&gt;caret notation&lt;/a&gt; as
&lt;code&gt;^[&lt;/code&gt;). When such a string arrives, the terminal emulator looks up the
accompanying action in the &lt;a href="https://en.wikipedia.org/wiki/Terminfo" rel="nofollow"&gt;terminfo&lt;/a&gt;
database.&lt;/p&gt;
&lt;p&gt;To make the problem clearer, I'll explain mapping timeouts first. They always
happen when there's ambiguity between mappings:&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;:&lt;span class="pl-c1"&gt;nnoremap&lt;/span&gt; ,&lt;span class="pl-c1"&gt;a&lt;/span&gt;  :&lt;span class="pl-c1"&gt;echo&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;foo&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;&amp;lt;cr&amp;gt;&lt;/span&gt;
:&lt;span class="pl-c1"&gt;nnoremap&lt;/span&gt; ,&lt;span class="pl-c1"&gt;ab&lt;/span&gt; :&lt;span class="pl-c1"&gt;echo&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;bar&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;&amp;lt;cr&amp;gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Both mappings work as expected, but when typing &lt;code&gt;,a&lt;/code&gt;, there will be a delay of 1
second, because Vim waits whether the user keys in another &lt;code&gt;b&lt;/code&gt; or not.&lt;/p&gt;
&lt;p&gt;Escape sequences pose the same problem:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;esc&amp;gt;&lt;/code&gt; is used a lot for returning to normal mode or quitting an action.&lt;/li&gt;
&lt;li&gt;Cursor keys are encoded using escape sequences.&lt;/li&gt;
&lt;li&gt;Vim expects &lt;kbd&gt;Alt&lt;/kbd&gt; (also called &lt;em&gt;Meta key&lt;/em&gt;) to send a proper 8-bit
encoding with the high bit set, but many terminal emulators don't support it
(or don't enable it by default) and send an escape sequence instead.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can test the above like this: &lt;code&gt;vim -u NONE -N&lt;/code&gt; and type &lt;code&gt;i&amp;lt;c-v&amp;gt;&amp;lt;left&amp;gt;&lt;/code&gt; and
you'll see a sequence inserted that starts with &lt;code&gt;^[&lt;/code&gt; which denotes the escape
character.&lt;/p&gt;
&lt;p&gt;Putting it in a nutshell, Vim has a hard time distinguishing between a typed
&lt;code&gt;&amp;lt;esc&amp;gt;&lt;/code&gt; character and a proper escape sequence.&lt;/p&gt;
&lt;p&gt;By default, Vim uses &lt;code&gt;:set timeout timeoutlen=1000&lt;/code&gt;, so it delays on ambiguity
of mappings &lt;em&gt;and&lt;/em&gt; key codes by 1 second. This is a sane value for mappings, but
you can define the key code timeout on its own which is the most common
workaround for this entire issue:&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;set&lt;/span&gt; &lt;span class="pl-c1"&gt;timeout&lt;/span&gt;&lt;span class="pl-c"&gt;           &lt;span class="pl-c"&gt;"&lt;/span&gt; for mappings&lt;/span&gt;
&lt;span class="pl-c1"&gt;set&lt;/span&gt; &lt;span class="pl-c1"&gt;timeoutlen&lt;/span&gt;&lt;span class="pl-k"&gt;=&lt;/span&gt;&lt;span class="pl-c1"&gt;1000&lt;/span&gt;&lt;span class="pl-c"&gt;   &lt;span class="pl-c"&gt;"&lt;/span&gt; default value&lt;/span&gt;
&lt;span class="pl-c1"&gt;set&lt;/span&gt; &lt;span class="pl-c1"&gt;ttimeout&lt;/span&gt;&lt;span class="pl-c"&gt;          &lt;span class="pl-c"&gt;"&lt;/span&gt; for key codes&lt;/span&gt;
&lt;span class="pl-c1"&gt;set&lt;/span&gt; &lt;span class="pl-c1"&gt;ttimeoutlen&lt;/span&gt;&lt;span class="pl-k"&gt;=&lt;/span&gt;&lt;span class="pl-c1"&gt;10&lt;/span&gt;&lt;span class="pl-c"&gt;    &lt;span class="pl-c"&gt;"&lt;/span&gt; unnoticeable small value&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Under &lt;code&gt;:h ttimeout&lt;/code&gt; you find a small table showing the relationship between
these options.&lt;/p&gt;
&lt;p&gt;If you're using tmux between Vim and your terminal emulator, also put this in
your &lt;code&gt;~/.tmux.conf&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;set&lt;/span&gt; -sg escape-time 0&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-function-search-undo" class="anchor" aria-hidden="true" href="#function-search-undo"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Function search undo&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;A search pattern in a command (&lt;code&gt;/&lt;/code&gt;, &lt;code&gt;:substitute&lt;/code&gt;, ...) changes the "last used
search pattern". (It's saved in the &lt;code&gt;/&lt;/code&gt; register; print it with &lt;code&gt;:echo @/&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;A simple text change can be redone with &lt;code&gt;.&lt;/code&gt;. (It's saved in the &lt;code&gt;.&lt;/code&gt; register;
print it with &lt;code&gt;:echo @.&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Both things are &lt;em&gt;not&lt;/em&gt; the case, if you do them from a function, though! Thus you
can't easily highlight words from a function or redo the text changes made by
it.&lt;/p&gt;
&lt;p&gt;Help: &lt;code&gt;:h function-search-undo&lt;/code&gt;&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-technical-quirks-1" class="anchor" aria-hidden="true" href="#technical-quirks-1"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Technical quirks&lt;/h1&gt;
&lt;h2&gt;&lt;a id="user-content-newline-used-for-nul" class="anchor" aria-hidden="true" href="#newline-used-for-nul"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Newline used for NUL&lt;/h2&gt;
&lt;p&gt;NUL characters (&lt;code&gt;\0&lt;/code&gt;) in a file, are stored as newline (&lt;code&gt;\n&lt;/code&gt;) in memory and
displayed in a buffer as &lt;code&gt;^@&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;See &lt;code&gt;man 7 ascii&lt;/code&gt; and &lt;code&gt;:h NL-used-for-Nul&lt;/code&gt; for more information.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-terminology-1" class="anchor" aria-hidden="true" href="#terminology-1"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Terminology&lt;/h1&gt;
&lt;h2&gt;&lt;a id="user-content-vim-script-vimscript-viml" class="anchor" aria-hidden="true" href="#vim-script-vimscript-viml"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Vim script? Vimscript? VimL?&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Vim script&lt;/code&gt;, &lt;code&gt;Vimscript&lt;/code&gt;, and &lt;code&gt;VimL&lt;/code&gt; all refer to the same thing: The
programming language used for scripting Vim. Even though
&lt;a href="https://github.com/vim/vim/commit/b544f3c81f1e6a50322855681ac266ffaa8e313c"&gt;8.0.360&lt;/a&gt;
changed all references to &lt;code&gt;VimL&lt;/code&gt; to &lt;code&gt;Vim script&lt;/code&gt;, which can now be considered
the official term, &lt;code&gt;VimL&lt;/code&gt; is still widespread all over the internet.&lt;/p&gt;
&lt;p&gt;No matter which term you use, everyone will understand it.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>mhinz</author><guid isPermaLink="false">https://github.com/mhinz/vim-galore</guid><pubDate>Thu, 06 Feb 2020 00:03:00 GMT</pubDate></item><item><title>terryma/vim-multiple-cursors #4 in Vim script, Today</title><link>https://github.com/terryma/vim-multiple-cursors</link><description>&lt;p&gt;&lt;i&gt;True Sublime Text style multiple selections for Vim&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-vim-multiple-cursors" class="anchor" aria-hidden="true" href="#vim-multiple-cursors"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;vim-multiple-cursors&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://travis-ci.org/terryma/vim-multiple-cursors" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/1931d6e1f8c34944c6aae4e2ee0287cea82b3365/68747470733a2f2f7472617669732d63692e6f72672f74657272796d612f76696d2d6d756c7469706c652d637572736f72732e737667" alt="Build Status" data-canonical-src="https://travis-ci.org/terryma/vim-multiple-cursors.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-contents" class="anchor" aria-hidden="true" href="#contents"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#about"&gt;About&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#installation"&gt;Installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#quick-start"&gt;Quick Start&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#mapping"&gt;Mapping&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#settings"&gt;Settings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#interactions-with-other-plugins"&gt;Interactions with other plugins&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#highlight"&gt;Highlight&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#faq"&gt;FAQ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#contributing"&gt;Contributing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#credit"&gt;Credit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-about" class="anchor" aria-hidden="true" href="#about"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;About&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/paradigm/vim-multicursor"&gt;There&lt;/a&gt; &lt;a href="https://github.com/felixr/vim-multiedit"&gt;have&lt;/a&gt; &lt;a href="https://github.com/hlissner/vim-multiedit"&gt;been&lt;/a&gt; &lt;a href="https://github.com/adinapoli/vim-markmultiple"&gt;many&lt;/a&gt; &lt;a href="https://github.com/AndrewRadev/multichange.vim"&gt;attempts&lt;/a&gt; at bringing Sublime Text's awesome &lt;a href="http://www.sublimetext.com/docs/2/multiple_selection_with_the_keyboard.html" rel="nofollow"&gt;multiple selection&lt;/a&gt; feature into Vim, but none so far have been in my opinion a faithful port that is simplistic to use, yet powerful and intuitive enough for an existing Vim user. &lt;a href="http://github.com/terryma/vim-multiple-cursors"&gt;vim-multiple-cursors&lt;/a&gt; is yet another attempt at that.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-its-great-for-quick-refactoring" class="anchor" aria-hidden="true" href="#its-great-for-quick-refactoring"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;It's great for quick refactoring&lt;/h3&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="assets/example1.gif?raw=true"&gt;&lt;img src="assets/example1.gif?raw=true" alt="Example1" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Vim command sequence: &lt;code&gt;fp&amp;lt;C-n&amp;gt;&amp;lt;C-n&amp;gt;&amp;lt;C-n&amp;gt;cname&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-add-a-cursor-to-each-line-of-your-visual-selection" class="anchor" aria-hidden="true" href="#add-a-cursor-to-each-line-of-your-visual-selection"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Add a cursor to each line of your visual selection&lt;/h3&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="assets/example2.gif?raw=true"&gt;&lt;img src="assets/example2.gif?raw=true" alt="Example2" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Vim command sequence: &lt;code&gt;vip&amp;lt;C-n&amp;gt;i"&amp;lt;Right&amp;gt;&amp;lt;Right&amp;gt;&amp;lt;Right&amp;gt;",&amp;lt;Esc&amp;gt;vipgJ$r]Idays = [&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-match-characters-from-visual-selection" class="anchor" aria-hidden="true" href="#match-characters-from-visual-selection"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Match characters from visual selection&lt;/h3&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="assets/example3.gif?raw=true"&gt;&lt;img src="assets/example3.gif?raw=true" alt="Example3" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Vim command sequence: &lt;code&gt;df[$r,0f,v&amp;lt;C-n&amp;gt;…&amp;lt;C-n&amp;gt;c&amp;lt;CR&amp;gt;&amp;lt;Up&amp;gt;&amp;lt;Del&amp;gt;&amp;lt;Right&amp;gt;&amp;lt;Right&amp;gt;&amp;lt;Right&amp;gt;&amp;lt;Del&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-use-the-command-to-match-regexp" class="anchor" aria-hidden="true" href="#use-the-command-to-match-regexp"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Use the command to match regexp&lt;/h3&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="assets/example4.gif?raw=true"&gt;&lt;img src="assets/example4.gif?raw=true" alt="Example4" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;To see what keystrokes are used for the above examples, see &lt;a href="https://github.com/terryma/vim-multiple-cursors/wiki/Keystrokes-for-example-gifs"&gt;the wiki page&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installation&lt;/h2&gt;
&lt;p&gt;Install using &lt;a href="http://github.com/tpope/vim-pathogen"&gt;Pathogen&lt;/a&gt;, &lt;a href="http://github.com/gmarik/vundle"&gt;Vundle&lt;/a&gt;, &lt;a href="http://github.com/Shougo/neobundle.vim"&gt;Neobundle&lt;/a&gt;, &lt;a href="https://github.com/junegunn/vim-plug"&gt;vim-plug&lt;/a&gt;, or your favorite Vim package manager.&lt;/p&gt;
&lt;p&gt;Requires vim 7.4 or newer for full functionality.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-vim-plug-instructions" class="anchor" aria-hidden="true" href="#vim-plug-instructions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;vim-plug instructions&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Paste this block into the top of &lt;code&gt;~/.vimrc&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;call&lt;/span&gt; &lt;span class="pl-en"&gt;plug#begin&lt;/span&gt;()

Plug &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;terryma/vim-multiple-cursors&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;

&lt;span class="pl-c1"&gt;call&lt;/span&gt; &lt;span class="pl-en"&gt;plug#end&lt;/span&gt;()&lt;/pre&gt;&lt;/div&gt;
&lt;ol start="2"&gt;
&lt;li&gt;Start vim and execute &lt;code&gt;:PlugInstall&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;&lt;a id="user-content-quick-start" class="anchor" aria-hidden="true" href="#quick-start"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-normal-mode--visual-mode" class="anchor" aria-hidden="true" href="#normal-mode--visual-mode"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;normal mode / visual mode&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;start:          &lt;code&gt;&amp;lt;C-n&amp;gt;&lt;/code&gt; start multicursor and add a &lt;em&gt;virtual cursor + selection&lt;/em&gt; on the match
&lt;ul&gt;
&lt;li&gt;next:         &lt;code&gt;&amp;lt;C-n&amp;gt;&lt;/code&gt; add a new &lt;em&gt;virtual cursor + selection&lt;/em&gt; on the next match&lt;/li&gt;
&lt;li&gt;skip:         &lt;code&gt;&amp;lt;C-x&amp;gt;&lt;/code&gt; skip the next match&lt;/li&gt;
&lt;li&gt;prev:         &lt;code&gt;&amp;lt;C-p&amp;gt;&lt;/code&gt; remove current &lt;em&gt;virtual cursor + selection&lt;/em&gt; and go back on previous match&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;select all:     &lt;code&gt;&amp;lt;A-n&amp;gt;&lt;/code&gt; start multicursor and directly select all matches&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can now change the &lt;em&gt;virtual cursors + selection&lt;/em&gt; with &lt;strong&gt;visual mode&lt;/strong&gt; commands.
For instance: &lt;code&gt;c&lt;/code&gt;, &lt;code&gt;s&lt;/code&gt;, &lt;code&gt;I&lt;/code&gt;, &lt;code&gt;A&lt;/code&gt; work without any issues.
You could also go to &lt;strong&gt;normal mode&lt;/strong&gt; by pressing &lt;code&gt;v&lt;/code&gt; and use normal commands there.&lt;/p&gt;
&lt;p&gt;At any time, you can press &lt;code&gt;&amp;lt;Esc&amp;gt;&lt;/code&gt; to exit back to regular Vim.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: start with &lt;code&gt;g&amp;lt;C-n&amp;gt;&lt;/code&gt; to match without boundaries (behaves like &lt;code&gt;g*&lt;/code&gt; instead of &lt;code&gt;*&lt;/code&gt;)&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-visual-mode-when-multiple-lines-are-selected" class="anchor" aria-hidden="true" href="#visual-mode-when-multiple-lines-are-selected"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;visual mode when multiple lines are selected&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;start: &lt;code&gt;&amp;lt;C-n&amp;gt;&lt;/code&gt; add &lt;em&gt;virtual cursors&lt;/em&gt; on each line&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can now change the &lt;em&gt;virtual cursors&lt;/em&gt; with &lt;strong&gt;normal mode&lt;/strong&gt; commands.
For instance: &lt;code&gt;ciw&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-command" class="anchor" aria-hidden="true" href="#command"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;command&lt;/h3&gt;
&lt;p&gt;The command &lt;code&gt;MultipleCursorsFind&lt;/code&gt; accepts a range and a pattern (regexp), it creates a &lt;em&gt;visual cursor&lt;/em&gt; at the end of each match.
If no range is passed in, then it defaults to the entire buffer.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-mapping" class="anchor" aria-hidden="true" href="#mapping"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Mapping&lt;/h2&gt;
&lt;p&gt;If you don't like the plugin taking over your key bindings, you can turn it off and reassign them the way you want:&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-smi"&gt;&lt;span class="pl-k"&gt;g:&lt;/span&gt;multi_cursor_use_default_mapping&lt;/span&gt;&lt;span class="pl-k"&gt;=&lt;/span&gt;&lt;span class="pl-c1"&gt;0&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;"&lt;/span&gt; Default mapping&lt;/span&gt;
&lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-smi"&gt;&lt;span class="pl-k"&gt;g:&lt;/span&gt;multi_cursor_start_word_key&lt;/span&gt;      &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;&amp;lt;C-n&amp;gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-smi"&gt;&lt;span class="pl-k"&gt;g:&lt;/span&gt;multi_cursor_select_all_word_key&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;&amp;lt;A-n&amp;gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-smi"&gt;&lt;span class="pl-k"&gt;g:&lt;/span&gt;multi_cursor_start_key&lt;/span&gt;           &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;g&amp;lt;C-n&amp;gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-smi"&gt;&lt;span class="pl-k"&gt;g:&lt;/span&gt;multi_cursor_select_all_key&lt;/span&gt;      &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;g&amp;lt;A-n&amp;gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-smi"&gt;&lt;span class="pl-k"&gt;g:&lt;/span&gt;multi_cursor_next_key&lt;/span&gt;            &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;&amp;lt;C-n&amp;gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-smi"&gt;&lt;span class="pl-k"&gt;g:&lt;/span&gt;multi_cursor_prev_key&lt;/span&gt;            &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;&amp;lt;C-p&amp;gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-smi"&gt;&lt;span class="pl-k"&gt;g:&lt;/span&gt;multi_cursor_skip_key&lt;/span&gt;            &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;&amp;lt;C-x&amp;gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-smi"&gt;&lt;span class="pl-k"&gt;g:&lt;/span&gt;multi_cursor_quit_key&lt;/span&gt;            &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;&amp;lt;Esc&amp;gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Please make sure to always map something to &lt;code&gt;g:multi_cursor_quit_key&lt;/code&gt;, otherwise you'll have a tough time quitting from multicursor mode.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-settings" class="anchor" aria-hidden="true" href="#settings"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Settings&lt;/h2&gt;
&lt;p&gt;Currently there are four additional global settings one can tweak:&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-gmulti_cursor_exit_from_visual_mode-default-0" class="anchor" aria-hidden="true" href="#gmulti_cursor_exit_from_visual_mode-default-0"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;code&gt;g:multi_cursor_exit_from_visual_mode&lt;/code&gt; (Default: 0)&lt;/h3&gt;
&lt;p&gt;If set to 1, then pressing &lt;code&gt;g:multi_cursor_quit_key&lt;/code&gt; in &lt;em&gt;Visual&lt;/em&gt; mode will quit and
delete all existing cursors, just skipping normal mode with multiple cursors.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-gmulti_cursor_exit_from_insert_mode-default-0" class="anchor" aria-hidden="true" href="#gmulti_cursor_exit_from_insert_mode-default-0"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;code&gt;g:multi_cursor_exit_from_insert_mode&lt;/code&gt; (Default: 0)&lt;/h3&gt;
&lt;p&gt;If set to 1, then pressing &lt;code&gt;g:multi_cursor_quit_key&lt;/code&gt; in &lt;em&gt;Insert&lt;/em&gt; mode will quit and
delete all existing cursors, just skipping normal mode with multiple cursors.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-gmulti_cursor_normal_maps-default-see-below" class="anchor" aria-hidden="true" href="#gmulti_cursor_normal_maps-default-see-below"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;code&gt;g:multi_cursor_normal_maps&lt;/code&gt; (Default: see below)&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;{'@': 1, 'F': 1, 'T': 1, '[': 1, '\': 1, ']': 1, '!': 1, '"': 1, 'c': 1, 'd': 1, 'f': 1, 'g': 1, 'm': 1, 'q': 1, 'r': 1, 't': 1, 'y': 1, 'z': 1, '&amp;lt;': 1, '=': 1, '&amp;gt;': 1}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Any key in this map (values are ignored) will cause multi-cursor &lt;em&gt;Normal&lt;/em&gt; mode
to pause for map completion just like normal vim. Otherwise keys mapped in
normal mode will "fail to replay" when multiple cursors are active.
For example: &lt;code&gt;{'d':1}&lt;/code&gt; makes normal-mode command &lt;code&gt;dw&lt;/code&gt; work in multi-cursor mode.&lt;/p&gt;
&lt;p&gt;The default list contents should work for anybody, unless they have remapped a
key from an operator-pending command to a non-operator-pending command or
vice versa.&lt;/p&gt;
&lt;p&gt;These keys must be manually listed because vim doesn't provide a way to
automatically see which keys &lt;em&gt;start&lt;/em&gt; mappings, and trying to run motion commands
such as &lt;code&gt;j&lt;/code&gt; as if they were operator-pending commands can break things.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-gmulti_cursor_visual_maps-default-see-below" class="anchor" aria-hidden="true" href="#gmulti_cursor_visual_maps-default-see-below"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;code&gt;g:multi_cursor_visual_maps&lt;/code&gt; (Default: see below)&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;{'T': 1, 'a': 1, 't': 1, 'F': 1, 'f': 1, 'i': 1}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Same principle as &lt;code&gt;g:multi_cursor_normal_maps&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-interactions-with-other-plugins" class="anchor" aria-hidden="true" href="#interactions-with-other-plugins"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Interactions with other plugins&lt;/h3&gt;
&lt;h3&gt;&lt;a id="user-content-multiple_cursors_beforemultiple_cursors_after-default-nothing" class="anchor" aria-hidden="true" href="#multiple_cursors_beforemultiple_cursors_after-default-nothing"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;code&gt;Multiple_cursors_before/Multiple_cursors_after&lt;/code&gt; (Default: &lt;code&gt;nothing&lt;/code&gt;)&lt;/h3&gt;
&lt;p&gt;Other plugins may be incompatible in insert mode.
That is why we provide hooks to disable those plug-ins when vim-multiple-cursors is active:&lt;/p&gt;
&lt;p&gt;For example, if you are using &lt;a href="https://github.com/Shougo/neocomplete.vim"&gt;Neocomplete&lt;/a&gt;,
add this to your vimrc to prevent conflict:&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;function&lt;/span&gt;&lt;span class="pl-k"&gt;!&lt;/span&gt; &lt;span class="pl-en"&gt;Multiple_cursors_before&lt;/span&gt;()
  &lt;span class="pl-k"&gt;if&lt;/span&gt; &lt;span class="pl-en"&gt;exists&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;:NeoCompleteLock&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;)&lt;span class="pl-k"&gt;==&lt;/span&gt;&lt;span class="pl-c1"&gt;2&lt;/span&gt;
    &lt;span class="pl-c1"&gt;exe&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;NeoCompleteLock&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-k"&gt;endif&lt;/span&gt;
&lt;span class="pl-k"&gt;endfunction&lt;/span&gt;

&lt;span class="pl-k"&gt;function&lt;/span&gt;&lt;span class="pl-k"&gt;!&lt;/span&gt; &lt;span class="pl-en"&gt;Multiple_cursors_after&lt;/span&gt;()
  &lt;span class="pl-k"&gt;if&lt;/span&gt; &lt;span class="pl-en"&gt;exists&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;:NeoCompleteUnlock&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;)&lt;span class="pl-k"&gt;==&lt;/span&gt;&lt;span class="pl-c1"&gt;2&lt;/span&gt;
    &lt;span class="pl-c1"&gt;exe&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;NeoCompleteUnlock&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-k"&gt;endif&lt;/span&gt;
&lt;span class="pl-k"&gt;endfunction&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Plugins themselves can register &lt;code&gt;User&lt;/code&gt; autocommands on &lt;code&gt;MultipleCursorsPre&lt;/code&gt; and
&lt;code&gt;MultipleCursorsPost&lt;/code&gt; for automatic integration.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-highlight" class="anchor" aria-hidden="true" href="#highlight"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Highlight&lt;/h3&gt;
&lt;p&gt;The plugin uses the highlight group &lt;code&gt;multiple_cursors_cursor&lt;/code&gt; and &lt;code&gt;multiple_cursors_visual&lt;/code&gt; to highlight the virtual cursors and their visual selections respectively. You can customize them by putting something similar like the following in your vimrc:&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;"&lt;/span&gt; Default highlighting (see help :highlight and help :highlight-link)&lt;/span&gt;
&lt;span class="pl-c1"&gt;highlight&lt;/span&gt; multiple_cursors_cursor &lt;span class="pl-c1"&gt;term&lt;/span&gt;&lt;span class="pl-k"&gt;=&lt;/span&gt;&lt;span class="pl-c1"&gt;reverse&lt;/span&gt; cterm&lt;span class="pl-k"&gt;=&lt;/span&gt;&lt;span class="pl-c1"&gt;reverse&lt;/span&gt; &lt;span class="pl-c1"&gt;gui&lt;/span&gt;&lt;span class="pl-k"&gt;=&lt;/span&gt;&lt;span class="pl-c1"&gt;reverse&lt;/span&gt;
&lt;span class="pl-c1"&gt;highlight&lt;/span&gt; &lt;span class="pl-c1"&gt;link&lt;/span&gt; &lt;span class="pl-v"&gt;multiple_cursors_visual&lt;/span&gt; &lt;span class="pl-v"&gt;Visual&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-faq" class="anchor" aria-hidden="true" href="#faq"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;FAQ&lt;/h2&gt;
&lt;h4&gt;&lt;a id="user-content-q--pressing-i-after-selecting-words-with-c-n-makes-the-plugin-hang-why" class="anchor" aria-hidden="true" href="#q--pressing-i-after-selecting-words-with-c-n-makes-the-plugin-hang-why"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;strong&gt;Q&lt;/strong&gt;  Pressing &lt;kbd&gt;i&lt;/kbd&gt; after selecting words with &lt;kbd&gt;C-n&lt;/kbd&gt; makes the plugin hang, why?&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;A&lt;/strong&gt; When selecting words with &lt;kbd&gt;C-n&lt;/kbd&gt;, the plugin behaves like in &lt;strong&gt;visual&lt;/strong&gt; mode.
Once you pressed &lt;kbd&gt;i&lt;/kbd&gt;, you can still press &lt;kbd&gt;I&lt;/kbd&gt; to insert text.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-q-altn-doesnt-seem-to-work-in-vim-but-works-in-gvim-why" class="anchor" aria-hidden="true" href="#q-altn-doesnt-seem-to-work-in-vim-but-works-in-gvim-why"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;strong&gt;Q&lt;/strong&gt; &lt;kbd&gt;ALT&lt;/kbd&gt;+&lt;kbd&gt;n&lt;/kbd&gt; doesn't seem to work in VIM but works in gVIM, why?&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;A&lt;/strong&gt; This is a well known terminal/Vim &lt;a href="http://vim.wikia.com/wiki/Get_Alt_key_to_work_in_terminal" rel="nofollow"&gt;issue&lt;/a&gt;, different terminal have different ways to send &lt;code&gt;Alt+key&lt;/code&gt;.
Try adding this in your &lt;code&gt;.vimrc&lt;/code&gt; and &lt;strong&gt;make sure to replace the string&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;if&lt;/span&gt; &lt;span class="pl-k"&gt;!&lt;/span&gt;&lt;span class="pl-en"&gt;has&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;gui_running&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;)
  &lt;span class="pl-c1"&gt;map&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;in Insert mode, type Ctrl+v Alt+n here&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;&amp;lt;A-n&amp;gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;endif&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or remap the following:&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-smi"&gt;&lt;span class="pl-k"&gt;g:&lt;/span&gt;multi_cursor_start_key&lt;/span&gt;
&lt;span class="pl-smi"&gt;&lt;span class="pl-k"&gt;g:&lt;/span&gt;multi_cursor_select_all_key&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content-q-ctrln-doesnt-seem-to-work-in-gvim" class="anchor" aria-hidden="true" href="#q-ctrln-doesnt-seem-to-work-in-gvim"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;strong&gt;Q&lt;/strong&gt; &lt;kbd&gt;CTRL&lt;/kbd&gt;+&lt;kbd&gt;n&lt;/kbd&gt; doesn't seem to work in gVIM?&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;A&lt;/strong&gt; Try setting &lt;code&gt;set selection=inclusive&lt;/code&gt; in your &lt;code&gt;~/.gvimrc&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A&lt;/strong&gt; Alternatively, you can just temporarily disable &lt;em&gt;exclusive&lt;/em&gt; selection whenever the plugin is active:&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;augroup&lt;/span&gt; &lt;span class="pl-en"&gt;MultipleCursorsSelectionFix&lt;/span&gt;
    &lt;span class="pl-c1"&gt;autocmd&lt;/span&gt; &lt;span class="pl-c1"&gt;User&lt;/span&gt; MultipleCursorsPre  &lt;span class="pl-k"&gt;if&lt;/span&gt; &amp;amp;&lt;span class="pl-c1"&gt;selection&lt;/span&gt; &lt;span class="pl-k"&gt;==&lt;/span&gt;# &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;exclusive&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt; | &lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-smi"&gt;&lt;span class="pl-k"&gt;g:&lt;/span&gt;multi_cursor_save_selection&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &amp;amp;&lt;span class="pl-c1"&gt;selection&lt;/span&gt; | &lt;span class="pl-c1"&gt;set&lt;/span&gt; &lt;span class="pl-c1"&gt;selection&lt;/span&gt;&lt;span class="pl-k"&gt;=&lt;/span&gt;inclusive | &lt;span class="pl-k"&gt;endif&lt;/span&gt;
    &lt;span class="pl-c1"&gt;autocmd&lt;/span&gt; &lt;span class="pl-c1"&gt;User&lt;/span&gt; MultipleCursorsPost &lt;span class="pl-k"&gt;if&lt;/span&gt; &lt;span class="pl-en"&gt;exists&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;g:multi_cursor_save_selection&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;) | &lt;span class="pl-k"&gt;let&lt;/span&gt; &amp;amp;&lt;span class="pl-c1"&gt;selection&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-smi"&gt;&lt;span class="pl-k"&gt;g:&lt;/span&gt;multi_cursor_save_selection&lt;/span&gt; | &lt;span class="pl-k"&gt;unlet&lt;/span&gt; &lt;span class="pl-smi"&gt;&lt;span class="pl-k"&gt;g:&lt;/span&gt;multi_cursor_save_selection&lt;/span&gt; | &lt;span class="pl-k"&gt;endif&lt;/span&gt;
&lt;span class="pl-k"&gt;augroup&lt;/span&gt; &lt;span class="pl-k"&gt;END&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-q-deoplete-insert-giberrish-how-to-fix-this" class="anchor" aria-hidden="true" href="#q-deoplete-insert-giberrish-how-to-fix-this"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;strong&gt;Q&lt;/strong&gt; deoplete insert giberrish, how to fix this?&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;A&lt;/strong&gt; use the &lt;code&gt;Multiple_cursors&lt;/code&gt; functions, add this in your vimrc:&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;    func&lt;span class="pl-k"&gt;!&lt;/span&gt; &lt;span class="pl-en"&gt;Multiple_cursors_before&lt;/span&gt;()
      &lt;span class="pl-k"&gt;if&lt;/span&gt; &lt;span class="pl-en"&gt;deoplete#is_enabled&lt;/span&gt;()
        &lt;span class="pl-c1"&gt;call&lt;/span&gt; &lt;span class="pl-en"&gt;deoplete#disable&lt;/span&gt;()
        &lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-smi"&gt;&lt;span class="pl-k"&gt;g:&lt;/span&gt;deoplete_is_enable_before_multi_cursors&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;
      &lt;span class="pl-k"&gt;else&lt;/span&gt;
        &lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-smi"&gt;&lt;span class="pl-k"&gt;g:&lt;/span&gt;deoplete_is_enable_before_multi_cursors&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt;
      &lt;span class="pl-k"&gt;endif&lt;/span&gt;
    endfunc
    func&lt;span class="pl-k"&gt;!&lt;/span&gt; &lt;span class="pl-en"&gt;Multiple_cursors_after&lt;/span&gt;()
      &lt;span class="pl-k"&gt;if&lt;/span&gt; &lt;span class="pl-smi"&gt;&lt;span class="pl-k"&gt;g:&lt;/span&gt;deoplete_is_enable_before_multi_cursors&lt;/span&gt;
        &lt;span class="pl-c1"&gt;call&lt;/span&gt; &lt;span class="pl-en"&gt;deoplete#enable&lt;/span&gt;()
      &lt;span class="pl-k"&gt;endif&lt;/span&gt;
    endfunc&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content-q-is-it-also-working-on-mac" class="anchor" aria-hidden="true" href="#q-is-it-also-working-on-mac"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;strong&gt;Q&lt;/strong&gt; is it also working on Mac?&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;A&lt;/strong&gt; On Mac OS, &lt;a href="https://code.google.com/p/macvim/" rel="nofollow"&gt;MacVim&lt;/a&gt; is known to work.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-q-how-can-i-select-n-keywords-with-several-keystrokes-200c-n-does-not-work" class="anchor" aria-hidden="true" href="#q-how-can-i-select-n-keywords-with-several-keystrokes-200c-n-does-not-work"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;strong&gt;Q&lt;/strong&gt; How can I select &lt;code&gt;n&lt;/code&gt; keywords with several keystrokes? &lt;code&gt;200&amp;lt;C-n&amp;gt;&lt;/code&gt; does not work.&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;A&lt;/strong&gt; You can use :MultipleCursorsFind keyword. I have this binding in my vimrc:&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;nnoremap&lt;/span&gt; &lt;span class="pl-c1"&gt;&amp;lt;silent&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;&amp;lt;M-j&amp;gt;&lt;/span&gt; :MultipleCursorsFind &lt;span class="pl-c1"&gt;&amp;lt;C-R&amp;gt;&lt;/span&gt;/&lt;span class="pl-c1"&gt;&amp;lt;CR&amp;gt;&lt;/span&gt;
&lt;span class="pl-c1"&gt;vnoremap&lt;/span&gt; &lt;span class="pl-c1"&gt;&amp;lt;silent&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;&amp;lt;M-j&amp;gt;&lt;/span&gt; :MultipleCursorsFind &lt;span class="pl-c1"&gt;&amp;lt;C-R&amp;gt;&lt;/span&gt;/&lt;span class="pl-c1"&gt;&amp;lt;CR&amp;gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This allows one to search for the keyword using &lt;code&gt;*&lt;/code&gt; and turn search results into cursors with &lt;code&gt;Alt-j&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-contributing" class="anchor" aria-hidden="true" href="#contributing"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contributing&lt;/h2&gt;
&lt;p&gt;Patches and suggestions are always welcome! A list of open feature requests can be found &lt;a href="https://github.com/terryma/vim-multiple-cursors/labels/pull%20request%20welcome"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-issue-creation" class="anchor" aria-hidden="true" href="#issue-creation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Issue Creation&lt;/h3&gt;
&lt;p&gt;Contributor's time is precious and limited. Please ensure it meets the requirements outlined in &lt;a href="CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-pull-requests" class="anchor" aria-hidden="true" href="#pull-requests"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Pull Requests&lt;/h3&gt;
&lt;p&gt;Running the test suite requires ruby and rake as well as vim of course. Before submitting PR, please ensure the checks are passing:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;cd&lt;/span&gt; vim-multiple-cursors/spec/
bundle &lt;span class="pl-c1"&gt;exec&lt;/span&gt; rake&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-contributors" class="anchor" aria-hidden="true" href="#contributors"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contributors&lt;/h3&gt;
&lt;p&gt;This is a community supported project. Here is the list of all the &lt;a href="https://github.com/terryma/vim-multiple-cursors/graphs/contributors"&gt;Contributors&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-credit" class="anchor" aria-hidden="true" href="#credit"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Credit&lt;/h2&gt;
&lt;p&gt;Obviously inspired by Sublime Text's &lt;a href="http://www.sublimetext.com/docs/2/multiple_selection_with_the_keyboard.html" rel="nofollow"&gt;multiple selection&lt;/a&gt; feature, also encouraged by Emac's &lt;a href="https://github.com/magnars/multiple-cursors.el"&gt;multiple cursors&lt;/a&gt; implementation by Magnar Sveen&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>terryma</author><guid isPermaLink="false">https://github.com/terryma/vim-multiple-cursors</guid><pubDate>Thu, 06 Feb 2020 00:04:00 GMT</pubDate></item><item><title>tpope/vim-fugitive #5 in Vim script, Today</title><link>https://github.com/tpope/vim-fugitive</link><description>&lt;p&gt;&lt;i&gt;fugitive.vim: A Git wrapper so awesome, it should be illegal&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="markdown" data-path="README.markdown"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-fugitivevim" class="anchor" aria-hidden="true" href="#fugitivevim"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;fugitive.vim&lt;/h1&gt;
&lt;p&gt;I'm not going to lie to you; fugitive.vim may very well be the best
Git wrapper of all time.  Check out these features:&lt;/p&gt;
&lt;p&gt;Bring up an enhanced version of &lt;code&gt;git status&lt;/code&gt; with &lt;code&gt;:G&lt;/code&gt; (also known as
&lt;code&gt;:Gstatus&lt;/code&gt;).  Press &lt;code&gt;g?&lt;/code&gt; to bring up a list of maps for numerous operations
including diffing, staging, committing, rebasing, and stashing.&lt;/p&gt;
&lt;p&gt;View any blob, tree, commit, or tag in the repository with &lt;code&gt;:Gedit&lt;/code&gt; (and
&lt;code&gt;:Gsplit&lt;/code&gt;, &lt;code&gt;:Gvsplit&lt;/code&gt;, &lt;code&gt;:Gtabedit&lt;/code&gt;, ...).  Edit a file in the index and
write to it to stage the changes.  Use &lt;code&gt;:Gdiffsplit&lt;/code&gt; to bring up the staged
version of the file side by side with the working tree version and use
Vim's diff handling capabilities to stage a subset of the file's
changes.&lt;/p&gt;
&lt;p&gt;Commit, merge, and rebase with &lt;code&gt;:Gcommit&lt;/code&gt;, &lt;code&gt;:Gmerge&lt;/code&gt;, and &lt;code&gt;:Grebase&lt;/code&gt;, using
the current Vim instance to edit commit messages and the rebase todo list.
Use &lt;code&gt;:Gpush&lt;/code&gt;, &lt;code&gt;:Gfetch&lt;/code&gt;, and &lt;code&gt;:Gpull&lt;/code&gt; to send and retrieve upstream changes.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;:Gblame&lt;/code&gt; brings up an interactive vertical split with &lt;code&gt;git blame&lt;/code&gt;
output.  Press enter on a line to edit the commit where the line
changed, or &lt;code&gt;o&lt;/code&gt; to open it in a split.  When you're done, use &lt;code&gt;:Gedit&lt;/code&gt;
in the historic buffer to go back to the work tree version.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;:Gmove&lt;/code&gt; does a &lt;code&gt;git mv&lt;/code&gt; on a file and simultaneously renames the
buffer.  &lt;code&gt;:Gdelete&lt;/code&gt; does a &lt;code&gt;git rm&lt;/code&gt; on a file and simultaneously deletes
the buffer.&lt;/p&gt;
&lt;p&gt;Use &lt;code&gt;:Ggrep&lt;/code&gt; to search the work tree (or any arbitrary commit) with
&lt;code&gt;git grep&lt;/code&gt;, skipping over that which is not tracked in the repository.
&lt;code&gt;:Gclog&lt;/code&gt; and &lt;code&gt;:Gllog&lt;/code&gt; load all previous commits into the quickfix or location
list.  Give them a range (e.g., using visual mode and &lt;code&gt;:'&amp;lt;,'&amp;gt;Gclog&lt;/code&gt;) to
iterate over every change to that portion of the current file.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;:Git mergetool&lt;/code&gt; loads conflicts into the quickfix list.  &lt;code&gt;:Git difftool&lt;/code&gt; does
the same for any arbitrary set of changes.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;:Gread&lt;/code&gt; is a variant of &lt;code&gt;git checkout -- filename&lt;/code&gt; that operates on the
buffer rather than the filename.  This means you can use &lt;code&gt;u&lt;/code&gt; to undo it
and you never get any warnings about the file changing outside Vim.
&lt;code&gt;:Gwrite&lt;/code&gt; writes to both the work tree and index versions of a file,
making it like &lt;code&gt;git add&lt;/code&gt; when called from a work tree file and like
&lt;code&gt;git checkout&lt;/code&gt; when called from the index or a blob in history.&lt;/p&gt;
&lt;p&gt;Use &lt;code&gt;:Gbrowse&lt;/code&gt; to open the current file on the web front-end of your favorite
hosting provider, with optional line range (try it in visual mode).  Plugins
are available for popular providers such as &lt;a href="https://github.com/tpope/vim-rhubarb"&gt;GitHub&lt;/a&gt;,
&lt;a href="https://github.com/shumphrey/fugitive-gitlab.vim"&gt;GitLab&lt;/a&gt;, &lt;a href="https://github.com/tommcdo/vim-fubitive"&gt;Bitbucket&lt;/a&gt;,
&lt;a href="https://github.com/linuxsuren/fugitive-gitee.vim"&gt;Gitee&lt;/a&gt;, &lt;a href="https://github.com/FrostyX/vim-fugitive-pagure"&gt;Pagure&lt;/a&gt;, and
&lt;a href="https://github.com/jparise/vim-phabricator"&gt;Phabricator&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Add &lt;code&gt;%{FugitiveStatusline()}&lt;/code&gt; to &lt;code&gt;'statusline'&lt;/code&gt; to get an indicator
with the current branch in your statusline.&lt;/p&gt;
&lt;p&gt;Last but not least, there's &lt;code&gt;:Git&lt;/code&gt; for running any arbitrary command.&lt;/p&gt;
&lt;p&gt;For more information, see &lt;code&gt;:help fugitive&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-screencasts" class="anchor" aria-hidden="true" href="#screencasts"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Screencasts&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://vimcasts.org/e/31" rel="nofollow"&gt;A complement to command line git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://vimcasts.org/e/32" rel="nofollow"&gt;Working with the git index&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://vimcasts.org/e/33" rel="nofollow"&gt;Resolving merge conflicts with vimdiff&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://vimcasts.org/e/34" rel="nofollow"&gt;Browsing the git object database&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://vimcasts.org/e/35" rel="nofollow"&gt;Exploring the history of a git repository&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installation&lt;/h2&gt;
&lt;p&gt;Install using your favorite package manager, or use Vim's built-in package support:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mkdir -p ~/.vim/pack/tpope/start
cd ~/.vim/pack/tpope/start
git clone https://tpope.io/vim/fugitive.git
vim -u NONE -c "helptags fugitive/doc" -c q
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;a id="user-content-faq" class="anchor" aria-hidden="true" href="#faq"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;FAQ&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Why can't I enter my password when I &lt;code&gt;:Gpush&lt;/code&gt;?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It is highly recommended to use SSH keys or &lt;a href="https://help.github.com/en/articles/caching-your-github-password-in-git"&gt;credentials caching&lt;/a&gt; to avoid
entering your password on every upstream interaction.  If this isn't an
option, the official solution is to use the &lt;code&gt;core.askPass&lt;/code&gt; Git option to
request the password via a GUI.  Fugitive will configure this for you
automatically if you have &lt;code&gt;ssh-askpass&lt;/code&gt; or &lt;code&gt;git-gui&lt;/code&gt; installed; otherwise it's
your responsibility to set this up.&lt;/p&gt;
&lt;p&gt;If you absolutely must type in your password by hand, sidestep Fugitive and
use &lt;code&gt;:terminal git push&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-self-promotion" class="anchor" aria-hidden="true" href="#self-promotion"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Self-Promotion&lt;/h2&gt;
&lt;p&gt;Like fugitive.vim? Follow the repository on
&lt;a href="https://github.com/tpope/vim-fugitive"&gt;GitHub&lt;/a&gt; and vote for it on
&lt;a href="http://www.vim.org/scripts/script.php?script_id=2975" rel="nofollow"&gt;vim.org&lt;/a&gt;.  And if
you're feeling especially charitable, follow &lt;a href="http://tpo.pe/" rel="nofollow"&gt;tpope&lt;/a&gt; on
&lt;a href="http://twitter.com/tpope" rel="nofollow"&gt;Twitter&lt;/a&gt; and
&lt;a href="https://github.com/tpope"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-license" class="anchor" aria-hidden="true" href="#license"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;License&lt;/h2&gt;
&lt;p&gt;Copyright (c) Tim Pope.  Distributed under the same terms as Vim itself.
See &lt;code&gt;:help license&lt;/code&gt;.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>tpope</author><guid isPermaLink="false">https://github.com/tpope/vim-fugitive</guid><pubDate>Thu, 06 Feb 2020 00:05:00 GMT</pubDate></item><item><title>fatih/vim-go #6 in Vim script, Today</title><link>https://github.com/fatih/vim-go</link><description>&lt;p&gt;&lt;i&gt;Go development plugin for Vim&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-vim-go-" class="anchor" aria-hidden="true" href="#vim-go-"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;vim-go &lt;a href="https://travis-ci.org/fatih/vim-go" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/439ea3a95ba73ab9ef9e4c560159ee272ce10b5c/687474703a2f2f696d672e736869656c64732e696f2f7472617669732f66617469682f76696d2d676f2e7376673f7374796c653d666c61742d737175617265" alt="Build Status" data-canonical-src="http://img.shields.io/travis/fatih/vim-go.svg?style=flat-square" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;p align="center"&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="assets/vim-go.png"&gt;&lt;img src="assets/vim-go.png" alt="Vim-go logo" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-features" class="anchor" aria-hidden="true" href="#features"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Features&lt;/h2&gt;
&lt;p&gt;This plugin adds Go language support for Vim, with the following main features:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Compile your package with &lt;code&gt;:GoBuild&lt;/code&gt;, install it with &lt;code&gt;:GoInstall&lt;/code&gt; or test it
with &lt;code&gt;:GoTest&lt;/code&gt;. Run a single test with &lt;code&gt;:GoTestFunc&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Quickly execute your current file(s) with &lt;code&gt;:GoRun&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Improved syntax highlighting and folding.&lt;/li&gt;
&lt;li&gt;Debug programs with integrated &lt;code&gt;delve&lt;/code&gt; support with &lt;code&gt;:GoDebugStart&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Completion support via &lt;code&gt;gocode&lt;/code&gt; and &lt;code&gt;gopls&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gofmt&lt;/code&gt; or &lt;code&gt;goimports&lt;/code&gt; on save keeps the cursor position and undo history.&lt;/li&gt;
&lt;li&gt;Go to symbol/declaration with &lt;code&gt;:GoDef&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Look up documentation with &lt;code&gt;:GoDoc&lt;/code&gt; or &lt;code&gt;:GoDocBrowser&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Easily import packages via &lt;code&gt;:GoImport&lt;/code&gt;, remove them via &lt;code&gt;:GoDrop&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Precise type-safe renaming of identifiers with &lt;code&gt;:GoRename&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;See which code is covered by tests with &lt;code&gt;:GoCoverage&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Add or remove tags on struct fields with &lt;code&gt;:GoAddTags&lt;/code&gt; and &lt;code&gt;:GoRemoveTags&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Call &lt;code&gt;golangci-lint&lt;/code&gt; with &lt;code&gt;:GoMetaLinter&lt;/code&gt; to invoke all possible linters
(&lt;code&gt;golint&lt;/code&gt;, &lt;code&gt;vet&lt;/code&gt;, &lt;code&gt;errcheck&lt;/code&gt;, &lt;code&gt;deadcode&lt;/code&gt;, etc.) and put the result in the
quickfix or location list.&lt;/li&gt;
&lt;li&gt;Lint your code with &lt;code&gt;:GoLint&lt;/code&gt;, run your code through &lt;code&gt;:GoVet&lt;/code&gt; to catch static
errors, or make sure errors are checked with &lt;code&gt;:GoErrCheck&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Advanced source analysis tools utilizing &lt;code&gt;guru&lt;/code&gt;, such as &lt;code&gt;:GoImplements&lt;/code&gt;,
&lt;code&gt;:GoCallees&lt;/code&gt;, and &lt;code&gt;:GoReferrers&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;... and many more! Please see &lt;a href="doc/vim-go.txt"&gt;doc/vim-go.txt&lt;/a&gt; for more
information.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-install" class="anchor" aria-hidden="true" href="#install"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Install&lt;/h2&gt;
&lt;p&gt;vim-go requires at least Vim 8.0.1453 or Neovim 0.3.1.&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://github.com/fatih/vim-go/releases/latest"&gt;&lt;strong&gt;latest stable release&lt;/strong&gt;&lt;/a&gt; is the
recommended version to use. If you choose to use the master branch instead,
please do so with caution; it is a &lt;em&gt;development&lt;/em&gt; branch.&lt;/p&gt;
&lt;p&gt;vim-go follows the standard runtime path structure. Below are some helper lines
for popular package managers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://vimhelp.appspot.com/repeat.txt.html#packages" rel="nofollow"&gt;Vim 8 packages&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git clone https://github.com/fatih/vim-go.git ~/.vim/pack/plugins/start/vim-go&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/tpope/vim-pathogen"&gt;Pathogen&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git clone https://github.com/fatih/vim-go.git ~/.vim/bundle/vim-go&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/junegunn/vim-plug"&gt;vim-plug&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/VundleVim/Vundle.vim"&gt;Vundle&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Plugin 'fatih/vim-go'&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You will also need to install all the necessary binaries. vim-go makes it easy
to install all of them by providing a command, &lt;code&gt;:GoInstallBinaries&lt;/code&gt;, which will
&lt;code&gt;go get&lt;/code&gt; all the required binaries.&lt;/p&gt;
&lt;p&gt;Check out the Install section in &lt;a href="doc/vim-go.txt"&gt;the documentation&lt;/a&gt; for more
detailed instructions (&lt;code&gt;:help go-install&lt;/code&gt;).&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Usage&lt;/h2&gt;
&lt;p&gt;The full documentation can be found at &lt;a href="doc/vim-go.txt"&gt;doc/vim-go.txt&lt;/a&gt;. You can
display it from within Vim with &lt;code&gt;:help vim-go&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Depending on your installation method, you may have to generate the plugin's
&lt;a href="http://vimhelp.appspot.com/helphelp.txt.html#%3Ahelptags" rel="nofollow"&gt;&lt;code&gt;help tags&lt;/code&gt;&lt;/a&gt;
manually (e.g. &lt;code&gt;:helptags ALL&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;We also have an &lt;a href="https://github.com/fatih/vim-go/wiki"&gt;official vim-go tutorial&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-faq-and-troubleshooting" class="anchor" aria-hidden="true" href="#faq-and-troubleshooting"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;FAQ and troubleshooting&lt;/h2&gt;
&lt;p&gt;The FAQ and troubleshooting tips are in the documentation and can be quickly
accessed using &lt;code&gt;:help go-troubleshooting&lt;/code&gt;. If you believe you've found a bug or
shortcoming in vim-go that is neither addressed by help nor in &lt;a href="https://github.com/fatih/vim-go/issues"&gt;existing
issues&lt;/a&gt;, please open an issue with
clear reproduction steps. &lt;code&gt;:GoReportGitHubIssue&lt;/code&gt; can be used pre-populate a lot
of the information needed when creating a new issue.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-license" class="anchor" aria-hidden="true" href="#license"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;License&lt;/h2&gt;
&lt;p&gt;The BSD 3-Clause License - see &lt;a href="LICENSE"&gt;&lt;code&gt;LICENSE&lt;/code&gt;&lt;/a&gt; for more details&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>fatih</author><guid isPermaLink="false">https://github.com/fatih/vim-go</guid><pubDate>Thu, 06 Feb 2020 00:06:00 GMT</pubDate></item><item><title>Yggdroot/indentLine #7 in Vim script, Today</title><link>https://github.com/Yggdroot/indentLine</link><description>&lt;p&gt;&lt;i&gt;A vim plugin to display the indention levels with thin vertical lines&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-indentline" class="anchor" aria-hidden="true" href="#indentline"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;indentLine&lt;/h1&gt;
&lt;p&gt;This plugin is used for displaying thin vertical lines at each indentation level for code indented with spaces. For code indented with tabs I think there is no need to support it, because you can use &lt;code&gt;:set list lcs=tab:\|\ (here is a space)&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-requirements" class="anchor" aria-hidden="true" href="#requirements"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Requirements&lt;/h2&gt;
&lt;p&gt;This plugin takes advantage of the newly provided &lt;code&gt;conceal&lt;/code&gt; feature in Vim 7.3, so this plugin will not work with lower versions of Vim.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installation&lt;/h2&gt;
&lt;p&gt;If you are using VIM version 8 or higher you can use its built-in package management; see &lt;code&gt;:help packages&lt;/code&gt; for more information. Just run these commands in your terminal:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;git clone https://github.com/Yggdroot/indentLine.git &lt;span class="pl-k"&gt;~&lt;/span&gt;/.vim/pack/vendor/start/indentLint
vim -u NONE -c &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;helptags  ~/.vim/pack/vendor/start/indentLint/doc&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; -c &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;q&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Otherwise, these are some of the other options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;To install the plugin just put the plugin files in your &lt;code&gt;~/.vim&lt;/code&gt; (Linux) or &lt;code&gt;~/vimfiles&lt;/code&gt; (Windows).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you use a plugin manager you can put the whole directory into your &lt;code&gt;~/.vim/bundle/&lt;/code&gt; directory (&lt;a href="https://github.com/tpope/vim-pathogen"&gt;Pathogen&lt;/a&gt;) or add the line &lt;code&gt;Plugin 'Yggdroot/indentLine'&lt;/code&gt; to your &lt;code&gt;.vimrc&lt;/code&gt; (&lt;a href="https://github.com/gmarik/vundle"&gt;Vundle&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-customization" class="anchor" aria-hidden="true" href="#customization"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Customization&lt;/h2&gt;
&lt;p&gt;To apply customization, apply the variable definitions to your &lt;code&gt;.vimrc&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Change Character Color&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;indentLine will overwrite 'conceal' color with grey by default. If you want to highlight conceal color with your colorscheme, disable by:&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-smi"&gt;&lt;span class="pl-k"&gt;g:&lt;/span&gt;indentLine_setColors&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or you can customize conceal color by:&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;"&lt;/span&gt; Vim&lt;/span&gt;
&lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-smi"&gt;&lt;span class="pl-k"&gt;g:&lt;/span&gt;indentLine_color_term&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;239&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;"&lt;/span&gt; GVim&lt;/span&gt;
&lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-smi"&gt;&lt;span class="pl-k"&gt;g:&lt;/span&gt;indentLine_color_gui&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;#A4E57E&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;"&lt;/span&gt; none X terminal&lt;/span&gt;
&lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-smi"&gt;&lt;span class="pl-k"&gt;g:&lt;/span&gt;indentLine_color_tty_light&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;7&lt;/span&gt;&lt;span class="pl-c"&gt; &lt;span class="pl-c"&gt;"&lt;/span&gt; (default: 4)&lt;/span&gt;
&lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-smi"&gt;&lt;span class="pl-k"&gt;g:&lt;/span&gt;indentLine_color_dark&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;&lt;span class="pl-c"&gt; &lt;span class="pl-c"&gt;"&lt;/span&gt; (default: 2)&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;"&lt;/span&gt; Background (Vim, GVim)&lt;/span&gt;
&lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-smi"&gt;&lt;span class="pl-k"&gt;g:&lt;/span&gt;indentLine_bgcolor_term&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;202&lt;/span&gt;
&lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-smi"&gt;&lt;span class="pl-k"&gt;g:&lt;/span&gt;indentLine_bgcolor_gui&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;#FF5F00&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Change Indent Char&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Vim and GVim&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-smi"&gt;&lt;span class="pl-k"&gt;g:&lt;/span&gt;indentLine_char&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;c&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;where &lt;code&gt;'c'&lt;/code&gt; can be any ASCII character. You can also use one of &lt;code&gt;¦&lt;/code&gt;, &lt;code&gt;┆&lt;/code&gt;, &lt;code&gt;│&lt;/code&gt;, &lt;code&gt;⎸&lt;/code&gt;, or &lt;code&gt;▏&lt;/code&gt; to display more beautiful lines. However, these characters will only work with files whose encoding is UTF-8.&lt;/p&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-smi"&gt;&lt;span class="pl-k"&gt;g:&lt;/span&gt;indentLine_char_list&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;|&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;¦&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;┆&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;┊&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;]&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;each indent level has a distinct character.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Change Conceal Behaviour&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This plugin enables the Vim &lt;code&gt;conceal&lt;/code&gt; feature which automatically hides stretches of text based on syntax highlighting. This setting will apply to all syntax items.&lt;/p&gt;
&lt;p&gt;For example, users utilizing the built in json.vim syntax file will no longer see quotation marks in their JSON files.&lt;/p&gt;
&lt;p&gt;indentLine will overwrite your "concealcursor" and "conceallevel" with default value:&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-smi"&gt;&lt;span class="pl-k"&gt;g:&lt;/span&gt;indentLine_concealcursor&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;inc&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-smi"&gt;&lt;span class="pl-k"&gt;g:&lt;/span&gt;indentLine_conceallevel&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can customize these settings, but the plugin will not function if &lt;code&gt;conceallevel&lt;/code&gt; is not set to 1 or 2.&lt;/p&gt;
&lt;p&gt;If you want to keep your conceal setting, put this line to your vim dotfile:&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-smi"&gt;&lt;span class="pl-k"&gt;g:&lt;/span&gt;indentLine_setConceal&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;See the &lt;a href="http://vimdoc.sourceforge.net/htmldoc/version7.html#new-conceal" rel="nofollow"&gt;VIM Reference Manual&lt;/a&gt; for more information on the &lt;code&gt;conceal&lt;/code&gt; feature.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Disable by default&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-smi"&gt;&lt;span class="pl-k"&gt;g:&lt;/span&gt;indentLine_enabled&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-commands" class="anchor" aria-hidden="true" href="#commands"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Commands&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;:IndentLinesToggle&lt;/code&gt; toggles lines on and off.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-font-patching" class="anchor" aria-hidden="true" href="#font-patching"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Font patching&lt;/h3&gt;
&lt;p&gt;If you find all the standard unicode and ASCII characters too obtrusive, you might consider patching your font with the &lt;a href="glyph/indentLine-dotted-guide.eps"&gt;indentLine-dotted-guide.eps&lt;/a&gt; glyph provided.  &lt;a href="http://fontforge.github.io/" rel="nofollow"&gt;FontForge&lt;/a&gt; makes the process amazingly simple:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Download and install FontForge.&lt;/li&gt;
&lt;li&gt;Locate and open your terminal/gVim font.&lt;/li&gt;
&lt;li&gt;Open the font in FontForge, choose &lt;strong&gt;Goto&lt;/strong&gt; from the &lt;strong&gt;View&lt;/strong&gt; menu and select &lt;em&gt;Private Use Area&lt;/em&gt; from the drop down box.&lt;/li&gt;
&lt;li&gt;In the private use area, locate a blank spot for the glyph. Make a note of the code, e.g. &lt;code&gt;U+E0A3&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Double-click the selected code point to open the font drawing tool.&lt;/li&gt;
&lt;li&gt;From the &lt;strong&gt;File&lt;/strong&gt; menu, select &lt;strong&gt;Import...&lt;/strong&gt; and locate the &lt;em&gt;indentLine-dotted-guide.eps&lt;/em&gt; file.&lt;/li&gt;
&lt;li&gt;Once imported, choose &lt;strong&gt;File&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Generate Fonts&lt;/strong&gt; and choose a location and file type for the new font.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Once completed, your new font will contain the more subtle dotted guide and all you have to do is set that glyph to &lt;code&gt;g:indentLine_char&lt;/code&gt; in your &lt;code&gt;.vimrc&lt;/code&gt; file.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-self-promotion" class="anchor" aria-hidden="true" href="#self-promotion"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Self promotion&lt;/h2&gt;
&lt;p&gt;If you think this script is helpful, follow the &lt;a href="https://github.com/Yggdroot/indentLine"&gt;GitHub repository&lt;/a&gt;, and don't forget to vote for it on Vim.org! (&lt;a href="http://www.vim.org/scripts/script.php?script_id=4354" rel="nofollow"&gt;vimscript #4354&lt;/a&gt;).&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-screenshots" class="anchor" aria-hidden="true" href="#screenshots"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Screenshots&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-vertical-bars" class="anchor" aria-hidden="true" href="#vertical-bars"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Vertical bars&lt;/h3&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/77b20e2e707ac1d85fd8bc12f16b5b7b7e72e186/687474703a2f2f692e696d6775722e636f6d2f4b566930542e6a7067"&gt;&lt;img src="https://camo.githubusercontent.com/77b20e2e707ac1d85fd8bc12f16b5b7b7e72e186/687474703a2f2f692e696d6775722e636f6d2f4b566930542e6a7067" alt="Screenshot" data-canonical-src="http://i.imgur.com/KVi0T.jpg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-patched-font" class="anchor" aria-hidden="true" href="#patched-font"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Patched font&lt;/h3&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/8e0f6822f859a9a8a7069219f6816174a4737f8e/687474703a2f2f692e696d6775722e636f6d2f325a41376f615a2e706e67"&gt;&lt;img src="https://camo.githubusercontent.com/8e0f6822f859a9a8a7069219f6816174a4737f8e/687474703a2f2f692e696d6775722e636f6d2f325a41376f615a2e706e67" alt="Screenshot" data-canonical-src="http://i.imgur.com/2ZA7oaZ.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-leading-spaces" class="anchor" aria-hidden="true" href="#leading-spaces"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Leading Spaces&lt;/h3&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/73a4b5e80ee0364c8f5e7e2b8f1af309c79ce739/687474703a2f2f692e696d6775722e636f6d2f744c596b6237392e706e67"&gt;&lt;img src="https://camo.githubusercontent.com/73a4b5e80ee0364c8f5e7e2b8f1af309c79ce739/687474703a2f2f692e696d6775722e636f6d2f744c596b6237392e706e67" alt="Screenshot" data-canonical-src="http://i.imgur.com/tLYkb79.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/704f183f97df23ba5c21dc238b81069644d5cd7c/687474703a2f2f692e696d6775722e636f6d2f303741747272732e706e67"&gt;&lt;img src="https://camo.githubusercontent.com/704f183f97df23ba5c21dc238b81069644d5cd7c/687474703a2f2f692e696d6775722e636f6d2f303741747272732e706e67" alt="Screenshot" data-canonical-src="http://i.imgur.com/07Atrrs.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-license" class="anchor" aria-hidden="true" href="#license"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;License&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;MIT&lt;/li&gt;
&lt;/ul&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>Yggdroot</author><guid isPermaLink="false">https://github.com/Yggdroot/indentLine</guid><pubDate>Thu, 06 Feb 2020 00:07:00 GMT</pubDate></item><item><title>morhetz/gruvbox #8 in Vim script, Today</title><link>https://github.com/morhetz/gruvbox</link><description>&lt;p&gt;&lt;i&gt;Retro groove color scheme for Vim&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;p align="center"&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/3e2accf5ed4ef12d8186b417894b00c6690bbc9e/687474703a2f2f73766775722e636f6d2f692f3344702e737667"&gt;&lt;img src="https://camo.githubusercontent.com/3e2accf5ed4ef12d8186b417894b00c6690bbc9e/687474703a2f2f73766775722e636f6d2f692f3344702e737667" data-canonical-src="http://svgur.com/i/3Dp.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;gruvbox is heavily inspired by &lt;a href="https://github.com/sjl/badwolf"&gt;badwolf&lt;/a&gt;, &lt;a href="https://github.com/nanotech/jellybeans.vim"&gt;jellybeans&lt;/a&gt; and &lt;a href="http://ethanschoonover.com/solarized" rel="nofollow"&gt;solarized&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Designed as a bright theme with pastel 'retro groove' colors and light/dark mode switching in the way of &lt;a href="http://ethanschoonover.com/solarized" rel="nofollow"&gt;solarized&lt;/a&gt;. The main focus when developing gruvbox is to keep colors easily distinguishable, contrast enough and still pleasant for the eyes.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-attention" class="anchor" aria-hidden="true" href="#attention"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Attention&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/morhetz/gruvbox/wiki/Terminal-specific"&gt;Read this first&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Typeface from gallery is &lt;a href="https://github.com/belluzj/fantasque-sans"&gt;Fantasque Sans Mono&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Typeface from screenshots below is &lt;a href="http://www.carrois.com/fira-4-1/" rel="nofollow"&gt;Fira Mono&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;&lt;a id="user-content-screenshots" class="anchor" aria-hidden="true" href="#screenshots"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Screenshots&lt;/h2&gt;
&lt;p&gt;Refer &lt;a href="https://github.com/morhetz/gruvbox/wiki/Gallery"&gt;Gallery&lt;/a&gt; for more syntax-specific screenshots.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-dark-mode" class="anchor" aria-hidden="true" href="#dark-mode"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Dark mode&lt;/h3&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/2fcf604967167347f15ca8be125d32b18db9bc28/687474703a2f2f692e696d6775722e636f6d2f476b496c38466e2e706e67"&gt;&lt;img src="https://camo.githubusercontent.com/2fcf604967167347f15ca8be125d32b18db9bc28/687474703a2f2f692e696d6775722e636f6d2f476b496c38466e2e706e67" alt="Screenshot Dark" data-canonical-src="http://i.imgur.com/GkIl8Fn.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-light-mode" class="anchor" aria-hidden="true" href="#light-mode"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Light mode&lt;/h3&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/47fe742c4a493ab970e43c29a56d7e6b4752e2bb/687474703a2f2f692e696d6775722e636f6d2f5837356e6945612e706e67"&gt;&lt;img src="https://camo.githubusercontent.com/47fe742c4a493ab970e43c29a56d7e6b4752e2bb/687474703a2f2f692e696d6775722e636f6d2f5837356e6945612e706e67" alt="Screenshot Light" data-canonical-src="http://i.imgur.com/X75niEa.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-airline-theme" class="anchor" aria-hidden="true" href="#airline-theme"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Airline theme&lt;/h3&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/e80523c76e0b2588c56e4370ccde08fb8affbd38/687474703a2f2f692e696d6775722e636f6d2f775251636555522e706e67"&gt;&lt;img src="https://camo.githubusercontent.com/e80523c76e0b2588c56e4370ccde08fb8affbd38/687474703a2f2f692e696d6775722e636f6d2f775251636555522e706e67" alt="Screenshot Airline" data-canonical-src="http://i.imgur.com/wRQceUR.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-palette" class="anchor" aria-hidden="true" href="#palette"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Palette&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-dark-mode-1" class="anchor" aria-hidden="true" href="#dark-mode-1"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Dark mode&lt;/h3&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/cdb2f2e986c564b515c0c698e6c45b4ab5d725a9/687474703a2f2f692e696d6775722e636f6d2f776136363678672e706e67"&gt;&lt;img src="https://camo.githubusercontent.com/cdb2f2e986c564b515c0c698e6c45b4ab5d725a9/687474703a2f2f692e696d6775722e636f6d2f776136363678672e706e67" alt="Palette Dark" data-canonical-src="http://i.imgur.com/wa666xg.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-light-mode-1" class="anchor" aria-hidden="true" href="#light-mode-1"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Light mode&lt;/h3&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/a5a278806880562d3d205ac224103b55e8ae36d9/687474703a2f2f692e696d6775722e636f6d2f3439714b7959572e706e67"&gt;&lt;img src="https://camo.githubusercontent.com/a5a278806880562d3d205ac224103b55e8ae36d9/687474703a2f2f692e696d6775722e636f6d2f3439714b7959572e706e67" alt="Palette Light" data-canonical-src="http://i.imgur.com/49qKyYW.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-contrast-options" class="anchor" aria-hidden="true" href="#contrast-options"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contrast options&lt;/h2&gt;
&lt;p&gt;Refer &lt;a href="https://github.com/morhetz/gruvbox/wiki/Configuration#ggruvbox_contrast_dark"&gt;wiki section&lt;/a&gt; for contrast configuration and other options.&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/613c13a47c2493334318f50d796b58b3a1cf5b81/687474703a2f2f692e696d6775722e636f6d2f354d53626536542e706e67"&gt;&lt;img src="https://camo.githubusercontent.com/613c13a47c2493334318f50d796b58b3a1cf5b81/687474703a2f2f692e696d6775722e636f6d2f354d53626536542e706e67" alt="Contrast Options" data-canonical-src="http://i.imgur.com/5MSbe6T.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Documentation&lt;/h2&gt;
&lt;p&gt;Please check &lt;a href="https://github.com/morhetz/gruvbox/wiki"&gt;wiki&lt;/a&gt; for installation details, terminal-specific setup, troubleshooting, configuration options and others.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-features" class="anchor" aria-hidden="true" href="#features"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Lots of style-customization options (contrast, color invertion, italics usage etc.)&lt;/li&gt;
&lt;li&gt;Extended filetype highlighting: Html, Xml, Vim, Clojure, C, Python, JavaScript, TypeScript, PureScript, CoffeeScript, Ruby, Objective-C, Go, Lua, MoonScript, Java, Markdown, Haskell, Elixir&lt;/li&gt;
&lt;li&gt;Supported plugins: &lt;a href="https://github.com/Lokaltog/vim-easymotion"&gt;EasyMotion&lt;/a&gt;, &lt;a href="https://github.com/justinmk/vim-sneak"&gt;vim-sneak&lt;/a&gt;, &lt;a href="https://github.com/nathanaelkane/vim-indent-guides"&gt;Indent Guides&lt;/a&gt;, &lt;a href="https://github.com/Yggdroot/indentLine"&gt;indentLine&lt;/a&gt;, &lt;a href="https://github.com/kien/rainbow_parentheses.vim"&gt;Rainbow Parentheses&lt;/a&gt;, &lt;a href="https://github.com/bling/vim-airline"&gt;Airline&lt;/a&gt;, &lt;a href="https://github.com/itchyny/lightline.vim"&gt;Lightline&lt;/a&gt;, &lt;a href="https://github.com/airblade/vim-gitgutter"&gt;GitGutter&lt;/a&gt;, &lt;a href="https://github.com/mhinz/vim-signify"&gt;Signify&lt;/a&gt;, &lt;a href="http://www.vim.org/scripts/script.php?script_id=152" rel="nofollow"&gt;ShowMarks&lt;/a&gt;, &lt;a href="https://github.com/kshenoy/vim-signature"&gt;Signature&lt;/a&gt;, &lt;a href="https://github.com/scrooloose/syntastic"&gt;Syntastic&lt;/a&gt;, &lt;a href="https://github.com/w0rp/ale"&gt;Ale&lt;/a&gt;, &lt;a href="https://github.com/kien/ctrlp.vim"&gt;CtrlP&lt;/a&gt;, &lt;a href="https://github.com/mhinz/vim-startify"&gt;Startify&lt;/a&gt;, &lt;a href="https://github.com/scrooloose/nerdtree"&gt;NERDTree&lt;/a&gt;, &lt;a href="https://github.com/justinmk/vim-dirvish"&gt;Dirvish&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-contributions" class="anchor" aria-hidden="true" href="#contributions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contributions&lt;/h2&gt;
&lt;p&gt;See &lt;a href="https://github.com/morhetz/gruvbox-contrib"&gt;gruvbox-contrib&lt;/a&gt; repo for contributions, ports and extras.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-todo" class="anchor" aria-hidden="true" href="#todo"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;ToDo&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Filetype syntax highlighting (R, TeX, Swift, Erlang)&lt;/li&gt;
&lt;li&gt;Plugin support (Tagbar, VimPlug)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-self-promotion" class="anchor" aria-hidden="true" href="#self-promotion"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Self-Promotion&lt;/h2&gt;
&lt;p&gt;If you like gruvbox follow the repository on
&lt;a href="https://github.com/morhetz/gruvbox"&gt;GitHub&lt;/a&gt; and vote for it on
&lt;a href="http://www.vim.org/scripts/script.php?script_id=4349" rel="nofollow"&gt;vim.org&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-license" class="anchor" aria-hidden="true" href="#license"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;License&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/MIT_License" rel="nofollow"&gt;MIT/X11&lt;/a&gt;&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>morhetz</author><guid isPermaLink="false">https://github.com/morhetz/gruvbox</guid><pubDate>Thu, 06 Feb 2020 00:08:00 GMT</pubDate></item><item><title>airblade/vim-gitgutter #9 in Vim script, Today</title><link>https://github.com/airblade/vim-gitgutter</link><description>&lt;p&gt;&lt;i&gt;A Vim plugin which shows a git diff in the gutter (sign column) and stages/undoes hunks and partial hunks.&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="mkd" data-path="README.mkd"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h2&gt;&lt;a id="user-content-vim-gitgutter" class="anchor" aria-hidden="true" href="#vim-gitgutter"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;vim-gitgutter&lt;/h2&gt;
&lt;p&gt;A Vim plugin which shows a git diff in the 'gutter' (sign column).  It shows which lines have been added, modified, or removed.  You can also preview, stage, and undo individual hunks; and stage partial hunks.  The plugin also provides a hunk text object.&lt;/p&gt;
&lt;p&gt;The signs are always up to date and the plugin never saves your buffer.&lt;/p&gt;
&lt;p&gt;Features:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Shows signs for added, modified, and removed lines.&lt;/li&gt;
&lt;li&gt;Runs the diffs asynchronously where possible.&lt;/li&gt;
&lt;li&gt;Ensures signs are always up to date.&lt;/li&gt;
&lt;li&gt;Never saves the buffer.&lt;/li&gt;
&lt;li&gt;Quick jumping between blocks of changed lines ("hunks").&lt;/li&gt;
&lt;li&gt;Stage/undo/preview individual hunks.&lt;/li&gt;
&lt;li&gt;Previews highlight intra-line changes.&lt;/li&gt;
&lt;li&gt;Stage partial hunks.&lt;/li&gt;
&lt;li&gt;Provides a hunk text object.&lt;/li&gt;
&lt;li&gt;Diffs against index (default) or any commit.&lt;/li&gt;
&lt;li&gt;Allows folding all unchanged text.&lt;/li&gt;
&lt;li&gt;Provides fold text showing whether folded lines have been changed.&lt;/li&gt;
&lt;li&gt;Can load all hunk locations into quickfix list or the current window's location list.&lt;/li&gt;
&lt;li&gt;Handles line endings correctly, even with repos that do CRLF conversion.&lt;/li&gt;
&lt;li&gt;Optional line highlighting.&lt;/li&gt;
&lt;li&gt;Optional line number highlighting. (Only available in Neovim 0.3.2 or higher)&lt;/li&gt;
&lt;li&gt;Fully customisable (signs, sign column, line (number) highlights, mappings, extra git-diff arguments, etc).&lt;/li&gt;
&lt;li&gt;Can be toggled on/off, globally or per buffer.&lt;/li&gt;
&lt;li&gt;Preserves signs from other plugins.&lt;/li&gt;
&lt;li&gt;Easy to integrate diff stats into status line; built-in integration with &lt;a href="https://github.com/bling/vim-airline/"&gt;vim-airline&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Works with fish shell (in addition to the usual shells).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Constraints:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Supports git only.  If you work with other version control systems, I recommend &lt;a href="https://github.com/mhinz/vim-signify"&gt;vim-signify&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Relies on the &lt;code&gt;FocusGained&lt;/code&gt; event.  If your terminal doesn't report focus events, either use something like &lt;a href="https://github.com/wincent/terminus"&gt;Terminus&lt;/a&gt; or set &lt;code&gt;let g:gitgutter_terminal_reports_focus=0&lt;/code&gt;.  For tmux, &lt;code&gt;set -g focus-events on&lt;/code&gt; in your tmux.conf.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-screenshot" class="anchor" aria-hidden="true" href="#screenshot"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Screenshot&lt;/h3&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="./screenshot.png?raw=true"&gt;&lt;img src="./screenshot.png?raw=true" alt="screenshot" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In the screenshot above you can see:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Lines 183-184 are new.&lt;/li&gt;
&lt;li&gt;Lines 186-187 have been modified.&lt;/li&gt;
&lt;li&gt;The preview for the modified lines highlights changed regions within the line.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installation&lt;/h3&gt;
&lt;p&gt;Install using your favourite package manager, or use Vim's built-in package support.&lt;/p&gt;
&lt;p&gt;Vim:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mkdir -p ~/.vim/pack/airblade/start
cd ~/.vim/pack/airblade/start
git clone https://github.com/airblade/vim-gitgutter.git
vim -u NONE -c "helptags vim-gitgutter/doc" -c q
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Neovim:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mkdir -p ~/.config/nvim/pack/airblade/start
cd ~/.config/nvim/pack/airblade/start
git clone https://github.com/airblade/vim-gitgutter.git
nvim -u NONE -c "helptags vim-gitgutter/doc" -c q
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-windows" class="anchor" aria-hidden="true" href="#windows"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Windows&lt;/h3&gt;
&lt;p&gt;I recommend configuring vim-gitgutter with the full path to your git executable.  For example:&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-smi"&gt;&lt;span class="pl-k"&gt;g:&lt;/span&gt;gitgutter_git_executable&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;C:\Program Files\Git\bin\git.exe&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is to avoid a problem which occurs if you have file named &lt;code&gt;git.*&lt;/code&gt; (i.e. with any extension in &lt;code&gt;PATHEXT&lt;/code&gt;) in your current folder.  &lt;code&gt;cmd.exe&lt;/code&gt; prioritises the current folder over folders in &lt;code&gt;PATH&lt;/code&gt; and will try to execute your file instead of the &lt;code&gt;git&lt;/code&gt; binary.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-getting-started" class="anchor" aria-hidden="true" href="#getting-started"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Getting started&lt;/h3&gt;
&lt;p&gt;When you make a change to a file tracked by git, the diff markers should appear automatically.  The delay is governed by vim's &lt;code&gt;updatetime&lt;/code&gt; option; the default value is &lt;code&gt;4000&lt;/code&gt;, i.e. 4 seconds, but I suggest reducing it to around 100ms (add &lt;code&gt;set updatetime=100&lt;/code&gt; to your vimrc).  Note &lt;code&gt;updatetime&lt;/code&gt; also controls the delay before vim writes its swap file (see &lt;code&gt;:help updatetime&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;You can jump between hunks with &lt;code&gt;[c&lt;/code&gt; and &lt;code&gt;]c&lt;/code&gt;.  You can preview, stage, and undo hunks with &lt;code&gt;&amp;lt;leader&amp;gt;hp&lt;/code&gt;, &lt;code&gt;&amp;lt;leader&amp;gt;hs&lt;/code&gt;, and &lt;code&gt;&amp;lt;leader&amp;gt;hu&lt;/code&gt; respectively.&lt;/p&gt;
&lt;p&gt;You cannot unstage a staged hunk.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-activation" class="anchor" aria-hidden="true" href="#activation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Activation&lt;/h4&gt;
&lt;p&gt;You can explicitly turn vim-gitgutter off and on (defaults to on):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;turn off with &lt;code&gt;:GitGutterDisable&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;turn on with &lt;code&gt;:GitGutterEnable&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;toggle with &lt;code&gt;:GitGutterToggle&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To toggle vim-gitgutter per buffer:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;turn off with &lt;code&gt;:GitGutterBufferDisable&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;turn on with &lt;code&gt;:GitGutterBufferEnable&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;toggle with &lt;code&gt;:GitGutterBufferToggle&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can turn the signs on and off (defaults to on):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;turn on with &lt;code&gt;:GitGutterSignsEnable&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;turn off with &lt;code&gt;:GitGutterSignsDisable&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;toggle with &lt;code&gt;:GitGutterSignsToggle&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And you can turn line highlighting on and off (defaults to off):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;turn on with &lt;code&gt;:GitGutterLineHighlightsEnable&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;turn off with &lt;code&gt;:GitGutterLineHighlightsDisable&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;toggle with &lt;code&gt;:GitGutterLineHighlightsToggle&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that if you have line highlighting on and signs off, you will have an empty sign column – more accurately, a sign column with invisible signs.  This is because line highlighting requires signs and Vim/NeoVim always shows the sign column when there are signs even if the signs are invisible.&lt;/p&gt;
&lt;p&gt;With Neovim 0.3.2 or higher, you can turn line number highlighting on and off (defaults to off):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;turn on with &lt;code&gt;:GitGutterLineNrHighlightsEnable&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;turn off with &lt;code&gt;:GitGutterLineNrHighlightsDisable&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;toggle with &lt;code&gt;:GitGutterLineNrHighlightsToggle&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The same caveat applies to line number highlighting as to line highlighting just above.&lt;/p&gt;
&lt;p&gt;If you switch off both line highlighting and signs, you won't see the sign column.&lt;/p&gt;
&lt;p&gt;To keep your Vim snappy, vim-gitgutter will suppress the signs when a file has more than 500 changes.  As soon as the number of changes falls below the limit vim-gitgutter will show the signs again.  You can configure the threshold with:&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-smi"&gt;&lt;span class="pl-k"&gt;g:&lt;/span&gt;gitgutter_max_signs&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;500&lt;/span&gt;&lt;span class="pl-c"&gt;  &lt;span class="pl-c"&gt;"&lt;/span&gt; default value&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content-hunks" class="anchor" aria-hidden="true" href="#hunks"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Hunks&lt;/h4&gt;
&lt;p&gt;You can jump between hunks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;jump to next hunk (change): &lt;code&gt;]c&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;jump to previous hunk (change): &lt;code&gt;[c&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Both of those take a preceding count.&lt;/p&gt;
&lt;p&gt;To set your own mappings for these, for example &lt;code&gt;]h&lt;/code&gt; and &lt;code&gt;[h&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;nmap&lt;/span&gt; ]&lt;span class="pl-c1"&gt;h&lt;/span&gt; &lt;span class="pl-c1"&gt;&amp;lt;Plug&amp;gt;&lt;/span&gt;(GitGutterNextHunk)
&lt;span class="pl-c1"&gt;nmap&lt;/span&gt; [&lt;span class="pl-c1"&gt;h&lt;/span&gt; &lt;span class="pl-c1"&gt;&amp;lt;Plug&amp;gt;&lt;/span&gt;(GitGutterPrevHunk)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can load all your hunks into the quickfix list with &lt;code&gt;:GitGutterQuickFix&lt;/code&gt;.  Note this ignores any unsaved changes in your buffers. If the option &lt;code&gt;g:gitgutter_use_location_list&lt;/code&gt; is set, this command will load hunks into the current window's location list instead.&lt;/p&gt;
&lt;p&gt;You can stage or undo an individual hunk when your cursor is in it:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;stage the hunk with &lt;code&gt;&amp;lt;Leader&amp;gt;hs&lt;/code&gt; or&lt;/li&gt;
&lt;li&gt;undo it with &lt;code&gt;&amp;lt;Leader&amp;gt;hu&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To stage part of an additions-only hunk by:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;either visually selecting the part you want and staging with your mapping, e.g. &lt;code&gt;&amp;lt;Leader&amp;gt;hs&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;or using a range with the &lt;code&gt;GitGutterStageHunk&lt;/code&gt; command, e.g. &lt;code&gt;:42,45GitGutterStageHunk&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To stage part of any hunk:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;preview the hunk, e.g. &lt;code&gt;&amp;lt;Leader&amp;gt;hp&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;move to the preview window, e.g. &lt;code&gt;:wincmd P&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;delete the lines you do not want to stage;&lt;/li&gt;
&lt;li&gt;stage the remaining lines: either write (&lt;code&gt;:w&lt;/code&gt;) the window or stage via &lt;code&gt;&amp;lt;Leader&amp;gt;hs&lt;/code&gt; or &lt;code&gt;:GitGutterStageHunk&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note the above workflow is not possible if you have opted in to preview hunks with Vim's popup windows.&lt;/p&gt;
&lt;p&gt;See the FAQ if you want to unstage staged changes.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;.&lt;/code&gt; command will work with both these if you install &lt;a href="https://github.com/tpope/vim-repeat"&gt;repeat.vim&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To set your own mappings for these, for example if you prefer &lt;code&gt;g&lt;/code&gt;-based maps:&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;nmap&lt;/span&gt; ghs &lt;span class="pl-c1"&gt;&amp;lt;Plug&amp;gt;&lt;/span&gt;(GitGutterStageHunk)
&lt;span class="pl-c1"&gt;nmap&lt;/span&gt; ghu &lt;span class="pl-c1"&gt;&amp;lt;Plug&amp;gt;&lt;/span&gt;(GitGutterUndoHunk)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And you can preview a hunk's changes with &lt;code&gt;&amp;lt;Leader&amp;gt;hp&lt;/code&gt;.  The location of the preview window is configured with &lt;code&gt;g:gitgutter_preview_win_location&lt;/code&gt; (default &lt;code&gt;'bo'&lt;/code&gt;).  You can of course change this mapping, e.g:&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;nmap&lt;/span&gt; ghp &lt;span class="pl-c1"&gt;&amp;lt;Plug&amp;gt;&lt;/span&gt;(GitGutterPreviewHunk)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A hunk text object is provided which works in visual and operator-pending modes.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ic&lt;/code&gt; operates on all lines in the current hunk.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ac&lt;/code&gt; operates on all lines in the current hunk and any trailing empty lines.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To re-map these, for example to &lt;code&gt;ih&lt;/code&gt; and &lt;code&gt;ah&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;omap&lt;/span&gt; ih &lt;span class="pl-c1"&gt;&amp;lt;Plug&amp;gt;&lt;/span&gt;(GitGutterTextObjectInnerPending)
&lt;span class="pl-c1"&gt;omap&lt;/span&gt; ah &lt;span class="pl-c1"&gt;&amp;lt;Plug&amp;gt;&lt;/span&gt;(GitGutterTextObjectOuterPending)
&lt;span class="pl-c1"&gt;xmap&lt;/span&gt; ih &lt;span class="pl-c1"&gt;&amp;lt;Plug&amp;gt;&lt;/span&gt;(GitGutterTextObjectInnerVisual)
&lt;span class="pl-c1"&gt;xmap&lt;/span&gt; ah &lt;span class="pl-c1"&gt;&amp;lt;Plug&amp;gt;&lt;/span&gt;(GitGutterTextObjectOuterVisual)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you don't want vim-gitgutter to set up any mappings at all, use this:&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-smi"&gt;&lt;span class="pl-k"&gt;g:&lt;/span&gt;gitgutter_map_keys&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally, you can force vim-gitgutter to update its signs across all visible buffers with &lt;code&gt;:GitGutterAll&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;See the customisation section below for how to change the defaults.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-folding" class="anchor" aria-hidden="true" href="#folding"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Folding&lt;/h3&gt;
&lt;p&gt;Use the &lt;code&gt;GitGutterFold&lt;/code&gt; command to fold all unchanged lines, leaving just the hunks visible.  Use &lt;code&gt;zr&lt;/code&gt; to unfold 3 lines of context above and below a hunk.&lt;/p&gt;
&lt;p&gt;Execute &lt;code&gt;GitGutterFold&lt;/code&gt; a second time to restore the previous view.&lt;/p&gt;
&lt;p&gt;Use &lt;code&gt;gitgutter#fold#foldtext()&lt;/code&gt; to augment the default &lt;code&gt;foldtext()&lt;/code&gt; with an indicator of whether the folded lines have been changed.&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;set&lt;/span&gt; &lt;span class="pl-c1"&gt;foldtext&lt;/span&gt;&lt;span class="pl-k"&gt;=&lt;/span&gt;&lt;span class="pl-en"&gt;gitgutter#fold#foldtext&lt;/span&gt;()&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For a closed fold with changed lines:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Default foldtext():         +-- 45 lines: abcdef
gitgutter#fold#foldtext():  +-- 45 lines (*): abcdef
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can use &lt;code&gt;gitgutter#fold#is_changed()&lt;/code&gt; in your own &lt;code&gt;foldtext&lt;/code&gt; expression to find out whether the folded lines have been changed.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-status-line" class="anchor" aria-hidden="true" href="#status-line"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Status line&lt;/h3&gt;
&lt;p&gt;Call the &lt;code&gt;GitGutterGetHunkSummary()&lt;/code&gt; function from your status line to get a list of counts of added, modified, and removed lines in the current buffer.  For example:&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;"&lt;/span&gt; Your vimrc&lt;/span&gt;
&lt;span class="pl-k"&gt;function&lt;/span&gt;&lt;span class="pl-k"&gt;!&lt;/span&gt; &lt;span class="pl-en"&gt;GitStatus&lt;/span&gt;()
  &lt;span class="pl-k"&gt;let&lt;/span&gt; [&lt;span class="pl-c1"&gt;a&lt;/span&gt;,&lt;span class="pl-c1"&gt;m&lt;/span&gt;,&lt;span class="pl-c1"&gt;r&lt;/span&gt;] &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;GitGutterGetHunkSummary&lt;/span&gt;()
  &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-en"&gt;printf&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;+%d ~%d -%d&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;a&lt;/span&gt;, &lt;span class="pl-c1"&gt;m&lt;/span&gt;, &lt;span class="pl-c1"&gt;r&lt;/span&gt;)
&lt;span class="pl-k"&gt;endfunction&lt;/span&gt;
&lt;span class="pl-c1"&gt;set&lt;/span&gt; &lt;span class="pl-c1"&gt;statusline&lt;/span&gt;&lt;span class="pl-k"&gt;+=&lt;/span&gt;&lt;span class="pl-k"&gt;%&lt;/span&gt;{&lt;span class="pl-en"&gt;GitStatus&lt;/span&gt;()}&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-customisation" class="anchor" aria-hidden="true" href="#customisation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Customisation&lt;/h3&gt;
&lt;p&gt;You can customise:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The sign column's colours&lt;/li&gt;
&lt;li&gt;Whether or not the sign column is shown when there aren't any signs (defaults to no)&lt;/li&gt;
&lt;li&gt;How to handle non-gitgutter signs&lt;/li&gt;
&lt;li&gt;The signs' colours and symbols&lt;/li&gt;
&lt;li&gt;Line highlights&lt;/li&gt;
&lt;li&gt;Whether the diff is relative to the index (default) or working tree.&lt;/li&gt;
&lt;li&gt;The base of the diff&lt;/li&gt;
&lt;li&gt;Extra arguments for &lt;code&gt;git&lt;/code&gt; when running &lt;code&gt;git diff&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Extra arguments for &lt;code&gt;git diff&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Key mappings&lt;/li&gt;
&lt;li&gt;Whether vim-gitgutter is on initially (defaults to on)&lt;/li&gt;
&lt;li&gt;Whether signs are shown (defaults to yes)&lt;/li&gt;
&lt;li&gt;Whether line highlighting is on initially (defaults to off)&lt;/li&gt;
&lt;li&gt;Whether line number highlighting is on initially (defaults to off)&lt;/li&gt;
&lt;li&gt;Whether vim-gitgutter runs asynchronously (defaults to yes)&lt;/li&gt;
&lt;li&gt;Whether to clobber or preserve non-gitgutter signs&lt;/li&gt;
&lt;li&gt;The priority of gitgutter's signs.&lt;/li&gt;
&lt;li&gt;Whether to use a floating/popup window for hunk previews&lt;/li&gt;
&lt;li&gt;Whether to populate the quickfix list or a location list with all hunks&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Please note that vim-gitgutter won't override any colours or highlights you've set in your colorscheme.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-sign-column" class="anchor" aria-hidden="true" href="#sign-column"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Sign column&lt;/h4&gt;
&lt;p&gt;By default vim-gitgutter will make the sign column look like the line number column.&lt;/p&gt;
&lt;p&gt;To customise your sign column's background color, first tell vim-gitgutter to leave it alone:&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-smi"&gt;&lt;span class="pl-k"&gt;g:&lt;/span&gt;gitgutter_override_sign_column_highlight&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And then either update your colorscheme's &lt;code&gt;SignColumn&lt;/code&gt; highlight group or set it in your vimrc:&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;highlight&lt;/span&gt; &lt;span class="pl-c1"&gt;SignColumn&lt;/span&gt; ctermbg&lt;span class="pl-k"&gt;=&lt;/span&gt;whatever&lt;span class="pl-c"&gt;    &lt;span class="pl-c"&gt;"&lt;/span&gt; terminal Vim&lt;/span&gt;
&lt;span class="pl-c1"&gt;highlight&lt;/span&gt; &lt;span class="pl-c1"&gt;SignColumn&lt;/span&gt; guibg&lt;span class="pl-k"&gt;=&lt;/span&gt;whatever&lt;span class="pl-c"&gt;      &lt;span class="pl-c"&gt;"&lt;/span&gt; gVim/MacVim&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;By default the sign column will appear when there are signs to show and disappear when there aren't.  To always have the sign column, add to your vimrc:&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;"&lt;/span&gt; Vim 7.4.2201&lt;/span&gt;
&lt;span class="pl-c1"&gt;set&lt;/span&gt; &lt;span class="pl-c1"&gt;signcolumn&lt;/span&gt;&lt;span class="pl-k"&gt;=&lt;/span&gt;yes&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;GitGutter can preserve or ignore non-gitgutter signs.  For Vim v8.1.0614 and later you can set gitgutter's signs' priorities with &lt;code&gt;g:gitgutter_sign_priority&lt;/code&gt;, so gitgutter defaults to clobbering other signs.  For Neovim v0.4.0 and later you can set an expanding sign column so gitgutter again defaults to clobbering other signs.  Otherwise, gitgutter defaults to preserving other signs.  You can configure this with:&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-smi"&gt;&lt;span class="pl-k"&gt;g:&lt;/span&gt;gitgutter_sign_allow_clobber&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content-signs-colours-and-symbols" class="anchor" aria-hidden="true" href="#signs-colours-and-symbols"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Signs' colours and symbols&lt;/h4&gt;
&lt;p&gt;By default vim-gitgutter uses your colourscheme's &lt;code&gt;Diff*&lt;/code&gt; highlight groups' foreground colours for the signs' foreground colours.  For example, your &lt;code&gt;DiffAdd&lt;/code&gt; foreground colour will be used for the &lt;code&gt;+&lt;/code&gt; sign's foreground colour.&lt;/p&gt;
&lt;p&gt;The signs' background colours will all be set to the sign column's background colour.&lt;/p&gt;
&lt;p&gt;If you don't like the default colours, you can either fix your colourscheme's &lt;code&gt;Diff*&lt;/code&gt; highlights or configure your own &lt;code&gt;GitGutter*&lt;/code&gt; highlight groups.  These groups are:&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;GitGutterAdd&lt;span class="pl-c"&gt;          &lt;span class="pl-c"&gt;"&lt;/span&gt; an added line             (default: links to DiffAdd)&lt;/span&gt;
GitGutterChange&lt;span class="pl-c"&gt;       &lt;span class="pl-c"&gt;"&lt;/span&gt; a changed line            (default: links to DiffChange)&lt;/span&gt;
GitGutterDelete&lt;span class="pl-c"&gt;       &lt;span class="pl-c"&gt;"&lt;/span&gt; at least one removed line (default: links to DiffDelete)&lt;/span&gt;
GitGutterChangeDelete&lt;span class="pl-c"&gt; &lt;span class="pl-c"&gt;"&lt;/span&gt; a changed line followed by at least one removed line (default: links to GitGutterChange)&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can either set these with &lt;code&gt;highlight GitGutterAdd {key}={arg}...&lt;/code&gt; or link them to existing highlight groups with, say, &lt;code&gt;highlight link GitGutterAdd MyDiffAdd&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To get vim-gitgutter's original colours (based on git-diff's colours in my terminal):&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;highlight&lt;/span&gt; GitGutterAdd    guifg&lt;span class="pl-k"&gt;=&lt;/span&gt;#&lt;span class="pl-c1"&gt;009900&lt;/span&gt; guibg&lt;span class="pl-k"&gt;=&lt;/span&gt;&lt;span class="pl-c1"&gt;&amp;lt;X&amp;gt;&lt;/span&gt; ctermfg&lt;span class="pl-k"&gt;=&lt;/span&gt;&lt;span class="pl-c1"&gt;2&lt;/span&gt; ctermbg&lt;span class="pl-k"&gt;=&lt;/span&gt;&lt;span class="pl-c1"&gt;&amp;lt;Y&amp;gt;&lt;/span&gt;
&lt;span class="pl-c1"&gt;highlight&lt;/span&gt; GitGutterChange guifg&lt;span class="pl-k"&gt;=&lt;/span&gt;#bbbb00 guibg&lt;span class="pl-k"&gt;=&lt;/span&gt;&lt;span class="pl-c1"&gt;&amp;lt;X&amp;gt;&lt;/span&gt; ctermfg&lt;span class="pl-k"&gt;=&lt;/span&gt;&lt;span class="pl-c1"&gt;3&lt;/span&gt; ctermbg&lt;span class="pl-k"&gt;=&lt;/span&gt;&lt;span class="pl-c1"&gt;&amp;lt;Y&amp;gt;&lt;/span&gt;
&lt;span class="pl-c1"&gt;highlight&lt;/span&gt; GitGutterDelete guifg&lt;span class="pl-k"&gt;=&lt;/span&gt;#ff2222 guibg&lt;span class="pl-k"&gt;=&lt;/span&gt;&lt;span class="pl-c1"&gt;&amp;lt;X&amp;gt;&lt;/span&gt; ctermfg&lt;span class="pl-k"&gt;=&lt;/span&gt;&lt;span class="pl-c1"&gt;1&lt;/span&gt; ctermbg&lt;span class="pl-k"&gt;=&lt;/span&gt;&lt;span class="pl-c1"&gt;&amp;lt;Y&amp;gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;– where you would replace &lt;code&gt;&amp;lt;X&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;Y&amp;gt;&lt;/code&gt; with the background colour of your &lt;code&gt;SignColumn&lt;/code&gt; in the gui and the terminal respectively.  For example, with the solarized colorscheme and a dark background, &lt;code&gt;guibg=#073642&lt;/code&gt; and &lt;code&gt;ctermbg=0&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To customise the symbols, add the following to your &lt;code&gt;~/.vimrc&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-smi"&gt;&lt;span class="pl-k"&gt;g:&lt;/span&gt;gitgutter_sign_added&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;xx&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-smi"&gt;&lt;span class="pl-k"&gt;g:&lt;/span&gt;gitgutter_sign_modified&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;yy&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-smi"&gt;&lt;span class="pl-k"&gt;g:&lt;/span&gt;gitgutter_sign_removed&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;zz&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-smi"&gt;&lt;span class="pl-k"&gt;g:&lt;/span&gt;gitgutter_sign_removed_first_line&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;^^&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-smi"&gt;&lt;span class="pl-k"&gt;g:&lt;/span&gt;gitgutter_sign_modified_removed&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;ww&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content-line-highlights" class="anchor" aria-hidden="true" href="#line-highlights"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Line highlights&lt;/h4&gt;
&lt;p&gt;Similarly to the signs' colours, set up the following highlight groups in your colorscheme or &lt;code&gt;~/.vimrc&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;GitGutterAddLine&lt;span class="pl-c"&gt;          &lt;span class="pl-c"&gt;"&lt;/span&gt; default: links to DiffAdd&lt;/span&gt;
GitGutterChangeLine&lt;span class="pl-c"&gt;       &lt;span class="pl-c"&gt;"&lt;/span&gt; default: links to DiffChange&lt;/span&gt;
GitGutterDeleteLine&lt;span class="pl-c"&gt;       &lt;span class="pl-c"&gt;"&lt;/span&gt; default: links to DiffDelete&lt;/span&gt;
GitGutterChangeDeleteLine&lt;span class="pl-c"&gt; &lt;span class="pl-c"&gt;"&lt;/span&gt; default: links to GitGutterChangeLineDefault, i.e. DiffChange&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For example, in some colorschemes the &lt;code&gt;DiffText&lt;/code&gt; highlight group is easier to read than &lt;code&gt;DiffChange&lt;/code&gt;.  You could use it like this:&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;highlight&lt;/span&gt; &lt;span class="pl-c1"&gt;link&lt;/span&gt; &lt;span class="pl-v"&gt;GitGutterChangeLine&lt;/span&gt; &lt;span class="pl-v"&gt;DiffText&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content-line-number-highlights" class="anchor" aria-hidden="true" href="#line-number-highlights"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Line number highlights&lt;/h4&gt;
&lt;p&gt;NOTE: This feature requires Neovim 0.3.2 or higher.&lt;/p&gt;
&lt;p&gt;Similarly to the signs' colours, set up the following highlight groups in your colorscheme or &lt;code&gt;~/.vimrc&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;GitGutterAddLineNr&lt;span class="pl-c"&gt;          &lt;span class="pl-c"&gt;"&lt;/span&gt; default: links to CursorLineNr&lt;/span&gt;
GitGutterChangeLineNr&lt;span class="pl-c"&gt;       &lt;span class="pl-c"&gt;"&lt;/span&gt; default: links to CursorLineNr&lt;/span&gt;
GitGutterDeleteLineNr&lt;span class="pl-c"&gt;       &lt;span class="pl-c"&gt;"&lt;/span&gt; default: links to CursorLineNr&lt;/span&gt;
GitGutterChangeDeleteLineNr&lt;span class="pl-c"&gt; &lt;span class="pl-c"&gt;"&lt;/span&gt; default: links to CursorLineNr&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Maybe you think &lt;code&gt;CursorLineNr&lt;/code&gt; is a bit annoying.  For example, you could use &lt;code&gt;Underlined&lt;/code&gt; for this:&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;highlight&lt;/span&gt; &lt;span class="pl-c1"&gt;link&lt;/span&gt; &lt;span class="pl-v"&gt;GitGutterChangeLineNr&lt;/span&gt; &lt;span class="pl-v"&gt;Underlined&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content-whether-the-diff-is-relative-to-the-index-or-working-tree" class="anchor" aria-hidden="true" href="#whether-the-diff-is-relative-to-the-index-or-working-tree"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Whether the diff is relative to the index or working tree&lt;/h4&gt;
&lt;p&gt;By default diffs are relative to the index.  How you can make them relative to the working tree:&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-smi"&gt;&lt;span class="pl-k"&gt;g:&lt;/span&gt;gitgutter_diff_relative_to&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;working_tree&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content-the-base-of-the-diff" class="anchor" aria-hidden="true" href="#the-base-of-the-diff"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;The base of the diff&lt;/h4&gt;
&lt;p&gt;By default buffers are diffed against the index.  However you can diff against any commit by setting:&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-smi"&gt;&lt;span class="pl-k"&gt;g:&lt;/span&gt;gitgutter_diff_base&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;&amp;lt;commit SHA&amp;gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This setting is ignored when the diffs are relative to the working tree.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-extra-arguments-for-git-when-running-git-diff" class="anchor" aria-hidden="true" href="#extra-arguments-for-git-when-running-git-diff"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Extra arguments for &lt;code&gt;git&lt;/code&gt; when running &lt;code&gt;git diff&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;If you want to pass extra arguments to &lt;code&gt;git&lt;/code&gt; when running &lt;code&gt;git diff&lt;/code&gt;, do so like this:&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-smi"&gt;&lt;span class="pl-k"&gt;g:&lt;/span&gt;gitgutter_git_args&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;--git-dir-""&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content-extra-arguments-for-git-diff" class="anchor" aria-hidden="true" href="#extra-arguments-for-git-diff"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Extra arguments for &lt;code&gt;git diff&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;If you want to pass extra arguments to &lt;code&gt;git diff&lt;/code&gt;, for example to ignore whitespace, do so like this:&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-smi"&gt;&lt;span class="pl-k"&gt;g:&lt;/span&gt;gitgutter_diff_args&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;-w&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content-key-mappings" class="anchor" aria-hidden="true" href="#key-mappings"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Key mappings&lt;/h4&gt;
&lt;p&gt;To disable all key mappings:&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-smi"&gt;&lt;span class="pl-k"&gt;g:&lt;/span&gt;gitgutter_map_keys&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;See above for configuring maps for hunk-jumping and staging/undoing.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-use-a-custom-grep-command" class="anchor" aria-hidden="true" href="#use-a-custom-grep-command"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Use a custom &lt;code&gt;grep&lt;/code&gt; command&lt;/h4&gt;
&lt;p&gt;If you use an alternative to grep, you can tell vim-gitgutter to use it here.&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;"&lt;/span&gt;&lt;span class="pl-c1"&gt; Default:&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-smi"&gt;&lt;span class="pl-k"&gt;g:&lt;/span&gt;gitgutter_grep&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;grep&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content-to-turn-off-vim-gitgutter-by-default" class="anchor" aria-hidden="true" href="#to-turn-off-vim-gitgutter-by-default"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;To turn off vim-gitgutter by default&lt;/h4&gt;
&lt;p&gt;Add &lt;code&gt;let g:gitgutter_enabled = 0&lt;/code&gt; to your &lt;code&gt;~/.vimrc&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-to-turn-off-signs-by-default" class="anchor" aria-hidden="true" href="#to-turn-off-signs-by-default"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;To turn off signs by default&lt;/h4&gt;
&lt;p&gt;Add &lt;code&gt;let g:gitgutter_signs = 0&lt;/code&gt; to your &lt;code&gt;~/.vimrc&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-to-turn-on-line-highlighting-by-default" class="anchor" aria-hidden="true" href="#to-turn-on-line-highlighting-by-default"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;To turn on line highlighting by default&lt;/h4&gt;
&lt;p&gt;Add &lt;code&gt;let g:gitgutter_highlight_lines = 1&lt;/code&gt; to your &lt;code&gt;~/.vimrc&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-to-turn-on-line-number-highlighting-by-default" class="anchor" aria-hidden="true" href="#to-turn-on-line-number-highlighting-by-default"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;To turn on line number highlighting by default&lt;/h4&gt;
&lt;p&gt;Add &lt;code&gt;let g:gitgutter_highlight_linenrs = 1&lt;/code&gt; to your &lt;code&gt;~/.vimrc&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-to-turn-off-asynchronous-updates" class="anchor" aria-hidden="true" href="#to-turn-off-asynchronous-updates"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;To turn off asynchronous updates&lt;/h4&gt;
&lt;p&gt;By default diffs are run asynchronously.  To run diffs synchronously instead:&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-smi"&gt;&lt;span class="pl-k"&gt;g:&lt;/span&gt;gitgutter_async&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content-to-use-floatingpopup-windows-for-hunk-previews" class="anchor" aria-hidden="true" href="#to-use-floatingpopup-windows-for-hunk-previews"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;To use floating/popup windows for hunk previews&lt;/h4&gt;
&lt;p&gt;Add &lt;code&gt;let g:gitgutter_preview_win_floating = 1&lt;/code&gt; to your &lt;code&gt;~/.vimrc&lt;/code&gt;.  Note that on Vim this prevents you staging (partial) hunks via the preview window.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-to-load-all-hunks-into-the-current-windows-location-list-instead-of-the-quickfix-list" class="anchor" aria-hidden="true" href="#to-load-all-hunks-into-the-current-windows-location-list-instead-of-the-quickfix-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;To load all hunks into the current window's location list instead of the quickfix list&lt;/h4&gt;
&lt;p&gt;Add &lt;code&gt;let g:gitgutter_use_location_list = 1&lt;/code&gt; to your &lt;code&gt;~/.vimrc&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-extensions" class="anchor" aria-hidden="true" href="#extensions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Extensions&lt;/h3&gt;
&lt;h4&gt;&lt;a id="user-content-operate-on-every-line-in-a-hunk" class="anchor" aria-hidden="true" href="#operate-on-every-line-in-a-hunk"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Operate on every line in a hunk&lt;/h4&gt;
&lt;p&gt;You can map an operator to do whatever you want to every line in a hunk.&lt;/p&gt;
&lt;p&gt;Let's say, for example, you want to remove trailing whitespace.&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;function&lt;/span&gt;&lt;span class="pl-k"&gt;!&lt;/span&gt; &lt;span class="pl-en"&gt;CleanUp&lt;/span&gt;(&lt;span class="pl-k"&gt;...&lt;/span&gt;)
  &lt;span class="pl-k"&gt;if&lt;/span&gt; &lt;span class="pl-smi"&gt;&lt;span class="pl-k"&gt;a:&lt;/span&gt;0&lt;/span&gt;&lt;span class="pl-c"&gt;  &lt;span class="pl-c"&gt;"&lt;/span&gt; opfunc&lt;/span&gt;
    &lt;span class="pl-k"&gt;let&lt;/span&gt; [&lt;span class="pl-c1"&gt;first&lt;/span&gt;, &lt;span class="pl-c1"&gt;last&lt;/span&gt;] &lt;span class="pl-k"&gt;=&lt;/span&gt; [&lt;span class="pl-en"&gt;line&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;'[&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;), &lt;span class="pl-en"&gt;line&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;']&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)]
  &lt;span class="pl-k"&gt;else&lt;/span&gt;
    &lt;span class="pl-k"&gt;let&lt;/span&gt; [&lt;span class="pl-c1"&gt;first&lt;/span&gt;, &lt;span class="pl-c1"&gt;last&lt;/span&gt;] &lt;span class="pl-k"&gt;=&lt;/span&gt; [&lt;span class="pl-en"&gt;line&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;'&amp;lt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;), &lt;span class="pl-en"&gt;line&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;'&amp;gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)]
  &lt;span class="pl-k"&gt;endif&lt;/span&gt;
  &lt;span class="pl-k"&gt;for&lt;/span&gt; lnum &lt;span class="pl-k"&gt;in&lt;/span&gt; &lt;span class="pl-en"&gt;range&lt;/span&gt;(&lt;span class="pl-c1"&gt;first&lt;/span&gt;, &lt;span class="pl-c1"&gt;last&lt;/span&gt;)
    &lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-c1"&gt;line&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;getline&lt;/span&gt;(lnum)

&lt;span class="pl-c"&gt;    &lt;span class="pl-c"&gt;"&lt;/span&gt; clean up the text, e.g.:&lt;/span&gt;
    &lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-c1"&gt;line&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;substitute&lt;/span&gt;(&lt;span class="pl-c1"&gt;line&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;\s\+$&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;)

    &lt;span class="pl-c1"&gt;call&lt;/span&gt; &lt;span class="pl-en"&gt;setline&lt;/span&gt;(lnum, &lt;span class="pl-c1"&gt;line&lt;/span&gt;)
  &lt;span class="pl-k"&gt;endfor&lt;/span&gt;
&lt;span class="pl-k"&gt;endfunction&lt;/span&gt;

&lt;span class="pl-c1"&gt;nmap&lt;/span&gt; &lt;span class="pl-c1"&gt;&amp;lt;silent&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;&amp;lt;Leader&amp;gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;x&lt;/span&gt; :&lt;span class="pl-c1"&gt;set&lt;/span&gt; &lt;span class="pl-c1"&gt;opfunc&lt;/span&gt;&lt;span class="pl-k"&gt;=&lt;/span&gt;CleanUp&lt;span class="pl-c1"&gt;&amp;lt;CR&amp;gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;g&lt;/span&gt;&lt;span class="pl-smi"&gt;@&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then place your cursor in a hunk and type &lt;code&gt;\xic&lt;/code&gt; (assuming a leader of &lt;code&gt;\&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Alternatively you could place your cursor in a hunk, type &lt;code&gt;vic&lt;/code&gt; to select it, then &lt;code&gt;:call CleanUp()&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-operate-on-every-changed-line-in-a-file" class="anchor" aria-hidden="true" href="#operate-on-every-changed-line-in-a-file"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Operate on every changed line in a file&lt;/h4&gt;
&lt;p&gt;You can write a command to do whatever you want to every changed line in a file.&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;function&lt;/span&gt;&lt;span class="pl-k"&gt;!&lt;/span&gt; &lt;span class="pl-en"&gt;GlobalChangedLines&lt;/span&gt;(ex_cmd)
  &lt;span class="pl-k"&gt;for&lt;/span&gt; hunk &lt;span class="pl-k"&gt;in&lt;/span&gt; &lt;span class="pl-en"&gt;GitGutterGetHunks&lt;/span&gt;()
    &lt;span class="pl-k"&gt;for&lt;/span&gt; lnum &lt;span class="pl-k"&gt;in&lt;/span&gt; &lt;span class="pl-en"&gt;range&lt;/span&gt;(hunk[&lt;span class="pl-c1"&gt;2&lt;/span&gt;], hunk[&lt;span class="pl-c1"&gt;2&lt;/span&gt;]&lt;span class="pl-k"&gt;+&lt;/span&gt;hunk[&lt;span class="pl-c1"&gt;3&lt;/span&gt;]&lt;span class="pl-c1"&gt;-1&lt;/span&gt;)
      &lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-c1"&gt;cursor&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;getcurpos&lt;/span&gt;()
      &lt;span class="pl-c1"&gt;silent&lt;/span&gt;&lt;span class="pl-k"&gt;!&lt;/span&gt; &lt;span class="pl-c1"&gt;execute&lt;/span&gt; lnum.&lt;span class="pl-smi"&gt;&lt;span class="pl-k"&gt;a:&lt;/span&gt;ex_cmd&lt;/span&gt;
      &lt;span class="pl-c1"&gt;call&lt;/span&gt; &lt;span class="pl-en"&gt;setpos&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;.&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;cursor&lt;/span&gt;)
    &lt;span class="pl-k"&gt;endfor&lt;/span&gt;
  &lt;span class="pl-k"&gt;endfor&lt;/span&gt;
&lt;span class="pl-k"&gt;endfunction&lt;/span&gt;

&lt;span class="pl-c1"&gt;command&lt;/span&gt; -&lt;span class="pl-en"&gt;nargs&lt;/span&gt;=&lt;span class="pl-c1"&gt;1&lt;/span&gt; Glines &lt;span class="pl-c1"&gt;call&lt;/span&gt; &lt;span class="pl-en"&gt;GlobalChangedLines&lt;/span&gt;(&lt;span class="pl-c1"&gt;&amp;lt;q-args&amp;gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let's say, for example, you want to remove trailing whitespace from all changed lines:&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;:Glines &lt;span class="pl-c1"&gt;s&lt;/span&gt;&lt;span class="pl-sr"&gt;/\s\+$/&lt;/span&gt;/&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content-cycle-through-hunks-in-current-buffer" class="anchor" aria-hidden="true" href="#cycle-through-hunks-in-current-buffer"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Cycle through hunks in current buffer&lt;/h4&gt;
&lt;p&gt;This is like &lt;code&gt;:GitGutterNextHunk&lt;/code&gt; but when it gets to the last hunk in the buffer it cycles around to the first.&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;function&lt;/span&gt;&lt;span class="pl-k"&gt;!&lt;/span&gt; &lt;span class="pl-en"&gt;GitGutterNextHunkCycle&lt;/span&gt;()
  &lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-c1"&gt;line&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;line&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;.&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;)
  &lt;span class="pl-c1"&gt;silent&lt;/span&gt;&lt;span class="pl-k"&gt;!&lt;/span&gt; GitGutterNextHunk
  &lt;span class="pl-k"&gt;if&lt;/span&gt; &lt;span class="pl-en"&gt;line&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;.&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-k"&gt;==&lt;/span&gt; &lt;span class="pl-c1"&gt;line&lt;/span&gt;
    &lt;span class="pl-c1"&gt;1&lt;/span&gt;
    GitGutterNextHunk
  &lt;span class="pl-k"&gt;endif&lt;/span&gt;
&lt;span class="pl-k"&gt;endfunction&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content-cycle-through-hunks-in-all-buffers" class="anchor" aria-hidden="true" href="#cycle-through-hunks-in-all-buffers"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Cycle through hunks in all buffers&lt;/h4&gt;
&lt;p&gt;You can use &lt;code&gt;:GitGutterQuickFix&lt;/code&gt; to load all hunks into the quickfix list or the current window's location list.&lt;/p&gt;
&lt;p&gt;Alternatively, given that&lt;code&gt;]c&lt;/code&gt; and &lt;code&gt;[c&lt;/code&gt; jump from one hunk to the next in the current buffer, you can use this code to jump to the next hunk no matter which buffer it's in.&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;function&lt;/span&gt;&lt;span class="pl-k"&gt;!&lt;/span&gt; &lt;span class="pl-en"&gt;NextHunkAllBuffers&lt;/span&gt;()
  &lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-c1"&gt;line&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;line&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;.&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;)
  GitGutterNextHunk
  &lt;span class="pl-k"&gt;if&lt;/span&gt; &lt;span class="pl-en"&gt;line&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;.&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-k"&gt;!=&lt;/span&gt; &lt;span class="pl-c1"&gt;line&lt;/span&gt;
    &lt;span class="pl-k"&gt;return&lt;/span&gt;
  &lt;span class="pl-k"&gt;endif&lt;/span&gt;

  &lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-c1"&gt;bufnr&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;bufnr&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;)
  &lt;span class="pl-k"&gt;while&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;
    &lt;span class="pl-c1"&gt;bnext&lt;/span&gt;
    &lt;span class="pl-k"&gt;if&lt;/span&gt; &lt;span class="pl-en"&gt;bufnr&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-k"&gt;==&lt;/span&gt; &lt;span class="pl-c1"&gt;bufnr&lt;/span&gt;
      &lt;span class="pl-k"&gt;return&lt;/span&gt;
    &lt;span class="pl-k"&gt;endif&lt;/span&gt;
    &lt;span class="pl-k"&gt;if&lt;/span&gt; &lt;span class="pl-k"&gt;!&lt;/span&gt;&lt;span class="pl-en"&gt;empty&lt;/span&gt;(&lt;span class="pl-en"&gt;GitGutterGetHunks&lt;/span&gt;())
      &lt;span class="pl-c1"&gt;1&lt;/span&gt;
      GitGutterNextHunk
      &lt;span class="pl-k"&gt;return&lt;/span&gt;
    &lt;span class="pl-k"&gt;endif&lt;/span&gt;
  &lt;span class="pl-k"&gt;endwhile&lt;/span&gt;
&lt;span class="pl-k"&gt;endfunction&lt;/span&gt;

&lt;span class="pl-k"&gt;function&lt;/span&gt;&lt;span class="pl-k"&gt;!&lt;/span&gt; &lt;span class="pl-en"&gt;PrevHunkAllBuffers&lt;/span&gt;()
  &lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-c1"&gt;line&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;line&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;.&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;)
  GitGutterPrevHunk
  &lt;span class="pl-k"&gt;if&lt;/span&gt; &lt;span class="pl-en"&gt;line&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;.&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-k"&gt;!=&lt;/span&gt; &lt;span class="pl-c1"&gt;line&lt;/span&gt;
    &lt;span class="pl-k"&gt;return&lt;/span&gt;
  &lt;span class="pl-k"&gt;endif&lt;/span&gt;

  &lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-c1"&gt;bufnr&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;bufnr&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;)
  &lt;span class="pl-k"&gt;while&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;
    &lt;span class="pl-c1"&gt;bprevious&lt;/span&gt;
    &lt;span class="pl-k"&gt;if&lt;/span&gt; &lt;span class="pl-en"&gt;bufnr&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-k"&gt;==&lt;/span&gt; &lt;span class="pl-c1"&gt;bufnr&lt;/span&gt;
      &lt;span class="pl-k"&gt;return&lt;/span&gt;
    &lt;span class="pl-k"&gt;endif&lt;/span&gt;
    &lt;span class="pl-k"&gt;if&lt;/span&gt; &lt;span class="pl-k"&gt;!&lt;/span&gt;&lt;span class="pl-en"&gt;empty&lt;/span&gt;(&lt;span class="pl-en"&gt;GitGutterGetHunks&lt;/span&gt;())
      &lt;span class="pl-c1"&gt;normal&lt;/span&gt;&lt;span class="pl-k"&gt;!&lt;/span&gt; G
      GitGutterPrevHunk
      &lt;span class="pl-k"&gt;return&lt;/span&gt;
    &lt;span class="pl-k"&gt;endif&lt;/span&gt;
  &lt;span class="pl-k"&gt;endwhile&lt;/span&gt;
&lt;span class="pl-k"&gt;endfunction&lt;/span&gt;

&lt;span class="pl-c1"&gt;nmap&lt;/span&gt; &lt;span class="pl-c1"&gt;&amp;lt;silent&amp;gt;&lt;/span&gt; ]&lt;span class="pl-c1"&gt;c&lt;/span&gt; :&lt;span class="pl-c1"&gt;call&lt;/span&gt; &lt;span class="pl-en"&gt;NextHunkAllBuffers&lt;/span&gt;()&lt;span class="pl-c1"&gt;&amp;lt;CR&amp;gt;&lt;/span&gt;
&lt;span class="pl-c1"&gt;nmap&lt;/span&gt; &lt;span class="pl-c1"&gt;&amp;lt;silent&amp;gt;&lt;/span&gt; [&lt;span class="pl-c1"&gt;c&lt;/span&gt; :&lt;span class="pl-c1"&gt;call&lt;/span&gt; &lt;span class="pl-en"&gt;PrevHunkAllBuffers&lt;/span&gt;()&lt;span class="pl-c1"&gt;&amp;lt;CR&amp;gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-faq" class="anchor" aria-hidden="true" href="#faq"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;FAQ&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;How can I turn off realtime updates?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Add this to your vim configuration (in an &lt;code&gt;/after/plugin&lt;/code&gt; directory):&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;"&lt;/span&gt; .vim/after/plugin/gitgutter.vim&lt;/span&gt;
&lt;span class="pl-c1"&gt;autocmd&lt;/span&gt;&lt;span class="pl-k"&gt;!&lt;/span&gt; gitgutter &lt;span class="pl-c1"&gt;CursorHold&lt;/span&gt;,&lt;span class="pl-c1"&gt;CursorHoldI&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;I turned off realtime updates, how can I have signs updated when I save a file?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you really want to update the signs when you save a file, add this to your vimrc:&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;autocmd&lt;/span&gt; &lt;span class="pl-c1"&gt;BufWritePost&lt;/span&gt; &lt;span class="pl-k"&gt;*&lt;/span&gt; GitGutter&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;Why can't I unstage staged changes?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This plugin is for showing changes between the buffer and the index (and staging/undoing those changes).  Unstaging a staged hunk would require showing changes between the index and HEAD, which is out of scope.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Why are the colours in the sign column weird?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Your colorscheme is configuring the &lt;code&gt;SignColumn&lt;/code&gt; highlight group weirdly.  Please see the section above on customising the sign column.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Why are the colours in the preview window weird?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Probably because your colourscheme doesn't configure the &lt;code&gt;diff{Added,Changed,Removed}&lt;/code&gt; highlight groups.  Try this in &lt;code&gt;after/syntax/diff.vim&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;highlight&lt;/span&gt; &lt;span class="pl-c1"&gt;link&lt;/span&gt; &lt;span class="pl-v"&gt;diffAdded&lt;/span&gt; &lt;span class="pl-v"&gt;DiffAdd&lt;/span&gt;
&lt;span class="pl-c1"&gt;highlight&lt;/span&gt; &lt;span class="pl-c1"&gt;link&lt;/span&gt; &lt;span class="pl-v"&gt;diffChanged&lt;/span&gt; &lt;span class="pl-v"&gt;DiffChange&lt;/span&gt;
&lt;span class="pl-c1"&gt;highlight&lt;/span&gt; &lt;span class="pl-c1"&gt;link&lt;/span&gt; &lt;span class="pl-v"&gt;diffRemoved&lt;/span&gt; &lt;span class="pl-v"&gt;DiffDelete&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;What happens if I also use another plugin which uses signs (e.g. Syntastic)?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You can configure whether GitGutter preserves or clobbers other signs using &lt;code&gt;g:gitgutter_sign_allow_clobber&lt;/code&gt;.  Set to &lt;code&gt;1&lt;/code&gt; to clobber other signs (default on Vim &amp;gt;= 8.1.0614 and NeoVim &amp;gt;= 0.4.0) or &lt;code&gt;0&lt;/code&gt; to preserve them.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-troubleshooting" class="anchor" aria-hidden="true" href="#troubleshooting"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Troubleshooting&lt;/h3&gt;
&lt;h4&gt;&lt;a id="user-content-when-no-signs-are-showing-at-all" class="anchor" aria-hidden="true" href="#when-no-signs-are-showing-at-all"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;When no signs are showing at all&lt;/h4&gt;
&lt;p&gt;Here are some things you can check:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Try adding &lt;code&gt;let g:gitgutter_grep=''&lt;/code&gt; to your vimrc.  If it works, the problem is grep producing non-plain output; e.g. ANSI escape codes or colours.&lt;/li&gt;
&lt;li&gt;Verify &lt;code&gt;:echo system("git --version")&lt;/code&gt; succeeds.&lt;/li&gt;
&lt;li&gt;Verify your git config is compatible with the version of git returned by the command above.&lt;/li&gt;
&lt;li&gt;Verify your Vim supports signs (&lt;code&gt;:echo has('signs')&lt;/code&gt; should give &lt;code&gt;1&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Verify your file is being tracked by git and has unstaged changes.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a id="user-content-when-the-whole-file-is-marked-as-added" class="anchor" aria-hidden="true" href="#when-the-whole-file-is-marked-as-added"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;When the whole file is marked as added&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;If you use zsh, and you set &lt;code&gt;CDPATH&lt;/code&gt;, make sure &lt;code&gt;CDPATH&lt;/code&gt; doesn't include the current directory.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a id="user-content-when-signs-take-a-few-seconds-to-appear" class="anchor" aria-hidden="true" href="#when-signs-take-a-few-seconds-to-appear"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;When signs take a few seconds to appear&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Try reducing &lt;code&gt;updatetime&lt;/code&gt;, e.g. &lt;code&gt;set updatetime=100&lt;/code&gt;.  Note this also controls the delay before vim writes its swap file.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a id="user-content-when-signs-dont-update-after-focusing-vim" class="anchor" aria-hidden="true" href="#when-signs-dont-update-after-focusing-vim"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;When signs don't update after focusing Vim&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Your terminal probably isn't reporting focus events.  Either try installing &lt;a href="https://github.com/wincent/terminus"&gt;Terminus&lt;/a&gt; or set &lt;code&gt;let g:gitgutter_terminal_reports_focus=0&lt;/code&gt;.  For tmux, try &lt;code&gt;set -g focus-events on&lt;/code&gt; in your tmux.conf.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-shameless-plug" class="anchor" aria-hidden="true" href="#shameless-plug"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Shameless Plug&lt;/h3&gt;
&lt;p&gt;If this plugin has helped you, or you'd like to learn more about Vim, why not check out this screencast I wrote for PeepCode:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://pluralsight.com/training/Courses/TableOfContents/smash-into-vim" rel="nofollow"&gt;Smash Into Vim&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This was one of PeepCode's all-time top three bestsellers and is now available at Pluralsight.&lt;/p&gt;
&lt;p&gt;You can read reviews on my &lt;a href="http://airbladesoftware.com/peepcode-vim" rel="nofollow"&gt;website&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-intellectual-property" class="anchor" aria-hidden="true" href="#intellectual-property"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Intellectual Property&lt;/h3&gt;
&lt;p&gt;Copyright Andrew Stewart, AirBlade Software Ltd.  Released under the MIT licence.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>airblade</author><guid isPermaLink="false">https://github.com/airblade/vim-gitgutter</guid><pubDate>Thu, 06 Feb 2020 00:09:00 GMT</pubDate></item><item><title>preservim/nerdtree #10 in Vim script, Today</title><link>https://github.com/preservim/nerdtree</link><description>&lt;p&gt;&lt;i&gt;A tree explorer plugin for vim.&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="markdown" data-path="README.markdown"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-the-nerdtree-" class="anchor" aria-hidden="true" href="#the-nerdtree-"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;The NERDTree &lt;a href="https://github.com/preservim/nerdtree/actions?workflow=Vint"&gt;&lt;img src="https://github.com/preservim/nerdtree/workflows/Vint/badge.svg" alt="Vint" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;h2&gt;&lt;a id="user-content-introduction" class="anchor" aria-hidden="true" href="#introduction"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Introduction&lt;/h2&gt;
&lt;p&gt;The NERDTree is a file system explorer for the Vim editor. Using this plugin,
users can visually browse complex directory hierarchies, quickly open files for
reading or editing, and perform basic file system operations.&lt;/p&gt;
&lt;p&gt;This plugin can also be extended with custom mappings using a special API. The
details of this API and of other NERDTree features are described in the
included documentation.&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://github.com/preservim/nerdtree/raw/master/screenshot.png"&gt;&lt;img src="https://github.com/preservim/nerdtree/raw/master/screenshot.png" alt="NERDTree Screenshot" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installation&lt;/h2&gt;
&lt;p&gt;Below are just some of the methods for installing NERDTree. Do not follow all of these instructions; just pick your favorite one. Other plugin managers exist, and NERDTree should install just fine with any of them.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-vim-8-packages" class="anchor" aria-hidden="true" href="#vim-8-packages"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Vim 8+ packages&lt;/h4&gt;
&lt;p&gt;If you are using VIM version 8 or higher you can use its built-in package management; see &lt;code&gt;:help packages&lt;/code&gt; for more information. Just run these commands in your terminal:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;git clone https://github.com/preservim/nerdtree.git &lt;span class="pl-k"&gt;~&lt;/span&gt;/.vim/pack/vendor/start/nerdtree
vim -u NONE -c &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;helptags ~/.vim/pack/vendor/start/nerdtree/doc&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; -c q&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Otherwise, these are some of the several 3rd-party plugin managers you can choose from. Be sure you read the instructions for your chosen plugin, as there typically are additional steps you nee d to take.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-pathogenvim" class="anchor" aria-hidden="true" href="#pathogenvim"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="https://github.com/tpope/vim-pathogen"&gt;pathogen.vim&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;In the terminal,&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;git clone https://github.com/preservim/nerdtree.git &lt;span class="pl-k"&gt;~&lt;/span&gt;/.vim/bundle/nerdtree&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In your vimrc,&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;call&lt;/span&gt; &lt;span class="pl-en"&gt;pathogen#infect&lt;/span&gt;()
&lt;span class="pl-c1"&gt;syntax&lt;/span&gt; &lt;span class="pl-c1"&gt;on&lt;/span&gt;
&lt;span class="pl-c1"&gt;filetype&lt;/span&gt; &lt;span class="pl-c1"&gt;plugin&lt;/span&gt; &lt;span class="pl-c1"&gt;indent&lt;/span&gt; &lt;span class="pl-c1"&gt;on&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then reload vim, run &lt;code&gt;:helptags ~/.vim/bundle/nerdtree/doc/&lt;/code&gt; or &lt;code&gt;:Helptags&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-vundlevim" class="anchor" aria-hidden="true" href="#vundlevim"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="https://github.com/VundleVim/Vundle.vim"&gt;Vundle.vim&lt;/a&gt;&lt;/h4&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;call&lt;/span&gt; &lt;span class="pl-en"&gt;vundle#begin&lt;/span&gt;()
&lt;span class="pl-c1"&gt;Plugin&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;preservim/nerdtree&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-c1"&gt;call&lt;/span&gt; &lt;span class="pl-en"&gt;vundle#end&lt;/span&gt;()&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content-vim-plug" class="anchor" aria-hidden="true" href="#vim-plug"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="https://github.com/junegunn/vim-plug"&gt;vim-plug&lt;/a&gt;&lt;/h4&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;call&lt;/span&gt; &lt;span class="pl-en"&gt;plug#begin&lt;/span&gt;()
Plug &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;preservim/nerdtree&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-c1"&gt;call&lt;/span&gt; &lt;span class="pl-en"&gt;plug#end&lt;/span&gt;()&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content-apt-vim" class="anchor" aria-hidden="true" href="#apt-vim"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="https://github.com/egalpin/apt-vim"&gt;apt-vim&lt;/a&gt;&lt;/h4&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;apt-vim install -y https://github.com/preservim/nerdtree.git&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-faq-here-and-in-the-wiki" class="anchor" aria-hidden="true" href="#faq-here-and-in-the-wiki"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;F.A.Q. (here, and in the &lt;a href="https://github.com/preservim/nerdtree/wiki"&gt;Wiki&lt;/a&gt;)&lt;/h2&gt;
&lt;h4&gt;&lt;a id="user-content-is-there-any-support-for-git-flags" class="anchor" aria-hidden="true" href="#is-there-any-support-for-git-flags"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Is there any support for &lt;code&gt;git&lt;/code&gt; flags?&lt;/h4&gt;
&lt;p&gt;Yes, install &lt;a href="https://github.com/Xuyuanp/nerdtree-git-plugin"&gt;nerdtree-git-plugin&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;&lt;a id="user-content-can-i-have-the-nerdtree-on-every-tab-automatically" class="anchor" aria-hidden="true" href="#can-i-have-the-nerdtree-on-every-tab-automatically"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Can I have the nerdtree on every tab automatically?&lt;/h4&gt;
&lt;p&gt;Nope. If this is something you want then chances are you aren't using tabs and
buffers as they were intended to be used. Read this
&lt;a href="http://stackoverflow.com/questions/102384/using-vims-tabs-like-buffers" rel="nofollow"&gt;http://stackoverflow.com/questions/102384/using-vims-tabs-like-buffers&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you are interested in this behaviour then consider &lt;a href="https://github.com/jistr/vim-nerdtree-tabs"&gt;vim-nerdtree-tabs&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;&lt;a id="user-content-how-can-i-open-a-nerdtree-automatically-when-vim-starts-up" class="anchor" aria-hidden="true" href="#how-can-i-open-a-nerdtree-automatically-when-vim-starts-up"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;How can I open a NERDTree automatically when vim starts up?&lt;/h4&gt;
&lt;p&gt;Stick this in your vimrc: &lt;code&gt;autocmd vimenter * NERDTree&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;&lt;a id="user-content-how-can-i-open-a-nerdtree-automatically-when-vim-starts-up-if-no-files-were-specified" class="anchor" aria-hidden="true" href="#how-can-i-open-a-nerdtree-automatically-when-vim-starts-up-if-no-files-were-specified"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;How can I open a NERDTree automatically when vim starts up if no files were specified?&lt;/h4&gt;
&lt;p&gt;Stick this in your vimrc:&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;autocmd&lt;/span&gt; &lt;span class="pl-c1"&gt;StdinReadPre&lt;/span&gt; &lt;span class="pl-k"&gt;*&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-smi"&gt;&lt;span class="pl-k"&gt;s:&lt;/span&gt;std_in&lt;/span&gt;&lt;span class="pl-k"&gt;=&lt;/span&gt;&lt;span class="pl-c1"&gt;1&lt;/span&gt;
&lt;span class="pl-c1"&gt;autocmd&lt;/span&gt; &lt;span class="pl-c1"&gt;VimEnter&lt;/span&gt; &lt;span class="pl-k"&gt;*&lt;/span&gt; &lt;span class="pl-k"&gt;if&lt;/span&gt; &lt;span class="pl-en"&gt;argc&lt;/span&gt;() &lt;span class="pl-k"&gt;==&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt; &lt;span class="pl-k"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="pl-k"&gt;!&lt;/span&gt;&lt;span class="pl-en"&gt;exists&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;s:std_in&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) | NERDTree | &lt;span class="pl-k"&gt;endif&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note: Now start vim with plain &lt;code&gt;vim&lt;/code&gt;, not &lt;code&gt;vim .&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;&lt;a id="user-content-what-if-im-also-opening-a-saved-session-for-example-vim--s-session_filevim-i-dont-want-nerdtree-to-open-in-that-scenario" class="anchor" aria-hidden="true" href="#what-if-im-also-opening-a-saved-session-for-example-vim--s-session_filevim-i-dont-want-nerdtree-to-open-in-that-scenario"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;What if I'm also opening a saved session, for example &lt;code&gt;vim -S session_file.vim&lt;/code&gt;? I don't want NERDTree to open in that scenario.&lt;/h4&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;autocmd&lt;/span&gt; &lt;span class="pl-c1"&gt;StdinReadPre&lt;/span&gt; &lt;span class="pl-k"&gt;*&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-smi"&gt;&lt;span class="pl-k"&gt;s:&lt;/span&gt;std_in&lt;/span&gt;&lt;span class="pl-k"&gt;=&lt;/span&gt;&lt;span class="pl-c1"&gt;1&lt;/span&gt;
&lt;span class="pl-c1"&gt;autocmd&lt;/span&gt; &lt;span class="pl-c1"&gt;VimEnter&lt;/span&gt; &lt;span class="pl-k"&gt;*&lt;/span&gt; &lt;span class="pl-k"&gt;if&lt;/span&gt; &lt;span class="pl-en"&gt;argc&lt;/span&gt;() &lt;span class="pl-k"&gt;==&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt; &lt;span class="pl-k"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="pl-k"&gt;!&lt;/span&gt;&lt;span class="pl-en"&gt;exists&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;s:std_in&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-k"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="pl-smi"&gt;&lt;span class="pl-k"&gt;v:&lt;/span&gt;this_session&lt;/span&gt; &lt;span class="pl-k"&gt;==&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; | NERDTree | &lt;span class="pl-k"&gt;endif&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr&gt;
&lt;h4&gt;&lt;a id="user-content-how-can-i-open-nerdtree-automatically-when-vim-starts-up-on-opening-a-directory" class="anchor" aria-hidden="true" href="#how-can-i-open-nerdtree-automatically-when-vim-starts-up-on-opening-a-directory"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;How can I open NERDTree automatically when vim starts up on opening a directory?&lt;/h4&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;autocmd&lt;/span&gt; &lt;span class="pl-c1"&gt;StdinReadPre&lt;/span&gt; &lt;span class="pl-k"&gt;*&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-smi"&gt;&lt;span class="pl-k"&gt;s:&lt;/span&gt;std_in&lt;/span&gt;&lt;span class="pl-k"&gt;=&lt;/span&gt;&lt;span class="pl-c1"&gt;1&lt;/span&gt;
&lt;span class="pl-c1"&gt;autocmd&lt;/span&gt; &lt;span class="pl-c1"&gt;VimEnter&lt;/span&gt; &lt;span class="pl-k"&gt;*&lt;/span&gt; &lt;span class="pl-k"&gt;if&lt;/span&gt; &lt;span class="pl-en"&gt;argc&lt;/span&gt;() &lt;span class="pl-k"&gt;==&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-k"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="pl-en"&gt;isdirectory&lt;/span&gt;(&lt;span class="pl-en"&gt;argv&lt;/span&gt;()[&lt;span class="pl-c1"&gt;0&lt;/span&gt;]) &lt;span class="pl-k"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="pl-k"&gt;!&lt;/span&gt;&lt;span class="pl-en"&gt;exists&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;s:std_in&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) | &lt;span class="pl-c1"&gt;exe&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;NERDTree&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-en"&gt;argv&lt;/span&gt;()[&lt;span class="pl-c1"&gt;0&lt;/span&gt;] | &lt;span class="pl-c1"&gt;wincmd&lt;/span&gt; &lt;span class="pl-c1"&gt;p&lt;/span&gt; | &lt;span class="pl-c1"&gt;ene&lt;/span&gt; | &lt;span class="pl-c1"&gt;exe&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;cd &lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;.&lt;span class="pl-en"&gt;argv&lt;/span&gt;()[&lt;span class="pl-c1"&gt;0&lt;/span&gt;] | &lt;span class="pl-k"&gt;endif&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This window is tab-specific, meaning it's used by all windows in the tab. This trick also prevents NERDTree from hiding when first selecting a file.&lt;/p&gt;
&lt;p&gt;Note: Executing &lt;code&gt;vim ~/some-directory&lt;/code&gt; will open NERDTree and a new edit window. &lt;code&gt;exe 'cd '.argv()[0]&lt;/code&gt; sets the &lt;code&gt;pwd&lt;/code&gt; of the new edit window to &lt;code&gt;~/some-directory&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;&lt;a id="user-content-how-can-i-map-a-specific-key-or-shortcut-to-open-nerdtree" class="anchor" aria-hidden="true" href="#how-can-i-map-a-specific-key-or-shortcut-to-open-nerdtree"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;How can I map a specific key or shortcut to open NERDTree?&lt;/h4&gt;
&lt;p&gt;Stick this in your vimrc to open NERDTree with &lt;code&gt;Ctrl+n&lt;/code&gt; (you can set whatever key you want):&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;map&lt;/span&gt; &lt;span class="pl-c1"&gt;&amp;lt;C-n&amp;gt;&lt;/span&gt; :NERDTreeToggle&lt;span class="pl-c1"&gt;&amp;lt;CR&amp;gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr&gt;
&lt;h4&gt;&lt;a id="user-content-how-can-i-close-vim-if-the-only-window-left-open-is-a-nerdtree" class="anchor" aria-hidden="true" href="#how-can-i-close-vim-if-the-only-window-left-open-is-a-nerdtree"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;How can I close vim if the only window left open is a NERDTree?&lt;/h4&gt;
&lt;p&gt;Stick this in your vimrc:&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;autocmd&lt;/span&gt; &lt;span class="pl-c1"&gt;bufenter&lt;/span&gt; &lt;span class="pl-k"&gt;*&lt;/span&gt; &lt;span class="pl-k"&gt;if&lt;/span&gt; (&lt;span class="pl-en"&gt;winnr&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;$&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-k"&gt;==&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-k"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="pl-en"&gt;exists&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;b:NERDTree&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-k"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="pl-smi"&gt;&lt;span class="pl-k"&gt;b:&lt;/span&gt;NERDTree&lt;/span&gt;.&lt;span class="pl-en"&gt;isTabTree&lt;/span&gt;()) | &lt;span class="pl-c1"&gt;q&lt;/span&gt; | &lt;span class="pl-k"&gt;endif&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr&gt;
&lt;h4&gt;&lt;a id="user-content-can-i-have-different-highlighting-for-different-file-extensions" class="anchor" aria-hidden="true" href="#can-i-have-different-highlighting-for-different-file-extensions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Can I have different highlighting for different file extensions?&lt;/h4&gt;
&lt;p&gt;See here: &lt;a href="https://github.com/preservim/nerdtree/issues/433#issuecomment-92590696"&gt;https://github.com/preservim/nerdtree/issues/433#issuecomment-92590696&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;&lt;a id="user-content-how-can-i-change-default-arrows" class="anchor" aria-hidden="true" href="#how-can-i-change-default-arrows"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;How can I change default arrows?&lt;/h4&gt;
&lt;p&gt;Use these variables in your vimrc. Note that below are default arrow symbols&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-smi"&gt;&lt;span class="pl-k"&gt;g:&lt;/span&gt;NERDTreeDirArrowExpandable&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;▸&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-smi"&gt;&lt;span class="pl-k"&gt;g:&lt;/span&gt;NERDTreeDirArrowCollapsible&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;▾&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>preservim</author><guid isPermaLink="false">https://github.com/preservim/nerdtree</guid><pubDate>Thu, 06 Feb 2020 00:10:00 GMT</pubDate></item><item><title>vim-syntastic/syntastic #11 in Vim script, Today</title><link>https://github.com/vim-syntastic/syntastic</link><description>&lt;p&gt;&lt;i&gt;Syntax checking hacks for vim&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="markdown" data-path="README.markdown"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;pre&gt;&lt;code&gt;               ,
              / \,,_  .'|
           ,{{| /}}}}/_.'            _____________________________________________
          }}}}` '{{'  '.            /                                             \
        {{{{{    _   ;, \          /            Ladies and Gentlemen,              \
     ,}}}}}}    /o`\  ` ;)        |                                                |
    {{{{{{   /           (        |                 this is ...                    |
    }}}}}}   |            \       |                                                |
   {{{{{{{{   \            \      |                                                |
   }}}}}}}}}   '.__      _  |     |    _____             __             __  _      |
   {{{{{{{{       /`._  (_\ /     |   / ___/__  ______  / /_____ ______/ /_(_)____ |
    }}}}}}'      |    //___/   --=:   \__ \/ / / / __ \/ __/ __ `/ ___/ __/ / ___/ |
jgs `{{{{`       |     '--'       |  ___/ / /_/ / / / / /_/ /_/ (__  ) /_/ / /__   |
     }}}`                         | /____/\__, /_/ /_/\__/\__,_/____/\__/_/\___/   |
                                  |      /____/                                    |
                                  |                                               /
                                   \_____________________________________________/
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="#introduction"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#installation"&gt;Installation&lt;/a&gt;&lt;br&gt;
2.1. &lt;a href="#requirements"&gt;Requirements&lt;/a&gt;&lt;br&gt;
2.2. &lt;a href="#installpathogen"&gt;Installing syntastic with Pathogen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#settings"&gt;Recommended settings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#faq"&gt;FAQ&lt;/a&gt;&lt;br&gt;
4.1. &lt;a href="#faqinfo"&gt;I installed syntastic but it isn't reporting any errors...&lt;/a&gt;&lt;br&gt;
4.2. &lt;a href="#faqcheckers"&gt;Syntastic supports several checkers for my filetype, how do I tell it which one(s) to use?&lt;/a&gt;&lt;br&gt;
4.3. &lt;a href="#faqforeign"&gt;How can I run checkers for "foreign" filetypes against the current file?&lt;/a&gt;&lt;br&gt;
4.4. &lt;a href="#faqaggregate"&gt;I have enabled multiple checkers for the current filetype. How can I display all errors from all checkers together?&lt;/a&gt;&lt;br&gt;
4.5. &lt;a href="#faqargs"&gt;How can I pass additional arguments to a checker?&lt;/a&gt;&lt;br&gt;
4.6. &lt;a href="#faqloclist"&gt;I run a checker and the location list is not updated...&lt;/a&gt;&lt;br&gt;
4.6. &lt;a href="#faqloclist"&gt;I run&lt;code&gt;:lopen&lt;/code&gt; or &lt;code&gt;:lwindow&lt;/code&gt; and the error window is empty...&lt;/a&gt;&lt;br&gt;
4.7. &lt;a href="#faqlnext"&gt;How can I jump between the different errors without using the location list at the bottom of the window?&lt;/a&gt;&lt;br&gt;
4.8. &lt;a href="#faqbdelete"&gt;The error window is closed automatically when I &lt;code&gt;:quit&lt;/code&gt; the current buffer but not when I &lt;code&gt;:bdelete&lt;/code&gt; it?&lt;/a&gt;&lt;br&gt;
4.9. &lt;a href="#faqconfig"&gt;My favourite checker needs to load a configuration file from the project's root rather than the current directory...&lt;/a&gt;&lt;br&gt;
4.10. &lt;a href="#faqstyle"&gt;What is the difference between syntax checkers and style checkers?&lt;/a&gt;&lt;br&gt;
4.11. &lt;a href="#faqpython"&gt;How can I check scripts written for different versions of Python?&lt;/a&gt;&lt;br&gt;
4.12. &lt;a href="#faqruby"&gt;How can I check scripts written for different versions of Ruby?&lt;/a&gt;&lt;br&gt;
4.13. &lt;a href="#faqperl"&gt;The &lt;code&gt;perl&lt;/code&gt; checker has stopped working...&lt;/a&gt;&lt;br&gt;
4.14. &lt;a href="#faqrust"&gt;What happened to the &lt;code&gt;rustc&lt;/code&gt; checker?&lt;/a&gt;&lt;br&gt;
4.15. &lt;a href="#faqtsc"&gt;What happened to the &lt;code&gt;tsc&lt;/code&gt; checker?&lt;/a&gt;&lt;br&gt;
4.16. &lt;a href="#faqxcrun"&gt;What happened to the &lt;code&gt;xcrun&lt;/code&gt; checker?&lt;/a&gt;&lt;br&gt;
4.17. &lt;a href="#faqvalac"&gt;What happened to the &lt;code&gt;valac&lt;/code&gt; checker?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#otherresources"&gt;Resources&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a name="user-content-introduction"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-1-introduction" class="anchor" aria-hidden="true" href="#1-introduction"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. Introduction&lt;/h2&gt;
&lt;p&gt;Syntastic is a syntax checking plugin for &lt;a href="http://www.vim.org/" rel="nofollow"&gt;Vim&lt;/a&gt; created by
&lt;a href="https://github.com/scrooloose"&gt;Martin Grenfell&lt;/a&gt;. It runs files through external syntax checkers
and displays any resulting errors to the user. This can be done on demand, or
automatically as files are saved. If syntax errors are detected, the user is
notified and is happy because they didn't have to compile their code or execute
their script to find them.&lt;/p&gt;
&lt;p&gt;At the time of this writing, syntastic has checking plugins for ACPI
Source Language, ActionScript, Ada, Ansible configurations, API Blueprint,
AppleScript, AsciiDoc, Assembly languages, BEMHTML, Bro, Bourne shell, C, C++,
C#, Cabal, Chef, CMake, CoffeeScript, Coco, Coq, CSS, Cucumber, CUDA, D, Dart,
DocBook, Dockerfile, Dust, Elixir, Erlang, eRuby, Fortran, Gentoo metadata,
GLSL, Go, Haml, Haskell, Haxe, Handlebars, HSS, HTML, Java, JavaScript, JSON,
JSX, Julia, LESS, Lex, Limbo, LISP, LLVM intermediate language, Lua, Markdown,
MATLAB, Mercury, NASM, Nix, Objective-C, Objective-C++, OCaml, Perl, Perl
6, Perl POD, PHP, gettext Portable Object, OS X and iOS property lists, Pug
(formerly Jade), Puppet, Python, QML, R, Racket, RDF TriG, RDF Turtle, Relax
NG, reStructuredText, RPM spec, Ruby, SASS/SCSS, Scala, Slim, SML, Solidity,
Sphinx, SQL, Stylus, Tcl, TeX, Texinfo, Twig, TypeScript, Verilog, VHDL,
Vim help, VimL, Vue.js, xHtml, XML, XSLT, XQuery, YACC, YAML, YANG data models,
YARA rules, z80, Zope page templates, and Zsh. See the &lt;a href="https://github.com/vim-syntastic/syntastic/blob/master/doc/syntastic-checkers.txt"&gt;manual&lt;/a&gt; for
details about the corresponding supported checkers (&lt;code&gt;:help syntastic-checkers&lt;/code&gt;
in Vim).&lt;/p&gt;
&lt;p&gt;A number of third-party Vim plugins also provide checkers for syntastic, for
example: &lt;a href="https://github.com/the-lambda-church/merlin"&gt;merlin&lt;/a&gt;, &lt;a href="https://github.com/OmniSharp/omnisharp-vim"&gt;omnisharp-vim&lt;/a&gt;, &lt;a href="https://github.com/rust-lang/rust.vim"&gt;rust.vim&lt;/a&gt;,
&lt;a href="https://github.com/myint/syntastic-extras"&gt;syntastic-extras&lt;/a&gt;, &lt;a href="https://github.com/roktas/syntastic-more"&gt;syntastic-more&lt;/a&gt;, &lt;a href="https://github.com/Quramy/tsuquyomi/"&gt;tsuquyomi&lt;/a&gt;,
&lt;a href="https://github.com/rhysd/vim-crystal"&gt;vim-crystal&lt;/a&gt;, &lt;a href="https://github.com/venantius/vim-eastwood"&gt;vim-eastwood&lt;/a&gt;, and &lt;a href="https://github.com/kballard/vim-swift"&gt;vim-swift&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Below is a screenshot showing the methods that Syntastic uses to display syntax
errors. Note that, in practise, you will only have a subset of these methods
enabled.&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://github.com/vim-syntastic/syntastic/raw/master/_assets/screenshot_1.png"&gt;&lt;img src="https://github.com/vim-syntastic/syntastic/raw/master/_assets/screenshot_1.png" alt="Screenshot 1" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Errors are loaded into the location list for the corresponding window.&lt;/li&gt;
&lt;li&gt;When the cursor is on a line containing an error, the error message is echoed in the command window.&lt;/li&gt;
&lt;li&gt;Signs are placed beside lines with errors - note that warnings are displayed in a different color.&lt;/li&gt;
&lt;li&gt;There is a configurable statusline flag you can include in your statusline config.&lt;/li&gt;
&lt;li&gt;Hover the mouse over a line containing an error and the error message is displayed as a balloon.&lt;/li&gt;
&lt;li&gt;(not shown) Highlighting errors with syntax highlighting. Erroneous parts of lines can be highlighted.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a name="user-content-installation"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-2-installation" class="anchor" aria-hidden="true" href="#2-installation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. Installation&lt;/h2&gt;
&lt;p&gt;&lt;a name="user-content-requirements"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-21-requirements" class="anchor" aria-hidden="true" href="#21-requirements"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2.1. Requirements&lt;/h3&gt;
&lt;p&gt;Syntastic itself has rather relaxed requirements: it doesn't have any external
dependencies, and it needs a version of &lt;a href="http://www.vim.org/" rel="nofollow"&gt;Vim&lt;/a&gt; compiled with a few common
features: &lt;code&gt;autocmd&lt;/code&gt;, &lt;code&gt;eval&lt;/code&gt;, &lt;code&gt;file_in_path&lt;/code&gt;, &lt;code&gt;modify_fname&lt;/code&gt;, &lt;code&gt;quickfix&lt;/code&gt;,
&lt;code&gt;reltime&lt;/code&gt;, &lt;code&gt;statusline&lt;/code&gt;, and &lt;code&gt;user_commands&lt;/code&gt;. Not all possible combinations of
features that include the ones above make equal sense on all operating systems,
but Vim version 7 or later with the "normal", "big", or "huge" feature sets
should be fine.&lt;/p&gt;
&lt;p&gt;Syntastic should work with any modern plugin managers for Vim, such as
&lt;a href="https://github.com/Shougo/neobundle.vim"&gt;NeoBundle&lt;/a&gt;, &lt;a href="https://github.com/tpope/vim-pathogen"&gt;Pathogen&lt;/a&gt;, &lt;a href="https://github.com/MarcWeber/vim-addon-manager"&gt;Vim-Addon-Manager&lt;/a&gt;,
&lt;a href="https://github.com/junegunn/vim-plug/"&gt;Vim-Plug&lt;/a&gt;, or &lt;a href="https://github.com/gmarik/Vundle.vim"&gt;Vundle&lt;/a&gt;. Instructions for installing syntastic
with &lt;a href="https://github.com/tpope/vim-pathogen"&gt;Pathogen&lt;/a&gt; are included below for completeness.&lt;/p&gt;
&lt;p&gt;Starting with Vim version 7.4.1486 you can also load syntastic using the
standard mechanism of packages, without the help of third-party plugin managers
(see &lt;code&gt;:help packages&lt;/code&gt; in Vim for details). Beware however that, while support
for packages has been added in Vim 7.4.1384, the functionality needed by
syntastic is present only in versions 7.4.1486 and later.&lt;/p&gt;
&lt;p&gt;Last but not least: syntastic doesn't know how to do any syntax checks by
itself. In order to get meaningful results you need to install external
checkers corresponding to the types of files you use. Please consult the
&lt;a href="https://github.com/vim-syntastic/syntastic/blob/master/doc/syntastic-checkers.txt"&gt;manual&lt;/a&gt; (&lt;code&gt;:help syntastic-checkers&lt;/code&gt; in Vim) for a list of supported
checkers.&lt;/p&gt;
&lt;p&gt;&lt;a name="user-content-installpathogen"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-22-installing-syntastic-with-pathogen" class="anchor" aria-hidden="true" href="#22-installing-syntastic-with-pathogen"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2.2. Installing syntastic with Pathogen&lt;/h3&gt;
&lt;p&gt;If you already have &lt;a href="https://github.com/tpope/vim-pathogen"&gt;Pathogen&lt;/a&gt; working then skip &lt;a href="#step1"&gt;Step 1&lt;/a&gt; and go to
&lt;a href="#step2"&gt;Step 2&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a name="user-content-step1"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-221-step-1-install-pathogenvim" class="anchor" aria-hidden="true" href="#221-step-1-install-pathogenvim"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2.2.1. Step 1: Install pathogen.vim&lt;/h4&gt;
&lt;p&gt;First I'll show you how to install Tim Pope's &lt;a href="https://github.com/tpope/vim-pathogen"&gt;Pathogen&lt;/a&gt; so that it's easy to
install syntastic. Do this in your terminal so that you get the &lt;code&gt;pathogen.vim&lt;/code&gt;
file and the directories it needs:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;mkdir -p &lt;span class="pl-k"&gt;~&lt;/span&gt;/.vim/autoload &lt;span class="pl-k"&gt;~&lt;/span&gt;/.vim/bundle &lt;span class="pl-k"&gt;&amp;amp;&amp;amp;&lt;/span&gt; \
curl -LSso &lt;span class="pl-k"&gt;~&lt;/span&gt;/.vim/autoload/pathogen.vim https://tpo.pe/pathogen.vim&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next you &lt;em&gt;need&lt;/em&gt; to add this to your &lt;code&gt;~/.vimrc&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;execute&lt;/span&gt; &lt;span class="pl-en"&gt;pathogen#infect&lt;/span&gt;()&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a name="user-content-step2"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-222-step-2-install-syntastic-as-a-pathogen-bundle" class="anchor" aria-hidden="true" href="#222-step-2-install-syntastic-as-a-pathogen-bundle"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2.2.2. Step 2: Install syntastic as a Pathogen bundle&lt;/h4&gt;
&lt;p&gt;You now have pathogen installed and can put syntastic into &lt;code&gt;~/.vim/bundle&lt;/code&gt; like
this:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;cd&lt;/span&gt; &lt;span class="pl-k"&gt;~&lt;/span&gt;/.vim/bundle &lt;span class="pl-k"&gt;&amp;amp;&amp;amp;&lt;/span&gt; \
git clone --depth=1 https://github.com/vim-syntastic/syntastic.git&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Quit vim and start it back up to reload it, then type:&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;:Helptags&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you get an error when you do this, then you probably didn't install
&lt;a href="https://github.com/tpope/vim-pathogen"&gt;Pathogen&lt;/a&gt; right. Go back to &lt;a href="#step1"&gt;Step 1&lt;/a&gt; and make sure you did the
following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Created both the &lt;code&gt;~/.vim/autoload&lt;/code&gt; and &lt;code&gt;~/.vim/bundle&lt;/code&gt; directories.&lt;/li&gt;
&lt;li&gt;Added the &lt;code&gt;execute pathogen#infect()&lt;/code&gt; line to your &lt;code&gt;~/.vimrc&lt;/code&gt; file&lt;/li&gt;
&lt;li&gt;Did the &lt;code&gt;git clone&lt;/code&gt; of syntastic inside &lt;code&gt;~/.vim/bundle&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Have permissions to access all of these directories.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a name="user-content-settings"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-3-recommended-settings" class="anchor" aria-hidden="true" href="#3-recommended-settings"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. Recommended settings&lt;/h2&gt;
&lt;p&gt;Syntastic has numerous options that can be configured, and the defaults
are not particularly well suitable for new users. It is recommended
that you start by adding the following lines to your &lt;code&gt;vimrc&lt;/code&gt; file, and
return to them after reading the manual (see &lt;code&gt;:help syntastic&lt;/code&gt; in Vim):&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;set&lt;/span&gt; &lt;span class="pl-c1"&gt;statusline&lt;/span&gt;&lt;span class="pl-k"&gt;+=&lt;/span&gt;&lt;span class="pl-k"&gt;%&lt;/span&gt;#&lt;span class="pl-c1"&gt;warningmsg&lt;/span&gt;#
&lt;span class="pl-c1"&gt;set&lt;/span&gt; &lt;span class="pl-c1"&gt;statusline&lt;/span&gt;&lt;span class="pl-k"&gt;+=&lt;/span&gt;&lt;span class="pl-k"&gt;%&lt;/span&gt;{&lt;span class="pl-en"&gt;SyntasticStatuslineFlag&lt;/span&gt;()}
&lt;span class="pl-c1"&gt;set&lt;/span&gt; &lt;span class="pl-c1"&gt;statusline&lt;/span&gt;&lt;span class="pl-k"&gt;+=&lt;/span&gt;&lt;span class="pl-k"&gt;%*&lt;/span&gt;

&lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-smi"&gt;&lt;span class="pl-k"&gt;g:&lt;/span&gt;syntastic_always_populate_loc_list&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;
&lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-smi"&gt;&lt;span class="pl-k"&gt;g:&lt;/span&gt;syntastic_auto_loc_list&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;
&lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-smi"&gt;&lt;span class="pl-k"&gt;g:&lt;/span&gt;syntastic_check_on_open&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;
&lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-smi"&gt;&lt;span class="pl-k"&gt;g:&lt;/span&gt;syntastic_check_on_wq&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a name="user-content-faq"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-4-faq" class="anchor" aria-hidden="true" href="#4-faq"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4. FAQ&lt;/h2&gt;
&lt;p&gt;&lt;a name="user-content-faqinfo"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.1. Q. I installed syntastic but it isn't reporting any errors...&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A. The most likely reason is that none of the syntax checkers that it requires
are installed. For example: by default, python requires either &lt;code&gt;flake8&lt;/code&gt; or
&lt;code&gt;pylint&lt;/code&gt; to be installed and in your &lt;code&gt;$PATH&lt;/code&gt;. Read the &lt;a href="https://github.com/vim-syntastic/syntastic/blob/master/doc/syntastic-checkers.txt"&gt;manual&lt;/a&gt;
(&lt;code&gt;:help syntastic-checkers&lt;/code&gt; in Vim) to find out what executables are
supported. Note that aliases do not work; the actual executables must be
available in your &lt;code&gt;$PATH&lt;/code&gt;. Symbolic links are okay though.  You can see
syntastic's idea of available checkers by running &lt;code&gt;:SyntasticInfo&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;A second probable reason is that none of the available checkers are
enabled. Syntastic comes preconfigured with a default list of enabled checkers
per filetype, but this list is kept short in order to prevent slowing down Vim
or trying to run conflicting checks. The command &lt;code&gt;:SyntasticInfo&lt;/code&gt; will show you
which checkers are enabled. You can tell syntastic which checkers (among the
available ones) you want to run by setting &lt;code&gt;g:syntastic_&amp;lt;filetype&amp;gt;_checkers&lt;/code&gt; in
your &lt;code&gt;vimrc&lt;/code&gt; (see &lt;a href="#faqcheckers"&gt;below&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;A third possible reason is that the &lt;code&gt;$PATH&lt;/code&gt; seen by syntastic might not be same
as the &lt;code&gt;$PATH&lt;/code&gt; in your login shell. Syntastic runs checkers using the shell
pointed to by Vim's &lt;code&gt;shell&lt;/code&gt; (or by &lt;code&gt;g:syntastic_shell&lt;/code&gt;, if set), and that's the
shell you need to configure to set the proper &lt;code&gt;$PATH&lt;/code&gt; and environment variables
for your checkers. You can see syntastic's idea of &lt;code&gt;$PATH&lt;/code&gt; by running&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;:&lt;span class="pl-c1"&gt;echo&lt;/span&gt; &lt;span class="pl-en"&gt;syntastic#util#system&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;echo "$PATH"&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;on UNIX and Mac OS-X systems, or&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;:&lt;span class="pl-c1"&gt;echo&lt;/span&gt; &lt;span class="pl-en"&gt;syntastic#util#system&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;echo %PATH%&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;on Windows.&lt;/p&gt;
&lt;p&gt;Finally, another reason it could fail is that either the command line options
or the error output for a syntax checker may have changed. In this case, make
sure you have the latest version of the syntax checker installed. If it still
fails then post an &lt;a href="https://github.com/vim-syntastic/syntastic/issues"&gt;issue&lt;/a&gt; - or better yet, create a pull request.&lt;/p&gt;
&lt;p&gt;&lt;a name="user-content-faqcheckers"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.2. Q. Syntastic supports several checkers for my filetype, how do I tell it
which one(s) to use?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A. Add a line like this to your &lt;code&gt;vimrc&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-smi"&gt;&lt;span class="pl-k"&gt;g:&lt;/span&gt;syntastic_&lt;/span&gt;&lt;span class="pl-c1"&gt;&amp;lt;filetype&amp;gt;&lt;/span&gt;_checkers &lt;span class="pl-k"&gt;=&lt;/span&gt; [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;&amp;lt;checker-name&amp;gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;]&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To see the list of supported checkers for your filetype read the
&lt;a href="https://github.com/vim-syntastic/syntastic/blob/master/doc/syntastic-checkers.txt"&gt;manual&lt;/a&gt; (&lt;code&gt;:help syntastic-checkers&lt;/code&gt; in Vim).&lt;/p&gt;
&lt;p&gt;For example, Python has the following checkers, among others: &lt;code&gt;flake8&lt;/code&gt;,
&lt;code&gt;pyflakes&lt;/code&gt;, &lt;code&gt;pylint&lt;/code&gt; and a native &lt;code&gt;python&lt;/code&gt; checker.  To tell syntastic to use
&lt;code&gt;pylint&lt;/code&gt;, you would use this setting:&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-smi"&gt;&lt;span class="pl-k"&gt;g:&lt;/span&gt;syntastic_python_checkers&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;pylint&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;]&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Checkers can be chained together like this:&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-smi"&gt;&lt;span class="pl-k"&gt;g:&lt;/span&gt;syntastic_php_checkers&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;php&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;phpcs&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;phpmd&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;]&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is telling syntastic to run the &lt;code&gt;php&lt;/code&gt; checker first, and if no errors are
found, run &lt;code&gt;phpcs&lt;/code&gt;, and then &lt;code&gt;phpmd&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can also run checkers explicitly by calling &lt;code&gt;:SyntasticCheck &amp;lt;checker&amp;gt;&lt;/code&gt;.
For example to run &lt;code&gt;phpcs&lt;/code&gt; and &lt;code&gt;phpmd&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;:SyntasticCheck phpcs phpmd&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This works for any checkers available for the current filetype, even if they
aren't listed in &lt;code&gt;g:syntastic_&amp;lt;filetype&amp;gt;_checkers&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a name="user-content-faqforeign"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.3. Q. How can I run checkers for "foreign" filetypes against the current
file?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A. You need to qualify the name of the "foreign" checker with the name
of its filetype. For example to check &lt;code&gt;tex&lt;/code&gt; files with the checker
&lt;code&gt;language_check&lt;/code&gt; (which normally acts only on files of type &lt;code&gt;text&lt;/code&gt;), you can
add &lt;code&gt;text/language_check&lt;/code&gt; to the list fo checkers for &lt;code&gt;tex&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-smi"&gt;&lt;span class="pl-k"&gt;g:&lt;/span&gt;syntastic_tex_checkers&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;lacheck&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;text/language_check&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;]&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This also works with &lt;code&gt;:SyntasticCheck&lt;/code&gt;, e.g. the following command runs
&lt;code&gt;text/language_check&lt;/code&gt; against the current file regardless of the current
filetype:&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;:SyntasticCheck text/language_check&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Of course, the checkers specified this way need to be known to syntastic, and
they need to be shown as available when you run &lt;code&gt;:SyntasticInfo&lt;/code&gt;. You can't
just make up a combination of a filetype and a program name and expect it to
work as a checker.&lt;/p&gt;
&lt;p&gt;&lt;a name="user-content-faqaggregate"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.4. Q. I have enabled multiple checkers for the current filetype. How can I
display all errors from all checkers together?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A. Set &lt;code&gt;g:syntastic_aggregate_errors&lt;/code&gt; to 1 in your &lt;code&gt;vimrc&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-smi"&gt;&lt;span class="pl-k"&gt;g:&lt;/span&gt;syntastic_aggregate_errors&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;See &lt;code&gt;:help syntastic-aggregating-errors&lt;/code&gt; for more details.&lt;/p&gt;
&lt;p&gt;&lt;a name="user-content-faqargs"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.5. Q. How can I pass additional arguments to a checker?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A. In most cases a command line is constructed using an internal function
named &lt;code&gt;makeprgBuild()&lt;/code&gt;, which provides a number of options that allow you to
customise every part of the command that gets run. You can set these options
using global variables.&lt;/p&gt;
&lt;p&gt;The general form of the global &lt;code&gt;args&lt;/code&gt; variable is
&lt;code&gt;syntastic_&amp;lt;filetype&amp;gt;_&amp;lt;checker&amp;gt;_args&lt;/code&gt;. Thus if you wanted to pass
&lt;code&gt;--my --args --here&lt;/code&gt; to the Ruby &lt;code&gt;mri&lt;/code&gt; checker you would add this line to your
&lt;code&gt;vimrc&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-smi"&gt;&lt;span class="pl-k"&gt;g:&lt;/span&gt;syntastic_ruby_mri_args&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;--my --args --here&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;See &lt;code&gt;:help syntastic-checker-options&lt;/code&gt; for more information.&lt;/p&gt;
&lt;p&gt;A number of checkers don't use the &lt;code&gt;makeprgBuild()&lt;/code&gt; function mentioned above,
or have additional options that can be configured. For these checkers the exact
list of options should be included in the &lt;a href="https://github.com/vim-syntastic/syntastic/blob/master/doc/syntastic-checkers.txt"&gt;manual&lt;/a&gt;
(&lt;code&gt;:help syntastic-checkers&lt;/code&gt; in Vim).&lt;/p&gt;
&lt;p&gt;&lt;a name="user-content-faqloclist"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.6. Q. I run a checker and the location list is not updated...&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;4.6. Q. I run&lt;code&gt;:lopen&lt;/code&gt; or &lt;code&gt;:lwindow&lt;/code&gt; and the error window is empty...&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A. By default the location list is changed only when you run the &lt;code&gt;:Errors&lt;/code&gt;
command, in order to minimise conflicts with other plugins. If you want the
location list to always be updated when you run the checkers, add this line to
your &lt;code&gt;vimrc&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-smi"&gt;&lt;span class="pl-k"&gt;g:&lt;/span&gt;syntastic_always_populate_loc_list&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a name="user-content-faqlnext"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.7. Q. How can I jump between the different errors without using the location
list at the bottom of the window?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A. Vim provides several built-in commands for this. See &lt;code&gt;:help :lnext&lt;/code&gt; and
&lt;code&gt;:help :lprevious&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you use these commands a lot then you may want to add shortcut mappings to
your &lt;code&gt;vimrc&lt;/code&gt;, or install something like &lt;a href="https://github.com/tpope/vim-unimpaired"&gt;unimpaired&lt;/a&gt;, which provides such
mappings (among other things).&lt;/p&gt;
&lt;p&gt;&lt;a name="user-content-faqbdelete"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.8. Q. The error window is closed automatically when I &lt;code&gt;:quit&lt;/code&gt; the current buffer
but not when I &lt;code&gt;:bdelete&lt;/code&gt; it?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A. There is no safe way to handle that situation automatically, but you can
work around it:&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;nnoremap&lt;/span&gt; &lt;span class="pl-c1"&gt;&amp;lt;silent&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;&amp;lt;C-d&amp;gt;&lt;/span&gt; :&lt;span class="pl-c1"&gt;lclose&lt;/span&gt;&lt;span class="pl-c1"&gt;&amp;lt;CR&amp;gt;&lt;/span&gt;:&lt;span class="pl-c1"&gt;bdelete&lt;/span&gt;&lt;span class="pl-c1"&gt;&amp;lt;CR&amp;gt;&lt;/span&gt;
&lt;span class="pl-c1"&gt;cabbrev&lt;/span&gt; &lt;span class="pl-c1"&gt;&amp;lt;silent&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;bd&lt;/span&gt; &lt;span class="pl-c1"&gt;&amp;lt;C-r&amp;gt;&lt;/span&gt;&lt;span class="pl-k"&gt;=&lt;/span&gt;(&lt;span class="pl-en"&gt;getcmdtype&lt;/span&gt;()&lt;span class="pl-k"&gt;==&lt;/span&gt;#&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;:&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="pl-en"&gt;getcmdpos&lt;/span&gt;()&lt;span class="pl-k"&gt;==&lt;/span&gt;&lt;span class="pl-c1"&gt;1&lt;/span&gt; ? &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;lclose\|bdelete&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt; : &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;bd&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;)&lt;span class="pl-c1"&gt;&amp;lt;CR&amp;gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a name="user-content-faqconfig"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.9. My favourite checker needs to load a configuration file from the
project's root rather than the current directory...&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A. You can set up an &lt;code&gt;autocmd&lt;/code&gt; to search for the configuration file in the
current directory and upwards, and add it to the checker's options when found.
For example for &lt;code&gt;jscs&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;function&lt;/span&gt;&lt;span class="pl-k"&gt;!&lt;/span&gt; &lt;span class="pl-en"&gt;FindConfig&lt;/span&gt;(prefix, what, where)
    &lt;span class="pl-k"&gt;let&lt;/span&gt; cfg &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;findfile&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-k"&gt;a:&lt;/span&gt;what&lt;/span&gt;, &lt;span class="pl-en"&gt;escape&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-k"&gt;a:&lt;/span&gt;where&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt; &lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;) . &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;;&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;)
    &lt;span class="pl-k"&gt;return&lt;/span&gt; cfg &lt;span class="pl-k"&gt;!=#&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt; ? &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt; &lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt; . &lt;span class="pl-smi"&gt;&lt;span class="pl-k"&gt;a:&lt;/span&gt;prefix&lt;/span&gt; . &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt; &lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt; . &lt;span class="pl-en"&gt;shellescape&lt;/span&gt;(cfg) : &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;endfunction&lt;/span&gt;

&lt;span class="pl-c1"&gt;autocmd&lt;/span&gt; &lt;span class="pl-c1"&gt;FileType&lt;/span&gt; javascript &lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-smi"&gt;&lt;span class="pl-k"&gt;b:&lt;/span&gt;syntastic_javascript_jscs_args&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt;
    &lt;span class="pl-cce"&gt;\ &lt;/span&gt;&lt;span class="pl-en"&gt;get&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-k"&gt;g:&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;syntastic_javascript_jscs_args&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;) .
    &lt;span class="pl-cce"&gt;\ &lt;/span&gt;&lt;span class="pl-en"&gt;FindConfig&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;-c&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;.jscsrc&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-en"&gt;expand&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;&amp;lt;afile&amp;gt;:p:h&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;1&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a name="user-content-faqstyle"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.10. Q. What is the difference between syntax checkers and style checkers?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A. The errors and warnings they produce are highlighted differently and can
be filtered by different rules, but otherwise the distinction is pretty much
arbitrary. There is an ongoing effort to keep things consistent, so you can
&lt;em&gt;generally&lt;/em&gt; expect messages produced by syntax checkers to be &lt;em&gt;mostly&lt;/em&gt; related
to syntax, and messages produced by style checkers to be &lt;em&gt;mostly&lt;/em&gt; about style.
But there can be no formal guarantee that, say, a style checker that runs into
a syntax error wouldn't die with a fatal message, nor that a syntax checker
wouldn't give you warnings against using some constructs as being bad practice.
There is also no guarantee that messages marked as &lt;code&gt;style&lt;/code&gt; are less severe than
the ones marked as &lt;code&gt;syntax&lt;/code&gt; (whatever that might mean). And there are even a
few Frankenstein checkers (for example &lt;code&gt;flake8&lt;/code&gt; and &lt;code&gt;pylama&lt;/code&gt;) that, by their
nature, produce both kinds of messages. Syntastic is not smart enough to be
able to sort out these things by itself.&lt;/p&gt;
&lt;p&gt;Generally it's more useful to look at this from the perspective of filtering
unwanted messages, rather than as an indicator of severity levels. The
distinction between syntax and style is orthogonal to the distinction between
errors and warnings, and thus you can turn off messages based on level, on
type, or both.&lt;/p&gt;
&lt;p&gt;e.g. To disable all style messages:&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-smi"&gt;&lt;span class="pl-k"&gt;g:&lt;/span&gt;syntastic_quiet_messages&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; { &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;type&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;style&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; }&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;See &lt;code&gt;:help syntastic_quiet_messages&lt;/code&gt; for more information.&lt;/p&gt;
&lt;p&gt;&lt;a name="user-content-faqpython"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.11. Q. How can I check scripts written for different versions of Python?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A. Install a Python version manager such as &lt;a href="https://virtualenv.pypa.io/en/stable/" rel="nofollow"&gt;virtualenv&lt;/a&gt;
or &lt;a href="https://github.com/yyuu/pyenv"&gt;pyenv&lt;/a&gt;, activate the environment for the relevant version
of Python, and install in it the checkers you want to use.  Set
&lt;code&gt;g:syntastic_python_checkers&lt;/code&gt; accordingly in your &lt;code&gt;vimrc&lt;/code&gt;, and run &lt;a href="http://www.vim.org/" rel="nofollow"&gt;Vim&lt;/a&gt;
from the virtual environment.&lt;/p&gt;
&lt;p&gt;If you're starting Vim from a desktop manager rather than from a terminal you
might need to write wrapper scripts around your checkers, to activate the
virtual environment before running the actual checks.  Then you'll need to
point the relevant &lt;code&gt;g:syntastic_python_&amp;lt;checker&amp;gt;_exec&lt;/code&gt; variables to the wrapper
scripts.&lt;/p&gt;
&lt;p&gt;&lt;a name="user-content-faqruby"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.12. Q. How can I check scripts written for different versions of Ruby?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A. Install a Ruby version manager such as &lt;a href="https://rvm.io/" rel="nofollow"&gt;rvm&lt;/a&gt; or &lt;a href="https://github.com/rbenv/rbenv"&gt;rbenv&lt;/a&gt;,
activate the relevant version of Ruby, and install in it the checkers you want
to use.  Set &lt;code&gt;g:syntastic_ruby_checkers&lt;/code&gt; accordingly in your &lt;code&gt;vimrc&lt;/code&gt;, and run
&lt;a href="http://www.vim.org/" rel="nofollow"&gt;Vim&lt;/a&gt; under the relevant Ruby version.&lt;/p&gt;
&lt;p&gt;If you're starting Vim from a desktop manager rather than from a terminal
and depending on the version manager you use you might need to write wrapper
scripts around your checkers, to activate the relevant version of Ruby
before running the actual checks.  Then you'll need to point the relevant
&lt;code&gt;g:syntastic_ruby_&amp;lt;checker&amp;gt;_exec&lt;/code&gt; variables to the wrapper scripts.&lt;/p&gt;
&lt;p&gt;&lt;a name="user-content-faqperl"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.13. Q. The &lt;code&gt;perl&lt;/code&gt; checker has stopped working...&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A. The &lt;code&gt;perl&lt;/code&gt; checker runs &lt;code&gt;perl -c&lt;/code&gt; against your file, which in turn
&lt;strong&gt;executes&lt;/strong&gt; any &lt;code&gt;BEGIN&lt;/code&gt;, &lt;code&gt;UNITCHECK&lt;/code&gt;, and &lt;code&gt;CHECK&lt;/code&gt; blocks, and any &lt;code&gt;use&lt;/code&gt;
statements in your file (cf. &lt;a href="http://perldoc.perl.org/perlrun.html#*-c*" rel="nofollow"&gt;perlrun&lt;/a&gt;). This is probably fine if you
wrote the file yourself, but it's a security problem if you're checking
third-party files. Since there is currently no way to disable this behaviour
while still producing useful results, the checker is now disabled by default.
To (re-)enable it, make sure the &lt;code&gt;g:syntastic_perl_checkers&lt;/code&gt; list includes
&lt;code&gt;perl&lt;/code&gt;, and set &lt;code&gt;g:syntastic_enable_perl_checker&lt;/code&gt; to 1 in your &lt;code&gt;vimrc&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-viml"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-smi"&gt;&lt;span class="pl-k"&gt;g:&lt;/span&gt;syntastic_enable_perl_checker&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a name="user-content-faqrust"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.14. Q. What happened to the &lt;code&gt;rustc&lt;/code&gt; checker?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A. It is now part of the &lt;a href="https://github.com/rust-lang/rust.vim"&gt;rust.vim&lt;/a&gt; plugin. If you install this plugin the
checker should be picked up automatically by syntastic.&lt;/p&gt;
&lt;p&gt;&lt;a name="user-content-faqtsc"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.15. Q. What happened to the &lt;code&gt;tsc&lt;/code&gt; checker?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A. It didn't meet people's expectations and it has been removed. The plugin
&lt;a href="https://github.com/Quramy/tsuquyomi/"&gt;tsuquyomi&lt;/a&gt; comes packaged with a checker for TypeScript. If you
install this plugin the checker should be picked up automatically by syntastic.&lt;/p&gt;
&lt;p&gt;&lt;a name="user-content-faqxcrun"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.16. Q. What happened to the &lt;code&gt;xcrun&lt;/code&gt; checker?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A. The &lt;code&gt;xcrun&lt;/code&gt; checker used to have a security problem and it has been removed.
A better checker for &lt;strong&gt;Swift&lt;/strong&gt; is part of the &lt;a href="https://github.com/kballard/vim-swift"&gt;vim-swift&lt;/a&gt; plugin. If you
install this plugin the checker should be picked up automatically by syntastic.&lt;/p&gt;
&lt;p&gt;&lt;a name="user-content-faqvalac"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.17. Q. What happened to the &lt;code&gt;valac&lt;/code&gt; checker?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A. It is now part of the &lt;a href="https://github.com/arrufat/vala.vim"&gt;vala.vim&lt;/a&gt; plugin. If you install this plugin the
checker should be picked up automatically by syntastic.&lt;/p&gt;
&lt;p&gt;&lt;a name="user-content-otherresources"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-5-resources" class="anchor" aria-hidden="true" href="#5-resources"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;5. Resources&lt;/h2&gt;
&lt;p&gt;The preferred place for posting suggestions, reporting bugs, and general
discussions related to syntastic is the &lt;a href="https://github.com/vim-syntastic/syntastic/issues"&gt;issue tracker at GitHub&lt;/a&gt;.
A guide for writing syntax checkers can be found in the &lt;a href="https://github.com/vim-syntastic/syntastic/wiki/Syntax-Checker-Guide"&gt;wiki&lt;/a&gt;.
There are also a dedicated &lt;a href="https://groups.google.com/group/vim-syntastic" rel="nofollow"&gt;google group&lt;/a&gt;, and a
&lt;a href="http://stackoverflow.com/questions/tagged/syntastic" rel="nofollow"&gt;syntastic tag at StackOverflow&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Syntastic aims to provide a common interface to syntax checkers for as many
languages as possible. For particular languages, there are, of course, other
plugins that provide more functionality than syntastic. You might want to take
a look at &lt;a href="https://github.com/eagletmt/ghcmod-vim"&gt;ghcmod-vim&lt;/a&gt;, &lt;a href="https://github.com/davidhalter/jedi-vim"&gt;jedi-vim&lt;/a&gt;, &lt;a href="https://github.com/klen/python-mode"&gt;python-mode&lt;/a&gt;, &lt;a href="https://github.com/fatih/vim-go"&gt;vim-go&lt;/a&gt;, or
&lt;a href="https://github.com/ycm-core/YouCompleteMe"&gt;YouCompleteMe&lt;/a&gt;.&lt;/p&gt;

&lt;/article&gt;&lt;/div&gt;</description><author>vim-syntastic</author><guid isPermaLink="false">https://github.com/vim-syntastic/syntastic</guid><pubDate>Thu, 06 Feb 2020 00:11:00 GMT</pubDate></item></channel></rss>