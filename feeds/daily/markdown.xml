<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>GitHub Trending: Markdown, Today</title><link>https://github.com/trending/markdown?since=daily</link><description>The top repositories on GitHub for markdown, measured daily</description><pubDate>Tue, 11 Feb 2020 01:06:35 GMT</pubDate><lastBuildDate>Tue, 11 Feb 2020 01:06:35 GMT</lastBuildDate><generator>PyRSS2Gen-1.1.0</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><ttl>720</ttl><item><title>airbnb/swift #1 in Markdown, Today</title><link>https://github.com/airbnb/swift</link><description>&lt;p&gt;&lt;i&gt;Airbnb's Swift Style Guide.&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-airbnb-swift-style-guide" class="anchor" aria-hidden="true" href="#airbnb-swift-style-guide"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Airbnb Swift Style Guide&lt;/h1&gt;
&lt;h2&gt;&lt;a id="user-content-goals" class="anchor" aria-hidden="true" href="#goals"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Goals&lt;/h2&gt;
&lt;p&gt;Following this style guide should:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Make it easier to read and begin understanding unfamiliar code.&lt;/li&gt;
&lt;li&gt;Make code easier to maintain.&lt;/li&gt;
&lt;li&gt;Reduce simple programmer errors.&lt;/li&gt;
&lt;li&gt;Reduce cognitive load while coding.&lt;/li&gt;
&lt;li&gt;Keep discussions on diffs focused on the code's logic rather than its style.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that brevity is not a primary goal. Code should be made more concise only if other good code qualities (such as readability, simplicity, and clarity) remain equal or are improved.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-guiding-tenets" class="anchor" aria-hidden="true" href="#guiding-tenets"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Guiding Tenets&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;This guide is in addition to the official &lt;a href="https://swift.org/documentation/api-design-guidelines/" rel="nofollow"&gt;Swift API Design Guidelines&lt;/a&gt;. These rules should not contradict that document.&lt;/li&gt;
&lt;li&gt;These rules should not fight Xcode's &lt;kbd&gt;^&lt;/kbd&gt; + &lt;kbd&gt;I&lt;/kbd&gt; indentation behavior.&lt;/li&gt;
&lt;li&gt;We strive to make every rule lintable:
&lt;ul&gt;
&lt;li&gt;If a rule changes the format of the code, it needs to be able to be reformatted automatically (either using &lt;a href="https://github.com/realm/SwiftLint"&gt;SwiftLint&lt;/a&gt; autocorrect or &lt;a href="https://github.com/nicklockwood/SwiftFormat"&gt;SwiftFormat&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;For rules that don't directly change the format of the code, we should have a lint rule that throws a warning.&lt;/li&gt;
&lt;li&gt;Exceptions to these rules should be rare and heavily justified.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-table-of-contents" class="anchor" aria-hidden="true" href="#table-of-contents"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Table of Contents&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="#xcode-formatting"&gt;Xcode Formatting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#naming"&gt;Naming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#style"&gt;Style&lt;/a&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="#functions"&gt;Functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#closures"&gt;Closures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#operators"&gt;Operators&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#patterns"&gt;Patterns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#file-organization"&gt;File Organization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#objective-c-interoperability"&gt;Objective-C Interoperability&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#contributors"&gt;Contributors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#amendments"&gt;Amendments&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;&lt;a id="user-content-xcode-formatting" class="anchor" aria-hidden="true" href="#xcode-formatting"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Xcode Formatting&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;You can enable the following settings in Xcode by running &lt;a href="resources/xcode_settings.bash"&gt;this script&lt;/a&gt;, e.g. as part of a "Run Script" build phase.&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id="user-content-column-width"&gt;&lt;/a&gt;(&lt;a href="#column-width"&gt;link&lt;/a&gt;) &lt;strong&gt;Each line should have a maximum column width of 100 characters.&lt;/strong&gt;&lt;/p&gt;
&lt;details&gt;
&lt;h4&gt;&lt;a id="user-content-why" class="anchor" aria-hidden="true" href="#why"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Why?&lt;/h4&gt;
&lt;p&gt;Due to larger screen sizes, we have opted to choose a page guide greater than 80&lt;/p&gt;
&lt;/details&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id="user-content-spaces-over-tabs"&gt;&lt;/a&gt;(&lt;a href="#spaces-over-tabs"&gt;link&lt;/a&gt;) &lt;strong&gt;Use 2 spaces to indent lines.&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id="user-content-trailing-whitespace"&gt;&lt;/a&gt;(&lt;a href="#trailing-whitespace"&gt;link&lt;/a&gt;) &lt;strong&gt;Trim trailing whitespace in all lines.&lt;/strong&gt; &lt;a href="https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#trailingSpace"&gt;&lt;img src="https://camo.githubusercontent.com/7f8e3d736c5aa913566b55b3f7652ac6ec68cfb7/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f5377696674466f726d61742d747261696c696e6753706163652d3742303035312e737667" alt="SwiftFormat: trailingSpace" data-canonical-src="https://img.shields.io/badge/SwiftFormat-trailingSpace-7B0051.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="#table-of-contents"&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-naming" class="anchor" aria-hidden="true" href="#naming"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Naming&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id="user-content-use-camel-case"&gt;&lt;/a&gt;(&lt;a href="#use-camel-case"&gt;link&lt;/a&gt;) &lt;strong&gt;Use PascalCase for type and protocol names, and lowerCamelCase for everything else.&lt;/strong&gt; &lt;a href="https://github.com/realm/SwiftLint/blob/master/Rules.md#type-name"&gt;&lt;img src="https://camo.githubusercontent.com/8aeea9306a2fc5a5bac2abb3b20c6adfdeb2566b/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f53776966744c696e742d747970655f5f6e616d652d3030374138372e737667" alt="SwiftLint: type_name" data-canonical-src="https://img.shields.io/badge/SwiftLint-type__name-007A87.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;details&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;protocol&lt;/span&gt; &lt;span class="pl-en"&gt;SpaceThing&lt;/span&gt; {
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; ...&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;}

&lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;SpaceFleet&lt;/span&gt;: &lt;span class="pl-e"&gt;SpaceThing &lt;/span&gt;{

  &lt;span class="pl-k"&gt;enum&lt;/span&gt; &lt;span class="pl-en"&gt;Formation&lt;/span&gt; {
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; ...&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;  }

  &lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;Spaceship&lt;/span&gt; {
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; ...&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;  }

  &lt;span class="pl-k"&gt;var&lt;/span&gt; ships&lt;span class="pl-k"&gt;:&lt;/span&gt; [Spaceship] &lt;span class="pl-k"&gt;=&lt;/span&gt; []
  &lt;span class="pl-k"&gt;static&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; worldName&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;String&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Earth&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;

  &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;addShip&lt;/span&gt;(&lt;span class="pl-en"&gt;_&lt;/span&gt; &lt;span class="pl-smi"&gt;ship&lt;/span&gt;: Spaceship) {
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; ...&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;  }
}

&lt;span class="pl-k"&gt;let&lt;/span&gt; myFleet &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;SpaceFleet&lt;/span&gt;()&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;p&gt;&lt;em&gt;Exception: You may prefix a private property with an underscore if it is backing an identically-named property or method with a higher access level&lt;/em&gt;&lt;/p&gt;
&lt;details&gt;
&lt;h4&gt;&lt;a id="user-content-why-1" class="anchor" aria-hidden="true" href="#why-1"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Why?&lt;/h4&gt;
&lt;p&gt;There are specific scenarios where a backing a property or method could be easier to read than using a more descriptive name.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Type erasure&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;public&lt;/span&gt; &lt;span class="pl-k"&gt;final&lt;/span&gt; &lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;AnyRequester&lt;/span&gt;&amp;lt;&lt;span class="pl-c1"&gt;ModelType&lt;/span&gt;&amp;gt;: &lt;span class="pl-e"&gt;Requester &lt;/span&gt;{

  &lt;span class="pl-k"&gt;public&lt;/span&gt; &lt;span class="pl-k"&gt;init&lt;/span&gt;&amp;lt;&lt;span class="pl-c1"&gt;T&lt;/span&gt;: &lt;span class="pl-e"&gt;Requester&lt;/span&gt;&amp;gt;(&lt;span class="pl-en"&gt;_&lt;/span&gt; &lt;span class="pl-smi"&gt;requester&lt;/span&gt;: T) &lt;span class="pl-k"&gt;where&lt;/span&gt; T.ModelType &lt;span class="pl-k"&gt;==&lt;/span&gt; ModelType {
    _executeRequest &lt;span class="pl-k"&gt;=&lt;/span&gt; requester.&lt;span class="pl-smi"&gt;executeRequest&lt;/span&gt;
  }

  &lt;span class="pl-k"&gt;@discardableResult&lt;/span&gt;
  &lt;span class="pl-k"&gt;public&lt;/span&gt; &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;executeRequest&lt;/span&gt;(
    &lt;span class="pl-en"&gt;_&lt;/span&gt; &lt;span class="pl-smi"&gt;request&lt;/span&gt;: URLRequest,
    &lt;span class="pl-smi"&gt;&lt;span class="pl-en"&gt;onSuccess&lt;/span&gt;&lt;/span&gt;: &lt;span class="pl-k"&gt;@escaping&lt;/span&gt; (ModelType, &lt;span class="pl-c1"&gt;Bool&lt;/span&gt;) &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;Void&lt;/span&gt;,
    &lt;span class="pl-smi"&gt;&lt;span class="pl-en"&gt;onFailure&lt;/span&gt;&lt;/span&gt;: &lt;span class="pl-k"&gt;@escaping&lt;/span&gt; (&lt;span class="pl-c1"&gt;Error&lt;/span&gt;) &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;Void&lt;/span&gt;) &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; URLSessionCancellable
  {
    &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-c1"&gt;_executeRequest&lt;/span&gt;(request, session, parser, onSuccess, onFailure)
  }

  &lt;span class="pl-k"&gt;private&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; _executeRequest&lt;span class="pl-k"&gt;:&lt;/span&gt; (
    URLRequest,
    &lt;span class="pl-k"&gt;@escaping&lt;/span&gt; (ModelType, &lt;span class="pl-c1"&gt;Bool&lt;/span&gt;) &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;Void&lt;/span&gt;,
    &lt;span class="pl-k"&gt;@escaping&lt;/span&gt; (NSError) &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;Void&lt;/span&gt;) &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; URLSessionCancellable

}&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Backing a less specific type with a more specific type&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;final&lt;/span&gt; &lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;ExperiencesViewController&lt;/span&gt;: &lt;span class="pl-e"&gt;UIViewController &lt;/span&gt;{
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; We can't name this view since UIViewController has a view: UIView property.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;  &lt;span class="pl-k"&gt;private&lt;/span&gt; &lt;span class="pl-k"&gt;lazy&lt;/span&gt; &lt;span class="pl-k"&gt;var&lt;/span&gt; _view &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;CustomView&lt;/span&gt;()

  &lt;span class="pl-c1"&gt;loadView&lt;/span&gt;() {
    &lt;span class="pl-c1"&gt;self&lt;/span&gt;.&lt;span class="pl-c1"&gt;view&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; _view
  }
}&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id="user-content-bool-names"&gt;&lt;/a&gt;(&lt;a href="#bool-names"&gt;link&lt;/a&gt;) &lt;strong&gt;Name booleans like &lt;code&gt;isSpaceship&lt;/code&gt;, &lt;code&gt;hasSpacesuit&lt;/code&gt;, etc.&lt;/strong&gt; This makes it clear that they are booleans and not other types.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id="user-content-capitalize-acronyms"&gt;&lt;/a&gt;(&lt;a href="#capitalize-acronyms"&gt;link&lt;/a&gt;) &lt;strong&gt;Acronyms in names (e.g. &lt;code&gt;URL&lt;/code&gt;) should be all-caps except when itâ€™s the start of a name that would otherwise be lowerCamelCase, in which case it should be uniformly lower-cased.&lt;/strong&gt;&lt;/p&gt;
&lt;details&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; WRONG&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;UrlValidator&lt;/span&gt; {

  &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;isValidUrl&lt;/span&gt;(&lt;span class="pl-en"&gt;_&lt;/span&gt; &lt;span class="pl-smi"&gt;URL&lt;/span&gt;: URL) &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;Bool&lt;/span&gt; {
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; ...&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;  }

  &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;isProfileUrl&lt;/span&gt;(&lt;span class="pl-en"&gt;_&lt;/span&gt; &lt;span class="pl-smi"&gt;URL&lt;/span&gt;: URL, &lt;span class="pl-en"&gt;for&lt;/span&gt; &lt;span class="pl-smi"&gt;userId&lt;/span&gt;: &lt;span class="pl-c1"&gt;String&lt;/span&gt;) &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;Bool&lt;/span&gt; {
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; ...&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;  }
}

&lt;span class="pl-k"&gt;let&lt;/span&gt; URLValidator &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;UrlValidator&lt;/span&gt;()
&lt;span class="pl-k"&gt;let&lt;/span&gt; isProfile &lt;span class="pl-k"&gt;=&lt;/span&gt; URLValidator.&lt;span class="pl-c1"&gt;isProfileUrl&lt;/span&gt;(URLToTest, &lt;span class="pl-c1"&gt;userId&lt;/span&gt;: IDOfUser)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; RIGHT&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;URLValidator&lt;/span&gt; {

  &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;isValidURL&lt;/span&gt;(&lt;span class="pl-en"&gt;_&lt;/span&gt; &lt;span class="pl-smi"&gt;url&lt;/span&gt;: URL) &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;Bool&lt;/span&gt; {
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; ...&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;  }

  &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;isProfileURL&lt;/span&gt;(&lt;span class="pl-en"&gt;_&lt;/span&gt; &lt;span class="pl-smi"&gt;url&lt;/span&gt;: URL, &lt;span class="pl-en"&gt;for&lt;/span&gt; &lt;span class="pl-smi"&gt;userID&lt;/span&gt;: &lt;span class="pl-c1"&gt;String&lt;/span&gt;) &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;Bool&lt;/span&gt; {
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; ...&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;  }
}

&lt;span class="pl-k"&gt;let&lt;/span&gt; urlValidator &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;URLValidator&lt;/span&gt;()
&lt;span class="pl-k"&gt;let&lt;/span&gt; isProfile &lt;span class="pl-k"&gt;=&lt;/span&gt; urlValidator.&lt;span class="pl-c1"&gt;isProfileUrl&lt;/span&gt;(urlToTest, &lt;span class="pl-c1"&gt;userID&lt;/span&gt;: idOfUser)&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id="user-content-general-part-first"&gt;&lt;/a&gt;(&lt;a href="#general-part-first"&gt;link&lt;/a&gt;) &lt;strong&gt;Names should be written with their most general part first and their most specific part last.&lt;/strong&gt; The meaning of "most general" depends on context, but should roughly mean "that which most helps you narrow down your search for the item you're looking for." Most importantly, be consistent with how you order the parts of your name.&lt;/p&gt;
&lt;details&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; WRONG&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; rightTitleMargin&lt;span class="pl-k"&gt;:&lt;/span&gt; CGFloat
&lt;span class="pl-k"&gt;let&lt;/span&gt; leftTitleMargin&lt;span class="pl-k"&gt;:&lt;/span&gt; CGFloat
&lt;span class="pl-k"&gt;let&lt;/span&gt; bodyRightMargin&lt;span class="pl-k"&gt;:&lt;/span&gt; CGFloat
&lt;span class="pl-k"&gt;let&lt;/span&gt; bodyLeftMargin&lt;span class="pl-k"&gt;:&lt;/span&gt; CGFloat

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; RIGHT&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; titleMarginRight&lt;span class="pl-k"&gt;:&lt;/span&gt; CGFloat
&lt;span class="pl-k"&gt;let&lt;/span&gt; titleMarginLeft&lt;span class="pl-k"&gt;:&lt;/span&gt; CGFloat
&lt;span class="pl-k"&gt;let&lt;/span&gt; bodyMarginRight&lt;span class="pl-k"&gt;:&lt;/span&gt; CGFloat
&lt;span class="pl-k"&gt;let&lt;/span&gt; bodyMarginLeft&lt;span class="pl-k"&gt;:&lt;/span&gt; CGFloat&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id="user-content-hint-at-types"&gt;&lt;/a&gt;(&lt;a href="#hint-at-types"&gt;link&lt;/a&gt;) &lt;strong&gt;Include a hint about type in a name if it would otherwise be ambiguous.&lt;/strong&gt;&lt;/p&gt;
&lt;details&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; WRONG&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; title&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;String&lt;/span&gt;
&lt;span class="pl-k"&gt;let&lt;/span&gt; cancel&lt;span class="pl-k"&gt;:&lt;/span&gt; UIButton

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; RIGHT&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; titleText&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;String&lt;/span&gt;
&lt;span class="pl-k"&gt;let&lt;/span&gt; cancelButton&lt;span class="pl-k"&gt;:&lt;/span&gt; UIButton&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id="user-content-past-tense-events"&gt;&lt;/a&gt;(&lt;a href="#past-tense-events"&gt;link&lt;/a&gt;) &lt;strong&gt;Event-handling functions should be named like past-tense sentences.&lt;/strong&gt; The subject can be omitted if it's not needed for clarity.&lt;/p&gt;
&lt;details&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; WRONG&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;ExperiencesViewController&lt;/span&gt; {

  &lt;span class="pl-k"&gt;private&lt;/span&gt; &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;handleBookButtonTap&lt;/span&gt;() {
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; ...&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;  }

  &lt;span class="pl-k"&gt;private&lt;/span&gt; &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;modelChanged&lt;/span&gt;() {
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; ...&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;  }
}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; RIGHT&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;ExperiencesViewController&lt;/span&gt; {

  &lt;span class="pl-k"&gt;private&lt;/span&gt; &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;didTapBookButton&lt;/span&gt;() {
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; ...&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;  }

  &lt;span class="pl-k"&gt;private&lt;/span&gt; &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;modelDidChange&lt;/span&gt;() {
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; ...&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;  }
}&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id="user-content-avoid-class-prefixes"&gt;&lt;/a&gt;(&lt;a href="#avoid-class-prefixes"&gt;link&lt;/a&gt;) &lt;strong&gt;Avoid Objective-C-style acronym prefixes.&lt;/strong&gt; This is no longer needed to avoid naming conflicts in Swift.&lt;/p&gt;
&lt;details&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; WRONG&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;AIRAccount&lt;/span&gt; {
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; ...&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; RIGHT&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;Account&lt;/span&gt; {
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; ...&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;}&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id="user-content-avoid-controller-suffix"&gt;&lt;/a&gt;(&lt;a href="#avoid-controller-suffix"&gt;link&lt;/a&gt;) &lt;strong&gt;Avoid &lt;code&gt;*Controller&lt;/code&gt; in names of classes that aren't view controllers.&lt;/strong&gt;&lt;/p&gt;
&lt;details&gt;
&lt;h4&gt;&lt;a id="user-content-why-2" class="anchor" aria-hidden="true" href="#why-2"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Why?&lt;/h4&gt;
&lt;p&gt;Controller is an overloaded suffix that doesn't provide information about the responsibilities of the class.&lt;/p&gt;
&lt;/details&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="#table-of-contents"&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-style" class="anchor" aria-hidden="true" href="#style"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Style&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id="user-content-use-implicit-types"&gt;&lt;/a&gt;(&lt;a href="#use-implicit-types"&gt;link&lt;/a&gt;) &lt;strong&gt;Don't include types where they can be easily inferred.&lt;/strong&gt;&lt;/p&gt;
&lt;details&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; WRONG&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; host&lt;span class="pl-k"&gt;:&lt;/span&gt; Host &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;Host&lt;/span&gt;()

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; RIGHT&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; host &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;Host&lt;/span&gt;()&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;enum&lt;/span&gt; &lt;span class="pl-en"&gt;Direction&lt;/span&gt; {
  &lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-c1"&gt;left&lt;/span&gt;
  &lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-c1"&gt;right&lt;/span&gt;
}

&lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;someDirection&lt;/span&gt;() &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; Direction {
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; WRONG&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;  &lt;span class="pl-k"&gt;return&lt;/span&gt; Direction.&lt;span class="pl-smi"&gt;left&lt;/span&gt;

  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; RIGHT&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;  &lt;span class="pl-k"&gt;return&lt;/span&gt; .&lt;span class="pl-smi"&gt;left&lt;/span&gt;
}&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id="user-content-omit-self"&gt;&lt;/a&gt;(&lt;a href="#omit-self"&gt;link&lt;/a&gt;) &lt;strong&gt;Don't use &lt;code&gt;self&lt;/code&gt; unless it's necessary for disambiguation or required by the language.&lt;/strong&gt; &lt;a href="https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#redundantSelf"&gt;&lt;img src="https://camo.githubusercontent.com/1bdd2069cca848064c6d84d57da8095e7e65dd0b/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f5377696674466f726d61742d726564756e64616e7453656c662d3742303035312e737667" alt="SwiftFormat: redundantSelf" data-canonical-src="https://img.shields.io/badge/SwiftFormat-redundantSelf-7B0051.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;details&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;final&lt;/span&gt; &lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;Listing&lt;/span&gt; {

  &lt;span class="pl-k"&gt;init&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-en"&gt;capacity&lt;/span&gt;&lt;/span&gt;: &lt;span class="pl-c1"&gt;Int&lt;/span&gt;, &lt;span class="pl-smi"&gt;&lt;span class="pl-en"&gt;allowsPets&lt;/span&gt;&lt;/span&gt;: &lt;span class="pl-c1"&gt;Bool&lt;/span&gt;) {
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; WRONG&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-c1"&gt;self&lt;/span&gt;.&lt;span class="pl-c1"&gt;capacity&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; capacity
    &lt;span class="pl-c1"&gt;self&lt;/span&gt;.&lt;span class="pl-smi"&gt;isFamilyFriendly&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;!&lt;/span&gt;allowsPets &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; `self.` not required here&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; RIGHT&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-c1"&gt;self&lt;/span&gt;.&lt;span class="pl-c1"&gt;capacity&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; capacity
    isFamilyFriendly &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;!&lt;/span&gt;allowsPets
  }

  &lt;span class="pl-k"&gt;private&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; isFamilyFriendly&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;Bool&lt;/span&gt;
  &lt;span class="pl-k"&gt;private&lt;/span&gt; &lt;span class="pl-k"&gt;var&lt;/span&gt; capacity&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;Int&lt;/span&gt;

  &lt;span class="pl-k"&gt;private&lt;/span&gt; &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;increaseCapacity&lt;/span&gt;(&lt;span class="pl-en"&gt;by&lt;/span&gt; &lt;span class="pl-smi"&gt;amount&lt;/span&gt;: &lt;span class="pl-c1"&gt;Int&lt;/span&gt;) {
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; WRONG&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-c1"&gt;self&lt;/span&gt;.&lt;span class="pl-c1"&gt;capacity&lt;/span&gt; &lt;span class="pl-k"&gt;+=&lt;/span&gt; amount

    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; RIGHT&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    capacity &lt;span class="pl-k"&gt;+=&lt;/span&gt; amount

    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; WRONG&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-c1"&gt;self&lt;/span&gt;.&lt;span class="pl-c1"&gt;save&lt;/span&gt;()

    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; RIGHT&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-c1"&gt;save&lt;/span&gt;()
  }
}&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id="user-content-upgrade-self"&gt;&lt;/a&gt;(&lt;a href="#upgrade-self"&gt;link&lt;/a&gt;) &lt;strong&gt;Bind to &lt;code&gt;self&lt;/code&gt; when upgrading from a weak reference.&lt;/strong&gt; &lt;a href="https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#strongifiedSelf"&gt;&lt;img src="https://camo.githubusercontent.com/f584fae7e49611af47710643646edee7ae699d30/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f5377696674466f726d61742d7374726f6e67696669656453656c662d3742303035312e737667" alt="SwiftFormat: strongifiedSelf" data-canonical-src="https://img.shields.io/badge/SwiftFormat-strongifiedSelf-7B0051.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;details&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;WRONG&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;MyClass&lt;/span&gt; {

  &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;request&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-en"&gt;completion&lt;/span&gt;&lt;/span&gt;: () &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;Void&lt;/span&gt;) {
    API.&lt;span class="pl-c1"&gt;request&lt;/span&gt;() { [&lt;span class="pl-k"&gt;weak&lt;/span&gt; &lt;span class="pl-c1"&gt;self&lt;/span&gt;] response &lt;span class="pl-k"&gt;in&lt;/span&gt;
      &lt;span class="pl-k"&gt;guard&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; strongSelf &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;self&lt;/span&gt; &lt;span class="pl-k"&gt;else&lt;/span&gt; { &lt;span class="pl-k"&gt;return&lt;/span&gt; }
      &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Do work&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;      &lt;span class="pl-c1"&gt;completion&lt;/span&gt;()
    }
  }
}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; RIGHT&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;MyClass&lt;/span&gt; {

  &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;request&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-en"&gt;completion&lt;/span&gt;&lt;/span&gt;: () &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;Void&lt;/span&gt;) {
    API.&lt;span class="pl-c1"&gt;request&lt;/span&gt;() { [&lt;span class="pl-k"&gt;weak&lt;/span&gt; &lt;span class="pl-c1"&gt;self&lt;/span&gt;] response &lt;span class="pl-k"&gt;in&lt;/span&gt;
      &lt;span class="pl-k"&gt;guard&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-c1"&gt;self&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;self&lt;/span&gt; &lt;span class="pl-k"&gt;else&lt;/span&gt; { &lt;span class="pl-k"&gt;return&lt;/span&gt; }
      &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Do work&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;      &lt;span class="pl-c1"&gt;completion&lt;/span&gt;()
    }
  }
}&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id="user-content-trailing-comma-array"&gt;&lt;/a&gt;(&lt;a href="#trailing-comma-array"&gt;link&lt;/a&gt;) &lt;strong&gt;Add a trailing comma on the last element of a multi-line array.&lt;/strong&gt; &lt;a href="https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#trailingCommas"&gt;&lt;img src="https://camo.githubusercontent.com/2ce42d86fd313cf0f4d2d9694d91d106c1bed9cd/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f5377696674466f726d61742d747261696c696e67436f6d6d61732d3742303035312e737667" alt="SwiftFormat: trailingCommas" data-canonical-src="https://img.shields.io/badge/SwiftFormat-trailingCommas-7B0051.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;details&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; WRONG&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; rowContent &lt;span class="pl-k"&gt;=&lt;/span&gt; [
  &lt;span class="pl-c1"&gt;listingUrgencyDatesRowContent&lt;/span&gt;(),
  &lt;span class="pl-c1"&gt;listingUrgencyBookedRowContent&lt;/span&gt;(),
  &lt;span class="pl-c1"&gt;listingUrgencyBookedShortRowContent&lt;/span&gt;()
]

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; RIGHT&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; rowContent &lt;span class="pl-k"&gt;=&lt;/span&gt; [
  &lt;span class="pl-c1"&gt;listingUrgencyDatesRowContent&lt;/span&gt;(),
  &lt;span class="pl-c1"&gt;listingUrgencyBookedRowContent&lt;/span&gt;(),
  &lt;span class="pl-c1"&gt;listingUrgencyBookedShortRowContent&lt;/span&gt;(),
]&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id="user-content-name-tuple-elements"&gt;&lt;/a&gt;(&lt;a href="#name-tuple-elements"&gt;link&lt;/a&gt;) &lt;strong&gt;Name members of tuples for extra clarity.&lt;/strong&gt; Rule of thumb: if you've got more than 3 fields, you should probably be using a struct.&lt;/p&gt;
&lt;details&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; WRONG&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;whatever&lt;/span&gt;() &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; (&lt;span class="pl-c1"&gt;Int&lt;/span&gt;, &lt;span class="pl-c1"&gt;Int&lt;/span&gt;) {
  &lt;span class="pl-k"&gt;return&lt;/span&gt; (&lt;span class="pl-c1"&gt;4&lt;/span&gt;, &lt;span class="pl-c1"&gt;4&lt;/span&gt;)
}
&lt;span class="pl-k"&gt;let&lt;/span&gt; thing &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;whatever&lt;/span&gt;()
&lt;span class="pl-c1"&gt;print&lt;/span&gt;(thing.0)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; RIGHT&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;whatever&lt;/span&gt;() &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; (x: &lt;span class="pl-c1"&gt;Int&lt;/span&gt;, y: &lt;span class="pl-c1"&gt;Int&lt;/span&gt;) {
  &lt;span class="pl-k"&gt;return&lt;/span&gt; (&lt;span class="pl-c1"&gt;x&lt;/span&gt;: &lt;span class="pl-c1"&gt;4&lt;/span&gt;, &lt;span class="pl-c1"&gt;y&lt;/span&gt;: &lt;span class="pl-c1"&gt;4&lt;/span&gt;)
}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; THIS IS ALSO OKAY&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;whatever2&lt;/span&gt;() &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; (x: &lt;span class="pl-c1"&gt;Int&lt;/span&gt;, y: &lt;span class="pl-c1"&gt;Int&lt;/span&gt;) {
  &lt;span class="pl-k"&gt;let&lt;/span&gt; x &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;
  &lt;span class="pl-k"&gt;let&lt;/span&gt; y &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;
  &lt;span class="pl-k"&gt;return&lt;/span&gt; (x, y)
}

&lt;span class="pl-k"&gt;let&lt;/span&gt; coord &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;whatever&lt;/span&gt;()
coord.&lt;span class="pl-smi"&gt;x&lt;/span&gt;
coord.&lt;span class="pl-smi"&gt;y&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id="user-content-colon-spacing"&gt;&lt;/a&gt;(&lt;a href="#colon-spacing"&gt;link&lt;/a&gt;) &lt;strong&gt;Place the colon immediately after an identifier, followed by a space.&lt;/strong&gt; &lt;a href="https://github.com/realm/SwiftLint/blob/master/Rules.md#colon"&gt;&lt;img src="https://camo.githubusercontent.com/a41f15f3f7880ab190451883a0224e8356ed5bc5/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f53776966744c696e742d636f6c6f6e2d3030374138372e737667" alt="SwiftLint: colon" data-canonical-src="https://img.shields.io/badge/SwiftLint-colon-007A87.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;details&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; WRONG&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;var&lt;/span&gt; something &lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;Double&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; RIGHT&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;var&lt;/span&gt; something&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;Double&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; WRONG&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;MyClass&lt;/span&gt; : &lt;span class="pl-e"&gt;SuperClass &lt;/span&gt;{
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; ...&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; RIGHT&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;MyClass&lt;/span&gt;: &lt;span class="pl-e"&gt;SuperClass &lt;/span&gt;{
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; ...&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;}&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; WRONG&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;var&lt;/span&gt; dict &lt;span class="pl-k"&gt;=&lt;/span&gt; [KeyType&lt;span class="pl-k"&gt;:&lt;/span&gt;ValueType]()
&lt;span class="pl-k"&gt;var&lt;/span&gt; dict &lt;span class="pl-k"&gt;=&lt;/span&gt; [KeyType &lt;span class="pl-k"&gt;:&lt;/span&gt; ValueType]()

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; RIGHT&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;var&lt;/span&gt; dict &lt;span class="pl-k"&gt;=&lt;/span&gt; [KeyType&lt;span class="pl-k"&gt;:&lt;/span&gt; ValueType]()&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id="user-content-return-arrow-spacing"&gt;&lt;/a&gt;(&lt;a href="#return-arrow-spacing"&gt;link&lt;/a&gt;) &lt;strong&gt;Place a space on either side of a return arrow for readability.&lt;/strong&gt; &lt;a href="https://github.com/realm/SwiftLint/blob/master/Rules.md#returning-whitespace"&gt;&lt;img src="https://camo.githubusercontent.com/6c1c74a5ce69c27bec44a35d4b0bcf9522bac806/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f53776966744c696e742d72657475726e5f5f6172726f775f5f776869746573706163652d3030374138372e737667" alt="SwiftLint: return_arrow_whitespace" data-canonical-src="https://img.shields.io/badge/SwiftLint-return__arrow__whitespace-007A87.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;details&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; WRONG&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;doSomething&lt;/span&gt;()&lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;String&lt;/span&gt; {
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; ...&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; RIGHT&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;doSomething&lt;/span&gt;() &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;String&lt;/span&gt; {
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; ...&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;}&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; WRONG&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;doSomething&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-en"&gt;completion&lt;/span&gt;&lt;/span&gt;: ()&lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;Void&lt;/span&gt;) {
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; ...&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; RIGHT&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;doSomething&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-en"&gt;completion&lt;/span&gt;&lt;/span&gt;: () &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;Void&lt;/span&gt;) {
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; ...&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;}&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id="user-content-unnecessary-parens"&gt;&lt;/a&gt;(&lt;a href="#unnecessary-parens"&gt;link&lt;/a&gt;) &lt;strong&gt;Omit unnecessary parentheses.&lt;/strong&gt; &lt;a href="https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#redundantParens"&gt;&lt;img src="https://camo.githubusercontent.com/393e2aadbcd49a9eb89911a0adcf68f8c256194c/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f5377696674466f726d61742d726564756e64616e74506172656e732d3742303035312e737667" alt="SwiftFormat: redundantParens" data-canonical-src="https://img.shields.io/badge/SwiftFormat-redundantParens-7B0051.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;details&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; WRONG&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;if&lt;/span&gt; (userCount &lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt;) { &lt;span class="pl-k"&gt;...&lt;/span&gt; }
&lt;span class="pl-k"&gt;switch&lt;/span&gt; (someValue) { &lt;span class="pl-k"&gt;...&lt;/span&gt; }
&lt;span class="pl-k"&gt;let&lt;/span&gt; evens &lt;span class="pl-k"&gt;=&lt;/span&gt; userCounts.&lt;span class="pl-c1"&gt;filter&lt;/span&gt; { (number) &lt;span class="pl-k"&gt;in&lt;/span&gt; number &lt;span class="pl-k"&gt;%&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-k"&gt;==&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt; }
&lt;span class="pl-k"&gt;let&lt;/span&gt; squares &lt;span class="pl-k"&gt;=&lt;/span&gt; userCounts.&lt;span class="pl-c1"&gt;map&lt;/span&gt;() { &lt;span class="pl-c1"&gt;$0&lt;/span&gt; &lt;span class="pl-k"&gt;*&lt;/span&gt; &lt;span class="pl-c1"&gt;$0&lt;/span&gt; }

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; RIGHT&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;if&lt;/span&gt; userCount &lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt; { &lt;span class="pl-k"&gt;...&lt;/span&gt; }
&lt;span class="pl-k"&gt;switch&lt;/span&gt; someValue { &lt;span class="pl-k"&gt;...&lt;/span&gt; }
&lt;span class="pl-k"&gt;let&lt;/span&gt; evens &lt;span class="pl-k"&gt;=&lt;/span&gt; userCounts.&lt;span class="pl-c1"&gt;filter&lt;/span&gt; { number &lt;span class="pl-k"&gt;in&lt;/span&gt; number &lt;span class="pl-k"&gt;%&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-k"&gt;==&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt; }
&lt;span class="pl-k"&gt;let&lt;/span&gt; squares &lt;span class="pl-k"&gt;=&lt;/span&gt; userCounts.&lt;span class="pl-c1"&gt;map&lt;/span&gt; { &lt;span class="pl-c1"&gt;$0&lt;/span&gt; &lt;span class="pl-k"&gt;*&lt;/span&gt; &lt;span class="pl-c1"&gt;$0&lt;/span&gt; }&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id="user-content-unnecessary-enum-arguments"&gt;&lt;/a&gt; (&lt;a href="#unnecessary-enum-arguments"&gt;link&lt;/a&gt;) &lt;strong&gt;Omit enum associated values from case statements when all arguments are unlabeled.&lt;/strong&gt; &lt;a href="https://github.com/realm/SwiftLint/blob/master/Rules.md#empty-enum-arguments"&gt;&lt;img src="https://camo.githubusercontent.com/89e430615b4c8bdc13d9c98435b2bea735767be1/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f53776966744c696e742d656d7074795f5f656e756d5f5f617267756d656e74732d3030374138372e737667" alt="SwiftLint: empty_enum_arguments" data-canonical-src="https://img.shields.io/badge/SwiftLint-empty__enum__arguments-007A87.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;details&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; WRONG&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;if&lt;/span&gt; &lt;span class="pl-k"&gt;case&lt;/span&gt; .&lt;span class="pl-c1"&gt;done&lt;/span&gt;(&lt;span class="pl-c1"&gt;_&lt;/span&gt;) &lt;span class="pl-k"&gt;=&lt;/span&gt; result { &lt;span class="pl-k"&gt;...&lt;/span&gt; }

&lt;span class="pl-k"&gt;switch&lt;/span&gt; animal {
&lt;span class="pl-k"&gt;case&lt;/span&gt; .&lt;span class="pl-c1"&gt;dog&lt;/span&gt;(&lt;span class="pl-c1"&gt;_&lt;/span&gt;, &lt;span class="pl-c1"&gt;_&lt;/span&gt;, &lt;span class="pl-c1"&gt;_&lt;/span&gt;)&lt;span class="pl-k"&gt;:&lt;/span&gt;
  &lt;span class="pl-k"&gt;...&lt;/span&gt;
}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; RIGHT&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;if&lt;/span&gt; &lt;span class="pl-k"&gt;case&lt;/span&gt; .&lt;span class="pl-smi"&gt;done&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; result { &lt;span class="pl-k"&gt;...&lt;/span&gt; }

&lt;span class="pl-k"&gt;switch&lt;/span&gt; animal {
&lt;span class="pl-k"&gt;case&lt;/span&gt; .&lt;span class="pl-smi"&gt;dog&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt;
  &lt;span class="pl-k"&gt;...&lt;/span&gt;
}&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id="user-content-favor-constructors"&gt;&lt;/a&gt;(&lt;a href="#favor-constructors"&gt;link&lt;/a&gt;) &lt;strong&gt;Use constructors instead of Make() functions for NSRange and others.&lt;/strong&gt; &lt;a href="https://github.com/realm/SwiftLint/blob/master/Rules.md#legacy-constructor"&gt;&lt;img src="https://camo.githubusercontent.com/a3561477a9d94cf5d3bf9fcccd0ce110cbb9249d/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f53776966744c696e742d6c65676163795f5f636f6e7374727563746f722d3030374138372e737667" alt="SwiftLint: legacy_constructor" data-canonical-src="https://img.shields.io/badge/SwiftLint-legacy__constructor-007A87.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;details&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; WRONG&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; range &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;NSMakeRange&lt;/span&gt;(&lt;span class="pl-c1"&gt;10&lt;/span&gt;, &lt;span class="pl-c1"&gt;5&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; RIGHT&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; range &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;NSRange&lt;/span&gt;(&lt;span class="pl-c1"&gt;location&lt;/span&gt;: &lt;span class="pl-c1"&gt;10&lt;/span&gt;, &lt;span class="pl-c1"&gt;length&lt;/span&gt;: &lt;span class="pl-c1"&gt;5&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-functions" class="anchor" aria-hidden="true" href="#functions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Functions&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id="user-content-omit-function-void-return"&gt;&lt;/a&gt;(&lt;a href="#omit-function-void-return"&gt;link&lt;/a&gt;) &lt;strong&gt;Omit &lt;code&gt;Void&lt;/code&gt; return types from function definitions.&lt;/strong&gt; &lt;a href="https://github.com/realm/SwiftLint/blob/master/Rules.md#redundant-void-return"&gt;&lt;img src="https://camo.githubusercontent.com/5faa99c67ff11922fe517b9cab2786bf1cc95189/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f53776966744c696e742d726564756e64616e745f5f766f69645f5f72657475726e2d3030374138372e737667" alt="SwiftLint: redundant_void_return" data-canonical-src="https://img.shields.io/badge/SwiftLint-redundant__void__return-007A87.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;details&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; WRONG&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;doSomething&lt;/span&gt;() &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;Void&lt;/span&gt; {
  &lt;span class="pl-k"&gt;...&lt;/span&gt;
}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; RIGHT&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;doSomething&lt;/span&gt;() {
  &lt;span class="pl-k"&gt;...&lt;/span&gt;
}&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-closures" class="anchor" aria-hidden="true" href="#closures"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Closures&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id="user-content-favor-void-closure-return"&gt;&lt;/a&gt;(&lt;a href="#favor-void-closure-return"&gt;link&lt;/a&gt;) &lt;strong&gt;Favor &lt;code&gt;Void&lt;/code&gt; return types over &lt;code&gt;()&lt;/code&gt; in closure declarations.&lt;/strong&gt; If you must specify a &lt;code&gt;Void&lt;/code&gt; return type in a function declaration, use &lt;code&gt;Void&lt;/code&gt; rather than &lt;code&gt;()&lt;/code&gt; to improve readability. &lt;a href="https://github.com/realm/SwiftLint/blob/master/Rules.md#void-return"&gt;&lt;img src="https://camo.githubusercontent.com/d3f56ffa4ac258533f6a27aa1556cda230c7bb42/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f53776966744c696e742d766f69645f5f72657475726e2d3030374138372e737667" alt="SwiftLint: void_return" data-canonical-src="https://img.shields.io/badge/SwiftLint-void__return-007A87.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;details&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; WRONG&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;method&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-en"&gt;completion&lt;/span&gt;&lt;/span&gt;: () &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; ()) {
  &lt;span class="pl-k"&gt;...&lt;/span&gt;
}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; RIGHT&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;method&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-en"&gt;completion&lt;/span&gt;&lt;/span&gt;: () &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;Void&lt;/span&gt;) {
  &lt;span class="pl-k"&gt;...&lt;/span&gt;
}&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id="user-content-unused-closure-parameter-naming"&gt;&lt;/a&gt;(&lt;a href="#unused-closure-parameter-naming"&gt;link&lt;/a&gt;) &lt;strong&gt;Name unused closure parameters as underscores (&lt;code&gt;_&lt;/code&gt;).&lt;/strong&gt; &lt;a href="https://github.com/realm/SwiftLint/blob/master/Rules.md#unused-closure-parameter"&gt;&lt;img src="https://camo.githubusercontent.com/e71c333f8db7ee82e8b6dbb07e538e06299e914a/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f53776966744c696e742d756e757365645f5f636c6f737572655f5f706172616d657465722d3030374138372e737667" alt="SwiftLint: unused_closure_parameter" data-canonical-src="https://img.shields.io/badge/SwiftLint-unused__closure__parameter-007A87.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;details&gt;
&lt;h4&gt;&lt;a id="user-content-why-3" class="anchor" aria-hidden="true" href="#why-3"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Why?&lt;/h4&gt;
&lt;p&gt;Naming unused closure parameters as underscores reduces the cognitive overhead required to read
closures by making it obvious which parameters are used and which are unused.&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; WRONG&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;someAsyncThing&lt;/span&gt;() { argument1, argument2, argument3 &lt;span class="pl-k"&gt;in&lt;/span&gt;
  &lt;span class="pl-c1"&gt;print&lt;/span&gt;(argument3)
}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; RIGHT&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;someAsyncThing&lt;/span&gt;() { &lt;span class="pl-c1"&gt;_&lt;/span&gt;, &lt;span class="pl-c1"&gt;_&lt;/span&gt;, argument3 &lt;span class="pl-k"&gt;in&lt;/span&gt;
  &lt;span class="pl-c1"&gt;print&lt;/span&gt;(argument3)
}&lt;/pre&gt;&lt;/div&gt;
  &lt;/details&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id="user-content-closure-brace-spacing"&gt;&lt;/a&gt;(&lt;a href="#closure-brace-spacing"&gt;link&lt;/a&gt;) &lt;strong&gt;Single-line closures should have a space inside each brace.&lt;/strong&gt; &lt;a href="https://github.com/realm/SwiftLint/blob/master/Rules.md#closure-spacing"&gt;&lt;img src="https://camo.githubusercontent.com/1eed0fde1dcc6d730c599eca8ff6ab8e71a51c1f/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f53776966744c696e742d636c6f737572655f5f73706163696e672d3030374138372e737667" alt="SwiftLint: closure_spacing" data-canonical-src="https://img.shields.io/badge/SwiftLint-closure__spacing-007A87.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;details&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; WRONG&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; evenSquares &lt;span class="pl-k"&gt;=&lt;/span&gt; numbers.&lt;span class="pl-c1"&gt;filter&lt;/span&gt; {&lt;span class="pl-c1"&gt;$0&lt;/span&gt; &lt;span class="pl-k"&gt;%&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-k"&gt;==&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt;}.&lt;span class="pl-c1"&gt;map&lt;/span&gt; {  &lt;span class="pl-c1"&gt;$0&lt;/span&gt; &lt;span class="pl-k"&gt;*&lt;/span&gt; &lt;span class="pl-c1"&gt;$0&lt;/span&gt;  }

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; RIGHT&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; evenSquares &lt;span class="pl-k"&gt;=&lt;/span&gt; numbers.&lt;span class="pl-c1"&gt;filter&lt;/span&gt; { &lt;span class="pl-c1"&gt;$0&lt;/span&gt; &lt;span class="pl-k"&gt;%&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-k"&gt;==&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt; }.&lt;span class="pl-c1"&gt;map&lt;/span&gt; { &lt;span class="pl-c1"&gt;$0&lt;/span&gt; &lt;span class="pl-k"&gt;*&lt;/span&gt; &lt;span class="pl-c1"&gt;$0&lt;/span&gt; }&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-operators" class="anchor" aria-hidden="true" href="#operators"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Operators&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id="user-content-infix-operator-spacing"&gt;&lt;/a&gt;(&lt;a href="#infix-operator-spacing"&gt;link&lt;/a&gt;) &lt;strong&gt;Infix operators should have a single space on either side.&lt;/strong&gt; Prefer parenthesis to visually group statements with many operators rather than varying widths of whitespace. This rule does not apply to range operators (e.g. &lt;code&gt;1...3&lt;/code&gt;) and postfix or prefix operators (e.g. &lt;code&gt;guest?&lt;/code&gt; or &lt;code&gt;-1&lt;/code&gt;). &lt;a href="https://github.com/realm/SwiftLint/blob/master/Rules.md#operator-usage-whitespace"&gt;&lt;img src="https://camo.githubusercontent.com/e4d073381d7d8389e89536805bc463098e7bc7c3/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f53776966744c696e742d6f70657261746f725f5f75736167655f5f776869746573706163652d3030374138372e737667" alt="SwiftLint: operator_usage_whitespace" data-canonical-src="https://img.shields.io/badge/SwiftLint-operator__usage__whitespace-007A87.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;details&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; WRONG&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; capacity &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;&lt;span class="pl-k"&gt;+&lt;/span&gt;&lt;span class="pl-c1"&gt;2&lt;/span&gt;
&lt;span class="pl-k"&gt;let&lt;/span&gt; capacity &lt;span class="pl-k"&gt;=&lt;/span&gt; currentCapacity   &lt;span class="pl-k"&gt;??&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt;
&lt;span class="pl-k"&gt;let&lt;/span&gt; mask &lt;span class="pl-k"&gt;=&lt;/span&gt; (UIAccessibilityTraitButton&lt;span class="pl-k"&gt;|&lt;/span&gt;UIAccessibilityTraitSelected)
&lt;span class="pl-k"&gt;let&lt;/span&gt; capacity&lt;span class="pl-k"&gt;=&lt;/span&gt;newCapacity
&lt;span class="pl-k"&gt;let&lt;/span&gt; latitude &lt;span class="pl-k"&gt;=&lt;/span&gt; region.&lt;span class="pl-smi"&gt;center&lt;/span&gt;.&lt;span class="pl-smi"&gt;latitude&lt;/span&gt; &lt;span class="pl-k"&gt;-&lt;/span&gt; region.&lt;span class="pl-smi"&gt;span&lt;/span&gt;.&lt;span class="pl-smi"&gt;latitudeDelta&lt;/span&gt;&lt;span class="pl-k"&gt;/&lt;/span&gt;&lt;span class="pl-c1"&gt;2.0&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; RIGHT&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; capacity &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-k"&gt;+&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;
&lt;span class="pl-k"&gt;let&lt;/span&gt; capacity &lt;span class="pl-k"&gt;=&lt;/span&gt; currentCapacity &lt;span class="pl-k"&gt;??&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt;
&lt;span class="pl-k"&gt;let&lt;/span&gt; mask &lt;span class="pl-k"&gt;=&lt;/span&gt; (UIAccessibilityTraitButton &lt;span class="pl-k"&gt;|&lt;/span&gt; UIAccessibilityTraitSelected)
&lt;span class="pl-k"&gt;let&lt;/span&gt; capacity &lt;span class="pl-k"&gt;=&lt;/span&gt; newCapacity
&lt;span class="pl-k"&gt;let&lt;/span&gt; latitude &lt;span class="pl-k"&gt;=&lt;/span&gt; region.&lt;span class="pl-smi"&gt;center&lt;/span&gt;.&lt;span class="pl-smi"&gt;latitude&lt;/span&gt; &lt;span class="pl-k"&gt;-&lt;/span&gt; (region.&lt;span class="pl-smi"&gt;span&lt;/span&gt;.&lt;span class="pl-smi"&gt;latitudeDelta&lt;/span&gt; &lt;span class="pl-k"&gt;/&lt;/span&gt; &lt;span class="pl-c1"&gt;2.0&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="#table-of-contents"&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-patterns" class="anchor" aria-hidden="true" href="#patterns"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Patterns&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id="user-content-implicitly-unwrapped-optionals"&gt;&lt;/a&gt;(&lt;a href="#implicitly-unwrapped-optionals"&gt;link&lt;/a&gt;) &lt;strong&gt;Prefer initializing properties at &lt;code&gt;init&lt;/code&gt; time whenever possible, rather than using implicitly unwrapped optionals.&lt;/strong&gt;  A notable exception is UIViewController's &lt;code&gt;view&lt;/code&gt; property. &lt;a href="https://github.com/realm/SwiftLint/blob/master/Rules.md#implicitly-unwrapped-optional"&gt;&lt;img src="https://camo.githubusercontent.com/49a90bf8ffba6e401a57e7418773e3ce6f6e46aa/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f53776966744c696e742d696d706c696369746c795f5f756e777261707065645f5f6f7074696f6e616c2d3030374138372e737667" alt="SwiftLint: implicitly_unwrapped_optional" data-canonical-src="https://img.shields.io/badge/SwiftLint-implicitly__unwrapped__optional-007A87.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;details&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; WRONG&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;MyClass&lt;/span&gt;: &lt;span class="pl-e"&gt;NSObject &lt;/span&gt;{

  &lt;span class="pl-k"&gt;init&lt;/span&gt;() {
    &lt;span class="pl-c1"&gt;super&lt;/span&gt;.&lt;span class="pl-k"&gt;init&lt;/span&gt;()
    someValue &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt;
  }

  &lt;span class="pl-k"&gt;var&lt;/span&gt; someValue&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;Int&lt;/span&gt;&lt;span class="pl-k"&gt;!&lt;/span&gt;
}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; RIGHT&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;MyClass&lt;/span&gt;: &lt;span class="pl-e"&gt;NSObject &lt;/span&gt;{

  &lt;span class="pl-k"&gt;init&lt;/span&gt;() {
    someValue &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt;
    &lt;span class="pl-c1"&gt;super&lt;/span&gt;.&lt;span class="pl-k"&gt;init&lt;/span&gt;()
  }

  &lt;span class="pl-k"&gt;var&lt;/span&gt; someValue&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;Int&lt;/span&gt;
}&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id="user-content-time-intensive-init"&gt;&lt;/a&gt;(&lt;a href="#time-intensive-init"&gt;link&lt;/a&gt;) &lt;strong&gt;Avoid performing any meaningful or time-intensive work in &lt;code&gt;init()&lt;/code&gt;.&lt;/strong&gt; Avoid doing things like opening database connections, making network requests, reading large amounts of data from disk, etc. Create something like a &lt;code&gt;start()&lt;/code&gt; method if these things need to be done before an object is ready for use.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id="user-content-complex-property-observers"&gt;&lt;/a&gt;(&lt;a href="#complex-property-observers"&gt;link&lt;/a&gt;) &lt;strong&gt;Extract complex property observers into methods.&lt;/strong&gt; This reduces nestedness, separates side-effects from property declarations, and makes the usage of implicitly-passed parameters like &lt;code&gt;oldValue&lt;/code&gt; explicit.&lt;/p&gt;
&lt;details&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; WRONG&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;TextField&lt;/span&gt; {
  &lt;span class="pl-k"&gt;var&lt;/span&gt; text&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;String&lt;/span&gt;&lt;span class="pl-k"&gt;?&lt;/span&gt; {
    &lt;span class="pl-k"&gt;didSet&lt;/span&gt; {
      &lt;span class="pl-k"&gt;guard&lt;/span&gt; oldValue &lt;span class="pl-k"&gt;!=&lt;/span&gt; text &lt;span class="pl-k"&gt;else&lt;/span&gt; {
        &lt;span class="pl-k"&gt;return&lt;/span&gt;
      }

      &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Do a bunch of text-related side-effects.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    }
  }
}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; RIGHT&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;TextField&lt;/span&gt; {
  &lt;span class="pl-k"&gt;var&lt;/span&gt; text&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;String&lt;/span&gt;&lt;span class="pl-k"&gt;?&lt;/span&gt; {
    &lt;span class="pl-k"&gt;didSet&lt;/span&gt; { &lt;span class="pl-c1"&gt;textDidUpdate&lt;/span&gt;(&lt;span class="pl-c1"&gt;from&lt;/span&gt;: oldValue) }
  }

  &lt;span class="pl-k"&gt;private&lt;/span&gt; &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;textDidUpdate&lt;/span&gt;(&lt;span class="pl-en"&gt;from&lt;/span&gt; &lt;span class="pl-smi"&gt;oldValue&lt;/span&gt;: &lt;span class="pl-c1"&gt;String&lt;/span&gt;&lt;span class="pl-k"&gt;?&lt;/span&gt;) {
    &lt;span class="pl-k"&gt;guard&lt;/span&gt; oldValue &lt;span class="pl-k"&gt;!=&lt;/span&gt; text &lt;span class="pl-k"&gt;else&lt;/span&gt; {
      &lt;span class="pl-k"&gt;return&lt;/span&gt;
    }

    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Do a bunch of text-related side-effects.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;  }
}&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id="user-content-complex-callback-block"&gt;&lt;/a&gt;(&lt;a href="#complex-callback-block"&gt;link&lt;/a&gt;) &lt;strong&gt;Extract complex callback blocks into methods&lt;/strong&gt;. This limits the complexity introduced by weak-self in blocks and reduces nestedness. If you need to reference self in the method call, make use of &lt;code&gt;guard&lt;/code&gt; to unwrap self for the duration of the callback.&lt;/p&gt;
&lt;details&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;WRONG&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;MyClass&lt;/span&gt; {

  &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;request&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-en"&gt;completion&lt;/span&gt;&lt;/span&gt;: () &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;Void&lt;/span&gt;) {
    API.&lt;span class="pl-c1"&gt;request&lt;/span&gt;() { [&lt;span class="pl-k"&gt;weak&lt;/span&gt; &lt;span class="pl-c1"&gt;self&lt;/span&gt;] response &lt;span class="pl-k"&gt;in&lt;/span&gt;
      &lt;span class="pl-k"&gt;if&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-c1"&gt;self&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;self&lt;/span&gt; {
        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Processing and side effects&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;      }
      &lt;span class="pl-c1"&gt;completion&lt;/span&gt;()
    }
  }
}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; RIGHT&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;MyClass&lt;/span&gt; {

  &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;request&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-en"&gt;completion&lt;/span&gt;&lt;/span&gt;: () &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;Void&lt;/span&gt;) {
    API.&lt;span class="pl-c1"&gt;request&lt;/span&gt;() { [&lt;span class="pl-k"&gt;weak&lt;/span&gt; &lt;span class="pl-c1"&gt;self&lt;/span&gt;] response &lt;span class="pl-k"&gt;in&lt;/span&gt;
      &lt;span class="pl-k"&gt;guard&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-c1"&gt;self&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;self&lt;/span&gt; &lt;span class="pl-k"&gt;else&lt;/span&gt; { &lt;span class="pl-k"&gt;return&lt;/span&gt; }
      &lt;span class="pl-c1"&gt;self&lt;/span&gt;.&lt;span class="pl-c1"&gt;doSomething&lt;/span&gt;(&lt;span class="pl-c1"&gt;self&lt;/span&gt;.&lt;span class="pl-smi"&gt;property&lt;/span&gt;)
      &lt;span class="pl-c1"&gt;completion&lt;/span&gt;()
    }
  }

  &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;doSomething&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-en"&gt;nonOptionalParameter&lt;/span&gt;&lt;/span&gt;: SomeClass) {
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Processing and side effects&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;  }
}&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id="user-content-guards-at-top"&gt;&lt;/a&gt;(&lt;a href="#guards-at-top"&gt;link&lt;/a&gt;) &lt;strong&gt;Prefer using &lt;code&gt;guard&lt;/code&gt; at the beginning of a scope.&lt;/strong&gt;&lt;/p&gt;
&lt;details&gt;
&lt;h4&gt;&lt;a id="user-content-why-4" class="anchor" aria-hidden="true" href="#why-4"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Why?&lt;/h4&gt;
&lt;p&gt;It's easier to reason about a block of code when all &lt;code&gt;guard&lt;/code&gt; statements are grouped together at the top rather than intermixed with business logic.&lt;/p&gt;
&lt;/details&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id="user-content-limit-access-control"&gt;&lt;/a&gt;(&lt;a href="#limit-access-control"&gt;link&lt;/a&gt;) &lt;strong&gt;Access control should be at the strictest level possible.&lt;/strong&gt; Prefer &lt;code&gt;public&lt;/code&gt; to &lt;code&gt;open&lt;/code&gt; and &lt;code&gt;private&lt;/code&gt; to &lt;code&gt;fileprivate&lt;/code&gt; unless you need that behavior.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id="user-content-avoid-global-functions"&gt;&lt;/a&gt;(&lt;a href="#avoid-global-functions"&gt;link&lt;/a&gt;) &lt;strong&gt;Avoid global functions whenever possible.&lt;/strong&gt; Prefer methods within type definitions.&lt;/p&gt;
&lt;details&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; WRONG&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;age&lt;/span&gt;(of person, bornAt timeInterval) &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;Int&lt;/span&gt; {
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; ...&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;}

&lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;jump&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-en"&gt;person&lt;/span&gt;&lt;/span&gt;: Person) {
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; ...&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; RIGHT&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;Person&lt;/span&gt; {
  &lt;span class="pl-k"&gt;var&lt;/span&gt; bornAt&lt;span class="pl-k"&gt;:&lt;/span&gt; TimeInterval

  &lt;span class="pl-k"&gt;var&lt;/span&gt; age&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;Int&lt;/span&gt; {
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; ...&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;  }

  &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;jump&lt;/span&gt;() {
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; ...&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;  }
}&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id="user-content-private-constants"&gt;&lt;/a&gt;(&lt;a href="#private-constants"&gt;link&lt;/a&gt;) &lt;strong&gt;Prefer putting constants in the top level of a file if they are &lt;code&gt;private&lt;/code&gt;.&lt;/strong&gt; If they are &lt;code&gt;public&lt;/code&gt; or &lt;code&gt;internal&lt;/code&gt;, define them as static properties, for namespacing purposes.&lt;/p&gt;
&lt;details&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;private&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; privateValue &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;secret&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;

&lt;span class="pl-k"&gt;public&lt;/span&gt; &lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;MyClass&lt;/span&gt; {

  &lt;span class="pl-k"&gt;public&lt;/span&gt; &lt;span class="pl-k"&gt;static&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; publicValue &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;something&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;

  &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;doSomething&lt;/span&gt;() {
    &lt;span class="pl-c1"&gt;print&lt;/span&gt;(privateValue)
    &lt;span class="pl-c1"&gt;print&lt;/span&gt;(MyClass.&lt;span class="pl-smi"&gt;publicValue&lt;/span&gt;)
  }
}&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id="user-content-namespace-using-enums"&gt;&lt;/a&gt;(&lt;a href="#namespace-using-enums"&gt;link&lt;/a&gt;) &lt;strong&gt;Use caseless &lt;code&gt;enum&lt;/code&gt;s for organizing &lt;code&gt;public&lt;/code&gt; or &lt;code&gt;internal&lt;/code&gt; constants and functions into namespaces.&lt;/strong&gt; Avoid creating non-namespaced global constants and functions. Feel free to nest namespaces where it adds clarity.&lt;/p&gt;
&lt;details&gt;
&lt;h4&gt;&lt;a id="user-content-why-5" class="anchor" aria-hidden="true" href="#why-5"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Why?&lt;/h4&gt;
&lt;p&gt;Caseless &lt;code&gt;enum&lt;/code&gt;s work well as namespaces because they cannot be instantiated, which matches their intent.&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;enum&lt;/span&gt; &lt;span class="pl-en"&gt;Environment&lt;/span&gt; {

  &lt;span class="pl-k"&gt;enum&lt;/span&gt; &lt;span class="pl-en"&gt;Earth&lt;/span&gt; {
    &lt;span class="pl-k"&gt;static&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; gravity &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;9.8&lt;/span&gt;
  }

  &lt;span class="pl-k"&gt;enum&lt;/span&gt; &lt;span class="pl-en"&gt;Moon&lt;/span&gt; {
    &lt;span class="pl-k"&gt;static&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; gravity &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;1.6&lt;/span&gt;
  }
}&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id="user-content-auto-enum-values"&gt;&lt;/a&gt;(&lt;a href="#auto-enum-values"&gt;link&lt;/a&gt;) &lt;strong&gt;Use Swift's automatic enum values unless they map to an external source.&lt;/strong&gt; Add a comment explaining why explicit values are defined. &lt;a href="https://github.com/realm/SwiftLint/blob/master/Rules.md#redundant-string-enum-value"&gt;&lt;img src="https://camo.githubusercontent.com/ca3f3e146460d7c88c820f718921a5df186f4b08/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f53776966744c696e742d726564756e64616e745f5f737472696e675f5f656e756d5f5f76616c75652d3030374138372e737667" alt="SwiftLint: redundant_string_enum_value" data-canonical-src="https://img.shields.io/badge/SwiftLint-redundant__string__enum__value-007A87.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;details&gt;
&lt;h4&gt;&lt;a id="user-content-why-6" class="anchor" aria-hidden="true" href="#why-6"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Why?&lt;/h4&gt;
&lt;p&gt;To minimize user error, improve readability, and write code faster, rely on Swift's automatic enum values. If the value maps to an external source (e.g. it's coming from a network request) or is persisted across binaries, however, define the values explicity, and document what these values are mapping to.&lt;/p&gt;
&lt;p&gt;This ensures that if someone adds a new value in the middle, they won't accidentally break things.&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; WRONG&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;enum&lt;/span&gt; &lt;span class="pl-en"&gt;ErrorType&lt;/span&gt;: &lt;span class="pl-e"&gt;&lt;span class="pl-c1"&gt;String&lt;/span&gt; &lt;/span&gt;{
  &lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-c1"&gt;error&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;error&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-c1"&gt;warning&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;warning&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
}

&lt;span class="pl-k"&gt;enum&lt;/span&gt; &lt;span class="pl-en"&gt;UserType&lt;/span&gt;: &lt;span class="pl-e"&gt;&lt;span class="pl-c1"&gt;String&lt;/span&gt; &lt;/span&gt;{
  &lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-c1"&gt;owner&lt;/span&gt;
  &lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-c1"&gt;manager&lt;/span&gt;
  &lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-c1"&gt;member&lt;/span&gt;
}

&lt;span class="pl-k"&gt;enum&lt;/span&gt; &lt;span class="pl-en"&gt;Planet&lt;/span&gt;: &lt;span class="pl-e"&gt;&lt;span class="pl-c1"&gt;Int&lt;/span&gt; &lt;/span&gt;{
  &lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-c1"&gt;mercury&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt;
  &lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-c1"&gt;venus&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;
  &lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-c1"&gt;earth&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;
  &lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-c1"&gt;mars&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;
  &lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-c1"&gt;jupiter&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;
  &lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-c1"&gt;saturn&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt;
  &lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-c1"&gt;uranus&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;6&lt;/span&gt;
  &lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-c1"&gt;neptune&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;7&lt;/span&gt;
}

&lt;span class="pl-k"&gt;enum&lt;/span&gt; &lt;span class="pl-en"&gt;ErrorCode&lt;/span&gt;: &lt;span class="pl-e"&gt;&lt;span class="pl-c1"&gt;Int&lt;/span&gt; &lt;/span&gt;{
  &lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-c1"&gt;notEnoughMemory&lt;/span&gt;
  &lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-c1"&gt;invalidResource&lt;/span&gt;
  &lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-c1"&gt;timeOut&lt;/span&gt;
}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; RIGHT&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;enum&lt;/span&gt; &lt;span class="pl-en"&gt;ErrorType&lt;/span&gt;: &lt;span class="pl-e"&gt;&lt;span class="pl-c1"&gt;String&lt;/span&gt; &lt;/span&gt;{
  &lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-c1"&gt;error&lt;/span&gt;
  &lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-c1"&gt;warning&lt;/span&gt;
}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; These are written to a logging service. Explicit values ensure they're consistent across binaries.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; swiftlint:disable redundant_string_enum_value&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;enum&lt;/span&gt; &lt;span class="pl-en"&gt;UserType&lt;/span&gt;: &lt;span class="pl-e"&gt;&lt;span class="pl-c1"&gt;String&lt;/span&gt; &lt;/span&gt;{
  &lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-c1"&gt;owner&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;owner&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-c1"&gt;manager&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;manager&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-c1"&gt;member&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;member&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
}
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; swiftlint:enable redundant_string_enum_value&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;enum&lt;/span&gt; &lt;span class="pl-en"&gt;Planet&lt;/span&gt;: &lt;span class="pl-e"&gt;&lt;span class="pl-c1"&gt;Int&lt;/span&gt; &lt;/span&gt;{
  &lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-c1"&gt;mercury&lt;/span&gt;
  &lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-c1"&gt;venus&lt;/span&gt;
  &lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-c1"&gt;earth&lt;/span&gt;
  &lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-c1"&gt;mars&lt;/span&gt;
  &lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-c1"&gt;jupiter&lt;/span&gt;
  &lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-c1"&gt;saturn&lt;/span&gt;
  &lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-c1"&gt;uranus&lt;/span&gt;
  &lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-c1"&gt;neptune&lt;/span&gt;
}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; These values come from the server, so we set them here explicitly to match those values.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;enum&lt;/span&gt; &lt;span class="pl-en"&gt;ErrorCode&lt;/span&gt;: &lt;span class="pl-e"&gt;&lt;span class="pl-c1"&gt;Int&lt;/span&gt; &lt;/span&gt;{
  &lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-c1"&gt;notEnoughMemory&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt;
  &lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-c1"&gt;invalidResource&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;
  &lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-c1"&gt;timeOut&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;
}&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id="user-content-semantic-optionals"&gt;&lt;/a&gt;(&lt;a href="#semantic-optionals"&gt;link&lt;/a&gt;) &lt;strong&gt;Use optionals only when they have semantic meaning.&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id="user-content-prefer-immutable-values"&gt;&lt;/a&gt;(&lt;a href="#prefer-immutable-values"&gt;link&lt;/a&gt;) &lt;strong&gt;Prefer immutable values whenever possible.&lt;/strong&gt; Use &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;compactMap&lt;/code&gt; instead of appending to a new collection. Use &lt;code&gt;filter&lt;/code&gt; instead of removing elements from a mutable collection.&lt;/p&gt;
&lt;details&gt;
&lt;h4&gt;&lt;a id="user-content-why-7" class="anchor" aria-hidden="true" href="#why-7"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Why?&lt;/h4&gt;
&lt;p&gt;Mutable variables increase complexity, so try to keep them in as narrow a scope as possible.&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; WRONG&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;var&lt;/span&gt; results &lt;span class="pl-k"&gt;=&lt;/span&gt; [SomeType]()
&lt;span class="pl-k"&gt;for&lt;/span&gt; element &lt;span class="pl-k"&gt;in&lt;/span&gt; input {
  &lt;span class="pl-k"&gt;let&lt;/span&gt; result &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;transform&lt;/span&gt;(element)
  results.&lt;span class="pl-c1"&gt;append&lt;/span&gt;(result)
}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; RIGHT&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; results &lt;span class="pl-k"&gt;=&lt;/span&gt; input.&lt;span class="pl-c1"&gt;map&lt;/span&gt; { &lt;span class="pl-c1"&gt;transform&lt;/span&gt;(&lt;span class="pl-c1"&gt;$0&lt;/span&gt;) }&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; WRONG&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;var&lt;/span&gt; results &lt;span class="pl-k"&gt;=&lt;/span&gt; [SomeType]()
&lt;span class="pl-k"&gt;for&lt;/span&gt; element &lt;span class="pl-k"&gt;in&lt;/span&gt; input {
  &lt;span class="pl-k"&gt;if&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; result &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;transformThatReturnsAnOptional&lt;/span&gt;(element) {
    results.&lt;span class="pl-c1"&gt;append&lt;/span&gt;(result)
  }
}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; RIGHT&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; results &lt;span class="pl-k"&gt;=&lt;/span&gt; input.&lt;span class="pl-smi"&gt;compactMap&lt;/span&gt; { &lt;span class="pl-c1"&gt;transformThatReturnsAnOptional&lt;/span&gt;(&lt;span class="pl-c1"&gt;$0&lt;/span&gt;) }&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id="user-content-preconditions-and-asserts"&gt;&lt;/a&gt;(&lt;a href="#preconditions-and-asserts"&gt;link&lt;/a&gt;) &lt;strong&gt;Handle an unexpected but recoverable condition with an &lt;code&gt;assert&lt;/code&gt; method combined with the appropriate logging in production. If the unexpected condition is not recoverable, prefer a &lt;code&gt;precondition&lt;/code&gt; method or &lt;code&gt;fatalError()&lt;/code&gt;.&lt;/strong&gt; This strikes a balance between crashing and providing insight into unexpected conditions in the wild. Only prefer &lt;code&gt;fatalError&lt;/code&gt; over a &lt;code&gt;precondition&lt;/code&gt; method when the failure message is dynamic, since a &lt;code&gt;precondition&lt;/code&gt; method won't report the message in the crash report. &lt;a href="https://github.com/realm/SwiftLint/blob/master/Rules.md#fatal-error-message"&gt;&lt;img src="https://camo.githubusercontent.com/2ea43ff3f4721bd2852f2dc41327798039937585/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f53776966744c696e742d666174616c5f5f6572726f725f5f6d6573736167652d3030374138372e737667" alt="SwiftLint: fatal_error_message" data-canonical-src="https://img.shields.io/badge/SwiftLint-fatal__error__message-007A87.svg" style="max-width:100%;"&gt;&lt;/a&gt; &lt;a href="https://github.com/realm/SwiftLint/blob/master/Rules.md#force-cast"&gt;&lt;img src="https://camo.githubusercontent.com/cd1c96e68a107e3d2124bb061919eac05181c756/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f53776966744c696e742d666f7263655f5f636173742d3030374138372e737667" alt="SwiftLint: force_cast" data-canonical-src="https://img.shields.io/badge/SwiftLint-force__cast-007A87.svg" style="max-width:100%;"&gt;&lt;/a&gt; &lt;a href="https://github.com/realm/SwiftLint/blob/master/Rules.md#force-try"&gt;&lt;img src="https://camo.githubusercontent.com/551bf422270ba5ceb669d5900df8df4bc70608e5/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f53776966744c696e742d666f7263655f5f7472792d3030374138372e737667" alt="SwiftLint: force_try" data-canonical-src="https://img.shields.io/badge/SwiftLint-force__try-007A87.svg" style="max-width:100%;"&gt;&lt;/a&gt; &lt;a href="https://github.com/realm/SwiftLint/blob/master/Rules.md#force-unwrapping"&gt;&lt;img src="https://camo.githubusercontent.com/c115dcd94f6b0c44c24ec0b66059161a65028246/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f53776966744c696e742d666f7263655f5f756e7772617070696e672d3030374138372e737667" alt="SwiftLint: force_unwrapping" data-canonical-src="https://img.shields.io/badge/SwiftLint-force__unwrapping-007A87.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;details&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;didSubmitText&lt;/span&gt;(&lt;span class="pl-en"&gt;_&lt;/span&gt; &lt;span class="pl-smi"&gt;text&lt;/span&gt;: &lt;span class="pl-c1"&gt;String&lt;/span&gt;) {
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; It's unclear how this was called with an empty string; our custom text field shouldn't allow this.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; This assert is useful for debugging but it's OK if we simply ignore this scenario in production.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;  &lt;span class="pl-k"&gt;guard&lt;/span&gt; &lt;span class="pl-k"&gt;!&lt;/span&gt;text.&lt;span class="pl-c1"&gt;isEmpty&lt;/span&gt; &lt;span class="pl-k"&gt;else&lt;/span&gt; {
    &lt;span class="pl-c1"&gt;assertionFailure&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Unexpected empty string&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    &lt;span class="pl-k"&gt;return&lt;/span&gt;
  }
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; ...&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;}

&lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;transformedItem&lt;/span&gt;(&lt;span class="pl-en"&gt;atIndex&lt;/span&gt; &lt;span class="pl-smi"&gt;index&lt;/span&gt;: &lt;span class="pl-c1"&gt;Int&lt;/span&gt;, &lt;span class="pl-en"&gt;from&lt;/span&gt; &lt;span class="pl-smi"&gt;items&lt;/span&gt;: [Item]) &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; Item {
  &lt;span class="pl-c1"&gt;precondition&lt;/span&gt;(index &lt;span class="pl-k"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt; &lt;span class="pl-k"&gt;&amp;amp;&amp;amp;&lt;/span&gt; index &lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt; items.&lt;span class="pl-c1"&gt;count&lt;/span&gt;)
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; It's impossible to continue executing if the precondition has failed.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; ...&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;}

&lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;makeImage&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-en"&gt;name&lt;/span&gt;&lt;/span&gt;: &lt;span class="pl-c1"&gt;String&lt;/span&gt;) &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; UIImage {
  &lt;span class="pl-k"&gt;guard&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; image &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;UIImage&lt;/span&gt;(&lt;span class="pl-c1"&gt;named&lt;/span&gt;: name, &lt;span class="pl-c1"&gt;in&lt;/span&gt;: &lt;span class="pl-c1"&gt;nil&lt;/span&gt;, &lt;span class="pl-c1"&gt;compatibleWith&lt;/span&gt;: &lt;span class="pl-c1"&gt;nil&lt;/span&gt;) &lt;span class="pl-k"&gt;else&lt;/span&gt; {
    &lt;span class="pl-c1"&gt;fatalError&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Image named &lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;name&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt; couldn't be loaded.&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; We want the error message so we know the name of the missing image.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;  }
  &lt;span class="pl-k"&gt;return&lt;/span&gt; image
}&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id="user-content-static-type-methods-by-default"&gt;&lt;/a&gt;(&lt;a href="#static-type-methods-by-default"&gt;link&lt;/a&gt;) &lt;strong&gt;Default type methods to &lt;code&gt;static&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;details&gt;
&lt;h4&gt;&lt;a id="user-content-why-8" class="anchor" aria-hidden="true" href="#why-8"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Why?&lt;/h4&gt;
&lt;p&gt;If a method needs to be overridden, the author should opt into that functionality by using the &lt;code&gt;class&lt;/code&gt; keyword instead.&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; WRONG&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;Fruit&lt;/span&gt; {
  &lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;eatFruits&lt;/span&gt;(&lt;span class="pl-en"&gt;_&lt;/span&gt; &lt;span class="pl-smi"&gt;fruits&lt;/span&gt;: [Fruit]) { &lt;span class="pl-k"&gt;...&lt;/span&gt; }
}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; RIGHT&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;Fruit&lt;/span&gt; {
  &lt;span class="pl-k"&gt;static&lt;/span&gt; &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;eatFruits&lt;/span&gt;(&lt;span class="pl-en"&gt;_&lt;/span&gt; &lt;span class="pl-smi"&gt;fruits&lt;/span&gt;: [Fruit]) { &lt;span class="pl-k"&gt;...&lt;/span&gt; }
}&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id="user-content-final-classes-by-default"&gt;&lt;/a&gt;(&lt;a href="#final-classes-by-default"&gt;link&lt;/a&gt;) &lt;strong&gt;Default classes to &lt;code&gt;final&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;details&gt;
&lt;h4&gt;&lt;a id="user-content-why-9" class="anchor" aria-hidden="true" href="#why-9"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Why?&lt;/h4&gt;
&lt;p&gt;If a class needs to be overridden, the author should opt into that functionality by omitting the &lt;code&gt;final&lt;/code&gt; keyword.&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; WRONG&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;SettingsRepository&lt;/span&gt; {
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; ...&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; RIGHT&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;final&lt;/span&gt; &lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;SettingsRepository&lt;/span&gt; {
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; ...&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;}&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id="user-content-switch-never-default"&gt;&lt;/a&gt;(&lt;a href="#switch-never-default"&gt;link&lt;/a&gt;) &lt;strong&gt;Never use the &lt;code&gt;default&lt;/code&gt; case when &lt;code&gt;switch&lt;/code&gt;ing over an enum.&lt;/strong&gt;&lt;/p&gt;
&lt;details&gt;
&lt;h4&gt;&lt;a id="user-content-why-10" class="anchor" aria-hidden="true" href="#why-10"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Why?&lt;/h4&gt;
&lt;p&gt;Enumerating every case requires developers and reviewers have to consider the correctness of every switch statement when new cases are added.&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; WRONG&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;switch&lt;/span&gt; anEnum {
&lt;span class="pl-k"&gt;case&lt;/span&gt; .&lt;span class="pl-smi"&gt;a&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Do something&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;default&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Do something else.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; RIGHT&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;switch&lt;/span&gt; anEnum {
&lt;span class="pl-k"&gt;case&lt;/span&gt; .&lt;span class="pl-smi"&gt;a&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Do something&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;case&lt;/span&gt; .&lt;span class="pl-smi"&gt;b&lt;/span&gt;, .&lt;span class="pl-smi"&gt;c&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Do something else.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;}&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id="user-content-optional-nil-check"&gt;&lt;/a&gt;(&lt;a href="#optional-nil-check"&gt;link&lt;/a&gt;) &lt;strong&gt;Check for nil rather than using optional binding if you don't need to use the value.&lt;/strong&gt; &lt;a href="https://github.com/realm/SwiftLint/blob/master/Rules.md#unused-optional-binding"&gt;&lt;img src="https://camo.githubusercontent.com/0ff29e808c6ccd11b66a84017b89b0c3c72749eb/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f53776966744c696e742d756e757365645f6f7074696f6e616c5f62696e64696e672d3030374138372e737667" alt="SwiftLint: unused_optional_binding" data-canonical-src="https://img.shields.io/badge/SwiftLint-unused_optional_binding-007A87.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;details&gt;
&lt;h4&gt;&lt;a id="user-content-why-11" class="anchor" aria-hidden="true" href="#why-11"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Why?&lt;/h4&gt;
&lt;p&gt;Checking for nil makes it immediately clear what the intent of the statement is. Optional binding is less explicit.&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;var&lt;/span&gt; thing&lt;span class="pl-k"&gt;:&lt;/span&gt; Thing&lt;span class="pl-k"&gt;?&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; WRONG&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;if&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-c1"&gt;_&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; thing {
  &lt;span class="pl-c1"&gt;doThing&lt;/span&gt;()
}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; RIGHT&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;if&lt;/span&gt; thing &lt;span class="pl-k"&gt;!=&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt; {
  &lt;span class="pl-c1"&gt;doThing&lt;/span&gt;()
}&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="#table-of-contents"&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-file-organization" class="anchor" aria-hidden="true" href="#file-organization"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;File Organization&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id="user-content-alphabetize-imports"&gt;&lt;/a&gt;(&lt;a href="#alphabetize-imports"&gt;link&lt;/a&gt;) &lt;strong&gt;Alphabetize module imports at the top of the file a single line below the last line of the header comments. Do not add additional line breaks between import statements.&lt;/strong&gt; &lt;a href="https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#sortedImports"&gt;&lt;img src="https://camo.githubusercontent.com/1fd3158023106234136f616de7aa9df690996ca5/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f5377696674466f726d61742d736f72746564496d706f7274732d3742303035312e737667" alt="SwiftFormat: sortedImports" data-canonical-src="https://img.shields.io/badge/SwiftFormat-sortedImports-7B0051.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;details&gt;
&lt;h4&gt;&lt;a id="user-content-why-12" class="anchor" aria-hidden="true" href="#why-12"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Why?&lt;/h4&gt;
&lt;p&gt;A standard organization method helps engineers more quickly determine which modules a file depends on.&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; WRONG&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;  Copyright Â© 2018 Airbnb. All rights reserved.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;DLSPrimitives&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;Constellation&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;Epoxy&lt;/span&gt;

&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;Foundation&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;RIGHT&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;  Copyright Â© 2018 Airbnb. All rights reserved.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;Constellation&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;DLSPrimitives&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;Epoxy&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;Foundation&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;p&gt;&lt;em&gt;Exception: &lt;code&gt;@testable import&lt;/code&gt; should be grouped after the regular import and separated by an empty line.&lt;/em&gt;&lt;/p&gt;
&lt;details&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; WRONG&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;  Copyright Â© 2018 Airbnb. All rights reserved.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;DLSPrimitives&lt;/span&gt;
&lt;span class="pl-k"&gt;@testable&lt;/span&gt; &lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;Epoxy&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;Foundation&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;Nimble&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;Quick&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;RIGHT&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;  Copyright Â© 2018 Airbnb. All rights reserved.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;DLSPrimitives&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;Foundation&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;Nimble&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;Quick&lt;/span&gt;

&lt;span class="pl-k"&gt;@testable&lt;/span&gt; &lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;Epoxy&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id="user-content-limit-vertical-whitespace"&gt;&lt;/a&gt;(&lt;a href="#limit-vertical-whitespace"&gt;link&lt;/a&gt;) &lt;strong&gt;Limit empty vertical whitespace to one line.&lt;/strong&gt; Favor the following formatting guidelines over whitespace of varying heights to divide files into logical groupings. &lt;a href="https://github.com/realm/SwiftLint/blob/master/Rules.md#vertical-whitespace"&gt;&lt;img src="https://camo.githubusercontent.com/40233b17c1be3bd304dd75d292a95d5f66c6d283/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f53776966744c696e742d766572746963616c5f5f776869746573706163652d3030374138372e737667" alt="SwiftLint: vertical_whitespace" data-canonical-src="https://img.shields.io/badge/SwiftLint-vertical__whitespace-007A87.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id="user-content-newline-at-eof"&gt;&lt;/a&gt;(&lt;a href="#newline-at-eof"&gt;link&lt;/a&gt;) &lt;strong&gt;Files should end in a newline.&lt;/strong&gt; &lt;a href="https://github.com/realm/SwiftLint/blob/master/Rules.md#trailing-newline"&gt;&lt;img src="https://camo.githubusercontent.com/edcf3405c1359684bc000185b527dfd2298ad263/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f53776966744c696e742d747261696c696e675f5f6e65776c696e652d3030374138372e737667" alt="SwiftLint: trailing_newline" data-canonical-src="https://img.shields.io/badge/SwiftLint-trailing__newline-007A87.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="#table-of-contents"&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-objective-c-interoperability" class="anchor" aria-hidden="true" href="#objective-c-interoperability"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Objective-C Interoperability&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id="user-content-prefer-pure-swift-classes"&gt;&lt;/a&gt;(&lt;a href="#prefer-pure-swift-classes"&gt;link&lt;/a&gt;) &lt;strong&gt;Prefer pure Swift classes over subclasses of NSObject.&lt;/strong&gt; If your code needs to be used by some Objective-C code, wrap it to expose the desired functionality. Use &lt;code&gt;@objc&lt;/code&gt; on individual methods and variables as necessary rather than exposing all API on a class to Objective-C via &lt;code&gt;@objcMembers&lt;/code&gt;.&lt;/p&gt;
&lt;details&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;PriceBreakdownViewController&lt;/span&gt; {

  &lt;span class="pl-k"&gt;private&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; acceptButton &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;UIButton&lt;/span&gt;()

  &lt;span class="pl-k"&gt;private&lt;/span&gt; &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;setUpAcceptButton&lt;/span&gt;() {
    acceptButton.&lt;span class="pl-c1"&gt;addTarget&lt;/span&gt;(
      &lt;span class="pl-c1"&gt;self&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;action&lt;/span&gt;: &lt;span class="pl-c1"&gt;#selector&lt;/span&gt;(didTapAcceptButton),
      &lt;span class="pl-c1"&gt;forControlEvents&lt;/span&gt;: .&lt;span class="pl-smi"&gt;TouchUpInside&lt;/span&gt;)
  }

  &lt;span class="pl-k"&gt;@objc&lt;/span&gt;
  &lt;span class="pl-k"&gt;private&lt;/span&gt; &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;didTapAcceptButton&lt;/span&gt;() {
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; ...&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;  }
}&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="#table-of-contents"&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-contributors" class="anchor" aria-hidden="true" href="#contributors"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contributors&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/airbnb/swift/graphs/contributors"&gt;View Contributors&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="#table-of-contents"&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-amendments" class="anchor" aria-hidden="true" href="#amendments"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Amendments&lt;/h2&gt;
&lt;p&gt;We encourage you to fork this guide and change the rules to fit your teamâ€™s style guide. Below, you may list some amendments to the style guide. This allows you to periodically update your style guide without having to deal with merge conflicts.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="#table-of-contents"&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>airbnb</author><guid isPermaLink="false">https://github.com/airbnb/swift</guid><pubDate>Tue, 11 Feb 2020 00:01:00 GMT</pubDate></item></channel></rss>