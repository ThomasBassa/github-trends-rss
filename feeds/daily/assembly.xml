<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>GitHub Trending: Assembly, Today</title><link>https://github.com/trending/assembly?since=daily</link><description>The top repositories on GitHub for assembly, measured daily</description><pubDate>Tue, 24 Dec 2019 01:08:36 GMT</pubDate><lastBuildDate>Tue, 24 Dec 2019 01:08:36 GMT</lastBuildDate><generator>PyRSS2Gen-1.1.0</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><ttl>720</ttl><item><title>kanaka/mal #1 in Assembly, Today</title><link>https://github.com/kanaka/mal</link><description>&lt;p&gt;&lt;i&gt;mal - Make a Lisp&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-mal---make-a-lisp" class="anchor" aria-hidden="true" href="#mal---make-a-lisp"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;mal - Make a Lisp&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://travis-ci.org/kanaka/mal" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/28d41556cf726e46c06fc2d472dc0b20d1ac413d/68747470733a2f2f7472617669732d63692e6f72672f6b616e616b612f6d616c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/kanaka/mal.svg?branch=master" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-description" class="anchor" aria-hidden="true" href="#description"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Description&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;1. Mal is a Clojure inspired Lisp interpreter&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. Mal is implemented in 80 languages (83 different implementations and 103 runtime modes)&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Language&lt;/th&gt;
&lt;th&gt;Creator&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#ada"&gt;Ada&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/zmower"&gt;Chris Moore&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#ada2"&gt;Ada #2&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/asarhaddon"&gt;Nicolas Boulenguez&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#gnu-awk"&gt;GNU Awk&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/kariya-mitsuru"&gt;Miutsuru Kariya&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#bash-4"&gt;Bash 4&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/kanaka"&gt;Joel Martin&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#basic-c64-and-qbasic"&gt;BASIC&lt;/a&gt; (C64 &amp;amp; QBasic)&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/kanaka"&gt;Joel Martin&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#bbc-basic-v"&gt;BBC BASIC V&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/bjh21"&gt;Ben Harris&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#c"&gt;C&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/kanaka"&gt;Joel Martin&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#c-1"&gt;C++&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/sdt"&gt;Stephen Thirlwall&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#c-2"&gt;C#&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/kanaka"&gt;Joel Martin&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#chuck"&gt;ChucK&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/wasamasa"&gt;Vasilij Schneidermann&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#clojure"&gt;Clojure&lt;/a&gt; (Clojure &amp;amp; ClojureScript)&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/kanaka"&gt;Joel Martin&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#coffeescript"&gt;CoffeeScript&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/kanaka"&gt;Joel Martin&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#common-lisp"&gt;Common Lisp&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/iqbalansari"&gt;Iqbal Ansari&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#crystal"&gt;Crystal&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/rhysd"&gt;Linda_pp&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#d"&gt;D&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/dubek"&gt;Dov Murik&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#dart"&gt;Dart&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/hterkelsen"&gt;Harry Terkelsen&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#elixir"&gt;Elixir&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/ekmartin"&gt;Martin Ek&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#elm"&gt;Elm&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/c0deaddict"&gt;Jos van Bakel&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#emacs-lisp"&gt;Emacs Lisp&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/wasamasa"&gt;Vasilij Schneidermann&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#erlang"&gt;Erlang&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/nlfiedler"&gt;Nathan Fiedler&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#es6-ecmascript-2015"&gt;ES6&lt;/a&gt; (ECMAScript 2015)&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/kanaka"&gt;Joel Martin&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#f"&gt;F#&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/pstephens"&gt;Peter Stephens&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#factor"&gt;Factor&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/jordanlewis"&gt;Jordan Lewis&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#fantom"&gt;Fantom&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/dubek"&gt;Dov Murik&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#forth"&gt;Forth&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/chouser"&gt;Chris Houser&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#gnu-guile-21"&gt;GNU Guile&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/NalaGinrut"&gt;Mu Lei&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#gnu-smalltalk"&gt;GNU Smalltalk&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/wasamasa"&gt;Vasilij Schneidermann&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#go"&gt;Go&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/kanaka"&gt;Joel Martin&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#groovy"&gt;Groovy&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/kanaka"&gt;Joel Martin&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#haskell"&gt;Haskell&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/kanaka"&gt;Joel Martin&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#haxe-neko-python-c-and-javascript"&gt;Haxe&lt;/a&gt; (Neko, Python, C++, &amp;amp; JS)&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/kanaka"&gt;Joel Martin&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#hy"&gt;Hy&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/kanaka"&gt;Joel Martin&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#io"&gt;Io&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/dubek"&gt;Dov Murik&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#java-17"&gt;Java&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/kanaka"&gt;Joel Martin&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#javascriptnode"&gt;JavaScript&lt;/a&gt; (&lt;a href="http://kanaka.github.io/mal" rel="nofollow"&gt;Demo&lt;/a&gt;)&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/kanaka"&gt;Joel Martin&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#julia"&gt;Julia&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/kanaka"&gt;Joel Martin&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#kotlin"&gt;Kotlin&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/ivern"&gt;Javier Fernandez-Ivern&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#livescript"&gt;LiveScript&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/c0deaddict"&gt;Jos van Bakel&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#logo"&gt;Logo&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/dubek"&gt;Dov Murik&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#lua"&gt;Lua&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/kanaka"&gt;Joel Martin&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#gnu-make-381"&gt;GNU Make&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/kanaka"&gt;Joel Martin&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#mal"&gt;mal itself&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/kanaka"&gt;Joel Martin&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#matlab-gnu-octave-and-matlab"&gt;MATLAB&lt;/a&gt; (GNU Octave &amp;amp; MATLAB)&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/kanaka"&gt;Joel Martin&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#minimal"&gt;miniMAL&lt;/a&gt; (&lt;a href="https://github.com/kanaka/miniMAL"&gt;Repo&lt;/a&gt;, &lt;a href="https://kanaka.github.io/miniMAL/" rel="nofollow"&gt;Demo&lt;/a&gt;)&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/kanaka"&gt;Joel Martin&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#nasm"&gt;NASM&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/bendudson"&gt;Ben Dudson&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#nim-0170"&gt;Nim&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/def-"&gt;Dennis Felsing&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#object-pascal"&gt;Object Pascal&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/kanaka"&gt;Joel Martin&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#objective-c"&gt;Objective C&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/kanaka"&gt;Joel Martin&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#ocaml-4010"&gt;OCaml&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/chouser"&gt;Chris Houser&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#perl-5"&gt;Perl&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/kanaka"&gt;Joel Martin&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#perl-6"&gt;Perl 6&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/hinrik"&gt;Hinrik Örn Sigurðsson&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#php-53"&gt;PHP&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/kanaka"&gt;Joel Martin&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#picolisp"&gt;Picolisp&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/wasamasa"&gt;Vasilij Schneidermann&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#pike"&gt;Pike&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/dubek"&gt;Dov Murik&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#plpgsql-postgresql-sql-procedural-language"&gt;PL/pgSQL&lt;/a&gt; (PostgreSQL)&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/kanaka"&gt;Joel Martin&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#plsql-oracle-sql-procedural-language"&gt;PL/SQL&lt;/a&gt; (Oracle)&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/kanaka"&gt;Joel Martin&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#postscript-level-23"&gt;PostScript&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/kanaka"&gt;Joel Martin&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#powershell"&gt;PowerShell&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/kanaka"&gt;Joel Martin&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#python-2x-and-3x"&gt;Python&lt;/a&gt; (2.X &amp;amp; 3.X)&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/kanaka"&gt;Joel Martin&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#python2-3x"&gt;Python #2&lt;/a&gt; (3.X)&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/epylar"&gt;Gavin Lewis&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#rpython"&gt;RPython&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/kanaka"&gt;Joel Martin&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#r"&gt;R&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/kanaka"&gt;Joel Martin&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#racket-53"&gt;Racket&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/kanaka"&gt;Joel Martin&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#rexx"&gt;Rexx&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/dubek"&gt;Dov Murik&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#ruby-19"&gt;Ruby&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/kanaka"&gt;Joel Martin&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#rust-138"&gt;Rust&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/kanaka"&gt;Joel Martin&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#scala"&gt;Scala&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/kanaka"&gt;Joel Martin&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#scheme-r7rs"&gt;Scheme (R7RS)&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/wasamasa"&gt;Vasilij Schneidermann&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#skew"&gt;Skew&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/dubek"&gt;Dov Murik&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#swift"&gt;Swift 2&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/keith-rollin"&gt;Keith Rollin&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#swift-3"&gt;Swift 3&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/kanaka"&gt;Joel Martin&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#swift-4"&gt;Swift 4&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/LispLY"&gt;陆遥&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#swift-5"&gt;Swift 5&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/MontakOleg"&gt;Oleg Montak&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#tcl-86"&gt;Tcl&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/dubek"&gt;Dov Murik&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#typescript"&gt;TypeScript&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/vvakame"&gt;Masahiro Wakame&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#vala"&gt;Vala&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/sgtatham"&gt;Simon Tatham&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#vhdl"&gt;VHDL&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/dubek"&gt;Dov Murik&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#vimscript"&gt;Vimscript&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/dubek"&gt;Dov Murik&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#visual-basicnet"&gt;Visual Basic.NET&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/kanaka"&gt;Joel Martin&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#webassembly-wasm"&gt;WebAssembly&lt;/a&gt; (wasm)&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/kanaka"&gt;Joel Martin&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#wren"&gt;Wren&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/dubek"&gt;Dov Murik&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#yorick"&gt;Yorick&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/dubek"&gt;Dov Murik&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#zig"&gt;Zig&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/rjtobin"&gt;Josh Tobin&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;3. Mal is a learning tool&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Each implementation of mal is separated into
11 incremental, self-contained (and testable) steps that demonstrate
core concepts of Lisp. The last step is capable of self-hosting
(running the mal implementation of mal). See the &lt;a href="process/guide.md"&gt;make-a-lisp process
guide&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The make-a-lisp steps are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="process/guide.md#step0"&gt;step0_repl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="process/guide.md#step1"&gt;step1_read_print&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="process/guide.md#step2"&gt;step2_eval&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="process/guide.md#step3"&gt;step3_env&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="process/guide.md#step4"&gt;step4_if_fn_do&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="process/guide.md#step5"&gt;step5_tco&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="process/guide.md#step6"&gt;step6_file&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="process/guide.md#step7"&gt;step7_quote&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="process/guide.md#step8"&gt;step8_macros&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="process/guide.md#step9"&gt;step9_try&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="process/guide.md#stepA"&gt;stepA_mal&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Each make-a-lisp step has an associated architectural diagram. That elements
that are new for that step are highlighted in red.
Here is the final diagram for &lt;a href="process/guide.md#stepA"&gt;step A&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="process/stepA_mal.png"&gt;&lt;img src="process/stepA_mal.png" alt="stepA_mal architecture" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you are interested in creating a mal implementation (or just
interested in using mal for something), please drop by the #mal
channel on freenode. In addition to the &lt;a href="process/guide.md"&gt;make-a-lisp process
guide&lt;/a&gt; there is also a &lt;a href="docs/FAQ.md"&gt;mal/make-a-lisp
FAQ&lt;/a&gt; where I attempt to answer some common questions.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-presentations" class="anchor" aria-hidden="true" href="#presentations"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Presentations&lt;/h2&gt;
&lt;p&gt;Mal was presented publicly for the first time in a lightning talk at
Clojure West 2014 (unfortunately there is no video). See
examples/clojurewest2014.mal for the presentation that was given at the
conference (yes, the presentation is a mal program).&lt;/p&gt;
&lt;p&gt;At Midwest.io 2015, Joel Martin gave a presentation on Mal titled
"Achievement Unlocked: A Better Path to Language Learning".
&lt;a href="https://www.youtube.com/watch?v=lgyOAiRtZGw" rel="nofollow"&gt;Video&lt;/a&gt;,
&lt;a href="http://kanaka.github.io/midwest.io.mal/" rel="nofollow"&gt;Slides&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;More recently Joel gave a presentation on "Make Your Own Lisp Interpreter
in 10 Incremental Steps" at LambdaConf 2016:
&lt;a href="https://www.youtube.com/watch?v=jVhupfthTEk" rel="nofollow"&gt;Part 1&lt;/a&gt;,
&lt;a href="https://www.youtube.com/watch?v=X5OQBMGpaTU" rel="nofollow"&gt;Part 2&lt;/a&gt;,
&lt;a href="https://www.youtube.com/watch?v=6mARZzGgX4U" rel="nofollow"&gt;Part 3&lt;/a&gt;,
&lt;a href="https://www.youtube.com/watch?v=dCO1SYR5kDU" rel="nofollow"&gt;Part 4&lt;/a&gt;,
&lt;a href="http://kanaka.github.io/lambdaconf/" rel="nofollow"&gt;Slides&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-buildingrunning-implementations" class="anchor" aria-hidden="true" href="#buildingrunning-implementations"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Building/running implementations&lt;/h2&gt;
&lt;p&gt;The simplest way to run any given implementation is to use docker.
Every implementation has a docker image pre-built with language
dependencies installed. You can launch the REPL using a convenient
target in the top level Makefile (where IMPL is the implementation
directory name and stepX is the step to run):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;make DOCKERIZE=1 "repl^IMPL^stepX"
    # OR stepA is the default step:
make DOCKERIZE=1 "repl^IMPL"
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;a id="user-content-external-implementations" class="anchor" aria-hidden="true" href="#external-implementations"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;External Implementations&lt;/h2&gt;
&lt;p&gt;The following implementations are maintained as separate projects:&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-holyc" class="anchor" aria-hidden="true" href="#holyc"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;HolyC&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/bagnalla/holyc_mal"&gt;by Alexander Bagnalla&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-rust" class="anchor" aria-hidden="true" href="#rust"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Rust&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/seven1m/mal-rust"&gt;by Tim Morgan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/vi/mal-rust-vi"&gt;by vi&lt;/a&gt; - using &lt;a href="https://pest.rs/" rel="nofollow"&gt;Pest&lt;/a&gt; grammar, not using typical Mal infrastructure (cargo-ized steps and built-in converted tests).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-other-mal-projects" class="anchor" aria-hidden="true" href="#other-mal-projects"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Other mal Projects&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dubek/malc"&gt;malc&lt;/a&gt; - Mal (Make A Lisp) compiler. Compiles a Mal program to LLVM assembly language, then binary.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/seven1m/malcc"&gt;malcc&lt;/a&gt; - malcc is an incremental compiler implementation for the Mal language. It uses the Tiny C Compiler as the compiler backend and has full support for the Mal language, including macros, tail-call elimination, and even run-time eval. &lt;a href="https://mpov.timmorgan.org/i-built-a-lisp-compiler/" rel="nofollow"&gt;"I Built a Lisp Compiler"&lt;/a&gt; post about the process.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/chr15m/frock"&gt;frock&lt;/a&gt; - Clojure-flavoured PHP. Uses mal/php to run programs.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/chr15m/flk"&gt;flk&lt;/a&gt; - A LISP that runs wherever Bash is&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-implementation-details" class="anchor" aria-hidden="true" href="#implementation-details"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Implementation Details&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-ada" class="anchor" aria-hidden="true" href="#ada"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Ada&lt;/h3&gt;
&lt;p&gt;The Ada implementation was developed with GNAT 4.9 on debian. It also
compiles unchanged on windows if you have windows versions of git,
GNAT and (optionally) make.  There are no external dependencies
(readline not implemented).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd ada
make
./stepX_YYY
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-ada2" class="anchor" aria-hidden="true" href="#ada2"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Ada.2&lt;/h3&gt;
&lt;p&gt;The second Ada implementation was developed with GNAT 8 and links with
the GNU readline library.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd ada
make
./stepX_YYY
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-gnu-awk" class="anchor" aria-hidden="true" href="#gnu-awk"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;GNU awk&lt;/h3&gt;
&lt;p&gt;The GNU awk implementation of mal has been tested with GNU awk 4.1.1.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd gawk
gawk -O -f stepX_YYY.awk
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-bash-4" class="anchor" aria-hidden="true" href="#bash-4"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Bash 4&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;cd bash
bash stepX_YYY.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-basic-c64-and-qbasic" class="anchor" aria-hidden="true" href="#basic-c64-and-qbasic"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;BASIC (C64 and QBasic)&lt;/h3&gt;
&lt;p&gt;The BASIC implementation uses a preprocessor that can generate BASIC
code that is compatible with both C64 BASIC (CBM v2) and QBasic. The
C64 mode has been tested with
&lt;a href="https://github.com/kanaka/cbmbasic"&gt;cbmbasic&lt;/a&gt; (the patched version is
currently required to fix issues with line input) and the QBasic mode
has been tested with &lt;a href="http://www.qb64.net/" rel="nofollow"&gt;qb64&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Generate C64 code and run it using cbmbasic:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd basic
make stepX_YYY.bas
STEP=stepX_YYY ./run
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Generate QBasic code and load it into qb64:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd basic
make MODE=qbasic stepX_YYY.bas
./qb64 stepX_YYY.bas
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Thanks to &lt;a href="https://github.com/sjsyrek"&gt;Steven Syrek&lt;/a&gt; for the original
inspiration for this implementation.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-bbc-basic-v" class="anchor" aria-hidden="true" href="#bbc-basic-v"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;BBC BASIC V&lt;/h3&gt;
&lt;p&gt;The BBC BASIC V implementation can run in the Brandy interpreter:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd bbc-basic
brandy -quit stepX_YYY.bbc
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or in ARM BBC BASIC V under RISC OS 3 or later:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;*Dir bbc-basic.riscos
*Run setup
*Run stepX_YYY
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-c" class="anchor" aria-hidden="true" href="#c"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;C&lt;/h3&gt;
&lt;p&gt;The C implementation of mal requires the following libraries (lib and
header packages): glib, libffi6, libgc, and either the libedit or GNU readline
library.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd c
make
./stepX_YYY
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-c-1" class="anchor" aria-hidden="true" href="#c-1"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;C++&lt;/h3&gt;
&lt;p&gt;The C++ implementation of mal requires g++-4.9 or clang++-3.5 and
a readline compatible library to build. See the &lt;code&gt;cpp/README.md&lt;/code&gt; for
more details:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd cpp
make
    # OR
make CXX=clang++-3.5
./stepX_YYY
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-c-2" class="anchor" aria-hidden="true" href="#c-2"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;C#&lt;/h3&gt;
&lt;p&gt;The C# implementation of mal has been tested on Linux using the Mono
C# compiler (mcs) and the Mono runtime (version 2.10.8.1). Both are
required to build and run the C# implementation.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd cs
make
mono ./stepX_YYY.exe
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-chuck" class="anchor" aria-hidden="true" href="#chuck"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;ChucK&lt;/h3&gt;
&lt;p&gt;The ChucK implementation has been tested with ChucK 1.3.5.2.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd chuck
./run
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-clojure" class="anchor" aria-hidden="true" href="#clojure"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Clojure&lt;/h3&gt;
&lt;p&gt;For the most part the Clojure implementation requires Clojure 1.5,
however, to pass all tests, Clojure 1.8.0-RC4 is required.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd clojure
lein with-profile +stepX trampoline run
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-coffeescript" class="anchor" aria-hidden="true" href="#coffeescript"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;CoffeeScript&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;sudo npm install -g coffee-script
cd coffee
coffee ./stepX_YYY
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-common-lisp" class="anchor" aria-hidden="true" href="#common-lisp"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Common Lisp&lt;/h3&gt;
&lt;p&gt;The implementation has been tested with SBCL, CCL, CMUCL, GNU CLISP, ECL and
Allegro CL on Ubuntu 16.04 and Ubuntu 12.04, see
the &lt;a href="common-lisp/README.org"&gt;README&lt;/a&gt; for more details. Provided you have the
dependencies mentioned installed, do the following to run the implementation&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd common-lisp
make
./run
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-crystal" class="anchor" aria-hidden="true" href="#crystal"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Crystal&lt;/h3&gt;
&lt;p&gt;The Crystal implementation of mal has been tested with Crystal 0.26.1.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd crystal
crystal run ./stepX_YYY.cr
    # OR
make   # needed to run tests
./stepX_YYY
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-d" class="anchor" aria-hidden="true" href="#d"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;D&lt;/h3&gt;
&lt;p&gt;The D implementation of mal was tested with GDC 4.8.  It requires the GNU
readline library.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd d
make
./stepX_YYY
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-dart" class="anchor" aria-hidden="true" href="#dart"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Dart&lt;/h3&gt;
&lt;p&gt;The Dart implementation has been tested with Dart 1.20.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd dart
dart ./stepX_YYY
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-emacs-lisp" class="anchor" aria-hidden="true" href="#emacs-lisp"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Emacs Lisp&lt;/h3&gt;
&lt;p&gt;The Emacs Lisp implementation of mal has been tested with Emacs 24.3
and 24.5.  While there is very basic readline editing (&lt;code&gt;&amp;lt;backspace&amp;gt;&lt;/code&gt;
and &lt;code&gt;C-d&lt;/code&gt; work, &lt;code&gt;C-c&lt;/code&gt; cancels the process), it is recommended to use
&lt;code&gt;rlwrap&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd elisp
emacs -Q --batch --load stepX_YYY.el
# with full readline support
rlwrap emacs -Q --batch --load stepX_YYY.el
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-elixir" class="anchor" aria-hidden="true" href="#elixir"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Elixir&lt;/h3&gt;
&lt;p&gt;The Elixir implementation of mal has been tested with Elixir 1.0.5.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd elixir
mix stepX_YYY
# Or with readline/line editing functionality:
iex -S mix stepX_YYY
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-elm" class="anchor" aria-hidden="true" href="#elm"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Elm&lt;/h3&gt;
&lt;p&gt;The Elm implementation of mal has been tested with Elm 0.18.0&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd elm
make stepX_YYY.js
STEP=stepX_YYY ./run
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-erlang" class="anchor" aria-hidden="true" href="#erlang"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Erlang&lt;/h3&gt;
&lt;p&gt;The Erlang implementation of mal requires &lt;a href="http://www.erlang.org/download.html" rel="nofollow"&gt;Erlang/OTP R17&lt;/a&gt;
and &lt;a href="https://github.com/rebar/rebar"&gt;rebar&lt;/a&gt; to build.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd erlang
make
    # OR
MAL_STEP=stepX_YYY rebar compile escriptize # build individual step
./stepX_YYY
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-es6-ecmascript-2015" class="anchor" aria-hidden="true" href="#es6-ecmascript-2015"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;ES6 (ECMAScript 2015)&lt;/h3&gt;
&lt;p&gt;The ES6 / ECMAScript 2015 implementation uses the
&lt;a href="https://babeljs.io" rel="nofollow"&gt;babel&lt;/a&gt; compiler to generate ES5 compatible
JavaScript. The generated code has been tested with Node 0.12.4.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd es6
make
node build/stepX_YYY.js
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-f" class="anchor" aria-hidden="true" href="#f"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;F#&lt;/h3&gt;
&lt;p&gt;The F# implementation of mal has been tested on Linux using the Mono
F# compiler (fsharpc) and the Mono runtime (version 3.12.1). The mono C#
compiler (mcs) is also necessary to compile the readline dependency. All are
required to build and run the F# implementation.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd fsharp
make
mono ./stepX_YYY.exe
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-factor" class="anchor" aria-hidden="true" href="#factor"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Factor&lt;/h3&gt;
&lt;p&gt;The Factor implementation of mal has been tested with Factor 0.97
(&lt;a href="http://factorcode.org" rel="nofollow"&gt;factorcode.org&lt;/a&gt;).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd factor
FACTOR_ROOTS=. factor -run=stepX_YYY
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-fantom" class="anchor" aria-hidden="true" href="#fantom"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Fantom&lt;/h3&gt;
&lt;p&gt;The Fantom implementation of mal has been tested with Fantom 1.0.70.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd fantom
make lib/fan/stepX_YYY.pod
STEP=stepX_YYY ./run
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-forth" class="anchor" aria-hidden="true" href="#forth"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Forth&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;cd forth
gforth stepX_YYY.fs
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-gnu-guile-21" class="anchor" aria-hidden="true" href="#gnu-guile-21"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;GNU Guile 2.1+&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;cd guile
guile -L ./ stepX_YYY.scm
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-gnu-smalltalk" class="anchor" aria-hidden="true" href="#gnu-smalltalk"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;GNU Smalltalk&lt;/h3&gt;
&lt;p&gt;The Smalltalk implementation of mal has been tested with GNU Smalltalk 3.2.91.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd gnu-smalltalk
./run
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-go" class="anchor" aria-hidden="true" href="#go"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Go&lt;/h3&gt;
&lt;p&gt;The Go implementation of mal requires that go is installed on on the
path. The implementation has been tested with Go 1.3.1.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd go
make
./stepX_YYY
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-groovy" class="anchor" aria-hidden="true" href="#groovy"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Groovy&lt;/h3&gt;
&lt;p&gt;The Groovy implementation of mal requires Groovy to run and has been
tested with Groovy 1.8.6.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd groovy
make
groovy ./stepX_YYY.groovy
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-haskell" class="anchor" aria-hidden="true" href="#haskell"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Haskell&lt;/h3&gt;
&lt;p&gt;The Haskell implementation requires the ghc compiler version 7.10.1 or
later and also the Haskell parsec and readline (or editline) packages.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd haskell
make
./stepX_YYY
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-haxe-neko-python-c-and-javascript" class="anchor" aria-hidden="true" href="#haxe-neko-python-c-and-javascript"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Haxe (Neko, Python, C++ and JavaScript)&lt;/h3&gt;
&lt;p&gt;The Haxe implementation of mal requires Haxe version 3.2 to compile.
Four different Haxe targets are supported: Neko, Python, C++, and
JavaScript.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd haxe
# Neko
make all-neko
neko ./stepX_YYY.n
# Python
make all-python
python3 ./stepX_YYY.py
# C++
make all-cpp
./cpp/stepX_YYY
# JavaScript
make all-js
node ./stepX_YYY.js
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-hy" class="anchor" aria-hidden="true" href="#hy"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Hy&lt;/h3&gt;
&lt;p&gt;The Hy implementation of mal has been tested with Hy 0.13.0.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd hy
./stepX_YYY.hy
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-io" class="anchor" aria-hidden="true" href="#io"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Io&lt;/h3&gt;
&lt;p&gt;The Io implementation of mal has been tested with Io version 20110905.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd io
io ./stepX_YYY.io
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-java-17" class="anchor" aria-hidden="true" href="#java-17"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Java 1.7&lt;/h3&gt;
&lt;p&gt;The Java implementation of mal requires maven2 to build.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd java
mvn compile
mvn -quiet exec:java -Dexec.mainClass=mal.stepX_YYY
    # OR
mvn -quiet exec:java -Dexec.mainClass=mal.stepX_YYY -Dexec.args="CMDLINE_ARGS"
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-javascriptnode" class="anchor" aria-hidden="true" href="#javascriptnode"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;JavaScript/Node&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;cd js
npm install
node stepX_YYY.js
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-julia" class="anchor" aria-hidden="true" href="#julia"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Julia&lt;/h3&gt;
&lt;p&gt;The Julia implementation of mal requires Julia 0.4.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd julia
julia stepX_YYY.jl
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-kotlin" class="anchor" aria-hidden="true" href="#kotlin"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Kotlin&lt;/h3&gt;
&lt;p&gt;The Kotlin implementation of mal has been tested with Kotlin 1.0.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd kotlin
make
java -jar stepX_YYY.jar
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-livescript" class="anchor" aria-hidden="true" href="#livescript"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;LiveScript&lt;/h3&gt;
&lt;p&gt;The LiveScript implementation of mal has been tested with LiveScript 1.5.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd livescript
make
node_modules/.bin/lsc stepX_YYY.ls
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-logo" class="anchor" aria-hidden="true" href="#logo"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Logo&lt;/h3&gt;
&lt;p&gt;The Logo implementation of mal has been tested with UCBLogo 6.0.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd logo
logo stepX_YYY.lg
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-lua" class="anchor" aria-hidden="true" href="#lua"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Lua&lt;/h3&gt;
&lt;p&gt;The Lua implementation of mal has been tested with Lua 5.2. The
implementation requires that luarocks and the lua-rex-pcre library
are installed.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd lua
make  # to build and link linenoise.so
./stepX_YYY.lua
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-mal" class="anchor" aria-hidden="true" href="#mal"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Mal&lt;/h3&gt;
&lt;p&gt;Running the mal implementation of mal involves running stepA of one of
the other implementations and passing the mal step to run as a command
line argument.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd IMPL
IMPL_STEPA_CMD ../mal/stepX_YYY.mal

&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-gnu-make-381" class="anchor" aria-hidden="true" href="#gnu-make-381"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;GNU Make 3.81&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;cd make
make -f stepX_YYY.mk
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-nasm" class="anchor" aria-hidden="true" href="#nasm"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;NASM&lt;/h3&gt;
&lt;p&gt;The NASM implementation of mal is written for x86-64 Linux, and has been tested
with Linux 3.16.0-4-amd64 and NASM version 2.11.05.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd nasm
make
./stepX_YYY
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-nim-0170" class="anchor" aria-hidden="true" href="#nim-0170"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Nim 0.17.0&lt;/h3&gt;
&lt;p&gt;The Nim implementation of mal has been tested with Nim 0.17.0.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd nim
make
  # OR
nimble build
./stepX_YYY
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-object-pascal" class="anchor" aria-hidden="true" href="#object-pascal"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Object Pascal&lt;/h3&gt;
&lt;p&gt;The Object Pascal implementation of mal has been built and tested on
Linux using the Free Pascal compiler version 2.6.2 and 2.6.4.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd objpascal
make
./stepX_YYY
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-objective-c" class="anchor" aria-hidden="true" href="#objective-c"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Objective C&lt;/h3&gt;
&lt;p&gt;The Objective C implementation of mal has been built and tested on
Linux using clang/LLVM 3.6. It has also been built and tested on OS
X using XCode 7.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd objc
make
./stepX_YYY
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-ocaml-4010" class="anchor" aria-hidden="true" href="#ocaml-4010"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;OCaml 4.01.0&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;cd ocaml
make
./stepX_YYY
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-matlab-gnu-octave-and-matlab" class="anchor" aria-hidden="true" href="#matlab-gnu-octave-and-matlab"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;MATLAB (GNU Octave and MATLAB)&lt;/h3&gt;
&lt;p&gt;The MatLab implementation has been tested with GNU Octave 4.2.1.
It has also been tested with MATLAB version R2014a on Linux. Note that
MATLAB is a commercial product.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd matlab
./stepX_YYY
octave -q --no-gui --no-history --eval "stepX_YYY();quit;"
matlab -nodisplay -nosplash -nodesktop -nojvm -r "stepX_YYY();quit;"
    # OR with command line arguments
octave -q --no-gui --no-history --eval "stepX_YYY('arg1','arg2');quit;"
matlab -nodisplay -nosplash -nodesktop -nojvm -r "stepX_YYY('arg1','arg2');quit;"
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-minimal" class="anchor" aria-hidden="true" href="#minimal"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;miniMAL&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/kanaka/miniMAL"&gt;miniMAL&lt;/a&gt; is small Lisp interpreter
implemented in less than 1024 bytes of JavaScript. To run the miniMAL
implementation of mal you need to download/install the miniMAL
interpreter (which requires Node.js).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd miniMAL
# Download miniMAL and dependencies
npm install
export PATH=`pwd`/node_modules/minimal-lisp/:$PATH
# Now run mal implementation in miniMAL
miniMAL ./stepX_YYY
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-perl-5" class="anchor" aria-hidden="true" href="#perl-5"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Perl 5&lt;/h3&gt;
&lt;p&gt;The Perl 5 implementation should work with perl 5.19.3 and later.&lt;/p&gt;
&lt;p&gt;For readline line editing support, install Term::ReadLine::Perl or
Term::ReadLine::Gnu from CPAN.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd perl
perl stepX_YYY.pl
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-perl-6" class="anchor" aria-hidden="true" href="#perl-6"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Perl 6&lt;/h3&gt;
&lt;p&gt;The Perl 6 implementation was tested on Rakudo Perl 6 2016.04.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd perl6
perl6 stepX_YYY.pl
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-php-53" class="anchor" aria-hidden="true" href="#php-53"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;PHP 5.3&lt;/h3&gt;
&lt;p&gt;The PHP implementation of mal requires the php command line interface
to run.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd php
php stepX_YYY.php
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-picolisp" class="anchor" aria-hidden="true" href="#picolisp"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Picolisp&lt;/h3&gt;
&lt;p&gt;The Picolisp implementation requires libreadline and Picolisp 3.1.11
or later.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd picolisp
./run
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-pike" class="anchor" aria-hidden="true" href="#pike"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Pike&lt;/h3&gt;
&lt;p&gt;The Pike implementation was tested on Pike 8.0.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd pike
pike stepX_YYY.pike
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-plpgsql-postgresql-sql-procedural-language" class="anchor" aria-hidden="true" href="#plpgsql-postgresql-sql-procedural-language"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;PL/pgSQL (PostgreSQL SQL Procedural Language)&lt;/h3&gt;
&lt;p&gt;The PL/pgSQL implementation of mal requires a running PostgreSQL server
(the "kanaka/mal-test-plpgsql" docker image automatically starts
a PostgreSQL server). The implementation connects to the PostgreSQL server
and create a database named "mal" to store tables and stored
procedures. The wrapper script uses the psql command to connect to the
server and defaults to the user "postgres" but this can be overridden
with the PSQL_USER environment variable. A password can be specified
using the PGPASSWORD environment variable. The implementation has been
tested with PostgreSQL 9.4.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd plpgsql
./wrap.sh stepX_YYY.sql
    # OR
PSQL_USER=myuser PGPASSWORD=mypass ./wrap.sh stepX_YYY.sql
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-plsql-oracle-sql-procedural-language" class="anchor" aria-hidden="true" href="#plsql-oracle-sql-procedural-language"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;PL/SQL (Oracle SQL Procedural Language)&lt;/h3&gt;
&lt;p&gt;The PL/SQL implementation of mal requires a running Oracle DB
server (the "kanaka/mal-test-plsql" docker image automatically
starts an Oracle Express server). The implementation connects to the
Oracle server to create types, tables and stored procedures. The
default SQL*Plus logon value (username/password@connect_identifier) is
"system/oracle" but this can be overridden with the ORACLE_LOGON
environment variable. The implementation has been tested with Oracle
Express Edition 11g Release 2. Note that any SQL*Plus connection
warnings (user password expiration, etc) will interfere with the
ability of the wrapper script to communicate with the DB.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd plsql
./wrap.sh stepX_YYY.sql
    # OR
ORACLE_LOGON=myuser/mypass@ORCL ./wrap.sh stepX_YYY.sql
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-postscript-level-23" class="anchor" aria-hidden="true" href="#postscript-level-23"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;PostScript Level 2/3&lt;/h3&gt;
&lt;p&gt;The PostScript implementation of mal requires Ghostscript to run. It
has been tested with Ghostscript 9.10.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd ps
gs -q -dNODISPLAY -I./ stepX_YYY.ps
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-powershell" class="anchor" aria-hidden="true" href="#powershell"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;PowerShell&lt;/h3&gt;
&lt;p&gt;The PowerShell implementation of mal requires the PowerShell script
language. It has been tested with PowerShell 6.0.0 Alpha 9 on Linux.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd powershell
powershell ./stepX_YYY.ps1
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-python-2x-and-3x" class="anchor" aria-hidden="true" href="#python-2x-and-3x"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Python (2.X and 3.X)&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;cd python
python stepX_YYY.py
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-python2-3x" class="anchor" aria-hidden="true" href="#python2-3x"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Python.2 (3.X)&lt;/h3&gt;
&lt;p&gt;The second Python implementation makes heavy use of type annotations and uses the Arpeggio parser library.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Recommended: do these steps in a Python virtual environment.
pip3 install Arpeggio==1.9.0
python3 stepX_YYY.py
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-rpython" class="anchor" aria-hidden="true" href="#rpython"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;RPython&lt;/h3&gt;
&lt;p&gt;You must have &lt;a href="https://rpython.readthedocs.org/" rel="nofollow"&gt;rpython&lt;/a&gt; on your path
(included with &lt;a href="https://bitbucket.org/pypy/pypy/" rel="nofollow"&gt;pypy&lt;/a&gt;).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd rpython
make        # this takes a very long time
./stepX_YYY
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-r" class="anchor" aria-hidden="true" href="#r"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;R&lt;/h3&gt;
&lt;p&gt;The R implementation of mal requires R (r-base-core) to run.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd r
make libs  # to download and build rdyncall
Rscript stepX_YYY.r
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-racket-53" class="anchor" aria-hidden="true" href="#racket-53"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Racket (5.3)&lt;/h3&gt;
&lt;p&gt;The Racket implementation of mal requires the Racket
compiler/interpreter to run.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd racket
./stepX_YYY.rkt
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-rexx" class="anchor" aria-hidden="true" href="#rexx"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Rexx&lt;/h3&gt;
&lt;p&gt;The Rexx implementation of mal has been tested with Regina Rexx 3.6.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd rexx
make
rexx -a ./stepX_YYY.rexxpp
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-ruby-19" class="anchor" aria-hidden="true" href="#ruby-19"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Ruby (1.9+)&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;cd ruby
ruby stepX_YYY.rb
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-rust-138" class="anchor" aria-hidden="true" href="#rust-138"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Rust (1.38+)&lt;/h3&gt;
&lt;p&gt;The rust implementation of mal requires the rust compiler and build
tool (cargo) to build.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd rust
cargo run --release --bin stepX_YYY
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-scala" class="anchor" aria-hidden="true" href="#scala"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Scala&lt;/h3&gt;
&lt;p&gt;Install scala and sbt (&lt;a href="http://www.scala-sbt.org/0.13/tutorial/Installing-sbt-on-Linux.html" rel="nofollow"&gt;http://www.scala-sbt.org/0.13/tutorial/Installing-sbt-on-Linux.html&lt;/a&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd scala
sbt 'run-main stepX_YYY'
    # OR
sbt compile
scala -classpath target/scala*/classes stepX_YYY
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-scheme-r7rs" class="anchor" aria-hidden="true" href="#scheme-r7rs"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Scheme (R7RS)&lt;/h3&gt;
&lt;p&gt;The Scheme implementation of mal has been tested with Chibi-Scheme
0.7.3, Kawa 2.4, Gauche 0.9.5, CHICKEN 4.11.0, Sagittarius 0.8.3,
Cyclone 0.6.3 (Git version) and Foment 0.4 (Git version).  You should
be able to get it running on other conforming R7RS implementations
after figuring out how libraries are loaded and adjusting the
&lt;code&gt;Makefile&lt;/code&gt; and &lt;code&gt;run&lt;/code&gt; script accordingly.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd scheme
make symlinks
# chibi
scheme_MODE=chibi ./run
# kawa
make kawa
scheme_MODE=kawa ./run
# gauche
scheme_MODE=gauche ./run
# chicken
make chicken
scheme_MODE=chicken ./run
# sagittarius
scheme_MODE=sagittarius ./run
# cyclone
make cyclone
scheme_MODE=cyclone ./run
# foment
scheme_MODE=foment ./run
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-skew" class="anchor" aria-hidden="true" href="#skew"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Skew&lt;/h3&gt;
&lt;p&gt;The Skew implementation of mal has been tested with Skew 0.7.42.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd skew
make
node stepX_YYY.js
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-swift" class="anchor" aria-hidden="true" href="#swift"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Swift&lt;/h3&gt;
&lt;p&gt;The Swift implementation of mal requires the Swift 2.0 compiler (XCode
7.0) to build. Older versions will not work due to changes in the
language and standard library.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd swift
make
./stepX_YYY
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-swift-3" class="anchor" aria-hidden="true" href="#swift-3"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Swift 3&lt;/h3&gt;
&lt;p&gt;The Swift 3 implementation of mal requires the Swift 3.0 compiler. It
has been tested with Swift 3 Preview 3.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd swift3
make
./stepX_YYY
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-swift-4" class="anchor" aria-hidden="true" href="#swift-4"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Swift 4&lt;/h3&gt;
&lt;p&gt;The Swift 4 implementation of mal requires the Swift 4.0 compiler. It
has been tested with Swift 4.2.3 release.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd swift4
make
./stepX_YYY
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-swift-5" class="anchor" aria-hidden="true" href="#swift-5"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Swift 5&lt;/h3&gt;
&lt;p&gt;The Swift 5 implementation of mal requires the Swift 5.0 compiler. It
has been tested with Swift 5.1.1 release.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd swift5
swift run stepX_YYY
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-tcl-86" class="anchor" aria-hidden="true" href="#tcl-86"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tcl 8.6&lt;/h3&gt;
&lt;p&gt;The Tcl implementation of mal requires Tcl 8.6 to run.  For readline line
editing support, install tclreadline.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd tcl
tclsh ./stepX_YYY.tcl
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-typescript" class="anchor" aria-hidden="true" href="#typescript"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TypeScript&lt;/h3&gt;
&lt;p&gt;The TypeScript implementation of mal requires the TypeScript 2.2 compiler.
It has been tested with Node.js v6.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd ts
make
node ./stepX_YYY.js
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-vala" class="anchor" aria-hidden="true" href="#vala"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Vala&lt;/h3&gt;
&lt;p&gt;The Vala implementation of mal has been tested with the Vala 0.40.8
compiler. You will need to install &lt;code&gt;valac&lt;/code&gt; and &lt;code&gt;libreadline-dev&lt;/code&gt; or
equivalent.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd vala
make
./stepX_YYY
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-vhdl" class="anchor" aria-hidden="true" href="#vhdl"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;VHDL&lt;/h3&gt;
&lt;p&gt;The VHDL implementation of mal has been tested with GHDL 0.29.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd vhdl
make
./run_vhdl.sh ./stepX_YYY
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-vimscript" class="anchor" aria-hidden="true" href="#vimscript"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Vimscript&lt;/h3&gt;
&lt;p&gt;The Vimscript implementation of mal requires Vim 8.0 to run.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd vimscript
./run_vimscript.sh ./stepX_YYY.vim
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-visual-basicnet" class="anchor" aria-hidden="true" href="#visual-basicnet"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Visual Basic.NET&lt;/h3&gt;
&lt;p&gt;The VB.NET implementation of mal has been tested on Linux using the Mono
VB compiler (vbnc) and the Mono runtime (version 2.10.8.1). Both are
required to build and run the VB.NET implementation.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd vb
make
mono ./stepX_YYY.exe
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-webassembly-wasm" class="anchor" aria-hidden="true" href="#webassembly-wasm"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;WebAssembly (wasm)&lt;/h3&gt;
&lt;p&gt;The WebAssembly implementation is written in
&lt;a href="https://github.com/kanaka/wam"&gt;Wam&lt;/a&gt; (WebAssembly Macro language) and
runs under several different non-web embeddings (runtimes):
&lt;a href="https://nodejs.org" rel="nofollow"&gt;node&lt;/a&gt;,
&lt;a href="https://github.com/CraneStation/wasmtime"&gt;wasmtime&lt;/a&gt;,
&lt;a href="https://wasmer.io" rel="nofollow"&gt;wasmer&lt;/a&gt;,
&lt;a href="https://github.com/fastly/lucet"&gt;lucet&lt;/a&gt;,
&lt;a href="https://github.com/kanaka/wac"&gt;wax&lt;/a&gt;,
&lt;a href="https://github.com/kanaka/wac"&gt;wace&lt;/a&gt;,
&lt;a href="https://github.com/kanaka/warpy"&gt;warpy&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd wasm
# node
make wasm_MODE=node
./run.js ./stepX_YYY.wasm
# wasmtime
make wasm_MODE=wasmtime
wasmtime --dir=./ --dir=../ --dir=/ ./stepX_YYY.wasm
# wasmer
make wasm_MODE=wasmer
wasmer run --dir=./ --dir=../ --dir=/ ./stepX_YYY.wasm
# lucet
make wasm_MODE=lucet
lucet-wasi --dir=./:./ --dir=../:../ --dir=/:/ ./stepX_YYY.so
# wax
make wasm_MODE=wax
wax ./stepX_YYY.wasm
# wace
make wasm_MODE=wace_libc
wace ./stepX_YYY.wasm
# warpy
make wasm_MODE=warpy
warpy --argv --memory-pages 256 ./stepX_YYY.wasm
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-wren" class="anchor" aria-hidden="true" href="#wren"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Wren&lt;/h3&gt;
&lt;p&gt;The Wren implementation of mal was tested on Wren 0.2.0.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd wren
wren ./stepX_YYY.wren
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-yorick" class="anchor" aria-hidden="true" href="#yorick"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Yorick&lt;/h3&gt;
&lt;p&gt;The Yorick implementation of mal was tested on Yorick 2.2.04.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd yorick
yorick -batch ./stepX_YYY.i
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-zig" class="anchor" aria-hidden="true" href="#zig"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Zig&lt;/h3&gt;
&lt;p&gt;The Zig implementation of mal was tested on Zig 0.5.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd zig
zig build stepX_YYY
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;a id="user-content-running-tests" class="anchor" aria-hidden="true" href="#running-tests"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Running tests&lt;/h2&gt;
&lt;p&gt;The top level Makefile has a number of useful targets to assist with
implementation development and testing. The &lt;code&gt;help&lt;/code&gt; target provides
a list of the targets and options:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;make help
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-functional-tests" class="anchor" aria-hidden="true" href="#functional-tests"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Functional tests&lt;/h3&gt;
&lt;p&gt;The are almost 800 generic functional tests (for all implementations)
in the &lt;code&gt;tests/&lt;/code&gt; directory. Each step has a corresponding test file
containing tests specific to that step. The &lt;code&gt;runtest.py&lt;/code&gt; test harness
launches a Mal step implementation and then feeds the tests one at
a time to the implementation and compares the output/return value to
the expected output/return value.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To run all the tests across all implementations (be prepared to wait):&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;make test
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;To run all tests against a single implementation:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;make "test^IMPL"

# e.g.
make "test^clojure"
make "test^js"
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;To run tests for a single step against all implementations:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;make "test^stepX"

# e.g.
make "test^step2"
make "test^step7"
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;To run tests for a specific step against a single implementation:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;make "test^IMPL^stepX"

# e.g
make "test^ruby^step3"
make "test^ps^step4"
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-self-hosted-functional-tests" class="anchor" aria-hidden="true" href="#self-hosted-functional-tests"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Self-hosted functional tests&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;To run the functional tests in self-hosted mode, you specify &lt;code&gt;mal&lt;/code&gt;
as the test implementation and use the &lt;code&gt;MAL_IMPL&lt;/code&gt; make variable
to change the underlying host language (default is JavaScript):&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;make MAL_IMPL=IMPL "test^mal^step2"

# e.g.
make "test^mal^step2"   # js is default
make MAL_IMPL=ruby "test^mal^step2"
make MAL_IMPL=python "test^mal^step2"
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-starting-the-repl" class="anchor" aria-hidden="true" href="#starting-the-repl"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Starting the REPL&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;To start the REPL of an implementation in a specific step:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;make "repl^IMPL^stepX"

# e.g
make "repl^ruby^step3"
make "repl^ps^step4"
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;If you omit the step, then &lt;code&gt;stepA&lt;/code&gt; is used:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;make "repl^IMPL"

# e.g
make "repl^ruby"
make "repl^ps"
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;To start the REPL of the self-hosted implementation, specify &lt;code&gt;mal&lt;/code&gt; as the
REPL implementation and use the &lt;code&gt;MAL_IMPL&lt;/code&gt; make variable to change the
underlying host language (default is JavaScript):&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;make MAL_IMPL=IMPL "repl^mal^stepX"

# e.g.
make "repl^mal^step2"   # js is default
make MAL_IMPL=ruby "repl^mal^step2"
make MAL_IMPL=python "repl^mal"
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-performance-tests" class="anchor" aria-hidden="true" href="#performance-tests"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Performance tests&lt;/h3&gt;
&lt;p&gt;Warning: These performance tests are neither statistically valid nor
comprehensive; runtime performance is a not a primary goal of mal. If
you draw any serious conclusions from these performance tests, then
please contact me about some amazing oceanfront property in Kansas
that I'm willing to sell you for cheap.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To run performance tests against a single implementation:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;make "perf^IMPL"

# e.g.
make "perf^js"
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;To run performance tests against all implementations:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;make "perf"
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-generating-language-statistics" class="anchor" aria-hidden="true" href="#generating-language-statistics"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Generating language statistics&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;To report line and byte statistics for a single implementation:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;make "stats^IMPL"

# e.g.
make "stats^js"
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;a id="user-content-dockerized-testing" class="anchor" aria-hidden="true" href="#dockerized-testing"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Dockerized testing&lt;/h2&gt;
&lt;p&gt;Every implementation directory contains a Dockerfile to create
a docker image containing all the dependencies for that
implementation. In addition, the top-level Makefile contains support
for running the tests target (and perf, stats, repl, etc) within
a docker container for that implementation by passing &lt;em&gt;"DOCKERIZE=1"&lt;/em&gt;
on the make command line. For example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;make DOCKERIZE=1 "test^js^step3"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Existing implementations already have docker images built and pushed
to the docker registry. However, if
you wish to build or rebuild a docker image locally, the toplevel
Makefile provides a rule for building docker images:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;make "docker-build^IMPL"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Notes&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Docker images are named &lt;em&gt;"kanaka/mal-test-IMPL"&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;JVM-based language implementations (Groovy, Java, Clojure, Scala):
you will probably need to run this command once manually
first &lt;code&gt;make DOCKERIZE=1 "repl^IMPL"&lt;/code&gt; before you can run tests because
runtime dependencies need to be downloaded to avoid the tests timing
out. These dependencies are downloaded to dot-files in the /mal
directory so they will persist between runs.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-license" class="anchor" aria-hidden="true" href="#license"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;License&lt;/h2&gt;
&lt;p&gt;Mal (make-a-lisp) is licensed under the MPL 2.0 (Mozilla Public
License 2.0). See LICENSE.txt for more details.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>kanaka</author><guid isPermaLink="false">https://github.com/kanaka/mal</guid><pubDate>Tue, 24 Dec 2019 00:01:00 GMT</pubDate></item><item><title>dwelch67/raspberrypi #2 in Assembly, Today</title><link>https://github.com/dwelch67/raspberrypi</link><description>&lt;p&gt;&lt;i&gt;Raspberry Pi ARM based bare metal examples&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="" data-path="README"&gt;&lt;div class="plain"&gt;&lt;pre style="white-space: pre-wrap"&gt;
The main directory examples are for the older/est pi1 boards maybe
some attempts at newer boards.  These are retained for legacy reasons
some folks have direct links.  They are still valid for those boards.
The boards directory has the first attempt at solving the too many
boards issue and that is where I recommend you go.  My third string
attempt is I have a raspberrypi-zero and raspberrypi-three repos that
are for those boards specifically.  Little to no verbage though, the
rambling text is mostly in this repo.

--------------

This repo is getting a bit messy starting with the first released to
the public pi and then all that came after.  I want to rework it but
it is going slowly.  Recently started creating directories pi1, piaplus
and so on to target the examples specifically to the different cards.
Again that is slow going.  Likewise this README will be rewritten perhaps
but for now...

--------------

This repo serves as a collection of low level examples.  No operating
system, embedded or low level embedded or deeply embedded or bare metal,
whatever your term is for this.

I am in no way shape or form associated with the raspberry pi organization
nor broadcom.  I just happen to own one (some) and am sharing my
experiences.  The raspberry pi is about education, and I feel bare
metal education is just as important as Python programming.

So I started this years ago when got my first ARM11 based raspberry pi
maybe we call that a raspberry pi 1, I dont know a good term.  But
now there is a growing number of variations.

ARM11 based (BCM2835)
Raspberry Pi B
Raspberry Pi B2
Raspberry Pi A+
Raspberry Pi B+
Raspberry Pi Zero
Cortex-A7 based (BCM2836)
Raspberry Pi 2 B
Cortex-A53 based (BCM2837)
Raspberry Pi 3 B

There is also the compute module but I dont have one of those.

General differences that we care about for these examples.  The amount
of ram varies from board to board.  The peripheral base address is
different between the BCM2835 and BCM2836.  The BCM2835 looks for the
file kernel.img the BCM2836 looks for kernel7.img.  The ARM11 based
Zero is a B with stuff removed and a new layout, but they up/over
clocked the processor from 750MHz to 1000MHz, one led on gpio 16.  The
A+ and B+ they moved the led (or put two) on gpio 35 and 47.  The
raspberry pi 2 is B+ like but with the different chip, supposedly the
BCM2836 is  BCM2835 with the ARM11 core removed and replaced with
the Cortex A7 and for the most part it appears to be.  The raspberry
pi 3 is Cortex A8 based, 64 bit.  And they moved the LED (the leds)
to an i2c gpio expander.

As of this writing I am adding plus and pi2 versions of the examples
as many of them are based on the early/original.  No guarantees I will
do that, just looking at the differences between the blinker01 examples
should show you what to do to convert these yourself.  In some cases
I am intentionally not trying to have one code base build for all
three with ifdefs and such, keep it simple stupid then complicate it
as needed.  The text may say kernel.img but substitute with kernel7.img
as needed.

I still have a number of raspberry pi 2 examples to port, and now a
bunch of examples to port to the raspberry pi 3.  The raspberry pi 3
as of this writing, without a config.txt, is switched to 32 bit
compatibility mode.  See the aarch64 directory for 64 bit ARM examples.

From what we know so far there is a gpu on chip which:

1) boots off of an on chip rom of some sort
2) reads the sd card and looks for additional gpu specific boot files
bootcode.bin and start.elf in the root dir of the first partition
(fat32 formatted, loader.bin no longer used/required)
3) in the same dir it looks for config.txt which you can do things like
change the arm speed, or change the address where to load kernel.img,
and many others
4) it reads kernel.img the arm boot binary file and copies it to memory
5) releases reset on the arm such that it runs from the address where
the kernel.img data was written

The memory is split between the GPU and the ARM, I believe the default
is to split the memory in half.  And there are ways to change that
split (to give the ARM more)(using config.txt).  Not going to worry
about that here.

From the ARMs perspective the kernel.img file is loaded, by default,
to address 0x8000.  (there are ways to change that, not going to worry
about that right now).

Hardware and programming information:

You will want to go here
&lt;a href="http://elinux.org/RPi_Hardware" rel="nofollow"&gt;http://elinux.org/RPi_Hardware&lt;/a&gt;
And the datasheet and schematic.  These are moving targets the above
elinux link has the datasheet and errata which is important.  They
didnt give us a full datasheet for the BCM2836 have to go with the
BCM2835.
You will want to go to
&lt;a href="http://raspberrypi.org" rel="nofollow"&gt;http://raspberrypi.org&lt;/a&gt; and then the forum tab then slide down to
the Bare Metal forum, the first (only) Sticky topic is Bare Metal
Resources.  There are many more links there for good information.
Also go to
&lt;a href="http://infocenter.arm.com" rel="nofollow"&gt;http://infocenter.arm.com&lt;/a&gt; and get the Architectural Reference Manual
and the Techincal Reference Manual for the ARM1176JZF-S (BCM2835)
and/or the Cortex-A7 (BCM2836).

Early in the BCM2835 document you see a memory map.  I am going to
operate based on the middle map, this is how the ARM comes up.  The
left side is the system which we dont have direct access to in that
form, the gpu probably, not the ARM.  The ARM comes up with a memory
space that is basically 0x40000000 bytes in size as it mentions in
the middle chart.  The bottom of this picture shows total system
sdram (memory) and somewhere between zero and the top of ram is a
split between sdram for the ARM on the bottom and a chunk of that
for the VC SDRAM, basically memory for the gpu and memory shared
between the ARM and GPU to allow the ARM to ask the GPU to draw stuff
on the video screen.  256MBytes is 0x10000000, and 512MBytes is
0x20000000.  Some models of raspberry pi have 256MB, newer models have
512MB total ram which is split between the GPU and the ARM.  Assume
the ARM gets at least half of this.  Peripherals (uart, gpio, etc)
are mapped into arm address space at 0x20000000.  When you see
0x7Exxxxxx in the manual replace that with 0x20xxxxxx as your ARM
physical address.  Experimentally I have seen the memory repeats every
0x40000000, read 0x40008000 and you see the data from 0x8000.  From the
Broadcom doc this looks to be giving us access to the memory with
different caching schemes (cached, uncached, etc) depending on which
upper address bits you use.  Most likely to allow more room for RAM
the Raspberry Pi 2 uses a peripheral base address of 0x3Fxxxxxx instead
of the 0x20xxxxxx.

I do not normally zero out .bss or use .data so if you do this to my
examples

int x;
fun()
{
  static int y;
}

dont assume x and y are zero when your program starts. Nor if you do
this

int x=5;
fun()
{
  static int y=7;
}

will x=5 or y=7.

See the bssdata directory for more information, you can most likely
use the linker script to solve the problem for you since .text, .data,
.bss, (.rodata), everything lives in ram.

Nor do I use gcc libraries nor C libraries so you can build most if not
all of my examples using a gcc cross compiler.  Basically it doesnt
matter if you use arm-none-linux-gnueabi or arm-none-eabi.  I have not
looked in a while but formerly codesourcery.com (now a part of Mentor
Graphics) had a free LITE version of their toolchain which was pretty
easy to come by.  An even easier place is here
&lt;a href="https://launchpad.net/gcc-arm-embedded" rel="nofollow"&gt;https://launchpad.net/gcc-arm-embedded&lt;/a&gt;
to get a cross compiler.  Building your own toolchain from gnu sources
(binutils and gcc) is fairly straight forward see my build_gcc
repository for a build script (Linux only but from that you might get
other platforms to build).  And also remember that you can run linux
on the pi and on that it has a native, not cross, gnu toolchain.

As far as we know so far the Raspberry Pi is not "brickable".  Normally
what brickable means is the processor relies on a boot flash and with
that flash it is possible to change/erase it such that the processor will
not boot normally.  Brickable and bricked sometimes excludes things
like jtag or special programming headers.  From the customers perspective
a bricked board is...bricked.  But on return to the vendor they may
have other equipment that is able to recover the board without doing
any soldering, perhaps plugging in jtag or some other cable on pins/pads
they have declared as reserved.  Take apart a tv remote control or
calculator, etc and you may see some holes or pads on the circuit board,
for some of these devices just opening the battery case you have a view
of some of the pcboard.  This is no doubt a programming header.  Long
story short, so far as I know the Raspberry Pi is not brickable because
it boots off of an sd card which we can easily remove and replace
ourselves.  I dont know for sure, a lot more info is out about the
GPU since I started with this, but I assume that there is some GPU code
that boots off of an internal rom, I doubt with two on chip processors
they created pure logic to read the sd card, wade through the filesystem
to find a specific bootcode.bin file, load that into ram and run it.
If that assumption is true is that on chip rom one time programmable
or can it be erased/reprogrammed, and if the latter how lucky do we have
to be with a broken program to erase that?  So I am not 100% sure but
almost 100% sure the Raspberry Pi is not brickable.  This is actually
a big deal for bare metal programming, in particular if it is your first
platform.  With decades of experience I still make mistakes from time
to time and brick a board, never to be recovered.

To use my samples you do not need a huge sd card.  Nor do you need nor
want to download one of the linux images, takes a while to download,
takes a bigger sd card to use, and takes forever to write to the sd card.
I use the firmware from &lt;a href="http://github.com/raspberrypi"&gt;http://github.com/raspberrypi&lt;/a&gt;.  The minimum
configuration you need to get started at this level is:

go to &lt;a href="https://github.com/raspberrypi"&gt;https://github.com/raspberrypi&lt;/a&gt;, you DO NOT need to download
the repo, they have some large files in there you will not need (for
my examples).  go to the firmware directory and then the boot directory.
For each of these files, bootcode.bin and start.elf (NOT kernel.img,
dont need it, too big)(loader.bin is no longer used/required).  Click
on the file name, it will go to another page then click on View Raw and
it will let you download the file.  For reference, I do not use nor
have a config.txt file on my sd card.  I only have the minimum number
of files on the sd card, bootcode.bin, start.elf and either kernel.img
or kernel7.img (or sometimes both).

My examples are basically the kernel.img file.  Not a linux kernel,
just bare metal programs.  Since the GPU bootloader is looking for
that file name, you use that file name.  The kernel.img file is just a
blob that is copied to memory, dont worry about what they named it.

What I do is setup the sd card with a single partition, fat32.  And
copy the above files in the root directory.  bootcode.bin and start.elf.
From there you take .bin files from my examples and place them on the sd
card with the name kernel.img.  It wont take you very long to figure out
this is going to get painful.

1) power off raspi
2) remove sd card
3) insert sd card in reader
4) plug reader into computer
5) mount/wait
6) copy binary file to kernel.img
7) sync/wait
8) unmount
9) insert sd card in raspi
10) power raspi
11) repeat

There are ways to avoid this, one is jtag, which is not as expensive
as it used to be.  It used to be in the thousands of dollars, now it
is under $50 and the software tools are free.  Now the raspi does have
jtag on the arm, getting the jtag connected requires soldering on older
of the older models, but unless you were an early adopter, you dont
need to worry about that all the signals are on the P1 connector. How
to use the jtag and how to hook it up is described later and in
the armjtag sample.

Another method is a bootloader, typically you use a serial port connected
to the target processor.  That processor boots a bootloader program that
in some way, shape, or form allows you to interact with the bootloader
and load programs into memory (that the bootloader is not using itself)
and then the bootloader branches/jumps to your program.  If your program
is still being debugged and you want to try again, you reboot the processor
the bootloader comes up and you can try again without having to move any
sd cards, etc.  The sd card dance above is now replaced with the
bootloader dance:

1) power off raspi
2) power on raspi
3) type command to load and start new program

Or if you solder on a reset button

1) reset raspi
2) type command to load and start new program

I have working bootloader examples.  bootloader05 is currently the last
of the xmodem based ones (that basically take a kernel.img file),
personally I use bootloader07 which takes an intel hex formatted file
which these examples also build.  The .bin file would be used with
bootloader05, the .hex with bootloader07.  But you need more hardware
(no soldering is required).  For those old enough to know what a serial
port is, you CANNOT connect your raspberry pi directly to this port,
you will fry the raspberry pi.  You need some sort of serial port at
3.3V either a level shifter of some sort (transceiver like a MAX232) or
a usb serial port where the signals are 3.3V (dont need to use RS232
just stay at the logic level).  The solution I recommend is a non-solder
solution:

A recent purchase, experimentally white is RX and green is TX, black GND
&lt;a href="http://www.nexuscyber.com/usb-to-ttl-serial-debug-console-cable-for-raspberry-pi" rel="nofollow"&gt;http://www.nexuscyber.com/usb-to-ttl-serial-debug-console-cable-for-raspberry-pi&lt;/a&gt;
Sparkfun has one
&lt;a href="https://www.sparkfun.com/products/12977" rel="nofollow"&gt;https://www.sparkfun.com/products/12977&lt;/a&gt;
As does Adafruit
&lt;a href="https://www.adafruit.com/products/954" rel="nofollow"&gt;https://www.adafruit.com/products/954&lt;/a&gt;
The above, assuming you figure out rx from tx, are all you need.  The
ones below you may need to solder or may need some jumper wires.

&lt;a href="http://www.sparkfun.com/products/9873" rel="nofollow"&gt;http://www.sparkfun.com/products/9873&lt;/a&gt;
plus some male/female wire
&lt;a href="http://www.sparkfun.com/products/9140" rel="nofollow"&gt;http://www.sparkfun.com/products/9140&lt;/a&gt;

Solutions that may involve soldering
&lt;a href="http://www.sparkfun.com/products/718" rel="nofollow"&gt;http://www.sparkfun.com/products/718&lt;/a&gt;
&lt;a href="http://www.sparkfun.com/products/8430" rel="nofollow"&gt;http://www.sparkfun.com/products/8430&lt;/a&gt;

Or this for level shifting to a real com port.
&lt;a href="http://www.sparkfun.com/products/449" rel="nofollow"&gt;http://www.sparkfun.com/products/449&lt;/a&gt;

Or see the pitopi (pi to pi) directory.  This talks about how to take
two raspberry pi's and connect them together.  One being the
host/development platform (a raspberry pi running linux is a native
arm development platform, no need to find/get/build a cross compiler)
the other being the target that runs your bare metal programs.

Lastly and perhaps the best solution IMO, is the FT4232H or FT2232H
mini module from FTDI.  It gives you UART and JTAG for under $30.
See the armjtag directory README for more and you will want some
female/female wire from sparkfun or adafruit or elsewhere
&lt;a href="https://www.sparkfun.com/products/8430" rel="nofollow"&gt;https://www.sparkfun.com/products/8430&lt;/a&gt;
(I use these F/F wires for most projects, buy/bought the 100 pack)

---- connecting to the uart pins ----

On the raspberry pi, the connector with two rows of a bunch of pins is
P1.  Starting at that corner of the board, the outside corner pin is
pin 2.  From pin 2 heading toward the yellow rca connector the pins
are 2, 4, 6, 8, 10.  Pin 6 connect to gnd on the usb to serial board
pin 8 is TX out of the raspi connect that to RX on the usb to serial
board.  Pin 10 is RX into the raspi, connect that to TX on the usb to
serial board.  Careful not to have metal items on the usb to serial
board touch metal items on the raspberry pi (other than the three
connections described).  On your host computer you will want to use
some sort of dumb terminal program, minicom, putty, etc.  Set the
serial port (usb to serial board) to 115200 baud, 8 data bits, no
parity, 1 stop bit.  NO flow control.  With minicom to get no flow
control you normally have to save the config, exit minicom, then
restart minicom and load the config in order for flow control
changes to take effect.  Once you have a saved config you dont have
to mess with it any more.

2  outer corner
4
6  ground
8  TX out
10 RX in

ground is not necessarily needed if both the raspberry pi and the
usb to serial board are powered by the same computer (I recommend
you do that) as they will ideally have the same ground.

Read more about the bootloaders in their local README files.  Likewise
if you interested in jtag see the armjatag README file.  Other than
chewing up a few more GPIO pins, and another thing you have to buy, the
jtag solution is the most powerful and useful.  My typical setup is the
armjtag binary as kernel.img, a usb to jtag board like the amontec
jtag-tiny and a usb to serial using minicom.

Update, amontec is history their website is gone.  But you can
get j-link (or clone) boxes from asia on ebay for around $11, so far
I have tried them with ARM JTAG and ARM SWD.  Very pleased so far.

If you can solder, the A+, B+, Zero and Pi 2 all have a pair of holes
sometimes with the text RUN next to them.  I use buttons like this
&lt;a href="https://www.sparkfun.com/products/97" rel="nofollow"&gt;https://www.sparkfun.com/products/97&lt;/a&gt;
with two of the legs broken off then the others twisted and adjusted
to fit in the holes and soldered down.

As far as these samples go I recommend starting with blinker01 then
follow the discovery of the chip into uart01, etc.

The bssdata and baremetal directories attempt to explain a little
bit about taking control of the gnu toolchain to build bare metal
programs like these examples.  As with any bare metal programmer I have
my ways of doing things and these two directories hopefully will show
you some basics, get you thinking about how these tools really work,
take the fear away from using them, as well as some comments on why
I take the approach I take (not worrying about .bss nor .data).  Since
the raspberry pi is from our perspective RAM based (the GPU loads our
whole binary into memory), we dont have to deal with the things we
would deal with on a FLASH/PROM + RAM system.  This RAM only approach
makes life a lot easier, but leaves out some important bare metal
experiences that you will have to find elsewhere.

-----------
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</description><author>dwelch67</author><guid isPermaLink="false">https://github.com/dwelch67/raspberrypi</guid><pubDate>Tue, 24 Dec 2019 00:02:00 GMT</pubDate></item><item><title>leachim6/hello-world #3 in Assembly, Today</title><link>https://github.com/leachim6/hello-world</link><description>&lt;p&gt;&lt;i&gt;Hello world in every computer language.  Thanks to everyone who contributes to this, make sure to see CONTRIBUTING.md for contribution instructions!&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-hello-world" class="anchor" aria-hidden="true" href="#hello-world"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Hello, World!&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Inspired by &lt;a href="https://helloworldcollection.github.io/" rel="nofollow"&gt;The Hello World Collection&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;&lt;a id="user-content-hello-world-in-every-programming-language" class="anchor" aria-hidden="true" href="#hello-world-in-every-programming-language"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Hello world in every programming language.&lt;/h4&gt;
&lt;p&gt;As I watch the collection expand, this project has blown up more than I ever thought possible.
Thanks to everyone who continues to contribute, new languages are created every day!&lt;/p&gt;
&lt;p&gt;Make sure to see CONTRIBUTING.md for instructions on contributing to the project!&lt;/p&gt;
&lt;p&gt;Spin-Off project smartly suggested and implemented by &lt;a href="https://github.com/zenware"&gt;@zenware&lt;/a&gt;:&lt;br&gt;
Meet &lt;a href="https://github.com/zenware/FizzBuzz"&gt;FizzBuzz&lt;/a&gt;, the evolution of &lt;a href="https://github.com/leachim6/hello-world"&gt;hello-world&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="e/elm.elm"&gt;Hello Html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-this-repository-currently-contains-hello-world-programs-in-the-following-languages" class="anchor" aria-hidden="true" href="#this-repository-currently-contains-hello-world-programs-in-the-following-languages"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;This repository currently contains "Hello World" programs in the following languages:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="%23/0815.0815"&gt;0815&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="%23/1c-enterprise"&gt;1C Enterprise&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="%23/2B.2b"&gt;2B&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="%23/4gl.4gl"&gt;4Gl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="%23/4test"&gt;4Test&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="%23/4thdimension.4dd"&gt;4Thdimension&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="%23/%7EEnglish.ext"&gt;~English&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/abap.abap"&gt;Abap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/abc.abc"&gt;Abc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/ACIDIC.acidic"&gt;Acidic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/acpi"&gt;Acpi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/ACRONYM.acronym"&gt;Acronym&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/acs.acs"&gt;Acs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/actionscript.as"&gt;Actionscript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/actionscript2.as"&gt;Actionscript2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/actionscript3.as"&gt;Actionscript3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/actionscript_flashmx.as"&gt;Actionscript Flashmx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/ada.ada"&gt;Ada&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/advpl"&gt;Advpl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/Aeolbonn.aeo"&gt;Aeolbonn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/aeolbonn.aeolbonn"&gt;Aeolbonn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/agda.agda"&gt;Agda&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/aheui.aheui"&gt;Aheui&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/aime.aime"&gt;Aime&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/aiml.aiml"&gt;Aiml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/ALAGUF.alaguf"&gt;Alaguf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/alda.alda"&gt;Alda&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/algae.algae"&gt;Algae&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/ALGOL-W.algol"&gt;Algol W&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/algol60.algol60"&gt;Algol60&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/algol68.algol68"&gt;Algol68&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/alore.alore"&gt;Alore&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/Amiga-E.amiga-e"&gt;Amiga E&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/amos"&gt;Amos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/android.java"&gt;Android&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/angelscript"&gt;Angelscript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/angular.js"&gt;Angular&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/ante.ante"&gt;Ante&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/AntLang.ant"&gt;Antlang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/apc.apc"&gt;Apc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/Apex.cls"&gt;Apex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/apl.apl"&gt;Apl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/applescript.scpt"&gt;Applescript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/arc.arc"&gt;Arc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/arduino.ino"&gt;Arduino&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/arena.are"&gt;Arena&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/argh.agh"&gt;Argh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/arnoldc.arnoldc"&gt;Arnoldc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/ash.ash"&gt;Ash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/asp.asp"&gt;Asp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/aspectj.aj"&gt;Aspectj&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_6502.asm"&gt;Assembler 6502&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_6502appleII.asm"&gt;Assembler 6502Appleii&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_6502c64.asm"&gt;Assembler 6502C64&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_6809vectrex.asm"&gt;Assembler 6809Vectrex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_8048_videopac.asm"&gt;Assembler 8048 Videopac&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_arm.s"&gt;Assembler Arm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_atari2600.asm"&gt;Assembler Atari2600&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_bootsect.asm"&gt;Assembler Bootsect&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_DCPU16.asm"&gt;Assembler Dcpu16&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_fasm_dos.asm"&gt;Assembler Fasm Dos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_hla.hla"&gt;Assembler Hla&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_ibm360.asm"&gt;Assembler Ibm360&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_intel.asm"&gt;Assembler Intel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_lc-3.asm"&gt;Assembler Lc 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_m68000_amigaos.asm"&gt;Assembler M68000 Amigaos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_masm_dos.asm"&gt;Assembler Masm Dos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_masm_win32.asm"&gt;Assembler Masm Win32&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_masm_win64.asm"&gt;Assembler Masm Win64&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_mips.asm"&gt;Assembler Mips&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_mmix.asm"&gt;Assembler Mmix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_nasm_freebsd.asm"&gt;Assembler Nasm Freebsd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_nasm_linux.asm"&gt;Assembler Nasm Linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_nasm_linux64.asm"&gt;Assembler Nasm Linux64&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_nasm_macho64.asm"&gt;Assembler Nasm Macho64&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_nasm_win32.asm"&gt;Assembler Nasm Win32&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_tasm_dos.asm"&gt;Assembler Tasm Dos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_tms9900_ti99_4a.asm"&gt;Assembler Tms9900 Ti99 4A&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_vax_ultrix.asm"&gt;Assembler Vax Ultrix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_z80_knightos.asm"&gt;Assembler Z80 Knightos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_z80_ti83calculator.asm"&gt;Assembler Z80 Ti83Calculator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_z80_zxspectrum.asm"&gt;Assembler Z80 Zxspectrum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/Attache.%40"&gt;Attache&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/autohotkey.ahk"&gt;Autohotkey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/autoit.au3"&gt;Autoit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/awful.yuk"&gt;Awful&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/awk.awk"&gt;Awk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/README.md"&gt;Readme&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/B.b"&gt;B&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/bash.bash"&gt;Bash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/basic.bas"&gt;Basic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/batch.bat"&gt;Batch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/batsh.batsh"&gt;Batsh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/battlestar.bts"&gt;Battlestar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/BCPL.bcl"&gt;Bcpl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/beatnik.beatnik"&gt;Beatnik&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/befunge.be"&gt;Befunge&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/BennuGD"&gt;Bennugd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/beta.bet"&gt;Beta&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/BIRL.c"&gt;Birl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/BIT.bit"&gt;Bit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/BitBitJump.bbj"&gt;Bitbitjump&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/BlackRum.br"&gt;Blackrum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/BLC.Blc"&gt;Blc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/blitz3d.bb"&gt;Blitz3D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/blub.blub"&gt;Blub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/bolgefuck.bf"&gt;Bolgefuck&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/boo.boo"&gt;Boo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/brainfuck-2d.bf2d"&gt;Brainfuck 2D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/brainfuck.bf"&gt;Brainfuck&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/Brainloller.png"&gt;Brainloller&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/broccoli.brocc"&gt;Broccoli&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/BRZRK.brzrk"&gt;Brzrk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/burlesque.burlesque"&gt;Burlesque&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/byter.byter"&gt;Byter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/c%2B%2B.cpp"&gt;C++&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/c.c"&gt;C&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/caml.ml"&gt;Caml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/cardinal.cardinal"&gt;Cardinal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/Casio%20BASIC"&gt;Casio Basic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/cat.cat"&gt;Cat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/centura.centura"&gt;Centura&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/ceylon.ceylon"&gt;Ceylon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/cgi.c"&gt;Cgi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/chapel.chpl"&gt;Chapel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/cheddar.cheddar"&gt;Cheddar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/chef.ch"&gt;Chef&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/chicken.chicken"&gt;Chicken&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/cil.il"&gt;Cil&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/clean.icl"&gt;Clean&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/clipper.clipper"&gt;Clipper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/clipper.prg"&gt;Clipper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/clips.clips"&gt;Clips&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/clisp.lisp"&gt;Clisp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/clojure.clj"&gt;Clojure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/cobol.cbl"&gt;Cobol&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/coconut.coc"&gt;Coconut&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/coffeescript.coffee"&gt;Coffeescript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/coldfusion.cfm"&gt;Coldfusion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/common-lisp.lisp"&gt;Common Lisp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/ContinuesEquation.ce"&gt;Continuesequation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/cool.cl"&gt;Cool&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/cor.cor"&gt;Cor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/crystal.cr"&gt;Crystal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/csh.csh"&gt;Csh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/csharp.cs"&gt;Csharp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/cson.cson"&gt;Cson&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/css.css"&gt;Css&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/cuneiform.cfl"&gt;Cuneiform&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/curry.curry"&gt;Curry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/cypherNeo4j.cypher"&gt;Cypherneo4J&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="d/d.d"&gt;D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="d/dark.txt"&gt;Dark&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="d/Dart.dart"&gt;Dart&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="d/db2.sql"&gt;Db2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="d/dc.dc"&gt;Dc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="d/DCL"&gt;Dcl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="d/dd_dd.dd"&gt;Dd Dd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="d/Decimal.dec"&gt;Decimal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="d/delphi.delphi"&gt;Delphi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="d/delphi.pas"&gt;Delphi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="d/dis.dis"&gt;Dis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="d/divzeros.dz"&gt;Divzeros&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="d/DNA%23.dna"&gt;Dna#&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="d/DNA-Sharp.dna"&gt;Dna Sharp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="d/dogescript.djs"&gt;Dogescript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="d/DOGO.dogo"&gt;Dogo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="d/dos.bat"&gt;Dos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="d/Drive-In%20Window.diw"&gt;Drive In Window&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="d/dtrace.d"&gt;Dtrace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="d/DUP.dup"&gt;Dup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="d/dylan.dl"&gt;Dylan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="d/Dyvil.dyv"&gt;Dyvil&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="e/ebuild.ebuild"&gt;Ebuild&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="e/Eiffel.eiff"&gt;Eiffel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="e/elixir.ex"&gt;Elixir&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="e/elixir.exs"&gt;Elixir&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="e/elm.elm"&gt;Elm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="e/EmacsLisp.el"&gt;Emacslisp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="e/emmental.emmental"&gt;Emmental&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="e/emojicode.emojic"&gt;Emojicode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="e/emoticon.emoticon"&gt;Emoticon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="e/EOOOL.eoool"&gt;Eoool&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="e/erlang.erl"&gt;Erlang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="e/erlang_escript.erl"&gt;Erlang Escript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="f/factor.factor"&gt;Factor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="f/falcon.fal"&gt;Falcon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="f/false.f"&gt;False&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="f/fancy.fy"&gt;Fancy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="f/fantom.fan"&gt;Fantom&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="f/ferite.fe"&gt;Ferite&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="f/fetlang.fet"&gt;Fetlang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="f/fish.fish"&gt;Fish&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="f/fjoelnir.fjo"&gt;Fjoelnir&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="f/fob.fob"&gt;Fob&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="f/focal.fc"&gt;Focal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="f/fog.fog.md"&gt;Fog.Fog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="f/foo.foo"&gt;Foo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="f/forobj.forobj"&gt;Forobj&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="f/forth.fth"&gt;Forth&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="f/fortob.fortob"&gt;Fortob&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="f/fortran.f90"&gt;Fortran&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="f/fortran77.f77"&gt;Fortran77&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="f/fourier.fourier"&gt;Fourier&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="f/fsharp.fs"&gt;Fsharp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="f/fstar.fst"&gt;Fstar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="g/gammaplex.gammaplex"&gt;Gammaplex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="g/GASOIL.gasoil"&gt;Gasoil&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="g/gecho.gecho"&gt;Gecho&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="g/gentzen.gentzen"&gt;Gentzen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="g/geojson.geojson"&gt;Geojson&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="g/gibberish.gibberish"&gt;Gibberish&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="g/glass.glass"&gt;Glass&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="g/gml.gml"&gt;Gml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="g/go.go"&gt;Go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="g/golfscript.golfscript"&gt;Golfscript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="g/golo.golo"&gt;Golo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="g/googleappscript.gs"&gt;Googleappscript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="g/gosu.gosu"&gt;Gosu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="g/gosu.gs"&gt;Gosu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="g/gravity.gravity"&gt;Gravity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="g/Green-Marl.gm"&gt;Green Marl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="g/gri.gri"&gt;Gri&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="g/GridScript.gridscript"&gt;Gridscript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="g/grin.grin"&gt;Grin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="g/groovy.groovy"&gt;Groovy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="g/Gui4Cli"&gt;Gui4Cli&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="h/hack.hh"&gt;Hack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="h/haskell.hs"&gt;Haskell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="h/haxe.hx"&gt;Haxe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="h/HEX.hex"&gt;Hex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="h/hexish.hexish"&gt;Hexish&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="h/Higher%20Subleq.higher_subleq"&gt;Higher Subleq&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="h/hodor.hd"&gt;Hodor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="h/hollow.hollow"&gt;Hollow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="h/homespring.homespring"&gt;Homespring&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="h/HOP"&gt;Hop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="h/hq9%2B.h"&gt;Hq9+&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="h/html.html"&gt;Html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="h/hy.hy"&gt;Hy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="h/hypertalk.ht"&gt;Hypertalk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="i/ibm1401"&gt;Ibm1401&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="i/IcedCoffeeScript.ics"&gt;Icedcoffeescript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="i/ici.ici"&gt;Ici&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="i/icon.icn"&gt;Icon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="i/IDL"&gt;Idl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="i/idris.idr"&gt;Idris&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="i/il.il"&gt;Il&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="i/INCAL.incal"&gt;Incal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="i/InDec.indec"&gt;Indec&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="i/inform.inform"&gt;Inform&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="i/ink.ink"&gt;Ink&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="i/intercal.i"&gt;Intercal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="i/Io.Io"&gt;Io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="i/ioke.ik"&gt;Ioke&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="i/irc"&gt;Irc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="i/iscom.iscom"&gt;Iscom&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="i/ISLISP.lisp"&gt;Islisp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="j/j.ijs"&gt;J&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="j/jade.jade"&gt;Jade&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="j/jai.jai"&gt;Jai&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="j/Jasmin.j"&gt;Jasmin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="j/jason.mas2j"&gt;Jason&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="j/Java.java"&gt;Java&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="j/javascript.js"&gt;Javascript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="j/jess.cpl"&gt;Jess&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="j/json.json"&gt;Json&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="j/JSONiq"&gt;Jsoniq&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="j/jsx.js"&gt;Jsx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="j/julia.jl"&gt;Julia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="k/k.k"&gt;K&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="k/karel.kl"&gt;Karel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="k/KimL.kiml"&gt;Kiml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="k/kipple.kipple"&gt;Kipple&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="k/kitten.ktn"&gt;Kitten&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="k/kotlin.kt"&gt;Kotlin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="k/ksh.ksh"&gt;Ksh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="l/labyrinth.labyrinth"&gt;Labyrinth&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="l/LaTeX.tex"&gt;Latex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="l/LazyK.lazy"&gt;Lazyk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="l/leszek.leszek"&gt;Leszek&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="l/limbo.b"&gt;Limbo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="l/lisaac.li"&gt;Lisaac&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="l/lisp.lsp"&gt;Lisp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="l/livescript.ls"&gt;Livescript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="l/llvm.ll"&gt;Llvm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="l/LNUSP.lnusp"&gt;Lnusp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="l/logo.lg"&gt;Logo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="l/LOLA.lola"&gt;Lola&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="l/lolcode.lol"&gt;Lolcode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="l/lolpython.lol"&gt;Lolpython&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="l/lsl.lsl"&gt;Lsl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="l/lua.lua"&gt;Lua&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/m4.m4"&gt;M4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/macsyma.mac"&gt;Macsyma&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/magic"&gt;Magic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/malbolge.mbg"&gt;Malbolge&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/markdown.md"&gt;Markdown&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/mathematica-online.nb"&gt;Mathematica Online&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/matlab.m"&gt;Matlab&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/maxscript.ms"&gt;Maxscript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/mel.mel"&gt;Mel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/meq.meq"&gt;Meq&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/mercury.m"&gt;Mercury&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/minecraft"&gt;Minecraft&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/mips.s"&gt;Mips&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/mirc.mrc"&gt;Mirc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/Mmmm%28%29.mmmm"&gt;Mmmm()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/modula-2.mod"&gt;Modula 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/modula-3.m3"&gt;Modula 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/mongo.shell"&gt;Mongo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/moonscript.moon"&gt;Moonscript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/morsecode"&gt;Morsecode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/mouse.mse"&gt;Mouse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/move.mv"&gt;Move&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/mozart.oz"&gt;Mozart&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/muf.muf"&gt;Muf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/mumps.m"&gt;Mumps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/mushcode.mush"&gt;Mushcode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/myrddin.myr"&gt;Myrddin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/mysql.sql"&gt;Mysql&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="n/mathematica.nb"&gt;Mathematica&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="n/neko.neko"&gt;Neko&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="n/nemerle.n"&gt;Nemerle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="n/newtonscript.nwt"&gt;Newtonscript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="n/nice.nice"&gt;Nice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="n/nim.nim"&gt;Nim&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="n/nit.nit"&gt;Nit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="n/nodejs.js"&gt;Nodejs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="n/novice.novice"&gt;Novice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="n/nu.nu"&gt;Nu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="n/nxc.nxc"&gt;Nxc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="o/oberon-2.obn"&gt;Oberon 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="o/oberon.o"&gt;Oberon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="o/obix.osc"&gt;Obix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="o/obj.st"&gt;Obj&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="o/objc.m"&gt;Objc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="o/objective-j.j"&gt;Objective J&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="o/ObjectStar"&gt;Objectstar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="o/ocaml.ml"&gt;Ocaml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="o/octave.octave"&gt;Octave&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="o/omgrofl.omgrofl"&gt;Omgrofl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="o/ooc.ooc"&gt;Ooc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="o/ook.ok"&gt;Ook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="o/opa.opa"&gt;Opa&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="o/OpenLaszlo.lzx"&gt;Openlaszlo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="o/oraclesql.sql"&gt;Oraclesql&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="o/Orc.orc"&gt;Orc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="o/oz.oz"&gt;Oz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/hello_world.pl1"&gt;Hello World&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/parenthetic.p"&gt;Parenthetic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/parser.p"&gt;Parser&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/pascal.p"&gt;Pascal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/pawn.p"&gt;Pawn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/pb.pwr"&gt;Pb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/pbwin.bas"&gt;Pbwin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/pebble.c"&gt;Pebble&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/perl.cgi"&gt;Perl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/perl.pl"&gt;Perl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/perl6.p6"&gt;Perl6&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/perseus.p%2B%2B"&gt;Perseus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/pharo.st"&gt;Pharo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/php.php"&gt;Php&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/picat.pi"&gt;Picat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/piet.png"&gt;Piet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/pig.pig"&gt;Pig&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/pike.pike"&gt;Pike&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/pit.pit"&gt;Pit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/pizza.pizza"&gt;Pizza&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/please_porige_hot.pph"&gt;Please Porige Hot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/plsql.sql"&gt;Plsql&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/pluvo.pvo"&gt;Pluvo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/polynomial.pol"&gt;Polynomial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/pony.pony"&gt;Pony&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/postgresql.sql"&gt;Postgresql&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/postscript.ps"&gt;Postscript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/postscript_page.ps"&gt;Postscript Page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/posxml.posxml"&gt;Posxml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/potigol.poti"&gt;Potigol&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/powershell.ps1"&gt;Powershell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/processing.pde"&gt;Processing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/prolog.pro"&gt;Prolog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/pure_data.pd"&gt;Pure Data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/purebasic.pb"&gt;Purebasic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/purescript.purs"&gt;Purescript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/pyret.arr"&gt;Pyret&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/python.py"&gt;Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/python3.py"&gt;Python3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="q/q.q"&gt;Q&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="q/Qbasic.bas"&gt;Qbasic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="q/qore.q"&gt;Qore&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="q/qu.qu"&gt;Qu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="q/QuakeC.qc"&gt;Quakec&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="q/QuartzComposer.qtz"&gt;Quartzcomposer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="q/qugord.qugord"&gt;Qugord&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="q/qwerty.qwerty"&gt;Qwerty&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="r/R.R"&gt;R&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="r/racket.rkt"&gt;Racket&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="r/radixal.radixal"&gt;Radixal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="r/ratfor.ratfor"&gt;Ratfor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="r/react.js"&gt;React&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="r/readlink.readlink"&gt;Readlink&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="r/reason.re"&gt;Reason&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="r/rebol.r"&gt;Rebol&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="r/recurse.recurse"&gt;Recurse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="r/reStructuredText.rst"&gt;Restructuredtext&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="r/rexx.rexx"&gt;Rexx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="r/richtea.tea"&gt;Richtea&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="r/ring.ring"&gt;Ring&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="r/rockstar.rock"&gt;Rockstar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="r/roco.roco"&gt;Roco&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="r/roy.roy"&gt;Roy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="r/ruby.rb"&gt;Ruby&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="r/ruota.ruo"&gt;Ruota&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="r/rust.rs"&gt;Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/S-algol"&gt;S Algol&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/sacred.sacred"&gt;Sacred&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/sal.s"&gt;Sal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/sas.sas"&gt;Sas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/sass.sass"&gt;Sass&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/sather.sa"&gt;Sather&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/scala.scala"&gt;Scala&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/scheme.scm"&gt;Scheme&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/schwift.y"&gt;Schwift&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/scilab.scilab"&gt;Scilab&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/scratch.sb"&gt;Scratch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/Scss.scss"&gt;Scss&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/sed.sed"&gt;Sed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/self.self"&gt;Self&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/semicolon"&gt;Semicolon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/SendStuff.ss"&gt;Sendstuff&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/shakespeare.spl"&gt;Shakespeare&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/shell.sh"&gt;Shell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/shen.shen"&gt;Shen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/SIL.SIL"&gt;Sil&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/simpl%2B.usp"&gt;Simpl+&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/simula.sim"&gt;Simula&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/slashes.slashes"&gt;Slashes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/smali.smali"&gt;Smali&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/smalltalk-gnu.st"&gt;Smalltalk Gnu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/smalltalk.sm"&gt;Smalltalk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/smil.smil"&gt;Smil&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/sml.sml"&gt;Sml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/snowman.sm"&gt;Snowman&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/Solidity.sol"&gt;Solidity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/soupscript.script"&gt;Soupscript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/sparql.sparql"&gt;Sparql&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/spoon.spoon"&gt;Spoon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/spss.spss"&gt;Spss&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/sql.sql"&gt;Sql&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/squirrel.nut"&gt;Squirrel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/standard-ml.sml"&gt;Standard Ml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/stanza.stanza"&gt;Stanza&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/streem.strm"&gt;Streem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/stuck.stuck"&gt;Stuck&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/stuck_0byte.stuck"&gt;Stuck 0Byte&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/subleq.sq"&gt;Subleq&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/supercollider.sc"&gt;Supercollider&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/svg.svg"&gt;Svg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/swift.swift"&gt;Swift&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/systemtap.stp"&gt;Systemtap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="t/plain-text.txt"&gt;Plain Text&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="t/Tao-Presentations.ddd"&gt;Tao Presentations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="t/TapeBagel.tb"&gt;Tapebagel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="t/tcl.tcl"&gt;Tcl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="t/tcsh.tcsh"&gt;Tcsh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="t/telephone"&gt;Telephone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="t/TeX.tex"&gt;Tex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="t/thp.hrp"&gt;Thp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="t/thue.th"&gt;Thue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="t/tibasic.ti"&gt;Tibasic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="t/tk.tk"&gt;Tk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="t/tri.tri"&gt;Tri&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="t/trollscript.troll"&gt;Trollscript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="t/TrumpScript.py"&gt;Trumpscript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="t/tsql.sql"&gt;Tsql&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="t/TTCN3.ttcn"&gt;Ttcn3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="t/turing.oot"&gt;Turing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="t/Turing.t"&gt;Turing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="t/typescript.ts"&gt;Typescript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="u/Ubercode.cls"&gt;Ubercode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="u/ubiquity.ubiquity"&gt;Ubiquity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="u/umajin.u"&gt;Umajin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="u/unicomal.lst"&gt;Unicomal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="u/unlambda.unl"&gt;Unlambda&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="v/V"&gt;V&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="v/vala.vala"&gt;Vala&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="v/vbnet.vb"&gt;Vbnet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="v/velato.ly"&gt;Velato&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="v/verbose.verbose"&gt;Verbose&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="v/verbosefuck.vbfk"&gt;Verbosefuck&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="v/verilog.v"&gt;Verilog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="v/verve.vrv"&gt;Verve&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="v/vhdl.vhdl"&gt;Vhdl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="v/vi"&gt;Vi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="v/vimscript.vim"&gt;Vimscript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="v/virgil.v3"&gt;Virgil&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="v/visualbasic.vb"&gt;Visualbasic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="v/visualbasicscript.vbs"&gt;Visualbasicscript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="v/visualfoxpro.prg"&gt;Visualfoxpro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="v/vms.vms"&gt;Vms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="v/Vowels.vw"&gt;Vowels&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="v/vrml.wrl"&gt;Vrml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="v/vue.js"&gt;Vue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="w/wheat.wheat"&gt;Wheat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="w/whenever.whenever"&gt;Whenever&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="w/whirl.wr"&gt;Whirl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="w/whitespace.ws"&gt;Whitespace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="w/wml.wml"&gt;Wml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="w/wolframlanguage.wl"&gt;Wolframlanguage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="w/wren.wren"&gt;Wren&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="w/wsh.vbs"&gt;Wsh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="x/x-D.xd"&gt;X D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="x/xbase%2B%2B.prg"&gt;Xbase++&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="x/xbase.dbf"&gt;Xbase&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="x/xl.xl"&gt;Xl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="x/xlogo.lgo"&gt;Xlogo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="x/xml.xml"&gt;Xml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="x/xpl0.xpl"&gt;Xpl0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="x/xquery.xq"&gt;Xquery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="x/XRF.xrf"&gt;Xrf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="x/xslt.xslt"&gt;Xslt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="x/xul.xul"&gt;Xul&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="y/Y.y"&gt;Y&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="y/yaml.yaml"&gt;Yaml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="y/yolang.yo"&gt;Yolang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="y/yoptascript.js"&gt;Yoptascript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="z/zbd"&gt;Zbd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="z/zepto.zp"&gt;Zepto&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="z/zetaplex.zeta"&gt;Zetaplex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="z/zim.zim"&gt;Zim&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="z/zimbu.zu"&gt;Zimbu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="z/zombie.zombie"&gt;Zombie&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="z/zonnon.znn"&gt;Zonnon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="z/zsh.zsh"&gt;Zsh&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>leachim6</author><guid isPermaLink="false">https://github.com/leachim6/hello-world</guid><pubDate>Tue, 24 Dec 2019 00:03:00 GMT</pubDate></item><item><title>bitdump/BLHeli #4 in Assembly, Today</title><link>https://github.com/bitdump/BLHeli</link><description>&lt;p&gt;&lt;i&gt;BLHeli for brushless ESC firmware&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;p&gt;This tree contains BLHeli code for sensorless brushless motor electronic speed control (ESC) boards.&lt;/p&gt;
&lt;p&gt;To view and use the files, click the "Clone or download" button on this page,&lt;br&gt;
and then select "Download ZIP" to download the repository to your computer.&lt;/p&gt;
&lt;p&gt;For flashing and configuration, download the BLHeliSuite PC software:&lt;br&gt;
&lt;a href="https://www.mediafire.com/folder/dx6kfaasyo24l/BLHeliSuite" rel="nofollow"&gt;https://www.mediafire.com/folder/dx6kfaasyo24l/BLHeliSuite&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For more information, check out these threads:&lt;br&gt;
&lt;a href="https://www.rcgroups.com/forums/showthread.php?2640796" rel="nofollow"&gt;https://www.rcgroups.com/forums/showthread.php?2640796&lt;/a&gt; (for BLHeli_S)&lt;br&gt;
&lt;a href="http://www.rcgroups.com/forums/showthread.php?t=2136895" rel="nofollow"&gt;http://www.rcgroups.com/forums/showthread.php?t=2136895&lt;/a&gt; (for BLHeli)&lt;/p&gt;
&lt;p&gt;And look in the "BLHeli_32 ARM" folder for info on BLHeli_32.&lt;/p&gt;
&lt;p&gt;October 2018,
Steffen Skaug&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>bitdump</author><guid isPermaLink="false">https://github.com/bitdump/BLHeli</guid><pubDate>Tue, 24 Dec 2019 00:04:00 GMT</pubDate></item><item><title>microsoft/MS-DOS #5 in Assembly, Today</title><link>https://github.com/microsoft/MS-DOS</link><description>&lt;p&gt;&lt;i&gt;The original sources of MS-DOS 1.25 and 2.0, for reference purposes&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://github.com/Microsoft/MS-DOS/blob/master/msdos-logo.png"&gt;&lt;img width="150" height="150" align="left" alt="MS-DOS logo" src="https://github.com/Microsoft/MS-DOS/raw/master/msdos-logo.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;   
&lt;h1&gt;&lt;a id="user-content-ms-dos-v125-and-v20-source-code" class="anchor" aria-hidden="true" href="#ms-dos-v125-and-v20-source-code"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;MS-DOS v1.25 and v2.0 Source Code&lt;/h1&gt;
&lt;p&gt;This repo contains the original source-code and compiled binaries for MS-DOS v1.25 and MS-DOS v2.0.&lt;/p&gt;
&lt;p&gt;These are the same files &lt;a href="http://www.computerhistory.org/atchm/microsoft-ms-dos-early-source-code/" rel="nofollow"&gt;originally shared at the Computer History Museum on March 25th, 2014&lt;/a&gt; and are being (re)published in this repo to make them easier to find, reference-to in external writing and works, and to allow exploration and experimentation for those interested in early PC Operating Systems.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-license" class="anchor" aria-hidden="true" href="#license"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;License&lt;/h1&gt;
&lt;p&gt;All files within this repo are released under the &lt;a href="https://en.wikipedia.org/wiki/MIT_License" rel="nofollow"&gt;MIT (OSI) License&lt;/a&gt; as per the &lt;a href="https://github.com/Microsoft/MS-DOS/blob/master/LICENSE.md"&gt;LICENSE file&lt;/a&gt; stored in the root of this repo.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-contribute" class="anchor" aria-hidden="true" href="#contribute"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contribute!&lt;/h1&gt;
&lt;p&gt;The source files in this repo are for historical reference and will be kept static, so please &lt;strong&gt;don’t send&lt;/strong&gt; Pull Requests suggesting any modifications to the source files, but feel free to fork this repo and experiment &lt;g-emoji class="g-emoji" alias="blush" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f60a.png"&gt;😊&lt;/g-emoji&gt;.&lt;/p&gt;
&lt;p&gt;If, however, you’d like to submit additional non-source content or modifications to non-source files (e.g., this README), please submit via PR, and we’ll review and consider.&lt;/p&gt;
&lt;p&gt;This project has adopted the &lt;a href="https://opensource.microsoft.com/codeofconduct/" rel="nofollow"&gt;Microsoft Open Source Code of Conduct&lt;/a&gt;.  For more information see the &lt;a href="https://opensource.microsoft.com/codeofconduct/faq/" rel="nofollow"&gt;Code of Conduct FAQ&lt;/a&gt; or contact &lt;a href="mailto:opencode@microsoft.com"&gt;opencode@microsoft.com&lt;/a&gt; with any additional questions or comments.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>microsoft</author><guid isPermaLink="false">https://github.com/microsoft/MS-DOS</guid><pubDate>Tue, 24 Dec 2019 00:05:00 GMT</pubDate></item><item><title>Rangi42/polishedcrystal #6 in Assembly, Today</title><link>https://github.com/Rangi42/polishedcrystal</link><description>&lt;p&gt;&lt;i&gt;An upgrade to Pokémon Crystal. Brings features and content up to date, and adds some original content.&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-pokémon-polished-crystal" class="anchor" aria-hidden="true" href="#pokémon-polished-crystal"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Pokémon Polished Crystal&lt;/h1&gt;
&lt;p&gt;This is a custom Pokémon game based on &lt;a href="https://github.com/pret/pokecrystal"&gt;the Pokémon Crystal disassembly&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;My goal is to create what the title says: an improved, polished version of Pokémon Crystal. It fixes bugs, takes into account the official game changes since 2001, and adds some new ideas of my own. Many features restore what was removed from R/B/Y, or original to HG/SS.&lt;/p&gt;
&lt;p&gt;I've had vague plans to make a Pokémon game for years. I'm very impressed by the effort that's gone into disassembling Pokémon Crystal and making the code so well-organized. Thanks to making it open-source (and to the ROM hackers that inspired me), I'm finally making this game a reality.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There are many ways to create games but the way we work at Game Freak may be a little different from other companies. That is, we constantly change and tweak what we have come up with. To make a fun game even more fun and polish it up, we take what we have made and start thinking about it from scratch. And to make the game the most fun to play we make endless changes and tweaks no matter how long it takes. It may not be the best way, but I think these tweaks are important to make our games fun and better.&lt;/p&gt;
&lt;p&gt;— Junichi Masuda, "&lt;a href="https://www.gamefreak.co.jp/blog/dir_english/?p=21" rel="nofollow"&gt;HIDDEN POWER of masuda No. 7&lt;/a&gt;"&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;&lt;a id="user-content-download-and-play" class="anchor" aria-hidden="true" href="#download-and-play"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Download and Play&lt;/h2&gt;
&lt;p&gt;The most recent version is &lt;a href="https://github.com/Rangi42/polishedcrystal/releases/tag/v2.2.0"&gt;2.2.0&lt;/a&gt; as of September 20, 2016. &lt;a href="CHANGELOG.md"&gt;The changelog&lt;/a&gt; lists all changes since then.&lt;/p&gt;
&lt;p&gt;To play, download the .ips patch file, and use a tool like &lt;a href="http://fusoya.eludevisibility.org/lips/" rel="nofollow"&gt;Lunar IPS&lt;/a&gt; (for Windows), &lt;a href="http://projects.sappharad.com/tools/multipatch.html" rel="nofollow"&gt;MultiPatch&lt;/a&gt; (for OS X), or &lt;a href="https://play.google.com/store/apps/details?id=org.emunix.unipatcher&amp;amp;hl=en" rel="nofollow"&gt;UniPatcher&lt;/a&gt; (for Android) to apply the patch to a default Crystal ROM.&lt;/p&gt;
&lt;p&gt;This is the ROM you should use:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pokémon - Crystal Version (UE) (V1.0) [C][!].gbc&lt;br&gt;
(&lt;code&gt;md5: 9f2922b235a5eeb78d65594e82ef5dde&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It's identical to the one built by the &lt;a href="https://github.com/pret/pokecrystal"&gt;pokecrystal&lt;/a&gt; project.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;If you want to do a &lt;a href="http://bulbapedia.bulbagarden.net/wiki/Nuzlocke_Challenge" rel="nofollow"&gt;Nuzlocke Challenge&lt;/a&gt;, check out Nuzlocke mode in the Option menu!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;There are two patches for Polished Crystal. The "faithful" patch does not change any Pokémon base stats or move attributes beyond the updates in Gen VI. The regular patch has some custom changes for more diverse and viable Pokémon.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="patches/polishedcrystal-2.2.0.ips"&gt;Pokémon Polished Crystal 2.2.0&lt;/a&gt;&lt;br&gt;
(IPS patch file &lt;code&gt;md5: 043769cc7e1a0ccfad635ff72b0ab8d0&lt;/code&gt;)&lt;br&gt;
(Patched GBC ROM &lt;code&gt;md5: 9d3a3026bc3730cdf5d813b0bfe49697&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="patches/polishedcrystal-faithful-2.2.0.ips"&gt;Pokémon Polished Crystal (Faithful) 2.2.0&lt;/a&gt;&lt;br&gt;
(IPS patch file &lt;code&gt;md5: 5cbd4bef0e03936291f40b14c75b47d3&lt;/code&gt;)&lt;br&gt;
(Patched GBC ROM &lt;code&gt;md5: cb5921d6646d2adfd302d8957e5e39af&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-features" class="anchor" aria-hidden="true" href="#features"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Features&lt;/h2&gt;
&lt;p&gt;A full list of features is in &lt;a href="FEATURES.md"&gt;FEATURES.md&lt;/a&gt;. Some highlights:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;253 Pokémon, including some new evolutions.&lt;/li&gt;
&lt;li&gt;48 new moves.&lt;/li&gt;
&lt;li&gt;65 TMs and 21 move tutors.&lt;/li&gt;
&lt;li&gt;Many new mechanics, including the Fairy type, Physical/Special split, Natures, unlimited TMs, Running Shoes, and continuous Repel.&lt;/li&gt;
&lt;li&gt;New maps: some restored from R/B/Y, some devamped from HG/SS, and some original.&lt;/li&gt;
&lt;li&gt;New characters, including Lorelei and Agatha from R/B/Y, Lyra and the Team Rocket Executives from HG/SS, and others.&lt;/li&gt;
&lt;li&gt;More post-game content, like Gym Leader rematches and an event after the battle with Red.&lt;/li&gt;
&lt;li&gt;An improved level curve with steadily increasing challenges throughout the game.&lt;/li&gt;
&lt;li&gt;Music and graphics devamped from other versions.&lt;/li&gt;
&lt;li&gt;Nuzlocke mode in the Option menu, enabling the basic rules of the &lt;a href="http://bulbapedia.bulbagarden.net/wiki/Nuzlocke_Challenge" rel="nofollow"&gt;Nuzlocke Challenge&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-discussion" class="anchor" aria-hidden="true" href="#discussion"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Discussion&lt;/h2&gt;
&lt;p&gt;You can post questions or comments on any of these sites. But please read the &lt;a href="FAQ.md"&gt;FAQ&lt;/a&gt; first if you have a question.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://discord.gg/ZK5pqK8" rel="nofollow"&gt;Discord&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hax.iimarck.us/topic/6874/" rel="nofollow"&gt;Skeetendo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.pokecommunity.com/showthread.php?t=373172" rel="nofollow"&gt;PokéCommunity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.romhack.me/polishedcrystal/wall/" rel="nofollow"&gt;Romhack.me&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/PokemonROMhacks/comments/51kbcn/pok%C3%A9mon_polished_crystal_200/" rel="nofollow"&gt;/r/PokemonROMHacks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://s7.zetaboards.com/Nuzlocke_Forum/topic/11003710/" rel="nofollow"&gt;Nuzlocke Forums&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.pokemonhackersonline.com/showthread.php?t=15811" rel="nofollow"&gt;Pokémon Hackers Online&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-screenshots" class="anchor" aria-hidden="true" href="#screenshots"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Screenshots&lt;/h2&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="screenshots/title-screen.png"&gt;&lt;img src="screenshots/title-screen.png" alt="title-screen" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a target="_blank" rel="noopener noreferrer" href="screenshots/running-shoes.png"&gt;&lt;img src="screenshots/running-shoes.png" alt="running-shoes" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a target="_blank" rel="noopener noreferrer" href="screenshots/town-map.png"&gt;&lt;img src="screenshots/town-map.png" alt="town-map" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a target="_blank" rel="noopener noreferrer" href="screenshots/lyra.png"&gt;&lt;img src="screenshots/lyra.png" alt="lyra" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="screenshots/cherrygrove-city.png"&gt;&lt;img src="screenshots/cherrygrove-city.png" alt="cherrygrove-city" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a target="_blank" rel="noopener noreferrer" href="screenshots/pokemon-center.png"&gt;&lt;img src="screenshots/pokemon-center.png" alt="pokemon-center" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a target="_blank" rel="noopener noreferrer" href="screenshots/nuzlocke-mode.png"&gt;&lt;img src="screenshots/nuzlocke-mode.png" alt="nuzlocke-mode" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a target="_blank" rel="noopener noreferrer" href="screenshots/oaks-aide.png"&gt;&lt;img src="screenshots/oaks-aide.png" alt="oaks-aide" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="screenshots/elder-li.png"&gt;&lt;img src="screenshots/elder-li.png" alt="elder-li" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a target="_blank" rel="noopener noreferrer" href="screenshots/move-tutor.png"&gt;&lt;img src="screenshots/move-tutor.png" alt="move-tutor" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a target="_blank" rel="noopener noreferrer" href="screenshots/moss-rock.png"&gt;&lt;img src="screenshots/moss-rock.png" alt="moss-rock" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a target="_blank" rel="noopener noreferrer" href="screenshots/rich-boy.png"&gt;&lt;img src="screenshots/rich-boy.png" alt="rich-boy" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="screenshots/tm58.png"&gt;&lt;img src="screenshots/tm58.png" alt="tm58" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a target="_blank" rel="noopener noreferrer" href="screenshots/game-corner-prizes.png"&gt;&lt;img src="screenshots/game-corner-prizes.png" alt="game-corner-prizes" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a target="_blank" rel="noopener noreferrer" href="screenshots/goldenrod-move-tutor.png"&gt;&lt;img src="screenshots/goldenrod-move-tutor.png" alt="goldenrod-move-tutor" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a target="_blank" rel="noopener noreferrer" href="screenshots/eviolite.png"&gt;&lt;img src="screenshots/eviolite.png" alt="eviolite" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="screenshots/wonder-trade.png"&gt;&lt;img src="screenshots/wonder-trade.png" alt="wonder-trade" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a target="_blank" rel="noopener noreferrer" href="screenshots/ecruteak-shrine.png"&gt;&lt;img src="screenshots/ecruteak-shrine.png" alt="ecruteak-shrine" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a target="_blank" rel="noopener noreferrer" href="screenshots/cowgirl.png"&gt;&lt;img src="screenshots/cowgirl.png" alt="cowgirl" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a target="_blank" rel="noopener noreferrer" href="screenshots/olivine-city.png"&gt;&lt;img src="screenshots/olivine-city.png" alt="olivine-city" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="screenshots/remoraid.png"&gt;&lt;img src="screenshots/remoraid.png" alt="remoraid" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a target="_blank" rel="noopener noreferrer" href="screenshots/team-rocket.png"&gt;&lt;img src="screenshots/team-rocket.png" alt="team-rocket" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a target="_blank" rel="noopener noreferrer" href="screenshots/steelix.png"&gt;&lt;img src="screenshots/steelix.png" alt="steelix" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a target="_blank" rel="noopener noreferrer" href="screenshots/custom-map.png"&gt;&lt;img src="screenshots/custom-map.png" alt="custom-map" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="screenshots/ice-rock.png"&gt;&lt;img src="screenshots/ice-rock.png" alt="ice-rock" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a target="_blank" rel="noopener noreferrer" href="screenshots/hex-maniac.png"&gt;&lt;img src="screenshots/hex-maniac.png" alt="hex-maniac" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a target="_blank" rel="noopener noreferrer" href="screenshots/route-45.png"&gt;&lt;img src="screenshots/route-45.png" alt="route-45" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a target="_blank" rel="noopener noreferrer" href="screenshots/stats.png"&gt;&lt;img src="screenshots/stats.png" alt="stats" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="screenshots/sitrus-berry.png"&gt;&lt;img src="screenshots/sitrus-berry.png" alt="sitrus-berry" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a target="_blank" rel="noopener noreferrer" href="screenshots/weavile.png"&gt;&lt;img src="screenshots/weavile.png" alt="weavile" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a target="_blank" rel="noopener noreferrer" href="screenshots/move-reminder.png"&gt;&lt;img src="screenshots/move-reminder.png" alt="move-reminder" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a target="_blank" rel="noopener noreferrer" href="screenshots/moves.png"&gt;&lt;img src="screenshots/moves.png" alt="moves" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="screenshots/sylveon-moonblast.png"&gt;&lt;img src="screenshots/sylveon-moonblast.png" alt="sylveon-moonblast" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a target="_blank" rel="noopener noreferrer" href="screenshots/togetic-fairy-wind.png"&gt;&lt;img src="screenshots/togetic-fairy-wind.png" alt="togetic-fairy-wind" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a target="_blank" rel="noopener noreferrer" href="screenshots/aerodactyl-fossil.png"&gt;&lt;img src="screenshots/aerodactyl-fossil.png" alt="aerodactyl-fossil" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a target="_blank" rel="noopener noreferrer" href="screenshots/cerulean-city.png"&gt;&lt;img src="screenshots/cerulean-city.png" alt="cerulean-city" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="screenshots/celadon-city.png"&gt;&lt;img src="screenshots/celadon-city.png" alt="celadon-city" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a target="_blank" rel="noopener noreferrer" href="screenshots/fly-to-rock-tunnel.png"&gt;&lt;img src="screenshots/fly-to-rock-tunnel.png" alt="fly-to-rock-tunnel" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a target="_blank" rel="noopener noreferrer" href="screenshots/viridian-forest.png"&gt;&lt;img src="screenshots/viridian-forest.png" alt="viridian-forest" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a target="_blank" rel="noopener noreferrer" href="screenshots/mismagius.png"&gt;&lt;img src="screenshots/mismagius.png" alt="mismagius" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="screenshots/fighting-dojo.png"&gt;&lt;img src="screenshots/fighting-dojo.png" alt="fighting-dojo" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a target="_blank" rel="noopener noreferrer" href="screenshots/silph-co.png"&gt;&lt;img src="screenshots/silph-co.png" alt="silph-co" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a target="_blank" rel="noopener noreferrer" href="screenshots/new-balls.png"&gt;&lt;img src="screenshots/new-balls.png" alt="new-balls" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a target="_blank" rel="noopener noreferrer" href="screenshots/rock-tunnel.png"&gt;&lt;img src="screenshots/rock-tunnel.png" alt="rock-tunnel" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="screenshots/safari-zone.png"&gt;&lt;img src="screenshots/safari-zone.png" alt="safari-zone" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a target="_blank" rel="noopener noreferrer" href="screenshots/soul-house.png"&gt;&lt;img src="screenshots/soul-house.png" alt="soul-house" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a target="_blank" rel="noopener noreferrer" href="screenshots/cinnabar-island.png"&gt;&lt;img src="screenshots/cinnabar-island.png" alt="cinnabar-island" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a target="_blank" rel="noopener noreferrer" href="screenshots/seafoam-islands.png"&gt;&lt;img src="screenshots/seafoam-islands.png" alt="seafoam-islands" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>Rangi42</author><guid isPermaLink="false">https://github.com/Rangi42/polishedcrystal</guid><pubDate>Tue, 24 Dec 2019 00:06:00 GMT</pubDate></item></channel></rss>