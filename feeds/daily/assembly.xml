<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>GitHub Trending: Assembly, Today</title><link>https://github.com/trending/assembly?since=daily</link><description>The top repositories on GitHub for assembly, measured daily</description><pubDate>Thu, 06 Feb 2020 01:10:41 GMT</pubDate><lastBuildDate>Thu, 06 Feb 2020 01:10:41 GMT</lastBuildDate><generator>PyRSS2Gen-1.1.0</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><ttl>720</ttl><item><title>hsoft/collapseos #1 in Assembly, Today</title><link>https://github.com/hsoft/collapseos</link><description>&lt;p&gt;&lt;i&gt;Bootstrap post-collapse technology&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-collapse-os" class="anchor" aria-hidden="true" href="#collapse-os"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Collapse OS&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;Bootstrap post-collapse technology&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Collapse OS is a z80 kernel and a collection of programs, tools and
documentation that allows you to assemble an OS that, when completed, will be
able to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Run on minimal and improvised machines.&lt;/li&gt;
&lt;li&gt;Interface through improvised means (serial, keyboard, display).&lt;/li&gt;
&lt;li&gt;Edit text files.&lt;/li&gt;
&lt;li&gt;Compile assembler source files for a wide range of MCUs and CPUs.&lt;/li&gt;
&lt;li&gt;Read and write from a wide range of storage devices.&lt;/li&gt;
&lt;li&gt;Replicate itself.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Additionally, the goal of this project is to be as self-contained as possible.
With a copy of this project, a capable and creative person should be able to
manage to build and install Collapse OS without external resources (i.e.
internet) on a machine of her design, built from scavenged parts with low-tech
tools.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-see-it-in-action" class="anchor" aria-hidden="true" href="#see-it-in-action"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;See it in action&lt;/h2&gt;
&lt;p&gt;Michael Schierl has put together &lt;a href="https://schierlm.github.io/CollapseOS-Web-Emulator/" rel="nofollow"&gt;a set of emulators running in the browser that
run Collapse OS in different contexts&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Using those while following along with the &lt;a href="doc/"&gt;User Guide&lt;/a&gt; is your quickest
path to giving Collapse OS a try.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-organisation-of-this-repository" class="anchor" aria-hidden="true" href="#organisation-of-this-repository"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Organisation of this repository&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;kernel&lt;/code&gt;: Pieces of code to be assembled by the user into a kernel.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;apps&lt;/code&gt;: Pieces of code to be assembled into "userspace" application.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;recipes&lt;/code&gt;: collection of recipes that assemble parts together on a specific
machine.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;doc&lt;/code&gt;: User guide for when you've successfully installed Collapse OS.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tools&lt;/code&gt;: Tools for working with Collapse OS from "modern" environments. For
example, tools for facilitating data upload to a Collapse OS machine
through a serial port.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;emul&lt;/code&gt;: Emulated applications, such as zasm and the shell.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tests&lt;/code&gt;: Automated test suite for the whole project.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-status" class="anchor" aria-hidden="true" href="#status"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Status&lt;/h2&gt;
&lt;p&gt;The project unfinished but is progressing well! See &lt;a href="https://collapseos.org" rel="nofollow"&gt;Collapse OS' website&lt;/a&gt;
for more information.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-discussion" class="anchor" aria-hidden="true" href="#discussion"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Discussion&lt;/h2&gt;
&lt;p&gt;For a general discussion of Collapse OS and the ecosystem of technologies and ideas that may develop around it refer to &lt;a href="https://www.reddit.com/r/collapseos" rel="nofollow"&gt;r/collapseos&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A more traditional &lt;a href="http://lists.sonic.net/mailman/listinfo/collapseos" rel="nofollow"&gt;mailing list&lt;/a&gt; and IRC (#collapseos on freenode) channels are also maintained.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>hsoft</author><guid isPermaLink="false">https://github.com/hsoft/collapseos</guid><pubDate>Thu, 06 Feb 2020 00:01:00 GMT</pubDate></item><item><title>xiph/rav1e #2 in Assembly, Today</title><link>https://github.com/xiph/rav1e</link><description>&lt;p&gt;&lt;i&gt;The fastest and safest AV1 encoder.&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-rav1e----" class="anchor" aria-hidden="true" href="#rav1e----"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;rav1e &lt;a href="https://travis-ci.org/xiph/rav1e" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/cf5369dac6e2aa181e4161efdf47b446dd524f78/68747470733a2f2f7472617669732d63692e6f72672f786970682f72617631652e7376673f6272616e63683d6d6173746572" alt="Travis Build Status" data-canonical-src="https://travis-ci.org/xiph/rav1e.svg?branch=master" style="max-width:100%;"&gt;&lt;/a&gt; &lt;a href="https://ci.appveyor.com/project/tdaede/rav1e/history" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/caa4dc60c0d8d4460dda29f8891f4ebcb786841f/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6769746875622f786970682f72617631653f6272616e63683d6d6173746572267376673d74727565" alt="AppVeyor Build Status" data-canonical-src="https://ci.appveyor.com/api/projects/status/github/xiph/rav1e?branch=master&amp;amp;svg=true" style="max-width:100%;"&gt;&lt;/a&gt; &lt;a href="https://github.com/xiph/rav1e/actions"&gt;&lt;img src="https://github.com/xiph/rav1e/workflows/rav1e/badge.svg" alt="Actions Status" style="max-width:100%;"&gt;&lt;/a&gt; &lt;a href="https://coveralls.io/github/xiph/rav1e?branch=master" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/687a8e0c6b9fa1a58949e9de01b1cb82876b30f7/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f786970682f72617631652f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/xiph/rav1e/badge.svg?branch=master" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;The fastest and safest AV1 encoder.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-overview" class="anchor" aria-hidden="true" href="#overview"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Overview&lt;/h2&gt;
&lt;p&gt;rav1e is an AV1 video encoder. It is designed to eventually cover all use cases, though in its current form it is most suitable for cases where libaom (the reference encoder) is too slow.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-features" class="anchor" aria-hidden="true" href="#features"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Intra and inter frames&lt;/li&gt;
&lt;li&gt;64x64 superblocks&lt;/li&gt;
&lt;li&gt;4x4 to 64x64 RDO-selected square and 2:1/1:2 rectangular blocks&lt;/li&gt;
&lt;li&gt;DC, H, V, Paeth, smooth, and a subset of directional prediction modes&lt;/li&gt;
&lt;li&gt;DCT, (FLIP-)ADST and identity transforms (up to 64x64, 16x16 and 32x32 respectively)&lt;/li&gt;
&lt;li&gt;8-, 10- and 12-bit depth color&lt;/li&gt;
&lt;li&gt;4:2:0 (full support), 4:2:2 and 4:4:4 (limited) chroma sampling&lt;/li&gt;
&lt;li&gt;Variable speed settings&lt;/li&gt;
&lt;li&gt;Near real-time encoding at high speed levels&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-releases" class="anchor" aria-hidden="true" href="#releases"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Releases&lt;/h2&gt;
&lt;p&gt;For the foreseeable future, a weekly pre-release of rav1e will be &lt;a href="https://github.com/xiph/rav1e/releases"&gt;published&lt;/a&gt; every Tuesday.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-windows-builds" class="anchor" aria-hidden="true" href="#windows-builds"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Windows builds&lt;/h2&gt;
&lt;p&gt;Automated AppVeyor builds can be found &lt;a href="https://ci.appveyor.com/project/tdaede/rav1e/history" rel="nofollow"&gt;here&lt;/a&gt;. Click on a build (it is recommended you select a build based on "master"), then click ARTIFACTS to reveal the rav1e.exe download link.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-building" class="anchor" aria-hidden="true" href="#building"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Building&lt;/h2&gt;
&lt;p&gt;Some &lt;code&gt;x86_64&lt;/code&gt;-specific optimizations require a recent version of &lt;a href="https://nasm.us/" rel="nofollow"&gt;NASM&lt;/a&gt; and are enabled by default.&lt;/p&gt;
&lt;p&gt;In order to build, test and link to the codec with the default features on UNIX on &lt;code&gt;x86_64&lt;/code&gt;, you need NASM. To install this on Ubuntu or Linux Mint, run:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;sudo apt install nasm&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;On Windows, a &lt;a href="https://www.nasm.us/pub/nasm/releasebuilds/" rel="nofollow"&gt;NASM binary&lt;/a&gt; in your system PATH is required.&lt;/p&gt;
&lt;p&gt;To build release binary in &lt;code&gt;target/release/rav1e&lt;/code&gt; run:&lt;/p&gt;
&lt;div class="highlight highlight-source-batchfile"&gt;&lt;pre&gt;cargo build --release&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-target-specific-builds" class="anchor" aria-hidden="true" href="#target-specific-builds"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Target-specific builds&lt;/h3&gt;
&lt;p&gt;The rust autovectorizer can produce a binary that is about 6%-7% faster if it can use &lt;code&gt;avx2&lt;/code&gt; in the general code, you may allow it by issuing:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;RUSTFLAGS="-C target-cpu=native" cargo build --release
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;RUSTFLAGS="-C target-feature=+avx2,+fma" cargo build --release
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The resulting binary will not work on cpus that do not sport the same set of SIMD extensions enabled.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-building-the-c-api" class="anchor" aria-hidden="true" href="#building-the-c-api"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Building the C-API&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;rav1e&lt;/strong&gt; provides a C-compatible set of library, header and pkg-config file.&lt;/p&gt;
&lt;p&gt;To build and install it you can use &lt;a href="https://crates.io/crates/cargo-c" rel="nofollow"&gt;cargo-c&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;cargo install cargo-c
cargo cinstall --release&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-compressing-video" class="anchor" aria-hidden="true" href="#compressing-video"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Compressing video&lt;/h2&gt;
&lt;p&gt;Input videos must be in y4m format. The monochrome color format is not supported.&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;cargo run --release --bin rav1e -- input.y4m -o output.ivf&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-decompressing-video" class="anchor" aria-hidden="true" href="#decompressing-video"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Decompressing video&lt;/h2&gt;
&lt;p&gt;Encoder output should be compatible with any AV1 decoder compliant with the v1.0.0 specification. You can build compatible aomdec using the following:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;mkdir aom_test
&lt;span class="pl-c1"&gt;cd&lt;/span&gt; aom_test
cmake /path/to/aom -DAOM_TARGET_CPU=generic -DCONFIG_AV1_ENCODER=0 -DENABLE_TESTS=0 -DENABLE_DOCS=0 -DCONFIG_LOWBITDEPTH=1
make -j8
./aomdec ../output.ivf -o output.y4m&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-configuring" class="anchor" aria-hidden="true" href="#configuring"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Configuring&lt;/h2&gt;
&lt;p&gt;rav1e has several optional features that can be enabled by passing --features to cargo test. Passing --all-features is discouraged.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;asm - enabled by default. When enabled, assembly is built for the platforms supporting it.
&lt;ul&gt;
&lt;li&gt;It requires &lt;code&gt;nasm&lt;/code&gt; on &lt;code&gt;x86_64&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;It requires &lt;code&gt;gas&lt;/code&gt; on &lt;code&gt;aarch64&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: &lt;code&gt;SSE2&lt;/code&gt; is always enabled on &lt;code&gt;x86_64&lt;/code&gt;, &lt;code&gt;neon&lt;/code&gt; is always enabled for aarch64, you may set the environment variable &lt;code&gt;RAV1E_CPU_TARGET&lt;/code&gt; to &lt;code&gt;rust&lt;/code&gt; to disable all the assembly-optimized routines at the runtime.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-using-the-aomanalyzer" class="anchor" aria-hidden="true" href="#using-the-aomanalyzer"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Using the AOMAnalyzer&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-local-analyzer" class="anchor" aria-hidden="true" href="#local-analyzer"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Local Analyzer&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Download the &lt;a href="http://aomanalyzer.org" rel="nofollow"&gt;AOM Analyzer&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Download &lt;a href="https://people.xiph.org/~mbebenita/analyzer/inspect.js" rel="nofollow"&gt;inspect.js&lt;/a&gt; and &lt;a href="https://people.xiph.org/~mbebenita/analyzer/inspect.wasm" rel="nofollow"&gt;inspect.wasm&lt;/a&gt; and save them in the same directory.&lt;/li&gt;
&lt;li&gt;Run the analyzer: &lt;code&gt;AOMAnalyzer path_to_inspect.js output.ivf&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;&lt;a id="user-content-online-analyzer" class="anchor" aria-hidden="true" href="#online-analyzer"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Online Analyzer&lt;/h3&gt;
&lt;p&gt;If your &lt;code&gt;.ivf&lt;/code&gt; file is hosted somewhere (and CORS is enabled on your web server) you can use:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;https://arewecompressedyet.com/analyzer/?d=https://people.xiph.org/~mbebenita/analyzer/inspect.js&amp;amp;f=path_to_output.ivf
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;a id="user-content-design" class="anchor" aria-hidden="true" href="#design"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Design&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;src/context.rs - High-level functions that write symbols to the bitstream, and maintain context.&lt;/li&gt;
&lt;li&gt;src/ec.rs - Low-level implementation of the entropy coder, which directly writes the bitstream.&lt;/li&gt;
&lt;li&gt;src/lib.rs - The top level library, contains code to write headers, manage buffers, and iterate through each superblock.&lt;/li&gt;
&lt;li&gt;src/partition.rs - Functions and enums to manage partitions (subdivisions of a superblock).&lt;/li&gt;
&lt;li&gt;src/predict.rs - Intra prediction implementations.&lt;/li&gt;
&lt;li&gt;src/quantize.rs - Quantization and dequantization functions for coefficients.&lt;/li&gt;
&lt;li&gt;src/rdo.rs - RDO-related structures and distortion computation functions.&lt;/li&gt;
&lt;li&gt;src/transform/*.rs - Implementations of DCT and ADST transforms.&lt;/li&gt;
&lt;li&gt;src/util.rs - Misc utility code.&lt;/li&gt;
&lt;li&gt;src/bin/rav1e.rs - rav1e command line tool.&lt;/li&gt;
&lt;li&gt;src/bin/rav1erepl.rs - Command line tool for debugging.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-contributing" class="anchor" aria-hidden="true" href="#contributing"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contributing&lt;/h2&gt;
&lt;p&gt;Please read our guide to &lt;a href="CONTRIBUTING.md"&gt;contributing to rav1e&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-getting-in-touch" class="anchor" aria-hidden="true" href="#getting-in-touch"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Getting in Touch&lt;/h2&gt;
&lt;p&gt;Come chat with us on the IRC channel #daala on Freenode! If you don't have IRC set
up you can easily connect from your &lt;a href="http://webchat.freenode.net/?channels=%23daala" rel="nofollow"&gt;web browser&lt;/a&gt;.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>xiph</author><guid isPermaLink="false">https://github.com/xiph/rav1e</guid><pubDate>Thu, 06 Feb 2020 00:02:00 GMT</pubDate></item><item><title>n64decomp/oot #3 in Assembly, Today</title><link>https://github.com/n64decomp/oot</link><description>&lt;p&gt;&lt;i&gt;A decompilation of Ocarina of Time: Master Quest (debug) brought to you by a bunch of clever folks.&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-legend-of-zelda-ocarina-of-time-master-quest-debug" class="anchor" aria-hidden="true" href="#legend-of-zelda-ocarina-of-time-master-quest-debug"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Legend of Zelda: Ocarina of Time Master Quest (debug)&lt;/h1&gt;
&lt;div class="highlight highlight-source-diff"&gt;&lt;pre&gt;&lt;span class="pl-md"&gt;&lt;span class="pl-md"&gt;-&lt;/span&gt; WARNING! -&lt;/span&gt;

The ROM this repository builds while has a matching checksum cannot be 'shifted' due
to hardcoded pointers which have yet to be dumped. Thus this repository is currently
in an experimental and research phase and cannot currently be used traditionally as a
source code base for general changes.&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This repo does not include all assets necessary for compiling the ROM. A prior copy of the game is required to extract the required assets.&lt;/p&gt;
&lt;p&gt;This is a disassembly and decompilation of Legend of Zelda: Ocarina of Time Master Quest (debug)&lt;/p&gt;
&lt;p&gt;It builds the following ROM:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;zelda_ocarina_mq_dbg.z64 &lt;code&gt;md5: 717179476af84133b14ff73af87db57a&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Please refer to the Getting Started guide in the Wiki for setup instructions.&lt;/p&gt;
&lt;p&gt;Thanks to z64me and CrookedPoe for their actor documentation. &lt;a href="https://github.com/CrookedPoe/z64-rw"&gt;https://github.com/CrookedPoe/z64-rw&lt;/a&gt;&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>n64decomp</author><guid isPermaLink="false">https://github.com/n64decomp/oot</guid><pubDate>Thu, 06 Feb 2020 00:03:00 GMT</pubDate></item><item><title>z88dk/z88dk #4 in Assembly, Today</title><link>https://github.com/z88dk/z88dk</link><description>&lt;p&gt;&lt;i&gt;The development kit for over eighty z80 family machines - c compiler, assembler, linker, libraries.&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-z88dk---the-development-kit-for-z80-computers" class="anchor" aria-hidden="true" href="#z88dk---the-development-kit-for-z80-computers"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Z88DK - The Development Kit for Z80 Computers&lt;/h1&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="doc/images/windows.png"&gt;&lt;img src="doc/images/windows.png" alt="WinXP+" style="max-width:100%;"&gt;&lt;/a&gt; &lt;a target="_blank" rel="noopener noreferrer" href="doc/images/mac.png"&gt;&lt;img src="doc/images/mac.png" alt="MacOSX" style="max-width:100%;"&gt;&lt;/a&gt; &lt;a target="_blank" rel="noopener noreferrer" href="doc/images/linux.png"&gt;&lt;img src="doc/images/linux.png" alt="Linux and Other" style="max-width:100%;"&gt;&lt;/a&gt; &lt;a href="https://travis-ci.org/z88dk/z88dk" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/bb654cf077ea79c8bb384e54adc20deed9085445/68747470733a2f2f7472617669732d63692e6f72672f7a3838646b2f7a3838646b2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/z88dk/z88dk.svg?branch=master" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Z88DK is a collection of software development tools that targets the 8080 and z80 family of machines.  It allows development of programs in C, assembly language or any mixture of the two.  What makes z88dk unique is its ease of use, built-in support for many z80 machines and its extensive set of assembly language library subroutines implementing the C standard and extensions.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-the-tools" class="anchor" aria-hidden="true" href="#the-tools"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;THE TOOLS&lt;/h2&gt;
&lt;p&gt;Many tools have a &lt;code&gt; z88dk-&lt;/code&gt; prefix to distinguish them from tools from other packages that may be installed with the same name. The documentation
generally omits the prefix when referring to them.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ZCC&lt;/strong&gt; is the toolchain's front end.  zcc can generate an output binary out of any set of input source files.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SCCZ80&lt;/strong&gt; is z88dk's native c compiler.   sccz80 is derived from small c but has seen much development to the point that it is nearly c90 compliant.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ZSDCC&lt;/strong&gt; is z88dk's customization of the &lt;a href="https://sourceforge.net/projects/sdcc/" rel="nofollow"&gt;sdcc compiler&lt;/a&gt;.  &lt;a href="https://github.com/z88dk/z88dk/tree/master/src/zsdcc"&gt;Our patch&lt;/a&gt; makes sdcc compatible with the z88dk toolchain, gives it access to z88dk's extensive assembly language libraries and ready-made crts, addresses code generation bugs where present and improves on sdcc's generated code.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Z80ASM&lt;/strong&gt; (not to be confused with several external projects called z80asm) is a fully featured assembler / linker / librarian implementing sections.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Z80NM&lt;/strong&gt; is z80asm's companion archiver.  It can provide a listing of functions or data encoded in an object or library file.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;APPMAKE&lt;/strong&gt; processes the raw binaries generated by the toolkit into a form suitable for specific target machines.  For example, it can generate intel hex files, tapes, ROMs, etc.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Z88DK-TICKS&lt;/strong&gt; is a command line z80 emulator that can be used to time execution speed of code fragments. Ticks includes a debugger and disassembler in addition to supporting some of the ZX Next Z80N extension instructions.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Z88DK-DIS&lt;/strong&gt; is a command line disassembler for Z80, Z180, Z80N and Rabbit 2000/3000. It can additionally read map files generated by z80asm to provide a more symbolic output.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Z88DK-LIB&lt;/strong&gt; is an installer for third party libraries.  It manages installation, removal and listing of available libraries.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Z88DK-ZX7&lt;/strong&gt; is a PC-side optimal lz77 data compression tool with companion decompression functions in the z80 library.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Z88DK-DZX7&lt;/strong&gt; is a PC-side decompressor counterpart to zx7.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These tools are not normally directly invoked by the user:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;M4&lt;/strong&gt; acts as z88dk's macro preprocessor and can optionally process files ahead of the c preprocessor or assembler.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Z88DK-UCPP&lt;/strong&gt; is the c preprocessor invoked for sccz80.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ZSDCPP&lt;/strong&gt; is the c preprocessor invoked for zsdcc.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Z88DK-ZPRAGMA&lt;/strong&gt; is used by the toolchain to process pragmas embedded in c source.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Z88DK-COPT&lt;/strong&gt; is a regular expression engine that is used as peephole optimizer for sccz80 and as a post-processing tool for both sccz80 and zsdcc.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-benchmarks" class="anchor" aria-hidden="true" href="#benchmarks"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;BENCHMARKS&lt;/h2&gt;
&lt;p&gt;The assembly language libraries supplied by z88dk give it performance advantages over other z80 compilers.
(COMING)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Dhrystone 2.1&lt;/strong&gt;  Dhrystone was a common synthetic benchmark for measuring the integer performance of compilers in the 1980s until more modern benchmarks replaced it.  It attempts to simulate typical programs by executing a set of statements statistically determined from common programs.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pi&lt;/strong&gt;  Mainly measures 32-bit integer performance.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Sieve of Eratosthenes&lt;/strong&gt;  Popular benchmark for small machine compilers because just about everything is able to compile it.  As a benchmark it doesn't reveal much more than loop overhead.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Whetstone 1.2&lt;/strong&gt;  Whetstone is a common synthetic floating point benchmark.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Program Size&lt;/strong&gt;  Program size has great importance for small machines.  A collection of test programs were compiled for the common cp/m target and resulting binary sizes were compared.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;INSTALLATION&lt;/h2&gt;
&lt;p&gt;There are three ways to install z88dk.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Use the &lt;a href="https://github.com/z88dk/z88dk/tree/github/Readme#most-recent-official-release"&gt;Most Recent Official Release&lt;/a&gt; currently v1.99C dated 19 Jan 2019.  Follow these &lt;a href="https://github.com/z88dk/z88dk/wiki/installation"&gt;installation instructions&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Get the &lt;a href="http://nightly.z88dk.org/" rel="nofollow"&gt;Nightly Build&lt;/a&gt;.  Every night we build complete binary packages for windows and osx and generate source packages for everyone else.  The same &lt;a href="https://github.com/z88dk/z88dk/wiki/installation"&gt;installation instructions&lt;/a&gt; apply.  Using a nightly build means you can keep up with bugfixes and new features rather than having to wait an entire year for a release to occur.&lt;/li&gt;
&lt;li&gt;Use Github.  Using github will keep you up-to-date with the developers and will allow you to contribute to the project.  We do not store the z80 libraries or the binaries in the github repository.  Instead you will either have to build those things yourself or acquire them from the nightly build to have a working install.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The z88dk repository uses git submodules, these are not automatically downloaded by git by default so you will have to either adjust your clone line, or retrieve them manually. To clone with submodules use &lt;code&gt;git clone --recursive https://github.com/z88dk/z88dk.git&lt;/code&gt;. To add the submodules to an already existing clone use &lt;code&gt;git submodule update --init --recursive&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Installing the Z88DK Binaries&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Mac OSX&lt;/strong&gt; Download the nightly build for osx and copy the z88dk/bin directory to the same place in your z88dk tree.  If you would like to try building the binaries yourself, follow the Other instructions below.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Windows&lt;/strong&gt; Download the nightly build for win32 and copy the z88dk/bin directory to the same place in your z88dk tree.  You can also build the z88dk binaries yourself using the VS2015 solution found in z88dk/win32 however you should copy the nightly build initially so that various required dlls and some non-z88dk binaries are present.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Other&lt;/strong&gt; Build the binaries yourself by following these &lt;a href="https://www.z88dk.org/wiki/doku.php?id=temp:front#linux_unix" rel="nofollow"&gt;instructions&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Installing the Classic Lib Z80 Libraries&lt;/strong&gt;  If you installed the z88dk binaries following the Other instructions in (I) you should have also built the classic z80 libraries.  You can confirm this by checking that z88dk/lib/clibs contains about 138 .lib files.  Otherwise you can following one of these two methods:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Copy the classic lib library files&lt;/strong&gt; from any nightly build by copying the z88dk/lib/clibs directory to the same place in your z88dk tree.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Build the classic lib library from source&lt;/strong&gt;  Building the classic lib from source requires unix-like tools so windows users will need to use msys or cygwin.  Aside from that the process is simple.  After setting the environment variables as detailed below, open a shell, cd to z88dk/libsrc and enter "make -i" then "make install" followed by "make clean".&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Installing the New Lib Z80 Libraries&lt;/strong&gt;  If you installed the z88dk binaries following the Other instructions in (I) you should have also built the new z80 libraries.  You can confirm this by checking that z88dk/libsrc/_DEVELOPMENT/lib contains six .lib files in each of the subdirectories.  Otherwise you can following one of these two methods:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Copy the new lib library files&lt;/strong&gt; from any nightly build by copying the z88dk/libsrc/_DEVELOPMENT/lib tree to the same place in your z88dk tree.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Build the new lib library files from source&lt;/strong&gt;  After setting the environment variables as detailed below, open a command prompt, cd to z88dk/libsrc/_DEVELOPMENT and enter "Winmake all" for windows or "make" for other platforms.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We do not maintain the zsdcc or zsdcpp source code in the repository.  Instead zsdcc is built separately from a &lt;a href="https://github.com/z88dk/z88dk/tree/master/src/zsdcc"&gt;patched sdcc&lt;/a&gt;.  We supply the zsdcc and zsdcpp binaries for win32 and osx in the nightly build so if you are using win32 or osx and you copied z88dk/bin, you will already have zsdcc and zsdcpp installed.  Other users will have to build the zsdcc binary by following these &lt;a href="https://www.z88dk.org/wiki/doku.php?id=temp:front#sdcc1" rel="nofollow"&gt;instructions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The last step for installation is to set the ZCCCFG environment variable and your PATH appropriately.  You can find that information &lt;a href="https://github.com/z88dk/z88dk/wiki/installation"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To verify that the install was successful, try some test compiles from the examples directories in &lt;a href="https://github.com/z88dk/z88dk/tree/master/examples"&gt;z88dk/examples&lt;/a&gt; (classic c lib) and &lt;a href="https://github.com/z88dk/z88dk/tree/master/libsrc/_DEVELOPMENT/EXAMPLES"&gt;z88dk/libsrc/_DEVELOPMENT/EXAMPLES&lt;/a&gt; (new c lib).  Compile instructions most often appear as comments at the top of .c files.  Note that zsdcc compiles with optimization turned high can be slow.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-using-z88dk" class="anchor" aria-hidden="true" href="#using-z88dk"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;USING Z88DK&lt;/h2&gt;
&lt;p&gt;Unfortunately, like a lot of open source projects, we could use a lot of help with the documentation.&lt;/p&gt;
&lt;p&gt;Some things to know:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;There are &lt;a href="https://www.z88dk.org/wiki/doku.php?id=temp:front#z88dk_supports_two_c_compilers" rel="nofollow"&gt;two c compilers&lt;/a&gt; in z88dk.  Projects must be completely compiled with one compiler only.  Due to various &lt;a href="https://www.z88dk.org/wiki/doku.php?id=temp:front#limitations" rel="nofollow"&gt;differences&lt;/a&gt; the object files generated by the two compilers are &lt;a href="https://github.com/z88dk/z88dk/issues/15"&gt;not compatible&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;There are &lt;a href="https://www.z88dk.org/wiki/doku.php?id=temp:front#z88dk_contains_two_independent_c_libraries" rel="nofollow"&gt;two c libraries&lt;/a&gt; in z88dk.  These are referred to as the classic c library and the new c library.&lt;/li&gt;
&lt;li&gt;Thankfully there is only one assembler so we only need to deal with 2*2 combinations :)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When you form a compile line you must decide which compiler you will use and which c library you will link against.  You will make that decision based on which targets you want to compile for and what features you need.&lt;/p&gt;
&lt;p&gt;The classic c library is z88dk's original c library and it has crts that allow generation of programs for &lt;a href="https://github.com/z88dk/z88dk/wiki/Platform"&gt;80+ different z80 machines&lt;/a&gt;.  The level of support for each is historically determined by user interest.  &lt;a href="https://github.com/z88dk/z88dk/wiki"&gt;Documentation begins here&lt;/a&gt; and example programs can be found in &lt;a href="https://github.com/z88dk/z88dk/tree/master/examples"&gt;z88dk/examples&lt;/a&gt; with compile lines most often appearing at the top of .c files.&lt;/p&gt;
&lt;p&gt;The new c library is z88dk's rewrite aiming for a large subset of C11 conformance.  It directly supports eleven targets currently (&lt;a href="https://github.com/z88dk/z88dk/wiki/Platform---CPM"&gt;cpm&lt;/a&gt;, &lt;a href="https://github.com/wwarthen/RomWBW/blob/master/Doc/RomWBW%20Architecture.pdf"&gt;hbios&lt;/a&gt;, &lt;a href="https://rc2014.co.uk/" rel="nofollow"&gt;rc2014&lt;/a&gt;, &lt;a href="https://smallcomputercentral.wordpress.com/sc130-z180-motherboard/" rel="nofollow"&gt;scz180&lt;/a&gt;, &lt;a href="https://en.wikipedia.org/wiki/Master_System" rel="nofollow"&gt;sega master system&lt;/a&gt;, &lt;a href="https://hackaday.io/project/166921-v-tech-genius-leader-precomputer-hacking" rel="nofollow"&gt;vgl&lt;/a&gt;, &lt;a href="https://github.com/feilipu/yaz180"&gt;yaz180&lt;/a&gt;, z180, &lt;a href="https://www.z88dk.org/wiki/doku.php?id=libnew:target_embedded" rel="nofollow"&gt;z80&lt;/a&gt;, &lt;a href="https://en.wikipedia.org/wiki/ZX_Spectrum" rel="nofollow"&gt;zx spectrum&lt;/a&gt;, and &lt;a href="https://www.specnext.com/" rel="nofollow"&gt;zx spectrum next&lt;/a&gt;) but the &lt;a href="https://www.z88dk.org/wiki/doku.php?id=libnew:target_embedded" rel="nofollow"&gt;z80 target&lt;/a&gt; (aka embedded target) can also be used to compile programs for any z80 machine.  &lt;a href="https://www.z88dk.org/wiki/doku.php?id=temp:front" rel="nofollow"&gt;Documentation begins here&lt;/a&gt; and example programs can be found in &lt;a href="https://github.com/z88dk/z88dk/tree/master/libsrc/_DEVELOPMENT/EXAMPLES"&gt;z88dk/libsrc/_DEVELOPMENT/EXAMPLES&lt;/a&gt; with compile lines most often appearing at the top of .c files.  The documentation for the &lt;a href="https://www.z88dk.org/wiki/doku.php?id=libnew:target_embedded" rel="nofollow"&gt;z80 target&lt;/a&gt; gives an excellent overview of how the tools work.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-quick-links" class="anchor" aria-hidden="true" href="#quick-links"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;QUICK LINKS&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.z88dk.org/forum/" rel="nofollow"&gt;Z88DK Home Page&lt;/a&gt;
Includes a link to the nightly builds where you can get an up-to-date package.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/z88dk/z88dk/wiki/installation"&gt;Install Instructions&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.z88dk.org/forum/forums.php" rel="nofollow"&gt;Forum for Questions&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/z88dk/z88dk/issues"&gt;Bug Reporting&lt;/a&gt;
(old bugs in the forum)&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/z88dk/z88dk/wiki"&gt;Introduction to Compiling Using the Classic C Library&lt;/a&gt;
Examples in &lt;a href="https://github.com/z88dk/z88dk/tree/master/examples"&gt;z88dk/examples&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.z88dk.org/wiki/doku.php?id=temp:front" rel="nofollow"&gt;Introduction to Compiling Using the New C Library&lt;/a&gt;
Examples in &lt;a href="https://github.com/z88dk/z88dk/tree/master/libsrc/_DEVELOPMENT/EXAMPLES"&gt;z88dk/libsrc/_DEVELOPMENT/EXAMPLES&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.z88dk.org/wiki/doku.php?id=libnew:target_embedded" rel="nofollow"&gt;Compiling for Generic z80 Systems Using the New C Library&lt;/a&gt;
For any z80 computer, embedded or not.&lt;/p&gt;
&lt;p&gt;Using &lt;a href="https://github.com/RC2014Z80/RC2014/wiki/Using-Z88DK"&gt;z88dk with the rc2014 target&lt;/a&gt;, covers cpm, hbios, and rc2014 subtypes.&lt;/p&gt;
&lt;p&gt;Using &lt;a href="https://github.com/z88dk/z88dk/blob/master/doc/overview.md"&gt;z88dk with zx&lt;/a&gt;, covers the zx target, and by extension the zxn target.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>z88dk</author><guid isPermaLink="false">https://github.com/z88dk/z88dk</guid><pubDate>Thu, 06 Feb 2020 00:04:00 GMT</pubDate></item></channel></rss>