<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>GitHub Trending: Assembly, Today</title><link>https://github.com/trending/assembly?since=daily</link><description>The top repositories on GitHub for assembly, measured daily</description><pubDate>Fri, 24 Jan 2020 01:09:55 GMT</pubDate><lastBuildDate>Fri, 24 Jan 2020 01:09:55 GMT</lastBuildDate><generator>PyRSS2Gen-1.1.0</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><ttl>720</ttl><item><title>cirosantilli/x86-bare-metal-examples #1 in Assembly, Today</title><link>https://github.com/cirosantilli/x86-bare-metal-examples</link><description>&lt;p&gt;&lt;i&gt;Dozens of minimal operating systems to learn x86 system programming. Tested on Ubuntu 17.10 host in QEMU 2.10 and real hardware. Userland cheat at: https://github.com/cirosantilli/linux-kernel-module-cheat#userland-assembly ARM baremetal setup at: https://github.com/cirosantilli/linux-kernel-module-cheat#baremetal-setup&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="adoc" data-path="README.adoc"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-x86-bare-metal-examples" class="anchor" aria-hidden="true" href="#x86-bare-metal-examples"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;x86 Bare Metal Examples&lt;/h1&gt;
&lt;div id="user-content-preamble"&gt;
&lt;div&gt;
&lt;div&gt;
&lt;p&gt;Dozens of minimal operating systems to learn x86 system programming. Tested on Ubuntu 18.04 host in QEMU 2.11 and &lt;a href="#test-hardware"&gt;real hardware&lt;/a&gt;. Userland cheat at: &lt;a href="https://github.com/cirosantilli/linux-kernel-module-cheat#userland-assembly"&gt;https://github.com/cirosantilli/linux-kernel-module-cheat#userland-assembly&lt;/a&gt; ARM baremetal setup at: &lt;a href="https://github.com/cirosantilli/linux-kernel-module-cheat#baremetal-setup"&gt;https://github.com/cirosantilli/linux-kernel-module-cheat#baremetal-setup&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;&lt;a href="logo.jpg"&gt;&lt;span&gt;&lt;img src="logo.jpg" alt="logo" style="max-width:100%;"&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id="user-content-toc"&gt;
&lt;div id="user-content-toctitle"&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#getting-started"&gt;1. Getting started&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#getting-started-with-real-hardware"&gt;1.1. Getting started with real hardware&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#getting-started-with-the-big-image"&gt;1.1.1. Getting started with the big image&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#getting-started-with-docker"&gt;1.2. Getting started with Docker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#gdb-step-debug"&gt;1.3. GDB step debug&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#build-the-documentation-locally"&gt;1.4. Build the documentation locally&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#minimal-examples"&gt;2. Minimal examples&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#printf"&gt;2.1. Create a minimal image with printf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#minimal-gas-example"&gt;2.2. Minimal GAS example&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#infinite-loop"&gt;2.2.1. Infinite loop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#linker-script"&gt;2.2.2. Linker script&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#bios-hello-world"&gt;2.3. BIOS hello world&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#c-hello-world"&gt;2.3.1. C hello world&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#no-linker-script"&gt;2.4. No linker script&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#bios"&gt;3. BIOS&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#bios-documentation"&gt;3.1. BIOS documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#bios-examples"&gt;3.2. BIOS examples&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#bios-color"&gt;3.2.1. BIOS color&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#bios-scroll"&gt;3.2.2. BIOS scroll&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#bios-clear-screen"&gt;3.2.2.1. BIOS clear screen&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#bios-draw-pixel"&gt;3.2.3. BIOS draw pixel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#bios-keyboard"&gt;3.2.4. BIOS keyboard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#bios-disk-load"&gt;3.2.5. BIOS disk load&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#bios-detect-memory"&gt;3.2.6. BIOS detect memory&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#low-vs-high-memory"&gt;3.2.6.1. Low vs high memory&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#bios-sleep"&gt;3.2.7. BIOS sleep&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#bios-initial-state"&gt;3.2.8. BIOS initial state&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#dmidecode"&gt;3.3. dmidecode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#seabios"&gt;3.4. SeaBIOS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#no-bios"&gt;4. No BIOS&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#no-bios-hello-world"&gt;4.1. No BIOS hello world&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#modes-of-operation"&gt;5. Modes of operation&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#legacy-modes"&gt;5.1. Legacy modes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#real-mode"&gt;5.2. Real mode&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#real-mode-segmentation"&gt;5.2.1. Real mode segmentation&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#cs"&gt;5.2.1.1. CS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ss"&gt;5.2.1.2. SS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#es"&gt;5.2.1.3. ES&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#segment-register-encoding"&gt;5.2.1.4. Segment register encoding&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#interrupts"&gt;5.2.2. Interrupts&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#int"&gt;5.2.2.1. int&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#iret"&gt;5.2.2.2. iret&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#interrupt-service-routines"&gt;5.2.2.3. Interrupt service routines&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ivt"&gt;5.2.2.4. IVT&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#lidt"&gt;5.2.2.4.1. lidt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#protected-mode"&gt;5.3. Protected mode&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#intel-protected-mode-example"&gt;5.3.1. Intel protected mode example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#protected-mode-draw-pixel"&gt;5.3.2. Protected mode draw pixel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#protected-mode-segmentation"&gt;5.3.3. Protected mode segmentation&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#segmentation-introduction"&gt;5.3.3.1. Segmentation introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#segment-selector"&gt;5.3.3.2. Segment selector&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#gdt"&gt;5.3.3.3. GDT&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#local-descriptor-table"&gt;5.3.3.3.1. Local descriptor table&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#null-segment-selector"&gt;5.3.3.3.2. Null segment selector&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#segment-descriptor"&gt;5.3.3.4. Segment descriptor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#protection-rings"&gt;5.3.3.5. Protection rings&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#idt"&gt;5.3.4. IDT&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#idt-divide-by-zero"&gt;5.3.4.1. IDT divide by zero&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#smp"&gt;5.3.5. SMP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#paging"&gt;5.3.6. Paging&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#page-fault"&gt;5.3.6.1. Page fault&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#ia-32e-mode"&gt;5.4. IA-32e mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#64-bit-mode"&gt;5.5. 64-bit mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#compatibility-mode"&gt;5.6. Compatibility mode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#in-and-out-instructions"&gt;6. in and out instructions&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#memory-mapped-vs-port-mapped-io"&gt;6.1. Memory mapped vs port mapped IO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ps2-keyboard"&gt;6.2. PS/2 keyboard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ps2-mouse"&gt;6.3. PS/2 mouse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#rtc"&gt;6.4. RTC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pit"&gt;6.5. PIT&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#pit-frequency"&gt;6.5.1. PIT frequency&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#hpet"&gt;6.5.2. HPET&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pc-speaker"&gt;6.5.3. PC speaker&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#video-mode"&gt;7. Video mode&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#video-mode-13h"&gt;7.1. Video mode 13h&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#vga"&gt;7.2. VGA&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#power"&gt;8. Power&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#reboot"&gt;8.1. Reboot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#apm"&gt;8.2. APM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#acpi"&gt;8.3. ACPI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#uefi"&gt;9. UEFI&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#uefi-example"&gt;9.1. UEFI example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#uefi-bibliography"&gt;9.2. UEFI Bibliography&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#coreboot"&gt;10. Coreboot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#grub"&gt;11. GRUB&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#grub-chainloader"&gt;11.1. GRUB chainloader&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#grub-linux"&gt;11.2. GRUB linux&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#multiboot"&gt;12. Multiboot&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#multiboot-hello-world"&gt;12.1. Multiboot hello world&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#osdev-multiboot-hello-world"&gt;12.2. osdev multiboot hello world&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#tests"&gt;13. Tests&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#unit-tests"&gt;13.1. Unit tests&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#print_bytes"&gt;13.1.1. PRINT_BYTES&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pit_sleep_ticks"&gt;13.1.2. PIT_SLEEP_TICKS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#test-hardware"&gt;13.2. Test hardware&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#thinkpad-t400"&gt;13.2.1. ThinkPad T400&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#thinkpad-t430"&gt;13.2.2. ThinkPad T430&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#about"&gt;14. About&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#system-vs-userland"&gt;14.1. System vs userland&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#one-minimal-concept-per-os"&gt;14.2. One minimal concept per OS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#to-c-or-not-to-c"&gt;14.3. To C or not to C&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#serial-uart"&gt;14.4. Serial UART&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#macros-vs-functions"&gt;14.5. Macros vs functions&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#macro-conventions"&gt;14.5.1. Macro conventions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#nasm"&gt;14.6. NASM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#linux-is-open-source"&gt;14.7. Linux is open source&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pre-requisites"&gt;14.8. Pre-requisites&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#bibliography"&gt;15. Bibliography&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#intel-manual"&gt;15.1. Intel manual&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#small-educational-projects"&gt;15.2. Small educational projects&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#baremetal-games"&gt;15.2.1. Baremetal games&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#tutorials"&gt;15.3. Tutorials&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#educational-nixes"&gt;15.3.1. Educational NIXes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#educational-non-nixes"&gt;15.3.2. Educational non-NIXes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#multi-collaborator-websites"&gt;15.4. Multi collaborator websites&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#progressive-tutorials"&gt;15.5. Progressive tutorials&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#jamesmolloy"&gt;15.5.1. jamesmolloy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cfenollosaos-tutorial"&gt;15.5.2. cfenollosa/os-tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#samypessehow-to-make-a-computer-operating-system"&gt;15.5.3. SamyPesse/How-to-Make-a-Computer-Operating-System&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#other-progressive-tutorials"&gt;15.5.4. Other progressive tutorials&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#actually-useful"&gt;15.6. Actually useful&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#arm"&gt;15.7. ARM&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#license"&gt;16. LICENSE&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h2 id="user-content-getting-started"&gt;&lt;a id="user-content-1-getting-started" class="anchor" aria-hidden="true" href="#1-getting-started"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#getting-started"&gt;1. Getting started&lt;/a&gt;&lt;/h2&gt;
&lt;div&gt;
&lt;div&gt;
&lt;p&gt;First read this introduction: &lt;a href="https://stackoverflow.com/questions/22054578/how-to-run-a-program-without-an-operating-system/32483545#32483545" rel="nofollow"&gt;https://stackoverflow.com/questions/22054578/how-to-run-a-program-without-an-operating-system/32483545#32483545&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Then on Ubuntu:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;./configure
make&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Each &lt;code&gt;.S&lt;/code&gt; file on the top-level is an operating system! It gets compiled to a corresponding &lt;code&gt;.img&lt;/code&gt; file.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Run the default OS on QEMU:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;./run&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Run a given OS:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;./run bios_hello_world
./run bios_putc&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Examples described at:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#bios-examples"&gt;BIOS examples&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#bios-hello-world"&gt;BIOS hello world&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Extensions are ignored for perfect tab completion, so all the following are equivalent:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;./run min
./run min.
./run min.S
./run min.img&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Use Bochs instead of QEMU:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;./run bios_hello_world bochs&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Then on the terminal start the simulation with:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;c&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;To quit Bochs either:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;press the poweroff button inside its GUI&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ctrl + C on terminal and the type &lt;code&gt;quit&lt;/code&gt; and hit enter&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;TODO: automate this step.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Bibliography: &lt;a href="https://stackoverflow.com/questions/6142925/how-can-i-use-bochs-to-run-assembly-code/32871939#32871939" rel="nofollow"&gt;https://stackoverflow.com/questions/6142925/how-can-i-use-bochs-to-run-assembly-code/32871939#32871939&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h3 id="user-content-getting-started-with-real-hardware"&gt;&lt;a id="user-content-11-getting-started-with-real-hardware" class="anchor" aria-hidden="true" href="#11-getting-started-with-real-hardware"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#getting-started-with-real-hardware"&gt;1.1. Getting started with real hardware&lt;/a&gt;&lt;/h3&gt;
&lt;div&gt;
&lt;p&gt;Insert an USB, determine its device (&lt;code&gt;/dev/sdX&lt;/code&gt;) with:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;sudo lsblk
sudo fdisk -l&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Pick the &lt;code&gt;.img&lt;/code&gt; file that you wan to run and:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;sudo dd if=bios_hello_world.img of=/dev/sdX&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Then:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;insert the USB in a computer&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;during boot, hit some special hardware dependant key, usually F12, Esc&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;choose to boot from the USB&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;When you are done, just hit the power button to shutdown.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;For example, on my T430  I see the following.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;After turning on, this is when I have to press Enter to enter the boot menu:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/3bf548ed4f20d7c1198624fbb6ba726177ec1cf5/68747470733a2f2f75706c6f61642e77696b696d656469612e6f72672f77696b6970656469612f636f6d6d6f6e732f7468756d622f662f66352f4c656e6f766f5f5468696e6b5061645f543433305f554546495f42494f535f312e31365f73706c6173685f73637265656e2e6a70672f36343070782d4c656e6f766f5f5468696e6b5061645f543433305f554546495f42494f535f312e31365f73706c6173685f73637265656e2e6a7067"&gt;&lt;img src="https://camo.githubusercontent.com/3bf548ed4f20d7c1198624fbb6ba726177ec1cf5/68747470733a2f2f75706c6f61642e77696b696d656469612e6f72672f77696b6970656469612f636f6d6d6f6e732f7468756d622f662f66352f4c656e6f766f5f5468696e6b5061645f543433305f554546495f42494f535f312e31365f73706c6173685f73637265656e2e6a70672f36343070782d4c656e6f766f5f5468696e6b5061645f543433305f554546495f42494f535f312e31365f73706c6173685f73637265656e2e6a7067" alt="640px Lenovo ThinkPad T430 UEFI BIOS 1.16 splash screen" data-canonical-src="https://upload.wikimedia.org/wikipedia/commons/thumb/f/f5/Lenovo_ThinkPad_T430_UEFI_BIOS_1.16_splash_screen.jpg/640px-Lenovo_ThinkPad_T430_UEFI_BIOS_1.16_splash_screen.jpg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Then, here I have to press F12 to select the USB as the boot device:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/879c3bc42da6915ba2af0b7ab72014d269e0c327/68747470733a2f2f75706c6f61642e77696b696d656469612e6f72672f77696b6970656469612f636f6d6d6f6e732f7468756d622f362f36662f4c656e6f766f5f5468696e6b5061645f543433305f554546495f42494f535f312e31365f537461727475705f496e746572727570745f4d656e752e6a70672f36343070782d4c656e6f766f5f5468696e6b5061645f543433305f554546495f42494f535f312e31365f537461727475705f496e746572727570745f4d656e752e6a7067"&gt;&lt;img src="https://camo.githubusercontent.com/879c3bc42da6915ba2af0b7ab72014d269e0c327/68747470733a2f2f75706c6f61642e77696b696d656469612e6f72672f77696b6970656469612f636f6d6d6f6e732f7468756d622f362f36662f4c656e6f766f5f5468696e6b5061645f543433305f554546495f42494f535f312e31365f537461727475705f496e746572727570745f4d656e752e6a70672f36343070782d4c656e6f766f5f5468696e6b5061645f543433305f554546495f42494f535f312e31365f537461727475705f496e746572727570745f4d656e752e6a7067" alt="640px Lenovo ThinkPad T430 UEFI BIOS 1.16 Startup Interrupt Menu" data-canonical-src="https://upload.wikimedia.org/wikipedia/commons/thumb/6/6f/Lenovo_ThinkPad_T430_UEFI_BIOS_1.16_Startup_Interrupt_Menu.jpg/640px-Lenovo_ThinkPad_T430_UEFI_BIOS_1.16_Startup_Interrupt_Menu.jpg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;From there, I can select the USB as the boot device like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/25220f452e0c762b7914ed77993f619ca4f4523d/68747470733a2f2f75706c6f61642e77696b696d656469612e6f72672f77696b6970656469612f636f6d6d6f6e732f7468756d622f362f36382f4c656e6f766f5f5468696e6b5061645f543433305f554546495f42494f535f312e31365f426f6f745f4d656e752e6a70672f36343070782d4c656e6f766f5f5468696e6b5061645f543433305f554546495f42494f535f312e31365f426f6f745f4d656e752e6a7067"&gt;&lt;img src="https://camo.githubusercontent.com/25220f452e0c762b7914ed77993f619ca4f4523d/68747470733a2f2f75706c6f61642e77696b696d656469612e6f72672f77696b6970656469612f636f6d6d6f6e732f7468756d622f362f36382f4c656e6f766f5f5468696e6b5061645f543433305f554546495f42494f535f312e31365f426f6f745f4d656e752e6a70672f36343070782d4c656e6f766f5f5468696e6b5061645f543433305f554546495f42494f535f312e31365f426f6f745f4d656e752e6a7067" alt="640px Lenovo ThinkPad T430 UEFI BIOS 1.16 Boot Menu" data-canonical-src="https://upload.wikimedia.org/wikipedia/commons/thumb/6/68/Lenovo_ThinkPad_T430_UEFI_BIOS_1.16_Boot_Menu.jpg/640px-Lenovo_ThinkPad_T430_UEFI_BIOS_1.16_Boot_Menu.jpg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Alternatively, to change the boot order and choose the USB to have higher precedence so I don’t have to manually select it every time, I would hit F1 on the "Startup Interrupt Menu" screen, and then navigate to:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/8b19cd1c7e2ba1b9609eec3d9cbc176d9b8db7d7/68747470733a2f2f75706c6f61642e77696b696d656469612e6f72672f77696b6970656469612f636f6d6d6f6e732f7468756d622f372f37302f4c656e6f766f5f5468696e6b5061645f543433305f554546495f42494f535f312e31365f626f6f745f6f726465725f6d656e752e6a70672f36343070782d4c656e6f766f5f5468696e6b5061645f543433305f554546495f42494f535f312e31365f626f6f745f6f726465725f6d656e752e6a7067"&gt;&lt;img src="https://camo.githubusercontent.com/8b19cd1c7e2ba1b9609eec3d9cbc176d9b8db7d7/68747470733a2f2f75706c6f61642e77696b696d656469612e6f72672f77696b6970656469612f636f6d6d6f6e732f7468756d622f372f37302f4c656e6f766f5f5468696e6b5061645f543433305f554546495f42494f535f312e31365f626f6f745f6f726465725f6d656e752e6a70672f36343070782d4c656e6f766f5f5468696e6b5061645f543433305f554546495f42494f535f312e31365f626f6f745f6f726465725f6d656e752e6a7067" alt="640px Lenovo ThinkPad T430 UEFI BIOS 1.16 boot order menu" data-canonical-src="https://upload.wikimedia.org/wikipedia/commons/thumb/7/70/Lenovo_ThinkPad_T430_UEFI_BIOS_1.16_boot_order_menu.jpg/640px-Lenovo_ThinkPad_T430_UEFI_BIOS_1.16_boot_order_menu.jpg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;See also: &lt;a href="#test-hardware"&gt;Test hardware&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h4 id="user-content-getting-started-with-the-big-image"&gt;&lt;a id="user-content-111-getting-started-with-the-big-image" class="anchor" aria-hidden="true" href="#111-getting-started-with-the-big-image"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#getting-started-with-the-big-image"&gt;1.1.1. Getting started with the big image&lt;/a&gt;&lt;/h4&gt;
&lt;div&gt;
&lt;p&gt;Create a &lt;code&gt;big.img&lt;/code&gt; that contains all examples that can be booted from GRUB:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;make big.img&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Now if you do:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;sudo dd if=big.img of=/dev/sdX&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;you can test several examples with a single USB burn, which is much faster.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;You can also try out the big image on QEMU for fun with:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;qemu-system-i386 -hda big.img&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;You will also want to change the boot order to put the USB first from the F12 BIOS menu. This way you don’t have to hit F12 like a madman every time.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;TODO: boot sectors that load STAGE2 are not working with the big image chainloader. TODO why?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h3 id="user-content-getting-started-with-docker"&gt;&lt;a id="user-content-12-getting-started-with-docker" class="anchor" aria-hidden="true" href="#12-getting-started-with-docker"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#getting-started-with-docker"&gt;1.2. Getting started with Docker&lt;/a&gt;&lt;/h3&gt;
&lt;div&gt;
&lt;p&gt;If you don’t have an Ubuntu box, this is an easy alternative, for the first run:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;sudo docker run --interactive --tty --name xbme --net=host ubuntu:18.04 bash&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;and the following runs:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;sudo docker start xbme
sudo docker exec --interactive --tty xbme bash
sudo docker stop xbme&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;and to nuke the container later on:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;# sudo docker rm xbme&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Then proceed normally in the guest: install packages, and build:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;apt-get update &amp;amp;&amp;amp; \
apt-get install -y git &amp;amp;&amp;amp; \
git clone https://github.com/cirosantilli/x86-bare-metal-examples &amp;amp;&amp;amp; \
cd x86-bare-metal-examples &amp;amp;&amp;amp; \
./configure -y &amp;amp;&amp;amp; \
make&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;To overcome the lack of GUI, we can use QEMU’s VNC implementation instead of the default SDL, which is visible on the host due to &lt;code&gt;--net=host&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;./run bios_hello_world run -vnc :0&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;and then on host:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;sudo apt-get install vinagre
vinagre localhost:5900&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;TODO: get sound working from docker: &lt;a href="#pc-speaker"&gt;PC speaker&lt;/a&gt;: &lt;a href="https://stackoverflow.com/questions/41083436/how-to-play-sound-in-a-docker-container" rel="nofollow"&gt;https://stackoverflow.com/questions/41083436/how-to-play-sound-in-a-docker-container&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;It should also be possible to run a GUI inside the container, but I haven’t tested: &lt;a href="https://stackoverflow.com/questions/40658095/how-to-open-ubuntu-gui-inside-a-docker-image/57636624#57636624" rel="nofollow"&gt;https://stackoverflow.com/questions/40658095/how-to-open-ubuntu-gui-inside-a-docker-image/57636624#57636624&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h3 id="user-content-gdb-step-debug"&gt;&lt;a id="user-content-13-gdb-step-debug" class="anchor" aria-hidden="true" href="#13-gdb-step-debug"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#gdb-step-debug"&gt;1.3. GDB step debug&lt;/a&gt;&lt;/h3&gt;
&lt;div&gt;
&lt;p&gt;To GDB step debug the program, run it with:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;./run bios_hello_world debug&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;This will leave you at the very first instruction executed by our program, which is the beginning of our &lt;code&gt;BEGIN&lt;/code&gt; macro.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Note however that this is not the very first instruction QEMU executes: that will actually be BIOS setup code that runs before our program itself.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;You can then basically debug as you would a normal userland program, notably:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;I then highly recommend that you use &lt;a href="https://github.com/cyrus-and/gdb-dashboard"&gt;GDB Dashboard&lt;/a&gt; to see what is going on.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;n&lt;/code&gt; skips over macros&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ni&lt;/code&gt; steps within macros. But you will need to enable the printing of assembly code on GDB Dashboard to see where you are at&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;With this God-like GDB Dashboard setup, at 89cbe7be83f164927caebc9334bc42990e499cb1 I see a perfect program view such as:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt; 1 /* https://github.com/cirosantilli/x86-bare-metal-examples#bios-hello-world */
 2
 3 #include "common.h"
 4 BEGIN
 5     mov $msg, %si
 6     mov $0x0e, %ah
 7 loop:
 8     lodsb
 9     or %al, %al
10     jz halt
11     int $0x10
12     jmp loop
─── Assembly ────────────────────────────────────────────────────────────────────────────
0x00007c00 __start+0  cli
0x00007c01 __start+1  ljmp   $0xc031,$0x7c06
0x00007c08 __start+8  mov    %eax,%ds
0x00007c0a __start+10 mov    %eax,%es
0x00007c0c __start+12 mov    %eax,%fs
0x00007c0e __start+14 mov    %eax,%gs
0x00007c10 __start+16 mov    %eax,%ebp
0x00007c12 __start+18 mov    %eax,%ss
0x00007c14 __start+20 mov    %ebp,%esp
─── Registers ───────────────────────────────────────────────────────────────────────────
   eax 0x0000aa55    ecx 0x00000000    edx 0x00000080    ebx 0x00000000    esp 0x00006f04
   ebp 0x00000000    esi 0x00000000    edi 0x00000000    eip 0x00007c00 eflags [ IF ]
    cs 0x00000000     ss 0x00000000     ds 0x00000000     es 0x00000000     fs 0x00000000
    gs 0x00000000
─── Stack ───────────────────────────────────────────────────────────────────────────────
[0] from 0x00007c00 in __start+0 at bios_hello_world.S:4
(no arguments)
─────────────────────────────────────────────────────────────────────────────────────────
&amp;gt;&amp;gt;&amp;gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Debug symbols are obtained by first linking ELF files, and then using &lt;code&gt;objcopy&lt;/code&gt; on them to generate the final image. We then pass the ELF files with the debug information to GDB:  &lt;a href="https://stackoverflow.com/questions/32955887/how-to-disassemble-16-bit-x86-boot-sector-code-in-gdb-with-x-i-pc-it-gets-tr/32960272#32960272" rel="nofollow"&gt;https://stackoverflow.com/questions/32955887/how-to-disassemble-16-bit-x86-boot-sector-code-in-gdb-with-x-i-pc-it-gets-tr/32960272#32960272&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;How to step over &lt;code&gt;int&lt;/code&gt; calls: &lt;a href="http://stackoverflow.com/questions/24491516/how-to-step-over-interrupt-calls-when-debugging-a-bootloader-bios-with-gdb-and-q" rel="nofollow"&gt;http://stackoverflow.com/questions/24491516/how-to-step-over-interrupt-calls-when-debugging-a-bootloader-bios-with-gdb-and-q&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Single stepping until a given opcode can be helpful sometimes: &lt;a href="https://stackoverflow.com/questions/14031930/break-on-instruction-with-specific-opcode-in-gdb/31249378#31249378" rel="nofollow"&gt;https://stackoverflow.com/questions/14031930/break-on-instruction-with-specific-opcode-in-gdb/31249378#31249378&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;TODO: detect if we are on 16 or 32 bit automatically from control registers. Now I’m using 2 functions &lt;code&gt;16&lt;/code&gt; and &lt;code&gt;32&lt;/code&gt; to switch manually, but that sucks. The problem is that it’s not possible to read them directly: &lt;a href="http://stackoverflow.com/a/31340294/895245" rel="nofollow"&gt;http://stackoverflow.com/a/31340294/895245&lt;/a&gt; If we had &lt;code&gt;cr0&lt;/code&gt;, it would be easy to do with an &lt;code&gt;if cr0 &amp;amp; 1&lt;/code&gt; inside a hook-stop.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;TODO: Take segmentation offsets into account: &lt;a href="http://stackoverflow.com/questions/10354063/how-to-use-a-logical-address-in-gdb" rel="nofollow"&gt;http://stackoverflow.com/questions/10354063/how-to-use-a-logical-address-in-gdb&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h3 id="user-content-build-the-documentation-locally"&gt;&lt;a id="user-content-14-build-the-documentation-locally" class="anchor" aria-hidden="true" href="#14-build-the-documentation-locally"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#build-the-documentation-locally"&gt;1.4. Build the documentation locally&lt;/a&gt;&lt;/h3&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;make doc
xdg-open README.html&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h2 id="user-content-minimal-examples"&gt;&lt;a id="user-content-2-minimal-examples" class="anchor" aria-hidden="true" href="#2-minimal-examples"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#minimal-examples"&gt;2. Minimal examples&lt;/a&gt;&lt;/h2&gt;
&lt;div&gt;
&lt;div&gt;
&lt;p&gt;These are the first ones you should look at.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h3 id="user-content-printf"&gt;&lt;a id="user-content-21-create-a-minimal-image-with-printf" class="anchor" aria-hidden="true" href="#21-create-a-minimal-image-with-printf"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#printf"&gt;2.1. Create a minimal image with printf&lt;/a&gt;&lt;/h3&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;make -C printf run&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Outcome: QEMU window opens up, prints a few boot messages, and hangs.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Our program itself does not print anything to the screen itself, just makes the CPU halt.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;This example is generated with &lt;code&gt;printf&lt;/code&gt; byte by byte: you can’t get more minimal than this!&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;It basically consists of:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;byte 0: a &lt;code&gt;hlt&lt;/code&gt; instruction&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;bytes 1 through 509: zeroes, could be anything&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;bytes 510 and 511: mandatory magic bytes &lt;code&gt;0xAA55&lt;/code&gt;, which are required for BIOS to consider our disk.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h3 id="user-content-minimal-gas-example"&gt;&lt;a id="user-content-22-minimal-gas-example" class="anchor" aria-hidden="true" href="#22-minimal-gas-example"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#minimal-gas-example"&gt;2.2. Minimal GAS example&lt;/a&gt;&lt;/h3&gt;
&lt;div&gt;
&lt;p&gt;Minimal example that just halts the CPU without using our mini-library &lt;a href="common.h"&gt;common.h&lt;/a&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;./run min&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Source: &lt;a href="min.S"&gt;min.S&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Outcome: QEMU window opens up, prints a few firmware messages, and hangs.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Here is an equivalent example using our mini-library:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;./run template&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Source: &lt;a href="template.S"&gt;template.S&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;You can use that file as a quick template to start new tests.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h4 id="user-content-infinite-loop"&gt;&lt;a id="user-content-221-infinite-loop" class="anchor" aria-hidden="true" href="#221-infinite-loop"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#infinite-loop"&gt;2.2.1. Infinite loop&lt;/a&gt;&lt;/h4&gt;
&lt;div&gt;
&lt;p&gt;Go into an infinite loop instead of using &lt;code&gt;hlt&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;./run infinite_loop&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Source: &lt;a href="infinite_loop.S"&gt;infinite_loop.S&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;The outcome if visibly the same, but TODO: it likely wastes more energy in real hardware?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h4 id="user-content-linker-script"&gt;&lt;a id="user-content-222-linker-script" class="anchor" aria-hidden="true" href="#222-linker-script"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#linker-script"&gt;2.2.2. Linker script&lt;/a&gt;&lt;/h4&gt;
&lt;div&gt;
&lt;p&gt;This hello world, and most of our OSes use the linker script: &lt;a href="linker.ld"&gt;linker.ld&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;This critical file determines the memory layout of our assembly, take some time to read the comments in that file and familiarize yourself with it.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;The Linux kernel also uses linker scripts to setup its image memory layout, see for example: &lt;a href="https://github.com/torvalds/linux/blob/v4.2/arch/x86/boot/setup.ld"&gt;https://github.com/torvalds/linux/blob/v4.2/arch/x86/boot/setup.ld&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h3 id="user-content-bios-hello-world"&gt;&lt;a id="user-content-23-bios-hello-world" class="anchor" aria-hidden="true" href="#23-bios-hello-world"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#bios-hello-world"&gt;2.3. BIOS hello world&lt;/a&gt;&lt;/h3&gt;
&lt;div&gt;
&lt;p&gt;Print &lt;code&gt;hello world&lt;/code&gt; after the firmware messages:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;./run bios_hello_world&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Source: &lt;a href="bios_hello_world.S"&gt;bios_hello_world.S&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h4 id="user-content-c-hello-world"&gt;&lt;a id="user-content-231-c-hello-world" class="anchor" aria-hidden="true" href="#231-c-hello-world"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#c-hello-world"&gt;2.3.1. C hello world&lt;/a&gt;&lt;/h4&gt;
&lt;div&gt;
&lt;p&gt;Same output as &lt;a href="#bios-hello-world"&gt;BIOS hello world&lt;/a&gt;, but written in C:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;cd c_hello_world
./run&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Source: &lt;a href="c_hello_world/"&gt;c_hello_world/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;But keep in mind the following limitations and difficulties:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;single stage, so still limited to 512 bytes of code + data! TODO: it should be easy to solve that with &lt;a href="#bios-disk-load"&gt;BIOS disk load&lt;/a&gt;, send a pull request :-) Here is full example that we could also adapt: &lt;a href="http://3zanders.co.uk/2017/10/18/writing-a-bootloader3" rel="nofollow"&gt;http://3zanders.co.uk/2017/10/18/writing-a-bootloader3&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;use use GCC’s &lt;code&gt;-m&lt;/code&gt; which does not produce "real" 16 bit code, but rather 32-bit code with &lt;code&gt;0x66&lt;/code&gt; and &lt;code&gt;0x67&lt;/code&gt; prefixes: &lt;a href="https://wiki.osdev.org/X86-64_Instruction_Encoding#Legacy_Prefixes" rel="nofollow"&gt;https://wiki.osdev.org/X86-64_Instruction_Encoding#Legacy_Prefixes&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;setting up the initial state and the linker script is much harder and error prone than with assembly&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Therefore, for most applications, you will just want to use &lt;a href="#multiboot"&gt;Multiboot&lt;/a&gt; instead, which overcomes all of those problems.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;To disassemble the generated C code, try:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;objdump -D -m i8086 main.elf&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;but note that it still contains references to 32-bit references, e.g.:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;00007c17 &amp;lt;main&amp;gt;:
    7c17:       66 55                   push   %ebp
    7c19:       66 89 e5                mov    %esp,%ebp
    7c1c:       66 83 ec 10             sub    $0x10,%esp&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;This is because those instructions are modified by the prefix &lt;code&gt;0x66&lt;/code&gt;, which makes them behave like 32-bit.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h3 id="user-content-no-linker-script"&gt;&lt;a id="user-content-24-no-linker-script" class="anchor" aria-hidden="true" href="#24-no-linker-script"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#no-linker-script"&gt;2.4. No linker script&lt;/a&gt;&lt;/h3&gt;
&lt;div&gt;
&lt;p&gt;Print &lt;code&gt;hello world&lt;/code&gt; without using an explicit linker script:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;make -C no-linker-script run&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Sources:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="no-linker-script/Makefile"&gt;no-linker-script/Makefile&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="no-linker-script/main.S"&gt;no-linker-script/main.S&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Uses the default host &lt;code&gt;ld&lt;/code&gt; script, not an explicit one set with &lt;code&gt;-T&lt;/code&gt;. Uses:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-tText&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;.org&lt;/code&gt; inside each assembly file&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;_start&lt;/code&gt; must be present to avoid a warning, since the default linker script expects it&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;This is a hack, it can be more convenient for quick and dirty tests, but just don’t use it.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h2 id="user-content-bios"&gt;&lt;a id="user-content-3-bios" class="anchor" aria-hidden="true" href="#3-bios"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#bios"&gt;3. BIOS&lt;/a&gt;&lt;/h2&gt;
&lt;div&gt;
&lt;div&gt;
&lt;p&gt;The BIOS is one of the most well known firmwares in existence.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;A firmware is a software a software that:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;runs before the OS / bootloader to do very low level setup&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;usually closed source, provided by the vendor, and interacts with undocumented hardware APIs&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;offers an API to the OS / bootloader, that allows you to do things like quick and dirty IO&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;undistinguishable from an OS, except that is it usually smaller&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;BIOS is old, non-standardized, x86 omnipresent and limited.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;&lt;a href="#uefi"&gt;UEFI&lt;/a&gt; is the shiny new overbloated thing.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;If you are making a serious OS, use it as little as possible.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;BIOS Can only be used in &lt;a href="#real-mode"&gt;Real mode&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;BIOS functions are all accessed through the &lt;code&gt;int&lt;/code&gt; instruction:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;mov &amp;lt;function-id&amp;gt;, %ah
int &amp;lt;interrupt-id&amp;gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Function arguments are stored in other registers.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;The interrupt IDs are traditionally in hex as:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;10h&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;which is the same as &lt;code&gt;0x10&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Each &lt;code&gt;interrupt-id&lt;/code&gt; groups multiple functions with similar functions, e.g. &lt;code&gt;10h&lt;/code&gt; groups functions with video related functionality.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Bibliography:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/BIOS" rel="nofollow"&gt;https://en.wikipedia.org/wiki/BIOS&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://wiki.osdev.org/BIOS" rel="nofollow"&gt;http://wiki.osdev.org/BIOS&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h3 id="user-content-bios-documentation"&gt;&lt;a id="user-content-31-bios-documentation" class="anchor" aria-hidden="true" href="#31-bios-documentation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#bios-documentation"&gt;3.1. BIOS documentation&lt;/a&gt;&lt;/h3&gt;
&lt;div&gt;
&lt;p&gt;Does any official documentation or standardization exist?&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/BIOS_interrupt_call#Interrupt_table" rel="nofollow"&gt;https://en.wikipedia.org/wiki/BIOS_interrupt_call#Interrupt_table&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.ctyme.com/intr/int.htm" rel="nofollow"&gt;http://www.ctyme.com/intr/int.htm&lt;/a&gt; Ralf Brown’s Interrupt List. Everyone says that this is the ultimate unofficial compilation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/INT_10H" rel="nofollow"&gt;https://en.wikipedia.org/wiki/INT_10H&lt;/a&gt; good quick summary&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.scs.stanford.edu/nyu/04fa/lab/specsbbs101.pdf" rel="nofollow"&gt;http://www.scs.stanford.edu/nyu/04fa/lab/specsbbs101.pdf&lt;/a&gt; says little about interrupts, I don’t understand it’s scope.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h3 id="user-content-bios-examples"&gt;&lt;a id="user-content-32-bios-examples" class="anchor" aria-hidden="true" href="#32-bios-examples"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#bios-examples"&gt;3.2. BIOS examples&lt;/a&gt;&lt;/h3&gt;
&lt;div&gt;
&lt;p&gt;Print a single &lt;code&gt;@&lt;/code&gt; character:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;./run bios_putc&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Source: &lt;a href="bios_putc.S"&gt;bios_putc.S&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Print a newline:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;./run bios_newline&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Source: &lt;a href="bios_newline.S"&gt;bios_newline.S&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Outcome:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;hello
     world&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Carriage returns are needed just like in old days:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;./run bios_carriage_return&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Source: &lt;a href="bios_carriage_return.S"&gt;bios_carriage_return.S&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Outcome:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;hello
world&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Change the current cursor position:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;./run bios_cursor_position&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Source: &lt;a href="bios_cursor_position.S"&gt;bios_cursor_position.S&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Outcome:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;cb&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h4 id="user-content-bios-color"&gt;&lt;a id="user-content-321-bios-color" class="anchor" aria-hidden="true" href="#321-bios-color"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#bios-color"&gt;3.2.1. BIOS color&lt;/a&gt;&lt;/h4&gt;
&lt;div&gt;
&lt;p&gt;Color codes: &lt;a href="https://en.wikipedia.org/wiki/BIOS_color_attributes" rel="nofollow"&gt;https://en.wikipedia.org/wiki/BIOS_color_attributes&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Write a character N times with given color:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;./run bios_color&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Source: &lt;a href="bios_color.S"&gt;bios_color.S&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Outcome:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;bcd&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;where:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;b&lt;/code&gt; and &lt;code&gt;c&lt;/code&gt; have red foreground, and green background&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;d&lt;/code&gt; has the default color (gray on black)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Change the background color to red for the entire screen and print an &lt;code&gt;a&lt;/code&gt; character:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;./run bios_background&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Source: &lt;a href="bios_background.S"&gt;bios_background.S&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h4 id="user-content-bios-scroll"&gt;&lt;a id="user-content-322-bios-scroll" class="anchor" aria-hidden="true" href="#322-bios-scroll"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#bios-scroll"&gt;3.2.2. BIOS scroll&lt;/a&gt;&lt;/h4&gt;
&lt;div&gt;
&lt;p&gt;Scroll the screen:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;./run bios_scroll&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Source: &lt;a href="bios_scroll.S"&gt;bios_scroll.S&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Outcome:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;a
  c
 GG
   d&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;where &lt;code&gt;G&lt;/code&gt; are empty green squares.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;How it works:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Before scroll:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;a
 b
  c
   d&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;We then choose to act on the rectangle with corners (1, 1) and (2, 2) given by &lt;code&gt;cx&lt;/code&gt; and &lt;code&gt;dx&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;a
 XX
 YY
   d&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;and scroll that rectangle up by one line.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;&lt;code&gt;Y&lt;/code&gt; is then filled with the fill color green&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h5 id="user-content-bios-clear-screen"&gt;&lt;a id="user-content-3221-bios-clear-screen" class="anchor" aria-hidden="true" href="#3221-bios-clear-screen"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#bios-clear-screen"&gt;3.2.2.1. BIOS clear screen&lt;/a&gt;&lt;/h5&gt;
&lt;div&gt;
&lt;p&gt;Subset of scroll:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;./run bios_clear_screen&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Source: &lt;a href="bios_clear_screen.S"&gt;bios_clear_screen.S&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Outcome:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;b&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;on red foreground, and the entire screen in green background, without any initial SeaBIOS messages.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h4 id="user-content-bios-draw-pixel"&gt;&lt;a id="user-content-323-bios-draw-pixel" class="anchor" aria-hidden="true" href="#323-bios-draw-pixel"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#bios-draw-pixel"&gt;3.2.3. BIOS draw pixel&lt;/a&gt;&lt;/h4&gt;
&lt;div&gt;
&lt;p&gt;Make the pixel at position (1, 1) clear red color (0Ch) in &lt;a href="#video-mode-13h"&gt;Video mode 13h&lt;/a&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;./run bios_pixel&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Source: &lt;a href="bios_pixel.S"&gt;bios_pixel.S&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;You may have to look a bit hard to see it.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Draw a line of such pixels:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;./run bios_pixel_line&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Source: &lt;a href="bios_pixel_line.S"&gt;bios_pixel_line.S&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Advanced graphics!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h4 id="user-content-bios-keyboard"&gt;&lt;a id="user-content-324-bios-keyboard" class="anchor" aria-hidden="true" href="#324-bios-keyboard"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#bios-keyboard"&gt;3.2.4. BIOS keyboard&lt;/a&gt;&lt;/h4&gt;
&lt;div&gt;
&lt;p&gt;Get one character from the user via the keyboard, increment it by one, and print it to the screen, then halt:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;./run bios_keyboard&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Source: &lt;a href="bios_keyboard.S"&gt;bios_keyboard.S&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Type a bunch of characters and see them appear on the screen:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;./run bios_keyboard_loop&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Source: &lt;a href="bios_keyboard_loop.S"&gt;bios_keyboard_loop.S&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Do try &lt;code&gt;Ctrl-key&lt;/code&gt; combinations.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Bibliography: &lt;a href="https://stackoverflow.com/questions/4113250/how-to-handle-keyboard-in-real-mode-through-bios-interrupts/32682518#32682518" rel="nofollow"&gt;https://stackoverflow.com/questions/4113250/how-to-handle-keyboard-in-real-mode-through-bios-interrupts/32682518#32682518&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h4 id="user-content-bios-disk-load"&gt;&lt;a id="user-content-325-bios-disk-load" class="anchor" aria-hidden="true" href="#325-bios-disk-load"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#bios-disk-load"&gt;3.2.5. BIOS disk load&lt;/a&gt;&lt;/h4&gt;
&lt;div&gt;
&lt;p&gt;Load a stage 2 from disk with &lt;code&gt;int 13h&lt;/code&gt; and run it:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;./run bios_disk_load&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Source: &lt;a href="bios_disk_load.S"&gt;bios_disk_load.S&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Outcome:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;a&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;This character was printed from stage 2.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Load two sectors instead of just one:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;./run bios_disk_load2&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Source: &lt;a href="bios_disk_load2.S"&gt;bios_disk_load2.S&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Outcome:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;ab&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;where &lt;code&gt;a&lt;/code&gt; was printed from code on the first block, and &lt;code&gt;b&lt;/code&gt; from code on the second block.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;This shows that each sector is 512 bytes long.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;GRUB 2.0 makes several calls to it under &lt;code&gt;grub-core/boot/i386/pc&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;TODO: not working on Bochs: &lt;code&gt;BOUND_GdMa: fails bounds test&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;But it does work on QEMU and &lt;a href="#thinkpad-t400"&gt;ThinkPad T400&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Bibliography:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/INT_13H" rel="nofollow"&gt;https://en.wikipedia.org/wiki/INT_13H&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://wiki.osdev.org/ATA_in_x86_RealMode_%28BIOS%29" rel="nofollow"&gt;http://wiki.osdev.org/ATA_in_x86_RealMode_%28BIOS%29&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://thiscouldbebetter.wordpress.com/2011/03/15/creating-a-bootable-program-in-assembly-language/" rel="nofollow"&gt;https://thiscouldbebetter.wordpress.com/2011/03/15/creating-a-bootable-program-in-assembly-language/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/19381434/cannot-read-disk-sectors-in-assembly-language" rel="nofollow"&gt;http://stackoverflow.com/questions/19381434/cannot-read-disk-sectors-in-assembly-language&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/15497842/read-a-sector-from-hard-drive-with-int-13h" rel="nofollow"&gt;http://stackoverflow.com/questions/15497842/read-a-sector-from-hard-drive-with-int-13h&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h4 id="user-content-bios-detect-memory"&gt;&lt;a id="user-content-326-bios-detect-memory" class="anchor" aria-hidden="true" href="#326-bios-detect-memory"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#bios-detect-memory"&gt;3.2.6. BIOS detect memory&lt;/a&gt;&lt;/h4&gt;
&lt;div&gt;
&lt;p&gt;TODO failed attempt at detecting how big our memory is with &lt;code&gt;int 15h&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;./run bios_detect_memory&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Source: &lt;a href="bios_detect_memory.S"&gt;bios_detect_memory.S&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Seems to output trash currently.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;This is important in particular so that you can start your stack there when you enter &lt;a href="#protected-mode"&gt;Protected mode&lt;/a&gt;, since the stack grows down.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;In 16-bit mode, it does not matter much, since most modern machines have all addressable memory there, but in 32-bit protected it does, as our emulator usually does not have all 4Gb. And of course, 64-bit RAM is currently larger than the total RAM in the world.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;&lt;code&gt;int 15&lt;/code&gt; returns a list: each time you call it a new memory region is returned.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;The format is not too complicated, and documented at: &lt;a href="http://wiki.osdev.org/Detecting_Memory_%28x86%29#Detecting_Upper_Memory" rel="nofollow"&gt;http://wiki.osdev.org/Detecting_Memory_%28x86%29#Detecting_Upper_Memory&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;8 bytes: base address of region.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;8 bytes: length of region.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;4 bytes: type or region. 1 for usable RAM.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;4 bytes: some ACPI stuff that no one uses?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Bibliography: &lt;a href="http://wiki.osdev.org/Detecting_Memory_%28x86%29" rel="nofollow"&gt;http://wiki.osdev.org/Detecting_Memory_%28x86%29&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h5 id="user-content-low-vs-high-memory"&gt;&lt;a id="user-content-3261-low-vs-high-memory" class="anchor" aria-hidden="true" href="#3261-low-vs-high-memory"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#low-vs-high-memory"&gt;3.2.6.1. Low vs high memory&lt;/a&gt;&lt;/h5&gt;
&lt;div&gt;
&lt;p&gt;TODO example.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;&lt;code&gt;int 15h&lt;/code&gt; can detect low or high memory. How are they different?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h4 id="user-content-bios-sleep"&gt;&lt;a id="user-content-327-bios-sleep" class="anchor" aria-hidden="true" href="#327-bios-sleep"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#bios-sleep"&gt;3.2.7. BIOS sleep&lt;/a&gt;&lt;/h4&gt;
&lt;div&gt;
&lt;p&gt;Count to infinity, sleep one second between each count:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;./run bios_sleep&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Source: &lt;a href="bios_sleep.S"&gt;bios_sleep.S&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Polls time counter that BIOS keeps up to date at &lt;code&gt;0x046C&lt;/code&gt; with frequency 18.2Hz eighteen times.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Bibliography: &lt;a href="https://stackoverflow.com/questions/9971405/how-to-display-a-number-on-the-screen-and-and-sleep-for-one-second-with-dos-x86/9973442#9973442" rel="nofollow"&gt;https://stackoverflow.com/questions/9971405/how-to-display-a-number-on-the-screen-and-and-sleep-for-one-second-with-dos-x86/9973442#9973442&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h4 id="user-content-bios-initial-state"&gt;&lt;a id="user-content-328-bios-initial-state" class="anchor" aria-hidden="true" href="#328-bios-initial-state"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#bios-initial-state"&gt;3.2.8. BIOS initial state&lt;/a&gt;&lt;/h4&gt;
&lt;div&gt;
&lt;p&gt;Check the initial state the firmware leaves us by printing the contents of several registers:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;./run bios_initial_state&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Source: &lt;a href="bios_initial_state.S"&gt;bios_initial_state.S&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Outcome:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;ax = 00 00
bx = 00 00
cx = 00 00
dx = 80 00
cs = 00 00
ds = 00 00
es = 00 00
fs = 00 00
gs = 00 00
ss = 00 00
cr0 = 53 FF 00 F0&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;&lt;code&gt;dx&lt;/code&gt; seems to be like the only interesting regular register: the firmware stores the value of the current disk number to help with &lt;code&gt;int 15h&lt;/code&gt; there. Thus it usually contains &lt;code&gt;0x80&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h3 id="user-content-dmidecode"&gt;&lt;a id="user-content-33-dmidecode" class="anchor" aria-hidden="true" href="#33-dmidecode"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#dmidecode"&gt;3.3. dmidecode&lt;/a&gt;&lt;/h3&gt;
&lt;div&gt;
&lt;p&gt;Get BIOS information. On host:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;sudo dmidecode&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Standardized by: &lt;a href="https://en.wikipedia.org/wiki/Distributed_Management_Task_Force" rel="nofollow"&gt;https://en.wikipedia.org/wiki/Distributed_Management_Task_Force&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;TODO: how is it obtained at the low level?&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Bibliography:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/20604644/how-to-check-the-bios-version-or-name-in-linux-through-command-prompt" rel="nofollow"&gt;http://stackoverflow.com/questions/20604644/how-to-check-the-bios-version-or-name-in-linux-through-command-prompt&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/System_Management_BIOS" rel="nofollow"&gt;https://en.wikipedia.org/wiki/System_Management_BIOS&lt;/a&gt; SMBIOS&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h3 id="user-content-seabios"&gt;&lt;a id="user-content-34-seabios" class="anchor" aria-hidden="true" href="#34-seabios"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#seabios"&gt;3.4. SeaBIOS&lt;/a&gt;&lt;/h3&gt;
&lt;div&gt;
&lt;p&gt;&lt;a href="http://www.seabios.org/SeaBIOS" rel="nofollow"&gt;http://www.seabios.org/SeaBIOS&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Open source x86 BIOS implementation.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Default BIOS for QEMU and KVM.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h2 id="user-content-no-bios"&gt;&lt;a id="user-content-4-no-bios" class="anchor" aria-hidden="true" href="#4-no-bios"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#no-bios"&gt;4. No BIOS&lt;/a&gt;&lt;/h2&gt;
&lt;div&gt;
&lt;div&gt;
&lt;p&gt;Here we will collect some examples that do stuff without using the BIOS!&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;These tend to be less portable, not sure they will work on real hardware.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Also they might need to rely on undocumented features.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;But they were verified in QEMU.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;If you are serious about this, study &lt;a href="#coreboot"&gt;Coreboot&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h3 id="user-content-no-bios-hello-world"&gt;&lt;a id="user-content-41-no-bios-hello-world" class="anchor" aria-hidden="true" href="#41-no-bios-hello-world"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#no-bios-hello-world"&gt;4.1. No BIOS hello world&lt;/a&gt;&lt;/h3&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;./run no_bios_hello_world&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Source: &lt;a href="no_bios_hello_world.S"&gt;no_bios_hello_world.S&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Outcome:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;hello world&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;with red foreground and blue background shows on the top left of the cleared screen.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;This example uses the fact that BIOS maps video memory to address 0xB8000.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;We can then move 0xB800 to a segment register and use segment:offset addressing to access this memory.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Then we can show characters by treating &lt;code&gt;0xB800:0000&lt;/code&gt; as a &lt;code&gt;uint16_t&lt;/code&gt; array, where low 8 bytes is the ASCII character, and the high 8 bytes is the color attribute of this character.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h2 id="user-content-modes-of-operation"&gt;&lt;a id="user-content-5-modes-of-operation" class="anchor" aria-hidden="true" href="#5-modes-of-operation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#modes-of-operation"&gt;5. Modes of operation&lt;/a&gt;&lt;/h2&gt;
&lt;div&gt;
&lt;div&gt;
&lt;p&gt;The x86 processor has a few modes, which have huge impact on how the processor works.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Covered on the &lt;a href="#intel-manual"&gt;Intel manual&lt;/a&gt; Volume 3. Specially useful is the "Figure 2-3. Transitions Among the Processor’s Operating Modes" diagram.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;The modes are:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Real-address, usually known just as "real mode"&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Protected&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;System management&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IA-32e. Has two sub modes:&lt;/p&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Compatibility&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;64-bit&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Virtual-8086 Mode&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Transition tables:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;(all modes)
|
| Reset
|
v
+---------------------+
| Real address (PE=0) |
+---------------------+
^
|
| PE
|
v
+------------------------+
| Protected (PE=1, VM=0) |
+------------------------+
^                   ^
|                   |
|                   | VM
|                   |
v                   v
+--------------+    +---------------------+
| IA-32e       |    | Virtual-8086 (VM=1) |
+--------------+    +---------------------+&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;and:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;+------------------------+
| System management mode |
+------------------------+
|          ^
|          |
| RSM      | SMI#
|          |
v          |
(All other modes)&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;The IA-32e transition is trickier, but clearly described on the &lt;a href="#intel-manual"&gt;Intel manual&lt;/a&gt; Volume 3 - 9.8.5 "Initializing IA-32e Mode":&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;blockquote&gt;
&lt;div&gt;
&lt;p&gt;Operating systems should follow this sequence to initialize IA-32e mode:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Starting from protected mode, disable paging by setting &lt;code&gt;CR0.PG = 0&lt;/code&gt;. Use the &lt;code&gt;MOV CR0&lt;/code&gt; instruction to disable paging (the instruction must be located in an identity-mapped page).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Enable physical-address extensions (PAE) by setting CR4.&lt;code&gt;PAE = 1&lt;/code&gt;. Failure to enable PAE will result in a &lt;code&gt;#GP&lt;/code&gt; fault when an attempt is made to initialize IA-32e mode.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Load &lt;code&gt;CR3&lt;/code&gt; with the physical base address of the Level 4 page map table (PML4).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Enable IA-32e mode by setting &lt;code&gt;IA32_EFER.LME = 1&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Enable paging by setting &lt;code&gt;CR0.PG = 1&lt;/code&gt;. This causes the processor to set the &lt;code&gt;IA32_EFER.LMA&lt;/code&gt; bit to 1. The &lt;code&gt;MOV CR0&lt;/code&gt; instruction that enables paging and the following instructions must be located in an identity-mapped page (until such time that a branch to non-identity mapped pages can be effected).&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h3 id="user-content-legacy-modes"&gt;&lt;a id="user-content-51-legacy-modes" class="anchor" aria-hidden="true" href="#51-legacy-modes"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#legacy-modes"&gt;5.1. Legacy modes&lt;/a&gt;&lt;/h3&gt;
&lt;div&gt;
&lt;p&gt;The term defined in the &lt;a href="#intel-manual"&gt;Intel manual&lt;/a&gt; Volume 3 - CHAPTER 2 "SYSTEM ARCHITECTURE OVERVIEW":&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;blockquote&gt;
&lt;div&gt;
&lt;p&gt;Real mode, protected mode, virtual 8086 mode, and system management mode. These are sometimes referred to as legacy modes.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;In other words: anything except IA-32e and System management mode.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;This further suggests that real, protected and virtual mode are not the main intended modes of operation.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h3 id="user-content-real-mode"&gt;&lt;a id="user-content-52-real-mode" class="anchor" aria-hidden="true" href="#52-real-mode"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#real-mode"&gt;5.2. Real mode&lt;/a&gt;&lt;/h3&gt;
&lt;div&gt;
&lt;p&gt;&lt;a href="http://wiki.osdev.org/Real_Mode" rel="nofollow"&gt;http://wiki.osdev.org/Real_Mode&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;The CPU starts in this mode after power up.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;All our &lt;a href="#bios"&gt;BIOS&lt;/a&gt; examples are in real mode.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;It is possible to use 32-bit registers in this mode with the "Operand Size Override Prefix" &lt;code&gt;0x66&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;TODO is it possible to access memory above 1M like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;mov $1, 0xF0000000
mov $1, (%eax)&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/6917503/is-it-possible-to-use-32-bits-registers-instructions-in-real-mode" rel="nofollow"&gt;http://stackoverflow.com/questions/6917503/is-it-possible-to-use-32-bits-registers-instructions-in-real-mode&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h4 id="user-content-real-mode-segmentation"&gt;&lt;a id="user-content-521-real-mode-segmentation" class="anchor" aria-hidden="true" href="#521-real-mode-segmentation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#real-mode-segmentation"&gt;5.2.1. Real mode segmentation&lt;/a&gt;&lt;/h4&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;./run real_segmentation&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Source: &lt;a href="real_segmentation.S"&gt;real_segmentation.S&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Outcome:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;AAAAAA&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;We access the character &lt;code&gt;A&lt;/code&gt; with segments in 6 different ways:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ds&lt;/code&gt;, with explicit and implicit segment syntax&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;es&lt;/code&gt;, &lt;code&gt;fs&lt;/code&gt;, &lt;code&gt;gs&lt;/code&gt;, &lt;code&gt;ss&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Segment registers modify the addresses that instructions actually use as:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;&amp;lt;segment&amp;gt; * 16 + &amp;lt;original-address&amp;gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;This implies that:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;20 bits of memory (1MB) instead of the 16 bits (256kB) that normally fits into registers. E.g., to address:&lt;/p&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;0x84000&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;we can use:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;0x8000  (segment)
0x 4000 (address)
-------
0x84000&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;most addresses can be encoded in multiple ways, e.g.:&lt;/p&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;0x100&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;can be encoded as either of:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;segment = &lt;code&gt;0x10&lt;/code&gt;, address = &lt;code&gt;0&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;segment = &lt;code&gt;0&lt;/code&gt;, address = &lt;code&gt;0x100&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;segment = &lt;code&gt;0x1&lt;/code&gt;, address = &lt;code&gt;0xF0&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;&lt;code&gt;fs&lt;/code&gt; and &lt;code&gt;gs&lt;/code&gt; are general purpose: they are not affected implicitly by any instructions. All others will be further exemplified.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h5 id="user-content-cs"&gt;&lt;a id="user-content-5211-cs" class="anchor" aria-hidden="true" href="#5211-cs"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#cs"&gt;5.2.1.1. CS&lt;/a&gt;&lt;/h5&gt;
&lt;div&gt;
&lt;p&gt;&lt;a href="https://stackoverflow.com/questions/17777146/what-is-the-purpose-of-cs-and-ip-registers-in-intel-8086-assembly/33177253#33177253" rel="nofollow"&gt;https://stackoverflow.com/questions/17777146/what-is-the-purpose-of-cs-and-ip-registers-in-intel-8086-assembly/33177253#33177253&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Affects the code address pointer:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;./run cs&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Source: &lt;a href="cs.S"&gt;cs.S&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Outcome:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;00
01
02&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;&lt;code&gt;CS&lt;/code&gt; is set with the &lt;code&gt;ljmp&lt;/code&gt; instruction, and we use it to skip &lt;code&gt;.skip&lt;/code&gt; zero gaps in the code.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h5 id="user-content-ss"&gt;&lt;a id="user-content-5212-ss" class="anchor" aria-hidden="true" href="#5212-ss"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#ss"&gt;5.2.1.2. SS&lt;/a&gt;&lt;/h5&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;./run ss&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Source: &lt;a href="ss.S"&gt;ss.S&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Outcome:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;0102&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;The second byte is 16 bytes after the first, and is accessed with &lt;code&gt;SP = 1&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;&lt;code&gt;SS&lt;/code&gt; affects instructions that use &lt;code&gt;SP&lt;/code&gt; such as &lt;code&gt;PUSH&lt;/code&gt; and &lt;code&gt;POP&lt;/code&gt;: those will actually use &lt;code&gt;16 * SS + SP&lt;/code&gt; as the actual address.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h5 id="user-content-es"&gt;&lt;a id="user-content-5213-es" class="anchor" aria-hidden="true" href="#5213-es"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#es"&gt;5.2.1.3. ES&lt;/a&gt;&lt;/h5&gt;
&lt;div&gt;
&lt;p&gt;TODO: this does seem to have special properties as used by string instructions.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h5 id="user-content-segment-register-encoding"&gt;&lt;a id="user-content-5214-segment-register-encoding" class="anchor" aria-hidden="true" href="#5214-segment-register-encoding"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#segment-register-encoding"&gt;5.2.1.4. Segment register encoding&lt;/a&gt;&lt;/h5&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;objdump -D -b binary -m i8086 segment_registers.img&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;shows that non &lt;code&gt;ds&lt;/code&gt; encodings are achieved through a prefix:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;20:   a0 63 7c                mov    0x7c63,%al
34:   26 a0 63 7c             mov    %es:0x7c63,%al
40:   64 a0 63 7c             mov    %fs:0x7c63,%al
4c:   65 a0 63 7c             mov    %gs:0x7c63,%al
58:   36 a0 63 7c             mov    %ss:0x7c63,%al&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;This makes &lt;code&gt;ds&lt;/code&gt; the most efficient one for data access, and thus a good default.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h4 id="user-content-interrupts"&gt;&lt;a id="user-content-522-interrupts" class="anchor" aria-hidden="true" href="#522-interrupts"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#interrupts"&gt;5.2.2. Interrupts&lt;/a&gt;&lt;/h4&gt;
&lt;div&gt;
&lt;p&gt;Create an interrupt handler and handle an interrupt:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;./run interrupt&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Source: &lt;a href="interrupt.S"&gt;interrupt.S&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Outcome:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;ab&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;It works like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;print &lt;code&gt;a&lt;/code&gt; an interrupt handler &lt;code&gt;0&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;jump back to main code&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;print &lt;code&gt;b&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;TODO: is STI not needed because this interrupt is not maskable?&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Same with interrupt handler &lt;code&gt;1&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;./run interrupt1&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Source: &lt;a href="interrupt1.S"&gt;interrupt1.S&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;TODO understand: attempt to create an infinite loop that calls the interrupt from the handler:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;./run interrupt_loop&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Source: &lt;a href="interrupt_loop.S"&gt;interrupt_loop.S&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;QEMU exits with:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;Trying to execute code outside RAM or ROM at 0x000a0000&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Handle a division by zero:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;./run interrupt_zero_divide&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Source: &lt;a href="interrupt_zero_divide.S"&gt;interrupt_zero_divide.S&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;TODO understand:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;expected outcome: prints values from 0 to &lt;code&gt;0xFFFF&lt;/code&gt; in an infinite loop.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;actual outcome: stops at &lt;code&gt;0081&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Apparently when there is an exception, &lt;code&gt;iret&lt;/code&gt; jumps back to the line that threw the exception itself, not the one after, which leads to the loop:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://stackoverflow.com/questions/33029457/what-to-do-in-interrupt-handler-for-divide-by-zero" rel="nofollow"&gt;https://stackoverflow.com/questions/33029457/what-to-do-in-interrupt-handler-for-divide-by-zero&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://stackoverflow.com/questions/9151429/os-development-how-to-avoid-an-infinite-loop-after-an-exception-routine" rel="nofollow"&gt;https://stackoverflow.com/questions/9151429/os-development-how-to-avoid-an-infinite-loop-after-an-exception-routine&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;But then why does it stop at &lt;code&gt;0081&lt;/code&gt;? And if we set the initial value to &lt;code&gt;0x0090&lt;/code&gt;, it just runs once.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h5 id="user-content-int"&gt;&lt;a id="user-content-5221-int" class="anchor" aria-hidden="true" href="#5221-int"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#int"&gt;5.2.2.1. int&lt;/a&gt;&lt;/h5&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;long jumps to the CS : IP found in the corresponding interrupt vector.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;pushes EFLAGS to let them be restored by iret?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h5 id="user-content-iret"&gt;&lt;a id="user-content-5222-iret" class="anchor" aria-hidden="true" href="#5222-iret"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#iret"&gt;5.2.2.2. iret&lt;/a&gt;&lt;/h5&gt;
&lt;div&gt;
&lt;p&gt;Jumps back to the next instruction to be executed before the interrupt came in.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Restores EFLAGS and other registers TODO which?&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Vs &lt;code&gt;jmp&lt;/code&gt;: &lt;a href="http://stackoverflow.com/questions/10462884/must-iret-be-used-when-returning-from-an-interrupt" rel="nofollow"&gt;http://stackoverflow.com/questions/10462884/must-iret-be-used-when-returning-from-an-interrupt&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h5 id="user-content-interrupt-service-routines"&gt;&lt;a id="user-content-5223-interrupt-service-routines" class="anchor" aria-hidden="true" href="#5223-interrupt-service-routines"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#interrupt-service-routines"&gt;5.2.2.3. Interrupt service routines&lt;/a&gt;&lt;/h5&gt;
&lt;div&gt;
&lt;p&gt;Fancy name for the handler: &lt;a href="http://wiki.osdev.org/Interrupt_Service_Routines" rel="nofollow"&gt;http://wiki.osdev.org/Interrupt_Service_Routines&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h5 id="user-content-ivt"&gt;&lt;a id="user-content-5224-ivt" class="anchor" aria-hidden="true" href="#5224-ivt"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#ivt"&gt;5.2.2.4. IVT&lt;/a&gt;&lt;/h5&gt;
&lt;div&gt;
&lt;p&gt;Interrupt vector table: &lt;a href="https://wiki.osdev.org/IVT" rel="nofollow"&gt;https://wiki.osdev.org/IVT&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;The real mode in-memory table that stores the address for the handler for each interrupt.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;In &lt;a href="#protected-mode"&gt;Protected mode&lt;/a&gt;, the analogous structure is the &lt;a href="#idt"&gt;IDT&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;The base address is set in the interrupt descriptor table register (IDTR), which can be modified with the &lt;a href="#lidt"&gt;lidt&lt;/a&gt; instruction.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;The default address is &lt;code&gt;0x0&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;The format of the table is:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;IDTR -&amp;gt; +-----------------------+
0       |Address      (2 bytes) |
2       |Code segment (2 bytes) |
        +-----------------------+
        +-----------------------+
4 ----&amp;gt; |Address      (2 bytes) |
6       |Code segment (2 bytes) |
        +-----------------------+
        +-----------------------+
8 ----&amp;gt; |Address      (2 bytes) |
A       |Code segment (2 bytes) |
        +-----------------------+

...     ...&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h6 id="user-content-lidt"&gt;&lt;a id="user-content-52241-lidt" class="anchor" aria-hidden="true" href="#52241-lidt"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#lidt"&gt;5.2.2.4.1. lidt&lt;/a&gt;&lt;/h6&gt;
&lt;div&gt;
&lt;p&gt;Set the value of the IDTR, and therefore set the base address of the &lt;a href="#ivt"&gt;IVT&lt;/a&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;./run lidt
./run lidt2
./run lidt0&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Sources:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="lidt.S"&gt;lidt.S&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="lidt2.S"&gt;lidt2.S&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="lidt0.S"&gt;lidt0.S&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;TODO not working.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Expected outcome:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;ab&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Actual outcome: infinite reboot loop.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Actual outcome if we comment out the &lt;code&gt;PUTC&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;lidt&lt;/code&gt;: still infinite reboot loop&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;lidt2&lt;/code&gt; and &lt;code&gt;lidt0&lt;/code&gt;: halt apparently&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;I think I understand that &lt;code&gt;lidt&lt;/code&gt; takes as input a memory address, and the memory at that address must contain:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;2 bytes: total size of the IVT in bytes&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;4 bytes: base address of the IVT. Higher byte is ignored in real mode, since addresses are not 4 bytes long.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h3 id="user-content-protected-mode"&gt;&lt;a id="user-content-53-protected-mode" class="anchor" aria-hidden="true" href="#53-protected-mode"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#protected-mode"&gt;5.3. Protected mode&lt;/a&gt;&lt;/h3&gt;
&lt;div&gt;
&lt;p&gt;Print &lt;code&gt;hello world&lt;/code&gt; in protected mode:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;./run protected_mode&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Source: &lt;a href="protected_mode.S"&gt;protected_mode.S&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Major changes from real mode:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#vga"&gt;VGA&lt;/a&gt; must be used for output since &lt;a href="#bios"&gt;BIOS&lt;/a&gt; is not available in protected mode.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#protected-mode-segmentation"&gt;segmentation&lt;/a&gt; takes effect immediately, so we have to set the &lt;a href="#gdt"&gt;GDT&lt;/a&gt; up&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;we have to encode instructions differently, thus a &lt;code&gt;.code32&lt;/code&gt; is needed. 16-bit mode 32-bit instructions are encodable with a special prefix.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Bibliography:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/28645439/how-do-i-enter-32-bit-protected-mode-in-nasm-assembly" rel="nofollow"&gt;http://stackoverflow.com/questions/28645439/how-do-i-enter-32-bit-protected-mode-in-nasm-assembly&lt;/a&gt; Initially adapted from this.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://wiki.osdev.org/Journey_To_The_Protected_Land" rel="nofollow"&gt;http://wiki.osdev.org/Journey_To_The_Protected_Land&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://wiki.osdev.org/Protected_Mode" rel="nofollow"&gt;http://wiki.osdev.org/Protected_Mode&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/chrisdew/xv6/blob/master/bootasm.S"&gt;https://github.com/chrisdew/xv6/blob/master/bootasm.S&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://thiscouldbebetter.wordpress.com/2011/03/17/entering-protected-mode-from-assembly/" rel="nofollow"&gt;https://thiscouldbebetter.wordpress.com/2011/03/17/entering-protected-mode-from-assembly/&lt;/a&gt; FASM based. Did not word on first try, but looks real clean.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://skelix.net/skelixos/tutorial02_en.html" rel="nofollow"&gt;http://skelix.net/skelixos/tutorial02_en.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Linux kernel v4.12 &lt;code&gt;arch/x86/include/asm/segment.h&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h4 id="user-content-intel-protected-mode-example"&gt;&lt;a id="user-content-531-intel-protected-mode-example" class="anchor" aria-hidden="true" href="#531-intel-protected-mode-example"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#intel-protected-mode-example"&gt;5.3.1. Intel protected mode example&lt;/a&gt;&lt;/h4&gt;
&lt;div&gt;
&lt;p&gt;Source: &lt;a href="intel-protected/"&gt;intel-protected/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;The &lt;a href="#intel-manual"&gt;Intel manual&lt;/a&gt; Volume 3 - 9.10 "INITIALIZATION AND MODE SWITCHING EXAMPLE" does contain an official example of how to go into protected mode.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;However:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;the code is inside the PDF, which breaks all the formatting, so we have copied it here to this repo&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TODO there is no known tool that can actually compile that syntax…​ although MASM should be close:&lt;/p&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://computer-programming-forum.com/46-asm/6d9e8b7acea2d4cc.htm" rel="nofollow"&gt;http://computer-programming-forum.com/46-asm/6d9e8b7acea2d4cc.htm&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://coding.derkeiler.com/Archive/Assembler/alt.lang.asm/2005-12/msg00028.html" rel="nofollow"&gt;http://coding.derkeiler.com/Archive/Assembler/alt.lang.asm/2005-12/msg00028.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://groups.google.com/forum/#!topic/comp.lang.asm.x86/9UZPQWwv-mQ" rel="nofollow"&gt;https://groups.google.com/forum/#!topic/comp.lang.asm.x86/9UZPQWwv-mQ&lt;/a&gt; 1994 comp.lang.asm.x86 topic&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;How can those guys be in business? &amp;gt;:-)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h4 id="user-content-protected-mode-draw-pixel"&gt;&lt;a id="user-content-532-protected-mode-draw-pixel" class="anchor" aria-hidden="true" href="#532-protected-mode-draw-pixel"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#protected-mode-draw-pixel"&gt;5.3.2. Protected mode draw pixel&lt;/a&gt;&lt;/h4&gt;
&lt;div&gt;
&lt;p&gt;TODO do it.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Things get much more involved than in real mode: &lt;a href="http://stackoverflow.com/questions/14419088/how-to-draw-a-pixel-on-the-screen-in-protected-mode-in-x86-assembly" rel="nofollow"&gt;http://stackoverflow.com/questions/14419088/how-to-draw-a-pixel-on-the-screen-in-protected-mode-in-x86-assembly&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h4 id="user-content-protected-mode-segmentation"&gt;&lt;a id="user-content-533-protected-mode-segmentation" class="anchor" aria-hidden="true" href="#533-protected-mode-segmentation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#protected-mode-segmentation"&gt;5.3.3. Protected mode segmentation&lt;/a&gt;&lt;/h4&gt;
&lt;div&gt;
&lt;p&gt;TODO: get working:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;./run segmentation&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Source: &lt;a href="segmentation.S"&gt;segmentation.S&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Expected outcome:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;x
a
b&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Actual outcome:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;x
a&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Example of the effect on a memory access of changing the segment base address.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Without segment manipulation, the output would be just: TODO&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h5 id="user-content-segmentation-introduction"&gt;&lt;a id="user-content-5331-segmentation-introduction" class="anchor" aria-hidden="true" href="#5331-segmentation-introduction"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#segmentation-introduction"&gt;5.3.3.1. Segmentation introduction&lt;/a&gt;&lt;/h5&gt;
&lt;div&gt;
&lt;p&gt;First read the paging tutorial, and in particular: &lt;a href="http://www.cirosantilli.com/x86-paging/#segmentation" rel="nofollow"&gt;http://www.cirosantilli.com/x86-paging/#segmentation&lt;/a&gt; to get a feel for the type of register and data structure manipulation required to configure the CPU, and how segmentation compares to paging.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Segmentation modifies every memory access of a given segment by:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;adding an offset to it&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;limiting how big the segment is&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;If an access is made at an offset larger than allowed an exception happens, which is like an interrupt, and gets handled by a previously registered handler.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Segmentation could be used to implement virtual memory by assigning one segment per program:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;+-----------+--------+--------------------------+
| Program 1 | Unused | Program 2                |
+-----------+--------+--------------------------+
^           ^        ^                          ^
|           |        |                          |
Start1      End1     Start2                     End2&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Besides address translation, the segmentation system also managed other features such as &lt;a href="#protection-rings"&gt;Protection rings&lt;/a&gt;. TODO: how are those done in 64-bit mode?&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;In Linux 32-bit for example, only two segments are used at all times: one at ring 0 for the kernel, and one another at privilege 3 for all user processes.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h5 id="user-content-segment-selector"&gt;&lt;a id="user-content-5332-segment-selector" class="anchor" aria-hidden="true" href="#5332-segment-selector"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#segment-selector"&gt;5.3.3.2. Segment selector&lt;/a&gt;&lt;/h5&gt;
&lt;div&gt;
&lt;p&gt;In protected mode, the segment registers &lt;code&gt;CS&lt;/code&gt;, &lt;code&gt;DS&lt;/code&gt;, &lt;code&gt;SS&lt;/code&gt;, &lt;code&gt;ES&lt;/code&gt;, &lt;code&gt;FS&lt;/code&gt; and &lt;code&gt;GS&lt;/code&gt; contain a data structure more complex than a simple address as in real mode, which contains a single number.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;This 2 byte data structure is called a &lt;em&gt;segment selector&lt;/em&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;table&gt;






&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Position (bits)&lt;/th&gt;
&lt;th&gt;Size (bits)&lt;/th&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;p&gt;0&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;2&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Request Privilege Level (RPL)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Protection ring level, from 0 to 3.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;p&gt;2&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Table Indicator (TI)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;div&gt;&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;0: global descriptor table&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;1: local descriptor table&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;p&gt;3&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;13&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Index&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;div&gt;&lt;div&gt;
&lt;p&gt;Index of the &lt;a href="#segment-descriptor"&gt;Segment descriptor&lt;/a&gt; to be used from the descriptor table.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div&gt;
&lt;p&gt;Like in real mode, this data structure is loaded on the registers with a regular &lt;code&gt;mov&lt;/code&gt; mnemonic instruction.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Bibliography: &lt;a href="#intel-manual"&gt;Intel manual&lt;/a&gt; Volume 3 - 3.4.5 "Segment Descriptors".&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h5 id="user-content-gdt"&gt;&lt;a id="user-content-5333-gdt" class="anchor" aria-hidden="true" href="#5333-gdt"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#gdt"&gt;5.3.3.3. GDT&lt;/a&gt;&lt;/h5&gt;
&lt;div&gt;
&lt;p&gt;Global descriptor table.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;An in-memory array of &lt;a href="#segment-descriptor"&gt;Segment descriptor&lt;/a&gt; data structures:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;The &lt;code&gt;Index&lt;/code&gt; field of the &lt;a href="#segment-selector"&gt;Segment selector&lt;/a&gt; chooses which one of those segment descriptors is to be used.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;The base address is set with the &lt;code&gt;lgdt&lt;/code&gt; instruction, which loads from memory a 6 byte structure:&lt;/p&gt;
&lt;/div&gt;
&lt;table&gt;





&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Position (bytes)&lt;/th&gt;
&lt;th&gt;Size (bytes)&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;p&gt;0&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;2&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Number of entries in the table&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;p&gt;2&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;4&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Base address of the table&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div&gt;
&lt;p&gt;Bibliography:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Global_Descriptor_Table" rel="nofollow"&gt;https://en.wikipedia.org/wiki/Global_Descriptor_Table&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://wiki.osdev.org/GDT" rel="nofollow"&gt;http://wiki.osdev.org/GDT&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h6 id="user-content-local-descriptor-table"&gt;&lt;a id="user-content-53331-local-descriptor-table" class="anchor" aria-hidden="true" href="#53331-local-descriptor-table"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#local-descriptor-table"&gt;5.3.3.3.1. Local descriptor table&lt;/a&gt;&lt;/h6&gt;
&lt;div&gt;
&lt;p&gt;TODO vs global?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h6 id="user-content-null-segment-selector"&gt;&lt;a id="user-content-53332-null-segment-selector" class="anchor" aria-hidden="true" href="#53332-null-segment-selector"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#null-segment-selector"&gt;5.3.3.3.2. Null segment selector&lt;/a&gt;&lt;/h6&gt;
&lt;div&gt;
&lt;p&gt;&lt;a href="#intel-manual"&gt;Intel manual&lt;/a&gt; Volume 3 - 3.4.2 "Segment Selectors" says that we can’t use the first entry of the GDT:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;blockquote&gt;
&lt;div&gt;
&lt;p&gt;The first entry of the GDT is not used by the processor. A segment selector that points to this entry of the GDT (that is, a segment selector with an index of 0 and the TI flag set to 0) is used as a “null segment selector.” The processor does not generate an exception when a segment register (other than the CS or SS registers) is loaded with a null selector. It does, however, generate an exception when a segment register holding a null selector is used to access memory. A null selector can be used to initialize unused segment registers. Loading the CS or SS register with a null segment selector causes a general-protection exception (#GP) to be generated.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h5 id="user-content-segment-descriptor"&gt;&lt;a id="user-content-5334-segment-descriptor" class="anchor" aria-hidden="true" href="#5334-segment-descriptor"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#segment-descriptor"&gt;5.3.3.4. Segment descriptor&lt;/a&gt;&lt;/h5&gt;
&lt;div&gt;
&lt;p&gt;A data structure that is stored in the &lt;a href="#gdt"&gt;GDT&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Clearly described on the &lt;a href="#intel-manual"&gt;Intel manual&lt;/a&gt; Volume 3 - 3.4.5 "Segment Descriptors" and in particular Figure 3-8 "Segment Descriptor".&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;The Linux kernel v4.2 encodes it at: &lt;code&gt;arch/x86/include/asm/desc_defs.h&lt;/code&gt; in &lt;code&gt;struct desc_struct&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h5 id="user-content-protection-rings"&gt;&lt;a id="user-content-5335-protection-rings" class="anchor" aria-hidden="true" href="#5335-protection-rings"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#protection-rings"&gt;5.3.3.5. Protection rings&lt;/a&gt;&lt;/h5&gt;
&lt;div&gt;
&lt;p&gt;&lt;a href="https://stackoverflow.com/questions/18717016/what-are-ring-0-and-ring-3-in-the-context-of-operating-systems/44483439#44483439" rel="nofollow"&gt;https://stackoverflow.com/questions/18717016/what-are-ring-0-and-ring-3-in-the-context-of-operating-systems/44483439#44483439&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;TODO example. Jump to userspace, do something naughty, handler interrupt in kernel land.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h4 id="user-content-idt"&gt;&lt;a id="user-content-534-idt" class="anchor" aria-hidden="true" href="#534-idt"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#idt"&gt;5.3.4. IDT&lt;/a&gt;&lt;/h4&gt;
&lt;div&gt;
&lt;p&gt;Interrupt descriptor table.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Protected mode analogue to the &lt;a href="#ivt"&gt;IVT&lt;/a&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;./run idt&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Source: &lt;a href="idt.S"&gt;idt.S&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Outcome:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;int 0 handled&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Handle interrupt 1 instead of 0:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;./run idt1&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Source: &lt;a href="idt1.S"&gt;idt1.S&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Outcome:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;int 1 handled&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Print &lt;code&gt;00000020\n&lt;/code&gt; at &lt;code&gt;18.2 Hz&lt;/code&gt; with the &lt;a href="#pit"&gt;PIT&lt;/a&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;./run pit_protected&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Source: &lt;a href="pit_protected.S"&gt;pit_protected.S&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Bibliography:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://wiki.osdev.org/Interrupt_Descriptor_Table" rel="nofollow"&gt;https://wiki.osdev.org/Interrupt_Descriptor_Table&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Interrupt_descriptor_table" rel="nofollow"&gt;https://en.wikipedia.org/wiki/Interrupt_descriptor_table&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.jamesmolloy.co.uk/tutorial_html/4.-The%20GDT%20and%20IDT.html" rel="nofollow"&gt;http://www.jamesmolloy.co.uk/tutorial_html/4.-The%20GDT%20and%20IDT.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;The first 32 handlers are reserved by the processor and have predefined meanings, as specified in the &lt;a href="#intel-manual"&gt;Intel manual&lt;/a&gt; Volume 3 Table 3-3. "Intel 64 and IA-32 General Exceptions".&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;In the Linux kernel, &lt;a href="https://github.com/torvalds/linux/blob/v4.2/arch/x86/entry/entry_64.S"&gt;https://github.com/torvalds/linux/blob/v4.2/arch/x86/entry/entry_64.S&lt;/a&gt; sets them all up: each &lt;code&gt;idtentry divide_error&lt;/code&gt; call sets up a new one.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h5 id="user-content-idt-divide-by-zero"&gt;&lt;a id="user-content-5341-idt-divide-by-zero" class="anchor" aria-hidden="true" href="#5341-idt-divide-by-zero"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#idt-divide-by-zero"&gt;5.3.4.1. IDT divide by zero&lt;/a&gt;&lt;/h5&gt;
&lt;div&gt;
&lt;p&gt;Handle a division by zero:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;./run idt_zero_divide&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Source: &lt;a href="idt_zero_divide.S"&gt;idt_zero_divide.S&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Outcome:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;division by zero handled&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Division by zero causes a Divide Error which Intel notes as &lt;code&gt;#DE&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;It is then handled by IDT 0.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;DEs are not only for division by zero: they also happens on overflow. TODO example.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h4 id="user-content-smp"&gt;&lt;a id="user-content-535-smp" class="anchor" aria-hidden="true" href="#535-smp"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#smp"&gt;5.3.5. SMP&lt;/a&gt;&lt;/h4&gt;
&lt;div&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Symmetric_multiprocessing" rel="nofollow"&gt;Symmetric multiprocessing&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Verbose explanation: &lt;a href="http://stackoverflow.com/questions/980999/what-does-multicore-assembly-language-look-like/33651438#33651438" rel="nofollow"&gt;http://stackoverflow.com/questions/980999/what-does-multicore-assembly-language-look-like/33651438#33651438&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Start multiple processors and make them interact:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;./run smp&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Source: &lt;a href="smp.S"&gt;smp.S&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Outcome:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;SMP started&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Implies that SMP worked because a spinlock was unlocked by the second processor.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Try commenting out waking up the second processor and see it not get printed.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h4 id="user-content-paging"&gt;&lt;a id="user-content-536-paging" class="anchor" aria-hidden="true" href="#536-paging"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#paging"&gt;5.3.6. Paging&lt;/a&gt;&lt;/h4&gt;
&lt;div&gt;
&lt;p&gt;Verbose beginner’s tutorial: &lt;a href="http://www.cirosantilli.com/x86-paging/" rel="nofollow"&gt;http://www.cirosantilli.com/x86-paging/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Change page tables and observe how that affects memory accesses:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;./run paging&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Source: &lt;a href="paging.S"&gt;paging.S&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Outcome:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;00001234
00005678&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Implies that paging worked because we printed and modified the same physical address with two different virtual addresses.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Requires &lt;a href="#protected-mode"&gt;Protected mode&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h5 id="user-content-page-fault"&gt;&lt;a id="user-content-5361-page-fault" class="anchor" aria-hidden="true" href="#5361-page-fault"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#page-fault"&gt;5.3.6.1. Page fault&lt;/a&gt;&lt;/h5&gt;
&lt;div&gt;
&lt;p&gt;Generate and handle a page fault:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;./run page_fault&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Source: &lt;a href="page_fault.S"&gt;page_fault.S&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Outcome:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;Page fault handled. Error code:
00000002&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;This is printed from a page fault handler that we setup an triggered by writing to an unmapped address.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h3 id="user-content-ia-32e-mode"&gt;&lt;a id="user-content-54-ia-32e-mode" class="anchor" aria-hidden="true" href="#54-ia-32e-mode"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#ia-32e-mode"&gt;5.4. IA-32e mode&lt;/a&gt;&lt;/h3&gt;
&lt;div&gt;
&lt;p&gt;Wikipedia seems to call it long mode: &lt;a href="https://en.wikipedia.org/wiki/Long_mode" rel="nofollow"&gt;https://en.wikipedia.org/wiki/Long_mode&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Contains two sub-modes: &lt;a href="#64-bit-mode"&gt;64-bit mode&lt;/a&gt; and &lt;a href="#compatibility-mode"&gt;Compatibility mode&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;This controlled by the &lt;code&gt;CS.L&lt;/code&gt; bit of the segment descriptor.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;It appears that it is possible for user programs to modify that during execution from userland: &lt;a href="http://stackoverflow.com/questions/12716419/can-you-enter-x64-32-bit-long-compatibility-sub-mode-outside-of-kernel-mode" rel="nofollow"&gt;http://stackoverflow.com/questions/12716419/can-you-enter-x64-32-bit-long-compatibility-sub-mode-outside-of-kernel-mode&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;TODO vs &lt;a href="#protected-mode"&gt;Protected mode&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h3 id="user-content-64-bit-mode"&gt;&lt;a id="user-content-55-64-bit-mode" class="anchor" aria-hidden="true" href="#55-64-bit-mode"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#64-bit-mode"&gt;5.5. 64-bit mode&lt;/a&gt;&lt;/h3&gt;
&lt;div&gt;
&lt;p&gt;64-bit is the major mode of operation, and enables the full 64 bit instructions.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;There are currently no examples in this repo because I was lazy to make them.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;As someone once brilliantly put it: &lt;a href="https://twitter.com/garybernhardt/status/1106255947138125824" rel="nofollow"&gt;https://twitter.com/garybernhardt/status/1106255947138125824&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;blockquote&gt;
&lt;div&gt;
&lt;p&gt;Watching an x86-64 CPU boot is like watching an amoeba slowly evolve into a dog.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;The backward compatibility of x86 is mind boggling.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h3 id="user-content-compatibility-mode"&gt;&lt;a id="user-content-56-compatibility-mode" class="anchor" aria-hidden="true" href="#56-compatibility-mode"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#compatibility-mode"&gt;5.6. Compatibility mode&lt;/a&gt;&lt;/h3&gt;
&lt;div&gt;
&lt;p&gt;Compatibility mode emulates IA-32 and allows to run 32 and 16 bit code.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;But 64 bit Linux and Windows don’t seem to allow 16 bit code anymore?&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/27868394/switch-from-64-bit-long-mode-to-32-bit-compatibility-mode-on-x64" rel="nofollow"&gt;http://stackoverflow.com/questions/27868394/switch-from-64-bit-long-mode-to-32-bit-compatibility-mode-on-x64&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://stackoverflow.com/questions/7829058/how-to-run-16-bit-code-on-32-bit-linux" rel="nofollow"&gt;https://stackoverflow.com/questions/7829058/how-to-run-16-bit-code-on-32-bit-linux&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://superuser.com/questions/140953/why-cant-a-64-bit-os-run-a-16-bit-application" rel="nofollow"&gt;https://superuser.com/questions/140953/why-cant-a-64-bit-os-run-a-16-bit-application&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Compatibility vs protected: &lt;a href="https://stackoverflow.com/questions/20848412/modes-of-intel-64-cpu" rel="nofollow"&gt;https://stackoverflow.com/questions/20848412/modes-of-intel-64-cpu&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h2 id="user-content-in-and-out-instructions"&gt;&lt;a id="user-content-6-in-and-out-instructions" class="anchor" aria-hidden="true" href="#6-in-and-out-instructions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#in-and-out-instructions"&gt;6. in and out instructions&lt;/a&gt;&lt;/h2&gt;
&lt;div&gt;
&lt;div&gt;
&lt;p&gt;x86 has dedicated instructions for certain IO operations: &lt;code&gt;in&lt;/code&gt; and &lt;code&gt;out&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;These instructions take an IO address which identifies which hardware they will communicate to.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;The IO ports don’t seem to be standardized, like everything else: &lt;a href="http://stackoverflow.com/questions/14194798/is-there-a-specification-of-x86-i-o-port-assignment" rel="nofollow"&gt;http://stackoverflow.com/questions/14194798/is-there-a-specification-of-x86-i-o-port-assignment&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;The Linux kernel wraps those instructions with the &lt;code&gt;inb&lt;/code&gt; and &lt;code&gt;outb&lt;/code&gt; family of instructions:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;man inb
man outb&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h3 id="user-content-memory-mapped-vs-port-mapped-io"&gt;&lt;a id="user-content-61-memory-mapped-vs-port-mapped-io" class="anchor" aria-hidden="true" href="#61-memory-mapped-vs-port-mapped-io"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#memory-mapped-vs-port-mapped-io"&gt;6.1. Memory mapped vs port mapped IO&lt;/a&gt;&lt;/h3&gt;
&lt;div&gt;
&lt;p&gt;Not all instruction sets have dedicated instructions such as &lt;code&gt;in&lt;/code&gt; and &lt;code&gt;out&lt;/code&gt; for IO.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;In ARM for example, everything is done by writing to magic memory addresses.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;The dedicated &lt;code&gt;in&lt;/code&gt; and &lt;code&gt;out&lt;/code&gt; approach is called "port mapped IO", and the approach of the magic addresses "memory mapp"&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;From an interface point of view, I feel that memory mapped is more elegant: port IO simply creates a second addresses space.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;TODO: are there performance considerations when designing CPUs?&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Bibliography: &lt;a href="http://superuser.com/questions/703695/difference-between-port-mapped-and-memory-mapped-access" rel="nofollow"&gt;http://superuser.com/questions/703695/difference-between-port-mapped-and-memory-mapped-access&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h3 id="user-content-ps2-keyboard"&gt;&lt;a id="user-content-62-ps2-keyboard" class="anchor" aria-hidden="true" href="#62-ps2-keyboard"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#ps2-keyboard"&gt;6.2. PS/2 keyboard&lt;/a&gt;&lt;/h3&gt;
&lt;div&gt;
&lt;p&gt;Whenever you press a key down or up, the keyboard hex scancode is printed to the screen:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;./run ps2_keyboard&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Source: &lt;a href="ps2_keyboard.S"&gt;ps2_keyboard.S&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Uses the PS/2 keyboard controller on &lt;code&gt;in 60h&lt;/code&gt;: &lt;a href="http://wiki.osdev.org/%228042%22_PS/2_Controller" rel="nofollow"&gt;http://wiki.osdev.org/%228042%22_PS/2_Controller&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;The &lt;code&gt;in&lt;/code&gt; always returns immediately with the last keyboard keycode: we then just poll for changes and print only the changes.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Scancode tables: TODO: official specs?&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Scancode#PC_compatibles" rel="nofollow"&gt;https://en.wikipedia.org/wiki/Scancode#PC_compatibles&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://flint.cs.yale.edu/cs422/doc/art-of-asm/pdf/APNDXC.PDF" rel="nofollow"&gt;http://flint.cs.yale.edu/cs422/doc/art-of-asm/pdf/APNDXC.PDF&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;TODO do this with the interrupt table instead of &lt;code&gt;in&lt;/code&gt;. Failed attempt at: &lt;a href="interrupt_keyboard.S"&gt;interrupt_keyboard.S&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h3 id="user-content-ps2-mouse"&gt;&lt;a id="user-content-63-ps2-mouse" class="anchor" aria-hidden="true" href="#63-ps2-mouse"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#ps2-mouse"&gt;6.3. PS/2 mouse&lt;/a&gt;&lt;/h3&gt;
&lt;div&gt;
&lt;p&gt;TODO create an example:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://wiki.osdev.org/Mouse_Input" rel="nofollow"&gt;http://wiki.osdev.org/Mouse_Input&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Random threads with source code, ah those OS devs:&lt;/p&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://forum.osdev.org/viewtopic.php?t=10247" rel="nofollow"&gt;https://forum.osdev.org/viewtopic.php?t=10247&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://forum.osdev.org/viewtopic.php?t=24277" rel="nofollow"&gt;https://forum.osdev.org/viewtopic.php?t=24277&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://courses.engr.illinois.edu/ece390/books/labmanual/io-devices-mouse.html" rel="nofollow"&gt;https://courses.engr.illinois.edu/ece390/books/labmanual/io-devices-mouse.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;I am so going to make a pixel drawing program with this.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h3 id="user-content-rtc"&gt;&lt;a id="user-content-64-rtc" class="anchor" aria-hidden="true" href="#64-rtc"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#rtc"&gt;6.4. RTC&lt;/a&gt;&lt;/h3&gt;
&lt;div&gt;
&lt;p&gt;Real Time Clock: &lt;a href="https://en.wikipedia.org/wiki/Real-time_clock" rel="nofollow"&gt;https://en.wikipedia.org/wiki/Real-time_clock&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Get wall time with precision of seconds every second:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;./run rtc&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Source: &lt;a href="rtc.S"&gt;rtc.S&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Sample outcome:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;00 01 02 03 04 10&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;which means:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;blockquote&gt;
&lt;div&gt;
&lt;p&gt;3rd April 2010, 02 hours 01 minute and 00 seconds.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Uses &lt;code&gt;out 70h&lt;/code&gt; and &lt;code&gt;in 71h&lt;/code&gt; to query the hardware.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;This hardware must therefore use a separate battery to keep going when we turn off the computer or remove the laptop battery.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;We can control the initial value in QEMU with the option:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;qemu-system-x86_64 -rtc base='2010-04-03T02:01:00'&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;The RTC cannot give accuracy greater than seconds. For that, consider the &lt;a href="#pit"&gt;PIT&lt;/a&gt;, or the &lt;a href="#hpet"&gt;HPET&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Bibliography:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://wiki.osdev.org/RTC" rel="nofollow"&gt;http://wiki.osdev.org/RTC&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://wiki.osdev.org/CMOS" rel="nofollow"&gt;http://wiki.osdev.org/CMOS&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/1465927/how-can-i-access-system-time-using-nasm" rel="nofollow"&gt;http://stackoverflow.com/questions/1465927/how-can-i-access-system-time-using-nasm&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/torvalds/linux/blob/v4.2/arch/x86/kernel/rtc.c#L121"&gt;https://github.com/torvalds/linux/blob/v4.2/arch/x86/kernel/rtc.c#L121&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h3 id="user-content-pit"&gt;&lt;a id="user-content-65-pit" class="anchor" aria-hidden="true" href="#65-pit"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#pit"&gt;6.5. PIT&lt;/a&gt;&lt;/h3&gt;
&lt;div&gt;
&lt;p&gt;Programmable Interval Timer: &lt;a href="https://en.wikipedia.org/wiki/Programmable_interval_timer" rel="nofollow"&gt;https://en.wikipedia.org/wiki/Programmable_interval_timer&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Superseded by the &lt;a href="#hpet"&gt;HPET&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Print &lt;code&gt;a\n&lt;/code&gt; with the minimal frequency possible of &lt;code&gt;0x1234DD / 0xFFFF = 18.2 Hz&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;./run pit&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Source: &lt;a href="pit.S"&gt;pit.S&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Make the PIT generate a single interrupt instead of a frequency:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;./run pit_once&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Source: &lt;a href="pit_once.S"&gt;pit_once.S&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Outcome:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;a&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;TODO I think this counts down from the value value in channel 0, and therefore allows to schedule a single event in the future.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;The PIT can generate periodic interrupts (or &lt;a href="#pc-speaker"&gt;sound&lt;/a&gt;!) with a given frequency to &lt;code&gt;IRQ0&lt;/code&gt;, which on real mode maps to interrupt 8 by default.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Major application: interrupt the running process to allow the OS to schedule processes.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;The PIT 3 channels that can generate 3 independent signals&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;channel 0 at port &lt;code&gt;40h&lt;/code&gt;: generates interrupts&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;channel 1 at port &lt;code&gt;41h&lt;/code&gt;: not to be used for some reason&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;channel 2 at port &lt;code&gt;42h&lt;/code&gt;: linked to the speaker to generate sounds&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Port &lt;code&gt;43h&lt;/code&gt; is used to control signal properties except frequency, which goes in the channel ports, for the 3 channels.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Bibliography:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://wiki.osdev.org/PIT" rel="nofollow"&gt;http://wiki.osdev.org/PIT&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Intel_8253" rel="nofollow"&gt;https://en.wikipedia.org/wiki/Intel_8253&lt;/a&gt; that is the circuit ID for the PIT.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://kernelx.weebly.com/programmable-interval-timer.html" rel="nofollow"&gt;http://kernelx.weebly.com/programmable-interval-timer.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h4 id="user-content-pit-frequency"&gt;&lt;a id="user-content-651-pit-frequency" class="anchor" aria-hidden="true" href="#651-pit-frequency"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#pit-frequency"&gt;6.5.1. PIT frequency&lt;/a&gt;&lt;/h4&gt;
&lt;div&gt;
&lt;p&gt;We don’t control the frequency of the PIT directly, which is fixed at &lt;code&gt;0x1234DD&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Instead, we control a frequency divisor. This is a classic type of discrete electronic circuit: &lt;a href="https://en.wikipedia.org/wiki/Frequency_divider" rel="nofollow"&gt;https://en.wikipedia.org/wiki/Frequency_divider&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;The magic frequency comes from historical reasons to reuse television hardware according to &lt;a href="https://wiki.osdev.org/Programmable_Interval_Timer" rel="nofollow"&gt;https://wiki.osdev.org/Programmable_Interval_Timer&lt;/a&gt;, which in turn is likely influenced by some physical properties of crystal oscillators.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;The constant &lt;code&gt;1193181 == 0x1234DD&lt;/code&gt; has 2 occurrences on Linux 4.16.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h4 id="user-content-hpet"&gt;&lt;a id="user-content-652-hpet" class="anchor" aria-hidden="true" href="#652-hpet"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#hpet"&gt;6.5.2. HPET&lt;/a&gt;&lt;/h4&gt;
&lt;div&gt;
&lt;p&gt;Newer &lt;a href="#pit"&gt;PIT&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;TODO example.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/High_Precision_Event_Timer" rel="nofollow"&gt;https://en.wikipedia.org/wiki/High_Precision_Event_Timer&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://wiki.osdev.org/HPET" rel="nofollow"&gt;https://wiki.osdev.org/HPET&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h4 id="user-content-pc-speaker"&gt;&lt;a id="user-content-653-pc-speaker" class="anchor" aria-hidden="true" href="#653-pc-speaker"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#pc-speaker"&gt;6.5.3. PC speaker&lt;/a&gt;&lt;/h4&gt;
&lt;div&gt;
&lt;p&gt;&lt;a href="http://wiki.osdev.org/PC_Speaker" rel="nofollow"&gt;http://wiki.osdev.org/PC_Speaker&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;./run pc_speaker&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Source: &lt;a href="pc_speaker.S"&gt;pc_speaker.S&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Outcome: produces a foul noisy noise using the PC speaker hardware on &lt;code&gt;out 61h&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;QEMU only plays the sound if we give it the option:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;-soundhw pcspk&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;The beep just uses the &lt;a href="#pit"&gt;PIT&lt;/a&gt; Channel 2 to generate the frequency.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Extracted from: &lt;a href="https://github.com/torvalds/linux/blob/v4.2/arch/x86/realmode/rm/wakemain.c#L38"&gt;https://github.com/torvalds/linux/blob/v4.2/arch/x86/realmode/rm/wakemain.c#L38&lt;/a&gt; The kernel has a Morse code encoder using it!&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Bibliography:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://courses.engr.illinois.edu/ece390/books/labmanual/io-devices-speaker.html" rel="nofollow"&gt;https://courses.engr.illinois.edu/ece390/books/labmanual/io-devices-speaker.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://fly.srk.fer.hr/GDM/articles/sndmus/speaker1.html" rel="nofollow"&gt;http://fly.srk.fer.hr/GDM/articles/sndmus/speaker1.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h2 id="user-content-video-mode"&gt;&lt;a id="user-content-7-video-mode" class="anchor" aria-hidden="true" href="#7-video-mode"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#video-mode"&gt;7. Video mode&lt;/a&gt;&lt;/h2&gt;
&lt;div&gt;
&lt;div&gt;
&lt;p&gt;There are several video modes.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Modes determine what interrupt functions can be used.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;There are 2 main types of modes:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;text, where we operate character-wise&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;video, operate byte-wise&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Modes can be set with &lt;code&gt;int 0x10&lt;/code&gt; and &lt;code&gt;AH = 0x00&lt;/code&gt;, and get with &lt;code&gt;AH = 0x0F&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;The most common modes seem to be:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;0x01: 40x25 Text, 16 colors, 8 pages&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;0x03: 80x25 Text, 16 colors, 8 pages&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;0x13: 320x200 Graphics, 256 colors, 1 page&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;You can add 128 to the modes to prevent them from clearing the screen.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Taken from: &lt;a href="https://courses.engr.illinois.edu/ece390/books/labmanual/graphics-int10h.html" rel="nofollow"&gt;https://courses.engr.illinois.edu/ece390/books/labmanual/graphics-int10h.html&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;A larger list: &lt;a href="http://www.columbia.edu/~em36/wpdos/videomodes.txt" rel="nofollow"&gt;http://www.columbia.edu/~em36/wpdos/videomodes.txt&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;See also: &lt;a href="http://wiki.osdev.org/How_do_I_set_a_graphics_mode" rel="nofollow"&gt;http://wiki.osdev.org/How_do_I_set_a_graphics_mode&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h3 id="user-content-video-mode-13h"&gt;&lt;a id="user-content-71-video-mode-13h" class="anchor" aria-hidden="true" href="#71-video-mode-13h"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#video-mode-13h"&gt;7.1. Video mode 13h&lt;/a&gt;&lt;/h3&gt;
&lt;div&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Mode_13h" rel="nofollow"&gt;https://en.wikipedia.org/wiki/Mode_13h&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Example at: &lt;a href="#bios-draw-pixel"&gt;BIOS draw pixel&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Video Mode &lt;code&gt;13h&lt;/code&gt; has: 320 x 200 Graphics, 256 colors, 1 page.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;The color encoding is just an arbitrary palette that fits 1 byte, it is not split colors like R  R  R  G  G  G  B  B or anything mentioned at: &lt;a href="https://en.wikipedia.org/wiki/8-bit_color" rel="nofollow"&gt;https://en.wikipedia.org/wiki/8-bit_color&lt;/a&gt;. Related: &lt;a href="http://stackoverflow.com/questions/14233437/convert-normal-256-color-to-mode-13h-version-color" rel="nofollow"&gt;http://stackoverflow.com/questions/14233437/convert-normal-256-color-to-mode-13h-version-color&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h3 id="user-content-vga"&gt;&lt;a id="user-content-72-vga" class="anchor" aria-hidden="true" href="#72-vga"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#vga"&gt;7.2. VGA&lt;/a&gt;&lt;/h3&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Video_Graphics_Array" rel="nofollow"&gt;https://en.wikipedia.org/wiki/Video_Graphics_Array&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/VGA-compatible_text_mode" rel="nofollow"&gt;https://en.wikipedia.org/wiki/VGA-compatible_text_mode&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;TODO: what is it exactly?&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;BIOS cannot be used when we move into &lt;a href="#protected-mode"&gt;Protected mode&lt;/a&gt;, but we can use the VGA interface to get output out of our programs.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Have a look at the macros prefixed with &lt;code&gt;VGA_&lt;/code&gt; inside &lt;a href="common.h"&gt;common.h&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h2 id="user-content-power"&gt;&lt;a id="user-content-8-power" class="anchor" aria-hidden="true" href="#8-power"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#power"&gt;8. Power&lt;/a&gt;&lt;/h2&gt;
&lt;div&gt;
&lt;div&gt;
&lt;h3 id="user-content-reboot"&gt;&lt;a id="user-content-81-reboot" class="anchor" aria-hidden="true" href="#81-reboot"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#reboot"&gt;8.1. Reboot&lt;/a&gt;&lt;/h3&gt;
&lt;div&gt;
&lt;p&gt;Infinite reboot loop on emulator!&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;./run reboot&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Source: &lt;a href="reboot.S"&gt;reboot.S&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;TODO why does it work?&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Bibliography: &lt;a href="http://stackoverflow.com/questions/32682152/how-to-reboot-in-x86-assembly-from-16-bit-real-mode" rel="nofollow"&gt;http://stackoverflow.com/questions/32682152/how-to-reboot-in-x86-assembly-from-16-bit-real-mode&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h3 id="user-content-apm"&gt;&lt;a id="user-content-82-apm" class="anchor" aria-hidden="true" href="#82-apm"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#apm"&gt;8.2. APM&lt;/a&gt;&lt;/h3&gt;
&lt;div&gt;
&lt;p&gt;Turn on and immediately shutdown the system closing QEMU:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;./run apm_shutdown&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Source: &lt;a href="apm_shutdown.S"&gt;apm_shutdown.S&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Fancier version copied from &lt;a href="http://wiki.osdev.org/APM" rel="nofollow"&gt;http://wiki.osdev.org/APM&lt;/a&gt; (TODO why is that better):&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;./run apm_shutdown2&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Source: &lt;a href="apm_shutdown2.S"&gt;apm_shutdown2.S&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Older than &lt;a href="#acpi"&gt;ACPI&lt;/a&gt; and simpler.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;By Microsoft in 1995. Spec seems to be in RTF format…​&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Can’t find the URL. A Google cache: &lt;a href="https://www.google.com/url?sa=t&amp;amp;rct=j&amp;amp;q=&amp;amp;esrc=s&amp;amp;source=web&amp;amp;cd=1&amp;amp;ved=0CB0QFjAAahUKEwj7qpLN_4XIAhWCVxoKHa_nAxY&amp;amp;url=http%3A%2F%2Fdownload.microsoft.com%2Fdownload%2F1%2F6%2F1%2F161ba512-40e2-4cc9-843a-923143f3456c%2FAPMV12.rtf&amp;amp;usg=AFQjCNHoCx8gHv-w08Dn_Aoy6Q3K3DLWRg&amp;amp;sig2=D_66xvI7Y2n1cvyB8d2Mmg" rel="nofollow"&gt;https://www.google.com/url?sa=t&amp;amp;rct=j&amp;amp;q=&amp;amp;esrc=s&amp;amp;source=web&amp;amp;cd=1&amp;amp;ved=0CB0QFjAAahUKEwj7qpLN_4XIAhWCVxoKHa_nAxY&amp;amp;url=http%3A%2F%2Fdownload.microsoft.com%2Fdownload%2F1%2F6%2F1%2F161ba512-40e2-4cc9-843a-923143f3456c%2FAPMV12.rtf&amp;amp;usg=AFQjCNHoCx8gHv-w08Dn_Aoy6Q3K3DLWRg&amp;amp;sig2=D_66xvI7Y2n1cvyB8d2Mmg&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Bibliography:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Advanced_Power_Management" rel="nofollow"&gt;https://en.wikipedia.org/wiki/Advanced_Power_Management&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://wiki.osdev.org/APM" rel="nofollow"&gt;http://wiki.osdev.org/APM&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://wiki.osdev.org/Shutdown" rel="nofollow"&gt;http://wiki.osdev.org/Shutdown&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/21463908/x86-instructions-to-power-off-computer-in-real-mode" rel="nofollow"&gt;http://stackoverflow.com/questions/21463908/x86-instructions-to-power-off-computer-in-real-mode&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/678458/shutdown-the-computer-using-assembly" rel="nofollow"&gt;http://stackoverflow.com/questions/678458/shutdown-the-computer-using-assembly&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/3145569/how-to-power-down-the-computer-from-a-freestanding-environment" rel="nofollow"&gt;http://stackoverflow.com/questions/3145569/how-to-power-down-the-computer-from-a-freestanding-environment&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h3 id="user-content-acpi"&gt;&lt;a id="user-content-83-acpi" class="anchor" aria-hidden="true" href="#83-acpi"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#acpi"&gt;8.3. ACPI&lt;/a&gt;&lt;/h3&gt;
&lt;div&gt;
&lt;p&gt;TODO example&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;ACPI &lt;a href="https://en.wikipedia.org/wiki/Advanced_Configuration_and_Power_Interface" rel="nofollow"&gt;https://en.wikipedia.org/wiki/Advanced_Configuration_and_Power_Interface&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Newer and better.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Now managed by the same group that manages UEFI.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Spec:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;current: &lt;a href="http://uefi.org/specifications" rel="nofollow"&gt;http://uefi.org/specifications&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;old: &lt;a href="http://www.uefi.org/acpi/specs" rel="nofollow"&gt;http://www.uefi.org/acpi/specs&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h2 id="user-content-uefi"&gt;&lt;a id="user-content-9-uefi" class="anchor" aria-hidden="true" href="#9-uefi"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#uefi"&gt;9. UEFI&lt;/a&gt;&lt;/h2&gt;
&lt;div&gt;
&lt;div&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Unified_Extensible_Firmware_Interface" rel="nofollow"&gt;https://en.wikipedia.org/wiki/Unified_Extensible_Firmware_Interface&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Successor for &lt;a href="#bios"&gt;BIOS&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;All &lt;a href="#test-hardware"&gt;laptops I tested BIOS with&lt;/a&gt; had UEFI, so UEFI must have a BIOS emulation mode for backwards compatibility: &lt;a href="https://www.howtogeek.com/56958/htg-explains-how-uefi-will-replace-the-bios/" rel="nofollow"&gt;https://www.howtogeek.com/56958/htg-explains-how-uefi-will-replace-the-bios/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Made by Intel, mostly MIT open source, which likely implies that vendors will hack away closed source versions.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;&lt;a href="https://mjg59.dreamwidth.org/10014.html" rel="nofollow"&gt;Matthew Garrett says&lt;/a&gt; it is huge: larger than Linux without drivers.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Since it is huge, it inevitably contains bugs. Garret says that Intel sometimes does not feel like updating the firmware with bugfixes.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;UEFI offers a large API comparable to what most people would call an operating system:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://software.intel.com/en-us/articles/uefi-application" rel="nofollow"&gt;https://software.intel.com/en-us/articles/uefi-application&lt;/a&gt; mentions a POSIX C library port&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://lwn.net/Articles/641244/" rel="nofollow"&gt;https://lwn.net/Articles/641244/&lt;/a&gt; mentions a Python interpreter port!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;ARM is considering an implementation &lt;a href="https://wiki.linaro.org/ARM/UEFI" rel="nofollow"&gt;https://wiki.linaro.org/ARM/UEFI&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h3 id="user-content-uefi-example"&gt;&lt;a id="user-content-91-uefi-example" class="anchor" aria-hidden="true" href="#91-uefi-example"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#uefi-example"&gt;9.1. UEFI example&lt;/a&gt;&lt;/h3&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;make -C uefi run&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;TODO get a hello world program working:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.rodsbooks.com/efi-programming/hello.html" rel="nofollow"&gt;http://www.rodsbooks.com/efi-programming/hello.html&lt;/a&gt; Best source so far: allowed me to compile the hello world! TODO: how to run it now on QEMU and real hardware?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://fedoraproject.org/wiki/Using_UEFI_with_QEMU" rel="nofollow"&gt;https://fedoraproject.org/wiki/Using_UEFI_with_QEMU&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://wiki.ubuntu.com/UEFI/OVMF" rel="nofollow"&gt;https://wiki.ubuntu.com/UEFI/OVMF&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/tqh/efi-example"&gt;https://github.com/tqh/efi-example&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Running without image gives the UEFI shell, and a Linux kernel image booted fine with it: &lt;a href="http://unix.stackexchange.com/a/228053/32558" rel="nofollow"&gt;http://unix.stackexchange.com/a/228053/32558&lt;/a&gt;, so we just need to generate the image.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;The blob &lt;code&gt;uefi/ovmf.fd&lt;/code&gt; IA32 r15214 was downloaded from: &lt;a href="https://sourceforge.net/projects/edk2/files/OVMF/OVMF-IA32-r15214.zip/download" rel="nofollow"&gt;https://sourceforge.net/projects/edk2/files/OVMF/OVMF-IA32-r15214.zip/download&lt;/a&gt; TODO: automate building it from source instead, get rid of the blob, and force push it away from history. Working build setup sketch: &lt;a href="https://github.com/cirosantilli/linux-cheat/blob/b1c3740519eff18a7707de981ee3afea2051ba10/ovmf.sh"&gt;https://github.com/cirosantilli/linux-cheat/blob/b1c3740519eff18a7707de981ee3afea2051ba10/ovmf.sh&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;It seems that they have moved to GitHub at last: &lt;a href="https://github.com/tianocore/tianocore.github.io/wiki/How-to-build-OVMF/e372aa54750838a7165b08bb02b105148e2c4190"&gt;https://github.com/tianocore/tianocore.github.io/wiki/How-to-build-OVMF/e372aa54750838a7165b08bb02b105148e2c4190&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h3 id="user-content-uefi-bibliography"&gt;&lt;a id="user-content-92-uefi-bibliography" class="anchor" aria-hidden="true" href="#92-uefi-bibliography"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#uefi-bibliography"&gt;9.2. UEFI Bibliography&lt;/a&gt;&lt;/h3&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=V2aq5M3Q76U" rel="nofollow"&gt;https://www.youtube.com/watch?v=V2aq5M3Q76U&lt;/a&gt; hardcore kernel dev Matthew Garrett saying how bad UEFI is&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://wiki.archlinux.org/index.php/Unified_Extensible_Firmware_Interface" rel="nofollow"&gt;https://wiki.archlinux.org/index.php/Unified_Extensible_Firmware_Interface&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://wiki.osdev.org/UEFI" rel="nofollow"&gt;http://wiki.osdev.org/UEFI&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h2 id="user-content-coreboot"&gt;&lt;a id="user-content-10-coreboot" class="anchor" aria-hidden="true" href="#10-coreboot"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#coreboot"&gt;10. Coreboot&lt;/a&gt;&lt;/h2&gt;
&lt;div&gt;
&lt;div&gt;
&lt;p&gt;TODO minimal examples.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Coreboot" rel="nofollow"&gt;https://en.wikipedia.org/wiki/Coreboot&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;&lt;a href="https://www.coreboot.org" rel="nofollow"&gt;https://www.coreboot.org&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Open source hippie freedom loving cross platform firmware that attempts to replace BIOS and UEFI for the greater good of mankind.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h2 id="user-content-grub"&gt;&lt;a id="user-content-11-grub" class="anchor" aria-hidden="true" href="#11-grub"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#grub"&gt;11. GRUB&lt;/a&gt;&lt;/h2&gt;
&lt;div&gt;
&lt;div&gt;
&lt;p&gt;&lt;a href="grub/README.adoc"&gt;grub/README.adoc&lt;/a&gt; TODO cleanup and exemplify everything in that file. Some hosty stuff needs to go out maybe.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h3 id="user-content-grub-chainloader"&gt;&lt;a id="user-content-111-grub-chainloader" class="anchor" aria-hidden="true" href="#111-grub-chainloader"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#grub-chainloader"&gt;11.1. GRUB chainloader&lt;/a&gt;&lt;/h3&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;make -C grub/chainloader run&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Outcome: you are left in an interactive GRUB menu with two choices:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;hello-world&lt;/code&gt;: go into a hello world OS&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;self +1&lt;/code&gt;: reload ourselves, and almost immediately reload GRUB and fall on the same menu as before&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;This example illustrates the &lt;code&gt;chainloader&lt;/code&gt; GRUB command, which just loads a boot sector and runs it: &lt;a href="https://www.gnu.org/software/grub/manual/grub/html_node/chainloader.html" rel="nofollow"&gt;https://www.gnu.org/software/grub/manual/grub/html_node/chainloader.html&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;This is what you need to boot systems like Windows which GRUB does not know anything about: just point to their partition and let them do the job.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Both of the menu options are implemented with &lt;code&gt;chainloader&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;hello-world&lt;/code&gt;:&lt;/p&gt;
&lt;div&gt;
&lt;p&gt;Loads a given image file within the partition.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;After build, &lt;code&gt;grub-mkrescue&lt;/code&gt; creates a few filesystems, and &lt;code&gt;grub/chainloader/iso/boot/main.img&lt;/code&gt; is placed inside one of those filesystems.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;This illustrates GRUB’s awesome ability to understand certain filesystem formats, and fetch files from them, thus allowing us to pick between multiple operating systems with a single filesystem.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;It is educational to open up the generated &lt;code&gt;grub/chainloader/main.img&lt;/code&gt; with the techniques described at &lt;a href="https://askubuntu.com/questions/69363/mount-single-partition-from-image-of-entire-disk-device/673257#673257" rel="nofollow"&gt;https://askubuntu.com/questions/69363/mount-single-partition-from-image-of-entire-disk-device/673257#673257&lt;/a&gt; to observe that the third partition of the image is a VFAT filesystem, and that it contains the &lt;code&gt;boot/main.img&lt;/code&gt; image as a regular file.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;self +1&lt;/code&gt;: uses the syntax:&lt;/p&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;chainloader +1&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;which reloads the first sector of the current partition, and therefor ourselves.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;TODO: why does it fail for hybrid ISO images? &lt;a href="http://superuser.com/questions/154134/grub-how-to-boot-into-iso-partition#comment1337357_154271" rel="nofollow"&gt;http://superuser.com/questions/154134/grub-how-to-boot-into-iso-partition#comment1337357_154271&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h3 id="user-content-grub-linux"&gt;&lt;a id="user-content-112-grub-linux" class="anchor" aria-hidden="true" href="#112-grub-linux"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#grub-linux"&gt;11.2. GRUB linux&lt;/a&gt;&lt;/h3&gt;
&lt;div&gt;
&lt;p&gt;TODO get working.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;OK, let’s have some fun and do the real thing!&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;make -C grub/linux run&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Expected outcome: GRUB menu with a single &lt;code&gt;Buildroot&lt;/code&gt; entry. When you select it, a tiny pre-built Linux image boots from: &lt;a href="https://github.com/cirosantilli/linux-kernel-module-cheat"&gt;https://github.com/cirosantilli/linux-kernel-module-cheat&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Actual outcome: after selecting the entry, nothing shows on the screen. Even if we fix this, we will then also need to provide a rootfs somehow: the &lt;code&gt;initrd&lt;/code&gt; GRUB command would be a simple method, that repo can also generate initrd images: &lt;a href="https://github.com/cirosantilli/linux-kernel-module-cheat/tree/c06476bfc821659a4731d49e808f45e8c509c5e1#initrd"&gt;https://github.com/cirosantilli/linux-kernel-module-cheat/tree/c06476bfc821659a4731d49e808f45e8c509c5e1#initrd&lt;/a&gt; Maybe have look under Buildroot &lt;code&gt;boot/grub2&lt;/code&gt; and copy what they are doing there.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;The GRUB command is of form:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;linux /boot/bzImage root=/dev/sda1 console=tty1&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;so we see that the kernel boot parameters are passed right there, for example try to change the value of the &lt;code&gt;printk.time&lt;/code&gt; parameter:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;printk.time=y&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;and see how the dmesg times not get printed anymore.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h2 id="user-content-multiboot"&gt;&lt;a id="user-content-12-multiboot" class="anchor" aria-hidden="true" href="#12-multiboot"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#multiboot"&gt;12. Multiboot&lt;/a&gt;&lt;/h2&gt;
&lt;div&gt;
&lt;div&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Multiboot_Specification" rel="nofollow"&gt;https://en.wikipedia.org/wiki/Multiboot_Specification&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Standard created by GRUB for booting OSes.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Multiboot files are an extension of ELF files with a special header.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Advantages: GRUB does housekeeping magic for you:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;you can store the OS as a regular file inside a filesystem&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;your program starts in 32-bit mode already, not 16 bit real mode&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;it gets the available memory ranges for you&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Disadvantages:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;more boilerplate&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;GRUB leaves the application into a well defined starting state.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;It seems that Linux does not implement Multiboot natively, but GRUB supports it as an exception: &lt;a href="http://stackoverflow.com/questions/17909429/booting-a-non-multiboot-kernel-with-grub2" rel="nofollow"&gt;http://stackoverflow.com/questions/17909429/booting-a-non-multiboot-kernel-with-grub2&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h3 id="user-content-multiboot-hello-world"&gt;&lt;a id="user-content-121-multiboot-hello-world" class="anchor" aria-hidden="true" href="#121-multiboot-hello-world"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#multiboot-hello-world"&gt;12.1. Multiboot hello world&lt;/a&gt;&lt;/h3&gt;
&lt;div&gt;
&lt;p&gt;QEMU supports multiboot natively &lt;a href="https://stackoverflow.com/questions/25469396/how-to-use-qemu-properly-with-multi-boot-headers/32550281#32550281" rel="nofollow"&gt;https://stackoverflow.com/questions/25469396/how-to-use-qemu-properly-with-multi-boot-headers/32550281#32550281&lt;/a&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;make -C multiboot/hello-world run&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;which actually runs:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;qemu-system-i386 -kernel 'main.elf'&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;where &lt;code&gt;main.elf&lt;/code&gt; is the multiboot file we generated.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Outcome:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;hello world&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Or you can use &lt;code&gt;grub-mkrescue&lt;/code&gt; to make a multiboot file into a bootable ISO or disk:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;qemu-system-x86_64 -drive file=main.img,format=raw&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;The &lt;code&gt;main.img&lt;/code&gt; file can also be burned to a USB and run on real hardware.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Example originally minimized from &lt;a href="https://github.com/programble/bare-metal-tetris"&gt;https://github.com/programble/bare-metal-tetris&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;This example illustrates the &lt;code&gt;multiboot&lt;/code&gt; GRUB command: &lt;a href="https://www.gnu.org/software/grub/manual/grub/html_node/multiboot.html" rel="nofollow"&gt;https://www.gnu.org/software/grub/manual/grub/html_node/multiboot.html&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h3 id="user-content-osdev-multiboot-hello-world"&gt;&lt;a id="user-content-122-osdev-multiboot-hello-world" class="anchor" aria-hidden="true" href="#122-osdev-multiboot-hello-world"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#osdev-multiboot-hello-world"&gt;12.2. osdev multiboot hello world&lt;/a&gt;&lt;/h3&gt;
&lt;div&gt;
&lt;p&gt;We also track here the code from: &lt;a href="http://wiki.osdev.org/Bare_Bones" rel="nofollow"&gt;http://wiki.osdev.org/Bare_Bones&lt;/a&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;make -C multiboot/osdev run&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Outcome:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;hello world&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;This is interesting as it uses C as much as possible with some GAS where needed.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;This should serve as a decent basis for starting a pet OS. But please don’t, there are enough out there already :-)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h2 id="user-content-tests"&gt;&lt;a id="user-content-13-tests" class="anchor" aria-hidden="true" href="#13-tests"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#tests"&gt;13. Tests&lt;/a&gt;&lt;/h2&gt;
&lt;div&gt;
&lt;div&gt;
&lt;h3 id="user-content-unit-tests"&gt;&lt;a id="user-content-131-unit-tests" class="anchor" aria-hidden="true" href="#131-unit-tests"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#unit-tests"&gt;13.1. Unit tests&lt;/a&gt;&lt;/h3&gt;
&lt;div&gt;
&lt;p&gt;Tests for utilities defined in this repo, as opposed to x86 or external firmware concepts.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;TODO: implement the function and enable this test: &lt;a href="test_vga_print_bytes.S"&gt;test_vga_print_bytes.S&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h4 id="user-content-print_bytes"&gt;&lt;a id="user-content-1311-print_bytes" class="anchor" aria-hidden="true" href="#1311-print_bytes"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#print_bytes"&gt;13.1.1. PRINT_BYTES&lt;/a&gt;&lt;/h4&gt;
&lt;div&gt;
&lt;p&gt;Print several bytes in human readable form:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;./run test_print_bytes&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Source: &lt;a href="test_print_bytes.S"&gt;test_print_bytes.S&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Outcome:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;40 41 42 43 44 45 46 47
48 49 4A 4B 4C 4D 4E 4F
50&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h4 id="user-content-pit_sleep_ticks"&gt;&lt;a id="user-content-1312-pit_sleep_ticks" class="anchor" aria-hidden="true" href="#1312-pit_sleep_ticks"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#pit_sleep_ticks"&gt;13.1.2. PIT_SLEEP_TICKS&lt;/a&gt;&lt;/h4&gt;
&lt;div&gt;
&lt;p&gt;Print &lt;code&gt;a\n&lt;/code&gt; with frequency 2Hz:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;./run test_pit_sleep_ticks&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Source: &lt;a href="test_pit_sleep_ticks.S"&gt;test_pit_sleep_ticks.S&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Same but in protected mode:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;./run test_pit_sleep_protected&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Source: &lt;a href="test_pit_sleep_protected.S"&gt;test_pit_sleep_protected.S&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h3 id="user-content-test-hardware"&gt;&lt;a id="user-content-132-test-hardware" class="anchor" aria-hidden="true" href="#132-test-hardware"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#test-hardware"&gt;13.2. Test hardware&lt;/a&gt;&lt;/h3&gt;
&lt;div&gt;
&lt;h4 id="user-content-thinkpad-t400"&gt;&lt;a id="user-content-1321-thinkpad-t400" class="anchor" aria-hidden="true" href="#1321-thinkpad-t400"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#thinkpad-t400"&gt;13.2.1. ThinkPad T400&lt;/a&gt;&lt;/h4&gt;
&lt;div&gt;
&lt;p&gt;Most of this repo was originally tested on a &lt;a href="https://www.cnet.com/products/lenovo-thinkpad-t400/specs/" rel="nofollow"&gt;Lenovo ThinkPad T400&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Unfortunately it broke and I threw it away, and I didn’t write down the exact specs before doing so, notably the bootloader version.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h4 id="user-content-thinkpad-t430"&gt;&lt;a id="user-content-1322-thinkpad-t430" class="anchor" aria-hidden="true" href="#1322-thinkpad-t430"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#thinkpad-t430"&gt;13.2.2. ThinkPad T430&lt;/a&gt;&lt;/h4&gt;
&lt;div&gt;
&lt;p&gt;Then, when I moved to a new ThinkPad, I tested some of the examples on the &lt;a href="https://www.cnet.com/products/lenovo-thinkpad-t400/specs/" rel="nofollow"&gt;Lenovo ThinkPad T430&lt;/a&gt; I originally used to write this :-)&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Firmware: UEFI BIOS 1.16.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h2 id="user-content-about"&gt;&lt;a id="user-content-14-about" class="anchor" aria-hidden="true" href="#14-about"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#about"&gt;14. About&lt;/a&gt;&lt;/h2&gt;
&lt;div&gt;
&lt;div&gt;
&lt;h3 id="user-content-system-vs-userland"&gt;&lt;a id="user-content-141-system-vs-userland" class="anchor" aria-hidden="true" href="#141-system-vs-userland"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#system-vs-userland"&gt;14.1. System vs userland&lt;/a&gt;&lt;/h3&gt;
&lt;div&gt;
&lt;p&gt;This repository covers only things that can only be done from ring 0 (system) and not ring 3 (userland).&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Ring 3 is covered at: &lt;a href="https://github.com/cirosantilli/x86-assembly-cheat"&gt;https://github.com/cirosantilli/x86-assembly-cheat&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;An overview of rings 0 and 3 can be found at: &lt;a href="https://stackoverflow.com/questions/18717016/what-are-ring-0-and-ring-3-in-the-context-of-operating-systems/44483439#44483439" rel="nofollow"&gt;https://stackoverflow.com/questions/18717016/what-are-ring-0-and-ring-3-in-the-context-of-operating-systems/44483439#44483439&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h3 id="user-content-one-minimal-concept-per-os"&gt;&lt;a id="user-content-142-one-minimal-concept-per-os" class="anchor" aria-hidden="true" href="#142-one-minimal-concept-per-os"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#one-minimal-concept-per-os"&gt;14.2. One minimal concept per OS&lt;/a&gt;&lt;/h3&gt;
&lt;div&gt;
&lt;p&gt;There are a few tutorials that explain how to make an operating system and give examples of increasing complexity with more and more functionality added: &lt;a href="#progressive-tutorials"&gt;Progressive tutorials&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;This is not one of them.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;The goal of this repository is to use the minimal setup possible to be able to observe &lt;em&gt;a single&lt;/em&gt; low-level programming concept for each minimal operating system we create.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;This is not meant provide a template from which you can write a real OS, but instead to illustrate how those low-level concepts work in isolation, so that you can use that knowledge to implement operating systems or drivers.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Minimal examples are useful because it is easier to observe the requirements for a given concept to be observable.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Another advantage is that it is easier to DRY up minimal examples with macros or functions, which is much harder on progressive OS template tutorials, which tend to repeat big chunks of code between the examples.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h3 id="user-content-to-c-or-not-to-c"&gt;&lt;a id="user-content-143-to-c-or-not-to-c" class="anchor" aria-hidden="true" href="#143-to-c-or-not-to-c"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#to-c-or-not-to-c"&gt;14.3. To C or not to C&lt;/a&gt;&lt;/h3&gt;
&lt;div&gt;
&lt;p&gt;Using C or not is a hard choice.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;It does make it much easier to express higher level ideas, and gives portability.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;However, it increases the complexity that one has to understand a bit, so I decided to stay away from it when I wrote this tutorial.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;But I have since change my mind, and if I ever touch this again seriously, I would rewrite it in C based on &lt;a href="#c-hello-world"&gt;C hello world&lt;/a&gt; and Newlib: &lt;a href="https://electronics.stackexchange.com/questions/223929/c-standard-libraries-on-bare-metal/400077#400077" rel="nofollow"&gt;https://electronics.stackexchange.com/questions/223929/c-standard-libraries-on-bare-metal/400077#400077&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;If this is done, we this repo should then be merged into: &lt;a href="https://github.com/cirosantilli/linux-kernel-module-cheat/tree/87e846fc1f9c57840e143513ebd69c638bd37aa8#baremetal-setup"&gt;https://github.com/cirosantilli/linux-kernel-module-cheat/tree/87e846fc1f9c57840e143513ebd69c638bd37aa8#baremetal-setup&lt;/a&gt; together with the ARM Newlib baremetal setups present there.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h3 id="user-content-serial-uart"&gt;&lt;a id="user-content-144-serial-uart" class="anchor" aria-hidden="true" href="#144-serial-uart"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#serial-uart"&gt;14.4. Serial UART&lt;/a&gt;&lt;/h3&gt;
&lt;div&gt;
&lt;p&gt;What the heck is a serial in the real world: &lt;a href="https://unix.stackexchange.com/questions/307390/what-is-the-difference-between-ttys0-ttyusb0-and-ttyama0-in-linux/367882#367882" rel="nofollow"&gt;https://unix.stackexchange.com/questions/307390/what-is-the-difference-between-ttys0-ttyusb0-and-ttyama0-in-linux/367882#367882&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Currently all text output is done the display, and that was a newbie design choice from before I knew the serial existed. The serial is just generally more minimal and elegant than the display, and should have been used instead.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;./run bios_serial
cat bios_serial.tmp.serial&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;On QEMU, we see the serial output on the host terminal:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;hello world&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;and on Bochs we redirect it to a file:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;./run bios_serial bochs
cat bios_serial.tmp.serial&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Source: &lt;a href="bios_serial.S"&gt;bios_serial.S&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;TODO: failed attempt without BIOS:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;./run serial&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Source: &lt;a href="serial.S"&gt;serial.S&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Like every other of those old hardwares, it is impossible to find its documentation, must be rotting on some IBM mainframe that is not connected to the internet, so we go for:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;OSDev: &lt;a href="https://wiki.osdev.org/Serial_Ports" rel="nofollow"&gt;https://wiki.osdev.org/Serial_Ports&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Samy likely just copied OSDev that for his: &lt;a href="https://github.com/SamyPesse/How-to-Make-a-Computer-Operating-System/blob/eb30f8802fac9f0f1c28d3a96bb3d402bdfc4687/src/kernel/modules/x86serial.cc#L38"&gt;https://github.com/SamyPesse/How-to-Make-a-Computer-Operating-System/blob/eb30f8802fac9f0f1c28d3a96bb3d402bdfc4687/src/kernel/modules/x86serial.cc#L38&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Bibliography:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://stackoverflow.com/questions/22571379/intel-galileo-bare-metal-uart" rel="nofollow"&gt;https://stackoverflow.com/questions/22571379/intel-galileo-bare-metal-uart&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://stackoverflow.com/questions/27594297/how-to-print-a-string-to-the-terminal-in-x86-64-assembly-nasm-without-syscall" rel="nofollow"&gt;https://stackoverflow.com/questions/27594297/how-to-print-a-string-to-the-terminal-in-x86-64-assembly-nasm-without-syscall&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;This would open up:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;gem5 benchmarking and exploration, currently blocked on &lt;a href="https://stackoverflow.com/questions/50364863/how-to-get-graphical-gui-output-and-user-touch-keyboard-mouse-input-in-a-ful/50364864#50364864" rel="nofollow"&gt;https://stackoverflow.com/questions/50364863/how-to-get-graphical-gui-output-and-user-touch-keyboard-mouse-input-in-a-ful/50364864#50364864&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the output stays persistently on the host terminal. So we can run QEMU without a GUI, immediatily shutdown the machine it at the end, and not have to close QEMU manually all the time.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;automated unit tests. Ha, like I’m gonna be that diligent!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;easily working on ARM in a more uniform way to prepare for the move in to &lt;a href="https://github.com/cirosantilli/linux-kernel-module-cheat/tree/87e846fc1f9c57840e143513ebd69c638bd37aa8#baremetal-setup"&gt;https://github.com/cirosantilli/linux-kernel-module-cheat/tree/87e846fc1f9c57840e143513ebd69c638bd37aa8#baremetal-setup&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h3 id="user-content-macros-vs-functions"&gt;&lt;a id="user-content-145-macros-vs-functions" class="anchor" aria-hidden="true" href="#145-macros-vs-functions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#macros-vs-functions"&gt;14.5. Macros vs functions&lt;/a&gt;&lt;/h3&gt;
&lt;div&gt;
&lt;p&gt;Using macros for now on &lt;a href="common.h"&gt;common.h&lt;/a&gt; instead of functions because it simplifies the linker script.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;But the downsides are severe:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;no symbols to help debugging. TODO: I think there are assembly constructs for that.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;impossible to step over method calls: you have to step into everything. TODO: &lt;code&gt;until&lt;/code&gt;?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;larger output, supposing I can get linker gc for unused functions working, see &lt;code&gt;--gc-section&lt;/code&gt;, which is for now uncertain.&lt;/p&gt;
&lt;div&gt;
&lt;p&gt;If I can get this working, I’ll definitely move to function calls.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;The problem is that if I don’t, every image will need a stage 2 loader. That is not too serious though, it could be added to the &lt;code&gt;BEGIN&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;It seems that &lt;code&gt;ld&lt;/code&gt; can only remove sections, not individual symbols: &lt;a href="http://stackoverflow.com/questions/6687630/c-c-gcc-ld-remove-unused-symbols" rel="nofollow"&gt;http://stackoverflow.com/questions/6687630/c-c-gcc-ld-remove-unused-symbols&lt;/a&gt; With GCC we can use &lt;code&gt;-ffunction-sections -fdata-sections&lt;/code&gt; to quickly generate a ton of sections, but I don’t thing GAS supports that…​&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;We should just rewrite the whole thing to use functions instead…​&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h4 id="user-content-macro-conventions"&gt;&lt;a id="user-content-1451-macro-conventions" class="anchor" aria-hidden="true" href="#1451-macro-conventions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#macro-conventions"&gt;14.5.1. Macro conventions&lt;/a&gt;&lt;/h4&gt;
&lt;div&gt;
&lt;p&gt;Every "function-like macro" in &lt;a href="common.h"&gt;common.h&lt;/a&gt; must maintain the state of general purpose registers.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Flags are currently not maintained.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;&lt;code&gt;%sp&lt;/code&gt; cannot be used to pass most arguments.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;We don’t care about setting &lt;code&gt;%bp&lt;/code&gt; properly at the moment.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h3 id="user-content-nasm"&gt;&lt;a id="user-content-146-nasm" class="anchor" aria-hidden="true" href="#146-nasm"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#nasm"&gt;14.6. NASM&lt;/a&gt;&lt;/h3&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;cd nasm/
./run bios_hello_world&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Source: &lt;a href="nasm/bios_hello_world.asm"&gt;nasm/bios_hello_world.asm&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;While NASM is a bit more convenient than GAS to write a boot sector, I think it is just not worth it.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;When writing an OS in C, we are going to use GCC, which already uses GAS. So it’s better to reduce the number of assemblers to one and stick to GAS only.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Right now, this directory is not very DRY since NASM is secondary to me, so it contains mostly some copy / paste examples.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;On top of that, GAS also supports other architectures besides x86, so learning it is more useful in that sense.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h3 id="user-content-linux-is-open-source"&gt;&lt;a id="user-content-147-linux-is-open-source" class="anchor" aria-hidden="true" href="#147-linux-is-open-source"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#linux-is-open-source"&gt;14.7. Linux is open source&lt;/a&gt;&lt;/h3&gt;
&lt;div&gt;
&lt;p&gt;Always try looking into the Linux kernel to find how those CPU capabilities are used in a "real" OS.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h3 id="user-content-pre-requisites"&gt;&lt;a id="user-content-148-pre-requisites" class="anchor" aria-hidden="true" href="#148-pre-requisites"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#pre-requisites"&gt;14.8. Pre-requisites&lt;/a&gt;&lt;/h3&gt;
&lt;div&gt;
&lt;p&gt;OS dev is one of the most insanely hard programming tasks a person can undertake, and will push your knowledge of several domains to the limit.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Knowing the following will help a lot:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;userland x86 assembly: &lt;a href="https://github.com/cirosantilli/assembly-cheat"&gt;https://github.com/cirosantilli/assembly-cheat&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;compilation, linking and ELF format basics&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GDB debugging&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;While it is possible to learn those topics as you go along, and it is almost certain that you will end up learning more about them, we will not explain them here in detail.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h2 id="user-content-bibliography"&gt;&lt;a id="user-content-15-bibliography" class="anchor" aria-hidden="true" href="#15-bibliography"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#bibliography"&gt;15. Bibliography&lt;/a&gt;&lt;/h2&gt;
&lt;div&gt;
&lt;div&gt;
&lt;h3 id="user-content-intel-manual"&gt;&lt;a id="user-content-151-intel-manual" class="anchor" aria-hidden="true" href="#151-intel-manual"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#intel-manual"&gt;15.1. Intel manual&lt;/a&gt;&lt;/h3&gt;
&lt;div&gt;
&lt;p&gt;We are interested mostly in the "Intel Manual Volume 3 System Programming Guide", where system programming basically means "OS stuff" or "bare metal" as opposed to userland present in the other manuals.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;This repository quotes by default the following revision: 325384-056US September 2015 &lt;a href="https://web.archive.org/web/20151025081259/http://www.intel.com/content/dam/www/public/us/en/documents/manuals/64-ia-32-architectures-software-developer-system-programming-manual-325384.pdf" rel="nofollow"&gt;https://web.archive.org/web/20151025081259/http://www.intel.com/content/dam/www/public/us/en/documents/manuals/64-ia-32-architectures-software-developer-system-programming-manual-325384.pdf&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h3 id="user-content-small-educational-projects"&gt;&lt;a id="user-content-152-small-educational-projects" class="anchor" aria-hidden="true" href="#152-small-educational-projects"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#small-educational-projects"&gt;15.2. Small educational projects&lt;/a&gt;&lt;/h3&gt;
&lt;div&gt;
&lt;p&gt;Fun, educational and useless:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/arjun024/mkeykernel"&gt;https://github.com/arjun024/mkeykernel&lt;/a&gt;, &lt;a href="https://github.com/arjun024/mkernel"&gt;https://github.com/arjun024/mkernel&lt;/a&gt;&lt;/p&gt;
&lt;div&gt;
&lt;p&gt;Worked, but bad build system: not &lt;code&gt;Makefile&lt;/code&gt; or &lt;code&gt;.gitignore&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;The following did not work on my machine out of the box:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/apparentlymart/ToyOS"&gt;https://github.com/apparentlymart/ToyOS&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/rde1024/toyos"&gt;https://github.com/rde1024/toyos&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h4 id="user-content-baremetal-games"&gt;&lt;a id="user-content-1521-baremetal-games" class="anchor" aria-hidden="true" href="#1521-baremetal-games"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#baremetal-games"&gt;15.2.1. Baremetal games&lt;/a&gt;&lt;/h4&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/programble/bare-metal-tetris"&gt;https://github.com/programble/bare-metal-tetris&lt;/a&gt; tested on Ubuntu 14.04. Just works.&lt;/p&gt;
&lt;div&gt;
&lt;p&gt;Has Multiboot and El Torito. Uses custom linker script.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Almost entirely in C &lt;code&gt;-nostdlib&lt;/code&gt;, with very few inline &lt;code&gt;asm&lt;/code&gt; commands, and a small assembly entry point. So a good tutorial in how to do the bridge.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/daniel-e/tetros"&gt;https://github.com/daniel-e/tetros&lt;/a&gt; Tetris that fits into bootloader.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/nanochess/fbird"&gt;https://github.com/nanochess/fbird&lt;/a&gt; Flappy bird in the 512-byte boot sector.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/Overv/MineAssemble"&gt;https://github.com/Overv/MineAssemble&lt;/a&gt; Minecraft&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/tsoding/pinpog"&gt;https://github.com/tsoding/pinpog&lt;/a&gt; Pong / Breakout&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h3 id="user-content-tutorials"&gt;&lt;a id="user-content-153-tutorials" class="anchor" aria-hidden="true" href="#153-tutorials"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#tutorials"&gt;15.3. Tutorials&lt;/a&gt;&lt;/h3&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://farid.hajji.org/en/blog/46-hello-world-on-the-bare-metal" rel="nofollow"&gt;https://farid.hajji.org/en/blog/46-hello-world-on-the-bare-metal&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://arobenko.gitbooks.io/bare_metal_cpp/content/" rel="nofollow"&gt;https://arobenko.gitbooks.io/bare_metal_cpp/content/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h4 id="user-content-educational-nixes"&gt;&lt;a id="user-content-1531-educational-nixes" class="anchor" aria-hidden="true" href="#1531-educational-nixes"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#educational-nixes"&gt;15.3.1. Educational NIXes&lt;/a&gt;&lt;/h4&gt;
&lt;div&gt;
&lt;p&gt;One complexity order above the minimal tutorials, one below actual kernels&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.xinu.cs.purdue.edu/" rel="nofollow"&gt;http://www.xinu.cs.purdue.edu/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://pdos.csail.mit.edu/6.828/2014/xv6.html" rel="nofollow"&gt;https://pdos.csail.mit.edu/6.828/2014/xv6.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/MINIX" rel="nofollow"&gt;https://en.wikipedia.org/wiki/MINIX&lt;/a&gt;, influenced Linux&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/SerenityOS/serenity"&gt;https://github.com/SerenityOS/serenity&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h4 id="user-content-educational-non-nixes"&gt;&lt;a id="user-content-1532-educational-non-nixes" class="anchor" aria-hidden="true" href="#1532-educational-non-nixes"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#educational-non-nixes"&gt;15.3.2. Educational non-NIXes&lt;/a&gt;&lt;/h4&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/intermezzOS/book"&gt;https://github.com/intermezzOS/book&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/flosse/rust-os-comparison"&gt;https://github.com/flosse/rust-os-comparison&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h3 id="user-content-multi-collaborator-websites"&gt;&lt;a id="user-content-154-multi-collaborator-websites" class="anchor" aria-hidden="true" href="#154-multi-collaborator-websites"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#multi-collaborator-websites"&gt;15.4. Multi collaborator websites&lt;/a&gt;&lt;/h3&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;osdev.org is a major source for this.&lt;/p&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://wiki.osdev.org/C%2B%2B_Bare_Bones" rel="nofollow"&gt;http://wiki.osdev.org/C%2B%2B_Bare_Bones&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://wiki.osdev.org/Text_UI" rel="nofollow"&gt;http://wiki.osdev.org/Text_UI&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://wiki.osdev.org/GUI" rel="nofollow"&gt;http://wiki.osdev.org/GUI&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.osdever.net/" rel="nofollow"&gt;http://www.osdever.net/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://courses.engr.illinois.edu/ece390/books/labmanual/index.html" rel="nofollow"&gt;https://courses.engr.illinois.edu/ece390/books/labmanual/index.html&lt;/a&gt; Illinois course from 2004&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h3 id="user-content-progressive-tutorials"&gt;&lt;a id="user-content-155-progressive-tutorials" class="anchor" aria-hidden="true" href="#155-progressive-tutorials"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#progressive-tutorials"&gt;15.5. Progressive tutorials&lt;/a&gt;&lt;/h3&gt;
&lt;div&gt;
&lt;h4 id="user-content-jamesmolloy"&gt;&lt;a id="user-content-1551-jamesmolloy" class="anchor" aria-hidden="true" href="#1551-jamesmolloy"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#jamesmolloy"&gt;15.5.1. jamesmolloy&lt;/a&gt;&lt;/h4&gt;
&lt;div&gt;
&lt;p&gt;&lt;a href="http://www.jamesmolloy.co.uk/tutorial_html/index.html" rel="nofollow"&gt;http://www.jamesmolloy.co.uk/tutorial_html/index.html&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;The classic tutorial. Highly recommended.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Multiboot based kernels of increasing complexity, one example builds on the last one. Non DRY as a result.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Cleaned up source code: &lt;a href="https://github.com/cirosantilli/jamesmolloy-kernel-development-tutorials"&gt;https://github.com/cirosantilli/jamesmolloy-kernel-development-tutorials&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Well known bugs: &lt;a href="http://wiki.osdev.org/James_Molloy’s_Tutorial_Known_Bugs" rel="nofollow"&gt;http://wiki.osdev.org/James_Molloy’s_Tutorial_Known_Bugs&lt;/a&gt; That’s what happens when you don’t use GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Good tutorials, author seems to master the subject.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;But he could learn more about version control and build automation: source code inside ugly tar.gz with output files.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h4 id="user-content-cfenollosaos-tutorial"&gt;&lt;a id="user-content-1552-cfenollosaos-tutorial" class="anchor" aria-hidden="true" href="#1552-cfenollosaos-tutorial"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#cfenollosaos-tutorial"&gt;15.5.2. cfenollosa/os-tutorial&lt;/a&gt;&lt;/h4&gt;
&lt;div&gt;
&lt;p&gt;&lt;a href="https://github.com/cfenollosa/os-tutorial"&gt;https://github.com/cfenollosa/os-tutorial&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Ubuntu 18.04 usage: apply this patch &lt;a href="https://github.com/cfenollosa/os-tutorial/pull/100"&gt;https://github.com/cfenollosa/os-tutorial/pull/100&lt;/a&gt; and then:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;cd 23-fixes
make run&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Starts with raw assembly + inludes, moves to C midway.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Raw stage-2 loader. No task scheduling yet, but the feature is…​ "scheduled" ;-)&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Explains how to use the QEMU GDB stub and automates it on makefile, kudos.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Reviewed at: 7aff64740e1e3fba9a64c30c5cead0f88514eb62&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h4 id="user-content-samypessehow-to-make-a-computer-operating-system"&gt;&lt;a id="user-content-1553-samypessehow-to-make-a-computer-operating-system" class="anchor" aria-hidden="true" href="#1553-samypessehow-to-make-a-computer-operating-system"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#samypessehow-to-make-a-computer-operating-system"&gt;15.5.3. SamyPesse/How-to-Make-a-Computer-Operating-System&lt;/a&gt;&lt;/h4&gt;
&lt;div&gt;
&lt;p&gt;&lt;a href="https://github.com/SamyPesse/How-to-Make-a-Computer-Operating-System"&gt;https://github.com/SamyPesse/How-to-Make-a-Computer-Operating-System&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Has one big source tree that goes up to multitasking and a stdlib. Kernel written C++ and stdlib in C. TODO check: 64-bit, ring 0 vs ring 3? &lt;code&gt;git grep rax&lt;/code&gt;  has no hits, so I’m guessing no 64-bit.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Build failed on Ubunbu 18.04 with: &lt;a href="https://github.com/SamyPesse/How-to-Make-a-Computer-Operating-System/issues/127"&gt;https://github.com/SamyPesse/How-to-Make-a-Computer-Operating-System/issues/127&lt;/a&gt; and I didn’t bother to investigate.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Does have a &lt;code&gt;lucid32&lt;/code&gt; Vagrant file for the host, but lazy to try it out.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Reviewed at: eb30f8802fac9f0f1c28d3a96bb3d402bdfc4687&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h4 id="user-content-other-progressive-tutorials"&gt;&lt;a id="user-content-1554-other-progressive-tutorials" class="anchor" aria-hidden="true" href="#1554-other-progressive-tutorials"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#other-progressive-tutorials"&gt;15.5.4. Other progressive tutorials&lt;/a&gt;&lt;/h4&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://sourceforge.net/p/oszur11/code/ci/master/tree/" rel="nofollow"&gt;https://sourceforge.net/p/oszur11/code/ci/master/tree/&lt;/a&gt;&lt;/p&gt;
&lt;div&gt;
&lt;p&gt;GitHub mirror: &lt;a href="https://github.com/cirosantilli/oszur11-operating-system-examples"&gt;https://github.com/cirosantilli/oszur11-operating-system-examples&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Several examples of increasing complexity. Found at: &lt;a href="http://stackoverflow.com/questions/7130726/writing-a-hello-world-kernel" rel="nofollow"&gt;http://stackoverflow.com/questions/7130726/writing-a-hello-world-kernel&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Just works, but examples are non-minimal, lots of code duplication and blobs. There must be around 20 El Torito blobs in that repo.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Multiboot based.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.brokenthorn.com/Resources/OSDevIndex.html" rel="nofollow"&gt;http://www.brokenthorn.com/Resources/OSDevIndex.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://skelix.net/skelixos/index_en.html" rel="nofollow"&gt;http://skelix.net/skelixos/index_en.html&lt;/a&gt;&lt;/p&gt;
&lt;div&gt;
&lt;p&gt;Cleaned up version: &lt;a href="https://github.com/cirosantilli/skelix-os"&gt;https://github.com/cirosantilli/skelix-os&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Not tested yet.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;GAS based, no multiboot used.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/littleosbook/littleosbook"&gt;https://github.com/littleosbook/littleosbook&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h3 id="user-content-actually-useful"&gt;&lt;a id="user-content-156-actually-useful" class="anchor" aria-hidden="true" href="#156-actually-useful"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#actually-useful"&gt;15.6. Actually useful&lt;/a&gt;&lt;/h3&gt;
&lt;div&gt;
&lt;p&gt;These are not meant as learning resources but rather as useful programs:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/scanlime/metalkit"&gt;https://github.com/scanlime/metalkit&lt;/a&gt; A more automated / general bare metal compilation system. Untested, but looks promising.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Python without an "OS": &lt;a href="https://us.pycon.org/2015/schedule/presentation/378/" rel="nofollow"&gt;https://us.pycon.org/2015/schedule/presentation/378/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h3 id="user-content-arm"&gt;&lt;a id="user-content-157-arm" class="anchor" aria-hidden="true" href="#157-arm"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#arm"&gt;15.7. ARM&lt;/a&gt;&lt;/h3&gt;
&lt;div&gt;
&lt;p&gt;A list of ARM bare metal resources can be found at: &lt;a href="https://github.com/cirosantilli/arm-assembly-cheat/tree/117f5d7d3458c028275ce112725f2e36f594f13c#bare-metal"&gt;https://github.com/cirosantilli/arm-assembly-cheat/tree/117f5d7d3458c028275ce112725f2e36f594f13c#bare-metal&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h2 id="user-content-license"&gt;&lt;a id="user-content-16-license" class="anchor" aria-hidden="true" href="#16-license"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="#license"&gt;16. LICENSE&lt;/a&gt;&lt;/h2&gt;
&lt;div&gt;
&lt;div&gt;
&lt;p&gt;Copyright Ciro Santilli &lt;a href="http://www.cirosantilli.com/" rel="nofollow"&gt;http://www.cirosantilli.com/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;&lt;a href="https://www.gnu.org/licenses/gpl-3.0.txt" rel="nofollow"&gt;GPL v3&lt;/a&gt; for executable computer program usage.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;&lt;a href="https://creativecommons.org/licenses/by-sa/4.0/" rel="nofollow"&gt;CC BY-SA v4&lt;/a&gt; for human consumption usage in learning material, e.g. &lt;code&gt;.md&lt;/code&gt; files, source code comments, using source code excerpts in tutorials. Recommended attribution:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Single file adaptations:&lt;/p&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;Based on https://github.com/cirosantilli/x86-bare-metal-examples/blob/&amp;lt;commit-id&amp;gt;/path/to/file.md under CC BY-SA v4&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Multi-file adaptations:&lt;/p&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;Based on https://github.com/cirosantilli/x86-bare-metal-examples/tree/&amp;lt;commit-id&amp;gt; under CC BY-SA v4&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;If you want to use this work under a different license, contact the copyright owner, and he might make a good price.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/article&gt;&lt;/div&gt;</description><author>cirosantilli</author><guid isPermaLink="false">https://github.com/cirosantilli/x86-bare-metal-examples</guid><pubDate>Fri, 24 Jan 2020 00:01:00 GMT</pubDate></item><item><title>chrislgarry/Apollo-11 #2 in Assembly, Today</title><link>https://github.com/chrislgarry/Apollo-11</link><description>&lt;p&gt;&lt;i&gt;Original Apollo 11 Guidance Computer (AGC) source code for the command and lunar modules.&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-apollo-11" class="anchor" aria-hidden="true" href="#apollo-11"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Apollo-11&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://www.nasa.gov/mission_pages/apollo/missions/apollo11.html" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/b0879e5ad3dded69a38362aacf9ec5baac73b1eb/68747470733a2f2f72617763646e2e6769746861636b2e636f6d2f616c65656e34322f6261646765732f63393234366637342f7372632f6e6173612e737667" alt="NASA" data-canonical-src="https://rawcdn.githack.com/aleen42/badges/c9246f74/src/nasa.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;g-emoji class="g-emoji" alias="crossed_flags" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f38c.png"&gt;🎌&lt;/g-emoji&gt;
&lt;a href="README.id.md"&gt;Bahasa Indonesia&lt;/a&gt;,
&lt;a href="README.ca.md"&gt;Català&lt;/a&gt;,
&lt;a href="README.de.md"&gt;Deutsch&lt;/a&gt;,
&lt;strong&gt;English&lt;/strong&gt;,
&lt;a href="README.es.md"&gt;Español&lt;/a&gt;,
&lt;a href="README.fr.md"&gt;Français&lt;/a&gt;,
&lt;a href="README.it.md"&gt;Italiano&lt;/a&gt;,
&lt;a href="README.pl.md"&gt;Polski&lt;/a&gt;,
&lt;a href="README.pt_br.md"&gt;Português&lt;/a&gt;,
&lt;a href="README.ro.md"&gt;Română&lt;/a&gt;,
&lt;a href="README.vi.md"&gt;Tiếng Việt&lt;/a&gt;,
&lt;a href="README.tr.md"&gt;Türkçe&lt;/a&gt;,
&lt;a href="README.ru.md"&gt;Русский&lt;/a&gt;,
&lt;a href="README.ar.md"&gt;العربية&lt;/a&gt;,
&lt;a href="README.fa.md"&gt;فارسی&lt;/a&gt;,
&lt;a href="README.hi_in.md"&gt;हिंदी&lt;/a&gt;,
&lt;a href="README.bd_bn.md"&gt;বাংলা&lt;/a&gt;,
&lt;a href="README.mm.md"&gt;မြန်မာ&lt;/a&gt;,
&lt;a href="README.ja.md"&gt;日本&lt;/a&gt;,
&lt;a href="README.zh_tw.md"&gt;正體中文&lt;/a&gt;,
&lt;a href="README.zh_cn.md"&gt;简体中文&lt;/a&gt;,
&lt;a href="README.ko_kr.md"&gt;한국어&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Original Apollo 11 guidance computer (AGC) source code for Command
Module (Comanche055) and Lunar Module (Luminary099). Digitized by
the folks at &lt;a href="http://www.ibiblio.org/apollo/" rel="nofollow"&gt;Virtual AGC&lt;/a&gt; and &lt;a href="http://web.mit.edu/museum/" rel="nofollow"&gt;MIT Museum&lt;/a&gt;. The goal is to be
a repo for the original Apollo 11 source code. As such, PRs are
welcome for any issues identified between the transcriptions in this
repository and the original source scans for &lt;a href="http://www.ibiblio.org/apollo/ScansForConversion/Luminary099/" rel="nofollow"&gt;Luminary 099&lt;/a&gt; and
&lt;a href="http://www.ibiblio.org/apollo/ScansForConversion/Comanche055/" rel="nofollow"&gt;Comanche 055&lt;/a&gt;, as well as any files I may have missed.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-contributing" class="anchor" aria-hidden="true" href="#contributing"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contributing&lt;/h2&gt;
&lt;p&gt;Please read &lt;a href="https://github.com/chrislgarry/Apollo-11/blob/master/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt; before opening a pull request.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-compiling" class="anchor" aria-hidden="true" href="#compiling"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Compiling&lt;/h2&gt;
&lt;p&gt;If you are interested in compiling the original source code, check
out &lt;a href="https://github.com/rburkey2005/virtualagc"&gt;Virtual AGC&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-attribution" class="anchor" aria-hidden="true" href="#attribution"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Attribution&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt; &lt;/th&gt;
&lt;th align="left"&gt; &lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Copyright&lt;/td&gt;
&lt;td align="left"&gt;Public domain&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Comanche055&lt;/td&gt;
&lt;td align="left"&gt;Part of the source code for Colossus 2A, the Command Module's (CM) Apollo Guidance Computer (AGC) for Apollo 11&lt;br&gt;&lt;code&gt;Assemble revision 055 of AGC program Comanche by NASA&lt;/code&gt;&lt;br&gt;&lt;code&gt;2021113-051. 10:28 APR. 1, 1969&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Luminary099&lt;/td&gt;
&lt;td align="left"&gt;Part of the source code for Luminary 1A, the Lunar Module's (LM) Apollo Guidance Computer (AGC) for Apollo 11&lt;br&gt;&lt;code&gt;Assemble revision 001 of AGC program LYM99 by NASA&lt;/code&gt;&lt;br&gt;&lt;code&gt;2021112-061. 16:27 JUL. 14, 1969&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Assembler&lt;/td&gt;
&lt;td align="left"&gt;yaYUL&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Contact&lt;/td&gt;
&lt;td align="left"&gt;Ron Burkey &lt;a href="mailto:info@sandroid.org"&gt;info@sandroid.org&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Website&lt;/td&gt;
&lt;td align="left"&gt;&lt;a href="http://www.ibiblio.org/apollo" rel="nofollow"&gt;www.ibiblio.org/apollo&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Digitalization&lt;/td&gt;
&lt;td align="left"&gt;This source code has been transcribed or otherwise adapted from digitized images of a hardcopy from the MIT Museum. The digitization was performed by Paul Fjeld, and arranged for by Deborah Douglas of the Museum. Many thanks to both.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;&lt;a id="user-content-contract-and-approvals" class="anchor" aria-hidden="true" href="#contract-and-approvals"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contract and Approvals&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Derived from &lt;a href="https://github.com/chrislgarry/Apollo-11/blob/master/Comanche055/CONTRACT_AND_APPROVALS.agc"&gt;CONTRACT_AND_APPROVALS.agc&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This AGC program shall also be referred to as Colossus 2A.&lt;/p&gt;
&lt;p&gt;This program is intended for use in the CM as specified in report &lt;code&gt;R-577&lt;/code&gt;. This program was prepared under DSR project &lt;code&gt;55-23870&lt;/code&gt;, sponsored by the Manned Spacecraft Center of The National Aeronautics and Space Administration through contract &lt;code&gt;NAS 9-4065&lt;/code&gt; with the Instrumentation Laboratory, Massachusetts Institute of Technology, Cambridge, Mass.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt;Submitted by&lt;/th&gt;
&lt;th align="left"&gt;Role&lt;/th&gt;
&lt;th align="left"&gt;Date&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Margaret H. Hamilton&lt;/td&gt;
&lt;td align="left"&gt;Colossus Programming Leader&lt;br&gt;Apollo Guidance and Navigation&lt;/td&gt;
&lt;td align="left"&gt;28 Mar 69&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt;Approved by&lt;/th&gt;
&lt;th align="left"&gt;Role&lt;/th&gt;
&lt;th align="left"&gt;Date&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Daniel J. Lickly&lt;/td&gt;
&lt;td align="left"&gt;Director, Mission Program Development&lt;br&gt;Apollo Guidance and Navigation Program&lt;/td&gt;
&lt;td align="left"&gt;28 Mar 69&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Fred H. Martin&lt;/td&gt;
&lt;td align="left"&gt;Colossus Project Manager&lt;br&gt;Apollo Guidance and Navigation Program&lt;/td&gt;
&lt;td align="left"&gt;28 Mar 69&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Norman E. Sears&lt;/td&gt;
&lt;td align="left"&gt;Director, Mission Development&lt;br&gt;Apollo Guidance and Navigation Program&lt;/td&gt;
&lt;td align="left"&gt;28 Mar 69&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Richard H. Battin&lt;/td&gt;
&lt;td align="left"&gt;Director, Mission Development&lt;br&gt;Apollo Guidance and Navigation Program&lt;/td&gt;
&lt;td align="left"&gt;28 Mar 69&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;David G. Hoag&lt;/td&gt;
&lt;td align="left"&gt;Director&lt;br&gt;Apollo Guidance and Navigation Program&lt;/td&gt;
&lt;td align="left"&gt;28 Mar 69&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Ralph R. Ragan&lt;/td&gt;
&lt;td align="left"&gt;Deputy Director&lt;br&gt;Instrumentation Laboratory&lt;/td&gt;
&lt;td align="left"&gt;28 Mar 69&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>chrislgarry</author><guid isPermaLink="false">https://github.com/chrislgarry/Apollo-11</guid><pubDate>Fri, 24 Jan 2020 00:02:00 GMT</pubDate></item><item><title>cjdelisle/cjdns #3 in Assembly, Today</title><link>https://github.com/cjdelisle/cjdns</link><description>&lt;p&gt;&lt;i&gt;An encrypted IPv6 network using public-key cryptography for address allocation and a distributed hash table for routing.&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-cjdns" class="anchor" aria-hidden="true" href="#cjdns"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;cjdns&lt;/h1&gt;
&lt;p&gt;&lt;a href="README_RU.md"&gt;Русская версия&lt;/a&gt;
&lt;a href="README_HR.md"&gt;Hrvatski&lt;/a&gt;
&lt;a href="README_SV.md"&gt;Svenska&lt;/a&gt;
&lt;a href="README_GR.md"&gt;Ελληνικά&lt;/a&gt;
&lt;a href="README_DE.md"&gt;Deutsch&lt;/a&gt;
&lt;a href="README_ZHT.md"&gt;繁體中文&lt;/a&gt;
&lt;a href="README_ES.md"&gt;Español&lt;/a&gt;
&lt;a href="README_FR.md"&gt;Français&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-networking-reinvented" class="anchor" aria-hidden="true" href="#networking-reinvented"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;em&gt;Networking Reinvented&lt;/em&gt;&lt;/h4&gt;
&lt;p&gt;Cjdns implements an encrypted IPv6 network using public-key cryptography for
address allocation and a distributed hash table for routing. This provides
near-zero-configuration networking, and prevents many of the security and
scalability issues that plague existing networks.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://travis-ci.org/cjdelisle/cjdns" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/886fc79904e1c66d039cfcadf7dd9187096b8c8e/68747470733a2f2f6170692e7472617669732d63692e6f72672f636a64656c69736c652f636a646e732e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://api.travis-ci.org/cjdelisle/cjdns.svg?branch=master" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://bestpractices.coreinfrastructure.org/projects/387" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/76b4c090b7ca1b6b9a5439807af10588e3c8eb4a/68747470733a2f2f626573747072616374696365732e636f7265696e6672617374727563747572652e6f72672f70726f6a656374732f3338372f6261646765" alt="CII Best Practices" data-canonical-src="https://bestpractices.coreinfrastructure.org/projects/387/badge" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://tip4commit.com/github/cjdelisle/cjdns" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/0d574afaae896c2ff8182a338b4d594b37b0a481/68747470733a2f2f74697034636f6d6d69742e636f6d2f70726f6a656374732f3934312e737667" alt="tip for next commit" data-canonical-src="https://tip4commit.com/projects/941.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://kiwiirc.com/client/irc.efnet.org/?nick=visitor%7C?#cjdns" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/c95ed11c5090561f05f8123c4f8b021d4f33beb2/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f697263253230636861742d253233636a646e732d626c75652e737667" alt="irc" data-canonical-src="https://img.shields.io/badge/irc%20chat-%23cjdns-blue.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/9e8486c28af2c0280b44f060704934163dac89f6/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f636a64656c69736c652f636a646e732e737667"&gt;&lt;img src="https://camo.githubusercontent.com/9e8486c28af2c0280b44f060704934163dac89f6/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f636a64656c69736c652f636a646e732e737667" alt="License" data-canonical-src="https://img.shields.io/github/license/cjdelisle/cjdns.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-testimonials" class="anchor" aria-hidden="true" href="#testimonials"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Testimonials&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;23:26 &amp;lt;@jercos&amp;gt; well, cjdns is now officially more reliable than the open
                internet for getting to my cheaper VPSes :|

12:52 &amp;lt; mariner&amp;gt; so i don't know if it's been done before, and i assume it's
                 obvious, but I think it's neat. Currently on hype from an
                 airplane

00:36 &amp;lt; tester&amp;gt; man sites take so long to load on i2p
00:36 &amp;lt; tester&amp;gt; i value speed over anonymity any day

&amp;lt;DuoNoxSol&amp;gt; it's notably more reliable than the normal internet

09:46 &amp;lt; Kubuxu&amp;gt; I so love cjdns code base

&amp;lt;whyrusleeping&amp;gt; my internet is way better now.
&amp;lt;whyrusleeping&amp;gt; thanks
&amp;lt;whyrusleeping&amp;gt; i'm really upset and sad that its better
&amp;lt;whyrusleeping&amp;gt; but also quite happy

21:01 &amp;lt;@grewalsat&amp;gt; this is amazing. with my workpalce speedtest.net results I get around 6+mb speed, and with my cjdns-gate as vpn network I'm getting like 11-15mb download speed in speedtest.net
21:01 &amp;lt;@grewalsat&amp;gt; :P
21:01 &amp;lt;@grewalsat&amp;gt; plus, access anything! :D

&amp;lt;davidar&amp;gt; Yeah, I have to admit I sort of avoided hypeirc because of stuff like that
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;a id="user-content-community" class="anchor" aria-hidden="true" href="#community"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Community&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://chat.efnet.org/irc.cgi?chan=%23cjdns" rel="nofollow"&gt;irc://irc.efnet.org/#cjdns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hyperboria.net" rel="nofollow"&gt;Hyperboria&lt;/a&gt; the largest cjdns network, as of October 2015 there are 2100 nodes.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/darknetplan" rel="nofollow"&gt;/r/darknetplan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/hashtag/cjdns" rel="nofollow"&gt;#cjdns on Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/cjdns/" rel="nofollow"&gt;/r/CJDNS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Documentation&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="doc/projectGoals.md"&gt;Project Goals&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="doc/Whitepaper.md"&gt;Cjdns Whitepaper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Cjdns" rel="nofollow"&gt;Cjdns on Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Advanced configuration:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="doc/nat-gateway.md"&gt;Setup a cjdns NAT gateway for your LAN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="doc/open-indiana.md"&gt;Install cjdns on OpenIndiana&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thank you for your time and interest,&lt;/p&gt;
&lt;p&gt;The cjdns developers.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;&lt;a id="user-content-how-to-install-cjdns" class="anchor" aria-hidden="true" href="#how-to-install-cjdns"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;How to install cjdns&lt;/h2&gt;
&lt;p&gt;These instructions are for Debian-based Linux distributions and macOS. They should be
informative enough for use on other distributions - just don't expect them to
work verbatim. If you want to know what &lt;a href="https://upload.wikimedia.org/wikipedia/commons/1/1b/Linux_Distribution_Timeline.svg" rel="nofollow"&gt;operating system's base is go here&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-0-install-dependencies" class="anchor" aria-hidden="true" href="#0-install-dependencies"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;0. Install dependencies&lt;/h3&gt;
&lt;p&gt;On both platforms, installing &lt;a href="https://nodejs.org/" rel="nofollow"&gt;Node.js&lt;/a&gt;, although preferable,
is not strictly necessary. If Node.js is unavailable or an unacceptable version,
it will be downloaded and installed in the source tree.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-debian-based-distro" class="anchor" aria-hidden="true" href="#debian-based-distro"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Debian-based distro:&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get install nodejs git build-essential python2.7
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;&lt;a id="user-content-fedora-22-based-distro" class="anchor" aria-hidden="true" href="#fedora-22-based-distro"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Fedora 22+ based distro:&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;sudo dnf install nodejs git
sudo dnf install @development-tools
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;&lt;a id="user-content-rhel-based-distro-adds-the-epel-repo" class="anchor" aria-hidden="true" href="#rhel-based-distro-adds-the-epel-repo"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;RHEL based distro (adds the EPEL repo):&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;sudo yum localinstall https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
sudo yum install nodejs git
sudo yum install @development-tools
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;&lt;a id="user-content-building-from-package" class="anchor" aria-hidden="true" href="#building-from-package"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Building from package:&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;sudo yum localinstall https://kojipkgs.fedoraproject.org//packages/cjdns/17.4/4.el6/src/cjdns-17.4-4.el6.src.rpm
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you are on a laptop and suspend or hibernate it, cjdroute will take a few
minutes to make coffee and figure out what just happened when it wakes up.  You
can speed this up dramatically with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;systemctl enable cjdns-resume
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The resume service restarts cjdns when the system wakes up from sleep.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-gentoo" class="anchor" aria-hidden="true" href="#gentoo"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Gentoo&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;emerge --ask nodejs sys-devel/gcc dev-lang/python:3.4 dev-vcs/git
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;&lt;a id="user-content-macos" class="anchor" aria-hidden="true" href="#macos"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;macOS:&lt;/h4&gt;
&lt;p&gt;Install with &lt;a href="https://brew.sh/" rel="nofollow"&gt;Homebrew&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;brew install cjdns
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Install with &lt;a href="https://www.macports.org/" rel="nofollow"&gt;MacPorts&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo port install cjdns
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;&lt;a id="user-content-openbsd" class="anchor" aria-hidden="true" href="#openbsd"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;OpenBSD:&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;pkg_add git node gcc gmake bash
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Select version gcc-4.8.1p2 or more recent.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-freebsd" class="anchor" aria-hidden="true" href="#freebsd"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;FreeBSD:&lt;/h4&gt;
&lt;p&gt;Everything you need is available prebuild in FreeBSD' ports.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pkg install gmake node
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;&lt;a id="user-content-arch" class="anchor" aria-hidden="true" href="#arch"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Arch:&lt;/h4&gt;
&lt;p&gt;You can install cjdns by running:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pacman -S cjdns
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you need to build from source, everything you need can be installed like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pacman -S nodejs git base-devel
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Alternatively, you may like to install via AUR from the package, &lt;code&gt;cjdns-git&lt;/code&gt;.
After Installation, The configuration file is located at &lt;code&gt;/etc/cjdroute.conf&lt;/code&gt;.
To start the service &lt;code&gt;cjdns.service&lt;/code&gt;, do:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;systemctl start cjdns
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To stop it:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;systemctl stop cjdns
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;&lt;a id="user-content-gentoo-1" class="anchor" aria-hidden="true" href="#gentoo-1"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Gentoo:&lt;/h4&gt;
&lt;p&gt;cjdns is not yet in the main Gentoo repository, so you will have to use an overlay.
The easiest way is to use Layman but you can do it by hand, too.&lt;/p&gt;
&lt;h5&gt;&lt;a id="user-content-layman" class="anchor" aria-hidden="true" href="#layman"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Layman:&lt;/h5&gt;
&lt;p&gt;First, you need to install layman.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;emerge layman
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If layman is installed correctly, you can add the overlay&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;layman -f
layman -a weuxel
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For future update of the overlay use&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;layman -S
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you can install cjdns&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;emerge cjdns
&lt;/code&gt;&lt;/pre&gt;
&lt;h5&gt;&lt;a id="user-content-by-hand" class="anchor" aria-hidden="true" href="#by-hand"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;By hand:&lt;/h5&gt;
&lt;p&gt;You will have to clone the overlay repository&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd /opt
git clone https://github.com/Weuxel/portage-weuxel.git
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now tell portage to use this repo&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd /etc/portage/repos.conf/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Create a file &lt;code&gt;portage-weuxel.conf&lt;/code&gt; containing&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[weuxel]
location = /opt/portage-weuxel
masters = gentoo
auto-sync = yes
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now sync&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;emerge --sync
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And install cjdns&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;emerge cjdns
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;&lt;a id="user-content-automatic-crash-detection-and-restart" class="anchor" aria-hidden="true" href="#automatic-crash-detection-and-restart"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Automatic crash detection and restart&lt;/h4&gt;
&lt;p&gt;Copy the the openrc init script from &lt;code&gt;contrib/openrc&lt;/code&gt; to &lt;code&gt;/etc/init.d/&lt;/code&gt; and modify the &lt;code&gt;CONFFILE&lt;/code&gt; and &lt;code&gt;command&lt;/code&gt; parameter to your needs.
Then start cjdns by issuing&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/etc/init.d/cjdns start
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Configure the init system to autostart cjdns&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;rc-update add cjdns default
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Copy the service_restart script &lt;code&gt;contrib/gentoo/service_restart.sh&lt;/code&gt; to any convenient directory on
your system and modify the eMail address. If you do not wish to be notified, comment out the whole line.
Now add a crontab entry like this&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Restart crashed Services
* * * * *       root	/path/to/script/service_restart.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;&lt;a id="user-content-solus" class="anchor" aria-hidden="true" href="#solus"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Solus:&lt;/h4&gt;
&lt;p&gt;Dependencies:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo eopkg install nodejs git build-essential system.devel python gcc binutils kernal-headers xorg-server-devel
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then Follow the steps below:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Sorry for so many steps. A package is being worked on currently&lt;/em&gt;&lt;/p&gt;
&lt;h5&gt;&lt;a id="user-content-1-retrieve-cjdns-from-github" class="anchor" aria-hidden="true" href="#1-retrieve-cjdns-from-github"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. Retrieve cjdns from GitHub&lt;/h5&gt;
&lt;p&gt;Clone the repository from GitHub and change to the source directory:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clone https://github.com/cjdelisle/cjdns.git cjdns
cd cjdns
&lt;/code&gt;&lt;/pre&gt;
&lt;h5&gt;&lt;a id="user-content-2-build" class="anchor" aria-hidden="true" href="#2-build"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. Build&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt;./do
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Look for &lt;code&gt;Build completed successfully, type ./cjdroute to begin setup.&lt;/code&gt;, then
proceed below:&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;&lt;a id="user-content-setup" class="anchor" aria-hidden="true" href="#setup"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Setup&lt;/h2&gt;
&lt;p&gt;Run cjdroute without options for HELP:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./cjdroute
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-0-make-sure-youve-got-the-stuff" class="anchor" aria-hidden="true" href="#0-make-sure-youve-got-the-stuff"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;0. Make sure you've got the stuff.&lt;/h3&gt;
&lt;p&gt;If you're on macOS, don't worry about this step.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;LANG=C cat /dev/net/tun
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If it says: &lt;code&gt;cat: /dev/net/tun: File descriptor in bad state&lt;/code&gt; Good!&lt;/p&gt;
&lt;p&gt;If it says: &lt;code&gt;cat: /dev/net/tun: No such file or directory&lt;/code&gt;, create it using:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo mkdir -p /dev/net &amp;amp;&amp;amp;
sudo mknod /dev/net/tun c 10 200 &amp;amp;&amp;amp;
sudo chmod 0666 /dev/net/tun
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then &lt;code&gt;cat /dev/net/tun&lt;/code&gt; again.&lt;/p&gt;
&lt;p&gt;If it says: &lt;code&gt;cat: /dev/net/tun: Permission denied&lt;/code&gt; You're probably using a VPS
based on the OpenVZ virtualization platform. Ask your provider to enable the
TUN/TAP device - this is standard protocol so they should know exactly what you
need.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-1-generate-a-new-configuration-file" class="anchor" aria-hidden="true" href="#1-generate-a-new-configuration-file"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. Generate a new configuration file&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;./cjdroute --genconf &amp;gt;&amp;gt; cjdroute.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Protect your conf file!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A lost conf file means you lost your password and
connections and anyone who connected to you will no longer be able to connect.
A compromised conf file means that other people can impersonate you on the
network.&lt;/p&gt;
&lt;p&gt;To generate a conf file with permissions set so that only your user can
read it and write to it:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(umask 077 &amp;amp;&amp;amp; ./cjdroute --genconf &amp;gt; cjdroute.conf)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-2-find-a-friend" class="anchor" aria-hidden="true" href="#2-find-a-friend"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. Find a friend&lt;/h3&gt;
&lt;p&gt;To get into an existing network (e.g. Hyperboria), you need to connect to
someone who is already in the network. This is required for a number of
reasons:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It helps prevent abuse because bad people will be less likely to abuse a
system after they were, in an act of human kindness, given access to that
system.&lt;/li&gt;
&lt;li&gt;This is not intended to overlay The Old Internet, it is intended to replace
it. Each connection will in due time be replaced by a wire, a fiber optic
cable, or a wireless network connection.&lt;/li&gt;
&lt;li&gt;In any case of a disagreement, there will be a "chain of friends" linking
the people involved so there will already be a basis for coming to a
resolution.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To find a friend, get out there and join our &lt;a href="#community"&gt;community&lt;/a&gt;. Also, have
a look at the &lt;a href="https://www.fc00.org/" rel="nofollow"&gt;Hyperboria Map&lt;/a&gt; to find peers near you.&lt;/p&gt;
&lt;p&gt;You can also use the geographically assorted list of public peering credentials for joining Hyperboria at &lt;a href="https://github.com/hyperboria/peers"&gt;hyperboria/peers&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-3-connect-your-node-to-your-friends-node" class="anchor" aria-hidden="true" href="#3-connect-your-node-to-your-friends-node"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. Connect your node to your friend's node&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;To initiate the connection OUTbound&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In your conf file, you will see:&lt;/p&gt;
&lt;div class="highlight highlight-source-js"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Nodes to connect to.&lt;/span&gt;
&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;connectTo&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt;
{
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Add connection credentials here to join the network&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Ask somebody who is already connected.&lt;/span&gt;
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A conf file with multiple friend-nodes, setup OUTbound, should look like:&lt;/p&gt;
&lt;div class="highlight highlight-source-js"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Nodes to connect to.&lt;/span&gt;
&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;connectTo&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt;
{
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;friend_1 (IPv4: 0.1.2.3; IPv6 fcaa:5bac:66e4:713:cb00:e446:c317:fc39)&lt;/span&gt;
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;0.1.2.3:45678&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt;
    {
        &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;login&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;k.alexander&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
        &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;password&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;thisIsNotARealConnection_1&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
        &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;publicKey&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;thisIsJustForAnExampleDoNotUseThisInYourConfFile_1.k&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
    },

    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;friend_2 (IPv4: 5.1.2.3; IPv6 fcbb:5bac:66e4:713:cb00:e446:c317:fc39)&lt;/span&gt;
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;5.1.2.3:5678&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt;
    {
        &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;login&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;k.alexander&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
        &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;password&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;thisIsNotARealConnection_2&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
        &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;publicKey&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;thisIsJustForAnExampleDoNotUseThisInYourConfFile_2.k&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can add as many connections as you want to the &lt;code&gt;connectTo&lt;/code&gt; attribute,
following JSON syntax.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;To allow your friend to initiate the connection INbound&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In your conf file, you will see:&lt;/p&gt;
&lt;div class="highlight highlight-source-js"&gt;&lt;pre&gt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;authorizedPasswords&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt;
[
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; A unique string which is known to the client and server.&lt;/span&gt;
    {&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;password&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;password001&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;login&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;default-login&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}

    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; More passwords should look like this.&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; {"password": "password002", "login": "my-second-peer"}&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; {"password": "password003", "login": "my-third-peer}&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; {"password": "password004", "login": "my-fourth-peer"}&lt;/span&gt;
    &lt;span class="pl-k"&gt;...&lt;/span&gt;

    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; "your.external.ip.goes.here:45678":{"login": "default-login", "password": "password001","publicKey":thisisauniqueKEY_001.k"}&lt;/span&gt;

],&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A conf file with multiple friend-nodes, setup INbound, should look like:&lt;/p&gt;
&lt;div class="highlight highlight-source-js"&gt;&lt;pre&gt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;authorizedPasswords&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt;
[
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; A unique string which is known to the client and server.&lt;/span&gt;
    {&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;password&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;thisisauniquestring_001&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;user&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;k.alexander&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}

    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; More passwords should look like this.&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;William Jevons (IPv4: 0.1.2.3; IPv6 fcaa:5bac:66e4:713:cb00:e446:c317:fc39)&lt;/span&gt;
    {&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;password&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;thisisauniquestring_002&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;user&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;William Jevons&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;Marilyn Patel (IPv4: 5.1.2.3; IPv6 fcbb:5bac:66e4:713:cb00:e446:c317:fc39)&lt;/span&gt;
    {&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;password&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;thisisauniquestring_003&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;user&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Marilyn Patel&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; {"password": "thisisauniquestring_004"}&lt;/span&gt;
    &lt;span class="pl-k"&gt;...&lt;/span&gt;

    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; "your.external.ip.goes.here:45678":{"password": "thisisauniquestring_001","publicKey":thisisauniqueKEY_001.k"}&lt;/span&gt;
],&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You need to give William Jevons (who is making the INbound connection) the following 4 items:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Your external IPv4&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The port found in your conf file here:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;// Bind to this port. "bind": "0.0.0.0:yourportnumberishere",&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Their unique password that you uncommented or created: &lt;code&gt;"password": "thisisauniquestring_002"&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Your public key: &lt;code&gt;"publicKey": "thisisauniqueKEY_001.k"&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;His username: "William Jevons"&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;His login credentials will look something like this (with your IPv4 and port):&lt;/p&gt;
&lt;div class="highlight highlight-source-js"&gt;&lt;pre&gt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;1.2.3.4:56789&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; {
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;login&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;William Jevons&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;password&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;thisisauniquestring_002&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;publicKey&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;thisIsJustForAnExampleDoNotUseThisInYourConfFile_1.k&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Please note that you and your friend can &lt;em&gt;initiate&lt;/em&gt; a
connection either outbound (from YOU --&amp;gt; FRIEND) or inbound (from FRIEND --&amp;gt; YOU)
but traffic flows both ways once the connection is established.&lt;/p&gt;
&lt;p&gt;See &lt;a href="doc/configure.md"&gt;doc/configure.md&lt;/a&gt; for more details on configuration,
including how to peer with other cjdns nodes over ethernet and wifi.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-4-secure-your-system---check-for-listening-services" class="anchor" aria-hidden="true" href="#4-secure-your-system---check-for-listening-services"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4. Secure your system - check for listening services&lt;/h3&gt;
&lt;p&gt;Once your node is running, you're now a newly minted IPv6 host. Your operating
system may automatically reconfigure network services to use this new address.
If this is not what you intend, you should check to see that you are not
offering more services than you intended to. ;)&lt;/p&gt;
&lt;p&gt;See &lt;a href="doc/network-services.md"&gt;doc/network-services.md&lt;/a&gt; for instructions.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-5-start-it-up" class="anchor" aria-hidden="true" href="#5-start-it-up"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;5. Start it up!&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;sudo ./cjdroute &amp;lt; cjdroute.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you want to have your logs written to a file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo ./cjdroute &amp;lt; cjdroute.conf &amp;gt; cjdroute.log
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To stop cjdns:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo killall cjdroute
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you are having problems use &lt;code&gt;killall cjdroute&lt;/code&gt; to return to sanity. Use
&lt;code&gt;pgrep cjdroute&lt;/code&gt; or &lt;code&gt;top&lt;/code&gt; to see if it running.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This starts cjdns as the root user so it can configure your system
without concern for permissions. To start cjdns as a non-root user, see
&lt;a href="doc/non-root-user.md"&gt;doc/non-root-user.md&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-6-get-in-irc" class="anchor" aria-hidden="true" href="#6-get-in-irc"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;6. Get in IRC&lt;/h3&gt;
&lt;p&gt;Welcome to the network! You're now a network administrator. There are
responsibilities which come with being a network administrator which include
being available in case there is something wrong with your equipment. You should
stay on &lt;a href="#community"&gt;IRC&lt;/a&gt; so that people can reach you.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-admin-interface" class="anchor" aria-hidden="true" href="#admin-interface"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Admin interface&lt;/h2&gt;
&lt;p&gt;When cjdroute is up and running, the admin interface will be available at
&lt;code&gt;udp://localhost:11234&lt;/code&gt; (this can be changed in the &lt;code&gt;cjdroute.conf&lt;/code&gt;
configuration file). See &lt;a href="doc/admin-api.md"&gt;doc/admin-api.md&lt;/a&gt; for more
information about the admin interface. There are several tools in &lt;code&gt;contrib/&lt;/code&gt;
that can interact with it.&lt;/p&gt;
&lt;p&gt;You can access the admin API with:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the &lt;strong&gt;Python library&lt;/strong&gt;; see &lt;a href="contrib/python/README.md"&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;the &lt;strong&gt;Perl library&lt;/strong&gt;, maintained by Mikey; see &lt;a href="contrib/perl/CJDNS/README"&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-reporting-issues" class="anchor" aria-hidden="true" href="#reporting-issues"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Reporting issues&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Don't report in this repo, please instead report it at &lt;a href="https://github.com/hyperboria/bugs/issues"&gt;https://github.com/hyperboria/bugs/issues&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Get on IRC and talk to somebody&lt;/li&gt;
&lt;li&gt;What will happen is either&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Someone feels like fixing it&lt;/li&gt;
&lt;li&gt;You feel like fixing it&lt;/li&gt;
&lt;li&gt;Nobody cares about it and it will be forgotten for a while and maybe someone will hit it later
and fix it or else it will get wiped away in a refactoring&lt;/li&gt;
&lt;li&gt;Nobody can fix it at the moment but it is considered worth remembering because it has great
significance to the way the code is developed, in this case it needs to be explained in technical
terms by someone with strong familiarity with the code. They will make a pull request to the
docs/bugs directory.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-security" class="anchor" aria-hidden="true" href="#security"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Security&lt;/h3&gt;
&lt;p&gt;Security issues should be reported on IRC the same as other bugs. We don't have a closed
group of people with special knowledge so that means the default security reporting method is
full disclosure.&lt;/p&gt;
&lt;p&gt;See: &lt;a href="https://github.com/cjdelisle/cjdns/blob/master/doc/security_specification.md"&gt;security_specification.md&lt;/a&gt; to see if a
possible security issue is really a security issue.&lt;/p&gt;
&lt;p&gt;That time of year again... Time for some open source Projects!
&lt;a href="https://hacktoberfest.digitalocean.com/" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/f6d611fe72bdfb133a84783df6f30b28367bd17d/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4f70656e253230536f757263652d4861636b746f626572666573742d6f72616e67652e737667" alt="Hacktoberfest" data-canonical-src="https://img.shields.io/badge/Open%20Source-Hacktoberfest-orange.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>cjdelisle</author><guid isPermaLink="false">https://github.com/cjdelisle/cjdns</guid><pubDate>Fri, 24 Jan 2020 00:03:00 GMT</pubDate></item><item><title>virtualagc/virtualagc #4 in Assembly, Today</title><link>https://github.com/virtualagc/virtualagc</link><description>&lt;p&gt;&lt;i&gt;Virtual Apollo Guidance Computer (AGC) software&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-virtual-apollo-guidance-computer" class="anchor" aria-hidden="true" href="#virtual-apollo-guidance-computer"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Virtual Apollo Guidance Computer&lt;/h1&gt;
&lt;h3&gt;&lt;a id="user-content-build-status" class="anchor" aria-hidden="true" href="#build-status"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Build status&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Travis CI (Linux)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://travis-ci.org/virtualagc/virtualagc/branches" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/85790975a88fceab7086704d758265f841606c32/68747470733a2f2f7472617669732d63692e6f72672f7669727475616c6167632f7669727475616c6167632e7376673f6272616e63683d6d6173746572" alt="travis-image" data-canonical-src="https://travis-ci.org/virtualagc/virtualagc.svg?branch=master" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The &lt;a href="https://en.wikipedia.org/wiki/Apollo_(spacecraft)" rel="nofollow"&gt;Apollo&lt;/a&gt; spacecraft used for lunar missions in the late 1960's and early 1970's was really two different spacecraft, the &lt;a href="https://en.wikipedia.org/wiki/Apollo_command_and_service_module" rel="nofollow"&gt;Command Module (CM)&lt;/a&gt; and the &lt;a href="https://en.wikipedia.org/wiki/Apollo_Lunar_Module" rel="nofollow"&gt;Lunar Module (LM)&lt;/a&gt;. The CM was used to get the three astronauts to the moon, and back again. The LM was used to land two of the astronauts on the moon while the third astronaut remained in the CM, in orbit around the moon.&lt;/p&gt;
&lt;p&gt;Each of the spacecraft needed to be able to navigate through space, with or without the assistance of the astronauts, and therefore needed to have a "guidance system". The guidance system was developed by &lt;a href="https://en.wikipedia.org/wiki/MIT_Instrumentation_Laboratory" rel="nofollow"&gt;MIT's Instrumentation Lab&lt;/a&gt;, now an independent company known as the Charles Stark Draper Laboratory.&lt;/p&gt;
&lt;p&gt;An important part of the guidance system was the &lt;a href="https://en.wikipedia.org/wiki/Apollo_Guidance_Computer" rel="nofollow"&gt;Apollo Guidance Computer&lt;/a&gt;—or just "AGC" for short. On any given Apollo mission, there were two AGCs, one for the Command Module, and one for the Lunar Module. The two AGCs were identical and interchangeable, but they ran different software because the tasks the spacecraft had to perform were different. Moreover, the software run by the AGC evolved over time, so that the AGC software used in later missions like &lt;a href="https://en.wikipedia.org/wiki/Apollo_17" rel="nofollow"&gt;Apollo 17&lt;/a&gt; differed somewhat from that of earlier missions like &lt;a href="https://en.wikipedia.org/wiki/Apollo_8" rel="nofollow"&gt;Apollo 8&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Considered just as a computer, the AGC was severely underpowered by modern standards.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-other-repository-branches" class="anchor" aria-hidden="true" href="#other-repository-branches"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Other Repository Branches&lt;/h1&gt;
&lt;p&gt;Since you are looking at this README file, you are in the "master" branch of the repository, which contains source-code transcriptions of the original Project Apollo software for the Apollo Guidance Computer (AGC) and &lt;a href="https://en.wikipedia.org/wiki/Apollo_Abort_Guidance_System" rel="nofollow"&gt;Abort Guidance System (AGS)&lt;/a&gt;, as well as our software for emulating the AGC, AGS, and some of their peripheral devices (such as the display-keyboard unit, or DSKY).&lt;/p&gt;
&lt;p&gt;Other branches of the repository often contain very different files. Here are some of the more-significant branches which differ in that way from the master branch:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;gh-pages&lt;/strong&gt;: HTML files and imagery for the main Virtual AGC Project website. Contains the complete website, exclusive of the large library of scanned supplementary documentation and drawings.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;mechanical&lt;/strong&gt;: 2D CAD files and 3D models in DXF and STEP formats, intended to replicate the original AGC/DSKY mechanical design.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;scenarios&lt;/strong&gt;: Pad loads or other setup for mission scenarios.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;schematics&lt;/strong&gt;: CAD transcriptions in KiCad format of the original AGC/DSKY electrical design.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;wiki&lt;/strong&gt;: Wiki files associated with the repository.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;a id="user-content-agc-specifications" class="anchor" aria-hidden="true" href="#agc-specifications"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;AGC Specifications&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;2048 words of RAM. A "word" was 15 bits of data—therefore just under 2 bytes (16 bits) of data—and so the total RAM was just 3840 bytes.&lt;/li&gt;
&lt;li&gt;36,864 words of read-only memory, equivalent to 69,120 bytes.&lt;/li&gt;
&lt;li&gt;Maximum of about 85,000 CPU instructions executed per second.&lt;/li&gt;
&lt;li&gt;Dimensions: 24"×12.5"×6".&lt;/li&gt;
&lt;li&gt;Weight: 70.1 pounds.&lt;/li&gt;
&lt;li&gt;Power supply: 2.5A of current at 28V DC&lt;/li&gt;
&lt;li&gt;Real DSKY.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It is occasionally quipped—with perhaps greater wit than insight—that the AGC was more like a calculator than a computer. But to say this is to grossly underestimate the AGC's sophistication. For example, the AGC was multi-tasking, so that it could seemingly run multiple programs simultaneously.&lt;/p&gt;
&lt;p&gt;Another important part of the guidance system was the &lt;a href="https://en.wikipedia.org/wiki/Apollo_Guidance_Computer#/media/File:Apollo_DSKY_interface.svg" rel="nofollow"&gt;Display/Keyboard unit&lt;/a&gt;—or just "DSKY" for short. The AGC by itself was simply a box with electrical connections, without any built-in way for the astronaut to access it. The DSKY provided the astronaut with an interface by which to access the AGC.&lt;/p&gt;
&lt;p&gt;The Lunar Module had a single DSKY, positioned between the two astronauts where it could be operated by either of them. The Command Module actually had two DSKYs. One of the CM's DSKYs was only the main control panel, while the other was positioned near the optical equipment used to mark the positions of stars or other landmarks.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-dsky-specifications" class="anchor" aria-hidden="true" href="#dsky-specifications"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;DSKY Specifications&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Dimensions: 8"×8"×7"&lt;/li&gt;
&lt;li&gt;Weight: 17.5 pounds.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Perhaps the most important part of the guidance system was the &lt;a href="https://en.wikipedia.org/wiki/Apollo_PGNCS" rel="nofollow"&gt;Inertial Measurement Unit&lt;/a&gt;—or just "IMU" for short. The IMU continuously kept track of the acceleration and rotation of the spacecraft, and reported this information back to the AGC. By mathematically processing this data, the AGC could know on a moment-by-moment basis the orientation and position of the spacecraft.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-what-this-project-is-for" class="anchor" aria-hidden="true" href="#what-this-project-is-for"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;What this project is for&lt;/h1&gt;
&lt;p&gt;This repository is associated with &lt;a href="http://www.ibiblio.org/apollo" rel="nofollow"&gt;the website of the Virtual AGC project&lt;/a&gt;, which provides a virtual machine which simulates the AGC, the DSKY, and some other portions of the guidance system. In other words, if the virtual machine—which we call yaAGC—is given the same software which was originally run by the real AGCs, and is fed the same input signals encountered by the real AGCs during Apollo missions, then it will respond in the same way as the real AGCs did.&lt;/p&gt;
&lt;p&gt;The Virtual AGC software is open source code so that it can be studied or modified. The repository contains the actual assembly-language source code for the AGC, for as many missions as we've been able to acquire, along with software for processing that AGC code. Principal tools are an assembler (to create executable code from the source code) and a CPU simulator (to run the executable code), as well as simulated peripherals (such as the DSKY). Similar source code and tools are provided for the very-different abort computer that resided in the Lunar Module. Finally, any supplemental software material we have been able to find or create for the Saturn rocket's &lt;a href="https://en.wikipedia.org/wiki/Saturn_Launch_Vehicle_Digital_Computer" rel="nofollow"&gt;Launch Vehicle Digital Computer&lt;/a&gt; or for the &lt;a href="https://en.wikipedia.org/wiki/Gemini_Guidance_Computer" rel="nofollow"&gt;Gemini on-board computer (OBC)&lt;/a&gt; are provided, though these materials are minimal at present.&lt;/p&gt;
&lt;p&gt;Virtual AGC is a computer model of the AGC. It does not try to mimic the superficial behavioral characteristics of the AGC, but rather to model the AGC's inner workings. The result is a computer model of the AGC which is itself capable of executing the original Apollo software on (for example) a desktop PC. In computer terms, Virtual AGC is an emulator. Virtual AGC also provides an emulated Abort Guidance System (AGS) and (in the planning stages) an emulated LVDC. Virtual AGC is a catch-all term that comprises all of these.&lt;/p&gt;
&lt;p&gt;The current version of the Virtual AGC software has been designed to work in Linux, in Windows XP/Vista/7, and in Mac OS X 10.3 or later (but 10.5 or later is best). It also works in at least some versions of FreeBSD. However, since I personally work in Linux, I have the most confidence in the Linux version.&lt;/p&gt;
&lt;p&gt;You can read about this project in more detail here:
&lt;a href="http://www.ibiblio.org/apollo/index.html" rel="nofollow"&gt;http://www.ibiblio.org/apollo/index.html&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-what-this-project-is-not-for" class="anchor" aria-hidden="true" href="#what-this-project-is-not-for"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;What this project is not for&lt;/h1&gt;
&lt;p&gt;Virtual AGC is not a flight simulator, nor a lunar-lander simulator, nor even a behavioral simulation of the Apollo Lunar Module (LM) or Command-Module (CM) control panels. (In other words, if you expect a realistic LM control panel to suddenly appear on your computer screen, you'll be disappointed.) Virtual AGC could be used, however, as a component of such a simulation, and developers of such software are encouraged to do so. Indeed, some developers already have! See the FAQ for more information:
&lt;a href="http://www.ibiblio.org/apollo/faq.html" rel="nofollow"&gt;http://www.ibiblio.org/apollo/faq.html&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-requirements" class="anchor" aria-hidden="true" href="#requirements"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Requirements&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Tcl/Tk is required for all platforms.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-linux" class="anchor" aria-hidden="true" href="#linux"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Linux&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Requires Fedora Core 4 or later.&lt;/li&gt;
&lt;li&gt;Requires Ubuntu 7.04 or later.&lt;/li&gt;
&lt;li&gt;Requires SuSE 10.1 or later.&lt;/li&gt;
&lt;li&gt;Known to work on Raspbian (Raspberry Pi) 2016-05-27.&lt;/li&gt;
&lt;li&gt;et, presumably, cetera.&lt;/li&gt;
&lt;li&gt;32 and 64-bit systems have been tested successfully.&lt;/li&gt;
&lt;li&gt;The X-Window system, xterm, and gtk+ libraries must be installed.&lt;/li&gt;
&lt;li&gt;You will need the normal gcc C/C++ compiler toolchain, as well as developer packages ("dev" or "devel") for wxWidgets, ncurses and SDL.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;On Fedora 22 or later you may encounter that the wxWidgets doesn't have the wx-config but the wx-config-3.0 utility as well as the wxrc-3.0 versus wxrc. Just create a symbolic link for wx-config and wxrc respectively&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-windows" class="anchor" aria-hidden="true" href="#windows"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Windows&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Requires XP or later. 32-bit systems have been tested successfully.&lt;/li&gt;
&lt;li&gt;Vista and Windows 7 may need workarounds. For example, on the Windows platform it is expected that the Tcl/Tk installation program will create a file called &lt;code&gt;wish.exe&lt;/code&gt; but on Windows Vista the installation program creates a file called &lt;code&gt;wish85.exe&lt;/code&gt;. This prevents certain features of Virtual AGC from working. The workaround is to duplicate the file &lt;code&gt;c:\tcl\bin\wish85.exe&lt;/code&gt; and call the duplicate &lt;code&gt;c:\tcl\bin\wish.exe&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Windows 98 or prior are known not to work. Windows 2000 has not been tested.&lt;/li&gt;
&lt;li&gt;You will need the MinGW compiler with the options selected - if offered - of including g++ compiler and make.&lt;/li&gt;
&lt;li&gt;You will also need the Msys environment, wxWidgets 2.8.9 or above, POSIX Threads for Windows, GNU readline for Windows and the regular-expression library from MinGW called libgnurx.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-mac-os-x" class="anchor" aria-hidden="true" href="#mac-os-x"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Mac OS X:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Requires 10.4 and later for Intel or PowerPC&lt;/li&gt;
&lt;li&gt;10.2 or prior are known not to work.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-freebsd" class="anchor" aria-hidden="true" href="#freebsd"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;FreeBSD:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Requires FreeBSD 7.2 or later.&lt;/li&gt;
&lt;li&gt;Requires PC-BSD 7.1 or later.&lt;/li&gt;
&lt;li&gt;You will need to install wxWidgets 2.8.9, GNU readline 6.0 into &lt;code&gt;/usr/local&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;libSDL must be installed&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-opensolaris" class="anchor" aria-hidden="true" href="#opensolaris"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;OpenSolaris&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Requires OpenSolaris 0811.&lt;/li&gt;
&lt;li&gt;The code is only confirmed to partially work on this platform.&lt;/li&gt;
&lt;li&gt;You will need SUNWgnome-common-devel, SUNWGtk, SUNWxorg-headers, FSWxorg-headers, SUNWncurses, SUNWtcl, SUNWtk and SUNWlibsdl&lt;/li&gt;
&lt;li&gt;You will also need GNU readline 6.0, wxWidgets 2.8.9 (with &lt;code&gt;configure --disable-shared&lt;/code&gt;), Allegro 4.2.2 (with "configure --enable-shared=no --enable-static=yes") and to put &lt;code&gt;/usr/local/bin&lt;/code&gt; and/or &lt;code&gt;/usr/local/bin/wx-config&lt;/code&gt; linked into your &lt;code&gt;PATH&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;More information at &lt;a href="http://www.ibiblio.org/apollo/download.html#Build" rel="nofollow"&gt;http://www.ibiblio.org/apollo/download.html#Build&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-building-the-virtual-agc-software" class="anchor" aria-hidden="true" href="#building-the-virtual-agc-software"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Building the Virtual AGC software&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;cd yaAGC
make
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;a id="user-content-linux-1" class="anchor" aria-hidden="true" href="#linux-1"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Linux&lt;/h2&gt;
&lt;p&gt;These instructions relate specifically to building from source as of 2016-08-07 on 64-bit Linux Mint 17.3. I'm sorry to have to make them so specific, but hopefully they are easily adapted to other Linux environments. Alternate build instructions (for example, for Raspberry Pi) may be found at &lt;a href="http://www.ibiblio.org/apollo/download.html" rel="nofollow"&gt;http://www.ibiblio.org/apollo/download.html&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You will probably have to install a variety of packages which aren't normally installed. I found that I had to install the following, which were all available from the standard software repositories (in Linux Mint, anyway):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;libsdl1.2-dev&lt;/li&gt;
&lt;li&gt;libncurses5-dev&lt;/li&gt;
&lt;li&gt;liballegro4.4-dev or liballegro4-dev&lt;/li&gt;
&lt;li&gt;g++&lt;/li&gt;
&lt;li&gt;libgtk2.0-dev&lt;/li&gt;
&lt;li&gt;libwxgtk2.8-dev&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To build, simply &lt;code&gt;cd&lt;/code&gt; into the directory containing the source and do:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;make&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Note: Do not &lt;code&gt;configure&lt;/code&gt; and do not &lt;code&gt;make install&lt;/code&gt;. While there is a &lt;code&gt;configure&lt;/code&gt; script provided, it is presently used only for setting up builds of a couple of now-obsoleted programs, and it does not matter whether you run it or not nor whether it succeeds or fails. If the build does not complete because of a difference when comparing the &lt;code&gt;bin&lt;/code&gt; files then you can rebuild with &lt;code&gt;make -k&lt;/code&gt; to keep going. This however might mask other issues.&lt;/p&gt;
&lt;p&gt;You will find that this has created a directory &lt;code&gt;VirtualAGC/temp/lVirtualAGC/&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To match the default setup of the installer program execute the following:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mv yaAGC/VirtualAGC/temp/lVirtualAGC ~/VirtualAGC&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;You can make a desktop icon called &lt;em&gt;Virtual AGC&lt;/em&gt; that links to &lt;code&gt;VirtualAGC/bin/VirtualAGC&lt;/code&gt;. The image normally used for the desktop icon is found at &lt;code&gt;VirtualAGC/bin/ApolloPatch2.png&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you try to use the ACA simulation (joystick) and it doesn't work you can find some information on configuring it here:
&lt;a href="http://www.ibiblio.org/apollo/yaTelemetry.html#Joystick_configuration_for_use_with_the" rel="nofollow"&gt;http://www.ibiblio.org/apollo/yaTelemetry.html#Joystick_configuration_for_use_with_the&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-windows-1" class="anchor" aria-hidden="true" href="#windows-1"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Windows&lt;/h2&gt;
&lt;p&gt;Run &lt;code&gt;Msys&lt;/code&gt; to bring up a command shell and enter your home directory.&lt;/p&gt;
&lt;p&gt;Install the SDL library with this command:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;make install-sdl prefix=/usr/local&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;All software needed to build Virtual AGC will be installed under &lt;code&gt;/usr/local&lt;/code&gt;, so eventually it will be populated with sub-directories such as &lt;code&gt;/usr/local/bin&lt;/code&gt;, &lt;code&gt;/usr/local/include&lt;/code&gt;, &lt;code&gt;/usr/local/lib&lt;/code&gt;, and so on. The Virtual AGC makefiles are hard-coded to assume these installation locations. Note, the Virtual AGC binaries you are going to create are not installed under &lt;code&gt;/usr/local&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;At present, Virtual AGC binary packages are always built with wxWidgets 2.8.9, so 2.8.9 is a safe choice. Unpack the tarball in your home directory, 'cd' into the directory this creates, and then do &lt;code&gt;./configure&lt;/code&gt;, &lt;code&gt;make&lt;/code&gt;, and &lt;code&gt;make install&lt;/code&gt;. The &lt;code&gt;configure&lt;/code&gt; step will accept various command-line options that select unicode vs. ansi, static linking vs. dynamic linking, etc., but the default options seem to work fine.&lt;/p&gt;
&lt;p&gt;Install POSIX Threads for Windows ("pthreads"). You can do this by unpacking the source tarball, 'cd' into the directory it creates, then run the command &lt;code&gt;make clean GC-inlined&lt;/code&gt;. This creates various files that you should copy into &lt;code&gt;/usr/local&lt;/code&gt; as follows: &lt;code&gt;copy \*.dll&lt;/code&gt; into &lt;code&gt;/usr/local/bin&lt;/code&gt;; copy &lt;code&gt;\*.h&lt;/code&gt; into &lt;code&gt;/usr/local/include&lt;/code&gt;; copy the single &lt;code&gt;libpthread\*.a&lt;/code&gt; file created into &lt;code&gt;/usr/local/lib&lt;/code&gt; and rename it &lt;code&gt;libpthread.a&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Install GNU readline for Windows. You should find zipfiles of both binaries and developer files are available for download. They should both be downloaded and unpacked into &lt;code&gt;/usr/local&lt;/code&gt;. (I.e., each zipfile contains directories like &lt;code&gt;bin/&lt;/code&gt;, &lt;code&gt;include/&lt;/code&gt;, &lt;code&gt;lib/&lt;/code&gt;, and so on, and we want these to be merged into &lt;code&gt;/usr/local/bin/&lt;/code&gt;, &lt;code&gt;/usr/local/include/&lt;/code&gt;, etc.)&lt;/p&gt;
&lt;p&gt;Install a regular-expression library. The MinGW project has a "contributed" regex library ("libgnurx") that you can use. Download both the &lt;code&gt;bin&lt;/code&gt; and &lt;code&gt;dev&lt;/code&gt; tarballs and unpack them into &lt;code&gt;/usr/local&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If all of this was done correctly you can build the Virtual AGC as follows:&lt;/p&gt;
&lt;p&gt;Unpack the development tarball in your home directory:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;tar -xjvf yaAGC-dev-YYYYMMDD.tar.bz2&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Build it:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;make -C yaAGC WIN32=yes&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;On Windows 7 (but not on XP) it is also necessary to copy &lt;code&gt;c:\MinGW\bin\mingwm10.dll&lt;/code&gt; to &lt;code&gt;yaAGC/VirtualAGC/temp/lVirtualAGC/Resources/&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This will create a directory &lt;code&gt;yaAGC/VirtualAGC/temp/lVirtualAGC/&lt;/code&gt; which is the "installation directory". This directory is relocatable and need to remain within the Msys environment so you can move it wherever you like. Regardless you really need to create a desktop icon in order to run the program. The desktop icon should point to &lt;code&gt;lVirtualAGC\bin\VirtualAGC.exe&lt;/code&gt; as the executable, and should use a "starting directory" of &lt;code&gt;lVirtualAGC\Resources&lt;/code&gt;. The graphic normally used for the desktop icon is &lt;code&gt;ApolloPatch2.jpg&lt;/code&gt; in the &lt;code&gt;lVirtualAGC\Resources&lt;/code&gt; directory.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-mac-os-x-1" class="anchor" aria-hidden="true" href="#mac-os-x-1"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Mac OS X&lt;/h2&gt;
&lt;p&gt;From the command line unpack the development-snapshot tarball as follows:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;tar --bzip2 -xf yaAGC-dev-YYYYMMDD.tar.bz2&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Get the Terminator application's dmg file:
&lt;a href="https://storage.googleapis.com/google-code-archive-downloads/v2/code.google.com/jessies/terminator-26.159.6816.zip" rel="nofollow"&gt;https://storage.googleapis.com/google-code-archive-downloads/v2/code.google.com/jessies/terminator-26.159.6816.zip&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Open the Terminator dmg file and drag the Terminator application to the working directory in which you created &lt;code&gt;yaAGC/&lt;/code&gt; above.&lt;/p&gt;
&lt;p&gt;From a command line in that working directory, make a tarball from Terminator.app:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;tar -cjvf Terminator.app.tar.bz2 Terminator.app&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Once you have the tarball, you can delete the Terminator app and its dmg file.&lt;/p&gt;
&lt;p&gt;From the working directory (not from within the &lt;code&gt;yaAGC/&lt;/code&gt; directory) build Virtual AGC:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;make -C yaAGC MACOSX=yes&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;In the folder &lt;code&gt;yaAGC/VirtualAGC/temp/&lt;/code&gt; you will now find the VirtualAGC application.&lt;/p&gt;
&lt;p&gt;Drag the VirtualAGC application from &lt;code&gt;yaAGC/VirtualAGC/temp/&lt;/code&gt; to the desktop.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-freebsd-1" class="anchor" aria-hidden="true" href="#freebsd-1"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;FreeBSD&lt;/h2&gt;
&lt;p&gt;From the command line unpack the development-snapshot tarball as follows: &lt;code&gt;tar --bzip2 -xf yaAGC-dev-YYYYMMDD.tar.bz2&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;After unpacking there will be a new directory called &lt;code&gt;yaAGC&lt;/code&gt;. To build the program:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;gmake FREEBSD=yes&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Do not &lt;code&gt;configure&lt;/code&gt; and do not &lt;code&gt;gmake install&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You will find that this has created a directory &lt;code&gt;yaAGC/VirtualAGC/temp/lVirtualAGC/&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To match the default setup of the installer program execute the following:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mv yaAGC/VirtualAGC/temp/lVirtualAGC ~/VirtualAGC&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;You can make a desktop icon called &lt;em&gt;Virtual AGC&lt;/em&gt; that links to &lt;code&gt;/VirtualAGC/bin/VirtualAGC&lt;/code&gt;. The image normally used for the desktop icon is found at &lt;code&gt;/VirtualAGC/bin/ApolloPatch2.png&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you try to use the ACA simulation (joystick) and it doesn't work you can find some information on configuring it here:
&lt;a href="http://www.ibiblio.org/apollo/yaTelemetry.html#Joystick_configuration_for_use_with_the" rel="nofollow"&gt;http://www.ibiblio.org/apollo/yaTelemetry.html#Joystick_configuration_for_use_with_the&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-solaris" class="anchor" aria-hidden="true" href="#solaris"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Solaris&lt;/h2&gt;
&lt;p&gt;Unpack the Virtual AGC snapshot tarball:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;tar --bzip2 -xf yaAGC-dev-YYYYMMDD.tar.bz2&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Open the &lt;code&gt;yaAGC/&lt;/code&gt; directory and build:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;make SOLARIS=yes&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Do not &lt;code&gt;configure&lt;/code&gt; and do not &lt;code&gt;gmake install&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You'll find that this has created a directory &lt;code&gt;yaAGC/VirtualAGC/temp/lVirtualAGC/&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To match the default setup of the installer program execute the following:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mv yaAGC/VirtualAGC/temp/lVirtualAGC ~/VirtualAGC&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;You can make a desktop icon called &lt;em&gt;Virtual AGC&lt;/em&gt; that links to &lt;code&gt;/VirtualAGC/bin/VirtualAGC&lt;/code&gt;. The image normally used for the desktop icon is found at &lt;code&gt;/VirtualAGC/bin/ApolloPatch2.png&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Unfortunately the ACA simulation (joystick) programs do not work in this environment.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-endnotes" class="anchor" aria-hidden="true" href="#endnotes"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Endnotes&lt;/h1&gt;
&lt;p&gt;This Readme was created from information contained in the main project website here:
&lt;a href="http://www.ibiblio.org/apollo/index.html" rel="nofollow"&gt;http://www.ibiblio.org/apollo/index.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The project website was created by Ronald Burkey. The first version of this Readme was compiled by Shane Coughlan.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>virtualagc</author><guid isPermaLink="false">https://github.com/virtualagc/virtualagc</guid><pubDate>Fri, 24 Jan 2020 00:04:00 GMT</pubDate></item><item><title>leachim6/hello-world #5 in Assembly, Today</title><link>https://github.com/leachim6/hello-world</link><description>&lt;p&gt;&lt;i&gt;Hello world in every computer language.  Thanks to everyone who contributes to this, make sure to see CONTRIBUTING.md for contribution instructions!&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-hello-world" class="anchor" aria-hidden="true" href="#hello-world"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Hello, World!&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Inspired by &lt;a href="https://helloworldcollection.github.io/" rel="nofollow"&gt;The Hello World Collection&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;&lt;a id="user-content-hello-world-in-every-programming-language" class="anchor" aria-hidden="true" href="#hello-world-in-every-programming-language"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Hello world in every programming language.&lt;/h4&gt;
&lt;p&gt;As I watch the collection expand, this project has blown up more than I ever thought possible.
Thanks to everyone who continues to contribute, new languages are created every day!&lt;/p&gt;
&lt;p&gt;Make sure to see CONTRIBUTING.md for instructions on contributing to the project!&lt;/p&gt;
&lt;p&gt;Spin-Off project smartly suggested and implemented by &lt;a href="https://github.com/zenware"&gt;@zenware&lt;/a&gt;:&lt;br&gt;
Meet &lt;a href="https://github.com/zenware/FizzBuzz"&gt;FizzBuzz&lt;/a&gt;, the evolution of &lt;a href="https://github.com/leachim6/hello-world"&gt;hello-world&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="e/elm.elm"&gt;Hello Html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-this-repository-currently-contains-hello-world-programs-in-the-following-languages" class="anchor" aria-hidden="true" href="#this-repository-currently-contains-hello-world-programs-in-the-following-languages"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;This repository currently contains "Hello World" programs in the following languages:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="%23/0815.0815"&gt;0815&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="%23/1c-enterprise"&gt;1C Enterprise&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="%23/2B.2b"&gt;2B&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="%23/4gl.4gl"&gt;4Gl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="%23/4test"&gt;4Test&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="%23/4thdimension.4dd"&gt;4Thdimension&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="%23/%7EEnglish.ext"&gt;~English&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/abap.abap"&gt;Abap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/abc.abc"&gt;Abc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/ACIDIC.acidic"&gt;Acidic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/acpi"&gt;Acpi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/ACRONYM.acronym"&gt;Acronym&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/acs.acs"&gt;Acs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/actionscript.as"&gt;Actionscript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/actionscript2.as"&gt;Actionscript2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/actionscript3.as"&gt;Actionscript3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/actionscript_flashmx.as"&gt;Actionscript Flashmx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/ada.ada"&gt;Ada&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/advpl"&gt;Advpl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/Aeolbonn.aeo"&gt;Aeolbonn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/aeolbonn.aeolbonn"&gt;Aeolbonn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/agda.agda"&gt;Agda&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/aheui.aheui"&gt;Aheui&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/aime.aime"&gt;Aime&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/aiml.aiml"&gt;Aiml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/ALAGUF.alaguf"&gt;Alaguf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/alda.alda"&gt;Alda&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/algae.algae"&gt;Algae&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/ALGOL-W.algol"&gt;Algol W&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/algol60.algol60"&gt;Algol60&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/algol68.algol68"&gt;Algol68&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/alore.alore"&gt;Alore&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/Amiga-E.amiga-e"&gt;Amiga E&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/amos"&gt;Amos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/android.java"&gt;Android&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/angelscript"&gt;Angelscript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/angular.js"&gt;Angular&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/ante.ante"&gt;Ante&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/AntLang.ant"&gt;Antlang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/apc.apc"&gt;Apc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/Apex.cls"&gt;Apex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/apl.apl"&gt;Apl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/applescript.scpt"&gt;Applescript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/arc.arc"&gt;Arc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/arduino.ino"&gt;Arduino&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/arena.are"&gt;Arena&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/argh.agh"&gt;Argh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/arnoldc.arnoldc"&gt;Arnoldc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/ash.ash"&gt;Ash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/asp.asp"&gt;Asp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/aspectj.aj"&gt;Aspectj&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_6502.asm"&gt;Assembler 6502&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_6502appleII.asm"&gt;Assembler 6502Appleii&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_6502c64.asm"&gt;Assembler 6502C64&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_6809vectrex.asm"&gt;Assembler 6809Vectrex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_8048_videopac.asm"&gt;Assembler 8048 Videopac&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_arm.s"&gt;Assembler Arm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_atari2600.asm"&gt;Assembler Atari2600&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_bootsect.asm"&gt;Assembler Bootsect&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_DCPU16.asm"&gt;Assembler Dcpu16&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_fasm_dos.asm"&gt;Assembler Fasm Dos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_hla.hla"&gt;Assembler Hla&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_ibm360.asm"&gt;Assembler Ibm360&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_intel.asm"&gt;Assembler Intel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_lc-3.asm"&gt;Assembler Lc 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_m68000_amigaos.asm"&gt;Assembler M68000 Amigaos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_masm_dos.asm"&gt;Assembler Masm Dos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_masm_win32.asm"&gt;Assembler Masm Win32&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_masm_win64.asm"&gt;Assembler Masm Win64&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_mips.asm"&gt;Assembler Mips&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_mmix.asm"&gt;Assembler Mmix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_nasm_freebsd.asm"&gt;Assembler Nasm Freebsd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_nasm_linux.asm"&gt;Assembler Nasm Linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_nasm_linux64.asm"&gt;Assembler Nasm Linux64&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_nasm_macho64.asm"&gt;Assembler Nasm Macho64&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_nasm_win32.asm"&gt;Assembler Nasm Win32&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_tasm_dos.asm"&gt;Assembler Tasm Dos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_tms9900_ti99_4a.asm"&gt;Assembler Tms9900 Ti99 4A&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_vax_ultrix.asm"&gt;Assembler Vax Ultrix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_z80_knightos.asm"&gt;Assembler Z80 Knightos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_z80_ti83calculator.asm"&gt;Assembler Z80 Ti83Calculator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_z80_zxspectrum.asm"&gt;Assembler Z80 Zxspectrum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/Attache.%40"&gt;Attache&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/autohotkey.ahk"&gt;Autohotkey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/autoit.au3"&gt;Autoit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/awful.yuk"&gt;Awful&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/awk.awk"&gt;Awk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/README.md"&gt;Readme&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/B.b"&gt;B&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/bash.bash"&gt;Bash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/basic.bas"&gt;Basic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/batch.bat"&gt;Batch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/batsh.batsh"&gt;Batsh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/battlestar.bts"&gt;Battlestar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/BCPL.bcl"&gt;Bcpl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/beatnik.beatnik"&gt;Beatnik&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/befunge.be"&gt;Befunge&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/BennuGD"&gt;Bennugd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/beta.bet"&gt;Beta&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/BIRL.c"&gt;Birl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/BIT.bit"&gt;Bit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/BitBitJump.bbj"&gt;Bitbitjump&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/BlackRum.br"&gt;Blackrum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/BLC.Blc"&gt;Blc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/blitz3d.bb"&gt;Blitz3D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/blub.blub"&gt;Blub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/bolgefuck.bf"&gt;Bolgefuck&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/boo.boo"&gt;Boo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/brainfuck-2d.bf2d"&gt;Brainfuck 2D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/brainfuck.bf"&gt;Brainfuck&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/Brainloller.png"&gt;Brainloller&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/broccoli.brocc"&gt;Broccoli&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/BRZRK.brzrk"&gt;Brzrk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/burlesque.burlesque"&gt;Burlesque&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/byter.byter"&gt;Byter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/c%2B%2B.cpp"&gt;C++&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/c.c"&gt;C&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/caml.ml"&gt;Caml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/cardinal.cardinal"&gt;Cardinal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/Casio%20BASIC"&gt;Casio Basic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/cat.cat"&gt;Cat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/centura.centura"&gt;Centura&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/ceylon.ceylon"&gt;Ceylon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/cgi.c"&gt;Cgi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/chapel.chpl"&gt;Chapel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/cheddar.cheddar"&gt;Cheddar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/chef.ch"&gt;Chef&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/chicken.chicken"&gt;Chicken&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/cil.il"&gt;Cil&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/clean.icl"&gt;Clean&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/clipper.clipper"&gt;Clipper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/clipper.prg"&gt;Clipper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/clips.clips"&gt;Clips&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/clisp.lisp"&gt;Clisp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/clojure.clj"&gt;Clojure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/cobol.cbl"&gt;Cobol&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/coconut.coc"&gt;Coconut&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/coffeescript.coffee"&gt;Coffeescript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/coldfusion.cfm"&gt;Coldfusion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/common-lisp.lisp"&gt;Common Lisp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/ContinuesEquation.ce"&gt;Continuesequation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/cool.cl"&gt;Cool&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/cor.cor"&gt;Cor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/crystal.cr"&gt;Crystal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/csh.csh"&gt;Csh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/csharp.cs"&gt;Csharp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/cson.cson"&gt;Cson&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/css.css"&gt;Css&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/cuneiform.cfl"&gt;Cuneiform&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/curry.curry"&gt;Curry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/cypherNeo4j.cypher"&gt;Cypherneo4J&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="d/d.d"&gt;D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="d/dark.txt"&gt;Dark&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="d/Dart.dart"&gt;Dart&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="d/db2.sql"&gt;Db2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="d/dc.dc"&gt;Dc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="d/DCL"&gt;Dcl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="d/dd_dd.dd"&gt;Dd Dd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="d/Decimal.dec"&gt;Decimal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="d/delphi.delphi"&gt;Delphi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="d/delphi.pas"&gt;Delphi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="d/dis.dis"&gt;Dis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="d/divzeros.dz"&gt;Divzeros&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="d/DNA%23.dna"&gt;Dna#&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="d/DNA-Sharp.dna"&gt;Dna Sharp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="d/dogescript.djs"&gt;Dogescript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="d/DOGO.dogo"&gt;Dogo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="d/dos.bat"&gt;Dos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="d/Drive-In%20Window.diw"&gt;Drive In Window&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="d/dtrace.d"&gt;Dtrace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="d/DUP.dup"&gt;Dup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="d/dylan.dl"&gt;Dylan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="d/Dyvil.dyv"&gt;Dyvil&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="e/ebuild.ebuild"&gt;Ebuild&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="e/Eiffel.eiff"&gt;Eiffel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="e/elixir.ex"&gt;Elixir&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="e/elixir.exs"&gt;Elixir&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="e/elm.elm"&gt;Elm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="e/EmacsLisp.el"&gt;Emacslisp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="e/emmental.emmental"&gt;Emmental&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="e/emojicode.emojic"&gt;Emojicode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="e/emoticon.emoticon"&gt;Emoticon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="e/EOOOL.eoool"&gt;Eoool&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="e/erlang.erl"&gt;Erlang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="e/erlang_escript.erl"&gt;Erlang Escript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="f/factor.factor"&gt;Factor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="f/falcon.fal"&gt;Falcon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="f/false.f"&gt;False&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="f/fancy.fy"&gt;Fancy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="f/fantom.fan"&gt;Fantom&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="f/ferite.fe"&gt;Ferite&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="f/fetlang.fet"&gt;Fetlang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="f/fish.fish"&gt;Fish&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="f/fjoelnir.fjo"&gt;Fjoelnir&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="f/fob.fob"&gt;Fob&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="f/focal.fc"&gt;Focal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="f/fog.fog.md"&gt;Fog.Fog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="f/foo.foo"&gt;Foo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="f/forobj.forobj"&gt;Forobj&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="f/forth.fth"&gt;Forth&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="f/fortob.fortob"&gt;Fortob&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="f/fortran.f90"&gt;Fortran&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="f/fortran77.f77"&gt;Fortran77&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="f/fourier.fourier"&gt;Fourier&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="f/fsharp.fs"&gt;Fsharp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="f/fstar.fst"&gt;Fstar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="g/gammaplex.gammaplex"&gt;Gammaplex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="g/GASOIL.gasoil"&gt;Gasoil&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="g/gecho.gecho"&gt;Gecho&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="g/gentzen.gentzen"&gt;Gentzen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="g/geojson.geojson"&gt;Geojson&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="g/gibberish.gibberish"&gt;Gibberish&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="g/glass.glass"&gt;Glass&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="g/gml.gml"&gt;Gml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="g/go.go"&gt;Go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="g/golfscript.golfscript"&gt;Golfscript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="g/golo.golo"&gt;Golo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="g/googleappscript.gs"&gt;Googleappscript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="g/gosu.gosu"&gt;Gosu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="g/gosu.gs"&gt;Gosu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="g/gravity.gravity"&gt;Gravity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="g/Green-Marl.gm"&gt;Green Marl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="g/gri.gri"&gt;Gri&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="g/GridScript.gridscript"&gt;Gridscript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="g/grin.grin"&gt;Grin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="g/groovy.groovy"&gt;Groovy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="g/Gui4Cli"&gt;Gui4Cli&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="h/hack.hh"&gt;Hack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="h/haskell.hs"&gt;Haskell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="h/haxe.hx"&gt;Haxe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="h/HEX.hex"&gt;Hex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="h/hexish.hexish"&gt;Hexish&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="h/Higher%20Subleq.higher_subleq"&gt;Higher Subleq&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="h/hodor.hd"&gt;Hodor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="h/hollow.hollow"&gt;Hollow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="h/homespring.homespring"&gt;Homespring&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="h/HOP"&gt;Hop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="h/hq9%2B.h"&gt;Hq9+&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="h/html.html"&gt;Html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="h/hy.hy"&gt;Hy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="h/hypertalk.ht"&gt;Hypertalk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="i/ibm1401"&gt;Ibm1401&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="i/IcedCoffeeScript.ics"&gt;Icedcoffeescript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="i/ici.ici"&gt;Ici&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="i/icon.icn"&gt;Icon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="i/IDL"&gt;Idl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="i/idris.idr"&gt;Idris&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="i/il.il"&gt;Il&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="i/INCAL.incal"&gt;Incal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="i/InDec.indec"&gt;Indec&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="i/inform.inform"&gt;Inform&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="i/ink.ink"&gt;Ink&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="i/intercal.i"&gt;Intercal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="i/Io.Io"&gt;Io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="i/ioke.ik"&gt;Ioke&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="i/irc"&gt;Irc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="i/iscom.iscom"&gt;Iscom&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="i/ISLISP.lisp"&gt;Islisp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="j/j.ijs"&gt;J&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="j/jade.jade"&gt;Jade&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="j/jai.jai"&gt;Jai&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="j/Jasmin.j"&gt;Jasmin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="j/jason.mas2j"&gt;Jason&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="j/Java.java"&gt;Java&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="j/javascript.js"&gt;Javascript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="j/jess.cpl"&gt;Jess&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="j/json.json"&gt;Json&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="j/JSONiq"&gt;Jsoniq&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="j/jsx.js"&gt;Jsx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="j/julia.jl"&gt;Julia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="k/k.k"&gt;K&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="k/karel.kl"&gt;Karel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="k/KimL.kiml"&gt;Kiml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="k/kipple.kipple"&gt;Kipple&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="k/kitten.ktn"&gt;Kitten&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="k/kotlin.kt"&gt;Kotlin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="k/ksh.ksh"&gt;Ksh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="l/labyrinth.labyrinth"&gt;Labyrinth&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="l/LaTeX.tex"&gt;Latex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="l/LazyK.lazy"&gt;Lazyk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="l/leszek.leszek"&gt;Leszek&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="l/limbo.b"&gt;Limbo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="l/lisaac.li"&gt;Lisaac&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="l/lisp.lsp"&gt;Lisp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="l/livescript.ls"&gt;Livescript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="l/llvm.ll"&gt;Llvm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="l/LNUSP.lnusp"&gt;Lnusp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="l/logo.lg"&gt;Logo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="l/LOLA.lola"&gt;Lola&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="l/lolcode.lol"&gt;Lolcode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="l/lolpython.lol"&gt;Lolpython&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="l/lsl.lsl"&gt;Lsl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="l/lua.lua"&gt;Lua&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/m4.m4"&gt;M4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/macsyma.mac"&gt;Macsyma&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/magic"&gt;Magic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/malbolge.mbg"&gt;Malbolge&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/markdown.md"&gt;Markdown&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/mathematica-online.nb"&gt;Mathematica Online&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/matlab.m"&gt;Matlab&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/maxscript.ms"&gt;Maxscript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/mel.mel"&gt;Mel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/meq.meq"&gt;Meq&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/mercury.m"&gt;Mercury&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/minecraft"&gt;Minecraft&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/mips.s"&gt;Mips&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/mirc.mrc"&gt;Mirc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/Mmmm%28%29.mmmm"&gt;Mmmm()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/modula-2.mod"&gt;Modula 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/modula-3.m3"&gt;Modula 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/mongo.shell"&gt;Mongo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/moonscript.moon"&gt;Moonscript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/morsecode"&gt;Morsecode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/mouse.mse"&gt;Mouse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/move.mv"&gt;Move&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/mozart.oz"&gt;Mozart&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/muf.muf"&gt;Muf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/mumps.m"&gt;Mumps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/mushcode.mush"&gt;Mushcode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/myrddin.myr"&gt;Myrddin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/mysql.sql"&gt;Mysql&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="n/mathematica.nb"&gt;Mathematica&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="n/neko.neko"&gt;Neko&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="n/nemerle.n"&gt;Nemerle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="n/newtonscript.nwt"&gt;Newtonscript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="n/nice.nice"&gt;Nice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="n/nim.nim"&gt;Nim&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="n/nit.nit"&gt;Nit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="n/nodejs.js"&gt;Nodejs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="n/novice.novice"&gt;Novice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="n/nu.nu"&gt;Nu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="n/nxc.nxc"&gt;Nxc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="o/oberon-2.obn"&gt;Oberon 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="o/oberon.o"&gt;Oberon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="o/obix.osc"&gt;Obix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="o/obj.st"&gt;Obj&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="o/objc.m"&gt;Objc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="o/objective-j.j"&gt;Objective J&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="o/ObjectStar"&gt;Objectstar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="o/ocaml.ml"&gt;Ocaml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="o/octave.octave"&gt;Octave&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="o/omgrofl.omgrofl"&gt;Omgrofl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="o/ooc.ooc"&gt;Ooc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="o/ook.ok"&gt;Ook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="o/opa.opa"&gt;Opa&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="o/OpenLaszlo.lzx"&gt;Openlaszlo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="o/oraclesql.sql"&gt;Oraclesql&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="o/Orc.orc"&gt;Orc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="o/oz.oz"&gt;Oz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/hello_world.pl1"&gt;Hello World&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/parenthetic.p"&gt;Parenthetic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/parser.p"&gt;Parser&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/pascal.p"&gt;Pascal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/pawn.p"&gt;Pawn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/pb.pwr"&gt;Pb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/pbwin.bas"&gt;Pbwin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/pebble.c"&gt;Pebble&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/perl.cgi"&gt;Perl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/perl.pl"&gt;Perl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/perl6.p6"&gt;Perl6&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/perseus.p%2B%2B"&gt;Perseus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/pharo.st"&gt;Pharo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/php.php"&gt;Php&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/picat.pi"&gt;Picat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/piet.png"&gt;Piet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/pig.pig"&gt;Pig&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/pike.pike"&gt;Pike&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/pit.pit"&gt;Pit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/pizza.pizza"&gt;Pizza&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/please_porige_hot.pph"&gt;Please Porige Hot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/plsql.sql"&gt;Plsql&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/pluvo.pvo"&gt;Pluvo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/polynomial.pol"&gt;Polynomial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/pony.pony"&gt;Pony&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/postgresql.sql"&gt;Postgresql&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/postscript.ps"&gt;Postscript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/postscript_page.ps"&gt;Postscript Page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/posxml.posxml"&gt;Posxml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/potigol.poti"&gt;Potigol&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/powershell.ps1"&gt;Powershell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/processing.pde"&gt;Processing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/prolog.pro"&gt;Prolog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/pure_data.pd"&gt;Pure Data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/purebasic.pb"&gt;Purebasic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/purescript.purs"&gt;Purescript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/pyret.arr"&gt;Pyret&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/python.py"&gt;Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/python3.py"&gt;Python3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="q/q.q"&gt;Q&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="q/Qbasic.bas"&gt;Qbasic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="q/qore.q"&gt;Qore&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="q/qu.qu"&gt;Qu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="q/QuakeC.qc"&gt;Quakec&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="q/QuartzComposer.qtz"&gt;Quartzcomposer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="q/qugord.qugord"&gt;Qugord&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="q/qwerty.qwerty"&gt;Qwerty&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="r/R.R"&gt;R&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="r/racket.rkt"&gt;Racket&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="r/radixal.radixal"&gt;Radixal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="r/ratfor.ratfor"&gt;Ratfor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="r/react.js"&gt;React&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="r/readlink.readlink"&gt;Readlink&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="r/reason.re"&gt;Reason&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="r/rebol.r"&gt;Rebol&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="r/recurse.recurse"&gt;Recurse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="r/reStructuredText.rst"&gt;Restructuredtext&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="r/rexx.rexx"&gt;Rexx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="r/richtea.tea"&gt;Richtea&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="r/ring.ring"&gt;Ring&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="r/rockstar.rock"&gt;Rockstar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="r/roco.roco"&gt;Roco&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="r/roy.roy"&gt;Roy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="r/ruby.rb"&gt;Ruby&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="r/ruota.ruo"&gt;Ruota&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="r/rust.rs"&gt;Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/S-algol"&gt;S Algol&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/sacred.sacred"&gt;Sacred&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/sal.s"&gt;Sal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/sas.sas"&gt;Sas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/sass.sass"&gt;Sass&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/sather.sa"&gt;Sather&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/scala.scala"&gt;Scala&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/scheme.scm"&gt;Scheme&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/schwift.y"&gt;Schwift&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/scilab.scilab"&gt;Scilab&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/scratch.sb"&gt;Scratch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/Scss.scss"&gt;Scss&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/sed.sed"&gt;Sed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/self.self"&gt;Self&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/semicolon"&gt;Semicolon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/SendStuff.ss"&gt;Sendstuff&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/shakespeare.spl"&gt;Shakespeare&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/shell.sh"&gt;Shell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/shen.shen"&gt;Shen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/SIL.SIL"&gt;Sil&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/simpl%2B.usp"&gt;Simpl+&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/simula.sim"&gt;Simula&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/slashes.slashes"&gt;Slashes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/smali.smali"&gt;Smali&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/smalltalk-gnu.st"&gt;Smalltalk Gnu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/smalltalk.sm"&gt;Smalltalk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/smil.smil"&gt;Smil&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/sml.sml"&gt;Sml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/snowman.sm"&gt;Snowman&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/Solidity.sol"&gt;Solidity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/soupscript.script"&gt;Soupscript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/sparql.sparql"&gt;Sparql&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/spoon.spoon"&gt;Spoon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/spss.spss"&gt;Spss&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/sql.sql"&gt;Sql&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/squirrel.nut"&gt;Squirrel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/standard-ml.sml"&gt;Standard Ml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/stanza.stanza"&gt;Stanza&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/streem.strm"&gt;Streem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/stuck.stuck"&gt;Stuck&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/stuck_0byte.stuck"&gt;Stuck 0Byte&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/subleq.sq"&gt;Subleq&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/supercollider.sc"&gt;Supercollider&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/svg.svg"&gt;Svg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/swift.swift"&gt;Swift&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/systemtap.stp"&gt;Systemtap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="t/plain-text.txt"&gt;Plain Text&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="t/Tao-Presentations.ddd"&gt;Tao Presentations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="t/TapeBagel.tb"&gt;Tapebagel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="t/tcl.tcl"&gt;Tcl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="t/tcsh.tcsh"&gt;Tcsh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="t/telephone"&gt;Telephone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="t/TeX.tex"&gt;Tex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="t/thp.hrp"&gt;Thp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="t/thue.th"&gt;Thue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="t/tibasic.ti"&gt;Tibasic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="t/tk.tk"&gt;Tk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="t/tri.tri"&gt;Tri&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="t/trollscript.troll"&gt;Trollscript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="t/TrumpScript.py"&gt;Trumpscript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="t/tsql.sql"&gt;Tsql&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="t/TTCN3.ttcn"&gt;Ttcn3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="t/turing.oot"&gt;Turing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="t/Turing.t"&gt;Turing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="t/typescript.ts"&gt;Typescript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="u/Ubercode.cls"&gt;Ubercode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="u/ubiquity.ubiquity"&gt;Ubiquity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="u/umajin.u"&gt;Umajin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="u/unicomal.lst"&gt;Unicomal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="u/unlambda.unl"&gt;Unlambda&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="v/V"&gt;V&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="v/vala.vala"&gt;Vala&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="v/vbnet.vb"&gt;Vbnet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="v/velato.ly"&gt;Velato&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="v/verbose.verbose"&gt;Verbose&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="v/verbosefuck.vbfk"&gt;Verbosefuck&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="v/verilog.v"&gt;Verilog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="v/verve.vrv"&gt;Verve&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="v/vhdl.vhdl"&gt;Vhdl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="v/vi"&gt;Vi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="v/vimscript.vim"&gt;Vimscript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="v/virgil.v3"&gt;Virgil&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="v/visualbasic.vb"&gt;Visualbasic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="v/visualbasicscript.vbs"&gt;Visualbasicscript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="v/visualfoxpro.prg"&gt;Visualfoxpro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="v/vms.vms"&gt;Vms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="v/Vowels.vw"&gt;Vowels&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="v/vrml.wrl"&gt;Vrml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="v/vue.js"&gt;Vue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="w/wheat.wheat"&gt;Wheat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="w/whenever.whenever"&gt;Whenever&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="w/whirl.wr"&gt;Whirl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="w/whitespace.ws"&gt;Whitespace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="w/wml.wml"&gt;Wml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="w/wolframlanguage.wl"&gt;Wolframlanguage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="w/wren.wren"&gt;Wren&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="w/wsh.vbs"&gt;Wsh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="x/x-D.xd"&gt;X D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="x/xbase%2B%2B.prg"&gt;Xbase++&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="x/xbase.dbf"&gt;Xbase&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="x/xl.xl"&gt;Xl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="x/xlogo.lgo"&gt;Xlogo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="x/xml.xml"&gt;Xml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="x/xpl0.xpl"&gt;Xpl0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="x/xquery.xq"&gt;Xquery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="x/XRF.xrf"&gt;Xrf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="x/xslt.xslt"&gt;Xslt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="x/xul.xul"&gt;Xul&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="y/Y.y"&gt;Y&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="y/yaml.yaml"&gt;Yaml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="y/yolang.yo"&gt;Yolang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="y/yoptascript.js"&gt;Yoptascript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="z/zbd"&gt;Zbd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="z/zepto.zp"&gt;Zepto&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="z/zetaplex.zeta"&gt;Zetaplex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="z/zim.zim"&gt;Zim&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="z/zimbu.zu"&gt;Zimbu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="z/zombie.zombie"&gt;Zombie&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="z/zonnon.znn"&gt;Zonnon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="z/zsh.zsh"&gt;Zsh&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>leachim6</author><guid isPermaLink="false">https://github.com/leachim6/hello-world</guid><pubDate>Fri, 24 Jan 2020 00:05:00 GMT</pubDate></item></channel></rss>