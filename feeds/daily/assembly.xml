<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>GitHub Trending: Assembly, Today</title><link>https://github.com/trending/assembly?since=daily</link><description>The top repositories on GitHub for assembly, measured daily</description><pubDate>Tue, 19 Nov 2019 01:07:03 GMT</pubDate><lastBuildDate>Tue, 19 Nov 2019 01:07:03 GMT</lastBuildDate><generator>PyRSS2Gen-1.1.0</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><ttl>720</ttl><item><title>vlang/vos #1 in Assembly, Today</title><link>https://github.com/vlang/vos</link><description>&lt;p&gt;&lt;i&gt;[No description found.]&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-vos" class="anchor" aria-hidden="true" href="#vos"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;vOS&lt;/h1&gt;
&lt;p&gt;An attempt to write an operating system in V.&lt;/p&gt;
&lt;p&gt;Brainstorming started on November 15 2019.&lt;/p&gt;
&lt;p&gt;Join the &lt;a href="https://discordapp.com/invite/n7c74HM" rel="nofollow"&gt;Discord chat&lt;/a&gt; (&lt;code&gt;#v-os&lt;/code&gt; channel). (PM one of the moderators if you don't want to verify your phone.)&lt;/p&gt;
&lt;p&gt;Goals:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Microkernel architecture.&lt;/li&gt;
&lt;li&gt;Unix/POSIX subsystem for compatibility with lots of software that already exists.&lt;/li&gt;
&lt;li&gt;UEFI support, Multiboot compliant.&lt;/li&gt;
&lt;li&gt;Written in V as much as possible (including libc), not dependent on external libs written in C.&lt;/li&gt;
&lt;li&gt;Targetted at modern 64-bit architectures (amd64, aarch64, risc-v).&lt;/li&gt;
&lt;/ul&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>vlang</author><guid isPermaLink="false">https://github.com/vlang/vos</guid><pubDate>Tue, 19 Nov 2019 00:01:00 GMT</pubDate></item><item><title>microsoft/MS-DOS #2 in Assembly, Today</title><link>https://github.com/microsoft/MS-DOS</link><description>&lt;p&gt;&lt;i&gt;The original sources of MS-DOS 1.25 and 2.0, for reference purposes&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://github.com/Microsoft/MS-DOS/blob/master/msdos-logo.png"&gt;&lt;img width="150" height="150" align="left" alt="MS-DOS logo" src="https://github.com/Microsoft/MS-DOS/raw/master/msdos-logo.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;   
&lt;h1&gt;&lt;a id="user-content-ms-dos-v125-and-v20-source-code" class="anchor" aria-hidden="true" href="#ms-dos-v125-and-v20-source-code"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;MS-DOS v1.25 and v2.0 Source Code&lt;/h1&gt;
&lt;p&gt;This repo contains the original source-code and compiled binaries for MS-DOS v1.25 and MS-DOS v2.0.&lt;/p&gt;
&lt;p&gt;These are the same files &lt;a href="http://www.computerhistory.org/atchm/microsoft-ms-dos-early-source-code/" rel="nofollow"&gt;originally shared at the Computer History Museum on March 25th, 2014&lt;/a&gt; and are being (re)published in this repo to make them easier to find, reference-to in external writing and works, and to allow exploration and experimentation for those interested in early PC Operating Systems.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-license" class="anchor" aria-hidden="true" href="#license"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;License&lt;/h1&gt;
&lt;p&gt;All files within this repo are released under the &lt;a href="https://en.wikipedia.org/wiki/MIT_License" rel="nofollow"&gt;MIT (OSI) License&lt;/a&gt; as per the &lt;a href="https://github.com/Microsoft/MS-DOS/blob/master/LICENSE.md"&gt;LICENSE file&lt;/a&gt; stored in the root of this repo.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-contribute" class="anchor" aria-hidden="true" href="#contribute"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contribute!&lt;/h1&gt;
&lt;p&gt;The source files in this repo are for historical reference and will be kept static, so please &lt;strong&gt;don’t send&lt;/strong&gt; Pull Requests suggesting any modifications to the source files, but feel free to fork this repo and experiment &lt;g-emoji class="g-emoji" alias="blush" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f60a.png"&gt;😊&lt;/g-emoji&gt;.&lt;/p&gt;
&lt;p&gt;If, however, you’d like to submit additional non-source content or modifications to non-source files (e.g., this README), please submit via PR, and we’ll review and consider.&lt;/p&gt;
&lt;p&gt;This project has adopted the &lt;a href="https://opensource.microsoft.com/codeofconduct/" rel="nofollow"&gt;Microsoft Open Source Code of Conduct&lt;/a&gt;.  For more information see the &lt;a href="https://opensource.microsoft.com/codeofconduct/faq/" rel="nofollow"&gt;Code of Conduct FAQ&lt;/a&gt; or contact &lt;a href="mailto:opencode@microsoft.com"&gt;opencode@microsoft.com&lt;/a&gt; with any additional questions or comments.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>microsoft</author><guid isPermaLink="false">https://github.com/microsoft/MS-DOS</guid><pubDate>Tue, 19 Nov 2019 00:02:00 GMT</pubDate></item><item><title>hsoft/collapseos #3 in Assembly, Today</title><link>https://github.com/hsoft/collapseos</link><description>&lt;p&gt;&lt;i&gt;Bootstrap post-collapse technology&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-collapse-os" class="anchor" aria-hidden="true" href="#collapse-os"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Collapse OS&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;Bootstrap post-collapse technology&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Collapse OS is a z80 kernel and a collection of programs, tools and
documentation that allows you to assemble an OS that, when completed, will be
able to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Run on minimal and improvised machines.&lt;/li&gt;
&lt;li&gt;Interface through improvised means (serial, keyboard, display).&lt;/li&gt;
&lt;li&gt;Edit text files.&lt;/li&gt;
&lt;li&gt;Compile assembler source files for a wide range of MCUs and CPUs.&lt;/li&gt;
&lt;li&gt;Read and write from a wide range of storage devices.&lt;/li&gt;
&lt;li&gt;Replicate itself.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Additionally, the goal of this project is to be as self-contained as possible.
With a copy of this project, a capable and creative person should be able to
manage to build and install Collapse OS without external resources (i.e.
internet) on a machine of her design, built from scavenged parts with low-tech
tools.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-see-it-in-action" class="anchor" aria-hidden="true" href="#see-it-in-action"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;See it in action&lt;/h2&gt;
&lt;p&gt;Michael Schierl has put together &lt;a href="https://schierlm.github.io/CollapseOS-Web-Emulator/" rel="nofollow"&gt;a set of emulators running in the browser that
run Collapse OS in different contexts&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Using those while following along with the &lt;a href="doc/"&gt;User Guide&lt;/a&gt; is your quickest
path to giving Collapse OS a try.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-organisation-of-this-repository" class="anchor" aria-hidden="true" href="#organisation-of-this-repository"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Organisation of this repository&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;kernel&lt;/code&gt;: Pieces of code to be assembled by the user into a kernel.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;apps&lt;/code&gt;: Pieces of code to be assembled into "userspace" application.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;recipes&lt;/code&gt;: collection of recipes that assemble parts together on a specific
machine.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;doc&lt;/code&gt;: User guide for when you've successfully installed Collapse OS.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tools&lt;/code&gt;: Tools for working with Collapse OS from "modern" environments. Mostly
development tools, but also contains emulated zasm, which is
necessary to build Collapse OS from a non-Collapse OS machine.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Each folder has a README with more details.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-status" class="anchor" aria-hidden="true" href="#status"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Status&lt;/h2&gt;
&lt;p&gt;The project unfinished but is progressing well! See &lt;a href="https://collapseos.org" rel="nofollow"&gt;Collapse OS' website&lt;/a&gt;
for more information.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-discussion" class="anchor" aria-hidden="true" href="#discussion"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Discussion&lt;/h2&gt;
&lt;p&gt;For a general discussion of Collapse OS and the ecosystem of technologies and ideas that may develop around it refer to &lt;a href="https://www.reddit.com/r/collapseos" rel="nofollow"&gt;r/collapseos&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A more traditional &lt;a href="http://lists.sonic.net/mailman/listinfo/collapseos" rel="nofollow"&gt;mailing list&lt;/a&gt; and IRC (#collapseos on freenode) channels are also maintained.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>hsoft</author><guid isPermaLink="false">https://github.com/hsoft/collapseos</guid><pubDate>Tue, 19 Nov 2019 00:03:00 GMT</pubDate></item><item><title>dwelch67/raspberrypi #4 in Assembly, Today</title><link>https://github.com/dwelch67/raspberrypi</link><description>&lt;p&gt;&lt;i&gt;Raspberry Pi ARM based bare metal examples&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body " data-path="README"&gt;&lt;div class="plain"&gt;&lt;pre style="white-space: pre-wrap"&gt;
The main directory examples are for the older/est pi1 boards maybe
some attempts at newer boards.  These are retained for legacy reasons
some folks have direct links.  They are still valid for those boards.
The boards directory has the first attempt at solving the too many
boards issue and that is where I recommend you go.  My third string
attempt is I have a raspberrypi-zero and raspberrypi-three repos that
are for those boards specifically.  Little to no verbage though, the
rambling text is mostly in this repo.

--------------

This repo is getting a bit messy starting with the first released to
the public pi and then all that came after.  I want to rework it but
it is going slowly.  Recently started creating directories pi1, piaplus
and so on to target the examples specifically to the different cards.
Again that is slow going.  Likewise this README will be rewritten perhaps
but for now...

--------------

This repo serves as a collection of low level examples.  No operating
system, embedded or low level embedded or deeply embedded or bare metal,
whatever your term is for this.

I am in no way shape or form associated with the raspberry pi organization
nor broadcom.  I just happen to own one (some) and am sharing my
experiences.  The raspberry pi is about education, and I feel bare
metal education is just as important as Python programming.

So I started this years ago when got my first ARM11 based raspberry pi
maybe we call that a raspberry pi 1, I dont know a good term.  But
now there is a growing number of variations.

ARM11 based (BCM2835)
Raspberry Pi B
Raspberry Pi B2
Raspberry Pi A+
Raspberry Pi B+
Raspberry Pi Zero
Cortex-A7 based (BCM2836)
Raspberry Pi 2 B
Cortex-A53 based (BCM2837)
Raspberry Pi 3 B

There is also the compute module but I dont have one of those.

General differences that we care about for these examples.  The amount
of ram varies from board to board.  The peripheral base address is
different between the BCM2835 and BCM2836.  The BCM2835 looks for the
file kernel.img the BCM2836 looks for kernel7.img.  The ARM11 based
Zero is a B with stuff removed and a new layout, but they up/over
clocked the processor from 750MHz to 1000MHz, one led on gpio 16.  The
A+ and B+ they moved the led (or put two) on gpio 35 and 47.  The
raspberry pi 2 is B+ like but with the different chip, supposedly the
BCM2836 is  BCM2835 with the ARM11 core removed and replaced with
the Cortex A7 and for the most part it appears to be.  The raspberry
pi 3 is Cortex A8 based, 64 bit.  And they moved the LED (the leds)
to an i2c gpio expander.

As of this writing I am adding plus and pi2 versions of the examples
as many of them are based on the early/original.  No guarantees I will
do that, just looking at the differences between the blinker01 examples
should show you what to do to convert these yourself.  In some cases
I am intentionally not trying to have one code base build for all
three with ifdefs and such, keep it simple stupid then complicate it
as needed.  The text may say kernel.img but substitute with kernel7.img
as needed.

I still have a number of raspberry pi 2 examples to port, and now a
bunch of examples to port to the raspberry pi 3.  The raspberry pi 3
as of this writing, without a config.txt, is switched to 32 bit
compatibility mode.  See the aarch64 directory for 64 bit ARM examples.

From what we know so far there is a gpu on chip which:

1) boots off of an on chip rom of some sort
2) reads the sd card and looks for additional gpu specific boot files
bootcode.bin and start.elf in the root dir of the first partition
(fat32 formatted, loader.bin no longer used/required)
3) in the same dir it looks for config.txt which you can do things like
change the arm speed, or change the address where to load kernel.img,
and many others
4) it reads kernel.img the arm boot binary file and copies it to memory
5) releases reset on the arm such that it runs from the address where
the kernel.img data was written

The memory is split between the GPU and the ARM, I believe the default
is to split the memory in half.  And there are ways to change that
split (to give the ARM more)(using config.txt).  Not going to worry
about that here.

From the ARMs perspective the kernel.img file is loaded, by default,
to address 0x8000.  (there are ways to change that, not going to worry
about that right now).

Hardware and programming information:

You will want to go here
&lt;a href="http://elinux.org/RPi_Hardware" rel="nofollow"&gt;http://elinux.org/RPi_Hardware&lt;/a&gt;
And the datasheet and schematic.  These are moving targets the above
elinux link has the datasheet and errata which is important.  They
didnt give us a full datasheet for the BCM2836 have to go with the
BCM2835.
You will want to go to
&lt;a href="http://raspberrypi.org" rel="nofollow"&gt;http://raspberrypi.org&lt;/a&gt; and then the forum tab then slide down to
the Bare Metal forum, the first (only) Sticky topic is Bare Metal
Resources.  There are many more links there for good information.
Also go to
&lt;a href="http://infocenter.arm.com" rel="nofollow"&gt;http://infocenter.arm.com&lt;/a&gt; and get the Architectural Reference Manual
and the Techincal Reference Manual for the ARM1176JZF-S (BCM2835)
and/or the Cortex-A7 (BCM2836).

Early in the BCM2835 document you see a memory map.  I am going to
operate based on the middle map, this is how the ARM comes up.  The
left side is the system which we dont have direct access to in that
form, the gpu probably, not the ARM.  The ARM comes up with a memory
space that is basically 0x40000000 bytes in size as it mentions in
the middle chart.  The bottom of this picture shows total system
sdram (memory) and somewhere between zero and the top of ram is a
split between sdram for the ARM on the bottom and a chunk of that
for the VC SDRAM, basically memory for the gpu and memory shared
between the ARM and GPU to allow the ARM to ask the GPU to draw stuff
on the video screen.  256MBytes is 0x10000000, and 512MBytes is
0x20000000.  Some models of raspberry pi have 256MB, newer models have
512MB total ram which is split between the GPU and the ARM.  Assume
the ARM gets at least half of this.  Peripherals (uart, gpio, etc)
are mapped into arm address space at 0x20000000.  When you see
0x7Exxxxxx in the manual replace that with 0x20xxxxxx as your ARM
physical address.  Experimentally I have seen the memory repeats every
0x40000000, read 0x40008000 and you see the data from 0x8000.  From the
Broadcom doc this looks to be giving us access to the memory with
different caching schemes (cached, uncached, etc) depending on which
upper address bits you use.  Most likely to allow more room for RAM
the Raspberry Pi 2 uses a peripheral base address of 0x3Fxxxxxx instead
of the 0x20xxxxxx.

I do not normally zero out .bss or use .data so if you do this to my
examples

int x;
fun()
{
  static int y;
}

dont assume x and y are zero when your program starts. Nor if you do
this

int x=5;
fun()
{
  static int y=7;
}

will x=5 or y=7.

See the bssdata directory for more information, you can most likely
use the linker script to solve the problem for you since .text, .data,
.bss, (.rodata), everything lives in ram.

Nor do I use gcc libraries nor C libraries so you can build most if not
all of my examples using a gcc cross compiler.  Basically it doesnt
matter if you use arm-none-linux-gnueabi or arm-none-eabi.  I have not
looked in a while but formerly codesourcery.com (now a part of Mentor
Graphics) had a free LITE version of their toolchain which was pretty
easy to come by.  An even easier place is here
&lt;a href="https://launchpad.net/gcc-arm-embedded" rel="nofollow"&gt;https://launchpad.net/gcc-arm-embedded&lt;/a&gt;
to get a cross compiler.  Building your own toolchain from gnu sources
(binutils and gcc) is fairly straight forward see my build_gcc
repository for a build script (Linux only but from that you might get
other platforms to build).  And also remember that you can run linux
on the pi and on that it has a native, not cross, gnu toolchain.

As far as we know so far the Raspberry Pi is not "brickable".  Normally
what brickable means is the processor relies on a boot flash and with
that flash it is possible to change/erase it such that the processor will
not boot normally.  Brickable and bricked sometimes excludes things
like jtag or special programming headers.  From the customers perspective
a bricked board is...bricked.  But on return to the vendor they may
have other equipment that is able to recover the board without doing
any soldering, perhaps plugging in jtag or some other cable on pins/pads
they have declared as reserved.  Take apart a tv remote control or
calculator, etc and you may see some holes or pads on the circuit board,
for some of these devices just opening the battery case you have a view
of some of the pcboard.  This is no doubt a programming header.  Long
story short, so far as I know the Raspberry Pi is not brickable because
it boots off of an sd card which we can easily remove and replace
ourselves.  I dont know for sure, a lot more info is out about the
GPU since I started with this, but I assume that there is some GPU code
that boots off of an internal rom, I doubt with two on chip processors
they created pure logic to read the sd card, wade through the filesystem
to find a specific bootcode.bin file, load that into ram and run it.
If that assumption is true is that on chip rom one time programmable
or can it be erased/reprogrammed, and if the latter how lucky do we have
to be with a broken program to erase that?  So I am not 100% sure but
almost 100% sure the Raspberry Pi is not brickable.  This is actually
a big deal for bare metal programming, in particular if it is your first
platform.  With decades of experience I still make mistakes from time
to time and brick a board, never to be recovered.

To use my samples you do not need a huge sd card.  Nor do you need nor
want to download one of the linux images, takes a while to download,
takes a bigger sd card to use, and takes forever to write to the sd card.
I use the firmware from &lt;a href="http://github.com/raspberrypi"&gt;http://github.com/raspberrypi&lt;/a&gt;.  The minimum
configuration you need to get started at this level is:

go to &lt;a href="https://github.com/raspberrypi"&gt;https://github.com/raspberrypi&lt;/a&gt;, you DO NOT need to download
the repo, they have some large files in there you will not need (for
my examples).  go to the firmware directory and then the boot directory.
For each of these files, bootcode.bin and start.elf (NOT kernel.img,
dont need it, too big)(loader.bin is no longer used/required).  Click
on the file name, it will go to another page then click on View Raw and
it will let you download the file.  For reference, I do not use nor
have a config.txt file on my sd card.  I only have the minimum number
of files on the sd card, bootcode.bin, start.elf and either kernel.img
or kernel7.img (or sometimes both).

My examples are basically the kernel.img file.  Not a linux kernel,
just bare metal programs.  Since the GPU bootloader is looking for
that file name, you use that file name.  The kernel.img file is just a
blob that is copied to memory, dont worry about what they named it.

What I do is setup the sd card with a single partition, fat32.  And
copy the above files in the root directory.  bootcode.bin and start.elf.
From there you take .bin files from my examples and place them on the sd
card with the name kernel.img.  It wont take you very long to figure out
this is going to get painful.

1) power off raspi
2) remove sd card
3) insert sd card in reader
4) plug reader into computer
5) mount/wait
6) copy binary file to kernel.img
7) sync/wait
8) unmount
9) insert sd card in raspi
10) power raspi
11) repeat

There are ways to avoid this, one is jtag, which is not as expensive
as it used to be.  It used to be in the thousands of dollars, now it
is under $50 and the software tools are free.  Now the raspi does have
jtag on the arm, getting the jtag connected requires soldering on older
of the older models, but unless you were an early adopter, you dont
need to worry about that all the signals are on the P1 connector. How
to use the jtag and how to hook it up is described later and in
the armjtag sample.

Another method is a bootloader, typically you use a serial port connected
to the target processor.  That processor boots a bootloader program that
in some way, shape, or form allows you to interact with the bootloader
and load programs into memory (that the bootloader is not using itself)
and then the bootloader branches/jumps to your program.  If your program
is still being debugged and you want to try again, you reboot the processor
the bootloader comes up and you can try again without having to move any
sd cards, etc.  The sd card dance above is now replaced with the
bootloader dance:

1) power off raspi
2) power on raspi
3) type command to load and start new program

Or if you solder on a reset button

1) reset raspi
2) type command to load and start new program

I have working bootloader examples.  bootloader05 is currently the last
of the xmodem based ones (that basically take a kernel.img file),
personally I use bootloader07 which takes an intel hex formatted file
which these examples also build.  The .bin file would be used with
bootloader05, the .hex with bootloader07.  But you need more hardware
(no soldering is required).  For those old enough to know what a serial
port is, you CANNOT connect your raspberry pi directly to this port,
you will fry the raspberry pi.  You need some sort of serial port at
3.3V either a level shifter of some sort (transceiver like a MAX232) or
a usb serial port where the signals are 3.3V (dont need to use RS232
just stay at the logic level).  The solution I recommend is a non-solder
solution:

A recent purchase, experimentally white is RX and green is TX, black GND
&lt;a href="http://www.nexuscyber.com/usb-to-ttl-serial-debug-console-cable-for-raspberry-pi" rel="nofollow"&gt;http://www.nexuscyber.com/usb-to-ttl-serial-debug-console-cable-for-raspberry-pi&lt;/a&gt;
Sparkfun has one
&lt;a href="https://www.sparkfun.com/products/12977" rel="nofollow"&gt;https://www.sparkfun.com/products/12977&lt;/a&gt;
As does Adafruit
&lt;a href="https://www.adafruit.com/products/954" rel="nofollow"&gt;https://www.adafruit.com/products/954&lt;/a&gt;
The above, assuming you figure out rx from tx, are all you need.  The
ones below you may need to solder or may need some jumper wires.

&lt;a href="http://www.sparkfun.com/products/9873" rel="nofollow"&gt;http://www.sparkfun.com/products/9873&lt;/a&gt;
plus some male/female wire
&lt;a href="http://www.sparkfun.com/products/9140" rel="nofollow"&gt;http://www.sparkfun.com/products/9140&lt;/a&gt;

Solutions that may involve soldering
&lt;a href="http://www.sparkfun.com/products/718" rel="nofollow"&gt;http://www.sparkfun.com/products/718&lt;/a&gt;
&lt;a href="http://www.sparkfun.com/products/8430" rel="nofollow"&gt;http://www.sparkfun.com/products/8430&lt;/a&gt;

Or this for level shifting to a real com port.
&lt;a href="http://www.sparkfun.com/products/449" rel="nofollow"&gt;http://www.sparkfun.com/products/449&lt;/a&gt;

Or see the pitopi (pi to pi) directory.  This talks about how to take
two raspberry pi's and connect them together.  One being the
host/development platform (a raspberry pi running linux is a native
arm development platform, no need to find/get/build a cross compiler)
the other being the target that runs your bare metal programs.

Lastly and perhaps the best solution IMO, is the FT4232H or FT2232H
mini module from FTDI.  It gives you UART and JTAG for under $30.
See the armjtag directory README for more and you will want some
female/female wire from sparkfun or adafruit or elsewhere
&lt;a href="https://www.sparkfun.com/products/8430" rel="nofollow"&gt;https://www.sparkfun.com/products/8430&lt;/a&gt;
(I use these F/F wires for most projects, buy/bought the 100 pack)

---- connecting to the uart pins ----

On the raspberry pi, the connector with two rows of a bunch of pins is
P1.  Starting at that corner of the board, the outside corner pin is
pin 2.  From pin 2 heading toward the yellow rca connector the pins
are 2, 4, 6, 8, 10.  Pin 6 connect to gnd on the usb to serial board
pin 8 is TX out of the raspi connect that to RX on the usb to serial
board.  Pin 10 is RX into the raspi, connect that to TX on the usb to
serial board.  Careful not to have metal items on the usb to serial
board touch metal items on the raspberry pi (other than the three
connections described).  On your host computer you will want to use
some sort of dumb terminal program, minicom, putty, etc.  Set the
serial port (usb to serial board) to 115200 baud, 8 data bits, no
parity, 1 stop bit.  NO flow control.  With minicom to get no flow
control you normally have to save the config, exit minicom, then
restart minicom and load the config in order for flow control
changes to take effect.  Once you have a saved config you dont have
to mess with it any more.

2  outer corner
4
6  ground
8  TX out
10 RX in

ground is not necessarily needed if both the raspberry pi and the
usb to serial board are powered by the same computer (I recommend
you do that) as they will ideally have the same ground.

Read more about the bootloaders in their local README files.  Likewise
if you interested in jtag see the armjatag README file.  Other than
chewing up a few more GPIO pins, and another thing you have to buy, the
jtag solution is the most powerful and useful.  My typical setup is the
armjtag binary as kernel.img, a usb to jtag board like the amontec
jtag-tiny and a usb to serial using minicom.

Update, amontec is history their website is gone.  But you can
get j-link (or clone) boxes from asia on ebay for around $11, so far
I have tried them with ARM JTAG and ARM SWD.  Very pleased so far.

If you can solder, the A+, B+, Zero and Pi 2 all have a pair of holes
sometimes with the text RUN next to them.  I use buttons like this
&lt;a href="https://www.sparkfun.com/products/97" rel="nofollow"&gt;https://www.sparkfun.com/products/97&lt;/a&gt;
with two of the legs broken off then the others twisted and adjusted
to fit in the holes and soldered down.

As far as these samples go I recommend starting with blinker01 then
follow the discovery of the chip into uart01, etc.

The bssdata and baremetal directories attempt to explain a little
bit about taking control of the gnu toolchain to build bare metal
programs like these examples.  As with any bare metal programmer I have
my ways of doing things and these two directories hopefully will show
you some basics, get you thinking about how these tools really work,
take the fear away from using them, as well as some comments on why
I take the approach I take (not worrying about .bss nor .data).  Since
the raspberry pi is from our perspective RAM based (the GPU loads our
whole binary into memory), we dont have to deal with the things we
would deal with on a FLASH/PROM + RAM system.  This RAM only approach
makes life a lot easier, but leaves out some important bare metal
experiences that you will have to find elsewhere.

-----------
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</description><author>dwelch67</author><guid isPermaLink="false">https://github.com/dwelch67/raspberrypi</guid><pubDate>Tue, 19 Nov 2019 00:04:00 GMT</pubDate></item><item><title>dspinellis/unix-history-repo #5 in Assembly, Today</title><link>https://github.com/dspinellis/unix-history-repo</link><description>&lt;p&gt;&lt;i&gt;Continuous Unix commit history from 1970 until today&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-unix-history-repository" class="anchor" aria-hidden="true" href="#unix-history-repository"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Unix History Repository&lt;/h1&gt;
&lt;p&gt;The history and evolution of the Unix operating system is made available
as a revision management repository, covering the period from its
inception in 1970 as a 2.5 thousand line kernel and 26 commands,
to 2017 as a widely-used 27 million line system. The 1.1GB repository
contains about half a million commits and more than two thousand merges.
The repository employs Git system for its storage and is hosted on GitHub.
It has been created by synthesizing with custom software 24 snapshots of
systems developed at Bell Labs, the University of California at Berkeley,
and the 386BSD team, two legacy repositories, and the modern repository
of the open source FreeBSD system.
In total, about one thousand individual contributors are identified,
the early ones through primary research.
The data set can be used for empirical research in software engineering,
information systems, and software archaeology.&lt;/p&gt;
&lt;p&gt;You can read more details about the contents, creation, and uses of this
repository through &lt;a href="http://www.dmst.aueb.gr/dds/pubs/jrnl/2016-EMPSE-unix-history/html/unix-history.html" rel="nofollow"&gt;this link&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Two repositories are associated with the project:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dspinellis/unix-history-repo"&gt;unix-history-repo&lt;/a&gt; is
a repository representing a
reconstructed version of the Unix history, based on the currently
available data. This repository will be often automatically regenerated from
scratch, so this is not a place to make contributions.
To ensure replicability its users are encouraged to fork it or archive it.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dspinellis/unix-history-make"&gt;unix-history-make&lt;/a&gt; is
a repository containing code and metadata used to build the above repository.
Contributions to this repository are welcomed.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-project-status" class="anchor" aria-hidden="true" href="#project-status"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Project status&lt;/h2&gt;
&lt;p&gt;The project has achieved its major goal with the establishment of a continuous timeline from 1970 until today. The repository contains:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;snapshots of PDP-7, V1, V2, V3, V4, V5, V6, and V7 Research Edition,&lt;/li&gt;
&lt;li&gt;Unix/32V,&lt;/li&gt;
&lt;li&gt;all available BSD releases,&lt;/li&gt;
&lt;li&gt;the CSRG SCCS history,&lt;/li&gt;
&lt;li&gt;two releases of 386BSD,&lt;/li&gt;
&lt;li&gt;the 386BSD patchkit,&lt;/li&gt;
&lt;li&gt;the FreeBSD 1.0 to 1.1.5 CVS history,&lt;/li&gt;
&lt;li&gt;an import of the FreeBSD repository starting from its initial imports that led to FreeBSD 2.0, and&lt;/li&gt;
&lt;li&gt;the current FreeBSD repository.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The files appear to be added in the repository in chronological order according to their modification time, and large parts of the source code have been attributed to their actual authors.  Commands like &lt;code&gt;git blame&lt;/code&gt; and &lt;code&gt;git log&lt;/code&gt; produce the expected results.&lt;/p&gt;
&lt;p&gt;The repository contains a number of two-way merges.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;3 BSD is merged from Unix/32V and Research Edition 6&lt;/li&gt;
&lt;li&gt;Various BSD releases are merged from the development branch and a time point of BSD-SCCS&lt;/li&gt;
&lt;li&gt;FreeBSD 1.0 is merged from Net/2 BSD and 386BSD-0.1-patchkit&lt;/li&gt;
&lt;li&gt;FreeBSD 2.0 is merged from BSD 4.4/Lite1 and FreeBSD 1.1.5&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Blame is apportioned appropriately.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-tags-and-branches" class="anchor" aria-hidden="true" href="#tags-and-branches"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tags and Branches&lt;/h2&gt;
&lt;p&gt;The following tags or branch names mark specific releases, listed in rough chronological order.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Epoch&lt;/li&gt;
&lt;li&gt;Research-PDP7&lt;/li&gt;
&lt;li&gt;Research-V1&lt;/li&gt;
&lt;li&gt;Research-V2&lt;/li&gt;
&lt;li&gt;Research-V3&lt;/li&gt;
&lt;li&gt;Research-V4&lt;/li&gt;
&lt;li&gt;Research-V5&lt;/li&gt;
&lt;li&gt;Research-V6&lt;/li&gt;
&lt;li&gt;BSD-1&lt;/li&gt;
&lt;li&gt;BSD-2&lt;/li&gt;
&lt;li&gt;Research-V7&lt;/li&gt;
&lt;li&gt;Bell-32V&lt;/li&gt;
&lt;li&gt;BSD-3&lt;/li&gt;
&lt;li&gt;BSD-4&lt;/li&gt;
&lt;li&gt;BSD-4_1_snap&lt;/li&gt;
&lt;li&gt;BSD-4_1c_2&lt;/li&gt;
&lt;li&gt;BSD-4_2&lt;/li&gt;
&lt;li&gt;BSD-4_3&lt;/li&gt;
&lt;li&gt;BSD-4_3_Reno&lt;/li&gt;
&lt;li&gt;BSD-4_3_Net_1&lt;/li&gt;
&lt;li&gt;BSD-4_3_Tahoe&lt;/li&gt;
&lt;li&gt;BSD-4_3_Net_2&lt;/li&gt;
&lt;li&gt;BSD-4_4&lt;/li&gt;
&lt;li&gt;BSD-4_4_Lite1&lt;/li&gt;
&lt;li&gt;BSD-4_4_Lite2&lt;/li&gt;
&lt;li&gt;BSD-SCCS-END&lt;/li&gt;
&lt;li&gt;386BSD-0.0&lt;/li&gt;
&lt;li&gt;386BSD-0.1&lt;/li&gt;
&lt;li&gt;386BSD-0.1-patchkit&lt;/li&gt;
&lt;li&gt;FreeBSD-release/1.0, 1.1, 1.1.5&lt;/li&gt;
&lt;li&gt;FreeBSD-release/2.0 2.0.5, 2.1.0, 2.1.5, 2.1.6, 2.1.6.1, 2.1.7, 2.2.0, 2.2.1, 2.2.2, 2.2.5, 2.2.6, 2.2.7, 2.2.8&lt;/li&gt;
&lt;li&gt;FreeBSD-release/3.0.0, 3.1.0, 3.2.0, 3.3.0, 3.4.0, 3.5.0&lt;/li&gt;
&lt;li&gt;FreeBSD-release/4.0.0 4.1.0, 4.1.1, 4.2.0, 4.3.0, 4.4.0, 4.5.0, 4.6.0, 4.6.1, 4.6.2, 4.7.0, 4.8.0, 4.9.0, 4.10.0, 4.11.0&lt;/li&gt;
&lt;li&gt;FreeBSD-release/5.0.0 5.1.0, 5.2.0, 5.2.1, 5.3.0, 5.4.0, 5.5.0&lt;/li&gt;
&lt;li&gt;FreeBSD-release/6.0.0, 6.1.0, 6.2.0, 6.3.0, 6.4.0&lt;/li&gt;
&lt;li&gt;FreeBSD-release/7.0.0, 7.1.0, 7.2.0, 7.3.0, 7.4.0&lt;/li&gt;
&lt;li&gt;FreeBSD-release/8.0.0, 8.1.0, 8.2.0, 8.3.0, 8.4.0&lt;/li&gt;
&lt;li&gt;FreeBSD-release/9.0.0, 9.1.0, 9.2.0&lt;/li&gt;
&lt;li&gt;FreeBSD-release/10.0.0, 10.1.0, 10.2.0, 10.3.0&lt;/li&gt;
&lt;li&gt;FreeBSD-release/11.0.0, 11.0.1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A detailed description of the major tags is available in the
file &lt;a href="https://github.com/dspinellis/unix-history-make/blob/master/releases.md"&gt;releases.md&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;More tags and branches are available.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;-Snapshot-Development&lt;/code&gt; branches denote commits that have been synthesized from a time-ordered sequence of a snapshot's files.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;-VCS-Development&lt;/code&gt; tags denote the point along an imported version control history branch where a particular release occurred.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-cool-things-you-can-do" class="anchor" aria-hidden="true" href="#cool-things-you-can-do"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Cool things you can do&lt;/h2&gt;
&lt;p&gt;The easiest thing you can do is to
watch the repository's &lt;a href="https://youtu.be/S7JB0mhrGCQ" rel="nofollow"&gt;Gource Visualization&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you have a broadband network connection and about 1.5GB of free disk space,
you can download the repository and run Git commands that go back decades.
Run&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;git clone https://github.com/dspinellis/unix-history-repo
git checkout BSD-Release&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to get a local copy of the Unix history repository.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-view-log-across-releases" class="anchor" aria-hidden="true" href="#view-log-across-releases"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;View log across releases&lt;/h3&gt;
&lt;p&gt;Running&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;git log --reverse --date-order&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;will give you commits such as the following&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;commit 64d7600ea5210a9125bd1a06e5d184ef7547d23d
Author: Ken Thompson &amp;lt;ken@research.uucp&amp;gt;
Date:   Tue Jun 20 05:00:00 1972 -0500

    Research V1 development
    Work on file u5.s

    Co-Authored-By: Dennis Ritchie &amp;lt;dmr@research.uucp&amp;gt;
    Synthesized-from: v1/sys
[...]
commit 4030f8318890a026e065bc8926cebefb71e9d353
Author: Ken Thompson &amp;lt;ken@research.uucp&amp;gt;
Date:   Thu Aug 30 19:30:25 1973 -0500

    Research V3 development
    Work on file sys/ken/slp.c

    Synthesized-from: v3
[...]
commit c4999ec655319a01e84d9460d84df824006f9e2d
Author: Dennis Ritchie &amp;lt;dmr@research.uucp&amp;gt;
Date:   Thu Aug 30 19:33:01 1973 -0500

    Research V3 development
    Work on file sys/dmr/kl.c

    Synthesized-from: v3
[...]
commit 355c543c6840fa5f37d8daf2e2eaa735ea6daa4a
Author: Brian W. Kernighan &amp;lt;bwk@research.uucp&amp;gt;
Date:   Tue May 13 19:43:47 1975 -0500

    Research V6 development
    Work on file usr/source/rat/r.g

    Synthesized-from: v6
[...]
commit 0ce027f7fb2cf19b7e92d74d3f09eb02e8fea50e
Author: S. R. Bourne &amp;lt;srb@research.uucp&amp;gt;
Date:   Fri Jan 12 02:17:45 1979 -0500

    Research V7 development
    Work on file usr/src/cmd/sh/blok.c

    Synthesized-from: v7
[...]
Author: Eric Schmidt &amp;lt;schmidt@ucbvax.Berkeley.EDU&amp;gt;
Date:   Sat Jan 5 22:49:18 1980 -0800

    BSD 3 development

    Work on file usr/src/cmd/net/sub.c
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-view-changes-to-a-specific-file" class="anchor" aria-hidden="true" href="#view-changes-to-a-specific-file"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;View changes to a specific file&lt;/h3&gt;
&lt;p&gt;Run&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;git checkout Research-Release
git log --follow --simplify-merges usr/src/cmd/c/c00.c&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to see dates on which the C compiler was modified.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-annotate-lines-in-a-specific-file-by-their-version" class="anchor" aria-hidden="true" href="#annotate-lines-in-a-specific-file-by-their-version"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Annotate lines in a specific file by their version&lt;/h3&gt;
&lt;p&gt;Run&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git blame -C -C usr/sys/sys/pipe.c
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to see how the Unix pipe functionality evolved over the years.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;3cc1108b usr/sys/ken/pipe.c     (Ken Thompson 1974-11-26 18:13:21 -0500  53) 	rf-&amp;gt;f_flag = FREAD|FPIPE;
3cc1108b usr/sys/ken/pipe.c     (Ken Thompson 1974-11-26 18:13:21 -0500  54) 	rf-&amp;gt;f_inode = ip;
3cc1108b usr/sys/ken/pipe.c     (Ken Thompson 1974-11-26 18:13:21 -0500  55) 	ip-&amp;gt;i_count = 2;
[...]
1f183be2 usr/sys/sys/pipe.c     (Ken Thompson 1979-01-10 15:19:35 -0500 122) 	register struct inode *ip;
1f183be2 usr/sys/sys/pipe.c     (Ken Thompson 1979-01-10 15:19:35 -0500 123) 
1f183be2 usr/sys/sys/pipe.c     (Ken Thompson 1979-01-10 15:19:35 -0500 124) 	ip = fp-&amp;gt;f_inode;
1f183be2 usr/sys/sys/pipe.c     (Ken Thompson 1979-01-10 15:19:35 -0500 125) 	c = u.u_count;
1f183be2 usr/sys/sys/pipe.c     (Ken Thompson 1979-01-10 15:19:35 -0500 126) 
1f183be2 usr/sys/sys/pipe.c     (Ken Thompson 1979-01-10 15:19:35 -0500 127) loop:
1f183be2 usr/sys/sys/pipe.c     (Ken Thompson 1979-01-10 15:19:35 -0500 128) 
1f183be2 usr/sys/sys/pipe.c     (Ken Thompson 1979-01-10 15:19:35 -0500 129) 	/*
9a9f6b22 usr/src/sys/sys/pipe.c (Bill Joy     1980-01-05 05:51:18 -0800 130) 	 * If error or all done, return.
9a9f6b22 usr/src/sys/sys/pipe.c (Bill Joy     1980-01-05 05:51:18 -0800 131) 	 */
9a9f6b22 usr/src/sys/sys/pipe.c (Bill Joy     1980-01-05 05:51:18 -0800 132) 
9a9f6b22 usr/src/sys/sys/pipe.c (Bill Joy     1980-01-05 05:51:18 -0800 133) 	if (u.u_error)
9a9f6b22 usr/src/sys/sys/pipe.c (Bill Joy     1980-01-05 05:51:18 -0800 134) 		return;
6d632e85 usr/sys/ken/pipe.c     (Ken Thompson 1975-07-17 10:33:37 -0500 135) 	plock(ip);
6d632e85 usr/sys/ken/pipe.c     (Ken Thompson 1975-07-17 10:33:37 -0500 136) 	if(c == 0) {
6d632e85 usr/sys/ken/pipe.c     (Ken Thompson 1975-07-17 10:33:37 -0500 137) 		prele(ip);
6d632e85 usr/sys/ken/pipe.c     (Ken Thompson 1975-07-17 10:33:37 -0500 138) 		u.u_count = 0;
6d632e85 usr/sys/ken/pipe.c     (Ken Thompson 1975-07-17 10:33:37 -0500 139) 		return;
6d632e85 usr/sys/ken/pipe.c     (Ken Thompson 1975-07-17 10:33:37 -0500 140) 	}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;a id="user-content-how-you-can-help" class="anchor" aria-hidden="true" href="#how-you-can-help"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;How you can help&lt;/h2&gt;
&lt;p&gt;You can help if you were there at the time, or if you can locate a
source that contains information that is currently missing.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If your current GitHub account is not linked to your past contributions,
(you can search them through
&lt;a href="http://www.spinellis.gr/cgi-bin/namegrep.pl" rel="nofollow"&gt;this page&lt;/a&gt;),
associate your past email with your current account through your
&lt;a href="https://github.com/settings/emails"&gt;GitHub account settings&lt;/a&gt;.
(Contact me for instructions on how to add email addresses to which you no
longer have access.)&lt;/li&gt;
&lt;li&gt;Look for errors and omissions in the
&lt;a href="https://github.com/dspinellis/unix-history-make/blob/master/src/author-path"&gt;files that map file paths to authors&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Look for parts of the system that have not yet been attributed
&lt;a href="https://github.com/dspinellis/unix-history-make/blob/master/src/unmatched"&gt;in these files&lt;/a&gt;
and propose suitable attributions.
Keep in mind that attributions for parts that were developed in one place
and modified elsewhere (e.g. developed at Bell Labs and modified at Berkeley)
should be for the person who did the modification, not the original author.&lt;/li&gt;
&lt;li&gt;Look for authors whose identifier starts with &lt;code&gt;x-&lt;/code&gt; in the
author id to name map files for
&lt;a href="https://github.com/dspinellis/unix-history-make/blob/master/src/bell.au"&gt;Bell Labs&lt;/a&gt;,
and
&lt;a href="https://github.com/dspinellis/unix-history-make/blob/master/src/berkeley.au"&gt;Berkeley&lt;/a&gt;,
and provide or confirm their actual login identifier.
(The one used is a guess.)&lt;/li&gt;
&lt;li&gt;Contribute a path regular expression to contributor map file
(see &lt;a href="https://github.com/dspinellis/unix-history-make/blob/master/src/author-path/v7"&gt;v7.map&lt;/a&gt;) for
&lt;a href="http://www.tuhs.org/Archive/4BSD/Distributions/4.2BSD/" rel="nofollow"&gt;4.2BSD&lt;/a&gt;,
&lt;a href="http://www.tuhs.org/Archive/4BSD/Distributions/4.3BSD/" rel="nofollow"&gt;4.3BSD&lt;/a&gt;,
&lt;a href="http://www.tuhs.org/Archive/4BSD/Distributions/4.3BSD-Reno/" rel="nofollow"&gt;4.3BSD-Reno&lt;/a&gt;,
&lt;a href="http://www.tuhs.org/Archive/4BSD/Distributions/4.3BSD-Tahoe/" rel="nofollow"&gt;4.3BSD-Tahoe&lt;/a&gt;,
&lt;a href="http://www.tuhs.org/Archive/4BSD/Distributions/4.3BSD-Alpha/" rel="nofollow"&gt;4.3BSD-Alpha&lt;/a&gt;, and
&lt;a href="http://www.tuhs.org/Archive/4BSD/Distributions/Net2/" rel="nofollow"&gt;Net2&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Import further branches, such as 2BSD, NetBSD, OpenBSD, and &lt;em&gt;Plan 9 from Bell Labs&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-re-creating-the-historical-repository-from-scratch" class="anchor" aria-hidden="true" href="#re-creating-the-historical-repository-from-scratch"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Re-creating the historical repository from scratch&lt;/h2&gt;
&lt;p&gt;The -make repository is provided to share and document the creation process, rather than as a bullet-proof way to get consistent and repeatable results.  For instance, importing the snapshots on a system that is case-insensitive (NTFS, HFS Plus with default settings) will result in a few files getting lost.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-prerequisites" class="anchor" aria-hidden="true" href="#prerequisites"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Prerequisites&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Git&lt;/li&gt;
&lt;li&gt;Perl&lt;/li&gt;
&lt;li&gt;The Perl modules &lt;code&gt;VCS::SCCS&lt;/code&gt; and &lt;code&gt;Git::FastExport&lt;/code&gt;
(Install with &lt;code&gt;sudo cpanm VCS::SCCS Git::FastExport&lt;/code&gt;.)&lt;/li&gt;
&lt;li&gt;If compiling patch under GNU/Linux and library &lt;code&gt;libbsd&lt;/code&gt;
(e.g. the &lt;code&gt;libbsd-dev&lt;/code&gt; package).&lt;/li&gt;
&lt;li&gt;Sudo (and authorization to use it to mount ISO images)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-repository-creation" class="anchor" aria-hidden="true" href="#repository-creation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Repository creation&lt;/h3&gt;
&lt;p&gt;The -repo repository can be created with the following commands.&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;make
./import.sh&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-adding-a-single-source" class="anchor" aria-hidden="true" href="#adding-a-single-source"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Adding a single source&lt;/h2&gt;
&lt;p&gt;If you want to add a new source without running the full import process,
you can do the following.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Prepare the source's maps and data&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cd&lt;/code&gt; to the repo directory&lt;/li&gt;
&lt;li&gt;Checkout the repo at the point where the new source will branch out&lt;/li&gt;
&lt;li&gt;Run a Perl command such as the following.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;perl ../import-dir.pl [-v] -m Research-V7 -c ../author-path/Bell-32V \
-n ../bell.au -r Research-V7 -i ../ignore/Bell-32V \
$ARCHIVE/32v Bell 32V -0500 | gfi
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;a id="user-content-further-reading" class="anchor" aria-hidden="true" href="#further-reading"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Further reading&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Diomidis Spinellis. A repository of Unix history and evolution. &lt;em&gt;Empirical Software Engineering&lt;/em&gt;, 2017. doi:10.1007/s10664-016-9445-5.
&lt;a href="http://www.dmst.aueb.gr/dds/pubs/jrnl/2016-EMPSE-unix-history/html/unix-history.html" rel="nofollow"&gt;HTML&lt;/a&gt;, &lt;a href="http://www.dmst.aueb.gr/dds/pubs/jrnl/2016-EMPSE-unix-history/html/unix-history.pdf" rel="nofollow"&gt;PDF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Diomidis Spinellis. A repository with 44 years of Unix evolution. In &lt;em&gt;MSR '15: Proceedings of the 12th Working Conference on Mining Software Repositories&lt;/em&gt;, pages 13-16. IEEE, 2015. Best Data Showcase Award. &lt;a href="http://www.dmst.aueb.gr/dds/pubs/conf/2015-MSR-Unix-History/html/Spi15c.pdf" rel="nofollow"&gt;PDF&lt;/a&gt;, &lt;a href="http://www.dmst.aueb.gr/dds/pubs/conf/2015-MSR-Unix-History/html/Spi15c.html" rel="nofollow"&gt;HTML&lt;/a&gt;, &lt;a href="http://www.dmst.aueb.gr/dds/pubs/conf/2015-MSR-Unix-History/html/poster.pdf" rel="nofollow"&gt;poster&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Warren Toomey, First Edition Unix: Its Creation and Restoration, in &lt;em&gt;IEEE Annals of the History of Computing&lt;/em&gt;, vol. 32, no. 3, pp. 74-82, July-Sept. 2010. doi:10.1109/MAHC.2009.55. &lt;a href="http://www.tuhs.org/Archive/Documentation/Papers/1eUnix_creation_restoration.pdf" rel="nofollow"&gt;PDF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Warren Toomey,  The Restoration of Early UNIX Artifacts, in &lt;em&gt;USENIX ATC '09: 2009 USENIX Annual Technical Conference&lt;/em&gt;. 2009. &lt;a href="https://www.usenix.org/legacy/events/usenix09/tech/full_papers/toomey/toomey.pdf" rel="nofollow"&gt;PDF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Diomidis Spinellis, Panagiotis Louridas, and Maria Kechagia. An exploratory study on the evolution of C programming in the Unix operating system. In Qing Wang and Guenther Ruhe, editors, &lt;em&gt;ESEM '15: 9th International Symposium on Empirical Software Engineering and Measurement&lt;/em&gt;, pages 54–57. IEEE, October 2015. &lt;a href="http://www.dmst.aueb.gr/dds/pubs/conf/2015-ESEM-CodeStyle/html/SLK15.html" rel="nofollow"&gt;HTML&lt;/a&gt;, &lt;a href="http://www.dmst.aueb.gr/dds/pubs/conf/2015-ESEM-CodeStyle/html/SLK15.pdf" rel="nofollow"&gt;PDF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Diomidis Spinellis, Panos Louridas, and Maria Kechagia. The evolution of C programming practices: A study of the Unix operating system 1973–2015. In Willem Visser and Laurie Williams, editors, &lt;em&gt;ICSE '16: Proceedings of the 38th International Conference on Software Engineering&lt;/em&gt;, May 2016. Association for Computing Machinery. doi:10.1145/2884781.2884799. &lt;a href="http://www.dmst.aueb.gr/dds/pubs/conf/2016-ICSE-ProgEvol/html/SLK16.pdf" rel="nofollow"&gt;PDF&lt;/a&gt;, &lt;a href="http://www.dmst.aueb.gr/dds/pubs/conf/2016-ICSE-ProgEvol/html/SLK16.html" rel="nofollow"&gt;HTML&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Wikipedia: The Free Encyclopedia
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/History_of_Unix" rel="nofollow"&gt;History of Unix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/List_of_Unix_systems" rel="nofollow"&gt;List of Unix systems&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/List_of_Unix_commands" rel="nofollow"&gt;List of Unix commands&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/List_of_Unix_daemons" rel="nofollow"&gt;List of Unix daemons&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Research_Unix" rel="nofollow"&gt;Research Unix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/BSD_Unix" rel="nofollow"&gt;Berkeley Software Distribution&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Unix_philosophy" rel="nofollow"&gt;Unix philosophy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;TUHS: The Unix Heritage Society
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://minnie.tuhs.org/cgi-bin/utree.pl" rel="nofollow"&gt;The Unix Tree&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Historical documents and data
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/DoctorWkt/pdp7-unix"&gt;PDP-7 Unix restoration project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://bitsavers.trailing-edge.com/pdf/bellLabs/unix/PreliminaryUnixImplementationDocument_Jun72.pdf" rel="nofollow"&gt;First Edition Unix printout - 1972&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://cm.bell-labs.com/cm/cs/who/dmr/otherports/32vscan.pdf" rel="nofollow"&gt;Unix 32/V Report - 1978&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.mckusick.com/csrg/index.html" rel="nofollow"&gt;Berkeley CSRG Archive CD-ROMs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Studies
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://archive.org/details/a_research_unix_reader" rel="nofollow"&gt;M. Douglas McIlroy. A Research UNIX Reader: Annotated Excerpts from the Programmer's Manual, 1971-1986&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.princeton.edu/~hos/Mahoney/unixpeople.htm" rel="nofollow"&gt;Michael S. Mahoney. Unix at the Bell Labs - People&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-acknowledgements" class="anchor" aria-hidden="true" href="#acknowledgements"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Acknowledgements&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The following people helped with Bell Labs login identifiers.&lt;/li&gt;
&lt;li&gt;Brian W. Kernighan&lt;/li&gt;
&lt;li&gt;Doug McIlroy&lt;/li&gt;
&lt;li&gt;Arnold D. Robbins&lt;/li&gt;
&lt;li&gt;The following people helped with *BSD login identifiers.&lt;/li&gt;
&lt;li&gt;Clem Cole&lt;/li&gt;
&lt;li&gt;Era Eriksson&lt;/li&gt;
&lt;li&gt;Mary Ann Horton&lt;/li&gt;
&lt;li&gt;Warner Losh&lt;/li&gt;
&lt;li&gt;Kirk McKusick&lt;/li&gt;
&lt;li&gt;Jeremy C. Reed&lt;/li&gt;
&lt;li&gt;Ingo Schwarze&lt;/li&gt;
&lt;li&gt;Anatole Shaw&lt;/li&gt;
&lt;li&gt;The BSD SCCS import code is based on work by&lt;/li&gt;
&lt;li&gt;&lt;a href="http://search.cpan.org/~hmbrand/VCS-SCCS-0.20/SCCS.pm" rel="nofollow"&gt;H. Merijn Brand&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jonathangray/csrg-git-patches/"&gt;Jonathan Gray&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-build-identification" class="anchor" aria-hidden="true" href="#build-identification"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Build identification&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Software URL: &lt;a href="https://github.com/dspinellis/unix-history-make"&gt;https://github.com/dspinellis/unix-history-make&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Software SHA: 2548f4c5a28844490f036cc103a41432b06d9e58&lt;/li&gt;
&lt;li&gt;Build timestamp: 2018-11-29 15:37:02 UTC&lt;/li&gt;
&lt;/ul&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>dspinellis</author><guid isPermaLink="false">https://github.com/dspinellis/unix-history-repo</guid><pubDate>Tue, 19 Nov 2019 00:05:00 GMT</pubDate></item><item><title>leachim6/hello-world #6 in Assembly, Today</title><link>https://github.com/leachim6/hello-world</link><description>&lt;p&gt;&lt;i&gt;Hello world in every computer language.  Thanks to everyone who contributes to this, make sure to see CONTRIBUTING.md for contribution instructions!&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-hello-world" class="anchor" aria-hidden="true" href="#hello-world"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Hello, World!&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Inspired by &lt;a href="https://helloworldcollection.github.io/" rel="nofollow"&gt;The Hello World Collection&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;&lt;a id="user-content-hello-world-in-every-programming-language" class="anchor" aria-hidden="true" href="#hello-world-in-every-programming-language"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Hello world in every programming language.&lt;/h4&gt;
&lt;p&gt;As I watch the collection expand, this project has blown up more than I ever thought possible.
Thanks to everyone who continues to contribute, new languages are created every day!&lt;/p&gt;
&lt;p&gt;Make sure to see CONTRIBUTING.md for instructions on contributing to the project!&lt;/p&gt;
&lt;p&gt;Spin-Off project smartly suggested and implemented by &lt;a href="https://github.com/zenware"&gt;@zenware&lt;/a&gt;:&lt;br&gt;
Meet &lt;a href="https://github.com/zenware/FizzBuzz"&gt;FizzBuzz&lt;/a&gt;, the evolution of &lt;a href="https://github.com/leachim6/hello-world"&gt;hello-world&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="e/elm.elm"&gt;Hello Html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-this-repository-currently-contains-hello-world-programs-in-the-following-languages" class="anchor" aria-hidden="true" href="#this-repository-currently-contains-hello-world-programs-in-the-following-languages"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;This repository currently contains "Hello World" programs in the following languages:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="%23/0815.0815"&gt;0815&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="%23/1c-enterprise"&gt;1C Enterprise&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="%23/2B.2b"&gt;2B&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="%23/4gl.4gl"&gt;4Gl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="%23/4test"&gt;4Test&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="%23/4thdimension.4dd"&gt;4Thdimension&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="%23/%7EEnglish.ext"&gt;~English&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/abap.abap"&gt;Abap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/abc.abc"&gt;Abc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/ACIDIC.acidic"&gt;Acidic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/acpi"&gt;Acpi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/ACRONYM.acronym"&gt;Acronym&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/acs.acs"&gt;Acs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/actionscript.as"&gt;Actionscript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/actionscript2.as"&gt;Actionscript2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/actionscript3.as"&gt;Actionscript3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/actionscript_flashmx.as"&gt;Actionscript Flashmx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/ada.ada"&gt;Ada&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/advpl"&gt;Advpl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/Aeolbonn.aeo"&gt;Aeolbonn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/aeolbonn.aeolbonn"&gt;Aeolbonn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/agda.agda"&gt;Agda&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/aheui.aheui"&gt;Aheui&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/aime.aime"&gt;Aime&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/aiml.aiml"&gt;Aiml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/ALAGUF.alaguf"&gt;Alaguf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/alda.alda"&gt;Alda&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/algae.algae"&gt;Algae&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/ALGOL-W.algol"&gt;Algol W&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/algol60.algol60"&gt;Algol60&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/algol68.algol68"&gt;Algol68&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/alore.alore"&gt;Alore&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/Amiga-E.amiga-e"&gt;Amiga E&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/amos"&gt;Amos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/android.java"&gt;Android&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/angelscript"&gt;Angelscript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/angular.js"&gt;Angular&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/ante.ante"&gt;Ante&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/AntLang.ant"&gt;Antlang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/apc.apc"&gt;Apc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/Apex.cls"&gt;Apex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/apl.apl"&gt;Apl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/applescript.scpt"&gt;Applescript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/arc.arc"&gt;Arc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/arduino.ino"&gt;Arduino&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/arena.are"&gt;Arena&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/argh.agh"&gt;Argh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/arnoldc.arnoldc"&gt;Arnoldc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/ash.ash"&gt;Ash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/asp.asp"&gt;Asp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/aspectj.aj"&gt;Aspectj&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_6502.asm"&gt;Assembler 6502&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_6502appleII.asm"&gt;Assembler 6502Appleii&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_6502c64.asm"&gt;Assembler 6502C64&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_6809vectrex.asm"&gt;Assembler 6809Vectrex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_8048_videopac.asm"&gt;Assembler 8048 Videopac&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_arm.s"&gt;Assembler Arm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_atari2600.asm"&gt;Assembler Atari2600&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_bootsect.asm"&gt;Assembler Bootsect&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_DCPU16.asm"&gt;Assembler Dcpu16&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_fasm_dos.asm"&gt;Assembler Fasm Dos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_hla.hla"&gt;Assembler Hla&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_ibm360.asm"&gt;Assembler Ibm360&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_intel.asm"&gt;Assembler Intel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_lc-3.asm"&gt;Assembler Lc 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_m68000_amigaos.asm"&gt;Assembler M68000 Amigaos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_masm_dos.asm"&gt;Assembler Masm Dos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_masm_win32.asm"&gt;Assembler Masm Win32&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_masm_win64.asm"&gt;Assembler Masm Win64&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_mips.asm"&gt;Assembler Mips&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_mmix.asm"&gt;Assembler Mmix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_nasm_freebsd.asm"&gt;Assembler Nasm Freebsd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_nasm_linux.asm"&gt;Assembler Nasm Linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_nasm_linux64.asm"&gt;Assembler Nasm Linux64&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_nasm_macho64.asm"&gt;Assembler Nasm Macho64&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_nasm_win32.asm"&gt;Assembler Nasm Win32&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_tasm_dos.asm"&gt;Assembler Tasm Dos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_tms9900_ti99_4a.asm"&gt;Assembler Tms9900 Ti99 4A&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_vax_ultrix.asm"&gt;Assembler Vax Ultrix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_z80_knightos.asm"&gt;Assembler Z80 Knightos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_z80_ti83calculator.asm"&gt;Assembler Z80 Ti83Calculator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/assembler_z80_zxspectrum.asm"&gt;Assembler Z80 Zxspectrum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/Attache.%40"&gt;Attache&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/autohotkey.ahk"&gt;Autohotkey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/autoit.au3"&gt;Autoit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/awful.yuk"&gt;Awful&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/awk.awk"&gt;Awk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="a/README.md"&gt;Readme&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/B.b"&gt;B&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/bash.bash"&gt;Bash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/basic.bas"&gt;Basic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/batch.bat"&gt;Batch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/batsh.batsh"&gt;Batsh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/battlestar.bts"&gt;Battlestar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/BCPL.bcl"&gt;Bcpl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/beatnik.beatnik"&gt;Beatnik&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/befunge.be"&gt;Befunge&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/BennuGD"&gt;Bennugd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/beta.bet"&gt;Beta&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/BIRL.c"&gt;Birl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/BIT.bit"&gt;Bit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/BitBitJump.bbj"&gt;Bitbitjump&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/BlackRum.br"&gt;Blackrum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/BLC.Blc"&gt;Blc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/blitz3d.bb"&gt;Blitz3D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/blub.blub"&gt;Blub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/bolgefuck.bf"&gt;Bolgefuck&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/boo.boo"&gt;Boo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/brainfuck-2d.bf2d"&gt;Brainfuck 2D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/brainfuck.bf"&gt;Brainfuck&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/Brainloller.png"&gt;Brainloller&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/broccoli.brocc"&gt;Broccoli&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/BRZRK.brzrk"&gt;Brzrk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/burlesque.burlesque"&gt;Burlesque&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="b/byter.byter"&gt;Byter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/c%2B%2B.cpp"&gt;C++&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/c.c"&gt;C&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/caml.ml"&gt;Caml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/cardinal.cardinal"&gt;Cardinal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/Casio%20BASIC"&gt;Casio Basic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/cat.cat"&gt;Cat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/centura.centura"&gt;Centura&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/ceylon.ceylon"&gt;Ceylon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/cgi.c"&gt;Cgi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/chapel.chpl"&gt;Chapel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/cheddar.cheddar"&gt;Cheddar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/chef.ch"&gt;Chef&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/chicken.chicken"&gt;Chicken&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/cil.il"&gt;Cil&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/clean.icl"&gt;Clean&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/clipper.clipper"&gt;Clipper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/clipper.prg"&gt;Clipper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/clips.clips"&gt;Clips&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/clisp.lisp"&gt;Clisp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/clojure.clj"&gt;Clojure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/cobol.cbl"&gt;Cobol&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/coconut.coc"&gt;Coconut&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/coffeescript.coffee"&gt;Coffeescript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/coldfusion.cfm"&gt;Coldfusion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/common-lisp.lisp"&gt;Common Lisp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/ContinuesEquation.ce"&gt;Continuesequation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/cool.cl"&gt;Cool&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/cor.cor"&gt;Cor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/crystal.cr"&gt;Crystal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/csh.csh"&gt;Csh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/csharp.cs"&gt;Csharp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/cson.cson"&gt;Cson&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/css.css"&gt;Css&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/cuneiform.cfl"&gt;Cuneiform&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/curry.curry"&gt;Curry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="c/cypherNeo4j.cypher"&gt;Cypherneo4J&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="d/d.d"&gt;D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="d/dark.txt"&gt;Dark&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="d/Dart.dart"&gt;Dart&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="d/db2.sql"&gt;Db2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="d/dc.dc"&gt;Dc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="d/DCL"&gt;Dcl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="d/dd_dd.dd"&gt;Dd Dd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="d/Decimal.dec"&gt;Decimal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="d/delphi.delphi"&gt;Delphi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="d/delphi.pas"&gt;Delphi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="d/dis.dis"&gt;Dis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="d/divzeros.dz"&gt;Divzeros&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="d/DNA%23.dna"&gt;Dna#&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="d/DNA-Sharp.dna"&gt;Dna Sharp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="d/dogescript.djs"&gt;Dogescript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="d/DOGO.dogo"&gt;Dogo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="d/dos.bat"&gt;Dos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="d/Drive-In%20Window.diw"&gt;Drive In Window&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="d/dtrace.d"&gt;Dtrace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="d/DUP.dup"&gt;Dup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="d/dylan.dl"&gt;Dylan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="d/Dyvil.dyv"&gt;Dyvil&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="e/ebuild.ebuild"&gt;Ebuild&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="e/Eiffel.eiff"&gt;Eiffel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="e/elixir.ex"&gt;Elixir&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="e/elixir.exs"&gt;Elixir&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="e/elm.elm"&gt;Elm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="e/EmacsLisp.el"&gt;Emacslisp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="e/emmental.emmental"&gt;Emmental&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="e/emojicode.emojic"&gt;Emojicode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="e/emoticon.emoticon"&gt;Emoticon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="e/EOOOL.eoool"&gt;Eoool&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="e/erlang.erl"&gt;Erlang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="e/erlang_escript.erl"&gt;Erlang Escript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="f/factor.factor"&gt;Factor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="f/falcon.fal"&gt;Falcon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="f/false.f"&gt;False&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="f/fancy.fy"&gt;Fancy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="f/fantom.fan"&gt;Fantom&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="f/ferite.fe"&gt;Ferite&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="f/fetlang.fet"&gt;Fetlang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="f/fish.fish"&gt;Fish&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="f/fjoelnir.fjo"&gt;Fjoelnir&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="f/fob.fob"&gt;Fob&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="f/focal.fc"&gt;Focal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="f/fog.fog.md"&gt;Fog.Fog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="f/foo.foo"&gt;Foo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="f/forobj.forobj"&gt;Forobj&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="f/forth.fth"&gt;Forth&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="f/fortob.fortob"&gt;Fortob&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="f/fortran.f90"&gt;Fortran&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="f/fortran77.f77"&gt;Fortran77&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="f/fourier.fourier"&gt;Fourier&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="f/fsharp.fs"&gt;Fsharp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="f/fstar.fst"&gt;Fstar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="g/gammaplex.gammaplex"&gt;Gammaplex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="g/GASOIL.gasoil"&gt;Gasoil&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="g/gecho.gecho"&gt;Gecho&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="g/gentzen.gentzen"&gt;Gentzen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="g/geojson.geojson"&gt;Geojson&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="g/gibberish.gibberish"&gt;Gibberish&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="g/glass.glass"&gt;Glass&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="g/gml.gml"&gt;Gml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="g/go.go"&gt;Go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="g/golfscript.golfscript"&gt;Golfscript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="g/golo.golo"&gt;Golo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="g/googleappscript.gs"&gt;Googleappscript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="g/gosu.gosu"&gt;Gosu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="g/gosu.gs"&gt;Gosu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="g/gravity.gravity"&gt;Gravity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="g/Green-Marl.gm"&gt;Green Marl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="g/gri.gri"&gt;Gri&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="g/GridScript.gridscript"&gt;Gridscript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="g/grin.grin"&gt;Grin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="g/groovy.groovy"&gt;Groovy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="g/Gui4Cli"&gt;Gui4Cli&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="h/hack.hh"&gt;Hack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="h/haskell.hs"&gt;Haskell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="h/haxe.hx"&gt;Haxe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="h/HEX.hex"&gt;Hex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="h/hexish.hexish"&gt;Hexish&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="h/Higher%20Subleq.higher_subleq"&gt;Higher Subleq&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="h/hodor.hd"&gt;Hodor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="h/hollow.hollow"&gt;Hollow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="h/homespring.homespring"&gt;Homespring&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="h/HOP"&gt;Hop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="h/hq9%2B.h"&gt;Hq9+&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="h/html.html"&gt;Html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="h/hy.hy"&gt;Hy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="h/hypertalk.ht"&gt;Hypertalk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="i/ibm1401"&gt;Ibm1401&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="i/IcedCoffeeScript.ics"&gt;Icedcoffeescript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="i/ici.ici"&gt;Ici&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="i/icon.icn"&gt;Icon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="i/IDL"&gt;Idl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="i/idris.idr"&gt;Idris&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="i/il.il"&gt;Il&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="i/INCAL.incal"&gt;Incal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="i/InDec.indec"&gt;Indec&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="i/inform.inform"&gt;Inform&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="i/ink.ink"&gt;Ink&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="i/intercal.i"&gt;Intercal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="i/Io.Io"&gt;Io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="i/ioke.ik"&gt;Ioke&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="i/irc"&gt;Irc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="i/iscom.iscom"&gt;Iscom&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="i/ISLISP.lisp"&gt;Islisp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="j/j.ijs"&gt;J&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="j/jade.jade"&gt;Jade&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="j/jai.jai"&gt;Jai&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="j/Jasmin.j"&gt;Jasmin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="j/jason.mas2j"&gt;Jason&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="j/Java.java"&gt;Java&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="j/javascript.js"&gt;Javascript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="j/jess.cpl"&gt;Jess&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="j/json.json"&gt;Json&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="j/JSONiq"&gt;Jsoniq&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="j/jsx.js"&gt;Jsx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="j/julia.jl"&gt;Julia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="k/k.k"&gt;K&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="k/karel.kl"&gt;Karel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="k/KimL.kiml"&gt;Kiml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="k/kipple.kipple"&gt;Kipple&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="k/kitten.ktn"&gt;Kitten&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="k/kotlin.kt"&gt;Kotlin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="k/ksh.ksh"&gt;Ksh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="l/labyrinth.labyrinth"&gt;Labyrinth&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="l/LaTeX.tex"&gt;Latex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="l/LazyK.lazy"&gt;Lazyk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="l/leszek.leszek"&gt;Leszek&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="l/limbo.b"&gt;Limbo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="l/lisaac.li"&gt;Lisaac&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="l/lisp.lsp"&gt;Lisp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="l/livescript.ls"&gt;Livescript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="l/llvm.ll"&gt;Llvm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="l/LNUSP.lnusp"&gt;Lnusp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="l/logo.lg"&gt;Logo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="l/LOLA.lola"&gt;Lola&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="l/lolcode.lol"&gt;Lolcode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="l/lolpython.lol"&gt;Lolpython&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="l/lsl.lsl"&gt;Lsl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="l/lua.lua"&gt;Lua&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/m4.m4"&gt;M4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/macsyma.mac"&gt;Macsyma&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/magic"&gt;Magic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/malbolge.mbg"&gt;Malbolge&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/markdown.md"&gt;Markdown&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/mathematica-online.nb"&gt;Mathematica Online&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/matlab.m"&gt;Matlab&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/maxscript.ms"&gt;Maxscript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/mel.mel"&gt;Mel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/meq.meq"&gt;Meq&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/mercury.m"&gt;Mercury&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/minecraft"&gt;Minecraft&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/mips.s"&gt;Mips&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/mirc.mrc"&gt;Mirc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/Mmmm%28%29.mmmm"&gt;Mmmm()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/modula-2.mod"&gt;Modula 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/modula-3.m3"&gt;Modula 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/mongo.shell"&gt;Mongo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/moonscript.moon"&gt;Moonscript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/morsecode"&gt;Morsecode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/mouse.mse"&gt;Mouse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/move.mv"&gt;Move&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/mozart.oz"&gt;Mozart&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/muf.muf"&gt;Muf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/mumps.m"&gt;Mumps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/mushcode.mush"&gt;Mushcode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/myrddin.myr"&gt;Myrddin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="m/mysql.sql"&gt;Mysql&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="n/mathematica.nb"&gt;Mathematica&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="n/neko.neko"&gt;Neko&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="n/nemerle.n"&gt;Nemerle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="n/newtonscript.nwt"&gt;Newtonscript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="n/nice.nice"&gt;Nice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="n/nim.nim"&gt;Nim&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="n/nit.nit"&gt;Nit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="n/nodejs.js"&gt;Nodejs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="n/novice.novice"&gt;Novice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="n/nu.nu"&gt;Nu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="n/nxc.nxc"&gt;Nxc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="o/oberon-2.obn"&gt;Oberon 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="o/oberon.o"&gt;Oberon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="o/obix.osc"&gt;Obix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="o/obj.st"&gt;Obj&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="o/objc.m"&gt;Objc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="o/objective-j.j"&gt;Objective J&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="o/ObjectStar"&gt;Objectstar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="o/ocaml.ml"&gt;Ocaml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="o/octave.octave"&gt;Octave&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="o/omgrofl.omgrofl"&gt;Omgrofl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="o/ooc.ooc"&gt;Ooc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="o/ook.ok"&gt;Ook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="o/opa.opa"&gt;Opa&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="o/OpenLaszlo.lzx"&gt;Openlaszlo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="o/oraclesql.sql"&gt;Oraclesql&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="o/Orc.orc"&gt;Orc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="o/oz.oz"&gt;Oz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/hello_world.pl1"&gt;Hello World&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/parenthetic.p"&gt;Parenthetic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/parser.p"&gt;Parser&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/pascal.p"&gt;Pascal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/pawn.p"&gt;Pawn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/pb.pwr"&gt;Pb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/pbwin.bas"&gt;Pbwin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/pebble.c"&gt;Pebble&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/perl.cgi"&gt;Perl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/perl.pl"&gt;Perl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/perl6.p6"&gt;Perl6&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/perseus.p%2B%2B"&gt;Perseus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/pharo.st"&gt;Pharo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/php.php"&gt;Php&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/picat.pi"&gt;Picat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/piet.png"&gt;Piet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/pig.pig"&gt;Pig&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/pike.pike"&gt;Pike&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/pit.pit"&gt;Pit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/pizza.pizza"&gt;Pizza&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/please_porige_hot.pph"&gt;Please Porige Hot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/plsql.sql"&gt;Plsql&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/pluvo.pvo"&gt;Pluvo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/polynomial.pol"&gt;Polynomial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/pony.pony"&gt;Pony&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/postgresql.sql"&gt;Postgresql&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/postscript.ps"&gt;Postscript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/postscript_page.ps"&gt;Postscript Page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/posxml.posxml"&gt;Posxml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/potigol.poti"&gt;Potigol&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/powershell.ps1"&gt;Powershell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/processing.pde"&gt;Processing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/prolog.pro"&gt;Prolog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/pure_data.pd"&gt;Pure Data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/purebasic.pb"&gt;Purebasic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/purescript.purs"&gt;Purescript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/pyret.arr"&gt;Pyret&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/python.py"&gt;Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="p/python3.py"&gt;Python3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="q/q.q"&gt;Q&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="q/Qbasic.bas"&gt;Qbasic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="q/qore.q"&gt;Qore&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="q/qu.qu"&gt;Qu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="q/QuakeC.qc"&gt;Quakec&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="q/QuartzComposer.qtz"&gt;Quartzcomposer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="q/qugord.qugord"&gt;Qugord&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="q/qwerty.qwerty"&gt;Qwerty&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="r/R.R"&gt;R&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="r/racket.rkt"&gt;Racket&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="r/radixal.radixal"&gt;Radixal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="r/ratfor.ratfor"&gt;Ratfor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="r/react.js"&gt;React&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="r/readlink.readlink"&gt;Readlink&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="r/reason.re"&gt;Reason&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="r/rebol.r"&gt;Rebol&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="r/recurse.recurse"&gt;Recurse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="r/reStructuredText.rst"&gt;Restructuredtext&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="r/rexx.rexx"&gt;Rexx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="r/richtea.tea"&gt;Richtea&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="r/ring.ring"&gt;Ring&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="r/rockstar.rock"&gt;Rockstar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="r/roco.roco"&gt;Roco&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="r/roy.roy"&gt;Roy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="r/ruby.rb"&gt;Ruby&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="r/ruota.ruo"&gt;Ruota&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="r/rust.rs"&gt;Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/S-algol"&gt;S Algol&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/sacred.sacred"&gt;Sacred&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/sal.s"&gt;Sal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/sas.sas"&gt;Sas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/sass.sass"&gt;Sass&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/sather.sa"&gt;Sather&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/scala.scala"&gt;Scala&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/scheme.scm"&gt;Scheme&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/schwift.y"&gt;Schwift&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/scilab.scilab"&gt;Scilab&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/scratch.sb"&gt;Scratch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/Scss.scss"&gt;Scss&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/sed.sed"&gt;Sed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/self.self"&gt;Self&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/semicolon"&gt;Semicolon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/SendStuff.ss"&gt;Sendstuff&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/shakespeare.spl"&gt;Shakespeare&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/shell.sh"&gt;Shell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/shen.shen"&gt;Shen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/SIL.SIL"&gt;Sil&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/simpl%2B.usp"&gt;Simpl+&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/simula.sim"&gt;Simula&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/slashes.slashes"&gt;Slashes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/smali.smali"&gt;Smali&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/smalltalk-gnu.st"&gt;Smalltalk Gnu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/smalltalk.sm"&gt;Smalltalk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/smil.smil"&gt;Smil&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/sml.sml"&gt;Sml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/snowman.sm"&gt;Snowman&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/Solidity.sol"&gt;Solidity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/soupscript.script"&gt;Soupscript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/sparql.sparql"&gt;Sparql&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/spoon.spoon"&gt;Spoon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/spss.spss"&gt;Spss&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/sql.sql"&gt;Sql&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/squirrel.nut"&gt;Squirrel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/standard-ml.sml"&gt;Standard Ml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/stanza.stanza"&gt;Stanza&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/streem.strm"&gt;Streem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/stuck.stuck"&gt;Stuck&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/stuck_0byte.stuck"&gt;Stuck 0Byte&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/subleq.sq"&gt;Subleq&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/supercollider.sc"&gt;Supercollider&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/svg.svg"&gt;Svg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/swift.swift"&gt;Swift&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="s/systemtap.stp"&gt;Systemtap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="t/plain-text.txt"&gt;Plain Text&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="t/Tao-Presentations.ddd"&gt;Tao Presentations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="t/TapeBagel.tb"&gt;Tapebagel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="t/tcl.tcl"&gt;Tcl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="t/tcsh.tcsh"&gt;Tcsh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="t/telephone"&gt;Telephone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="t/TeX.tex"&gt;Tex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="t/thp.hrp"&gt;Thp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="t/thue.th"&gt;Thue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="t/tibasic.ti"&gt;Tibasic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="t/tk.tk"&gt;Tk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="t/tri.tri"&gt;Tri&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="t/trollscript.troll"&gt;Trollscript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="t/TrumpScript.py"&gt;Trumpscript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="t/tsql.sql"&gt;Tsql&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="t/TTCN3.ttcn"&gt;Ttcn3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="t/turing.oot"&gt;Turing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="t/Turing.t"&gt;Turing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="t/typescript.ts"&gt;Typescript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="u/Ubercode.cls"&gt;Ubercode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="u/ubiquity.ubiquity"&gt;Ubiquity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="u/umajin.u"&gt;Umajin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="u/unicomal.lst"&gt;Unicomal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="u/unlambda.unl"&gt;Unlambda&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="v/V"&gt;V&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="v/vala.vala"&gt;Vala&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="v/vbnet.vb"&gt;Vbnet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="v/velato.ly"&gt;Velato&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="v/verbose.verbose"&gt;Verbose&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="v/verbosefuck.vbfk"&gt;Verbosefuck&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="v/verilog.v"&gt;Verilog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="v/verve.vrv"&gt;Verve&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="v/vhdl.vhdl"&gt;Vhdl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="v/vi"&gt;Vi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="v/vimscript.vim"&gt;Vimscript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="v/virgil.v3"&gt;Virgil&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="v/visualbasic.vb"&gt;Visualbasic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="v/visualbasicscript.vbs"&gt;Visualbasicscript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="v/visualfoxpro.prg"&gt;Visualfoxpro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="v/vms.vms"&gt;Vms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="v/Vowels.vw"&gt;Vowels&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="v/vrml.wrl"&gt;Vrml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="v/vue.js"&gt;Vue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="w/wheat.wheat"&gt;Wheat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="w/whenever.whenever"&gt;Whenever&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="w/whirl.wr"&gt;Whirl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="w/whitespace.ws"&gt;Whitespace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="w/wml.wml"&gt;Wml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="w/wolframlanguage.wl"&gt;Wolframlanguage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="w/wren.wren"&gt;Wren&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="w/wsh.vbs"&gt;Wsh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="x/x-D.xd"&gt;X D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="x/xbase%2B%2B.prg"&gt;Xbase++&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="x/xbase.dbf"&gt;Xbase&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="x/xl.xl"&gt;Xl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="x/xlogo.lgo"&gt;Xlogo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="x/xml.xml"&gt;Xml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="x/xpl0.xpl"&gt;Xpl0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="x/xquery.xq"&gt;Xquery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="x/XRF.xrf"&gt;Xrf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="x/xslt.xslt"&gt;Xslt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="x/xul.xul"&gt;Xul&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="y/Y.y"&gt;Y&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="y/yaml.yaml"&gt;Yaml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="y/yolang.yo"&gt;Yolang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="y/yoptascript.js"&gt;Yoptascript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="z/zbd"&gt;Zbd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="z/zepto.zp"&gt;Zepto&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="z/zetaplex.zeta"&gt;Zetaplex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="z/zim.zim"&gt;Zim&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="z/zimbu.zu"&gt;Zimbu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="z/zombie.zombie"&gt;Zombie&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="z/zonnon.znn"&gt;Zonnon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="z/zsh.zsh"&gt;Zsh&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>leachim6</author><guid isPermaLink="false">https://github.com/leachim6/hello-world</guid><pubDate>Tue, 19 Nov 2019 00:06:00 GMT</pubDate></item><item><title>chrislgarry/Apollo-11 #7 in Assembly, Today</title><link>https://github.com/chrislgarry/Apollo-11</link><description>&lt;p&gt;&lt;i&gt;Original Apollo 11 Guidance Computer (AGC) source code for the command and lunar modules.&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-apollo-11" class="anchor" aria-hidden="true" href="#apollo-11"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Apollo-11&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://www.nasa.gov/mission_pages/apollo/missions/apollo11.html" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/b0879e5ad3dded69a38362aacf9ec5baac73b1eb/68747470733a2f2f72617763646e2e6769746861636b2e636f6d2f616c65656e34322f6261646765732f63393234366637342f7372632f6e6173612e737667" alt="NASA" data-canonical-src="https://rawcdn.githack.com/aleen42/badges/c9246f74/src/nasa.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;g-emoji class="g-emoji" alias="crossed_flags" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f38c.png"&gt;🎌&lt;/g-emoji&gt;
&lt;a href="README.id.md"&gt;Bahasa Indonesia&lt;/a&gt;,
&lt;a href="README.ca.md"&gt;Català&lt;/a&gt;,
&lt;a href="README.de.md"&gt;Deutsch&lt;/a&gt;,
&lt;strong&gt;English&lt;/strong&gt;,
&lt;a href="README.es.md"&gt;Español&lt;/a&gt;,
&lt;a href="README.fr.md"&gt;Français&lt;/a&gt;,
&lt;a href="README.it.md"&gt;Italiano&lt;/a&gt;,
&lt;a href="README.pt_br.md"&gt;Português&lt;/a&gt;,
&lt;a href="README.ru.md"&gt;Русский&lt;/a&gt;,
&lt;a href="README.tr.md"&gt;Türkçe&lt;/a&gt;,
&lt;a href="README.ro.md"&gt;Română&lt;/a&gt;,
&lt;a href="README.ar.md"&gt;العربية&lt;/a&gt;,
&lt;a href="README.hi_in.md"&gt;हिंदी&lt;/a&gt;,
&lt;a href="README.zh_tw.md"&gt;正體中文&lt;/a&gt;,
&lt;a href="README.zh_cn.md"&gt;简体中文&lt;/a&gt;,
&lt;a href="README.ko_kr.md"&gt;한국어&lt;/a&gt;,
&lt;a href="README.ja.md"&gt;日本&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Original Apollo 11 guidance computer (AGC) source code for Command
Module (Comanche055) and Lunar Module (Luminary099). Digitized by
the folks at &lt;a href="http://www.ibiblio.org/apollo/" rel="nofollow"&gt;Virtual AGC&lt;/a&gt; and &lt;a href="http://web.mit.edu/museum/" rel="nofollow"&gt;MIT Museum&lt;/a&gt;. The goal is to be
a repo for the original Apollo 11 source code. As such, PRs are
welcome for any issues identified between the transcriptions in this
repository and the original source scans for &lt;a href="http://www.ibiblio.org/apollo/ScansForConversion/Luminary099/" rel="nofollow"&gt;Luminary 099&lt;/a&gt; and
&lt;a href="http://www.ibiblio.org/apollo/ScansForConversion/Comanche055/" rel="nofollow"&gt;Comanche 055&lt;/a&gt;, as well as any files I may have missed.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-contributing" class="anchor" aria-hidden="true" href="#contributing"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contributing&lt;/h2&gt;
&lt;p&gt;Please read &lt;a href="https://github.com/chrislgarry/Apollo-11/blob/master/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt; before opening a pull request.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-compiling" class="anchor" aria-hidden="true" href="#compiling"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Compiling&lt;/h2&gt;
&lt;p&gt;If you are interested in compiling the original source code, check
out &lt;a href="https://github.com/rburkey2005/virtualagc"&gt;Virtual AGC&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-attribution" class="anchor" aria-hidden="true" href="#attribution"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Attribution&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt; &lt;/th&gt;
&lt;th align="left"&gt; &lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Copyright&lt;/td&gt;
&lt;td align="left"&gt;Public domain&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Comanche055&lt;/td&gt;
&lt;td align="left"&gt;Part of the source code for Colossus 2A, the Command Module's (CM) Apollo Guidance Computer (AGC) for Apollo 11&lt;br&gt;&lt;code&gt;Assemble revision 055 of AGC program Comanche by NASA&lt;/code&gt;&lt;br&gt;&lt;code&gt;2021113-051. 10:28 APR. 1, 1969&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Luminary099&lt;/td&gt;
&lt;td align="left"&gt;Part of the source code for Luminary 1A, the Lunar Module's (LM) Apollo Guidance Computer (AGC) for Apollo 11&lt;br&gt;&lt;code&gt;Assemble revision 001 of AGC program LYM99 by NASA&lt;/code&gt;&lt;br&gt;&lt;code&gt;2021112-061. 16:27 JUL. 14, 1969&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Assembler&lt;/td&gt;
&lt;td align="left"&gt;yaYUL&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Contact&lt;/td&gt;
&lt;td align="left"&gt;Ron Burkey &lt;a href="mailto:info@sandroid.org"&gt;info@sandroid.org&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Website&lt;/td&gt;
&lt;td align="left"&gt;&lt;a href="http://www.ibiblio.org/apollo" rel="nofollow"&gt;www.ibiblio.org/apollo&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Digitalization&lt;/td&gt;
&lt;td align="left"&gt;This source code has been transcribed or otherwise adapted from digitized images of a hardcopy from the MIT Museum. The digitization was performed by Paul Fjeld, and arranged for by Deborah Douglas of the Museum. Many thanks to both.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;&lt;a id="user-content-contract-and-approvals" class="anchor" aria-hidden="true" href="#contract-and-approvals"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contract and Approvals&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Derived from &lt;a href="https://github.com/chrislgarry/Apollo-11/blob/master/Comanche055/CONTRACT_AND_APPROVALS.agc"&gt;CONTRACT_AND_APPROVALS.agc&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This AGC program shall also be referred to as Colossus 2A.&lt;/p&gt;
&lt;p&gt;This program is intended for use in the CM as specified in report &lt;code&gt;R-577&lt;/code&gt;. This program was prepared under DSR project &lt;code&gt;55-23870&lt;/code&gt;, sponsored by the Manned Spacecraft Center of The National Aeronautics and Space Administration through contract &lt;code&gt;NAS 9-4065&lt;/code&gt; with the Instrumentation Laboratory, Massachusetts Institute of Technology, Cambridge, Mass.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt;Submitted by&lt;/th&gt;
&lt;th align="left"&gt;Role&lt;/th&gt;
&lt;th align="left"&gt;Date&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Margaret H. Hamilton&lt;/td&gt;
&lt;td align="left"&gt;Colossus Programming Leader&lt;br&gt;Apollo Guidance and Navigation&lt;/td&gt;
&lt;td align="left"&gt;28 Mar 69&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt;Approved by&lt;/th&gt;
&lt;th align="left"&gt;Role&lt;/th&gt;
&lt;th align="left"&gt;Date&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Daniel J. Lickly&lt;/td&gt;
&lt;td align="left"&gt;Director, Mission Program Development&lt;br&gt;Apollo Guidance and Navigation Program&lt;/td&gt;
&lt;td align="left"&gt;28 Mar 69&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Fred H. Martin&lt;/td&gt;
&lt;td align="left"&gt;Colossus Project Manager&lt;br&gt;Apollo Guidance and Navigation Program&lt;/td&gt;
&lt;td align="left"&gt;28 Mar 69&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Norman E. Sears&lt;/td&gt;
&lt;td align="left"&gt;Director, Mission Development&lt;br&gt;Apollo Guidance and Navigation Program&lt;/td&gt;
&lt;td align="left"&gt;28 Mar 69&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Richard H. Battin&lt;/td&gt;
&lt;td align="left"&gt;Director, Mission Development&lt;br&gt;Apollo Guidance and Navigation Program&lt;/td&gt;
&lt;td align="left"&gt;28 Mar 69&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;David G. Hoag&lt;/td&gt;
&lt;td align="left"&gt;Director&lt;br&gt;Apollo Guidance and Navigation Program&lt;/td&gt;
&lt;td align="left"&gt;28 Mar 69&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Ralph R. Ragan&lt;/td&gt;
&lt;td align="left"&gt;Deputy Director&lt;br&gt;Instrumentation Laboratory&lt;/td&gt;
&lt;td align="left"&gt;28 Mar 69&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>chrislgarry</author><guid isPermaLink="false">https://github.com/chrislgarry/Apollo-11</guid><pubDate>Tue, 19 Nov 2019 00:07:00 GMT</pubDate></item><item><title>SpinalHDL/VexRiscv #8 in Assembly, Today</title><link>https://github.com/SpinalHDL/VexRiscv</link><description>&lt;p&gt;&lt;i&gt;A FPGA friendly 32 bit RISC-V CPU implementation&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h2&gt;&lt;a id="user-content-index" class="anchor" aria-hidden="true" href="#index"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Index&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#index"&gt;Index&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#description"&gt;Description&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#area-usage-and-maximal-frequency"&gt;Area usage and maximal frequency&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dependencies"&gt;Dependencies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cpu-generation"&gt;CPU generation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#regression-tests"&gt;Regression tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#interactive-debug-of-the-simulated-cpu-via-gdb-openocd-and-verilator"&gt;Interactive debug of the simulated CPU via GDB OpenOCD and Verilator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#using-Eclipse-to-run-the-software-and-debug-it"&gt;Using Eclipse to run the software and debug it&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#by-using-gnu-mcu-eclipse"&gt;By using gnu-mcu-eclipse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#by-using-zylin-plugin-old"&gt;By using Zylin plugin (old)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#briey-soc"&gt;Briey SoC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#murax-soc"&gt;Murax SoC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#running-linux"&gt;Running Linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#build-the-risc-v-gcc"&gt;Build the RISC-V GCC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cpu-parametrization-and-instantiation-example"&gt;CPU parametrization and instantiation example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#add-a-custom-instruction-to-the-cpu-via-the-plugin-system"&gt;Add a custom instruction to the CPU via the plugin system&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#adding-a-new-csr-via-the-plugin-system"&gt;Adding a new CSR via the plugin system&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cpu-clock-and-resets"&gt;CPU clock and resets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#vexriscv-architecture"&gt;VexRiscv Architecture&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#plugins"&gt;Plugins&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-description" class="anchor" aria-hidden="true" href="#description"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Description&lt;/h2&gt;
&lt;p&gt;This repository hosts a RISC-V implementation written in SpinalHDL. Here are some specs :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RV32I[M][C][A] instruction set (Atomic only inside a single core)&lt;/li&gt;
&lt;li&gt;Pipelined from 2 to 5+ stages ([Fetch*X], Decode, Execute, [Memory], [WriteBack])&lt;/li&gt;
&lt;li&gt;1.44 DMIPS/Mhz --no-inline when nearly all features are enabled (1.57 DMIPS/Mhz when the divider lookup table is enabled)&lt;/li&gt;
&lt;li&gt;Optimized for FPGA, do not use any vendor specific IP block / primitive&lt;/li&gt;
&lt;li&gt;AXI4, Avalon, wishbone ready&lt;/li&gt;
&lt;li&gt;Optional MUL/DIV extensions&lt;/li&gt;
&lt;li&gt;Optional instruction and data caches&lt;/li&gt;
&lt;li&gt;Optional hardware refilled MMU&lt;/li&gt;
&lt;li&gt;Optional debug extension allowing Eclipse debugging via a GDB &amp;gt;&amp;gt; openOCD &amp;gt;&amp;gt; JTAG connection&lt;/li&gt;
&lt;li&gt;Optional interrupts and exception handling with Machine, [Supervisor] and [User] modes as defined in the &lt;a href="https://riscv.org/specifications/privileged-isa/" rel="nofollow"&gt;RISC-V Privileged ISA Specification v1.10&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Two implementations of shift instructions: Single cycle and shiftNumber cycles&lt;/li&gt;
&lt;li&gt;Each stage can have optional bypass or interlock hazard logic&lt;/li&gt;
&lt;li&gt;Linux compatible (SoC : &lt;a href="https://github.com/enjoy-digital/linux-on-litex-vexriscv"&gt;https://github.com/enjoy-digital/linux-on-litex-vexriscv&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Zephyr compatible&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Dolu1990/FreeRTOS-RISCV"&gt;FreeRTOS port&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The hardware description of this CPU is done by using a very software oriented approach
(without any overhead in the generated hardware). Here is a list of software concepts used:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;There are very few fixed things. Nearly everything is plugin based. The PC manager is a plugin, the register file is a plugin, the hazard controller is a plugin, ...&lt;/li&gt;
&lt;li&gt;There is an automatic a tool which allows plugins to insert data in the pipeline at a given stage, and allows other plugins to read it in another stage through automatic pipelining.&lt;/li&gt;
&lt;li&gt;There is a service system which provides a very dynamic framework. For instance, a plugin could provide an exception service which can then be used by other plugins to emit exceptions from the pipeline.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There is a gitter channel for all questions about VexRiscv :&lt;br&gt;
&lt;a href="https://gitter.im/SpinalHDL/VexRiscv?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/7c72efd28eb58cc3d3de109e622a599aae46ed38/68747470733a2f2f6261646765732e6769747465722e696d2f5370696e616c48444c2f56657852697363762e737667" alt="Gitter" data-canonical-src="https://badges.gitter.im/SpinalHDL/VexRiscv.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For commercial support, please contact &lt;a href="mailto:spinalhdl@gmail.com"&gt;spinalhdl@gmail.com&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-area-usage-and-maximal-frequency" class="anchor" aria-hidden="true" href="#area-usage-and-maximal-frequency"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Area usage and maximal frequency&lt;/h2&gt;
&lt;p&gt;The following numbers were obtained by synthesizing the CPU as toplevel without any specific synthesis options to save area or to get better maximal frequency (neutral).&lt;br&gt;
The clock constraint is set to an unattainable value, which tends to increase the design area.&lt;br&gt;
The dhrystone benchmark was compiled with the &lt;code&gt;-O3 -fno-inline&lt;/code&gt; option.&lt;br&gt;
All the cached configurations have some cache trashing during the dhrystone benchmark except the &lt;code&gt;VexRiscv full max perf&lt;/code&gt; one. This of course reduces the performance. It is possible to produce
dhrystone binaries which fit inside a 4KB I$ and 4KB D$ (I already had this case once) but currently it isn't the case.&lt;br&gt;
The CPU configurations used below can be found in the &lt;code&gt;src/scala/vexriscv/demo&lt;/code&gt; directory.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;VexRiscv smallest (RV32I, 0.52 DMIPS/Mhz, no datapath bypass, no interrupt) -&amp;gt;
    Artix 7     -&amp;gt; 233 Mhz 494 LUT 505 FF
    Cyclone V   -&amp;gt; 193 Mhz 347 ALMs
    Cyclone IV  -&amp;gt; 179 Mhz 730 LUT 494 FF
    iCE40       -&amp;gt; 92 Mhz 1130 LC

VexRiscv smallest (RV32I, 0.52 DMIPS/Mhz, no datapath bypass) -&amp;gt;
    Artix 7     -&amp;gt; 232 Mhz 538 LUT 562 FF
    Cyclone V   -&amp;gt; 189 Mhz 387 ALMs
    Cyclone IV  -&amp;gt; 175 Mhz 829 LUT 550 FF
    iCE40       -&amp;gt; 85 Mhz 1292 LC

VexRiscv small and productive (RV32I, 0.82 DMIPS/Mhz)  -&amp;gt;
    Artix 7     -&amp;gt; 226 Mhz 689 LUT 531 FF
    Cyclone V   -&amp;gt; 145 Mhz 499 ALMs
    Cyclone IV  -&amp;gt; 150 Mhz 1,111 LUT 525 FF
    iCE40       -&amp;gt; 63 Mhz 1596 LC

VexRiscv small and productive with I$ (RV32I, 0.70 DMIPS/Mhz, 4KB-I$)  -&amp;gt;
    Artix 7     -&amp;gt; 230 Mhz 734 LUT 564 FF
    Cyclone V   -&amp;gt; 145 Mhz 511 ALMs
    Cyclone IV  -&amp;gt; 144 Mhz 1,145 LUT 531 FF
    iCE40       -&amp;gt; 66 Mhz 1680 LC

VexRiscv full no cache (RV32IM, 1.21 DMIPS/Mhz 2.30 Coremark/Mhz, single cycle barrel shifter, debug module, catch exceptions, static branch) -&amp;gt;
    Artix 7     -&amp;gt; 219 Mhz 1537 LUT 977 FF
    Cyclone V   -&amp;gt; 139 Mhz 958 ALMs
    Cyclone IV  -&amp;gt; 135 Mhz 2,011 LUT 968 FF

VexRiscv full (RV32IM, 1.21 DMIPS/Mhz 2.30 Coremark/Mhz with cache trashing, 4KB-I$,4KB-D$, single cycle barrel shifter, debug module, catch exceptions, static branch) -&amp;gt;
    Artix 7     -&amp;gt; 193 Mhz 1706 LUT 1172 FF
    Cyclone V   -&amp;gt; 144 Mhz 1,128 ALMs
    Cyclone IV  -&amp;gt; 133 Mhz 2,298 LUT 1,096 FF

VexRiscv full max dmips/mhz -&amp;gt; (RV32IM, 1.44 DMIPS/Mhz 2.70 Coremark/Mhz,, 16KB-I$,16KB-D$, single cycle barrel shifter, debug module, catch exceptions, dynamic branch prediction in the fetch stage, branch and shift operations done in the Execute stage) -&amp;gt;
    Artix 7     -&amp;gt; 140 Mhz 1767 LUT 1128 FF
    Cyclone V   -&amp;gt; 90 Mhz 1,089 ALMs
    Cyclone IV  -&amp;gt; 79 Mhz 2,336 LUT 1,048 FF

VexRiscv full with MMU (RV32IM, 1.24 DMIPS/Mhz 2.35 Coremark/Mhz, with cache trashing, 4KB-I$, 4KB-D$, single cycle barrel shifter, debug module, catch exceptions, dynamic branch, MMU) -&amp;gt;
    Artix 7     -&amp;gt; 161 Mhz 1985 LUT 1585 FF
    Cyclone V   -&amp;gt; 124 Mhz 1,319 ALMs
    Cyclone IV  -&amp;gt; 122 Mhz 2,710 LUT 1,501 FF

VexRiscv linux balanced (RV32IMA, 1.21 DMIPS/Mhz 2.27 Coremark/Mhz, with cache trashing, 4KB-I$, 4KB-D$, single cycle barrel shifter, catch exceptions, static branch, MMU, Supervisor, Compatible with mainstream linux) -&amp;gt;
    Artix 7     -&amp;gt; 170 Mhz 2530 LUT 2013 FF
    Cyclone V   -&amp;gt; 125 Mhz 1,618 ALMs
    Cyclone IV  -&amp;gt; 116 Mhz 3,314 LUT 2,016 FF

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The following configuration results in 1.44 DMIPS/MHz:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;5 stage : F -&amp;gt; D -&amp;gt; E -&amp;gt; M  -&amp;gt; WB&lt;/li&gt;
&lt;li&gt;single cycle ADD/SUB/Bitwise/Shift ALU&lt;/li&gt;
&lt;li&gt;branch/jump done in the E stage&lt;/li&gt;
&lt;li&gt;memory load values are bypassed in the WB stage (late result)&lt;/li&gt;
&lt;li&gt;33 cycle division with bypassing in the M stage (late result)&lt;/li&gt;
&lt;li&gt;single cycle multiplication with bypassing in the WB stage (late result)&lt;/li&gt;
&lt;li&gt;dynamic branch prediction done in the F stage with a direct mapped target buffer cache (no penalties on correct predictions)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that recently, the capability to remove the Fetch/Memory/WriteBack stage was added to reduce the area of the CPU, which end up with a smaller CPU and a better DMIPS/Mhz for the small configurations.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-dependencies" class="anchor" aria-hidden="true" href="#dependencies"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Dependencies&lt;/h2&gt;
&lt;p&gt;On Ubuntu 14 :&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; JAVA JDK 8&lt;/span&gt;
sudo add-apt-repository -y ppa:openjdk-r/ppa
sudo apt-get update
sudo apt-get install openjdk-8-jdk -y
sudo update-alternatives --config java
sudo update-alternatives --config javac

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Install SBT - https://www.scala-sbt.org/&lt;/span&gt;
&lt;span class="pl-c1"&gt;echo&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;deb https://dl.bintray.com/sbt/debian /&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;|&lt;/span&gt; sudo tee -a /etc/apt/sources.list.d/sbt.list
sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 2EE0EA64E40A89B84B2DF73499E82A75642AC823
sudo apt-get update
sudo apt-get install sbt

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Verilator (for sim only, realy need 3.9+, in general apt-get will give you 3.8)&lt;/span&gt;
sudo apt-get install git make autoconf g++ flex bison
git clone http://git.veripool.org/git/verilator   &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Only first time&lt;/span&gt;
unsetenv VERILATOR_ROOT  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; For csh; ignore error if on bash&lt;/span&gt;
&lt;span class="pl-c1"&gt;unset&lt;/span&gt; VERILATOR_ROOT  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; For bash&lt;/span&gt;
&lt;span class="pl-c1"&gt;cd&lt;/span&gt; verilator
git pull        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Make sure we're up-to-date&lt;/span&gt;
git checkout verilator_3_918
autoconf        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Create ./configure script&lt;/span&gt;
./configure
make
sudo make install&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-cpu-generation" class="anchor" aria-hidden="true" href="#cpu-generation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;CPU generation&lt;/h2&gt;
&lt;p&gt;You can find two example CPU instances in:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;src/main/scala/vexriscv/demo/GenFull.scala&lt;/li&gt;
&lt;li&gt;src/main/scala/vexriscv/demo/GenSmallest.scala&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To generate the corresponding RTL as a VexRiscv.v file, run the following commands in the root directory of this repository:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;sbt &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;runMain vexriscv.demo.GenFull&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;sbt &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;runMain vexriscv.demo.GenSmallest&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;NOTES:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It could take time the first time you run it.&lt;/li&gt;
&lt;li&gt;The VexRiscv project may need an unreleased master-head of the SpinalHDL repo. If it fails to compile, just get the SpinalHDL repository and
do a "sbt clean compile publish-local" in it as described in the dependencies chapter.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-regression-tests" class="anchor" aria-hidden="true" href="#regression-tests"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Regression tests&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://travis-ci.org/SpinalHDL/VexRiscv" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/89b084e32a788686ffcb4ed55672129b01a5f94d/68747470733a2f2f7472617669732d63692e6f72672f5370696e616c48444c2f56657852697363762e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/SpinalHDL/VexRiscv.svg?branch=master" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;To run tests (need the verilator simulator), go in the src/test/cpp/regression folder and run :&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; To test the GenFull CPU&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; (Don't worry about the CSR test not passing, basicaly the GenFull isn't the truly full version of the CPU, some CSR features are disable in it)&lt;/span&gt;
make clean run

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; To test the GenSmallest CPU&lt;/span&gt;
make clean run IBUS=SIMPLE DBUS=SIMPLE CSR=no MMU=no DEBUG_PLUGIN=no MUL=no DIV=no&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The self-test includes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ISA tests from &lt;a href="https://github.com/riscv/riscv-tests/tree/master/isa"&gt;https://github.com/riscv/riscv-tests/tree/master/isa&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Dhrystone benchmark&lt;/li&gt;
&lt;li&gt;24 FreeRTOS tests&lt;/li&gt;
&lt;li&gt;Some handwritten tests to check the CSR, debug module and MMU plugins&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can enable FreeRTOS tests by adding &lt;code&gt;FREERTOS=yes&lt;/code&gt; to the command line, but it will take time to run. Also, it uses THREAD_COUNT host CPU threads to run multiple regression in parallel.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-interactive-debug-of-the-simulated-cpu-via-gdb-openocd-and-verilator" class="anchor" aria-hidden="true" href="#interactive-debug-of-the-simulated-cpu-via-gdb-openocd-and-verilator"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Interactive debug of the simulated CPU via GDB OpenOCD and Verilator&lt;/h2&gt;
&lt;p&gt;It's as described to run tests, but you just have to add &lt;code&gt;DEBUG_PLUGIN_EXTERNAL=yes&lt;/code&gt; in the make arguments.
Work for the GenFull, but not for the GenSmallest as this configuration has no debug module.&lt;/p&gt;
&lt;p&gt;Then you can use the &lt;a href="https://github.com/SpinalHDL/openocd_riscv"&gt;https://github.com/SpinalHDL/openocd_riscv&lt;/a&gt; tool to create a GDB server connected to the target (the simulated CPU)&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt;in the VexRiscv repository, to run the simulation on which one OpenOCD can connect itself =&amp;gt;&lt;/span&gt;
sbt &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;runMain vexriscv.demo.GenFull&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-c1"&gt;cd&lt;/span&gt; src/test/cpp/regression
make run DEBUG_PLUGIN_EXTERNAL=yes

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt;In the openocd git, after building it =&amp;gt;&lt;/span&gt;
src/openocd -c &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;set VEXRISCV_YAML PATH_TO_THE_GENERATED_CPU0_YAML_FILE&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; -f tcl/target/vexriscv_sim.cfg

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt;Run a GDB session with an elf RISCV executable (GenFull CPU)&lt;/span&gt;
YourRiscvToolsPath/bin/riscv32-unknown-elf-gdb VexRiscvRepo/src/test/resources/elf/uart.elf
target remote localhost:3333
monitor reset halt
load
&lt;span class="pl-k"&gt;continue&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Now it should print messages in the Verilator simulation of the CPU&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-using-eclipse-to-run-the-software-and-debug-it" class="anchor" aria-hidden="true" href="#using-eclipse-to-run-the-software-and-debug-it"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Using Eclipse to run the software and debug it&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-by-using-gnu-mcu-eclipse" class="anchor" aria-hidden="true" href="#by-using-gnu-mcu-eclipse"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;By using gnu-mcu-eclipse&lt;/h3&gt;
&lt;p&gt;You can download releases of the IDE here : &lt;a href="https://github.com/gnu-mcu-eclipse/org.eclipse.epp.packages/releases"&gt;https://github.com/gnu-mcu-eclipse/org.eclipse.epp.packages/releases&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In the IDE, you can import a makefile project by :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;file -&amp;gt; import -&amp;gt; C/C++ -&amp;gt; existing Code as Makefile Project&lt;/li&gt;
&lt;li&gt;Select the folder which contain the makefile, select "Cross GCC" (not "RISC-V Cross GCC")&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To create a new debug configuration :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;run -&amp;gt; Debug Configurations -&amp;gt; GDB OpenOCD Debugging double click&lt;/li&gt;
&lt;li&gt;Look at &lt;a href="https://drive.google.com/open?id=1c46tyEV0xLwOsk76b0y2qqs8CYy7Zq3f" rel="nofollow"&gt;https://drive.google.com/open?id=1c46tyEV0xLwOsk76b0y2qqs8CYy7Zq3f&lt;/a&gt; for a configuration example&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-by-using-zylin-plugin-old" class="anchor" aria-hidden="true" href="#by-using-zylin-plugin-old"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;By using Zylin plugin (old)&lt;/h3&gt;
&lt;p&gt;You can use the Eclipse + Zylin embedded CDT plugin to do it (&lt;a href="http://opensource.zylin.com/embeddedcdt.html" rel="nofollow"&gt;http://opensource.zylin.com/embeddedcdt.html&lt;/a&gt;). Tested with Helios Service Release 2 (&lt;a href="http://www.Eclipse.org/downloads/download.php?file=/technology/epp/downloads/release/helios/SR2/Eclipse-cpp-helios-SR2-linux-gtk-x86_64.tar.gz" rel="nofollow"&gt;http://www.Eclipse.org/downloads/download.php?file=/technology/epp/downloads/release/helios/SR2/Eclipse-cpp-helios-SR2-linux-gtk-x86_64.tar.gz&lt;/a&gt;) and the corresponding zylin plugin.&lt;/p&gt;
&lt;p&gt;To following commands will download Eclipse and install the plugin.&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;wget http://www.eclipse.org/downloads/download.php&lt;span class="pl-k"&gt;?&lt;/span&gt;file=/technology/epp/downloads/release/helios/SR2/eclipse-cpp-helios-SR2-linux-gtk-x86_64.tar.gz
tar -xvzf download.php&lt;span class="pl-k"&gt;?&lt;/span&gt;file=%2Ftechnology%2Fepp%2Fdownloads%2Frelease%2Fhelios%2FSR2%2Feclipse-cpp-helios-SR2-linux-gtk-x86_64.tar.gz
&lt;span class="pl-c1"&gt;cd&lt;/span&gt; eclipse
./eclipse -application org.eclipse.equinox.p2.director -repository http://opensource.zylin.com/zylincdt -installIU com.zylin.cdt.feature.feature.group/&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;See &lt;a href="https://drive.google.com/drive/folders/1NseNHH05B6lmIXqQFVwK8xRjWE4ydeG-?usp=sharing" rel="nofollow"&gt;https://drive.google.com/drive/folders/1NseNHH05B6lmIXqQFVwK8xRjWE4ydeG-?usp=sharing&lt;/a&gt; to import a makefile project and create a debug configuration.&lt;/p&gt;
&lt;p&gt;Note that sometime this Eclipse need to be restarted in order to be able to place new breakpoints.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-briey-soc" class="anchor" aria-hidden="true" href="#briey-soc"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Briey SoC&lt;/h2&gt;
&lt;p&gt;As a demonstrator, a SoC named Briey is implemented in &lt;code&gt;src/main/scala/vexriscv/demo/Briey.scala&lt;/code&gt;. This SoC is very similar to
the &lt;a href="https://spinalhdl.github.io/SpinalDoc/spinal/lib/pinsec/hardware/" rel="nofollow"&gt;Pinsec SOC&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="assets/brieySoc.png?raw=true"&gt;&lt;img src="assets/brieySoc.png?raw=true" alt="Alt text" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;To generate the Briey SoC Hardware:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;sbt &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;runMain vexriscv.demo.Briey&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To run the verilator simulation of the Briey SoC which can then be connected to OpenOCD/GDB, first get those dependencies:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;sudo apt-get install build-essential xorg-dev libudev-dev libts-dev libgl1-mesa-dev libglu1-mesa-dev libasound2-dev libpulse-dev libopenal-dev libogg-dev libvorbis-dev libaudiofile-dev libpng12-dev libfreetype6-dev libusb-dev libdbus-1-dev zlib1g-dev libdirectfb-dev libsdl2-dev&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then go in &lt;code&gt;src/test/cpp/briey&lt;/code&gt; and run the simulation with (UART TX is printed in the terminal, VGA is displayed in a GUI):&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;make clean run&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To connect OpenOCD (&lt;a href="https://github.com/SpinalHDL/openocd_riscv"&gt;https://github.com/SpinalHDL/openocd_riscv&lt;/a&gt;) to the simulation :&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;src/openocd -f tcl/interface/jtag_tcp.cfg -c &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;set BRIEY_CPU0_YAML /home/spinalvm/Spinal/VexRiscv/cpu0.yaml&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; -f tcl/target/briey.cfg&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can find multiple software examples and demos here: &lt;a href="https://github.com/SpinalHDL/VexRiscvSocSoftware/tree/master/projects/briey"&gt;https://github.com/SpinalHDL/VexRiscvSocSoftware/tree/master/projects/briey&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can find some FPGA projects which instantiate the Briey SoC here (DE1-SoC, DE0-Nano): &lt;a href="https://drive.google.com/drive/folders/0B-CqLXDTaMbKZGdJZlZ5THAxRTQ?usp=sharing" rel="nofollow"&gt;https://drive.google.com/drive/folders/0B-CqLXDTaMbKZGdJZlZ5THAxRTQ?usp=sharing&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here are some measurements of Briey SoC timings and area :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    Artix 7     -&amp;gt; 186 Mhz 3138 LUT 3328 FF
    Cyclone V   -&amp;gt; 139 Mhz 2,175 ALMs
    Cyclone IV  -&amp;gt; 129 Mhz 4,337 LUT 3,170 FF
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;a id="user-content-murax-soc" class="anchor" aria-hidden="true" href="#murax-soc"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Murax SoC&lt;/h2&gt;
&lt;p&gt;Murax is a very light SoC (it fits in an ICE40 FPGA) which can work without any external components:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;VexRiscv RV32I[M]&lt;/li&gt;
&lt;li&gt;JTAG debugger (Eclipse/GDB/openocd ready)&lt;/li&gt;
&lt;li&gt;8 kB of on-chip ram&lt;/li&gt;
&lt;li&gt;Interrupt support&lt;/li&gt;
&lt;li&gt;APB bus for peripherals&lt;/li&gt;
&lt;li&gt;32 GPIO pin&lt;/li&gt;
&lt;li&gt;one 16 bits prescaler, two 16 bits timers&lt;/li&gt;
&lt;li&gt;one UART with tx/rx fifo&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Depending the CPU configuration, on the ICE40-hx8k FPGA with icestorm for synthesis, the full SoC has the following area/performance :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RV32I interlocked stages =&amp;gt; 51 Mhz, 2387 LC 0.45 DMIPS/Mhz&lt;/li&gt;
&lt;li&gt;RV32I bypassed stages    =&amp;gt; 45 Mhz, 2718 LC 0.65 DMIPS/Mhz&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Its implementation can be found here: &lt;code&gt;src/main/scala/vexriscv/demo/Murax.scala&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To generate the Murax SoC Hardware :&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; To generate the SoC without any content in the ram&lt;/span&gt;
sbt &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;runMain vexriscv.demo.Murax&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; To generate the SoC with a demo program already in ram&lt;/span&gt;
sbt &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;runMain vexriscv.demo.MuraxWithRamInit&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The demo program included by default with &lt;code&gt;MuraxWithRamInit&lt;/code&gt; will blink the
LEDs and echo characters received on the UART back to the user. To see this
when running the Verilator sim, type some text and press enter.&lt;/p&gt;
&lt;p&gt;Then go in src/test/cpp/murax and run the simulation with :&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;make clean run&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To connect OpenOCD (&lt;a href="https://github.com/SpinalHDL/openocd_riscv"&gt;https://github.com/SpinalHDL/openocd_riscv&lt;/a&gt;) to the simulation :&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;src/openocd -f tcl/interface/jtag_tcp.cfg -c &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;set MURAX_CPU0_YAML /home/spinalvm/Spinal/VexRiscv/cpu0.yaml&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; -f tcl/target/murax.cfg&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can find multiple software examples and demos here: &lt;a href="https://github.com/SpinalHDL/VexRiscvSocSoftware/tree/master/projects/murax"&gt;https://github.com/SpinalHDL/VexRiscvSocSoftware/tree/master/projects/murax&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here are some timing and area measurements of the Murax SoC:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Murax interlocked stages (0.45 DMIPS/Mhz, 8 bits GPIO) -&amp;gt;
  Artix 7    -&amp;gt; 215 Mhz 1044 LUT 1202 FF
  Cyclone V  -&amp;gt; 173 Mhz 737 ALMs
  Cyclone IV -&amp;gt; 144 Mhz 1,484 LUT 1,206 FF
  iCE40      -&amp;gt;  64 Mhz 2422 LC (nextpnr)

MuraxFast bypassed stages (0.65 DMIPS/Mhz, 8 bits GPIO) -&amp;gt;
  Artix 7    -&amp;gt; 229 Mhz 1269 LUT 1302 FF
  Cyclone V  -&amp;gt; 159 Mhz 864 ALMs
  Cyclone IV -&amp;gt; 137 Mhz 1,688 LUT 1,241 FF
  iCE40      -&amp;gt;  66 Mhz 2799 LC (nextpnr)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Some scripts to generate the SoC and call the icestorm toolchain can be found here: &lt;code&gt;scripts/Murax/&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;A toplevel simulation testbench with the same features + a GUI are implemented with SpinalSim. You can find it in &lt;code&gt;src/test/scala/vexriscv/MuraxSim.scala&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To run it :&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; This will generate the Murax RTL + run its testbench. You need Verilator 3.9xx installated.&lt;/span&gt;
sbt &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;test:runMain vexriscv.MuraxSim&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-running-linux" class="anchor" aria-hidden="true" href="#running-linux"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Running Linux&lt;/h2&gt;
&lt;p&gt;A default configuration is located in src/main/scala/vexriscv/demo/Linux.scala&lt;/p&gt;
&lt;p&gt;This file also contains&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The commands to compile the buildroot image&lt;/li&gt;
&lt;li&gt;How to run the Verilator simulation in interative mode&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There is currently no SoC to run it on hardware, it is WIP. But the CPU simulation can already boot linux and run user space application (even python).&lt;/p&gt;
&lt;p&gt;Note that VexRiscv can run Linux on both cache full and cache less design.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-build-the-risc-v-gcc" class="anchor" aria-hidden="true" href="#build-the-risc-v-gcc"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Build the RISC-V GCC&lt;/h2&gt;
&lt;p&gt;A prebuild GCC toolsuite can be found here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.sifive.com/products/tools/" rel="nofollow"&gt;https://www.sifive.com/products/tools/&lt;/a&gt;  =&amp;gt; SiFive GNU Embedded Toolchain&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The VexRiscvSocSoftware makefiles are expecting to find this prebuild version in /opt/riscv/&lt;strong&gt;contentOfThisPreBuild&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;wget https://static.dev.sifive.com/dev-tools/riscv64-unknown-elf-gcc-20171231-x86_64-linux-centos6.tar.gz
tar -xzvf riscv64-unknown-elf-gcc-20171231-x86_64-linux-centos6.tar.gz
sudo mv riscv64-unknown-elf-gcc-20171231-x86_64-linux-centos6 /opt/riscv64-unknown-elf-gcc-20171231-x86_64-linux-centos6
sudo mv /opt/riscv64-unknown-elf-gcc-20171231-x86_64-linux-centos6 /opt/riscv
&lt;span class="pl-c1"&gt;echo&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;export PATH=/opt/riscv/bin:$PATH&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-k"&gt;~&lt;/span&gt;/.bashrc&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you want to compile the rv32i and rv32im GCC toolchain from source code and install them in &lt;code&gt;/opt/&lt;/code&gt;, do the following (will take one hour):&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Be carefull, sometime the git clone has issue to successfully clone riscv-gnu-toolchain.&lt;/span&gt;
sudo apt-get install autoconf automake autotools-dev curl libmpc-dev libmpfr-dev libgmp-dev gawk build-essential bison flex texinfo gperf libtool patchutils bc zlib1g-dev -y

git clone --recursive https://github.com/riscv/riscv-gnu-toolchain riscv-gnu-toolchain
&lt;span class="pl-c1"&gt;cd&lt;/span&gt; riscv-gnu-toolchain

&lt;span class="pl-c1"&gt;echo&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Starting RISC-V Toolchain build process&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;

ARCH=rv32im
rmdir -rf &lt;span class="pl-smi"&gt;$ARCH&lt;/span&gt;
mkdir &lt;span class="pl-smi"&gt;$ARCH&lt;/span&gt;&lt;span class="pl-k"&gt;;&lt;/span&gt; &lt;span class="pl-c1"&gt;cd&lt;/span&gt; &lt;span class="pl-smi"&gt;$ARCH&lt;/span&gt;
../configure  --prefix=/opt/&lt;span class="pl-smi"&gt;$ARCH&lt;/span&gt; --with-arch=&lt;span class="pl-smi"&gt;$ARCH&lt;/span&gt; --with-abi=ilp32
sudo make -j4
&lt;span class="pl-c1"&gt;cd&lt;/span&gt; ..


ARCH=rv32i
rmdir -rf &lt;span class="pl-smi"&gt;$ARCH&lt;/span&gt;
mkdir &lt;span class="pl-smi"&gt;$ARCH&lt;/span&gt;&lt;span class="pl-k"&gt;;&lt;/span&gt; &lt;span class="pl-c1"&gt;cd&lt;/span&gt; &lt;span class="pl-smi"&gt;$ARCH&lt;/span&gt;
../configure  --prefix=/opt/&lt;span class="pl-smi"&gt;$ARCH&lt;/span&gt; --with-arch=&lt;span class="pl-smi"&gt;$ARCH&lt;/span&gt; --with-abi=ilp32
sudo make -j4
&lt;span class="pl-c1"&gt;cd&lt;/span&gt; ..

&lt;span class="pl-c1"&gt;echo&lt;/span&gt; -e &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-cce"&gt;\\&lt;/span&gt;nRISC-V Toolchain installation completed!&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-cpu-parametrization-and-instantiation-example" class="anchor" aria-hidden="true" href="#cpu-parametrization-and-instantiation-example"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;CPU parametrization and instantiation example&lt;/h2&gt;
&lt;p&gt;You can find many examples of different configurations in the &lt;a href="https://github.com/SpinalHDL/VexRiscv/tree/master/src/main/scala/vexriscv/demo"&gt;https://github.com/SpinalHDL/VexRiscv/tree/master/src/main/scala/vexriscv/demo&lt;/a&gt; folder.&lt;/p&gt;
&lt;p&gt;Here is one such example:&lt;/p&gt;
&lt;div class="highlight highlight-source-scala"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;vexriscv&lt;/span&gt;.&lt;span class="pl-en"&gt;_&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;vexriscv&lt;/span&gt;.&lt;span class="pl-en"&gt;plugin&lt;/span&gt;.&lt;span class="pl-en"&gt;_&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;Instanciate one VexRiscv&lt;/span&gt;
&lt;span class="pl-k"&gt;val&lt;/span&gt; &lt;span class="pl-smi"&gt;cpu&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;new&lt;/span&gt; &lt;span class="pl-en"&gt;VexRiscv&lt;/span&gt;(
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;Provide a configuration instance&lt;/span&gt;
  config &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;VexRiscvConfig&lt;/span&gt;(
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;Provide a list of plugins which will futher add their logic into the CPU&lt;/span&gt;
    plugins &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;List&lt;/span&gt;(
      &lt;span class="pl-k"&gt;new&lt;/span&gt; &lt;span class="pl-en"&gt;IBusSimplePlugin&lt;/span&gt;(
        resetVector &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;0x00000000l&lt;/span&gt;,
        cmdForkOnSecondStage &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;,
        cmdForkPersistence  &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;
      ),
      &lt;span class="pl-k"&gt;new&lt;/span&gt; &lt;span class="pl-en"&gt;DBusSimplePlugin&lt;/span&gt;(
        catchAddressMisaligned &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;false&lt;/span&gt;,
        catchAccessFault &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;false&lt;/span&gt;
      ),
      &lt;span class="pl-k"&gt;new&lt;/span&gt; &lt;span class="pl-en"&gt;DecoderSimplePlugin&lt;/span&gt;(
        catchIllegalInstruction &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;false&lt;/span&gt;
      ),
      &lt;span class="pl-k"&gt;new&lt;/span&gt; &lt;span class="pl-en"&gt;RegFilePlugin&lt;/span&gt;(
        regFileReadyKind &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;Plugin&lt;/span&gt;.&lt;span class="pl-en"&gt;SYNC&lt;/span&gt;,
        zeroBoot &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;
      ),
      &lt;span class="pl-k"&gt;new&lt;/span&gt; &lt;span class="pl-en"&gt;IntAluPlugin&lt;/span&gt;,
      &lt;span class="pl-k"&gt;new&lt;/span&gt; &lt;span class="pl-en"&gt;SrcPlugin&lt;/span&gt;(
        separatedAddSub &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;false&lt;/span&gt;,
        executeInsertion &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;false&lt;/span&gt;
      ),
      &lt;span class="pl-k"&gt;new&lt;/span&gt; &lt;span class="pl-en"&gt;LightShifterPlugin&lt;/span&gt;,
      &lt;span class="pl-k"&gt;new&lt;/span&gt; &lt;span class="pl-en"&gt;HazardSimplePlugin&lt;/span&gt;(
        bypassExecute           &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;false&lt;/span&gt;,
        bypassMemory            &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;false&lt;/span&gt;,
        bypassWriteBack         &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;false&lt;/span&gt;,
        bypassWriteBackBuffer   &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;false&lt;/span&gt;
      ),
      &lt;span class="pl-k"&gt;new&lt;/span&gt; &lt;span class="pl-en"&gt;BranchPlugin&lt;/span&gt;(
        earlyBranch &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;false&lt;/span&gt;,
        catchAddressMisaligned &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;false&lt;/span&gt;
      ),
      &lt;span class="pl-k"&gt;new&lt;/span&gt; &lt;span class="pl-en"&gt;YamlPlugin&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;cpu0.yaml&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    )
  )
)&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-add-a-custom-instruction-to-the-cpu-via-the-plugin-system" class="anchor" aria-hidden="true" href="#add-a-custom-instruction-to-the-cpu-via-the-plugin-system"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Add a custom instruction to the CPU via the plugin system&lt;/h2&gt;
&lt;p&gt;Here is an example of a simple plugin which adds a simple SIMD_ADD instruction:&lt;/p&gt;
&lt;div class="highlight highlight-source-scala"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;spinal&lt;/span&gt;.&lt;span class="pl-en"&gt;core&lt;/span&gt;.&lt;span class="pl-en"&gt;_&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;vexriscv&lt;/span&gt;.&lt;span class="pl-en"&gt;plugin&lt;/span&gt;.&lt;span class="pl-en"&gt;Plugin&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;vexriscv&lt;/span&gt;.{&lt;span class="pl-en"&gt;Stageable&lt;/span&gt;, &lt;span class="pl-en"&gt;DecoderService&lt;/span&gt;, &lt;span class="pl-en"&gt;VexRiscv&lt;/span&gt;}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;This plugin example will add a new instruction named SIMD_ADD which do the following :&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;RD : Regfile Destination, RS : Regfile Source&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;RD( 7 downto  0) = RS1( 7 downto  0) + RS2( 7 downto  0)&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;RD(16 downto  8) = RS1(16 downto  8) + RS2(16 downto  8)&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;RD(23 downto 16) = RS1(23 downto 16) + RS2(23 downto 16)&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;RD(31 downto 24) = RS1(31 downto 24) + RS2(31 downto 24)&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;Instruction encoding :&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;0000011----------000-----0110011&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;       |RS2||RS1|   |RD |&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;Note :  RS1, RS2, RD positions follow the RISC-V spec and are common for all instruction of the ISA&lt;/span&gt;

&lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;SimdAddPlugin&lt;/span&gt; &lt;span class="pl-k"&gt;extends&lt;/span&gt; &lt;span class="pl-e"&gt;Plugin&lt;/span&gt;[&lt;span class="pl-en"&gt;VexRiscv&lt;/span&gt;]{
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;Define the concept of IS_SIMD_ADD signals, which specify if the current instruction is destined for ths plugin&lt;/span&gt;
  &lt;span class="pl-k"&gt;object&lt;/span&gt; &lt;span class="pl-en"&gt;IS_SIMD_ADD&lt;/span&gt; &lt;span class="pl-k"&gt;extends&lt;/span&gt; &lt;span class="pl-e"&gt;Stageable&lt;/span&gt;(&lt;span class="pl-en"&gt;Bool&lt;/span&gt;)

  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;Callback to setup the plugin and ask for different services&lt;/span&gt;
  &lt;span class="pl-k"&gt;override&lt;/span&gt; &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;setup&lt;/span&gt;(&lt;span class="pl-v"&gt;pipeline&lt;/span&gt;: &lt;span class="pl-en"&gt;VexRiscv&lt;/span&gt;)&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-k"&gt;Unit&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; {
    &lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;pipeline&lt;/span&gt;.&lt;span class="pl-en"&gt;config&lt;/span&gt;.&lt;span class="pl-en"&gt;_&lt;/span&gt;

    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;Retrieve the DecoderService instance&lt;/span&gt;
    &lt;span class="pl-k"&gt;val&lt;/span&gt; &lt;span class="pl-smi"&gt;decoderService&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; pipeline.service(&lt;span class="pl-c1"&gt;classOf&lt;/span&gt;[&lt;span class="pl-en"&gt;DecoderService&lt;/span&gt;])

    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;Specify the IS_SIMD_ADD default value when instruction are decoded&lt;/span&gt;
    decoderService.addDefault(&lt;span class="pl-en"&gt;IS_SIMD_ADD&lt;/span&gt;, &lt;span class="pl-en"&gt;False&lt;/span&gt;)

    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;Specify the instruction decoding which should be applied when the instruction match the 'key' parttern&lt;/span&gt;
    decoderService.add(
      &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;Bit pattern of the new SIMD_ADD instruction&lt;/span&gt;
      key &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;M&lt;/span&gt;&lt;span class="pl-s"&gt;"&lt;/span&gt;&lt;span class="pl-s"&gt;0000011----------000-----0110011&lt;/span&gt;&lt;span class="pl-s"&gt;"&lt;/span&gt;,

      &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;Decoding specification when the 'key' pattern is recognized in the instruction&lt;/span&gt;
      &lt;span class="pl-en"&gt;List&lt;/span&gt;(
        &lt;span class="pl-en"&gt;IS_SIMD_ADD&lt;/span&gt;              &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;True&lt;/span&gt;,
        &lt;span class="pl-en"&gt;REGFILE_WRITE_VALID&lt;/span&gt;      &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;True&lt;/span&gt;, &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;Enable the register file write&lt;/span&gt;
        &lt;span class="pl-en"&gt;BYPASSABLE_EXECUTE_STAGE&lt;/span&gt; &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;True&lt;/span&gt;, &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;Notify the hazard management unit that the instruction result is already accessible in the EXECUTE stage (Bypass ready)&lt;/span&gt;
        &lt;span class="pl-en"&gt;BYPASSABLE_MEMORY_STAGE&lt;/span&gt;  &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;True&lt;/span&gt;, &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;Same as above but for the memory stage&lt;/span&gt;
        &lt;span class="pl-en"&gt;RS1_USE&lt;/span&gt;                  &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;True&lt;/span&gt;, &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;Notify the hazard management unit that this instruction use the RS1 value&lt;/span&gt;
        &lt;span class="pl-en"&gt;RS2_USE&lt;/span&gt;                  &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;True&lt;/span&gt;  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;Same than above but for RS2.&lt;/span&gt;
      )
    )
  }

  &lt;span class="pl-k"&gt;override&lt;/span&gt; &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;build&lt;/span&gt;(&lt;span class="pl-v"&gt;pipeline&lt;/span&gt;: &lt;span class="pl-en"&gt;VexRiscv&lt;/span&gt;)&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-k"&gt;Unit&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; {
    &lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;pipeline&lt;/span&gt;.&lt;span class="pl-en"&gt;_&lt;/span&gt;
    &lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;pipeline&lt;/span&gt;.&lt;span class="pl-en"&gt;config&lt;/span&gt;.&lt;span class="pl-en"&gt;_&lt;/span&gt;

    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;Add a new scope on the execute stage (used to give a name to signals)&lt;/span&gt;
    execute plug &lt;span class="pl-k"&gt;new&lt;/span&gt; &lt;span class="pl-en"&gt;Area&lt;/span&gt; {
      &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;Define some signals used internally to the plugin&lt;/span&gt;
      &lt;span class="pl-k"&gt;val&lt;/span&gt; &lt;span class="pl-smi"&gt;rs1&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; execute.input(&lt;span class="pl-en"&gt;RS1&lt;/span&gt;).asUInt
      &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;32 bits UInt value of the regfile[RS1]&lt;/span&gt;
      &lt;span class="pl-k"&gt;val&lt;/span&gt; &lt;span class="pl-smi"&gt;rs2&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; execute.input(&lt;span class="pl-en"&gt;RS2&lt;/span&gt;).asUInt
      &lt;span class="pl-k"&gt;val&lt;/span&gt; &lt;span class="pl-smi"&gt;rd&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;UInt&lt;/span&gt;(&lt;span class="pl-c1"&gt;32&lt;/span&gt; bits)

      &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;Do some computation&lt;/span&gt;
      rd(&lt;span class="pl-c1"&gt;7&lt;/span&gt; downto &lt;span class="pl-c1"&gt;0&lt;/span&gt;) &lt;span class="pl-k"&gt;:&lt;/span&gt;&lt;span class="pl-k"&gt;=&lt;/span&gt; rs1(&lt;span class="pl-c1"&gt;7&lt;/span&gt; downto &lt;span class="pl-c1"&gt;0&lt;/span&gt;) &lt;span class="pl-k"&gt;+&lt;/span&gt; rs2(&lt;span class="pl-c1"&gt;7&lt;/span&gt; downto &lt;span class="pl-c1"&gt;0&lt;/span&gt;)
      rd(&lt;span class="pl-c1"&gt;16&lt;/span&gt; downto &lt;span class="pl-c1"&gt;8&lt;/span&gt;) &lt;span class="pl-k"&gt;:&lt;/span&gt;&lt;span class="pl-k"&gt;=&lt;/span&gt; rs1(&lt;span class="pl-c1"&gt;16&lt;/span&gt; downto &lt;span class="pl-c1"&gt;8&lt;/span&gt;) &lt;span class="pl-k"&gt;+&lt;/span&gt; rs2(&lt;span class="pl-c1"&gt;16&lt;/span&gt; downto &lt;span class="pl-c1"&gt;8&lt;/span&gt;)
      rd(&lt;span class="pl-c1"&gt;23&lt;/span&gt; downto &lt;span class="pl-c1"&gt;16&lt;/span&gt;) &lt;span class="pl-k"&gt;:&lt;/span&gt;&lt;span class="pl-k"&gt;=&lt;/span&gt; rs1(&lt;span class="pl-c1"&gt;23&lt;/span&gt; downto &lt;span class="pl-c1"&gt;16&lt;/span&gt;) &lt;span class="pl-k"&gt;+&lt;/span&gt; rs2(&lt;span class="pl-c1"&gt;23&lt;/span&gt; downto &lt;span class="pl-c1"&gt;16&lt;/span&gt;)
      rd(&lt;span class="pl-c1"&gt;31&lt;/span&gt; downto &lt;span class="pl-c1"&gt;24&lt;/span&gt;) &lt;span class="pl-k"&gt;:&lt;/span&gt;&lt;span class="pl-k"&gt;=&lt;/span&gt; rs1(&lt;span class="pl-c1"&gt;31&lt;/span&gt; downto &lt;span class="pl-c1"&gt;24&lt;/span&gt;) &lt;span class="pl-k"&gt;+&lt;/span&gt; rs2(&lt;span class="pl-c1"&gt;31&lt;/span&gt; downto &lt;span class="pl-c1"&gt;24&lt;/span&gt;)

      &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;When the instruction is a SIMD_ADD one, then write the result into the register file data path.&lt;/span&gt;
      when(execute.input(&lt;span class="pl-en"&gt;IS_SIMD_ADD&lt;/span&gt;)) {
        execute.output(&lt;span class="pl-en"&gt;REGFILE_WRITE_DATA&lt;/span&gt;) &lt;span class="pl-k"&gt;:&lt;/span&gt;&lt;span class="pl-k"&gt;=&lt;/span&gt; rd.asBits
      }
    }
  }
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you want to add this plugin to a given CPU, you just need to add it to its parameterized plugin list.&lt;/p&gt;
&lt;p&gt;This example is a very simple one, but each plugin can really have access to the whole CPU:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Halt a given stage of the CPU&lt;/li&gt;
&lt;li&gt;Unschedule instructions&lt;/li&gt;
&lt;li&gt;Emit an exception&lt;/li&gt;
&lt;li&gt;Introduce new instruction decoding specification&lt;/li&gt;
&lt;li&gt;Ask to jump the PC somewhere&lt;/li&gt;
&lt;li&gt;Read signals published by other plugins&lt;/li&gt;
&lt;li&gt;override published signals values&lt;/li&gt;
&lt;li&gt;Provide an alternative implementation&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As a demonstrator, this SimdAddPlugin was integrated in the &lt;code&gt;src/main/scala/vexriscv/demo/GenCustomSimdAdd.scala&lt;/code&gt; CPU configuration
and is self-tested by the &lt;code&gt;src/test/cpp/custom/simd_add&lt;/code&gt; application by running the following commands :&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Generate the CPU&lt;/span&gt;
sbt &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;runMain vexriscv.demo.GenCustomSimdAdd&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;

&lt;span class="pl-c1"&gt;cd&lt;/span&gt; src/test/cpp/regression/

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Optionally add TRACE=yes if you want to get the VCD waveform from the simulation.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Also you have to know that by default, the testbench introduce instruction/data bus stall.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Note the CUSTOM_SIMD_ADD flag is set to yes.&lt;/span&gt;
make clean run IBUS=SIMPLE DBUS=SIMPLE CSR=no MMU=no DEBUG_PLUGIN=no MUL=no DIV=no DHRYSTONE=no REDO=2 CUSTOM_SIMD_ADD=yes&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To retrieve the plugin related signals in your waveform viewer, just filter with &lt;code&gt;simd&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-adding-a-new-csr-via-the-plugin-system" class="anchor" aria-hidden="true" href="#adding-a-new-csr-via-the-plugin-system"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Adding a new CSR via the plugin system&lt;/h2&gt;
&lt;p&gt;Here are two examples about how to add a custom CSR to the CPU via the plugin system:
&lt;a href="https://github.com/SpinalHDL/VexRiscv/blob/master/src/main/scala/vexriscv/demo/CustomCsrDemoPlugin.scala"&gt;https://github.com/SpinalHDL/VexRiscv/blob/master/src/main/scala/vexriscv/demo/CustomCsrDemoPlugin.scala&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The first one (&lt;code&gt;CustomCsrDemoPlugin&lt;/code&gt;) adds an instruction counter and a clock cycle counter into the CSR mapping (and also do tricky stuff as a demonstration).&lt;/p&gt;
&lt;p&gt;The second one (&lt;code&gt;CustomCsrDemoGpioPlugin&lt;/code&gt;) creates a GPIO peripheral directly mapped into the CSR.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-cpu-clock-and-resets" class="anchor" aria-hidden="true" href="#cpu-clock-and-resets"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;CPU clock and resets&lt;/h2&gt;
&lt;p&gt;Without the debug plugin, the CPU will have a standard &lt;code&gt;clk&lt;/code&gt; input and a &lt;code&gt;reset&lt;/code&gt; input. But with the debug plugin the situation is the following :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;clk : As before, the clock which drive the whole CPU design, including the debug logic&lt;/li&gt;
&lt;li&gt;reset : Reset all the CPU states excepted the debug logics&lt;/li&gt;
&lt;li&gt;debugReset : Reset the debug logic of the CPU&lt;/li&gt;
&lt;li&gt;debug_resetOut : a CPU output signal which allows the JTAG to reset the CPU + the memory interconnect + the peripherals&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So here is the reset interconnect in case you use the debug plugin :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;                                VexRiscv
                            +------------------+
                            |                  |
toplevelReset &amp;gt;----+--------&amp;gt; debugReset       |
                   |        |                  |
                   |  +-----&amp;lt; debug_resetOut   |
                   |  |     |                  |
                   +--or&amp;gt;-+-&amp;gt; reset            |
                          | |                  |
                          | +------------------+
                          |
                          +-&amp;gt; Interconnect / Peripherals
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;a id="user-content-vexriscv-architecture" class="anchor" aria-hidden="true" href="#vexriscv-architecture"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;VexRiscv Architecture&lt;/h2&gt;
&lt;p&gt;VexRiscv is implemented via a 5 stage in-order pipeline on which many optional and complementary plugins add functionalities to provide a functional RISC-V CPU.
This approach is completely unconventional and only possible through meta hardware description languages (SpinalHDL in the current case) but has proven its advantages
via the VexRiscv implementation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You can swap/turn on/turn off parts of the CPU directly via the plugin system&lt;/li&gt;
&lt;li&gt;You can add new functionalities/instruction without having to modify any sources code of the CPU&lt;/li&gt;
&lt;li&gt;It allows the CPU configuration to cover a very large spectrum of implementation without cooking spaghetti code&lt;/li&gt;
&lt;li&gt;It allows your code base to truly produce a parametrized CPU design&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you generate the CPU without any plugin, it will only contain the definition of the 5 pipeline stages and their basic arbitration, but nothing else,
as everything else, including the program counter is added into the CPU via plugins.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-plugins" class="anchor" aria-hidden="true" href="#plugins"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Plugins&lt;/h3&gt;
&lt;p&gt;This chapter describes plugins currently implemented.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#ibussimpleplugin"&gt;IBusSimplePlugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ibuscachedplugin"&gt;IBusCachedPlugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#decodersimpleplugin"&gt;DecoderSimplePlugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#regfileplugin"&gt;RegFilePlugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#hazardsimpleplugin"&gt;HazardSimplePlugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#srcplugin"&gt;SrcPlugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#intaluplugin"&gt;IntAluPlugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#lightshifterplugin"&gt;LightShifterPlugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#fullbarrelshifterplugin"&gt;FullBarrelShifterPlugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#branchplugin"&gt;BranchPlugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dbussimpleplugin"&gt;DBusSimplePlugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dbuscachedplugin"&gt;DBusCachedPlugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#mulplugin"&gt;MulPlugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#divplugin"&gt;DivPlugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#muldiviterativeplugin"&gt;MulDivIterativePlugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#csrplugin"&gt;CsrPlugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#staticmemorytranslatorplugin"&gt;StaticMemoryTranslatorPlugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#memorytranslatorplugin"&gt;MemoryTranslatorPlugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#debugplugin"&gt;DebugPlugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#yamlplugin"&gt;YamlPlugin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a id="user-content-ibussimpleplugin" class="anchor" aria-hidden="true" href="#ibussimpleplugin"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;IBusSimplePlugin&lt;/h4&gt;
&lt;p&gt;This plugin implement the CPU frontend (instruction fetch) via a very simple and neutral memory interface going outside the CPU.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Parameters&lt;/th&gt;
&lt;th&gt;type&lt;/th&gt;
&lt;th&gt;description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;catchAccessFault&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;When true, an instruction read response with read error asserted results in a CPU exception trap.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;resetVector&lt;/td&gt;
&lt;td&gt;BigInt&lt;/td&gt;
&lt;td&gt;Address of the program counter after the reset.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cmdForkOnSecondStage&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;When false, branches immediately update the program counter. This minimizes branch penalties but might reduce FMax because the instruction bus address signal is a combinatorial path. When true, this combinatorial path is removed and the program counter is updated one cycle after a branch is detected. While FMax may improve, an additional branch penalty will be incurred as well.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cmdForkPersistence&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;When false, requests on the iBus can disappear/change before they are acknowledged. This reduces area but isn't safe/supported by many arbitration/slaves. When true, once initiated, iBus requests will stay until they are acknowledged.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;compressedGen&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;Enable RISC-V compressed instruction (RVC) support.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;busLatencyMin&lt;/td&gt;
&lt;td&gt;Int&lt;/td&gt;
&lt;td&gt;Specifies the minimal latency between the iBus.cmd and iBus.rsp. A corresponding number of stages are added to the frontend to keep the IPC to 1.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;injectorStage&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;When true, a stage between the frontend and the decode stage of the CPU is added to improve FMax. (busLatencyMin + injectorStage) should be at least two.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;prediction&lt;/td&gt;
&lt;td&gt;BranchPrediction&lt;/td&gt;
&lt;td&gt;Can be set to NONE/STATIC/DYNAMIC/DYNAMIC_TARGET to specify the branch predictor implementation. See below for more details.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;historyRamSizeLog2&lt;/td&gt;
&lt;td&gt;Int&lt;/td&gt;
&lt;td&gt;Specify the number of entries in the direct mapped prediction cache of DYNAMIC/DYNAMIC_TARGET implementation. 2 pow historyRamSizeLog2 entries.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Here is the SimpleBus interface definition:&lt;/p&gt;
&lt;div class="highlight highlight-source-scala"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;IBusSimpleCmd&lt;/span&gt;() &lt;span class="pl-k"&gt;extends&lt;/span&gt; &lt;span class="pl-e"&gt;Bundle&lt;/span&gt;{
  &lt;span class="pl-k"&gt;val&lt;/span&gt; &lt;span class="pl-smi"&gt;pc&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;UInt&lt;/span&gt;(&lt;span class="pl-c1"&gt;32&lt;/span&gt; bits)
}

&lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;IBusSimpleRsp&lt;/span&gt;() &lt;span class="pl-k"&gt;extends&lt;/span&gt; &lt;span class="pl-e"&gt;Bundle&lt;/span&gt; &lt;span class="pl-k"&gt;with&lt;/span&gt; &lt;span class="pl-e"&gt;IMasterSlave&lt;/span&gt;{
  &lt;span class="pl-k"&gt;val&lt;/span&gt; &lt;span class="pl-smi"&gt;error&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;Bool&lt;/span&gt;
  &lt;span class="pl-k"&gt;val&lt;/span&gt; &lt;span class="pl-smi"&gt;inst&lt;/span&gt;  &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;Bits&lt;/span&gt;(&lt;span class="pl-c1"&gt;32&lt;/span&gt; bits)

  &lt;span class="pl-k"&gt;override&lt;/span&gt; &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;asMaster&lt;/span&gt;()&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-k"&gt;Unit&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; {
    out(error,inst)
  }
}

&lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;IBusSimpleBus&lt;/span&gt;(&lt;span class="pl-v"&gt;interfaceKeepData&lt;/span&gt; : &lt;span class="pl-k"&gt;Boolean&lt;/span&gt;) &lt;span class="pl-k"&gt;extends&lt;/span&gt; &lt;span class="pl-e"&gt;Bundle&lt;/span&gt; &lt;span class="pl-k"&gt;with&lt;/span&gt; &lt;span class="pl-e"&gt;IMasterSlave&lt;/span&gt;{
  &lt;span class="pl-k"&gt;var&lt;/span&gt; &lt;span class="pl-smi"&gt;cmd&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;Stream&lt;/span&gt;(&lt;span class="pl-en"&gt;IBusSimpleCmd&lt;/span&gt;())
  &lt;span class="pl-k"&gt;var&lt;/span&gt; &lt;span class="pl-smi"&gt;rsp&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;Flow&lt;/span&gt;(&lt;span class="pl-en"&gt;IBusSimpleRsp&lt;/span&gt;())

  &lt;span class="pl-k"&gt;override&lt;/span&gt; &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;asMaster&lt;/span&gt;()&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-k"&gt;Unit&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; {
    master(cmd)
    slave(rsp)
  }
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt; : Checkout the cmdForkPersistence parameter, because if it's not set, it can break the iBus compatibility with your memory system (unless you externaly add some buffers)&lt;/p&gt;
&lt;p&gt;Setting cmdForkPersistence and cmdForkOnSecondStage improves iBus cmd timings.&lt;/p&gt;
&lt;p&gt;The iBusSimplePlugin includes bridges to convert from the IBusSimpleBus to AXI4, Avalon, and Wishbone interfaces.&lt;/p&gt;
&lt;p&gt;This plugin implements a jump interface that allows all other plugins to issue a jump:&lt;/p&gt;
&lt;div class="highlight highlight-source-scala"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;trait&lt;/span&gt; &lt;span class="pl-en"&gt;JumpService&lt;/span&gt;{
  &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;createJumpInterface&lt;/span&gt;(&lt;span class="pl-v"&gt;stage&lt;/span&gt; : &lt;span class="pl-en"&gt;Stage&lt;/span&gt;) &lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-en"&gt;Flow&lt;/span&gt;[&lt;span class="pl-en"&gt;UInt&lt;/span&gt;]
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The stage argument specifies the stage from which the jump is asked. This allows the PcManagerSimplePlugin plugin to manage priorities between jump requests from
diffent stages.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-ibuscachedplugin" class="anchor" aria-hidden="true" href="#ibuscachedplugin"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;IBusCachedPlugin&lt;/h4&gt;
&lt;p&gt;Simple and light multi-way instruction cache.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Parameters&lt;/th&gt;
&lt;th&gt;type&lt;/th&gt;
&lt;th&gt;description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;resetVector&lt;/td&gt;
&lt;td&gt;BigInt&lt;/td&gt;
&lt;td&gt;Address of the program counter after the reset.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;relaxedPcCalculation&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;When false, branches immediately update the program counter. This minimizes branch penalties but might reduce FMax because the instruction bus address signal is a combinatorial path. When true, this combinatorial path is removed and the program counter is updated one cycle after a branch is detected. While FMax may improve, an additional branch penalty will be incurred as well.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;prediction&lt;/td&gt;
&lt;td&gt;BranchPrediction&lt;/td&gt;
&lt;td&gt;Can be set to NONE/STATIC/DYNAMIC/DYNAMIC_TARGET to specify the branch predictor implementation. See below for more details.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;historyRamSizeLog2&lt;/td&gt;
&lt;td&gt;Int&lt;/td&gt;
&lt;td&gt;Specify the number of entries in the direct mapped prediction cache of DYNAMIC/DYNAMIC_TARGET implementation. 2 pow historyRamSizeLog2 entries&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;compressedGen&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;Enable RISC-V compressed instruction (RVC) support.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;config.cacheSize&lt;/td&gt;
&lt;td&gt;Int&lt;/td&gt;
&lt;td&gt;Total storage capacity of the cache in bytes.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;config.bytePerLine&lt;/td&gt;
&lt;td&gt;Int&lt;/td&gt;
&lt;td&gt;Number of bytes per cache line&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;config.wayCount&lt;/td&gt;
&lt;td&gt;Int&lt;/td&gt;
&lt;td&gt;Number of cache ways&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;config.twoCycleRam&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;Check the tags values in the decode stage instead of the fetch stage to relax timings&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;config.asyncTagMemory&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;Read the cache tags in an asynchronous manner instead of syncronous one&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;config.addressWidth&lt;/td&gt;
&lt;td&gt;Int&lt;/td&gt;
&lt;td&gt;CPU address width. Should be 32&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;config.cpuDataWidth&lt;/td&gt;
&lt;td&gt;Int&lt;/td&gt;
&lt;td&gt;CPU data width. Should be 32&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;config.memDataWidth&lt;/td&gt;
&lt;td&gt;Int&lt;/td&gt;
&lt;td&gt;Memory data width. Could potentialy be something else than 32, but only 32 is currently tested&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;config.catchIllegalAccess&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;Catch when a memory access is done on non-valid memory address (MMU)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;config.catchAccessFault&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;Catch when the memeory bus is responding with an error&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;config.catchMemoryTranslationMiss&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;Catch when the MMU miss a TLB&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Note: If you enable the twoCycleRam option and if wayCount is bigger than one, then the register file plugin should be configured to read the regFile in an asynchronous manner.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-decodersimpleplugin" class="anchor" aria-hidden="true" href="#decodersimpleplugin"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;DecoderSimplePlugin&lt;/h4&gt;
&lt;p&gt;This plugin provides instruction decoding capabilities to others plugins.&lt;/p&gt;
&lt;p&gt;For instance, for a given instruction, the pipeline hazard plugin needs to know if it uses the register file source 1/2 in order to stall the pipeline until the hazard is gone.
To provide this kind of information, each plugin which implements an instruction documents this kind of information to the DecoderSimplePlugin plugin.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Parameters&lt;/th&gt;
&lt;th&gt;type&lt;/th&gt;
&lt;th&gt;description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;catchIllegalInstruction&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;When true, instructions that don't match a decoding specification will generate a trap exception&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Here is a usage example :&lt;/p&gt;
&lt;div class="highlight highlight-source-scala"&gt;&lt;pre&gt;    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;Specify the instruction decoding which should be applied when the instruction match the 'key' pattern&lt;/span&gt;
    decoderService.add(
      &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;Bit pattern of the new instruction&lt;/span&gt;
      key &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;M&lt;/span&gt;&lt;span class="pl-s"&gt;"&lt;/span&gt;&lt;span class="pl-s"&gt;0000011----------000-----0110011&lt;/span&gt;&lt;span class="pl-s"&gt;"&lt;/span&gt;,

      &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;Decoding specification when the 'key' pattern is recognized in the instruction&lt;/span&gt;
      &lt;span class="pl-en"&gt;List&lt;/span&gt;(
        &lt;span class="pl-en"&gt;IS_SIMD_ADD&lt;/span&gt;              &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;True&lt;/span&gt;, &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;Inform the pipeline that the current instruction is a SIMD_ADD instruction&lt;/span&gt;
        &lt;span class="pl-en"&gt;REGFILE_WRITE_VALID&lt;/span&gt;      &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;True&lt;/span&gt;, &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;Notify the hazard management unit that this instruction writes to the register file&lt;/span&gt;
        &lt;span class="pl-en"&gt;BYPASSABLE_EXECUTE_STAGE&lt;/span&gt; &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;True&lt;/span&gt;, &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;Notify the hazard management unit that the instruction result is already accessible in the EXECUTE stage (Bypass ready)&lt;/span&gt;
        &lt;span class="pl-en"&gt;BYPASSABLE_MEMORY_STAGE&lt;/span&gt;  &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;True&lt;/span&gt;, &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;Same as above but for the memory stage&lt;/span&gt;
        &lt;span class="pl-en"&gt;RS1_USE&lt;/span&gt;                  &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;True&lt;/span&gt;, &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;Notify the hazard management unit that this instruction uses the RS1 value&lt;/span&gt;
        &lt;span class="pl-en"&gt;RS2_USE&lt;/span&gt;                  &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;True&lt;/span&gt;  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;Same than above but for RS2.&lt;/span&gt;
      )
    )
  }&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This plugin operates in the Decode stage.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-regfileplugin" class="anchor" aria-hidden="true" href="#regfileplugin"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;RegFilePlugin&lt;/h4&gt;
&lt;p&gt;This plugin implements the register file.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Parameters&lt;/th&gt;
&lt;th&gt;type&lt;/th&gt;
&lt;th&gt;description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;regFileReadyKind&lt;/td&gt;
&lt;td&gt;RegFileReadKind&lt;/td&gt;
&lt;td&gt;Can bet set to ASYNC or SYNC. Specifies the kind of memory read used to implement the register file. ASYNC means zero cycle latency memory read, while SYNC means one cycle latency memory read which can be mapped into standard FPGA memory blocks&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;zeroBoot&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;Load all registers with zeroes at the beginning of simulations to keep everything deterministic in logs/traces&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;This register file use a &lt;code&gt;don't care&lt;/code&gt; read-during-write policy, so the bypassing/hazard plugin should take care of this.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-hazardsimpleplugin" class="anchor" aria-hidden="true" href="#hazardsimpleplugin"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;HazardSimplePlugin&lt;/h4&gt;
&lt;p&gt;This plugin checks the pipeline instruction dependencies and, if necessary or possible, will stop the instruction in the decoding stage or bypass the instruction results
from the later stages to the decode stage.&lt;/p&gt;
&lt;p&gt;Since the register file is implemented with a &lt;code&gt;don't care&lt;/code&gt; read-during-write policy, this plugin also manages these kind of hazards.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Parameters&lt;/th&gt;
&lt;th&gt;type&lt;/th&gt;
&lt;th&gt;description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;bypassExecute&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;Enable the bypassing of instruction results coming from the Execute stage&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bypassMemory&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;Enable the bypassing of instruction results coming from the Memory stage&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bypassWriteBack&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;Enable the bypassing of instruction results coming from the WriteBack stage&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bypassWriteBackBuffer&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;Enable the bypassing of the previous cycle register file written value&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;&lt;a id="user-content-srcplugin" class="anchor" aria-hidden="true" href="#srcplugin"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;SrcPlugin&lt;/h4&gt;
&lt;p&gt;This plugin muxes different input values to produce SRC1/SRC2/SRC_ADD/SRC_SUB/SRC_LESS values which are common values used by many plugins in the execute stage (ALU/Branch/Load/Store).&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Parameters&lt;/th&gt;
&lt;th&gt;type&lt;/th&gt;
&lt;th&gt;description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;separatedAddSub&lt;/td&gt;
&lt;td&gt;RegFileReadKind&lt;/td&gt;
&lt;td&gt;By default SRC_ADD/SRC_SUB are generated from a single controllable adder/substractor, but if this is set to true, it use separate adder/substractors&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;executeInsertion&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;By default SRC1/SRC2 are generated in the Decode stage, but if this parameter is true, it is done in the Execute stage (It will relax the bypassing network)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Except for SRC1/SRC2, this plugin does everything at the begining of Execute stage.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-intaluplugin" class="anchor" aria-hidden="true" href="#intaluplugin"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;IntAluPlugin&lt;/h4&gt;
&lt;p&gt;This plugin implements all ADD/SUB/SLT/SLTU/XOR/OR/AND/LUI/AUIPC instructions in the execute stage by using the SrcPlugin outputs. It is a realy simple plugin.&lt;/p&gt;
&lt;p&gt;The result is injected into the pipeline directly at the end of the execute stage.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-lightshifterplugin" class="anchor" aria-hidden="true" href="#lightshifterplugin"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;LightShifterPlugin&lt;/h4&gt;
&lt;p&gt;Implements SLL/SRL/SRA instructions by using an iterative shifter register, while using one cycle per bit shift.&lt;/p&gt;
&lt;p&gt;The result is injected into the pipeline directly at the end of the execute stage.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-fullbarrelshifterplugin" class="anchor" aria-hidden="true" href="#fullbarrelshifterplugin"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;FullBarrelShifterPlugin&lt;/h4&gt;
&lt;p&gt;Implements SLL/SRL/SRA instructions by using a full barrel shifter, so it execute all shifts in a single cycle.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Parameters&lt;/th&gt;
&lt;th&gt;type&lt;/th&gt;
&lt;th&gt;description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;earlyInjection&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;By default the result of the shift is injected into the pipeline in the Memory stage to relax timings, but if this option is true it will be done in the Execute stage&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;&lt;a id="user-content-branchplugin" class="anchor" aria-hidden="true" href="#branchplugin"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;BranchPlugin&lt;/h4&gt;
&lt;p&gt;This plugin implement all branch/jump instructions (JAL/JALR/BEQ/BNE/BLT/BGE/BLTU/BGEU) with primitives used by the cpu frontend plugins to implement branch prediction. The prediction implementation is set in the frontend plugins (IBusX)&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Parameters&lt;/th&gt;
&lt;th&gt;type&lt;/th&gt;
&lt;th&gt;description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;earlyBranch&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;By default the branch is done in the Memory stage to relax timings, but if this option is set it's done in the Execute stage&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;catchAddressMisaligned&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;If a jump/branch is done in an unaligned PC address, it will fire an trap exception&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Each miss predicted jumps will produce between 2 and 4 cycles penalty depending the &lt;code&gt;earlyBranch&lt;/code&gt; and the &lt;code&gt;PcManagerSimplePlugin.relaxedPcCalculation&lt;/code&gt; configurations&lt;/p&gt;
&lt;h5&gt;&lt;a id="user-content-prediction-none" class="anchor" aria-hidden="true" href="#prediction-none"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Prediction NONE&lt;/h5&gt;
&lt;p&gt;No prediction: each PC change due to a jump/branch will produce a penalty.&lt;/p&gt;
&lt;h5&gt;&lt;a id="user-content-prediction-static" class="anchor" aria-hidden="true" href="#prediction-static"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Prediction STATIC&lt;/h5&gt;
&lt;p&gt;In the decode stage, a conditional branch pointing backwards or a JAL is branched speculatively. If the speculation is right, the branch penalty is reduced to a single cycle,
otherwise the standard penalty is applied.&lt;/p&gt;
&lt;h5&gt;&lt;a id="user-content-prediction-dynamic" class="anchor" aria-hidden="true" href="#prediction-dynamic"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Prediction DYNAMIC&lt;/h5&gt;
&lt;p&gt;Same as the STATIC prediction, except that to do the prediction, it use a direct mapped 2 bit history cache (BHT) which remembers if the branch is more likely to be taken or not.&lt;/p&gt;
&lt;h5&gt;&lt;a id="user-content-prediction-dynamic_target" class="anchor" aria-hidden="true" href="#prediction-dynamic_target"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Prediction DYNAMIC_TARGET&lt;/h5&gt;
&lt;p&gt;This predictor uses a direct mapped branch target buffer (BTB) in the Fetch stage which store the PC of the instruction, the target PC of the instruction and a 2 bit history to remember
if the branch is more likely to be taken or not. This is the most efficient branch predictor actualy implemented on VexRiscv as when the branch prediction is right, it produce no branch penalty.
The down side is that this predictor has a long combinatorial path coming from the prediction cache read port to the programm counter by passing through the jump interface.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-dbussimpleplugin" class="anchor" aria-hidden="true" href="#dbussimpleplugin"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;DBusSimplePlugin&lt;/h4&gt;
&lt;p&gt;This plugin implements the load and store instructions (LB/LH/LW/LBU/LHU/LWU/SB/SH/SW) via a simple memory bus going out of the CPU.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Parameters&lt;/th&gt;
&lt;th&gt;type&lt;/th&gt;
&lt;th&gt;description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;catchAddressMisaligned&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;If a memory access is done to an unaligned memory address, it will fire a trap exception&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;catchAccessFault&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;If a memory read returns an error, it will fire a trap exception&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;earlyInjection&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;By default, the memory read values are injected into the pipeline in the WriteBack stage to relax the timings. If this parameter is true, it's done in the Memory stage&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Here is the DBusSimpleBus&lt;/p&gt;
&lt;div class="highlight highlight-source-scala"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;DBusSimpleCmd&lt;/span&gt;() &lt;span class="pl-k"&gt;extends&lt;/span&gt; &lt;span class="pl-e"&gt;Bundle&lt;/span&gt;{
  &lt;span class="pl-k"&gt;val&lt;/span&gt; &lt;span class="pl-smi"&gt;wr&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;Bool&lt;/span&gt;
  &lt;span class="pl-k"&gt;val&lt;/span&gt; &lt;span class="pl-smi"&gt;address&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;UInt&lt;/span&gt;(&lt;span class="pl-c1"&gt;32&lt;/span&gt; bits)
  &lt;span class="pl-k"&gt;val&lt;/span&gt; &lt;span class="pl-smi"&gt;data&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;Bits&lt;/span&gt;(&lt;span class="pl-c1"&gt;32&lt;/span&gt; bit)
  &lt;span class="pl-k"&gt;val&lt;/span&gt; &lt;span class="pl-smi"&gt;size&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;UInt&lt;/span&gt;(&lt;span class="pl-c1"&gt;2&lt;/span&gt; bit)
}

&lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;DBusSimpleRsp&lt;/span&gt;() &lt;span class="pl-k"&gt;extends&lt;/span&gt; &lt;span class="pl-e"&gt;Bundle&lt;/span&gt; &lt;span class="pl-k"&gt;with&lt;/span&gt; &lt;span class="pl-e"&gt;IMasterSlave&lt;/span&gt;{
  &lt;span class="pl-k"&gt;val&lt;/span&gt; &lt;span class="pl-smi"&gt;ready&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;Bool&lt;/span&gt;
  &lt;span class="pl-k"&gt;val&lt;/span&gt; &lt;span class="pl-smi"&gt;error&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;Bool&lt;/span&gt;
  &lt;span class="pl-k"&gt;val&lt;/span&gt; &lt;span class="pl-smi"&gt;data&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;Bits&lt;/span&gt;(&lt;span class="pl-c1"&gt;32&lt;/span&gt; bit)

  &lt;span class="pl-k"&gt;override&lt;/span&gt; &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;asMaster&lt;/span&gt;()&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-k"&gt;Unit&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; {
    out(ready,error,data)
  }
}


&lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;DBusSimpleBus&lt;/span&gt;() &lt;span class="pl-k"&gt;extends&lt;/span&gt; &lt;span class="pl-e"&gt;Bundle&lt;/span&gt; &lt;span class="pl-k"&gt;with&lt;/span&gt; &lt;span class="pl-e"&gt;IMasterSlave&lt;/span&gt;{
  &lt;span class="pl-k"&gt;val&lt;/span&gt; &lt;span class="pl-smi"&gt;cmd&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;Stream&lt;/span&gt;(&lt;span class="pl-en"&gt;DBusSimpleCmd&lt;/span&gt;())
  &lt;span class="pl-k"&gt;val&lt;/span&gt; &lt;span class="pl-smi"&gt;rsp&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;DBusSimpleRsp&lt;/span&gt;()

  &lt;span class="pl-k"&gt;override&lt;/span&gt; &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;asMaster&lt;/span&gt;()&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-k"&gt;Unit&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; {
    master(cmd)
    slave(rsp)
  }
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that bridges are available to convert this interface into AXI4 and Avalon&lt;/p&gt;
&lt;p&gt;There is at least one cycle latency between a cmd and the corresponding rsp. The rsp.ready flag should be false after a read cmd until the rsp is present.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-dbuscachedplugin" class="anchor" aria-hidden="true" href="#dbuscachedplugin"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;DBusCachedPlugin&lt;/h4&gt;
&lt;p&gt;Multi way cache implementation with writh-through and allocate on read strategy. (Documentation is WIP)&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-mulplugin" class="anchor" aria-hidden="true" href="#mulplugin"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;MulPlugin&lt;/h4&gt;
&lt;p&gt;Implements the multiplication instruction from the RISC-V M extension. Its implementation was done in a FPGA friendly way by using 4 17*17 bit multiplications.
The processing is fully pipelined between the Execute/Memory/Writeback stage. The results of the instructions are always inserted in the WriteBack stage.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-divplugin" class="anchor" aria-hidden="true" href="#divplugin"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;DivPlugin&lt;/h4&gt;
&lt;p&gt;Implements the division/modulo instruction from the RISC-V M extension. It is done in a simple iterative way which always takes 34 cycles. The result is inserted into the
Memory stage.&lt;/p&gt;
&lt;p&gt;This plugin is now based on the MulDivIterativePlugin one.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-muldiviterativeplugin" class="anchor" aria-hidden="true" href="#muldiviterativeplugin"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;MulDivIterativePlugin&lt;/h4&gt;
&lt;p&gt;This plugin implements the multiplication, division and modulo of the RISC-V M extension in an iterative way, which is friendly for small FPGAs that don't have DSP blocks.&lt;/p&gt;
&lt;p&gt;This plugin is able to unroll the iterative calculation process to reduce the number of cycles used to execute mul/div instructions.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Parameters&lt;/th&gt;
&lt;th&gt;type&lt;/th&gt;
&lt;th&gt;description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;genMul&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;Enables multiplication support. Can be set to false if you want to use the MulPlugin instead&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;genDiv&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;Enables division support&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mulUnrollFactor&lt;/td&gt;
&lt;td&gt;Int&lt;/td&gt;
&lt;td&gt;Number of combinatorial stages used to speed up the multiplication, should be &amp;gt; 0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;divUnrollFactor&lt;/td&gt;
&lt;td&gt;Int&lt;/td&gt;
&lt;td&gt;Number of combinatorial stages used to speed up the division, should be &amp;gt; 0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The number of cycles used to execute a multiplication is '32/mulUnrollFactor'
The number of cycles used to execute a division is '32/divUnrollFactor + 1'&lt;/p&gt;
&lt;p&gt;Both mul/div are processed into the memory stage (late result).&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-csrplugin" class="anchor" aria-hidden="true" href="#csrplugin"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;CsrPlugin&lt;/h4&gt;
&lt;p&gt;Implements most of the Machine mode and a few of the User mode registers as specified in the RISC-V priviledged spec.
The access mode of most of the CSR is parameterizable (NONE/READ_ONLY/WRITE_ONLY/READ_WRITE) to reduce the area usage of unneeded features.&lt;/p&gt;
&lt;p&gt;(CsrAccess can be NONE/READ_ONLY/WRITE_ONLY/READ_WRITE)&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Parameters&lt;/th&gt;
&lt;th&gt;type&lt;/th&gt;
&lt;th&gt;description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;catchIllegalAccess&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mvendorid&lt;/td&gt;
&lt;td&gt;BigInt&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;marchid&lt;/td&gt;
&lt;td&gt;BigInt&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mimpid&lt;/td&gt;
&lt;td&gt;BigInt&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mhartid&lt;/td&gt;
&lt;td&gt;BigInt&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;misaExtensionsInit&lt;/td&gt;
&lt;td&gt;Int&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;misaAccess&lt;/td&gt;
&lt;td&gt;CsrAccess&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mtvecAccess&lt;/td&gt;
&lt;td&gt;CsrAccess&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mtvecInit&lt;/td&gt;
&lt;td&gt;BigInt&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mepcAccess&lt;/td&gt;
&lt;td&gt;CsrAccess&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mscratchGen&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mcauseAccess&lt;/td&gt;
&lt;td&gt;CsrAccess&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mbadaddrAccess&lt;/td&gt;
&lt;td&gt;CsrAccess&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mcycleAccess&lt;/td&gt;
&lt;td&gt;CsrAccess&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;minstretAccess&lt;/td&gt;
&lt;td&gt;CsrAccess&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ucycleAccess&lt;/td&gt;
&lt;td&gt;CsrAccess&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;wfiGen&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ecallGen&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;If an interrupt occurs, before jumping to mtvec, the plugin will stop the Prefetch stage and wait for all the instructions in the later pipeline stages to complete their execution.&lt;/p&gt;
&lt;p&gt;If an exception occur, the plugin will kill the corresponding instruction, flush all previous instructions, and wait until the previously killed instructions reach the WriteBack
stage before jumping to mtvec.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-staticmemorytranslatorplugin" class="anchor" aria-hidden="true" href="#staticmemorytranslatorplugin"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;StaticMemoryTranslatorPlugin&lt;/h4&gt;
&lt;p&gt;Static memory translator plugin which allows one to specify which range of the memory addresses is IO mapped and shouldn't be cached.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-mmuplugin" class="anchor" aria-hidden="true" href="#mmuplugin"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;MmuPlugin&lt;/h4&gt;
&lt;p&gt;Hardware refilled MMU implementation. Allows others plugins such as DBusCachedPlugin/IBusCachedPlugin to instanciate memory address translation ports. Each port has a small dedicated
fully associative TLB cache which is refilled automaticaly via a dbus access sharing.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-debugplugin" class="anchor" aria-hidden="true" href="#debugplugin"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;DebugPlugin&lt;/h4&gt;
&lt;p&gt;This plugin implements enough CPU debug features to allow comfortable GDB/Eclipse debugging. To access those debug features, it provides a simple memory bus interface.
The JTAG interface is provided by another bridge, which makes it possible to efficiently connect multiple CPUs to the same JTAG.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Parameters&lt;/th&gt;
&lt;th&gt;type&lt;/th&gt;
&lt;th&gt;description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;debugClockDomain&lt;/td&gt;
&lt;td&gt;ClockDomain&lt;/td&gt;
&lt;td&gt;As the debug unit is able to reset the CPU itself, it should use another clock domain to avoid killing itself (only the reset wire should differ)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The internals of the debug plugin are done in a manner which reduces the area usage and the FMax impact of this plugin.&lt;/p&gt;
&lt;p&gt;Here is the simple bus to access it, the rsp come one cycle after the request :&lt;/p&gt;
&lt;div class="highlight highlight-source-scala"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;DebugExtensionCmd&lt;/span&gt;() &lt;span class="pl-k"&gt;extends&lt;/span&gt; &lt;span class="pl-e"&gt;Bundle&lt;/span&gt;{
  &lt;span class="pl-k"&gt;val&lt;/span&gt; &lt;span class="pl-smi"&gt;wr&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;Bool&lt;/span&gt;
  &lt;span class="pl-k"&gt;val&lt;/span&gt; &lt;span class="pl-smi"&gt;address&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;UInt&lt;/span&gt;(&lt;span class="pl-c1"&gt;8&lt;/span&gt; bit)
  &lt;span class="pl-k"&gt;val&lt;/span&gt; &lt;span class="pl-smi"&gt;data&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;Bits&lt;/span&gt;(&lt;span class="pl-c1"&gt;32&lt;/span&gt; bit)
}
&lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;DebugExtensionRsp&lt;/span&gt;() &lt;span class="pl-k"&gt;extends&lt;/span&gt; &lt;span class="pl-e"&gt;Bundle&lt;/span&gt;{
  &lt;span class="pl-k"&gt;val&lt;/span&gt; &lt;span class="pl-smi"&gt;data&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;Bits&lt;/span&gt;(&lt;span class="pl-c1"&gt;32&lt;/span&gt; bit)
}

&lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;DebugExtensionBus&lt;/span&gt;() &lt;span class="pl-k"&gt;extends&lt;/span&gt; &lt;span class="pl-e"&gt;Bundle&lt;/span&gt; &lt;span class="pl-k"&gt;with&lt;/span&gt; &lt;span class="pl-e"&gt;IMasterSlave&lt;/span&gt;{
  &lt;span class="pl-k"&gt;val&lt;/span&gt; &lt;span class="pl-smi"&gt;cmd&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;Stream&lt;/span&gt;(&lt;span class="pl-en"&gt;DebugExtensionCmd&lt;/span&gt;())
  &lt;span class="pl-k"&gt;val&lt;/span&gt; &lt;span class="pl-smi"&gt;rsp&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;DebugExtensionRsp&lt;/span&gt;()

  &lt;span class="pl-k"&gt;override&lt;/span&gt; &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;asMaster&lt;/span&gt;()&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-k"&gt;Unit&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; {
    master(cmd)
    in(rsp)
  }
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here is the register mapping :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Read address 0x00 -&amp;gt;
  bit 0  : resetIt
  bit 1  : haltIt
  bit 2  : isPipBusy
  bit 3  : haltedByBreak
  bit 4  : stepIt
Write address 0x00 -&amp;gt;
  bit 4  : stepIt
  bit 16 : set resetIt
  bit 17 : set haltIt
  bit 24 : clear resetIt
  bit 25 : clear haltIt and haltedByBreak

Read Address 0x04 -&amp;gt;
  bits (31 downto 0) : Last value written into the register file
Write Address 0x04 -&amp;gt;
  bits (31 downto 0) : Instruction that should be pushed into the CPU pipeline for debug purposes
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The OpenOCD port is there :
&lt;a href="https://github.com/SpinalHDL/openocd_riscv"&gt;https://github.com/SpinalHDL/openocd_riscv&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-yamlplugin" class="anchor" aria-hidden="true" href="#yamlplugin"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;YamlPlugin&lt;/h4&gt;
&lt;p&gt;This plugin offers a service to others plugins to generate a usefull Yaml file about the CPU configuration. It contains, for instance, the sequence of instruction required
to flush the data cache (information used by openocd).&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>SpinalHDL</author><guid isPermaLink="false">https://github.com/SpinalHDL/VexRiscv</guid><pubDate>Tue, 19 Nov 2019 00:08:00 GMT</pubDate></item><item><title>bitdump/BLHeli #9 in Assembly, Today</title><link>https://github.com/bitdump/BLHeli</link><description>&lt;p&gt;&lt;i&gt;BLHeli for brushless ESC firmware&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;p&gt;This tree contains BLHeli code for sensorless brushless motor electronic speed control (ESC) boards.&lt;/p&gt;
&lt;p&gt;To view and use the files, click the "Clone or download" button on this page,&lt;br&gt;
and then select "Download ZIP" to download the repository to your computer.&lt;/p&gt;
&lt;p&gt;For flashing and configuration, download the BLHeliSuite PC software:&lt;br&gt;
&lt;a href="https://www.mediafire.com/folder/dx6kfaasyo24l/BLHeliSuite" rel="nofollow"&gt;https://www.mediafire.com/folder/dx6kfaasyo24l/BLHeliSuite&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For more information, check out these threads:&lt;br&gt;
&lt;a href="https://www.rcgroups.com/forums/showthread.php?2640796" rel="nofollow"&gt;https://www.rcgroups.com/forums/showthread.php?2640796&lt;/a&gt; (for BLHeli_S)&lt;br&gt;
&lt;a href="http://www.rcgroups.com/forums/showthread.php?t=2136895" rel="nofollow"&gt;http://www.rcgroups.com/forums/showthread.php?t=2136895&lt;/a&gt; (for BLHeli)&lt;/p&gt;
&lt;p&gt;And look in the "BLHeli_32 ARM" folder for info on BLHeli_32.&lt;/p&gt;
&lt;p&gt;October 2018,
Steffen Skaug&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>bitdump</author><guid isPermaLink="false">https://github.com/bitdump/BLHeli</guid><pubDate>Tue, 19 Nov 2019 00:09:00 GMT</pubDate></item></channel></rss>