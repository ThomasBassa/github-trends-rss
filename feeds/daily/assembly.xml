<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>GitHub Trending: Assembly, Today</title><link>https://github.com/trending/assembly?since=daily</link><description>The top repositories on GitHub for assembly, measured daily</description><pubDate>Sat, 04 Jan 2020 01:10:51 GMT</pubDate><lastBuildDate>Sat, 04 Jan 2020 01:10:51 GMT</lastBuildDate><generator>PyRSS2Gen-1.1.0</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><ttl>720</ttl><item><title>n64decomp/oot #1 in Assembly, Today</title><link>https://github.com/n64decomp/oot</link><description>&lt;p&gt;&lt;i&gt;A decompilation of Ocarina of Time: Master Quest (debug) brought to you by a bunch of clever folks.&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-legend-of-zelda-ocarina-of-time-master-quest-debug" class="anchor" aria-hidden="true" href="#legend-of-zelda-ocarina-of-time-master-quest-debug"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Legend of Zelda: Ocarina of Time Master Quest (debug)&lt;/h1&gt;
&lt;div class="highlight highlight-source-diff"&gt;&lt;pre&gt;&lt;span class="pl-md"&gt;&lt;span class="pl-md"&gt;-&lt;/span&gt; WARNING! -&lt;/span&gt;

The ROM this repository builds while has a matching checksum cannot be 'shifted' due
to hardcoded pointers which have yet to be dumped. Thus this repository is currently
in an experimental and research phase and cannot currently be used traditionally as a
source code base for general changes.&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This repo does not include all assets necessary for compiling the ROM. A prior copy of the game is required to extract the required assets.&lt;/p&gt;
&lt;p&gt;This is a disassembly and decompilation of Legend of Zelda: Ocarina of Time Master Quest (debug)&lt;/p&gt;
&lt;p&gt;It builds the following ROM:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;zelda_ocarina_mq_dbg.z64 &lt;code&gt;md5: 717179476af84133b14ff73af87db57a&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Please refer to the Getting Started guide in the Wiki for setup instructions.&lt;/p&gt;
&lt;p&gt;Thanks to z64me and CrookedPoe for their actor documentation. &lt;a href="https://github.com/CrookedPoe/z64-rw"&gt;https://github.com/CrookedPoe/z64-rw&lt;/a&gt;&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>n64decomp</author><guid isPermaLink="false">https://github.com/n64decomp/oot</guid><pubDate>Sat, 04 Jan 2020 00:01:00 GMT</pubDate></item><item><title>xiph/rav1e #2 in Assembly, Today</title><link>https://github.com/xiph/rav1e</link><description>&lt;p&gt;&lt;i&gt;The fastest and safest AV1 encoder.&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-rav1e----" class="anchor" aria-hidden="true" href="#rav1e----"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;rav1e &lt;a href="https://travis-ci.org/xiph/rav1e" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/cf5369dac6e2aa181e4161efdf47b446dd524f78/68747470733a2f2f7472617669732d63692e6f72672f786970682f72617631652e7376673f6272616e63683d6d6173746572" alt="Travis Build Status" data-canonical-src="https://travis-ci.org/xiph/rav1e.svg?branch=master" style="max-width:100%;"&gt;&lt;/a&gt; &lt;a href="https://ci.appveyor.com/project/tdaede/rav1e/history" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/caa4dc60c0d8d4460dda29f8891f4ebcb786841f/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6769746875622f786970682f72617631653f6272616e63683d6d6173746572267376673d74727565" alt="AppVeyor Build Status" data-canonical-src="https://ci.appveyor.com/api/projects/status/github/xiph/rav1e?branch=master&amp;amp;svg=true" style="max-width:100%;"&gt;&lt;/a&gt; &lt;a href="https://github.com/xiph/rav1e/actions"&gt;&lt;img src="https://github.com/xiph/rav1e/workflows/rav1e/badge.svg" alt="Actions Status" style="max-width:100%;"&gt;&lt;/a&gt; &lt;a href="https://coveralls.io/github/xiph/rav1e?branch=master" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/687a8e0c6b9fa1a58949e9de01b1cb82876b30f7/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f786970682f72617631652f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/xiph/rav1e/badge.svg?branch=master" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;The fastest and safest AV1 encoder.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-overview" class="anchor" aria-hidden="true" href="#overview"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Overview&lt;/h2&gt;
&lt;p&gt;rav1e is an AV1 video encoder. It is designed to eventually cover all use cases, though in its current form it is most suitable for cases where libaom (the reference encoder) is too slow.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-features" class="anchor" aria-hidden="true" href="#features"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Intra and inter frames&lt;/li&gt;
&lt;li&gt;64x64 superblocks&lt;/li&gt;
&lt;li&gt;4x4 to 64x64 RDO-selected square and 2:1/1:2 rectangular blocks&lt;/li&gt;
&lt;li&gt;DC, H, V, Paeth, smooth, and a subset of directional prediction modes&lt;/li&gt;
&lt;li&gt;DCT, (FLIP-)ADST and identity transforms (up to 64x64, 16x16 and 32x32 respectively)&lt;/li&gt;
&lt;li&gt;8-, 10- and 12-bit depth color&lt;/li&gt;
&lt;li&gt;4:2:0 (full support), 4:2:2 and 4:4:4 (limited) chroma sampling&lt;/li&gt;
&lt;li&gt;Variable speed settings&lt;/li&gt;
&lt;li&gt;Near real-time encoding at high speed levels&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-releases" class="anchor" aria-hidden="true" href="#releases"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Releases&lt;/h2&gt;
&lt;p&gt;For the foreseeable future, a weekly pre-release of rav1e will be &lt;a href="https://github.com/xiph/rav1e/releases"&gt;published&lt;/a&gt; every Tuesday.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-windows-builds" class="anchor" aria-hidden="true" href="#windows-builds"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Windows builds&lt;/h2&gt;
&lt;p&gt;Automated AppVeyor builds can be found &lt;a href="https://ci.appveyor.com/project/tdaede/rav1e/history" rel="nofollow"&gt;here&lt;/a&gt;. Click on a build (it is recommended you select a build based on "master"), then click ARTIFACTS to reveal the rav1e.exe download link.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-building" class="anchor" aria-hidden="true" href="#building"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Building&lt;/h2&gt;
&lt;p&gt;Some &lt;code&gt;x86_64&lt;/code&gt;-specific optimizations require a recent version of &lt;a href="https://nasm.us/" rel="nofollow"&gt;NASM&lt;/a&gt; and are enabled by default.&lt;/p&gt;
&lt;p&gt;In order to build, test and link to the codec with the default features on UNIX on &lt;code&gt;x86_64&lt;/code&gt;, you need NASM. To install this on Ubuntu or Linux Mint, run:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;sudo apt install nasm&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;On Windows, a &lt;a href="https://www.nasm.us/pub/nasm/releasebuilds/" rel="nofollow"&gt;NASM binary&lt;/a&gt; in your system PATH is required.&lt;/p&gt;
&lt;p&gt;To build release binary in &lt;code&gt;target/release/rav1e&lt;/code&gt; run:&lt;/p&gt;
&lt;div class="highlight highlight-source-batchfile"&gt;&lt;pre&gt;cargo build --release&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-target-specific-builds" class="anchor" aria-hidden="true" href="#target-specific-builds"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Target-specific builds&lt;/h3&gt;
&lt;p&gt;The rust autovectorizer can produce a binary that is about 6%-7% faster if it can use &lt;code&gt;avx2&lt;/code&gt; in the general code, you may allow it by issuing:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;RUSTFLAGS="-C target-cpu=native" cargo build --release
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;RUSTFLAGS="-C target-features=+avx2,+fma" cargo build --release
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The resulting binary will not work on cpus that do not sport the same set of SIMD extensions enabled.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-building-the-c-api" class="anchor" aria-hidden="true" href="#building-the-c-api"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Building the C-API&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;rav1e&lt;/strong&gt; provides a C-compatible set of library, header and pkg-config file.&lt;/p&gt;
&lt;p&gt;To build and install it you can use &lt;a href="https://crates.io/crates/cargo-c" rel="nofollow"&gt;cargo-c&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;cargo install cargo-c
cargo cinstall --release&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-compressing-video" class="anchor" aria-hidden="true" href="#compressing-video"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Compressing video&lt;/h2&gt;
&lt;p&gt;Input videos must be in y4m format. The monochrome color format is not supported.&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;cargo run --release --bin rav1e -- input.y4m -o output.ivf&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-decompressing-video" class="anchor" aria-hidden="true" href="#decompressing-video"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Decompressing video&lt;/h2&gt;
&lt;p&gt;Encoder output should be compatible with any AV1 decoder compliant with the v1.0.0 specification. You can build compatible aomdec using the following:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;mkdir aom_test
&lt;span class="pl-c1"&gt;cd&lt;/span&gt; aom_test
cmake /path/to/aom -DAOM_TARGET_CPU=generic -DCONFIG_AV1_ENCODER=0 -DENABLE_TESTS=0 -DENABLE_DOCS=0 -DCONFIG_LOWBITDEPTH=1
make -j8
./aomdec ../output.ivf -o output.y4m&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-configuring" class="anchor" aria-hidden="true" href="#configuring"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Configuring&lt;/h2&gt;
&lt;p&gt;rav1e has several optional features that can be enabled by passing --features to cargo test. Passing --all-features is discouraged.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;asm - enabled by default. When enabled, assembly is built for the platforms supporting it.
&lt;ul&gt;
&lt;li&gt;It requires &lt;code&gt;nasm&lt;/code&gt; on &lt;code&gt;x86_64&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;It requires &lt;code&gt;gas&lt;/code&gt; on &lt;code&gt;aarch64&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: &lt;code&gt;SSE2&lt;/code&gt; is always enabled on &lt;code&gt;x86_64&lt;/code&gt;, &lt;code&gt;neon&lt;/code&gt; is always enabled for aarch64, you may set the environment variable &lt;code&gt;RAV1E_CPU_TARGET&lt;/code&gt; to &lt;code&gt;rust&lt;/code&gt; to disable all the assembly-optimized routines at the runtime.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-using-the-aomanalyzer" class="anchor" aria-hidden="true" href="#using-the-aomanalyzer"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Using the AOMAnalyzer&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-local-analyzer" class="anchor" aria-hidden="true" href="#local-analyzer"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Local Analyzer&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Download the &lt;a href="http://aomanalyzer.org" rel="nofollow"&gt;AOM Analyzer&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Download &lt;a href="https://people.xiph.org/~mbebenita/analyzer/inspect.js" rel="nofollow"&gt;inspect.js&lt;/a&gt; and &lt;a href="https://people.xiph.org/~mbebenita/analyzer/inspect.wasm" rel="nofollow"&gt;inspect.wasm&lt;/a&gt; and save them in the same directory.&lt;/li&gt;
&lt;li&gt;Run the analyzer: &lt;code&gt;AOMAnalyzer path_to_inspect.js output.ivf&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;&lt;a id="user-content-online-analyzer" class="anchor" aria-hidden="true" href="#online-analyzer"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Online Analyzer&lt;/h3&gt;
&lt;p&gt;If your &lt;code&gt;.ivf&lt;/code&gt; file is hosted somewhere (and CORS is enabled on your web server) you can use:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;https://arewecompressedyet.com/analyzer/?d=https://people.xiph.org/~mbebenita/analyzer/inspect.js&amp;amp;f=path_to_output.ivf
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;a id="user-content-design" class="anchor" aria-hidden="true" href="#design"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Design&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;src/context.rs - High-level functions that write symbols to the bitstream, and maintain context.&lt;/li&gt;
&lt;li&gt;src/ec.rs - Low-level implementation of the entropy coder, which directly writes the bitstream.&lt;/li&gt;
&lt;li&gt;src/lib.rs - The top level library, contains code to write headers, manage buffers, and iterate through each superblock.&lt;/li&gt;
&lt;li&gt;src/partition.rs - Functions and enums to manage partitions (subdivisions of a superblock).&lt;/li&gt;
&lt;li&gt;src/predict.rs - Intra prediction implementations.&lt;/li&gt;
&lt;li&gt;src/quantize.rs - Quantization and dequantization functions for coefficients.&lt;/li&gt;
&lt;li&gt;src/rdo.rs - RDO-related structures and distortion computation functions.&lt;/li&gt;
&lt;li&gt;src/transform/*.rs - Implementations of DCT and ADST transforms.&lt;/li&gt;
&lt;li&gt;src/util.rs - Misc utility code.&lt;/li&gt;
&lt;li&gt;src/bin/rav1e.rs - rav1e command line tool.&lt;/li&gt;
&lt;li&gt;src/bin/rav1erepl.rs - Command line tool for debugging.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-contributing" class="anchor" aria-hidden="true" href="#contributing"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contributing&lt;/h2&gt;
&lt;p&gt;Please read our guide to &lt;a href="CONTRIBUTING.md"&gt;contributing to rav1e&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-getting-in-touch" class="anchor" aria-hidden="true" href="#getting-in-touch"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Getting in Touch&lt;/h2&gt;
&lt;p&gt;Come chat with us on the IRC channel #daala on Freenode! If you don't have IRC set
up you can easily connect from your &lt;a href="http://webchat.freenode.net/?channels=%23daala" rel="nofollow"&gt;web browser&lt;/a&gt;.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>xiph</author><guid isPermaLink="false">https://github.com/xiph/rav1e</guid><pubDate>Sat, 04 Jan 2020 00:02:00 GMT</pubDate></item><item><title>JSsixtyfour/smashremix #3 in Assembly, Today</title><link>https://github.com/JSsixtyfour/smashremix</link><description>&lt;p&gt;&lt;i&gt;[No description found.]&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="txt" data-path="readme.txt"&gt;&lt;div class="plain"&gt;&lt;pre style="white-space: pre-wrap"&gt;THIS IS ONLY FOR THOSE INTERESTED IN THE SOURCE CODE OF THE MOD. PLEASE DOWNLOAD THE RELEASE VERSION BY CLICKING THE RELEASE TAB.
=======
The original xdelta will generate a smash rom that is compatible with our ASM code. Much of our edits are done within
the compressed files within the rom. If you utilize a vanilla Smash 64 rom, it will not work correctly.

You must utilize the xdelta patch to generate a good rom for Assembly.

You must place your legally acquired patched ROM in the rom folder for this to work. It must be named original.z64
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</description><author>JSsixtyfour</author><guid isPermaLink="false">https://github.com/JSsixtyfour/smashremix</guid><pubDate>Sat, 04 Jan 2020 00:03:00 GMT</pubDate></item></channel></rss>