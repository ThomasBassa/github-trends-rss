<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>GitHub Trending: Assembly, Today</title><link>https://github.com/trending/assembly?since=daily</link><description>The top repositories on GitHub for assembly, measured daily</description><pubDate>Thu, 21 Nov 2019 01:03:52 GMT</pubDate><lastBuildDate>Thu, 21 Nov 2019 01:03:52 GMT</lastBuildDate><generator>PyRSS2Gen-1.1.0</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><ttl>720</ttl><item><title>SpinalHDL/VexRiscv #1 in Assembly, Today</title><link>https://github.com/SpinalHDL/VexRiscv</link><description>&lt;p&gt;&lt;i&gt;A FPGA friendly 32 bit RISC-V CPU implementation&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h2&gt;&lt;a id="user-content-index" class="anchor" aria-hidden="true" href="#index"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Index&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#index"&gt;Index&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#description"&gt;Description&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#area-usage-and-maximal-frequency"&gt;Area usage and maximal frequency&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dependencies"&gt;Dependencies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cpu-generation"&gt;CPU generation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#regression-tests"&gt;Regression tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#interactive-debug-of-the-simulated-cpu-via-gdb-openocd-and-verilator"&gt;Interactive debug of the simulated CPU via GDB OpenOCD and Verilator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#using-Eclipse-to-run-the-software-and-debug-it"&gt;Using Eclipse to run the software and debug it&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#by-using-gnu-mcu-eclipse"&gt;By using gnu-mcu-eclipse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#by-using-zylin-plugin-old"&gt;By using Zylin plugin (old)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#briey-soc"&gt;Briey SoC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#murax-soc"&gt;Murax SoC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#running-linux"&gt;Running Linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#build-the-risc-v-gcc"&gt;Build the RISC-V GCC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cpu-parametrization-and-instantiation-example"&gt;CPU parametrization and instantiation example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#add-a-custom-instruction-to-the-cpu-via-the-plugin-system"&gt;Add a custom instruction to the CPU via the plugin system&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#adding-a-new-csr-via-the-plugin-system"&gt;Adding a new CSR via the plugin system&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cpu-clock-and-resets"&gt;CPU clock and resets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#vexriscv-architecture"&gt;VexRiscv Architecture&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#plugins"&gt;Plugins&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-description" class="anchor" aria-hidden="true" href="#description"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Description&lt;/h2&gt;
&lt;p&gt;This repository hosts a RISC-V implementation written in SpinalHDL. Here are some specs :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RV32I[M][C][A] instruction set (Atomic only inside a single core)&lt;/li&gt;
&lt;li&gt;Pipelined from 2 to 5+ stages ([Fetch*X], Decode, Execute, [Memory], [WriteBack])&lt;/li&gt;
&lt;li&gt;1.44 DMIPS/Mhz --no-inline when nearly all features are enabled (1.57 DMIPS/Mhz when the divider lookup table is enabled)&lt;/li&gt;
&lt;li&gt;Optimized for FPGA, do not use any vendor specific IP block / primitive&lt;/li&gt;
&lt;li&gt;AXI4, Avalon, wishbone ready&lt;/li&gt;
&lt;li&gt;Optional MUL/DIV extensions&lt;/li&gt;
&lt;li&gt;Optional instruction and data caches&lt;/li&gt;
&lt;li&gt;Optional hardware refilled MMU&lt;/li&gt;
&lt;li&gt;Optional debug extension allowing Eclipse debugging via a GDB &amp;gt;&amp;gt; openOCD &amp;gt;&amp;gt; JTAG connection&lt;/li&gt;
&lt;li&gt;Optional interrupts and exception handling with Machine, [Supervisor] and [User] modes as defined in the &lt;a href="https://riscv.org/specifications/privileged-isa/" rel="nofollow"&gt;RISC-V Privileged ISA Specification v1.10&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Two implementations of shift instructions: Single cycle and shiftNumber cycles&lt;/li&gt;
&lt;li&gt;Each stage can have optional bypass or interlock hazard logic&lt;/li&gt;
&lt;li&gt;Linux compatible (SoC : &lt;a href="https://github.com/enjoy-digital/linux-on-litex-vexriscv"&gt;https://github.com/enjoy-digital/linux-on-litex-vexriscv&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Zephyr compatible&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Dolu1990/FreeRTOS-RISCV"&gt;FreeRTOS port&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The hardware description of this CPU is done by using a very software oriented approach
(without any overhead in the generated hardware). Here is a list of software concepts used:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;There are very few fixed things. Nearly everything is plugin based. The PC manager is a plugin, the register file is a plugin, the hazard controller is a plugin, ...&lt;/li&gt;
&lt;li&gt;There is an automatic a tool which allows plugins to insert data in the pipeline at a given stage, and allows other plugins to read it in another stage through automatic pipelining.&lt;/li&gt;
&lt;li&gt;There is a service system which provides a very dynamic framework. For instance, a plugin could provide an exception service which can then be used by other plugins to emit exceptions from the pipeline.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There is a gitter channel for all questions about VexRiscv :&lt;br&gt;
&lt;a href="https://gitter.im/SpinalHDL/VexRiscv?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/7c72efd28eb58cc3d3de109e622a599aae46ed38/68747470733a2f2f6261646765732e6769747465722e696d2f5370696e616c48444c2f56657852697363762e737667" alt="Gitter" data-canonical-src="https://badges.gitter.im/SpinalHDL/VexRiscv.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For commercial support, please contact &lt;a href="mailto:spinalhdl@gmail.com"&gt;spinalhdl@gmail.com&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-area-usage-and-maximal-frequency" class="anchor" aria-hidden="true" href="#area-usage-and-maximal-frequency"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Area usage and maximal frequency&lt;/h2&gt;
&lt;p&gt;The following numbers were obtained by synthesizing the CPU as toplevel without any specific synthesis options to save area or to get better maximal frequency (neutral).&lt;br&gt;
The clock constraint is set to an unattainable value, which tends to increase the design area.&lt;br&gt;
The dhrystone benchmark was compiled with the &lt;code&gt;-O3 -fno-inline&lt;/code&gt; option.&lt;br&gt;
All the cached configurations have some cache trashing during the dhrystone benchmark except the &lt;code&gt;VexRiscv full max perf&lt;/code&gt; one. This of course reduces the performance. It is possible to produce
dhrystone binaries which fit inside a 4KB I$ and 4KB D$ (I already had this case once) but currently it isn't the case.&lt;br&gt;
The CPU configurations used below can be found in the &lt;code&gt;src/scala/vexriscv/demo&lt;/code&gt; directory.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;VexRiscv smallest (RV32I, 0.52 DMIPS/Mhz, no datapath bypass, no interrupt) -&amp;gt;
    Artix 7     -&amp;gt; 233 Mhz 494 LUT 505 FF
    Cyclone V   -&amp;gt; 193 Mhz 347 ALMs
    Cyclone IV  -&amp;gt; 179 Mhz 730 LUT 494 FF
    iCE40       -&amp;gt; 92 Mhz 1130 LC

VexRiscv smallest (RV32I, 0.52 DMIPS/Mhz, no datapath bypass) -&amp;gt;
    Artix 7     -&amp;gt; 232 Mhz 538 LUT 562 FF
    Cyclone V   -&amp;gt; 189 Mhz 387 ALMs
    Cyclone IV  -&amp;gt; 175 Mhz 829 LUT 550 FF
    iCE40       -&amp;gt; 85 Mhz 1292 LC

VexRiscv small and productive (RV32I, 0.82 DMIPS/Mhz)  -&amp;gt;
    Artix 7     -&amp;gt; 226 Mhz 689 LUT 531 FF
    Cyclone V   -&amp;gt; 145 Mhz 499 ALMs
    Cyclone IV  -&amp;gt; 150 Mhz 1,111 LUT 525 FF
    iCE40       -&amp;gt; 63 Mhz 1596 LC

VexRiscv small and productive with I$ (RV32I, 0.70 DMIPS/Mhz, 4KB-I$)  -&amp;gt;
    Artix 7     -&amp;gt; 230 Mhz 734 LUT 564 FF
    Cyclone V   -&amp;gt; 145 Mhz 511 ALMs
    Cyclone IV  -&amp;gt; 144 Mhz 1,145 LUT 531 FF
    iCE40       -&amp;gt; 66 Mhz 1680 LC

VexRiscv full no cache (RV32IM, 1.21 DMIPS/Mhz 2.30 Coremark/Mhz, single cycle barrel shifter, debug module, catch exceptions, static branch) -&amp;gt;
    Artix 7     -&amp;gt; 219 Mhz 1537 LUT 977 FF
    Cyclone V   -&amp;gt; 139 Mhz 958 ALMs
    Cyclone IV  -&amp;gt; 135 Mhz 2,011 LUT 968 FF

VexRiscv full (RV32IM, 1.21 DMIPS/Mhz 2.30 Coremark/Mhz with cache trashing, 4KB-I$,4KB-D$, single cycle barrel shifter, debug module, catch exceptions, static branch) -&amp;gt;
    Artix 7     -&amp;gt; 193 Mhz 1706 LUT 1172 FF
    Cyclone V   -&amp;gt; 144 Mhz 1,128 ALMs
    Cyclone IV  -&amp;gt; 133 Mhz 2,298 LUT 1,096 FF

VexRiscv full max dmips/mhz -&amp;gt; (RV32IM, 1.44 DMIPS/Mhz 2.70 Coremark/Mhz,, 16KB-I$,16KB-D$, single cycle barrel shifter, debug module, catch exceptions, dynamic branch prediction in the fetch stage, branch and shift operations done in the Execute stage) -&amp;gt;
    Artix 7     -&amp;gt; 140 Mhz 1767 LUT 1128 FF
    Cyclone V   -&amp;gt; 90 Mhz 1,089 ALMs
    Cyclone IV  -&amp;gt; 79 Mhz 2,336 LUT 1,048 FF

VexRiscv full with MMU (RV32IM, 1.24 DMIPS/Mhz 2.35 Coremark/Mhz, with cache trashing, 4KB-I$, 4KB-D$, single cycle barrel shifter, debug module, catch exceptions, dynamic branch, MMU) -&amp;gt;
    Artix 7     -&amp;gt; 161 Mhz 1985 LUT 1585 FF
    Cyclone V   -&amp;gt; 124 Mhz 1,319 ALMs
    Cyclone IV  -&amp;gt; 122 Mhz 2,710 LUT 1,501 FF

VexRiscv linux balanced (RV32IMA, 1.21 DMIPS/Mhz 2.27 Coremark/Mhz, with cache trashing, 4KB-I$, 4KB-D$, single cycle barrel shifter, catch exceptions, static branch, MMU, Supervisor, Compatible with mainstream linux) -&amp;gt;
    Artix 7     -&amp;gt; 170 Mhz 2530 LUT 2013 FF
    Cyclone V   -&amp;gt; 125 Mhz 1,618 ALMs
    Cyclone IV  -&amp;gt; 116 Mhz 3,314 LUT 2,016 FF

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The following configuration results in 1.44 DMIPS/MHz:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;5 stage : F -&amp;gt; D -&amp;gt; E -&amp;gt; M  -&amp;gt; WB&lt;/li&gt;
&lt;li&gt;single cycle ADD/SUB/Bitwise/Shift ALU&lt;/li&gt;
&lt;li&gt;branch/jump done in the E stage&lt;/li&gt;
&lt;li&gt;memory load values are bypassed in the WB stage (late result)&lt;/li&gt;
&lt;li&gt;33 cycle division with bypassing in the M stage (late result)&lt;/li&gt;
&lt;li&gt;single cycle multiplication with bypassing in the WB stage (late result)&lt;/li&gt;
&lt;li&gt;dynamic branch prediction done in the F stage with a direct mapped target buffer cache (no penalties on correct predictions)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that recently, the capability to remove the Fetch/Memory/WriteBack stage was added to reduce the area of the CPU, which end up with a smaller CPU and a better DMIPS/Mhz for the small configurations.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-dependencies" class="anchor" aria-hidden="true" href="#dependencies"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Dependencies&lt;/h2&gt;
&lt;p&gt;On Ubuntu 14 :&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; JAVA JDK 8&lt;/span&gt;
sudo add-apt-repository -y ppa:openjdk-r/ppa
sudo apt-get update
sudo apt-get install openjdk-8-jdk -y
sudo update-alternatives --config java
sudo update-alternatives --config javac

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Install SBT - https://www.scala-sbt.org/&lt;/span&gt;
&lt;span class="pl-c1"&gt;echo&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;deb https://dl.bintray.com/sbt/debian /&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;|&lt;/span&gt; sudo tee -a /etc/apt/sources.list.d/sbt.list
sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 2EE0EA64E40A89B84B2DF73499E82A75642AC823
sudo apt-get update
sudo apt-get install sbt

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Verilator (for sim only, realy need 3.9+, in general apt-get will give you 3.8)&lt;/span&gt;
sudo apt-get install git make autoconf g++ flex bison
git clone http://git.veripool.org/git/verilator   &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Only first time&lt;/span&gt;
unsetenv VERILATOR_ROOT  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; For csh; ignore error if on bash&lt;/span&gt;
&lt;span class="pl-c1"&gt;unset&lt;/span&gt; VERILATOR_ROOT  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; For bash&lt;/span&gt;
&lt;span class="pl-c1"&gt;cd&lt;/span&gt; verilator
git pull        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Make sure we're up-to-date&lt;/span&gt;
git checkout verilator_3_918
autoconf        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Create ./configure script&lt;/span&gt;
./configure
make
sudo make install&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-cpu-generation" class="anchor" aria-hidden="true" href="#cpu-generation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;CPU generation&lt;/h2&gt;
&lt;p&gt;You can find two example CPU instances in:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;src/main/scala/vexriscv/demo/GenFull.scala&lt;/li&gt;
&lt;li&gt;src/main/scala/vexriscv/demo/GenSmallest.scala&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To generate the corresponding RTL as a VexRiscv.v file, run the following commands in the root directory of this repository:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;sbt &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;runMain vexriscv.demo.GenFull&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;sbt &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;runMain vexriscv.demo.GenSmallest&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;NOTES:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It could take time the first time you run it.&lt;/li&gt;
&lt;li&gt;The VexRiscv project may need an unreleased master-head of the SpinalHDL repo. If it fails to compile, just get the SpinalHDL repository and
do a "sbt clean compile publish-local" in it as described in the dependencies chapter.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-regression-tests" class="anchor" aria-hidden="true" href="#regression-tests"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Regression tests&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://travis-ci.org/SpinalHDL/VexRiscv" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/89b084e32a788686ffcb4ed55672129b01a5f94d/68747470733a2f2f7472617669732d63692e6f72672f5370696e616c48444c2f56657852697363762e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/SpinalHDL/VexRiscv.svg?branch=master" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;To run tests (need the verilator simulator), go in the src/test/cpp/regression folder and run :&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; To test the GenFull CPU&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; (Don't worry about the CSR test not passing, basicaly the GenFull isn't the truly full version of the CPU, some CSR features are disable in it)&lt;/span&gt;
make clean run

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; To test the GenSmallest CPU&lt;/span&gt;
make clean run IBUS=SIMPLE DBUS=SIMPLE CSR=no MMU=no DEBUG_PLUGIN=no MUL=no DIV=no&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The self-test includes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ISA tests from &lt;a href="https://github.com/riscv/riscv-tests/tree/master/isa"&gt;https://github.com/riscv/riscv-tests/tree/master/isa&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Dhrystone benchmark&lt;/li&gt;
&lt;li&gt;24 FreeRTOS tests&lt;/li&gt;
&lt;li&gt;Some handwritten tests to check the CSR, debug module and MMU plugins&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can enable FreeRTOS tests by adding &lt;code&gt;FREERTOS=yes&lt;/code&gt; to the command line, but it will take time to run. Also, it uses THREAD_COUNT host CPU threads to run multiple regression in parallel.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-interactive-debug-of-the-simulated-cpu-via-gdb-openocd-and-verilator" class="anchor" aria-hidden="true" href="#interactive-debug-of-the-simulated-cpu-via-gdb-openocd-and-verilator"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Interactive debug of the simulated CPU via GDB OpenOCD and Verilator&lt;/h2&gt;
&lt;p&gt;It's as described to run tests, but you just have to add &lt;code&gt;DEBUG_PLUGIN_EXTERNAL=yes&lt;/code&gt; in the make arguments.
Work for the GenFull, but not for the GenSmallest as this configuration has no debug module.&lt;/p&gt;
&lt;p&gt;Then you can use the &lt;a href="https://github.com/SpinalHDL/openocd_riscv"&gt;https://github.com/SpinalHDL/openocd_riscv&lt;/a&gt; tool to create a GDB server connected to the target (the simulated CPU)&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt;in the VexRiscv repository, to run the simulation on which one OpenOCD can connect itself =&amp;gt;&lt;/span&gt;
sbt &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;runMain vexriscv.demo.GenFull&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-c1"&gt;cd&lt;/span&gt; src/test/cpp/regression
make run DEBUG_PLUGIN_EXTERNAL=yes

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt;In the openocd git, after building it =&amp;gt;&lt;/span&gt;
src/openocd -c &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;set VEXRISCV_YAML PATH_TO_THE_GENERATED_CPU0_YAML_FILE&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; -f tcl/target/vexriscv_sim.cfg

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt;Run a GDB session with an elf RISCV executable (GenFull CPU)&lt;/span&gt;
YourRiscvToolsPath/bin/riscv32-unknown-elf-gdb VexRiscvRepo/src/test/resources/elf/uart.elf
target remote localhost:3333
monitor reset halt
load
&lt;span class="pl-k"&gt;continue&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Now it should print messages in the Verilator simulation of the CPU&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-using-eclipse-to-run-the-software-and-debug-it" class="anchor" aria-hidden="true" href="#using-eclipse-to-run-the-software-and-debug-it"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Using Eclipse to run the software and debug it&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-by-using-gnu-mcu-eclipse" class="anchor" aria-hidden="true" href="#by-using-gnu-mcu-eclipse"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;By using gnu-mcu-eclipse&lt;/h3&gt;
&lt;p&gt;You can download releases of the IDE here : &lt;a href="https://github.com/gnu-mcu-eclipse/org.eclipse.epp.packages/releases"&gt;https://github.com/gnu-mcu-eclipse/org.eclipse.epp.packages/releases&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In the IDE, you can import a makefile project by :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;file -&amp;gt; import -&amp;gt; C/C++ -&amp;gt; existing Code as Makefile Project&lt;/li&gt;
&lt;li&gt;Select the folder which contain the makefile, select "Cross GCC" (not "RISC-V Cross GCC")&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To create a new debug configuration :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;run -&amp;gt; Debug Configurations -&amp;gt; GDB OpenOCD Debugging double click&lt;/li&gt;
&lt;li&gt;Look at &lt;a href="https://drive.google.com/open?id=1c46tyEV0xLwOsk76b0y2qqs8CYy7Zq3f" rel="nofollow"&gt;https://drive.google.com/open?id=1c46tyEV0xLwOsk76b0y2qqs8CYy7Zq3f&lt;/a&gt; for a configuration example&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-by-using-zylin-plugin-old" class="anchor" aria-hidden="true" href="#by-using-zylin-plugin-old"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;By using Zylin plugin (old)&lt;/h3&gt;
&lt;p&gt;You can use the Eclipse + Zylin embedded CDT plugin to do it (&lt;a href="http://opensource.zylin.com/embeddedcdt.html" rel="nofollow"&gt;http://opensource.zylin.com/embeddedcdt.html&lt;/a&gt;). Tested with Helios Service Release 2 (&lt;a href="http://www.Eclipse.org/downloads/download.php?file=/technology/epp/downloads/release/helios/SR2/Eclipse-cpp-helios-SR2-linux-gtk-x86_64.tar.gz" rel="nofollow"&gt;http://www.Eclipse.org/downloads/download.php?file=/technology/epp/downloads/release/helios/SR2/Eclipse-cpp-helios-SR2-linux-gtk-x86_64.tar.gz&lt;/a&gt;) and the corresponding zylin plugin.&lt;/p&gt;
&lt;p&gt;To following commands will download Eclipse and install the plugin.&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;wget http://www.eclipse.org/downloads/download.php&lt;span class="pl-k"&gt;?&lt;/span&gt;file=/technology/epp/downloads/release/helios/SR2/eclipse-cpp-helios-SR2-linux-gtk-x86_64.tar.gz
tar -xvzf download.php&lt;span class="pl-k"&gt;?&lt;/span&gt;file=%2Ftechnology%2Fepp%2Fdownloads%2Frelease%2Fhelios%2FSR2%2Feclipse-cpp-helios-SR2-linux-gtk-x86_64.tar.gz
&lt;span class="pl-c1"&gt;cd&lt;/span&gt; eclipse
./eclipse -application org.eclipse.equinox.p2.director -repository http://opensource.zylin.com/zylincdt -installIU com.zylin.cdt.feature.feature.group/&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;See &lt;a href="https://drive.google.com/drive/folders/1NseNHH05B6lmIXqQFVwK8xRjWE4ydeG-?usp=sharing" rel="nofollow"&gt;https://drive.google.com/drive/folders/1NseNHH05B6lmIXqQFVwK8xRjWE4ydeG-?usp=sharing&lt;/a&gt; to import a makefile project and create a debug configuration.&lt;/p&gt;
&lt;p&gt;Note that sometime this Eclipse need to be restarted in order to be able to place new breakpoints.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-briey-soc" class="anchor" aria-hidden="true" href="#briey-soc"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Briey SoC&lt;/h2&gt;
&lt;p&gt;As a demonstrator, a SoC named Briey is implemented in &lt;code&gt;src/main/scala/vexriscv/demo/Briey.scala&lt;/code&gt;. This SoC is very similar to
the &lt;a href="https://spinalhdl.github.io/SpinalDoc/spinal/lib/pinsec/hardware/" rel="nofollow"&gt;Pinsec SOC&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="assets/brieySoc.png?raw=true"&gt;&lt;img src="assets/brieySoc.png?raw=true" alt="Alt text" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;To generate the Briey SoC Hardware:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;sbt &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;runMain vexriscv.demo.Briey&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To run the verilator simulation of the Briey SoC which can then be connected to OpenOCD/GDB, first get those dependencies:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;sudo apt-get install build-essential xorg-dev libudev-dev libts-dev libgl1-mesa-dev libglu1-mesa-dev libasound2-dev libpulse-dev libopenal-dev libogg-dev libvorbis-dev libaudiofile-dev libpng12-dev libfreetype6-dev libusb-dev libdbus-1-dev zlib1g-dev libdirectfb-dev libsdl2-dev&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then go in &lt;code&gt;src/test/cpp/briey&lt;/code&gt; and run the simulation with (UART TX is printed in the terminal, VGA is displayed in a GUI):&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;make clean run&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To connect OpenOCD (&lt;a href="https://github.com/SpinalHDL/openocd_riscv"&gt;https://github.com/SpinalHDL/openocd_riscv&lt;/a&gt;) to the simulation :&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;src/openocd -f tcl/interface/jtag_tcp.cfg -c &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;set BRIEY_CPU0_YAML /home/spinalvm/Spinal/VexRiscv/cpu0.yaml&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; -f tcl/target/briey.cfg&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can find multiple software examples and demos here: &lt;a href="https://github.com/SpinalHDL/VexRiscvSocSoftware/tree/master/projects/briey"&gt;https://github.com/SpinalHDL/VexRiscvSocSoftware/tree/master/projects/briey&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can find some FPGA projects which instantiate the Briey SoC here (DE1-SoC, DE0-Nano): &lt;a href="https://drive.google.com/drive/folders/0B-CqLXDTaMbKZGdJZlZ5THAxRTQ?usp=sharing" rel="nofollow"&gt;https://drive.google.com/drive/folders/0B-CqLXDTaMbKZGdJZlZ5THAxRTQ?usp=sharing&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here are some measurements of Briey SoC timings and area :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    Artix 7     -&amp;gt; 186 Mhz 3138 LUT 3328 FF
    Cyclone V   -&amp;gt; 139 Mhz 2,175 ALMs
    Cyclone IV  -&amp;gt; 129 Mhz 4,337 LUT 3,170 FF
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;a id="user-content-murax-soc" class="anchor" aria-hidden="true" href="#murax-soc"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Murax SoC&lt;/h2&gt;
&lt;p&gt;Murax is a very light SoC (it fits in an ICE40 FPGA) which can work without any external components:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;VexRiscv RV32I[M]&lt;/li&gt;
&lt;li&gt;JTAG debugger (Eclipse/GDB/openocd ready)&lt;/li&gt;
&lt;li&gt;8 kB of on-chip ram&lt;/li&gt;
&lt;li&gt;Interrupt support&lt;/li&gt;
&lt;li&gt;APB bus for peripherals&lt;/li&gt;
&lt;li&gt;32 GPIO pin&lt;/li&gt;
&lt;li&gt;one 16 bits prescaler, two 16 bits timers&lt;/li&gt;
&lt;li&gt;one UART with tx/rx fifo&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Depending the CPU configuration, on the ICE40-hx8k FPGA with icestorm for synthesis, the full SoC has the following area/performance :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RV32I interlocked stages =&amp;gt; 51 Mhz, 2387 LC 0.45 DMIPS/Mhz&lt;/li&gt;
&lt;li&gt;RV32I bypassed stages    =&amp;gt; 45 Mhz, 2718 LC 0.65 DMIPS/Mhz&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Its implementation can be found here: &lt;code&gt;src/main/scala/vexriscv/demo/Murax.scala&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To generate the Murax SoC Hardware :&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; To generate the SoC without any content in the ram&lt;/span&gt;
sbt &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;runMain vexriscv.demo.Murax&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; To generate the SoC with a demo program already in ram&lt;/span&gt;
sbt &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;runMain vexriscv.demo.MuraxWithRamInit&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The demo program included by default with &lt;code&gt;MuraxWithRamInit&lt;/code&gt; will blink the
LEDs and echo characters received on the UART back to the user. To see this
when running the Verilator sim, type some text and press enter.&lt;/p&gt;
&lt;p&gt;Then go in src/test/cpp/murax and run the simulation with :&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;make clean run&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To connect OpenOCD (&lt;a href="https://github.com/SpinalHDL/openocd_riscv"&gt;https://github.com/SpinalHDL/openocd_riscv&lt;/a&gt;) to the simulation :&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;src/openocd -f tcl/interface/jtag_tcp.cfg -c &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;set MURAX_CPU0_YAML /home/spinalvm/Spinal/VexRiscv/cpu0.yaml&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; -f tcl/target/murax.cfg&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can find multiple software examples and demos here: &lt;a href="https://github.com/SpinalHDL/VexRiscvSocSoftware/tree/master/projects/murax"&gt;https://github.com/SpinalHDL/VexRiscvSocSoftware/tree/master/projects/murax&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here are some timing and area measurements of the Murax SoC:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Murax interlocked stages (0.45 DMIPS/Mhz, 8 bits GPIO) -&amp;gt;
  Artix 7    -&amp;gt; 215 Mhz 1044 LUT 1202 FF
  Cyclone V  -&amp;gt; 173 Mhz 737 ALMs
  Cyclone IV -&amp;gt; 144 Mhz 1,484 LUT 1,206 FF
  iCE40      -&amp;gt;  64 Mhz 2422 LC (nextpnr)

MuraxFast bypassed stages (0.65 DMIPS/Mhz, 8 bits GPIO) -&amp;gt;
  Artix 7    -&amp;gt; 229 Mhz 1269 LUT 1302 FF
  Cyclone V  -&amp;gt; 159 Mhz 864 ALMs
  Cyclone IV -&amp;gt; 137 Mhz 1,688 LUT 1,241 FF
  iCE40      -&amp;gt;  66 Mhz 2799 LC (nextpnr)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Some scripts to generate the SoC and call the icestorm toolchain can be found here: &lt;code&gt;scripts/Murax/&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;A toplevel simulation testbench with the same features + a GUI are implemented with SpinalSim. You can find it in &lt;code&gt;src/test/scala/vexriscv/MuraxSim.scala&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To run it :&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; This will generate the Murax RTL + run its testbench. You need Verilator 3.9xx installated.&lt;/span&gt;
sbt &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;test:runMain vexriscv.MuraxSim&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-running-linux" class="anchor" aria-hidden="true" href="#running-linux"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Running Linux&lt;/h2&gt;
&lt;p&gt;A default configuration is located in src/main/scala/vexriscv/demo/Linux.scala&lt;/p&gt;
&lt;p&gt;This file also contains&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The commands to compile the buildroot image&lt;/li&gt;
&lt;li&gt;How to run the Verilator simulation in interative mode&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There is currently no SoC to run it on hardware, it is WIP. But the CPU simulation can already boot linux and run user space application (even python).&lt;/p&gt;
&lt;p&gt;Note that VexRiscv can run Linux on both cache full and cache less design.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-build-the-risc-v-gcc" class="anchor" aria-hidden="true" href="#build-the-risc-v-gcc"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Build the RISC-V GCC&lt;/h2&gt;
&lt;p&gt;A prebuild GCC toolsuite can be found here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.sifive.com/products/tools/" rel="nofollow"&gt;https://www.sifive.com/products/tools/&lt;/a&gt;  =&amp;gt; SiFive GNU Embedded Toolchain&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The VexRiscvSocSoftware makefiles are expecting to find this prebuild version in /opt/riscv/&lt;strong&gt;contentOfThisPreBuild&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;wget https://static.dev.sifive.com/dev-tools/riscv64-unknown-elf-gcc-20171231-x86_64-linux-centos6.tar.gz
tar -xzvf riscv64-unknown-elf-gcc-20171231-x86_64-linux-centos6.tar.gz
sudo mv riscv64-unknown-elf-gcc-20171231-x86_64-linux-centos6 /opt/riscv64-unknown-elf-gcc-20171231-x86_64-linux-centos6
sudo mv /opt/riscv64-unknown-elf-gcc-20171231-x86_64-linux-centos6 /opt/riscv
&lt;span class="pl-c1"&gt;echo&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;export PATH=/opt/riscv/bin:$PATH&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-k"&gt;~&lt;/span&gt;/.bashrc&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you want to compile the rv32i and rv32im GCC toolchain from source code and install them in &lt;code&gt;/opt/&lt;/code&gt;, do the following (will take one hour):&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Be carefull, sometime the git clone has issue to successfully clone riscv-gnu-toolchain.&lt;/span&gt;
sudo apt-get install autoconf automake autotools-dev curl libmpc-dev libmpfr-dev libgmp-dev gawk build-essential bison flex texinfo gperf libtool patchutils bc zlib1g-dev -y

git clone --recursive https://github.com/riscv/riscv-gnu-toolchain riscv-gnu-toolchain
&lt;span class="pl-c1"&gt;cd&lt;/span&gt; riscv-gnu-toolchain

&lt;span class="pl-c1"&gt;echo&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Starting RISC-V Toolchain build process&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;

ARCH=rv32im
rmdir -rf &lt;span class="pl-smi"&gt;$ARCH&lt;/span&gt;
mkdir &lt;span class="pl-smi"&gt;$ARCH&lt;/span&gt;&lt;span class="pl-k"&gt;;&lt;/span&gt; &lt;span class="pl-c1"&gt;cd&lt;/span&gt; &lt;span class="pl-smi"&gt;$ARCH&lt;/span&gt;
../configure  --prefix=/opt/&lt;span class="pl-smi"&gt;$ARCH&lt;/span&gt; --with-arch=&lt;span class="pl-smi"&gt;$ARCH&lt;/span&gt; --with-abi=ilp32
sudo make -j4
&lt;span class="pl-c1"&gt;cd&lt;/span&gt; ..


ARCH=rv32i
rmdir -rf &lt;span class="pl-smi"&gt;$ARCH&lt;/span&gt;
mkdir &lt;span class="pl-smi"&gt;$ARCH&lt;/span&gt;&lt;span class="pl-k"&gt;;&lt;/span&gt; &lt;span class="pl-c1"&gt;cd&lt;/span&gt; &lt;span class="pl-smi"&gt;$ARCH&lt;/span&gt;
../configure  --prefix=/opt/&lt;span class="pl-smi"&gt;$ARCH&lt;/span&gt; --with-arch=&lt;span class="pl-smi"&gt;$ARCH&lt;/span&gt; --with-abi=ilp32
sudo make -j4
&lt;span class="pl-c1"&gt;cd&lt;/span&gt; ..

&lt;span class="pl-c1"&gt;echo&lt;/span&gt; -e &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-cce"&gt;\\&lt;/span&gt;nRISC-V Toolchain installation completed!&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-cpu-parametrization-and-instantiation-example" class="anchor" aria-hidden="true" href="#cpu-parametrization-and-instantiation-example"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;CPU parametrization and instantiation example&lt;/h2&gt;
&lt;p&gt;You can find many examples of different configurations in the &lt;a href="https://github.com/SpinalHDL/VexRiscv/tree/master/src/main/scala/vexriscv/demo"&gt;https://github.com/SpinalHDL/VexRiscv/tree/master/src/main/scala/vexriscv/demo&lt;/a&gt; folder.&lt;/p&gt;
&lt;p&gt;Here is one such example:&lt;/p&gt;
&lt;div class="highlight highlight-source-scala"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;vexriscv&lt;/span&gt;.&lt;span class="pl-en"&gt;_&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;vexriscv&lt;/span&gt;.&lt;span class="pl-en"&gt;plugin&lt;/span&gt;.&lt;span class="pl-en"&gt;_&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;Instanciate one VexRiscv&lt;/span&gt;
&lt;span class="pl-k"&gt;val&lt;/span&gt; &lt;span class="pl-smi"&gt;cpu&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;new&lt;/span&gt; &lt;span class="pl-en"&gt;VexRiscv&lt;/span&gt;(
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;Provide a configuration instance&lt;/span&gt;
  config &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;VexRiscvConfig&lt;/span&gt;(
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;Provide a list of plugins which will futher add their logic into the CPU&lt;/span&gt;
    plugins &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;List&lt;/span&gt;(
      &lt;span class="pl-k"&gt;new&lt;/span&gt; &lt;span class="pl-en"&gt;IBusSimplePlugin&lt;/span&gt;(
        resetVector &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;0x00000000l&lt;/span&gt;,
        cmdForkOnSecondStage &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;,
        cmdForkPersistence  &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;
      ),
      &lt;span class="pl-k"&gt;new&lt;/span&gt; &lt;span class="pl-en"&gt;DBusSimplePlugin&lt;/span&gt;(
        catchAddressMisaligned &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;false&lt;/span&gt;,
        catchAccessFault &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;false&lt;/span&gt;
      ),
      &lt;span class="pl-k"&gt;new&lt;/span&gt; &lt;span class="pl-en"&gt;DecoderSimplePlugin&lt;/span&gt;(
        catchIllegalInstruction &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;false&lt;/span&gt;
      ),
      &lt;span class="pl-k"&gt;new&lt;/span&gt; &lt;span class="pl-en"&gt;RegFilePlugin&lt;/span&gt;(
        regFileReadyKind &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;Plugin&lt;/span&gt;.&lt;span class="pl-en"&gt;SYNC&lt;/span&gt;,
        zeroBoot &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;
      ),
      &lt;span class="pl-k"&gt;new&lt;/span&gt; &lt;span class="pl-en"&gt;IntAluPlugin&lt;/span&gt;,
      &lt;span class="pl-k"&gt;new&lt;/span&gt; &lt;span class="pl-en"&gt;SrcPlugin&lt;/span&gt;(
        separatedAddSub &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;false&lt;/span&gt;,
        executeInsertion &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;false&lt;/span&gt;
      ),
      &lt;span class="pl-k"&gt;new&lt;/span&gt; &lt;span class="pl-en"&gt;LightShifterPlugin&lt;/span&gt;,
      &lt;span class="pl-k"&gt;new&lt;/span&gt; &lt;span class="pl-en"&gt;HazardSimplePlugin&lt;/span&gt;(
        bypassExecute           &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;false&lt;/span&gt;,
        bypassMemory            &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;false&lt;/span&gt;,
        bypassWriteBack         &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;false&lt;/span&gt;,
        bypassWriteBackBuffer   &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;false&lt;/span&gt;
      ),
      &lt;span class="pl-k"&gt;new&lt;/span&gt; &lt;span class="pl-en"&gt;BranchPlugin&lt;/span&gt;(
        earlyBranch &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;false&lt;/span&gt;,
        catchAddressMisaligned &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;false&lt;/span&gt;
      ),
      &lt;span class="pl-k"&gt;new&lt;/span&gt; &lt;span class="pl-en"&gt;YamlPlugin&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;cpu0.yaml&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    )
  )
)&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-add-a-custom-instruction-to-the-cpu-via-the-plugin-system" class="anchor" aria-hidden="true" href="#add-a-custom-instruction-to-the-cpu-via-the-plugin-system"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Add a custom instruction to the CPU via the plugin system&lt;/h2&gt;
&lt;p&gt;Here is an example of a simple plugin which adds a simple SIMD_ADD instruction:&lt;/p&gt;
&lt;div class="highlight highlight-source-scala"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;spinal&lt;/span&gt;.&lt;span class="pl-en"&gt;core&lt;/span&gt;.&lt;span class="pl-en"&gt;_&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;vexriscv&lt;/span&gt;.&lt;span class="pl-en"&gt;plugin&lt;/span&gt;.&lt;span class="pl-en"&gt;Plugin&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;vexriscv&lt;/span&gt;.{&lt;span class="pl-en"&gt;Stageable&lt;/span&gt;, &lt;span class="pl-en"&gt;DecoderService&lt;/span&gt;, &lt;span class="pl-en"&gt;VexRiscv&lt;/span&gt;}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;This plugin example will add a new instruction named SIMD_ADD which do the following :&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;RD : Regfile Destination, RS : Regfile Source&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;RD( 7 downto  0) = RS1( 7 downto  0) + RS2( 7 downto  0)&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;RD(16 downto  8) = RS1(16 downto  8) + RS2(16 downto  8)&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;RD(23 downto 16) = RS1(23 downto 16) + RS2(23 downto 16)&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;RD(31 downto 24) = RS1(31 downto 24) + RS2(31 downto 24)&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;Instruction encoding :&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;0000011----------000-----0110011&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;       |RS2||RS1|   |RD |&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;Note :  RS1, RS2, RD positions follow the RISC-V spec and are common for all instruction of the ISA&lt;/span&gt;

&lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;SimdAddPlugin&lt;/span&gt; &lt;span class="pl-k"&gt;extends&lt;/span&gt; &lt;span class="pl-e"&gt;Plugin&lt;/span&gt;[&lt;span class="pl-en"&gt;VexRiscv&lt;/span&gt;]{
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;Define the concept of IS_SIMD_ADD signals, which specify if the current instruction is destined for ths plugin&lt;/span&gt;
  &lt;span class="pl-k"&gt;object&lt;/span&gt; &lt;span class="pl-en"&gt;IS_SIMD_ADD&lt;/span&gt; &lt;span class="pl-k"&gt;extends&lt;/span&gt; &lt;span class="pl-e"&gt;Stageable&lt;/span&gt;(&lt;span class="pl-en"&gt;Bool&lt;/span&gt;)

  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;Callback to setup the plugin and ask for different services&lt;/span&gt;
  &lt;span class="pl-k"&gt;override&lt;/span&gt; &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;setup&lt;/span&gt;(&lt;span class="pl-v"&gt;pipeline&lt;/span&gt;: &lt;span class="pl-en"&gt;VexRiscv&lt;/span&gt;)&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-k"&gt;Unit&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; {
    &lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;pipeline&lt;/span&gt;.&lt;span class="pl-en"&gt;config&lt;/span&gt;.&lt;span class="pl-en"&gt;_&lt;/span&gt;

    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;Retrieve the DecoderService instance&lt;/span&gt;
    &lt;span class="pl-k"&gt;val&lt;/span&gt; &lt;span class="pl-smi"&gt;decoderService&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; pipeline.service(&lt;span class="pl-c1"&gt;classOf&lt;/span&gt;[&lt;span class="pl-en"&gt;DecoderService&lt;/span&gt;])

    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;Specify the IS_SIMD_ADD default value when instruction are decoded&lt;/span&gt;
    decoderService.addDefault(&lt;span class="pl-en"&gt;IS_SIMD_ADD&lt;/span&gt;, &lt;span class="pl-en"&gt;False&lt;/span&gt;)

    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;Specify the instruction decoding which should be applied when the instruction match the 'key' parttern&lt;/span&gt;
    decoderService.add(
      &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;Bit pattern of the new SIMD_ADD instruction&lt;/span&gt;
      key &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;M&lt;/span&gt;&lt;span class="pl-s"&gt;"&lt;/span&gt;&lt;span class="pl-s"&gt;0000011----------000-----0110011&lt;/span&gt;&lt;span class="pl-s"&gt;"&lt;/span&gt;,

      &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;Decoding specification when the 'key' pattern is recognized in the instruction&lt;/span&gt;
      &lt;span class="pl-en"&gt;List&lt;/span&gt;(
        &lt;span class="pl-en"&gt;IS_SIMD_ADD&lt;/span&gt;              &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;True&lt;/span&gt;,
        &lt;span class="pl-en"&gt;REGFILE_WRITE_VALID&lt;/span&gt;      &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;True&lt;/span&gt;, &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;Enable the register file write&lt;/span&gt;
        &lt;span class="pl-en"&gt;BYPASSABLE_EXECUTE_STAGE&lt;/span&gt; &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;True&lt;/span&gt;, &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;Notify the hazard management unit that the instruction result is already accessible in the EXECUTE stage (Bypass ready)&lt;/span&gt;
        &lt;span class="pl-en"&gt;BYPASSABLE_MEMORY_STAGE&lt;/span&gt;  &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;True&lt;/span&gt;, &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;Same as above but for the memory stage&lt;/span&gt;
        &lt;span class="pl-en"&gt;RS1_USE&lt;/span&gt;                  &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;True&lt;/span&gt;, &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;Notify the hazard management unit that this instruction use the RS1 value&lt;/span&gt;
        &lt;span class="pl-en"&gt;RS2_USE&lt;/span&gt;                  &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;True&lt;/span&gt;  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;Same than above but for RS2.&lt;/span&gt;
      )
    )
  }

  &lt;span class="pl-k"&gt;override&lt;/span&gt; &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;build&lt;/span&gt;(&lt;span class="pl-v"&gt;pipeline&lt;/span&gt;: &lt;span class="pl-en"&gt;VexRiscv&lt;/span&gt;)&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-k"&gt;Unit&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; {
    &lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;pipeline&lt;/span&gt;.&lt;span class="pl-en"&gt;_&lt;/span&gt;
    &lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;pipeline&lt;/span&gt;.&lt;span class="pl-en"&gt;config&lt;/span&gt;.&lt;span class="pl-en"&gt;_&lt;/span&gt;

    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;Add a new scope on the execute stage (used to give a name to signals)&lt;/span&gt;
    execute plug &lt;span class="pl-k"&gt;new&lt;/span&gt; &lt;span class="pl-en"&gt;Area&lt;/span&gt; {
      &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;Define some signals used internally to the plugin&lt;/span&gt;
      &lt;span class="pl-k"&gt;val&lt;/span&gt; &lt;span class="pl-smi"&gt;rs1&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; execute.input(&lt;span class="pl-en"&gt;RS1&lt;/span&gt;).asUInt
      &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;32 bits UInt value of the regfile[RS1]&lt;/span&gt;
      &lt;span class="pl-k"&gt;val&lt;/span&gt; &lt;span class="pl-smi"&gt;rs2&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; execute.input(&lt;span class="pl-en"&gt;RS2&lt;/span&gt;).asUInt
      &lt;span class="pl-k"&gt;val&lt;/span&gt; &lt;span class="pl-smi"&gt;rd&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;UInt&lt;/span&gt;(&lt;span class="pl-c1"&gt;32&lt;/span&gt; bits)

      &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;Do some computation&lt;/span&gt;
      rd(&lt;span class="pl-c1"&gt;7&lt;/span&gt; downto &lt;span class="pl-c1"&gt;0&lt;/span&gt;) &lt;span class="pl-k"&gt;:&lt;/span&gt;&lt;span class="pl-k"&gt;=&lt;/span&gt; rs1(&lt;span class="pl-c1"&gt;7&lt;/span&gt; downto &lt;span class="pl-c1"&gt;0&lt;/span&gt;) &lt;span class="pl-k"&gt;+&lt;/span&gt; rs2(&lt;span class="pl-c1"&gt;7&lt;/span&gt; downto &lt;span class="pl-c1"&gt;0&lt;/span&gt;)
      rd(&lt;span class="pl-c1"&gt;16&lt;/span&gt; downto &lt;span class="pl-c1"&gt;8&lt;/span&gt;) &lt;span class="pl-k"&gt;:&lt;/span&gt;&lt;span class="pl-k"&gt;=&lt;/span&gt; rs1(&lt;span class="pl-c1"&gt;16&lt;/span&gt; downto &lt;span class="pl-c1"&gt;8&lt;/span&gt;) &lt;span class="pl-k"&gt;+&lt;/span&gt; rs2(&lt;span class="pl-c1"&gt;16&lt;/span&gt; downto &lt;span class="pl-c1"&gt;8&lt;/span&gt;)
      rd(&lt;span class="pl-c1"&gt;23&lt;/span&gt; downto &lt;span class="pl-c1"&gt;16&lt;/span&gt;) &lt;span class="pl-k"&gt;:&lt;/span&gt;&lt;span class="pl-k"&gt;=&lt;/span&gt; rs1(&lt;span class="pl-c1"&gt;23&lt;/span&gt; downto &lt;span class="pl-c1"&gt;16&lt;/span&gt;) &lt;span class="pl-k"&gt;+&lt;/span&gt; rs2(&lt;span class="pl-c1"&gt;23&lt;/span&gt; downto &lt;span class="pl-c1"&gt;16&lt;/span&gt;)
      rd(&lt;span class="pl-c1"&gt;31&lt;/span&gt; downto &lt;span class="pl-c1"&gt;24&lt;/span&gt;) &lt;span class="pl-k"&gt;:&lt;/span&gt;&lt;span class="pl-k"&gt;=&lt;/span&gt; rs1(&lt;span class="pl-c1"&gt;31&lt;/span&gt; downto &lt;span class="pl-c1"&gt;24&lt;/span&gt;) &lt;span class="pl-k"&gt;+&lt;/span&gt; rs2(&lt;span class="pl-c1"&gt;31&lt;/span&gt; downto &lt;span class="pl-c1"&gt;24&lt;/span&gt;)

      &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;When the instruction is a SIMD_ADD one, then write the result into the register file data path.&lt;/span&gt;
      when(execute.input(&lt;span class="pl-en"&gt;IS_SIMD_ADD&lt;/span&gt;)) {
        execute.output(&lt;span class="pl-en"&gt;REGFILE_WRITE_DATA&lt;/span&gt;) &lt;span class="pl-k"&gt;:&lt;/span&gt;&lt;span class="pl-k"&gt;=&lt;/span&gt; rd.asBits
      }
    }
  }
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you want to add this plugin to a given CPU, you just need to add it to its parameterized plugin list.&lt;/p&gt;
&lt;p&gt;This example is a very simple one, but each plugin can really have access to the whole CPU:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Halt a given stage of the CPU&lt;/li&gt;
&lt;li&gt;Unschedule instructions&lt;/li&gt;
&lt;li&gt;Emit an exception&lt;/li&gt;
&lt;li&gt;Introduce new instruction decoding specification&lt;/li&gt;
&lt;li&gt;Ask to jump the PC somewhere&lt;/li&gt;
&lt;li&gt;Read signals published by other plugins&lt;/li&gt;
&lt;li&gt;override published signals values&lt;/li&gt;
&lt;li&gt;Provide an alternative implementation&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As a demonstrator, this SimdAddPlugin was integrated in the &lt;code&gt;src/main/scala/vexriscv/demo/GenCustomSimdAdd.scala&lt;/code&gt; CPU configuration
and is self-tested by the &lt;code&gt;src/test/cpp/custom/simd_add&lt;/code&gt; application by running the following commands :&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Generate the CPU&lt;/span&gt;
sbt &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;runMain vexriscv.demo.GenCustomSimdAdd&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;

&lt;span class="pl-c1"&gt;cd&lt;/span&gt; src/test/cpp/regression/

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Optionally add TRACE=yes if you want to get the VCD waveform from the simulation.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Also you have to know that by default, the testbench introduce instruction/data bus stall.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Note the CUSTOM_SIMD_ADD flag is set to yes.&lt;/span&gt;
make clean run IBUS=SIMPLE DBUS=SIMPLE CSR=no MMU=no DEBUG_PLUGIN=no MUL=no DIV=no DHRYSTONE=no REDO=2 CUSTOM_SIMD_ADD=yes&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To retrieve the plugin related signals in your waveform viewer, just filter with &lt;code&gt;simd&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-adding-a-new-csr-via-the-plugin-system" class="anchor" aria-hidden="true" href="#adding-a-new-csr-via-the-plugin-system"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Adding a new CSR via the plugin system&lt;/h2&gt;
&lt;p&gt;Here are two examples about how to add a custom CSR to the CPU via the plugin system:
&lt;a href="https://github.com/SpinalHDL/VexRiscv/blob/master/src/main/scala/vexriscv/demo/CustomCsrDemoPlugin.scala"&gt;https://github.com/SpinalHDL/VexRiscv/blob/master/src/main/scala/vexriscv/demo/CustomCsrDemoPlugin.scala&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The first one (&lt;code&gt;CustomCsrDemoPlugin&lt;/code&gt;) adds an instruction counter and a clock cycle counter into the CSR mapping (and also do tricky stuff as a demonstration).&lt;/p&gt;
&lt;p&gt;The second one (&lt;code&gt;CustomCsrDemoGpioPlugin&lt;/code&gt;) creates a GPIO peripheral directly mapped into the CSR.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-cpu-clock-and-resets" class="anchor" aria-hidden="true" href="#cpu-clock-and-resets"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;CPU clock and resets&lt;/h2&gt;
&lt;p&gt;Without the debug plugin, the CPU will have a standard &lt;code&gt;clk&lt;/code&gt; input and a &lt;code&gt;reset&lt;/code&gt; input. But with the debug plugin the situation is the following :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;clk : As before, the clock which drive the whole CPU design, including the debug logic&lt;/li&gt;
&lt;li&gt;reset : Reset all the CPU states excepted the debug logics&lt;/li&gt;
&lt;li&gt;debugReset : Reset the debug logic of the CPU&lt;/li&gt;
&lt;li&gt;debug_resetOut : a CPU output signal which allows the JTAG to reset the CPU + the memory interconnect + the peripherals&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So here is the reset interconnect in case you use the debug plugin :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;                                VexRiscv
                            +------------------+
                            |                  |
toplevelReset &amp;gt;----+--------&amp;gt; debugReset       |
                   |        |                  |
                   |  +-----&amp;lt; debug_resetOut   |
                   |  |     |                  |
                   +--or&amp;gt;-+-&amp;gt; reset            |
                          | |                  |
                          | +------------------+
                          |
                          +-&amp;gt; Interconnect / Peripherals
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;a id="user-content-vexriscv-architecture" class="anchor" aria-hidden="true" href="#vexriscv-architecture"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;VexRiscv Architecture&lt;/h2&gt;
&lt;p&gt;VexRiscv is implemented via a 5 stage in-order pipeline on which many optional and complementary plugins add functionalities to provide a functional RISC-V CPU.
This approach is completely unconventional and only possible through meta hardware description languages (SpinalHDL in the current case) but has proven its advantages
via the VexRiscv implementation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You can swap/turn on/turn off parts of the CPU directly via the plugin system&lt;/li&gt;
&lt;li&gt;You can add new functionalities/instruction without having to modify any sources code of the CPU&lt;/li&gt;
&lt;li&gt;It allows the CPU configuration to cover a very large spectrum of implementation without cooking spaghetti code&lt;/li&gt;
&lt;li&gt;It allows your code base to truly produce a parametrized CPU design&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you generate the CPU without any plugin, it will only contain the definition of the 5 pipeline stages and their basic arbitration, but nothing else,
as everything else, including the program counter is added into the CPU via plugins.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-plugins" class="anchor" aria-hidden="true" href="#plugins"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Plugins&lt;/h3&gt;
&lt;p&gt;This chapter describes plugins currently implemented.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#ibussimpleplugin"&gt;IBusSimplePlugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ibuscachedplugin"&gt;IBusCachedPlugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#decodersimpleplugin"&gt;DecoderSimplePlugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#regfileplugin"&gt;RegFilePlugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#hazardsimpleplugin"&gt;HazardSimplePlugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#srcplugin"&gt;SrcPlugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#intaluplugin"&gt;IntAluPlugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#lightshifterplugin"&gt;LightShifterPlugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#fullbarrelshifterplugin"&gt;FullBarrelShifterPlugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#branchplugin"&gt;BranchPlugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dbussimpleplugin"&gt;DBusSimplePlugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dbuscachedplugin"&gt;DBusCachedPlugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#mulplugin"&gt;MulPlugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#divplugin"&gt;DivPlugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#muldiviterativeplugin"&gt;MulDivIterativePlugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#csrplugin"&gt;CsrPlugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#staticmemorytranslatorplugin"&gt;StaticMemoryTranslatorPlugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#memorytranslatorplugin"&gt;MemoryTranslatorPlugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#debugplugin"&gt;DebugPlugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#yamlplugin"&gt;YamlPlugin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a id="user-content-ibussimpleplugin" class="anchor" aria-hidden="true" href="#ibussimpleplugin"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;IBusSimplePlugin&lt;/h4&gt;
&lt;p&gt;This plugin implement the CPU frontend (instruction fetch) via a very simple and neutral memory interface going outside the CPU.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Parameters&lt;/th&gt;
&lt;th&gt;type&lt;/th&gt;
&lt;th&gt;description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;catchAccessFault&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;When true, an instruction read response with read error asserted results in a CPU exception trap.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;resetVector&lt;/td&gt;
&lt;td&gt;BigInt&lt;/td&gt;
&lt;td&gt;Address of the program counter after the reset.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cmdForkOnSecondStage&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;When false, branches immediately update the program counter. This minimizes branch penalties but might reduce FMax because the instruction bus address signal is a combinatorial path. When true, this combinatorial path is removed and the program counter is updated one cycle after a branch is detected. While FMax may improve, an additional branch penalty will be incurred as well.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cmdForkPersistence&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;When false, requests on the iBus can disappear/change before they are acknowledged. This reduces area but isn't safe/supported by many arbitration/slaves. When true, once initiated, iBus requests will stay until they are acknowledged.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;compressedGen&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;Enable RISC-V compressed instruction (RVC) support.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;busLatencyMin&lt;/td&gt;
&lt;td&gt;Int&lt;/td&gt;
&lt;td&gt;Specifies the minimal latency between the iBus.cmd and iBus.rsp. A corresponding number of stages are added to the frontend to keep the IPC to 1.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;injectorStage&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;When true, a stage between the frontend and the decode stage of the CPU is added to improve FMax. (busLatencyMin + injectorStage) should be at least two.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;prediction&lt;/td&gt;
&lt;td&gt;BranchPrediction&lt;/td&gt;
&lt;td&gt;Can be set to NONE/STATIC/DYNAMIC/DYNAMIC_TARGET to specify the branch predictor implementation. See below for more details.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;historyRamSizeLog2&lt;/td&gt;
&lt;td&gt;Int&lt;/td&gt;
&lt;td&gt;Specify the number of entries in the direct mapped prediction cache of DYNAMIC/DYNAMIC_TARGET implementation. 2 pow historyRamSizeLog2 entries.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Here is the SimpleBus interface definition:&lt;/p&gt;
&lt;div class="highlight highlight-source-scala"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;IBusSimpleCmd&lt;/span&gt;() &lt;span class="pl-k"&gt;extends&lt;/span&gt; &lt;span class="pl-e"&gt;Bundle&lt;/span&gt;{
  &lt;span class="pl-k"&gt;val&lt;/span&gt; &lt;span class="pl-smi"&gt;pc&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;UInt&lt;/span&gt;(&lt;span class="pl-c1"&gt;32&lt;/span&gt; bits)
}

&lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;IBusSimpleRsp&lt;/span&gt;() &lt;span class="pl-k"&gt;extends&lt;/span&gt; &lt;span class="pl-e"&gt;Bundle&lt;/span&gt; &lt;span class="pl-k"&gt;with&lt;/span&gt; &lt;span class="pl-e"&gt;IMasterSlave&lt;/span&gt;{
  &lt;span class="pl-k"&gt;val&lt;/span&gt; &lt;span class="pl-smi"&gt;error&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;Bool&lt;/span&gt;
  &lt;span class="pl-k"&gt;val&lt;/span&gt; &lt;span class="pl-smi"&gt;inst&lt;/span&gt;  &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;Bits&lt;/span&gt;(&lt;span class="pl-c1"&gt;32&lt;/span&gt; bits)

  &lt;span class="pl-k"&gt;override&lt;/span&gt; &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;asMaster&lt;/span&gt;()&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-k"&gt;Unit&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; {
    out(error,inst)
  }
}

&lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;IBusSimpleBus&lt;/span&gt;(&lt;span class="pl-v"&gt;interfaceKeepData&lt;/span&gt; : &lt;span class="pl-k"&gt;Boolean&lt;/span&gt;) &lt;span class="pl-k"&gt;extends&lt;/span&gt; &lt;span class="pl-e"&gt;Bundle&lt;/span&gt; &lt;span class="pl-k"&gt;with&lt;/span&gt; &lt;span class="pl-e"&gt;IMasterSlave&lt;/span&gt;{
  &lt;span class="pl-k"&gt;var&lt;/span&gt; &lt;span class="pl-smi"&gt;cmd&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;Stream&lt;/span&gt;(&lt;span class="pl-en"&gt;IBusSimpleCmd&lt;/span&gt;())
  &lt;span class="pl-k"&gt;var&lt;/span&gt; &lt;span class="pl-smi"&gt;rsp&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;Flow&lt;/span&gt;(&lt;span class="pl-en"&gt;IBusSimpleRsp&lt;/span&gt;())

  &lt;span class="pl-k"&gt;override&lt;/span&gt; &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;asMaster&lt;/span&gt;()&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-k"&gt;Unit&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; {
    master(cmd)
    slave(rsp)
  }
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt; : Checkout the cmdForkPersistence parameter, because if it's not set, it can break the iBus compatibility with your memory system (unless you externaly add some buffers)&lt;/p&gt;
&lt;p&gt;Setting cmdForkPersistence and cmdForkOnSecondStage improves iBus cmd timings.&lt;/p&gt;
&lt;p&gt;The iBusSimplePlugin includes bridges to convert from the IBusSimpleBus to AXI4, Avalon, and Wishbone interfaces.&lt;/p&gt;
&lt;p&gt;This plugin implements a jump interface that allows all other plugins to issue a jump:&lt;/p&gt;
&lt;div class="highlight highlight-source-scala"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;trait&lt;/span&gt; &lt;span class="pl-en"&gt;JumpService&lt;/span&gt;{
  &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;createJumpInterface&lt;/span&gt;(&lt;span class="pl-v"&gt;stage&lt;/span&gt; : &lt;span class="pl-en"&gt;Stage&lt;/span&gt;) &lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-en"&gt;Flow&lt;/span&gt;[&lt;span class="pl-en"&gt;UInt&lt;/span&gt;]
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The stage argument specifies the stage from which the jump is asked. This allows the PcManagerSimplePlugin plugin to manage priorities between jump requests from
diffent stages.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-ibuscachedplugin" class="anchor" aria-hidden="true" href="#ibuscachedplugin"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;IBusCachedPlugin&lt;/h4&gt;
&lt;p&gt;Simple and light multi-way instruction cache.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Parameters&lt;/th&gt;
&lt;th&gt;type&lt;/th&gt;
&lt;th&gt;description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;resetVector&lt;/td&gt;
&lt;td&gt;BigInt&lt;/td&gt;
&lt;td&gt;Address of the program counter after the reset.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;relaxedPcCalculation&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;When false, branches immediately update the program counter. This minimizes branch penalties but might reduce FMax because the instruction bus address signal is a combinatorial path. When true, this combinatorial path is removed and the program counter is updated one cycle after a branch is detected. While FMax may improve, an additional branch penalty will be incurred as well.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;prediction&lt;/td&gt;
&lt;td&gt;BranchPrediction&lt;/td&gt;
&lt;td&gt;Can be set to NONE/STATIC/DYNAMIC/DYNAMIC_TARGET to specify the branch predictor implementation. See below for more details.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;historyRamSizeLog2&lt;/td&gt;
&lt;td&gt;Int&lt;/td&gt;
&lt;td&gt;Specify the number of entries in the direct mapped prediction cache of DYNAMIC/DYNAMIC_TARGET implementation. 2 pow historyRamSizeLog2 entries&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;compressedGen&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;Enable RISC-V compressed instruction (RVC) support.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;config.cacheSize&lt;/td&gt;
&lt;td&gt;Int&lt;/td&gt;
&lt;td&gt;Total storage capacity of the cache in bytes.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;config.bytePerLine&lt;/td&gt;
&lt;td&gt;Int&lt;/td&gt;
&lt;td&gt;Number of bytes per cache line&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;config.wayCount&lt;/td&gt;
&lt;td&gt;Int&lt;/td&gt;
&lt;td&gt;Number of cache ways&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;config.twoCycleRam&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;Check the tags values in the decode stage instead of the fetch stage to relax timings&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;config.asyncTagMemory&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;Read the cache tags in an asynchronous manner instead of syncronous one&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;config.addressWidth&lt;/td&gt;
&lt;td&gt;Int&lt;/td&gt;
&lt;td&gt;CPU address width. Should be 32&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;config.cpuDataWidth&lt;/td&gt;
&lt;td&gt;Int&lt;/td&gt;
&lt;td&gt;CPU data width. Should be 32&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;config.memDataWidth&lt;/td&gt;
&lt;td&gt;Int&lt;/td&gt;
&lt;td&gt;Memory data width. Could potentialy be something else than 32, but only 32 is currently tested&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;config.catchIllegalAccess&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;Catch when a memory access is done on non-valid memory address (MMU)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;config.catchAccessFault&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;Catch when the memeory bus is responding with an error&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;config.catchMemoryTranslationMiss&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;Catch when the MMU miss a TLB&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Note: If you enable the twoCycleRam option and if wayCount is bigger than one, then the register file plugin should be configured to read the regFile in an asynchronous manner.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-decodersimpleplugin" class="anchor" aria-hidden="true" href="#decodersimpleplugin"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;DecoderSimplePlugin&lt;/h4&gt;
&lt;p&gt;This plugin provides instruction decoding capabilities to others plugins.&lt;/p&gt;
&lt;p&gt;For instance, for a given instruction, the pipeline hazard plugin needs to know if it uses the register file source 1/2 in order to stall the pipeline until the hazard is gone.
To provide this kind of information, each plugin which implements an instruction documents this kind of information to the DecoderSimplePlugin plugin.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Parameters&lt;/th&gt;
&lt;th&gt;type&lt;/th&gt;
&lt;th&gt;description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;catchIllegalInstruction&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;When true, instructions that don't match a decoding specification will generate a trap exception&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Here is a usage example :&lt;/p&gt;
&lt;div class="highlight highlight-source-scala"&gt;&lt;pre&gt;    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;Specify the instruction decoding which should be applied when the instruction match the 'key' pattern&lt;/span&gt;
    decoderService.add(
      &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;Bit pattern of the new instruction&lt;/span&gt;
      key &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;M&lt;/span&gt;&lt;span class="pl-s"&gt;"&lt;/span&gt;&lt;span class="pl-s"&gt;0000011----------000-----0110011&lt;/span&gt;&lt;span class="pl-s"&gt;"&lt;/span&gt;,

      &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;Decoding specification when the 'key' pattern is recognized in the instruction&lt;/span&gt;
      &lt;span class="pl-en"&gt;List&lt;/span&gt;(
        &lt;span class="pl-en"&gt;IS_SIMD_ADD&lt;/span&gt;              &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;True&lt;/span&gt;, &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;Inform the pipeline that the current instruction is a SIMD_ADD instruction&lt;/span&gt;
        &lt;span class="pl-en"&gt;REGFILE_WRITE_VALID&lt;/span&gt;      &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;True&lt;/span&gt;, &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;Notify the hazard management unit that this instruction writes to the register file&lt;/span&gt;
        &lt;span class="pl-en"&gt;BYPASSABLE_EXECUTE_STAGE&lt;/span&gt; &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;True&lt;/span&gt;, &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;Notify the hazard management unit that the instruction result is already accessible in the EXECUTE stage (Bypass ready)&lt;/span&gt;
        &lt;span class="pl-en"&gt;BYPASSABLE_MEMORY_STAGE&lt;/span&gt;  &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;True&lt;/span&gt;, &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;Same as above but for the memory stage&lt;/span&gt;
        &lt;span class="pl-en"&gt;RS1_USE&lt;/span&gt;                  &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;True&lt;/span&gt;, &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;Notify the hazard management unit that this instruction uses the RS1 value&lt;/span&gt;
        &lt;span class="pl-en"&gt;RS2_USE&lt;/span&gt;                  &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;True&lt;/span&gt;  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;Same than above but for RS2.&lt;/span&gt;
      )
    )
  }&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This plugin operates in the Decode stage.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-regfileplugin" class="anchor" aria-hidden="true" href="#regfileplugin"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;RegFilePlugin&lt;/h4&gt;
&lt;p&gt;This plugin implements the register file.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Parameters&lt;/th&gt;
&lt;th&gt;type&lt;/th&gt;
&lt;th&gt;description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;regFileReadyKind&lt;/td&gt;
&lt;td&gt;RegFileReadKind&lt;/td&gt;
&lt;td&gt;Can bet set to ASYNC or SYNC. Specifies the kind of memory read used to implement the register file. ASYNC means zero cycle latency memory read, while SYNC means one cycle latency memory read which can be mapped into standard FPGA memory blocks&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;zeroBoot&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;Load all registers with zeroes at the beginning of simulations to keep everything deterministic in logs/traces&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;This register file use a &lt;code&gt;don't care&lt;/code&gt; read-during-write policy, so the bypassing/hazard plugin should take care of this.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-hazardsimpleplugin" class="anchor" aria-hidden="true" href="#hazardsimpleplugin"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;HazardSimplePlugin&lt;/h4&gt;
&lt;p&gt;This plugin checks the pipeline instruction dependencies and, if necessary or possible, will stop the instruction in the decoding stage or bypass the instruction results
from the later stages to the decode stage.&lt;/p&gt;
&lt;p&gt;Since the register file is implemented with a &lt;code&gt;don't care&lt;/code&gt; read-during-write policy, this plugin also manages these kind of hazards.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Parameters&lt;/th&gt;
&lt;th&gt;type&lt;/th&gt;
&lt;th&gt;description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;bypassExecute&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;Enable the bypassing of instruction results coming from the Execute stage&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bypassMemory&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;Enable the bypassing of instruction results coming from the Memory stage&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bypassWriteBack&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;Enable the bypassing of instruction results coming from the WriteBack stage&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bypassWriteBackBuffer&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;Enable the bypassing of the previous cycle register file written value&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;&lt;a id="user-content-srcplugin" class="anchor" aria-hidden="true" href="#srcplugin"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;SrcPlugin&lt;/h4&gt;
&lt;p&gt;This plugin muxes different input values to produce SRC1/SRC2/SRC_ADD/SRC_SUB/SRC_LESS values which are common values used by many plugins in the execute stage (ALU/Branch/Load/Store).&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Parameters&lt;/th&gt;
&lt;th&gt;type&lt;/th&gt;
&lt;th&gt;description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;separatedAddSub&lt;/td&gt;
&lt;td&gt;RegFileReadKind&lt;/td&gt;
&lt;td&gt;By default SRC_ADD/SRC_SUB are generated from a single controllable adder/substractor, but if this is set to true, it use separate adder/substractors&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;executeInsertion&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;By default SRC1/SRC2 are generated in the Decode stage, but if this parameter is true, it is done in the Execute stage (It will relax the bypassing network)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Except for SRC1/SRC2, this plugin does everything at the begining of Execute stage.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-intaluplugin" class="anchor" aria-hidden="true" href="#intaluplugin"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;IntAluPlugin&lt;/h4&gt;
&lt;p&gt;This plugin implements all ADD/SUB/SLT/SLTU/XOR/OR/AND/LUI/AUIPC instructions in the execute stage by using the SrcPlugin outputs. It is a realy simple plugin.&lt;/p&gt;
&lt;p&gt;The result is injected into the pipeline directly at the end of the execute stage.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-lightshifterplugin" class="anchor" aria-hidden="true" href="#lightshifterplugin"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;LightShifterPlugin&lt;/h4&gt;
&lt;p&gt;Implements SLL/SRL/SRA instructions by using an iterative shifter register, while using one cycle per bit shift.&lt;/p&gt;
&lt;p&gt;The result is injected into the pipeline directly at the end of the execute stage.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-fullbarrelshifterplugin" class="anchor" aria-hidden="true" href="#fullbarrelshifterplugin"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;FullBarrelShifterPlugin&lt;/h4&gt;
&lt;p&gt;Implements SLL/SRL/SRA instructions by using a full barrel shifter, so it execute all shifts in a single cycle.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Parameters&lt;/th&gt;
&lt;th&gt;type&lt;/th&gt;
&lt;th&gt;description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;earlyInjection&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;By default the result of the shift is injected into the pipeline in the Memory stage to relax timings, but if this option is true it will be done in the Execute stage&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;&lt;a id="user-content-branchplugin" class="anchor" aria-hidden="true" href="#branchplugin"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;BranchPlugin&lt;/h4&gt;
&lt;p&gt;This plugin implement all branch/jump instructions (JAL/JALR/BEQ/BNE/BLT/BGE/BLTU/BGEU) with primitives used by the cpu frontend plugins to implement branch prediction. The prediction implementation is set in the frontend plugins (IBusX)&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Parameters&lt;/th&gt;
&lt;th&gt;type&lt;/th&gt;
&lt;th&gt;description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;earlyBranch&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;By default the branch is done in the Memory stage to relax timings, but if this option is set it's done in the Execute stage&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;catchAddressMisaligned&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;If a jump/branch is done in an unaligned PC address, it will fire an trap exception&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Each miss predicted jumps will produce between 2 and 4 cycles penalty depending the &lt;code&gt;earlyBranch&lt;/code&gt; and the &lt;code&gt;PcManagerSimplePlugin.relaxedPcCalculation&lt;/code&gt; configurations&lt;/p&gt;
&lt;h5&gt;&lt;a id="user-content-prediction-none" class="anchor" aria-hidden="true" href="#prediction-none"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Prediction NONE&lt;/h5&gt;
&lt;p&gt;No prediction: each PC change due to a jump/branch will produce a penalty.&lt;/p&gt;
&lt;h5&gt;&lt;a id="user-content-prediction-static" class="anchor" aria-hidden="true" href="#prediction-static"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Prediction STATIC&lt;/h5&gt;
&lt;p&gt;In the decode stage, a conditional branch pointing backwards or a JAL is branched speculatively. If the speculation is right, the branch penalty is reduced to a single cycle,
otherwise the standard penalty is applied.&lt;/p&gt;
&lt;h5&gt;&lt;a id="user-content-prediction-dynamic" class="anchor" aria-hidden="true" href="#prediction-dynamic"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Prediction DYNAMIC&lt;/h5&gt;
&lt;p&gt;Same as the STATIC prediction, except that to do the prediction, it use a direct mapped 2 bit history cache (BHT) which remembers if the branch is more likely to be taken or not.&lt;/p&gt;
&lt;h5&gt;&lt;a id="user-content-prediction-dynamic_target" class="anchor" aria-hidden="true" href="#prediction-dynamic_target"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Prediction DYNAMIC_TARGET&lt;/h5&gt;
&lt;p&gt;This predictor uses a direct mapped branch target buffer (BTB) in the Fetch stage which store the PC of the instruction, the target PC of the instruction and a 2 bit history to remember
if the branch is more likely to be taken or not. This is the most efficient branch predictor actualy implemented on VexRiscv as when the branch prediction is right, it produce no branch penalty.
The down side is that this predictor has a long combinatorial path coming from the prediction cache read port to the programm counter by passing through the jump interface.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-dbussimpleplugin" class="anchor" aria-hidden="true" href="#dbussimpleplugin"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;DBusSimplePlugin&lt;/h4&gt;
&lt;p&gt;This plugin implements the load and store instructions (LB/LH/LW/LBU/LHU/LWU/SB/SH/SW) via a simple memory bus going out of the CPU.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Parameters&lt;/th&gt;
&lt;th&gt;type&lt;/th&gt;
&lt;th&gt;description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;catchAddressMisaligned&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;If a memory access is done to an unaligned memory address, it will fire a trap exception&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;catchAccessFault&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;If a memory read returns an error, it will fire a trap exception&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;earlyInjection&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;By default, the memory read values are injected into the pipeline in the WriteBack stage to relax the timings. If this parameter is true, it's done in the Memory stage&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Here is the DBusSimpleBus&lt;/p&gt;
&lt;div class="highlight highlight-source-scala"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;DBusSimpleCmd&lt;/span&gt;() &lt;span class="pl-k"&gt;extends&lt;/span&gt; &lt;span class="pl-e"&gt;Bundle&lt;/span&gt;{
  &lt;span class="pl-k"&gt;val&lt;/span&gt; &lt;span class="pl-smi"&gt;wr&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;Bool&lt;/span&gt;
  &lt;span class="pl-k"&gt;val&lt;/span&gt; &lt;span class="pl-smi"&gt;address&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;UInt&lt;/span&gt;(&lt;span class="pl-c1"&gt;32&lt;/span&gt; bits)
  &lt;span class="pl-k"&gt;val&lt;/span&gt; &lt;span class="pl-smi"&gt;data&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;Bits&lt;/span&gt;(&lt;span class="pl-c1"&gt;32&lt;/span&gt; bit)
  &lt;span class="pl-k"&gt;val&lt;/span&gt; &lt;span class="pl-smi"&gt;size&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;UInt&lt;/span&gt;(&lt;span class="pl-c1"&gt;2&lt;/span&gt; bit)
}

&lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;DBusSimpleRsp&lt;/span&gt;() &lt;span class="pl-k"&gt;extends&lt;/span&gt; &lt;span class="pl-e"&gt;Bundle&lt;/span&gt; &lt;span class="pl-k"&gt;with&lt;/span&gt; &lt;span class="pl-e"&gt;IMasterSlave&lt;/span&gt;{
  &lt;span class="pl-k"&gt;val&lt;/span&gt; &lt;span class="pl-smi"&gt;ready&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;Bool&lt;/span&gt;
  &lt;span class="pl-k"&gt;val&lt;/span&gt; &lt;span class="pl-smi"&gt;error&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;Bool&lt;/span&gt;
  &lt;span class="pl-k"&gt;val&lt;/span&gt; &lt;span class="pl-smi"&gt;data&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;Bits&lt;/span&gt;(&lt;span class="pl-c1"&gt;32&lt;/span&gt; bit)

  &lt;span class="pl-k"&gt;override&lt;/span&gt; &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;asMaster&lt;/span&gt;()&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-k"&gt;Unit&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; {
    out(ready,error,data)
  }
}


&lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;DBusSimpleBus&lt;/span&gt;() &lt;span class="pl-k"&gt;extends&lt;/span&gt; &lt;span class="pl-e"&gt;Bundle&lt;/span&gt; &lt;span class="pl-k"&gt;with&lt;/span&gt; &lt;span class="pl-e"&gt;IMasterSlave&lt;/span&gt;{
  &lt;span class="pl-k"&gt;val&lt;/span&gt; &lt;span class="pl-smi"&gt;cmd&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;Stream&lt;/span&gt;(&lt;span class="pl-en"&gt;DBusSimpleCmd&lt;/span&gt;())
  &lt;span class="pl-k"&gt;val&lt;/span&gt; &lt;span class="pl-smi"&gt;rsp&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;DBusSimpleRsp&lt;/span&gt;()

  &lt;span class="pl-k"&gt;override&lt;/span&gt; &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;asMaster&lt;/span&gt;()&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-k"&gt;Unit&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; {
    master(cmd)
    slave(rsp)
  }
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that bridges are available to convert this interface into AXI4 and Avalon&lt;/p&gt;
&lt;p&gt;There is at least one cycle latency between a cmd and the corresponding rsp. The rsp.ready flag should be false after a read cmd until the rsp is present.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-dbuscachedplugin" class="anchor" aria-hidden="true" href="#dbuscachedplugin"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;DBusCachedPlugin&lt;/h4&gt;
&lt;p&gt;Multi way cache implementation with writh-through and allocate on read strategy. (Documentation is WIP)&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-mulplugin" class="anchor" aria-hidden="true" href="#mulplugin"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;MulPlugin&lt;/h4&gt;
&lt;p&gt;Implements the multiplication instruction from the RISC-V M extension. Its implementation was done in a FPGA friendly way by using 4 17*17 bit multiplications.
The processing is fully pipelined between the Execute/Memory/Writeback stage. The results of the instructions are always inserted in the WriteBack stage.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-divplugin" class="anchor" aria-hidden="true" href="#divplugin"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;DivPlugin&lt;/h4&gt;
&lt;p&gt;Implements the division/modulo instruction from the RISC-V M extension. It is done in a simple iterative way which always takes 34 cycles. The result is inserted into the
Memory stage.&lt;/p&gt;
&lt;p&gt;This plugin is now based on the MulDivIterativePlugin one.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-muldiviterativeplugin" class="anchor" aria-hidden="true" href="#muldiviterativeplugin"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;MulDivIterativePlugin&lt;/h4&gt;
&lt;p&gt;This plugin implements the multiplication, division and modulo of the RISC-V M extension in an iterative way, which is friendly for small FPGAs that don't have DSP blocks.&lt;/p&gt;
&lt;p&gt;This plugin is able to unroll the iterative calculation process to reduce the number of cycles used to execute mul/div instructions.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Parameters&lt;/th&gt;
&lt;th&gt;type&lt;/th&gt;
&lt;th&gt;description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;genMul&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;Enables multiplication support. Can be set to false if you want to use the MulPlugin instead&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;genDiv&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;Enables division support&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mulUnrollFactor&lt;/td&gt;
&lt;td&gt;Int&lt;/td&gt;
&lt;td&gt;Number of combinatorial stages used to speed up the multiplication, should be &amp;gt; 0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;divUnrollFactor&lt;/td&gt;
&lt;td&gt;Int&lt;/td&gt;
&lt;td&gt;Number of combinatorial stages used to speed up the division, should be &amp;gt; 0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The number of cycles used to execute a multiplication is '32/mulUnrollFactor'
The number of cycles used to execute a division is '32/divUnrollFactor + 1'&lt;/p&gt;
&lt;p&gt;Both mul/div are processed into the memory stage (late result).&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-csrplugin" class="anchor" aria-hidden="true" href="#csrplugin"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;CsrPlugin&lt;/h4&gt;
&lt;p&gt;Implements most of the Machine mode and a few of the User mode registers as specified in the RISC-V priviledged spec.
The access mode of most of the CSR is parameterizable (NONE/READ_ONLY/WRITE_ONLY/READ_WRITE) to reduce the area usage of unneeded features.&lt;/p&gt;
&lt;p&gt;(CsrAccess can be NONE/READ_ONLY/WRITE_ONLY/READ_WRITE)&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Parameters&lt;/th&gt;
&lt;th&gt;type&lt;/th&gt;
&lt;th&gt;description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;catchIllegalAccess&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mvendorid&lt;/td&gt;
&lt;td&gt;BigInt&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;marchid&lt;/td&gt;
&lt;td&gt;BigInt&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mimpid&lt;/td&gt;
&lt;td&gt;BigInt&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mhartid&lt;/td&gt;
&lt;td&gt;BigInt&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;misaExtensionsInit&lt;/td&gt;
&lt;td&gt;Int&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;misaAccess&lt;/td&gt;
&lt;td&gt;CsrAccess&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mtvecAccess&lt;/td&gt;
&lt;td&gt;CsrAccess&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mtvecInit&lt;/td&gt;
&lt;td&gt;BigInt&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mepcAccess&lt;/td&gt;
&lt;td&gt;CsrAccess&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mscratchGen&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mcauseAccess&lt;/td&gt;
&lt;td&gt;CsrAccess&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mbadaddrAccess&lt;/td&gt;
&lt;td&gt;CsrAccess&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mcycleAccess&lt;/td&gt;
&lt;td&gt;CsrAccess&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;minstretAccess&lt;/td&gt;
&lt;td&gt;CsrAccess&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ucycleAccess&lt;/td&gt;
&lt;td&gt;CsrAccess&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;wfiGen&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ecallGen&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;If an interrupt occurs, before jumping to mtvec, the plugin will stop the Prefetch stage and wait for all the instructions in the later pipeline stages to complete their execution.&lt;/p&gt;
&lt;p&gt;If an exception occur, the plugin will kill the corresponding instruction, flush all previous instructions, and wait until the previously killed instructions reach the WriteBack
stage before jumping to mtvec.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-staticmemorytranslatorplugin" class="anchor" aria-hidden="true" href="#staticmemorytranslatorplugin"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;StaticMemoryTranslatorPlugin&lt;/h4&gt;
&lt;p&gt;Static memory translator plugin which allows one to specify which range of the memory addresses is IO mapped and shouldn't be cached.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-mmuplugin" class="anchor" aria-hidden="true" href="#mmuplugin"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;MmuPlugin&lt;/h4&gt;
&lt;p&gt;Hardware refilled MMU implementation. Allows others plugins such as DBusCachedPlugin/IBusCachedPlugin to instanciate memory address translation ports. Each port has a small dedicated
fully associative TLB cache which is refilled automaticaly via a dbus access sharing.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-debugplugin" class="anchor" aria-hidden="true" href="#debugplugin"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;DebugPlugin&lt;/h4&gt;
&lt;p&gt;This plugin implements enough CPU debug features to allow comfortable GDB/Eclipse debugging. To access those debug features, it provides a simple memory bus interface.
The JTAG interface is provided by another bridge, which makes it possible to efficiently connect multiple CPUs to the same JTAG.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Parameters&lt;/th&gt;
&lt;th&gt;type&lt;/th&gt;
&lt;th&gt;description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;debugClockDomain&lt;/td&gt;
&lt;td&gt;ClockDomain&lt;/td&gt;
&lt;td&gt;As the debug unit is able to reset the CPU itself, it should use another clock domain to avoid killing itself (only the reset wire should differ)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The internals of the debug plugin are done in a manner which reduces the area usage and the FMax impact of this plugin.&lt;/p&gt;
&lt;p&gt;Here is the simple bus to access it, the rsp come one cycle after the request :&lt;/p&gt;
&lt;div class="highlight highlight-source-scala"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;DebugExtensionCmd&lt;/span&gt;() &lt;span class="pl-k"&gt;extends&lt;/span&gt; &lt;span class="pl-e"&gt;Bundle&lt;/span&gt;{
  &lt;span class="pl-k"&gt;val&lt;/span&gt; &lt;span class="pl-smi"&gt;wr&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;Bool&lt;/span&gt;
  &lt;span class="pl-k"&gt;val&lt;/span&gt; &lt;span class="pl-smi"&gt;address&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;UInt&lt;/span&gt;(&lt;span class="pl-c1"&gt;8&lt;/span&gt; bit)
  &lt;span class="pl-k"&gt;val&lt;/span&gt; &lt;span class="pl-smi"&gt;data&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;Bits&lt;/span&gt;(&lt;span class="pl-c1"&gt;32&lt;/span&gt; bit)
}
&lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;DebugExtensionRsp&lt;/span&gt;() &lt;span class="pl-k"&gt;extends&lt;/span&gt; &lt;span class="pl-e"&gt;Bundle&lt;/span&gt;{
  &lt;span class="pl-k"&gt;val&lt;/span&gt; &lt;span class="pl-smi"&gt;data&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;Bits&lt;/span&gt;(&lt;span class="pl-c1"&gt;32&lt;/span&gt; bit)
}

&lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;DebugExtensionBus&lt;/span&gt;() &lt;span class="pl-k"&gt;extends&lt;/span&gt; &lt;span class="pl-e"&gt;Bundle&lt;/span&gt; &lt;span class="pl-k"&gt;with&lt;/span&gt; &lt;span class="pl-e"&gt;IMasterSlave&lt;/span&gt;{
  &lt;span class="pl-k"&gt;val&lt;/span&gt; &lt;span class="pl-smi"&gt;cmd&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;Stream&lt;/span&gt;(&lt;span class="pl-en"&gt;DebugExtensionCmd&lt;/span&gt;())
  &lt;span class="pl-k"&gt;val&lt;/span&gt; &lt;span class="pl-smi"&gt;rsp&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;DebugExtensionRsp&lt;/span&gt;()

  &lt;span class="pl-k"&gt;override&lt;/span&gt; &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;asMaster&lt;/span&gt;()&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-k"&gt;Unit&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; {
    master(cmd)
    in(rsp)
  }
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here is the register mapping :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Read address 0x00 -&amp;gt;
  bit 0  : resetIt
  bit 1  : haltIt
  bit 2  : isPipBusy
  bit 3  : haltedByBreak
  bit 4  : stepIt
Write address 0x00 -&amp;gt;
  bit 4  : stepIt
  bit 16 : set resetIt
  bit 17 : set haltIt
  bit 24 : clear resetIt
  bit 25 : clear haltIt and haltedByBreak

Read Address 0x04 -&amp;gt;
  bits (31 downto 0) : Last value written into the register file
Write Address 0x04 -&amp;gt;
  bits (31 downto 0) : Instruction that should be pushed into the CPU pipeline for debug purposes
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The OpenOCD port is there :
&lt;a href="https://github.com/SpinalHDL/openocd_riscv"&gt;https://github.com/SpinalHDL/openocd_riscv&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-yamlplugin" class="anchor" aria-hidden="true" href="#yamlplugin"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;YamlPlugin&lt;/h4&gt;
&lt;p&gt;This plugin offers a service to others plugins to generate a usefull Yaml file about the CPU configuration. It contains, for instance, the sequence of instruction required
to flush the data cache (information used by openocd).&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>SpinalHDL</author><guid isPermaLink="false">https://github.com/SpinalHDL/VexRiscv</guid><pubDate>Thu, 21 Nov 2019 00:01:00 GMT</pubDate></item><item><title>PacktPublishing/Mastering-OpenCV-4-Third-Edition #2 in Assembly, Today</title><link>https://github.com/PacktPublishing/Mastering-OpenCV-4-Third-Edition</link><description>&lt;p&gt;&lt;i&gt;Mastering OpenCV 4, Third Edition, published by Packt publishing&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-mastering-opencv-4---third-edition" class="anchor" aria-hidden="true" href="#mastering-opencv-4---third-edition"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Mastering OpenCV 4 - Third Edition&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://www.packtpub.com/application-development/mastering-opencv-4-third-edition?utm_source=github&amp;amp;utm_medium=repository&amp;amp;utm_campaign=9781789533576 " rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/ede160a8fa49b2594ba9f5988ca9d5f46eab7203/68747470733a2f2f647a313377386166643437696c2e636c6f756466726f6e742e6e65742f73697465732f64656661756c742f66696c65732f696d61676563616368652f707076345f6d61696e5f626f6f6b5f636f7665722f4231313637325f4d6f636b7570436f7665725f312e706e67" alt="Mastering OpenCV 4 - Third Edition" height="256px" align="right" data-canonical-src="https://dz13w8afd47il.cloudfront.net/sites/default/files/imagecache/ppv4_main_book_cover/B11672_MockupCover_1.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is the code repository for &lt;a href="https://www.packtpub.com/application-development/mastering-opencv-4-third-edition?utm_source=github&amp;amp;utm_medium=repository&amp;amp;utm_campaign=9781789533576" rel="nofollow"&gt;Mastering OpenCV 4 - Third Edition&lt;/a&gt;, published by Packt.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A comprehensive guide to building computer vision and image processing applications with C++&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-what-is-this-book-about" class="anchor" aria-hidden="true" href="#what-is-this-book-about"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;What is this book about?&lt;/h2&gt;
&lt;p&gt;Mastering OpenCV, now in its third edition, targets computer vision engineers taking their first steps toward mastering OpenCV. Keeping the mathematical formulations to a solid but bare minimum, the book delivers complete projects from ideation to running code, targeting current hot topics in computer vision such as face recognition, landmark detection and pose estimation, and number recognition with deep convolutional networks.&lt;/p&gt;
&lt;p&gt;This book covers the following exciting features:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Build real-world computer vision problems with working OpenCV code samples&lt;/li&gt;
&lt;li&gt;Uncover best practices in engineering and maintaining OpenCV projects&lt;/li&gt;
&lt;li&gt;Explore algorithmic design approaches for complex computer vision tasks&lt;/li&gt;
&lt;li&gt;Work with OpenCV’s most updated API (v4.0.0)through projects&lt;/li&gt;
&lt;li&gt;Understand 3D scene reconstruction and Structure from Motion (SfM)&lt;/li&gt;
&lt;li&gt;Study camera calibration and overlay AR using the ArUco Module&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you feel this book is for you, get your &lt;a href="https://www.amazon.com/dp/1789533570" rel="nofollow"&gt;copy&lt;/a&gt; today!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.packtpub.com/?utm_source=github&amp;amp;utm_medium=banner&amp;amp;utm_campaign=GitHubBanner" rel="nofollow"&gt;&lt;img src="https://raw.githubusercontent.com/PacktPublishing/GitHub/master/GitHub.png" alt="https://www.packtpub.com/" border="5" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-instructions-and-navigations" class="anchor" aria-hidden="true" href="#instructions-and-navigations"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Instructions and Navigations&lt;/h2&gt;
&lt;p&gt;All of the code is organized into folders. For example, Chapter02.&lt;/p&gt;
&lt;p&gt;The code will look like the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Mat bigImg; 
resize(smallImg, bigImg, size, 0,0, INTER_LINEAR); 
dst.setTo(0); 
bigImg.copyTo(dst, mask);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Following is what you need for this book:&lt;/strong&gt;
This book is for those who have a basic knowledge of OpenCV and are competent C++ programmers. You need to have an understanding of some of the more theoretical/mathematical concepts, as we move quite quickly throughout the book.&lt;/p&gt;
&lt;p&gt;With the following software and hardware list you can run all code files present in the book (Chapter 1-10).&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-software-and-hardware-list" class="anchor" aria-hidden="true" href="#software-and-hardware-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Software and Hardware List&lt;/h3&gt;
&lt;p&gt;Each chapter folder contains individual instruction on building and running the code.
Chapter 10: Avoiding Common Pitfalls in OpenCV, is without code.&lt;/p&gt;
&lt;p&gt;We also provide a PDF file that has color images of the screenshots/diagrams used in this book. &lt;a href="http://www.packtpub.com/sites/default/files/downloads/9781789533576_ColorImages.pdf" rel="nofollow"&gt;Click here to download it&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-related-products" class="anchor" aria-hidden="true" href="#related-products"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Related products&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Learn OpenCV 4 By Building Projects - Second Edition &lt;a href="https://www.packtpub.com/application-development/learn-opencv-4-building-projects-second-edition?utm_source=github&amp;amp;utm_medium=repository&amp;amp;utm_campaign=9781789341225" rel="nofollow"&gt;[Packt]&lt;/a&gt; &lt;a href="https://www.amazon.com/dp/B07J9LYR9S" rel="nofollow"&gt;[Amazon]&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hands-On GPU-Accelerated Computer Vision with OpenCV and CUDA &lt;a href="https://www.packtpub.com/application-development/hands-gpu-accelerated-computer-vision-opencv-and-cuda?utm_source=github&amp;amp;utm_medium=repository&amp;amp;utm_campaign=9781789348293" rel="nofollow"&gt;[Packt]&lt;/a&gt; &lt;a href="https://www.amazon.com/dp/1789348293" rel="nofollow"&gt;[Amazon]&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-get-to-know-the-authors" class="anchor" aria-hidden="true" href="#get-to-know-the-authors"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Get to Know the Authors&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Roy Shilkrot&lt;/strong&gt;
is an assistant professor of computer science at Stony Brook University, where he leads the Human Interaction group. Dr. Shilkrot's research is in computer vision, human-computer interfaces, and the cross-over between these two domains, funded by US federal, New York State, and industry grants. Dr. Shilkrot graduated from the Massachusetts Institute of Technology (MIT) with a PhD, and has authored more than 25 peer-reviewed papers published at premier computer science conferences, such as CHI and SIGGRAPH, as well as in leading academic journals such as ACM Transaction on Graphics (TOG) and ACM Transactions on Computer-Human Interaction (ToCHI). Dr. Shilkrot is also a co-inventor of several patented technologies, a co-author of a number of books, serves on the scientific advisory board of numerous start-up companies, and has over 10 years of experience as an engineer and an entrepreneur.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;David Millan Escriva&lt;/strong&gt;
was eight years old when he wrote his first program on an 8086 PC in Basic, which enabled the 2D plotting of basic equations. In 2005, he finished his studies in IT through the Universitat Politécnica de Valenci with honors in human-computer interaction supported by computer vision with OpenCV (v0.96). He had a final project based on this subject and published it on HCI Spanish congress. He has worked with Blender, an open source, 3D software project, and worked on his first commercial movie, Plumiferos - Aventuras voladoras, as a computer graphics software developer. David now has more than 10 years of experience in IT, with experience in computer vision, computer graphics, and pattern recognition, working with different projects and start-ups, applying his knowledge of computer vision, optical character recognition, and augmented reality. He is the author of the DamilesBlog blog, where he publishes research articles and tutorials about OpenCV, computer vision in general, and optical character recognition algorithms.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-other-books-by-the-authors" class="anchor" aria-hidden="true" href="#other-books-by-the-authors"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Other books by the authors&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.packtpub.com/application-development/mastering-opencv-3-second-edition?utm_source=github&amp;amp;utm_medium=repository&amp;amp;utm_campaign=9781786467171" rel="nofollow"&gt;Mastering OpenCV 3 - Second Edition&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.packtpub.com/application-development/mastering-opencv-practical-computer-vision-projects?utm_source=github&amp;amp;utm_medium=repository&amp;amp;utm_campaign=9781849517829" rel="nofollow"&gt;Mastering OpenCV with Practical Computer Vision Projects&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-suggestions-and-feedback" class="anchor" aria-hidden="true" href="#suggestions-and-feedback"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Suggestions and Feedback&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://docs.google.com/forms/d/e/1FAIpQLSdy7dATC6QmEL81FIUuymZ0Wy9vH1jHkvpY57OiMeKGqib_Ow/viewform" rel="nofollow"&gt;Click here&lt;/a&gt; if you have any feedback or suggestions.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>PacktPublishing</author><guid isPermaLink="false">https://github.com/PacktPublishing/Mastering-OpenCV-4-Third-Edition</guid><pubDate>Thu, 21 Nov 2019 00:02:00 GMT</pubDate></item></channel></rss>