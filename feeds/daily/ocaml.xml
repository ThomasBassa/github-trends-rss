<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>GitHub Trending: OCaml, Today</title><link>https://github.com/trending/ocaml?since=daily</link><description>The top repositories on GitHub for ocaml, measured daily</description><pubDate>Sun, 19 Jan 2020 04:12:13 GMT</pubDate><lastBuildDate>Sun, 19 Jan 2020 04:12:13 GMT</lastBuildDate><generator>PyRSS2Gen-1.1.0</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><ttl>720</ttl><item><title>lukaszcz/coqhammer #1 in OCaml, Today</title><link>https://github.com/lukaszcz/coqhammer</link><description>&lt;p&gt;&lt;i&gt;CoqHammer: An Automated Reasoning Hammer Tool for Coq - Proof Automation for Dependent Type Theory&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;p&gt;CoqHammer (dev) for Coq 8.10&lt;/p&gt;
&lt;p&gt;&lt;a href="https://travis-ci.org/lukaszcz/coqhammer/builds" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/de25316c3a57eb5d7925e3b976b0a1e1a83b56eb/68747470733a2f2f7472617669732d63692e6f72672f6c756b61737a637a2f636f7168616d6d65722e7376673f6272616e63683d636f71382e3130" alt="Travis" data-canonical-src="https://travis-ci.org/lukaszcz/coqhammer.svg?branch=coq8.10" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;CoqHammer is a general-purpose automated reasoning hammer tool for
Coq. It combines learning from previous proofs with the translation of
problems to the logics of automated systems and the reconstruction of
successfully found proofs. A typical use is to prove relatively simple
goals using available lemmas. The problem is to find appropriate
lemmas in a large collection of all accessible lemmas and combine them
to prove the goal. The advantage of a hammer is that it is a general
system not depending on any domain-specific knowledge and not
requiring configuration by the user. The hammer plugin may use all
currently accessible lemmas, including those proven earlier in a given
formalization, not only the lemmas from predefined libraries or hint
databases. At present, however, best results are achieved for statements
"close to" first-order logic and lemmas from the standard library or similar.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-requirements" class="anchor" aria-hidden="true" href="#requirements"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Requirements&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/coq/coq"&gt;Coq 8.10&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;automated provers (&lt;a href="https://vprover.github.io/download.html" rel="nofollow"&gt;Vampire&lt;/a&gt;, &lt;a href="http://cvc4.cs.stanford.edu/downloads/" rel="nofollow"&gt;CVC4&lt;/a&gt;, &lt;a href="http://www.eprover.org" rel="nofollow"&gt;Eprover&lt;/a&gt;, and/or &lt;a href="https://github.com/Z3Prover/z3/releases"&gt;Z3&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installation&lt;/h2&gt;
&lt;p&gt;The latest release of CoqHammer is most easily installed via
&lt;a href="https://opam.ocaml.org/" rel="nofollow"&gt;OPAM&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;opam repo add coq-released https://coq.inria.fr/opam/released
opam install coq-hammer
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To instead build and install CoqHammer manually, run &lt;code&gt;make&lt;/code&gt; followed
by &lt;code&gt;make install&lt;/code&gt;. Then optionally run &lt;code&gt;make tests&lt;/code&gt; to check if
everything works. Some of the tests may fail if your machine is not
fast enough or you do not have all provers installed. More information
about provers is provided below.&lt;/p&gt;
&lt;p&gt;If you are only interested in the CoqHammer's reconstruction tactics,
they can be installed standalone (without the hammer plugin) via OPAM
after adding the &lt;code&gt;coq-released&lt;/code&gt; repository as above:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;opam install coq-hammer-tactics
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To instead build and install the tactics manually, use &lt;code&gt;make tactics&lt;/code&gt;
followed by &lt;code&gt;make install-tactics&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The plugin has been tested on Linux. On Mac OS X there may be some
problems with the operation of the plugin.&lt;/p&gt;
&lt;p&gt;The command &lt;code&gt;make install&lt;/code&gt; will try to install the &lt;code&gt;predict&lt;/code&gt; and
&lt;code&gt;htimeout&lt;/code&gt; programs into the directory specified by the &lt;code&gt;COQBIN&lt;/code&gt;
environment variable. If this variable is not set then a binary
directory is guessed basing on the Coq library directory.&lt;/p&gt;
&lt;p&gt;Note that some old versions of Proof General encounter problems with
the plugin. If you use Proof General you might need the most recent
version obtained directly from &lt;a href="https://proofgeneral.github.io" rel="nofollow"&gt;https://proofgeneral.github.io&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Usage&lt;/h2&gt;
&lt;p&gt;In &lt;code&gt;coqtop&lt;/code&gt; or &lt;code&gt;coqide&lt;/code&gt;, first load the hammer plugin:&lt;/p&gt;
&lt;div class="highlight highlight-source-coq"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;From&lt;/span&gt; Hammer &lt;span class="pl-k"&gt;Require&lt;/span&gt; &lt;span class="pl-k"&gt;Import&lt;/span&gt; Hammer.&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then, the available commands are as follows:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;command&lt;/th&gt;
&lt;th&gt;description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;hammer&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Runs the hammer tactic.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;predict n&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Prints n dependencies for the current goal predicted by the machine-learning premise selection.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Hammer_version&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Prints the version of CoqHammer.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Hammer_cleanup&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Resets the hammer cache.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Some examples are given in the &lt;a href="examples"&gt;&lt;code&gt;examples&lt;/code&gt;&lt;/a&gt; directory.&lt;/p&gt;
&lt;p&gt;The intended use of the &lt;code&gt;hammer&lt;/code&gt; tactic is to replace it upon success
with the reconstruction tactic shown in the response window. This
reconstruction tactic has no time limits and makes no calls to
external ATPs. The success of the &lt;code&gt;hammer&lt;/code&gt; tactic itself is not
guaranteed to be reproducible.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-installation-of-first-order-provers" class="anchor" aria-hidden="true" href="#installation-of-first-order-provers"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installation of first-order provers&lt;/h2&gt;
&lt;p&gt;To use the plugin you need at least one of the following ATPs
available in the path (under the command name in brackets): Vampire
(&lt;code&gt;vampire&lt;/code&gt;), CVC4 (&lt;code&gt;cvc4&lt;/code&gt;), Eprover (&lt;code&gt;eprover&lt;/code&gt;), Z3 (&lt;code&gt;z3_tptp&lt;/code&gt;). It is
recommended to have all four ATPs, or at least Vampire and CVC4.&lt;/p&gt;
&lt;p&gt;The websites for the provers are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Vampire: &lt;a href="https://vprover.github.io" rel="nofollow"&gt;https://vprover.github.io&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;CVC4: &lt;a href="http://cvc4.cs.stanford.edu" rel="nofollow"&gt;http://cvc4.cs.stanford.edu&lt;/a&gt;. CVC4 needs to be version 1.6 or
later. Earlier versions do not fully support the TPTP format. It is
recommended to have the better-performing GPL version of CVC4 instead
of the BSD version.&lt;/li&gt;
&lt;li&gt;Eprover: &lt;a href="http://www.eprover.org" rel="nofollow"&gt;http://www.eprover.org&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Z3: &lt;a href="https://github.com/Z3Prover/z3/releases"&gt;https://github.com/Z3Prover/z3/releases&lt;/a&gt;. Note that the default
version of Z3 does not support the TPTP format. You need to compile
the TPTP frontend located in &lt;code&gt;examples/tptp&lt;/code&gt; in the Z3 source package.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-tactics" class="anchor" aria-hidden="true" href="#tactics"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tactics&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;Tactics&lt;/code&gt; module contains the reconstruction tactics which may
also be used directly in your proof scripts. In contrast to the
&lt;code&gt;hammer&lt;/code&gt; tactic they do not invoke external ATPs and they do not use
any lemmas except explicitly provided ones.&lt;/p&gt;
&lt;p&gt;The most useful tactics are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;sauto&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;A "super" version of &lt;code&gt;auto&lt;/code&gt;. In addition to applying hypotheses, it
tries applying constructors, inverting the hypotheses, ordered
rewriting, heuristic rewriting, rewriting with hints from the
&lt;code&gt;shints&lt;/code&gt; database, arithmetic solving with &lt;code&gt;lia&lt;/code&gt;, case splitting,
intelligent unfolding, forward reasoning and hypotheses
simplification.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;hauto&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The same as &lt;code&gt;sauto&lt;/code&gt; but by default does not use constructors of or
do inversion on inductive types other than logical connectives and
equality. Also does not use the hints from the &lt;code&gt;shints&lt;/code&gt;
database. This tactic is faster than &lt;code&gt;sauto&lt;/code&gt; if you can provide
precise dependencies, and it is thus used most often as the
reconstruction tactic suggested by &lt;code&gt;hammer&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ssimpl&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;A goal simplification tactic. It does not perform much of actual
proof search (beyond what &lt;code&gt;intuition&lt;/code&gt; and &lt;code&gt;auto&lt;/code&gt; already do). It is
designed in such a way as to terminate in a short time in most
circumstances. It uses the rewrite hints from the &lt;code&gt;shints&lt;/code&gt; database.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;WARNING&lt;/strong&gt;: This tactic may change the proof state unpredictably and
introduce randomly named hypotheses into the context.&lt;/p&gt;
&lt;p&gt;It is nonetheless useful to sometimes use &lt;code&gt;ssimpl&lt;/code&gt; before a call to
&lt;code&gt;hammer&lt;/code&gt;. Examples of this are provided in
&lt;a href="examples/imp.v"&gt;&lt;code&gt;examples/imp.v&lt;/code&gt;&lt;/a&gt; and
&lt;a href="examples/combs.v"&gt;&lt;code&gt;examples/combs.v&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;strivial&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;A simple and quick goal solving tactic. A bit stronger than
&lt;code&gt;auto&lt;/code&gt;. Incorporates &lt;code&gt;lia&lt;/code&gt; and &lt;code&gt;congruence&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;scrush&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The definition of &lt;code&gt;scrush&lt;/code&gt; is: &lt;code&gt;try strivial; ssimpl; sauto&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;qsimpl&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;A more conservative version of &lt;code&gt;ssimpl&lt;/code&gt;. Useful when &lt;code&gt;ssimpl&lt;/code&gt;
performs too much simplification or takes too much time.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;sintuition&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;An even more conservative and quicker simplification tactic.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;simp_hyps&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;A basic hypotheses simplification tactic. Used as a component of
most other tactics.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-tactic-options" class="anchor" aria-hidden="true" href="#tactic-options"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tactic options&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;tactic n&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Limit the cost of the entire proof tree by &lt;code&gt;n&lt;/code&gt;. The default
is 1000. Note that this does not directly limit the depth of proof
search, but only the cost of the whole proof tree, according to the
cost model built into &lt;code&gt;sauto&lt;/code&gt;. Example: &lt;code&gt;sauto 200&lt;/code&gt;, &lt;code&gt;hauto 2000&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;using (lem1,...,lemn)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Add lemmas to the hypotheses.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;unfolding (def1,...,defn)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Unfold given definitions. Use &lt;code&gt;logic&lt;/code&gt; for all logical constants.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;inverting (ind1,...,indn)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Invert values of given inductive types. Use &lt;code&gt;logic&lt;/code&gt; for all
inductive types representing logical connectives and quantifiers.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Example: &lt;code&gt;sauto 500 using Nat.add_1_r unfolding (Nat.Even, Nat.Odd) inverting List.Forall&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-papers-about-coqhammer" class="anchor" aria-hidden="true" href="#papers-about-coqhammer"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Papers about CoqHammer&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Ł. Czajka, C. Kaliszyk, &lt;a href="https://link.springer.com/article/10.1007/s10817-018-9458-4" rel="nofollow"&gt;Hammer for Coq: Automation for Dependent Type Theory&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ł. Czajka, &lt;a href="http://drops.dagstuhl.de/opus/volltexte/2018/9853/" rel="nofollow"&gt;A Shallow Embedding of Pure Type Systems into First-order Logic&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ł. Czajka, B. Ekici, C. Kaliszyk, &lt;a href="https://arxiv.org/abs/1808.06413" rel="nofollow"&gt;Concrete Semantics with Coq and CoqHammer&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;&lt;a id="user-content-further-coqhammer-options" class="anchor" aria-hidden="true" href="#further-coqhammer-options"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Further CoqHammer options&lt;/h2&gt;
&lt;div class="highlight highlight-source-coq"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;Set&lt;/span&gt;/&lt;span class="pl-k"&gt;Unset&lt;/span&gt; Hammer Debug.
&lt;span class="pl-k"&gt;Set&lt;/span&gt; Hammer GSMode n.
&lt;span class="pl-c"&gt;(*&lt;span class="pl-c"&gt; The hammer may operate in one of two modes: gs-mode or the ordinary&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;   mode. If GSMode is set to n &amp;gt; 0 then n best strategies (combination&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;   of prover, prediction method and number of predictions) are run in&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;   parallel. Otherwise, if n = 0, then the ordinary mode is active and&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;   the number of machine-learning dependency predictions, the&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;   prediction method and whether to run the ATPs in parallel are&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;   determined by the options below (Hammer Predictions, Hammer&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;   PredictMethod and Hammer Parallel). It is advisable to set GSMode&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;   to the number of cores your machine has, plus/minus one. Default: 8 &lt;/span&gt;*)&lt;/span&gt;
&lt;span class="pl-k"&gt;Set&lt;/span&gt; Hammer Predictions n.
&lt;span class="pl-c"&gt;(*&lt;span class="pl-c"&gt; number of predictions for machine-learning dependency prediction;&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;   irrelevant if GSMode &amp;gt; 0; default: 1024 &lt;/span&gt;*)&lt;/span&gt;
&lt;span class="pl-k"&gt;Set&lt;/span&gt; Hammer PredictMethod "knn"/"nbayes".
&lt;span class="pl-c"&gt;(*&lt;span class="pl-c"&gt; irrelevant if GSMode &amp;gt; 0; default: "knn" &lt;/span&gt;*)&lt;/span&gt;
&lt;span class="pl-k"&gt;Set&lt;/span&gt;/&lt;span class="pl-k"&gt;Unset&lt;/span&gt; Hammer Parallel.
&lt;span class="pl-c"&gt;(*&lt;span class="pl-c"&gt; run ATPs in parallel; irrelevant if GSMode &amp;gt; 0; default: on &lt;/span&gt;*)&lt;/span&gt;
&lt;span class="pl-k"&gt;Set&lt;/span&gt; Hammer ATPLimit n.
&lt;span class="pl-c"&gt;(*&lt;span class="pl-c"&gt; ATP time limit in seconds, default: 10s &lt;/span&gt;*)&lt;/span&gt;
&lt;span class="pl-k"&gt;Set&lt;/span&gt; Hammer ReconstrLimit n.
&lt;span class="pl-c"&gt;(*&lt;span class="pl-c"&gt; time limit for proof reconstruction, default: 10s &lt;/span&gt;*)&lt;/span&gt;
&lt;span class="pl-k"&gt;Set&lt;/span&gt; Hammer CrushLimit n.
&lt;span class="pl-c"&gt;(*&lt;span class="pl-c"&gt; before invoking external ATPs the hammer first tries to solve the&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;   goal using a crush-like tactic with a time limit of n seconds; default: 1s &lt;/span&gt;*)&lt;/span&gt;
&lt;span class="pl-k"&gt;Set&lt;/span&gt;/&lt;span class="pl-k"&gt;Unset&lt;/span&gt; Hammer Vampire/CVC4/Eprover/Z3.
&lt;span class="pl-k"&gt;Set&lt;/span&gt; Hammer PredictPath "/path/to/predict". &lt;span class="pl-c"&gt;(*&lt;span class="pl-c"&gt; default: "predict" &lt;/span&gt;*)&lt;/span&gt;
&lt;span class="pl-k"&gt;Set&lt;/span&gt;/&lt;span class="pl-k"&gt;Unset&lt;/span&gt; Hammer FilterProgram.
&lt;span class="pl-c"&gt;(*&lt;span class="pl-c"&gt; ignore dependencies from Coq.Program.*, default: on &lt;/span&gt;*)&lt;/span&gt;
&lt;span class="pl-k"&gt;Set&lt;/span&gt;/&lt;span class="pl-k"&gt;Unset&lt;/span&gt; Hammer FilterClasses.
&lt;span class="pl-c"&gt;(*&lt;span class="pl-c"&gt; ignore dependencies from Coq.Classes.*, default: on &lt;/span&gt;*)&lt;/span&gt;
&lt;span class="pl-k"&gt;Set&lt;/span&gt;/&lt;span class="pl-k"&gt;Unset&lt;/span&gt; Hammer FilterHurkens.
&lt;span class="pl-c"&gt;(*&lt;span class="pl-c"&gt; ignore dependencies from Coq.Logic.Hurkens.*, default: on &lt;/span&gt;*)&lt;/span&gt;
&lt;span class="pl-k"&gt;Set&lt;/span&gt; Hammer MinimizationThreshold n.
&lt;span class="pl-c"&gt;(*&lt;span class="pl-c"&gt; the minimum number of dependencies returned by an ATP for which minimization is performed, default: 6 &lt;/span&gt;*)&lt;/span&gt;
&lt;span class="pl-k"&gt;Set&lt;/span&gt;/&lt;span class="pl-k"&gt;Unset&lt;/span&gt; Hammer SearchBlacklist.
&lt;span class="pl-c"&gt;(*&lt;span class="pl-c"&gt; ignore dependencies blacklisted with the Search Blacklist&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;   vernacular command, default: on &lt;/span&gt;*)&lt;/span&gt;
&lt;span class="pl-k"&gt;Set&lt;/span&gt;/&lt;span class="pl-k"&gt;Unset&lt;/span&gt; Hammer ClosureGuards.
&lt;span class="pl-c"&gt;(*&lt;span class="pl-c"&gt; should guards be generated for types of free variables? setting&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;   this to "on" will typically harm the hammer success rate, but it&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;   may help with functional extensionality; set this to "on" if you&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;   use functional extensionality and get many unreconstructible&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;   proofs; default: off &lt;/span&gt;*)&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-debugging" class="anchor" aria-hidden="true" href="#debugging"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Debugging&lt;/h2&gt;
&lt;p&gt;The following commands are useful for debugging.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;command&lt;/th&gt;
&lt;th&gt;description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Hammer_print "name"&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Prints object &lt;code&gt;name&lt;/code&gt; in hhterm format.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Hammer_transl "name"&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Prints all axioms resulting from the translation of &lt;code&gt;name&lt;/code&gt; in the intermediate coqterm format accepted by the &lt;a href="src/plugin/tptp_out.ml"&gt;&lt;code&gt;tptp_out.ml&lt;/code&gt;&lt;/a&gt; module.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;hammer_transl&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Prints all axioms resulting from the translation of the current goal.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Hammer_features "name"&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Prints the features of &lt;code&gt;name&lt;/code&gt;, bypassing the cache.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Hammer_features_cached "name"&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Prints the features of &lt;code&gt;name&lt;/code&gt;, using and possibly modifying the cache.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;hammer_features&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Prints the features of the current goal.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Hammer_objects&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Prints the number of accessible objects.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a id="user-content-copyright-and-license" class="anchor" aria-hidden="true" href="#copyright-and-license"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Copyright and license&lt;/h2&gt;
&lt;p&gt;Copyright (c) 2017-2019, Lukasz Czajka, TU Dortmund University, and
Cezary Kaliszyk, University of Innsbruck. Distributed under the terms
of LGPL 2.1, see the file &lt;a href="LICENSE"&gt;LICENSE&lt;/a&gt;.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>lukaszcz</author><guid isPermaLink="false">https://github.com/lukaszcz/coqhammer</guid><pubDate>Sun, 19 Jan 2020 00:01:00 GMT</pubDate></item><item><title>facebook/flow #2 in OCaml, Today</title><link>https://github.com/facebook/flow</link><description>&lt;p&gt;&lt;i&gt;Adds static typing to JavaScript to improve developer productivity and code quality.&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-flow---" class="anchor" aria-hidden="true" href="#flow---"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Flow &lt;a href="https://circleci.com/gh/facebook/flow/tree/master" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/3e735dfe6d6a32a0e165375f12c88d23539e5984/68747470733a2f2f636972636c6563692e636f6d2f67682f66616365626f6f6b2f666c6f772f747265652f6d61737465722e7376673f7374796c653d736869656c64" alt="Build Status" data-canonical-src="https://circleci.com/gh/facebook/flow/tree/master.svg?style=shield" style="max-width:100%;"&gt;&lt;/a&gt; &lt;a href="https://ci.appveyor.com/project/Facebook/flow/branch/master" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/5c043ecc89663d6909dbbfd393a5ac830194f6aa/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f74687976783669356e6978746f6f636d2f6272616e63682f6d61737465723f7376673d74727565" alt="Windows Build Status" data-canonical-src="https://ci.appveyor.com/api/projects/status/thyvx6i5nixtoocm/branch/master?svg=true" style="max-width:100%;"&gt;&lt;/a&gt; &lt;a href="https://discordapp.com/invite/8ezwRUK" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/fcb98412a4ab4b75ec6da59a49a21302e2bf4a4b/68747470733a2f2f696d672e736869656c64732e696f2f646973636f72642f3533393630363337363333393733343535382e7376673f6c6162656c3d646973636f7264266c6f676f3d646973636f7264266c6f676f436f6c6f723d7768697465" alt="Join the chat at https://discordapp.com/invite/8ezwRUK" data-canonical-src="https://img.shields.io/discord/539606376339734558.svg?label=discord&amp;amp;logo=discord&amp;amp;logoColor=white" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Flow is a static typechecker for JavaScript. To find out more about Flow, check out &lt;a href="https://flow.org/" rel="nofollow"&gt;flow.org&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For a background on the project, please read &lt;a href="https://flow.org/en/docs/lang/" rel="nofollow"&gt;this overview&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-contents" class="anchor" aria-hidden="true" href="#contents"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#requirements"&gt;Requirements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#using-flow"&gt;Using Flow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#using-flows-parser-from-javascript"&gt;Using Flow's parser from JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#building-flow-from-source"&gt;Building Flow from source&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#join-the-flow-community"&gt;Join the Flow community&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#license"&gt;License&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-requirements" class="anchor" aria-hidden="true" href="#requirements"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Flow works with:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;macOS&lt;/li&gt;
&lt;li&gt;Linux (64-bit)&lt;/li&gt;
&lt;li&gt;Windows (64-bit, Windows 10 recommended)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are &lt;a href="https://github.com/facebook/flow/releases"&gt;binary distributions&lt;/a&gt; for each of these platforms and you can also build it from source on any of them as well.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-using-flow" class="anchor" aria-hidden="true" href="#using-flow"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Using Flow&lt;/h2&gt;
&lt;p&gt;Check out the &lt;a href="https://flow.org/en/docs/install/" rel="nofollow"&gt;installation instructions&lt;/a&gt;, and then &lt;a href="https://flow.org/en/docs/usage/" rel="nofollow"&gt;how to get started&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-using-flows-parser-from-javascript" class="anchor" aria-hidden="true" href="#using-flows-parser-from-javascript"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Using Flow's parser from JavaScript&lt;/h2&gt;
&lt;p&gt;While Flow is written in OCaml, its parser is available as a compiled-to-JavaScript module published to npm, named &lt;a href="https://www.npmjs.com/package/flow-parser" rel="nofollow"&gt;flow-parser&lt;/a&gt;. &lt;strong&gt;Most end users of Flow
will not need to use this parser directly&lt;/strong&gt;, but JavaScript packages which make use of parsing
Flow-typed JavaScript can use this to generate Flow's syntax tree with annotated types attached.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-building-flow-from-source" class="anchor" aria-hidden="true" href="#building-flow-from-source"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Building Flow from source&lt;/h2&gt;
&lt;p&gt;Flow is written in OCaml (OCaml 4.07.1 is required).&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Install &lt;a href="https://opam.ocaml.org" rel="nofollow"&gt;&lt;code&gt;opam&lt;/code&gt;&lt;/a&gt;:&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Mac: &lt;code&gt;brew install opam&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Debian: &lt;code&gt;sudo apt-get install opam&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Other Linux: see &lt;a href="https://opam.ocaml.org/doc/Install.html" rel="nofollow"&gt;opam docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Windows: see &lt;a href="https://fdopen.github.io/opam-repository-mingw/installation/" rel="nofollow"&gt;OCaml for Windows docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start="2"&gt;
&lt;li&gt;Initialize &lt;code&gt;opam&lt;/code&gt;:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;opam init&lt;/pre&gt;&lt;/div&gt;
&lt;ol start="3"&gt;
&lt;li&gt;Install OCaml and Flow's dependencies:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; from within this git checkout&lt;/span&gt;
opam switch create &lt;span class="pl-c1"&gt;.&lt;/span&gt; --deps-only -y&lt;/pre&gt;&lt;/div&gt;
&lt;ol start="4"&gt;
&lt;li&gt;Build the &lt;code&gt;flow&lt;/code&gt; binary:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;eval&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;$(&lt;/span&gt;opam env&lt;span class="pl-pds"&gt;)&lt;/span&gt;&lt;/span&gt;
make&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This produces the &lt;code&gt;bin/flow&lt;/code&gt; binary.&lt;/p&gt;
&lt;ol start="5"&gt;
&lt;li&gt;Build &lt;code&gt;flow.js&lt;/code&gt; (optional):&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;opam install -y js_of_ocaml.3.4.0
make js&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This produces &lt;code&gt;bin/flow.js&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The Flow parser can also be compiled to JavaScript. &lt;a href="src/parser/README.md"&gt;Read how here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-running-the-tests" class="anchor" aria-hidden="true" href="#running-the-tests"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Running the tests&lt;/h2&gt;
&lt;p&gt;To run the tests, first compile flow using &lt;code&gt;make&lt;/code&gt;. Then run &lt;code&gt;bash ./runtests.sh bin/flow&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;There is a &lt;code&gt;make test&lt;/code&gt; target that compiles and runs tests.&lt;/p&gt;
&lt;p&gt;To run a subset of the tests you can pass a second argument to the &lt;code&gt;runtests.sh&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;For example: &lt;code&gt;bash runtests.sh bin/flow class | grep -v 'SKIP'&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-join-the-flow-community" class="anchor" aria-hidden="true" href="#join-the-flow-community"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Join the Flow community&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Website: &lt;a href="https://flow.org/" rel="nofollow"&gt;https://flow.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Discord: &lt;a href="https://discord.gg/8ezwRUK" rel="nofollow"&gt;https://discord.gg/8ezwRUK&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;irc: #flowtype on Freenode&lt;/li&gt;
&lt;li&gt;Twitter: follow &lt;a href="https://twitter.com/flowtype" rel="nofollow"&gt;@flowtype&lt;/a&gt; and &lt;a href="https://twitter.com/hashtag/flowtype" rel="nofollow"&gt;#flowtype&lt;/a&gt; to keep up with the latest Flow news.&lt;/li&gt;
&lt;li&gt;Stack Overflow: Ask a question with the &lt;a href="https://stackoverflow.com/questions/tagged/flowtype" rel="nofollow"&gt;flowtype tag&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-license" class="anchor" aria-hidden="true" href="#license"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;License&lt;/h2&gt;
&lt;p&gt;Flow is MIT-licensed (&lt;a href="https://github.com/facebook/flow/blob/master/LICENSE"&gt;LICENSE&lt;/a&gt;). The &lt;a href="https://flow.org/" rel="nofollow"&gt;website&lt;/a&gt; and &lt;a href="https://flow.org/en/docs/" rel="nofollow"&gt;documentation&lt;/a&gt; are licensed under the Creative Commons Attribution 4.0 license (&lt;a href="https://github.com/facebook/flow/blob/master/website/LICENSE-DOCUMENTATION"&gt;website/LICENSE-DOCUMENTATION&lt;/a&gt;).&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>facebook</author><guid isPermaLink="false">https://github.com/facebook/flow</guid><pubDate>Sun, 19 Jan 2020 00:02:00 GMT</pubDate></item></channel></rss>