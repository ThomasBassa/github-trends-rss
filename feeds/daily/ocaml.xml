<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>GitHub Trending: OCaml, Today</title><link>https://github.com/trending/ocaml?since=daily</link><description>The top repositories on GitHub for ocaml, measured daily</description><pubDate>Sat, 01 Feb 2020 01:11:33 GMT</pubDate><lastBuildDate>Sat, 01 Feb 2020 01:11:33 GMT</lastBuildDate><generator>PyRSS2Gen-1.1.0</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><ttl>720</ttl><item><title>let-def/lwd #1 in OCaml, Today</title><link>https://github.com/let-def/lwd</link><description>&lt;p&gt;&lt;i&gt;Lightweight document&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-lwd-a-lightweight-document-library" class="anchor" aria-hidden="true" href="#lwd-a-lightweight-document-library"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Lwd: a "lightweight document" library&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;Lwd&lt;/code&gt; is a library that lets you build values that changes over time. It is a simple form of incremental computation, in the like of &lt;a href="https://github.com/janestreet/incremental"&gt;Incremental&lt;/a&gt; and &lt;a href="https://github.com/dbuenzli/react"&gt;React&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-documents" class="anchor" aria-hidden="true" href="#documents"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Documents?&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Lwd&lt;/code&gt; shines when constructing a single value, which we call a document, by aggregating many sub-documents. These sub-documents might be updated independently and we want to keep a consistent view on the aggregated document: when we observe it, it should be the aggregate of the sub-documents in their current version.&lt;/p&gt;
&lt;p&gt;We will illustrate that with some examples. First we need to define the syntax for the final document:&lt;/p&gt;
&lt;div class="highlight highlight-source-ocaml"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;type&lt;/span&gt; &lt;span class="pl-k"&gt;hypertext &lt;/span&gt;=
  | &lt;span class="pl-en"&gt;Text&lt;/span&gt; &lt;span class="pl-k"&gt;of&lt;/span&gt; &lt;span class="pl-k"&gt;string&lt;/span&gt;
  | &lt;span class="pl-en"&gt;Link&lt;/span&gt; &lt;span class="pl-k"&gt;of&lt;/span&gt; (&lt;span class="pl-k"&gt;unit&lt;/span&gt; -&amp;gt; &lt;span class="pl-k"&gt;unit&lt;/span&gt;) &lt;span class="pl-k"&gt;*&lt;/span&gt; &lt;span class="pl-k"&gt;hypertext&lt;/span&gt;
  | &lt;span class="pl-en"&gt;List&lt;/span&gt; &lt;span class="pl-k"&gt;of&lt;/span&gt; &lt;span class="pl-k"&gt;hypertext&lt;/span&gt; &lt;span class="pl-k"&gt;list&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A value of type &lt;code&gt;hypertext&lt;/code&gt; will be interpreted by a backend. The interpretation is roughly as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Text str&lt;/code&gt; simply displays the string &lt;code&gt;str&lt;/code&gt; to the user (for instance on a terminal)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Link (callback, hypertext')&lt;/code&gt; displays the document &lt;code&gt;hypertext'&lt;/code&gt;.
If the backend determines that the user is interacting with the content in this sub-document, &lt;code&gt;callback&lt;/code&gt; is called.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;List (doc1 :: doc2 :: ...)&lt;/code&gt; displays &lt;code&gt;doc1&lt;/code&gt; followed by &lt;code&gt;doc2&lt;/code&gt; followed by &lt;code&gt;...&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To keep the example simple, we didn't say anything about styling nor how interactions are determined. For instance, the backend could display plain text in a default color, switch to another color for text below a &lt;code&gt;Link _&lt;/code&gt; constructor, and keep track of &lt;em&gt;focus&lt;/em&gt; by cycling between links when &lt;code&gt;&amp;lt;TAB&amp;gt;&lt;/code&gt; is pressed and choosing a different color for the focused link.&lt;/p&gt;
&lt;p&gt;A navigation menu could look like:&lt;/p&gt;
&lt;div class="highlight highlight-source-ocaml"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; newline &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;Text&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-c1"&gt;\n&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;in&lt;/span&gt;
&lt;span class="pl-en"&gt;List&lt;/span&gt; [
  &lt;span class="pl-en"&gt;Text&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Welcome to my cafe&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;; newline;
  &lt;span class="pl-en"&gt;Link&lt;/span&gt; (display_drink, &lt;span class="pl-en"&gt;Text&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;See drink options&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;); newline;
  &lt;span class="pl-en"&gt;Link&lt;/span&gt; (display_food, &lt;span class="pl-en"&gt;Text&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;See food options&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;); newline;
]&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We don't yet know how to implement the &lt;code&gt;display_drink&lt;/code&gt; and &lt;code&gt;display_food&lt;/code&gt; function but we have  enough infrastructure to receive user intent. To complete the task, we will look at the idea of implementing a function that "changes its mind": it returned a value but, because of some circumstances, decide that another value should have been returned.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-counting-clicks" class="anchor" aria-hidden="true" href="#counting-clicks"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Counting clicks&lt;/h3&gt;
&lt;p&gt;Let's imagine we want to make a button that counts the number of times it has been clicked: at first it displays 0, when triggered the 0 switch to 1, etc.&lt;/p&gt;
&lt;div class="highlight highlight-source-ocaml"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; counter &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;ref&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt;
&lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-en"&gt;on_click&lt;/span&gt; &lt;span class="pl-v"&gt;()&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; counter &lt;span class="pl-k"&gt;:=&lt;/span&gt; &lt;span class="pl-k"&gt;!&lt;/span&gt;counter &lt;span class="pl-k"&gt;+&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;

&lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-en"&gt;button&lt;/span&gt; &lt;span class="pl-v"&gt;clicks&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt;
  &lt;span class="pl-en"&gt;Link&lt;/span&gt; (on_click, &lt;span class="pl-en"&gt;Text&lt;/span&gt; (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Clicked &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;^&lt;/span&gt; string_of_int clicks &lt;span class="pl-k"&gt;^&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt; times&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
  
&lt;span class="pl-k"&gt;let&lt;/span&gt; document &lt;span class="pl-k"&gt;=&lt;/span&gt; button &lt;span class="pl-k"&gt;!&lt;/span&gt;counter &lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We now have a counter that is incremented when the button is clicked. However the content of the button is not updated.&lt;/p&gt;
&lt;p&gt;This is where &lt;code&gt;Lwd&lt;/code&gt; comes into play: the &lt;code&gt;Lwd.var&lt;/code&gt; type behaves almost like a reference but also tracks data dependencies. Let's update the example:&lt;/p&gt;
&lt;div class="highlight highlight-source-ocaml"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; counter &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;Lwd.&lt;/span&gt;var &lt;span class="pl-c1"&gt;0&lt;/span&gt;
&lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-en"&gt;on_click&lt;/span&gt; &lt;span class="pl-v"&gt;()&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;Lwd.&lt;/span&gt;set counter (&lt;span class="pl-c1"&gt;Lwd.&lt;/span&gt;peek counter &lt;span class="pl-k"&gt;+&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;)

&lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-en"&gt;button&lt;/span&gt; &lt;span class="pl-v"&gt;clicks&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt;
  &lt;span class="pl-en"&gt;Link&lt;/span&gt; (on_click, &lt;span class="pl-en"&gt;Text&lt;/span&gt; (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Clicked &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;^&lt;/span&gt; string_of_int clicks &lt;span class="pl-k"&gt;^&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt; times&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))

&lt;span class="pl-k"&gt;let&lt;/span&gt; document &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;Lwd.&lt;/span&gt;map button (&lt;span class="pl-c1"&gt;Lwd.&lt;/span&gt;get counter)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We make use of the following &lt;code&gt;Lwd&lt;/code&gt; functions:&lt;/p&gt;
&lt;div class="highlight highlight-source-ocaml"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;(*&lt;/span&gt; Variable manipulation function &lt;span class="pl-c"&gt;*)&lt;/span&gt;&lt;/span&gt;
val &lt;span class="pl-c1"&gt;Lwd.&lt;/span&gt;var : 'a -&amp;gt; 'a &lt;span class="pl-c1"&gt;Lwd.&lt;/span&gt;var
val &lt;span class="pl-c1"&gt;Lwd.&lt;/span&gt;set : 'a &lt;span class="pl-c1"&gt;Lwd.&lt;/span&gt;var -&amp;gt; 'a -&amp;gt; &lt;span class="pl-k"&gt;unit&lt;/span&gt;
val &lt;span class="pl-c1"&gt;Lwd.&lt;/span&gt;peek : 'a &lt;span class="pl-c1"&gt;Lwd.&lt;/span&gt;var -&amp;gt; 'a&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;var&lt;/code&gt;, &lt;code&gt;set&lt;/code&gt; and &lt;code&gt;peek&lt;/code&gt; behave like &lt;code&gt;ref&lt;/code&gt;, &lt;code&gt;:=&lt;/code&gt; and &lt;code&gt;!&lt;/code&gt;. They allocate a mutable cell, change its value and read the value at current time.&lt;/p&gt;
&lt;div class="highlight highlight-source-ocaml"&gt;&lt;pre&gt;val &lt;span class="pl-c1"&gt;Lwd.&lt;/span&gt;get : 'a &lt;span class="pl-c1"&gt;Lwd.&lt;/span&gt;var -&amp;gt; 'a &lt;span class="pl-c1"&gt;Lwd.&lt;/span&gt;t&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Lwd.get&lt;/code&gt; reads a mutable cell, but while &lt;code&gt;Lwd.peek&lt;/code&gt; returns the value immediately, &lt;code&gt;Lwd.get&lt;/code&gt; lets you access the value wrapped in the &lt;code&gt;Lwd.t&lt;/code&gt; type.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Lwd&lt;/code&gt; lets you build graph of computations with mutable inputs. The inputs or sources of the graph are made of &lt;code&gt;Lwd.var&lt;/code&gt; while the inner nodes are built using combinators.&lt;/p&gt;
&lt;p&gt;Here &lt;code&gt;Lwd.map : ('a -&amp;gt; 'b) -&amp;gt; 'a Lwd.t -&amp;gt; 'b Lwd.t&lt;/code&gt; apply a transformation to a varying value. That value might depend on arbitrary inputs, and if one of these input changes, the transformation will be recomputed too.&lt;/p&gt;
&lt;p&gt;When the &lt;code&gt;Link&lt;/code&gt; is triggered, the counter is incremented. Because &lt;code&gt;document&lt;/code&gt; depends on the value of the counter it is invalidated.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-optional-abstracting-local-state" class="anchor" aria-hidden="true" href="#optional-abstracting-local-state"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Optional: abstracting local state&lt;/h4&gt;
&lt;p&gt;This pattern of having local state that you want to manipulate in an almost purely functional way is very common and has been abstracted in the &lt;code&gt;Lwd_utils&lt;/code&gt; library.&lt;/p&gt;
&lt;p&gt;Here is another way to implement our button example:&lt;/p&gt;
&lt;div class="highlight highlight-source-ocaml"&gt;&lt;pre&gt;val &lt;span class="pl-c1"&gt;Lwd_utils.&lt;/span&gt;local_state : ('a &lt;span class="pl-c1"&gt;Lwd.&lt;/span&gt;t -&amp;gt; ('a -&amp;gt; &lt;span class="pl-k"&gt;unit&lt;/span&gt;) -&amp;gt; 'a &lt;span class="pl-k"&gt;*&lt;/span&gt; 'b) -&amp;gt; 'b  

&lt;span class="pl-c1"&gt;Lwd_utils.&lt;/span&gt;local_state (&lt;span class="pl-k"&gt;fun&lt;/span&gt; &lt;span class="pl-v"&gt;counter&lt;/span&gt; &lt;span class="pl-v"&gt;update&lt;/span&gt; -&amp;gt;
  &lt;span class="pl-k"&gt;let&lt;/span&gt; initial_value &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt; &lt;span class="pl-k"&gt;in&lt;/span&gt;
  &lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-en"&gt;increment&lt;/span&gt; &lt;span class="pl-v"&gt;clicks&lt;/span&gt; &lt;span class="pl-v"&gt;()&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; update (clicks &lt;span class="pl-k"&gt;+&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;) &lt;span class="pl-k"&gt;in&lt;/span&gt;
  &lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-en"&gt;button&lt;/span&gt; &lt;span class="pl-v"&gt;clicks&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt;
    &lt;span class="pl-en"&gt;Link&lt;/span&gt; (increment clicks,
    	  &lt;span class="pl-en"&gt;Text&lt;/span&gt; (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Clicked &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;^&lt;/span&gt; string_of_int clicks &lt;span class="pl-k"&gt;^&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt; times&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
  &lt;span class="pl-k"&gt;in&lt;/span&gt;
  initial_value, &lt;span class="pl-c1"&gt;Lwd.&lt;/span&gt;map button counter
)&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-building-computation-graph" class="anchor" aria-hidden="true" href="#building-computation-graph"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Building computation graph&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Lwd.t&lt;/code&gt; implements a few abstractions that should be familiar to seasoned functional programmers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;it is a &lt;em&gt;functor&lt;/em&gt;. With &lt;code&gt;Lwd.map : ('a -&amp;gt; 'b) -&amp;gt; 'a Lwd.t -&amp;gt; 'b Lwd.t&lt;/code&gt; you can transform values and chain the transformations&lt;/li&gt;
&lt;li&gt;it is an &lt;em&gt;applicative functor&lt;/em&gt;. With &lt;code&gt;Lwd.map2 : ('a -&amp;gt; 'b -&amp;gt; 'c) -&amp;gt; 'a Lwd.t -&amp;gt; 'b Lwd.t &amp;gt; 'c Lwd.t&lt;/code&gt;  you can connect two different chains (making the computation tree shaped, actually with sharing it will form a DAG)&lt;/li&gt;
&lt;li&gt;and, although this should in general be avoided, a &lt;em&gt;monad&lt;/em&gt;. With &lt;code&gt;Lwd.join : 'a Lwd.t Lwd.t -&amp;gt; 'a Lwd.t&lt;/code&gt; you can have a first pipeline that computes another pipeline and inject the inner one.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-consuming-computation-graph" class="anchor" aria-hidden="true" href="#consuming-computation-graph"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Consuming computation graph&lt;/h3&gt;
&lt;p&gt;So far we described how to build values of type &lt;code&gt;a Lwd.t&lt;/code&gt;  but we don't have a way to get access to those &lt;code&gt;a&lt;/code&gt; outside of the &lt;em&gt;Lwd&lt;/em&gt; graph.&lt;/p&gt;
&lt;p&gt;That's what &lt;code&gt;Lwd.root&lt;/code&gt;s are for:&lt;/p&gt;
&lt;div class="highlight highlight-source-ocaml"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;type&lt;/span&gt; &lt;span class="pl-k"&gt;'a Lwd.root&lt;/span&gt;
val &lt;span class="pl-c1"&gt;Lwd.&lt;/span&gt;observe : ?on_invalidate:('a -&amp;gt; &lt;span class="pl-k"&gt;unit&lt;/span&gt;) -&amp;gt; 'a t -&amp;gt; 'a root
val &lt;span class="pl-c1"&gt;Lwd.&lt;/span&gt;set_on_invalidate : 'a root -&amp;gt; ('a -&amp;gt; &lt;span class="pl-k"&gt;unit&lt;/span&gt;) -&amp;gt; &lt;span class="pl-k"&gt;unit&lt;/span&gt;

val &lt;span class="pl-c1"&gt;Lwd.&lt;/span&gt;sample : 'a root -&amp;gt; 'a
val &lt;span class="pl-c1"&gt;Lwd.&lt;/span&gt;is_damaged : 'a root -&amp;gt; &lt;span class="pl-k"&gt;bool&lt;/span&gt;
val &lt;span class="pl-c1"&gt;Lwd.&lt;/span&gt;release : 'a root -&amp;gt; &lt;span class="pl-k"&gt;unit&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When you are interested in accessing the content of an &lt;code&gt;a Lwd.t&lt;/code&gt; value, you create a root by &lt;code&gt;observe&lt;/code&gt;-ing it.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Lwd.sample&lt;/code&gt; lets you access the value at the current time.&lt;/p&gt;
&lt;p&gt;After calling &lt;code&gt;Lwd.sample&lt;/code&gt;, the &lt;code&gt;on_invalidate&lt;/code&gt; callback might be invoked if the value is invalidated: some input changed, the value you sampled is out of date.&lt;/p&gt;
&lt;p&gt;When you are done with the &lt;code&gt;root&lt;/code&gt; and are no longer interested in observing the value, you should call &lt;code&gt;release&lt;/code&gt;. This call to &lt;code&gt;release&lt;/code&gt;  is very important: the &lt;code&gt;root&lt;/code&gt; maintain the whole graph alive, so forgetting to &lt;code&gt;release&lt;/code&gt; leads to memory leaks. After releasing, the on_invalidate callback will not be invoked.&lt;/p&gt;
&lt;p&gt;A root can be in three possible states:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;released&lt;/li&gt;
&lt;li&gt;damaged&lt;/li&gt;
&lt;li&gt;sampled&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When created, the root is in the &lt;code&gt;released&lt;/code&gt; state: it does not maintain the graph alive.&lt;/p&gt;
&lt;p&gt;Calling &lt;code&gt;sample&lt;/code&gt; switches the root from the &lt;code&gt;released&lt;/code&gt; to the &lt;code&gt;sampled&lt;/code&gt; state.&lt;/p&gt;
&lt;pre lang="mermaid"&gt;&lt;code&gt;graph TD;
    R[Released]
    S[Sampled]
    D[Damaged]
    s{{call to sample}}
    i{{graph input change, call &amp;lt;tt&amp;gt;on_invalidate&amp;lt;/tt&amp;gt;}}
    r{{call to release}}
    R--&amp;gt;s
    s--&amp;gt;S
    D--&amp;gt;s
    S--&amp;gt;i
    i--&amp;gt;D
    S--&amp;gt;r
    D--&amp;gt;r
    r--&amp;gt;R
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;a id="user-content-relation-to-html-dom-and-reactive-ui-libraries" class="anchor" aria-hidden="true" href="#relation-to-html-dom-and-reactive-ui-libraries"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Relation to HTML, DOM, and reactive UI libraries&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Syntax, data description and HTML.&lt;/strong&gt; To introduce our first example, we had to build a syntax using the simple &lt;code&gt;hypertext&lt;/code&gt; algebraic data type. This type serves as an interface between the application and the interactive system: values of this type are produced by the front-end, like our example codes, and consumed by a back-end.&lt;/p&gt;
&lt;p&gt;In the case of a web browser, the surface syntax is &lt;code&gt;HTML&lt;/code&gt; which is much richer and more expressive than &lt;code&gt;hypertext&lt;/code&gt; but ultimately is just data: a static description of some pieces of information.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Adding programming languages.&lt;/strong&gt; Because static description are too limited for modern websites, Web browsers support the Javascript programming language. Pieces of javascript code can be put in the middle of the HTML syntax.&lt;/p&gt;
&lt;p&gt;Similarly the &lt;code&gt;unit -&amp;gt; unit&lt;/code&gt; parameter of the &lt;code&gt;Link&lt;/code&gt; constructor allows to inject arbitrary OCaml code in the middle of an &lt;code&gt;hypertext&lt;/code&gt; document.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Making things interactive.&lt;/strong&gt; Being able to execute arbitrary piece of codes is not enough to make a document interactive: to make things dynamic the code needs to change the contents of the document in return.&lt;/p&gt;
&lt;p&gt;Ultimately, interaction comes from this mutual dependency between document and code:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the document contains codes that are executed in certain circumstances (determined by the meaning of elements of the document).&lt;/li&gt;
&lt;li&gt;when executed, a code can change the document, producing new elements associated to new codes.&lt;/li&gt;
&lt;li&gt;this updated document can then execute new pieces of code, that may update the document, and so on...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;The DOM.&lt;/strong&gt; Web browser's solution to allowing document update is the Document Object Model abstraction. The idea is to derive mutable data structures from the syntactic specification: each syntactic construction has a corresponding "DOM class" that can store the same information in mutable fields. Applied to our hypertext example:&lt;/p&gt;
&lt;div class="highlight highlight-source-ocaml"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;type&lt;/span&gt; &lt;span class="pl-k"&gt;hypertext_dom &lt;/span&gt;=
  | &lt;span class="pl-en"&gt;Text&lt;/span&gt; &lt;span class="pl-k"&gt;of&lt;/span&gt; { &lt;span class="pl-k"&gt;mutable &lt;/span&gt;&lt;span class="pl-s1"&gt;text&lt;/span&gt;: &lt;span class="pl-k"&gt;string&lt;/span&gt; }
  | &lt;span class="pl-en"&gt;Link&lt;/span&gt; &lt;span class="pl-k"&gt;of&lt;/span&gt; { &lt;span class="pl-k"&gt;mutable &lt;/span&gt;&lt;span class="pl-s1"&gt;callback&lt;/span&gt;: (&lt;span class="pl-k"&gt;unit&lt;/span&gt; -&amp;gt; &lt;span class="pl-k"&gt;unit&lt;/span&gt;)
            &lt;span class="pl-k"&gt;;&lt;/span&gt; &lt;span class="pl-k"&gt;mutable &lt;/span&gt;&lt;span class="pl-s1"&gt;child&lt;/span&gt;: &lt;span class="pl-k"&gt;hypertext_dom&lt;/span&gt; }
  | &lt;span class="pl-en"&gt;List&lt;/span&gt; &lt;span class="pl-k"&gt;of&lt;/span&gt; { &lt;span class="pl-k"&gt;mutable &lt;/span&gt;&lt;span class="pl-s1"&gt;children&lt;/span&gt;: &lt;span class="pl-k"&gt;hypertext_dom&lt;/span&gt; &lt;span class="pl-k"&gt;list&lt;/span&gt; }&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While this might be a natural derivation in imperative languages, it proved difficult and error-prone to manipulate. Thousands of  Javascript libraries were proposed to ease DOM manipulation.&lt;/p&gt;
&lt;p&gt;Some successful ones drew inspiration from functional programming, in the sense that they discouraged side-effects, producing new documents rather than modifying existing ones.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Lwd&lt;/em&gt; rethinks this scaffolding: rather than starting from a static description, deriving mutable data structures to bring dynamism, and then restricting the mutations to make it manageable, we propose to keep the syntax as it is, lift the document in an  &lt;code&gt;Lwd.t&lt;/code&gt; computation graph and use variables nodes to express parts that can changes.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Reactive UI.&lt;/strong&gt; It is difficult to make a fair comparison with these libraries as the term is loosely defined and there many competing approaches. Furthermore Lwd can be presented as an alternative to the DOM so it is effective at a lower-level than what common reactive libraries target.&lt;/p&gt;
&lt;p&gt;That being said, we will try to address the following questions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;can reactive libraries, to a reasonable extent, be reimplemented on top of &lt;em&gt;Lwd&lt;/em&gt; rather than &lt;em&gt;DOM&lt;/em&gt;?&lt;/li&gt;
&lt;li&gt;can &lt;em&gt;Lwd&lt;/em&gt; be conveniently used without such layer?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The first question can be answered positively with a naive encoding: put &lt;code&gt;Lwd.var&lt;/code&gt; everywhere, essentially keeping enough "degrees of freedom" to change things as needed later. No static structure is enforced this way.&lt;/p&gt;
&lt;p&gt;To answer the second question, it is interesting to observe that there is no concept of "diffing" here. &lt;em&gt;Lwd&lt;/em&gt; does not try to see if things have changed in order to update them. Rather, if an input change, the whole branch that depends on it is recomputed.&lt;/p&gt;
&lt;p&gt;While this might lead to inefficient recomputations. ...TODO...&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>let-def</author><guid isPermaLink="false">https://github.com/let-def/lwd</guid><pubDate>Sat, 01 Feb 2020 00:01:00 GMT</pubDate></item><item><title>ocaml/ocaml-lsp #2 in OCaml, Today</title><link>https://github.com/ocaml/ocaml-lsp</link><description>&lt;p&gt;&lt;i&gt;OCaml Language Server Protocol implementation&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-ocaml-lsp" class="anchor" aria-hidden="true" href="#ocaml-lsp"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;OCaml-LSP&lt;/h1&gt;
&lt;p&gt;This project contains an implementation of an LSP server for OCaml and a
standalone implementation of the LSP protocol.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installation&lt;/h2&gt;
&lt;p&gt;We recommend to install the server via a project such as
&lt;a href="http://github.com/ocaml/opam"&gt;opam&lt;/a&gt; or &lt;a href="https://github.com/esy/esy"&gt;esy&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-opam" class="anchor" aria-hidden="true" href="#opam"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Opam&lt;/h3&gt;
&lt;p&gt;To install the lsp server in a particular opam switch:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ opam pin add ocaml-lsp-server https://github.com/ocaml/ocaml-lsp.git
$ opam install ocaml-lsp-server
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that you will need to run install the lsp server in every switch where
you'd like to use it.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-esy" class="anchor" aria-hidden="true" href="#esy"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Esy&lt;/h3&gt;
&lt;p&gt;To add the lsp server to an esy project, add the following lines to your
project's &lt;code&gt;package.json&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  "devDependencies": {
    "@opam/ocaml-lsp-server": "*"
  },
  "resolutions": {
    "@opam/ocaml-lsp-server": "github:ocaml/ocaml-lsp:ocaml-lsp-server.opam#&amp;lt;git-commit-sha&amp;gt;"
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that you need to specify a specific git commit sha from this repository
instead of &lt;code&gt;&amp;lt;git-commit-sha&amp;gt;&lt;/code&gt; placeholder above.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-source" class="anchor" aria-hidden="true" href="#source"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Source&lt;/h3&gt;
&lt;p&gt;This project uses submodules to handle dependencies. This is done so that users
who install ocaml-lsp-server into their sandbox will not share constraints on
the same dependencies that ocaml-lsp-server is using.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git clone --recurse-submodules http://github.com/ocaml/ocaml-lsp.git
$ cd ocaml-lsp
$ make build
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;a id="user-content-features" class="anchor" aria-hidden="true" href="#features"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Features&lt;/h2&gt;
&lt;p&gt;The server supports the following queries:&lt;/p&gt;
&lt;ul class="contains-task-list"&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; &lt;code&gt;textDocument/completion&lt;/code&gt;&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox"&gt; &lt;code&gt;completionItem/resolve&lt;/code&gt;&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; &lt;code&gt;textdocument/hover&lt;/code&gt;&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox"&gt; &lt;code&gt;textDocument/signatureHelp&lt;/code&gt;&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox"&gt; &lt;code&gt;textDocument/declaration&lt;/code&gt;&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; &lt;code&gt;textDocument/definition&lt;/code&gt;&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; &lt;code&gt;textDocument/typeDefinition&lt;/code&gt;&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox"&gt; &lt;code&gt;textDocument/implementation&lt;/code&gt;&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; &lt;code&gt;textDocument/codeLens&lt;/code&gt;&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; &lt;code&gt;textDocument/documentHighlight&lt;/code&gt;&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; &lt;code&gt;textDocument/documentSymbol&lt;/code&gt;&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; &lt;code&gt;textDocument/references&lt;/code&gt;&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox"&gt; &lt;code&gt;textDocument/documentColor&lt;/code&gt;&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox"&gt; &lt;code&gt;textDocument/colorPresentation&lt;/code&gt;&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox"&gt; &lt;code&gt;textDocument/formatting&lt;/code&gt;&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox"&gt; &lt;code&gt;textDocument/rangeFormatting&lt;/code&gt;&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox"&gt; &lt;code&gt;textDocument/onTypeFormatting&lt;/code&gt;&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox"&gt; &lt;code&gt;textDocument/prepareRename&lt;/code&gt;&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; &lt;code&gt;textDocument/foldingRange&lt;/code&gt;&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox"&gt; &lt;code&gt;textDocument/selectionRange&lt;/code&gt;&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox"&gt; &lt;code&gt;workspace/symbol&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that degrees of support for each LSP request are varying.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-tests" class="anchor" aria-hidden="true" href="#tests"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tests&lt;/h2&gt;
&lt;p&gt;To run tests execute:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ make test
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that tests require &lt;a href="https://nodejs.org/en/" rel="nofollow"&gt;Node.js&lt;/a&gt; and &lt;a href="https://yarnpkg.com/lang/en/" rel="nofollow"&gt;Yarn&lt;/a&gt; installed.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-relationship-to-other-tools" class="anchor" aria-hidden="true" href="#relationship-to-other-tools"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Relationship to Other Tools&lt;/h2&gt;
&lt;p&gt;The lsp server uses merlin under the hood, but users are not required to have
merlin installed. We vendor merlin because we currently heavily depend on some
implementation details of merlin that make infeasible to upgrade the lsp server
and merlin independently.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-history" class="anchor" aria-hidden="true" href="#history"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;History&lt;/h2&gt;
&lt;p&gt;The implementation of the lsp protocol itself was taken from &lt;a href="https://github.com/facebook/hhvm/blob/master/hphp/hack/src/utils/lsp/lsp.mli"&gt;facebook's
hack&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Previously, this lsp server was a part of merlin, until it was realized that the
lsp protocol covers a wider scope than merlin.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-comparison-to-other-lsp-servers-for-ocaml" class="anchor" aria-hidden="true" href="#comparison-to-other-lsp-servers-for-ocaml"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Comparison to other LSP Servers for OCaml&lt;/h2&gt;
&lt;p&gt;Note that the comparisons below make no claims of being objective and may be
entirely out of date:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/jaredly/reason-language-server"&gt;reason-language-server&lt;/a&gt;
This server supports
&lt;a href="https://github.com/BuckleScript/bucklescript"&gt;bucklescript&lt;/a&gt; &amp;amp;
&lt;a href="https://github.com/facebook/reason"&gt;reason&lt;/a&gt;. However, this project does not
use merlin which means that it supports less versions of OCaml and offers less
"smart" functionality - especially in the face of sources that do not yet
compile.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/ocaml-lsp/ocaml-language-server"&gt;ocaml-language-server&lt;/a&gt;
This project is extremely similar in the functionality it provides because it
also reuses merlin on the backend. The essential difference is that this
project is written in typescript, while our server is in OCaml. We feel that
it's best to use OCaml to maximize the contributor pool.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>ocaml</author><guid isPermaLink="false">https://github.com/ocaml/ocaml-lsp</guid><pubDate>Sat, 01 Feb 2020 00:02:00 GMT</pubDate></item><item><title>facebook/flow #3 in OCaml, Today</title><link>https://github.com/facebook/flow</link><description>&lt;p&gt;&lt;i&gt;Adds static typing to JavaScript to improve developer productivity and code quality.&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-flow---" class="anchor" aria-hidden="true" href="#flow---"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Flow &lt;a href="https://circleci.com/gh/facebook/flow/tree/master" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/3e735dfe6d6a32a0e165375f12c88d23539e5984/68747470733a2f2f636972636c6563692e636f6d2f67682f66616365626f6f6b2f666c6f772f747265652f6d61737465722e7376673f7374796c653d736869656c64" alt="Build Status" data-canonical-src="https://circleci.com/gh/facebook/flow/tree/master.svg?style=shield" style="max-width:100%;"&gt;&lt;/a&gt; &lt;a href="https://ci.appveyor.com/project/Facebook/flow/branch/master" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/5c043ecc89663d6909dbbfd393a5ac830194f6aa/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f74687976783669356e6978746f6f636d2f6272616e63682f6d61737465723f7376673d74727565" alt="Windows Build Status" data-canonical-src="https://ci.appveyor.com/api/projects/status/thyvx6i5nixtoocm/branch/master?svg=true" style="max-width:100%;"&gt;&lt;/a&gt; &lt;a href="https://discordapp.com/invite/8ezwRUK" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/fcb98412a4ab4b75ec6da59a49a21302e2bf4a4b/68747470733a2f2f696d672e736869656c64732e696f2f646973636f72642f3533393630363337363333393733343535382e7376673f6c6162656c3d646973636f7264266c6f676f3d646973636f7264266c6f676f436f6c6f723d7768697465" alt="Join the chat at https://discordapp.com/invite/8ezwRUK" data-canonical-src="https://img.shields.io/discord/539606376339734558.svg?label=discord&amp;amp;logo=discord&amp;amp;logoColor=white" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Flow is a static typechecker for JavaScript. To find out more about Flow, check out &lt;a href="https://flow.org/" rel="nofollow"&gt;flow.org&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For a background on the project, please read &lt;a href="https://flow.org/en/docs/lang/" rel="nofollow"&gt;this overview&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-contents" class="anchor" aria-hidden="true" href="#contents"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#requirements"&gt;Requirements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#using-flow"&gt;Using Flow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#using-flows-parser-from-javascript"&gt;Using Flow's parser from JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#building-flow-from-source"&gt;Building Flow from source&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#join-the-flow-community"&gt;Join the Flow community&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#license"&gt;License&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-requirements" class="anchor" aria-hidden="true" href="#requirements"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Flow works with:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;macOS&lt;/li&gt;
&lt;li&gt;Linux (64-bit)&lt;/li&gt;
&lt;li&gt;Windows (64-bit, Windows 10 recommended)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are &lt;a href="https://github.com/facebook/flow/releases"&gt;binary distributions&lt;/a&gt; for each of these platforms and you can also build it from source on any of them as well.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-using-flow" class="anchor" aria-hidden="true" href="#using-flow"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Using Flow&lt;/h2&gt;
&lt;p&gt;Check out the &lt;a href="https://flow.org/en/docs/install/" rel="nofollow"&gt;installation instructions&lt;/a&gt;, and then &lt;a href="https://flow.org/en/docs/usage/" rel="nofollow"&gt;how to get started&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-using-flows-parser-from-javascript" class="anchor" aria-hidden="true" href="#using-flows-parser-from-javascript"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Using Flow's parser from JavaScript&lt;/h2&gt;
&lt;p&gt;While Flow is written in OCaml, its parser is available as a compiled-to-JavaScript module published to npm, named &lt;a href="https://www.npmjs.com/package/flow-parser" rel="nofollow"&gt;flow-parser&lt;/a&gt;. &lt;strong&gt;Most end users of Flow
will not need to use this parser directly&lt;/strong&gt;, but JavaScript packages which make use of parsing
Flow-typed JavaScript can use this to generate Flow's syntax tree with annotated types attached.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-building-flow-from-source" class="anchor" aria-hidden="true" href="#building-flow-from-source"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Building Flow from source&lt;/h2&gt;
&lt;p&gt;Flow is written in OCaml (OCaml 4.07.1 is required).&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Install &lt;a href="https://opam.ocaml.org" rel="nofollow"&gt;&lt;code&gt;opam&lt;/code&gt;&lt;/a&gt;:&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Mac: &lt;code&gt;brew install opam&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Debian: &lt;code&gt;sudo apt-get install opam&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Other Linux: see &lt;a href="https://opam.ocaml.org/doc/Install.html" rel="nofollow"&gt;opam docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Windows: see &lt;a href="https://fdopen.github.io/opam-repository-mingw/installation/" rel="nofollow"&gt;OCaml for Windows docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start="2"&gt;
&lt;li&gt;Initialize &lt;code&gt;opam&lt;/code&gt;:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;opam init&lt;/pre&gt;&lt;/div&gt;
&lt;ol start="3"&gt;
&lt;li&gt;Install OCaml and Flow's dependencies:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; from within this git checkout&lt;/span&gt;
opam switch create &lt;span class="pl-c1"&gt;.&lt;/span&gt; --deps-only -y&lt;/pre&gt;&lt;/div&gt;
&lt;ol start="4"&gt;
&lt;li&gt;Build the &lt;code&gt;flow&lt;/code&gt; binary:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;eval&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;$(&lt;/span&gt;opam env&lt;span class="pl-pds"&gt;)&lt;/span&gt;&lt;/span&gt;
make&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This produces the &lt;code&gt;bin/flow&lt;/code&gt; binary.&lt;/p&gt;
&lt;ol start="5"&gt;
&lt;li&gt;Build &lt;code&gt;flow.js&lt;/code&gt; (optional):&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;opam install -y js_of_ocaml.3.4.0
make js&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This produces &lt;code&gt;bin/flow.js&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The Flow parser can also be compiled to JavaScript. &lt;a href="src/parser/README.md"&gt;Read how here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-running-the-tests" class="anchor" aria-hidden="true" href="#running-the-tests"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Running the tests&lt;/h2&gt;
&lt;p&gt;To run the tests, first compile flow using &lt;code&gt;make&lt;/code&gt;. Then run &lt;code&gt;bash ./runtests.sh bin/flow&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;There is a &lt;code&gt;make test&lt;/code&gt; target that compiles and runs tests.&lt;/p&gt;
&lt;p&gt;To run a subset of the tests you can pass a second argument to the &lt;code&gt;runtests.sh&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;For example: &lt;code&gt;bash runtests.sh bin/flow class | grep -v 'SKIP'&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-join-the-flow-community" class="anchor" aria-hidden="true" href="#join-the-flow-community"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Join the Flow community&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Website: &lt;a href="https://flow.org/" rel="nofollow"&gt;https://flow.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Discord: &lt;a href="https://discord.gg/8ezwRUK" rel="nofollow"&gt;https://discord.gg/8ezwRUK&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;irc: #flowtype on Freenode&lt;/li&gt;
&lt;li&gt;Twitter: follow &lt;a href="https://twitter.com/flowtype" rel="nofollow"&gt;@flowtype&lt;/a&gt; and &lt;a href="https://twitter.com/hashtag/flowtype" rel="nofollow"&gt;#flowtype&lt;/a&gt; to keep up with the latest Flow news.&lt;/li&gt;
&lt;li&gt;Stack Overflow: Ask a question with the &lt;a href="https://stackoverflow.com/questions/tagged/flowtype" rel="nofollow"&gt;flowtype tag&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-license" class="anchor" aria-hidden="true" href="#license"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;License&lt;/h2&gt;
&lt;p&gt;Flow is MIT-licensed (&lt;a href="https://github.com/facebook/flow/blob/master/LICENSE"&gt;LICENSE&lt;/a&gt;). The &lt;a href="https://flow.org/" rel="nofollow"&gt;website&lt;/a&gt; and &lt;a href="https://flow.org/en/docs/" rel="nofollow"&gt;documentation&lt;/a&gt; are licensed under the Creative Commons Attribution 4.0 license (&lt;a href="https://github.com/facebook/flow/blob/master/website/LICENSE-DOCUMENTATION"&gt;website/LICENSE-DOCUMENTATION&lt;/a&gt;).&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>facebook</author><guid isPermaLink="false">https://github.com/facebook/flow</guid><pubDate>Sat, 01 Feb 2020 00:03:00 GMT</pubDate></item></channel></rss>