<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>GitHub Trending: Elm, Today</title><link>https://github.com/trending/elm?since=daily</link><description>The top repositories on GitHub for elm, measured daily</description><pubDate>Mon, 03 Feb 2020 01:12:25 GMT</pubDate><lastBuildDate>Mon, 03 Feb 2020 01:12:25 GMT</lastBuildDate><generator>PyRSS2Gen-1.1.0</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><ttl>720</ttl><item><title>dillonkearns/elm-pages #1 in Elm, Today</title><link>https://github.com/dillonkearns/elm-pages</link><description>&lt;p&gt;&lt;i&gt;A statically typed site generator for Elm.&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-elm-pages----" class="anchor" aria-hidden="true" href="#elm-pages----"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;code&gt;elm-pages&lt;/code&gt; &lt;a href="https://app.netlify.com/sites/elm-pages/deploys" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/42daf99bafba1664a7b777b0a56018c66c01cce5/68747470733a2f2f6170692e6e65746c6966792e636f6d2f6170692f76312f6261646765732f38656534613637342d346633372d346631362d623939652d3630376330613032656537352f6465706c6f792d737461747573" alt="Netlify Status" data-canonical-src="https://api.netlify.com/api/v1/badges/8ee4a674-4f37-4f16-b99e-607c0a02ee75/deploy-status" style="max-width:100%;"&gt;&lt;/a&gt; &lt;a href="https://travis-ci.org/dillonkearns/elm-pages" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/4c80a5520758ba51fd333fae492227da3875827e/68747470733a2f2f7472617669732d63692e6f72672f64696c6c6f6e6b6561726e732f656c6d2d70616765732e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/dillonkearns/elm-pages.svg?branch=master" style="max-width:100%;"&gt;&lt;/a&gt; &lt;a href="https://npmjs.com/package/elm-pages" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/7fd061c34630cfd3888db760f18ee91956997231/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f656c6d2d70616765732e737667" alt="npm" data-canonical-src="https://img.shields.io/npm/v/elm-pages.svg" style="max-width:100%;"&gt;&lt;/a&gt; &lt;a href="https://package.elm-lang.org/packages/dillonkearns/elm-pages/latest/" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/6a2bfccd8c0dbdfcc49f7cae7f29aead29e66ec8/68747470733a2f2f696d672e736869656c64732e696f2f656c6d2d7061636b6167652f762f64696c6c6f6e6b6561726e732f656c6d2d70616765732e737667" alt="Elm package" data-canonical-src="https://img.shields.io/elm-package/v/dillonkearns/elm-pages.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;&lt;a href="#contributors-"&gt;&lt;img src="https://camo.githubusercontent.com/19eda5c435cb320e68748ad4a5d337f98bb55c7c/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f616c6c5f636f6e7472696275746f72732d322d6f72616e67652e7376673f7374796c653d666c61742d737175617265" alt="All Contributors" data-canonical-src="https://img.shields.io/badge/all_contributors-2-orange.svg?style=flat-square" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://app.netlify.com/start/deploy?repository=https://github.com/dillonkearns/elm-pages-starter" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/be2eb66bb727e25655f1dcff88c2fdca82a77513/68747470733a2f2f7777772e6e65746c6966792e636f6d2f696d672f6465706c6f792f627574746f6e2e737667" alt="Deploy to Netlify" data-canonical-src="https://www.netlify.com/img/deploy/button.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A &lt;strong&gt;statically typed&lt;/strong&gt; site generator, written with pure Elm.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-getting-started-resources" class="anchor" aria-hidden="true" href="#getting-started-resources"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Getting Started Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dillonkearns/elm-pages-starter"&gt;Quick start repo&lt;/a&gt; &lt;a href="https://elm-pages-starter.netlify.com" rel="nofollow"&gt;(live site hosted here)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://elm-pages.com/blog/introducing-elm-pages" rel="nofollow"&gt;Introducing &lt;code&gt;elm-pages&lt;/code&gt; blog post&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://elm-pages.com/docs" rel="nofollow"&gt;Quick Start page in docs site&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dillonkearns/elm-pages/blob/master/examples/"&gt;&lt;code&gt;examples&lt;/code&gt; folder&lt;/a&gt; (includes &lt;a href="https://elm-pages.com" rel="nofollow"&gt;https://elm-pages.com&lt;/a&gt; site source)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-key-features" class="anchor" aria-hidden="true" href="#key-features"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Key features&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-seo-made-easy" class="anchor" aria-hidden="true" href="#seo-made-easy"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;SEO made easy&lt;/h3&gt;
&lt;p&gt;With &lt;code&gt;elm-pages&lt;/code&gt;, SEO is as easy
as calling a type-safe, high-level Elm API
and passing in data from your content's metadata.&lt;/p&gt;
&lt;p&gt;The metadata is just Elm data that you define
however you want, using a Json Decoder to grab
data out of your markdown frontmatter.&lt;/p&gt;
&lt;div class="highlight highlight-source-elm"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-c1"&gt;MyMetadata&lt;/span&gt; &lt;span class="pl-k"&gt;exposing&lt;/span&gt; (&lt;span class="pl-k"&gt;MyMetadata&lt;/span&gt;)

&lt;span class="pl-en"&gt;head&lt;/span&gt; &lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-k"&gt;BlogMetadata&lt;/span&gt; &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-k"&gt;List&lt;/span&gt; (&lt;span class="pl-k"&gt;Head&lt;/span&gt;.&lt;span class="pl-k"&gt;Tag&lt;/span&gt; &lt;span class="pl-k"&gt;Pages&lt;/span&gt;.&lt;span class="pl-k"&gt;PathKey&lt;/span&gt;)
&lt;span class="pl-en"&gt;head &lt;/span&gt;meta &lt;span class="pl-k"&gt;=&lt;/span&gt;
  &lt;span class="pl-c1"&gt;Seo&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;summaryLarge
    &lt;span class="pl-c1"&gt;&lt;span class="pl-c1"&gt;{&lt;/span&gt;&lt;/span&gt; canonicalUrlOverride &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;Nothing&lt;/span&gt;
    &lt;span class="pl-c1"&gt;&lt;span class="pl-c1"&gt;,&lt;/span&gt;&lt;/span&gt; siteName &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;elm-pages&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
    &lt;span class="pl-c1"&gt;&lt;span class="pl-c1"&gt;,&lt;/span&gt;&lt;/span&gt; image &lt;span class="pl-k"&gt;=&lt;/span&gt;
      &lt;span class="pl-c1"&gt;&lt;span class="pl-c1"&gt;{&lt;/span&gt;&lt;/span&gt; url &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;PagesNew&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;images&lt;span class="pl-k"&gt;.&lt;/span&gt;icon
      &lt;span class="pl-c1"&gt;&lt;span class="pl-c1"&gt;,&lt;/span&gt;&lt;/span&gt; alt &lt;span class="pl-k"&gt;=&lt;/span&gt; meta&lt;span class="pl-k"&gt;.&lt;/span&gt;description
      &lt;span class="pl-c1"&gt;&lt;span class="pl-c1"&gt;,&lt;/span&gt;&lt;/span&gt; dimensions &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;Nothing&lt;/span&gt;
      &lt;span class="pl-c1"&gt;&lt;span class="pl-c1"&gt;,&lt;/span&gt;&lt;/span&gt; mimeType &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;Nothing&lt;/span&gt;
      &lt;span class="pl-c1"&gt;&lt;span class="pl-c1"&gt;}&lt;/span&gt;&lt;/span&gt;
    &lt;span class="pl-c1"&gt;&lt;span class="pl-c1"&gt;,&lt;/span&gt;&lt;/span&gt; description &lt;span class="pl-k"&gt;=&lt;/span&gt; meta&lt;span class="pl-k"&gt;.&lt;/span&gt;description
    &lt;span class="pl-c1"&gt;&lt;span class="pl-c1"&gt;,&lt;/span&gt;&lt;/span&gt; locale &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;Nothing&lt;/span&gt;
    &lt;span class="pl-c1"&gt;&lt;span class="pl-c1"&gt;,&lt;/span&gt;&lt;/span&gt; title &lt;span class="pl-k"&gt;=&lt;/span&gt; meta&lt;span class="pl-k"&gt;.&lt;/span&gt;title
    &lt;span class="pl-c1"&gt;&lt;span class="pl-c1"&gt;}&lt;/span&gt;&lt;/span&gt;
    &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;Seo&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;article
      &lt;span class="pl-c1"&gt;&lt;span class="pl-c1"&gt;{&lt;/span&gt;&lt;/span&gt; tags &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;&lt;span class="pl-c1"&gt;[]&lt;/span&gt;&lt;/span&gt;
      &lt;span class="pl-c1"&gt;&lt;span class="pl-c1"&gt;,&lt;/span&gt;&lt;/span&gt; section &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;Nothing&lt;/span&gt;
      &lt;span class="pl-c1"&gt;&lt;span class="pl-c1"&gt;,&lt;/span&gt;&lt;/span&gt; publishedTime &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;Just&lt;/span&gt; &lt;span class="pl-k"&gt;(&lt;/span&gt;&lt;span class="pl-c1"&gt;Date&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;toIsoString meta&lt;span class="pl-k"&gt;.&lt;/span&gt;published&lt;span class="pl-k"&gt;)&lt;/span&gt;
      &lt;span class="pl-c1"&gt;&lt;span class="pl-c1"&gt;,&lt;/span&gt;&lt;/span&gt; modifiedTime &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;Nothing&lt;/span&gt;
      &lt;span class="pl-c1"&gt;&lt;span class="pl-c1"&gt;,&lt;/span&gt;&lt;/span&gt; expirationTime &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;Nothing&lt;/span&gt;
      &lt;span class="pl-c1"&gt;&lt;span class="pl-c1"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-optimized-for-performance" class="anchor" aria-hidden="true" href="#optimized-for-performance"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Optimized for performance&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;elm-pages&lt;/code&gt; has a set of features built-in to make
sure your page is blazing fast on any device.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Automatic page pre-rendering&lt;/li&gt;
&lt;li&gt;Page content is split up per-page so page content downloads and parses just-in-time&lt;/li&gt;
&lt;li&gt;Page pre-fetching on link hover&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Try out &lt;code&gt;elm-pages&lt;/code&gt;, open up Lighthouse, and
see for yourself! Or check out &lt;a href="https://elm-pages.com" rel="nofollow"&gt;https://elm-pages.com&lt;/a&gt;
(find the source code in the &lt;a href="https://github.com/dillonkearns/elm-pages/tree/master/examples/docs"&gt;&lt;code&gt;examples/docs/&lt;/code&gt;&lt;/a&gt; folder).&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-built-in-type-safety" class="anchor" aria-hidden="true" href="#built-in-type-safety"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Built-in type-safety&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;elm-pages&lt;/code&gt; generates static Elm data for you
to make sure you don't have any broken links or images.
The SEO API even uses it to make sure you are only pointing to
valid images and pages so you have valid metadata!&lt;/p&gt;
&lt;p&gt;For example, if you have a content folder like this:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;- content
  - blog
    - index.md
    - hello-world.md
    - second-post.md&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then you will be able to access those pages in a
type-safe way like this from Elm:&lt;/p&gt;
&lt;div class="highlight highlight-source-elm"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;--&lt;/span&gt; this is a generated module&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;--&lt;/span&gt; it is re-run whenever your `content` folder changes&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;--&lt;/span&gt; just run `elm-pages develop` to start the watcher&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-c1"&gt;Pages&lt;/span&gt; &lt;span class="pl-k"&gt;exposing&lt;/span&gt; (&lt;span class="pl-en"&gt;pages&lt;/span&gt;)
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-c1"&gt;Pages.PagePath&lt;/span&gt; &lt;span class="pl-k"&gt;as&lt;/span&gt; &lt;span class="pl-c1"&gt;PagePath&lt;/span&gt; &lt;span class="pl-k"&gt;exposing&lt;/span&gt; (&lt;span class="pl-k"&gt;PagePath&lt;/span&gt;)


&lt;span class="pl-en"&gt;indexPage&lt;/span&gt; &lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-k"&gt;PagePath&lt;/span&gt; &lt;span class="pl-k"&gt;Pages&lt;/span&gt;.&lt;span class="pl-k"&gt;PathKey&lt;/span&gt;
&lt;span class="pl-en"&gt;indexPage &lt;/span&gt;&lt;span class="pl-k"&gt;=&lt;/span&gt;
  pages&lt;span class="pl-k"&gt;.&lt;/span&gt;blog&lt;span class="pl-k"&gt;.&lt;/span&gt;index


&lt;span class="pl-en"&gt;helloPostPage&lt;/span&gt; &lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-k"&gt;PagePath&lt;/span&gt; &lt;span class="pl-k"&gt;Pages&lt;/span&gt;.&lt;span class="pl-k"&gt;PathKey&lt;/span&gt;
&lt;span class="pl-en"&gt;helloPostPage &lt;/span&gt;&lt;span class="pl-k"&gt;=&lt;/span&gt;
  pages&lt;span class="pl-k"&gt;.&lt;/span&gt;blog&lt;span class="pl-k"&gt;.&lt;/span&gt;helloWorld


&lt;span class="pl-en"&gt;secondPost&lt;/span&gt; &lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-k"&gt;PagePath&lt;/span&gt; &lt;span class="pl-k"&gt;Pages&lt;/span&gt;.&lt;span class="pl-k"&gt;PathKey&lt;/span&gt;
&lt;span class="pl-en"&gt;secondPost &lt;/span&gt;&lt;span class="pl-k"&gt;=&lt;/span&gt;
  pages&lt;span class="pl-k"&gt;.&lt;/span&gt;blog&lt;span class="pl-k"&gt;.&lt;/span&gt;secondPost&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-offline-support" class="anchor" aria-hidden="true" href="#offline-support"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Offline Support&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;elm-pages&lt;/code&gt; uses pure elm configuration to setup
your progressive web app settings. This includes
a "source icon" which is used to generate your favicons
and icons for the images following best practices for
a progressive web app. The image is even a type-safe
&lt;code&gt;ImagePath&lt;/code&gt; that guarantees you are using an available
image!&lt;/p&gt;
&lt;div class="highlight highlight-source-elm"&gt;&lt;pre&gt;&lt;span class="pl-en"&gt;manifest&lt;/span&gt; &lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-k"&gt;Manifest&lt;/span&gt;.&lt;span class="pl-k"&gt;Config&lt;/span&gt; &lt;span class="pl-k"&gt;Pages&lt;/span&gt;.&lt;span class="pl-k"&gt;PathKey&lt;/span&gt;
&lt;span class="pl-en"&gt;manifest &lt;/span&gt;&lt;span class="pl-k"&gt;=&lt;/span&gt;
    &lt;span class="pl-c1"&gt;&lt;span class="pl-c1"&gt;{&lt;/span&gt;&lt;/span&gt; backgroundColor &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;Just&lt;/span&gt; &lt;span class="pl-c1"&gt;Color&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;white
    &lt;span class="pl-c1"&gt;&lt;span class="pl-c1"&gt;,&lt;/span&gt;&lt;/span&gt; categories &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;&lt;span class="pl-c1"&gt;[&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;Pages&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;&lt;span class="pl-c1"&gt;Manifest&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;&lt;span class="pl-c1"&gt;Category&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;education &lt;span class="pl-c1"&gt;&lt;span class="pl-c1"&gt;]&lt;/span&gt;&lt;/span&gt;
    &lt;span class="pl-c1"&gt;&lt;span class="pl-c1"&gt;,&lt;/span&gt;&lt;/span&gt; displayMode &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;Manifest&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;&lt;span class="pl-c1"&gt;Standalone&lt;/span&gt;
    &lt;span class="pl-c1"&gt;&lt;span class="pl-c1"&gt;,&lt;/span&gt;&lt;/span&gt; orientation &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;Manifest&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;&lt;span class="pl-c1"&gt;Portrait&lt;/span&gt;
    &lt;span class="pl-c1"&gt;&lt;span class="pl-c1"&gt;,&lt;/span&gt;&lt;/span&gt; description &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;elm-pages - A statically typed site generator.&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
    &lt;span class="pl-c1"&gt;&lt;span class="pl-c1"&gt;,&lt;/span&gt;&lt;/span&gt; iarcRatingId &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;Nothing&lt;/span&gt;
    &lt;span class="pl-c1"&gt;&lt;span class="pl-c1"&gt;,&lt;/span&gt;&lt;/span&gt; name &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;elm-pages docs&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
    &lt;span class="pl-c1"&gt;&lt;span class="pl-c1"&gt;,&lt;/span&gt;&lt;/span&gt; themeColor &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;Just&lt;/span&gt; &lt;span class="pl-c1"&gt;Color&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;white
    &lt;span class="pl-c1"&gt;&lt;span class="pl-c1"&gt;,&lt;/span&gt;&lt;/span&gt; startUrl &lt;span class="pl-k"&gt;=&lt;/span&gt; pages&lt;span class="pl-k"&gt;.&lt;/span&gt;index
    &lt;span class="pl-c1"&gt;&lt;span class="pl-c1"&gt;,&lt;/span&gt;&lt;/span&gt; shortName &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;Just&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;elm-pages&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
    &lt;span class="pl-c1"&gt;&lt;span class="pl-c1"&gt;,&lt;/span&gt;&lt;/span&gt; sourceIcon &lt;span class="pl-k"&gt;=&lt;/span&gt; images&lt;span class="pl-k"&gt;.&lt;/span&gt;icon
    &lt;span class="pl-c1"&gt;&lt;span class="pl-c1"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It will also take care of setting up a service worker
which will automatically cache the basic shell
for your application's compiled Elm code and
HTML container. The page content is currently cached
as it is loaded, but in the future there will
be an API to choose some pages to "warm up" in the cache.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-whats-next" class="anchor" aria-hidden="true" href="#whats-next"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;What's next?&lt;/h2&gt;
&lt;p&gt;Take a look at the current projects to see the current priorities!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/dillonkearns/elm-pages/projects"&gt;https://github.com/dillonkearns/elm-pages/projects&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-contributors-" class="anchor" aria-hidden="true" href="#contributors-"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contributors &lt;g-emoji class="g-emoji" alias="sparkles" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2728.png"&gt;✨&lt;/g-emoji&gt;&lt;/h2&gt;
&lt;p&gt;Thanks goes to these wonderful people (&lt;a href="https://allcontributors.org/docs/en/emoji-key" rel="nofollow"&gt;emoji key&lt;/a&gt;):&lt;/p&gt;



&lt;table&gt;
  &lt;tbody&gt;&lt;tr&gt;
    &lt;td align="center"&gt;&lt;a href="https://github.com/danmarcab"&gt;&lt;img src="https://avatars2.githubusercontent.com/u/1517969?v=4" width="100px;" alt="" style="max-width:100%;"&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Daniel Marín&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href="https://github.com/dillonkearns/elm-pages/commits?author=danmarcab" title="Code"&gt;&lt;g-emoji class="g-emoji" alias="computer" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4bb.png"&gt;💻&lt;/g-emoji&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;td align="center"&gt;&lt;a href="https://citric.id" rel="nofollow"&gt;&lt;img src="https://avatars1.githubusercontent.com/u/296665?v=4" width="100px;" alt="" style="max-width:100%;"&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Steven Vandevelde&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href="https://github.com/dillonkearns/elm-pages/commits?author=icidasset" title="Code"&gt;&lt;g-emoji class="g-emoji" alias="computer" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4bb.png"&gt;💻&lt;/g-emoji&gt;&lt;/a&gt;&lt;/td&gt;
  &lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;



&lt;p&gt;This project follows the &lt;a href="https://github.com/all-contributors/all-contributors"&gt;all-contributors&lt;/a&gt; specification. Contributions of any kind welcome!&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>dillonkearns</author><guid isPermaLink="false">https://github.com/dillonkearns/elm-pages</guid><pubDate>Mon, 03 Feb 2020 00:01:00 GMT</pubDate></item><item><title>rtfeldman/elm-spa-example #2 in Elm, Today</title><link>https://github.com/rtfeldman/elm-spa-example</link><description>&lt;p&gt;&lt;i&gt;A Single Page Application written in Elm&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="" class="anchor" aria-hidden="true" href="#"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://cloud.githubusercontent.com/assets/556934/25448178/3e7dc5c0-2a7d-11e7-8069-06da5169dae6.png"&gt;&lt;img src="https://cloud.githubusercontent.com/assets/556934/25448178/3e7dc5c0-2a7d-11e7-8069-06da5169dae6.png" alt="RealWorld Example App" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;g-emoji class="g-emoji" alias="point_right" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f449.png"&gt;👉&lt;/g-emoji&gt; I gave &lt;a href="https://www.youtube.com/watch?v=x1FU3e0sT1I" rel="nofollow"&gt;a talk&lt;/a&gt;
to explain the principles I used to build this. I highly recommend watching it!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="http://elm-lang.org" rel="nofollow"&gt;Elm&lt;/a&gt; codebase containing real world examples (CRUD, auth, advanced patterns, etc) that adheres to the &lt;a href="https://github.com/gothinkster/realworld-example-apps"&gt;RealWorld&lt;/a&gt; spec and API.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;&lt;a id="user-content-demorealworld" class="anchor" aria-hidden="true" href="#demorealworld"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="https://elm-spa-example.netlify.com/" rel="nofollow"&gt;Demo&lt;/a&gt;    &lt;a href="https://github.com/gothinkster/realworld"&gt;RealWorld&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This codebase was created to demonstrate a fully fledged fullstack application built with &lt;a href="http://elm-lang.org" rel="nofollow"&gt;Elm&lt;/a&gt; including CRUD operations, authentication, routing, pagination, and more.&lt;/p&gt;
&lt;p&gt;For more information on how this works with other frontends/backends, head over to the &lt;a href="https://github.com/gothinkster/realworld"&gt;RealWorld&lt;/a&gt; repo.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-how-it-works" class="anchor" aria-hidden="true" href="#how-it-works"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;How it works&lt;/h1&gt;
&lt;p&gt;Check out &lt;a href="https://dev.to/rtfeldman/tour-of-an-open-source-elm-spa" rel="nofollow"&gt;the full writeup&lt;/a&gt;!&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-building" class="anchor" aria-hidden="true" href="#building"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Building&lt;/h1&gt;
&lt;p&gt;I decided not to include a build script, since all you need for a development build is the &lt;code&gt;elm&lt;/code&gt; executable, and all you need on top of that for production is Uglify.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-development-build" class="anchor" aria-hidden="true" href="#development-build"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Development Build&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://guide.elm-lang.org/install.html" rel="nofollow"&gt;Install Elm&lt;/a&gt; (e.g. with &lt;code&gt;npm install --global elm&lt;/code&gt;), then from the root project directory, run this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ elm make src/Main.elm --output elm.js
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you want to include the time-traveling debugger, add &lt;code&gt;--debug&lt;/code&gt; like so:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ elm make src/Main.elm --output elm.js --debug
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To view the site in a browser, bring up &lt;code&gt;index.html&lt;/code&gt; from any local HTTP server, for example &lt;a href="https://www.npmjs.com/package/http-server" rel="nofollow"&gt;&lt;code&gt;http-server&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-production-build" class="anchor" aria-hidden="true" href="#production-build"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Production Build&lt;/h2&gt;
&lt;p&gt;This is a two-step process. First we compile &lt;code&gt;elm.js&lt;/code&gt; using &lt;code&gt;elm make&lt;/code&gt; with &lt;code&gt;--optimize&lt;/code&gt;, and then we Uglify the result.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-step-1" class="anchor" aria-hidden="true" href="#step-1"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Step 1&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;$ elm make src/Main.elm --output elm.js --optimize
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This &lt;a href="https://elm-lang.org/blog/small-assets-without-the-headache" rel="nofollow"&gt;generates production-optimized JS&lt;/a&gt; that is ready to be minified further using Uglify.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-step-2" class="anchor" aria-hidden="true" href="#step-2"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Step 2&lt;/h4&gt;
&lt;p&gt;(Make sure you have &lt;a href="http://lisperator.net/uglifyjs/" rel="nofollow"&gt;Uglify&lt;/a&gt; installed first, e.g. with &lt;code&gt;npm install --global uglify-js&lt;/code&gt;)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ uglifyjs elm.js --compress 'pure_funcs="F2,F3,F4,F5,F6,F7,F8,F9,A2,A3,A4,A5,A6,A7,A8,A9",pure_getters=true,keep_fargs=false,unsafe_comps=true,unsafe=true,passes=2' --output=elm.js &amp;amp;&amp;amp; uglifyjs elm.js --mangle --output=elm.js
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This one lengthy command (make sure to scroll horizontally to get all of it if you're copy/pasting!) runs &lt;code&gt;uglifyjs&lt;/code&gt; twice - first with &lt;code&gt;--compress&lt;/code&gt; and then again with &lt;code&gt;--mangle&lt;/code&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It's necessary to run Uglify twice if you use the &lt;code&gt;pure_funcs&lt;/code&gt; flag, because if you enable both &lt;code&gt;--compress&lt;/code&gt; and &lt;code&gt;--mangle&lt;/code&gt; at the same time, the &lt;code&gt;pure_funcs&lt;/code&gt; argument will have no effect; Uglify will mangle the names first and then not recognize them when it encounters those functions later.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>rtfeldman</author><guid isPermaLink="false">https://github.com/rtfeldman/elm-spa-example</guid><pubDate>Mon, 03 Feb 2020 00:02:00 GMT</pubDate></item></channel></rss>