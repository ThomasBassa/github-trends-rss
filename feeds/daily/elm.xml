<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>GitHub Trending: Elm, Today</title><link>https://github.com/trending/elm?since=daily</link><description>The top repositories on GitHub for elm, measured daily</description><pubDate>Mon, 09 Dec 2019 01:05:38 GMT</pubDate><lastBuildDate>Mon, 09 Dec 2019 01:05:38 GMT</lastBuildDate><generator>PyRSS2Gen-1.1.0</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><ttl>720</ttl><item><title>rtfeldman/elm-spa-example #1 in Elm, Today</title><link>https://github.com/rtfeldman/elm-spa-example</link><description>&lt;p&gt;&lt;i&gt;A Single Page Application written in Elm&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="" class="anchor" aria-hidden="true" href="#"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://cloud.githubusercontent.com/assets/556934/25448178/3e7dc5c0-2a7d-11e7-8069-06da5169dae6.png"&gt;&lt;img src="https://cloud.githubusercontent.com/assets/556934/25448178/3e7dc5c0-2a7d-11e7-8069-06da5169dae6.png" alt="RealWorld Example App" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;g-emoji class="g-emoji" alias="point_right" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f449.png"&gt;ðŸ‘‰&lt;/g-emoji&gt; I gave &lt;a href="https://www.youtube.com/watch?v=x1FU3e0sT1I" rel="nofollow"&gt;a talk&lt;/a&gt;
to explain the principles I used to build this. I highly recommend watching it!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="http://elm-lang.org" rel="nofollow"&gt;Elm&lt;/a&gt; codebase containing real world examples (CRUD, auth, advanced patterns, etc) that adheres to the &lt;a href="https://github.com/gothinkster/realworld-example-apps"&gt;RealWorld&lt;/a&gt; spec and API.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;&lt;a id="user-content-demorealworld" class="anchor" aria-hidden="true" href="#demorealworld"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="https://elm-spa-example.netlify.com/" rel="nofollow"&gt;Demo&lt;/a&gt;Â Â Â Â &lt;a href="https://github.com/gothinkster/realworld"&gt;RealWorld&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This codebase was created to demonstrate a fully fledged fullstack application built with &lt;a href="http://elm-lang.org" rel="nofollow"&gt;Elm&lt;/a&gt; including CRUD operations, authentication, routing, pagination, and more.&lt;/p&gt;
&lt;p&gt;For more information on how this works with other frontends/backends, head over to the &lt;a href="https://github.com/gothinkster/realworld"&gt;RealWorld&lt;/a&gt; repo.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-how-it-works" class="anchor" aria-hidden="true" href="#how-it-works"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;How it works&lt;/h1&gt;
&lt;p&gt;Check out &lt;a href="https://dev.to/rtfeldman/tour-of-an-open-source-elm-spa" rel="nofollow"&gt;the full writeup&lt;/a&gt;!&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-building" class="anchor" aria-hidden="true" href="#building"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Building&lt;/h1&gt;
&lt;p&gt;I decided not to include a build script, since all you need for a development build is the &lt;code&gt;elm&lt;/code&gt; executable, and all you need on top of that for production is Uglify.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-development-build" class="anchor" aria-hidden="true" href="#development-build"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Development Build&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://guide.elm-lang.org/install.html" rel="nofollow"&gt;Install Elm&lt;/a&gt; (e.g. with &lt;code&gt;npm install --global elm&lt;/code&gt;), then from the root project directory, run this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ elm make src/Main.elm --output elm.js
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you want to include the time-traveling debugger, add &lt;code&gt;--debug&lt;/code&gt; like so:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ elm make src/Main.elm --output elm.js --debug
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To view the site in a browser, bring up &lt;code&gt;index.html&lt;/code&gt; from any local HTTP server, for example &lt;a href="https://www.npmjs.com/package/http-server" rel="nofollow"&gt;&lt;code&gt;http-server&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-production-build" class="anchor" aria-hidden="true" href="#production-build"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Production Build&lt;/h2&gt;
&lt;p&gt;This is a two-step process. First we compile &lt;code&gt;elm.js&lt;/code&gt; using &lt;code&gt;elm make&lt;/code&gt; with &lt;code&gt;--optimize&lt;/code&gt;, and then we Uglify the result.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-step-1" class="anchor" aria-hidden="true" href="#step-1"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Step 1&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;$ elm make src/Main.elm --output elm.js --optimize
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This &lt;a href="https://elm-lang.org/blog/small-assets-without-the-headache" rel="nofollow"&gt;generates production-optimized JS&lt;/a&gt; that is ready to be minified further using Uglify.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-step-2" class="anchor" aria-hidden="true" href="#step-2"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Step 2&lt;/h4&gt;
&lt;p&gt;(Make sure you have &lt;a href="http://lisperator.net/uglifyjs/" rel="nofollow"&gt;Uglify&lt;/a&gt; installed first, e.g. with &lt;code&gt;npm install --global uglify-js&lt;/code&gt;)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ uglifyjs elm.js --compress 'pure_funcs="F2,F3,F4,F5,F6,F7,F8,F9,A2,A3,A4,A5,A6,A7,A8,A9",pure_getters=true,keep_fargs=false,unsafe_comps=true,unsafe=true,passes=2' --output=elm.js &amp;amp;&amp;amp; uglifyjs elm.js --mangle --output=elm.js
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This one lengthy command (make sure to scroll horizontally to get all of it if you're copy/pasting!) runs &lt;code&gt;uglifyjs&lt;/code&gt; twice - first with &lt;code&gt;--compress&lt;/code&gt; and then again with &lt;code&gt;--mangle&lt;/code&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It's necessary to run Uglify twice if you use the &lt;code&gt;pure_funcs&lt;/code&gt; flag, because if you enable both &lt;code&gt;--compress&lt;/code&gt; and &lt;code&gt;--mangle&lt;/code&gt; at the same time, the &lt;code&gt;pure_funcs&lt;/code&gt; argument will have no effect; Uglify will mangle the names first and then not recognize them when it encounters those functions later.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>rtfeldman</author><guid isPermaLink="false">https://github.com/rtfeldman/elm-spa-example</guid><pubDate>Mon, 09 Dec 2019 00:01:00 GMT</pubDate></item><item><title>dillonkearns/elm-graphql #2 in Elm, Today</title><link>https://github.com/dillonkearns/elm-graphql</link><description>&lt;p&gt;&lt;i&gt;Autogenerate type-safe GraphQL queries in Elm.&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/85c5b0b8762ae8e0fffb75a69f82de9ac37d4553/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f6d617274696d617469782f6c6f676f2d677261706871656c6d2f6c6f676f2e737667"&gt;&lt;img src="https://camo.githubusercontent.com/85c5b0b8762ae8e0fffb75a69f82de9ac37d4553/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f6d617274696d617469782f6c6f676f2d677261706871656c6d2f6c6f676f2e737667" alt="dillonearns/elm-graphql logo" width="40%" align="right" data-canonical-src="https://cdn.jsdelivr.net/gh/martimatix/logo-graphqelm/logo.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-dillonkearnselm-graphql" class="anchor" aria-hidden="true" href="#dillonkearnselm-graphql"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;dillonkearns/elm-graphql&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://travis-ci.org/dillonkearns/elm-graphql" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/f251f265ce254a594895f5c4a74718697e90e41c/68747470733a2f2f7472617669732d63692e6f72672f64696c6c6f6e6b6561726e732f656c6d2d6772617068716c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/dillonkearns/elm-graphql.svg?branch=master" style="max-width:100%;"&gt;&lt;/a&gt; &lt;a href="https://package.elm-lang.org/packages/dillonkearns/elm-graphql/latest/" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/8e23460b2cc9bd2a4506376ae5adef116756e1e6/68747470733a2f2f696d672e736869656c64732e696f2f656c6d2d7061636b6167652f762f64696c6c6f6e6b6561726e732f656c6d2d6772617068716c2e737667" alt="Elm package" data-canonical-src="https://img.shields.io/elm-package/v/dillonkearns/elm-graphql.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://npmjs.com/package/@dillonkearns/elm-graphql" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/a2360b760183663b43faa7f88420fa13f793d524/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f4064696c6c6f6e6b6561726e732f656c6d2d6772617068716c2e737667" alt="npm" data-canonical-src="https://img.shields.io/npm/v/@dillonkearns/elm-graphql.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Why use this package over the other available Elm GraphQL packages? This is the only one that
generates type-safe code for your entire schema. Check out this blog post, &lt;a href="https://medium.com/open-graphql/type-safe-composable-graphql-in-elm-b3378cc8d021" rel="nofollow"&gt;Type-Safe &amp;amp; Composable GraphQL in Elm&lt;/a&gt;, to learn more about the motivation for this library. (It's also the only type-safe
library with Elm 0.18 or 0.19 support, see
&lt;a href="https://discourse.elm-lang.org/t/introducing-graphqelm-a-tool-for-type-safe-graphql-queries/472/5?u=dillonkearns" rel="nofollow"&gt;this discourse thread&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;I built this package because I wanted to have something that:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Gives you type-safe GraphQL queries (if it compiles, it's valid according to the schema),&lt;/li&gt;
&lt;li&gt;Creates decoders for you in a seamless and failsafe way, and&lt;/li&gt;
&lt;li&gt;Eliminates GraphQL features in favor of Elm language constructs where possible for a simpler UX (for example, GraphQL variables &amp;amp; fragments should just be Elm functions, constants, lets).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;See an &lt;a href="https://rebrand.ly/graphqelm" rel="nofollow"&gt;example in action on Ellie&lt;/a&gt;. See more end-to-end example code in the
&lt;a href="https://github.com/dillonkearns/elm-graphql/tree/master/examples"&gt;&lt;code&gt;examples/&lt;/code&gt;&lt;/a&gt;
folder.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-overview" class="anchor" aria-hidden="true" href="#overview"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Overview&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;dillonkearns/elm-graphql&lt;/code&gt; is an Elm package and accompanying command-line code generator that creates type-safe Elm code for your GraphQL endpoint. You don't write any decoders for your API with &lt;code&gt;dillonkearns/elm-graphql&lt;/code&gt;, instead you simply select which fields you would like, similar to a standard GraphQL query but in Elm. For example, this GraphQL query&lt;/p&gt;
&lt;div class="highlight highlight-source-graphql"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;query&lt;/span&gt; {
  &lt;span class="pl-v"&gt;human&lt;/span&gt;(&lt;span class="pl-v"&gt;id&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;1001&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) {
    &lt;span class="pl-v"&gt;name&lt;/span&gt;
    &lt;span class="pl-v"&gt;homePlanet&lt;/span&gt;
  }
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;would look &lt;a href="https://github.com/dillonkearns/elm-graphql/blob/master/examples/src/ExampleFromReadme.elm"&gt;like this&lt;/a&gt;
in &lt;code&gt;dillonkearns/elm-graphql&lt;/code&gt; (the code in this example that is prefixed with &lt;code&gt;StarWars&lt;/code&gt; is auto-generated)&lt;/p&gt;
&lt;div class="highlight highlight-source-elm"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-c1"&gt;Graphql.Operation&lt;/span&gt; &lt;span class="pl-k"&gt;exposing&lt;/span&gt; (&lt;span class="pl-k"&gt;RootQuery&lt;/span&gt;)
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-c1"&gt;Graphql.SelectionSet&lt;/span&gt; &lt;span class="pl-k"&gt;as&lt;/span&gt; &lt;span class="pl-c1"&gt;SelectionSet&lt;/span&gt; &lt;span class="pl-k"&gt;exposing&lt;/span&gt; (&lt;span class="pl-k"&gt;SelectionSet&lt;/span&gt;)
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-c1"&gt;StarWars.Object.Human&lt;/span&gt; &lt;span class="pl-k"&gt;as&lt;/span&gt; &lt;span class="pl-c1"&gt;Human&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-c1"&gt;StarWars.Query&lt;/span&gt; &lt;span class="pl-k"&gt;as&lt;/span&gt; &lt;span class="pl-c1"&gt;Query&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-c1"&gt;StarWars.Scalar&lt;/span&gt; &lt;span class="pl-k"&gt;exposing&lt;/span&gt; (&lt;span class="pl-k"&gt;Id&lt;/span&gt;&lt;span class="pl-en"&gt;(..)&lt;/span&gt;)


&lt;span class="pl-en"&gt;query&lt;/span&gt; &lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-k"&gt;SelectionSet&lt;/span&gt; (&lt;span class="pl-k"&gt;Maybe&lt;/span&gt; &lt;span class="pl-k"&gt;Human&lt;/span&gt;) &lt;span class="pl-k"&gt;RootQuery&lt;/span&gt;
&lt;span class="pl-en"&gt;query &lt;/span&gt;&lt;span class="pl-k"&gt;=&lt;/span&gt;
    &lt;span class="pl-c1"&gt;Query&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;human &lt;span class="pl-c1"&gt;&lt;span class="pl-c1"&gt;{&lt;/span&gt;&lt;/span&gt; id &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;Id&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;1001&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;&lt;span class="pl-c1"&gt;}&lt;/span&gt;&lt;/span&gt; humanSelection


&lt;span class="pl-k"&gt;type alias &lt;/span&gt;&lt;span class="pl-c1"&gt;Human&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt;
    &lt;span class="pl-c1"&gt;&lt;span class="pl-c1"&gt;{&lt;/span&gt;&lt;/span&gt; name &lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;String&lt;/span&gt;
    &lt;span class="pl-c1"&gt;&lt;span class="pl-c1"&gt;,&lt;/span&gt;&lt;/span&gt; homePlanet &lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;Maybe&lt;/span&gt; &lt;span class="pl-c1"&gt;String&lt;/span&gt;
    &lt;span class="pl-c1"&gt;&lt;span class="pl-c1"&gt;}&lt;/span&gt;&lt;/span&gt;


&lt;span class="pl-en"&gt;humanSelection&lt;/span&gt; &lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-k"&gt;SelectionSet&lt;/span&gt; &lt;span class="pl-k"&gt;Human&lt;/span&gt; &lt;span class="pl-k"&gt;StarWars&lt;/span&gt;.&lt;span class="pl-k"&gt;Object&lt;/span&gt;.&lt;span class="pl-k"&gt;Human&lt;/span&gt;
&lt;span class="pl-en"&gt;humanSelection &lt;/span&gt;&lt;span class="pl-k"&gt;=&lt;/span&gt;
    &lt;span class="pl-c1"&gt;SelectionSet&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;map2 &lt;span class="pl-c1"&gt;Human&lt;/span&gt;
        &lt;span class="pl-c1"&gt;Human&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;name
        &lt;span class="pl-c1"&gt;Human&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;homePlanet&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;GraphQL and Elm are a perfect match because GraphQL is used to enforce the types that your API takes as inputs and outputs, much like Elm's type system does within Elm. &lt;code&gt;elm-graphql&lt;/code&gt; simply bridges this gap by making your Elm code aware of your GraphQL server's schema. If you are new to GraphQL, &lt;a href="http://graphql.org/learn/" rel="nofollow"&gt;graphql.org/learn/&lt;/a&gt; is an excellent way to learn the basics.&lt;/p&gt;
&lt;p&gt;After following the installation instructions to install the &lt;a href="https://npmjs.com/package/@dillonkearns/elm-graphql" rel="nofollow"&gt;&lt;code&gt;@dillonkearns/elm-graphql&lt;/code&gt;&lt;/a&gt;
NPM package and the proper Elm packages (see the &lt;a href="https://github.com/dillonkearns/elm-graphql#setup"&gt;Setup section&lt;/a&gt; for details).
Once you've installed everything, running the &lt;code&gt;elm-graphql&lt;/code&gt; code generation tool
is as simple as this:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;elm-graphql https://elm-graphql.herokuapp.com --base StarWars --output examples/src&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If headers are required, such as a Bearer Token, the &lt;code&gt;--header&lt;/code&gt; flag can be supplied.&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;elm-graphql https://elm-graphql.herokuapp.com --base StarWars --output examples/src --header &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;headerKey: header value&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-learning-resources" class="anchor" aria-hidden="true" href="#learning-resources"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Learning Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;There is a thorough tutorial in &lt;a href="https://package.elm-lang.org/packages/dillonkearns/elm-graphql/latest/Graphql-SelectionSet" rel="nofollow"&gt;the &lt;code&gt;SelectionSet&lt;/code&gt; docs&lt;/a&gt;. &lt;code&gt;SelectionSet&lt;/code&gt;s are the core concept in this library, so I recommend reading through the whole page (it's not very long!).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;a href="https://github.com/dillonkearns/elm-graphql/tree/master/examples"&gt;&lt;code&gt;examples/&lt;/code&gt;&lt;/a&gt; folder is another great place to start.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you want to learn more GraphQL basics, this is a great tutorial, and a short read: &lt;a href="http://graphql.org/learn/" rel="nofollow"&gt;graphql.org/learn/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;My Elm Conf 2018 talk goes into the philosophy behind &lt;code&gt;dillonkearns/elm-graphql&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=memIRXFSNkU" rel="nofollow"&gt;&lt;img src="./assets/types-without-borders.png" alt="Types Without Borders Elm Conf Talk" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;(&lt;a href="https://youtu.be/memIRXFSNkU?t=786" rel="nofollow"&gt;Skip to 13:06&lt;/a&gt; to go straight to the &lt;code&gt;dillonkearns/elm-graphql&lt;/code&gt; demo).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;My 10-minute video tutorial on how to leverage Custom Scalars in &lt;code&gt;elm-graphql&lt;/code&gt; using the Scalar Codecs feature.
&lt;a href="https://incrementalelm.com/scalar-codecs-tutorial" rel="nofollow"&gt;&lt;img src="./assets/scalar-codecs-tutorial.png" alt="Scalar Codecs Tutorial" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;There are a couple of chapters so far in &lt;a href="https://dillonkearns.gitbooks.io/elm-graphql/content/" rel="nofollow"&gt;The Official &lt;code&gt;dillonkearns/elm-graphql&lt;/code&gt; Gitbook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@zenitram.oiram/a-beginners-guide-to-graphql-with-elm-315b580f0aad" rel="nofollow"&gt;A Beginner's Guide to GraphQL with Elm&lt;/a&gt; by &lt;a href="https://github.com/martimatix"&gt;@martimatix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@zenitram.oiram/graphqelm-optional-arguments-in-a-language-without-optional-arguments-d8074ca3cf74" rel="nofollow"&gt;Graphqelm: Optional Arguments in a Language Without Optional Arguments&lt;/a&gt; by &lt;a href="https://github.com/martimatix"&gt;@martimatix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://learn.hasura.io/graphql/elm-graphql/introduction" rel="nofollow"&gt;Comprehensive tutorial by the Hasura Team&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you're wondering why code is generated a certain way, you're likely to find an answer in the &lt;a href="https://github.com/dillonkearns/elm-graphql/blob/master/FAQ.md"&gt;Frequently Asked Questions (FAQ)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There's a very helpful group of people in the #graphql channel in &lt;a href="http://elmlang.herokuapp.com/" rel="nofollow"&gt;the Elm Slack&lt;/a&gt;. Don't hesitate to ask any questions about getting started, best practices, or just general GraphQL in there!&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-setup" class="anchor" aria-hidden="true" href="#setup"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Setup&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;dillonkearns/elm-graphql&lt;/code&gt; generates Elm code that allows you to build up type-safe GraphQL requests. Here are the steps to setup &lt;code&gt;dillonkearns/elm-graphql&lt;/code&gt;.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Add &lt;a href="http://package.elm-lang.org/packages/dillonkearns/elm-graphql/latest" rel="nofollow"&gt;the &lt;code&gt;dillonkearns/elm-graphql&lt;/code&gt; elm package&lt;/a&gt;
as a dependency in your &lt;code&gt;elm.json&lt;/code&gt;. You will also need to make sure that &lt;code&gt;elm/json&lt;/code&gt; is a dependency of your project
since the generated code has lots of JSON decoders in it.&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;elm install dillonkearns/elm-graphql
elm install elm/json&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install the &lt;code&gt;@dillonkearns/elm-graphql&lt;/code&gt; command line tool through npm. This is what you will use to generate Elm code for your API.
It is recommended that you save the &lt;code&gt;@dillonkearns/elm-graphql&lt;/code&gt; command line tool as a dev
dependency so that everyone on your project is using the same version.&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;npm install --save-dev @dillonkearns/elm-graphql
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; you can now run it locally with the ./node_modules/.bin/elm-graphql binary,&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; or by calling it through an npm script as in this project's package.json&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run the &lt;code&gt;@dillonkearns/elm-graphql&lt;/code&gt; command line tool installed above to generate your code. If you used the &lt;code&gt;--save-dev&lt;/code&gt; method above, you can simply create a script in your package.json like the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  "name": "star-wars-elm-graphql-project",
  "version": "1.0.0",
  "scripts": {
    "api": "elm-graphql https://elm-graphql.herokuapp.com/api --base StarWars"
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;With the above in your &lt;code&gt;package.json&lt;/code&gt;, running &lt;code&gt;npm run api&lt;/code&gt; will generate &lt;code&gt;dillonkearns/elm-graphql&lt;/code&gt; code for you to call in &lt;code&gt;./src/StarWars/&lt;/code&gt;. You can now use the generated code as in this &lt;a href="https://rebrand.ly/graphqelm" rel="nofollow"&gt;Ellie example&lt;/a&gt; or in the &lt;a href="https://github.com/dillonkearns/elm-graphql/tree/master/examples"&gt;&lt;code&gt;examples&lt;/code&gt;&lt;/a&gt; folder.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;&lt;a id="user-content-subscriptions-support" class="anchor" aria-hidden="true" href="#subscriptions-support"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Subscriptions Support&lt;/h2&gt;
&lt;p&gt;You can do real-time APIs using GraphQL Subscriptions and &lt;code&gt;dillonkearns/elm-graphql&lt;/code&gt;.
Just wire in the framework-specific JavaScript code for opening the WebSocket connection
through a port. Here's a &lt;a href="http://www.dillonkearns.com/elm-graphql/" rel="nofollow"&gt;live demo&lt;/a&gt; and its
&lt;a href="https://github.com/dillonkearns/elm-graphql/tree/master/examples/src/subscription"&gt;source code&lt;/a&gt;. The &lt;a href="https://github.com/dillonkearns/graphqelm-demo"&gt;demo server is running Elixir/Absinthe&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-contributors" class="anchor" aria-hidden="true" href="#contributors"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contributors&lt;/h2&gt;
&lt;p&gt;Thank you Mario Martinez (&lt;a href="https://github.com/martimatix"&gt;martimatix&lt;/a&gt;) for
all your feedback, the elm-format PR, and for &lt;a href="https://github.com/martimatix/logo-graphqelm/"&gt;the incredible logo design&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;Thank you Mike Stock (&lt;a href="https://github.com/mikeastock/"&gt;mikeastock&lt;/a&gt;) for
setting up Travis CI!&lt;/p&gt;
&lt;p&gt;Thanks for &lt;a href="https://github.com/dillonkearns/elm-graphql/pull/41"&gt;the reserved words pull request&lt;/a&gt; @madsflensted!&lt;/p&gt;
&lt;p&gt;A huge thanks to &lt;a href="https://github.com/xtian"&gt;@xtian&lt;/a&gt; for doing the vast majority
of the &lt;a href="https://github.com/dillonkearns/elm-graphql/pull/60"&gt;0.19 upgrade work&lt;/a&gt;! &lt;g-emoji class="g-emoji" alias="tada" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f389.png"&gt;ðŸŽ‰&lt;/g-emoji&gt;&lt;/p&gt;
&lt;p&gt;Thank you &lt;a href="https://github.com/knewter"&gt;Josh Adams (@knewter)&lt;/a&gt; for the code example for
Subscriptions with Elixir/Absinthe wired up through Elm ports!&lt;/p&gt;
&lt;p&gt;Thank you &lt;a href="https://github.com/romariolopezc"&gt;Romario&lt;/a&gt; for adding &lt;a href="https://github.com/dillonkearns/elm-graphql/pull/73"&gt;&lt;code&gt;OptionalArgument.map&lt;/code&gt;&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;Thank you &lt;a href="https://github.com/aaronwhite"&gt;Aaron White&lt;/a&gt; for &lt;a href="https://github.com/dillonkearns/elm-graphql/pull/87"&gt;your pull request to improve the performance and
stability of the &lt;code&gt;elm-format&lt;/code&gt; step&lt;/a&gt;! &lt;g-emoji class="g-emoji" alias="tada" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f389.png"&gt;ðŸŽ‰&lt;/g-emoji&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-roadmap" class="anchor" aria-hidden="true" href="#roadmap"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Roadmap&lt;/h2&gt;
&lt;p&gt;All core features are supported. That is, you can build any query or mutation
with your &lt;code&gt;dillonkearns/elm-graphql&lt;/code&gt;-generated code, and it is guaranteed to be valid according
to your server's schema.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;dillonkearns/elm-graphql&lt;/code&gt; will generate code for you to generate subscriptions
and decode the responses, but it doesn't deal with the low-level details for
how to send them over web sockets. To do that, you will need to use
custom code or a package that knows how to communicate over websockets (or whichever
protocol) to setup a subscription with your particular framework. See
&lt;a href="https://github.com/dillonkearns/elm-graphql/issues/43"&gt;this discussion&lt;/a&gt; for why
those details are not handled by this library directly.&lt;/p&gt;
&lt;p&gt;I would love to hear feedback if you are using GraphQL Subscriptions. In particular,
I'd love to see live code examples to drive any improvements to the Subscriptions
design. Please ping me on Slack, drop a message in the
&lt;a href="https://elmlang.slack.com/channels/graphql" rel="nofollow"&gt;#graphql&lt;/a&gt; channel, or open up a
Github issue to discuss!&lt;/p&gt;
&lt;p&gt;I would like to investigate generating helpers to make pagination simpler
for Connections (based on the
&lt;a href="https://facebook.github.io/relay/graphql/connections.htm" rel="nofollow"&gt;Relay Cursor Connections Specification&lt;/a&gt;).
If you have ideas on this chime in on &lt;a href="https://github.com/dillonkearns/elm-graphql/issues/29"&gt;this thread&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;See &lt;a href="https://trello.com/b/BCIWtZeL/dillonkearns-elm-graphql" rel="nofollow"&gt;the full roadmap on Trello&lt;/a&gt;.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>dillonkearns</author><guid isPermaLink="false">https://github.com/dillonkearns/elm-graphql</guid><pubDate>Mon, 09 Dec 2019 00:02:00 GMT</pubDate></item></channel></rss>