<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>GitHub Trending: Erlang, Today</title><link>https://github.com/trending/erlang?since=daily</link><description>The top repositories on GitHub for erlang, measured daily</description><pubDate>Tue, 19 Nov 2019 01:07:02 GMT</pubDate><lastBuildDate>Tue, 19 Nov 2019 01:07:02 GMT</lastBuildDate><generator>PyRSS2Gen-1.1.0</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><ttl>720</ttl><item><title>rabbitmq/rabbitmq-server #1 in Erlang, Today</title><link>https://github.com/rabbitmq/rabbitmq-server</link><description>&lt;p&gt;&lt;i&gt;Open source multi-protocol messaging broker&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-rabbitmq-server" class="anchor" aria-hidden="true" href="#rabbitmq-server"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;RabbitMQ Server&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://rabbitmq.com" rel="nofollow"&gt;RabbitMQ&lt;/a&gt; is a &lt;a href="https://rabbitmq.com/documentation.html" rel="nofollow"&gt;feature rich&lt;/a&gt;, multi-protocol messaging broker. It supports:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AMQP 0-9-1&lt;/li&gt;
&lt;li&gt;AMQP 1.0&lt;/li&gt;
&lt;li&gt;STOMP 1.0 through 1.2&lt;/li&gt;
&lt;li&gt;MQTT 3.1.1&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installation&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rabbitmq.com/download.html" rel="nofollow"&gt;Installation guides&lt;/a&gt; for various platforms&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-tutorials--documentation" class="anchor" aria-hidden="true" href="#tutorials--documentation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tutorials &amp;amp; Documentation&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rabbitmq.com/getstarted.html" rel="nofollow"&gt;RabbitMQ tutorials&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rabbitmq.com/documentation.html" rel="nofollow"&gt;All documentation guides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rabbitmq/rabbitmq-website/"&gt;Documentation source&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rabbitmq.com/devtools.html" rel="nofollow"&gt;Client libraries and tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rabbitmq.com/monitoring.html" rel="nofollow"&gt;Monitoring guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rabbitmq.com/production-checklist.html" rel="nofollow"&gt;Production checklist&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rabbitmq/rabbitmq-tutorials/"&gt;Runnable tutorials&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-getting-help" class="anchor" aria-hidden="true" href="#getting-help"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Getting Help&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://groups.google.com/forum/#!forum/rabbitmq-users" rel="nofollow"&gt;RabbitMQ mailing list&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rabbitmq.com/services.html" rel="nofollow"&gt;Commercial support&lt;/a&gt; from &lt;a href="https://pivotal.io" rel="nofollow"&gt;Pivotal&lt;/a&gt; for open source RabbitMQ&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rabbitmq-slack.herokuapp.com/" rel="nofollow"&gt;Community Slack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#rabbitmq&lt;/code&gt; on Freenode&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-contributing" class="anchor" aria-hidden="true" href="#contributing"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contributing&lt;/h2&gt;
&lt;p&gt;See &lt;a href="./CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt; and our &lt;a href="https://rabbitmq.com/github.html" rel="nofollow"&gt;development process overview&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Questions about contributing, internals and so on are very welcome on the &lt;a href="https://groups.google.com/forum/#!forum/rabbitmq-users" rel="nofollow"&gt;mailing list&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-licensing" class="anchor" aria-hidden="true" href="#licensing"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Licensing&lt;/h2&gt;
&lt;p&gt;RabbitMQ server is &lt;a href="LICENSE-MPL-RabbitMQ"&gt;licensed under the MPL 1.1&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-building-from-source-and-packaging" class="anchor" aria-hidden="true" href="#building-from-source-and-packaging"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Building From Source and Packaging&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rabbitmq.com/build-server.html" rel="nofollow"&gt;Building RabbitMQ from Source&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rabbitmq.com/build-server.html" rel="nofollow"&gt;Building RabbitMQ Distribution Packages&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-copyright" class="anchor" aria-hidden="true" href="#copyright"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Copyright&lt;/h2&gt;
&lt;p&gt;(c) Pivotal Software Inc., 2007-2019.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>rabbitmq</author><guid isPermaLink="false">https://github.com/rabbitmq/rabbitmq-server</guid><pubDate>Tue, 19 Nov 2019 00:01:00 GMT</pubDate></item><item><title>choptastic/qdate #2 in Erlang, Today</title><link>https://github.com/choptastic/qdate</link><description>&lt;p&gt;&lt;i&gt;Erlang date, time, and timezone management: formatting, conversion, and date arithmetic&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body markdown" data-path="README.markdown"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-qdate---erlang-date-and-timezone-library" class="anchor" aria-hidden="true" href="#qdate---erlang-date-and-timezone-library"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;qdate - Erlang Date and Timezone Library&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://travis-ci.org/choptastic/qdate" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/aee9c322a4514736ad10b9f91058d11122e95aea/68747470733a2f2f7472617669732d63692e6f72672f63686f707461737469632f71646174652e706e673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/choptastic/qdate.png?branch=master" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-purpose" class="anchor" aria-hidden="true" href="#purpose"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Purpose&lt;/h2&gt;
&lt;p&gt;Erlang Date and Time management is rather primitive, but improving.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/daleharvey/dh_date"&gt;dh_date&lt;/a&gt;, of which &lt;code&gt;ec_date&lt;/code&gt; in
&lt;a href="https://github.com/erlware/erlware_commons"&gt;erlware_commons&lt;/a&gt; is a fork, is a
huge step towards formatting and parsing dates in a way that compares nicely
with PHP's &lt;a href="http://php.net/manual/en/function.date.php" rel="nofollow"&gt;date&lt;/a&gt; and
&lt;a href="http://php.net/manual/en/function.strtotime.php" rel="nofollow"&gt;strtotime&lt;/a&gt; functions.&lt;/p&gt;
&lt;p&gt;Unfortunately, &lt;code&gt;ec_date&lt;/code&gt; doesn't deal with timezones, but conveniently,
the project &lt;a href="https://github.com/dmitryme/erlang_localtime"&gt;erlang_localtime&lt;/a&gt;
does.&lt;/p&gt;
&lt;p&gt;It is the express purpose of this &lt;code&gt;qdate&lt;/code&gt; package to bring together the
benefits of &lt;code&gt;ec_date&lt;/code&gt; and &lt;code&gt;erlang_localtime&lt;/code&gt;, as well as extending the
capabilities of both to provide for other needed tools found in a single
module.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;qdate&lt;/code&gt; provides date and time formatting and parsing from and into:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Formatting Strings&lt;/li&gt;
&lt;li&gt;Erlang Date Format&lt;/li&gt;
&lt;li&gt;Erlang Now Format&lt;/li&gt;
&lt;li&gt;Unixtime integers&lt;/li&gt;
&lt;li&gt;Timezones&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And all this while dealing with timezone parsing, formatting, conversion
and overall management.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-acceptable-date-formats" class="anchor" aria-hidden="true" href="#acceptable-date-formats"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Acceptable Date Formats&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Erlang Date Format: &lt;code&gt;{{Y,M,D},{H,M,S}}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Erlang Now Format: &lt;code&gt;{MegaSecs, Secs, MicroSecs}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Date String: &lt;code&gt;"2013-12-31 08:15pm"&lt;/code&gt; (including custom formats as defined
with &lt;code&gt;qdate:register_parser/2&lt;/code&gt; - see below)&lt;/li&gt;
&lt;li&gt;Integer Unix Timestamp: 1388448000&lt;/li&gt;
&lt;li&gt;A Two-tuple, where the first element is one of the above, and the second
is a timezone.  (i.e. &lt;code&gt;{{{2008,12,21},{23,59,45}}, "EST"}&lt;/code&gt; or
&lt;code&gt;{"2008-12-21 11:59:45pm", "EST"}&lt;/code&gt;). &lt;strong&gt;Note:&lt;/strong&gt; While, you can specify a
timezone along with unix timestamps or the Erlang now format, it won't do
anything, as both of those timestamps are absolute, and imply GMT.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All while doing so by allowing you to either set a timezone by some arbitrary
key or by using the current process's Pid is the key.&lt;/p&gt;
&lt;p&gt;Further, while &lt;code&gt;ec_date&lt;/code&gt; doesn't support PHP's timezone characters (e, I, O, P,
T, Z, r, and c), &lt;code&gt;qdate&lt;/code&gt; will handle them for us.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-exported-functions" class="anchor" aria-hidden="true" href="#exported-functions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Exported Functions:&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-conversion-functions" class="anchor" aria-hidden="true" href="#conversion-functions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Conversion Functions&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;to_string(FormatString, ToTimezone, Date)&lt;/code&gt; - "FormatString" is a string
that follows PHP's &lt;code&gt;date&lt;/code&gt; function formatting rules. The date will be
converted to the specified &lt;code&gt;ToTimezone&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;to_string(FormatString, Date)&lt;/code&gt; - same as &lt;code&gt;to_string/3&lt;/code&gt;, but the &lt;code&gt;Timezone&lt;/code&gt;
is intelligently determined (see below)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;to_string(FormatString)&lt;/code&gt; - same as &lt;code&gt;to_string/2&lt;/code&gt;. but uses the current
time as &lt;code&gt;Date&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;to_date(ToTimezone, Date)&lt;/code&gt; - converts any date/time format to Erlang date
format. Will first convert the date to the timezone &lt;code&gt;ToTimezone&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;to_date(Date)&lt;/code&gt; - same as &lt;code&gt;to_date/2&lt;/code&gt;, but the timezone is determined (see below).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;to_now(Date)&lt;/code&gt; - converts any date/time format to Erlang now format.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;to_unixtime(Date)&lt;/code&gt; - converts any date/time format to a unixtime integer&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A &lt;strong&gt;ToTimezone&lt;/strong&gt; value of the atom &lt;code&gt;auto&lt;/code&gt; will automatically determine the
timezone. For example, &lt;code&gt;to_date(Date, auto)&lt;/code&gt; is exactly the same as
&lt;code&gt;to_date(Date)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A Note About Argument Order&lt;/strong&gt;: In all cases, &lt;code&gt;ToTimezone&lt;/code&gt; is optional and if
omitted, will be determined as described below in "Understanding Timezone
Determining and Conversion". If &lt;code&gt;ToTimezone&lt;/code&gt; is specified, it will always be
immediately left of the &lt;code&gt;Disambiguate&lt;/code&gt; argument (if it's specified), which is
always immediately left of &lt;code&gt;Date&lt;/code&gt; argument. &lt;code&gt;Date&lt;/code&gt; will always be the last
argument to any of the conversion and formatting functions.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-understanding-timezone-determining-and-conversions" class="anchor" aria-hidden="true" href="#understanding-timezone-determining-and-conversions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Understanding Timezone Determining and Conversions&lt;/h4&gt;
&lt;p&gt;There is a lot of timezone inferring going on here.&lt;/p&gt;
&lt;p&gt;If a &lt;code&gt;Date&lt;/code&gt; string contains timezone information (i.e.
&lt;code&gt;"2008-12-21 6:00pm PST"&lt;/code&gt;), then &lt;code&gt;qdate&lt;/code&gt; will parse that properly, determine
the specified &lt;code&gt;PST&lt;/code&gt; timezone, and do conversions based on that timezone.
Further, you can specify a timezone manually, by specifying it as as a
two-tuple for &lt;code&gt;Date&lt;/code&gt; (see "Acceptable Date formats" above).&lt;/p&gt;
&lt;p&gt;If no timezone is specified or determinable in a &lt;code&gt;Date&lt;/code&gt; variable, then &lt;code&gt;qdate&lt;/code&gt;
will infer the timezone in the following order.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If specified by &lt;code&gt;qdate:set_timezone(Timezone)&lt;/code&gt; for that process. Note, as
specified below (in the "Timezone Functions" section), &lt;code&gt;set_timezone/1&lt;/code&gt; is
a shortcut to &lt;code&gt;set_timezone(self(), Timezone)&lt;/code&gt;, meaning that
&lt;code&gt;set_timezone/1&lt;/code&gt; only applies to that &lt;em&gt;specific&lt;/em&gt; process. If none is
specified.&lt;/li&gt;
&lt;li&gt;If no timezone is specified for the process, &lt;code&gt;qdate&lt;/code&gt; looks at the &lt;code&gt;qdate&lt;/code&gt;
application variable &lt;code&gt;default_timezone&lt;/code&gt;. &lt;code&gt;default_timezone&lt;/code&gt; can be either a
hard-specified timezone, or a &lt;code&gt;{Module, Function}&lt;/code&gt; tuple.  The tuple format
should return either a timezone or the atom &lt;code&gt;undefined&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If no timezone is specified by either of the above, &lt;code&gt;qdate&lt;/code&gt; assumes "GMT"
for all dates.&lt;/li&gt;
&lt;li&gt;A timezone value of &lt;code&gt;auto&lt;/code&gt; will act as if no timezone is specified.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a id="user-content-disambiguating-ambiguous-timezone-conversions" class="anchor" aria-hidden="true" href="#disambiguating-ambiguous-timezone-conversions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Disambiguating Ambiguous Timezone Conversions&lt;/h4&gt;
&lt;p&gt;Sometimes, when youre converting a datetime from one timezone to another, there
are potentially two different results if the conversion happens to land on in a
timezone that's in the middle of a Daylight Saving conversion.  For example,
converting "11-Nov-2013 1:00:am" in "America/New York" to "GMT" could be both
"5am" and "6am" in GMT, since "1am EST". This is a side effect of the
"intelligence" of &lt;code&gt;qdate&lt;/code&gt; - &lt;code&gt;qdate&lt;/code&gt; would notice that 1am in New York is EST,
and should be converted to "1am EST", and then do the conversion from "1am EST"
to "GMT".  This can lead to confusion.&lt;/p&gt;
&lt;p&gt;Further, since &lt;code&gt;qdate&lt;/code&gt; attempts to be "smart" about mistakenly entered
timezones (ie, if you entered "2013-01-01 EDT", &lt;code&gt;qdate&lt;/code&gt; knows that "EDT"
(Eastern Daylight Time) doesn't apply to January first, so it &lt;em&gt;assumes&lt;/em&gt; you
meant "EST".&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;THE SOLUTION&lt;/strong&gt; to this tangled mess that we call Daylight Saving Time is to
provide an option to disambiguate if you so desire. By default disambiguation
is disabled, and &lt;code&gt;qdate&lt;/code&gt; will just guess as to it's best choice. But if you so
desire, you can make sure qdate does &lt;em&gt;both&lt;/em&gt; conversions, and returns both.&lt;/p&gt;
&lt;p&gt;You can do this by passing a &lt;code&gt;Disambiguation&lt;/code&gt; argument to &lt;code&gt;to_string&lt;/code&gt;,
&lt;code&gt;to_date&lt;/code&gt;, &lt;code&gt;to_unixtime&lt;/code&gt;, and &lt;code&gt;to_now&lt;/code&gt;. &lt;code&gt;Disambiguation&lt;/code&gt; can be an atom of the
values:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;prefer_standard&lt;/code&gt; &lt;em&gt;(Default Behavior)&lt;/em&gt;: If an ambiguous result occurs,
qdate will return the date in standard time rather than daylight time.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;prefer_daylight&lt;/code&gt;: If an ambiguous result occurs, qdate will return the
preferred daylight time.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;both&lt;/code&gt;: If an ambiguous result occurs, &lt;code&gt;qdate&lt;/code&gt; will return the tuple:
&lt;code&gt;{ambiguous, DateStandard, DateDaylight}&lt;/code&gt;, where &lt;code&gt;DateStandard&lt;/code&gt; is the date
in Standard Time, and &lt;code&gt;DateDaylight&lt;/code&gt; is the date in Daylight Saving Time.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So the expanded conversions functions are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;to_date(ToTimezone, Disambiguate, Date)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;to_string(FormatString, ToTimezone, Disambiguate, Date)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;to_unixtime(Disambiguate, Date)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;to_now(Disambiguate, Date)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;div class="highlight highlight-source-erlang"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;1&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;qdate&lt;/span&gt;:&lt;span class="pl-en"&gt;set_timezone&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;GMT&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;).
&lt;span class="pl-c1"&gt;ok&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;%&lt;/span&gt;% Here, converting GMT 2013-11-03 6AM to America/New York yields an ambiguous&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;%&lt;/span&gt;% result&lt;/span&gt;
&lt;span class="pl-c1"&gt;2&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;qdate&lt;/span&gt;:&lt;span class="pl-en"&gt;to_date&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;America/New York&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;both&lt;/span&gt;, {{&lt;span class="pl-c1"&gt;2013&lt;/span&gt;,&lt;span class="pl-c1"&gt;11&lt;/span&gt;,&lt;span class="pl-c1"&gt;3&lt;/span&gt;},{&lt;span class="pl-c1"&gt;6&lt;/span&gt;,&lt;span class="pl-c1"&gt;0&lt;/span&gt;,&lt;span class="pl-c1"&gt;0&lt;/span&gt;}}).
{&lt;span class="pl-c1"&gt;ambiguous&lt;/span&gt;,{{&lt;span class="pl-c1"&gt;2013&lt;/span&gt;,&lt;span class="pl-c1"&gt;11&lt;/span&gt;,&lt;span class="pl-c1"&gt;3&lt;/span&gt;},{&lt;span class="pl-c1"&gt;1&lt;/span&gt;,&lt;span class="pl-c1"&gt;0&lt;/span&gt;,&lt;span class="pl-c1"&gt;0&lt;/span&gt;}},{{&lt;span class="pl-c1"&gt;2013&lt;/span&gt;,&lt;span class="pl-c1"&gt;11&lt;/span&gt;,&lt;span class="pl-c1"&gt;3&lt;/span&gt;},{&lt;span class="pl-c1"&gt;2&lt;/span&gt;,&lt;span class="pl-c1"&gt;0&lt;/span&gt;,&lt;span class="pl-c1"&gt;0&lt;/span&gt;}}}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;%&lt;/span&gt;% Let's just use daylight time&lt;/span&gt;
&lt;span class="pl-c1"&gt;3&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;qdate&lt;/span&gt;:&lt;span class="pl-en"&gt;to_date&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;America/New York&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;prefer_daylight&lt;/span&gt;, {{&lt;span class="pl-c1"&gt;2013&lt;/span&gt;,&lt;span class="pl-c1"&gt;11&lt;/span&gt;,&lt;span class="pl-c1"&gt;3&lt;/span&gt;},{&lt;span class="pl-c1"&gt;6&lt;/span&gt;,&lt;span class="pl-c1"&gt;0&lt;/span&gt;,&lt;span class="pl-c1"&gt;0&lt;/span&gt;}}).
{{&lt;span class="pl-c1"&gt;2013&lt;/span&gt;,&lt;span class="pl-c1"&gt;11&lt;/span&gt;,&lt;span class="pl-c1"&gt;3&lt;/span&gt;},{&lt;span class="pl-c1"&gt;2&lt;/span&gt;,&lt;span class="pl-c1"&gt;0&lt;/span&gt;,&lt;span class="pl-c1"&gt;0&lt;/span&gt;}}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;%&lt;/span&gt;% Let's just use standard time (the default behavior)&lt;/span&gt;
&lt;span class="pl-c1"&gt;4&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;qdate&lt;/span&gt;:&lt;span class="pl-en"&gt;to_date&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;America/New York&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;prefer_standard&lt;/span&gt;, {{&lt;span class="pl-c1"&gt;2013&lt;/span&gt;,&lt;span class="pl-c1"&gt;11&lt;/span&gt;,&lt;span class="pl-c1"&gt;3&lt;/span&gt;},{&lt;span class="pl-c1"&gt;6&lt;/span&gt;,&lt;span class="pl-c1"&gt;0&lt;/span&gt;,&lt;span class="pl-c1"&gt;0&lt;/span&gt;}}).
{{&lt;span class="pl-c1"&gt;2013&lt;/span&gt;,&lt;span class="pl-c1"&gt;11&lt;/span&gt;,&lt;span class="pl-c1"&gt;3&lt;/span&gt;},{&lt;span class="pl-c1"&gt;1&lt;/span&gt;,&lt;span class="pl-c1"&gt;0&lt;/span&gt;,&lt;span class="pl-c1"&gt;0&lt;/span&gt;}}

&lt;span class="pl-c1"&gt;5&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;qdate&lt;/span&gt;:&lt;span class="pl-en"&gt;set_timezone&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;America/New York&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;).
&lt;span class="pl-c1"&gt;ok&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;%&lt;/span&gt;% Switching from 1AM Eastern Time to GMT yields a potentially ambiguous result&lt;/span&gt;
&lt;span class="pl-c1"&gt;6&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;qdate&lt;/span&gt;:&lt;span class="pl-en"&gt;to_date&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;GMT&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;both&lt;/span&gt;, {{&lt;span class="pl-c1"&gt;2013&lt;/span&gt;,&lt;span class="pl-c1"&gt;11&lt;/span&gt;,&lt;span class="pl-c1"&gt;3&lt;/span&gt;},{&lt;span class="pl-c1"&gt;1&lt;/span&gt;,&lt;span class="pl-c1"&gt;0&lt;/span&gt;,&lt;span class="pl-c1"&gt;0&lt;/span&gt;}}).
{&lt;span class="pl-c1"&gt;ambiguous&lt;/span&gt;,{{&lt;span class="pl-c1"&gt;2013&lt;/span&gt;,&lt;span class="pl-c1"&gt;11&lt;/span&gt;,&lt;span class="pl-c1"&gt;3&lt;/span&gt;},{&lt;span class="pl-c1"&gt;6&lt;/span&gt;,&lt;span class="pl-c1"&gt;0&lt;/span&gt;,&lt;span class="pl-c1"&gt;0&lt;/span&gt;}},{{&lt;span class="pl-c1"&gt;2013&lt;/span&gt;,&lt;span class="pl-c1"&gt;11&lt;/span&gt;,&lt;span class="pl-c1"&gt;3&lt;/span&gt;},{&lt;span class="pl-c1"&gt;5&lt;/span&gt;,&lt;span class="pl-c1"&gt;0&lt;/span&gt;,&lt;span class="pl-c1"&gt;0&lt;/span&gt;}}}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;%&lt;/span&gt;% Use daylight time for conversion&lt;/span&gt;
&lt;span class="pl-c1"&gt;7&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;qdate&lt;/span&gt;:&lt;span class="pl-en"&gt;to_date&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;GMT&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;prefer_daylight&lt;/span&gt;, {{&lt;span class="pl-c1"&gt;2013&lt;/span&gt;,&lt;span class="pl-c1"&gt;11&lt;/span&gt;,&lt;span class="pl-c1"&gt;3&lt;/span&gt;},{&lt;span class="pl-c1"&gt;1&lt;/span&gt;,&lt;span class="pl-c1"&gt;0&lt;/span&gt;,&lt;span class="pl-c1"&gt;0&lt;/span&gt;}}).
{{&lt;span class="pl-c1"&gt;2013&lt;/span&gt;,&lt;span class="pl-c1"&gt;11&lt;/span&gt;,&lt;span class="pl-c1"&gt;3&lt;/span&gt;},{&lt;span class="pl-c1"&gt;5&lt;/span&gt;,&lt;span class="pl-c1"&gt;0&lt;/span&gt;,&lt;span class="pl-c1"&gt;0&lt;/span&gt;}}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;%&lt;/span&gt;% Here we demonstrated that even if we ask for "both", if there is no&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;%&lt;/span&gt;% ambiguity, the plain date is returned&lt;/span&gt;
&lt;span class="pl-c1"&gt;8&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;qdate&lt;/span&gt;:&lt;span class="pl-en"&gt;to_date&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;GMT&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;both&lt;/span&gt;, {{&lt;span class="pl-c1"&gt;2013&lt;/span&gt;,&lt;span class="pl-c1"&gt;11&lt;/span&gt;,&lt;span class="pl-c1"&gt;3&lt;/span&gt;},{&lt;span class="pl-c1"&gt;5&lt;/span&gt;,&lt;span class="pl-c1"&gt;0&lt;/span&gt;,&lt;span class="pl-c1"&gt;0&lt;/span&gt;}}).
{{&lt;span class="pl-c1"&gt;2013&lt;/span&gt;,&lt;span class="pl-c1"&gt;11&lt;/span&gt;,&lt;span class="pl-c1"&gt;3&lt;/span&gt;},{&lt;span class="pl-c1"&gt;10&lt;/span&gt;,&lt;span class="pl-c1"&gt;0&lt;/span&gt;,&lt;span class="pl-c1"&gt;0&lt;/span&gt;}}&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content-conversion-functions-provided-for-api-compatibility-with-ec_date" class="anchor" aria-hidden="true" href="#conversion-functions-provided-for-api-compatibility-with-ec_date"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Conversion Functions provided for API compatibility with &lt;code&gt;ec_date&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;parse/1&lt;/code&gt; - Same as &lt;code&gt;to_date(Date)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nparse/1&lt;/code&gt; - Same as &lt;code&gt;to_now(Date)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;format/1&lt;/code&gt; - Same as &lt;code&gt;to_string/1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;format/2&lt;/code&gt; - Same as &lt;code&gt;to_string/2&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-date-and-time-comparison" class="anchor" aria-hidden="true" href="#date-and-time-comparison"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Date and Time Comparison&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;qdate&lt;/code&gt; provides a few convenience functions for performing date comparisons.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;compare(A, B) -&amp;gt; -1|0|1&lt;/code&gt; - Like C's &lt;code&gt;strcmp&lt;/code&gt;, returns:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0&lt;/code&gt;: &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt; are exactly the same.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-1&lt;/code&gt;: &lt;code&gt;A&lt;/code&gt; is less than (before) &lt;code&gt;B&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1&lt;/code&gt;: &lt;code&gt;A&lt;/code&gt; is greater than (after) &lt;code&gt;B&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;compare(A, Operator, B) -&amp;gt; true|false&lt;/code&gt; - Operator is an infix comparison operator, and
the function will return a boolean. Will return &lt;code&gt;true&lt;/code&gt; if:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;'='&lt;/code&gt;, or &lt;code&gt;'=='&lt;/code&gt; - &lt;code&gt;A&lt;/code&gt; is the same time as &lt;code&gt;B&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;'/='&lt;/code&gt;, or &lt;code&gt;'=/='&lt;/code&gt; or &lt;code&gt;'!='&lt;/code&gt; - &lt;code&gt;A&lt;/code&gt; is not the same time as &lt;code&gt;B&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;'&amp;lt;'&lt;/code&gt; - &lt;code&gt;A&lt;/code&gt; is before &lt;code&gt;B&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;'&amp;gt;'&lt;/code&gt; - &lt;code&gt;A&lt;/code&gt; is after &lt;code&gt;B&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;'=&amp;lt;'&lt;/code&gt; or &lt;code&gt;'&amp;lt;='&lt;/code&gt; - &lt;code&gt;A&lt;/code&gt; is before or equal to &lt;code&gt;B&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;'&amp;gt;='&lt;/code&gt; or &lt;code&gt;'=&amp;gt;'&lt;/code&gt; - &lt;code&gt;A&lt;/code&gt; is after or equal to &lt;code&gt;B&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;between(A, Date, B) -&amp;gt; true|false&lt;/code&gt; - The provided &lt;code&gt;Date&lt;/code&gt; is (inclusively)
between &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt;. That is, &lt;code&gt;A =&amp;lt; Date =&amp;lt; B&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;between(A, B) -&amp;gt; true|false&lt;/code&gt; - shortcut for &lt;code&gt;between(A, now(), B)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;between(A, Op1, Date, Op2, B) -&amp;gt; true|false&lt;/code&gt; - the fully verbose option of
comparing between. &lt;code&gt;Op1&lt;/code&gt; and &lt;code&gt;Op2&lt;/code&gt; are custom operators. For example, if
you wanted to do an exclusive &lt;code&gt;between&lt;/code&gt;, you can do:
&lt;code&gt;between(A, '&amp;lt;', Date, '&amp;lt;', B)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Note 1:&lt;/strong&gt; &lt;code&gt;Operator&lt;/code&gt; must be an atom.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note 2:&lt;/strong&gt; These functions will properly compare times with different timezones
(for example: &lt;code&gt;compare("12am CST",'==',"1am EST")&lt;/code&gt; will properly return true)&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-sorting" class="anchor" aria-hidden="true" href="#sorting"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Sorting&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;qdate&lt;/code&gt; also provides a convenience functions for sorting lists of dates/times:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sort(List)&lt;/code&gt; - Sort the list in ascending order of earliest to latest.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sort(Op, List)&lt;/code&gt; - Sort the list where &lt;code&gt;Op&lt;/code&gt; is one of the following:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;'&amp;lt;'&lt;/code&gt; or &lt;code&gt;'=&amp;lt;'&lt;/code&gt; or &lt;code&gt;'&amp;lt;='&lt;/code&gt; - Sort ascending&lt;/li&gt;
&lt;li&gt;&lt;code&gt;'&amp;gt;'&lt;/code&gt; or &lt;code&gt;'&amp;gt;='&lt;/code&gt; or &lt;code&gt;'=&amp;gt;'&lt;/code&gt; - Sort descending&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sort(Op, List, Opts)&lt;/code&gt; - Sort the list according to the &lt;code&gt;Op&lt;/code&gt;, with options provided in &lt;code&gt;Opts&lt;/code&gt;. &lt;code&gt;Opts&lt;/code&gt; is a proplist of the following options:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;{non_dates, NonDates}&lt;/code&gt; - Tells it how to handle non-dates.  &lt;code&gt;NonDates&lt;/code&gt; can be any of the following:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;back&lt;/code&gt; &lt;strong&gt;(default)&lt;/strong&gt; - put any non-dates at the end (the back) of the list&lt;/li&gt;
&lt;li&gt;&lt;code&gt;front&lt;/code&gt; - put any non-dates at the beginning of the list&lt;/li&gt;
&lt;li&gt;&lt;code&gt;crash&lt;/code&gt; - if there are any non-dates, crash.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;div class="highlight highlight-source-erlang"&gt;&lt;pre&gt;	 &lt;span class="pl-c1"&gt;1&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-smi"&gt;Dates&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;non date string&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &amp;lt;&amp;lt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;garbage&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&amp;gt;&amp;gt;,
		&lt;span class="pl-c1"&gt;1466200861&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;2011-01-01&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;7pm&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
		{{&lt;span class="pl-c1"&gt;1999&lt;/span&gt;,&lt;span class="pl-c1"&gt;6&lt;/span&gt;,&lt;span class="pl-c1"&gt;21&lt;/span&gt;},{&lt;span class="pl-c1"&gt;5&lt;/span&gt;,&lt;span class="pl-c1"&gt;30&lt;/span&gt;,&lt;span class="pl-c1"&gt;0&lt;/span&gt;}}, &lt;span class="pl-c1"&gt;non_date_atom&lt;/span&gt;, {&lt;span class="pl-c1"&gt;some_tuple&lt;/span&gt;,&lt;span class="pl-c1"&gt;123&lt;/span&gt;}].
	 &lt;span class="pl-c1"&gt;2&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;qdate&lt;/span&gt;:&lt;span class="pl-en"&gt;sort&lt;/span&gt;(&lt;span class="pl-c1"&gt;'&amp;gt;='&lt;/span&gt;, &lt;span class="pl-smi"&gt;Dates&lt;/span&gt;, [{&lt;span class="pl-c1"&gt;non_dates&lt;/span&gt;, &lt;span class="pl-c1"&gt;front&lt;/span&gt;}]).
     [&amp;lt;&amp;lt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;garbage&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&amp;gt;&amp;gt;,&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;non date string&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
	  {&lt;span class="pl-c1"&gt;some_tuple&lt;/span&gt;,&lt;span class="pl-c1"&gt;123&lt;/span&gt;},
	  &lt;span class="pl-c1"&gt;non_date_atom&lt;/span&gt;,&lt;span class="pl-c1"&gt;1466200861&lt;/span&gt;,&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;2011-01-01&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
	  {{&lt;span class="pl-c1"&gt;1999&lt;/span&gt;,&lt;span class="pl-c1"&gt;6&lt;/span&gt;,&lt;span class="pl-c1"&gt;21&lt;/span&gt;},{&lt;span class="pl-c1"&gt;5&lt;/span&gt;,&lt;span class="pl-c1"&gt;30&lt;/span&gt;,&lt;span class="pl-c1"&gt;0&lt;/span&gt;}},
	  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;7pm&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Note 1:&lt;/strong&gt; This sorting is optimized to be much faster than using a home-grown
sort using the &lt;code&gt;compare&lt;/code&gt; functions, as this normalizes the items in the list
before comparing (so it's only really comparing integers, which is quite fast).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note 2:&lt;/strong&gt; This is one of the few qdate functions that don't have the "Date"
as the last argument. This follows the pattern in Erlang/OTP to put options as
the last argument (for example, &lt;code&gt;re:run/3&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note 3:&lt;/strong&gt; You'll notice that qdate's sorting retains the original terms (in
the example above, we compared a datetime tuple, unix timestamp, and two
strings (along with a number of non-dates, which were just prepended to the
front of the list).&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-timezone-functions" class="anchor" aria-hidden="true" href="#timezone-functions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Timezone Functions&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;set_timezone(Key, TZ)&lt;/code&gt; - Set the timezone to TZ for the key &lt;code&gt;Key&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set_timezone(TZ)&lt;/code&gt; - Sets the timezone, and uses the Pid from &lt;code&gt;self()&lt;/code&gt; as
the &lt;code&gt;Key&lt;/code&gt;. Also links the process for removal from the record when the Pid
dies.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;get_timezone(Key)&lt;/code&gt; - Gets the timezone assigned to &lt;code&gt;Key&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;get_timezone()&lt;/code&gt; - Gets the timezone using &lt;code&gt;self()&lt;/code&gt; as the &lt;code&gt;Key&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;clear_timezone(Key)&lt;/code&gt; - Removes the timezone record associated with &lt;code&gt;Key&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;clear_timezone()&lt;/code&gt; - Removes the timezone record using &lt;code&gt;self()&lt;/code&gt; as &lt;code&gt;Key&lt;/code&gt;.
This function is not necessary for cleanup, most of the time, since if
&lt;code&gt;Key&lt;/code&gt; is a Pid, the &lt;code&gt;qdate&lt;/code&gt; server will automatically clean up when the
Pid dies.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If no timezone is set, then anything relying on the timezone will
default to GMT.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-registering-custom-parsers-and-formatters" class="anchor" aria-hidden="true" href="#registering-custom-parsers-and-formatters"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Registering Custom Parsers and Formatters&lt;/h3&gt;
&lt;p&gt;You can register custom parsers and formatters with the &lt;code&gt;qdate&lt;/code&gt; server. This
allows you to specify application-wide aliases for certain common formatting
strings in your application, or to register custom parsing engines which will
be attempted before engaging the &lt;code&gt;ec_date&lt;/code&gt; parser.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-registering-and-deregistering-parsers" class="anchor" aria-hidden="true" href="#registering-and-deregistering-parsers"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Registering and Deregistering Parsers&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;register_parser(Key, ParseFun)&lt;/code&gt; - Registers a parsing function with the
&lt;code&gt;qdate&lt;/code&gt; server. &lt;code&gt;ParseFun&lt;/code&gt; is expected to have the arity of 1, and is
expected to return a DateTime format (&lt;code&gt;{{Year,Month,Day},{Hour,Min,Sec}}&lt;/code&gt;)
or, if your ParseFun is capable of parsing out a Timezone, the return
the tuple &lt;code&gt;{DateTime, Timezone}&lt;/code&gt;. Keep in mind, if your string already ends
with a Timezone, the parser will almost certainly extract the timezone
before it gets to your custom &lt;code&gt;ParseFun&lt;/code&gt;. If your custom parser is not
able to parse the string, then it should return &lt;code&gt;undefined&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;deregister_parser(Key)&lt;/code&gt; - If you previously registered a parser with the
&lt;code&gt;qdate&lt;/code&gt; server, you can deregister it by its &lt;code&gt;Key&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;get_parsers()&lt;/code&gt; - Get the list of all registered parsers and their keys.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-registering-and-deregistering-formatters" class="anchor" aria-hidden="true" href="#registering-and-deregistering-formatters"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Registering and Deregistering Formatters&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;register_format(Key, FormatString)&lt;/code&gt; - Register a formatting string with
the &lt;code&gt;qdate&lt;/code&gt; server, which can then be used in place of the typical
formatting string.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;deregister_format(Key)&lt;/code&gt; - Deregister the formatting string from the
&lt;code&gt;qdate&lt;/code&gt; server.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;get_formats()&lt;/code&gt; - Get the list of all registered formats and their keys.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-about-backwards-compatibility-with-ec_date-and-deterministic-parsing" class="anchor" aria-hidden="true" href="#about-backwards-compatibility-with-ec_date-and-deterministic-parsing"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;About backwards compatibility with &lt;code&gt;ec_date&lt;/code&gt; and deterministic parsing&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;ec_date&lt;/code&gt; and &lt;code&gt;dh_date&lt;/code&gt; both have a quirk that bothers me with respect to the
parsing of dates that causes some date parsing to be &lt;em&gt;non-deterministic&lt;/em&gt;. That
is, if parsing an incomplete date or time (ie, a text string that is missing a
time or a date), &lt;code&gt;ec_date&lt;/code&gt; will automatically insert the current values of
those as read by the system clock.&lt;/p&gt;
&lt;p&gt;For example, if the following lines are run a few seconds apart:&lt;/p&gt;
&lt;div class="highlight highlight-source-erlang"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;1&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;ec_date&lt;/span&gt;:&lt;span class="pl-en"&gt;parse&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;2012-02-04&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;).
{{&lt;span class="pl-c1"&gt;2012&lt;/span&gt;,&lt;span class="pl-c1"&gt;2&lt;/span&gt;,&lt;span class="pl-c1"&gt;4&lt;/span&gt;},{&lt;span class="pl-c1"&gt;0&lt;/span&gt;,&lt;span class="pl-c1"&gt;1&lt;/span&gt;,&lt;span class="pl-c1"&gt;10&lt;/span&gt;}}
&lt;span class="pl-c1"&gt;2&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;ec_date&lt;/span&gt;:&lt;span class="pl-en"&gt;parse&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;2012-02-04&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;).
{{&lt;span class="pl-c1"&gt;2012&lt;/span&gt;,&lt;span class="pl-c1"&gt;2&lt;/span&gt;,&lt;span class="pl-c1"&gt;4&lt;/span&gt;},{&lt;span class="pl-c1"&gt;0&lt;/span&gt;,&lt;span class="pl-c1"&gt;1&lt;/span&gt;,&lt;span class="pl-c1"&gt;12&lt;/span&gt;}}
&lt;span class="pl-c1"&gt;3&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;ec_date&lt;/span&gt;:&lt;span class="pl-en"&gt;parse&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;2012-02-04&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;).
{{&lt;span class="pl-c1"&gt;2012&lt;/span&gt;,&lt;span class="pl-c1"&gt;2&lt;/span&gt;,&lt;span class="pl-c1"&gt;4&lt;/span&gt;},{&lt;span class="pl-c1"&gt;0&lt;/span&gt;,&lt;span class="pl-c1"&gt;1&lt;/span&gt;,&lt;span class="pl-c1"&gt;13&lt;/span&gt;}}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you can see, even though the inputs are the same each time, the resulting
parsed dates have the current time inferred. The same behavior can be observed
if parsing a time without a date:&lt;/p&gt;
&lt;div class="highlight highlight-source-erlang"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;4&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;ec_date&lt;/span&gt;:&lt;span class="pl-en"&gt;parse&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;7pm&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;).
{{&lt;span class="pl-c1"&gt;2013&lt;/span&gt;,&lt;span class="pl-c1"&gt;4&lt;/span&gt;,&lt;span class="pl-c1"&gt;30&lt;/span&gt;},{&lt;span class="pl-c1"&gt;19&lt;/span&gt;,&lt;span class="pl-c1"&gt;0&lt;/span&gt;,&lt;span class="pl-c1"&gt;0&lt;/span&gt;}}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you can see, even though the time did not specify a date, the resulting
parsed datetime has the date inferred from the current date. Admittedly,
inferring the date bothers me less than inferring the time, but in the name of
consistency, there should be options for enabling or disabling both.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-the-solution-for-non-deterministic-parsing" class="anchor" aria-hidden="true" href="#the-solution-for-non-deterministic-parsing"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;The Solution For Non-deterministic parsing&lt;/h4&gt;
&lt;p&gt;To solve this issue for users that are bothered by this, while preserving
backwards compatibility for folks who prefer this, we're going to introduce a
&lt;code&gt;qdate&lt;/code&gt; application environment variable called &lt;code&gt;deterministic_parsing&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The value of &lt;code&gt;deterministic_parsing&lt;/code&gt; can be a tuple of the following format:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;{DatePref, TimePref}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Where &lt;code&gt;DatePref&lt;/code&gt; and &lt;code&gt;TimePref&lt;/code&gt; are either of the following atoms:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;now&lt;/code&gt; - Automatically fill in the missing date or time components with the
current time (the is the behavior described above)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;zero&lt;/code&gt; - Fill in the missing date or time components with zeroed out
values. This means that if a date is missing, it'll be set to the unix
epoch (&lt;code&gt;{1970,1,1}&lt;/code&gt;) and if a time is missing, it'll be set to midnight:
&lt;code&gt;{0,0,0}&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, the acceptable combinations can be the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;{zero, zero}&lt;/code&gt; - Any missing components will be replaced with zero-values.
&lt;strong&gt;(This is the qdate default behavior)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{now, zero}&lt;/code&gt; - If a date is missing, insert the current date, but if a
time is missing, set it to midnight.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{zero, now}&lt;/code&gt; - If a date is missing, set it to the unix epoch, and if a
time is missing, set it to the current time of day.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{now, now}&lt;/code&gt; - If either date or time are missing, set it to the current
date or current time.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If this application value is not set, the default behavior for
&lt;code&gt;qdate&lt;/code&gt; is to avoid non-determinism and use &lt;code&gt;{zero, zero}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To set this value, you can either set the value manually in code with:&lt;/p&gt;
&lt;div class="highlight highlight-source-erlang"&gt;&lt;pre&gt;&lt;span class="pl-en"&gt;application&lt;/span&gt;:&lt;span class="pl-en"&gt;set_env&lt;/span&gt;(&lt;span class="pl-c1"&gt;qdate&lt;/span&gt;, &lt;span class="pl-c1"&gt;deterministic_parsing&lt;/span&gt;, {&lt;span class="pl-c1"&gt;now&lt;/span&gt;, &lt;span class="pl-c1"&gt;zero&lt;/span&gt;}).&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;or (and this is the preferred method) use a config file and load it with&lt;/p&gt;
&lt;p&gt;&lt;code&gt;erl -config path/to/file.config&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Sample config file specifying this application variable:&lt;/p&gt;
&lt;div class="highlight highlight-source-erlang"&gt;&lt;pre&gt;[{&lt;span class="pl-c1"&gt;qdate&lt;/span&gt;, [
    {&lt;span class="pl-c1"&gt;deterministic_parsing&lt;/span&gt;, {&lt;span class="pl-c1"&gt;now&lt;/span&gt;, &lt;span class="pl-c1"&gt;zero&lt;/span&gt;}}
]}].&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-demonstration" class="anchor" aria-hidden="true" href="#demonstration"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Demonstration&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-basic-conversion-and-formatting" class="anchor" aria-hidden="true" href="#basic-conversion-and-formatting"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Basic Conversion and Formatting&lt;/h3&gt;
&lt;div class="highlight highlight-source-erlang"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;%&lt;/span&gt;% Let's start by making a standard Erlang DateTime tuple&lt;/span&gt;
&lt;span class="pl-c1"&gt;1&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-smi"&gt;Date&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; {{&lt;span class="pl-c1"&gt;2013&lt;/span&gt;,&lt;span class="pl-c1"&gt;12&lt;/span&gt;,&lt;span class="pl-c1"&gt;21&lt;/span&gt;},{&lt;span class="pl-c1"&gt;12&lt;/span&gt;,&lt;span class="pl-c1"&gt;24&lt;/span&gt;,&lt;span class="pl-c1"&gt;21&lt;/span&gt;}}.
{{&lt;span class="pl-c1"&gt;2013&lt;/span&gt;,&lt;span class="pl-c1"&gt;12&lt;/span&gt;,&lt;span class="pl-c1"&gt;21&lt;/span&gt;},{&lt;span class="pl-c1"&gt;12&lt;/span&gt;,&lt;span class="pl-c1"&gt;24&lt;/span&gt;,&lt;span class="pl-c1"&gt;21&lt;/span&gt;}}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;%&lt;/span&gt;% Let's do a simple formatting of the date&lt;/span&gt;
&lt;span class="pl-c1"&gt;2&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-smi"&gt;DateString&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;qdate&lt;/span&gt;:&lt;span class="pl-en"&gt;to_string&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Y-m-d h:ia&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-smi"&gt;Date&lt;/span&gt;).
&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;2013-12-21 12:24pm&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;%&lt;/span&gt;% We can also specify the format string as a binary&lt;/span&gt;
&lt;span class="pl-c1"&gt;3&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-smi"&gt;DateBinary&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;qdate&lt;/span&gt;:&lt;span class="pl-en"&gt;to_string&lt;/span&gt;(&amp;lt;&amp;lt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Y-m-d h:ia&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&amp;gt;&amp;gt;,&lt;span class="pl-smi"&gt;Date&lt;/span&gt;).
&amp;lt;&amp;lt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;2013-12-21 12:24pm&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&amp;gt;&amp;gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;%&lt;/span&gt;% And we can parse the original string to get back a DateTime object&lt;/span&gt;
&lt;span class="pl-c1"&gt;4&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;qdate&lt;/span&gt;:&lt;span class="pl-en"&gt;to_date&lt;/span&gt;(&lt;span class="pl-smi"&gt;DateString&lt;/span&gt;).
{{&lt;span class="pl-c1"&gt;2013&lt;/span&gt;,&lt;span class="pl-c1"&gt;12&lt;/span&gt;,&lt;span class="pl-c1"&gt;21&lt;/span&gt;},{&lt;span class="pl-c1"&gt;12&lt;/span&gt;,&lt;span class="pl-c1"&gt;24&lt;/span&gt;,&lt;span class="pl-c1"&gt;0&lt;/span&gt;}}


&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;%&lt;/span&gt;% We can do the same with a binary&lt;/span&gt;
&lt;span class="pl-c1"&gt;5&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;qdate&lt;/span&gt;:&lt;span class="pl-en"&gt;to_date&lt;/span&gt;(&lt;span class="pl-smi"&gt;DateBinary&lt;/span&gt;).
{{&lt;span class="pl-c1"&gt;2013&lt;/span&gt;,&lt;span class="pl-c1"&gt;12&lt;/span&gt;,&lt;span class="pl-c1"&gt;21&lt;/span&gt;},{&lt;span class="pl-c1"&gt;12&lt;/span&gt;,&lt;span class="pl-c1"&gt;24&lt;/span&gt;,&lt;span class="pl-c1"&gt;0&lt;/span&gt;}}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;%&lt;/span&gt;% We can also parse that date and get a Unix timestamp&lt;/span&gt;
&lt;span class="pl-c1"&gt;6&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-smi"&gt;DateUnix&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;qdate&lt;/span&gt;:&lt;span class="pl-en"&gt;to_unixtime&lt;/span&gt;(&lt;span class="pl-smi"&gt;DateString&lt;/span&gt;).
&lt;span class="pl-c1"&gt;1387628640&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;%&lt;/span&gt;% And we can take that Unix timestamp and format it to a string&lt;/span&gt;
&lt;span class="pl-c1"&gt;7&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;qdate&lt;/span&gt;:&lt;span class="pl-en"&gt;to_string&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;n/j/Y g:ia&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-smi"&gt;DateUnix&lt;/span&gt;).
&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;12/21/2013 12:24pm&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;%&lt;/span&gt;% We can take a date string and get an Erlang now() tuple&lt;/span&gt;
&lt;span class="pl-c1"&gt;8&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-smi"&gt;DateNow&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;qdate&lt;/span&gt;:&lt;span class="pl-en"&gt;to_now&lt;/span&gt;(&lt;span class="pl-smi"&gt;DateString&lt;/span&gt;).
{&lt;span class="pl-c1"&gt;1387&lt;/span&gt;,&lt;span class="pl-c1"&gt;628640&lt;/span&gt;,&lt;span class="pl-c1"&gt;0&lt;/span&gt;}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;%&lt;/span&gt;% And we can convert it back&lt;/span&gt;

&lt;span class="pl-c1"&gt;9&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-smi"&gt;DateString2&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;qdate&lt;/span&gt;:&lt;span class="pl-en"&gt;to_string&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;n/j/Y g:ia&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-smi"&gt;DateNow&lt;/span&gt;).
&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;12/21/2013 12:24pm&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; That by this point, we've used, as the &lt;code&gt;Date&lt;/code&gt; parameter, all natively
supported date formats: Erlang &lt;code&gt;datetime()&lt;/code&gt;, Erlang &lt;code&gt;now()&lt;/code&gt;, Unix timestamp,
and formatted text strings either as a list or as a binary.&lt;/p&gt;
&lt;p&gt;For the most part, this will be the bread and butter usage of &lt;code&gt;qdate&lt;/code&gt;.  Easily
converting from one format to another without having to worry about what format
your data is currently in. &lt;code&gt;qdate&lt;/code&gt; will figure it out for you.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;But now, we're going to start getting interesting!&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-registering-custom-parsers" class="anchor" aria-hidden="true" href="#registering-custom-parsers"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Registering Custom Parsers&lt;/h3&gt;
&lt;div class="highlight highlight-source-erlang"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;%&lt;/span&gt;% Let's format our date into something shorter. This may, for example, be a&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;%&lt;/span&gt;% date format you may deal with when receiving a data-set from a client.&lt;/span&gt;
&lt;span class="pl-c1"&gt;10&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-smi"&gt;CompactDate&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;qdate&lt;/span&gt;:&lt;span class="pl-en"&gt;to_string&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Ymd&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-smi"&gt;DateNow&lt;/span&gt;).
&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;20131221&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;%&lt;/span&gt;% Let's try to parse it&lt;/span&gt;
&lt;span class="pl-c1"&gt;11&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;qdate&lt;/span&gt;:&lt;span class="pl-en"&gt;to_date&lt;/span&gt;(&lt;span class="pl-smi"&gt;CompactDate&lt;/span&gt;).
&lt;span class="pl-k"&gt;**&lt;/span&gt; &lt;span class="pl-c1"&gt;exception&lt;/span&gt; &lt;span class="pl-c1"&gt;throw&lt;/span&gt;: {&lt;span class="pl-c1"&gt;ec_date&lt;/span&gt;,{&lt;span class="pl-c1"&gt;bad_date&lt;/span&gt;,&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;20131221&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}}
     &lt;span class="pl-c1"&gt;in&lt;/span&gt; &lt;span class="pl-c1"&gt;function&lt;/span&gt;  &lt;span class="pl-c1"&gt;ec_date&lt;/span&gt;:&lt;span class="pl-c1"&gt;do_parse&lt;/span&gt;&lt;span class="pl-k"&gt;/&lt;/span&gt;&lt;span class="pl-c1"&gt;3&lt;/span&gt; (&lt;span class="pl-c1"&gt;src&lt;/span&gt;&lt;span class="pl-k"&gt;/&lt;/span&gt;&lt;span class="pl-c1"&gt;ec_date&lt;/span&gt;.&lt;span class="pl-c1"&gt;erl&lt;/span&gt;, &lt;span class="pl-c1"&gt;line&lt;/span&gt; &lt;span class="pl-c1"&gt;92&lt;/span&gt;)
     &lt;span class="pl-c1"&gt;in&lt;/span&gt; &lt;span class="pl-c1"&gt;call&lt;/span&gt; &lt;span class="pl-c1"&gt;from&lt;/span&gt; &lt;span class="pl-c1"&gt;qdate&lt;/span&gt;:&lt;span class="pl-c1"&gt;to_date&lt;/span&gt;&lt;span class="pl-k"&gt;/&lt;/span&gt;&lt;span class="pl-c1"&gt;2&lt;/span&gt; (&lt;span class="pl-c1"&gt;src&lt;/span&gt;&lt;span class="pl-k"&gt;/&lt;/span&gt;&lt;span class="pl-c1"&gt;qdate&lt;/span&gt;.&lt;span class="pl-c1"&gt;erl&lt;/span&gt;, &lt;span class="pl-c1"&gt;line&lt;/span&gt; &lt;span class="pl-c1"&gt;169&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;%&lt;/span&gt;% Well obviously, this isn't a standard format by any means, so it crashes.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;%&lt;/span&gt;% You can parse it yourself before passing it to `qdate` or if you deal with&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;%&lt;/span&gt;% this format frequently enough, you can register it as a custom parser and&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;%&lt;/span&gt;% qdate will intelligently parse it if it can.&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;%&lt;/span&gt;% So let's make a simple parser for it that uses regular expressions:&lt;/span&gt;
&lt;span class="pl-c1"&gt;12&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-smi"&gt;ParseCompressedDate&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt;
&lt;span class="pl-c1"&gt;12&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;  &lt;span class="pl-k"&gt;fun&lt;/span&gt;(&lt;span class="pl-smi"&gt;RawDate&lt;/span&gt;) &lt;span class="pl-k"&gt;when&lt;/span&gt; &lt;span class="pl-en"&gt;length&lt;/span&gt;(&lt;span class="pl-smi"&gt;RawDate&lt;/span&gt;)&lt;span class="pl-k"&gt;==&lt;/span&gt;&lt;span class="pl-c1"&gt;8&lt;/span&gt; -&amp;gt;
&lt;span class="pl-c1"&gt;12&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;       &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-en"&gt;re&lt;/span&gt;:&lt;span class="pl-en"&gt;run&lt;/span&gt;(&lt;span class="pl-smi"&gt;RawDate&lt;/span&gt;,&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;^(&lt;span class="pl-cce"&gt;\\&lt;/span&gt;d{4})(&lt;span class="pl-cce"&gt;\\&lt;/span&gt;d{2})(&lt;span class="pl-cce"&gt;\\&lt;/span&gt;d{2})$&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,[{&lt;span class="pl-c1"&gt;capture&lt;/span&gt;,&lt;span class="pl-c1"&gt;all_but_first&lt;/span&gt;,&lt;span class="pl-c1"&gt;list&lt;/span&gt;}]) &lt;span class="pl-k"&gt;of&lt;/span&gt;
&lt;span class="pl-c1"&gt;12&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;         &lt;span class="pl-c1"&gt;nomatch&lt;/span&gt; -&amp;gt; &lt;span class="pl-c1"&gt;undefined&lt;/span&gt;;
&lt;span class="pl-c1"&gt;12&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;         {&lt;span class="pl-c1"&gt;match&lt;/span&gt;, [&lt;span class="pl-smi"&gt;Y&lt;/span&gt;,&lt;span class="pl-smi"&gt;M&lt;/span&gt;,&lt;span class="pl-smi"&gt;D&lt;/span&gt;]} -&amp;gt;
&lt;span class="pl-c1"&gt;12&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;           &lt;span class="pl-smi"&gt;ParsedDate&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; {&lt;span class="pl-en"&gt;list_to_integer&lt;/span&gt;(&lt;span class="pl-smi"&gt;Y&lt;/span&gt;), &lt;span class="pl-en"&gt;list_to_integer&lt;/span&gt;(&lt;span class="pl-smi"&gt;M&lt;/span&gt;), &lt;span class="pl-en"&gt;list_to_integer&lt;/span&gt;(&lt;span class="pl-smi"&gt;D&lt;/span&gt;)},
&lt;span class="pl-c1"&gt;12&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;           &lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-en"&gt;calendar&lt;/span&gt;:&lt;span class="pl-en"&gt;valid_date&lt;/span&gt;(&lt;span class="pl-smi"&gt;ParsedDate&lt;/span&gt;) &lt;span class="pl-k"&gt;of&lt;/span&gt;
&lt;span class="pl-c1"&gt;12&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;              &lt;span class="pl-c1"&gt;true&lt;/span&gt; -&amp;gt; {&lt;span class="pl-smi"&gt;ParsedDate&lt;/span&gt;, {&lt;span class="pl-c1"&gt;0&lt;/span&gt;,&lt;span class="pl-c1"&gt;0&lt;/span&gt;,&lt;span class="pl-c1"&gt;0&lt;/span&gt;}};
&lt;span class="pl-c1"&gt;12&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;              &lt;span class="pl-c1"&gt;false&lt;/span&gt; -&amp;gt; &lt;span class="pl-c1"&gt;undefined&lt;/span&gt;
&lt;span class="pl-c1"&gt;12&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;           &lt;span class="pl-k"&gt;end&lt;/span&gt;
&lt;span class="pl-c1"&gt;12&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;       &lt;span class="pl-k"&gt;catch&lt;/span&gt; &lt;span class="pl-c1"&gt;_&lt;/span&gt;:&lt;span class="pl-c1"&gt;_&lt;/span&gt; -&amp;gt; &lt;span class="pl-c1"&gt;undefined&lt;/span&gt;
&lt;span class="pl-c1"&gt;12&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;       &lt;span class="pl-k"&gt;end&lt;/span&gt;;
&lt;span class="pl-c1"&gt;12&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;     (&lt;span class="pl-c1"&gt;_&lt;/span&gt;) -&amp;gt; &lt;span class="pl-c1"&gt;undefined&lt;/span&gt;
&lt;span class="pl-c1"&gt;12&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;  &lt;span class="pl-k"&gt;end&lt;/span&gt;.
#&lt;span class="pl-smi"&gt;Fun&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-c1"&gt;erl_eval&lt;/span&gt;.&lt;span class="pl-c1"&gt;6.82930912&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;%&lt;/span&gt;% And now we'll register the parser with the `qdate` server, giving it a "Key"&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;%&lt;/span&gt;% of the atom 'compressed_date'&lt;/span&gt;
&lt;span class="pl-c1"&gt;13&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;qdate&lt;/span&gt;:&lt;span class="pl-en"&gt;register_parser&lt;/span&gt;(&lt;span class="pl-c1"&gt;compressed_date&lt;/span&gt;,&lt;span class="pl-smi"&gt;ParseCompressedDate&lt;/span&gt;).
&lt;span class="pl-c1"&gt;compressed_date&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;%&lt;/span&gt;% Now, let's try parsing that again&lt;/span&gt;
&lt;span class="pl-c1"&gt;14&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;qdate&lt;/span&gt;:&lt;span class="pl-en"&gt;to_date&lt;/span&gt;(&lt;span class="pl-smi"&gt;CompactDate&lt;/span&gt;).
{{&lt;span class="pl-c1"&gt;2013&lt;/span&gt;,&lt;span class="pl-c1"&gt;12&lt;/span&gt;,&lt;span class="pl-c1"&gt;21&lt;/span&gt;},{&lt;span class="pl-c1"&gt;0&lt;/span&gt;,&lt;span class="pl-c1"&gt;0&lt;/span&gt;,&lt;span class="pl-c1"&gt;0&lt;/span&gt;}}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;%&lt;/span&gt;% Huzzah! It worked. From here on out, `qdate`, will properly parse that kind&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;%&lt;/span&gt;% of data if that format is passed, otherwise, it will merely skip over that&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;%&lt;/span&gt;% parser and engage the standard parser in `ec_date`&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Currently, &lt;code&gt;qdate&lt;/code&gt; expects custom parsers to not crash. If a custom
parser crashes, an exception will be thrown. This is done in order to help you
debug your parsers. If a parser receives an unexpected input and crashes, the
exception will be generated and you will be able to track down what input caused
the crash.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Another Note:&lt;/strong&gt; Custom parsers are expected to return either:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A &lt;code&gt;datetime()&lt;/code&gt; tuple. (ie {{2012,12,21},{14,45,23}}).&lt;/li&gt;
&lt;li&gt;An integer, which represents the Unix timestamp.&lt;/li&gt;
&lt;li&gt;The atom &lt;code&gt;undefined&lt;/code&gt; if this parser is not a match for the supplied value&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a id="user-content-included-parser-relative-times" class="anchor" aria-hidden="true" href="#included-parser-relative-times"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Included Parser: Relative Times&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;qdate&lt;/code&gt; ships with an optional relative time parser. To speed up performance
(since this parser uses regular expressions), this parser is disabled by
default. But if you wish to use it, make sure you call
&lt;code&gt;qdate:register_parser(parse_relative, fun qdate:parse_relative/1)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Doing this allows you to parse relative time strings of the following formats:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;"1 hour ago"&lt;/li&gt;
&lt;li&gt;"-15 minutes"&lt;/li&gt;
&lt;li&gt;"in 45 days"&lt;/li&gt;
&lt;li&gt;"+2 years"&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And doing so allows you to construct slightly more readable comparison calls
for sometimes common comparisons. For example, the following two calls are identical:&lt;/p&gt;
&lt;div class="highlight highlight-source-erlang"&gt;&lt;pre&gt;&lt;span class="pl-en"&gt;qdate&lt;/span&gt;:&lt;span class="pl-en"&gt;between&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;-15 minutes&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-smi"&gt;Date&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;+15 minutes&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;).

&lt;span class="pl-en"&gt;qdate&lt;/span&gt;:&lt;span class="pl-en"&gt;between&lt;/span&gt;(&lt;span class="pl-en"&gt;qdate&lt;/span&gt;:&lt;span class="pl-en"&gt;add_minutes&lt;/span&gt;(&lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-c1"&gt;15&lt;/span&gt;), &lt;span class="pl-smi"&gt;Date&lt;/span&gt;, &lt;span class="pl-en"&gt;qdate&lt;/span&gt;:&lt;span class="pl-en"&gt;add_minutes&lt;/span&gt;(&lt;span class="pl-c1"&gt;15&lt;/span&gt;)).&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-registering-custom-formats" class="anchor" aria-hidden="true" href="#registering-custom-formats"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Registering Custom Formats&lt;/h3&gt;
&lt;div class="highlight highlight-source-erlang"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;%&lt;/span&gt;% Let's format a date to a rather long string&lt;/span&gt;
&lt;span class="pl-c1"&gt;15&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;qdate&lt;/span&gt;:&lt;span class="pl-en"&gt;to_string&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;l, F jS, Y g:i A T&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,&lt;span class="pl-smi"&gt;DateString&lt;/span&gt;).
&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Saturday, December 12st, 2013 12:24 PM GMT&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;%&lt;/span&gt;% Boy, that sure was a long string, I hope you can remember all those&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;%&lt;/span&gt;% characters in that order!&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;%&lt;/span&gt;% But, you don't have to: if that's a common format you use in your&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;%&lt;/span&gt;% application, you can register your format with the `qdate` server, and then&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;%&lt;/span&gt;% easiy refer to that format by its key.&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;%&lt;/span&gt;% So let's take that format and register it&lt;/span&gt;
&lt;span class="pl-c1"&gt;16&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;qdate&lt;/span&gt;:&lt;span class="pl-en"&gt;register_format&lt;/span&gt;(&lt;span class="pl-c1"&gt;longdate&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;l, F jS, Y g:i A T&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;).
&lt;span class="pl-c1"&gt;ok&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;%&lt;/span&gt;% Now, let's try to format our string &lt;/span&gt;
&lt;span class="pl-c1"&gt;17&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-smi"&gt;LongDateString&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;qdate&lt;/span&gt;:&lt;span class="pl-en"&gt;to_string&lt;/span&gt;(&lt;span class="pl-c1"&gt;longdate&lt;/span&gt;, &lt;span class="pl-smi"&gt;DateString&lt;/span&gt;).
&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Saturday, December 21st, 2013 12:24 PM GMT&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;%&lt;/span&gt;% It was certainly easier to remember the atom 'longdate' than trying to&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;%&lt;/span&gt;% remember the seemingly random "l, F jS, Y g:i A T".&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ain't it nice, making things easier for you?&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-timezone-demonstrations" class="anchor" aria-hidden="true" href="#timezone-demonstrations"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Timezone Demonstrations&lt;/h3&gt;
&lt;p&gt;The observant reader would have noticed something else. We used &lt;strong&gt;timezones&lt;/strong&gt;
in the last couple of calls. Indeed, not only can &lt;code&gt;qdate&lt;/code&gt; deal with formatting
timezones, but it can also parse them, convert them, and set them for
simplified conversions.&lt;/p&gt;
&lt;p&gt;Let's see how we do this&lt;/p&gt;
&lt;div class="highlight highlight-source-erlang"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;%&lt;/span&gt;% Let's take that last long date string (that was in GMT) and move it to&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;%&lt;/span&gt;% Pacific time&lt;/span&gt;
&lt;span class="pl-c1"&gt;18&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-smi"&gt;LongDatePDT&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;qdate&lt;/span&gt;:&lt;span class="pl-en"&gt;to_string&lt;/span&gt;(&lt;span class="pl-c1"&gt;longdate&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;PDT&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-smi"&gt;LongDateString&lt;/span&gt;).
&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Saturday, December 21st, 2013 4:24 AM PST&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;%&lt;/span&gt;% See something interesting there? Yeah, we told it it was PDT, but it output&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;%&lt;/span&gt;% PST.  That's because PST is not in daylight saving time in December, and &lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;%&lt;/span&gt;% `qdate` was able to intelligently infer that, and fix it for us.&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;%&lt;/span&gt;% Note, that when in doubt, `qdate` will *not* convert. For example, not all&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;%&lt;/span&gt;% places in Eastern Standard Time do daylight saving time, and as such, EST&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;%&lt;/span&gt;% will not necessarily convert to EDT.&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;%&lt;/span&gt;% However, if you provide the timezone as something like "America/New York",&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;%&lt;/span&gt;% it *will* figure that out, and do the correct conversion for you. &lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;%&lt;/span&gt;% Let's see how it handles unix times with strings that contain timezones.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;%&lt;/span&gt;% If you recall, LongDateString = "Saturday, December 21st, 2013 12:24 PM GMT"&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;%&lt;/span&gt;% and LongDatePDT = "Saturday, December 21st, 2013 4:24 AM PST"&lt;/span&gt;
&lt;span class="pl-c1"&gt;19&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;qdate&lt;/span&gt;:&lt;span class="pl-en"&gt;to_unixtime&lt;/span&gt;(&lt;span class="pl-smi"&gt;LongDateString&lt;/span&gt;).
&lt;span class="pl-c1"&gt;1387628640&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;%&lt;/span&gt;% Now let's try it with the Pacific Time one&lt;/span&gt;
&lt;span class="pl-c1"&gt;20&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;qdate&lt;/span&gt;:&lt;span class="pl-en"&gt;to_unixtime&lt;/span&gt;(&lt;span class="pl-smi"&gt;LongDatePDT&lt;/span&gt;).
&lt;span class="pl-c1"&gt;1387628640&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;%&lt;/span&gt;% How exciting! `qdate` properly returned the same unix timestamp, since unix&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;%&lt;/span&gt;% timestamps are timezone neutral. That is because unix timestamps are the&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;%&lt;/span&gt;% number of seconds since midnight on 1970-01-01 GMT. As such, unix timestamps&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;%&lt;/span&gt;% should not change, just because you're in a different timezone.&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;%&lt;/span&gt;% Let's set the timezone for the current process to EST to test that previous&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;%&lt;/span&gt;% assertion&lt;/span&gt;
&lt;span class="pl-c1"&gt;21&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;qdate&lt;/span&gt;:&lt;span class="pl-en"&gt;set_timezone&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;EST&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;).
&lt;span class="pl-c1"&gt;ok&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;%&lt;/span&gt;% Now let's try converting those dates to unixtimes again&lt;/span&gt;
&lt;span class="pl-c1"&gt;22&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;qdate&lt;/span&gt;:&lt;span class="pl-en"&gt;to_unixtime&lt;/span&gt;(&lt;span class="pl-smi"&gt;LongDateString&lt;/span&gt;).
&lt;span class="pl-c1"&gt;1387628640&lt;/span&gt;
&lt;span class="pl-c1"&gt;23&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;qdate&lt;/span&gt;:&lt;span class="pl-en"&gt;to_unixtime&lt;/span&gt;(&lt;span class="pl-smi"&gt;LongDatePDT&lt;/span&gt;).
&lt;span class="pl-c1"&gt;1387628640&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;%&lt;/span&gt;% Great! They didn't change, as we expected. The unix timestamps have remained&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;%&lt;/span&gt;% Timezone neutral.&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;%&lt;/span&gt;% Let's clear the current process's timezone (which basically means setting it&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;%&lt;/span&gt;% to the application variable `default_timezone`, or, in this case, just&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;%&lt;/span&gt;% resetting it to "GMT"&lt;/span&gt;
&lt;span class="pl-c1"&gt;24&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;qdate&lt;/span&gt;:&lt;span class="pl-en"&gt;clear_timezone&lt;/span&gt;().
&lt;span class="pl-c1"&gt;ok&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;%&lt;/span&gt;% Now, let's imagine you run a website. The main site may have its own&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;%&lt;/span&gt;% timezone, and the users each also have their own timezones.  So we'll&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;%&lt;/span&gt;% register timezones for each the main site, and each user. That way, if we&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;%&lt;/span&gt;% need to ensure that a date is presented in an appropriate timezone.&lt;/span&gt;


&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;%&lt;/span&gt;% Let's register some timezones by "Timezone Keys".  &lt;/span&gt;
&lt;span class="pl-c1"&gt;25&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;qdate&lt;/span&gt;:&lt;span class="pl-en"&gt;set_timezone&lt;/span&gt;(&lt;span class="pl-c1"&gt;my_site&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;America/Chicago&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;).
&lt;span class="pl-c1"&gt;ok&lt;/span&gt;
&lt;span class="pl-c1"&gt;26&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;qdate&lt;/span&gt;:&lt;span class="pl-en"&gt;set_timezone&lt;/span&gt;({&lt;span class="pl-c1"&gt;user&lt;/span&gt;,&lt;span class="pl-c1"&gt;1&lt;/span&gt;},&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Australia/Melbourne&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;).
&lt;span class="pl-c1"&gt;ok&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;%&lt;/span&gt;% So we'll get the date object of the previously set unix timestamp `DateUnix`&lt;/span&gt;
&lt;span class="pl-c1"&gt;27&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;qdate&lt;/span&gt;:&lt;span class="pl-en"&gt;to_date&lt;/span&gt;(&lt;span class="pl-smi"&gt;DateUnix&lt;/span&gt;).
{{&lt;span class="pl-c1"&gt;2013&lt;/span&gt;,&lt;span class="pl-c1"&gt;12&lt;/span&gt;,&lt;span class="pl-c1"&gt;21&lt;/span&gt;},{&lt;span class="pl-c1"&gt;12&lt;/span&gt;,&lt;span class="pl-c1"&gt;24&lt;/span&gt;,&lt;span class="pl-c1"&gt;0&lt;/span&gt;}}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;%&lt;/span&gt;% And let's format it, also showing the timezone offset that was used&lt;/span&gt;
&lt;span class="pl-c1"&gt;28&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;qdate&lt;/span&gt;:&lt;span class="pl-en"&gt;to_string&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Y-m-d H:i P&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-smi"&gt;DateUnix&lt;/span&gt;).
&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;2013-12-21 12:24 +00:00&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;%&lt;/span&gt;% Since we cleared the timezone for the current process, it just used "GMT"&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;%&lt;/span&gt;% Let's get the date again, but this time, use to the Timezone key `my_site`&lt;/span&gt;
&lt;span class="pl-c1"&gt;29&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;qdate&lt;/span&gt;:&lt;span class="pl-en"&gt;to_date&lt;/span&gt;(&lt;span class="pl-c1"&gt;my_site&lt;/span&gt;, &lt;span class="pl-smi"&gt;DateUnix&lt;/span&gt;).
{{&lt;span class="pl-c1"&gt;2013&lt;/span&gt;,&lt;span class="pl-c1"&gt;12&lt;/span&gt;,&lt;span class="pl-c1"&gt;21&lt;/span&gt;},{&lt;span class="pl-c1"&gt;6&lt;/span&gt;,&lt;span class="pl-c1"&gt;24&lt;/span&gt;,&lt;span class="pl-c1"&gt;0&lt;/span&gt;}}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;%&lt;/span&gt;% And let's format it to show again the timezone offset&lt;/span&gt;
&lt;span class="pl-c1"&gt;30&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;qdate&lt;/span&gt;:&lt;span class="pl-en"&gt;to_string&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Y-m-d H:i P&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;my_site&lt;/span&gt;, &lt;span class="pl-smi"&gt;DateUnix&lt;/span&gt;).
&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;2013-12-21 06:24 -06:00&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;%&lt;/span&gt;% Finally, let's get the date using the User's timezone key&lt;/span&gt;
&lt;span class="pl-c1"&gt;31&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;qdate&lt;/span&gt;:&lt;span class="pl-en"&gt;to_date&lt;/span&gt;({&lt;span class="pl-c1"&gt;user&lt;/span&gt;,&lt;span class="pl-c1"&gt;1&lt;/span&gt;}, &lt;span class="pl-smi"&gt;DateUnix&lt;/span&gt;).
{{&lt;span class="pl-c1"&gt;2013&lt;/span&gt;,&lt;span class="pl-c1"&gt;12&lt;/span&gt;,&lt;span class="pl-c1"&gt;21&lt;/span&gt;},{&lt;span class="pl-c1"&gt;23&lt;/span&gt;,&lt;span class="pl-c1"&gt;24&lt;/span&gt;,&lt;span class="pl-c1"&gt;0&lt;/span&gt;}}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;%&lt;/span&gt;% And again, formatted to show the timezone offset&lt;/span&gt;
&lt;span class="pl-c1"&gt;32&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-smi"&gt;UserDateWithHourOffset&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;qdate&lt;/span&gt;:&lt;span class="pl-en"&gt;to_string&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Y-m-d H:i P&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, {&lt;span class="pl-c1"&gt;user&lt;/span&gt;,&lt;span class="pl-c1"&gt;1&lt;/span&gt;}, &lt;span class="pl-smi"&gt;DateUnix&lt;/span&gt;).
&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;2013-12-21 23:24 +11:00&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;%&lt;/span&gt;% And finally, let's just test some more parsing and converting. Here, despite&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;%&lt;/span&gt;% the fact that the timezone is presented as "+11:00", `qdate` is able to&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;%&lt;/span&gt;% do the proper conversion, and give us back the same unix timestamp that was&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;%&lt;/span&gt;% used.&lt;/span&gt;
&lt;span class="pl-c1"&gt;33&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;qdate&lt;/span&gt;:&lt;span class="pl-en"&gt;to_unixtime&lt;/span&gt;(&lt;span class="pl-smi"&gt;UserDateWithHourOffset&lt;/span&gt;).
&lt;span class="pl-c1"&gt;1387628640&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-one-last-bit-of-magic-that-may-confuse-you-without-an-explanation" class="anchor" aria-hidden="true" href="#one-last-bit-of-magic-that-may-confuse-you-without-an-explanation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;One last bit of magic that may confuse you without an explanation&lt;/h3&gt;
&lt;p&gt;Magic is usually bad, you know what's worse? Timezones and Daylight Saving
Time. So we use a little magic to try and simplify them for us. Below is the
extent of the confusion with related to inferring timezones and formatting dates&lt;/p&gt;
&lt;div class="highlight highlight-source-erlang"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;%&lt;/span&gt;% First, let's set the timezone to something arbitrary&lt;/span&gt;
&lt;span class="pl-c1"&gt;34&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;qdate&lt;/span&gt;:&lt;span class="pl-en"&gt;set_timezone&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;EST&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;).
&lt;span class="pl-c1"&gt;ok&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;%&lt;/span&gt;% Let's convert this date to basically the same time format, just without the&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;%&lt;/span&gt;% timezone identifier.&lt;/span&gt;
&lt;span class="pl-c1"&gt;35&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;qdate&lt;/span&gt;:&lt;span class="pl-en"&gt;to_string&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Y-m-d H:i&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;2012-12-21 00:00 PST&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;).
&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;2012-12-21 03:00&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;%&lt;/span&gt;% WHAT?! We entered a date and time, and out came a different time?!&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;%&lt;/span&gt;% I CALL SHENANIGANS!&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;%&lt;/span&gt;% Let's add that timezone indicator back in with the conversion to see what&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;%&lt;/span&gt;% happened:&lt;/span&gt;

&lt;span class="pl-c1"&gt;36&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;qdate&lt;/span&gt;:&lt;span class="pl-en"&gt;to_string&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Y-m-d H:i T&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;2012-12-21 00:00 PST&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;).
&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;2012-12-21 03:00 EST&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;%&lt;/span&gt;% OOOOOOOHHH! I see!&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;%&lt;/span&gt;% Because we set our current timezone to EST, it took the original provided&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;%&lt;/span&gt;% date in PST, and converted it to EST (since EST is the timezone we've chosen&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;%&lt;/span&gt;% for the current process). So it's taking whatever date, and if it can&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;%&lt;/span&gt;% determine a timezone, it'll extract that timezone, and convert the time from&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;%&lt;/span&gt;% that timezone to our intended timezone.&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-beginning-or-ending-of-time-periods-hours-days-years-weeks-etc" class="anchor" aria-hidden="true" href="#beginning-or-ending-of-time-periods-hours-days-years-weeks-etc"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Beginning or Ending of time periods (hours, days, years, weeks, etc)&lt;/h2&gt;
&lt;p&gt;qdate can determine beginnings and endings of time periods, like "beginning of the month"&lt;/p&gt;
&lt;p&gt;This is abstracted to &lt;code&gt;beginning_X&lt;/code&gt; functions, which return a date/time format
with the dates and times truncated to the specified level.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;beginning_minute(Date)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;beginning_hour(Date)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;beginning_day(Date)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;beginning_month(Date)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;beginning_year(Date)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are also 0-arity versions of the above, in which &lt;code&gt;Date&lt;/code&gt; is assumed to be
"right now". For example, calling &lt;code&gt;qdate:beginning_month()&lt;/code&gt; would return
midnight on the first day of the current month.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-beginning-of-week" class="anchor" aria-hidden="true" href="#beginning-of-week"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Beginning of Week&lt;/h4&gt;
&lt;p&gt;qdate can also do a special "beginning" case, particularly the "beginning of
the week" calculation.  This has three forms, specifically:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;beginning_week()&lt;/code&gt; - Returns first day of the current week.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;beginning_week(Date)&lt;/code&gt; - Assumes the beginning of the week is Monday
(chosen because Erlang's calendar:day_of_the_week uses 1=Monday and
7=Sunday).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;beginning_week(DayOfWeek, Date)&lt;/code&gt; - Calculates the beginning of the week
based on the provided &lt;code&gt;DayOfWeek&lt;/code&gt;. Valid values for DayOfWeek are the
integers 1-7 or the atom verions of the days of the week. Specifically:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Monday: &lt;code&gt;1 | monday | mon&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Tuesday: &lt;code&gt;2 | tuesday | tue&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Wednesday: &lt;code&gt;3 | wednesday | wed&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Thursday: &lt;code&gt;4 | thursday | thu&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Friday: &lt;code&gt;5 | friday | fri&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Saturday: &lt;code&gt;6 | saturday | sat&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Sunday: &lt;code&gt;7 | sunday | sun&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These all return 12am on the day that is the first day of the week of the
provided date.&lt;/p&gt;
&lt;p&gt;(My apologies to non-English speakers. I'm a lazy American who only speaks
English, hence the Anglocentric day names).&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-end-of-time-period" class="anchor" aria-hidden="true" href="#end-of-time-period"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;End of time period&lt;/h3&gt;
&lt;p&gt;There are also the related &lt;code&gt;end_X&lt;/code&gt; functions available, using the same
conventions, except return the last second of that time period.&lt;/p&gt;
&lt;p&gt;So &lt;code&gt;end_month("2016-01-05")&lt;/code&gt; will return the unix timestamp representing
"2016-01-31 11:59:59pm"&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-date-arithmetic" class="anchor" aria-hidden="true" href="#date-arithmetic"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Date Arithmetic&lt;/h2&gt;
&lt;p&gt;The current implementation of qdate's date arithmetic returns Unixtimes.&lt;/p&gt;
&lt;p&gt;There are 8 main functions for date arithmetic:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;add_seconds(Seconds, Date)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;add_minutes(Minutes, Date)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;add_hours(Hours, Date)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;add_days(Days, Date)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;add_weeks(Weeks, Date)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;add_months(Months, Date)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;add_years(Years, Date)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;add_date(DateToAdd, Date)&lt;/code&gt; - &lt;code&gt;DateToAdd&lt;/code&gt; is a shortcut way of adding
numerous options. For example. &lt;code&gt;qdate:add_date({{1, 2, -3}, {-500, 20, 0}})&lt;/code&gt;
will add 1 year, add 2 months, subtract 3 days, subtract 500 hours, add 20
minutes, and not make any changes to seconds.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For the date arithmetic functions, &lt;code&gt;Date&lt;/code&gt;, like all &lt;code&gt;qdate&lt;/code&gt; functions, can be any
format.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-date-arithmetic-from-now" class="anchor" aria-hidden="true" href="#date-arithmetic-from-now"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Date Arithmetic from "now"&lt;/h3&gt;
&lt;p&gt;There are 7 other arithmetic functions that take a single argument, and these do arithmetic from "now." For example, &lt;code&gt;add_years(4)&lt;/code&gt; is a shortcut for &lt;code&gt;add_years(4, os:timestamp())&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;add_seconds(Seconds)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;add_minutes(Minutes)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;add_hours(Hours)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;add_days(Days)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;add_weeks(Weeks)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;add_months(Months)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;add_years(Years)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-date-and-time-ranges" class="anchor" aria-hidden="true" href="#date-and-time-ranges"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Date and Time Ranges&lt;/h2&gt;
&lt;p&gt;qdate provides a number of &lt;code&gt;range&lt;/code&gt; functions that give applicable dates/times
within a start and end time. For example, "All days from 2015-01-01 to today",
"every 3rd month from 2000-01-01 to 2009-12-31", or "every 15 minutes from
midnight to 11:59pm on 2015-04-15".&lt;/p&gt;
&lt;p&gt;The functions are as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;range_seconds(Interval, Start, End)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;range_minutes(Interval, Start, End)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;range_hours(Interval, Start, End)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;range_days(Interval, Start, End)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;range_weeks(Interval, Start, End)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;range_months(Interval, Start, End)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;range_years(Interval, Start, End)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Where &lt;code&gt;Interval&lt;/code&gt; is the number of seconds/days/years/etc.&lt;/p&gt;
&lt;p&gt;So for example:&lt;/p&gt;
&lt;div class="highlight highlight-source-erlang"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;%&lt;/span&gt;% Get every 15th minute from "2015-04-15 12:00am to 2015-04-15 11:59am"&lt;/span&gt;
&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;qdate&lt;/span&gt;:&lt;span class="pl-en"&gt;range_minutes&lt;/span&gt;(&lt;span class="pl-c1"&gt;15&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;2015-04-15 12:00am&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;2015-04-15 11:59am&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;).
[&lt;span class="pl-c1"&gt;1429056000&lt;/span&gt;,&lt;span class="pl-c1"&gt;1429056900&lt;/span&gt;,&lt;span class="pl-c1"&gt;1429057800&lt;/span&gt;,&lt;span class="pl-c1"&gt;1429058700&lt;/span&gt;,&lt;span class="pl-c1"&gt;1429059600&lt;/span&gt;,
 &lt;span class="pl-c1"&gt;1429060500&lt;/span&gt;,&lt;span class="pl-c1"&gt;1429061400&lt;/span&gt;,&lt;span class="pl-c1"&gt;1429062300&lt;/span&gt;,&lt;span class="pl-c1"&gt;1429063200&lt;/span&gt;,&lt;span class="pl-c1"&gt;1429064100&lt;/span&gt;,
 &lt;span class="pl-c1"&gt;1429065000&lt;/span&gt;,&lt;span class="pl-c1"&gt;1429065900&lt;/span&gt;,&lt;span class="pl-c1"&gt;1429066800&lt;/span&gt;,&lt;span class="pl-c1"&gt;1429067700&lt;/span&gt;,&lt;span class="pl-c1"&gt;1429068600&lt;/span&gt;,
 &lt;span class="pl-c1"&gt;1429069500&lt;/span&gt;,&lt;span class="pl-c1"&gt;1429070400&lt;/span&gt;,&lt;span class="pl-c1"&gt;1429071300&lt;/span&gt;,&lt;span class="pl-c1"&gt;1429072200&lt;/span&gt;,&lt;span class="pl-c1"&gt;1429073100&lt;/span&gt;,
 &lt;span class="pl-c1"&gt;1429074000&lt;/span&gt;,&lt;span class="pl-c1"&gt;1429074900&lt;/span&gt;,&lt;span class="pl-c1"&gt;1429075800&lt;/span&gt;,&lt;span class="pl-c1"&gt;1429076700&lt;/span&gt;,&lt;span class="pl-c1"&gt;1429077600&lt;/span&gt;,
 &lt;span class="pl-c1"&gt;1429078500&lt;/span&gt;,&lt;span class="pl-c1"&gt;1429079400&lt;/span&gt;,&lt;span class="pl-c1"&gt;1429080300&lt;/span&gt;,&lt;span class="pl-c1"&gt;1429081200&lt;/span&gt;|...]

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;%&lt;/span&gt;% Get every day of April, 2014&lt;/span&gt;
&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;qdate&lt;/span&gt;:&lt;span class="pl-en"&gt;range_days&lt;/span&gt;(&lt;span class="pl-c1"&gt;1&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;2014-04-01&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;2014-04-30&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;).
[&lt;span class="pl-c1"&gt;1396310400&lt;/span&gt;,&lt;span class="pl-c1"&gt;1396396800&lt;/span&gt;,&lt;span class="pl-c1"&gt;1396483200&lt;/span&gt;,&lt;span class="pl-c1"&gt;1396569600&lt;/span&gt;,&lt;span class="pl-c1"&gt;1396656000&lt;/span&gt;,
 &lt;span class="pl-c1"&gt;1396742400&lt;/span&gt;,&lt;span class="pl-c1"&gt;1396828800&lt;/span&gt;,&lt;span class="pl-c1"&gt;1396915200&lt;/span&gt;,&lt;span class="pl-c1"&gt;1397001600&lt;/span&gt;,&lt;span class="pl-c1"&gt;1397088000&lt;/span&gt;,
 &lt;span class="pl-c1"&gt;1397174400&lt;/span&gt;,&lt;span class="pl-c1"&gt;1397260800&lt;/span&gt;,&lt;span class="pl-c1"&gt;1397347200&lt;/span&gt;,&lt;span class="pl-c1"&gt;1397433600&lt;/span&gt;,&lt;span class="pl-c1"&gt;1397520000&lt;/span&gt;,
 &lt;span class="pl-c1"&gt;1397606400&lt;/span&gt;,&lt;span class="pl-c1"&gt;1397692800&lt;/span&gt;,&lt;span class="pl-c1"&gt;1397779200&lt;/span&gt;,&lt;span class="pl-c1"&gt;1397865600&lt;/span&gt;,&lt;span class="pl-c1"&gt;1397952000&lt;/span&gt;,
 &lt;span class="pl-c1"&gt;1398038400&lt;/span&gt;,&lt;span class="pl-c1"&gt;1398124800&lt;/span&gt;,&lt;span class="pl-c1"&gt;1398211200&lt;/span&gt;,&lt;span class="pl-c1"&gt;1398297600&lt;/span&gt;,&lt;span class="pl-c1"&gt;1398384000&lt;/span&gt;,
 &lt;span class="pl-c1"&gt;1398470400&lt;/span&gt;,&lt;span class="pl-c1"&gt;1398556800&lt;/span&gt;,&lt;span class="pl-c1"&gt;1398643200&lt;/span&gt;,&lt;span class="pl-c1"&gt;1398729600&lt;/span&gt;|...]&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note, that the return value (just like qdate's arithmetic functions) is a list
of integers. These integers are unix timestamps and can be easily formatted
with qdate:&lt;/p&gt;
&lt;div class="highlight highlight-source-erlang"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-smi"&gt;Mins&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;qdate&lt;/span&gt;:&lt;span class="pl-en"&gt;range_minutes&lt;/span&gt;(&lt;span class="pl-c1"&gt;15&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;2015-04-15 12:00am&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;2015-04-15 11:59am&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;),
&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; [&lt;span class="pl-en"&gt;qdate&lt;/span&gt;:&lt;span class="pl-en"&gt;to_string&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Y-m-d h:ia&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-smi"&gt;M&lt;/span&gt;) || &lt;span class="pl-smi"&gt;M&lt;/span&gt; &lt;span class="pl-k"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="pl-smi"&gt;Mins&lt;/span&gt;].
[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;2015-04-15 00:00am&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;2015-04-15 00:15am&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
 &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;2015-04-15 00:30am&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;2015-04-15 00:45am&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
 &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;2015-04-15 01:00am&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;2015-04-15 01:15am&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
 &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;2015-04-15 01:30am&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;2015-04-15 01:45am&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
 &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;2015-04-15 02:00am&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;2015-04-15 02:15am&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
 &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;2015-04-15 02:30am&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;2015-04-15 02:45am&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
 &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;2015-04-15 03:00am&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;2015-04-15 03:15am&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
 &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;2015-04-15 03:30am&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;2015-04-15 03:45am&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
 &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;2015-04-15 04:00am&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;2015-04-15 04:15am&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
 &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;2015-04-15 04:30am&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;2015-04-15 04:45am&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
 &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;2015-04-15 05:00am&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;2015-04-15 05:15am&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
 &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;2015-04-15 05:30am&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;2015-04-15 05:45am&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
 &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;2015-04-15 06:00am&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;2015-04-15 06:15am&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
 &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;2015-04-15 06:30am&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;2015-04-15 06:45am&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
 [...]|...]&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Also note that the range functions are &lt;em&gt;inclusive&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-configuration-sample" class="anchor" aria-hidden="true" href="#configuration-sample"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Configuration Sample&lt;/h2&gt;
&lt;p&gt;There is a sample configuration file can be found in the root of the qdate
directory. Or you can just &lt;a href="https://github.com/choptastic/qdate/blob/master/qdate.config"&gt;look at it
here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-thanks" class="anchor" aria-hidden="true" href="#thanks"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Thanks&lt;/h2&gt;
&lt;p&gt;A few shoutouts to &lt;a href="http://github.com/daleharvey"&gt;Dale Harvey&lt;/a&gt; and the
&lt;a href="https://github.com/erlware"&gt;Erlware team&lt;/a&gt; for &lt;code&gt;dh_date&lt;/code&gt;/&lt;code&gt;ec_date&lt;/code&gt;, and to
&lt;a href="https://github.com/dmitryme"&gt;Dmitry Melnikov&lt;/a&gt; for the &lt;code&gt;erlang_localtime&lt;/code&gt;
package. Without the hard work of all involved in those projects, &lt;code&gt;qdate&lt;/code&gt; would
not exist.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-thanks-to-additional-contributors" class="anchor" aria-hidden="true" href="#thanks-to-additional-contributors"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Thanks to Additional Contributors&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/mrallen1"&gt;Mark Allen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/lostcolony"&gt;Christopher Phillips&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/nlundgaard-al"&gt;Nicholas Lundgaard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/aramallo"&gt;Alejandro Ramallo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Licenser"&gt;Heinz Gies&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-changelog" class="anchor" aria-hidden="true" href="#changelog"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Changelog&lt;/h2&gt;
&lt;p&gt;See &lt;a href="https://github.com/choptastic/qdate/blob/master/CHANGELOG.markdown"&gt;CHANGELOG.markdown&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-todo" class="anchor" aria-hidden="true" href="#todo"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TODO&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Make &lt;code&gt;qdate&lt;/code&gt; backend-agnostic (allow specifying either ec_date or dh_date as
the backend)&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;-spec&lt;/code&gt; and &lt;code&gt;-type&lt;/code&gt; info for dialyzer&lt;/li&gt;
&lt;li&gt;Research the viability of &lt;a href="https://github.com/drfloob/ezic"&gt;ezic&lt;/a&gt; for a
timezone backend replacement for &lt;code&gt;erlang_localtime&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Add age calculation stuff: &lt;code&gt;age_years(Date)&lt;/code&gt;, &lt;code&gt;age_minutes(Date)&lt;/code&gt;, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-conclusion" class="anchor" aria-hidden="true" href="#conclusion"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I hope you find &lt;code&gt;qdate&lt;/code&gt; helpful in all your endeavors and it helps make your
wildest dreams come true!&lt;/p&gt;
&lt;p&gt;If you have any bugs, feature requests, or whatnot, feel free to post a Github
issue, ping me on Twitter, or email me below.&lt;/p&gt;
&lt;p&gt;I'm open to pull requests. Feel free to get your hands dirty!&lt;/p&gt;
&lt;p&gt;Author: &lt;a href="http://sigma-star.com/page/jesse" rel="nofollow"&gt;Jesse Gumm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Email: &lt;a href="mailto:gumm@sigma-star.com"&gt;gumm@sigma-star.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Twitter: &lt;a href="http://twitter.com/jessegumm" rel="nofollow"&gt;@jessegumm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Released under the MIT License (see LICENSE file)&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>choptastic</author><guid isPermaLink="false">https://github.com/choptastic/qdate</guid><pubDate>Tue, 19 Nov 2019 00:02:00 GMT</pubDate></item><item><title>erlsci/iso8601 #3 in Erlang, Today</title><link>https://github.com/erlsci/iso8601</link><description>&lt;p&gt;&lt;i&gt;An ISO 8601 date formating and parsing library for Erlang&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-iso8601" class="anchor" aria-hidden="true" href="#iso8601"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;iso8601&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://travis-ci.org/erlsci/iso8601" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/f77326183c349f97842c9112c9d5bc4a79f84373/68747470733a2f2f7472617669732d63692e6f72672f65726c7363692f69736f383630312e706e673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/erlsci/iso8601.png?branch=master" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://github.com/erlsci/iso8601/releases/latest"&gt;&lt;img src="https://camo.githubusercontent.com/20d99924369a36f16ba007043d059c7c2107554b/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f7461672f65726c7363692f69736f383630312e737667" alt="Tag" data-canonical-src="https://img.shields.io/github/tag/erlsci/iso8601.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="http://www.erlang.org/downloads" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/cd1cc572feb30189df61f6f90c073c53d74d88cd/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f65726c616e672d2545322538392541355231354230332d626c75652e737667" alt="Erlang Version" data-canonical-src="https://img.shields.io/badge/erlang-%E2%89%A5R15B03-blue.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://hex.pm/packages/iso8601" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/c5e4b6d40a5e26b29725350ac84c1cc4fe1551ef/68747470733a2f2f696d672e736869656c64732e696f2f686578706d2f64742f69736f383630312e737667" alt="Downloads" data-canonical-src="https://img.shields.io/hexpm/dt/iso8601.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;An ISO 8601 date formating and parsing library for Erlang&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="resources/images/logo-large.png"&gt;&lt;img src="resources/images/logo.png" alt="iso8601 project logo" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-contents" class="anchor" aria-hidden="true" href="#contents"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contents&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#about-"&gt;About&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#usage-"&gt;Usage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#known-deficiencies-"&gt;Known Deficiencies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#license-"&gt;License&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-about-" class="anchor" aria-hidden="true" href="#about-"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;About &lt;a href="#contents"&gt;↟&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;erlang_iso8601&lt;/code&gt; library was originally created by Sean Sawyer in 2011. In 2016, Sean handed off maintenance of the library to the &lt;a href="https://github.com/erlsci"&gt;erlsci&lt;/a&gt; Github org at which point the project (and repo) was renamed to simply &lt;code&gt;iso8601&lt;/code&gt;, matching its Erlang app name:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git clone https://github.com/erlsci/iso8601.git&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thanks to Github's forwarding for project renames and moves, the following still work:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git clone https://github.com/seansawyer/erlang_iso8601.git&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git clone https://github.com/erlsci/erlang_iso8601.git&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-usage-" class="anchor" aria-hidden="true" href="#usage-"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Usage &lt;a href="#contents"&gt;↟&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Add it to your &lt;code&gt;rebar.config&lt;/code&gt; deps:&lt;/p&gt;
&lt;div class="highlight highlight-source-erlang"&gt;&lt;pre&gt;{&lt;span class="pl-c1"&gt;iso8601&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;.*&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, {&lt;span class="pl-c1"&gt;git&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;https://github.com/erlsci/iso8601.git&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, {&lt;span class="pl-c1"&gt;tag&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;1.3.1&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}}}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or for &lt;code&gt;rebar3&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-erlang"&gt;&lt;pre&gt;{&lt;span class="pl-c1"&gt;iso8601&lt;/span&gt;, {&lt;span class="pl-c1"&gt;git&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;https://github.com/erlsci/iso8601.git&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, {&lt;span class="pl-c1"&gt;tag&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;1.3.1&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}}}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Format a timestamp or calendar datetime tuple:&lt;/p&gt;
&lt;div class="highlight highlight-source-erlang"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;1&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;iso8601&lt;/span&gt;:&lt;span class="pl-en"&gt;format&lt;/span&gt;(&lt;span class="pl-en"&gt;now&lt;/span&gt;()).
&amp;lt;&amp;lt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;2012-02-16T01:06:19Z&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&amp;gt;&amp;gt;
&lt;span class="pl-c1"&gt;2&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;iso8601&lt;/span&gt;:&lt;span class="pl-en"&gt;format&lt;/span&gt;(&lt;span class="pl-en"&gt;calendar&lt;/span&gt;:&lt;span class="pl-en"&gt;universal_time&lt;/span&gt;()).
&amp;lt;&amp;lt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;2012-02-16T01:06:48Z&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Parse a date string or binary:&lt;/p&gt;
&lt;div class="highlight highlight-source-erlang"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;3&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;iso8601&lt;/span&gt;:&lt;span class="pl-en"&gt;parse&lt;/span&gt;(&amp;lt;&amp;lt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;2012-02-16T01:06:48Z&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&amp;gt;&amp;gt;).
{{&lt;span class="pl-c1"&gt;2012&lt;/span&gt;,&lt;span class="pl-c1"&gt;2&lt;/span&gt;,&lt;span class="pl-c1"&gt;16&lt;/span&gt;},{&lt;span class="pl-c1"&gt;1&lt;/span&gt;,&lt;span class="pl-c1"&gt;6&lt;/span&gt;,&lt;span class="pl-c1"&gt;48&lt;/span&gt;}}
&lt;span class="pl-c1"&gt;4&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;iso8601&lt;/span&gt;:&lt;span class="pl-en"&gt;parse&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;2012-02-16T01:06:48Z&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;).
{{&lt;span class="pl-c1"&gt;2012&lt;/span&gt;,&lt;span class="pl-c1"&gt;2&lt;/span&gt;,&lt;span class="pl-c1"&gt;16&lt;/span&gt;},{&lt;span class="pl-c1"&gt;1&lt;/span&gt;,&lt;span class="pl-c1"&gt;6&lt;/span&gt;,&lt;span class="pl-c1"&gt;48&lt;/span&gt;}}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Add 1 hour, 2 minutes and 3 seconds to a datetime tuple:&lt;/p&gt;
&lt;div class="highlight highlight-source-erlang"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;5&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-smi"&gt;Datetime&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;iso8601&lt;/span&gt;:&lt;span class="pl-en"&gt;parse&lt;/span&gt;(&amp;lt;&amp;lt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;2012-02-16T01:06:48Z&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&amp;gt;&amp;gt;).
{{&lt;span class="pl-c1"&gt;2012&lt;/span&gt;,&lt;span class="pl-c1"&gt;2&lt;/span&gt;,&lt;span class="pl-c1"&gt;16&lt;/span&gt;},{&lt;span class="pl-c1"&gt;1&lt;/span&gt;,&lt;span class="pl-c1"&gt;6&lt;/span&gt;,&lt;span class="pl-c1"&gt;48&lt;/span&gt;}}
&lt;span class="pl-c1"&gt;6&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;iso8601&lt;/span&gt;:&lt;span class="pl-en"&gt;add_time&lt;/span&gt;(&lt;span class="pl-smi"&gt;Datetime&lt;/span&gt;, &lt;span class="pl-c1"&gt;1&lt;/span&gt;, &lt;span class="pl-c1"&gt;2&lt;/span&gt;, &lt;span class="pl-c1"&gt;3&lt;/span&gt;).
{{&lt;span class="pl-c1"&gt;2012&lt;/span&gt;,&lt;span class="pl-c1"&gt;2&lt;/span&gt;,&lt;span class="pl-c1"&gt;16&lt;/span&gt;},{&lt;span class="pl-c1"&gt;2&lt;/span&gt;,&lt;span class="pl-c1"&gt;8&lt;/span&gt;,&lt;span class="pl-c1"&gt;51&lt;/span&gt;}}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Subtract 1 hour, 2 minutes and 3 seconds from a datetime tuple:&lt;/p&gt;
&lt;div class="highlight highlight-source-erlang"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;5&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-smi"&gt;Datetime&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;iso8601&lt;/span&gt;:&lt;span class="pl-en"&gt;parse&lt;/span&gt;(&amp;lt;&amp;lt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;2012-02-16T01:06:48Z&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&amp;gt;&amp;gt;).
{{&lt;span class="pl-c1"&gt;2012&lt;/span&gt;,&lt;span class="pl-c1"&gt;2&lt;/span&gt;,&lt;span class="pl-c1"&gt;16&lt;/span&gt;},{&lt;span class="pl-c1"&gt;1&lt;/span&gt;,&lt;span class="pl-c1"&gt;6&lt;/span&gt;,&lt;span class="pl-c1"&gt;48&lt;/span&gt;}}
&lt;span class="pl-c1"&gt;6&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;iso8601&lt;/span&gt;:&lt;span class="pl-en"&gt;subtract_time&lt;/span&gt;(&lt;span class="pl-smi"&gt;Datetime&lt;/span&gt;, &lt;span class="pl-c1"&gt;1&lt;/span&gt;, &lt;span class="pl-c1"&gt;2&lt;/span&gt;, &lt;span class="pl-c1"&gt;3&lt;/span&gt;).
{{&lt;span class="pl-c1"&gt;2012&lt;/span&gt;,&lt;span class="pl-c1"&gt;2&lt;/span&gt;,&lt;span class="pl-c1"&gt;16&lt;/span&gt;},{&lt;span class="pl-c1"&gt;0&lt;/span&gt;,&lt;span class="pl-c1"&gt;4&lt;/span&gt;,&lt;span class="pl-c1"&gt;45&lt;/span&gt;}}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Fractional times:&lt;/p&gt;
&lt;div class="highlight highlight-source-erlang"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;7&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;iso8601&lt;/span&gt;:&lt;span class="pl-en"&gt;parse&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;20120203T040506.50&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;).
{{&lt;span class="pl-c1"&gt;2012&lt;/span&gt;,&lt;span class="pl-c1"&gt;2&lt;/span&gt;,&lt;span class="pl-c1"&gt;3&lt;/span&gt;},{&lt;span class="pl-c1"&gt;4&lt;/span&gt;,&lt;span class="pl-c1"&gt;5&lt;/span&gt;,&lt;span class="pl-c1"&gt;7&lt;/span&gt;}}
&lt;span class="pl-c1"&gt;8&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;iso8601&lt;/span&gt;:&lt;span class="pl-en"&gt;parse_exact&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;20120203T040506.50&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;).
{{&lt;span class="pl-c1"&gt;2012&lt;/span&gt;,&lt;span class="pl-c1"&gt;2&lt;/span&gt;,&lt;span class="pl-c1"&gt;3&lt;/span&gt;},{&lt;span class="pl-c1"&gt;4&lt;/span&gt;,&lt;span class="pl-c1"&gt;5&lt;/span&gt;,&lt;span class="pl-c1"&gt;6.50&lt;/span&gt;}}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Parse durations:&lt;/p&gt;
&lt;div class="highlight highlight-source-erlang"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;9&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;iso8601&lt;/span&gt;:&lt;span class="pl-en"&gt;parse_duration&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;+P6Y3M1DT1H1M1.1S&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;).
[{&lt;span class="pl-c1"&gt;sign&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;+&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}, {&lt;span class="pl-c1"&gt;years&lt;/span&gt;, &lt;span class="pl-c1"&gt;6&lt;/span&gt;}, {&lt;span class="pl-c1"&gt;months&lt;/span&gt;, &lt;span class="pl-c1"&gt;3&lt;/span&gt;}, {&lt;span class="pl-c1"&gt;days&lt;/span&gt;, &lt;span class="pl-c1"&gt;1&lt;/span&gt;}, {&lt;span class="pl-c1"&gt;hours&lt;/span&gt;, &lt;span class="pl-c1"&gt;1&lt;/span&gt;}, {&lt;span class="pl-c1"&gt;minutes&lt;/span&gt;, &lt;span class="pl-c1"&gt;1&lt;/span&gt;}, {&lt;span class="pl-c1"&gt;seconds&lt;/span&gt;, &lt;span class="pl-c1"&gt;1&lt;/span&gt;}]
&lt;span class="pl-c1"&gt;10&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;iso8601&lt;/span&gt;:&lt;span class="pl-en"&gt;parse_duration&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;PT6M&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;).
[{&lt;span class="pl-c1"&gt;sign&lt;/span&gt;, []}, {&lt;span class="pl-c1"&gt;years&lt;/span&gt;, &lt;span class="pl-c1"&gt;0&lt;/span&gt;}, {&lt;span class="pl-c1"&gt;months&lt;/span&gt;, &lt;span class="pl-c1"&gt;0&lt;/span&gt;}, {&lt;span class="pl-c1"&gt;days&lt;/span&gt;, &lt;span class="pl-c1"&gt;0&lt;/span&gt;},{&lt;span class="pl-c1"&gt;hours&lt;/span&gt;, &lt;span class="pl-c1"&gt;0&lt;/span&gt;}, {&lt;span class="pl-c1"&gt;minutes&lt;/span&gt;, &lt;span class="pl-c1"&gt;6&lt;/span&gt;}, {&lt;span class="pl-c1"&gt;seconds&lt;/span&gt;, &lt;span class="pl-c1"&gt;0&lt;/span&gt;}]&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-known-deficiencies-" class="anchor" aria-hidden="true" href="#known-deficiencies-"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Known Deficiencies &lt;a href="#contents"&gt;↟&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Does not support expanded year representation.&lt;/li&gt;
&lt;li&gt;Does not support intervals.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;See the &lt;a href="https://github.com/erlsci/iso8601/issues"&gt;open issues&lt;/a&gt;
for more info.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-donating" class="anchor" aria-hidden="true" href="#donating"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Donating&lt;/h2&gt;
&lt;p&gt;A donation account for supporting development on this project has been set up
on Liberapay here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://liberapay.com/erlsci-iso8601/donate" rel="nofollow"&gt;https://liberapay.com/erlsci-iso8601/donate&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can learn more about Liberapay on its &lt;a href="https://en.wikipedia.org/wiki/Liberapay" rel="nofollow"&gt;Wikipedia entry&lt;/a&gt; or on the
service's &lt;a href="https://liberapay.com/about/" rel="nofollow"&gt;"About" page&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-license-" class="anchor" aria-hidden="true" href="#license-"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;License &lt;a href="#contents"&gt;↟&lt;/a&gt;&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;The MIT License (MIT)

Copyright © 2011-2014, Sean Sawyer
Copyright © 2012, Tristan Sloughter
Copyright © 2016-2017, Erlang-Aided Enrichment Center
&lt;/code&gt;&lt;/pre&gt;

&lt;/article&gt;&lt;/div&gt;</description><author>erlsci</author><guid isPermaLink="false">https://github.com/erlsci/iso8601</guid><pubDate>Tue, 19 Nov 2019 00:03:00 GMT</pubDate></item><item><title>seth/ej #4 in Erlang, Today</title><link>https://github.com/seth/ej</link><description>&lt;p&gt;&lt;i&gt;Helper module for working with Erlang terms representing JSON&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body org" data-path="README.org"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-ej-helps-you-work-with-erlang-terms-representing-json" class="anchor" aria-hidden="true" href="#ej-helps-you-work-with-erlang-terms-representing-json"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;ej helps you work with Erlang terms representing JSON&lt;/h1&gt;
&lt;p&gt;The ej module makes it easier to work with Erlang terms representing
  &lt;a href="http://json.org" rel="nofollow"&gt;JSON&lt;/a&gt; in the format returned by &lt;a href="https://github.com/davisp/jiffy"&gt;jiffy&lt;/a&gt;, &lt;a href="https://github.com/mochi/mochiweb"&gt;mochijson2&lt;/a&gt;, or &lt;a href="https://github.com/benoitc/ejson"&gt;ejson&lt;/a&gt;.  You can use
  &lt;code&gt;ej:get/2&lt;/code&gt; to walk an object and return a particular value, &lt;code&gt;ej:set/3&lt;/code&gt;
  to update a value within an object, or &lt;code&gt;ej:delete/2&lt;/code&gt; to remove a value
  from an object.&lt;/p&gt;
&lt;p&gt;In ej, paths into JSON objects are expressed using a tuple of keys
  like so:&lt;/p&gt;
&lt;table&gt;
  &lt;tbody&gt;&lt;tr&gt;&lt;td&gt;Javascript&lt;/td&gt;&lt;td&gt;ej&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;Obj.author.name.first&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;ej:get({"author", "name", "first"}, Obj)&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;To get started using ej, see &lt;a href="ej by example"&gt;ej by example&lt;/a&gt; below.&lt;/p&gt;
&lt;p&gt;ej also provides a means of validating a JSON object according to a
  specification you provide. This feature is useful if you need to
  process JSON request bodies. As a brief example, here’s a
  specification for a JSON object describing a person and their favorite
  foods:&lt;/p&gt;
&lt;div class="highlight highlight-source-erlang"&gt;&lt;pre&gt;{[
  {&amp;lt;&amp;lt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;name&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&amp;gt;&amp;gt;, {&lt;span class="pl-c1"&gt;string_match&lt;/span&gt;, &lt;span class="pl-en"&gt;regex_for&lt;/span&gt;(&lt;span class="pl-c1"&gt;name&lt;/span&gt;)}},
  {{&lt;span class="pl-c1"&gt;opt&lt;/span&gt;, &amp;lt;&amp;lt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;nick_name&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&amp;gt;&amp;gt;}, {&lt;span class="pl-c1"&gt;string_match&lt;/span&gt;, &lt;span class="pl-en"&gt;regex_for&lt;/span&gt;(&lt;span class="pl-c1"&gt;name&lt;/span&gt;)}},
  {&amp;lt;&amp;lt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;foods&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&amp;gt;&amp;gt;, {&lt;span class="pl-c1"&gt;array_map&lt;/span&gt;, &lt;span class="pl-c1"&gt;string&lt;/span&gt;}}
 ]}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ej is independent of the library used for JSON serialization and
  has no dependencies.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-ej-by-example" class="anchor" aria-hidden="true" href="#ej-by-example"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;ej by example&lt;/h2&gt;
&lt;p&gt;ej is best explained by example.  Consider the following JSON data
  (borrowed from &lt;a href="http://www.json.org/example.html" rel="nofollow"&gt;http://www.json.org/example.html&lt;/a&gt;):&lt;/p&gt;
&lt;div class="highlight highlight-source-js"&gt;&lt;pre&gt;{&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;menu&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; {
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;id&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;file&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;value&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;File&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;popup&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; {
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;menuitem&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; [
      {&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;value&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;New&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;onclick&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;CreateNewDoc()&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;},
      {&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;value&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Open&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;onclick&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;OpenDoc()&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;},
      {&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;value&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Close&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;onclick&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;CloseDoc()&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}
    ]
  }
}}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;mochijson2:decode/1&lt;/code&gt; translates the JSON into Erlang terms like this:&lt;/p&gt;
&lt;div class="highlight highlight-source-erlang"&gt;&lt;pre&gt;{&lt;span class="pl-c1"&gt;struct&lt;/span&gt;,
 [{&amp;lt;&amp;lt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;menu&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&amp;gt;&amp;gt;,
   {&lt;span class="pl-c1"&gt;struct&lt;/span&gt;,
    [{&amp;lt;&amp;lt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;id&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&amp;gt;&amp;gt;,&amp;lt;&amp;lt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;file&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&amp;gt;&amp;gt;},
     {&amp;lt;&amp;lt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;value&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&amp;gt;&amp;gt;,&amp;lt;&amp;lt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;File&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&amp;gt;&amp;gt;},
     {&amp;lt;&amp;lt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;popup&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&amp;gt;&amp;gt;,
      {&lt;span class="pl-c1"&gt;struct&lt;/span&gt;,
       [{&amp;lt;&amp;lt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;menuitem&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&amp;gt;&amp;gt;,
         [{&lt;span class="pl-c1"&gt;struct&lt;/span&gt;,[{&amp;lt;&amp;lt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;value&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&amp;gt;&amp;gt;,&amp;lt;&amp;lt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;New&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&amp;gt;&amp;gt;},
                   {&amp;lt;&amp;lt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;onclick&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&amp;gt;&amp;gt;,&amp;lt;&amp;lt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;CreateNewDoc()&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&amp;gt;&amp;gt;}]},
          {&lt;span class="pl-c1"&gt;struct&lt;/span&gt;,[{&amp;lt;&amp;lt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;value&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&amp;gt;&amp;gt;,&amp;lt;&amp;lt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Open&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&amp;gt;&amp;gt;},
                   {&amp;lt;&amp;lt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;onclick&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&amp;gt;&amp;gt;,&amp;lt;&amp;lt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;OpenDoc()&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&amp;gt;&amp;gt;}]},
          {&lt;span class="pl-c1"&gt;struct&lt;/span&gt;,[{&amp;lt;&amp;lt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;value&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&amp;gt;&amp;gt;,&amp;lt;&amp;lt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Close&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&amp;gt;&amp;gt;},
                   {&amp;lt;&amp;lt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;onclick&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&amp;gt;&amp;gt;,&amp;lt;&amp;lt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;CloseDoc()&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&amp;gt;&amp;gt;}]}]}]}}]}}]}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And here’s ej in action:&lt;/p&gt;
&lt;pre lang="txt"&gt;% specify the path you want to access as a tuple of keys (you can use
% strings or binaries)
4&amp;gt; ej:get({"menu", "value"}, Obj).
&amp;lt;&amp;lt;"File"&amp;gt;&amp;gt;

% you can access list elements by index
&amp;gt; ej:get({"menu", "popup", "menuitem", 2, "onclick"}, Obj).
&amp;lt;&amp;lt;"OpenDoc()"&amp;gt;&amp;gt;

% The atoms 'first' and 'last' can be used for lists as well
&amp;gt; ej:get({"menu", "popup", "menuitem", first, "value"}, Obj).  
&amp;lt;&amp;lt;"New"&amp;gt;&amp;gt;

% you can filter a list of objects by specifying a property (key/value
% pair) to match on:
ej:get({"menu", "popup", "menuitem", {select, {"value", "New"}}}, Obj).

% set a value
Obj2 = ej:set({"menu", "id"}, Obj, &amp;lt;&amp;lt;"abc123"&amp;gt;&amp;gt;).

% add a value
Obj3 = ej:set({"menu", "new_key"}, Obj, &amp;lt;&amp;lt;"something"&amp;gt;&amp;gt;).

% add a value to a list
NewItem = {struct,[{&amp;lt;&amp;lt;"value"&amp;gt;&amp;gt;,&amp;lt;&amp;lt;"Save"&amp;gt;&amp;gt;}, {&amp;lt;&amp;lt;"onclick"&amp;gt;&amp;gt;,&amp;lt;&amp;lt;"SaveDoc()"&amp;gt;&amp;gt;}]}.
Obj4 = ej:set({"menu", "popup", "menuitem", new}, Obj, NewItem).

&lt;/pre&gt;
&lt;p&gt;The idea for this helper module was inspired by &lt;a href="http://groups.google.com/group/erlang-programming/browse_thread/thread/7af6f99e740df979/97c50c0df25502cd?lnk=gst&amp;amp;q=Javascript+parse+transform#97c50c0df25502cd" rel="nofollow"&gt;this thread on the
  Erlang Questions&lt;/a&gt; mailing list and, in particular, by the reply from
  Richard O’Keefe.  Additional motivation from the very similar helper
  module &lt;code&gt;struct&lt;/code&gt; included in the &lt;a href="http://beebole.com/en/blog/erlang/tutorial-web-application-erlang/" rel="nofollow"&gt;sticky notes example application&lt;/a&gt; from
  the folks at BeeBole.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-thanks" class="anchor" aria-hidden="true" href="#thanks"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;THANKS&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Christopher Brown&lt;/li&gt;
  &lt;li&gt;Christopher Maier&lt;/li&gt;
  &lt;li&gt;John Keiser&lt;/li&gt;
  &lt;li&gt;Sebastian Probst Eide&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-build-status" class="anchor" aria-hidden="true" href="#build-status"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Build status&lt;/h2&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/b387a07fc2c86f213fb522c226fbd22ec5b3a9d2/68747470733a2f2f7472617669732d63692e6f72672f736574682f656a2e706e67"&gt;&lt;img src="https://camo.githubusercontent.com/b387a07fc2c86f213fb522c226fbd22ec5b3a9d2/68747470733a2f2f7472617669732d63692e6f72672f736574682f656a2e706e67" alt="https://travis-ci.org/seth/ej.png" data-canonical-src="https://travis-ci.org/seth/ej.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-license" class="anchor" aria-hidden="true" href="#license"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;License&lt;/h2&gt;
&lt;p&gt;ej is available under the Apache License, Version 2.0.&lt;/p&gt;
&lt;pre&gt;Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
&lt;/pre&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>seth</author><guid isPermaLink="false">https://github.com/seth/ej</guid><pubDate>Tue, 19 Nov 2019 00:04:00 GMT</pubDate></item><item><title>titan098/erl-base58 #5 in Erlang, Today</title><link>https://github.com/titan098/erl-base58</link><description>&lt;p&gt;&lt;i&gt;A simple Erlang Base58 encoder and decoder&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-erl-base58" class="anchor" aria-hidden="true" href="#erl-base58"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Erl-Base58&lt;/h1&gt;
&lt;p&gt;Version: 0.1.0&lt;/p&gt;
&lt;p&gt;This is a simple implementation of a Base58 encoder and decoder for Integers and Binaries. Base58 is most prevalent in the &lt;a href="http://bitcoin.org" rel="nofollow"&gt;Bitcoin&lt;/a&gt; virtual currency system. The Base58 representation makes use of a representation that is mostly free from ambiguous characters, this makes is easier for a human to verify that the Base58 string is correct.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Usage&lt;/h2&gt;
&lt;p&gt;The following example demonstrates the usage of this module:&lt;/p&gt;
&lt;div class="highlight highlight-source-erlang"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;1&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;base58&lt;/span&gt;:&lt;span class="pl-en"&gt;integer_to_base58&lt;/span&gt;(&lt;span class="pl-c1"&gt;16#00010966776006953D5567439E5E39F86A0D273BEED61967F6&lt;/span&gt;).
&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;16UwLL9Risc3QfPqBUvKofHmBQ7wMtjvM&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-c1"&gt;2&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;base58&lt;/span&gt;:&lt;span class="pl-en"&gt;base58_to_integer&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;16UwLL9Risc3QfPqBUvKofHmBQ7wMtjvM&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;).
&lt;span class="pl-c1"&gt;25420294593250030202636073700053352635053786165627414518&lt;/span&gt;
&lt;span class="pl-c1"&gt;3&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;base58&lt;/span&gt;:&lt;span class="pl-en"&gt;base58_to_integer&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;16UwLL9Risc3QfPqBUvKofHmBQ7wMtjvM&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-k"&gt;==&lt;/span&gt; &lt;span class="pl-c1"&gt;16#00010966776006953D5567439E5E39F86A0D273BEED61967F6&lt;/span&gt;.
&lt;span class="pl-c1"&gt;true&lt;/span&gt;
&lt;span class="pl-c1"&gt;4&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;base58&lt;/span&gt;:&lt;span class="pl-en"&gt;binary_to_base58&lt;/span&gt;(&lt;span class="pl-en"&gt;binary&lt;/span&gt;:&lt;span class="pl-en"&gt;encode_unsigned&lt;/span&gt;(&lt;span class="pl-c1"&gt;16#00010966776006953D5567439E5E39F86A0D273BEED61967F6&lt;/span&gt;)).
&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;16UwLL9Risc3QfPqBUvKofHmBQ7wMtjvM&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-c1"&gt;5&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;base58&lt;/span&gt;:&lt;span class="pl-en"&gt;base58_to_binary&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;6UwLL9Risc3QfPqBUvKofHmBQ7wMtjvM&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;).
&amp;lt;&amp;lt;&lt;span class="pl-c1"&gt;0&lt;/span&gt;, &lt;span class="pl-c1"&gt;1&lt;/span&gt;,&lt;span class="pl-c1"&gt;9&lt;/span&gt;,&lt;span class="pl-c1"&gt;102&lt;/span&gt;,&lt;span class="pl-c1"&gt;119&lt;/span&gt;,&lt;span class="pl-c1"&gt;96&lt;/span&gt;,&lt;span class="pl-c1"&gt;6&lt;/span&gt;,&lt;span class="pl-c1"&gt;149&lt;/span&gt;,&lt;span class="pl-c1"&gt;61&lt;/span&gt;,&lt;span class="pl-c1"&gt;85&lt;/span&gt;,&lt;span class="pl-c1"&gt;103&lt;/span&gt;,&lt;span class="pl-c1"&gt;67&lt;/span&gt;,&lt;span class="pl-c1"&gt;158&lt;/span&gt;,&lt;span class="pl-c1"&gt;94&lt;/span&gt;,&lt;span class="pl-c1"&gt;57&lt;/span&gt;,&lt;span class="pl-c1"&gt;248&lt;/span&gt;,&lt;span class="pl-c1"&gt;106&lt;/span&gt;,&lt;span class="pl-c1"&gt;13&lt;/span&gt;,
  &lt;span class="pl-c1"&gt;39&lt;/span&gt;,&lt;span class="pl-c1"&gt;59&lt;/span&gt;,&lt;span class="pl-c1"&gt;238&lt;/span&gt;,&lt;span class="pl-c1"&gt;214&lt;/span&gt;,&lt;span class="pl-c1"&gt;25&lt;/span&gt;,&lt;span class="pl-c1"&gt;103&lt;/span&gt;,&lt;span class="pl-c1"&gt;246&lt;/span&gt;&amp;gt;&amp;gt;
&lt;span class="pl-c1"&gt;6&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;base58&lt;/span&gt;:&lt;span class="pl-en"&gt;check_base58&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;16UwLL9Risc3QfPqBUvKofHmBQ7wMtjvM&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;). 
&lt;span class="pl-c1"&gt;true&lt;/span&gt;
&lt;span class="pl-c1"&gt;7&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;base58&lt;/span&gt;:&lt;span class="pl-en"&gt;check_base58&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;16UwLL9Risc3QfPqBUvKofHmBQ7wMtjv0&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;).
&lt;span class="pl-c1"&gt;false&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-functions" class="anchor" aria-hidden="true" href="#functions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Functions&lt;/h2&gt;
&lt;p&gt;The following functions have been exposed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;base58:check_base58/1&lt;/code&gt; will check to see if a Base58 string is valid.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;base58:integer_to_base58/1&lt;/code&gt; will convert and unsigned integer into a Base58 string.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;base58:binary_to_base58/1&lt;/code&gt; will convert a binary to a Base58 string.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;base58:base58_to_integer/1&lt;/code&gt; will convert a Base58 string to an integer.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;base58:base58_to_binary/1&lt;/code&gt; will convert a Base58 string to a binary.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-license" class="anchor" aria-hidden="true" href="#license"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;License&lt;/h2&gt;
&lt;p&gt;This application is licensed under an &lt;a href="http://www.apache.org/licenses/LICENSE-2.0.html" rel="nofollow"&gt;Apache 2.0 License&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Copyright 2013 David Ellefsen 

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
&lt;/code&gt;&lt;/pre&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>titan098</author><guid isPermaLink="false">https://github.com/titan098/erl-base58</guid><pubDate>Tue, 19 Nov 2019 00:05:00 GMT</pubDate></item></channel></rss>