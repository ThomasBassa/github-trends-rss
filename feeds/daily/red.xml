<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>GitHub Trending: Red, Today</title><link>https://github.com/trending/red?since=daily</link><description>The top repositories on GitHub for red, measured daily</description><pubDate>Mon, 04 Nov 2019 01:05:07 GMT</pubDate><lastBuildDate>Mon, 04 Nov 2019 01:05:07 GMT</lastBuildDate><generator>PyRSS2Gen-1.1.0</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><ttl>720</ttl><item><title>red/red #1 in Red, Today</title><link>https://github.com/red/red</link><description>&lt;p&gt;&lt;i&gt;Red is a next-generation programming language strongly inspired by Rebol, but with a broader field of usage thanks to its native-code compiler, from system programming to high-level scripting and cross-platform reactive GUI, while providing modern support for concurrency, all in a zero-install, zero-config, single 1MB file! &lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;p&gt;&lt;a href="https://gitter.im/red/red?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/da2edb525cde1455a622c58c0effc3a90b9a181c/68747470733a2f2f6261646765732e6769747465722e696d2f4a6f696e253230436861742e737667" alt="Join the chat at https://gitter.im/red/red" data-canonical-src="https://badges.gitter.im/Join%20Chat.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://ci.appveyor.com/project/red/red/branch/master" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/69646dcb36c53f0829ec84a54ad98b7ddce0cf60/68747470733a2f2f62732e7265642d6c616e672e6f72672f77696e646f77732e737667" alt="Windows build" data-canonical-src="https://bs.red-lang.org/windows.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://travis-ci.org/red/red" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/5e3e81282b01ca727357e2e38cd31814cd12be9b/68747470733a2f2f62732e7265642d6c616e672e6f72672f6d61636f732e737667" alt="macOS build" data-canonical-src="https://bs.red-lang.org/macos.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://travis-ci.org/red/red" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/f180b7f6da7a3f866fb04580f9b22ce0d1ba71fa/68747470733a2f2f62732e7265642d6c616e672e6f72672f6c696e75782e737667" alt="Linux build" data-canonical-src="https://bs.red-lang.org/linux.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://travis-ci.org/red/red" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/5d1264271236b01cfa618df144d65ca8cb786aa8/68747470733a2f2f62732e7265642d6c616e672e6f72672f61726d656c2e737667" alt="ARMel build" data-canonical-src="https://bs.red-lang.org/armel.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://travis-ci.org/red/red" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/624f5ef2095e940c8ccf50f80e59ba82b8628520/68747470733a2f2f62732e7265642d6c616e672e6f72672f61726d68662e737667" alt="ARMhf build" data-canonical-src="https://bs.red-lang.org/armhf.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-red-programming-language" class="anchor" aria-hidden="true" href="#red-programming-language"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Red Programming Language&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Red&lt;/strong&gt; is a new programming language strongly inspired by &lt;a href="http://rebol.com" rel="nofollow"&gt;Rebol&lt;/a&gt;, but with a broader field of usage thanks to its native-code compiler, from system programming to high-level scripting, while providing modern support for concurrency and multi-core CPUs.&lt;/p&gt;
&lt;p&gt;Red has its own complete cross-platform toolchain, featuring two compilers, an interpreter and a linker, not depending on any third-party library, except for a Rebol2 interpreter, required during the bootstrap phase. Once complete, Red will be &lt;a href="http://en.wikipedia.org/wiki/Self-hosting" rel="nofollow"&gt;self-hosted&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The Red software stack also contains another language, &lt;strong&gt;Red/System&lt;/strong&gt;, which is a low-level dialect of Red. It is a limited C-level language with a Red look'n feel, required to build Red's runtime library and be the target language of Red's compiler. More information at &lt;a href="http://www.red-lang.org" rel="nofollow"&gt;red-lang.org&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-making-a-red-hello-world" class="anchor" aria-hidden="true" href="#making-a-red-hello-world"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Making a Red "Hello World"&lt;/h2&gt;
&lt;p&gt;The Red toolchain comes as a single &lt;strong&gt;one-megabyte&lt;/strong&gt; executable file that you can download from &lt;a href="http://www.red-lang.org/p/download.html" rel="nofollow"&gt;here&lt;/a&gt; for the big-3 platforms.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Put the downloaded &lt;strong&gt;red&lt;/strong&gt; binary in the working folder.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In a code or text editor, write the following Hello World program:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; Red [
     Title: "Simple hello world script"
 ]

 print "Hello World!"
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Save it under the name: &lt;strong&gt;hello.red&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;From a terminal (works from DOS too), run it with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; $ red hello.red
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You should see the &lt;em&gt;Hello World!&lt;/em&gt; output.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Want to generate a compiled executable from that program?&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; $ red -c hello.red
 $ ./hello
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Want to generate a compiled executable from that program with no dependencies?&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; $ red -r hello.red
 $ ./hello
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Want to cross-compile to another supported platform?&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; $ red -t Windows hello.red
 $ red -t Darwin hello.red
 $ red -t Linux-ARM hello.red
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;The command-line syntax is:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;red [command] [options] [file]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;[file]&lt;/code&gt; any Red or Red/System source file. If no file and no option is provided, the graphical interactive console will be launched. If a file with no option is provided, the file will be simply run by the interpreter (it is expected to be a Red script with no Red/System code).&lt;/p&gt;
&lt;p&gt;Note: On Non-Windows platforms, the REPL runs by default in CLI mode. But on Windows, the default is to run in GUI mode. To run it in the command line mode, invoke the red binary with the option &lt;code&gt;--cli&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[options]&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;-c, --compile                  : Generate an executable in the working
                                 folder, using libRedRT. (development mode)

-d, --debug, --debug-stabs     : Compile source file in debug mode. STABS
                                 is supported for Linux targets.

-dlib, --dynamic-lib           : Generate a shared library from the source
                                 file.

-e, --encap                    : Compile in encap mode, so code is interpreted 
                                 at runtime. Avoids compiler issues. Required
                                 for some dynamic code.

-h, --help                     : Output this help text.

-o &amp;lt;file&amp;gt;, --output &amp;lt;file&amp;gt;     : Specify a non-default [path/][name] for
                                 the generated binary file.

-r, --release                  : Compile in release mode, linking everything
                                 together (default: development mode).

-s, --show-expanded            : Output result of Red source code expansion by
                                 the preprocessor.

-t &amp;lt;ID&amp;gt;, --target &amp;lt;ID&amp;gt;         : Cross-compile to a different platform
                                 target than the current one (see targets
                                 table below).

-u, --update-libRedRT          : Rebuild libRedRT and compile the input script
                                  (only for Red scripts with R/S code).

-v &amp;lt;level&amp;gt;, --verbose &amp;lt;level&amp;gt;  : Set compilation verbosity level, 1-3 for
                                 Red, 4-11 for Red/System.

-V, --version                  : Output Red's executable version in x.y.z
                                 format.

--config [...]                 : Provides compilation settings as a block
                                 of `name: value` pairs.

--no-compress                  : Omit Redbin format compression.

--catch                        : Stay in the REPL after the script finishes.

--cli                          : Run the command-line REPL instead of the
                                 graphical console.

--no-runtime                   : Do not include runtime during Red/System
                                 source compilation.

--red-only                     : Stop just after Red-level compilation.
                                 Use higher verbose level to see compiler
                                 output. (internal debugging purpose)

--show-func-map                : Output an address/name map of Red/System 
                                 functions, for debugging purposes.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;[command]&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;build libRed [stdcall]         : Builds libRed library and unpacks the 
                                 libRed/ folder locally.

clear [&amp;lt;path&amp;gt;]                 : Delete all temporary files from current
                                 or target &amp;lt;path&amp;gt; folder.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Cross-compilation targets:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;MSDOS        : Windows, x86, console (+ GUI) applications
Windows      : Windows, x86, GUI applications
WindowsXP    : Windows, x86, GUI applications, no touch API
Linux        : GNU/Linux, x86
Linux-ARM    : GNU/Linux, ARMv5, armel (soft-float)
RPi          : GNU/Linux, ARMv7, armhf (hard-float)
Darwin       : macOS Intel, console-only applications
macOS        : macOS Intel, applications bundles
Syllable     : Syllable OS, x86
FreeBSD      : FreeBSD, x86
Android      : Android, ARMv5
Android-x86  : Android, x86
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: Running the Red toolchain binary from a $PATH currently requires a wrapping shell script (see relevant tickets: &lt;a href="https://github.com/red/red/issues/543"&gt;#543&lt;/a&gt; and &lt;a href="https://github.com/red/red/issues/1547"&gt;#1547&lt;/a&gt;).&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-running-the-red-repl" class="anchor" aria-hidden="true" href="#running-the-red-repl"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Running the Red REPL&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Just run the &lt;code&gt;red&lt;/code&gt; binary with no option to access the &lt;a href="http://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop" rel="nofollow"&gt;REPL&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; ---== Red 0.6.3 ==-- 
 Type HELP for starting information. 

 &amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can use it to test rapidly some Red code:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; &amp;gt;&amp;gt; 1 + 2
 == 3

 &amp;gt;&amp;gt; inc: func [n][n + 1]
 == func [n][n + 1]

 &amp;gt;&amp;gt; inc 123
 == 124
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;On Windows, the REPL runs by default in GUI mode. To run it in the command line, invoke the red binary as &lt;code&gt;red --cli&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Wine has some &lt;a href="https://github.com/red/red/issues/1618"&gt;issues&lt;/a&gt; with the GUI-Console. Install the &lt;code&gt;Consolas&lt;/code&gt; font to fix the problem.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-running-red-from-the-sources-for-contributors" class="anchor" aria-hidden="true" href="#running-red-from-the-sources-for-contributors"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Running Red from the sources (for contributors)&lt;/h2&gt;
&lt;p&gt;The compiler and linker are currently written in Rebol. Please follow the instructions for installing the compiler toolchain in order to run it from sources:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Clone this git repository or download an archive (&lt;code&gt;ZIP&lt;/code&gt; button above or from &lt;a href="https://github.com/red/red/tags"&gt;tagged packages&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Download a Rebol interpreter suitable for your OS: &lt;a href="http://www.rebol.com/downloads/v278/rebol-core-278-3-1.exe" rel="nofollow"&gt;Windows&lt;/a&gt;, &lt;a href="http://www.maxvessi.net/rebsite/Linux/" rel="nofollow"&gt;Linux&lt;/a&gt; (or &lt;a href="http://www.rebol.com/downloads/v278/rebol-core-278-4-2.tar.gz" rel="nofollow"&gt;Linux&lt;/a&gt;), &lt;a href="http://www.rebol.com/downloads/v278/rebol-core-278-2-5.tar.gz" rel="nofollow"&gt;Mac OS X&lt;/a&gt;, &lt;a href="http://www.rebol.com/downloads/v278/rebol-core-278-7-2.tar.gz" rel="nofollow"&gt;FreeBSD&lt;/a&gt;, &lt;a href="http://www.rebol.com/downloads/v278/rebol-core-278-9-4.tar.gz" rel="nofollow"&gt;OpenBSD&lt;/a&gt;, &lt;a href="http://www.rebol.com/downloads/v276/rebol-core-276-10-1.gz" rel="nofollow"&gt;Solaris&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Extract the &lt;code&gt;rebol&lt;/code&gt; binary, put it in root folder, that's all!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Let's test it: run &lt;code&gt;./rebol&lt;/code&gt;, you'll see a &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; prompt appear. Windows users need to double-click on the &lt;code&gt;rebol.exe&lt;/code&gt; file to run it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;From the REBOL console type:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; &amp;gt;&amp;gt; do/args %red.r "%tests/hello.red"
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The compilation process should finish with a &lt;code&gt;...output file size&lt;/code&gt; message. The resulting binary is in the working folder. Windows users need to open a DOS console and run &lt;code&gt;hello.exe&lt;/code&gt; from there.&lt;/p&gt;
&lt;p&gt;To see the intermediary Red/System code generated by the compiler, use:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    &amp;gt;&amp;gt; do/args %red.r "-v 2 %tests/hello.red"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can also compile the Red console from source:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    &amp;gt;&amp;gt; do/args %red.r "-r %environment/console/CLI/console.red"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To compile the Windows GUI console from source:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    &amp;gt;&amp;gt; do/args %red.r "-r -t Windows %environment/console/GUI/gui-console.red"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note: the &lt;code&gt;-c&lt;/code&gt; argument is not necessary when launching the Red toolchain from sources, as the default action is to compile the input script (the toolchain in binary form default action is to run the input script through the interpreter).
The &lt;code&gt;-r&lt;/code&gt; argument is needed when compiling the Red console to make additional runtime functions available.&lt;/p&gt;
&lt;p&gt;Note: The red git repository does not include a .gitignore file. If you run the automated tests a number of files will be created that are not stored in the repository. Installing and renaming a copy of &lt;a href="https://github.com/red/red/blob/master/.gitignore-sample"&gt;.gitignore-sample&lt;/a&gt; file will ignore these generated files.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-contributing" class="anchor" aria-hidden="true" href="#contributing"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contributing&lt;/h2&gt;
&lt;p&gt;If you want to contribute code to the Red project be sure to read the &lt;a href="https://github.com/red/red/wiki/%5BDOC%5D-Contributor-Guidelines"&gt;guidelines&lt;/a&gt; first.&lt;/p&gt;
&lt;p&gt;It is usually a good idea to inform the Red team about what changes you are going to make in order to ensure that someone is not already working on the same thing. You can reach us through the &lt;a href="https://groups.google.com/forum/?hl=en#!forum/red-lang" rel="nofollow"&gt;mailing-list&lt;/a&gt; or our &lt;a href="https://gitter.im/red/red" rel="nofollow"&gt;chat room&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Satisfied with the results of your change and want to issue a pull request on Github?&lt;/p&gt;
&lt;p&gt;Make sure the changes pass all the existing tests, add relevant tests to the test-suite and please test on as many platforms as you can. You can run all the tests using (from Rebol console, at repository root):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    &amp;gt;&amp;gt; do %run-all.r
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;a id="user-content-git-integration-with-console-built-from-sources" class="anchor" aria-hidden="true" href="#git-integration-with-console-built-from-sources"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Git integration with console built from sources&lt;/h2&gt;
&lt;p&gt;If you want git version included in your Red console built from sources, use this command:&lt;/p&gt;
&lt;div class="highlight highlight-source-red"&gt;&lt;pre&gt;call&lt;span class="pl-k"&gt;/show&lt;/span&gt; &lt;span class="pl-s"&gt;""&lt;/span&gt;                                              &lt;span class="pl-c"&gt;;-- patch call bug on Windows&lt;/span&gt;
&lt;span class="pl-c1"&gt;save&lt;/span&gt; &lt;span class="pl-s"&gt;%build/git.r&lt;/span&gt; do &lt;span class="pl-s"&gt;%build/git-version.r&lt;/span&gt;                 &lt;span class="pl-c"&gt;;-- lookup git version if available&lt;/span&gt;
do&lt;span class="pl-k"&gt;/args&lt;/span&gt; &lt;span class="pl-s"&gt;%red.r&lt;/span&gt; &lt;span class="pl-s"&gt;"-r %environment/console/CLI/console.red"&lt;/span&gt;  &lt;span class="pl-c"&gt;;-- build Console&lt;/span&gt;
&lt;span class="pl-c1"&gt;write&lt;/span&gt; &lt;span class="pl-s"&gt;%build/git.r&lt;/span&gt; &lt;span class="pl-s"&gt;"none&lt;span class="pl-s"&gt;^/&lt;/span&gt;"&lt;/span&gt;                               &lt;span class="pl-c"&gt;;-- restore git repo status&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-anti-virus-false-positive" class="anchor" aria-hidden="true" href="#anti-virus-false-positive"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Anti-virus false positive&lt;/h2&gt;
&lt;p&gt;Some anti-virus programs are a bit too sensitive and can wrongly report an alert on some binaries generated by Red, if that happens to you, please fill a ticket &lt;a href="https://github.com/red/red/issues"&gt;here&lt;/a&gt;, so we can report the false positive.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-license" class="anchor" aria-hidden="true" href="#license"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;License&lt;/h2&gt;
&lt;p&gt;Both Red and Red/System are published under &lt;a href="http://www.opensource.org/licenses/bsd-3-clause" rel="nofollow"&gt;BSD&lt;/a&gt; license, runtime is under &lt;a href="http://www.boost.org/users/license.html" rel="nofollow"&gt;BSL&lt;/a&gt; license. BSL is a bit more permissive license than BSD, more suitable for the runtime parts.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>red</author><guid isPermaLink="false">https://github.com/red/red</guid><pubDate>Mon, 04 Nov 2019 00:01:00 GMT</pubDate></item></channel></rss>