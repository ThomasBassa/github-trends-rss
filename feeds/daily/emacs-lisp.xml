<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>GitHub Trending: Emacs Lisp, Today</title><link>https://github.com/trending/emacs-lisp?since=daily</link><description>The top repositories on GitHub for emacs-lisp, measured daily</description><pubDate>Tue, 26 Nov 2019 01:07:31 GMT</pubDate><lastBuildDate>Tue, 26 Nov 2019 01:07:31 GMT</lastBuildDate><generator>PyRSS2Gen-1.1.0</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><ttl>720</ttl><item><title>syl20bnr/spacemacs #1 in Emacs Lisp, Today</title><link>https://github.com/syl20bnr/spacemacs</link><description>&lt;p&gt;&lt;i&gt;A community-driven Emacs distribution - The best editor is neither Emacs nor Vim,  it's Emacs *and* Vim!&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;p&gt;&lt;a name="user-content-top"&gt;&lt;/a&gt;
&lt;a href="http://spacemacs.org" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/8f5ee1d9b7278ed2c63f1f89e9a583ec59b52b6b/68747470733a2f2f63646e2e7261776769742e636f6d2f73796c3230626e722f73706163656d6163732f343432643032353737396461326636326663383663323038323730333639373731346462363531342f6173736574732f73706163656d6163732d62616467652e737667" alt="Made with Spacemacs" data-canonical-src="https://cdn.rawgit.com/syl20bnr/spacemacs/442d025779da2f62fc86c2082703697714db6514/assets/spacemacs-badge.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;a href="http://www.twitter.com/spacemacs" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/7cf10772eb6ccebe92d678c452a971e6e2778653/687474703a2f2f692e696d6775722e636f6d2f7458536f5468462e706e67" alt="Twitter" align="right" data-canonical-src="http://i.imgur.com/tXSoThF.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p align="center"&gt;&lt;a target="_blank" rel="noopener noreferrer" href="/doc/img/title2.png"&gt;&lt;img src="/doc/img/title2.png" alt="Spacemacs" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p align="center"&gt;
&lt;b&gt;&lt;a href="http://spacemacs.org/doc/DOCUMENTATION#orgheadline5" rel="nofollow"&gt;philosophy&lt;/a&gt;&lt;/b&gt;
|
&lt;b&gt;&lt;a href="http://spacemacs.org/doc/DOCUMENTATION#orgheadline8" rel="nofollow"&gt;for whom?&lt;/a&gt;&lt;/b&gt;
|
&lt;b&gt;&lt;a href="http://spacemacs.org/doc/DOCUMENTATION#orgheadline7" rel="nofollow"&gt;screenshots&lt;/a&gt;&lt;/b&gt;
|
&lt;b&gt;&lt;a href="http://spacemacs.org/doc/DOCUMENTATION.html" rel="nofollow"&gt;documentation&lt;/a&gt;&lt;/b&gt;
|
&lt;b&gt;&lt;a href="CONTRIBUTING.org"&gt;contribute&lt;/a&gt;&lt;/b&gt;
|
&lt;b&gt;&lt;a href="http://spacemacs.org/doc/DOCUMENTATION#achievements" rel="nofollow"&gt;achievements&lt;/a&gt;&lt;/b&gt;
|
&lt;b&gt;&lt;a href="http://spacemacs.org/doc/FAQ" rel="nofollow"&gt;FAQ&lt;/a&gt;&lt;/b&gt;
&lt;/p&gt;
&lt;hr&gt;
&lt;p align="center"&gt;
&lt;a href="https://gitter.im/syl20bnr/spacemacs?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/80bf7c9122b2d8f4dbadfc434c9074c1754267ae/68747470733a2f2f6261646765732e6769747465722e696d2f4a6f696e20436861742e737667" alt="Gitter" data-canonical-src="https://badges.gitter.im/Join Chat.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://travis-ci.org/syl20bnr/spacemacs" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/b724760fb5fb9a3cc9dcb3ed5fca8d102d076062/68747470733a2f2f7472617669732d63692e6f72672f73796c3230626e722f73706163656d6163732e737667" alt="Build Status" data-canonical-src="https://travis-ci.org/syl20bnr/spacemacs.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;amp;hosted_button_id=ESFVNPKP4Y742" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/516248018619132b396881c0b21749c34d6ccfbd/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f50617970616c2d446f6e6174652d626c75652e737667" alt="Donate" data-canonical-src="https://img.shields.io/badge/Paypal-Donate-blue.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://shop.spreadshirt.com/spacemacs-shop" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/f1b306f89bf6fade603509713a098316a4948ef2/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f53686f702d542d2d5368697274732d626c75652e737667" alt="Donate" data-canonical-src="https://img.shields.io/badge/Shop-T--Shirts-blue.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="http://www.slant.co/topics/12/~what-are-the-best-programming-text-editors" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/2e66996b76fc392f4936160dc3f627f663d1a68a/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f536c616e742d5265636f6d6d656e642d6666363962342e737667" alt="Recommend it" data-canonical-src="https://img.shields.io/badge/Slant-Recommend-ff69b4.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Quick Install:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clone https://github.com/syl20bnr/spacemacs ~/.emacs.d
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#introduction"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#features"&gt;Features&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#documentation"&gt;Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#getting-help"&gt;Getting Help&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#prerequisites"&gt;Prerequisites&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#emacs"&gt;Emacs&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#linux-distros"&gt;Linux distros&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#macos"&gt;macOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#windows"&gt;Windows&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#install"&gt;Install&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#default-installation"&gt;Default installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#alternate-installations"&gt;Alternate installations&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#modify-home-environment-variable"&gt;Modify HOME environment variable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#modify-spacemacs-start-directory-variable"&gt;Modify spacemacs-start-directory variable&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#spacemacs-logo"&gt;Spacemacs logo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#update"&gt;Update&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#automatic-update-on-master-branch"&gt;Automatic update (on master branch)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#manual-update-on-master-branch"&gt;Manual update (on master branch)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#on-develop-branch"&gt;On develop branch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#revert-to-a-specific-version"&gt;Revert to a specific version&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#quotes"&gt;Quotes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#contributions"&gt;Contributions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#communities"&gt;Communities&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#license"&gt;License&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#supporting-spacemacs"&gt;Supporting Spacemacs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;&lt;a id="user-content-introduction" class="anchor" aria-hidden="true" href="#introduction"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Spacemacs is a new way to experience Emacs -- a sophisticated and
polished set-up focused on ergonomics, mnemonics and consistency.&lt;/p&gt;
&lt;p&gt;Just clone it, launch it, then press the space bar to explore the
interactive list of carefully-chosen key bindings. You can also press
the home buffer's &lt;code&gt;[?]&lt;/code&gt; button for some great first key bindings to
try.&lt;/p&gt;
&lt;p&gt;Spacemacs can be used naturally by both Emacs and Vim users -- you can
even mix the two editing styles. Switching easily between input styles
makes Spacemacs a great tool for pair-programming.&lt;/p&gt;
&lt;p&gt;Spacemacs is currently in beta, and contributions are very welcome.&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="doc/img/spacemacs-python.png"&gt;&lt;img src="doc/img/spacemacs-python.png" alt="spacemacs_python" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-features" class="anchor" aria-hidden="true" href="#features"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Features&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Great documentation:&lt;/strong&gt; access documentation in Emacs with
&lt;kbd&gt;SPC h SPC&lt;/kbd&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Beautiful GUI:&lt;/strong&gt; you'll love the distraction free UI and its functional
mode-line.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Excellent ergonomics:&lt;/strong&gt; all the key bindings are accessible by pressing
the &lt;kbd&gt;space bar&lt;/kbd&gt; or &lt;kbd&gt;alt-m&lt;/kbd&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mnemonic key bindings:&lt;/strong&gt; commands have mnemonic prefixes like
&lt;kbd&gt;SPC b&lt;/kbd&gt; for all the buffer commands or &lt;kbd&gt;SPC p&lt;/kbd&gt; for the
project commands.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Batteries included:&lt;/strong&gt; discover hundreds of ready-to-use packages nicely
organised in configuration layers following a set of
&lt;a href="http://spacemacs.org/doc/CONVENTIONS" rel="nofollow"&gt;conventions&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Documentation&lt;/h1&gt;
&lt;p&gt;Comprehensive documentation is available for each layer by pressing
&lt;kbd&gt;SPC h SPC&lt;/kbd&gt;.&lt;/p&gt;
&lt;p&gt;You can also check the &lt;a href="http://spacemacs.org/doc/DOCUMENTATION" rel="nofollow"&gt;general documentation&lt;/a&gt;,
&lt;a href="http://spacemacs.org/doc/QUICK_START" rel="nofollow"&gt;quick start guide&lt;/a&gt; and the &lt;a href="http://spacemacs.org/doc/FAQ" rel="nofollow"&gt;FAQ&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-getting-help" class="anchor" aria-hidden="true" href="#getting-help"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Getting Help&lt;/h1&gt;
&lt;p&gt;If you need help, ask your question in the &lt;a href="https://gitter.im/syl20bnr/spacemacs" rel="nofollow"&gt;Gitter Chat&lt;/a&gt; and a member of the
community will help you out.&lt;/p&gt;
&lt;p&gt;If you prefer IRC, connect to the &lt;a href="https://irc.gitter.im/" rel="nofollow"&gt;Gitter Chat IRC server&lt;/a&gt; and join the
&lt;code&gt;#syl20bnr/spacemacs&lt;/code&gt; channel.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-prerequisites" class="anchor" aria-hidden="true" href="#prerequisites"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Prerequisites&lt;/h1&gt;
&lt;h2&gt;&lt;a id="user-content-emacs" class="anchor" aria-hidden="true" href="#emacs"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Emacs&lt;/h2&gt;
&lt;p&gt;Spacemacs requires Emacs 24.4 or above. The development version of Emacs (at the
time of writing, this is 25.2) is not &lt;em&gt;officially&lt;/em&gt; supported, but should
nevertheless be expected to work.&lt;/p&gt;
&lt;p&gt;Some modes require third-party tools that you'll have to install via your
favorite package manager.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-linux-distros" class="anchor" aria-hidden="true" href="#linux-distros"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Linux distros&lt;/h3&gt;
&lt;p&gt;Install Emacs from the package manager of your Linux distribution.&lt;/p&gt;
&lt;p&gt;You should install the "emacs" package, not the "xemacs" package.
XEmacs is an old fork of Emacs. The X in its name is unrelated to X11.
Both Emacs and XEmacs have graphical support.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Ubuntu LTS 12.04 and 14.04 repositories have only Emacs 24.3
available. You have to &lt;a href="https://www.gnu.org/software/emacs/manual/html_node/efaq/Installing-Emacs.html" rel="nofollow"&gt;build from source&lt;/a&gt; Emacs 24.4 or greater,
as Spacemacs won't work with 24.3. The same may be true for other distributions
as well.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-macos" class="anchor" aria-hidden="true" href="#macos"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;macOS&lt;/h3&gt;
&lt;p&gt;The recommended way of installing Emacs on macOS is using &lt;a href="http://brew.sh" rel="nofollow"&gt;homebrew&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;$ brew tap d12frosted/emacs-plus
$ brew install emacs-plus
$ brew linkapps emacs-plus&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; these homebrew commands will install GNU Emacs, and link it to your
&lt;code&gt;/Applications&lt;/code&gt; directory. You still need to run the &lt;code&gt;git clone&lt;/code&gt; mentioned at
the start of this file. That will populate your &lt;code&gt;~/.emacs.d&lt;/code&gt; directory, which is
what transforms a regular GNU Emacs into Spacemacs.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; the proposed &lt;code&gt;emacs-plus&lt;/code&gt; tap is identical to the &lt;code&gt;emacs&lt;/code&gt; formulae, it
just builds GNU Emacs with support of several features by default along with
providing Spacemacs icon.
See &lt;a href="https://github.com/d12frosted/homebrew-emacs-plus"&gt;emacs-plus&lt;/a&gt; for more
information.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: to have the title bar match your theme background color,
consider using instead:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;$ brew install emacs-plus --HEAD --with-natural-title-bars&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; after you have completed the &lt;a href="#install"&gt;install process&lt;/a&gt; below, it is
also recommended to add the &lt;a href="http://spacemacs.org/layers/+os/osx/README.html" rel="nofollow"&gt;osx layer&lt;/a&gt; to your &lt;a href="http://spacemacs.org/doc/DOCUMENTATION#orgheadline45" rel="nofollow"&gt;dotfile&lt;/a&gt;. Install
instructions are available in the &lt;a href="http://spacemacs.org/layers/+os/osx/README.html" rel="nofollow"&gt;osx layer&lt;/a&gt; documentation.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; if the powerline separators on the spaceline are a different (less
saturated) color than the rest of the line, you can add following snippet to
&lt;code&gt;dotspacemacs/user-config&lt;/code&gt; in your &lt;code&gt;.spacemacs&lt;/code&gt; file.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;setq&lt;/span&gt; ns-use-srgb-colorspace &lt;span class="pl-c1"&gt;nil&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Keep in mind that this is not ideal solution as it affects all colours in Emacs.
Another option is to use different powerline separator. For example, &lt;code&gt;alternate&lt;/code&gt;
and &lt;code&gt;bar&lt;/code&gt; diminishes the difference. And using &lt;code&gt;utf-8&lt;/code&gt; separator makes it go
away completely without the need to change colour space. In order to change
powerline separator put following snippet in &lt;code&gt;dotspacemacs/user-config&lt;/code&gt;.&lt;/p&gt;
&lt;pre lang="eslip"&gt;&lt;code&gt;(setq powerline-default-separator 'utf-8)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For more information about powerline separators, please refer to appropriate
section in &lt;a href="http://spacemacs.org/doc/DOCUMENTATION" rel="nofollow"&gt;Documentation&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-windows" class="anchor" aria-hidden="true" href="#windows"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Windows&lt;/h3&gt;
&lt;p&gt;You can download good quality builds from the &lt;a href="http://emacsbinw64.sourceforge.net/" rel="nofollow"&gt;emacs-w64 project&lt;/a&gt;.
It is recommended to install the most recent &lt;a href="https://sourceforge.net/projects/emacsbinw64/files/release/" rel="nofollow"&gt;stable build&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Be sure to declare a environment variable named &lt;code&gt;HOME&lt;/code&gt; pointing to your user
directory &lt;code&gt;C:\Users\&amp;lt;username&amp;gt;&lt;/code&gt;. Then you can clone Spacemacs in this directory.&lt;/p&gt;
&lt;p&gt;Sometimes you'll get the following error when you first start Emacs:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;The directory ~/.emacs.d/server is unsafe
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To fix it change the owner of the directory &lt;code&gt;~/.emacs.d/server&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;from Properties select the Tab “Security”,&lt;/li&gt;
&lt;li&gt;select the button “Advanced”,&lt;/li&gt;
&lt;li&gt;select the Tab “Owner”&lt;/li&gt;
&lt;li&gt;change the owner to your account name&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Source: &lt;a href="http://stackoverflow.com/questions/885793/emacs-error-when-calling-server-start" rel="nofollow"&gt;Stack Overflow&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For efficient searches we recommend to install &lt;code&gt;pt&lt;/code&gt; (&lt;a href="https://github.com/monochromegane/the_platinum_searcher"&gt;the platinum searcher&lt;/a&gt;).
&lt;code&gt;pt&lt;/code&gt; version 1.7.7 or higher is required.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-install" class="anchor" aria-hidden="true" href="#install"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Install&lt;/h1&gt;
&lt;h2&gt;&lt;a id="user-content-default-installation" class="anchor" aria-hidden="true" href="#default-installation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Default installation&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;If you have an existing Emacs configuration, back it up first:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;cd&lt;/span&gt; &lt;span class="pl-k"&gt;~&lt;/span&gt;
mv .emacs.d .emacs.d.bak
mv .emacs .emacs.bak&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Don't forget to backup and &lt;em&gt;remove&lt;/em&gt; &lt;code&gt;~/.emacs&lt;/code&gt; file otherwise Spacemacs
&lt;strong&gt;WILL NOT&lt;/strong&gt; load since that file prevents Emacs from loading the proper
initialization file.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Clone the repository:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;git clone https://github.com/syl20bnr/spacemacs &lt;span class="pl-k"&gt;~&lt;/span&gt;/.emacs.d&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;master&lt;/code&gt; is the stable branch and it is &lt;em&gt;immutable&lt;/em&gt;, &lt;strong&gt;DO NOT&lt;/strong&gt; make any
modification to it or you will break the update mechanism. If you want to
fork Spacemacs safely use the &lt;code&gt;develop&lt;/code&gt; branch where you handle the update
manually.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(Optional) Install the &lt;a href="https://github.com/adobe-fonts/source-code-pro"&gt;Source Code Pro&lt;/a&gt; font.&lt;/p&gt;
&lt;p&gt;If you are running in terminal you'll also need to change font settings of
your terminal.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Launch Emacs. Spacemacs will automatically install the packages it requires.
If you get an error regarding package downloads then you may try to disable
the HTTPS protocol by starting Emacs with&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;emacs --insecure&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or you can set the &lt;code&gt;dotspacemacs-elpa-https&lt;/code&gt; to &lt;code&gt;nil&lt;/code&gt; in your dotfile to
remove the need to start Emacs with &lt;code&gt;--insecure&lt;/code&gt; argument. You may wish to
clear out your &lt;code&gt;.emacs.d/elpa&lt;/code&gt; directory before doing this, so that any
corrupted packages you may have downloaded will be re-installed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Restart Emacs to complete the installation.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If the mode-line turns red then be sure to consult the &lt;a href="http://spacemacs.org/doc/FAQ" rel="nofollow"&gt;FAQ&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-alternate-installations" class="anchor" aria-hidden="true" href="#alternate-installations"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Alternate installations&lt;/h2&gt;
&lt;p&gt;It may be useful to clone Spacemacs outside Emacs dotdirectory &lt;code&gt;~/.emacs.d&lt;/code&gt; so
you can try Spacemacs without replacing completely our own configuration.
There is currently two possibilities to support alternative location for
Spacemacs configuration.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-modify-home-environment-variable" class="anchor" aria-hidden="true" href="#modify-home-environment-variable"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Modify HOME environment variable&lt;/h3&gt;
&lt;p&gt;This solution is ideal to quickly try Spacemacs without compromising your
existing configuration.&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;mkdir &lt;span class="pl-k"&gt;~&lt;/span&gt;/spacemacs
git clone https://github.com/syl20bnr/spacemacs.git &lt;span class="pl-k"&gt;~&lt;/span&gt;/spacemacs/.emacs.d
HOME=&lt;span class="pl-k"&gt;~&lt;/span&gt;/spacemacs emacs&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note: If you're on Fish shell, you will need to modify the last command to: &lt;code&gt;env HOME=$HOME/spacemacs emacs&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-modify-spacemacs-start-directory-variable" class="anchor" aria-hidden="true" href="#modify-spacemacs-start-directory-variable"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Modify spacemacs-start-directory variable&lt;/h3&gt;
&lt;p&gt;This solution is better suited to "embed" Spacemacs into your own configuration.
Say you cloned Spacemacs in &lt;code&gt;~/.emacs.d/spacemacs/&lt;/code&gt; then drop these lines in
&lt;code&gt;~/.emacs.d/init.el&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;setq&lt;/span&gt; spacemacs-start-directory &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;~/.emacs.d/spacemacs/&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;load-file&lt;/span&gt; (&lt;span class="pl-c1"&gt;concat&lt;/span&gt; spacemacs-start-directory &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;init.el&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-spacemacs-logo" class="anchor" aria-hidden="true" href="#spacemacs-logo"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Spacemacs logo&lt;/h2&gt;
&lt;p&gt;For Ubuntu users, follow this guide to
&lt;a href="http://splendidabacus.com/posts/2015/03/spacemacs-unity-icon/" rel="nofollow"&gt;change the logo in Unity&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For Mac users, you need to &lt;a href="https://github.com/nashamri/spacemacs-logo"&gt;download the .icns version of the logo&lt;/a&gt;,
then &lt;a href="http://www.idownloadblog.com/2014/07/16/how-to-change-app-icon-mac/" rel="nofollow"&gt;change the logo on Dock&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-update" class="anchor" aria-hidden="true" href="#update"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Update&lt;/h1&gt;
&lt;p&gt;Spacemacs has a built-in notification of a new version when you are on the
&lt;code&gt;master&lt;/code&gt; branch. If you are on the &lt;code&gt;develop&lt;/code&gt; branch then you'll have to
update Spacemacs manually by updating your repository.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-automatic-update-on-master-branch" class="anchor" aria-hidden="true" href="#automatic-update-on-master-branch"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Automatic update (on master branch)&lt;/h2&gt;
&lt;p&gt;When a new version is available a little arrow appears in the mode-line.&lt;/p&gt;
&lt;p&gt;Its color depends on the number of versions available since your last update.
Green means that your current version is recent, orange and red mean that your
current version is older.&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="doc/img/powerline-update.png"&gt;&lt;img src="doc/img/powerline-update.png" alt="powerline_update" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Click on the arrow to update Spacemacs to the last version.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-manual-update-on-master-branch" class="anchor" aria-hidden="true" href="#manual-update-on-master-branch"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Manual update (on master branch)&lt;/h2&gt;
&lt;p&gt;(Remove the angle brackets when typing the lines below into your shell.)&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;git fetch
git reset --hard &lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt;tag version which you are updating to&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-on-develop-branch" class="anchor" aria-hidden="true" href="#on-develop-branch"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;On develop branch&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Update Emacs packages by clicking (press &lt;code&gt;RET&lt;/code&gt;) on the &lt;code&gt;[Update Packages]&lt;/code&gt; link of
the starting page.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Close Emacs and update the git repository:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;git pull --rebase&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Restart Emacs to complete the upgrade.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;&lt;a id="user-content-revert-to-a-specific-version" class="anchor" aria-hidden="true" href="#revert-to-a-specific-version"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Revert to a specific version&lt;/h2&gt;
&lt;p&gt;To revert to a specific version you just have to checkout the corresponding
branch, for instance to revert to the last &lt;code&gt;0.103&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;git checkout origin/release-0.103&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;After you update, either manually, or automatically, you are advised to update
your packages by clicking the &lt;code&gt;[Update Packages]&lt;/code&gt; button on the Spacemacs Home
Buffer.&lt;/strong&gt;&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-quotes" class="anchor" aria-hidden="true" href="#quotes"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Quotes&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://gitter.im/syl20bnr/spacemacs?at=568e627a0cdaaa62045a7df6" rel="nofollow"&gt;Quote&lt;/a&gt; by &lt;a href="https://github.com/ashnur"&gt;ashnur&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;«I feel that spacemacs is an aircraft carrier and I am playing table tennis on the deck as a freerider.»
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href="https://gitter.im/syl20bnr/spacemacs?at=5768456c6577f032450cfedb" rel="nofollow"&gt;Quote&lt;/a&gt; by &lt;a href="https://github.com/deuill"&gt;deuill&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;«I LOVE SPACEMACS AND MAGIT

 That is all»
&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;&lt;a id="user-content-contributions" class="anchor" aria-hidden="true" href="#contributions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contributions&lt;/h1&gt;
&lt;p&gt;Spacemacs is a community-driven project, it needs &lt;em&gt;you&lt;/em&gt; to keep it up to
date and propose great and useful configuration for all the things!&lt;/p&gt;
&lt;p&gt;Before contributing be sure to consult the
&lt;a href="CONTRIBUTING.org"&gt;contribution guidelines&lt;/a&gt; and &lt;a href="http://spacemacs.org/doc/CONVENTIONS" rel="nofollow"&gt;conventions&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-communities" class="anchor" aria-hidden="true" href="#communities"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Communities&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://gitter.im/syl20bnr/spacemacs" rel="nofollow"&gt;Gitter Chat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://emacs.stackexchange.com/questions/tagged/spacemacs" rel="nofollow"&gt;Stack Exchange&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/spacemacs" rel="nofollow"&gt;Reddit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;a id="user-content-license" class="anchor" aria-hidden="true" href="#license"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;License&lt;/h1&gt;
&lt;p&gt;The license is GPLv3 for all parts specific to Spacemacs, this includes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the initialization and core files&lt;/li&gt;
&lt;li&gt;all the layer files&lt;/li&gt;
&lt;li&gt;the documentation&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For the packages shipped in this repository you can refer to the files header.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/nashamri/spacemacs-logo"&gt;Spacemacs logo&lt;/a&gt; by &lt;a href="https://github.com/nashamri"&gt;Nasser Alshammari&lt;/a&gt; released under a &lt;a href="http://creativecommons.org/licenses/by-sa/4.0/" rel="nofollow"&gt;Creative Commons Attribution-ShareAlike 4.0 International License.&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-supporting-spacemacs" class="anchor" aria-hidden="true" href="#supporting-spacemacs"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Supporting Spacemacs&lt;/h1&gt;
&lt;p&gt;The best way to support Spacemacs is to contribute to it either by reporting
bugs, helping the community on the &lt;a href="https://gitter.im/syl20bnr/spacemacs" rel="nofollow"&gt;Gitter Chat&lt;/a&gt; or sending pull requests.&lt;/p&gt;
&lt;p&gt;You can show your love for the project by getting cool Spacemacs t-shirts, mugs
and more in the &lt;a href="https://shop.spreadshirt.com/spacemacs-shop" rel="nofollow"&gt;Spacemacs Shop&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you want to show your support financially you can contribute to &lt;a href="https://salt.bountysource.com/teams/spacemacs" rel="nofollow"&gt;Bountysource&lt;/a&gt; or buy a drink for the
maintainer by clicking on the &lt;a href="#top"&gt;Paypal badge&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you used spacemacs in a project and you want to show that fact, you can use
the spacemacs badge: &lt;a href="http://spacemacs.org" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/8f5ee1d9b7278ed2c63f1f89e9a583ec59b52b6b/68747470733a2f2f63646e2e7261776769742e636f6d2f73796c3230626e722f73706163656d6163732f343432643032353737396461326636326663383663323038323730333639373731346462363531342f6173736574732f73706163656d6163732d62616467652e737667" alt="Built with Spacemacs" data-canonical-src="https://cdn.rawgit.com/syl20bnr/spacemacs/442d025779da2f62fc86c2082703697714db6514/assets/spacemacs-badge.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;For Markdown:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[![Built with Spacemacs](https://cdn.rawgit.com/syl20bnr/spacemacs/442d025779da2f62fc86c2082703697714db6514/assets/spacemacs-badge.svg)](http://spacemacs.org)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For HTML:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;a href="http://spacemacs.org"&amp;gt;&amp;lt;img src="https://cdn.rawgit.com/syl20bnr/spacemacs/442d025779da2f62fc86c2082703697714db6514/assets/spacemacs-badge.svg" /&amp;gt;&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For Org-mode:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[[http://spacemacs.org][file:https://cdn.rawgit.com/syl20bnr/spacemacs/442d025779da2f62fc86c2082703697714db6514/assets/spacemacs-badge.svg]]
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thank you!&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>syl20bnr</author><guid isPermaLink="false">https://github.com/syl20bnr/spacemacs</guid><pubDate>Tue, 26 Nov 2019 00:01:00 GMT</pubDate></item><item><title>hlissner/doom-emacs #2 in Emacs Lisp, Today</title><link>https://github.com/hlissner/doom-emacs</link><description>&lt;p&gt;&lt;i&gt;An Emacs configuration for the stubborn martian vimmer&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;a href="http://doomemacs.org" rel="nofollow"&gt;
  &lt;img src="https://camo.githubusercontent.com/d38622bbeea8e0a3a1c42e21d2839363d21b4627/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f7461672f686c6973736e65722f646f6f6d2d656d6163732e7376673f6c6162656c3d72656c6561736526636f6c6f723d6f72616e6765" alt="Made with Doom Emacs" data-canonical-src="https://img.shields.io/github/tag/hlissner/doom-emacs.svg?label=release&amp;amp;color=orange" style="max-width:100%;"&gt;
&lt;/a&gt;
&lt;a href="https://emacs.org" rel="nofollow"&gt;
  &lt;img src="https://camo.githubusercontent.com/145199dd89d8ed47968846fe8dcdde64b838ffab/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4d6164655f666f722d456d6163735f32362e312b2d626c756576696f6c65742e737667" alt="Made for Emacs 26.1+" data-canonical-src="https://img.shields.io/badge/Made_for-Emacs_26.1+-blueviolet.svg" style="max-width:100%;"&gt;
&lt;/a&gt;
&lt;a href="https://github.com/hlissner/doom-emacs/actions"&gt;
  &lt;img src="https://github.com/hlissner/doom-emacs/workflows/CI/badge.svg" alt="Build status: develop" style="max-width:100%;"&gt;
&lt;/a&gt;
&lt;a href="https://discord.gg/bcZ6P3y" rel="nofollow"&gt;
  &lt;img src="https://camo.githubusercontent.com/48087b2da5b43d9130b73e6e8ad3e7b42caa3330/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f446973636f72642d626c75652e7376673f6c6f676f3d646973636f7264266c6162656c3d6a6f696e" alt="Join our discord server" align="right" data-canonical-src="https://img.shields.io/badge/Discord-blue.svg?logo=discord&amp;amp;label=join" style="max-width:100%;"&gt;
&lt;/a&gt;
&lt;br&gt;&lt;br&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/hlissner/doom-emacs/screenshots/main.png"&gt;&lt;img src="https://raw.githubusercontent.com/hlissner/doom-emacs/screenshots/main.png" alt="Doom Emacs Screenshot" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p align="center"&gt;
  &lt;b&gt;&lt;a href="/../../tree/screenshots"&gt;Screenshots&lt;/a&gt;&lt;/b&gt;
  |
  &lt;b&gt;&lt;a href="docs/getting_started.org"&gt;Get started&lt;/a&gt;&lt;/b&gt;
  |
  &lt;b&gt;&lt;a href="docs/contributing.org"&gt;Contribute&lt;/a&gt;&lt;/b&gt;
  |
  &lt;b&gt;&lt;a href="docs/index.org"&gt;Documentation&lt;/a&gt;&lt;/b&gt;
  |
  &lt;b&gt;&lt;a href="docs/faq.org"&gt;FAQ&lt;/a&gt;&lt;/b&gt;
&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Quick start&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;git clone https://github.com/hlissner/doom-emacs &lt;span class="pl-k"&gt;~&lt;/span&gt;/.emacs.d
&lt;span class="pl-k"&gt;~&lt;/span&gt;/.emacs.d/bin/doom install&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#what-is-doom-emacs"&gt;What is Doom Emacs&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#dooms-mantras"&gt;Doom's mantras&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#features"&gt;Features&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#getting-help"&gt;Getting Help&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#community"&gt;Community&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#troubleshooting"&gt;Troubleshooting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#contributing"&gt;Contributing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;a id="user-content-what-is-doom-emacs" class="anchor" aria-hidden="true" href="#what-is-doom-emacs"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;What is Doom Emacs&lt;/h1&gt;
&lt;a href="http://ultravioletbat.deviantart.com/art/Yay-Evil-111710573" rel="nofollow"&gt;
  &lt;img src="https://github.com/hlissner/doom-emacs/raw/screenshots/cacochan.png" align="right" style="max-width:100%;"&gt;
&lt;/a&gt;
&lt;p&gt;It is a story as old as time. A stubborn, shell-dwelling, and melodramatic
vimmer -- envious of the features of modern text editors -- spirals into despair
before succumbing to the &lt;a href="https://github.com/emacs-evil/evil"&gt;dark side&lt;/a&gt;. This is his config.&lt;/p&gt;
&lt;p&gt;Doom is a configuration for &lt;a href="https://www.gnu.org/software/emacs/" rel="nofollow"&gt;GNU Emacs&lt;/a&gt;
designed to make Emacs faster and easier to customize. It can serve as framework
for your own configuration or a resource for fellow Emacs enthusiasts who want
to learn more about our favorite OS.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-dooms-mantras" class="anchor" aria-hidden="true" href="#dooms-mantras"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Doom's mantras&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Gotta go fast.&lt;/strong&gt; Startup and run-time performance are high priorities.
Expensive functionality (built-in or in plugins) is modified and optimized
toward this end, otherwise, they must be opt-in.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Close to metal.&lt;/strong&gt; There's less between you and vanilla Emacs, by design.
There's less to grok. Modules should be syntactically sweet and backend logic
explicit and abstraction-light. The code itself ought to be designed as if
grokking it were part of the user experience; and it is!&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Opinionated, but not stubborn.&lt;/strong&gt; Doom is a bundle of reasonable defaults
and curated opinions, but you aren't stuck with it. Use as little or as much
of it as you like. Use it as-is as a complete Emacs distribution; disable
everything and use it as a baseline for your own; or anywhere in between.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Your system, your rules.&lt;/strong&gt; There are more ways to set up your programming
environment than there are dislikes on Youtube Rewind '18, so Doom and its
plugins promise not to &lt;em&gt;automatically&lt;/em&gt; (and definitely not &lt;em&gt;silently&lt;/em&gt;) install
system dependencies. This means fonts, packages and programs. &lt;code&gt;doom doctor&lt;/code&gt;
will tell you what's missing though!&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-features" class="anchor" aria-hidden="true" href="#features"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;A curated set of sane defaults for all packages, all (major) OSes, and Emacs
itself.&lt;/li&gt;
&lt;li&gt;Support for &lt;em&gt;many&lt;/em&gt; programming languages. Too many to list. Includes syntax
highlighting, linters/checker integration, inline code evaluation, code
completion (where possible), REPLs, documentation lookups, snippets, and more!&lt;/li&gt;
&lt;li&gt;Support for &lt;em&gt;many&lt;/em&gt; tools, like docker, pass, ansible, terraform, and more.&lt;/li&gt;
&lt;li&gt;Minimalistic good looks inspired by modern editors.&lt;/li&gt;
&lt;li&gt;A modular architecture for a more organized Emacs configuration.&lt;/li&gt;
&lt;li&gt;A custom elisp library to help you simplify your config.&lt;/li&gt;
&lt;li&gt;A declarative &lt;a href="core/autoload/packages.el"&gt;package management system&lt;/a&gt; (powered by
&lt;a href="https://github.com/raxod502/straight.el"&gt;straight.el&lt;/a&gt;) with a command line interface. Install packages
from anywhere, not just (M)ELPA.&lt;/li&gt;
&lt;li&gt;Vim-emulation powered by &lt;a href="https://github.com/emacs-evil/evil"&gt;evil-mode&lt;/a&gt;, including ports of
popular vim plugins and functionality.&lt;/li&gt;
&lt;li&gt;A Spacemacs-esque &lt;a href="modules/config/default/+evil-bindings.el"&gt;keybinding scheme&lt;/a&gt;, centered around leader
and localleader prefix keys (&lt;kbd&gt;SPC&lt;/kbd&gt; and &lt;kbd&gt;SPC&lt;/kbd&gt;&lt;kbd&gt;m&lt;/kbd&gt;, by
default).&lt;/li&gt;
&lt;li&gt;A rule-based &lt;a href="modules/ui/popup/README.org"&gt;popup management system&lt;/a&gt; that dictates how
temporary or disposable buffers are displayed (and disposed of).&lt;/li&gt;
&lt;li&gt;Automatic indentation detection and &lt;a href="http://editorconfig.org/" rel="nofollow"&gt;editorconfig&lt;/a&gt;
integration. Let someone else argue about tabs vs &lt;strong&gt;_*&lt;strong&gt;spaces&lt;/strong&gt;*_&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Project-management tools and framework-specific minor modes with their own
snippets libraries.&lt;/li&gt;
&lt;li&gt;Project search (and replace) utilities, powered by
&lt;a href="https://github.com/ggreer/the_silver_searcher"&gt;the_silver_searcher&lt;/a&gt; or &lt;a href="https://github.com/BurntSushi/ripgrep"&gt;ripgrep&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Isolated and persistent workspaces (also substitutes for vim tabs).&lt;/li&gt;
&lt;li&gt;An environment variables file generator and loader, so that Emacs can
perfectly inherit your shell configuration.&lt;/li&gt;
&lt;li&gt;Everything is optional!&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;a id="user-content-getting-help" class="anchor" aria-hidden="true" href="#getting-help"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Getting Help&lt;/h1&gt;
&lt;h2&gt;&lt;a id="user-content-community" class="anchor" aria-hidden="true" href="#community"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Community&lt;/h2&gt;
&lt;p&gt;We have &lt;a href="https://discord.gg/bcZ6P3y" rel="nofollow"&gt;a Discord server&lt;/a&gt;! Hop on and say hi!&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-troubleshooting" class="anchor" aria-hidden="true" href="#troubleshooting"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Troubleshooting&lt;/h2&gt;
&lt;p&gt;Encountered strange behavior or an error? Here are some things to try before you
shoot off that bug report:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Run &lt;code&gt;bin/doom refresh&lt;/code&gt;. This ensures Doom is properly set up and its autoloads
files are up-to-date.&lt;/li&gt;
&lt;li&gt;If you have byte-compiled your config (with &lt;code&gt;bin/doom compile&lt;/code&gt;), see if
&lt;code&gt;bin/doom clean&lt;/code&gt; makes the issue go away. Never debug issues with a
byte-compiled config, it will make your job harder.&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;bin/doom doctor&lt;/code&gt; to detect common issues in your development environment.&lt;/li&gt;
&lt;li&gt;Search Doom's issue tracker for mention of any error messages you've received.&lt;/li&gt;
&lt;li&gt;&lt;a href="docs/faq.org"&gt;Visit our FAQ&lt;/a&gt; to see if your issue is listed.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If all else fails, &lt;a href="https://github.com/hlissner/doom-emacs/issues/new"&gt;file that bug report&lt;/a&gt;! Please include the
behavior you've observed, the behavior you expected, and any error messages or
warnings logged to the *Messages* buffer (can be opened with &lt;kbd&gt;SPC h
e&lt;/kbd&gt; or &lt;code&gt;M-x view-echo-area-messages&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;It's a great help if you included a backtrace with errors, i.e. &lt;code&gt;M-x toggle-debug-on-error&lt;/code&gt; then recreating the error(s).&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-contributing" class="anchor" aria-hidden="true" href="#contributing"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contributing&lt;/h2&gt;
&lt;p&gt;Doom (and my Emacs work in general) is a labor of love and incurable madness,
done on my spare time. If you'd like to support my work, there are many things
you can do to help; I welcome any contribution!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I love pull requests and bug reports. Check out the &lt;a href="docs/contributing.org"&gt;Contributing
Guidelines&lt;/a&gt; to find out how you can help out.&lt;/li&gt;
&lt;li&gt;I welcome Elisp pointers! Don't hesitate to &lt;a href="https://github.com/hlissner/doom-emacs/issues/new"&gt;tell me my Elisp-fu
sucks&lt;/a&gt; (but please tell me why).&lt;/li&gt;
&lt;li&gt;Hop on &lt;a href="https://discord.gg/bcZ6P3y" rel="nofollow"&gt;our Discord server&lt;/a&gt; and say hi! Help others out, hang out
or talk to me about Emacs, or gamedev, or programming, machine learning,
physics, pixel art, anime, gaming -- anything you like. Nourish this lonely
soul!&lt;/li&gt;
&lt;li&gt;If you'd like to support my work financially, consider buying me a drink
through &lt;a href="https://liberapay.com/hlissner/donate" rel="nofollow"&gt;liberapay&lt;/a&gt; or &lt;a href="https://paypal.me/henriklissner/10" rel="nofollow"&gt;paypal&lt;/a&gt;. Donations are a
great help. My work here contends with studies, ventures in indie gamedev, and
my freelance work.&lt;/li&gt;
&lt;/ul&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>hlissner</author><guid isPermaLink="false">https://github.com/hlissner/doom-emacs</guid><pubDate>Tue, 26 Nov 2019 00:02:00 GMT</pubDate></item><item><title>emacs-lsp/lsp-mode #3 in Emacs Lisp, Today</title><link>https://github.com/emacs-lsp/lsp-mode</link><description>&lt;p&gt;&lt;i&gt;Emacs client/library for the Language Server Protocol&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body org" data-path="README.org"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;p&gt;&lt;a href="https://melpa.org/#/lsp-mode" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/9af67d09707b47dd26115a48505d481f9dcdd805/68747470733a2f2f6d656c70612e6f72672f7061636b616765732f6c73702d6d6f64652d62616467652e737667" alt="https://melpa.org/packages/lsp-mode-badge.svg" data-canonical-src="https://melpa.org/packages/lsp-mode-badge.svg" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a href="https://stable.melpa.org/#/lsp-mode" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/7a2cc5cd5fb1a171dde8e45435a353f849853123/68747470733a2f2f737461626c652e6d656c70612e6f72672f7061636b616765732f6c73702d6d6f64652d62616467652e737667" alt="https://stable.melpa.org/packages/lsp-mode-badge.svg" data-canonical-src="https://stable.melpa.org/packages/lsp-mode-badge.svg" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a href="https://gitter.im/emacs-lsp/lsp-mode" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/40a1fe7a717b706a101e6e1d917dfdb3f422a8c3/68747470733a2f2f6261646765732e6769747465722e696d2f656d6163732d6c73702f6c73702d6d6f64652e737667" alt="https://badges.gitter.im/emacs-lsp/lsp-mode.svg" data-canonical-src="https://badges.gitter.im/emacs-lsp/lsp-mode.svg" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a href="https://travis-ci.org/emacs-lsp/lsp-mode" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/5674691682ca175709f1682ede1931f44a188aef/68747470733a2f2f7472617669732d63692e6f72672f656d6163732d6c73702f6c73702d6d6f64652e7376673f6272616e63683d6d6173746572" alt="https://travis-ci.org/emacs-lsp/lsp-mode.svg?branch=master" data-canonical-src="https://travis-ci.org/emacs-lsp/lsp-mode.svg?branch=master" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="examples/logo.png"&gt;&lt;img src="examples/logo.png" alt="examples/logo.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-language-server-protocol-support-for-emacs" class="anchor" aria-hidden="true" href="#language-server-protocol-support-for-emacs"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Language Server Protocol Support for Emacs&lt;/h1&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="examples/head.png"&gt;&lt;img src="examples/head.png" alt="examples/head.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-table-of-contents" class="anchor" aria-hidden="true" href="#table-of-contents"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Table of Contents&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="#language-server-protocol-support-for-emacs"&gt;Language Server Protocol Support for Emacs&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href="#why"&gt;Why?&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#overview"&gt;Overview&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#installation"&gt;Installation&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href="#install-via-melpa"&gt;Install via melpa&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href="#configuration"&gt;Configuration&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href="#install-language-server"&gt;Install language server&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href="#configure-lsp-mode"&gt;Configure lsp-mode&lt;/a&gt;
            &lt;ul&gt;
              &lt;li&gt;&lt;a href="#vanilla-emacs"&gt;Vanilla Emacs&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href="#spacemacs"&gt;Spacemacs&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href="#use-package"&gt;use-package&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href="#docker"&gt;Docker&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;&lt;a href="#how-does-it-work"&gt;How does it work?&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href="#supported-languages"&gt;Supported languages&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#commands"&gt;Commands&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#settings"&gt;Settings&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#screenshots"&gt;Screenshots&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#extensions"&gt;Extensions&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href="#tramp"&gt;TRAMP&lt;/a&gt;
            &lt;ul&gt;
              &lt;li&gt;&lt;a href="#how-does-it-work-1"&gt;How does it work?&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href="#sample-configuration"&gt;Sample configuration&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href="#dealing-with-stderr"&gt;Dealing with stderr&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href="#limitations"&gt;Limitations&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href="#file-watches"&gt;File watches&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href="#contributions"&gt;Contributions&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href="#members"&gt;Members&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href="#troubleshooting"&gt;Troubleshooting&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#adding-support-for-languages"&gt;Adding support for languages&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href="#registering-server"&gt;Registering server&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href="#sections"&gt;Sections&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href="#faq"&gt;FAQ&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#see-also"&gt;See also&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-why" class="anchor" aria-hidden="true" href="#why"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Why?&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;g-emoji class="g-emoji" alias="heart" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2764.png"&gt;❤️&lt;/g-emoji&gt; &lt;b&gt;Community Driven&lt;/b&gt;&lt;/li&gt;
  &lt;li&gt;&lt;g-emoji class="g-emoji" alias="gem" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f48e.png"&gt;💎&lt;/g-emoji&gt; &lt;b&gt;Fully featured&lt;/b&gt; - supports LSP core and Language Server non-standard extensions&lt;/li&gt;
  &lt;li&gt;&lt;g-emoji class="g-emoji" alias="rocket" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f680.png"&gt;🚀&lt;/g-emoji&gt; &lt;b&gt;Easy to configure&lt;/b&gt; - works out of the box and automatically upgrades if additional packages are present&lt;/li&gt;
  &lt;li&gt;&lt;g-emoji class="g-emoji" alias="star2" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f31f.png"&gt;🌟&lt;/g-emoji&gt; &lt;b&gt;Flexible&lt;/b&gt; - could be configured as full-blown IDE with flashy UI or minimal distraction free&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-overview" class="anchor" aria-hidden="true" href="#overview"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Overview&lt;/h2&gt;
&lt;p&gt;Client for &lt;a href="https://github.com/Microsoft/language-server-protocol/"&gt;Language Server Protocol&lt;/a&gt; (v3.14). &lt;a href="https://github.com/emacs-lsp/lsp-mode"&gt;lsp-mode&lt;/a&gt; aims to provide IDE-like experience by providing optional integration with the most popular Emacs packages like &lt;code&gt;company&lt;/code&gt;, &lt;code&gt;flycheck&lt;/code&gt; and &lt;code&gt;projectile&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Non-blocking asynchronous calls&lt;/li&gt;
  &lt;li&gt;Real-time Diagnostics/linting (via builtin &lt;code&gt;flymake&lt;/code&gt; when Emacs &amp;gt; 26 or &lt;a href="https://github.com/flycheck/flycheck"&gt;flycheck&lt;/a&gt;/&lt;a href="https://github.com/emacs-lsp/lsp-ui"&gt;lsp-ui&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Code completion - using &lt;a href="https://github.com/tigersoldier/company-lsp"&gt;company-lsp&lt;/a&gt; or builtin &lt;code&gt;completion-at-point&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Hovers - using &lt;a href="https://github.com/emacs-lsp/lsp-ui"&gt;lsp-ui&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Code actions - using &lt;code&gt;lsp-execute-code-action&lt;/code&gt; or &lt;a href="https://github.com/emacs-lsp/lsp-ui"&gt;lsp-ui&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Code outline - using builtin &lt;a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Imenu.html" rel="nofollow"&gt;imenu&lt;/a&gt; or &lt;code&gt;helm-imenu&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Code navigation - using builtin &lt;a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Xref.html" rel="nofollow"&gt;xref&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Code lens (references/implementations) - using builtin &lt;a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Xref.html" rel="nofollow"&gt;xref&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Highlights&lt;/li&gt;
  &lt;li&gt;Formatting&lt;/li&gt;
  &lt;li&gt;Debugger - &lt;a href="https://github.com/yyoncho/dap-mode/"&gt;dap-mode&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Helm integration - &lt;a href="https://github.com/emacs-lsp/helm-lsp/"&gt;helm-lsp&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Ivy integration - &lt;a href="https://github.com/emacs-lsp/lsp-ivy/"&gt;lsp-ivy&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Treemacs integration - &lt;a href="https://github.com/emacs-lsp/lsp-treemacs"&gt;lsp-treemacs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Semantic highlighting (as currently implemented by JDT LS and unreleased builds of clangd, cf. &lt;a href="https://github.com/microsoft/vscode-languageserver-node/pull/367"&gt;Semantic highlighting spec&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installation&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-install-via-melpa" class="anchor" aria-hidden="true" href="#install-via-melpa"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Install via melpa&lt;/h3&gt;
&lt;p&gt;The recommended way to install &lt;code&gt;lsp-mode&lt;/code&gt; is via &lt;code&gt;package.el&lt;/code&gt; - the built-in package manager in Emacs. &lt;code&gt;lsp-mode&lt;/code&gt; is available on the two major &lt;code&gt;package.el&lt;/code&gt; community maintained repos - &lt;a href="http://stable.melpa.org" rel="nofollow"&gt;MELPA Stable&lt;/a&gt; and &lt;a href="http://melpa.org" rel="nofollow"&gt;MELPA&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;M-x &lt;code&gt;package-install&lt;/code&gt; [RET] &lt;code&gt;lsp-mode&lt;/code&gt; [RET]&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-configuration" class="anchor" aria-hidden="true" href="#configuration"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Configuration&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-install-language-server" class="anchor" aria-hidden="true" href="#install-language-server"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Install language server&lt;/h3&gt;
&lt;p&gt;Check the table bellow with the list of supported servers and the corresponding instructions on how to install the server.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-configure-lsp-mode" class="anchor" aria-hidden="true" href="#configure-lsp-mode"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Configure lsp-mode&lt;/h3&gt;
&lt;h4&gt;&lt;a id="user-content-vanilla-emacs" class="anchor" aria-hidden="true" href="#vanilla-emacs"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Vanilla Emacs&lt;/h4&gt;
&lt;p&gt;You could go minimal and use &lt;code&gt;lsp-mode&lt;/code&gt; as it is without external packages with the built-in &lt;code&gt;flymake&lt;/code&gt; and &lt;code&gt;completion-at-point&lt;/code&gt; or you could install the following extensions for better experience:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;install &lt;a href="https://github.com/emacs-lsp/lsp-ui"&gt;lsp-ui&lt;/a&gt; for &lt;a href="https://github.com/flycheck/flycheck"&gt;flycheck&lt;/a&gt; integration and higher level UI modules.&lt;/li&gt;
  &lt;li&gt;install &lt;a href="https://github.com/tigersoldier/company-lsp"&gt;company-lsp&lt;/a&gt; if you want to use &lt;code&gt;company-mode&lt;/code&gt; for completion.&lt;/li&gt;
  &lt;li&gt;install &lt;a href="https://github.com/emacs-lsp/lsp-treemacs"&gt;lsp-treemacs&lt;/a&gt; for project wide error overview.&lt;/li&gt;
  &lt;li&gt;install &lt;a href="https://github.com/emacs-lsp/helm-lsp"&gt;helm-lsp&lt;/a&gt; provides on type completion for &lt;code&gt;xref-apropos&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;install &lt;a href="https://github.com/emacs-lsp/dap-mode"&gt;dap-mode&lt;/a&gt; if your language is supported by the debugger.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;require&lt;/span&gt; &lt;span class="pl-c1"&gt;'lsp-mode&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;add-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;'XXX-mode-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;#&lt;span class="pl-c1"&gt;'lsp&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;where &lt;code&gt;XXX&lt;/code&gt; could be major mode like &lt;code&gt;python&lt;/code&gt;, &lt;code&gt;java&lt;/code&gt;, &lt;code&gt;c++&lt;/code&gt;. Alternatively, if you want to minimize you configuration you may use &lt;code&gt;prog-mode-hook&lt;/code&gt;. In case you do that, &lt;code&gt;lsp&lt;/code&gt; will try to start for each programming mode and echo a message when there is no client registered for the current mode or if the corresponding server is not present. In addition, &lt;code&gt;lsp-mode&lt;/code&gt; will automatically detect and configure &lt;a href="https://github.com/emacs-lsp/lsp-ui"&gt;lsp-ui&lt;/a&gt; and &lt;a href="https://github.com/tigersoldier/company-lsp"&gt;company-lsp&lt;/a&gt;. To turn off that behavior you could set &lt;code&gt;lsp-auto-configure&lt;/code&gt; to &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To defer LSP server startup (and DidOpen notifications) until the buffer is visible you can use &lt;code&gt;lsp-deferred&lt;/code&gt; instead of &lt;code&gt;lsp&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;add-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;'XXX-mode-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;#&lt;span class="pl-c1"&gt;'lsp-deferred&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content-spacemacs" class="anchor" aria-hidden="true" href="#spacemacs"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Spacemacs&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://github.com/emacs-lsp/lsp-mode"&gt;lsp-mode&lt;/a&gt; is included in spacemacs develop branch. Add &lt;code&gt;lsp&lt;/code&gt; to &lt;code&gt;dotspacemacs-configuration-layers&lt;/code&gt; and configure the language that you want to use to be backed by &lt;code&gt;lsp&lt;/code&gt; backend.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-use-package" class="anchor" aria-hidden="true" href="#use-package"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;use-package&lt;/h4&gt;
&lt;p&gt;Replace &lt;code&gt;(require 'lsp-mode)&lt;/code&gt; with the following if you use use-package.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; lsp-mode
  &lt;span class="pl-c1"&gt;:hook&lt;/span&gt; (XXX-mode &lt;span class="pl-k"&gt;.&lt;/span&gt; lsp)
  &lt;span class="pl-c1"&gt;:commands&lt;/span&gt; lsp)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; optionally&lt;/span&gt;
(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; lsp-ui &lt;span class="pl-c1"&gt;:commands&lt;/span&gt; lsp-ui-mode)
(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; company-lsp &lt;span class="pl-c1"&gt;:commands&lt;/span&gt; company-lsp)
(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; helm-lsp &lt;span class="pl-c1"&gt;:commands&lt;/span&gt; helm-lsp-workspace-symbol)
(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; lsp-treemacs &lt;span class="pl-c1"&gt;:commands&lt;/span&gt; lsp-treemacs-errors-list)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; optionally if you want to use debugger&lt;/span&gt;
(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; dap-mode)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; (use-package dap-LANGUAGE) to load the dap adapter for your language&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To defer LSP server startup (and DidOpen notifications) until the buffer is visible you can use &lt;code&gt;lsp-deferred&lt;/code&gt; instead of &lt;code&gt;lsp&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; lsp-mode
  &lt;span class="pl-c1"&gt;:hook&lt;/span&gt; (XXX-mode &lt;span class="pl-k"&gt;.&lt;/span&gt; lsp-deferred)
  &lt;span class="pl-c1"&gt;:commands&lt;/span&gt; (lsp lsp-deferred))&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content-docker" class="anchor" aria-hidden="true" href="#docker"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Docker&lt;/h4&gt;
&lt;p&gt;Refer to &lt;a href="https://github.com/emacs-lsp/lsp-docker/"&gt;lsp-docker&lt;/a&gt; README which provide a guide how you can run &lt;code&gt;lsp-mode&lt;/code&gt; in &lt;code&gt;docker&lt;/code&gt; container.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-how-does-it-work" class="anchor" aria-hidden="true" href="#how-does-it-work"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;How does it work?&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;lsp-mode&lt;/code&gt; has predefined list of server configurations (loaded in &lt;code&gt;lsp-clients.el&lt;/code&gt;) containing a mapping from &lt;code&gt;major-mode&lt;/code&gt; to the server configuration or by using activation function. In addition to the default server configuration located in &lt;code&gt;lsp-clients.el&lt;/code&gt; there are few languages servers which require separate package(check &lt;a href="#supported-languages"&gt;Supported languages&lt;/a&gt;). When you open a file from a particular project &lt;code&gt;lsp-mode&lt;/code&gt; and call &lt;code&gt;lsp&lt;/code&gt; command &lt;code&gt;lsp-mode&lt;/code&gt; will look for server registrations able to handle current file. If there is such client &lt;code&gt;lsp-mode&lt;/code&gt; will look for the project root. If you open a file from the project for the first time you will be prompted to define the current project root. Once the project root is selected it is saved in &lt;code&gt;lsp-session&lt;/code&gt; file and it will be loaded the next time you start Emacs so you no longer will be asked for a project root when you open a file from that project. Later if you want to change the project root you may use &lt;code&gt;lsp-workspace-folder-remove&lt;/code&gt; to remove the project and call &lt;code&gt;lsp-workspace-folder-add&lt;/code&gt; to add the root. If you want to force starting a particular language server in a file you may use &lt;code&gt;C-u&lt;/code&gt; &lt;code&gt;M-x&lt;/code&gt; &lt;code&gt;lsp&lt;/code&gt; which will prompt you to select language server to start.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-supported-languages" class="anchor" aria-hidden="true" href="#supported-languages"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Supported languages&lt;/h2&gt;
&lt;p&gt;Some of the servers are directly supported by &lt;code&gt;lsp-mode&lt;/code&gt; by requiring
  &lt;code&gt;lsp-clients.el&lt;/code&gt; while others require installing additional packages which provide
  server specific functionality.&lt;/p&gt;
&lt;table&gt;
  &lt;tbody&gt;&lt;tr&gt;&lt;th&gt;Language&lt;/th&gt;&lt;th&gt;Language Server&lt;/th&gt;&lt;th&gt;Built-in&lt;/th&gt;&lt;th&gt;Installation command&lt;/th&gt;&lt;th&gt;Debugger&lt;/th&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Ada&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/AdaCore/ada_language_server"&gt;ada_language_server&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/AdaCore/ada_language_server#install"&gt;Installation instructions&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes (gdb)&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Angular&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/angular/vscode-ng-language-service/"&gt;vscode-ng-language-service&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/emacs-lsp/lsp-mode/wiki/Install-Angular-Language-server"&gt;Installation instructions&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Not relevant&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Bash&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/mads-hartmann/bash-language-server"&gt;bash-language-server&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;npm i -g bash-language-server&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;C++&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/MaskRay/ccls"&gt;ccls&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/MaskRay/emacs-ccls"&gt;emacs-ccls&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/MaskRay/ccls"&gt;ccls&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes (gdb or lldb)&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;C++&lt;/td&gt;&lt;td&gt;&lt;a href="https://clang.llvm.org/extra/clangd.html" rel="nofollow"&gt;clangd&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://clang.llvm.org/extra/clangd.html" rel="nofollow"&gt;clangd&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes (gdb or lldb)&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;C++&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/cquery-project/cquery"&gt;cquery&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/cquery-project/emacs-cquery"&gt;emacs-cquery&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/cquery-project/cquery"&gt;cquery&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes (gdb or lldb)&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;C#&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/OmniSharp/omnisharp-roslyn"&gt;OmniSharp-Roslyn&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/OmniSharp/omnisharp-roslyn"&gt;OmniSharp-Roslyn&lt;/a&gt;&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Clojure&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/snoe/clojure-lsp"&gt;clojure-lsp&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/snoe/clojure-lsp"&gt;clojure-lisp&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;CSS/LessCSS/SASS/SCSS&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/vscode-langservers/vscode-css-languageserver-bin"&gt;css&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;npm install -g vscode-css-languageserver-bin&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Dart&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/dart-lang/sdk/blob/master/pkg/analysis_server/tool/lsp_spec/README.md"&gt;dart_analysis_server&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;built into dart-sdk&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Dockerfile&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/rcjsuen/dockerfile-language-server-nodejs"&gt;dockerfile-language-server-nodejs&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;npm install -g dockerfile-language-server-nodejs&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Dart&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/natebosch/dart_language_server"&gt;dart_language_server&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;pub global activate dart_language_server&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Elixir&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/JakeBecker/elixir-ls"&gt;elixir-ls&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/JakeBecker/elixir-ls"&gt;elixir-ls&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Elm&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/elm-tooling/elm-language-server"&gt;elmLS&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;npm i -g @elm-tooling/elm-language-server, or clone the repository and follow installation instructions&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Erlang&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/erlang-ls/erlang_ls"&gt;erlang_ls&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/erlang-ls/erlang_ls"&gt;erlang_ls&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;F#&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/fsharp/FsAutoComplete"&gt;fsautocomplete&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Automatic by &lt;a href="https://github.com/emacs-lsp/lsp-mode/blob/master/lsp-fsharp.el"&gt;lsp-fsharp&lt;/a&gt;&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Fortran&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/hansec/fortran-language-server"&gt;fortran-language-server&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;pip install fortran-language-server&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Go&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/golang/tools/tree/master/gopls"&gt;gopls&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;code&gt;go get golang.org/x/tools/gopls@latest&lt;/code&gt; &lt;a href="https://github.com/golang/tools/blob/master/gopls/doc/user.md#installation"&gt;docs&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Go&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/saibing/bingo"&gt;bingo&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/saibing/bingo/wiki/Install"&gt;bingo&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Groovy&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/palantir/language-servers"&gt;groovy-language-server&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/palantir/language-servers"&gt;groovy-language-server&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Hack&lt;/td&gt;&lt;td&gt;&lt;a href="https://docs.hhvm.com/hhvm/" rel="nofollow"&gt;hhvm&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://docs.hhvm.com/hhvm/installation/introduction" rel="nofollow"&gt;hhvm&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;HTML&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/vscode-langservers/vscode-html-languageserver"&gt;html&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;npm install -g vscode-html-languageserver-bin&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Haskell&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/haskell/haskell-ide-engine"&gt;IDE engine&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/emacs-lsp/lsp-haskell"&gt;lsp-haskell&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/haskell/haskell-ide-engine"&gt;IDE engine&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Lua&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/EmmyLua/EmmyLua-LanguageServer"&gt;EmmyLua&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/emacs-lsp/lsp-mode/wiki/Install-EmmyLua-Language-server"&gt;Installation&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Java&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/eclipse/eclipse.jdt.ls"&gt;Eclipse JDT LS&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/emacs-lsp/lsp-java"&gt;lsp-java&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Automatic by &lt;a href="https://github.com/emacs-lsp/lsp-java"&gt;lsp-java&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;JavaScript/TypeScript&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/theia-ide/typescript-language-server"&gt;typescript-language-server&lt;/a&gt;  (recommended)&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;npm i -g typescript-language-server; npm i -g typescript&lt;/td&gt;&lt;td&gt;Yes (Firefox/Chrome)&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;JavaScript/TypeScript&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/sourcegraph/javascript-typescript-langserver"&gt;javascript-typescript-stdio&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;npm i -g javascript-typescript-langserver&lt;/td&gt;&lt;td&gt;Yes (Firefox/Chrome)&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;JavaScript Flow&lt;/td&gt;&lt;td&gt;&lt;a href="https://flow.org" rel="nofollow"&gt;flow&lt;/a&gt; (add-on if working on a Flow file)&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://flow.org" rel="nofollow"&gt;flow&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes (Firefox/Chrome)&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Julia&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/non-Jedi/lsp-julia"&gt;lsp-julia&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/non-Jedi/lsp-julia"&gt;lsp-julia&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/JuliaEditorSupport/LanguageServer.jl"&gt;LanguageServer.jl&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Kotlin&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/fwcd/KotlinLanguageServer"&gt;kotlin-language-server&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/fwcd/KotlinLanguageServer"&gt;kotlin-language-server&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;OCaml&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/freebroccolo/ocaml-language-server"&gt;ocaml-language-server&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/freebroccolo/ocaml-language-server"&gt;ocaml-language-server&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;OCaml&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/merlin/ocaml"&gt;merlin&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/ocaml/merlin"&gt;merlin&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;PHP(recommended)&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/bmewburn/vscode-intelephense"&gt;intelephense&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;npm i intelephense -g&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;PHP&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/felixfbecker/php-language-server"&gt;php-language-server&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/felixfbecker/php-language-server"&gt;php-language-server&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Powershell&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/PowerShell/PowerShellEditorServices"&gt;PowerShellEditorServices&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Automatic&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Python&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/palantir/python-language-server"&gt;pyls&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;pip install ‘python-language-server[all]’&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Python(Microsoft)&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/Microsoft/python-language-server"&gt;Microsoft Python Language Server&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/andrew-christianson/lsp-python-ms/"&gt;lsp-python-ms&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/andrew-christianson/lsp-python-ms/"&gt;lsp-python-ms&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;R&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/REditorSupport/languageserver"&gt;languageserver&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/andrew-christianson/lsp-python-ms/"&gt;languageserver&lt;/a&gt;&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Ruby&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/castwide/solargraph"&gt;solargraph&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;gem install solargraph&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Rust&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/rust-lang-nursery/rls"&gt;rls&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/rust-lang-nursery/rls"&gt;rls&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Rust&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/rust-analyzer/rust-analyzer"&gt;rust-analyzer&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/rust-analyzer/rust-analyzer#language-server-quick-start"&gt;rust-analyzer&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Scala&lt;/td&gt;&lt;td&gt;&lt;a href="https://scalameta.org/metals" rel="nofollow"&gt;Metals&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://scalameta.org/metals/docs/editors/emacs.html" rel="nofollow"&gt;Metals&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Swift&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/apple/sourcekit-lsp"&gt;sourcekit-LSP&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/emacs-lsp/lsp-sourcekit"&gt;lsp-sourcekit&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/apple/sourcekit-lsp"&gt;sourcekit-LSP&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes (via llvm debug adapter)&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Terraform&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/juliosueiras/terraform-lsp"&gt;terraform-lsp&lt;/a&gt;&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;Git clone outside of &lt;code&gt;$GOPATH&lt;/code&gt;; go install. (Requires go &amp;gt; 1.11)&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;TeX, LaTeX, etc.&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/astoff/digestif"&gt;Digestif&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;luarocks install –server=&lt;a href="http://luarocks.org/dev" rel="nofollow"&gt;http://luarocks.org/dev&lt;/a&gt; digestif&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;VHDL&lt;/td&gt;&lt;td&gt;&lt;a href="http://www.vhdltool.com" rel="nofollow"&gt;VHDL Tool&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Download from &lt;a href="http://www.vhdltool.com/download" rel="nofollow"&gt;http://www.vhdltool.com/download&lt;/a&gt;&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Vimscript&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/iamcco/vim-language-server"&gt;vim-language-server&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;npm install -g vim-language-server&lt;/td&gt;&lt;td&gt;n/a&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Vue&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/vuejs/vetur/tree/master/server"&gt;vue-language-server&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;npm install -g vue-language-server&lt;/td&gt;&lt;td&gt;Yes (Firefox/Chrome)&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;XML&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/angelozerr/lsp4xml"&gt;lsp4xml&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Download from &lt;a href="https://github.com/angelozerr/lsp4xml/releases"&gt;lsp4xml releases&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;YAML&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/redhat-developer/yaml-language-server"&gt;yaml&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;npm install -g yaml-language-server&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2&gt;&lt;a id="user-content-commands" class="anchor" aria-hidden="true" href="#commands"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Commands&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;lsp-describe-session&lt;/code&gt; - Display session folders and running servers.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-describe-thing-at-point&lt;/code&gt; - Display help for the thing at point.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-execute-code-action&lt;/code&gt; - Execute code action&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-format-buffer&lt;/code&gt; - Format current buffer&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-organize-imports&lt;/code&gt; - Organize library imports&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-goto-implementation&lt;/code&gt; - Go to implementation&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-goto-type-definition&lt;/code&gt; - Go to type definition&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-rename&lt;/code&gt; - Rename symbol at point&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-restart-workspace&lt;/code&gt; - Restart project&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-symbol-highlight&lt;/code&gt; - Highlight all relevant references to the symbol under point.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-workspace-folders-add&lt;/code&gt; - Add workspace folder&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-workspace-folders-remove&lt;/code&gt; - Remove workspace folder&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-workspace-folders-switch&lt;/code&gt; - Switch workspace folder&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;imenu&lt;/code&gt; or &lt;code&gt;helm-imenu&lt;/code&gt; - display document structure.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;completion-at-point&lt;/code&gt; - display completion using built-in emacs &lt;code&gt;completion-at-point&lt;/code&gt; framework.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-find-definition&lt;/code&gt; - to find the definition for the symbol under point.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-find-references&lt;/code&gt; - Find references for the symbol under point.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-disconnect&lt;/code&gt; - Disconnect the buffer from the language server.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-lens-show&lt;/code&gt; - Show lenses in the current file&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-lens-hide&lt;/code&gt; - Hide lenses in the current file&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-lens-mode&lt;/code&gt;  - Turn on/off lenses in the current file.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-avy-lens&lt;/code&gt; - Click lens using &lt;code&gt;avy&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-settings" class="anchor" aria-hidden="true" href="#settings"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Settings&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;lsp-log-io&lt;/code&gt; - If non-nil, print all messages to and from the language server to &lt;code&gt;*lsp-log*&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-print-performance&lt;/code&gt; - If non-nil, print performance info. to &lt;code&gt;*lsp-log*&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-inhibit-message&lt;/code&gt; - If non-nil, inhibit the message echo via &lt;code&gt;inhibit-message&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-report-if-no-buffer&lt;/code&gt; - If non nil the errors will be reported even when the file is not open.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-keep-workspace-alive&lt;/code&gt; - If non nil keep workspace alive when the last workspace buffer is closed.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-enable-snippet&lt;/code&gt; - Enable/disable snippet completion support.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-auto-guess-root&lt;/code&gt; - Automatically guess the project root using projectile/project. Do &lt;b&gt;not&lt;/b&gt; use this setting unless you are familiar with &lt;code&gt;lsp-mode&lt;/code&gt; internals and you are sure that all of your projects are following &lt;code&gt;projectile=/=project.el&lt;/code&gt; conventions.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-restart&lt;/code&gt; - Defines how server exited event must be handled.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-session-file&lt;/code&gt; - File where session information is stored.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-auto-configure&lt;/code&gt; - Auto configure &lt;code&gt;lsp-mode&lt;/code&gt;. When set to t &lt;code&gt;lsp-mode&lt;/code&gt; will auto-configure &lt;code&gt;lsp-ui&lt;/code&gt; and &lt;code&gt;company-lsp&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-document-sync-method&lt;/code&gt; - How to sync the document with the language server.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-auto-execute-action&lt;/code&gt; - Auto-execute single action.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-eldoc-render-all&lt;/code&gt; - Display all of the info returned by &lt;code&gt;document/onHover&lt;/code&gt;. If this is nil, &lt;code&gt;eldoc&lt;/code&gt; will show only the symbol information.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-signature-render-all&lt;/code&gt; - Display all of the info returned by &lt;code&gt;textDocument/signatureHelp&lt;/code&gt;. If this is nil, &lt;code&gt;eldoc&lt;/code&gt; will show only the active signature.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-enable-completion-at-point&lt;/code&gt; - Enable &lt;code&gt;completion-at-point&lt;/code&gt; integration.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-enable-xref&lt;/code&gt; - Enable xref integration.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-prefer-flymake&lt;/code&gt; - If you prefer flycheck and &lt;code&gt;lsp-ui-flycheck&lt;/code&gt; is available, &lt;code&gt;(setq lsp-prefer-flymake nil)&lt;/code&gt;. If set to &lt;code&gt;:none&lt;/code&gt; neither of two will be enabled.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-enable-indentation&lt;/code&gt; - Indent regions using the file formatting functionality provided by the language server.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-enable-on-type-formatting&lt;/code&gt; - Enable &lt;code&gt;textDocument/onTypeFormatting&lt;/code&gt; integration.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-before-save-edits&lt;/code&gt; - If non-nil, &lt;code&gt;lsp-mode&lt;/code&gt; will apply edits suggested by the language server before saving a document.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-imenu-show-container-name&lt;/code&gt; - Display the symbol’s container name in an imenu entry.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-imenu-container-name-separator&lt;/code&gt; - Separator string to use to separate the container name from the symbol while displaying imenu entries.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-imenu-sort-methods&lt;/code&gt; - How to sort the imenu items. The value is a list of &lt;code&gt;kind&lt;/code&gt;, &lt;code&gt;name&lt;/code&gt; or &lt;code&gt;position&lt;/code&gt;. Priorities are determined by the index of the element.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-response-timeout&lt;/code&gt; - Number of seconds to wait for a response from the language server before timing out.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-enable-file-watchers&lt;/code&gt; - If non-nil lsp-mode will watch the files in the workspace if the server has requested that.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-server-trace&lt;/code&gt; - Request trace mode on the language server.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-enable-semantic-highlighting&lt;/code&gt; - Enable experimental semantic highlighting support&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-enable-imenu&lt;/code&gt; - If non-nil, automatically enable imenu integration when server provides &lt;code&gt;textDocument/documentSymbol&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-screenshots" class="anchor" aria-hidden="true" href="#screenshots"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Screenshots&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;RUST Completion with company-lsp
    &lt;a target="_blank" rel="noopener noreferrer" href="examples/completion.png"&gt;&lt;img src="examples/completion.png" alt="examples/completion.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Typescript references using lsp-ui
    &lt;a target="_blank" rel="noopener noreferrer" href="examples/references.png"&gt;&lt;img src="examples/references.png" alt="examples/references.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Debugging Python using dap-mode
    &lt;a target="_blank" rel="noopener noreferrer" href="examples/python_debugging.png"&gt;&lt;img src="examples/python_debugging.png" alt="examples/python_debugging.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Call hierarchy via ccls
    &lt;a target="_blank" rel="noopener noreferrer" href="examples/call-hierarchy-ccls.png"&gt;&lt;img src="examples/call-hierarchy-ccls.png" alt="examples/call-hierarchy-ccls.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Metals Doctor
    &lt;a target="_blank" rel="noopener noreferrer" href="examples/metals-doctor.png"&gt;&lt;img src="examples/metals-doctor.png" alt="examples/metals-doctor.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Semantic highlighting as provided by clangd (built from unreleased 10.0 branch). In this screenshot, all other font-locking has been disabled (hence no syntax highlighting of comments or basic keywords such as &lt;code&gt;auto&lt;/code&gt;)
    &lt;a target="_blank" rel="noopener noreferrer" href="examples/clangd_semantic_highlighting.png"&gt;&lt;img src="examples/clangd_semantic_highlighting.png" alt="examples/clangd_semantic_highlighting.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-extensions" class="anchor" aria-hidden="true" href="#extensions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Extensions&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-tramp" class="anchor" aria-hidden="true" href="#tramp"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TRAMP&lt;/h3&gt;
&lt;p&gt;LSP mode has support for tramp buffers with the following requirements:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The language server has to be present on the remote server.&lt;/li&gt;
  &lt;li&gt;Having multi folder language server (like &lt;a href="https://github.com/eclipse/eclipse.jdt.ls"&gt;Eclipse JDT LS&lt;/a&gt;) cannot have local and remote workspace folders.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a id="user-content-how-does-it-work-1" class="anchor" aria-hidden="true" href="#how-does-it-work-1"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;How does it work?&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;lsp-mode&lt;/code&gt; detects whether a particular file is located on remote machine and looks for a client which matches current file and it is marked as &lt;code&gt;:remote?&lt;/code&gt; t. Then &lt;code&gt;lsp-mode&lt;/code&gt; starts the client through tramp.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-sample-configuration" class="anchor" aria-hidden="true" href="#sample-configuration"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Sample configuration&lt;/h4&gt;
&lt;p&gt;Here it is example how you can configure python language server to work when using &lt;code&gt;TRAMP&lt;/code&gt;. Note that if you are trying to convert existing language server configuration you should copy all of it’s properties(e. g. &lt;code&gt;:request-handlers&lt;/code&gt;, &lt;code&gt;activation-fn&lt;/code&gt;, etc).&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(lsp-register-client
 (make-lsp-client &lt;span class="pl-c1"&gt;:new-connection&lt;/span&gt; (lsp-tramp-connection &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;binary-or-full-path&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
                  &lt;span class="pl-c1"&gt;:major-modes&lt;/span&gt; '(&lt;span class="pl-c1"&gt;python-mode&lt;/span&gt;)
                  &lt;span class="pl-c1"&gt;:remote?&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;
                  &lt;span class="pl-c1"&gt;:server-id&lt;/span&gt; &lt;span class="pl-c1"&gt;'pyls-remote&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content-dealing-with-stderr" class="anchor" aria-hidden="true" href="#dealing-with-stderr"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Dealing with stderr&lt;/h4&gt;
&lt;p&gt;With TRAMP, Emacs does not have an easy way to distinguish stdout and stderr, so when the underlying LSP process writes to stderr, it breaks the &lt;code&gt;lsp-mode&lt;/code&gt; parser. As a workaround, &lt;code&gt;lsp-mode&lt;/code&gt; is redirecting stderr to &lt;code&gt;/tmp/&amp;lt;process-name&amp;gt;-&amp;lt;id&amp;gt;~stderr&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-limitations" class="anchor" aria-hidden="true" href="#limitations"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Limitations&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-file-watches" class="anchor" aria-hidden="true" href="#file-watches"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;File watches&lt;/h3&gt;
&lt;p&gt;When some of the workspaces that are active in the current project requests file notifications via &lt;code&gt;workspace/didChangeWatchedFiles&lt;/code&gt; &lt;code&gt;lsp-mode&lt;/code&gt; will start monitoring each of the folders in the workspace for changes. In case your project contains a lot of files you might want to disable file monitoring via &lt;code&gt;lsp-enable-file-watchers&lt;/code&gt; (you may use dir-locals).&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-contributions" class="anchor" aria-hidden="true" href="#contributions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contributions&lt;/h2&gt;
&lt;p&gt;Contributions are very much welcome.&lt;/p&gt;
&lt;p&gt;Here is a throughput graph of the repository for the last few weeks:&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/dd9fb801ba02fc926f0ddf0c7d1590c2c228700f/68747470733a2f2f6772617068732e776166666c652e696f2f656d6163732d6c73702f6c73702d6d6f64652f7468726f7567687075742e737667"&gt;&lt;img src="https://camo.githubusercontent.com/dd9fb801ba02fc926f0ddf0c7d1590c2c228700f/68747470733a2f2f6772617068732e776166666c652e696f2f656d6163732d6c73702f6c73702d6d6f64652f7468726f7567687075742e737667" alt="https://graphs.waffle.io/emacs-lsp/lsp-mode/throughput.svg" data-canonical-src="https://graphs.waffle.io/emacs-lsp/lsp-mode/throughput.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-members" class="anchor" aria-hidden="true" href="#members"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Members&lt;/h3&gt;
&lt;p&gt;Here it is a list of the current &lt;code&gt;lsp-mode&lt;/code&gt; members and what they are primary working on/responsible for.&lt;/p&gt;
&lt;table&gt;
  &lt;tbody&gt;&lt;tr&gt;&lt;th&gt;Member&lt;/th&gt;&lt;th&gt;Responsible for:&lt;/th&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;a href="https://github.com/TOTBWF"&gt;TOTBWF&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;F#&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;a href="https://github.com/brotzeit"&gt;brotzeit&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;Rust&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;a href="https://github.com/dsyzling"&gt;dsyzling&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;Scala&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;a href="https://github.com/kurnevsky"&gt;kurnevsky&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;Scala&lt;/code&gt; &amp;amp; &lt;code&gt;Rust&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;a href="https://github.com/seagle0128"&gt;seagle0128&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;Go&lt;/code&gt; &amp;amp; &lt;code&gt;MS Python Language Server&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;a href="https://github.com/sebastiansturm"&gt;sebastiansturm&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;lsp-mode&lt;/code&gt; core &amp;amp; &lt;code&gt;C++&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;a href="https://github.com/vibhavp"&gt;vibhavp&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;lsp-mode&lt;/code&gt; core&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;a href="https://github.com/yyoncho"&gt;yyoncho&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;lsp-mode&lt;/code&gt; core and &lt;code&gt;Java&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2&gt;&lt;a id="user-content-troubleshooting" class="anchor" aria-hidden="true" href="#troubleshooting"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Troubleshooting&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;set &lt;code&gt;lsp-log-io&lt;/code&gt; to &lt;code&gt;t&lt;/code&gt; to inspect communication between client and the server. Use &lt;code&gt;lsp-workspace-show-log&lt;/code&gt; to switch to the corresponding log buffer.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-describe-session&lt;/code&gt; will show the current projects roots + the started severs and allows inspecting the server capabilities.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="examples/describe.png"&gt;&lt;img src="examples/describe.png" alt="examples/describe.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-adding-support-for-languages" class="anchor" aria-hidden="true" href="#adding-support-for-languages"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Adding support for languages&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-registering-server" class="anchor" aria-hidden="true" href="#registering-server"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Registering server&lt;/h3&gt;
&lt;p&gt;Here it is the minimal configuration that is needed for new language server registration. Refer to the documentation of &lt;code&gt;lsp-client.el&lt;/code&gt; for the additional settings supported on registration time. &lt;code&gt;lsp-language-id-configuration&lt;/code&gt; must be updated to contain the corresponding mode -&amp;gt; language id - in this case &lt;code&gt;(python-mode . "python")&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;defvar&lt;/span&gt; &lt;span class="pl-en"&gt;lsp-language-id-configuration&lt;/span&gt;
  '(...
   (&lt;span class="pl-c1"&gt;python-mode&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;python&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
   ...))
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; if you are adding the support for your language server in separate repo use&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; (add-to-list 'lsp-language-id-configuration '(python-mode . "python"))&lt;/span&gt;

(lsp-register-client
 (make-lsp-client &lt;span class="pl-c1"&gt;:new-connection&lt;/span&gt; (lsp-stdio-connection &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;pyls&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
                  &lt;span class="pl-c1"&gt;:major-modes&lt;/span&gt; '(&lt;span class="pl-c1"&gt;python-mode&lt;/span&gt;)
                  &lt;span class="pl-c1"&gt;:server-id&lt;/span&gt; &lt;span class="pl-c1"&gt;'pyls&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If the language server supports environment variables to control additional behavior, you can register that by using the &lt;code&gt;:environment-fn&lt;/code&gt; function, like the Bash language client does:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(lsp-register-client
 (make-lsp-client &lt;span class="pl-c1"&gt;:new-connection&lt;/span&gt; (lsp-stdio-connection '(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;bash-language-server&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;start&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
                  &lt;span class="pl-c1"&gt;:major-modes&lt;/span&gt; '(&lt;span class="pl-c1"&gt;sh-mode&lt;/span&gt;)
                  &lt;span class="pl-c1"&gt;:priority&lt;/span&gt; &lt;span class="pl-c1"&gt;-1&lt;/span&gt;
                  &lt;span class="pl-c1"&gt;:environment-fn&lt;/span&gt; (&lt;span class="pl-k"&gt;lambda&lt;/span&gt; ()
                                    ((&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;EXPLAINSHELL_ENDPOINT&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; lsp-bash-explainshell-endpoint)
                                     (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;HIGHLIGHT_PARSING_ERRORS&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; lsp-bash-highlight-parsing-errors)))
                  &lt;span class="pl-c1"&gt;:server-id&lt;/span&gt; &lt;span class="pl-c1"&gt;'bash-ls&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;lsp-bash-explainshell-endpoint&lt;/code&gt; and &lt;code&gt;lsp-bash-highlight-parsing-errors&lt;/code&gt; are language client &lt;code&gt;defcustom&lt;/code&gt; that expose supported server environment settings in a type-safe way. If you change any of those variables, restart the language server with &lt;code&gt;lsp-restart-workspace&lt;/code&gt; for the changes to be applied.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-sections" class="anchor" aria-hidden="true" href="#sections"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Sections&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;lsp-mode&lt;/code&gt; provides tools to bridge emacs &lt;code&gt;defcustom&lt;/code&gt; as a language configuration sections properties(see &lt;a href="https://microsoft.github.io/language-server-protocol/specification#workspace_configuration" rel="nofollow"&gt;specification workspace/configuration&lt;/a&gt;). In addition you may use &lt;code&gt;lsp-generate-settings&lt;/code&gt; from &lt;a href="https://github.com/emacs-lsp/lsp-mode/blob/master/scripts/lsp-generate-settings.el"&gt;Generate Settings script&lt;/a&gt; to generate &lt;code&gt;defcustom&lt;/code&gt; from &lt;code&gt;package.json&lt;/code&gt; VScode plugin manifest. Example:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;defcustom&lt;/span&gt; &lt;span class="pl-en"&gt;lsp-foo-language-server-property&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;bar&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Demo property.&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:group&lt;/span&gt; &lt;span class="pl-c1"&gt;'foo-ls&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:risky&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;)

(lsp-register-custom-settings '((&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;foo.section.property&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; lsp-foo-language-server-property)))

(lsp-configuration-section  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;foo&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt;  (("foo" ("settings" ("property" . "bar"))))&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-faq" class="anchor" aria-hidden="true" href="#faq"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;FAQ&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;How do I troubleshoot “Server FOO-LS:pid exited with status signal. Do you want to restart it? (y or n)”?
    &lt;ul&gt;
      &lt;li&gt;This message indicates that the language server has crashed for some
        reason. You may check the server stderr which is &lt;code&gt;*FOO-LS::stderr*&lt;/code&gt;. If
        you get this message on startup you may try to run the exact command that
        &lt;code&gt;lsp-mode&lt;/code&gt; is running in the terminal. You may find it in &lt;code&gt;*lsp-log*&lt;/code&gt;
        buffer.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;How to configure a server with local variables?
    &lt;ul&gt;
      &lt;li&gt;Add &lt;code&gt;lsp&lt;/code&gt; server call to &lt;code&gt;hack-local-variables-hook&lt;/code&gt; which runs right after the local variables are loaded.
        &lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;add-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;'hack-local-variables-hook&lt;/span&gt;
          (&lt;span class="pl-k"&gt;lambda&lt;/span&gt; () (&lt;span class="pl-k"&gt;when&lt;/span&gt; (&lt;span class="pl-c1"&gt;derived-mode-p&lt;/span&gt; &lt;span class="pl-c1"&gt;'XXX-mode&lt;/span&gt;) (lsp))))
        &lt;/pre&gt;&lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;I have multiple language servers registered for language FOO. Which one will be used when opening a project?
    &lt;ul&gt;
      &lt;li&gt;The one with highest priority wins. &lt;code&gt;lsp-clients.el&lt;/code&gt; predefined servers have
        priority -1, lower than external packages (priority 0 if unspecified). If a
        server is registered with &lt;code&gt;:add-on?&lt;/code&gt; flag set to &lt;code&gt;t&lt;/code&gt; it will be started in
        parallel to the other servers that are registered for the current mode.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;I have multiple language servers for language &lt;code&gt;FOO&lt;/code&gt; and I want to select the server per project, what can I do?
    &lt;ul&gt;
      &lt;li&gt;You may create &lt;code&gt;dir-local&lt;/code&gt; for each of the projects and specify list of
        &lt;code&gt;lsp-enabled-clients&lt;/code&gt;. This will narrow the list of the clients that are
        going to be tested for the project.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The completion does not work fine and inserts arguments and placeholders, what I am doing wrong?
    &lt;ul&gt;
      &lt;li&gt;Snippet support works only with &lt;code&gt;company-lsp&lt;/code&gt; so if you are using
        &lt;code&gt;completion-at-point&lt;/code&gt; the snippets won’t be expanded and you should
        either disable them by setting &lt;code&gt;lsp-enable-snippet&lt;/code&gt; to &lt;code&gt;nil&lt;/code&gt; or you
        should switch to &lt;code&gt;company-lsp&lt;/code&gt;. Note also that &lt;code&gt;company-tng&lt;/code&gt; frontend
        does not support snippet expansion(see &lt;a href="https://github.com/company-mode/company-mode/issues/891"&gt;company-mode#891&lt;/a&gt;)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;How to automatically follow &lt;code&gt;lsp-ui-log&lt;/code&gt;?
    &lt;ul&gt;
      &lt;li&gt;Go into the log buffer and execute the following snippet(source: &lt;a href="https://stackoverflow.com/questions/12663061/emacs-auto-scrolling-log-buffer" rel="nofollow"&gt;Emacs auto scrolling log buffer&lt;/a&gt;)&lt;/li&gt;
    &lt;/ul&gt;
    &lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;set&lt;/span&gt; (&lt;span class="pl-c1"&gt;make-local-variable&lt;/span&gt; &lt;span class="pl-c1"&gt;'window-point-insertion-type&lt;/span&gt;) &lt;span class="pl-c1"&gt;t&lt;/span&gt;)
    &lt;/pre&gt;&lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;I am getting “Package ‘spinner-1.7.3’ is unavailable” when trying to install &lt;code&gt;lsp-mode&lt;/code&gt;.
    &lt;ul&gt;
      &lt;li&gt;This is caused by GPG keys used by the ELPA package manager not being up
        to date. You may fix by installing: &lt;a href="https://elpa.gnu.org/packages/gnu-elpa-keyring-update.html" rel="nofollow"&gt;gnu-elpa-keyring-update&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-see-also" class="anchor" aria-hidden="true" href="#see-also"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;See also&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://github.com/emacs-lsp/lsp-docker/"&gt;lsp-docker&lt;/a&gt; - provide docker image with preconfigured language servers with corresponding emacs configuration.&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/sebastiencs/company-box/"&gt;company-box&lt;/a&gt; - &lt;code&gt;company&lt;/code&gt; frontend with icons.&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/yyoncho/dap-mode"&gt;dap-mode&lt;/a&gt; - Debugger integration for &lt;code&gt;lsp-mode&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/joaotavora/eglot"&gt;eglot&lt;/a&gt; - An alternative minimal LSP implementation.&lt;/li&gt;
&lt;/ul&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>emacs-lsp</author><guid isPermaLink="false">https://github.com/emacs-lsp/lsp-mode</guid><pubDate>Tue, 26 Nov 2019 00:03:00 GMT</pubDate></item><item><title>emacs-mirror/emacs #4 in Emacs Lisp, Today</title><link>https://github.com/emacs-mirror/emacs</link><description>&lt;p&gt;&lt;i&gt;Mirror of GNU Emacs&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body " data-path="README"&gt;&lt;div class="plain"&gt;&lt;pre style="white-space: pre-wrap"&gt;Copyright (C) 2001-2019 Free Software Foundation, Inc.
See the end of the file for license conditions.


This directory tree holds version 27.0.50 of GNU Emacs, the extensible,
customizable, self-documenting real-time display editor.

The file INSTALL in this directory says how to build and install GNU
Emacs on various systems, once you have unpacked or checked out the
entire Emacs file tree.

See the file etc/NEWS for information on new features and other
user-visible changes in recent versions of Emacs.

The file etc/PROBLEMS contains information on many common problems that
occur in building, installing and running Emacs.

The file CONTRIBUTE contains information on contributing to Emacs as a
developer.

You may encounter bugs in this release.  If you do, please report
them; your bug reports are valuable contributions to the FSF, since
they allow us to notice and fix problems on machines we don't have, or
in code we don't use often.  Please send bug reports to the mailing
list bug-gnu-emacs@gnu.org.  If possible, use M-x report-emacs-bug.

See the "Bugs" section of the Emacs manual for more information on how
to report bugs.  (The file 'BUGS' in this directory explains how you
can find and read that section using the Info files that come with
Emacs.)  For a list of mailing lists related to Emacs, see
&amp;lt;&lt;a href="https://savannah.gnu.org/mail/?group=emacs" rel="nofollow"&gt;https://savannah.gnu.org/mail/?group=emacs&lt;/a&gt;&amp;gt;.  For the complete
list of GNU mailing lists, see &amp;lt;&lt;a href="https://lists.gnu.org/" rel="nofollow"&gt;https://lists.gnu.org/&lt;/a&gt;&amp;gt;.

The 'etc' subdirectory contains several other files, named in capital
letters, which you might consider looking at when installing GNU
Emacs.

The file 'configure' is a shell script to acclimate Emacs to the
oddities of your processor and operating system.  It creates the file
'Makefile' (a script for the 'make' program), which automates the
process of building and installing Emacs.  See INSTALL for more
detailed information.

The file 'configure.ac' is the input used by the autoconf program to
construct the 'configure' script.

The shell script 'autogen.sh' generates 'configure' and other files by
running Autoconf (which in turn uses GNU m4), and configures files in
the .git subdirectory if you are using Git.  If you want to use it,
you will need to install recent versions of these build tools.  This
should be needed only if you edit files like 'configure.ac' that
specify Emacs's autobuild procedure.

The file 'Makefile.in' is a template used by 'configure' to create
'Makefile'.

The file 'make-dist' is a shell script to build a distribution tar
file from the current Emacs tree, containing only those files
appropriate for distribution.  If you make extensive changes to Emacs,
this script will help you distribute your version to others.

There are several subdirectories:

'src'       holds the C code for Emacs (the Emacs Lisp interpreter and
            its primitives, the redisplay code, and some basic editing
            functions).
'lisp'      holds the Emacs Lisp code for Emacs (most everything else).
'leim'      holds the original source files for the generated files
            in lisp/leim.  These form the library of Emacs input methods,
            required to type international characters that can't be
            directly produced by your keyboard.
'lib'       holds source code for libraries used by Emacs and its utilities
'lib-src'   holds the source code for some utility programs for use by or
            with Emacs, like movemail and etags.
'lwlib'     holds the sources of the Lucid Widget Library used on X.
'oldXMenu'  source files from X11R2 XMenu library, used in non-toolkit builds.
'etc'       holds miscellaneous architecture-independent data files Emacs
            uses, like the tutorial text and tool bar images.
            The contents of the 'lisp', 'leim', 'info', and 'doc'
            subdirectories are architecture-independent too.
'info'      holds the Info documentation tree for Emacs.
'doc/emacs' holds the source code for the Emacs Manual.  If you modify the
            manual sources, you will need the 'makeinfo' program to produce
            an updated manual.  'makeinfo' is part of the GNU Texinfo
            package; you need a suitably recent version of Texinfo.
'doc/lispref'   holds the source code for the Emacs Lisp reference manual.
'doc/lispintro' holds the source code for the Introduction to Programming
                in Emacs Lisp manual.
'msdos'     holds configuration files for compiling Emacs under MS-DOS.
'nextstep'  holds instructions and some other files for compiling the
            Nextstep port of Emacs, for GNUstep and macOS Cocoa.
'nt'        holds code and documentation for building Emacs on MS-Windows.
'test'      holds tests for various aspects of Emacs's functionality.
'modules'   holds the modhelp.py helper script.
'admin'     holds files used by Emacs developers, and Unicode data files.
'build-aux' holds auxiliary files used during the build.
'm4'        holds Autoconf macros used for generating the configure script.

   Building Emacs on non-Posix platforms requires tools that aren't part
of the standard distribution of the OS.  The platform-specific README
files and installation instructions should list the required tools.


NOTE ON COPYRIGHT YEARS

In copyright notices where the copyright holder is the Free Software
Foundation, then where a range of years appears, this is an inclusive
range that applies to every year in the range.  For example: 2005-2008
represents the years 2005, 2006, 2007, and 2008.


This file is part of GNU Emacs.

GNU Emacs is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

GNU Emacs is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with GNU Emacs.  If not, see &amp;lt;&lt;a href="https://www.gnu.org/licenses/" rel="nofollow"&gt;https://www.gnu.org/licenses/&lt;/a&gt;&amp;gt;.
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</description><author>emacs-mirror</author><guid isPermaLink="false">https://github.com/emacs-mirror/emacs</guid><pubDate>Tue, 26 Nov 2019 00:04:00 GMT</pubDate></item><item><title>abo-abo/swiper #5 in Emacs Lisp, Today</title><link>https://github.com/abo-abo/swiper</link><description>&lt;p&gt;&lt;i&gt;Ivy - a generic completion frontend for Emacs, Swiper - isearch with an overview, and more. Oh, man!&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;p&gt;&lt;a href="https://travis-ci.org/abo-abo/swiper" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/f13930412aac3d15215dad01d52b6c731292e8d1/68747470733a2f2f7472617669732d63692e6f72672f61626f2d61626f2f7377697065722e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/abo-abo/swiper.svg?branch=master" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;flexible, simple tools for minibuffer completion in Emacs&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This repository contains:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ivy&lt;/strong&gt;, a generic completion mechanism for Emacs.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Counsel&lt;/strong&gt;, a collection of Ivy-enhanced versions of common Emacs
commands.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Swiper&lt;/strong&gt;, an Ivy-enhanced alternative to isearch.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-ivy" class="anchor" aria-hidden="true" href="#ivy"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Ivy&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://melpa.org/#/ivy" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/0b07b95d4ee91c75105920569bc2d03f5f890271/68747470733a2f2f6d656c70612e6f72672f7061636b616765732f6976792d62616467652e737667" alt="MELPA" data-canonical-src="https://melpa.org/packages/ivy-badge.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://stable.melpa.org/#/ivy" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/0dc055002fc3da7f785236986eefb98108f34f51/68747470733a2f2f737461626c652e6d656c70612e6f72672f7061636b616765732f6976792d62616467652e737667" alt="MELPA Stable" data-canonical-src="https://stable.melpa.org/packages/ivy-badge.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ivy is a generic completion mechanism for Emacs. While it operates
similarly to other completion schemes such as &lt;code&gt;icomplete-mode&lt;/code&gt;, Ivy
aims to be more efficient, smaller, simpler, and smoother to use yet
highly customizable.&lt;/p&gt;
&lt;p&gt;To try Ivy, just call &lt;kbd&gt;M-x&lt;/kbd&gt; &lt;code&gt;ivy-mode&lt;/code&gt;. This will enable
generic Ivy completion, including specific completion for file and
buffer names.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installation&lt;/h3&gt;
&lt;p&gt;Install the &lt;code&gt;ivy&lt;/code&gt; package from MELPA / GNU ELPA.&lt;/p&gt;
&lt;p&gt;Users of Debian ≥10 (and derivatives such as Ubuntu ≥18.04) can
install Ivy, Counsel, and Swiper with &lt;code&gt;sudo apt install elpa-counsel&lt;/code&gt;.
To add Hydra support &lt;code&gt;sudo apt install elpa-ivy-hydra&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Documentation&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-manual" class="anchor" aria-hidden="true" href="#manual"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Manual&lt;/h3&gt;
&lt;p&gt;The manual is available as &lt;a href="https://oremacs.com/swiper/" rel="nofollow"&gt;HTML&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;After installing from MELPA, the manual is also available through the &lt;code&gt;(ivy)&lt;/code&gt; Info node.&lt;/p&gt;
&lt;p&gt;The source file for the Info page is
&lt;a href="https://github.com/abo-abo/swiper/blob/master/doc/ivy.org"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-wiki" class="anchor" aria-hidden="true" href="#wiki"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Wiki&lt;/h3&gt;
&lt;p&gt;Ivy and Swiper wiki is here: &lt;a href="https://github.com/abo-abo/swiper/wiki"&gt;the wiki&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-small-config-example" class="anchor" aria-hidden="true" href="#small-config-example"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Small config example&lt;/h3&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(ivy-mode &lt;span class="pl-c1"&gt;1&lt;/span&gt;)
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; ivy-use-virtual-buffers &lt;span class="pl-c1"&gt;t&lt;/span&gt;)
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; enable-recursive-minibuffers &lt;span class="pl-c1"&gt;t&lt;/span&gt;)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; enable this if you want &lt;span class="pl-smi"&gt;`swiper'&lt;/span&gt; to use it&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; (setq search-default-mode #'char-fold-to-regexp)&lt;/span&gt;
(&lt;span class="pl-c1"&gt;global-set-key&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-cce"&gt;\C&lt;/span&gt;-s&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'swiper&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;global-set-key&lt;/span&gt; (&lt;span class="pl-c1"&gt;kbd&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-c C-r&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;'ivy-resume&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;global-set-key&lt;/span&gt; (&lt;span class="pl-c1"&gt;kbd&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&amp;lt;f6&amp;gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;'ivy-resume&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;global-set-key&lt;/span&gt; (&lt;span class="pl-c1"&gt;kbd&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;M-x&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;'counsel-M-x&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;global-set-key&lt;/span&gt; (&lt;span class="pl-c1"&gt;kbd&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-x C-f&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;'counsel-find-file&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;global-set-key&lt;/span&gt; (&lt;span class="pl-c1"&gt;kbd&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&amp;lt;f1&amp;gt; f&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;'counsel-describe-function&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;global-set-key&lt;/span&gt; (&lt;span class="pl-c1"&gt;kbd&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&amp;lt;f1&amp;gt; v&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;'counsel-describe-variable&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;global-set-key&lt;/span&gt; (&lt;span class="pl-c1"&gt;kbd&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&amp;lt;f1&amp;gt; l&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;'counsel-find-library&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;global-set-key&lt;/span&gt; (&lt;span class="pl-c1"&gt;kbd&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&amp;lt;f2&amp;gt; i&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;'counsel-info-lookup-symbol&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;global-set-key&lt;/span&gt; (&lt;span class="pl-c1"&gt;kbd&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&amp;lt;f2&amp;gt; u&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;'counsel-unicode-char&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;global-set-key&lt;/span&gt; (&lt;span class="pl-c1"&gt;kbd&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-c g&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;'counsel-git&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;global-set-key&lt;/span&gt; (&lt;span class="pl-c1"&gt;kbd&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-c j&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;'counsel-git-grep&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;global-set-key&lt;/span&gt; (&lt;span class="pl-c1"&gt;kbd&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-c k&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;'counsel-ag&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;global-set-key&lt;/span&gt; (&lt;span class="pl-c1"&gt;kbd&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-x l&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;'counsel-locate&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;global-set-key&lt;/span&gt; (&lt;span class="pl-c1"&gt;kbd&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-S-o&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;'counsel-rhythmbox&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;define-key&lt;/span&gt; minibuffer-local-map (&lt;span class="pl-c1"&gt;kbd&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-r&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;'counsel-minibuffer-history&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note: parts of this config can be replaced by using &lt;code&gt;counsel-mode&lt;/code&gt;.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-counsel" class="anchor" aria-hidden="true" href="#counsel"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Counsel&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://melpa.org/#/counsel" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/0b1d9741244e07553b3e7edbdd74c5345481216c/68747470733a2f2f6d656c70612e6f72672f7061636b616765732f636f756e73656c2d62616467652e737667" alt="MELPA" data-canonical-src="https://melpa.org/packages/counsel-badge.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://stable.melpa.org/#/counsel" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/b829c1e7ce2494091aae0c6f5cbfc69325b62c03/68747470733a2f2f737461626c652e6d656c70612e6f72672f7061636b616765732f636f756e73656c2d62616467652e737667" alt="MELPA Stable" data-canonical-src="https://stable.melpa.org/packages/counsel-badge.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ivy-mode&lt;/code&gt; ensures that any Emacs command using
&lt;code&gt;completing-read-function&lt;/code&gt; uses ivy for completion.&lt;/p&gt;
&lt;p&gt;Counsel takes this further, providing versions of common Emacs
commands that are customised to make the best use of ivy. For example,
&lt;code&gt;counsel-find-file&lt;/code&gt; has some additional keybindings. Pressing
&lt;kbd&gt;DEL&lt;/kbd&gt; will move you to the parent directory.&lt;/p&gt;
&lt;p&gt;Enabling &lt;code&gt;counsel-mode&lt;/code&gt; remaps built-in Emacs functions that have
counsel replacements:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Emacs command&lt;/th&gt;
&lt;th&gt;Counsel equivalent&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;execute-extended-command&lt;/td&gt;
&lt;td&gt;counsel-M-x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;describe-bindings&lt;/td&gt;
&lt;td&gt;counsel-descbinds&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;describe-function&lt;/td&gt;
&lt;td&gt;counsel-describe-function&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;describe-variable&lt;/td&gt;
&lt;td&gt;counsel-describe-variable&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;apropos-command&lt;/td&gt;
&lt;td&gt;counsel-apropos&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;describe-face&lt;/td&gt;
&lt;td&gt;counsel-describe-face&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;list-faces-display&lt;/td&gt;
&lt;td&gt;counsel-faces&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;find-file&lt;/td&gt;
&lt;td&gt;counsel-find-file&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;find-library&lt;/td&gt;
&lt;td&gt;counsel-find-library&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;imenu&lt;/td&gt;
&lt;td&gt;counsel-imenu&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;load-library&lt;/td&gt;
&lt;td&gt;counsel-load-library&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;load-theme&lt;/td&gt;
&lt;td&gt;counsel-load-theme&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;yank-pop&lt;/td&gt;
&lt;td&gt;counsel-yank-pop&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;info-lookup-symbol&lt;/td&gt;
&lt;td&gt;counsel-info-lookup-symbol&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pop-to-mark-command&lt;/td&gt;
&lt;td&gt;counsel-mark-ring&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bookmark-jump&lt;/td&gt;
&lt;td&gt;counsel-bookmark&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1&gt;&lt;a id="user-content-swiper" class="anchor" aria-hidden="true" href="#swiper"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Swiper&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://melpa.org/#/swiper" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e4db0c28cf6c9e4de9529a34141a0ceeac953afc/68747470733a2f2f6d656c70612e6f72672f7061636b616765732f7377697065722d62616467652e737667" alt="MELPA" data-canonical-src="https://melpa.org/packages/swiper-badge.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://stable.melpa.org/#/swiper" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/3856d8e21ce5c31895a9cdd449701dbac9a5af58/68747470733a2f2f737461626c652e6d656c70612e6f72672f7061636b616765732f7377697065722d62616467652e737667" alt="MELPA Stable" data-canonical-src="https://stable.melpa.org/packages/swiper-badge.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Swiper is an alternative to isearch that uses ivy to show an overview
of all matches.&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/9501632a3893ff3c9ad7cf61ca09311ea5a570a7/68747470733a2f2f6f72656d6163732e636f6d2f646f776e6c6f61642f7377697065722e706e67"&gt;&lt;img src="https://camo.githubusercontent.com/9501632a3893ff3c9ad7cf61ca09311ea5a570a7/68747470733a2f2f6f72656d6163732e636f6d2f646f776e6c6f61642f7377697065722e706e67" alt="swiper.png" data-canonical-src="https://oremacs.com/download/swiper.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A helm version of swiper is also available:
&lt;a href="https://github.com/abo-abo/swiper-helm"&gt;swiper-helm&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-screenshots" class="anchor" aria-hidden="true" href="#screenshots"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Screenshots&lt;/h2&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/5a19441661db376c2b3403e7c2af8d6bb323fd2c/68747470733a2f2f6f72656d6163732e636f6d2f646f776e6c6f61642f6976792d7377697065722d312e706e67"&gt;&lt;img src="https://camo.githubusercontent.com/5a19441661db376c2b3403e7c2af8d6bb323fd2c/68747470733a2f2f6f72656d6163732e636f6d2f646f776e6c6f61642f6976792d7377697065722d312e706e67" alt="ivy-swiper-1.png" data-canonical-src="https://oremacs.com/download/ivy-swiper-1.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There's also a ten minute &lt;a href="https://www.youtube.com/watch?v=VvnJQpTFVDc" rel="nofollow"&gt;video demo&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-frequently-asked-questions" class="anchor" aria-hidden="true" href="#frequently-asked-questions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Frequently asked questions&lt;/h1&gt;
&lt;p&gt;Q: How do I enter an input that matches one of the candidates instead
of this candidate? Example: create a file &lt;code&gt;bar&lt;/code&gt; when a file
&lt;code&gt;barricade&lt;/code&gt; exists in the current directory.&lt;/p&gt;
&lt;p&gt;A: Press &lt;kbd&gt;C-M-j&lt;/kbd&gt;. Alternatively, you can make the prompt line selectable with &lt;code&gt;(setq ivy-use-selectable-prompt t)&lt;/code&gt;.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-contributing" class="anchor" aria-hidden="true" href="#contributing"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contributing&lt;/h1&gt;
&lt;p&gt;Please see the &lt;a href="https://github.com/abo-abo/swiper/blob/master/CONTRIBUTING.org"&gt;guidelines&lt;/a&gt; for reporting issues and opening pull requests.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>abo-abo</author><guid isPermaLink="false">https://github.com/abo-abo/swiper</guid><pubDate>Tue, 26 Nov 2019 00:05:00 GMT</pubDate></item><item><title>emacs-evil/evil #6 in Emacs Lisp, Today</title><link>https://github.com/emacs-evil/evil</link><description>&lt;p&gt;&lt;i&gt;The extensible vi layer for Emacs.&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/emacs-evil/evil/master/doc/logo.png"&gt;&lt;img src="https://raw.githubusercontent.com/emacs-evil/evil/master/doc/logo.png" alt="An extensible vi layer for Emacs" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://travis-ci.org/emacs-evil/evil" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/9fc8dff9b4c535f17a789c81937dd32e38822c23/68747470733a2f2f7472617669732d63692e6f72672f656d6163732d6576696c2f6576696c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/emacs-evil/evil.svg?branch=master" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://melpa.org/#/evil" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/bd97222c6e281edeeb067bf6f5926b7c7b16519a/68747470733a2f2f6d656c70612e6f72672f7061636b616765732f6576696c2d62616467652e737667" alt="MELPA" data-canonical-src="https://melpa.org/packages/evil-badge.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://stable.melpa.org/#/evil" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/d508a703cde2d4c7f4ac64e5b4bb25d24161bf0c/68747470733a2f2f737461626c652e6d656c70612e6f72672f7061636b616765732f6576696c2d62616467652e737667" alt="MELPA Stable" data-canonical-src="https://stable.melpa.org/packages/evil-badge.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://www.gnu.org/licenses/gpl-3.0" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/bf135a9cea09d0ea4bba410582c0e70ec8222736/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d47504c25323076332d626c75652e737667" alt="License: GPL v3" data-canonical-src="https://img.shields.io/badge/License-GPL%20v3-blue.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Evil is an &lt;strong&gt;e&lt;/strong&gt;xtensible &lt;strong&gt;vi&lt;/strong&gt; &lt;strong&gt;l&lt;/strong&gt;ayer
for &lt;a href="http://www.gnu.org/software/emacs/" rel="nofollow"&gt;Emacs&lt;/a&gt;. It emulates the main features
of &lt;a href="http://www.vim.org/" rel="nofollow"&gt;Vim&lt;/a&gt;, and provides facilities for writing custom
extensions. Also see our page on &lt;a href="http://emacswiki.org/emacs/Evil" rel="nofollow"&gt;EmacsWiki&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-download" class="anchor" aria-hidden="true" href="#download"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Download&lt;/h1&gt;
&lt;p&gt;Evil lives in a git repository. To download Evil, do&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clone --depth 1 https://github.com/emacs-evil/evil ~/.emacs.d/evil
&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;&lt;a id="user-content-install" class="anchor" aria-hidden="true" href="#install"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Install&lt;/h1&gt;
&lt;p&gt;After the download step, add the following lines to &lt;code&gt;~/.emacs&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;add-to-list&lt;/span&gt; &lt;span class="pl-c1"&gt;'load-path&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;~/.emacs.d/evil&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;require&lt;/span&gt; &lt;span class="pl-c1"&gt;'evil&lt;/span&gt;)
(evil-mode &lt;span class="pl-c1"&gt;1&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-dependencies" class="anchor" aria-hidden="true" href="#dependencies"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Dependencies&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Evil requires &lt;a href="http://www.emacswiki.org/emacs/UndoTree" rel="nofollow"&gt;undo-tree.el&lt;/a&gt; in the
&lt;code&gt;load-path&lt;/code&gt; for linear undo and undo branches.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For the motions &lt;code&gt;g;&lt;/code&gt; &lt;code&gt;g,&lt;/code&gt; and for the last-change-register &lt;code&gt;.&lt;/code&gt;, Evil requires the
&lt;a href="https://github.com/emacs-evil/goto-chg"&gt;goto-chg.el&lt;/a&gt; package,
which provides the functions &lt;code&gt;goto-last-change&lt;/code&gt; and &lt;code&gt;goto-last-change-reverse&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Documentation&lt;/h1&gt;
&lt;p&gt;A brief
&lt;a href="https://raw.githubusercontent.com/emacs-evil/evil/master/doc/evil.pdf" rel="nofollow"&gt;PDF manual&lt;/a&gt; is
available.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-mailing-list" class="anchor" aria-hidden="true" href="#mailing-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Mailing list&lt;/h1&gt;
&lt;p&gt;Evil is discussed at the
&lt;a href="http://lists.ourproject.org/cgi-bin/mailman/listinfo/implementations-list" rel="nofollow"&gt;gmane.emacs.vim-emulation&lt;/a&gt;
mailing list.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-irc" class="anchor" aria-hidden="true" href="#irc"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;IRC&lt;/h1&gt;
&lt;p&gt;Visit us on &lt;code&gt;irc.freenode.net #evil-mode&lt;/code&gt;.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-contribution" class="anchor" aria-hidden="true" href="#contribution"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contribution&lt;/h1&gt;
&lt;p&gt;See
&lt;a href="https://github.com/emacs-evil/evil/blob/master/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt;
for guidelines for issues and pull requests.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-faq" class="anchor" aria-hidden="true" href="#faq"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;FAQ&lt;/h1&gt;
&lt;h2&gt;&lt;a id="user-content-problems-with-the-escape-key-in-terminal-mode" class="anchor" aria-hidden="true" href="#problems-with-the-escape-key-in-terminal-mode"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Problems with the &lt;strong&gt;Escape&lt;/strong&gt; key in terminal mode&lt;/h2&gt;
&lt;p&gt;A common problem when using Evil in terminal mode is a certain delay after
pressing the Escape key. Even more, when pressing the Escape key followed
quickly by another key the command is recognized as M- instead of two
separate command ESC followed by . In fact, it is perfectly valid to
simulate M- by pressing ESC  quickly (but see below).&lt;/p&gt;
&lt;p&gt;The reason for this is that in terminal mode a key sequence involving the
Meta-key (or Alt-key) always generates a so called "escape sequence", i.e., a
sequence of two events sent to Emacs, the first being ESC the second the key
pressed simultaneously. The problem is that pressing the Escape-key itself also
generates the ESC event. Thus, if Emacs (and therefore Evil) receives an ESC
event there is no way to tell whether the Escape key has been pressed (and no
further event will arrive) or a M- combination has been pressed (and the
 event will arrive soon). In order to distinguish both situations Evil does
the following. After receiving an ESC event Evil waits for a short time period
(specified by the variable &lt;code&gt;evil-esc-delay&lt;/code&gt; which defaults to 0.01 seconds) for
another event. If no other event arrives Evil assumes that the plain Escape key
has been pressed, otherwise it assumes a M- combination has been pressed
and combines the ESC event with the second one. Because a M- sequence
usually generates both events in very quick succession, 0.01 seconds are usually
enough and the delay is hardly noticeable by the user.&lt;/p&gt;
&lt;p&gt;But if you use a terminal multiplexer like &lt;strong&gt;tmux&lt;/strong&gt; or &lt;strong&gt;screen&lt;/strong&gt; the situation
may be worse. Those multiplexers have exactly the same problem recognizing
M- sequences and often introduce their own delay for the ESC key. There is
no way for evil to influence this delay. In order to reduce it you must
reconfigure your terminal multiplexer.&lt;/p&gt;
&lt;p&gt;Note that this problem should not arise when using Evil in X mode. The reason is
that in this case the Escape key itself generates a different command, namely
'escape (a symbol) and hence Evil can distinguish whether the Escape key or a
M- combination has been pressed. But this also implies that pressing ESC
followed by  cannot be used to simulate M- in X mode!&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-underscore-_-is-not-a-word-character" class="anchor" aria-hidden="true" href="#underscore-_-is-not-a-word-character"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Underscore "_" is not a word character&lt;/h2&gt;
&lt;p&gt;An underscore "_" is a word character in Vim. This means that word-motions like
&lt;code&gt;w&lt;/code&gt; skip over underlines in a sequence of letters as if it was a letter itself.
In contrast, in Evil the underscore is often a non-word character like
operators, e.g. &lt;code&gt;+&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The reason is that Evil uses Emacs' definition of a word and this definition
does often not include the underscore. In Emacs word characters are determined
by the syntax-class of the buffer. The syntax-class usually depends on the
major-mode of this buffer. This has the advantage that the definition of a
"word" may be adapted to the particular type of document being edited. Evil uses
Emacs' definition and does not simply use Vim's definition in order to be
consistent with other Emacs functions. For example, word characters are exactly
those characters that are matched by the regular expression character class
&lt;code&gt;[:word:]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you want the underscore to be recognised as word character, you can modify
its entry in the syntax-table:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;modify-syntax-entry&lt;/span&gt; &lt;span class="pl-c1"&gt;?_&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;w&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This gives the underscore the word syntax-class. You can use a mode-hook to
modify the syntax-table in all buffers of some mode, e.g.:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;add-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;'c-mode-common-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;#'&lt;/span&gt;(&lt;span class="pl-k"&gt;lambda&lt;/span&gt; () (&lt;span class="pl-c1"&gt;modify-syntax-entry&lt;/span&gt; &lt;span class="pl-c1"&gt;?_&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;w&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This gives the underscore the word syntax-class in all C-like buffers.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>emacs-evil</author><guid isPermaLink="false">https://github.com/emacs-evil/evil</guid><pubDate>Tue, 26 Nov 2019 00:06:00 GMT</pubDate></item><item><title>abo-abo/hydra #7 in Emacs Lisp, Today</title><link>https://github.com/abo-abo/hydra</link><description>&lt;p&gt;&lt;i&gt;make Emacs bindings that stick around&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-hydra" class="anchor" aria-hidden="true" href="#hydra"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Hydra&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://travis-ci.org/abo-abo/hydra" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/606344d2efe212c85fcf83b2b3f9098c56d22110/68747470733a2f2f7472617669732d63692e6f72672f61626f2d61626f2f68796472612e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/abo-abo/hydra.svg?branch=master" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://melpa.org/#/hydra" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/d40da2eabe8eda4cc5cff78440cf146ad161b967/68747470733a2f2f6d656c70612e6f72672f7061636b616765732f68796472612d62616467652e737667" alt="MELPA" data-canonical-src="https://melpa.org/packages/hydra-badge.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://stable.melpa.org/#/hydra" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/764f98498755938ed7db838a3861454558c0134c/68747470733a2f2f737461626c652e6d656c70612e6f72672f7061636b616765732f68796472612d62616467652e737667" alt="MELPA Stable" data-canonical-src="https://stable.melpa.org/packages/hydra-badge.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is a package for GNU Emacs that can be used to tie related commands into a family of short
bindings with a common prefix - a Hydra.&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/7188a57a097771ce80af534a4183c759717b54af/687474703a2f2f6f72656d6163732e636f6d2f646f776e6c6f61642f48796472612e6a7067"&gt;&lt;img src="https://camo.githubusercontent.com/7188a57a097771ce80af534a4183c759717b54af/687474703a2f2f6f72656d6163732e636f6d2f646f776e6c6f61642f48796472612e6a7067" alt="hydra" data-canonical-src="http://oremacs.com/download/Hydra.jpg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-description-for-poets" class="anchor" aria-hidden="true" href="#description-for-poets"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Description for Poets&lt;/h2&gt;
&lt;p&gt;Once you summon the Hydra through the prefixed binding (the body + any one head), all heads can be
called in succession with only a short extension.&lt;/p&gt;
&lt;p&gt;The Hydra is vanquished once Hercules, any binding that isn't the Hydra's head, arrives.  Note that
Hercules, besides vanquishing the Hydra, will still serve his original purpose, calling his proper
command.  This makes the Hydra very seamless, it's like a minor mode that disables itself
auto-magically.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-description-for-pragmatics" class="anchor" aria-hidden="true" href="#description-for-pragmatics"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Description for Pragmatics&lt;/h2&gt;
&lt;p&gt;Imagine that you have bound &lt;kbd&gt;C-c j&lt;/kbd&gt; and &lt;kbd&gt;C-c k&lt;/kbd&gt; in your
config.  You want to call &lt;kbd&gt;C-c j&lt;/kbd&gt; and &lt;kbd&gt;C-c k&lt;/kbd&gt; in some
(arbitrary) sequence. Hydra allows you to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Bind your functions in a way that pressing &lt;kbd&gt;C-c jjkk3j5k&lt;/kbd&gt; is
equivalent to pressing &lt;kbd&gt;C-c j C-c j C-c k C-c k M-3 C-c j M-5 C-c
k&lt;/kbd&gt;. Any key other than &lt;kbd&gt;j&lt;/kbd&gt; or &lt;kbd&gt;k&lt;/kbd&gt; exits this state.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Assign a custom hint to this group of functions, so that you know immediately
after pressing &lt;kbd&gt;C-c&lt;/kbd&gt; that you can follow up with &lt;kbd&gt;j&lt;/kbd&gt; or
&lt;kbd&gt;k&lt;/kbd&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you want to quickly understand the concept, see &lt;a href="https://www.youtube.com/watch?v=_qZliI1BKzI" rel="nofollow"&gt;the video demo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sample-hydras"&gt;Sample Hydras&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#the-one-with-the-least-amount-of-code"&gt;The one with the least amount of code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-impressive-looking-one"&gt;The impressive-looking one&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#community-wiki"&gt;Community wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-rules-of-hydra-tics"&gt;The Rules of Hydra-tics&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#hydra-awesome"&gt;&lt;code&gt;hydra-awesome&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#awesome-map-and-awesome-binding"&gt;&lt;code&gt;awesome-map&lt;/code&gt; and &lt;code&gt;awesome-binding&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#awesome-plist"&gt;&lt;code&gt;awesome-plist&lt;/code&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#pre-and-post"&gt;&lt;code&gt;:pre&lt;/code&gt; and &lt;code&gt;:post&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#exit"&gt;&lt;code&gt;:exit&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#foreign-keys"&gt;&lt;code&gt;:foreign-keys&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#color"&gt;&lt;code&gt;:color&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#timeout"&gt;&lt;code&gt;:timeout&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#hint"&gt;&lt;code&gt;:hint&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#bind"&gt;&lt;code&gt;:bind&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#awesome-docstring"&gt;&lt;code&gt;awesome-docstring&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#awesome-head-1"&gt;&lt;code&gt;awesome-head-1&lt;/code&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#head-binding"&gt;&lt;code&gt;head-binding&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#head-command"&gt;&lt;code&gt;head-command&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#head-hint"&gt;&lt;code&gt;head-hint&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#head-plist"&gt;&lt;code&gt;head-plist&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;&lt;a id="user-content-sample-hydras" class="anchor" aria-hidden="true" href="#sample-hydras"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Sample Hydras&lt;/h1&gt;
&lt;h2&gt;&lt;a id="user-content-the-one-with-the-least-amount-of-code" class="anchor" aria-hidden="true" href="#the-one-with-the-least-amount-of-code"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;The one with the least amount of code&lt;/h2&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(defhydra hydra-zoom (&lt;span class="pl-c1"&gt;global-map&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&amp;lt;f2&amp;gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;zoom&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;g&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; text-scale-increase &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;in&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
  (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;l&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; text-scale-decrease &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;out&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With this simple code, you can:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Start zooming in with &lt;kbd&gt;&amp;lt;f2&amp;gt; g&lt;/kbd&gt;.&lt;/li&gt;
&lt;li&gt;Continue to zoom in with &lt;kbd&gt;g&lt;/kbd&gt;.&lt;/li&gt;
&lt;li&gt;Or zoom out with &lt;kbd&gt;l&lt;/kbd&gt;.&lt;/li&gt;
&lt;li&gt;Zoom in five times at once with &lt;kbd&gt;5g&lt;/kbd&gt;.&lt;/li&gt;
&lt;li&gt;Stop zooming with &lt;em&gt;any&lt;/em&gt; key that isn't &lt;kbd&gt;g&lt;/kbd&gt; or &lt;kbd&gt;l&lt;/kbd&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For any Hydra:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;digit-argument&lt;/code&gt; can be called with &lt;kbd&gt;0&lt;/kbd&gt;-&lt;kbd&gt;9&lt;/kbd&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;negative-argument&lt;/code&gt; can be called with &lt;kbd&gt;-&lt;/kbd&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;universal-argument&lt;/code&gt; can be called with &lt;kbd&gt;C-u&lt;/kbd&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-the-impressive-looking-one" class="anchor" aria-hidden="true" href="#the-impressive-looking-one"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;The impressive-looking one&lt;/h2&gt;
&lt;p&gt;Here's the result of pressing &lt;kbd&gt;.&lt;/kbd&gt; in the good-old Buffer menu:&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/c1df3628134ce20bc6c17fd6397fa7fd07461335/687474703a2f2f6f72656d6163732e636f6d2f646f776e6c6f61642f68796472612d6275666665722d6d656e752e706e67"&gt;&lt;img src="https://camo.githubusercontent.com/c1df3628134ce20bc6c17fd6397fa7fd07461335/687474703a2f2f6f72656d6163732e636f6d2f646f776e6c6f61642f68796472612d6275666665722d6d656e752e706e67" alt="hydra-buffer-menu" data-canonical-src="http://oremacs.com/download/hydra-buffer-menu.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The code is large but very simple:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(defhydra hydra-buffer-menu (&lt;span class="pl-c1"&gt;:color&lt;/span&gt; pink
                             &lt;span class="pl-c1"&gt;:hint&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;)
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-s"&gt;^Mark^             ^Unmark^           ^Actions^          ^Search&lt;/span&gt;
&lt;span class="pl-s"&gt;^^^^^^^^-----------------------------------------------------------------&lt;/span&gt;
&lt;span class="pl-s"&gt;_m_: mark          _u_: unmark        _x_: execute       _R_: re-isearch&lt;/span&gt;
&lt;span class="pl-s"&gt;_s_: save          _U_: unmark up     _b_: bury          _I_: isearch&lt;/span&gt;
&lt;span class="pl-s"&gt;_d_: delete        ^ ^                _g_: refresh       _O_: multi-occur&lt;/span&gt;
&lt;span class="pl-s"&gt;_D_: delete up     ^ ^                _T_: files only: % -28`Buffer-menu-files-only&lt;/span&gt;
&lt;span class="pl-s"&gt;_~_: modified&lt;/span&gt;
&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;m&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; Buffer-menu-mark)
  (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;u&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; Buffer-menu-unmark)
  (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;U&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; Buffer-menu-backup-unmark)
  (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;d&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; Buffer-menu-delete)
  (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;D&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; Buffer-menu-delete-backwards)
  (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;s&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; Buffer-menu-save)
  (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;~&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; Buffer-menu-not-modified)
  (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;x&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; Buffer-menu-execute)
  (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;b&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; Buffer-menu-bury)
  (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;g&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; revert-buffer)
  (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;T&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; Buffer-menu-toggle-files-only)
  (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;O&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; Buffer-menu-multi-occur &lt;span class="pl-c1"&gt;:color&lt;/span&gt; blue)
  (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;I&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; Buffer-menu-isearch-buffers &lt;span class="pl-c1"&gt;:color&lt;/span&gt; blue)
  (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;R&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; Buffer-menu-isearch-buffers-regexp &lt;span class="pl-c1"&gt;:color&lt;/span&gt; blue)
  (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;c&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;cancel&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
  (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;v&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; Buffer-menu-select &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;select&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;:color&lt;/span&gt; blue)
  (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;o&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; Buffer-menu-other-window &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;other-window&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;:color&lt;/span&gt; blue)
  (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;q&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; quit-window &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;quit&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;:color&lt;/span&gt; blue))

(&lt;span class="pl-c1"&gt;define-key&lt;/span&gt; Buffer-menu-mode-map &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;.&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'hydra-buffer-menu/body&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Looking at the code, you can see &lt;code&gt;hydra-buffer-menu&lt;/code&gt; as sort of a namespace construct that wraps
each function that it's given in code that shows that hint and makes it easy to call the related
functions. One additional function is created and returned as the result of &lt;code&gt;defhydra&lt;/code&gt; -
&lt;code&gt;hydra-buffer-menu/body&lt;/code&gt;.  This function does nothing except setting up the hint and the keymap, and
is usually the entry point to complex hydras.&lt;/p&gt;
&lt;p&gt;To write your own hydras, you can:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Either modify an existing hydra to do what you want to do.&lt;/li&gt;
&lt;li&gt;Or read &lt;a href="#the-rules-of-hydra-tics"&gt;the rules&lt;/a&gt;,
&lt;a href="https://github.com/abo-abo/hydra/blob/master/hydra-examples.el"&gt;the examples&lt;/a&gt;,
the docstrings and comments in the source.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;a id="user-content-community-wiki" class="anchor" aria-hidden="true" href="#community-wiki"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Community wiki&lt;/h1&gt;
&lt;p&gt;You can find some user created hydras and more documentation in the project's
&lt;a href="https://github.com/abo-abo/hydra/wiki/"&gt;community wiki&lt;/a&gt;. Feel free to add your
own or edit the existing ones.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-the-rules-of-hydra-tics" class="anchor" aria-hidden="true" href="#the-rules-of-hydra-tics"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;The Rules of Hydra-tics&lt;/h1&gt;
&lt;p&gt;Each hydra (take &lt;code&gt;awesome&lt;/code&gt; as a prefix to make it more specific) looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(defhydra hydra-awesome (awesome-map awesome-binding awesome-plist)
  awesome-docstring
  awesome-head-1
  awesome-head-2
  awesome-head-3
  ...)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;a id="user-content-hydra-awesome" class="anchor" aria-hidden="true" href="#hydra-awesome"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;code&gt;hydra-awesome&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Each hydra needs a name, and this one is named &lt;code&gt;hydra-awesome&lt;/code&gt;. You can name your hydras as you wish,
but I prefer to start each one with &lt;code&gt;hydra-&lt;/code&gt;, because it acts as an additional namespace layer, for example:
&lt;code&gt;hydra-zoom&lt;/code&gt;, &lt;code&gt;hydra-helm&lt;/code&gt;, &lt;code&gt;hydra-apropos&lt;/code&gt; etc.&lt;/p&gt;
&lt;p&gt;If you name your hydra &lt;code&gt;hydra-awesome&lt;/code&gt;, the return result of &lt;code&gt;defhydra&lt;/code&gt; will be &lt;code&gt;hydra-awesome/body&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here's what &lt;code&gt;hydra-zoom/body&lt;/code&gt; looks like, if you're interested:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;defun&lt;/span&gt; &lt;span class="pl-e"&gt;hydra-zoom/body&lt;/span&gt; ()
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Call the body in the &lt;span class="pl-cce"&gt;\"&lt;/span&gt;hydra-zoom&lt;span class="pl-cce"&gt;\"&lt;/span&gt; hydra.&lt;/span&gt;
&lt;span class="pl-s"&gt;&lt;/span&gt;
&lt;span class="pl-s"&gt;The heads for the associated hydra are:&lt;/span&gt;
&lt;span class="pl-s"&gt;&lt;/span&gt;
&lt;span class="pl-s"&gt;&lt;span class="pl-cce"&gt;\"&lt;/span&gt;g&lt;span class="pl-cce"&gt;\"&lt;/span&gt;:    &lt;span class="pl-smi"&gt;`text-scale-increase'&lt;/span&gt;,&lt;/span&gt;
&lt;span class="pl-s"&gt;&lt;span class="pl-cce"&gt;\"&lt;/span&gt;l&lt;span class="pl-cce"&gt;\"&lt;/span&gt;:    &lt;span class="pl-smi"&gt;`text-scale-decrease'&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-s"&gt;&lt;/span&gt;
&lt;span class="pl-s"&gt;The body can be accessed via &lt;span class="pl-smi"&gt;`hydra-zoom/body'&lt;/span&gt;, which is bound to &lt;span class="pl-cce"&gt;\"&lt;/span&gt;&amp;lt;f2&amp;gt;&lt;span class="pl-cce"&gt;\"&lt;/span&gt;.&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  (&lt;span class="pl-k"&gt;interactive&lt;/span&gt;)
  (&lt;span class="pl-c1"&gt;require&lt;/span&gt; &lt;span class="pl-c1"&gt;'hydra&lt;/span&gt;)
  (hydra-default-pre)
  (&lt;span class="pl-k"&gt;let&lt;/span&gt; ((hydra--ignore &lt;span class="pl-c1"&gt;nil&lt;/span&gt;))
    (hydra-keyboard-quit)
    (&lt;span class="pl-k"&gt;setq&lt;/span&gt; hydra-curr-body-fn
          &lt;span class="pl-c1"&gt;'hydra-zoom/body&lt;/span&gt;))
  (hydra-show-hint
   hydra-zoom/hint
   &lt;span class="pl-c1"&gt;'hydra-zoom&lt;/span&gt;)
  (hydra-set-transient-map
   hydra-zoom/keymap
   (&lt;span class="pl-k"&gt;lambda&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;
     (hydra-keyboard-quit)
     &lt;span class="pl-c1"&gt;nil&lt;/span&gt;)
   &lt;span class="pl-c1"&gt;nil&lt;/span&gt;)
  (&lt;span class="pl-k"&gt;setq&lt;/span&gt; prefix-arg
        current-prefix-arg))&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-awesome-map-and-awesome-binding" class="anchor" aria-hidden="true" href="#awesome-map-and-awesome-binding"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;code&gt;awesome-map&lt;/code&gt; and &lt;code&gt;awesome-binding&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;This can be any keymap, for instance, &lt;code&gt;global-map&lt;/code&gt; or &lt;code&gt;isearch-mode-map&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For this example:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(defhydra hydra-zoom (&lt;span class="pl-c1"&gt;global-map&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&amp;lt;f2&amp;gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;zoom&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;g&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; text-scale-increase &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;in&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
  (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;l&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; text-scale-decrease &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;out&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;awesome-map&lt;/code&gt; is &lt;code&gt;global-map&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;awesome-binding&lt;/code&gt; is &lt;code&gt;"&amp;lt;f2&amp;gt;"&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And here's the relevant generated code:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;unless&lt;/span&gt; (&lt;span class="pl-c1"&gt;keymapp&lt;/span&gt; (&lt;span class="pl-c1"&gt;lookup-key&lt;/span&gt; global-map (&lt;span class="pl-c1"&gt;kbd&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&amp;lt;f2&amp;gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)))
  (&lt;span class="pl-c1"&gt;define-key&lt;/span&gt; global-map (&lt;span class="pl-c1"&gt;kbd&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&amp;lt;f2&amp;gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;nil&lt;/span&gt;))
(&lt;span class="pl-c1"&gt;define-key&lt;/span&gt; global-map [f2 103]
  (&lt;span class="pl-k"&gt;function&lt;/span&gt; hydra-zoom/text-scale-increase))
(&lt;span class="pl-c1"&gt;define-key&lt;/span&gt; global-map [f2 108]
  (&lt;span class="pl-k"&gt;function&lt;/span&gt; hydra-zoom/text-scale-decrease))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you see, &lt;code&gt;"&amp;lt;f2&amp;gt;"&lt;/code&gt; is used as a prefix for &lt;kbd&gt;g&lt;/kbd&gt; (char value 103) and &lt;kbd&gt;l&lt;/kbd&gt;
(char value 108).&lt;/p&gt;
&lt;p&gt;If you don't want to use a map right now, you can skip it like this:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(defhydra hydra-zoom (&lt;span class="pl-c1"&gt;nil&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;)
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;zoom&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;g&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; text-scale-increase &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;in&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
  (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;l&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; text-scale-decrease &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;out&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or even simpler:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(defhydra hydra-zoom ()
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;zoom&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;g&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; text-scale-increase &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;in&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
  (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;l&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; text-scale-decrease &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;out&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But then you would have to bind &lt;code&gt;hydra-zoom/text-scale-increase&lt;/code&gt; and
&lt;code&gt;hydra-zoom/text-scale-decrease&lt;/code&gt; yourself.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-awesome-plist" class="anchor" aria-hidden="true" href="#awesome-plist"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;code&gt;awesome-plist&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;You can read up on what a plist is in
&lt;a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Property-Lists.html" rel="nofollow"&gt;the Elisp manual&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can use &lt;code&gt;awesome-plist&lt;/code&gt; to modify the behavior of each head in some way.
Below is a list of each key.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-pre-and-post" class="anchor" aria-hidden="true" href="#pre-and-post"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;code&gt;:pre&lt;/code&gt; and &lt;code&gt;:post&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;You can specify code that will be called before each head, and after the body. For example:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(defhydra hydra-vi (&lt;span class="pl-c1"&gt;:pre&lt;/span&gt; (&lt;span class="pl-c1"&gt;set-cursor-color&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;#40e0d0&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
                    &lt;span class="pl-c1"&gt;:post&lt;/span&gt; (&lt;span class="pl-k"&gt;progn&lt;/span&gt;
                            (&lt;span class="pl-c1"&gt;set-cursor-color&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;#ffffff&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
                            (&lt;span class="pl-c1"&gt;message&lt;/span&gt;
                             &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Thank you, come again.&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)))
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;vi&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;l&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; forward-char)
  (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;h&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; backward-char)
  (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;j&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; next-line)
  (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;k&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; previous-line)
  (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;q&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;quit&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Thanks to &lt;code&gt;:pre&lt;/code&gt;, each time any head is called, the cursor color is changed.
And when the hydra quits, the cursor color will be made black again with &lt;code&gt;:post&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-exit" class="anchor" aria-hidden="true" href="#exit"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;code&gt;:exit&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;:exit&lt;/code&gt; key is inherited by every head (they can override it) and influences what will happen
after executing head's command:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:exit nil&lt;/code&gt; (the default) means that the hydra state will continue - you'll still see the hint and be able to use short bindings.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:exit t&lt;/code&gt; means that the hydra state will stop.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-foreign-keys" class="anchor" aria-hidden="true" href="#foreign-keys"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;code&gt;:foreign-keys&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;:foreign-keys&lt;/code&gt; key belongs to the body and decides what to do when a key is pressed that doesn't
belong to any head:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:foreign-keys nil&lt;/code&gt; (the default) means that the hydra state will stop and the foreign key will
do whatever it was supposed to do if there was no hydra state.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:foreign-keys warn&lt;/code&gt; will not stop the hydra state, but instead will issue a warning without
running the foreign key.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:foreign-keys run&lt;/code&gt; will not stop the hydra state, and try to run the foreign key.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-color" class="anchor" aria-hidden="true" href="#color"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;code&gt;:color&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;:color&lt;/code&gt; key is a shortcut. It aggregates &lt;code&gt;:exit&lt;/code&gt; and &lt;code&gt;:foreign-keys&lt;/code&gt; key in the following way:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;| color    | toggle                     |
|----------+----------------------------|
| red      |                            |
| blue     | :exit t                    |
| amaranth | :foreign-keys warn         |
| teal     | :foreign-keys warn :exit t |
| pink     | :foreign-keys run          |
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It's also a trick to make you instantly aware of the current hydra keys that you're about to press:
the keys will be highlighted with the appropriate color.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-timeout" class="anchor" aria-hidden="true" href="#timeout"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;code&gt;:timeout&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;:timeout&lt;/code&gt; key starts a timer for the corresponding amount of seconds that disables the hydra.
Calling any head will refresh the timer.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-hint" class="anchor" aria-hidden="true" href="#hint"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;code&gt;:hint&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;:hint&lt;/code&gt; key will be inherited by each head. Each head is allowed to override it, of course.
One value that makes sense is &lt;code&gt;:hint nil&lt;/code&gt;. See below for an explanation of head hint.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-bind" class="anchor" aria-hidden="true" href="#bind"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;code&gt;:bind&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;:bind&lt;/code&gt; key provides a lambda to be used to bind each head.  This is quite advanced and rarely
used, you're not likely to need it.  But if you would like to bind your heads with e.g. &lt;code&gt;bind-key&lt;/code&gt;
instead of &lt;code&gt;define-key&lt;/code&gt; you can use this option.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;:bind&lt;/code&gt; key can be overridden by each head. This is useful if you want to have a few heads that
are not bound outside the hydra.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-base-map" class="anchor" aria-hidden="true" href="#base-map"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;code&gt;:base-map&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Use this option if you want to override &lt;code&gt;hydra-base-map&lt;/code&gt; for the current hydra.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-awesome-docstring" class="anchor" aria-hidden="true" href="#awesome-docstring"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;code&gt;awesome-docstring&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;This can be a simple string used to build the final hydra hint.  However, if you start it with a
newline, the key-highlighting and Ruby-style string interpolation becomes enabled, as you can see in
&lt;code&gt;hydra-buffer-menu&lt;/code&gt; above.&lt;/p&gt;
&lt;p&gt;To highlight a key, just wrap it in underscores. Note that the key must belong to one of the heads.
The key will be highlighted with the color that is appropriate to the behavior of the key, i.e.  if
the key will make the hydra exit, the color will be blue.&lt;/p&gt;
&lt;p&gt;To insert an empty character, use &lt;code&gt;^&lt;/code&gt;. The only use of this is to have your code aligned as
nicely as the result.&lt;/p&gt;
&lt;p&gt;To insert a dynamic Elisp variable, use &lt;code&gt;%&lt;/code&gt;` followed by the variable. Each time the variable
changes due to a head, the docstring will be updated. &lt;code&gt;format&lt;/code&gt;-style width specifiers can be used.&lt;/p&gt;
&lt;p&gt;To insert a dynamic Elisp expression, use e.g. &lt;code&gt;%(length (dired-get-marked-files))&lt;/code&gt;.  If a head will
change the amount of marked files, for example, it will be appropriately updated.&lt;/p&gt;
&lt;p&gt;If the result of the Elisp expression is a string and you don't want to quote it, use this form:
&lt;code&gt;%s(shell-command-to-string "du -hs")&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-awesome-head-1" class="anchor" aria-hidden="true" href="#awesome-head-1"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;code&gt;awesome-head-1&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Each head looks like this:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(head-binding head-command head-hint head-plist)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For the head &lt;code&gt;("g" text-scale-increase "in")&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;head-binding&lt;/code&gt; is &lt;code&gt;"g"&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;head-command&lt;/code&gt; is &lt;code&gt;text-scale-increase&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;head-hint&lt;/code&gt; is &lt;code&gt;"in"&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;head-plist&lt;/code&gt; is &lt;code&gt;nil&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-head-binding" class="anchor" aria-hidden="true" href="#head-binding"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;code&gt;head-binding&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;head-binding&lt;/code&gt; is a string that can be passed to &lt;code&gt;kbd&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-head-command" class="anchor" aria-hidden="true" href="#head-command"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;code&gt;head-command&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;head-command&lt;/code&gt; can be:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;command name, like &lt;code&gt;text-scale-increase&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a lambda, like&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  ("g" (lambda ()
         (interactive)
         (let ((current-prefix-arg 4))
           (call-interactively #'magit-status)))
       "git")
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;nil, which exits the hydra.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a single sexp, which will be wrapped in an interactive lambda.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here's an example of the last option:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(defhydra hydra-launcher (&lt;span class="pl-c1"&gt;:color&lt;/span&gt; blue)
   &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Launch&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
   (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;h&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; man &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;man&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
   (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;r&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; (&lt;span class="pl-c1"&gt;browse-url&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;http://www.reddit.com/r/emacs/&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;reddit&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
   (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;w&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; (&lt;span class="pl-c1"&gt;browse-url&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;http://www.emacswiki.org/&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;emacswiki&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
   (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;s&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; shell &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;shell&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
   (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;q&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;cancel&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
(&lt;span class="pl-c1"&gt;global-set-key&lt;/span&gt; (&lt;span class="pl-c1"&gt;kbd&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-c r&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;'hydra-launcher/body&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-head-hint" class="anchor" aria-hidden="true" href="#head-hint"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;code&gt;head-hint&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;In case of a large body docstring, you usually don't want the head hint to show up, since
you've already documented it in the body docstring.
You can set the head hint to &lt;code&gt;nil&lt;/code&gt; to do this.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(defhydra hydra-zoom (&lt;span class="pl-c1"&gt;global-map&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&amp;lt;f2&amp;gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-s"&gt;Press _g_ to zoom in.&lt;/span&gt;
&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;g&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; text-scale-increase &lt;span class="pl-c1"&gt;nil&lt;/span&gt;)
  (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;l&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; text-scale-decrease &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;out&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-head-plist" class="anchor" aria-hidden="true" href="#head-plist"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;code&gt;head-plist&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Here's a list of body keys that can be overridden in each head:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:exit&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:color&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:bind&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:column&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Use &lt;code&gt;:column&lt;/code&gt; feature to have an aligned rectangular docstring without defining it manually.
See &lt;a href="https://github.com/abo-abo/hydra/blob/05871dd6c8af7b2268bd1a10eb9f8a3e423209cd/hydra-examples.el#L337"&gt;hydra-examples.el&lt;/a&gt; for an example code.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>abo-abo</author><guid isPermaLink="false">https://github.com/abo-abo/hydra</guid><pubDate>Tue, 26 Nov 2019 00:07:00 GMT</pubDate></item><item><title>emacscollective/closql #8 in Emacs Lisp, Today</title><link>https://github.com/emacscollective/closql</link><description>&lt;p&gt;&lt;i&gt;Store EIEIO objects using EmacSQL&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-store-eieio-objects-using-emacsql" class="anchor" aria-hidden="true" href="#store-eieio-objects-using-emacsql"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Store EIEIO objects using EmacSQL&lt;/h1&gt;
&lt;p&gt;Store uniform &lt;a href="https://www.gnu.org/software/emacs/manual/html_node/eieio/index.html" rel="nofollow"&gt;EIEIO&lt;/a&gt; objects in an &lt;a href="https://github.com/skeeto/emacsql"&gt;EmacSQL&lt;/a&gt; database.  &lt;a href="https://www.sqlite.org" rel="nofollow"&gt;SQLite&lt;/a&gt; is
used as backend.  This library imposes some restrictions on what kind
of objects can be stored; it isn't intended to store arbitrary
objects.  All objects have to share a common superclass and subclasses
cannot add any additional instance slots.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>emacscollective</author><guid isPermaLink="false">https://github.com/emacscollective/closql</guid><pubDate>Tue, 26 Nov 2019 00:08:00 GMT</pubDate></item><item><title>emacs-evil/goto-chg #9 in Emacs Lisp, Today</title><link>https://github.com/emacs-evil/goto-chg</link><description>&lt;p&gt;&lt;i&gt;[No description found.]&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;This repo does not have a README.&lt;/i&gt;&lt;/p&gt;</description><author>emacs-evil</author><guid isPermaLink="false">https://github.com/emacs-evil/goto-chg</guid><pubDate>Tue, 26 Nov 2019 00:09:00 GMT</pubDate></item><item><title>magnars/s.el #10 in Emacs Lisp, Today</title><link>https://github.com/magnars/s.el</link><description>&lt;p&gt;&lt;i&gt;The long lost Emacs string manipulation library.&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-sel--" class="anchor" aria-hidden="true" href="#sel--"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;s.el &lt;a href="http://travis-ci.org/magnars/s.el" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/8e928c8c98a685afe28b60d64fe0247086ec7d41/68747470733a2f2f7365637572652e7472617669732d63692e6f72672f6d61676e6172732f732e656c2e706e67" alt="Build Status" data-canonical-src="https://secure.travis-ci.org/magnars/s.el.png" style="max-width:100%;"&gt;&lt;/a&gt; &lt;a href="https://coveralls.io/r/magnars/s.el?branch=master" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/5ef927345f518558ae37ffebbc6b18750749ec11/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6d61676e6172732f732e656c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/magnars/s.el/badge.svg?branch=master" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;The long lost Emacs string manipulation library.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installation&lt;/h2&gt;
&lt;p&gt;It's available on &lt;a href="http://marmalade-repo.org/" rel="nofollow"&gt;marmalade&lt;/a&gt; and &lt;a href="https://melpa.org/" rel="nofollow"&gt;Melpa&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;M-x package-install s
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or you can just dump &lt;code&gt;s.el&lt;/code&gt; in your load path somewhere.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-functions" class="anchor" aria-hidden="true" href="#functions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Functions&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-tweak-whitespace" class="anchor" aria-hidden="true" href="#tweak-whitespace"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tweak whitespace&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#s-trim-s"&gt;s-trim&lt;/a&gt; &lt;code&gt;(s)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#s-trim-left-s"&gt;s-trim-left&lt;/a&gt; &lt;code&gt;(s)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#s-trim-right-s"&gt;s-trim-right&lt;/a&gt; &lt;code&gt;(s)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#s-chomp-s"&gt;s-chomp&lt;/a&gt; &lt;code&gt;(s)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#s-collapse-whitespace-s"&gt;s-collapse-whitespace&lt;/a&gt; &lt;code&gt;(s)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#s-word-wrap-len-s"&gt;s-word-wrap&lt;/a&gt; &lt;code&gt;(len s)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#s-center-len-s"&gt;s-center&lt;/a&gt; &lt;code&gt;(len s)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#s-pad-left-len-padding-s"&gt;s-pad-left&lt;/a&gt; &lt;code&gt;(len padding s)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#s-pad-right-len-padding-s"&gt;s-pad-right&lt;/a&gt; &lt;code&gt;(len padding s)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-to-shorter-string" class="anchor" aria-hidden="true" href="#to-shorter-string"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;To shorter string&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#s-truncate-len-s"&gt;s-truncate&lt;/a&gt; &lt;code&gt;(len s)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#s-left-len-s"&gt;s-left&lt;/a&gt; &lt;code&gt;(len s)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#s-right-len-s"&gt;s-right&lt;/a&gt; &lt;code&gt;(len s)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#s-chop-suffix-suffix-s"&gt;s-chop-suffix&lt;/a&gt; &lt;code&gt;(suffix s)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#s-chop-suffixes-suffixes-s"&gt;s-chop-suffixes&lt;/a&gt; &lt;code&gt;(suffixes s)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#s-chop-prefix-prefix-s"&gt;s-chop-prefix&lt;/a&gt; &lt;code&gt;(prefix s)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#s-chop-prefixes-prefixes-s"&gt;s-chop-prefixes&lt;/a&gt; &lt;code&gt;(prefixes s)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#s-shared-start-s1-s2"&gt;s-shared-start&lt;/a&gt; &lt;code&gt;(s1 s2)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#s-shared-end-s1-s2"&gt;s-shared-end&lt;/a&gt; &lt;code&gt;(s1 s2)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-to-longer-string" class="anchor" aria-hidden="true" href="#to-longer-string"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;To longer string&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#s-repeat-num-s"&gt;s-repeat&lt;/a&gt; &lt;code&gt;(num s)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#s-concat-rest-strings"&gt;s-concat&lt;/a&gt; &lt;code&gt;(&amp;amp;rest strings)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#s-prepend-prefix-s"&gt;s-prepend&lt;/a&gt; &lt;code&gt;(prefix s)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#s-append-suffix-s"&gt;s-append&lt;/a&gt; &lt;code&gt;(suffix s)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-to-and-from-lists" class="anchor" aria-hidden="true" href="#to-and-from-lists"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;To and from lists&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#s-lines-s"&gt;s-lines&lt;/a&gt; &lt;code&gt;(s)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#s-match-regexp-s-optional-start"&gt;s-match&lt;/a&gt; &lt;code&gt;(regexp s &amp;amp;optional start)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#s-match-strings-all-regex-string"&gt;s-match-strings-all&lt;/a&gt; &lt;code&gt;(regex string)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#s-matched-positions-all-regexp-string-optional-subexp-depth"&gt;s-matched-positions-all&lt;/a&gt; &lt;code&gt;(regexp string &amp;amp;optional subexp-depth)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#s-slice-at-regexp-s"&gt;s-slice-at&lt;/a&gt; &lt;code&gt;(regexp s)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#s-split-separator-s-optional-omit-nulls"&gt;s-split&lt;/a&gt; &lt;code&gt;(separator s &amp;amp;optional omit-nulls)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#s-split-up-to-separator-s-n-optional-omit-nulls"&gt;s-split-up-to&lt;/a&gt; &lt;code&gt;(separator s n &amp;amp;optional omit-nulls)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#s-join-separator-strings"&gt;s-join&lt;/a&gt; &lt;code&gt;(separator strings)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-predicates" class="anchor" aria-hidden="true" href="#predicates"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Predicates&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#s-equals-s1-s2"&gt;s-equals?&lt;/a&gt; &lt;code&gt;(s1 s2)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#s-less-s1-s2"&gt;s-less?&lt;/a&gt; &lt;code&gt;(s1 s2)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#s-matches-regexp-s-optional-start"&gt;s-matches?&lt;/a&gt; &lt;code&gt;(regexp s &amp;amp;optional start)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#s-blank-s"&gt;s-blank?&lt;/a&gt; &lt;code&gt;(s)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#s-present-s"&gt;s-present?&lt;/a&gt; &lt;code&gt;(s)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#s-ends-with-suffix-s-optional-ignore-case"&gt;s-ends-with?&lt;/a&gt; &lt;code&gt;(suffix s &amp;amp;optional ignore-case)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#s-starts-with-prefix-s-optional-ignore-case"&gt;s-starts-with?&lt;/a&gt; &lt;code&gt;(prefix s &amp;amp;optional ignore-case)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#s-contains-needle-s-optional-ignore-case"&gt;s-contains?&lt;/a&gt; &lt;code&gt;(needle s &amp;amp;optional ignore-case)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#s-lowercase-s"&gt;s-lowercase?&lt;/a&gt; &lt;code&gt;(s)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#s-uppercase-s"&gt;s-uppercase?&lt;/a&gt; &lt;code&gt;(s)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#s-mixedcase-s"&gt;s-mixedcase?&lt;/a&gt; &lt;code&gt;(s)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#s-capitalized-s"&gt;s-capitalized?&lt;/a&gt; &lt;code&gt;(s)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#s-numeric-s"&gt;s-numeric?&lt;/a&gt; &lt;code&gt;(s)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-the-misc-bucket" class="anchor" aria-hidden="true" href="#the-misc-bucket"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;The misc bucket&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#s-replace-old-new-s"&gt;s-replace&lt;/a&gt; &lt;code&gt;(old new s)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#s-replace-all-replacements-s"&gt;s-replace-all&lt;/a&gt; &lt;code&gt;(replacements s)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#s-downcase-s"&gt;s-downcase&lt;/a&gt; &lt;code&gt;(s)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#s-upcase-s"&gt;s-upcase&lt;/a&gt; &lt;code&gt;(s)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#s-capitalize-s"&gt;s-capitalize&lt;/a&gt; &lt;code&gt;(s)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#s-titleize-s"&gt;s-titleize&lt;/a&gt; &lt;code&gt;(s)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#s-with-s-form-rest-more"&gt;s-with&lt;/a&gt; &lt;code&gt;(s form &amp;amp;rest more)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#s-index-of-needle-s-optional-ignore-case"&gt;s-index-of&lt;/a&gt; &lt;code&gt;(needle s &amp;amp;optional ignore-case)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#s-reverse-s"&gt;s-reverse&lt;/a&gt; &lt;code&gt;(s)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#s-presence-s"&gt;s-presence&lt;/a&gt; &lt;code&gt;(s)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#s-format-template-replacer-optional-extra"&gt;s-format&lt;/a&gt; &lt;code&gt;(template replacer &amp;amp;optional extra)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#s-lex-format-format-str"&gt;s-lex-format&lt;/a&gt; &lt;code&gt;(format-str)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#s-count-matches-regexp-s-optional-start-end"&gt;s-count-matches&lt;/a&gt; &lt;code&gt;(regexp s &amp;amp;optional start end)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#s-wrap-s-prefix-optional-suffix"&gt;s-wrap&lt;/a&gt; &lt;code&gt;(s prefix &amp;amp;optional suffix)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-pertaining-to-words" class="anchor" aria-hidden="true" href="#pertaining-to-words"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Pertaining to words&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#s-split-words-s"&gt;s-split-words&lt;/a&gt; &lt;code&gt;(s)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#s-lower-camel-case-s"&gt;s-lower-camel-case&lt;/a&gt; &lt;code&gt;(s)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#s-upper-camel-case-s"&gt;s-upper-camel-case&lt;/a&gt; &lt;code&gt;(s)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#s-snake-case-s"&gt;s-snake-case&lt;/a&gt; &lt;code&gt;(s)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#s-dashed-words-s"&gt;s-dashed-words&lt;/a&gt; &lt;code&gt;(s)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#s-capitalized-words-s"&gt;s-capitalized-words&lt;/a&gt; &lt;code&gt;(s)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#s-titleized-words-s"&gt;s-titleized-words&lt;/a&gt; &lt;code&gt;(s)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#s-word-initials-s"&gt;s-word-initials&lt;/a&gt; &lt;code&gt;(s)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-documentation-and-examples" class="anchor" aria-hidden="true" href="#documentation-and-examples"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Documentation and examples&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-s-trim-s" class="anchor" aria-hidden="true" href="#s-trim-s"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;s-trim &lt;code&gt;(s)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Remove whitespace at the beginning and end of &lt;code&gt;s&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(s-trim &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;trim &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "trim"&lt;/span&gt;
(s-trim &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt; this&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "this"&lt;/span&gt;
(s-trim &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt; only  trims beg and end  &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "only  trims beg and end"&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-s-trim-left-s" class="anchor" aria-hidden="true" href="#s-trim-left-s"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;s-trim-left &lt;code&gt;(s)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Remove whitespace at the beginning of &lt;code&gt;s&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(s-trim-left &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;trim &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "trim "&lt;/span&gt;
(s-trim-left &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt; this&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "this"&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-s-trim-right-s" class="anchor" aria-hidden="true" href="#s-trim-right-s"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;s-trim-right &lt;code&gt;(s)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Remove whitespace at the end of &lt;code&gt;s&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(s-trim-right &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;trim &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "trim"&lt;/span&gt;
(s-trim-right &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt; this&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; " this"&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-s-chomp-s" class="anchor" aria-hidden="true" href="#s-chomp-s"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;s-chomp &lt;code&gt;(s)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Remove one trailing &lt;code&gt;\n&lt;/code&gt;, &lt;code&gt;\r&lt;/code&gt; or &lt;code&gt;\r\n&lt;/code&gt; from &lt;code&gt;s&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(s-chomp &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;no newlines&lt;span class="pl-cce"&gt;\n&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "no newlines"&lt;/span&gt;
(s-chomp &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;no newlines&lt;span class="pl-cce"&gt;\r\n&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "no newlines"&lt;/span&gt;
(s-chomp &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;some newlines&lt;span class="pl-cce"&gt;\n\n&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "some newlines\n"&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-s-collapse-whitespace-s" class="anchor" aria-hidden="true" href="#s-collapse-whitespace-s"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;s-collapse-whitespace &lt;code&gt;(s)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Convert all adjacent whitespace characters to a single space.&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(s-collapse-whitespace &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;only   one space   please&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "only one space please"&lt;/span&gt;
(s-collapse-whitespace &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;collapse &lt;span class="pl-cce"&gt;\n&lt;/span&gt; all &lt;span class="pl-cce"&gt;\t&lt;/span&gt; sorts of &lt;span class="pl-cce"&gt;\r&lt;/span&gt; whitespace&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "collapse all sorts of whitespace"&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-s-word-wrap-len-s" class="anchor" aria-hidden="true" href="#s-word-wrap-len-s"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;s-word-wrap &lt;code&gt;(len s)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;If &lt;code&gt;s&lt;/code&gt; is longer than &lt;code&gt;len&lt;/code&gt;, wrap the words with newlines.&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(s-word-wrap &lt;span class="pl-c1"&gt;10&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;This is too long&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "This is\ntoo long"&lt;/span&gt;
(s-word-wrap &lt;span class="pl-c1"&gt;10&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;This is way way too long&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "This is\nway way\ntoo long"&lt;/span&gt;
(s-word-wrap &lt;span class="pl-c1"&gt;10&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;It-wraps-words-but-does-not-break-them&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "It-wraps-words-but-does-not-break-them"&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-s-center-len-s" class="anchor" aria-hidden="true" href="#s-center-len-s"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;s-center &lt;code&gt;(len s)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;If &lt;code&gt;s&lt;/code&gt; is shorter than &lt;code&gt;len&lt;/code&gt;, pad it with spaces so it is centered.&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(s-center &lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;a&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "  a  "&lt;/span&gt;
(s-center &lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;ab&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "  ab "&lt;/span&gt;
(s-center &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;abc&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "abc"&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-s-pad-left-len-padding-s" class="anchor" aria-hidden="true" href="#s-pad-left-len-padding-s"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;s-pad-left &lt;code&gt;(len padding s)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;If &lt;code&gt;s&lt;/code&gt; is shorter than &lt;code&gt;len&lt;/code&gt;, pad it with &lt;code&gt;padding&lt;/code&gt; on the left.&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(s-pad-left &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;0&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;3&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "003"&lt;/span&gt;
(s-pad-left &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;0&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;23&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "023"&lt;/span&gt;
(s-pad-left &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;0&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;1234&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "1234"&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-s-pad-right-len-padding-s" class="anchor" aria-hidden="true" href="#s-pad-right-len-padding-s"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;s-pad-right &lt;code&gt;(len padding s)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;If &lt;code&gt;s&lt;/code&gt; is shorter than &lt;code&gt;len&lt;/code&gt;, pad it with &lt;code&gt;padding&lt;/code&gt; on the right.&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(s-pad-right &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;.&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;3&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "3.."&lt;/span&gt;
(s-pad-right &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;.&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;23&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "23."&lt;/span&gt;
(s-pad-right &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;.&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;1234&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "1234"&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-s-truncate-len-s" class="anchor" aria-hidden="true" href="#s-truncate-len-s"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;s-truncate &lt;code&gt;(len s)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;If &lt;code&gt;s&lt;/code&gt; is longer than &lt;code&gt;len&lt;/code&gt;, cut it down to &lt;code&gt;len&lt;/code&gt; - 3 and add ... at the end.&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(s-truncate &lt;span class="pl-c1"&gt;6&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;This is too long&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "Thi..."&lt;/span&gt;
(s-truncate &lt;span class="pl-c1"&gt;16&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;This is also too long&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "This is also ..."&lt;/span&gt;
(s-truncate &lt;span class="pl-c1"&gt;16&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;But this is not!&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "But this is not!"&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-s-left-len-s" class="anchor" aria-hidden="true" href="#s-left-len-s"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;s-left &lt;code&gt;(len s)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Returns up to the &lt;code&gt;len&lt;/code&gt; first chars of &lt;code&gt;s&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(s-left &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;lib/file.js&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "lib"&lt;/span&gt;
(s-left &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;li&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "li"&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-s-right-len-s" class="anchor" aria-hidden="true" href="#s-right-len-s"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;s-right &lt;code&gt;(len s)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Returns up to the &lt;code&gt;len&lt;/code&gt; last chars of &lt;code&gt;s&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(s-right &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;lib/file.js&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; ".js"&lt;/span&gt;
(s-right &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;li&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "li"&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-s-chop-suffix-suffix-s" class="anchor" aria-hidden="true" href="#s-chop-suffix-suffix-s"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;s-chop-suffix &lt;code&gt;(suffix s)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Remove &lt;code&gt;suffix&lt;/code&gt; if it is at end of &lt;code&gt;s&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(s-chop-suffix &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;-test.js&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;penguin-test.js&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "penguin"&lt;/span&gt;
(s-chop-suffix &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-cce"&gt;\n&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;no newlines&lt;span class="pl-cce"&gt;\n&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "no newlines"&lt;/span&gt;
(s-chop-suffix &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-cce"&gt;\n&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;some newlines&lt;span class="pl-cce"&gt;\n\n&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "some newlines\n"&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-s-chop-suffixes-suffixes-s" class="anchor" aria-hidden="true" href="#s-chop-suffixes-suffixes-s"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;s-chop-suffixes &lt;code&gt;(suffixes s)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Remove &lt;code&gt;suffixes&lt;/code&gt; one by one in order, if they are at the end of &lt;code&gt;s&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(s-chop-suffixes '(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;_test.js&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;-test.js&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Test.js&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;penguin-test.js&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "penguin"&lt;/span&gt;
(s-chop-suffixes '(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-cce"&gt;\r&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-cce"&gt;\n&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;penguin&lt;span class="pl-cce"&gt;\r\n&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "penguin\r"&lt;/span&gt;
(s-chop-suffixes '(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-cce"&gt;\n&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-cce"&gt;\r&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;penguin&lt;span class="pl-cce"&gt;\r\n&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "penguin"&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-s-chop-prefix-prefix-s" class="anchor" aria-hidden="true" href="#s-chop-prefix-prefix-s"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;s-chop-prefix &lt;code&gt;(prefix s)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Remove &lt;code&gt;prefix&lt;/code&gt; if it is at the start of &lt;code&gt;s&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(s-chop-prefix &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/tmp&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/tmp/file.js&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "/file.js"&lt;/span&gt;
(s-chop-prefix &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/tmp&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/tmp/tmp/file.js&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "/tmp/file.js"&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-s-chop-prefixes-prefixes-s" class="anchor" aria-hidden="true" href="#s-chop-prefixes-prefixes-s"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;s-chop-prefixes &lt;code&gt;(prefixes s)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Remove &lt;code&gt;prefixes&lt;/code&gt; one by one in order, if they are at the start of &lt;code&gt;s&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(s-chop-prefixes '(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/tmp&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/my&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/tmp/my/file.js&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "/file.js"&lt;/span&gt;
(s-chop-prefixes '(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/my&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/tmp&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/tmp/my/file.js&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "/my/file.js"&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-s-shared-start-s1-s2" class="anchor" aria-hidden="true" href="#s-shared-start-s1-s2"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;s-shared-start &lt;code&gt;(s1 s2)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Returns the longest prefix &lt;code&gt;s1&lt;/code&gt; and &lt;code&gt;s2&lt;/code&gt; have in common.&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(s-shared-start &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;bar&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;baz&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "ba"&lt;/span&gt;
(s-shared-start &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;foobar&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;foo&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "foo"&lt;/span&gt;
(s-shared-start &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;bar&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;foo&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; ""&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-s-shared-end-s1-s2" class="anchor" aria-hidden="true" href="#s-shared-end-s1-s2"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;s-shared-end &lt;code&gt;(s1 s2)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Returns the longest suffix &lt;code&gt;s1&lt;/code&gt; and &lt;code&gt;s2&lt;/code&gt; have in common.&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(s-shared-end &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;bar&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;var&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "ar"&lt;/span&gt;
(s-shared-end &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;foo&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;foo&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "foo"&lt;/span&gt;
(s-shared-end &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;bar&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;foo&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; ""&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-s-repeat-num-s" class="anchor" aria-hidden="true" href="#s-repeat-num-s"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;s-repeat &lt;code&gt;(num s)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Make a string of &lt;code&gt;s&lt;/code&gt; repeated &lt;code&gt;num&lt;/code&gt; times.&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(s-repeat &lt;span class="pl-c1"&gt;10&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt; &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "          "&lt;/span&gt;
(s-concat (s-repeat &lt;span class="pl-c1"&gt;8&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Na&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt; Batman!&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "NaNaNaNaNaNaNaNa Batman!"&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-s-concat-rest-strings" class="anchor" aria-hidden="true" href="#s-concat-rest-strings"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;s-concat &lt;code&gt;(&amp;amp;rest strings)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Join all the string arguments into one string.&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(s-concat &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;abc&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;def&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;ghi&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "abcdefghi"&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-s-prepend-prefix-s" class="anchor" aria-hidden="true" href="#s-prepend-prefix-s"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;s-prepend &lt;code&gt;(prefix s)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Concatenate &lt;code&gt;prefix&lt;/code&gt; and &lt;code&gt;s&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(s-prepend &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;abc&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;def&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "abcdef"&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-s-append-suffix-s" class="anchor" aria-hidden="true" href="#s-append-suffix-s"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;s-append &lt;code&gt;(suffix s)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Concatenate &lt;code&gt;s&lt;/code&gt; and &lt;code&gt;suffix&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(s-append &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;abc&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;def&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "defabc"&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-s-lines-s" class="anchor" aria-hidden="true" href="#s-lines-s"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;s-lines &lt;code&gt;(s)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Splits &lt;code&gt;s&lt;/code&gt; into a list of strings on newline characters.&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(s-lines &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;abc&lt;span class="pl-cce"&gt;\n&lt;/span&gt;def&lt;span class="pl-cce"&gt;\n&lt;/span&gt;ghi&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '("abc" "def" "ghi")&lt;/span&gt;
(s-lines &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;abc&lt;span class="pl-cce"&gt;\r&lt;/span&gt;def&lt;span class="pl-cce"&gt;\r&lt;/span&gt;ghi&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '("abc" "def" "ghi")&lt;/span&gt;
(s-lines &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;abc&lt;span class="pl-cce"&gt;\r\n&lt;/span&gt;def&lt;span class="pl-cce"&gt;\r\n&lt;/span&gt;ghi&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '("abc" "def" "ghi")&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-s-match-regexp-s-optional-start" class="anchor" aria-hidden="true" href="#s-match-regexp-s-optional-start"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;s-match &lt;code&gt;(regexp s &amp;amp;optional start)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;When the given expression matches the string, this function returns a list
of the whole matching string and a string for each matched subexpressions.
If it did not match the returned value is an empty list (nil).&lt;/p&gt;
&lt;p&gt;When &lt;code&gt;start&lt;/code&gt; is non-nil the search will start at that index.&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(s-match &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;^def&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;abcdefg&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; nil&lt;/span&gt;
(s-match &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;^abc&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;abcdefg&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '("abc")&lt;/span&gt;
(s-match &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;^/.*/&lt;span class="pl-cce"&gt;\\&lt;/span&gt;([a-z]+&lt;span class="pl-cce"&gt;\\&lt;/span&gt;)&lt;span class="pl-cce"&gt;\\&lt;/span&gt;.&lt;span class="pl-cce"&gt;\\&lt;/span&gt;([a-z]+&lt;span class="pl-cce"&gt;\\&lt;/span&gt;)&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/some/weird/file.html&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '("/some/weird/file.html" "file" "html")&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-s-match-strings-all-regex-string" class="anchor" aria-hidden="true" href="#s-match-strings-all-regex-string"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;s-match-strings-all &lt;code&gt;(regex string)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Return a list of matches for &lt;code&gt;regex&lt;/code&gt; in &lt;code&gt;string&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Each element itself is a list of matches, as per
&lt;code&gt;match-string&lt;/code&gt;. Multiple matches at the same position will be
ignored after the first.&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(s-match-strings-all &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;{&lt;span class="pl-cce"&gt;\\&lt;/span&gt;([^}]+&lt;span class="pl-cce"&gt;\\&lt;/span&gt;)}&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;x is {x} and y is {y}&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(("{x}" "x") ("{y}" "y"))&lt;/span&gt;
(s-match-strings-all &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;ab.&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;abXabY&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(("abX") ("abY"))&lt;/span&gt;
(s-match-strings-all &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-cce"&gt;\\&lt;/span&gt;&amp;lt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;foo bar baz&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(("") ("") (""))&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-s-matched-positions-all-regexp-string-optional-subexp-depth" class="anchor" aria-hidden="true" href="#s-matched-positions-all-regexp-string-optional-subexp-depth"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;s-matched-positions-all &lt;code&gt;(regexp string &amp;amp;optional subexp-depth)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Return a list of matched positions for &lt;code&gt;regexp&lt;/code&gt; in &lt;code&gt;string&lt;/code&gt;.
&lt;code&gt;subexp-depth&lt;/code&gt; is 0 by default.&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(s-matched-positions-all &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;l+&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;{{Hello}} World, {{Emacs}}!&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '((4 . 6) (13 . 14))&lt;/span&gt;
(s-matched-positions-all &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;{{&lt;span class="pl-cce"&gt;\\&lt;/span&gt;(.+?&lt;span class="pl-cce"&gt;\\&lt;/span&gt;)}}&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;{{Hello}} World, {{Emacs}}!&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '((0 . 9) (17 . 26))&lt;/span&gt;
(s-matched-positions-all &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;{{&lt;span class="pl-cce"&gt;\\&lt;/span&gt;(.+?&lt;span class="pl-cce"&gt;\\&lt;/span&gt;)}}&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;{{Hello}} World, {{Emacs}}!&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '((2 . 7) (19 . 24))&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-s-slice-at-regexp-s" class="anchor" aria-hidden="true" href="#s-slice-at-regexp-s"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;s-slice-at &lt;code&gt;(regexp s)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Slices &lt;code&gt;s&lt;/code&gt; up at every index matching &lt;code&gt;regexp&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(s-slice-at &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;-&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;abc&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '("abc")&lt;/span&gt;
(s-slice-at &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;-&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;abc-def&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '("abc" "-def")&lt;/span&gt;
(s-slice-at &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;[.#]&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;abc.def.ghi#id&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '("abc" ".def" ".ghi" "#id")&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-s-split-separator-s-optional-omit-nulls" class="anchor" aria-hidden="true" href="#s-split-separator-s-optional-omit-nulls"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;s-split &lt;code&gt;(separator s &amp;amp;optional omit-nulls)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Split &lt;code&gt;s&lt;/code&gt; into substrings bounded by matches for regexp &lt;code&gt;separator&lt;/code&gt;.
If &lt;code&gt;omit-nulls&lt;/code&gt; is non-nil, zero-length substrings are omitted.&lt;/p&gt;
&lt;p&gt;This is a simple wrapper around the built-in &lt;code&gt;split-string&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(s-split &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;|&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;a|bc|12|3&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '("a" "bc" "12" "3")&lt;/span&gt;
(s-split &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;:&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;a,c,d&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '("a,c,d")&lt;/span&gt;
(s-split &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-cce"&gt;\n&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;z&lt;span class="pl-cce"&gt;\n&lt;/span&gt;efg&lt;span class="pl-cce"&gt;\n&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '("z" "efg" "")&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-s-split-up-to-separator-s-n-optional-omit-nulls" class="anchor" aria-hidden="true" href="#s-split-up-to-separator-s-n-optional-omit-nulls"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;s-split-up-to &lt;code&gt;(separator s n &amp;amp;optional omit-nulls)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Split &lt;code&gt;s&lt;/code&gt; up to &lt;code&gt;n&lt;/code&gt; times into substrings bounded by matches for regexp &lt;code&gt;separator&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;omit-nulls&lt;/code&gt; is non-nil, zero-length substrings are omitted.&lt;/p&gt;
&lt;p&gt;See also &lt;code&gt;s-split&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(s-split-up-to &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-cce"&gt;\\&lt;/span&gt;s-*-&lt;span class="pl-cce"&gt;\\&lt;/span&gt;s-*&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Author - Track-number-one&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '("Author" "Track-number-one")&lt;/span&gt;
(s-split-up-to &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-cce"&gt;\\&lt;/span&gt;s-*-&lt;span class="pl-cce"&gt;\\&lt;/span&gt;s-*&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Author - Track-number-one&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '("Author" "Track" "number-one")&lt;/span&gt;
(s-split-up-to &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;|&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;foo||bar|baz|qux&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '("foo" "bar" "baz|qux")&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-s-join-separator-strings" class="anchor" aria-hidden="true" href="#s-join-separator-strings"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;s-join &lt;code&gt;(separator strings)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Join all the strings in &lt;code&gt;strings&lt;/code&gt; with &lt;code&gt;separator&lt;/code&gt; in between.&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(s-join &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;+&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; '(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;abc&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;def&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;ghi&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "abc+def+ghi"&lt;/span&gt;
(s-join &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-cce"&gt;\n&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; '(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;abc&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;def&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;ghi&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "abc\ndef\nghi"&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-s-equals-s1-s2" class="anchor" aria-hidden="true" href="#s-equals-s1-s2"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;s-equals? &lt;code&gt;(s1 s2)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Is &lt;code&gt;s1&lt;/code&gt; equal to &lt;code&gt;s2&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;This is a simple wrapper around the built-in &lt;code&gt;string-equal&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(s-equals? &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;abc&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;ABC&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; nil&lt;/span&gt;
(s-equals? &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;abc&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;abc&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; t&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-s-less-s1-s2" class="anchor" aria-hidden="true" href="#s-less-s1-s2"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;s-less? &lt;code&gt;(s1 s2)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Is &lt;code&gt;s1&lt;/code&gt; less than &lt;code&gt;s2&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;This is a simple wrapper around the built-in &lt;code&gt;string-lessp&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(s-less? &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;abc&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;abd&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; t&lt;/span&gt;
(s-less? &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;abd&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;abc&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; nil&lt;/span&gt;
(s-less? &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;abc&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;abc&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; nil&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-s-matches-regexp-s-optional-start" class="anchor" aria-hidden="true" href="#s-matches-regexp-s-optional-start"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;s-matches? &lt;code&gt;(regexp s &amp;amp;optional start)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Does &lt;code&gt;regexp&lt;/code&gt; match &lt;code&gt;s&lt;/code&gt;?
If &lt;code&gt;start&lt;/code&gt; is non-nil the search starts at that index.&lt;/p&gt;
&lt;p&gt;This is a simple wrapper around the built-in &lt;code&gt;string-match-p&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(s-matches? &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;^[0-9]+$&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;123&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; t&lt;/span&gt;
(s-matches? &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;^[0-9]+$&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;a123&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; nil&lt;/span&gt;
(s-matches? &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;1&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;1a&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; nil&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-s-blank-s" class="anchor" aria-hidden="true" href="#s-blank-s"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;s-blank? &lt;code&gt;(s)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Is &lt;code&gt;s&lt;/code&gt; nil or the empty string?&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(s-blank? &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; t&lt;/span&gt;
(s-blank? &lt;span class="pl-c1"&gt;nil&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; t&lt;/span&gt;
(s-blank? &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt; &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; nil&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-s-present-s" class="anchor" aria-hidden="true" href="#s-present-s"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;s-present? &lt;code&gt;(s)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Is &lt;code&gt;s&lt;/code&gt; anything but nil or the empty string?&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(s-present? &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; nil&lt;/span&gt;
(s-present? &lt;span class="pl-c1"&gt;nil&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; nil&lt;/span&gt;
(s-present? &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt; &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; t&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-s-ends-with-suffix-s-optional-ignore-case" class="anchor" aria-hidden="true" href="#s-ends-with-suffix-s-optional-ignore-case"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;s-ends-with? &lt;code&gt;(suffix s &amp;amp;optional ignore-case)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Does &lt;code&gt;s&lt;/code&gt; end with &lt;code&gt;suffix&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;ignore-case&lt;/code&gt; is non-nil, the comparison is done without paying
attention to case differences.&lt;/p&gt;
&lt;p&gt;Alias: &lt;code&gt;s-suffix?&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(s-ends-with? &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;.md&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;readme.md&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; t&lt;/span&gt;
(s-ends-with? &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;.MD&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;readme.md&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; nil&lt;/span&gt;
(s-ends-with? &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;.MD&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;readme.md&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; t&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-s-starts-with-prefix-s-optional-ignore-case" class="anchor" aria-hidden="true" href="#s-starts-with-prefix-s-optional-ignore-case"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;s-starts-with? &lt;code&gt;(prefix s &amp;amp;optional ignore-case)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Does &lt;code&gt;s&lt;/code&gt; start with &lt;code&gt;prefix&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;ignore-case&lt;/code&gt; is non-nil, the comparison is done without paying
attention to case differences.&lt;/p&gt;
&lt;p&gt;Alias: &lt;code&gt;s-prefix?&lt;/code&gt;. This is a simple wrapper around the built-in
&lt;code&gt;string-prefix-p&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(s-starts-with? &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;lib/&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;lib/file.js&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; t&lt;/span&gt;
(s-starts-with? &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;LIB/&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;lib/file.js&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; nil&lt;/span&gt;
(s-starts-with? &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;LIB/&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;lib/file.js&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; t&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-s-contains-needle-s-optional-ignore-case" class="anchor" aria-hidden="true" href="#s-contains-needle-s-optional-ignore-case"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;s-contains? &lt;code&gt;(needle s &amp;amp;optional ignore-case)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Does &lt;code&gt;s&lt;/code&gt; contain &lt;code&gt;needle&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;ignore-case&lt;/code&gt; is non-nil, the comparison is done without paying
attention to case differences.&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(s-contains? &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;file&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;lib/file.js&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; t&lt;/span&gt;
(s-contains? &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;nope&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;lib/file.js&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; nil&lt;/span&gt;
(s-contains? &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;^a&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;it's not ^a regexp&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; t&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-s-lowercase-s" class="anchor" aria-hidden="true" href="#s-lowercase-s"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;s-lowercase? &lt;code&gt;(s)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Are all the letters in &lt;code&gt;s&lt;/code&gt; in lower case?&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(s-lowercase? &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;file&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; t&lt;/span&gt;
(s-lowercase? &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;File&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; nil&lt;/span&gt;
(s-lowercase? &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;filä&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; t&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-s-uppercase-s" class="anchor" aria-hidden="true" href="#s-uppercase-s"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;s-uppercase? &lt;code&gt;(s)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Are all the letters in &lt;code&gt;s&lt;/code&gt; in upper case?&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(s-uppercase? &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;HULK SMASH&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; t&lt;/span&gt;
(s-uppercase? &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Bruce no smash&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; nil&lt;/span&gt;
(s-uppercase? &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;FöB&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; nil&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-s-mixedcase-s" class="anchor" aria-hidden="true" href="#s-mixedcase-s"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;s-mixedcase? &lt;code&gt;(s)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Are there both lower case and upper case letters in &lt;code&gt;s&lt;/code&gt;?&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(s-mixedcase? &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;HULK SMASH&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; nil&lt;/span&gt;
(s-mixedcase? &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Bruce no smash&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; t&lt;/span&gt;
(s-mixedcase? &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;BRÜCE&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; nil&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-s-capitalized-s" class="anchor" aria-hidden="true" href="#s-capitalized-s"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;s-capitalized? &lt;code&gt;(s)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;In &lt;code&gt;s&lt;/code&gt;, is the first letter upper case, and all other letters lower case?&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(s-capitalized? &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Capitalized&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; t&lt;/span&gt;
(s-capitalized? &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;I am capitalized&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; t&lt;/span&gt;
(s-capitalized? &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;I Am Titleized&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; nil&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-s-numeric-s" class="anchor" aria-hidden="true" href="#s-numeric-s"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;s-numeric? &lt;code&gt;(s)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Is &lt;code&gt;s&lt;/code&gt; a number?&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(s-numeric? &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;123&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; t&lt;/span&gt;
(s-numeric? &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;onetwothree&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; nil&lt;/span&gt;
(s-numeric? &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;7a&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; nil&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-s-replace-old-new-s" class="anchor" aria-hidden="true" href="#s-replace-old-new-s"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;s-replace &lt;code&gt;(old new s)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Replaces &lt;code&gt;old&lt;/code&gt; with &lt;code&gt;new&lt;/code&gt; in &lt;code&gt;s&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(s-replace &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;file&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;nope&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;lib/file.js&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "lib/nope.js"&lt;/span&gt;
(s-replace &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;^a&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-cce"&gt;\\&lt;/span&gt;1&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;it's not ^a regexp&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "it's not \\1 regexp"&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-s-replace-all-replacements-s" class="anchor" aria-hidden="true" href="#s-replace-all-replacements-s"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;s-replace-all &lt;code&gt;(replacements s)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;replacements&lt;/code&gt; is a list of cons-cells. Each &lt;code&gt;car&lt;/code&gt; is replaced with &lt;code&gt;cdr&lt;/code&gt; in &lt;code&gt;s&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(s-replace-all '((&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;lib&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; . &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;test&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;file&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; . &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;file_test&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)) &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;lib/file.js&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "test/file_test.js"&lt;/span&gt;
(s-replace-all '((&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;lib&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; . &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;test&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;test&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; . &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;lib&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)) &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;lib/test.js&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "test/lib.js"&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-s-downcase-s" class="anchor" aria-hidden="true" href="#s-downcase-s"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;s-downcase &lt;code&gt;(s)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Convert &lt;code&gt;s&lt;/code&gt; to lower case.&lt;/p&gt;
&lt;p&gt;This is a simple wrapper around the built-in &lt;code&gt;downcase&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(s-downcase &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;ABC&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "abc"&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-s-upcase-s" class="anchor" aria-hidden="true" href="#s-upcase-s"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;s-upcase &lt;code&gt;(s)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Convert &lt;code&gt;s&lt;/code&gt; to upper case.&lt;/p&gt;
&lt;p&gt;This is a simple wrapper around the built-in &lt;code&gt;upcase&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(s-upcase &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;abc&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "ABC"&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-s-capitalize-s" class="anchor" aria-hidden="true" href="#s-capitalize-s"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;s-capitalize &lt;code&gt;(s)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Convert the first word's first character to upper case and the rest to lower case in &lt;code&gt;s&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(s-capitalize &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;abc DEF&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "Abc def"&lt;/span&gt;
(s-capitalize &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;abc.DEF&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "Abc.def"&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-s-titleize-s" class="anchor" aria-hidden="true" href="#s-titleize-s"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;s-titleize &lt;code&gt;(s)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Convert each word's first character to upper case and the rest to lower case in &lt;code&gt;s&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This is a simple wrapper around the built-in &lt;code&gt;capitalize&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(s-titleize &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;abc DEF&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "Abc Def"&lt;/span&gt;
(s-titleize &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;abc.DEF&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "Abc.Def"&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-s-with-s-form-rest-more" class="anchor" aria-hidden="true" href="#s-with-s-form-rest-more"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;s-with &lt;code&gt;(s form &amp;amp;rest more)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Threads &lt;code&gt;s&lt;/code&gt; through the forms. Inserts &lt;code&gt;s&lt;/code&gt; as the last item
in the first form, making a list of it if it is not a list
already. If there are more forms, inserts the first form as the
last item in second form, etc.&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(s-with &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;   hulk smash   &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; s-trim s-upcase) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "HULK SMASH"&lt;/span&gt;
(s-with &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;My car is a Toyota&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; (s-replace &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;car&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;name&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) (s-replace &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;a Toyota&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Bond&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) (s-append &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;, James Bond&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "My name is Bond, James Bond"&lt;/span&gt;
(s-with &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;abc &lt;span class="pl-cce"&gt;\n&lt;/span&gt;def  &lt;span class="pl-cce"&gt;\n&lt;/span&gt;ghi&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; s-lines (mapcar 's-trim) (s-join &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;-&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) s-reverse) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "ihg-fed-cba"&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-s-index-of-needle-s-optional-ignore-case" class="anchor" aria-hidden="true" href="#s-index-of-needle-s-optional-ignore-case"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;s-index-of &lt;code&gt;(needle s &amp;amp;optional ignore-case)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Returns first index of &lt;code&gt;needle&lt;/code&gt; in &lt;code&gt;s&lt;/code&gt;, or nil.&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;ignore-case&lt;/code&gt; is non-nil, the comparison is done without paying
attention to case differences.&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(s-index-of &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;abc&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;abcdef&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; 0&lt;/span&gt;
(s-index-of &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;CDE&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;abcdef&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; 2&lt;/span&gt;
(s-index-of &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;n.t&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;not a regexp&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; nil&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-s-reverse-s" class="anchor" aria-hidden="true" href="#s-reverse-s"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;s-reverse &lt;code&gt;(s)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Return the reverse of &lt;code&gt;s&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(s-reverse &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;abc&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "cba"&lt;/span&gt;
(s-reverse &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;ab xyz&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "zyx ba"&lt;/span&gt;
(s-reverse &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; ""&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-s-presence-s" class="anchor" aria-hidden="true" href="#s-presence-s"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;s-presence &lt;code&gt;(s)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Return &lt;code&gt;s&lt;/code&gt; if it's &lt;code&gt;s-present?&lt;/code&gt;, otherwise return nil.&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(s-presence &lt;span class="pl-c1"&gt;nil&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; nil&lt;/span&gt;
(s-presence &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; nil&lt;/span&gt;
(s-presence &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;foo&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "foo"&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-s-format-template-replacer-optional-extra" class="anchor" aria-hidden="true" href="#s-format-template-replacer-optional-extra"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;s-format &lt;code&gt;(template replacer &amp;amp;optional extra)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Format &lt;code&gt;template&lt;/code&gt; with the function &lt;code&gt;replacer&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;replacer&lt;/code&gt; takes an argument of the format variable and optionally
an extra argument which is the &lt;code&gt;extra&lt;/code&gt; value from the call to
&lt;code&gt;s-format&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Several standard &lt;code&gt;s-format&lt;/code&gt; helper functions are recognized and
adapted for this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(s-format "${name}" 'gethash hash-table)
(s-format "${name}" 'aget alist)
(s-format "$0" 'elt sequence)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;replacer&lt;/code&gt; function may be used to do any other kind of
transformation.&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(s-format &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;help ${name}! I'm ${malady}&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; 'aget '((&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;name&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; . &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;nic&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;malady&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; . &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;on fire&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "help nic! I'm on fire"&lt;/span&gt;
(s-format &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;hello ${name}, nice day&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; (&lt;span class="pl-c1"&gt;lambda&lt;/span&gt; (var-name) &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;nic&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "hello nic, nice day"&lt;/span&gt;
(s-format &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;hello $0, nice $1&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; 'elt '(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;nic&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;day&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "hello nic, nice day"&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-s-lex-format-format-str" class="anchor" aria-hidden="true" href="#s-lex-format-format-str"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;s-lex-format &lt;code&gt;(format-str)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;s-format&lt;/code&gt; with the current environment.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;format-str&lt;/code&gt; may use the &lt;code&gt;s-format&lt;/code&gt; variable reference to refer to
any variable:&lt;/p&gt;
&lt;p&gt;(let ((x 1))
(s-lex-format "x is: ${x}"))&lt;/p&gt;
&lt;p&gt;The values of the variables are interpolated with "%s" unless
the variable &lt;code&gt;s-lex-value-as-lisp&lt;/code&gt; is &lt;code&gt;t&lt;/code&gt; and then they are
interpolated with "%S".&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;let&lt;/span&gt; ((x &lt;span class="pl-c1"&gt;1&lt;/span&gt;)) (s-lex-format &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;x is ${x}&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "x is 1"&lt;/span&gt;
(&lt;span class="pl-k"&gt;let&lt;/span&gt; ((str1 &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;this&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) (str2 &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;that&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)) (s-lex-format &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;${str1} and ${str2}&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "this and that"&lt;/span&gt;
(&lt;span class="pl-k"&gt;let&lt;/span&gt; ((foo &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Hello&lt;span class="pl-cce"&gt;\\&lt;/span&gt;nWorld&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)) (s-lex-format &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;${foo}&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "Hello\\nWorld"&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-s-count-matches-regexp-s-optional-start-end" class="anchor" aria-hidden="true" href="#s-count-matches-regexp-s-optional-start-end"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;s-count-matches &lt;code&gt;(regexp s &amp;amp;optional start end)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Count occurrences of &lt;code&gt;regexp&lt;/code&gt; in `s'.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;start&lt;/code&gt;, inclusive, and &lt;code&gt;end&lt;/code&gt;, exclusive, delimit the part of &lt;code&gt;s&lt;/code&gt;
to match.&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(s-count-matches &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;a&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;aba&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; 2&lt;/span&gt;
(s-count-matches &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;a&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;aba&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; 1&lt;/span&gt;
(s-count-matches &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-cce"&gt;\\&lt;/span&gt;w&lt;span class="pl-cce"&gt;\\&lt;/span&gt;{2&lt;span class="pl-cce"&gt;\\&lt;/span&gt;}[0-9]+&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;ab1bab2frobinator&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; 2&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-s-wrap-s-prefix-optional-suffix" class="anchor" aria-hidden="true" href="#s-wrap-s-prefix-optional-suffix"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;s-wrap &lt;code&gt;(s prefix &amp;amp;optional suffix)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Wrap string &lt;code&gt;s&lt;/code&gt; with &lt;code&gt;prefix&lt;/code&gt; and optionally &lt;code&gt;suffix&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Return string &lt;code&gt;s&lt;/code&gt; with &lt;code&gt;prefix&lt;/code&gt; prepended.  If &lt;code&gt;suffix&lt;/code&gt; is present, it
is appended, otherwise &lt;code&gt;prefix&lt;/code&gt; is used as both prefix and
suffix.&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(s-wrap &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;foo&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-cce"&gt;\"&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "\"foo\""&lt;/span&gt;
(s-wrap &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;foo&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;(&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;)&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "(foo)"&lt;/span&gt;
(s-wrap &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;foo&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;bar&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "barfoobar"&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-s-split-words-s" class="anchor" aria-hidden="true" href="#s-split-words-s"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;s-split-words &lt;code&gt;(s)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Split &lt;code&gt;s&lt;/code&gt; into list of words.&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(s-split-words &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;under_score&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '("under" "score")&lt;/span&gt;
(s-split-words &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;some-dashed-words&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '("some" "dashed" "words")&lt;/span&gt;
(s-split-words &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;evenCamelCase&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '("even" "Camel" "Case")&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-s-lower-camel-case-s" class="anchor" aria-hidden="true" href="#s-lower-camel-case-s"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;s-lower-camel-case &lt;code&gt;(s)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Convert &lt;code&gt;s&lt;/code&gt; to lowerCamelCase.&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(s-lower-camel-&lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;some words&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "someWords"&lt;/span&gt;
(s-lower-camel-&lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;dashed-words&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "dashedWords"&lt;/span&gt;
(s-lower-camel-&lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;under_scored_words&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "underScoredWords"&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-s-upper-camel-case-s" class="anchor" aria-hidden="true" href="#s-upper-camel-case-s"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;s-upper-camel-case &lt;code&gt;(s)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Convert &lt;code&gt;s&lt;/code&gt; to UpperCamelCase.&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(s-upper-camel-&lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;some words&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "SomeWords"&lt;/span&gt;
(s-upper-camel-&lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;dashed-words&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "DashedWords"&lt;/span&gt;
(s-upper-camel-&lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;under_scored_words&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "UnderScoredWords"&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-s-snake-case-s" class="anchor" aria-hidden="true" href="#s-snake-case-s"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;s-snake-case &lt;code&gt;(s)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Convert &lt;code&gt;s&lt;/code&gt; to snake_case.&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(s-snake-&lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;some words&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "some_words"&lt;/span&gt;
(s-snake-&lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;dashed-words&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "dashed_words"&lt;/span&gt;
(s-snake-&lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;camelCasedWords&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "camel_cased_words"&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-s-dashed-words-s" class="anchor" aria-hidden="true" href="#s-dashed-words-s"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;s-dashed-words &lt;code&gt;(s)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Convert &lt;code&gt;s&lt;/code&gt; to dashed-words.&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(s-dashed-words &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;some words&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "some-words"&lt;/span&gt;
(s-dashed-words &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;under_scored_words&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "under-scored-words"&lt;/span&gt;
(s-dashed-words &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;camelCasedWords&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "camel-cased-words"&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-s-capitalized-words-s" class="anchor" aria-hidden="true" href="#s-capitalized-words-s"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;s-capitalized-words &lt;code&gt;(s)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Convert &lt;code&gt;s&lt;/code&gt; to Capitalized words.&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(s-capitalized-words &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;some words&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "Some words"&lt;/span&gt;
(s-capitalized-words &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;under_scored_words&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "Under scored words"&lt;/span&gt;
(s-capitalized-words &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;camelCasedWords&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "Camel cased words"&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-s-titleized-words-s" class="anchor" aria-hidden="true" href="#s-titleized-words-s"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;s-titleized-words &lt;code&gt;(s)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Convert &lt;code&gt;s&lt;/code&gt; to Titleized Words.&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(s-titleized-words &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;some words&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "Some Words"&lt;/span&gt;
(s-titleized-words &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;under_scored_words&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "Under Scored Words"&lt;/span&gt;
(s-titleized-words &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;camelCasedWords&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "Camel Cased Words"&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-s-word-initials-s" class="anchor" aria-hidden="true" href="#s-word-initials-s"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;s-word-initials &lt;code&gt;(s)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Convert &lt;code&gt;s&lt;/code&gt; to its initials.&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(s-word-initials &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;some words&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "sw"&lt;/span&gt;
(s-word-initials &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;under_scored_words&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "usw"&lt;/span&gt;
(s-word-initials &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;camelCasedWords&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "cCW"&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-whats-with-the-built-in-wrappers" class="anchor" aria-hidden="true" href="#whats-with-the-built-in-wrappers"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;What's with the built-in wrappers?&lt;/h2&gt;
&lt;p&gt;Imagine looking through the function list and seeing &lt;code&gt;s-ends-with?&lt;/code&gt;, but
&lt;code&gt;s-starts-with?&lt;/code&gt; is nowhere to be found. Why? Well, because Emacs already has
&lt;code&gt;string-prefix-p&lt;/code&gt;. Now you're starting out slightly confused, then have to go
somewhere else to dig for the command you were looking for.&lt;/p&gt;
&lt;p&gt;The wrapping functions serve as both documentation for existing functions and
makes for a consistent API.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-other-string-related-libraries" class="anchor" aria-hidden="true" href="#other-string-related-libraries"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Other string related libraries&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/eschulte/jump.el/blob/master/inflections.el"&gt;inflections&lt;/a&gt; package
provides functions for strings pluralization and singularization.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://emacswiki.org/emacs/levenshtein.el" rel="nofollow"&gt;levenshtein&lt;/a&gt; package provides a function to
calculate the Levenshtein distance between two strings.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/rolandwalker/string-utils"&gt;string-utils&lt;/a&gt; is another general string manipulation library.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-changelist" class="anchor" aria-hidden="true" href="#changelist"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Changelist&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-from-1110-to-1120" class="anchor" aria-hidden="true" href="#from-1110-to-1120"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;From 1.11.0 to 1.12.0&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Alias all functions ending in &lt;code&gt;?&lt;/code&gt; (Tianxiang Xiong)&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;s-blank-str?&lt;/code&gt; (Aborn Jiang)&lt;/li&gt;
&lt;li&gt;Several bugfixes&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-from-1100-to-1110" class="anchor" aria-hidden="true" href="#from-1100-to-1110"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;From 1.10.0 to 1.11.0&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Add &lt;code&gt;s-matched-positions-all&lt;/code&gt; (ono hiroko)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-from-190-to-1100" class="anchor" aria-hidden="true" href="#from-190-to-1100"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;From 1.9.0 to 1.10.0&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Add &lt;code&gt;s-wrap&lt;/code&gt; (Johan Andersson)&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;s-split-up-to&lt;/code&gt; (Matus Goljer)&lt;/li&gt;
&lt;li&gt;Fix &lt;code&gt;s-reverse&lt;/code&gt; for Unicode combining characters. (Christopher Wellons)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-from-180-to-190" class="anchor" aria-hidden="true" href="#from-180-to-190"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;From 1.8.0 to 1.9.0&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Add &lt;code&gt;s-count-matches&lt;/code&gt; (Lars Andersen)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-from-170-to-180" class="anchor" aria-hidden="true" href="#from-170-to-180"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;From 1.7.0 to 1.8.0&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Add &lt;code&gt;s-present?&lt;/code&gt; and &lt;code&gt;s-present?&lt;/code&gt; (Johan Andersson)&lt;/li&gt;
&lt;li&gt;Better handling of international characters&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-from-160-to-170" class="anchor" aria-hidden="true" href="#from-160-to-170"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;From 1.6.0 to 1.7.0&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Add &lt;code&gt;s-word-initials&lt;/code&gt; (Sylvain Rousseau)&lt;/li&gt;
&lt;li&gt;Better handling of camel cased strings (@Bruce-Connor)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-from-150-to-160" class="anchor" aria-hidden="true" href="#from-150-to-160"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;From 1.5.0 to 1.6.0&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Add &lt;code&gt;s-pad-left&lt;/code&gt; and &lt;code&gt;s-pad-right&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Bugfixes for &lt;code&gt;s-format&lt;/code&gt; (Nic Ferrier)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-from-140-to-150" class="anchor" aria-hidden="true" href="#from-140-to-150"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;From 1.4.0 to 1.5.0&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Add &lt;code&gt;s-all-match-strings&lt;/code&gt; (Geoff Gole)&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;s-lex-format&lt;/code&gt; (Nic Ferrier)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-from-131-to-140" class="anchor" aria-hidden="true" href="#from-131-to-140"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;From 1.3.1 to 1.4.0&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Add &lt;code&gt;s-capitalized?&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;s-replace-all&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;s-slice-at&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;s-split&lt;/code&gt; alias for &lt;code&gt;split-string&lt;/code&gt; (Rüdiger Sonderfeld)&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;s-less?&lt;/code&gt; predicate (Rüdiger Sonderfeld)&lt;/li&gt;
&lt;li&gt;Add START parameter to &lt;code&gt;s-matches?&lt;/code&gt; (Rüdiger Sonderfeld)&lt;/li&gt;
&lt;li&gt;Bugfixes&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-from-130-to-131" class="anchor" aria-hidden="true" href="#from-130-to-131"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;From 1.3.0 to 1.3.1&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Add &lt;code&gt;s-numeric?&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;s-match&lt;/code&gt; (Arthur Andersen)&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;s-format&lt;/code&gt; (Nic Ferrier)&lt;/li&gt;
&lt;li&gt;Move .el files out of root to avoid problems with require.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-from-121-to-130" class="anchor" aria-hidden="true" href="#from-121-to-130"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;From 1.2.1 to 1.3.0&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Breaking change:&lt;/strong&gt; &lt;code&gt;s-capitalize&lt;/code&gt; now converts the first word's first
character to upper case and the rest to lower case. &lt;code&gt;s-titleize&lt;/code&gt;
works like the old &lt;code&gt;s-capitalize&lt;/code&gt; and capitalizes each word.
(Johan Andersson)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;s-capitalized-words&lt;/code&gt; and &lt;code&gt;s-titleized-words&lt;/code&gt; mirror this change.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-contributors" class="anchor" aria-hidden="true" href="#contributors"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contributors&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/leoc"&gt;Arthur Andersen&lt;/a&gt; contributed &lt;code&gt;s-match&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rolando2424"&gt;Rolando&lt;/a&gt; contributed &lt;code&gt;s-shared-start&lt;/code&gt; and &lt;code&gt;s-shared-end&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rejeep"&gt;Johan Andersson&lt;/a&gt; contributed &lt;code&gt;s-presence&lt;/code&gt;, &lt;code&gt;s-present?&lt;/code&gt; and fixed &lt;code&gt;s-titleize&lt;/code&gt; vs &lt;code&gt;s-capitalize&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/nicferrier"&gt;Nic Ferrier&lt;/a&gt; added &lt;code&gt;s-format&lt;/code&gt; and &lt;code&gt;s-lex-format&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ruediger"&gt;Rüdiger Sonderfeld&lt;/a&gt; contributed &lt;code&gt;s-less?&lt;/code&gt;, &lt;code&gt;s-split&lt;/code&gt; and several bugfixes.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/gsg"&gt;Geoff Gole&lt;/a&gt; contributed &lt;code&gt;s-all-match-strings&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/thisirs"&gt;Sylvain Rousseau&lt;/a&gt; contributed &lt;code&gt;s-word-initials&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/expez"&gt;Lars Andersen&lt;/a&gt; contributed &lt;code&gt;s-count-matches&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/kuanyui"&gt;ono hiroko&lt;/a&gt; contributed &lt;code&gt;s-matched-positions-all&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thanks!&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-contribute" class="anchor" aria-hidden="true" href="#contribute"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contribute&lt;/h2&gt;
&lt;p&gt;Yes, please do. Pure functions in the string manipulation realm only,
please. There's a suite of tests in &lt;code&gt;dev/examples.el&lt;/code&gt;, so remember to add
tests for your function, or I might break it later.&lt;/p&gt;
&lt;p&gt;You'll find the repo at:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;https://github.com/magnars/s.el
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Run the tests with&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./run-tests.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Create the docs with&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./create-docs.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I highly recommend that you install these as a pre-commit hook, so that
the tests are always running and the docs are always in sync:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cp pre-commit.sh .git/hooks/pre-commit
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Oh, and don't edit &lt;code&gt;README.md&lt;/code&gt; directly, it is auto-generated.
Change &lt;code&gt;readme-template.md&lt;/code&gt; or &lt;code&gt;examples-to-docs.el&lt;/code&gt; instead.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-license" class="anchor" aria-hidden="true" href="#license"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;License&lt;/h2&gt;
&lt;p&gt;Copyright (C) 2012-2015 Magnar Sveen&lt;/p&gt;
&lt;p&gt;Authors: Magnar Sveen &lt;a href="mailto:magnars@gmail.com"&gt;magnars@gmail.com&lt;/a&gt;
Keywords: strings&lt;/p&gt;
&lt;p&gt;This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.&lt;/p&gt;
&lt;p&gt;This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.&lt;/p&gt;
&lt;p&gt;You should have received a copy of the GNU General Public License
along with this program.  If not, see &lt;a href="http://www.gnu.org/licenses/" rel="nofollow"&gt;http://www.gnu.org/licenses/&lt;/a&gt;.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>magnars</author><guid isPermaLink="false">https://github.com/magnars/s.el</guid><pubDate>Tue, 26 Nov 2019 00:10:00 GMT</pubDate></item><item><title>magnars/dash.el #11 in Emacs Lisp, Today</title><link>https://github.com/magnars/dash.el</link><description>&lt;p&gt;&lt;i&gt;A modern list library for Emacs&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content--dashel-" class="anchor" aria-hidden="true" href="#-dashel-"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/9d8ed35acc82bb0d95959041210a8bd3f49d8d72/68747470733a2f2f7261772e6769746875622e636f6d2f6d61676e6172732f646173682e656c2f6d61737465722f7261696e626f772d646173682e706e67"&gt;&lt;img align="right" src="https://camo.githubusercontent.com/9d8ed35acc82bb0d95959041210a8bd3f49d8d72/68747470733a2f2f7261772e6769746875622e636f6d2f6d61676e6172732f646173682e656c2f6d61737465722f7261696e626f772d646173682e706e67" data-canonical-src="https://raw.github.com/magnars/dash.el/master/rainbow-dash.png" style="max-width:100%;"&gt;&lt;/a&gt; dash.el &lt;a href="http://travis-ci.org/magnars/dash.el" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/8ecf52fb72e951f847fdf1ec5b10d1b597e26069/68747470733a2f2f7365637572652e7472617669732d63692e6f72672f6d61676e6172732f646173682e656c2e706e67" alt="Build Status" data-canonical-src="https://secure.travis-ci.org/magnars/dash.el.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;A modern list api for Emacs. No 'cl required.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installation&lt;/h2&gt;
&lt;p&gt;It's available on &lt;a href="https://melpa.org/" rel="nofollow"&gt;Melpa&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;M-x package-install dash
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or you can just dump &lt;code&gt;dash.el&lt;/code&gt; in your load
path somewhere.&lt;/p&gt;
&lt;p&gt;If you want the function combinators, then also:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;M-x package-install dash-functional
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;a id="user-content-using-in-a-package" class="anchor" aria-hidden="true" href="#using-in-a-package"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Using in a package&lt;/h2&gt;
&lt;p&gt;Add this to the big comment block at the top:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;;; Package-Requires: ((dash "2.16.0"))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To get function combinators:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;;; Package-Requires: ((dash "2.16.0") (dash-functional "1.2.0") (emacs "24"))
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;a id="user-content-upcoming-breaking-change" class="anchor" aria-hidden="true" href="#upcoming-breaking-change"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Upcoming breaking change!&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;For backward compatibility reasons &lt;code&gt;-zip&lt;/code&gt; return a cons-cell instead of a list
with two elements when called on two lists. This is a clunky API, and in an
upcoming 3.0 release of Dash it will always return a list. If you rely on the
cons-cell return value, use &lt;code&gt;-zip-pair&lt;/code&gt; instead.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-syntax-highlighting-of-dash-functions" class="anchor" aria-hidden="true" href="#syntax-highlighting-of-dash-functions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Syntax highlighting of dash functions&lt;/h2&gt;
&lt;p&gt;Font lock of dash functions in emacs lisp buffers is now optional.
Include this in your emacs settings to get syntax highlighting:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(eval-after-load 'dash '(dash-enable-font-lock))
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;a id="user-content-functions" class="anchor" aria-hidden="true" href="#functions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Functions&lt;/h2&gt;
&lt;p&gt;All functions and constructs in the library are prefixed with a dash (-).&lt;/p&gt;
&lt;p&gt;There are also anaphoric versions of functions where that makes sense,
prefixed with two dashes instead of one.&lt;/p&gt;
&lt;p&gt;While &lt;code&gt;-map&lt;/code&gt; takes a function to map over the list, you can also use
the anaphoric form with double dashes - which will then be executed
with &lt;code&gt;it&lt;/code&gt; exposed as the list item. Here's an example:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-map (&lt;span class="pl-k"&gt;lambda&lt;/span&gt; (&lt;span class="pl-v"&gt;n&lt;/span&gt;) (&lt;span class="pl-k"&gt;*&lt;/span&gt; n n)) '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; normal version&lt;/span&gt;

(--map (&lt;span class="pl-k"&gt;*&lt;/span&gt; it it) '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; anaphoric version&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;of course the original can also be written like&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;defun&lt;/span&gt; &lt;span class="pl-e"&gt;square&lt;/span&gt; (&lt;span class="pl-v"&gt;n&lt;/span&gt;) (&lt;span class="pl-k"&gt;*&lt;/span&gt; n n))

(-map &lt;span class="pl-c1"&gt;'square&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;which demonstrates the usefulness of both versions.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-maps" class="anchor" aria-hidden="true" href="#maps"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Maps&lt;/h3&gt;
&lt;p&gt;Functions in this category take a transforming function, which
is then applied sequentially to each or selected elements of the
input list.  The results are collected in order and returned as
new list.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#-map-fn-list"&gt;-map&lt;/a&gt; &lt;code&gt;(fn list)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-map-when-pred-rep-list"&gt;-map-when&lt;/a&gt; &lt;code&gt;(pred rep list)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-map-first-pred-rep-list"&gt;-map-first&lt;/a&gt; &lt;code&gt;(pred rep list)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-map-last-pred-rep-list"&gt;-map-last&lt;/a&gt; &lt;code&gt;(pred rep list)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-map-indexed-fn-list"&gt;-map-indexed&lt;/a&gt; &lt;code&gt;(fn list)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-annotate-fn-list"&gt;-annotate&lt;/a&gt; &lt;code&gt;(fn list)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-splice-pred-fun-list"&gt;-splice&lt;/a&gt; &lt;code&gt;(pred fun list)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-splice-list-pred-new-list-list"&gt;-splice-list&lt;/a&gt; &lt;code&gt;(pred new-list list)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-mapcat-fn-list"&gt;-mapcat&lt;/a&gt; &lt;code&gt;(fn list)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-copy-arg"&gt;-copy&lt;/a&gt; &lt;code&gt;(arg)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-sublist-selection" class="anchor" aria-hidden="true" href="#sublist-selection"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Sublist selection&lt;/h3&gt;
&lt;p&gt;Functions returning a sublist of the original list.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#-filter-pred-list"&gt;-filter&lt;/a&gt; &lt;code&gt;(pred list)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-remove-pred-list"&gt;-remove&lt;/a&gt; &lt;code&gt;(pred list)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-remove-first-pred-list"&gt;-remove-first&lt;/a&gt; &lt;code&gt;(pred list)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-remove-last-pred-list"&gt;-remove-last&lt;/a&gt; &lt;code&gt;(pred list)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-remove-item-item-list"&gt;-remove-item&lt;/a&gt; &lt;code&gt;(item list)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-non-nil-list"&gt;-non-nil&lt;/a&gt; &lt;code&gt;(list)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-slice-list-from-optional-to-step"&gt;-slice&lt;/a&gt; &lt;code&gt;(list from &amp;amp;optional to step)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-take-n-list"&gt;-take&lt;/a&gt; &lt;code&gt;(n list)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-take-last-n-list"&gt;-take-last&lt;/a&gt; &lt;code&gt;(n list)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-drop-n-list"&gt;-drop&lt;/a&gt; &lt;code&gt;(n list)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-drop-last-n-list"&gt;-drop-last&lt;/a&gt; &lt;code&gt;(n list)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-take-while-pred-list"&gt;-take-while&lt;/a&gt; &lt;code&gt;(pred list)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-drop-while-pred-list"&gt;-drop-while&lt;/a&gt; &lt;code&gt;(pred list)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-select-by-indices-indices-list"&gt;-select-by-indices&lt;/a&gt; &lt;code&gt;(indices list)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-select-columns-columns-table"&gt;-select-columns&lt;/a&gt; &lt;code&gt;(columns table)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-select-column-column-table"&gt;-select-column&lt;/a&gt; &lt;code&gt;(column table)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-list-to-list" class="anchor" aria-hidden="true" href="#list-to-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;List to list&lt;/h3&gt;
&lt;p&gt;Functions returning a modified copy of the input list.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#-keep-fn-list"&gt;-keep&lt;/a&gt; &lt;code&gt;(fn list)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-concat-rest-lists"&gt;-concat&lt;/a&gt; &lt;code&gt;(&amp;amp;rest lists)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-flatten-l"&gt;-flatten&lt;/a&gt; &lt;code&gt;(l)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-flatten-n-num-list"&gt;-flatten-n&lt;/a&gt; &lt;code&gt;(num list)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-replace-old-new-list"&gt;-replace&lt;/a&gt; &lt;code&gt;(old new list)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-replace-first-old-new-list"&gt;-replace-first&lt;/a&gt; &lt;code&gt;(old new list)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-replace-last-old-new-list"&gt;-replace-last&lt;/a&gt; &lt;code&gt;(old new list)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-insert-at-n-x-list"&gt;-insert-at&lt;/a&gt; &lt;code&gt;(n x list)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-replace-at-n-x-list"&gt;-replace-at&lt;/a&gt; &lt;code&gt;(n x list)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-update-at-n-func-list"&gt;-update-at&lt;/a&gt; &lt;code&gt;(n func list)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-remove-at-n-list"&gt;-remove-at&lt;/a&gt; &lt;code&gt;(n list)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-remove-at-indices-indices-list"&gt;-remove-at-indices&lt;/a&gt; &lt;code&gt;(indices list)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-reductions" class="anchor" aria-hidden="true" href="#reductions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Reductions&lt;/h3&gt;
&lt;p&gt;Functions reducing lists into single value.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#-reduce-from-fn-initial-value-list"&gt;-reduce-from&lt;/a&gt; &lt;code&gt;(fn initial-value list)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-reduce-r-from-fn-initial-value-list"&gt;-reduce-r-from&lt;/a&gt; &lt;code&gt;(fn initial-value list)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-reduce-fn-list"&gt;-reduce&lt;/a&gt; &lt;code&gt;(fn list)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-reduce-r-fn-list"&gt;-reduce-r&lt;/a&gt; &lt;code&gt;(fn list)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-reductions-from-fn-init-list"&gt;-reductions-from&lt;/a&gt; &lt;code&gt;(fn init list)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-reductions-r-from-fn-init-list"&gt;-reductions-r-from&lt;/a&gt; &lt;code&gt;(fn init list)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-reductions-fn-list"&gt;-reductions&lt;/a&gt; &lt;code&gt;(fn list)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-reductions-r-fn-list"&gt;-reductions-r&lt;/a&gt; &lt;code&gt;(fn list)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-count-pred-list"&gt;-count&lt;/a&gt; &lt;code&gt;(pred list)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-sum-list"&gt;-sum&lt;/a&gt; &lt;code&gt;(list)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-running-sum-list"&gt;-running-sum&lt;/a&gt; &lt;code&gt;(list)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-product-list"&gt;-product&lt;/a&gt; &lt;code&gt;(list)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-running-product-list"&gt;-running-product&lt;/a&gt; &lt;code&gt;(list)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-inits-list"&gt;-inits&lt;/a&gt; &lt;code&gt;(list)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-tails-list"&gt;-tails&lt;/a&gt; &lt;code&gt;(list)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-common-prefix-rest-lists"&gt;-common-prefix&lt;/a&gt; &lt;code&gt;(&amp;amp;rest lists)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-common-suffix-rest-lists"&gt;-common-suffix&lt;/a&gt; &lt;code&gt;(&amp;amp;rest lists)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-min-list"&gt;-min&lt;/a&gt; &lt;code&gt;(list)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-min-by-comparator-list"&gt;-min-by&lt;/a&gt; &lt;code&gt;(comparator list)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-max-list"&gt;-max&lt;/a&gt; &lt;code&gt;(list)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-max-by-comparator-list"&gt;-max-by&lt;/a&gt; &lt;code&gt;(comparator list)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-unfolding" class="anchor" aria-hidden="true" href="#unfolding"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Unfolding&lt;/h3&gt;
&lt;p&gt;Operations dual to reductions, building lists from seed value rather than consuming a list to produce a single value.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#-iterate-fun-init-n"&gt;-iterate&lt;/a&gt; &lt;code&gt;(fun init n)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-unfold-fun-seed"&gt;-unfold&lt;/a&gt; &lt;code&gt;(fun seed)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-predicates" class="anchor" aria-hidden="true" href="#predicates"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Predicates&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#-any-pred-list"&gt;-any?&lt;/a&gt; &lt;code&gt;(pred list)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-all-pred-list"&gt;-all?&lt;/a&gt; &lt;code&gt;(pred list)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-none-pred-list"&gt;-none?&lt;/a&gt; &lt;code&gt;(pred list)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-only-some-pred-list"&gt;-only-some?&lt;/a&gt; &lt;code&gt;(pred list)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-contains-list-element"&gt;-contains?&lt;/a&gt; &lt;code&gt;(list element)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-same-items-list-list2"&gt;-same-items?&lt;/a&gt; &lt;code&gt;(list list2)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-is-prefix-prefix-list"&gt;-is-prefix?&lt;/a&gt; &lt;code&gt;(prefix list)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-is-suffix-suffix-list"&gt;-is-suffix?&lt;/a&gt; &lt;code&gt;(suffix list)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-is-infix-infix-list"&gt;-is-infix?&lt;/a&gt; &lt;code&gt;(infix list)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-partitioning" class="anchor" aria-hidden="true" href="#partitioning"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Partitioning&lt;/h3&gt;
&lt;p&gt;Functions partitioning the input list into a list of lists.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#-split-at-n-list"&gt;-split-at&lt;/a&gt; &lt;code&gt;(n list)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-split-with-pred-list"&gt;-split-with&lt;/a&gt; &lt;code&gt;(pred list)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-split-on-item-list"&gt;-split-on&lt;/a&gt; &lt;code&gt;(item list)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-split-when-fn-list"&gt;-split-when&lt;/a&gt; &lt;code&gt;(fn list)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-separate-pred-list"&gt;-separate&lt;/a&gt; &lt;code&gt;(pred list)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-partition-n-list"&gt;-partition&lt;/a&gt; &lt;code&gt;(n list)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-partition-all-n-list"&gt;-partition-all&lt;/a&gt; &lt;code&gt;(n list)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-partition-in-steps-n-step-list"&gt;-partition-in-steps&lt;/a&gt; &lt;code&gt;(n step list)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-partition-all-in-steps-n-step-list"&gt;-partition-all-in-steps&lt;/a&gt; &lt;code&gt;(n step list)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-partition-by-fn-list"&gt;-partition-by&lt;/a&gt; &lt;code&gt;(fn list)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-partition-by-header-fn-list"&gt;-partition-by-header&lt;/a&gt; &lt;code&gt;(fn list)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-partition-after-pred-pred-list"&gt;-partition-after-pred&lt;/a&gt; &lt;code&gt;(pred list)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-partition-before-pred-pred-list"&gt;-partition-before-pred&lt;/a&gt; &lt;code&gt;(pred list)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-partition-before-item-item-list"&gt;-partition-before-item&lt;/a&gt; &lt;code&gt;(item list)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-partition-after-item-item-list"&gt;-partition-after-item&lt;/a&gt; &lt;code&gt;(item list)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-group-by-fn-list"&gt;-group-by&lt;/a&gt; &lt;code&gt;(fn list)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-indexing" class="anchor" aria-hidden="true" href="#indexing"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Indexing&lt;/h3&gt;
&lt;p&gt;Return indices of elements based on predicates, sort elements by indices etc.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#-elem-index-elem-list"&gt;-elem-index&lt;/a&gt; &lt;code&gt;(elem list)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-elem-indices-elem-list"&gt;-elem-indices&lt;/a&gt; &lt;code&gt;(elem list)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-find-index-pred-list"&gt;-find-index&lt;/a&gt; &lt;code&gt;(pred list)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-find-last-index-pred-list"&gt;-find-last-index&lt;/a&gt; &lt;code&gt;(pred list)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-find-indices-pred-list"&gt;-find-indices&lt;/a&gt; &lt;code&gt;(pred list)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-grade-up-comparator-list"&gt;-grade-up&lt;/a&gt; &lt;code&gt;(comparator list)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-grade-down-comparator-list"&gt;-grade-down&lt;/a&gt; &lt;code&gt;(comparator list)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-set-operations" class="anchor" aria-hidden="true" href="#set-operations"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Set operations&lt;/h3&gt;
&lt;p&gt;Operations pretending lists are sets.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#-union-list-list2"&gt;-union&lt;/a&gt; &lt;code&gt;(list list2)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-difference-list-list2"&gt;-difference&lt;/a&gt; &lt;code&gt;(list list2)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-intersection-list-list2"&gt;-intersection&lt;/a&gt; &lt;code&gt;(list list2)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-powerset-list"&gt;-powerset&lt;/a&gt; &lt;code&gt;(list)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-permutations-list"&gt;-permutations&lt;/a&gt; &lt;code&gt;(list)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-distinct-list"&gt;-distinct&lt;/a&gt; &lt;code&gt;(list)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-other-list-operations" class="anchor" aria-hidden="true" href="#other-list-operations"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Other list operations&lt;/h3&gt;
&lt;p&gt;Other list functions not fit to be classified elsewhere.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#-rotate-n-list"&gt;-rotate&lt;/a&gt; &lt;code&gt;(n list)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-repeat-n-x"&gt;-repeat&lt;/a&gt; &lt;code&gt;(n x)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-cons-rest-args"&gt;-cons*&lt;/a&gt; &lt;code&gt;(&amp;amp;rest args)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-snoc-list-elem-rest-elements"&gt;-snoc&lt;/a&gt; &lt;code&gt;(list elem &amp;amp;rest elements)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-interpose-sep-list"&gt;-interpose&lt;/a&gt; &lt;code&gt;(sep list)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-interleave-rest-lists"&gt;-interleave&lt;/a&gt; &lt;code&gt;(&amp;amp;rest lists)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-zip-with-fn-list1-list2"&gt;-zip-with&lt;/a&gt; &lt;code&gt;(fn list1 list2)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-zip-rest-lists"&gt;-zip&lt;/a&gt; &lt;code&gt;(&amp;amp;rest lists)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-zip-fill-fill-value-rest-lists"&gt;-zip-fill&lt;/a&gt; &lt;code&gt;(fill-value &amp;amp;rest lists)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-unzip-lists"&gt;-unzip&lt;/a&gt; &lt;code&gt;(lists)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-cycle-list"&gt;-cycle&lt;/a&gt; &lt;code&gt;(list)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-pad-fill-value-rest-lists"&gt;-pad&lt;/a&gt; &lt;code&gt;(fill-value &amp;amp;rest lists)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-table-fn-rest-lists"&gt;-table&lt;/a&gt; &lt;code&gt;(fn &amp;amp;rest lists)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-table-flat-fn-rest-lists"&gt;-table-flat&lt;/a&gt; &lt;code&gt;(fn &amp;amp;rest lists)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-first-pred-list"&gt;-first&lt;/a&gt; &lt;code&gt;(pred list)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-some-pred-list"&gt;-some&lt;/a&gt; &lt;code&gt;(pred list)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-last-pred-list"&gt;-last&lt;/a&gt; &lt;code&gt;(pred list)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-first-item-list"&gt;-first-item&lt;/a&gt; &lt;code&gt;(list)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-second-item-arg1"&gt;-second-item&lt;/a&gt; &lt;code&gt;(arg1)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-third-item-arg1"&gt;-third-item&lt;/a&gt; &lt;code&gt;(arg1)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-fourth-item-list"&gt;-fourth-item&lt;/a&gt; &lt;code&gt;(list)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-fifth-item-list"&gt;-fifth-item&lt;/a&gt; &lt;code&gt;(list)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-last-item-list"&gt;-last-item&lt;/a&gt; &lt;code&gt;(list)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-butlast-list"&gt;-butlast&lt;/a&gt; &lt;code&gt;(list)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-sort-comparator-list"&gt;-sort&lt;/a&gt; &lt;code&gt;(comparator list)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-list-rest-args"&gt;-list&lt;/a&gt; &lt;code&gt;(&amp;amp;rest args)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-fix-fn-list"&gt;-fix&lt;/a&gt; &lt;code&gt;(fn list)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-tree-operations" class="anchor" aria-hidden="true" href="#tree-operations"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tree operations&lt;/h3&gt;
&lt;p&gt;Functions pretending lists are trees.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#-tree-seq-branch-children-tree"&gt;-tree-seq&lt;/a&gt; &lt;code&gt;(branch children tree)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-tree-map-fn-tree"&gt;-tree-map&lt;/a&gt; &lt;code&gt;(fn tree)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-tree-map-nodes-pred-fun-tree"&gt;-tree-map-nodes&lt;/a&gt; &lt;code&gt;(pred fun tree)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-tree-reduce-fn-tree"&gt;-tree-reduce&lt;/a&gt; &lt;code&gt;(fn tree)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-tree-reduce-from-fn-init-value-tree"&gt;-tree-reduce-from&lt;/a&gt; &lt;code&gt;(fn init-value tree)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-tree-mapreduce-fn-folder-tree"&gt;-tree-mapreduce&lt;/a&gt; &lt;code&gt;(fn folder tree)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-tree-mapreduce-from-fn-folder-init-value-tree"&gt;-tree-mapreduce-from&lt;/a&gt; &lt;code&gt;(fn folder init-value tree)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-clone-list"&gt;-clone&lt;/a&gt; &lt;code&gt;(list)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-threading-macros" class="anchor" aria-hidden="true" href="#threading-macros"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Threading macros&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#--x-optional-form-rest-more"&gt;-&amp;gt;&lt;/a&gt; &lt;code&gt;(x &amp;amp;optional form &amp;amp;rest more)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#--x-optional-form-rest-more"&gt;-&amp;gt;&amp;gt;&lt;/a&gt; &lt;code&gt;(x &amp;amp;optional form &amp;amp;rest more)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#---x-rest-forms"&gt;--&amp;gt;&lt;/a&gt; &lt;code&gt;(x &amp;amp;rest forms)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-as--value-variable-rest-forms"&gt;-as-&amp;gt;&lt;/a&gt; &lt;code&gt;(value variable &amp;amp;rest forms)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-some--x-optional-form-rest-more"&gt;-some-&amp;gt;&lt;/a&gt; &lt;code&gt;(x &amp;amp;optional form &amp;amp;rest more)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-some--x-optional-form-rest-more"&gt;-some-&amp;gt;&amp;gt;&lt;/a&gt; &lt;code&gt;(x &amp;amp;optional form &amp;amp;rest more)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-some---x-optional-form-rest-more"&gt;-some--&amp;gt;&lt;/a&gt; &lt;code&gt;(x &amp;amp;optional form &amp;amp;rest more)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-binding" class="anchor" aria-hidden="true" href="#binding"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Binding&lt;/h3&gt;
&lt;p&gt;Convenient versions of &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;let*&lt;/code&gt; constructs combined with flow control.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#-when-let-var-val-rest-body"&gt;-when-let&lt;/a&gt; &lt;code&gt;(var-val &amp;amp;rest body)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-when-let-vars-vals-rest-body"&gt;-when-let*&lt;/a&gt; &lt;code&gt;(vars-vals &amp;amp;rest body)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-if-let-var-val-then-rest-else"&gt;-if-let&lt;/a&gt; &lt;code&gt;(var-val then &amp;amp;rest else)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-if-let-vars-vals-then-rest-else"&gt;-if-let*&lt;/a&gt; &lt;code&gt;(vars-vals then &amp;amp;rest else)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-let-varlist-rest-body"&gt;-let&lt;/a&gt; &lt;code&gt;(varlist &amp;amp;rest body)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-let-varlist-rest-body"&gt;-let*&lt;/a&gt; &lt;code&gt;(varlist &amp;amp;rest body)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-lambda-match-form-rest-body"&gt;-lambda&lt;/a&gt; &lt;code&gt;(match-form &amp;amp;rest body)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-setq-rest-forms"&gt;-setq&lt;/a&gt; &lt;code&gt;(&amp;amp;rest forms)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-side-effects" class="anchor" aria-hidden="true" href="#side-effects"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Side-effects&lt;/h3&gt;
&lt;p&gt;Functions iterating over lists for side-effect only.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#-each-list-fn"&gt;-each&lt;/a&gt; &lt;code&gt;(list fn)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-each-while-list-pred-fn"&gt;-each-while&lt;/a&gt; &lt;code&gt;(list pred fn)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-each-indexed-list-fn"&gt;-each-indexed&lt;/a&gt; &lt;code&gt;(list fn)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-each-r-list-fn"&gt;-each-r&lt;/a&gt; &lt;code&gt;(list fn)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-each-r-while-list-pred-fn"&gt;-each-r-while&lt;/a&gt; &lt;code&gt;(list pred fn)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-dotimes-num-fn"&gt;-dotimes&lt;/a&gt; &lt;code&gt;(num fn)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-doto-eval-initial-value-rest-forms"&gt;-doto&lt;/a&gt; &lt;code&gt;(eval-initial-value &amp;amp;rest forms)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#--doto-eval-initial-value-rest-forms"&gt;--doto&lt;/a&gt; &lt;code&gt;(eval-initial-value &amp;amp;rest forms)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-destructive-operations" class="anchor" aria-hidden="true" href="#destructive-operations"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Destructive operations&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#cons-car-cdr"&gt;!cons&lt;/a&gt; &lt;code&gt;(car cdr)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cdr-list"&gt;!cdr&lt;/a&gt; &lt;code&gt;(list)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-function-combinators" class="anchor" aria-hidden="true" href="#function-combinators"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Function combinators&lt;/h3&gt;
&lt;p&gt;These combinators require Emacs 24 for its lexical scope. So they are offered in a separate package: &lt;code&gt;dash-functional&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#-partial-fn-rest-args"&gt;-partial&lt;/a&gt; &lt;code&gt;(fn &amp;amp;rest args)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-rpartial-fn-rest-args"&gt;-rpartial&lt;/a&gt; &lt;code&gt;(fn &amp;amp;rest args)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-juxt-rest-fns"&gt;-juxt&lt;/a&gt; &lt;code&gt;(&amp;amp;rest fns)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-compose-rest-fns"&gt;-compose&lt;/a&gt; &lt;code&gt;(&amp;amp;rest fns)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-applify-fn"&gt;-applify&lt;/a&gt; &lt;code&gt;(fn)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-on-operator-transformer"&gt;-on&lt;/a&gt; &lt;code&gt;(operator transformer)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-flip-func"&gt;-flip&lt;/a&gt; &lt;code&gt;(func)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-const-c"&gt;-const&lt;/a&gt; &lt;code&gt;(c)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-cut-rest-params"&gt;-cut&lt;/a&gt; &lt;code&gt;(&amp;amp;rest params)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-not-pred"&gt;-not&lt;/a&gt; &lt;code&gt;(pred)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-orfn-rest-preds"&gt;-orfn&lt;/a&gt; &lt;code&gt;(&amp;amp;rest preds)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-andfn-rest-preds"&gt;-andfn&lt;/a&gt; &lt;code&gt;(&amp;amp;rest preds)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-iteratefn-fn-n"&gt;-iteratefn&lt;/a&gt; &lt;code&gt;(fn n)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-fixfn-fn-optional-equal-test-halt-test"&gt;-fixfn&lt;/a&gt; &lt;code&gt;(fn &amp;amp;optional equal-test halt-test)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-prodfn-rest-fns"&gt;-prodfn&lt;/a&gt; &lt;code&gt;(&amp;amp;rest fns)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-maps-1" class="anchor" aria-hidden="true" href="#maps-1"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Maps&lt;/h2&gt;
&lt;p&gt;Functions in this category take a transforming function, which
is then applied sequentially to each or selected elements of the
input list.  The results are collected in order and returned as
new list.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content--map-fn-list" class="anchor" aria-hidden="true" href="#-map-fn-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-map &lt;code&gt;(fn list)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Return a new list consisting of the result of applying &lt;code&gt;fn&lt;/code&gt; to the items in &lt;code&gt;list&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-map (&lt;span class="pl-k"&gt;lambda&lt;/span&gt; (&lt;span class="pl-v"&gt;num&lt;/span&gt;) (&lt;span class="pl-k"&gt;*&lt;/span&gt; num num)) '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1 4 9 16)&lt;/span&gt;
(-map &lt;span class="pl-c1"&gt;'square&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1 4 9 16)&lt;/span&gt;
(--map (&lt;span class="pl-k"&gt;*&lt;/span&gt; it it) '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1 4 9 16)&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--map-when-pred-rep-list" class="anchor" aria-hidden="true" href="#-map-when-pred-rep-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-map-when &lt;code&gt;(pred rep list)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Return a new list where the elements in &lt;code&gt;list&lt;/code&gt; that do not match the &lt;code&gt;pred&lt;/code&gt; function
are unchanged, and where the elements in &lt;code&gt;list&lt;/code&gt; that do match the &lt;code&gt;pred&lt;/code&gt; function are mapped
through the &lt;code&gt;rep&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;Alias: &lt;code&gt;-replace-where&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;See also: &lt;a href="#-update-at-n-func-list"&gt;&lt;code&gt;-update-at&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-map-when &lt;span class="pl-c1"&gt;'even?&lt;/span&gt; &lt;span class="pl-c1"&gt;'square&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1 4 3 16)&lt;/span&gt;
(--map-when (&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; it &lt;span class="pl-c1"&gt;2&lt;/span&gt;) (&lt;span class="pl-k"&gt;*&lt;/span&gt; it it) '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1 2 9 16)&lt;/span&gt;
(--map-when (&lt;span class="pl-k"&gt;=&lt;/span&gt; it &lt;span class="pl-c1"&gt;2&lt;/span&gt;) &lt;span class="pl-c1"&gt;17&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1 17 3 4)&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--map-first-pred-rep-list" class="anchor" aria-hidden="true" href="#-map-first-pred-rep-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-map-first &lt;code&gt;(pred rep list)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Replace first item in &lt;code&gt;list&lt;/code&gt; satisfying &lt;code&gt;pred&lt;/code&gt; with result of &lt;code&gt;rep&lt;/code&gt; called on this item.&lt;/p&gt;
&lt;p&gt;See also: &lt;a href="#-map-when-pred-rep-list"&gt;&lt;code&gt;-map-when&lt;/code&gt;&lt;/a&gt;, &lt;a href="#-replace-first-old-new-list"&gt;&lt;code&gt;-replace-first&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-map-first &lt;span class="pl-c1"&gt;'even?&lt;/span&gt; &lt;span class="pl-c1"&gt;'square&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1 4 3 4)&lt;/span&gt;
(--map-first (&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; it &lt;span class="pl-c1"&gt;2&lt;/span&gt;) (&lt;span class="pl-k"&gt;*&lt;/span&gt; it it) '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1 2 9 4)&lt;/span&gt;
(--map-first (&lt;span class="pl-k"&gt;=&lt;/span&gt; it &lt;span class="pl-c1"&gt;2&lt;/span&gt;) &lt;span class="pl-c1"&gt;17&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1 17 3 2)&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--map-last-pred-rep-list" class="anchor" aria-hidden="true" href="#-map-last-pred-rep-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-map-last &lt;code&gt;(pred rep list)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Replace last item in &lt;code&gt;list&lt;/code&gt; satisfying &lt;code&gt;pred&lt;/code&gt; with result of &lt;code&gt;rep&lt;/code&gt; called on this item.&lt;/p&gt;
&lt;p&gt;See also: &lt;a href="#-map-when-pred-rep-list"&gt;&lt;code&gt;-map-when&lt;/code&gt;&lt;/a&gt;, &lt;a href="#-replace-last-old-new-list"&gt;&lt;code&gt;-replace-last&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-map-last &lt;span class="pl-c1"&gt;'even?&lt;/span&gt; &lt;span class="pl-c1"&gt;'square&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1 2 3 16)&lt;/span&gt;
(--map-last (&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; it &lt;span class="pl-c1"&gt;2&lt;/span&gt;) (&lt;span class="pl-k"&gt;*&lt;/span&gt; it it) '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1 2 3 16)&lt;/span&gt;
(--map-last (&lt;span class="pl-k"&gt;=&lt;/span&gt; it &lt;span class="pl-c1"&gt;2&lt;/span&gt;) &lt;span class="pl-c1"&gt;17&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1 2 3 17)&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--map-indexed-fn-list" class="anchor" aria-hidden="true" href="#-map-indexed-fn-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-map-indexed &lt;code&gt;(fn list)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Return a new list consisting of the result of (&lt;code&gt;fn&lt;/code&gt; index item) for each item in &lt;code&gt;list&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In the anaphoric form &lt;code&gt;--map-indexed&lt;/code&gt;, the index is exposed as symbol &lt;code&gt;it-index&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;See also: &lt;a href="#-each-indexed-list-fn"&gt;&lt;code&gt;-each-indexed&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-map-indexed (&lt;span class="pl-k"&gt;lambda&lt;/span&gt; (&lt;span class="pl-v"&gt;index&lt;/span&gt; &lt;span class="pl-v"&gt;item&lt;/span&gt;) (&lt;span class="pl-k"&gt;-&lt;/span&gt; item index)) '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1 1 1 1)&lt;/span&gt;
(--map-indexed (&lt;span class="pl-k"&gt;-&lt;/span&gt; it it-index) '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1 1 1 1)&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--annotate-fn-list" class="anchor" aria-hidden="true" href="#-annotate-fn-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-annotate &lt;code&gt;(fn list)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Return a list of cons cells where each cell is &lt;code&gt;fn&lt;/code&gt; applied to each
element of &lt;code&gt;list&lt;/code&gt; paired with the unmodified element of &lt;code&gt;list&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-annotate &lt;span class="pl-c1"&gt;'1+&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '((2 . 1) (3 . 2) (4 . 3))&lt;/span&gt;
(-annotate &lt;span class="pl-c1"&gt;'length&lt;/span&gt; '((&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;h&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;e&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;l&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;l&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;o&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;hello&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;world&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '((5 "h" "e" "l" "l" "o") (2 "hello" "world"))&lt;/span&gt;
(--annotate (&lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt; it) '(&lt;span class="pl-c1"&gt;0&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '((nil . 0) (nil . 1) (t . 2) (t . 3))&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--splice-pred-fun-list" class="anchor" aria-hidden="true" href="#-splice-pred-fun-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-splice &lt;code&gt;(pred fun list)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Splice lists generated by &lt;code&gt;fun&lt;/code&gt; in place of elements matching &lt;code&gt;pred&lt;/code&gt; in &lt;code&gt;list&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;fun&lt;/code&gt; takes the element matching &lt;code&gt;pred&lt;/code&gt; as input.&lt;/p&gt;
&lt;p&gt;This function can be used as replacement for &lt;code&gt;,@&lt;/code&gt; in case you
need to splice several lists at marked positions (for example
with keywords).&lt;/p&gt;
&lt;p&gt;See also: &lt;a href="#-splice-list-pred-new-list-list"&gt;&lt;code&gt;-splice-list&lt;/code&gt;&lt;/a&gt;, &lt;a href="#-insert-at-n-x-list"&gt;&lt;code&gt;-insert-at&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-splice &lt;span class="pl-c1"&gt;'even?&lt;/span&gt; (&lt;span class="pl-k"&gt;lambda&lt;/span&gt; (&lt;span class="pl-v"&gt;x&lt;/span&gt;) (&lt;span class="pl-k"&gt;list&lt;/span&gt; x x)) '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1 2 2 3 4 4)&lt;/span&gt;
(--splice &lt;span class="pl-c1"&gt;'t&lt;/span&gt; (&lt;span class="pl-k"&gt;list&lt;/span&gt; it it) '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1 1 2 2 3 3 4 4)&lt;/span&gt;
(--splice (&lt;span class="pl-k"&gt;equal&lt;/span&gt; it &lt;span class="pl-c1"&gt;:magic&lt;/span&gt;) '((&lt;span class="pl-k"&gt;list&lt;/span&gt; of) (magical) (code)) '((foo) (bar) &lt;span class="pl-c1"&gt;:magic&lt;/span&gt; (baz))) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '((foo) (bar) (list of) (magical) (code) (baz))&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--splice-list-pred-new-list-list" class="anchor" aria-hidden="true" href="#-splice-list-pred-new-list-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-splice-list &lt;code&gt;(pred new-list list)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Splice &lt;code&gt;new-list&lt;/code&gt; in place of elements matching &lt;code&gt;pred&lt;/code&gt; in &lt;code&gt;list&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;See also: &lt;a href="#-splice-pred-fun-list"&gt;&lt;code&gt;-splice&lt;/code&gt;&lt;/a&gt;, &lt;a href="#-insert-at-n-x-list"&gt;&lt;code&gt;-insert-at&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-splice-list &lt;span class="pl-c1"&gt;'keywordp&lt;/span&gt; '(a b c) '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;:foo&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1 a b c 2)&lt;/span&gt;
(-splice-list &lt;span class="pl-c1"&gt;'keywordp&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;:foo&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1 2)&lt;/span&gt;
(--splice-list (&lt;span class="pl-c1"&gt;keywordp&lt;/span&gt; it) '(a b c) '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;:foo&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1 a b c 2)&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--mapcat-fn-list" class="anchor" aria-hidden="true" href="#-mapcat-fn-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-mapcat &lt;code&gt;(fn list)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Return the concatenation of the result of mapping &lt;code&gt;fn&lt;/code&gt; over &lt;code&gt;list&lt;/code&gt;.
Thus function &lt;code&gt;fn&lt;/code&gt; should return a list.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-mapcat &lt;span class="pl-c1"&gt;'list&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1 2 3)&lt;/span&gt;
(-mapcat (&lt;span class="pl-k"&gt;lambda&lt;/span&gt; (&lt;span class="pl-v"&gt;item&lt;/span&gt;) (&lt;span class="pl-k"&gt;list&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt; item)) '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(0 1 0 2 0 3)&lt;/span&gt;
(--mapcat (&lt;span class="pl-k"&gt;list&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt; it) '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(0 1 0 2 0 3)&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--copy-arg" class="anchor" aria-hidden="true" href="#-copy-arg"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-copy &lt;code&gt;(arg)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Create a shallow copy of &lt;code&gt;list&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;(fn &lt;code&gt;list&lt;/code&gt;)&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-copy '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1 2 3)&lt;/span&gt;
(&lt;span class="pl-k"&gt;let&lt;/span&gt; ((a '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;))) (&lt;span class="pl-k"&gt;eq&lt;/span&gt; a (-copy a))) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; nil&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-sublist-selection-1" class="anchor" aria-hidden="true" href="#sublist-selection-1"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Sublist selection&lt;/h2&gt;
&lt;p&gt;Functions returning a sublist of the original list.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content--filter-pred-list" class="anchor" aria-hidden="true" href="#-filter-pred-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-filter &lt;code&gt;(pred list)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Return a new list of the items in &lt;code&gt;list&lt;/code&gt; for which &lt;code&gt;pred&lt;/code&gt; returns a non-nil value.&lt;/p&gt;
&lt;p&gt;Alias: &lt;code&gt;-select&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;See also: &lt;a href="#-keep-fn-list"&gt;&lt;code&gt;-keep&lt;/code&gt;&lt;/a&gt;, &lt;a href="#-remove-pred-list"&gt;&lt;code&gt;-remove&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-filter (&lt;span class="pl-k"&gt;lambda&lt;/span&gt; (&lt;span class="pl-v"&gt;num&lt;/span&gt;) (&lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt; (&lt;span class="pl-k"&gt;%&lt;/span&gt; num &lt;span class="pl-c1"&gt;2&lt;/span&gt;))) '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(2 4)&lt;/span&gt;
(-filter &lt;span class="pl-c1"&gt;'even?&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(2 4)&lt;/span&gt;
(--filter (&lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt; (&lt;span class="pl-k"&gt;%&lt;/span&gt; it &lt;span class="pl-c1"&gt;2&lt;/span&gt;)) '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(2 4)&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--remove-pred-list" class="anchor" aria-hidden="true" href="#-remove-pred-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-remove &lt;code&gt;(pred list)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Return a new list of the items in &lt;code&gt;list&lt;/code&gt; for which &lt;code&gt;pred&lt;/code&gt; returns nil.&lt;/p&gt;
&lt;p&gt;Alias: &lt;code&gt;-reject&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;See also: &lt;a href="#-filter-pred-list"&gt;&lt;code&gt;-filter&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-remove (&lt;span class="pl-k"&gt;lambda&lt;/span&gt; (&lt;span class="pl-v"&gt;num&lt;/span&gt;) (&lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt; (&lt;span class="pl-k"&gt;%&lt;/span&gt; num &lt;span class="pl-c1"&gt;2&lt;/span&gt;))) '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1 3)&lt;/span&gt;
(-remove &lt;span class="pl-c1"&gt;'even?&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1 3)&lt;/span&gt;
(--remove (&lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt; (&lt;span class="pl-k"&gt;%&lt;/span&gt; it &lt;span class="pl-c1"&gt;2&lt;/span&gt;)) '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1 3)&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--remove-first-pred-list" class="anchor" aria-hidden="true" href="#-remove-first-pred-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-remove-first &lt;code&gt;(pred list)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Return a new list with the first item matching &lt;code&gt;pred&lt;/code&gt; removed.&lt;/p&gt;
&lt;p&gt;Alias: &lt;code&gt;-reject-first&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;See also: &lt;a href="#-remove-pred-list"&gt;&lt;code&gt;-remove&lt;/code&gt;&lt;/a&gt;, &lt;a href="#-map-first-pred-rep-list"&gt;&lt;code&gt;-map-first&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-remove-first &lt;span class="pl-c1"&gt;'even?&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;7&lt;/span&gt; &lt;span class="pl-c1"&gt;8&lt;/span&gt; &lt;span class="pl-c1"&gt;10&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1 3 5 7 8 10)&lt;/span&gt;
(-remove-first &lt;span class="pl-c1"&gt;'stringp&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;first&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;second&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;third&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1 2 "second" "third")&lt;/span&gt;
(--remove-first (&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; it &lt;span class="pl-c1"&gt;3&lt;/span&gt;) '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-c1"&gt;6&lt;/span&gt; &lt;span class="pl-c1"&gt;7&lt;/span&gt; &lt;span class="pl-c1"&gt;8&lt;/span&gt; &lt;span class="pl-c1"&gt;9&lt;/span&gt; &lt;span class="pl-c1"&gt;10&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1 2 3 5 6 7 8 9 10)&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--remove-last-pred-list" class="anchor" aria-hidden="true" href="#-remove-last-pred-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-remove-last &lt;code&gt;(pred list)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Return a new list with the last item matching &lt;code&gt;pred&lt;/code&gt; removed.&lt;/p&gt;
&lt;p&gt;Alias: &lt;code&gt;-reject-last&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;See also: &lt;a href="#-remove-pred-list"&gt;&lt;code&gt;-remove&lt;/code&gt;&lt;/a&gt;, &lt;a href="#-map-last-pred-rep-list"&gt;&lt;code&gt;-map-last&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-remove-last &lt;span class="pl-c1"&gt;'even?&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;7&lt;/span&gt; &lt;span class="pl-c1"&gt;8&lt;/span&gt; &lt;span class="pl-c1"&gt;10&lt;/span&gt; &lt;span class="pl-c1"&gt;11&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1 3 5 4 7 8 11)&lt;/span&gt;
(-remove-last &lt;span class="pl-c1"&gt;'stringp&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;last&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;second&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;third&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1 2 "last" "second")&lt;/span&gt;
(--remove-last (&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; it &lt;span class="pl-c1"&gt;3&lt;/span&gt;) '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-c1"&gt;6&lt;/span&gt; &lt;span class="pl-c1"&gt;7&lt;/span&gt; &lt;span class="pl-c1"&gt;8&lt;/span&gt; &lt;span class="pl-c1"&gt;9&lt;/span&gt; &lt;span class="pl-c1"&gt;10&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1 2 3 4 5 6 7 8 9)&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--remove-item-item-list" class="anchor" aria-hidden="true" href="#-remove-item-item-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-remove-item &lt;code&gt;(item list)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Remove all occurrences of &lt;code&gt;item&lt;/code&gt; from &lt;code&gt;list&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Comparison is done with &lt;code&gt;equal&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-remove-item &lt;span class="pl-c1"&gt;3&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1 2 2 4 5)&lt;/span&gt;
(-remove-item &lt;span class="pl-c1"&gt;'foo&lt;/span&gt; '(foo bar baz foo)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(bar baz)&lt;/span&gt;
(-remove-item &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;bob&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; '(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;alice&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;bob&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;eve&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;bob&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;dave&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '("alice" "eve" "dave")&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--non-nil-list" class="anchor" aria-hidden="true" href="#-non-nil-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-non-nil &lt;code&gt;(list)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Return all non-nil elements of &lt;code&gt;list&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-non-nil '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1 2 3 4 5)&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--slice-list-from-optional-to-step" class="anchor" aria-hidden="true" href="#-slice-list-from-optional-to-step"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-slice &lt;code&gt;(list from &amp;amp;optional to step)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Return copy of &lt;code&gt;list&lt;/code&gt;, starting from index &lt;code&gt;from&lt;/code&gt; to index &lt;code&gt;to&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;from&lt;/code&gt; or &lt;code&gt;to&lt;/code&gt; may be negative.  These values are then interpreted
modulo the length of the list.&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;step&lt;/code&gt; is a number, only each STEPth item in the resulting
section is returned.  Defaults to 1.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-slice '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt;) &lt;span class="pl-c1"&gt;1&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(2 3 4 5)&lt;/span&gt;
(-slice '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt;) &lt;span class="pl-c1"&gt;0&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1 2 3)&lt;/span&gt;
(-slice '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-c1"&gt;6&lt;/span&gt; &lt;span class="pl-c1"&gt;7&lt;/span&gt; &lt;span class="pl-c1"&gt;8&lt;/span&gt; &lt;span class="pl-c1"&gt;9&lt;/span&gt;) &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;-1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(2 4 6 8)&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--take-n-list" class="anchor" aria-hidden="true" href="#-take-n-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-take &lt;code&gt;(n list)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Return a new list of the first &lt;code&gt;n&lt;/code&gt; items in &lt;code&gt;list&lt;/code&gt;, or all items if there are fewer than &lt;code&gt;n&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;See also: &lt;a href="#-take-last-n-list"&gt;&lt;code&gt;-take-last&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-take &lt;span class="pl-c1"&gt;3&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1 2 3)&lt;/span&gt;
(-take &lt;span class="pl-c1"&gt;17&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1 2 3 4 5)&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--take-last-n-list" class="anchor" aria-hidden="true" href="#-take-last-n-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-take-last &lt;code&gt;(n list)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Return the last &lt;code&gt;n&lt;/code&gt; items of &lt;code&gt;list&lt;/code&gt; in order.&lt;/p&gt;
&lt;p&gt;See also: &lt;a href="#-take-n-list"&gt;&lt;code&gt;-take&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-take-last &lt;span class="pl-c1"&gt;3&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(3 4 5)&lt;/span&gt;
(-take-last &lt;span class="pl-c1"&gt;17&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1 2 3 4 5)&lt;/span&gt;
(-take-last &lt;span class="pl-c1"&gt;1&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(5)&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--drop-n-list" class="anchor" aria-hidden="true" href="#-drop-n-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-drop &lt;code&gt;(n list)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Return the tail of &lt;code&gt;list&lt;/code&gt; without the first &lt;code&gt;n&lt;/code&gt; items.&lt;/p&gt;
&lt;p&gt;See also: &lt;a href="#-drop-last-n-list"&gt;&lt;code&gt;-drop-last&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;(fn &lt;code&gt;n&lt;/code&gt; &lt;code&gt;list&lt;/code&gt;)&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-drop &lt;span class="pl-c1"&gt;3&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(4 5)&lt;/span&gt;
(-drop &lt;span class="pl-c1"&gt;17&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '()&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--drop-last-n-list" class="anchor" aria-hidden="true" href="#-drop-last-n-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-drop-last &lt;code&gt;(n list)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Remove the last &lt;code&gt;n&lt;/code&gt; items of &lt;code&gt;list&lt;/code&gt; and return a copy.&lt;/p&gt;
&lt;p&gt;See also: &lt;a href="#-drop-n-list"&gt;&lt;code&gt;-drop&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-drop-last &lt;span class="pl-c1"&gt;3&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1 2)&lt;/span&gt;
(-drop-last &lt;span class="pl-c1"&gt;17&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '()&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--take-while-pred-list" class="anchor" aria-hidden="true" href="#-take-while-pred-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-take-while &lt;code&gt;(pred list)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Return a new list of successive items from &lt;code&gt;list&lt;/code&gt; while (&lt;code&gt;pred&lt;/code&gt; item) returns a non-nil value.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-take-while &lt;span class="pl-c1"&gt;'even?&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '()&lt;/span&gt;
(-take-while &lt;span class="pl-c1"&gt;'even?&lt;/span&gt; '(&lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-c1"&gt;6&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(2 4)&lt;/span&gt;
(--take-while (&lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt; it &lt;span class="pl-c1"&gt;4&lt;/span&gt;) '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1 2 3)&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--drop-while-pred-list" class="anchor" aria-hidden="true" href="#-drop-while-pred-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-drop-while &lt;code&gt;(pred list)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Return the tail of &lt;code&gt;list&lt;/code&gt; starting from the first item for which (&lt;code&gt;pred&lt;/code&gt; item) returns nil.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-drop-while &lt;span class="pl-c1"&gt;'even?&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1 2 3 4)&lt;/span&gt;
(-drop-while &lt;span class="pl-c1"&gt;'even?&lt;/span&gt; '(&lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-c1"&gt;6&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(5 6)&lt;/span&gt;
(--drop-while (&lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt; it &lt;span class="pl-c1"&gt;4&lt;/span&gt;) '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(4 3 2 1)&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--select-by-indices-indices-list" class="anchor" aria-hidden="true" href="#-select-by-indices-indices-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-select-by-indices &lt;code&gt;(indices list)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Return a list whose elements are elements from &lt;code&gt;list&lt;/code&gt; selected
as &lt;code&gt;(nth i list)&lt;/code&gt; for all i from &lt;code&gt;indices&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-select-by-indices '(&lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;10&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;6&lt;/span&gt;) '(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;v&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;e&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;l&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;o&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;c&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;i&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;r&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;a&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;p&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;t&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;o&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;r&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '("c" "o" "l" "o" "r")&lt;/span&gt;
(-select-by-indices '(&lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt;) '(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;a&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;b&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;c&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '("c" "b" "a")&lt;/span&gt;
(-select-by-indices '(&lt;span class="pl-c1"&gt;0&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;) '(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;f&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;a&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;r&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;l&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '("f" "a" "r" "f" "a" "l" "l" "a")&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--select-columns-columns-table" class="anchor" aria-hidden="true" href="#-select-columns-columns-table"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-select-columns &lt;code&gt;(columns table)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Select &lt;code&gt;columns&lt;/code&gt; from &lt;code&gt;table&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;table&lt;/code&gt; is a list of lists where each element represents one row.
It is assumed each row has the same length.&lt;/p&gt;
&lt;p&gt;Each row is transformed such that only the specified &lt;code&gt;columns&lt;/code&gt; are
selected.&lt;/p&gt;
&lt;p&gt;See also: &lt;a href="#-select-column-column-table"&gt;&lt;code&gt;-select-column&lt;/code&gt;&lt;/a&gt;, &lt;a href="#-select-by-indices-indices-list"&gt;&lt;code&gt;-select-by-indices&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-select-columns '(&lt;span class="pl-c1"&gt;0&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;) '((&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;) (a b c) (&lt;span class="pl-c1"&gt;:a&lt;/span&gt; &lt;span class="pl-c1"&gt;:b&lt;/span&gt; &lt;span class="pl-c1"&gt;:c&lt;/span&gt;))) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '((1 3) (a c) (:a :c))&lt;/span&gt;
(-select-columns '(&lt;span class="pl-c1"&gt;1&lt;/span&gt;) '((&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;) (a b c) (&lt;span class="pl-c1"&gt;:a&lt;/span&gt; &lt;span class="pl-c1"&gt;:b&lt;/span&gt; &lt;span class="pl-c1"&gt;:c&lt;/span&gt;))) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '((2) (b) (:b))&lt;/span&gt;
(-select-columns &lt;span class="pl-c1"&gt;nil&lt;/span&gt; '((&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;) (a b c) (&lt;span class="pl-c1"&gt;:a&lt;/span&gt; &lt;span class="pl-c1"&gt;:b&lt;/span&gt; &lt;span class="pl-c1"&gt;:c&lt;/span&gt;))) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(nil nil nil)&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--select-column-column-table" class="anchor" aria-hidden="true" href="#-select-column-column-table"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-select-column &lt;code&gt;(column table)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Select &lt;code&gt;column&lt;/code&gt; from &lt;code&gt;table&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;table&lt;/code&gt; is a list of lists where each element represents one row.
It is assumed each row has the same length.&lt;/p&gt;
&lt;p&gt;The single selected column is returned as a list.&lt;/p&gt;
&lt;p&gt;See also: &lt;a href="#-select-columns-columns-table"&gt;&lt;code&gt;-select-columns&lt;/code&gt;&lt;/a&gt;, &lt;a href="#-select-by-indices-indices-list"&gt;&lt;code&gt;-select-by-indices&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-select-column &lt;span class="pl-c1"&gt;1&lt;/span&gt; '((&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;) (a b c) (&lt;span class="pl-c1"&gt;:a&lt;/span&gt; &lt;span class="pl-c1"&gt;:b&lt;/span&gt; &lt;span class="pl-c1"&gt;:c&lt;/span&gt;))) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(2 b :b)&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-list-to-list-1" class="anchor" aria-hidden="true" href="#list-to-list-1"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;List to list&lt;/h2&gt;
&lt;p&gt;Functions returning a modified copy of the input list.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content--keep-fn-list" class="anchor" aria-hidden="true" href="#-keep-fn-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-keep &lt;code&gt;(fn list)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Return a new list of the non-nil results of applying &lt;code&gt;fn&lt;/code&gt; to the items in &lt;code&gt;list&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you want to select the original items satisfying a predicate use &lt;a href="#-filter-pred-list"&gt;&lt;code&gt;-filter&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-keep &lt;span class="pl-c1"&gt;'cdr&lt;/span&gt; '((&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;) (&lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt;) (&lt;span class="pl-c1"&gt;6&lt;/span&gt;))) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '((2 3) (5))&lt;/span&gt;
(-keep (&lt;span class="pl-k"&gt;lambda&lt;/span&gt; (&lt;span class="pl-v"&gt;num&lt;/span&gt;) (&lt;span class="pl-k"&gt;when&lt;/span&gt; (&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; num &lt;span class="pl-c1"&gt;3&lt;/span&gt;) (&lt;span class="pl-k"&gt;*&lt;/span&gt; &lt;span class="pl-c1"&gt;10&lt;/span&gt; num))) '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-c1"&gt;6&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(40 50 60)&lt;/span&gt;
(--keep (&lt;span class="pl-k"&gt;when&lt;/span&gt; (&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; it &lt;span class="pl-c1"&gt;3&lt;/span&gt;) (&lt;span class="pl-k"&gt;*&lt;/span&gt; &lt;span class="pl-c1"&gt;10&lt;/span&gt; it)) '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-c1"&gt;6&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(40 50 60)&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--concat-rest-lists" class="anchor" aria-hidden="true" href="#-concat-rest-lists"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-concat &lt;code&gt;(&amp;amp;rest lists)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Return a new list with the concatenation of the elements in the supplied &lt;code&gt;lists&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-concat '(&lt;span class="pl-c1"&gt;1&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1)&lt;/span&gt;
(-concat '(&lt;span class="pl-c1"&gt;1&lt;/span&gt;) '(&lt;span class="pl-c1"&gt;2&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1 2)&lt;/span&gt;
(-concat '(&lt;span class="pl-c1"&gt;1&lt;/span&gt;) '(&lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;) '(&lt;span class="pl-c1"&gt;4&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1 2 3 4)&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--flatten-l" class="anchor" aria-hidden="true" href="#-flatten-l"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-flatten &lt;code&gt;(l)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Take a nested list &lt;code&gt;l&lt;/code&gt; and return its contents as a single, flat list.&lt;/p&gt;
&lt;p&gt;Note that because &lt;code&gt;nil&lt;/code&gt; represents a list of zero elements (an
empty list), any mention of nil in &lt;code&gt;l&lt;/code&gt; will disappear after
flattening.  If you need to preserve nils, consider &lt;a href="#-flatten-n-num-list"&gt;&lt;code&gt;-flatten-n&lt;/code&gt;&lt;/a&gt;
or map them to some unique symbol and then map them back.&lt;/p&gt;
&lt;p&gt;Conses of two atoms are considered "terminals", that is, they
aren't flattened further.&lt;/p&gt;
&lt;p&gt;See also: &lt;a href="#-flatten-n-num-list"&gt;&lt;code&gt;-flatten-n&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-flatten '((&lt;span class="pl-c1"&gt;1&lt;/span&gt;))) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1)&lt;/span&gt;
(-flatten '((&lt;span class="pl-c1"&gt;1&lt;/span&gt; (&lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;) (((&lt;span class="pl-c1"&gt;4&lt;/span&gt; (&lt;span class="pl-c1"&gt;5&lt;/span&gt;))))))) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1 2 3 4 5)&lt;/span&gt;
(-flatten '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; (&lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;))) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1 2 (3 . 4))&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--flatten-n-num-list" class="anchor" aria-hidden="true" href="#-flatten-n-num-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-flatten-n &lt;code&gt;(num list)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Flatten &lt;code&gt;num&lt;/code&gt; levels of a nested &lt;code&gt;list&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;See also: &lt;a href="#-flatten-l"&gt;&lt;code&gt;-flatten&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-flatten-n &lt;span class="pl-c1"&gt;1&lt;/span&gt; '((&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;) ((&lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;) ((&lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-c1"&gt;6&lt;/span&gt;))))) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1 2 (3 4) ((5 6)))&lt;/span&gt;
(-flatten-n &lt;span class="pl-c1"&gt;2&lt;/span&gt; '((&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;) ((&lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;) ((&lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-c1"&gt;6&lt;/span&gt;))))) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1 2 3 4 (5 6))&lt;/span&gt;
(-flatten-n &lt;span class="pl-c1"&gt;3&lt;/span&gt; '((&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;) ((&lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;) ((&lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-c1"&gt;6&lt;/span&gt;))))) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1 2 3 4 5 6)&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--replace-old-new-list" class="anchor" aria-hidden="true" href="#-replace-old-new-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-replace &lt;code&gt;(old new list)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Replace all &lt;code&gt;old&lt;/code&gt; items in &lt;code&gt;list&lt;/code&gt; with &lt;code&gt;new&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Elements are compared using &lt;code&gt;equal&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;See also: &lt;a href="#-replace-at-n-x-list"&gt;&lt;code&gt;-replace-at&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-replace &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;1&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '("1" 2 3 4 3 2 "1")&lt;/span&gt;
(-replace &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;foo&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;bar&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; '(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;a&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;nice&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;foo&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;sentence&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;about&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;foo&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '("a" "nice" "bar" "sentence" "about" "bar")&lt;/span&gt;
(-replace &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; nil&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--replace-first-old-new-list" class="anchor" aria-hidden="true" href="#-replace-first-old-new-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-replace-first &lt;code&gt;(old new list)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Replace the first occurrence of &lt;code&gt;old&lt;/code&gt; with &lt;code&gt;new&lt;/code&gt; in &lt;code&gt;list&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Elements are compared using &lt;code&gt;equal&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;See also: &lt;a href="#-map-first-pred-rep-list"&gt;&lt;code&gt;-map-first&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-replace-first &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;1&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '("1" 2 3 4 3 2 1)&lt;/span&gt;
(-replace-first &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;foo&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;bar&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; '(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;a&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;nice&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;foo&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;sentence&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;about&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;foo&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '("a" "nice" "bar" "sentence" "about" "foo")&lt;/span&gt;
(-replace-first &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; nil&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--replace-last-old-new-list" class="anchor" aria-hidden="true" href="#-replace-last-old-new-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-replace-last &lt;code&gt;(old new list)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Replace the last occurrence of &lt;code&gt;old&lt;/code&gt; with &lt;code&gt;new&lt;/code&gt; in &lt;code&gt;list&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Elements are compared using &lt;code&gt;equal&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;See also: &lt;a href="#-map-last-pred-rep-list"&gt;&lt;code&gt;-map-last&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-replace-last &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;1&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1 2 3 4 3 2 "1")&lt;/span&gt;
(-replace-last &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;foo&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;bar&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; '(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;a&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;nice&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;foo&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;sentence&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;about&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;foo&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '("a" "nice" "foo" "sentence" "about" "bar")&lt;/span&gt;
(-replace-last &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; nil&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--insert-at-n-x-list" class="anchor" aria-hidden="true" href="#-insert-at-n-x-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-insert-at &lt;code&gt;(n x list)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Return a list with &lt;code&gt;x&lt;/code&gt; inserted into &lt;code&gt;list&lt;/code&gt; at position &lt;code&gt;n&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;See also: &lt;a href="#-splice-pred-fun-list"&gt;&lt;code&gt;-splice&lt;/code&gt;&lt;/a&gt;, &lt;a href="#-splice-list-pred-new-list-list"&gt;&lt;code&gt;-splice-list&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-insert-at &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;'x&lt;/span&gt; '(a b c)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(a x b c)&lt;/span&gt;
(-insert-at &lt;span class="pl-c1"&gt;12&lt;/span&gt; &lt;span class="pl-c1"&gt;'x&lt;/span&gt; '(a b c)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(a b c x)&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--replace-at-n-x-list" class="anchor" aria-hidden="true" href="#-replace-at-n-x-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-replace-at &lt;code&gt;(n x list)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Return a list with element at Nth position in &lt;code&gt;list&lt;/code&gt; replaced with &lt;code&gt;x&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;See also: &lt;a href="#-replace-old-new-list"&gt;&lt;code&gt;-replace&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-replace-at &lt;span class="pl-c1"&gt;0&lt;/span&gt; &lt;span class="pl-c1"&gt;9&lt;/span&gt; '(&lt;span class="pl-c1"&gt;0&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(9 1 2 3 4 5)&lt;/span&gt;
(-replace-at &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;9&lt;/span&gt; '(&lt;span class="pl-c1"&gt;0&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(0 9 2 3 4 5)&lt;/span&gt;
(-replace-at &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;9&lt;/span&gt; '(&lt;span class="pl-c1"&gt;0&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(0 1 2 3 9 5)&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--update-at-n-func-list" class="anchor" aria-hidden="true" href="#-update-at-n-func-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-update-at &lt;code&gt;(n func list)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Return a list with element at Nth position in &lt;code&gt;list&lt;/code&gt; replaced with &lt;code&gt;(func (nth n list))&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;See also: &lt;a href="#-map-when-pred-rep-list"&gt;&lt;code&gt;-map-when&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-update-at &lt;span class="pl-c1"&gt;0&lt;/span&gt; (&lt;span class="pl-k"&gt;lambda&lt;/span&gt; (&lt;span class="pl-v"&gt;x&lt;/span&gt;) (&lt;span class="pl-k"&gt;+&lt;/span&gt; x &lt;span class="pl-c1"&gt;9&lt;/span&gt;)) '(&lt;span class="pl-c1"&gt;0&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(9 1 2 3 4 5)&lt;/span&gt;
(-update-at &lt;span class="pl-c1"&gt;1&lt;/span&gt; (&lt;span class="pl-k"&gt;lambda&lt;/span&gt; (&lt;span class="pl-v"&gt;x&lt;/span&gt;) (&lt;span class="pl-k"&gt;+&lt;/span&gt; x &lt;span class="pl-c1"&gt;8&lt;/span&gt;)) '(&lt;span class="pl-c1"&gt;0&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(0 9 2 3 4 5)&lt;/span&gt;
(--update-at &lt;span class="pl-c1"&gt;2&lt;/span&gt; (&lt;span class="pl-k"&gt;length&lt;/span&gt; it) '(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;foo&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;bar&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;baz&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;quux&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '("foo" "bar" 3 "quux")&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--remove-at-n-list" class="anchor" aria-hidden="true" href="#-remove-at-n-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-remove-at &lt;code&gt;(n list)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Return a list with element at Nth position in &lt;code&gt;list&lt;/code&gt; removed.&lt;/p&gt;
&lt;p&gt;See also: &lt;a href="#-remove-at-indices-indices-list"&gt;&lt;code&gt;-remove-at-indices&lt;/code&gt;&lt;/a&gt;, &lt;a href="#-remove-pred-list"&gt;&lt;code&gt;-remove&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-remove-at &lt;span class="pl-c1"&gt;0&lt;/span&gt; '(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;0&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;1&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;2&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;3&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;4&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;5&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '("1" "2" "3" "4" "5")&lt;/span&gt;
(-remove-at &lt;span class="pl-c1"&gt;1&lt;/span&gt; '(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;0&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;1&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;2&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;3&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;4&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;5&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '("0" "2" "3" "4" "5")&lt;/span&gt;
(-remove-at &lt;span class="pl-c1"&gt;2&lt;/span&gt; '(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;0&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;1&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;2&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;3&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;4&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;5&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '("0" "1" "3" "4" "5")&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--remove-at-indices-indices-list" class="anchor" aria-hidden="true" href="#-remove-at-indices-indices-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-remove-at-indices &lt;code&gt;(indices list)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Return a list whose elements are elements from &lt;code&gt;list&lt;/code&gt; without
elements selected as &lt;code&gt;(nth i list)&lt;/code&gt; for all i
from &lt;code&gt;indices&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;See also: &lt;a href="#-remove-at-n-list"&gt;&lt;code&gt;-remove-at&lt;/code&gt;&lt;/a&gt;, &lt;a href="#-remove-pred-list"&gt;&lt;code&gt;-remove&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-remove-at-indices '(&lt;span class="pl-c1"&gt;0&lt;/span&gt;) '(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;0&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;1&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;2&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;3&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;4&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;5&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '("1" "2" "3" "4" "5")&lt;/span&gt;
(-remove-at-indices '(&lt;span class="pl-c1"&gt;0&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;) '(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;0&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;1&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;2&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;3&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;4&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;5&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '("1" "3" "5")&lt;/span&gt;
(-remove-at-indices '(&lt;span class="pl-c1"&gt;0&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt;) '(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;0&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;1&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;2&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;3&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;4&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;5&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '("1" "2" "3" "4")&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-reductions-1" class="anchor" aria-hidden="true" href="#reductions-1"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Reductions&lt;/h2&gt;
&lt;p&gt;Functions reducing lists into single value.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content--reduce-from-fn-initial-value-list" class="anchor" aria-hidden="true" href="#-reduce-from-fn-initial-value-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-reduce-from &lt;code&gt;(fn initial-value list)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Return the result of applying &lt;code&gt;fn&lt;/code&gt; to &lt;code&gt;initial-value&lt;/code&gt; and the
first item in &lt;code&gt;list&lt;/code&gt;, then applying &lt;code&gt;fn&lt;/code&gt; to that result and the 2nd
item, etc. If &lt;code&gt;list&lt;/code&gt; contains no items, return &lt;code&gt;initial-value&lt;/code&gt; and
do not call &lt;code&gt;fn&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In the anaphoric form &lt;code&gt;--reduce-from&lt;/code&gt;, the accumulated value is
exposed as symbol &lt;code&gt;acc&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;See also: &lt;a href="#-reduce-fn-list"&gt;&lt;code&gt;-reduce&lt;/code&gt;&lt;/a&gt;, &lt;a href="#-reduce-r-fn-list"&gt;&lt;code&gt;-reduce-r&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-reduce-from &lt;span class="pl-c1"&gt;'-&lt;/span&gt; &lt;span class="pl-c1"&gt;10&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; 4&lt;/span&gt;
(-reduce-from (&lt;span class="pl-k"&gt;lambda&lt;/span&gt; (&lt;span class="pl-v"&gt;memo&lt;/span&gt; &lt;span class="pl-v"&gt;item&lt;/span&gt;) (&lt;span class="pl-c1"&gt;format&lt;/span&gt; &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-s"&gt;(&lt;span class="pl-c1"&gt;%s&lt;/span&gt; - &lt;span class="pl-c1"&gt;%d&lt;/span&gt;)&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt; memo item)) &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;10&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "(((10 - 1) - 2) - 3)"&lt;/span&gt;
(--reduce-from (&lt;span class="pl-c1"&gt;concat&lt;/span&gt; acc &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt; &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; it) &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;START&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; '(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;a&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;b&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;c&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "START a b c"&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--reduce-r-from-fn-initial-value-list" class="anchor" aria-hidden="true" href="#-reduce-r-from-fn-initial-value-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-reduce-r-from &lt;code&gt;(fn initial-value list)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Replace conses with &lt;code&gt;fn&lt;/code&gt;, nil with &lt;code&gt;initial-value&lt;/code&gt; and evaluate
the resulting expression. If &lt;code&gt;list&lt;/code&gt; is empty, &lt;code&gt;initial-value&lt;/code&gt; is
returned and &lt;code&gt;fn&lt;/code&gt; is not called.&lt;/p&gt;
&lt;p&gt;Note: this function works the same as &lt;a href="#-reduce-from-fn-initial-value-list"&gt;&lt;code&gt;-reduce-from&lt;/code&gt;&lt;/a&gt; but the
operation associates from right instead of from left.&lt;/p&gt;
&lt;p&gt;See also: &lt;a href="#-reduce-r-fn-list"&gt;&lt;code&gt;-reduce-r&lt;/code&gt;&lt;/a&gt;, &lt;a href="#-reduce-fn-list"&gt;&lt;code&gt;-reduce&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-reduce-r-from &lt;span class="pl-c1"&gt;'-&lt;/span&gt; &lt;span class="pl-c1"&gt;10&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; -8&lt;/span&gt;
(-reduce-r-from (&lt;span class="pl-k"&gt;lambda&lt;/span&gt; (&lt;span class="pl-v"&gt;item&lt;/span&gt; &lt;span class="pl-v"&gt;memo&lt;/span&gt;) (&lt;span class="pl-c1"&gt;format&lt;/span&gt; &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-s"&gt;(&lt;span class="pl-c1"&gt;%d&lt;/span&gt; - &lt;span class="pl-c1"&gt;%s&lt;/span&gt;)&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt; item memo)) &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;10&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "(1 - (2 - (3 - 10)))"&lt;/span&gt;
(--reduce-r-from (&lt;span class="pl-c1"&gt;concat&lt;/span&gt; it &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt; &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; acc) &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;END&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; '(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;a&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;b&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;c&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "a b c END"&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--reduce-fn-list" class="anchor" aria-hidden="true" href="#-reduce-fn-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-reduce &lt;code&gt;(fn list)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Return the result of applying &lt;code&gt;fn&lt;/code&gt; to the first 2 items in &lt;code&gt;list&lt;/code&gt;,
then applying &lt;code&gt;fn&lt;/code&gt; to that result and the 3rd item, etc. If &lt;code&gt;list&lt;/code&gt;
contains no items, return the result of calling &lt;code&gt;fn&lt;/code&gt; with no
arguments. If &lt;code&gt;list&lt;/code&gt; contains a single item, return that item
and do not call &lt;code&gt;fn&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In the anaphoric form &lt;code&gt;--reduce&lt;/code&gt;, the accumulated value is
exposed as symbol &lt;code&gt;acc&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;See also: &lt;a href="#-reduce-from-fn-initial-value-list"&gt;&lt;code&gt;-reduce-from&lt;/code&gt;&lt;/a&gt;, &lt;a href="#-reduce-r-fn-list"&gt;&lt;code&gt;-reduce-r&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-reduce &lt;span class="pl-c1"&gt;'-&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; -8&lt;/span&gt;
(-reduce &lt;span class="pl-c1"&gt;'list&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(((1 2) 3) 4)&lt;/span&gt;
(--reduce (&lt;span class="pl-c1"&gt;format&lt;/span&gt; &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-s"&gt;&lt;span class="pl-c1"&gt;%s&lt;/span&gt;-&lt;span class="pl-c1"&gt;%d&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt; acc it) '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "1-2-3"&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--reduce-r-fn-list" class="anchor" aria-hidden="true" href="#-reduce-r-fn-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-reduce-r &lt;code&gt;(fn list)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Replace conses with &lt;code&gt;fn&lt;/code&gt; and evaluate the resulting expression.
The final nil is ignored. If &lt;code&gt;list&lt;/code&gt; contains no items, return the
result of calling &lt;code&gt;fn&lt;/code&gt; with no arguments. If &lt;code&gt;list&lt;/code&gt; contains a single
item, return that item and do not call &lt;code&gt;fn&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The first argument of &lt;code&gt;fn&lt;/code&gt; is the new item, the second is the
accumulated value.&lt;/p&gt;
&lt;p&gt;Note: this function works the same as &lt;a href="#-reduce-fn-list"&gt;&lt;code&gt;-reduce&lt;/code&gt;&lt;/a&gt; but the operation
associates from right instead of from left.&lt;/p&gt;
&lt;p&gt;See also: &lt;a href="#-reduce-r-from-fn-initial-value-list"&gt;&lt;code&gt;-reduce-r-from&lt;/code&gt;&lt;/a&gt;, &lt;a href="#-reduce-fn-list"&gt;&lt;code&gt;-reduce&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-reduce-r &lt;span class="pl-c1"&gt;'-&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; -2&lt;/span&gt;
(-reduce-r (&lt;span class="pl-k"&gt;lambda&lt;/span&gt; (&lt;span class="pl-v"&gt;item&lt;/span&gt; &lt;span class="pl-v"&gt;memo&lt;/span&gt;) (&lt;span class="pl-c1"&gt;format&lt;/span&gt; &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-s"&gt;&lt;span class="pl-c1"&gt;%s&lt;/span&gt;-&lt;span class="pl-c1"&gt;%d&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt; memo item)) '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "3-2-1"&lt;/span&gt;
(--reduce-r (&lt;span class="pl-c1"&gt;format&lt;/span&gt; &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-s"&gt;&lt;span class="pl-c1"&gt;%s&lt;/span&gt;-&lt;span class="pl-c1"&gt;%d&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt; acc it) '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "3-2-1"&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--reductions-from-fn-init-list" class="anchor" aria-hidden="true" href="#-reductions-from-fn-init-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-reductions-from &lt;code&gt;(fn init list)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Return a list of the intermediate values of the reduction.&lt;/p&gt;
&lt;p&gt;See &lt;a href="#-reduce-from-fn-initial-value-list"&gt;&lt;code&gt;-reduce-from&lt;/code&gt;&lt;/a&gt; for explanation of the arguments.&lt;/p&gt;
&lt;p&gt;See also: &lt;a href="#-reductions-fn-list"&gt;&lt;code&gt;-reductions&lt;/code&gt;&lt;/a&gt;, &lt;a href="#-reductions-r-fn-list"&gt;&lt;code&gt;-reductions-r&lt;/code&gt;&lt;/a&gt;, &lt;a href="#-reduce-r-fn-list"&gt;&lt;code&gt;-reduce-r&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-reductions-from (&lt;span class="pl-k"&gt;lambda&lt;/span&gt; (&lt;span class="pl-v"&gt;a&lt;/span&gt; &lt;span class="pl-v"&gt;i&lt;/span&gt;) (&lt;span class="pl-c1"&gt;format&lt;/span&gt; &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-s"&gt;(&lt;span class="pl-c1"&gt;%s&lt;/span&gt; FN &lt;span class="pl-c1"&gt;%d&lt;/span&gt;)&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt; a i)) &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;INIT&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '("INIT" "(INIT FN 1)" "((INIT FN 1) FN 2)" "(((INIT FN 1) FN 2) FN 3)" "((((INIT FN 1) FN 2) FN 3) FN 4)")&lt;/span&gt;
(-reductions-from &lt;span class="pl-c1"&gt;'max&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt; '(&lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(0 2 2 4 4)&lt;/span&gt;
(-reductions-from &lt;span class="pl-c1"&gt;'*&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1 1 2 6 24)&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--reductions-r-from-fn-init-list" class="anchor" aria-hidden="true" href="#-reductions-r-from-fn-init-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-reductions-r-from &lt;code&gt;(fn init list)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Return a list of the intermediate values of the reduction.&lt;/p&gt;
&lt;p&gt;See &lt;a href="#-reduce-r-from-fn-initial-value-list"&gt;&lt;code&gt;-reduce-r-from&lt;/code&gt;&lt;/a&gt; for explanation of the arguments.&lt;/p&gt;
&lt;p&gt;See also: &lt;a href="#-reductions-r-fn-list"&gt;&lt;code&gt;-reductions-r&lt;/code&gt;&lt;/a&gt;, &lt;a href="#-reductions-fn-list"&gt;&lt;code&gt;-reductions&lt;/code&gt;&lt;/a&gt;, &lt;a href="#-reduce-fn-list"&gt;&lt;code&gt;-reduce&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-reductions-r-from (&lt;span class="pl-k"&gt;lambda&lt;/span&gt; (&lt;span class="pl-v"&gt;i&lt;/span&gt; &lt;span class="pl-v"&gt;a&lt;/span&gt;) (&lt;span class="pl-c1"&gt;format&lt;/span&gt; &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-s"&gt;(&lt;span class="pl-c1"&gt;%d&lt;/span&gt; FN &lt;span class="pl-c1"&gt;%s&lt;/span&gt;)&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt; i a)) &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;INIT&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '("(1 FN (2 FN (3 FN (4 FN INIT))))" "(2 FN (3 FN (4 FN INIT)))" "(3 FN (4 FN INIT))" "(4 FN INIT)" "INIT")&lt;/span&gt;
(-reductions-r-from &lt;span class="pl-c1"&gt;'max&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt; '(&lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(4 4 4 3 0)&lt;/span&gt;
(-reductions-r-from &lt;span class="pl-c1"&gt;'*&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(24 24 12 4 1)&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--reductions-fn-list" class="anchor" aria-hidden="true" href="#-reductions-fn-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-reductions &lt;code&gt;(fn list)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Return a list of the intermediate values of the reduction.&lt;/p&gt;
&lt;p&gt;See &lt;a href="#-reduce-fn-list"&gt;&lt;code&gt;-reduce&lt;/code&gt;&lt;/a&gt; for explanation of the arguments.&lt;/p&gt;
&lt;p&gt;See also: &lt;a href="#-reductions-from-fn-init-list"&gt;&lt;code&gt;-reductions-from&lt;/code&gt;&lt;/a&gt;, &lt;a href="#-reductions-r-fn-list"&gt;&lt;code&gt;-reductions-r&lt;/code&gt;&lt;/a&gt;, &lt;a href="#-reduce-r-fn-list"&gt;&lt;code&gt;-reduce-r&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-reductions (&lt;span class="pl-k"&gt;lambda&lt;/span&gt; (&lt;span class="pl-v"&gt;a&lt;/span&gt; &lt;span class="pl-v"&gt;i&lt;/span&gt;) (&lt;span class="pl-c1"&gt;format&lt;/span&gt; &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-s"&gt;(&lt;span class="pl-c1"&gt;%s&lt;/span&gt; FN &lt;span class="pl-c1"&gt;%d&lt;/span&gt;)&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt; a i)) '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1 "(1 FN 2)" "((1 FN 2) FN 3)" "(((1 FN 2) FN 3) FN 4)")&lt;/span&gt;
(-reductions &lt;span class="pl-c1"&gt;'+&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1 3 6 10)&lt;/span&gt;
(-reductions &lt;span class="pl-c1"&gt;'*&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1 2 6 24)&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--reductions-r-fn-list" class="anchor" aria-hidden="true" href="#-reductions-r-fn-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-reductions-r &lt;code&gt;(fn list)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Return a list of the intermediate values of the reduction.&lt;/p&gt;
&lt;p&gt;See &lt;a href="#-reduce-r-fn-list"&gt;&lt;code&gt;-reduce-r&lt;/code&gt;&lt;/a&gt; for explanation of the arguments.&lt;/p&gt;
&lt;p&gt;See also: &lt;a href="#-reductions-r-from-fn-init-list"&gt;&lt;code&gt;-reductions-r-from&lt;/code&gt;&lt;/a&gt;, &lt;a href="#-reductions-fn-list"&gt;&lt;code&gt;-reductions&lt;/code&gt;&lt;/a&gt;, &lt;a href="#-reduce-fn-list"&gt;&lt;code&gt;-reduce&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-reductions-r (&lt;span class="pl-k"&gt;lambda&lt;/span&gt; (&lt;span class="pl-v"&gt;i&lt;/span&gt; &lt;span class="pl-v"&gt;a&lt;/span&gt;) (&lt;span class="pl-c1"&gt;format&lt;/span&gt; &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-s"&gt;(&lt;span class="pl-c1"&gt;%d&lt;/span&gt; FN &lt;span class="pl-c1"&gt;%s&lt;/span&gt;)&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt; i a)) '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '("(1 FN (2 FN (3 FN 4)))" "(2 FN (3 FN 4))" "(3 FN 4)" 4)&lt;/span&gt;
(-reductions-r &lt;span class="pl-c1"&gt;'+&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(10 9 7 4)&lt;/span&gt;
(-reductions-r &lt;span class="pl-c1"&gt;'*&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(24 24 12 4)&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--count-pred-list" class="anchor" aria-hidden="true" href="#-count-pred-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-count &lt;code&gt;(pred list)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Counts the number of items in &lt;code&gt;list&lt;/code&gt; where (&lt;code&gt;pred&lt;/code&gt; item) is non-nil.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-count &lt;span class="pl-c1"&gt;'even?&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; 2&lt;/span&gt;
(--count (&lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt; it &lt;span class="pl-c1"&gt;4&lt;/span&gt;) '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; 3&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--sum-list" class="anchor" aria-hidden="true" href="#-sum-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-sum &lt;code&gt;(list)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Return the sum of &lt;code&gt;list&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-sum '()) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; 0&lt;/span&gt;
(-sum '(&lt;span class="pl-c1"&gt;1&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; 1&lt;/span&gt;
(-sum '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; 10&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--running-sum-list" class="anchor" aria-hidden="true" href="#-running-sum-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-running-sum &lt;code&gt;(list)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Return a list with running sums of items in &lt;code&gt;list&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;list&lt;/code&gt; must be non-empty.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-running-sum '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1 3 6 10)&lt;/span&gt;
(-running-sum '(&lt;span class="pl-c1"&gt;1&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1)&lt;/span&gt;
(-running-sum '()) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Error&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--product-list" class="anchor" aria-hidden="true" href="#-product-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-product &lt;code&gt;(list)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Return the product of &lt;code&gt;list&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-product '()) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; 1&lt;/span&gt;
(-product '(&lt;span class="pl-c1"&gt;1&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; 1&lt;/span&gt;
(-product '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; 24&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--running-product-list" class="anchor" aria-hidden="true" href="#-running-product-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-running-product &lt;code&gt;(list)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Return a list with running products of items in &lt;code&gt;list&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;list&lt;/code&gt; must be non-empty.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-running-product '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1 2 6 24)&lt;/span&gt;
(-running-product '(&lt;span class="pl-c1"&gt;1&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1)&lt;/span&gt;
(-running-product '()) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Error&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--inits-list" class="anchor" aria-hidden="true" href="#-inits-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-inits &lt;code&gt;(list)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Return all prefixes of &lt;code&gt;list&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-inits '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(nil (1) (1 2) (1 2 3) (1 2 3 4))&lt;/span&gt;
(-inits &lt;span class="pl-c1"&gt;nil&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(nil)&lt;/span&gt;
(-inits '(&lt;span class="pl-c1"&gt;1&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(nil (1))&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--tails-list" class="anchor" aria-hidden="true" href="#-tails-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-tails &lt;code&gt;(list)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Return all suffixes of &lt;code&gt;list&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-tails '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '((1 2 3 4) (2 3 4) (3 4) (4) nil)&lt;/span&gt;
(-tails &lt;span class="pl-c1"&gt;nil&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(nil)&lt;/span&gt;
(-tails '(&lt;span class="pl-c1"&gt;1&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '((1) nil)&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--common-prefix-rest-lists" class="anchor" aria-hidden="true" href="#-common-prefix-rest-lists"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-common-prefix &lt;code&gt;(&amp;amp;rest lists)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Return the longest common prefix of &lt;code&gt;lists&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-common-prefix '(&lt;span class="pl-c1"&gt;1&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1)&lt;/span&gt;
(-common-prefix '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;) '(&lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;) '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; nil&lt;/span&gt;
(-common-prefix '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;) '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;) '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1 2)&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--common-suffix-rest-lists" class="anchor" aria-hidden="true" href="#-common-suffix-rest-lists"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-common-suffix &lt;code&gt;(&amp;amp;rest lists)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Return the longest common suffix of &lt;code&gt;lists&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-common-suffix '(&lt;span class="pl-c1"&gt;1&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1)&lt;/span&gt;
(-common-suffix '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;) '(&lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;) '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; nil&lt;/span&gt;
(-common-suffix '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;) '(&lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;) '(&lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(3 4)&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--min-list" class="anchor" aria-hidden="true" href="#-min-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-min &lt;code&gt;(list)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Return the smallest value from &lt;code&gt;list&lt;/code&gt; of numbers or markers.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-min '(&lt;span class="pl-c1"&gt;0&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; 0&lt;/span&gt;
(-min '(&lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; 1&lt;/span&gt;
(-min '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; 1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--min-by-comparator-list" class="anchor" aria-hidden="true" href="#-min-by-comparator-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-min-by &lt;code&gt;(comparator list)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Take a comparison function &lt;code&gt;comparator&lt;/code&gt; and a &lt;code&gt;list&lt;/code&gt; and return
the least element of the list by the comparison function.&lt;/p&gt;
&lt;p&gt;See also combinator &lt;a href="#-on-operator-transformer"&gt;&lt;code&gt;-on&lt;/code&gt;&lt;/a&gt; which can transform the values before
comparing them.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-min-by &lt;span class="pl-c1"&gt;'&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; '(&lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;6&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; 1&lt;/span&gt;
(--min-by (&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; (&lt;span class="pl-k"&gt;car&lt;/span&gt; it) (&lt;span class="pl-k"&gt;car&lt;/span&gt; other)) '((&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;) (&lt;span class="pl-c1"&gt;2&lt;/span&gt;) (&lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;))) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1 2 3)&lt;/span&gt;
(--min-by (&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; (&lt;span class="pl-k"&gt;length&lt;/span&gt; it) (&lt;span class="pl-k"&gt;length&lt;/span&gt; other)) '((&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;) (&lt;span class="pl-c1"&gt;2&lt;/span&gt;) (&lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;))) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(2)&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--max-list" class="anchor" aria-hidden="true" href="#-max-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-max &lt;code&gt;(list)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Return the largest value from &lt;code&gt;list&lt;/code&gt; of numbers or markers.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-max '(&lt;span class="pl-c1"&gt;0&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; 0&lt;/span&gt;
(-max '(&lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; 3&lt;/span&gt;
(-max '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; 3&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--max-by-comparator-list" class="anchor" aria-hidden="true" href="#-max-by-comparator-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-max-by &lt;code&gt;(comparator list)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Take a comparison function &lt;code&gt;comparator&lt;/code&gt; and a &lt;code&gt;list&lt;/code&gt; and return
the greatest element of the list by the comparison function.&lt;/p&gt;
&lt;p&gt;See also combinator &lt;a href="#-on-operator-transformer"&gt;&lt;code&gt;-on&lt;/code&gt;&lt;/a&gt; which can transform the values before
comparing them.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-max-by &lt;span class="pl-c1"&gt;'&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; '(&lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;6&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; 6&lt;/span&gt;
(--max-by (&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; (&lt;span class="pl-k"&gt;car&lt;/span&gt; it) (&lt;span class="pl-k"&gt;car&lt;/span&gt; other)) '((&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;) (&lt;span class="pl-c1"&gt;2&lt;/span&gt;) (&lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;))) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(3 2)&lt;/span&gt;
(--max-by (&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; (&lt;span class="pl-k"&gt;length&lt;/span&gt; it) (&lt;span class="pl-k"&gt;length&lt;/span&gt; other)) '((&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;) (&lt;span class="pl-c1"&gt;2&lt;/span&gt;) (&lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;))) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1 2 3)&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-unfolding-1" class="anchor" aria-hidden="true" href="#unfolding-1"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Unfolding&lt;/h2&gt;
&lt;p&gt;Operations dual to reductions, building lists from seed value rather than consuming a list to produce a single value.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content--iterate-fun-init-n" class="anchor" aria-hidden="true" href="#-iterate-fun-init-n"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-iterate &lt;code&gt;(fun init n)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Return a list of iterated applications of &lt;code&gt;fun&lt;/code&gt; to &lt;code&gt;init&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This means a list of form:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(init (fun init) (fun (fun init)) ...)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;n&lt;/code&gt; is the length of the returned list.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-iterate &lt;span class="pl-c1"&gt;'1+&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;10&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1 2 3 4 5 6 7 8 9 10)&lt;/span&gt;
(-iterate (&lt;span class="pl-k"&gt;lambda&lt;/span&gt; (&lt;span class="pl-v"&gt;x&lt;/span&gt;) (&lt;span class="pl-k"&gt;+&lt;/span&gt; x x)) &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(2 4 8 16 32)&lt;/span&gt;
(--iterate (&lt;span class="pl-k"&gt;*&lt;/span&gt; it it) &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(2 4 16 256 65536)&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--unfold-fun-seed" class="anchor" aria-hidden="true" href="#-unfold-fun-seed"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-unfold &lt;code&gt;(fun seed)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Build a list from &lt;code&gt;seed&lt;/code&gt; using &lt;code&gt;fun&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This is "dual" operation to &lt;a href="#-reduce-r-fn-list"&gt;&lt;code&gt;-reduce-r&lt;/code&gt;&lt;/a&gt;: while -reduce-r
consumes a list to produce a single value, &lt;a href="#-unfold-fun-seed"&gt;&lt;code&gt;-unfold&lt;/code&gt;&lt;/a&gt; takes a
seed value and builds a (potentially infinite!) list.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;fun&lt;/code&gt; should return &lt;code&gt;nil&lt;/code&gt; to stop the generating process, or a
cons (&lt;code&gt;a&lt;/code&gt; . &lt;code&gt;b&lt;/code&gt;), where &lt;code&gt;a&lt;/code&gt; will be prepended to the result and &lt;code&gt;b&lt;/code&gt; is
the new seed.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-unfold (&lt;span class="pl-k"&gt;lambda&lt;/span&gt; (&lt;span class="pl-v"&gt;x&lt;/span&gt;) (&lt;span class="pl-k"&gt;unless&lt;/span&gt; (&lt;span class="pl-k"&gt;=&lt;/span&gt; x &lt;span class="pl-c1"&gt;0&lt;/span&gt;) (&lt;span class="pl-k"&gt;cons&lt;/span&gt; x (&lt;span class="pl-c1"&gt;1-&lt;/span&gt; x)))) &lt;span class="pl-c1"&gt;10&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(10 9 8 7 6 5 4 3 2 1)&lt;/span&gt;
(--unfold (&lt;span class="pl-k"&gt;when&lt;/span&gt; it (&lt;span class="pl-k"&gt;cons&lt;/span&gt; it (&lt;span class="pl-k"&gt;cdr&lt;/span&gt; it))) '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '((1 2 3 4) (2 3 4) (3 4) (4))&lt;/span&gt;
(--unfold (&lt;span class="pl-k"&gt;when&lt;/span&gt; it (&lt;span class="pl-k"&gt;cons&lt;/span&gt; it (&lt;span class="pl-k"&gt;butlast&lt;/span&gt; it))) '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '((1 2 3 4) (1 2 3) (1 2) (1))&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-predicates-1" class="anchor" aria-hidden="true" href="#predicates-1"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Predicates&lt;/h2&gt;
&lt;h4&gt;&lt;a id="user-content--any-pred-list" class="anchor" aria-hidden="true" href="#-any-pred-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-any? &lt;code&gt;(pred list)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Return t if (&lt;code&gt;pred&lt;/code&gt; x) is non-nil for any x in &lt;code&gt;list&lt;/code&gt;, else nil.&lt;/p&gt;
&lt;p&gt;Alias: &lt;code&gt;-any-p&lt;/code&gt;, &lt;code&gt;-some?&lt;/code&gt;, &lt;code&gt;-some-p&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-any&lt;span class="pl-c1"&gt;? &lt;/span&gt;&lt;span class="pl-c1"&gt;'even?&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; t&lt;/span&gt;
(-any&lt;span class="pl-c1"&gt;? &lt;/span&gt;&lt;span class="pl-c1"&gt;'even?&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; nil&lt;/span&gt;
(-any&lt;span class="pl-c1"&gt;? &lt;/span&gt;&lt;span class="pl-c1"&gt;'null&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; nil&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--all-pred-list" class="anchor" aria-hidden="true" href="#-all-pred-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-all? &lt;code&gt;(pred list)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Return t if (&lt;code&gt;pred&lt;/code&gt; x) is non-nil for all x in &lt;code&gt;list&lt;/code&gt;, else nil.&lt;/p&gt;
&lt;p&gt;Alias: &lt;code&gt;-all-p&lt;/code&gt;, &lt;code&gt;-every?&lt;/code&gt;, &lt;code&gt;-every-p&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-all&lt;span class="pl-c1"&gt;? &lt;/span&gt;&lt;span class="pl-c1"&gt;'even?&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; nil&lt;/span&gt;
(-all&lt;span class="pl-c1"&gt;? &lt;/span&gt;&lt;span class="pl-c1"&gt;'even?&lt;/span&gt; '(&lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;6&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; t&lt;/span&gt;
(--all&lt;span class="pl-c1"&gt;? &lt;/span&gt;(&lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt; (&lt;span class="pl-k"&gt;%&lt;/span&gt; it &lt;span class="pl-c1"&gt;2&lt;/span&gt;)) '(&lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;6&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; t&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--none-pred-list" class="anchor" aria-hidden="true" href="#-none-pred-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-none? &lt;code&gt;(pred list)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Return t if (&lt;code&gt;pred&lt;/code&gt; x) is nil for all x in &lt;code&gt;list&lt;/code&gt;, else nil.&lt;/p&gt;
&lt;p&gt;Alias: &lt;code&gt;-none-p&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-none&lt;span class="pl-c1"&gt;? &lt;/span&gt;&lt;span class="pl-c1"&gt;'even?&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; nil&lt;/span&gt;
(-none&lt;span class="pl-c1"&gt;? &lt;/span&gt;&lt;span class="pl-c1"&gt;'even?&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; t&lt;/span&gt;
(--none&lt;span class="pl-c1"&gt;? &lt;/span&gt;(&lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt; (&lt;span class="pl-k"&gt;%&lt;/span&gt; it &lt;span class="pl-c1"&gt;2&lt;/span&gt;)) '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; nil&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--only-some-pred-list" class="anchor" aria-hidden="true" href="#-only-some-pred-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-only-some? &lt;code&gt;(pred list)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Return &lt;code&gt;t&lt;/code&gt; if at least one item of &lt;code&gt;list&lt;/code&gt; matches &lt;code&gt;pred&lt;/code&gt; and at least one item of &lt;code&gt;list&lt;/code&gt; does not match &lt;code&gt;pred&lt;/code&gt;.
Return &lt;code&gt;nil&lt;/code&gt; both if all items match the predicate or if none of the items match the predicate.&lt;/p&gt;
&lt;p&gt;Alias: &lt;code&gt;-only-some-p&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-only-some&lt;span class="pl-c1"&gt;? &lt;/span&gt;&lt;span class="pl-c1"&gt;'even?&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; t&lt;/span&gt;
(-only-some&lt;span class="pl-c1"&gt;? &lt;/span&gt;&lt;span class="pl-c1"&gt;'even?&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; nil&lt;/span&gt;
(-only-some&lt;span class="pl-c1"&gt;? &lt;/span&gt;&lt;span class="pl-c1"&gt;'even?&lt;/span&gt; '(&lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;6&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; nil&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--contains-list-element" class="anchor" aria-hidden="true" href="#-contains-list-element"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-contains? &lt;code&gt;(list element)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Return non-nil if &lt;code&gt;list&lt;/code&gt; contains &lt;code&gt;element&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The test for equality is done with &lt;code&gt;equal&lt;/code&gt;, or with &lt;code&gt;-compare-fn&lt;/code&gt;
if that's non-nil.&lt;/p&gt;
&lt;p&gt;Alias: &lt;code&gt;-contains-p&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-contains&lt;span class="pl-c1"&gt;? &lt;/span&gt;'(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;) &lt;span class="pl-c1"&gt;1&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; t&lt;/span&gt;
(-contains&lt;span class="pl-c1"&gt;? &lt;/span&gt;'(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;) &lt;span class="pl-c1"&gt;2&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; t&lt;/span&gt;
(-contains&lt;span class="pl-c1"&gt;? &lt;/span&gt;'(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;) &lt;span class="pl-c1"&gt;4&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; nil&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--same-items-list-list2" class="anchor" aria-hidden="true" href="#-same-items-list-list2"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-same-items? &lt;code&gt;(list list2)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Return true if &lt;code&gt;list&lt;/code&gt; and &lt;code&gt;list2&lt;/code&gt; has the same items.&lt;/p&gt;
&lt;p&gt;The order of the elements in the lists does not matter.&lt;/p&gt;
&lt;p&gt;Alias: &lt;code&gt;-same-items-p&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-same-items&lt;span class="pl-c1"&gt;? &lt;/span&gt;'(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;) '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; t&lt;/span&gt;
(-same-items&lt;span class="pl-c1"&gt;? &lt;/span&gt;'(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;) '(&lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; t&lt;/span&gt;
(-same-items&lt;span class="pl-c1"&gt;? &lt;/span&gt;'(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;) '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; nil&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--is-prefix-prefix-list" class="anchor" aria-hidden="true" href="#-is-prefix-prefix-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-is-prefix? &lt;code&gt;(prefix list)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Return non-nil if &lt;code&gt;prefix&lt;/code&gt; is prefix of &lt;code&gt;list&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Alias: &lt;code&gt;-is-prefix-p&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-is-prefix&lt;span class="pl-c1"&gt;? &lt;/span&gt;'(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;) '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; t&lt;/span&gt;
(-is-prefix&lt;span class="pl-c1"&gt;? &lt;/span&gt;'(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt;) '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; nil&lt;/span&gt;
(-is-prefix&lt;span class="pl-c1"&gt;? &lt;/span&gt;'(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;) '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; nil&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--is-suffix-suffix-list" class="anchor" aria-hidden="true" href="#-is-suffix-suffix-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-is-suffix? &lt;code&gt;(suffix list)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Return non-nil if &lt;code&gt;suffix&lt;/code&gt; is suffix of &lt;code&gt;list&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Alias: &lt;code&gt;-is-suffix-p&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-is-suffix&lt;span class="pl-c1"&gt;? &lt;/span&gt;'(&lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt;) '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; t&lt;/span&gt;
(-is-suffix&lt;span class="pl-c1"&gt;? &lt;/span&gt;'(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt;) '(&lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; nil&lt;/span&gt;
(-is-suffix&lt;span class="pl-c1"&gt;? &lt;/span&gt;'(&lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt;) '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; nil&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--is-infix-infix-list" class="anchor" aria-hidden="true" href="#-is-infix-infix-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-is-infix? &lt;code&gt;(infix list)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Return non-nil if &lt;code&gt;infix&lt;/code&gt; is infix of &lt;code&gt;list&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This operation runs in &lt;code&gt;o&lt;/code&gt;(n^2) time&lt;/p&gt;
&lt;p&gt;Alias: &lt;code&gt;-is-infix-p&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-is-infix&lt;span class="pl-c1"&gt;? &lt;/span&gt;'(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;) '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; t&lt;/span&gt;
(-is-infix&lt;span class="pl-c1"&gt;? &lt;/span&gt;'(&lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;) '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; t&lt;/span&gt;
(-is-infix&lt;span class="pl-c1"&gt;? &lt;/span&gt;'(&lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt;) '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; t&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-partitioning-1" class="anchor" aria-hidden="true" href="#partitioning-1"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Partitioning&lt;/h2&gt;
&lt;p&gt;Functions partitioning the input list into a list of lists.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content--split-at-n-list" class="anchor" aria-hidden="true" href="#-split-at-n-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-split-at &lt;code&gt;(n list)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Return a list of ((-take &lt;code&gt;n&lt;/code&gt; &lt;code&gt;list&lt;/code&gt;) (-drop &lt;code&gt;n&lt;/code&gt; &lt;code&gt;list&lt;/code&gt;)), in no more than one pass through the list.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-split-at &lt;span class="pl-c1"&gt;3&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '((1 2 3) (4 5))&lt;/span&gt;
(-split-at &lt;span class="pl-c1"&gt;17&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '((1 2 3 4 5) nil)&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--split-with-pred-list" class="anchor" aria-hidden="true" href="#-split-with-pred-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-split-with &lt;code&gt;(pred list)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Return a list of ((-take-while &lt;code&gt;pred&lt;/code&gt; &lt;code&gt;list&lt;/code&gt;) (-drop-while &lt;code&gt;pred&lt;/code&gt; &lt;code&gt;list&lt;/code&gt;)), in no more than one pass through the list.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-split-with &lt;span class="pl-c1"&gt;'even?&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(nil (1 2 3 4))&lt;/span&gt;
(-split-with &lt;span class="pl-c1"&gt;'even?&lt;/span&gt; '(&lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-c1"&gt;6&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '((2 4) (5 6))&lt;/span&gt;
(--split-with (&lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt; it &lt;span class="pl-c1"&gt;4&lt;/span&gt;) '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '((1 2 3) (4 3 2 1))&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--split-on-item-list" class="anchor" aria-hidden="true" href="#-split-on-item-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-split-on &lt;code&gt;(item list)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Split the &lt;code&gt;list&lt;/code&gt; each time &lt;code&gt;item&lt;/code&gt; is found.&lt;/p&gt;
&lt;p&gt;Unlike &lt;a href="#-partition-by-fn-list"&gt;&lt;code&gt;-partition-by&lt;/code&gt;&lt;/a&gt;, the &lt;code&gt;item&lt;/code&gt; is discarded from the results.
Empty lists are also removed from the result.&lt;/p&gt;
&lt;p&gt;Comparison is done by &lt;code&gt;equal&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;See also &lt;a href="#-split-when-fn-list"&gt;&lt;code&gt;-split-when&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-split-on '| '(Nil | Leaf a | Node [Tree a])) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '((Nil) (Leaf a) (Node [Tree a]))&lt;/span&gt;
(-split-on &lt;span class="pl-c1"&gt;':endgroup&lt;/span&gt; '(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;a&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;b&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;:endgroup&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;c&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;:endgroup&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;d&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;e&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(("a" "b") ("c") ("d" "e"))&lt;/span&gt;
(-split-on &lt;span class="pl-c1"&gt;':endgroup&lt;/span&gt; '(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;a&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;b&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;:endgroup&lt;/span&gt; &lt;span class="pl-c1"&gt;:endgroup&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;d&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;e&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(("a" "b") ("d" "e"))&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--split-when-fn-list" class="anchor" aria-hidden="true" href="#-split-when-fn-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-split-when &lt;code&gt;(fn list)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Split the &lt;code&gt;list&lt;/code&gt; on each element where &lt;code&gt;fn&lt;/code&gt; returns non-nil.&lt;/p&gt;
&lt;p&gt;Unlike &lt;a href="#-partition-by-fn-list"&gt;&lt;code&gt;-partition-by&lt;/code&gt;&lt;/a&gt;, the "matched" element is discarded from
the results.  Empty lists are also removed from the result.&lt;/p&gt;
&lt;p&gt;This function can be thought of as a generalization of
&lt;code&gt;split-string&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-split-when &lt;span class="pl-c1"&gt;'even?&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-c1"&gt;6&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '((1) (3) (5))&lt;/span&gt;
(-split-when &lt;span class="pl-c1"&gt;'even?&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;6&lt;/span&gt; &lt;span class="pl-c1"&gt;8&lt;/span&gt; &lt;span class="pl-c1"&gt;9&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '((1) (3) (9))&lt;/span&gt;
(--split-when (&lt;span class="pl-c1"&gt;memq&lt;/span&gt; it '(&lt;span class="pl-c1"&gt;&amp;amp;optional&lt;/span&gt; &lt;span class="pl-c1"&gt;&amp;amp;rest&lt;/span&gt;)) '(a b &lt;span class="pl-c1"&gt;&amp;amp;optional&lt;/span&gt; c d &lt;span class="pl-c1"&gt;&amp;amp;rest&lt;/span&gt; args)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '((a b) (c d) (args))&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--separate-pred-list" class="anchor" aria-hidden="true" href="#-separate-pred-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-separate &lt;code&gt;(pred list)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Return a list of ((-filter &lt;code&gt;pred&lt;/code&gt; &lt;code&gt;list&lt;/code&gt;) (-remove &lt;code&gt;pred&lt;/code&gt; &lt;code&gt;list&lt;/code&gt;)), in one pass through the list.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-separate (&lt;span class="pl-k"&gt;lambda&lt;/span&gt; (&lt;span class="pl-v"&gt;num&lt;/span&gt;) (&lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt; (&lt;span class="pl-k"&gt;%&lt;/span&gt; num &lt;span class="pl-c1"&gt;2&lt;/span&gt;))) '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-c1"&gt;6&lt;/span&gt; &lt;span class="pl-c1"&gt;7&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '((2 4 6) (1 3 5 7))&lt;/span&gt;
(--separate (&lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt; it &lt;span class="pl-c1"&gt;5&lt;/span&gt;) '(&lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;7&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-c1"&gt;9&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;6&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '((3 3 2 1 4) (7 5 9 6))&lt;/span&gt;
(-separate &lt;span class="pl-c1"&gt;'cdr&lt;/span&gt; '((&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;) (&lt;span class="pl-c1"&gt;1&lt;/span&gt;) (&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;) (&lt;span class="pl-c1"&gt;4&lt;/span&gt;))) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(((1 2) (1 2 3)) ((1) (4)))&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--partition-n-list" class="anchor" aria-hidden="true" href="#-partition-n-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-partition &lt;code&gt;(n list)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Return a new list with the items in &lt;code&gt;list&lt;/code&gt; grouped into &lt;code&gt;n-&lt;/code&gt;sized sublists.
If there are not enough items to make the last group &lt;code&gt;n-&lt;/code&gt;sized,
those items are discarded.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-partition &lt;span class="pl-c1"&gt;2&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-c1"&gt;6&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '((1 2) (3 4) (5 6))&lt;/span&gt;
(-partition &lt;span class="pl-c1"&gt;2&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-c1"&gt;6&lt;/span&gt; &lt;span class="pl-c1"&gt;7&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '((1 2) (3 4) (5 6))&lt;/span&gt;
(-partition &lt;span class="pl-c1"&gt;3&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-c1"&gt;6&lt;/span&gt; &lt;span class="pl-c1"&gt;7&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '((1 2 3) (4 5 6))&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--partition-all-n-list" class="anchor" aria-hidden="true" href="#-partition-all-n-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-partition-all &lt;code&gt;(n list)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Return a new list with the items in &lt;code&gt;list&lt;/code&gt; grouped into &lt;code&gt;n-&lt;/code&gt;sized sublists.
The last group may contain less than &lt;code&gt;n&lt;/code&gt; items.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-partition-all &lt;span class="pl-c1"&gt;2&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-c1"&gt;6&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '((1 2) (3 4) (5 6))&lt;/span&gt;
(-partition-all &lt;span class="pl-c1"&gt;2&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-c1"&gt;6&lt;/span&gt; &lt;span class="pl-c1"&gt;7&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '((1 2) (3 4) (5 6) (7))&lt;/span&gt;
(-partition-all &lt;span class="pl-c1"&gt;3&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-c1"&gt;6&lt;/span&gt; &lt;span class="pl-c1"&gt;7&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '((1 2 3) (4 5 6) (7))&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--partition-in-steps-n-step-list" class="anchor" aria-hidden="true" href="#-partition-in-steps-n-step-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-partition-in-steps &lt;code&gt;(n step list)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Return a new list with the items in &lt;code&gt;list&lt;/code&gt; grouped into &lt;code&gt;n-&lt;/code&gt;sized sublists at offsets &lt;code&gt;step&lt;/code&gt; apart.
If there are not enough items to make the last group &lt;code&gt;n-&lt;/code&gt;sized,
those items are discarded.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-partition-in-steps &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '((1 2) (2 3) (3 4))&lt;/span&gt;
(-partition-in-steps &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '((1 2 3))&lt;/span&gt;
(-partition-in-steps &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '((1 2 3) (3 4 5))&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--partition-all-in-steps-n-step-list" class="anchor" aria-hidden="true" href="#-partition-all-in-steps-n-step-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-partition-all-in-steps &lt;code&gt;(n step list)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Return a new list with the items in &lt;code&gt;list&lt;/code&gt; grouped into &lt;code&gt;n-&lt;/code&gt;sized sublists at offsets &lt;code&gt;step&lt;/code&gt; apart.
The last groups may contain less than &lt;code&gt;n&lt;/code&gt; items.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-partition-all-in-steps &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '((1 2) (2 3) (3 4) (4))&lt;/span&gt;
(-partition-all-in-steps &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '((1 2 3) (3 4))&lt;/span&gt;
(-partition-all-in-steps &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '((1 2 3) (3 4 5) (5))&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--partition-by-fn-list" class="anchor" aria-hidden="true" href="#-partition-by-fn-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-partition-by &lt;code&gt;(fn list)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Apply &lt;code&gt;fn&lt;/code&gt; to each item in &lt;code&gt;list&lt;/code&gt;, splitting it each time &lt;code&gt;fn&lt;/code&gt; returns a new value.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-partition-by &lt;span class="pl-c1"&gt;'even?&lt;/span&gt; '()) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '()&lt;/span&gt;
(-partition-by &lt;span class="pl-c1"&gt;'even?&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;6&lt;/span&gt; &lt;span class="pl-c1"&gt;8&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '((1 1) (2 2 2) (3) (4 6 8))&lt;/span&gt;
(--partition-by (&lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt; it &lt;span class="pl-c1"&gt;3&lt;/span&gt;) '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '((1 2) (3 4 3) (2 1))&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--partition-by-header-fn-list" class="anchor" aria-hidden="true" href="#-partition-by-header-fn-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-partition-by-header &lt;code&gt;(fn list)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Apply &lt;code&gt;fn&lt;/code&gt; to the first item in &lt;code&gt;list&lt;/code&gt;. That is the header
value. Apply &lt;code&gt;fn&lt;/code&gt; to each item in &lt;code&gt;list&lt;/code&gt;, splitting it each time &lt;code&gt;fn&lt;/code&gt;
returns the header value, but only after seeing at least one
other value (the body).&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(--partition-by-header (&lt;span class="pl-k"&gt;=&lt;/span&gt; it &lt;span class="pl-c1"&gt;1&lt;/span&gt;) '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '((1 2 3) (1 2) (1 2 3 4))&lt;/span&gt;
(--partition-by-header (&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; it &lt;span class="pl-c1"&gt;0&lt;/span&gt;) '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '((1 2 0) (1 0) (1 2 3 0))&lt;/span&gt;
(-partition-by-header &lt;span class="pl-c1"&gt;'even?&lt;/span&gt; '(&lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-c1"&gt;6&lt;/span&gt; &lt;span class="pl-c1"&gt;6&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '((2 1 1 1) (4 1 3 5) (6 6 1))&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--partition-after-pred-pred-list" class="anchor" aria-hidden="true" href="#-partition-after-pred-pred-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-partition-after-pred &lt;code&gt;(pred list)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Partition directly after each time &lt;code&gt;pred&lt;/code&gt; is true on an element of &lt;code&gt;list&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-partition-after-pred &lt;span class="pl-c1"&gt;#&lt;span class="pl-c1"&gt;'odd?&lt;/span&gt;&lt;/span&gt; '()) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '()&lt;/span&gt;
(-partition-after-pred &lt;span class="pl-c1"&gt;#&lt;span class="pl-c1"&gt;'odd?&lt;/span&gt;&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '((1))&lt;/span&gt;
(-partition-after-pred &lt;span class="pl-c1"&gt;#&lt;span class="pl-c1"&gt;'odd?&lt;/span&gt;&lt;/span&gt; '(&lt;span class="pl-c1"&gt;0&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '((0 1))&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--partition-before-pred-pred-list" class="anchor" aria-hidden="true" href="#-partition-before-pred-pred-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-partition-before-pred &lt;code&gt;(pred list)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Partition directly before each time &lt;code&gt;pred&lt;/code&gt; is true on an element of &lt;code&gt;list&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-partition-before-pred &lt;span class="pl-c1"&gt;#&lt;span class="pl-c1"&gt;'odd?&lt;/span&gt;&lt;/span&gt; '()) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '()&lt;/span&gt;
(-partition-before-pred &lt;span class="pl-c1"&gt;#&lt;span class="pl-c1"&gt;'odd?&lt;/span&gt;&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '((1))&lt;/span&gt;
(-partition-before-pred &lt;span class="pl-c1"&gt;#&lt;span class="pl-c1"&gt;'odd?&lt;/span&gt;&lt;/span&gt; '(&lt;span class="pl-c1"&gt;0&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '((0) (1))&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--partition-before-item-item-list" class="anchor" aria-hidden="true" href="#-partition-before-item-item-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-partition-before-item &lt;code&gt;(item list)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Partition directly before each time &lt;code&gt;item&lt;/code&gt; appears in &lt;code&gt;list&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-partition-before-item &lt;span class="pl-c1"&gt;3&lt;/span&gt; '()) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '()&lt;/span&gt;
(-partition-before-item &lt;span class="pl-c1"&gt;3&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '((1))&lt;/span&gt;
(-partition-before-item &lt;span class="pl-c1"&gt;3&lt;/span&gt; '(&lt;span class="pl-c1"&gt;3&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '((3))&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--partition-after-item-item-list" class="anchor" aria-hidden="true" href="#-partition-after-item-item-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-partition-after-item &lt;code&gt;(item list)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Partition directly after each time &lt;code&gt;item&lt;/code&gt; appears in &lt;code&gt;list&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-partition-after-item &lt;span class="pl-c1"&gt;3&lt;/span&gt; '()) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '()&lt;/span&gt;
(-partition-after-item &lt;span class="pl-c1"&gt;3&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '((1))&lt;/span&gt;
(-partition-after-item &lt;span class="pl-c1"&gt;3&lt;/span&gt; '(&lt;span class="pl-c1"&gt;3&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '((3))&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--group-by-fn-list" class="anchor" aria-hidden="true" href="#-group-by-fn-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-group-by &lt;code&gt;(fn list)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Separate &lt;code&gt;list&lt;/code&gt; into an alist whose keys are &lt;code&gt;fn&lt;/code&gt; applied to the
elements of &lt;code&gt;list&lt;/code&gt;.  Keys are compared by &lt;code&gt;equal&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-group-by &lt;span class="pl-c1"&gt;'even?&lt;/span&gt; '()) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '()&lt;/span&gt;
(-group-by &lt;span class="pl-c1"&gt;'even?&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;6&lt;/span&gt; &lt;span class="pl-c1"&gt;8&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '((nil 1 1 3) (t 2 2 2 4 6 8))&lt;/span&gt;
(--group-by (&lt;span class="pl-k"&gt;car&lt;/span&gt; (&lt;span class="pl-c1"&gt;split-string&lt;/span&gt; it &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)) '(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;a/b&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;c/d&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;a/e&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(("a" "a/b" "a/e") ("c" "c/d"))&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-indexing-1" class="anchor" aria-hidden="true" href="#indexing-1"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Indexing&lt;/h2&gt;
&lt;p&gt;Return indices of elements based on predicates, sort elements by indices etc.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content--elem-index-elem-list" class="anchor" aria-hidden="true" href="#-elem-index-elem-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-elem-index &lt;code&gt;(elem list)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Return the index of the first element in the given &lt;code&gt;list&lt;/code&gt; which
is equal to the query element &lt;code&gt;elem&lt;/code&gt;, or nil if there is no
such element.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-elem-index &lt;span class="pl-c1"&gt;2&lt;/span&gt; '(&lt;span class="pl-c1"&gt;6&lt;/span&gt; &lt;span class="pl-c1"&gt;7&lt;/span&gt; &lt;span class="pl-c1"&gt;8&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; 3&lt;/span&gt;
(-elem-index &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;bar&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; '(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;foo&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;bar&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;baz&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; 1&lt;/span&gt;
(-elem-index '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;) '((&lt;span class="pl-c1"&gt;3&lt;/span&gt;) (&lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-c1"&gt;6&lt;/span&gt;) (&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;) &lt;span class="pl-c1"&gt;nil&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; 2&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--elem-indices-elem-list" class="anchor" aria-hidden="true" href="#-elem-indices-elem-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-elem-indices &lt;code&gt;(elem list)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Return the indices of all elements in &lt;code&gt;list&lt;/code&gt; equal to the query
element &lt;code&gt;elem&lt;/code&gt;, in ascending order.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-elem-indices &lt;span class="pl-c1"&gt;2&lt;/span&gt; '(&lt;span class="pl-c1"&gt;6&lt;/span&gt; &lt;span class="pl-c1"&gt;7&lt;/span&gt; &lt;span class="pl-c1"&gt;8&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(3 6)&lt;/span&gt;
(-elem-indices &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;bar&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; '(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;foo&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;bar&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;baz&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1)&lt;/span&gt;
(-elem-indices '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;) '((&lt;span class="pl-c1"&gt;3&lt;/span&gt;) (&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;) (&lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-c1"&gt;6&lt;/span&gt;) (&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;) &lt;span class="pl-c1"&gt;nil&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1 3)&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--find-index-pred-list" class="anchor" aria-hidden="true" href="#-find-index-pred-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-find-index &lt;code&gt;(pred list)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Take a predicate &lt;code&gt;pred&lt;/code&gt; and a &lt;code&gt;list&lt;/code&gt; and return the index of the
first element in the list satisfying the predicate, or nil if
there is no such element.&lt;/p&gt;
&lt;p&gt;See also &lt;a href="#-first-pred-list"&gt;&lt;code&gt;-first&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-find-index &lt;span class="pl-c1"&gt;'even?&lt;/span&gt; '(&lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;6&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-c1"&gt;8&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; 0&lt;/span&gt;
(--find-index (&lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt; it) '(&lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;6&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-c1"&gt;8&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; 3&lt;/span&gt;
(-find-index (-partial &lt;span class="pl-c1"&gt;'string-lessp&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;baz&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) '(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;bar&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;foo&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;baz&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; 1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--find-last-index-pred-list" class="anchor" aria-hidden="true" href="#-find-last-index-pred-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-find-last-index &lt;code&gt;(pred list)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Take a predicate &lt;code&gt;pred&lt;/code&gt; and a &lt;code&gt;list&lt;/code&gt; and return the index of the
last element in the list satisfying the predicate, or nil if
there is no such element.&lt;/p&gt;
&lt;p&gt;See also &lt;a href="#-last-pred-list"&gt;&lt;code&gt;-last&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-find-last-index &lt;span class="pl-c1"&gt;'even?&lt;/span&gt; '(&lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;6&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-c1"&gt;8&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; 7&lt;/span&gt;
(--find-last-index (&lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt; it) '(&lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;7&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;6&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;8&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; 5&lt;/span&gt;
(-find-last-index (-partial &lt;span class="pl-c1"&gt;'string-lessp&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;baz&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) '(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;q&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;foo&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;baz&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; 1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--find-indices-pred-list" class="anchor" aria-hidden="true" href="#-find-indices-pred-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-find-indices &lt;code&gt;(pred list)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Return the indices of all elements in &lt;code&gt;list&lt;/code&gt; satisfying the
predicate &lt;code&gt;pred&lt;/code&gt;, in ascending order.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-find-indices &lt;span class="pl-c1"&gt;'even?&lt;/span&gt; '(&lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;6&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-c1"&gt;8&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(0 1 3 7)&lt;/span&gt;
(--find-indices (&lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt; it) '(&lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;6&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-c1"&gt;8&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(3 7)&lt;/span&gt;
(-find-indices (-partial &lt;span class="pl-c1"&gt;'string-lessp&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;baz&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) '(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;bar&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;foo&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;baz&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1)&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--grade-up-comparator-list" class="anchor" aria-hidden="true" href="#-grade-up-comparator-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-grade-up &lt;code&gt;(comparator list)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Grade elements of &lt;code&gt;list&lt;/code&gt; using &lt;code&gt;comparator&lt;/code&gt; relation, yielding a
permutation vector such that applying this permutation to &lt;code&gt;list&lt;/code&gt;
sorts it in ascending order.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-grade-up &lt;span class="pl-c1"&gt;'&lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt;&lt;/span&gt; '(&lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1 4 3 0 5 6 2)&lt;/span&gt;
(&lt;span class="pl-k"&gt;let&lt;/span&gt; ((l '(&lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;))) (-select-by-indices (-grade-up &lt;span class="pl-c1"&gt;'&lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt;&lt;/span&gt; l) l)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1 1 2 3 3 3 4)&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--grade-down-comparator-list" class="anchor" aria-hidden="true" href="#-grade-down-comparator-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-grade-down &lt;code&gt;(comparator list)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Grade elements of &lt;code&gt;list&lt;/code&gt; using &lt;code&gt;comparator&lt;/code&gt; relation, yielding a
permutation vector such that applying this permutation to &lt;code&gt;list&lt;/code&gt;
sorts it in descending order.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-grade-down &lt;span class="pl-c1"&gt;'&lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt;&lt;/span&gt; '(&lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(2 0 5 6 3 1 4)&lt;/span&gt;
(&lt;span class="pl-k"&gt;let&lt;/span&gt; ((l '(&lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;))) (-select-by-indices (-grade-down &lt;span class="pl-c1"&gt;'&lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt;&lt;/span&gt; l) l)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(4 3 3 3 2 1 1)&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-set-operations-1" class="anchor" aria-hidden="true" href="#set-operations-1"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Set operations&lt;/h2&gt;
&lt;p&gt;Operations pretending lists are sets.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content--union-list-list2" class="anchor" aria-hidden="true" href="#-union-list-list2"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-union &lt;code&gt;(list list2)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Return a new list containing the elements of &lt;code&gt;list&lt;/code&gt; and elements of &lt;code&gt;list2&lt;/code&gt; that are not in &lt;code&gt;list&lt;/code&gt;.
The test for equality is done with &lt;code&gt;equal&lt;/code&gt;,
or with &lt;code&gt;-compare-fn&lt;/code&gt; if that's non-nil.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-union '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;) '(&lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1 2 3 4 5)&lt;/span&gt;
(-union '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;) '()) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1 2 3 4)&lt;/span&gt;
(-union '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;) '(&lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1 1 2 2 3)&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--difference-list-list2" class="anchor" aria-hidden="true" href="#-difference-list-list2"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-difference &lt;code&gt;(list list2)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Return a new list with only the members of &lt;code&gt;list&lt;/code&gt; that are not in &lt;code&gt;list2&lt;/code&gt;.
The test for equality is done with &lt;code&gt;equal&lt;/code&gt;,
or with &lt;code&gt;-compare-fn&lt;/code&gt; if that's non-nil.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-difference '() '()) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '()&lt;/span&gt;
(-difference '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;) '(&lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-c1"&gt;6&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1 2 3)&lt;/span&gt;
(-difference '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;) '(&lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-c1"&gt;6&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1 2)&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--intersection-list-list2" class="anchor" aria-hidden="true" href="#-intersection-list-list2"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-intersection &lt;code&gt;(list list2)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Return a new list containing only the elements that are members of both &lt;code&gt;list&lt;/code&gt; and &lt;code&gt;list2&lt;/code&gt;.
The test for equality is done with &lt;code&gt;equal&lt;/code&gt;,
or with &lt;code&gt;-compare-fn&lt;/code&gt; if that's non-nil.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-intersection '() '()) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '()&lt;/span&gt;
(-intersection '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;) '(&lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-c1"&gt;6&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '()&lt;/span&gt;
(-intersection '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;) '(&lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-c1"&gt;6&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(3 4)&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--powerset-list" class="anchor" aria-hidden="true" href="#-powerset-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-powerset &lt;code&gt;(list)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Return the power set of &lt;code&gt;list&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-powerset '()) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(nil)&lt;/span&gt;
(-powerset '(x y z)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '((x y z) (x y) (x z) (x) (y z) (y) (z) nil)&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--permutations-list" class="anchor" aria-hidden="true" href="#-permutations-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-permutations &lt;code&gt;(list)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Return the permutations of &lt;code&gt;list&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-permutations '()) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(nil)&lt;/span&gt;
(-permutations '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '((1 2) (2 1))&lt;/span&gt;
(-permutations '(a b c)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '((a b c) (a c b) (b a c) (b c a) (c a b) (c b a))&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--distinct-list" class="anchor" aria-hidden="true" href="#-distinct-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-distinct &lt;code&gt;(list)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Return a new list with all duplicates removed.
The test for equality is done with &lt;code&gt;equal&lt;/code&gt;,
or with &lt;code&gt;-compare-fn&lt;/code&gt; if that's non-nil.&lt;/p&gt;
&lt;p&gt;Alias: &lt;code&gt;-uniq&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-distinct '()) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '()&lt;/span&gt;
(-distinct '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1 2 4)&lt;/span&gt;
(-distinct '(&lt;span class="pl-c1"&gt;t&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(t)&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-other-list-operations-1" class="anchor" aria-hidden="true" href="#other-list-operations-1"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Other list operations&lt;/h2&gt;
&lt;p&gt;Other list functions not fit to be classified elsewhere.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content--rotate-n-list" class="anchor" aria-hidden="true" href="#-rotate-n-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-rotate &lt;code&gt;(n list)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Rotate &lt;code&gt;list&lt;/code&gt; &lt;code&gt;n&lt;/code&gt; places to the right.  With &lt;code&gt;n&lt;/code&gt; negative, rotate to the left.
The time complexity is &lt;code&gt;o&lt;/code&gt;(n).&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-rotate &lt;span class="pl-c1"&gt;3&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-c1"&gt;6&lt;/span&gt; &lt;span class="pl-c1"&gt;7&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(5 6 7 1 2 3 4)&lt;/span&gt;
(-rotate &lt;span class="pl-c1"&gt;-3&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-c1"&gt;6&lt;/span&gt; &lt;span class="pl-c1"&gt;7&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(4 5 6 7 1 2 3)&lt;/span&gt;
(-rotate &lt;span class="pl-c1"&gt;16&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-c1"&gt;6&lt;/span&gt; &lt;span class="pl-c1"&gt;7&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(6 7 1 2 3 4 5)&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--repeat-n-x" class="anchor" aria-hidden="true" href="#-repeat-n-x"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-repeat &lt;code&gt;(n x)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Return a list with &lt;code&gt;x&lt;/code&gt; repeated &lt;code&gt;n&lt;/code&gt; times.
Return nil if &lt;code&gt;n&lt;/code&gt; is less than 1.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-repeat &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;:a&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(:a :a :a)&lt;/span&gt;
(-repeat &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;:a&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(:a)&lt;/span&gt;
(-repeat &lt;span class="pl-c1"&gt;0&lt;/span&gt; &lt;span class="pl-c1"&gt;:a&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; nil&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--cons-rest-args" class="anchor" aria-hidden="true" href="#-cons-rest-args"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-cons* &lt;code&gt;(&amp;amp;rest args)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Make a new list from the elements of &lt;code&gt;args&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The last 2 members of &lt;code&gt;args&lt;/code&gt; are used as the final cons of the
result so if the final member of &lt;code&gt;args&lt;/code&gt; is not a list the result is
a dotted list.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-cons* &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1 . 2)&lt;/span&gt;
(-cons* &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1 2 . 3)&lt;/span&gt;
(-cons* &lt;span class="pl-c1"&gt;1&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; 1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--snoc-list-elem-rest-elements" class="anchor" aria-hidden="true" href="#-snoc-list-elem-rest-elements"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-snoc &lt;code&gt;(list elem &amp;amp;rest elements)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Append &lt;code&gt;elem&lt;/code&gt; to the end of the list.&lt;/p&gt;
&lt;p&gt;This is like &lt;code&gt;cons&lt;/code&gt;, but operates on the end of list.&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;elements&lt;/code&gt; is non nil, append these to the list as well.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-snoc '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;) &lt;span class="pl-c1"&gt;4&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1 2 3 4)&lt;/span&gt;
(-snoc '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;) &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-c1"&gt;6&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1 2 3 4 5 6)&lt;/span&gt;
(-snoc '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;) '(&lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-c1"&gt;6&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1 2 3 (4 5 6))&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--interpose-sep-list" class="anchor" aria-hidden="true" href="#-interpose-sep-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-interpose &lt;code&gt;(sep list)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Return a new list of all elements in &lt;code&gt;list&lt;/code&gt; separated by &lt;code&gt;sep&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-interpose &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;-&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; '()) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '()&lt;/span&gt;
(-interpose &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;-&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; '(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;a&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '("a")&lt;/span&gt;
(-interpose &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;-&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; '(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;a&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;b&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;c&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '("a" "-" "b" "-" "c")&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--interleave-rest-lists" class="anchor" aria-hidden="true" href="#-interleave-rest-lists"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-interleave &lt;code&gt;(&amp;amp;rest lists)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Return a new list of the first item in each list, then the second etc.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-interleave '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;) '(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;a&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;b&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1 "a" 2 "b")&lt;/span&gt;
(-interleave '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;) '(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;a&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;b&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) '(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;A&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;B&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1 "a" "A" 2 "b" "B")&lt;/span&gt;
(-interleave '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;) '(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;a&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;b&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1 "a" 2 "b")&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--zip-with-fn-list1-list2" class="anchor" aria-hidden="true" href="#-zip-with-fn-list1-list2"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-zip-with &lt;code&gt;(fn list1 list2)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Zip the two lists &lt;code&gt;list1&lt;/code&gt; and &lt;code&gt;list2&lt;/code&gt; using a function &lt;code&gt;fn&lt;/code&gt;.  This
function is applied pairwise taking as first argument element of
&lt;code&gt;list1&lt;/code&gt; and as second argument element of &lt;code&gt;list2&lt;/code&gt; at corresponding
position.&lt;/p&gt;
&lt;p&gt;The anaphoric form &lt;code&gt;--zip-with&lt;/code&gt; binds the elements from &lt;code&gt;list1&lt;/code&gt; as symbol &lt;code&gt;it&lt;/code&gt;,
and the elements from &lt;code&gt;list2&lt;/code&gt; as symbol &lt;code&gt;other&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-zip-with &lt;span class="pl-c1"&gt;'+&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;) '(&lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-c1"&gt;6&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(5 7 9)&lt;/span&gt;
(-zip-with &lt;span class="pl-c1"&gt;'cons&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;) '(&lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-c1"&gt;6&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '((1 . 4) (2 . 5) (3 . 6))&lt;/span&gt;
(--zip-with (&lt;span class="pl-c1"&gt;concat&lt;/span&gt; it &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt; and &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; other) '(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Batman&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Jekyll&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) '(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Robin&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Hyde&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '("Batman and Robin" "Jekyll and Hyde")&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--zip-rest-lists" class="anchor" aria-hidden="true" href="#-zip-rest-lists"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-zip &lt;code&gt;(&amp;amp;rest lists)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Zip &lt;code&gt;lists&lt;/code&gt; together.  Group the head of each list, followed by the
second elements of each list, and so on. The lengths of the returned
groupings are equal to the length of the shortest input list.&lt;/p&gt;
&lt;p&gt;If two lists are provided as arguments, return the groupings as a list
of cons cells. Otherwise, return the groupings as a list of lists.&lt;/p&gt;
&lt;p&gt;Please note! This distinction is being removed in an upcoming 3.0
release of Dash. If you rely on this behavior, use -zip-pair instead.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-zip '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;) '(&lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-c1"&gt;6&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '((1 . 4) (2 . 5) (3 . 6))&lt;/span&gt;
(-zip '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;) '(&lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-c1"&gt;6&lt;/span&gt; &lt;span class="pl-c1"&gt;7&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '((1 . 4) (2 . 5) (3 . 6))&lt;/span&gt;
(-zip '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;) '(&lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-c1"&gt;6&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '((1 . 4) (2 . 5) (3 . 6))&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--zip-fill-fill-value-rest-lists" class="anchor" aria-hidden="true" href="#-zip-fill-fill-value-rest-lists"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-zip-fill &lt;code&gt;(fill-value &amp;amp;rest lists)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Zip &lt;code&gt;lists&lt;/code&gt;, with &lt;code&gt;fill-value&lt;/code&gt; padded onto the shorter lists. The
lengths of the returned groupings are equal to the length of the
longest input list.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-zip-fill &lt;span class="pl-c1"&gt;0&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt;) '(&lt;span class="pl-c1"&gt;6&lt;/span&gt; &lt;span class="pl-c1"&gt;7&lt;/span&gt; &lt;span class="pl-c1"&gt;8&lt;/span&gt; &lt;span class="pl-c1"&gt;9&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '((1 . 6) (2 . 7) (3 . 8) (4 . 9) (5 . 0))&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--unzip-lists" class="anchor" aria-hidden="true" href="#-unzip-lists"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-unzip &lt;code&gt;(lists)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Unzip &lt;code&gt;lists&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This works just like &lt;a href="#-zip-rest-lists"&gt;&lt;code&gt;-zip&lt;/code&gt;&lt;/a&gt; but takes a list of lists instead of
a variable number of arguments, such that&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(-unzip (-zip `l1` `l2` `l3` ...))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;is identity (given that the lists are the same length).&lt;/p&gt;
&lt;p&gt;See also: &lt;a href="#-zip-rest-lists"&gt;&lt;code&gt;-zip&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-unzip (-zip '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;) '(a b c) '(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;e&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;f&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;g&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '((1 2 3) (a b c) ("e" "f" "g"))&lt;/span&gt;
(-unzip '((&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;) (&lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;) (&lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-c1"&gt;6&lt;/span&gt;) (&lt;span class="pl-c1"&gt;7&lt;/span&gt; &lt;span class="pl-c1"&gt;8&lt;/span&gt;) (&lt;span class="pl-c1"&gt;9&lt;/span&gt; &lt;span class="pl-c1"&gt;10&lt;/span&gt;))) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '((1 3 5 7 9) (2 4 6 8 10))&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--cycle-list" class="anchor" aria-hidden="true" href="#-cycle-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-cycle &lt;code&gt;(list)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Return an infinite copy of &lt;code&gt;list&lt;/code&gt; that will cycle through the
elements and repeat from the beginning.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-take &lt;span class="pl-c1"&gt;5&lt;/span&gt; (-cycle '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;))) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1 2 3 1 2)&lt;/span&gt;
(-take &lt;span class="pl-c1"&gt;7&lt;/span&gt; (-cycle '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;and&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;))) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1 "and" 3 1 "and" 3 1)&lt;/span&gt;
(-zip (-cycle '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;)) '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '((1 . 1) (2 . 2))&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--pad-fill-value-rest-lists" class="anchor" aria-hidden="true" href="#-pad-fill-value-rest-lists"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-pad &lt;code&gt;(fill-value &amp;amp;rest lists)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Appends &lt;code&gt;fill-value&lt;/code&gt; to the end of each list in &lt;code&gt;lists&lt;/code&gt; such that they
will all have the same length.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-pad &lt;span class="pl-c1"&gt;0&lt;/span&gt; '()) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(nil)&lt;/span&gt;
(-pad &lt;span class="pl-c1"&gt;0&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '((1))&lt;/span&gt;
(-pad &lt;span class="pl-c1"&gt;0&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;) '(&lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '((1 2 3) (4 5 0))&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--table-fn-rest-lists" class="anchor" aria-hidden="true" href="#-table-fn-rest-lists"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-table &lt;code&gt;(fn &amp;amp;rest lists)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Compute outer product of &lt;code&gt;lists&lt;/code&gt; using function &lt;code&gt;fn&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The function &lt;code&gt;fn&lt;/code&gt; should have the same arity as the number of
supplied lists.&lt;/p&gt;
&lt;p&gt;The outer product is computed by applying fn to all possible
combinations created by taking one element from each list in
order.  The dimension of the result is (length lists).&lt;/p&gt;
&lt;p&gt;See also: &lt;a href="#-table-flat-fn-rest-lists"&gt;&lt;code&gt;-table-flat&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-table &lt;span class="pl-c1"&gt;'*&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;) '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '((1 2 3) (2 4 6) (3 6 9))&lt;/span&gt;
(-table (&lt;span class="pl-k"&gt;lambda&lt;/span&gt; (&lt;span class="pl-v"&gt;a&lt;/span&gt; &lt;span class="pl-v"&gt;b&lt;/span&gt;) (-sum (-zip-with &lt;span class="pl-c1"&gt;'*&lt;/span&gt; a b))) '((&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;) (&lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;)) '((&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;) (&lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;))) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '((7 15) (10 22))&lt;/span&gt;
(&lt;span class="pl-k"&gt;apply&lt;/span&gt; &lt;span class="pl-c1"&gt;'-table&lt;/span&gt; &lt;span class="pl-c1"&gt;'list&lt;/span&gt; (-repeat &lt;span class="pl-c1"&gt;3&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;))) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '((((1 1 1) (2 1 1)) ((1 2 1) (2 2 1))) (((1 1 2) (2 1 2)) ((1 2 2) (2 2 2))))&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--table-flat-fn-rest-lists" class="anchor" aria-hidden="true" href="#-table-flat-fn-rest-lists"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-table-flat &lt;code&gt;(fn &amp;amp;rest lists)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Compute flat outer product of &lt;code&gt;lists&lt;/code&gt; using function &lt;code&gt;fn&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The function &lt;code&gt;fn&lt;/code&gt; should have the same arity as the number of
supplied lists.&lt;/p&gt;
&lt;p&gt;The outer product is computed by applying fn to all possible
combinations created by taking one element from each list in
order.  The results are flattened, ignoring the tensor structure
of the result.  This is equivalent to calling:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(-flatten-n (1- (length lists)) (apply '-table fn lists))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;but the implementation here is much more efficient.&lt;/p&gt;
&lt;p&gt;See also: &lt;a href="#-flatten-n-num-list"&gt;&lt;code&gt;-flatten-n&lt;/code&gt;&lt;/a&gt;, &lt;a href="#-table-fn-rest-lists"&gt;&lt;code&gt;-table&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-table-flat &lt;span class="pl-c1"&gt;'list&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;) '(a b c)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '((1 a) (2 a) (3 a) (1 b) (2 b) (3 b) (1 c) (2 c) (3 c))&lt;/span&gt;
(-table-flat &lt;span class="pl-c1"&gt;'*&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;) '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1 2 3 2 4 6 3 6 9)&lt;/span&gt;
(&lt;span class="pl-k"&gt;apply&lt;/span&gt; &lt;span class="pl-c1"&gt;'-table-flat&lt;/span&gt; &lt;span class="pl-c1"&gt;'list&lt;/span&gt; (-repeat &lt;span class="pl-c1"&gt;3&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;))) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '((1 1 1) (2 1 1) (1 2 1) (2 2 1) (1 1 2) (2 1 2) (1 2 2) (2 2 2))&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--first-pred-list" class="anchor" aria-hidden="true" href="#-first-pred-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-first &lt;code&gt;(pred list)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Return the first x in &lt;code&gt;list&lt;/code&gt; where (&lt;code&gt;pred&lt;/code&gt; x) is non-nil, else nil.&lt;/p&gt;
&lt;p&gt;To get the first item in the list no questions asked, use &lt;code&gt;car&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Alias: &lt;code&gt;-find&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-first &lt;span class="pl-c1"&gt;'even?&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; 2&lt;/span&gt;
(-first &lt;span class="pl-c1"&gt;'even?&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; nil&lt;/span&gt;
(-first &lt;span class="pl-c1"&gt;'null&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; nil&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--some-pred-list" class="anchor" aria-hidden="true" href="#-some-pred-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-some &lt;code&gt;(pred list)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Return (&lt;code&gt;pred&lt;/code&gt; x) for the first &lt;code&gt;list&lt;/code&gt; item where (&lt;code&gt;pred&lt;/code&gt; x) is non-nil, else nil.&lt;/p&gt;
&lt;p&gt;Alias: &lt;code&gt;-any&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-some &lt;span class="pl-c1"&gt;'even?&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; t&lt;/span&gt;
(-some &lt;span class="pl-c1"&gt;'null&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; nil&lt;/span&gt;
(-some &lt;span class="pl-c1"&gt;'null&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; t&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--last-pred-list" class="anchor" aria-hidden="true" href="#-last-pred-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-last &lt;code&gt;(pred list)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Return the last x in &lt;code&gt;list&lt;/code&gt; where (&lt;code&gt;pred&lt;/code&gt; x) is non-nil, else nil.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-last &lt;span class="pl-c1"&gt;'even?&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-c1"&gt;6&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; 6&lt;/span&gt;
(-last &lt;span class="pl-c1"&gt;'even?&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;7&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-c1"&gt;9&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; nil&lt;/span&gt;
(--last (&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; (&lt;span class="pl-k"&gt;length&lt;/span&gt; it) &lt;span class="pl-c1"&gt;3&lt;/span&gt;) '(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;a&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;looong&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;word&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;and&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;short&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;one&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "short"&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--first-item-list" class="anchor" aria-hidden="true" href="#-first-item-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-first-item &lt;code&gt;(list)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Return the first item of &lt;code&gt;list&lt;/code&gt;, or nil on an empty list.&lt;/p&gt;
&lt;p&gt;See also: &lt;a href="#-second-item-arg1"&gt;&lt;code&gt;-second-item&lt;/code&gt;&lt;/a&gt;, &lt;a href="#-last-item-list"&gt;&lt;code&gt;-last-item&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;(fn &lt;code&gt;list&lt;/code&gt;)&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-first-item '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; 1&lt;/span&gt;
(-first-item &lt;span class="pl-c1"&gt;nil&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; nil&lt;/span&gt;
(&lt;span class="pl-k"&gt;let&lt;/span&gt; ((&lt;span class="pl-k"&gt;list&lt;/span&gt; (&lt;span class="pl-k"&gt;list&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;))) (&lt;span class="pl-k"&gt;setf&lt;/span&gt; (-first-item &lt;span class="pl-k"&gt;list&lt;/span&gt;) &lt;span class="pl-c1"&gt;5&lt;/span&gt;) &lt;span class="pl-k"&gt;list&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(5 2 3)&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--second-item-arg1" class="anchor" aria-hidden="true" href="#-second-item-arg1"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-second-item &lt;code&gt;(arg1)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Return the second item of &lt;code&gt;list&lt;/code&gt;, or nil if &lt;code&gt;list&lt;/code&gt; is too short.&lt;/p&gt;
&lt;p&gt;See also: &lt;a href="#-third-item-arg1"&gt;&lt;code&gt;-third-item&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;(fn &lt;code&gt;list&lt;/code&gt;)&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-second-item '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; 2&lt;/span&gt;
(-second-item &lt;span class="pl-c1"&gt;nil&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; nil&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--third-item-arg1" class="anchor" aria-hidden="true" href="#-third-item-arg1"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-third-item &lt;code&gt;(arg1)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Return the third item of &lt;code&gt;list&lt;/code&gt;, or nil if &lt;code&gt;list&lt;/code&gt; is too short.&lt;/p&gt;
&lt;p&gt;See also: &lt;a href="#-fourth-item-list"&gt;&lt;code&gt;-fourth-item&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;(fn &lt;code&gt;list&lt;/code&gt;)&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-third-item '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; 3&lt;/span&gt;
(-third-item &lt;span class="pl-c1"&gt;nil&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; nil&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--fourth-item-list" class="anchor" aria-hidden="true" href="#-fourth-item-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-fourth-item &lt;code&gt;(list)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Return the fourth item of &lt;code&gt;list&lt;/code&gt;, or nil if &lt;code&gt;list&lt;/code&gt; is too short.&lt;/p&gt;
&lt;p&gt;See also: &lt;a href="#-fifth-item-list"&gt;&lt;code&gt;-fifth-item&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-fourth-item '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; 4&lt;/span&gt;
(-fourth-item &lt;span class="pl-c1"&gt;nil&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; nil&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--fifth-item-list" class="anchor" aria-hidden="true" href="#-fifth-item-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-fifth-item &lt;code&gt;(list)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Return the fifth item of &lt;code&gt;list&lt;/code&gt;, or nil if &lt;code&gt;list&lt;/code&gt; is too short.&lt;/p&gt;
&lt;p&gt;See also: &lt;a href="#-last-item-list"&gt;&lt;code&gt;-last-item&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-fifth-item '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; 5&lt;/span&gt;
(-fifth-item &lt;span class="pl-c1"&gt;nil&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; nil&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--last-item-list" class="anchor" aria-hidden="true" href="#-last-item-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-last-item &lt;code&gt;(list)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Return the last item of &lt;code&gt;list&lt;/code&gt;, or nil on an empty list.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-last-item '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; 3&lt;/span&gt;
(-last-item &lt;span class="pl-c1"&gt;nil&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; nil&lt;/span&gt;
(&lt;span class="pl-k"&gt;let&lt;/span&gt; ((&lt;span class="pl-k"&gt;list&lt;/span&gt; (&lt;span class="pl-k"&gt;list&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;))) (&lt;span class="pl-k"&gt;setf&lt;/span&gt; (-last-item &lt;span class="pl-k"&gt;list&lt;/span&gt;) &lt;span class="pl-c1"&gt;5&lt;/span&gt;) &lt;span class="pl-k"&gt;list&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1 2 5)&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--butlast-list" class="anchor" aria-hidden="true" href="#-butlast-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-butlast &lt;code&gt;(list)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Return a list of all items in list except for the last.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-butlast '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1 2)&lt;/span&gt;
(-butlast '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1)&lt;/span&gt;
(-butlast '(&lt;span class="pl-c1"&gt;1&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; nil&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--sort-comparator-list" class="anchor" aria-hidden="true" href="#-sort-comparator-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-sort &lt;code&gt;(comparator list)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Sort &lt;code&gt;list&lt;/code&gt;, stably, comparing elements using &lt;code&gt;comparator&lt;/code&gt;.
Return the sorted list.  &lt;code&gt;list&lt;/code&gt; is &lt;code&gt;not&lt;/code&gt; modified by side effects.
&lt;code&gt;comparator&lt;/code&gt; is called with two elements of &lt;code&gt;list&lt;/code&gt;, and should return non-nil
if the first element should sort before the second.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-sort &lt;span class="pl-c1"&gt;'&lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt;&lt;/span&gt; '(&lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1 2 3)&lt;/span&gt;
(-sort &lt;span class="pl-c1"&gt;'&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; '(&lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(3 2 1)&lt;/span&gt;
(--sort (&lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt; it other) '(&lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1 2 3)&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--list-rest-args" class="anchor" aria-hidden="true" href="#-list-rest-args"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-list &lt;code&gt;(&amp;amp;rest args)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Return a list with &lt;code&gt;args&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If first item of &lt;code&gt;args&lt;/code&gt; is already a list, simply return &lt;code&gt;args&lt;/code&gt;.  If
not, return a list with &lt;code&gt;args&lt;/code&gt; as elements.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-list &lt;span class="pl-c1"&gt;1&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1)&lt;/span&gt;
(-list &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1 2 3)&lt;/span&gt;
(-list '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1 2 3)&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--fix-fn-list" class="anchor" aria-hidden="true" href="#-fix-fn-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-fix &lt;code&gt;(fn list)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Compute the (least) fixpoint of &lt;code&gt;fn&lt;/code&gt; with initial input &lt;code&gt;list&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;fn&lt;/code&gt; is called at least once, results are compared with &lt;code&gt;equal&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-fix (&lt;span class="pl-k"&gt;lambda&lt;/span&gt; (&lt;span class="pl-v"&gt;l&lt;/span&gt;) (-non-nil (--mapcat (-split-at (&lt;span class="pl-k"&gt;/&lt;/span&gt; (&lt;span class="pl-k"&gt;length&lt;/span&gt; it) &lt;span class="pl-c1"&gt;2&lt;/span&gt;) it) l))) '((&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-c1"&gt;6&lt;/span&gt;))) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '((1) (2) (3) (4) (5) (6))&lt;/span&gt;
(&lt;span class="pl-k"&gt;let&lt;/span&gt; ((data '((&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;starwars&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;scifi&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;jedi&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;starwars&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;warrior&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)))) (--fix (-uniq (--mapcat (&lt;span class="pl-k"&gt;cons&lt;/span&gt; it (&lt;span class="pl-k"&gt;cdr&lt;/span&gt; (&lt;span class="pl-k"&gt;assoc&lt;/span&gt; it data))) it)) '(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;jedi&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;book&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '("jedi" "starwars" "warrior" "scifi" "book")&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-tree-operations-1" class="anchor" aria-hidden="true" href="#tree-operations-1"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tree operations&lt;/h2&gt;
&lt;p&gt;Functions pretending lists are trees.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content--tree-seq-branch-children-tree" class="anchor" aria-hidden="true" href="#-tree-seq-branch-children-tree"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-tree-seq &lt;code&gt;(branch children tree)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Return a sequence of the nodes in &lt;code&gt;tree&lt;/code&gt;, in depth-first search order.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;branch&lt;/code&gt; is a predicate of one argument that returns non-nil if the
passed argument is a branch, that is, a node that can have children.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;children&lt;/code&gt; is a function of one argument that returns the children
of the passed branch node.&lt;/p&gt;
&lt;p&gt;Non-branch nodes are simply copied.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-tree-seq &lt;span class="pl-c1"&gt;'listp&lt;/span&gt; &lt;span class="pl-c1"&gt;'identity&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; (&lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;) &lt;span class="pl-c1"&gt;4&lt;/span&gt; (&lt;span class="pl-c1"&gt;5&lt;/span&gt; (&lt;span class="pl-c1"&gt;6&lt;/span&gt; &lt;span class="pl-c1"&gt;7&lt;/span&gt;)))) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '((1 (2 3) 4 (5 (6 7))) 1 (2 3) 2 3 4 (5 (6 7)) 5 (6 7) 6 7)&lt;/span&gt;
(-tree-seq &lt;span class="pl-c1"&gt;'listp&lt;/span&gt; &lt;span class="pl-c1"&gt;'reverse&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; (&lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;) &lt;span class="pl-c1"&gt;4&lt;/span&gt; (&lt;span class="pl-c1"&gt;5&lt;/span&gt; (&lt;span class="pl-c1"&gt;6&lt;/span&gt; &lt;span class="pl-c1"&gt;7&lt;/span&gt;)))) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '((1 (2 3) 4 (5 (6 7))) (5 (6 7)) (6 7) 7 6 5 4 (2 3) 3 2 1)&lt;/span&gt;
(--tree-seq (&lt;span class="pl-c1"&gt;vectorp&lt;/span&gt; it) (&lt;span class="pl-k"&gt;append&lt;/span&gt; it &lt;span class="pl-c1"&gt;nil&lt;/span&gt;) [&lt;span class="pl-c1"&gt;1&lt;/span&gt; [&lt;span class="pl-c1"&gt;2&lt;/span&gt; 3] &lt;span class="pl-c1"&gt;4&lt;/span&gt; [&lt;span class="pl-c1"&gt;5&lt;/span&gt; [&lt;span class="pl-c1"&gt;6&lt;/span&gt; 7]]]) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '([1 [2 3] 4 [5 [6 7]]] 1 [2 3] 2 3 4 [5 [6 7]] 5 [6 7] 6 7)&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--tree-map-fn-tree" class="anchor" aria-hidden="true" href="#-tree-map-fn-tree"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-tree-map &lt;code&gt;(fn tree)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Apply &lt;code&gt;fn&lt;/code&gt; to each element of &lt;code&gt;tree&lt;/code&gt; while preserving the tree structure.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-tree-map &lt;span class="pl-c1"&gt;'1+&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; (&lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;) (&lt;span class="pl-c1"&gt;4&lt;/span&gt; (&lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-c1"&gt;6&lt;/span&gt;) &lt;span class="pl-c1"&gt;7&lt;/span&gt;))) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(2 (3 4) (5 (6 7) 8))&lt;/span&gt;
(-tree-map '(&lt;span class="pl-c1"&gt;lambda&lt;/span&gt; (x) (&lt;span class="pl-k"&gt;cons&lt;/span&gt; x (&lt;span class="pl-c1"&gt;expt&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; x))) '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; (&lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;) &lt;span class="pl-c1"&gt;4&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '((1 . 2) ((2 . 4) (3 . 8)) (4 . 16))&lt;/span&gt;
(--tree-map (&lt;span class="pl-k"&gt;length&lt;/span&gt; it) '(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&amp;lt;body&amp;gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&amp;lt;p&amp;gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;text&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&amp;lt;/p&amp;gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&amp;lt;/body&amp;gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(6 (3 4 4) 7)&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--tree-map-nodes-pred-fun-tree" class="anchor" aria-hidden="true" href="#-tree-map-nodes-pred-fun-tree"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-tree-map-nodes &lt;code&gt;(pred fun tree)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Call &lt;code&gt;fun&lt;/code&gt; on each node of &lt;code&gt;tree&lt;/code&gt; that satisfies &lt;code&gt;pred&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;pred&lt;/code&gt; returns nil, continue descending down this node.  If &lt;code&gt;pred&lt;/code&gt;
returns non-nil, apply &lt;code&gt;fun&lt;/code&gt; to this node and do not descend
further.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-tree-map-nodes &lt;span class="pl-c1"&gt;'vectorp&lt;/span&gt; (&lt;span class="pl-k"&gt;lambda&lt;/span&gt; (&lt;span class="pl-v"&gt;x&lt;/span&gt;) (-sum (&lt;span class="pl-k"&gt;append&lt;/span&gt; x &lt;span class="pl-c1"&gt;nil&lt;/span&gt;))) '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; [&lt;span class="pl-c1"&gt;2&lt;/span&gt; 3] &lt;span class="pl-c1"&gt;4&lt;/span&gt; (&lt;span class="pl-c1"&gt;5&lt;/span&gt; [&lt;span class="pl-c1"&gt;6&lt;/span&gt; 7] &lt;span class="pl-c1"&gt;8&lt;/span&gt;))) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1 5 4 (5 13 8))&lt;/span&gt;
(-tree-map-nodes &lt;span class="pl-c1"&gt;'keywordp&lt;/span&gt; (&lt;span class="pl-k"&gt;lambda&lt;/span&gt; (&lt;span class="pl-v"&gt;x&lt;/span&gt;) (&lt;span class="pl-c1"&gt;symbol-name&lt;/span&gt; x)) '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;:foo&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; ((&lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-c1"&gt;6&lt;/span&gt; &lt;span class="pl-c1"&gt;:bar&lt;/span&gt;) &lt;span class="pl-c1"&gt;:baz&lt;/span&gt; &lt;span class="pl-c1"&gt;8&lt;/span&gt;))) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1 ":foo" 4 ((5 6 ":bar") ":baz" 8))&lt;/span&gt;
(--tree-map-nodes (&lt;span class="pl-k"&gt;eq&lt;/span&gt; (&lt;span class="pl-k"&gt;car-safe&lt;/span&gt; it) &lt;span class="pl-c1"&gt;'add-mode&lt;/span&gt;) (-concat it (&lt;span class="pl-k"&gt;list&lt;/span&gt; &lt;span class="pl-c1"&gt;:mode&lt;/span&gt; &lt;span class="pl-c1"&gt;'emacs-lisp-mode&lt;/span&gt;)) '(with-mode emacs-lisp-mode (foo bar) (add-mode a b) (baz (add-mode c d)))) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(with-mode emacs-lisp-mode (foo bar) (add-mode a b :mode emacs-lisp-mode) (baz (add-mode c d :mode emacs-lisp-mode)))&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--tree-reduce-fn-tree" class="anchor" aria-hidden="true" href="#-tree-reduce-fn-tree"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-tree-reduce &lt;code&gt;(fn tree)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Use &lt;code&gt;fn&lt;/code&gt; to reduce elements of list &lt;code&gt;tree&lt;/code&gt;.
If elements of &lt;code&gt;tree&lt;/code&gt; are lists themselves, apply the reduction recursively.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;fn&lt;/code&gt; is first applied to first element of the list and second
element, then on this result and third element from the list etc.&lt;/p&gt;
&lt;p&gt;See &lt;a href="#-reduce-r-fn-list"&gt;&lt;code&gt;-reduce-r&lt;/code&gt;&lt;/a&gt; for how exactly are lists of zero or one element handled.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-tree-reduce &lt;span class="pl-c1"&gt;'+&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; (&lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;) (&lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt;))) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; 15&lt;/span&gt;
(-tree-reduce &lt;span class="pl-c1"&gt;'concat&lt;/span&gt; '(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;strings&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt; on&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt; various&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) ((&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt; levels&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)))) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "strings on various levels"&lt;/span&gt;
(--tree-reduce (&lt;span class="pl-k"&gt;cond&lt;/span&gt; ((&lt;span class="pl-c1"&gt;stringp&lt;/span&gt; it) (&lt;span class="pl-c1"&gt;concat&lt;/span&gt; it &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt; &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; acc)) (&lt;span class="pl-c1"&gt;t&lt;/span&gt; (&lt;span class="pl-k"&gt;let&lt;/span&gt; ((sn (&lt;span class="pl-c1"&gt;symbol-name&lt;/span&gt; it))) (&lt;span class="pl-c1"&gt;concat&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&amp;lt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; sn &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&amp;gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; acc &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&amp;lt;/&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; sn &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&amp;gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)))) '(body (p &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;some words&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) (div &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;more&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; (b &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;bold&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;words&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "&amp;lt;body&amp;gt;&amp;lt;p&amp;gt;some words&amp;lt;/p&amp;gt; &amp;lt;div&amp;gt;more &amp;lt;b&amp;gt;bold&amp;lt;/b&amp;gt; words&amp;lt;/div&amp;gt;&amp;lt;/body&amp;gt;"&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--tree-reduce-from-fn-init-value-tree" class="anchor" aria-hidden="true" href="#-tree-reduce-from-fn-init-value-tree"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-tree-reduce-from &lt;code&gt;(fn init-value tree)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Use &lt;code&gt;fn&lt;/code&gt; to reduce elements of list &lt;code&gt;tree&lt;/code&gt;.
If elements of &lt;code&gt;tree&lt;/code&gt; are lists themselves, apply the reduction recursively.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;fn&lt;/code&gt; is first applied to &lt;code&gt;init-value&lt;/code&gt; and first element of the list,
then on this result and second element from the list etc.&lt;/p&gt;
&lt;p&gt;The initial value is ignored on cons pairs as they always contain
two elements.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-tree-reduce-from &lt;span class="pl-c1"&gt;'+&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; (&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;) ((&lt;span class="pl-c1"&gt;1&lt;/span&gt;)))) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; 8&lt;/span&gt;
(--tree-reduce-from (-concat acc (&lt;span class="pl-k"&gt;list&lt;/span&gt; it)) &lt;span class="pl-c1"&gt;nil&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; (&lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; (&lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt;)) (&lt;span class="pl-c1"&gt;6&lt;/span&gt; &lt;span class="pl-c1"&gt;7&lt;/span&gt;))) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '((7 6) ((5 4) 3 2) 1)&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--tree-mapreduce-fn-folder-tree" class="anchor" aria-hidden="true" href="#-tree-mapreduce-fn-folder-tree"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-tree-mapreduce &lt;code&gt;(fn folder tree)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Apply &lt;code&gt;fn&lt;/code&gt; to each element of &lt;code&gt;tree&lt;/code&gt;, and make a list of the results.
If elements of &lt;code&gt;tree&lt;/code&gt; are lists themselves, apply &lt;code&gt;fn&lt;/code&gt; recursively to
elements of these nested lists.&lt;/p&gt;
&lt;p&gt;Then reduce the resulting lists using &lt;code&gt;folder&lt;/code&gt; and initial value
&lt;code&gt;init-value&lt;/code&gt;. See &lt;a href="#-reduce-r-from-fn-initial-value-list"&gt;&lt;code&gt;-reduce-r-from&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This is the same as calling &lt;a href="#-tree-reduce-fn-tree"&gt;&lt;code&gt;-tree-reduce&lt;/code&gt;&lt;/a&gt; after &lt;a href="#-tree-map-fn-tree"&gt;&lt;code&gt;-tree-map&lt;/code&gt;&lt;/a&gt;
but is twice as fast as it only traverse the structure once.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-tree-mapreduce &lt;span class="pl-c1"&gt;'list&lt;/span&gt; &lt;span class="pl-c1"&gt;'append&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; (&lt;span class="pl-c1"&gt;2&lt;/span&gt; (&lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;) (&lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-c1"&gt;6&lt;/span&gt;)) (&lt;span class="pl-c1"&gt;7&lt;/span&gt; (&lt;span class="pl-c1"&gt;8&lt;/span&gt; &lt;span class="pl-c1"&gt;9&lt;/span&gt;)))) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1 2 3 4 5 6 7 8 9)&lt;/span&gt;
(--tree-mapreduce &lt;span class="pl-c1"&gt;1&lt;/span&gt; (&lt;span class="pl-k"&gt;+&lt;/span&gt; it acc) '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; (&lt;span class="pl-c1"&gt;2&lt;/span&gt; (&lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;9&lt;/span&gt;) (&lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;)) (&lt;span class="pl-c1"&gt;7&lt;/span&gt; (&lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;)))) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; 9&lt;/span&gt;
(--tree-mapreduce &lt;span class="pl-c1"&gt;0&lt;/span&gt; (&lt;span class="pl-k"&gt;max&lt;/span&gt; acc (&lt;span class="pl-c1"&gt;1+&lt;/span&gt; it)) '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; (&lt;span class="pl-c1"&gt;2&lt;/span&gt; (&lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;9&lt;/span&gt;) (&lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;)) (&lt;span class="pl-c1"&gt;7&lt;/span&gt; (&lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;)))) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; 3&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--tree-mapreduce-from-fn-folder-init-value-tree" class="anchor" aria-hidden="true" href="#-tree-mapreduce-from-fn-folder-init-value-tree"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-tree-mapreduce-from &lt;code&gt;(fn folder init-value tree)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Apply &lt;code&gt;fn&lt;/code&gt; to each element of &lt;code&gt;tree&lt;/code&gt;, and make a list of the results.
If elements of &lt;code&gt;tree&lt;/code&gt; are lists themselves, apply &lt;code&gt;fn&lt;/code&gt; recursively to
elements of these nested lists.&lt;/p&gt;
&lt;p&gt;Then reduce the resulting lists using &lt;code&gt;folder&lt;/code&gt; and initial value
&lt;code&gt;init-value&lt;/code&gt;. See &lt;a href="#-reduce-r-from-fn-initial-value-list"&gt;&lt;code&gt;-reduce-r-from&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This is the same as calling &lt;a href="#-tree-reduce-from-fn-init-value-tree"&gt;&lt;code&gt;-tree-reduce-from&lt;/code&gt;&lt;/a&gt; after &lt;a href="#-tree-map-fn-tree"&gt;&lt;code&gt;-tree-map&lt;/code&gt;&lt;/a&gt;
but is twice as fast as it only traverse the structure once.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-tree-mapreduce-from &lt;span class="pl-c1"&gt;'identity&lt;/span&gt; &lt;span class="pl-c1"&gt;'*&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; (&lt;span class="pl-c1"&gt;2&lt;/span&gt; (&lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;) (&lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-c1"&gt;6&lt;/span&gt;)) (&lt;span class="pl-c1"&gt;7&lt;/span&gt; (&lt;span class="pl-c1"&gt;8&lt;/span&gt; &lt;span class="pl-c1"&gt;9&lt;/span&gt;)))) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; 362880&lt;/span&gt;
(--tree-mapreduce-from (&lt;span class="pl-k"&gt;+&lt;/span&gt; it it) (&lt;span class="pl-k"&gt;cons&lt;/span&gt; it acc) &lt;span class="pl-c1"&gt;nil&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; (&lt;span class="pl-c1"&gt;2&lt;/span&gt; (&lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;9&lt;/span&gt;) (&lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;)) (&lt;span class="pl-c1"&gt;7&lt;/span&gt; (&lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;)))) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(2 (4 (8 18) (4 2)) (14 (8 6)))&lt;/span&gt;
(&lt;span class="pl-c1"&gt;concat&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;{&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; (--tree-mapreduce-from (&lt;span class="pl-k"&gt;cond&lt;/span&gt; ((-cons-pair&lt;span class="pl-c1"&gt;? &lt;/span&gt;it) (&lt;span class="pl-c1"&gt;concat&lt;/span&gt; (&lt;span class="pl-c1"&gt;symbol-name&lt;/span&gt; (&lt;span class="pl-k"&gt;car&lt;/span&gt; it)) &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt; -&amp;gt; &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; (&lt;span class="pl-c1"&gt;symbol-name&lt;/span&gt; (&lt;span class="pl-k"&gt;cdr&lt;/span&gt; it)))) (&lt;span class="pl-c1"&gt;t&lt;/span&gt; (&lt;span class="pl-c1"&gt;concat&lt;/span&gt; (&lt;span class="pl-c1"&gt;symbol-name&lt;/span&gt; it) &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt; : {&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))) (&lt;span class="pl-c1"&gt;concat&lt;/span&gt; it (&lt;span class="pl-k"&gt;unless&lt;/span&gt; (&lt;span class="pl-k"&gt;or&lt;/span&gt; (&lt;span class="pl-k"&gt;equal&lt;/span&gt; acc &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;}&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) (&lt;span class="pl-k"&gt;equal&lt;/span&gt; (&lt;span class="pl-c1"&gt;substring&lt;/span&gt; it (&lt;span class="pl-c1"&gt;1-&lt;/span&gt; (&lt;span class="pl-k"&gt;length&lt;/span&gt; it))) &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;{&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)) &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;, &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) acc) &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;}&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; '((elips-mode (foo (bar &lt;span class="pl-k"&gt;.&lt;/span&gt; booze)) (baz &lt;span class="pl-k"&gt;.&lt;/span&gt; qux)) (&lt;span class="pl-c1"&gt;c-mode&lt;/span&gt; (foo &lt;span class="pl-k"&gt;.&lt;/span&gt; bla) (bum &lt;span class="pl-k"&gt;.&lt;/span&gt; bam))))) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "{elips-mode : {foo : {bar -&amp;gt; booze}, baz -&amp;gt; qux}, c-mode : {foo -&amp;gt; bla, bum -&amp;gt; bam}}"&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--clone-list" class="anchor" aria-hidden="true" href="#-clone-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-clone &lt;code&gt;(list)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Create a deep copy of &lt;code&gt;list&lt;/code&gt;.
The new list has the same elements and structure but all cons are
replaced with new ones.  This is useful when you need to clone a
structure such as plist or alist.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;let*&lt;/span&gt; ((a '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;)) (b (-clone a))) (&lt;span class="pl-k"&gt;nreverse&lt;/span&gt; a) b) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1 2 3)&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-threading-macros-1" class="anchor" aria-hidden="true" href="#threading-macros-1"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Threading macros&lt;/h2&gt;
&lt;h4&gt;&lt;a id="user-content---x-optional-form-rest-more" class="anchor" aria-hidden="true" href="#--x-optional-form-rest-more"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-&amp;gt; &lt;code&gt;(x &amp;amp;optional form &amp;amp;rest more)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Thread the expr through the forms. Insert &lt;code&gt;x&lt;/code&gt; as the second item
in the first form, making a list of it if it is not a list
already. If there are more forms, insert the first form as the
second item in second form, etc.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; '(&lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(2 3 5)&lt;/span&gt;
(-&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; '(&lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt;) (&lt;span class="pl-k"&gt;append&lt;/span&gt; '(&lt;span class="pl-c1"&gt;8&lt;/span&gt; &lt;span class="pl-c1"&gt;13&lt;/span&gt;))) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(2 3 5 8 13)&lt;/span&gt;
(-&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; '(&lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt;) (&lt;span class="pl-k"&gt;append&lt;/span&gt; '(&lt;span class="pl-c1"&gt;8&lt;/span&gt; &lt;span class="pl-c1"&gt;13&lt;/span&gt;)) (-slice &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;-1&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(3 5 8)&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content---x-optional-form-rest-more-1" class="anchor" aria-hidden="true" href="#--x-optional-form-rest-more-1"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-&amp;gt;&amp;gt; &lt;code&gt;(x &amp;amp;optional form &amp;amp;rest more)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Thread the expr through the forms. Insert &lt;code&gt;x&lt;/code&gt; as the last item
in the first form, making a list of it if it is not a list
already. If there are more forms, insert the first form as the
last item in second form, etc.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-&amp;gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;) (-map &lt;span class="pl-c1"&gt;'square&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1 4 9)&lt;/span&gt;
(-&amp;gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;) (-map &lt;span class="pl-c1"&gt;'square&lt;/span&gt;) (-remove &lt;span class="pl-c1"&gt;'even?&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1 9)&lt;/span&gt;
(-&amp;gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;) (-map &lt;span class="pl-c1"&gt;'square&lt;/span&gt;) (-reduce &lt;span class="pl-c1"&gt;'+&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; 14&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content----x-rest-forms" class="anchor" aria-hidden="true" href="#---x-rest-forms"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;--&amp;gt; &lt;code&gt;(x &amp;amp;rest forms)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Starting with the value of &lt;code&gt;x&lt;/code&gt;, thread each expression through &lt;code&gt;forms&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Insert &lt;code&gt;x&lt;/code&gt; at the position signified by the symbol &lt;code&gt;it&lt;/code&gt; in the first
form.  If there are more forms, insert the first form at the position
signified by &lt;code&gt;it&lt;/code&gt; in in second form, etc.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(--&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;def&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; (&lt;span class="pl-c1"&gt;concat&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;abc&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; it &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;ghi&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "abcdefghi"&lt;/span&gt;
(--&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;def&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; (&lt;span class="pl-c1"&gt;concat&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;abc&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; it &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;ghi&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) (&lt;span class="pl-c1"&gt;upcase&lt;/span&gt; it)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "ABCDEFGHI"&lt;/span&gt;
(--&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;def&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; (&lt;span class="pl-c1"&gt;concat&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;abc&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; it &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;ghi&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) upcase) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "ABCDEFGHI"&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--as--value-variable-rest-forms" class="anchor" aria-hidden="true" href="#-as--value-variable-rest-forms"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-as-&amp;gt; &lt;code&gt;(value variable &amp;amp;rest forms)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Starting with &lt;code&gt;value&lt;/code&gt;, thread &lt;code&gt;variable&lt;/code&gt; through &lt;code&gt;forms&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In the first form, bind &lt;code&gt;variable&lt;/code&gt; to &lt;code&gt;value&lt;/code&gt;.  In the second form, bind
&lt;code&gt;variable&lt;/code&gt; to the result of the first form, and so forth.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-as-&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; my-var (&lt;span class="pl-c1"&gt;1+&lt;/span&gt; my-var) (&lt;span class="pl-k"&gt;list&lt;/span&gt; my-var) (&lt;span class="pl-k"&gt;mapcar&lt;/span&gt; (&lt;span class="pl-k"&gt;lambda&lt;/span&gt; (&lt;span class="pl-v"&gt;ele&lt;/span&gt;) (&lt;span class="pl-k"&gt;*&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; ele)) my-var)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(8)&lt;/span&gt;
(-as-&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; my-var 1+) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; 4&lt;/span&gt;
(-as-&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; my-var) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; 3&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--some--x-optional-form-rest-more" class="anchor" aria-hidden="true" href="#-some--x-optional-form-rest-more"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-some-&amp;gt; &lt;code&gt;(x &amp;amp;optional form &amp;amp;rest more)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;When expr is non-nil, thread it through the first form (via &lt;a href="#--x-optional-form-rest-more"&gt;&lt;code&gt;-&amp;gt;&lt;/code&gt;&lt;/a&gt;),
and when that result is non-nil, through the next form, etc.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-some-&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; '(&lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(2 3 5)&lt;/span&gt;
(-some-&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt; square) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; 25&lt;/span&gt;
(-some-&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt; even&lt;span class="pl-c1"&gt;? &lt;/span&gt;square) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; nil&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--some--x-optional-form-rest-more-1" class="anchor" aria-hidden="true" href="#-some--x-optional-form-rest-more-1"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-some-&amp;gt;&amp;gt; &lt;code&gt;(x &amp;amp;optional form &amp;amp;rest more)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;When expr is non-nil, thread it through the first form (via &lt;a href="#--x-optional-form-rest-more"&gt;&lt;code&gt;-&amp;gt;&amp;gt;&lt;/code&gt;&lt;/a&gt;),
and when that result is non-nil, through the next form, etc.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-some-&amp;gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;) (-map &lt;span class="pl-c1"&gt;'square&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1 4 9)&lt;/span&gt;
(-some-&amp;gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt;) (-last &lt;span class="pl-c1"&gt;'even?&lt;/span&gt;) (&lt;span class="pl-k"&gt;+&lt;/span&gt; &lt;span class="pl-c1"&gt;100&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; nil&lt;/span&gt;
(-some-&amp;gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; '(&lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;6&lt;/span&gt;) (-last &lt;span class="pl-c1"&gt;'even?&lt;/span&gt;) (&lt;span class="pl-k"&gt;+&lt;/span&gt; &lt;span class="pl-c1"&gt;100&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; 106&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--some---x-optional-form-rest-more" class="anchor" aria-hidden="true" href="#-some---x-optional-form-rest-more"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-some--&amp;gt; &lt;code&gt;(x &amp;amp;optional form &amp;amp;rest more)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;When expr in non-nil, thread it through the first form (via &lt;a href="#---x-rest-forms"&gt;&lt;code&gt;--&amp;gt;&lt;/code&gt;&lt;/a&gt;),
and when that result is non-nil, through the next form, etc.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-some--&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;def&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; (&lt;span class="pl-c1"&gt;concat&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;abc&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; it &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;ghi&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "abcdefghi"&lt;/span&gt;
(-some--&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt; (&lt;span class="pl-c1"&gt;concat&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;abc&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; it &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;ghi&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; nil&lt;/span&gt;
(-some--&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt;) (-filter &lt;span class="pl-c1"&gt;'even?&lt;/span&gt; it) (&lt;span class="pl-k"&gt;append&lt;/span&gt; it it) (-map &lt;span class="pl-c1"&gt;'square&lt;/span&gt; it)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; nil&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-binding-1" class="anchor" aria-hidden="true" href="#binding-1"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Binding&lt;/h2&gt;
&lt;p&gt;Convenient versions of &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;let*&lt;/code&gt; constructs combined with flow control.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content--when-let-var-val-rest-body" class="anchor" aria-hidden="true" href="#-when-let-var-val-rest-body"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-when-let &lt;code&gt;(var-val &amp;amp;rest body)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;If &lt;code&gt;val&lt;/code&gt; evaluates to non-nil, bind it to &lt;code&gt;var&lt;/code&gt; and execute body.&lt;/p&gt;
&lt;p&gt;Note: binding is done according to &lt;a href="#-let-varlist-rest-body"&gt;&lt;code&gt;-let&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;(fn (&lt;code&gt;var&lt;/code&gt; &lt;code&gt;val&lt;/code&gt;) &amp;amp;rest &lt;code&gt;body&lt;/code&gt;)&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-when-let (match-index (&lt;span class="pl-c1"&gt;string-match&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;d&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;abcd&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)) (&lt;span class="pl-k"&gt;+&lt;/span&gt; match-index &lt;span class="pl-c1"&gt;2&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; 5&lt;/span&gt;
(-when-let ((&amp;amp;plist &lt;span class="pl-c1"&gt;:foo&lt;/span&gt; foo) (&lt;span class="pl-k"&gt;list&lt;/span&gt; &lt;span class="pl-c1"&gt;:foo&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;foo&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)) foo) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "foo"&lt;/span&gt;
(-when-let ((&amp;amp;plist &lt;span class="pl-c1"&gt;:foo&lt;/span&gt; foo) (&lt;span class="pl-k"&gt;list&lt;/span&gt; &lt;span class="pl-c1"&gt;:bar&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;bar&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)) foo) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; nil&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--when-let-vars-vals-rest-body" class="anchor" aria-hidden="true" href="#-when-let-vars-vals-rest-body"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-when-let* &lt;code&gt;(vars-vals &amp;amp;rest body)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;If all &lt;code&gt;vals&lt;/code&gt; evaluate to true, bind them to their corresponding
&lt;code&gt;vars&lt;/code&gt; and execute body. &lt;code&gt;vars-vals&lt;/code&gt; should be a list of (&lt;code&gt;var&lt;/code&gt; &lt;code&gt;val&lt;/code&gt;)
pairs.&lt;/p&gt;
&lt;p&gt;Note: binding is done according to &lt;a href="#-let-varlist-rest-body"&gt;&lt;code&gt;-let*&lt;/code&gt;&lt;/a&gt;.  &lt;code&gt;vals&lt;/code&gt; are evaluated
sequentially, and evaluation stops after the first nil &lt;code&gt;val&lt;/code&gt; is
encountered.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-when-let* ((x &lt;span class="pl-c1"&gt;5&lt;/span&gt;) (y &lt;span class="pl-c1"&gt;3&lt;/span&gt;) (z (&lt;span class="pl-k"&gt;+&lt;/span&gt; y &lt;span class="pl-c1"&gt;4&lt;/span&gt;))) (&lt;span class="pl-k"&gt;+&lt;/span&gt; x y z)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; 15&lt;/span&gt;
(-when-let* ((x &lt;span class="pl-c1"&gt;5&lt;/span&gt;) (y &lt;span class="pl-c1"&gt;nil&lt;/span&gt;) (z &lt;span class="pl-c1"&gt;7&lt;/span&gt;)) (&lt;span class="pl-k"&gt;+&lt;/span&gt; x y z)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; nil&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--if-let-var-val-then-rest-else" class="anchor" aria-hidden="true" href="#-if-let-var-val-then-rest-else"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-if-let &lt;code&gt;(var-val then &amp;amp;rest else)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;If &lt;code&gt;val&lt;/code&gt; evaluates to non-nil, bind it to &lt;code&gt;var&lt;/code&gt; and do &lt;code&gt;then&lt;/code&gt;,
otherwise do &lt;code&gt;else&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Note: binding is done according to &lt;a href="#-let-varlist-rest-body"&gt;&lt;code&gt;-let&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;(fn (&lt;code&gt;var&lt;/code&gt; &lt;code&gt;val&lt;/code&gt;) &lt;code&gt;then&lt;/code&gt; &amp;amp;rest &lt;code&gt;else&lt;/code&gt;)&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-if-let (match-index (&lt;span class="pl-c1"&gt;string-match&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;d&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;abc&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)) (&lt;span class="pl-k"&gt;+&lt;/span&gt; match-index &lt;span class="pl-c1"&gt;3&lt;/span&gt;) &lt;span class="pl-c1"&gt;7&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; 7&lt;/span&gt;
(--if-let (even&lt;span class="pl-c1"&gt;? &lt;/span&gt;&lt;span class="pl-c1"&gt;4&lt;/span&gt;) it &lt;span class="pl-c1"&gt;nil&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; t&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--if-let-vars-vals-then-rest-else" class="anchor" aria-hidden="true" href="#-if-let-vars-vals-then-rest-else"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-if-let* &lt;code&gt;(vars-vals then &amp;amp;rest else)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;If all &lt;code&gt;vals&lt;/code&gt; evaluate to true, bind them to their corresponding
&lt;code&gt;vars&lt;/code&gt; and do &lt;code&gt;then&lt;/code&gt;, otherwise do &lt;code&gt;else&lt;/code&gt;. &lt;code&gt;vars-vals&lt;/code&gt; should be a list
of (&lt;code&gt;var&lt;/code&gt; &lt;code&gt;val&lt;/code&gt;) pairs.&lt;/p&gt;
&lt;p&gt;Note: binding is done according to &lt;a href="#-let-varlist-rest-body"&gt;&lt;code&gt;-let*&lt;/code&gt;&lt;/a&gt;.  &lt;code&gt;vals&lt;/code&gt; are evaluated
sequentially, and evaluation stops after the first nil &lt;code&gt;val&lt;/code&gt; is
encountered.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-if-let* ((x &lt;span class="pl-c1"&gt;5&lt;/span&gt;) (y &lt;span class="pl-c1"&gt;3&lt;/span&gt;) (z &lt;span class="pl-c1"&gt;7&lt;/span&gt;)) (&lt;span class="pl-k"&gt;+&lt;/span&gt; x y z) &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;foo&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; 15&lt;/span&gt;
(-if-let* ((x &lt;span class="pl-c1"&gt;5&lt;/span&gt;) (y &lt;span class="pl-c1"&gt;nil&lt;/span&gt;) (z &lt;span class="pl-c1"&gt;7&lt;/span&gt;)) (&lt;span class="pl-k"&gt;+&lt;/span&gt; x y z) &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;foo&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "foo"&lt;/span&gt;
(-if-let* (((_ _ x) '(&lt;span class="pl-c1"&gt;nil&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt; &lt;span class="pl-c1"&gt;7&lt;/span&gt;))) x) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; 7&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--let-varlist-rest-body" class="anchor" aria-hidden="true" href="#-let-varlist-rest-body"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-let &lt;code&gt;(varlist &amp;amp;rest body)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Bind variables according to &lt;code&gt;varlist&lt;/code&gt; then eval &lt;code&gt;body&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;varlist&lt;/code&gt; is a list of lists of the form (&lt;code&gt;pattern&lt;/code&gt; &lt;code&gt;source&lt;/code&gt;).  Each
&lt;code&gt;pattern&lt;/code&gt; is matched against the &lt;code&gt;source&lt;/code&gt; "structurally".  &lt;code&gt;source&lt;/code&gt;
is only evaluated once for each &lt;code&gt;pattern&lt;/code&gt;.  Each &lt;code&gt;pattern&lt;/code&gt; is matched
recursively, and can therefore contain sub-patterns which are
matched against corresponding sub-expressions of &lt;code&gt;source&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;All the SOURCEs are evalled before any symbols are
bound (i.e. "in parallel").&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;varlist&lt;/code&gt; only contains one (&lt;code&gt;pattern&lt;/code&gt; &lt;code&gt;source&lt;/code&gt;) element, you can
optionally specify it using a vector and discarding the
outer-most parens.  Thus&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(-let ((`pattern` `source`)) ..)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;becomes&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(-let [`pattern` `source`] ..).
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href="#-let-varlist-rest-body"&gt;&lt;code&gt;-let&lt;/code&gt;&lt;/a&gt; uses a convention of not binding places (symbols) starting
with _ whenever it's possible.  You can use this to skip over
entries you don't care about.  However, this is not &lt;em&gt;always&lt;/em&gt;
possible (as a result of implementation) and these symbols might
get bound to undefined values.&lt;/p&gt;
&lt;p&gt;Following is the overview of supported patterns.  Remember that
patterns can be matched recursively, so every a, b, aK in the
following can be a matching construct and not necessarily a
symbol/variable.&lt;/p&gt;
&lt;p&gt;Symbol:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;a - bind the `source` to `a`.  This is just like regular `let`.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Conses and lists:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(a) - bind `car` of cons/list to `a`

(a . b) - bind car of cons to `a` and `cdr` to `b`

(a b) - bind car of list to `a` and `cadr` to `b`

(a1 a2 a3  ...) - bind 0th car of list to `a1`, 1st to `a2`, 2nd to `a3` ...

(a1 a2 a3 ... aN . rest) - as above, but bind the Nth cdr to `rest`.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Vectors:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[a] - bind 0th element of a non-list sequence to `a` (works with
      vectors, strings, bit arrays...)

[a1 a2 a3 ...] - bind 0th element of non-list sequence to `a0`, 1st to
                 `a1`, 2nd to `a2`, ...
                 If the `pattern` is shorter than `source`, the values at
                 places not in `pattern` are ignored.
                 If the `pattern` is longer than `source`, an `error` is
                 thrown.

[a1 a2 a3 ... &amp;amp;rest rest] - as above, but bind the rest of
                            the sequence to `rest`.  This is
                            conceptually the same as improper list
                            matching (a1 a2 ... aN . rest)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Key/value stores:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(&amp;amp;plist key0 a0 ... keyN aN) - bind value mapped by keyK in the
                               `source` plist to aK.  If the
                               value is not found, aK is nil.
                               Uses `plist-get` to fetch values.

(&amp;amp;alist key0 a0 ... keyN aN) - bind value mapped by keyK in the
                               `source` alist to aK.  If the
                               value is not found, aK is nil.
                               Uses `assoc` to fetch values.

(&amp;amp;hash key0 a0 ... keyN aN) - bind value mapped by keyK in the
                              `source` hash table to aK.  If the
                              value is not found, aK is nil.
                              Uses `gethash` to fetch values.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Further, special keyword &amp;amp;keys supports "inline" matching of
plist-like key-value pairs, similarly to &amp;amp;keys keyword of
&lt;code&gt;cl-defun&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(a1 a2 ... aN &amp;amp;keys key1 b1 ... keyN bK)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This binds &lt;code&gt;n&lt;/code&gt; values from the list to a1 ... aN, then interprets
the cdr as a plist (see key/value matching above).&lt;/p&gt;
&lt;p&gt;&lt;code&gt;a&lt;/code&gt; shorthand notation for kv-destructuring exists which allows the
patterns be optionally left out and derived from the key name in
the following fashion:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a key :foo is converted into &lt;code&gt;foo&lt;/code&gt; pattern,&lt;/li&gt;
&lt;li&gt;a key 'bar is converted into &lt;code&gt;bar&lt;/code&gt; pattern,&lt;/li&gt;
&lt;li&gt;a key "baz" is converted into &lt;code&gt;baz&lt;/code&gt; pattern.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That is, the entire value under the key is bound to the derived
variable without any further destructuring.&lt;/p&gt;
&lt;p&gt;This is possible only when the form following the key is not a
valid pattern (i.e. not a symbol, a cons cell or a vector).
Otherwise the matching proceeds as usual and in case of an
invalid spec fails with an error.&lt;/p&gt;
&lt;p&gt;Thus the patterns are normalized as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; ;; derive all the missing patterns
 (&amp;amp;plist :foo 'bar "baz") =&amp;gt; (&amp;amp;plist :foo foo 'bar bar "baz" baz)

 ;; we can specify some but not others
 (&amp;amp;plist :foo 'bar explicit-bar) =&amp;gt; (&amp;amp;plist :foo foo 'bar explicit-bar)

 ;; nothing happens, we store :foo in x
 (&amp;amp;plist :foo x) =&amp;gt; (&amp;amp;plist :foo x)

 ;; nothing happens, we match recursively
 (&amp;amp;plist :foo (a b c)) =&amp;gt; (&amp;amp;plist :foo (a b c))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can name the source using the syntax &lt;code&gt;symbol&lt;/code&gt; &amp;amp;as &lt;code&gt;pattern&lt;/code&gt;.
This syntax works with lists (proper or improper), vectors and
all types of maps.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(list &amp;amp;as a b c) (list 1 2 3)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;binds &lt;code&gt;a&lt;/code&gt; to 1, &lt;code&gt;b&lt;/code&gt; to 2, &lt;code&gt;c&lt;/code&gt; to 3 and &lt;code&gt;list&lt;/code&gt; to (1 2 3).&lt;/p&gt;
&lt;p&gt;Similarly:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(bounds &amp;amp;as beg . end) (cons 1 2)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;binds &lt;code&gt;beg&lt;/code&gt; to 1, &lt;code&gt;end&lt;/code&gt; to 2 and &lt;code&gt;bounds&lt;/code&gt; to (1 . 2).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(items &amp;amp;as first . rest) (list 1 2 3)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;binds &lt;code&gt;first&lt;/code&gt; to 1, &lt;code&gt;rest&lt;/code&gt; to (2 3) and &lt;code&gt;items&lt;/code&gt; to (1 2 3)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[vect &amp;amp;as _ b c] [1 2 3]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;binds &lt;code&gt;b&lt;/code&gt; to 2, &lt;code&gt;c&lt;/code&gt; to 3 and &lt;code&gt;vect&lt;/code&gt; to [1 2 3] (_ avoids binding as usual).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(plist &amp;amp;as &amp;amp;plist :b b) (list :a 1 :b 2 :c 3)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;binds &lt;code&gt;b&lt;/code&gt; to 2 and &lt;code&gt;plist&lt;/code&gt; to (:a 1 :b 2 :c 3).  Same for &amp;amp;alist and &amp;amp;hash.&lt;/p&gt;
&lt;p&gt;This is especially useful when we want to capture the result of a
computation and destructure at the same time.  Consider the
form (function-returning-complex-structure) returning a list of
two vectors with two items each.  We want to capture this entire
result and pass it to another computation, but at the same time
we want to get the second item from each vector.  We can achieve
it with pattern&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(result &amp;amp;as [_ a] [_ b]) (function-returning-complex-structure)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note: Clojure programmers may know this feature as the ":as
binding".  The difference is that we put the &amp;amp;as at the front
because we need to support improper list binding.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-let (([a (b c) d] [&lt;span class="pl-c1"&gt;1&lt;/span&gt; (&lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;) 4])) (&lt;span class="pl-k"&gt;list&lt;/span&gt; a b c d)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1 2 3 4)&lt;/span&gt;
(-let [(a b c &lt;span class="pl-k"&gt;.&lt;/span&gt; d) (&lt;span class="pl-k"&gt;list&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-c1"&gt;6&lt;/span&gt;)] (&lt;span class="pl-k"&gt;list&lt;/span&gt; a b c d)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1 2 3 (4 5 6))&lt;/span&gt;
(-let [(&amp;amp;plist &lt;span class="pl-c1"&gt;:foo&lt;/span&gt; foo &lt;span class="pl-c1"&gt;:bar&lt;/span&gt; bar) (&lt;span class="pl-k"&gt;list&lt;/span&gt; &lt;span class="pl-c1"&gt;:baz&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;:foo&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;:qux&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;:bar&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;)] (&lt;span class="pl-k"&gt;list&lt;/span&gt; foo bar)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1 2)&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--let-varlist-rest-body-1" class="anchor" aria-hidden="true" href="#-let-varlist-rest-body-1"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-let* &lt;code&gt;(varlist &amp;amp;rest body)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Bind variables according to &lt;code&gt;varlist&lt;/code&gt; then eval &lt;code&gt;body&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;varlist&lt;/code&gt; is a list of lists of the form (&lt;code&gt;pattern&lt;/code&gt; &lt;code&gt;source&lt;/code&gt;).  Each
&lt;code&gt;pattern&lt;/code&gt; is matched against the &lt;code&gt;source&lt;/code&gt; structurally.  &lt;code&gt;source&lt;/code&gt; is
only evaluated once for each &lt;code&gt;pattern&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Each &lt;code&gt;source&lt;/code&gt; can refer to the symbols already bound by this
&lt;code&gt;varlist&lt;/code&gt;.  This is useful if you want to destructure &lt;code&gt;source&lt;/code&gt;
recursively but also want to name the intermediate structures.&lt;/p&gt;
&lt;p&gt;See &lt;a href="#-let-varlist-rest-body"&gt;&lt;code&gt;-let&lt;/code&gt;&lt;/a&gt; for the list of all possible patterns.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-let* (((a &lt;span class="pl-k"&gt;.&lt;/span&gt; b) (&lt;span class="pl-k"&gt;cons&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;)) ((c &lt;span class="pl-k"&gt;.&lt;/span&gt; d) (&lt;span class="pl-k"&gt;cons&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;))) (&lt;span class="pl-k"&gt;list&lt;/span&gt; a b c d)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1 2 3 4)&lt;/span&gt;
(-let* (((a &lt;span class="pl-k"&gt;.&lt;/span&gt; b) (&lt;span class="pl-k"&gt;cons&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt; (&lt;span class="pl-k"&gt;cons&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;))) ((c &lt;span class="pl-k"&gt;.&lt;/span&gt; d) b)) (&lt;span class="pl-k"&gt;list&lt;/span&gt; a b c d)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1 (2 . 3) 2 3)&lt;/span&gt;
(-let* (((&amp;amp;alist &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;foo&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; foo &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;bar&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; bar) (&lt;span class="pl-k"&gt;list&lt;/span&gt; (&lt;span class="pl-k"&gt;cons&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;foo&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;) (&lt;span class="pl-k"&gt;cons&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;bar&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; (&lt;span class="pl-k"&gt;list&lt;/span&gt; &lt;span class="pl-c1"&gt;'a&lt;/span&gt; &lt;span class="pl-c1"&gt;'b&lt;/span&gt; &lt;span class="pl-c1"&gt;'c&lt;/span&gt;)))) ((a b c) bar)) (&lt;span class="pl-k"&gt;list&lt;/span&gt; foo a b c bar)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1 a b c (a b c))&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--lambda-match-form-rest-body" class="anchor" aria-hidden="true" href="#-lambda-match-form-rest-body"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-lambda &lt;code&gt;(match-form &amp;amp;rest body)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Return a lambda which destructures its input as &lt;code&gt;match-form&lt;/code&gt; and executes &lt;code&gt;body&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Note that you have to enclose the &lt;code&gt;match-form&lt;/code&gt; in a pair of parens,
such that:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(-lambda (x) body)
(-lambda (x y ...) body)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;has the usual semantics of &lt;code&gt;lambda&lt;/code&gt;.  Furthermore, these get
translated into normal lambda, so there is no performance
penalty.&lt;/p&gt;
&lt;p&gt;See &lt;a href="#-let-varlist-rest-body"&gt;&lt;code&gt;-let&lt;/code&gt;&lt;/a&gt; for the description of destructuring mechanism.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-map (-lambda ((x y)) (&lt;span class="pl-k"&gt;+&lt;/span&gt; x y)) '((&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;) (&lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;) (&lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-c1"&gt;6&lt;/span&gt;))) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(3 7 11)&lt;/span&gt;
(-map (-lambda ([x y]) (&lt;span class="pl-k"&gt;+&lt;/span&gt; x y)) '([&lt;span class="pl-c1"&gt;1&lt;/span&gt; 2] [&lt;span class="pl-c1"&gt;3&lt;/span&gt; 4] [&lt;span class="pl-c1"&gt;5&lt;/span&gt; 6])) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(3 7 11)&lt;/span&gt;
(&lt;span class="pl-k"&gt;funcall&lt;/span&gt; (-lambda ((_ &lt;span class="pl-k"&gt;.&lt;/span&gt; a) (_ &lt;span class="pl-k"&gt;.&lt;/span&gt; b)) (-concat a b)) '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;) '(&lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-c1"&gt;6&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(2 3 5 6)&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--setq-rest-forms" class="anchor" aria-hidden="true" href="#-setq-rest-forms"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-setq &lt;code&gt;(&amp;amp;rest forms)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Bind each &lt;code&gt;match-form&lt;/code&gt; to the value of its &lt;code&gt;val&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;match-form&lt;/code&gt; destructuring is done according to the rules of &lt;a href="#-let-varlist-rest-body"&gt;&lt;code&gt;-let&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This macro allows you to bind multiple variables by destructuring
the value, so for example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(-setq (a b) x
       (&amp;amp;plist :c c) plist)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;expands roughly speaking to the following code&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(setq a (car x)
      b (cadr x)
      c (plist-get plist :c))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Care is taken to only evaluate each &lt;code&gt;val&lt;/code&gt; once so that in case of
multiple assignments it does not cause unexpected side effects.&lt;/p&gt;
&lt;p&gt;(fn [&lt;code&gt;match-form&lt;/code&gt; &lt;code&gt;val&lt;/code&gt;]...)&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;progn&lt;/span&gt; (-setq a &lt;span class="pl-c1"&gt;1&lt;/span&gt;) a) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; 1&lt;/span&gt;
(&lt;span class="pl-k"&gt;progn&lt;/span&gt; (-setq (a b) (&lt;span class="pl-k"&gt;list&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;)) (&lt;span class="pl-k"&gt;list&lt;/span&gt; a b)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1 2)&lt;/span&gt;
(&lt;span class="pl-k"&gt;progn&lt;/span&gt; (-setq (&amp;amp;plist &lt;span class="pl-c1"&gt;:c&lt;/span&gt; c) (&lt;span class="pl-k"&gt;list&lt;/span&gt; &lt;span class="pl-c1"&gt;:c&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;c&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)) c) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "c"&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-side-effects-1" class="anchor" aria-hidden="true" href="#side-effects-1"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Side-effects&lt;/h2&gt;
&lt;p&gt;Functions iterating over lists for side-effect only.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content--each-list-fn" class="anchor" aria-hidden="true" href="#-each-list-fn"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-each &lt;code&gt;(list fn)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Call &lt;code&gt;fn&lt;/code&gt; with every item in &lt;code&gt;list&lt;/code&gt;. Return nil, used for side-effects only.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;let&lt;/span&gt; (s) (-each '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;) (&lt;span class="pl-k"&gt;lambda&lt;/span&gt; (&lt;span class="pl-v"&gt;item&lt;/span&gt;) (&lt;span class="pl-k"&gt;setq&lt;/span&gt; s (&lt;span class="pl-k"&gt;cons&lt;/span&gt; item s))))) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; nil&lt;/span&gt;
(&lt;span class="pl-k"&gt;let&lt;/span&gt; (s) (-each '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;) (&lt;span class="pl-k"&gt;lambda&lt;/span&gt; (&lt;span class="pl-v"&gt;item&lt;/span&gt;) (&lt;span class="pl-k"&gt;setq&lt;/span&gt; s (&lt;span class="pl-k"&gt;cons&lt;/span&gt; item s)))) s) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(3 2 1)&lt;/span&gt;
(&lt;span class="pl-k"&gt;let&lt;/span&gt; (s) (--each '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;) (&lt;span class="pl-k"&gt;setq&lt;/span&gt; s (&lt;span class="pl-k"&gt;cons&lt;/span&gt; it s))) s) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(3 2 1)&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--each-while-list-pred-fn" class="anchor" aria-hidden="true" href="#-each-while-list-pred-fn"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-each-while &lt;code&gt;(list pred fn)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Call &lt;code&gt;fn&lt;/code&gt; with every item in &lt;code&gt;list&lt;/code&gt; while (&lt;code&gt;pred&lt;/code&gt; item) is non-nil.
Return nil, used for side-effects only.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;let&lt;/span&gt; (s) (-each-while '(&lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-c1"&gt;6&lt;/span&gt;) &lt;span class="pl-c1"&gt;'even?&lt;/span&gt; (&lt;span class="pl-k"&gt;lambda&lt;/span&gt; (&lt;span class="pl-v"&gt;item&lt;/span&gt;) (!cons item s))) s) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(4 2)&lt;/span&gt;
(&lt;span class="pl-k"&gt;let&lt;/span&gt; (s) (--each-while '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;) (&lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt; it &lt;span class="pl-c1"&gt;3&lt;/span&gt;) (!cons it s)) s) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(2 1)&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--each-indexed-list-fn" class="anchor" aria-hidden="true" href="#-each-indexed-list-fn"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-each-indexed &lt;code&gt;(list fn)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Call (&lt;code&gt;fn&lt;/code&gt; index item) for each item in &lt;code&gt;list&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In the anaphoric form &lt;code&gt;--each-indexed&lt;/code&gt;, the index is exposed as symbol &lt;code&gt;it-index&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;See also: &lt;a href="#-map-indexed-fn-list"&gt;&lt;code&gt;-map-indexed&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;let&lt;/span&gt; (s) (-each-indexed '(a b c) (&lt;span class="pl-k"&gt;lambda&lt;/span&gt; (&lt;span class="pl-v"&gt;index&lt;/span&gt; &lt;span class="pl-v"&gt;item&lt;/span&gt;) (&lt;span class="pl-k"&gt;setq&lt;/span&gt; s (&lt;span class="pl-k"&gt;cons&lt;/span&gt; (&lt;span class="pl-k"&gt;list&lt;/span&gt; item index) s)))) s) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '((c 2) (b 1) (a 0))&lt;/span&gt;
(&lt;span class="pl-k"&gt;let&lt;/span&gt; (s) (--each-indexed '(a b c) (&lt;span class="pl-k"&gt;setq&lt;/span&gt; s (&lt;span class="pl-k"&gt;cons&lt;/span&gt; (&lt;span class="pl-k"&gt;list&lt;/span&gt; it it-index) s))) s) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '((c 2) (b 1) (a 0))&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--each-r-list-fn" class="anchor" aria-hidden="true" href="#-each-r-list-fn"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-each-r &lt;code&gt;(list fn)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Call &lt;code&gt;fn&lt;/code&gt; with every item in &lt;code&gt;list&lt;/code&gt; in reversed order.
Return nil, used for side-effects only.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;let&lt;/span&gt; (s) (-each-r '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;) (&lt;span class="pl-k"&gt;lambda&lt;/span&gt; (&lt;span class="pl-v"&gt;item&lt;/span&gt;) (&lt;span class="pl-k"&gt;setq&lt;/span&gt; s (&lt;span class="pl-k"&gt;cons&lt;/span&gt; item s))))) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; nil&lt;/span&gt;
(&lt;span class="pl-k"&gt;let&lt;/span&gt; (s) (-each-r '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;) (&lt;span class="pl-k"&gt;lambda&lt;/span&gt; (&lt;span class="pl-v"&gt;item&lt;/span&gt;) (&lt;span class="pl-k"&gt;setq&lt;/span&gt; s (&lt;span class="pl-k"&gt;cons&lt;/span&gt; item s)))) s) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1 2 3)&lt;/span&gt;
(&lt;span class="pl-k"&gt;let&lt;/span&gt; (s) (--each-r '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;) (&lt;span class="pl-k"&gt;setq&lt;/span&gt; s (&lt;span class="pl-k"&gt;cons&lt;/span&gt; it s))) s) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1 2 3)&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--each-r-while-list-pred-fn" class="anchor" aria-hidden="true" href="#-each-r-while-list-pred-fn"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-each-r-while &lt;code&gt;(list pred fn)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Call &lt;code&gt;fn&lt;/code&gt; with every item in reversed &lt;code&gt;list&lt;/code&gt; while (&lt;code&gt;pred&lt;/code&gt; item) is non-nil.
Return nil, used for side-effects only.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;let&lt;/span&gt; (s) (-each-r-while '(&lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-c1"&gt;6&lt;/span&gt;) &lt;span class="pl-c1"&gt;'even?&lt;/span&gt; (&lt;span class="pl-k"&gt;lambda&lt;/span&gt; (&lt;span class="pl-v"&gt;item&lt;/span&gt;) (!cons item s))) s) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(6)&lt;/span&gt;
(&lt;span class="pl-k"&gt;let&lt;/span&gt; (s) (--each-r-while '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;) (&lt;span class="pl-k"&gt;&amp;gt;=&lt;/span&gt; it &lt;span class="pl-c1"&gt;3&lt;/span&gt;) (!cons it s)) s) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(3 4)&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--dotimes-num-fn" class="anchor" aria-hidden="true" href="#-dotimes-num-fn"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-dotimes &lt;code&gt;(num fn)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Repeatedly calls &lt;code&gt;fn&lt;/code&gt; (presumably for side-effects) passing in integers from 0 through &lt;code&gt;num-1&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;let&lt;/span&gt; (s) (-dotimes &lt;span class="pl-c1"&gt;3&lt;/span&gt; (&lt;span class="pl-k"&gt;lambda&lt;/span&gt; (&lt;span class="pl-v"&gt;n&lt;/span&gt;) (!cons n s))) s) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(2 1 0)&lt;/span&gt;
(&lt;span class="pl-k"&gt;let&lt;/span&gt; (s) (--dotimes &lt;span class="pl-c1"&gt;5&lt;/span&gt; (!cons it s)) s) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(4 3 2 1 0)&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--doto-eval-initial-value-rest-forms" class="anchor" aria-hidden="true" href="#-doto-eval-initial-value-rest-forms"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-doto &lt;code&gt;(eval-initial-value &amp;amp;rest forms)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Eval a form, then insert that form as the 2nd argument to other forms.
The &lt;code&gt;eval-initial-value&lt;/code&gt; form is evaluated once. Its result is
passed to &lt;code&gt;forms&lt;/code&gt;, which are then evaluated sequentially. Returns
the target form.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-doto '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;) (!cdr) (!cdr)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(3)&lt;/span&gt;
(-doto '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;) (&lt;span class="pl-k"&gt;setcar&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;) (&lt;span class="pl-k"&gt;setcdr&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(3 . 4)&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content---doto-eval-initial-value-rest-forms" class="anchor" aria-hidden="true" href="#--doto-eval-initial-value-rest-forms"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;--doto &lt;code&gt;(eval-initial-value &amp;amp;rest forms)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Anaphoric form of &lt;a href="#-doto-eval-initial-value-rest-forms"&gt;&lt;code&gt;-doto&lt;/code&gt;&lt;/a&gt;.
Note: &lt;code&gt;it&lt;/code&gt; is not required in each form.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;gethash&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;key&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; (--doto (&lt;span class="pl-c1"&gt;make-hash-table&lt;/span&gt; &lt;span class="pl-c1"&gt;:test&lt;/span&gt; &lt;span class="pl-c1"&gt;'equal&lt;/span&gt;) (&lt;span class="pl-c1"&gt;puthash&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;key&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;value&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; it))) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "value"&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-destructive-operations-1" class="anchor" aria-hidden="true" href="#destructive-operations-1"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Destructive operations&lt;/h2&gt;
&lt;h4&gt;&lt;a id="user-content-cons-car-cdr" class="anchor" aria-hidden="true" href="#cons-car-cdr"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;!cons &lt;code&gt;(car cdr)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Destructive: Set &lt;code&gt;cdr&lt;/code&gt; to the cons of &lt;code&gt;car&lt;/code&gt; and &lt;code&gt;cdr&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;let&lt;/span&gt; (l) (!cons &lt;span class="pl-c1"&gt;5&lt;/span&gt; l) l) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(5)&lt;/span&gt;
(&lt;span class="pl-k"&gt;let&lt;/span&gt; ((l '(&lt;span class="pl-c1"&gt;3&lt;/span&gt;))) (!cons &lt;span class="pl-c1"&gt;5&lt;/span&gt; l) l) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(5 3)&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content-cdr-list" class="anchor" aria-hidden="true" href="#cdr-list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;!cdr &lt;code&gt;(list)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Destructive: Set &lt;code&gt;list&lt;/code&gt; to the cdr of &lt;code&gt;list&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;let&lt;/span&gt; ((l '(&lt;span class="pl-c1"&gt;3&lt;/span&gt;))) (!cdr l) l) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '()&lt;/span&gt;
(&lt;span class="pl-k"&gt;let&lt;/span&gt; ((l '(&lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt;))) (!cdr l) l) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(5)&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-function-combinators-1" class="anchor" aria-hidden="true" href="#function-combinators-1"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Function combinators&lt;/h2&gt;
&lt;p&gt;These combinators require Emacs 24 for its lexical scope. So they are offered in a separate package: &lt;code&gt;dash-functional&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content--partial-fn-rest-args" class="anchor" aria-hidden="true" href="#-partial-fn-rest-args"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-partial &lt;code&gt;(fn &amp;amp;rest args)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Takes a function &lt;code&gt;fn&lt;/code&gt; and fewer than the normal arguments to &lt;code&gt;fn&lt;/code&gt;,
and returns a fn that takes a variable number of additional &lt;code&gt;args&lt;/code&gt;.
When called, the returned function calls &lt;code&gt;fn&lt;/code&gt; with &lt;code&gt;args&lt;/code&gt; first and
then additional args.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;funcall&lt;/span&gt; (-partial &lt;span class="pl-c1"&gt;'-&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt;) &lt;span class="pl-c1"&gt;3&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; 2&lt;/span&gt;
(&lt;span class="pl-k"&gt;funcall&lt;/span&gt; (-partial &lt;span class="pl-c1"&gt;'+&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;) &lt;span class="pl-c1"&gt;3&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; 10&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--rpartial-fn-rest-args" class="anchor" aria-hidden="true" href="#-rpartial-fn-rest-args"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-rpartial &lt;code&gt;(fn &amp;amp;rest args)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Takes a function &lt;code&gt;fn&lt;/code&gt; and fewer than the normal arguments to &lt;code&gt;fn&lt;/code&gt;,
and returns a fn that takes a variable number of additional &lt;code&gt;args&lt;/code&gt;.
When called, the returned function calls &lt;code&gt;fn&lt;/code&gt; with the additional
args first and then &lt;code&gt;args&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;funcall&lt;/span&gt; (-rpartial &lt;span class="pl-c1"&gt;'-&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt;) &lt;span class="pl-c1"&gt;8&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; 3&lt;/span&gt;
(&lt;span class="pl-k"&gt;funcall&lt;/span&gt; (-rpartial &lt;span class="pl-c1"&gt;'-&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;) &lt;span class="pl-c1"&gt;10&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; 3&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--juxt-rest-fns" class="anchor" aria-hidden="true" href="#-juxt-rest-fns"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-juxt &lt;code&gt;(&amp;amp;rest fns)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Takes a list of functions and returns a fn that is the
juxtaposition of those fns. The returned fn takes a variable
number of args, and returns a list containing the result of
applying each fn to the args (left-to-right).&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;funcall&lt;/span&gt; (-juxt &lt;span class="pl-c1"&gt;'+&lt;/span&gt; &lt;span class="pl-c1"&gt;'-&lt;/span&gt;) &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(8 -2)&lt;/span&gt;
(-map (-juxt &lt;span class="pl-c1"&gt;'identity&lt;/span&gt; &lt;span class="pl-c1"&gt;'square&lt;/span&gt;) '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '((1 1) (2 4) (3 9))&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--compose-rest-fns" class="anchor" aria-hidden="true" href="#-compose-rest-fns"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-compose &lt;code&gt;(&amp;amp;rest fns)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Takes a list of functions and returns a fn that is the
composition of those fns. The returned fn takes a variable
number of arguments, and returns the result of applying
each fn to the result of applying the previous fn to
the arguments (right-to-left).&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;funcall&lt;/span&gt; (-compose &lt;span class="pl-c1"&gt;'square&lt;/span&gt; &lt;span class="pl-c1"&gt;'+&lt;/span&gt;) &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; (square (+ 2 3))&lt;/span&gt;
(&lt;span class="pl-k"&gt;funcall&lt;/span&gt; (-compose &lt;span class="pl-c1"&gt;'identity&lt;/span&gt; &lt;span class="pl-c1"&gt;'square&lt;/span&gt;) &lt;span class="pl-c1"&gt;3&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; (square 3)&lt;/span&gt;
(&lt;span class="pl-k"&gt;funcall&lt;/span&gt; (-compose &lt;span class="pl-c1"&gt;'square&lt;/span&gt; &lt;span class="pl-c1"&gt;'identity&lt;/span&gt;) &lt;span class="pl-c1"&gt;3&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; (square 3)&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--applify-fn" class="anchor" aria-hidden="true" href="#-applify-fn"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-applify &lt;code&gt;(fn)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Changes an n-arity function &lt;code&gt;fn&lt;/code&gt; to a 1-arity function that
expects a list with n items as arguments&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-map (-applify &lt;span class="pl-c1"&gt;'+&lt;/span&gt;) '((&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;) (&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;) (&lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt;))) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(3 6 15)&lt;/span&gt;
(-map (-applify (&lt;span class="pl-k"&gt;lambda&lt;/span&gt; (&lt;span class="pl-v"&gt;a&lt;/span&gt; &lt;span class="pl-v"&gt;b&lt;/span&gt; &lt;span class="pl-v"&gt;c&lt;/span&gt;) `(&lt;span class="pl-c1"&gt;&lt;span class="pl-mi1"&gt;,&lt;/span&gt;a&lt;/span&gt; (&lt;span class="pl-c1"&gt;&lt;span class="pl-mi1"&gt;,&lt;/span&gt;b&lt;/span&gt; (&lt;span class="pl-c1"&gt;&lt;span class="pl-mi1"&gt;,&lt;/span&gt;c&lt;/span&gt;))))) '((&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;) (&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;) (&lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt;))) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '((1 (1 (1))) (1 (2 (3))) (5 (5 (5))))&lt;/span&gt;
(&lt;span class="pl-k"&gt;funcall&lt;/span&gt; (-applify &lt;span class="pl-c1"&gt;'&lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt;&lt;/span&gt;) '(&lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;6&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; t&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--on-operator-transformer" class="anchor" aria-hidden="true" href="#-on-operator-transformer"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-on &lt;code&gt;(operator transformer)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Return a function of two arguments that first applies
&lt;code&gt;transformer&lt;/code&gt; to each of them and then applies &lt;code&gt;operator&lt;/code&gt; on the
results (in the same order).&lt;/p&gt;
&lt;p&gt;In types: (b -&amp;gt; b -&amp;gt; c) -&amp;gt; (a -&amp;gt; b) -&amp;gt; a -&amp;gt; a -&amp;gt; c&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-sort (-on &lt;span class="pl-c1"&gt;'&lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'length&lt;/span&gt;) '((&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;) (&lt;span class="pl-c1"&gt;1&lt;/span&gt;) (&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;))) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '((1) (1 2) (1 2 3))&lt;/span&gt;
(-min-by (-on &lt;span class="pl-c1"&gt;'&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'length&lt;/span&gt;) '((&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;) (&lt;span class="pl-c1"&gt;4&lt;/span&gt;) (&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;))) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(4)&lt;/span&gt;
(-min-by (-on &lt;span class="pl-c1"&gt;'string-lessp&lt;/span&gt; &lt;span class="pl-c1"&gt;'number-to-string&lt;/span&gt;) '(&lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;100&lt;/span&gt; &lt;span class="pl-c1"&gt;22&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; 22&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--flip-func" class="anchor" aria-hidden="true" href="#-flip-func"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-flip &lt;code&gt;(func)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Swap the order of arguments for binary function &lt;code&gt;func&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In types: (a -&amp;gt; b -&amp;gt; c) -&amp;gt; b -&amp;gt; a -&amp;gt; c&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;funcall&lt;/span&gt; (-flip &lt;span class="pl-c1"&gt;'&lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; t&lt;/span&gt;
(&lt;span class="pl-k"&gt;funcall&lt;/span&gt; (-flip &lt;span class="pl-c1"&gt;'-&lt;/span&gt;) &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;8&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; 5&lt;/span&gt;
(-sort (-flip &lt;span class="pl-c1"&gt;'&lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt;&lt;/span&gt;) '(&lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;6&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(6 4 3 1)&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--const-c" class="anchor" aria-hidden="true" href="#-const-c"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-const &lt;code&gt;(c)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Return a function that returns &lt;code&gt;c&lt;/code&gt; ignoring any additional arguments.&lt;/p&gt;
&lt;p&gt;In types: a -&amp;gt; b -&amp;gt; a&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;funcall&lt;/span&gt; (-const &lt;span class="pl-c1"&gt;2&lt;/span&gt;) &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;foo&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; 2&lt;/span&gt;
(-map (-const &lt;span class="pl-c1"&gt;1&lt;/span&gt;) '(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;a&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;b&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;c&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;d&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1 1 1 1)&lt;/span&gt;
(-sum (-map (-const &lt;span class="pl-c1"&gt;1&lt;/span&gt;) '(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;a&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;b&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;c&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;d&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; 4&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--cut-rest-params" class="anchor" aria-hidden="true" href="#-cut-rest-params"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-cut &lt;code&gt;(&amp;amp;rest params)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Take n-ary function and n arguments and specialize some of them.
Arguments denoted by &amp;lt;&amp;gt; will be left unspecialized.&lt;/p&gt;
&lt;p&gt;See &lt;code&gt;srfi-26&lt;/code&gt; for detailed description.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;funcall&lt;/span&gt; (-cut &lt;span class="pl-k"&gt;list&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt; &amp;lt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &amp;lt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt;) &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1 2 3 4 5)&lt;/span&gt;
(-map (-cut &lt;span class="pl-k"&gt;funcall&lt;/span&gt; &amp;lt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt;) '(&lt;span class="pl-c1"&gt;1+&lt;/span&gt; 1- (&lt;span class="pl-k"&gt;lambda&lt;/span&gt; (&lt;span class="pl-v"&gt;x&lt;/span&gt;) (&lt;span class="pl-k"&gt;/&lt;/span&gt; &lt;span class="pl-c1"&gt;1.0&lt;/span&gt; x)))) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(6 4 0.2)&lt;/span&gt;
(-map (-cut &amp;lt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;) (&lt;span class="pl-k"&gt;list&lt;/span&gt; &lt;span class="pl-c1"&gt;'list&lt;/span&gt; &lt;span class="pl-c1"&gt;'vector&lt;/span&gt; &lt;span class="pl-c1"&gt;'string&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '((1 2 3) [1 2 3] "���")&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--not-pred" class="anchor" aria-hidden="true" href="#-not-pred"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-not &lt;code&gt;(pred)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Take a unary predicate &lt;code&gt;pred&lt;/code&gt; and return a unary predicate
that returns t if &lt;code&gt;pred&lt;/code&gt; returns nil and nil if &lt;code&gt;pred&lt;/code&gt; returns
non-nil.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;funcall&lt;/span&gt; (-not &lt;span class="pl-c1"&gt;'even?&lt;/span&gt;) &lt;span class="pl-c1"&gt;5&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; t&lt;/span&gt;
(-filter (-not (-partial &lt;span class="pl-c1"&gt;'&lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;)) '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-c1"&gt;6&lt;/span&gt; &lt;span class="pl-c1"&gt;7&lt;/span&gt; &lt;span class="pl-c1"&gt;8&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1 2 3 4)&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--orfn-rest-preds" class="anchor" aria-hidden="true" href="#-orfn-rest-preds"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-orfn &lt;code&gt;(&amp;amp;rest preds)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Take list of unary predicates &lt;code&gt;preds&lt;/code&gt; and return a unary
predicate with argument x that returns non-nil if at least one of
the &lt;code&gt;preds&lt;/code&gt; returns non-nil on x.&lt;/p&gt;
&lt;p&gt;In types: [a -&amp;gt; Bool] -&amp;gt; a -&amp;gt; Bool&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(-filter (-orfn &lt;span class="pl-c1"&gt;'even?&lt;/span&gt; (-partial (-flip &lt;span class="pl-c1"&gt;'&lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;5&lt;/span&gt;)) '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-c1"&gt;6&lt;/span&gt; &lt;span class="pl-c1"&gt;7&lt;/span&gt; &lt;span class="pl-c1"&gt;8&lt;/span&gt; &lt;span class="pl-c1"&gt;9&lt;/span&gt; &lt;span class="pl-c1"&gt;10&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1 2 3 4 6 8 10)&lt;/span&gt;
(&lt;span class="pl-k"&gt;funcall&lt;/span&gt; (-orfn &lt;span class="pl-c1"&gt;'stringp&lt;/span&gt; &lt;span class="pl-c1"&gt;'even?&lt;/span&gt;) &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;foo&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; t&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--andfn-rest-preds" class="anchor" aria-hidden="true" href="#-andfn-rest-preds"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-andfn &lt;code&gt;(&amp;amp;rest preds)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Take list of unary predicates &lt;code&gt;preds&lt;/code&gt; and return a unary
predicate with argument x that returns non-nil if all of the
&lt;code&gt;preds&lt;/code&gt; returns non-nil on x.&lt;/p&gt;
&lt;p&gt;In types: [a -&amp;gt; Bool] -&amp;gt; a -&amp;gt; Bool&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;funcall&lt;/span&gt; (-andfn (-cut &lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt; &amp;lt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;10&lt;/span&gt;) &lt;span class="pl-c1"&gt;'even?&lt;/span&gt;) &lt;span class="pl-c1"&gt;6&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; t&lt;/span&gt;
(&lt;span class="pl-k"&gt;funcall&lt;/span&gt; (-andfn (-cut &lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt; &amp;lt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;10&lt;/span&gt;) &lt;span class="pl-c1"&gt;'even?&lt;/span&gt;) &lt;span class="pl-c1"&gt;12&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; nil&lt;/span&gt;
(-filter (-andfn (-not &lt;span class="pl-c1"&gt;'even?&lt;/span&gt;) (-cut &lt;span class="pl-k"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt; &amp;lt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;)) '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-c1"&gt;6&lt;/span&gt; &lt;span class="pl-c1"&gt;7&lt;/span&gt; &lt;span class="pl-c1"&gt;8&lt;/span&gt; &lt;span class="pl-c1"&gt;9&lt;/span&gt; &lt;span class="pl-c1"&gt;10&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(1 3 5)&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--iteratefn-fn-n" class="anchor" aria-hidden="true" href="#-iteratefn-fn-n"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-iteratefn &lt;code&gt;(fn n)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Return a function &lt;code&gt;fn&lt;/code&gt; composed &lt;code&gt;n&lt;/code&gt; times with itself.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;fn&lt;/code&gt; is a unary function.  If you need to use a function of higher
arity, use &lt;a href="#-applify-fn"&gt;&lt;code&gt;-applify&lt;/code&gt;&lt;/a&gt; first to turn it into a unary function.&lt;/p&gt;
&lt;p&gt;With n = 0, this acts as identity function.&lt;/p&gt;
&lt;p&gt;In types: (a -&amp;gt; a) -&amp;gt; Int -&amp;gt; a -&amp;gt; a.&lt;/p&gt;
&lt;p&gt;This function satisfies the following law:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(funcall (-iteratefn fn n) init) = (-last-item (-iterate fn init (1+ n))).
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;funcall&lt;/span&gt; (-iteratefn (&lt;span class="pl-k"&gt;lambda&lt;/span&gt; (&lt;span class="pl-v"&gt;x&lt;/span&gt;) (&lt;span class="pl-k"&gt;*&lt;/span&gt; x x)) &lt;span class="pl-c1"&gt;3&lt;/span&gt;) &lt;span class="pl-c1"&gt;2&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; 256&lt;/span&gt;
(&lt;span class="pl-k"&gt;funcall&lt;/span&gt; (-iteratefn &lt;span class="pl-c1"&gt;'1+&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;) &lt;span class="pl-c1"&gt;1&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; 4&lt;/span&gt;
(&lt;span class="pl-k"&gt;funcall&lt;/span&gt; (-iteratefn &lt;span class="pl-c1"&gt;'cdr&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;) '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(4 5)&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--fixfn-fn-optional-equal-test-halt-test" class="anchor" aria-hidden="true" href="#-fixfn-fn-optional-equal-test-halt-test"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-fixfn &lt;code&gt;(fn &amp;amp;optional equal-test halt-test)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Return a function that computes the (least) fixpoint of &lt;code&gt;fn&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;fn&lt;/code&gt; must be a unary function. The returned lambda takes a single
argument, &lt;code&gt;x&lt;/code&gt;, the initial value for the fixpoint iteration. The
iteration halts when either of the following conditions is satisfied:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Iteration converges to the fixpoint, with equality being
tested using &lt;code&gt;equal-test&lt;/code&gt;. If &lt;code&gt;equal-test&lt;/code&gt; is not specified,
&lt;code&gt;equal&lt;/code&gt; is used. For functions over the floating point
numbers, it may be necessary to provide an appropriate
appoximate comparison test.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;halt-test&lt;/code&gt; returns a non-nil value. &lt;code&gt;halt-test&lt;/code&gt; defaults to a
simple counter that returns t after &lt;code&gt;-fixfn-max-iterations&lt;/code&gt;,
to guard against infinite iteration. Otherwise, &lt;code&gt;halt-test&lt;/code&gt;
must be a function that accepts a single argument, the
current value of &lt;code&gt;x&lt;/code&gt;, and returns non-nil as long as iteration
should continue. In this way, a more sophisticated
convergence test may be supplied by the caller.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The return value of the lambda is either the fixpoint or, if
iteration halted before converging, a cons with car &lt;code&gt;halted&lt;/code&gt; and
cdr the final output from &lt;code&gt;halt-test&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In types: (a -&amp;gt; a) -&amp;gt; a -&amp;gt; a.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;funcall&lt;/span&gt; (-fixfn &lt;span class="pl-c1"&gt;'cos&lt;/span&gt; &lt;span class="pl-c1"&gt;'approx-equal&lt;/span&gt;) &lt;span class="pl-c1"&gt;0.7&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; ~&amp;gt; 0.7390851332151607&lt;/span&gt;
(&lt;span class="pl-k"&gt;funcall&lt;/span&gt; (-fixfn (&lt;span class="pl-k"&gt;lambda&lt;/span&gt; (&lt;span class="pl-v"&gt;x&lt;/span&gt;) (&lt;span class="pl-c1"&gt;expt&lt;/span&gt; (&lt;span class="pl-k"&gt;+&lt;/span&gt; x &lt;span class="pl-c1"&gt;10&lt;/span&gt;) &lt;span class="pl-c1"&gt;0.25&lt;/span&gt;))) &lt;span class="pl-c1"&gt;2.0&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; 1.8555845286409378&lt;/span&gt;
(&lt;span class="pl-k"&gt;funcall&lt;/span&gt; (-fixfn &lt;span class="pl-c1"&gt;'sin&lt;/span&gt; &lt;span class="pl-c1"&gt;'approx-equal&lt;/span&gt;) &lt;span class="pl-c1"&gt;0.1&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(halted . t)&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content--prodfn-rest-fns" class="anchor" aria-hidden="true" href="#-prodfn-rest-fns"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;-prodfn &lt;code&gt;(&amp;amp;rest fns)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Take a list of n functions and return a function that takes a
list of length n, applying i-th function to i-th element of the
input list.  Returns a list of length n.&lt;/p&gt;
&lt;p&gt;In types (for n=2): ((a -&amp;gt; b), (c -&amp;gt; d)) -&amp;gt; (a, c) -&amp;gt; (b, d)&lt;/p&gt;
&lt;p&gt;This function satisfies the following laws:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(-compose (-prodfn f g ...) (-prodfn f' g' ...)) = (-prodfn (-compose f f') (-compose g g') ...)
(-prodfn f g ...) = (-juxt (-compose f (-partial 'nth 0)) (-compose g (-partial 'nth 1)) ...)
(-compose (-prodfn f g ...) (-juxt f' g' ...)) = (-juxt (-compose f f') (-compose g g') ...)
(-compose (-partial 'nth n) (-prod f1 f2 ...)) = (-compose fn (-partial 'nth n))
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;funcall&lt;/span&gt; (-prodfn &lt;span class="pl-c1"&gt;'1+&lt;/span&gt; &lt;span class="pl-c1"&gt;'1-&lt;/span&gt; &lt;span class="pl-c1"&gt;'number-to-string&lt;/span&gt;) '(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(2 1 "3")&lt;/span&gt;
(-map (-prodfn &lt;span class="pl-c1"&gt;'1+&lt;/span&gt; &lt;span class="pl-c1"&gt;'1-&lt;/span&gt;) '((&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;) (&lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;) (&lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-c1"&gt;6&lt;/span&gt;) (&lt;span class="pl-c1"&gt;7&lt;/span&gt; &lt;span class="pl-c1"&gt;8&lt;/span&gt;))) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '((2 1) (4 3) (6 5) (8 7))&lt;/span&gt;
(&lt;span class="pl-k"&gt;apply&lt;/span&gt; &lt;span class="pl-c1"&gt;'+&lt;/span&gt; (&lt;span class="pl-k"&gt;funcall&lt;/span&gt; (-prodfn &lt;span class="pl-c1"&gt;'length&lt;/span&gt; &lt;span class="pl-c1"&gt;'string-to-number&lt;/span&gt;) '((&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;) &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;15&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; 18&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-contribute" class="anchor" aria-hidden="true" href="#contribute"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contribute&lt;/h2&gt;
&lt;p&gt;Yes, please do. Pure functions in the list manipulation realm only,
please. There's a suite of tests in &lt;code&gt;dev/examples.el&lt;/code&gt;, so remember to add
tests for your function, or I might break it later.&lt;/p&gt;
&lt;p&gt;You'll find the repo at:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;https://github.com/magnars/dash.el
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Run the tests with&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./run-tests.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Create the docs with&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./create-docs.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I highly recommend that you install these as a pre-commit hook, so that
the tests are always running and the docs are always in sync:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cp pre-commit.sh .git/hooks/pre-commit
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Oh, and don't edit &lt;code&gt;README.md&lt;/code&gt; directly, it is auto-generated.
Change &lt;code&gt;readme-template.md&lt;/code&gt; or &lt;code&gt;examples-to-docs.el&lt;/code&gt; instead.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-changelist" class="anchor" aria-hidden="true" href="#changelist"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Changelist&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-from-215-to-216" class="anchor" aria-hidden="true" href="#from-215-to-216"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;From 2.15 to 2.16&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Added &lt;code&gt;--doto&lt;/code&gt;, anaphoric version of &lt;code&gt;-doto&lt;/code&gt; (#282)&lt;/li&gt;
&lt;li&gt;Aliased &lt;code&gt;-cons-pair-p&lt;/code&gt; to &lt;code&gt;-cons-pair?&lt;/code&gt;(#288)&lt;/li&gt;
&lt;li&gt;Generalized &lt;code&gt;-rotate&lt;/code&gt; for |n| greater than the length of the list (@leungbk, #290)&lt;/li&gt;
&lt;li&gt;Added a mechanism to extend destructuring with custom matchers (@yyoncho, #277)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-from-214-to-215" class="anchor" aria-hidden="true" href="#from-214-to-215"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;From 2.14 to 2.15&lt;/h3&gt;
&lt;p&gt;This release brings new destructuring features, some new control flow
functions and performance optimizations.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Added &lt;code&gt;-setq&lt;/code&gt; with destructuring binding support similar to &lt;code&gt;-let&lt;/code&gt; family (&lt;a href="https://github.com/magnars/dash.el/issues/116"&gt;#116&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Added smarter key destructuring in &lt;code&gt;-let&lt;/code&gt; and friends where variables are auto-derived from keys (&lt;a href="https://github.com/magnars/dash.el/issues/111"&gt;#111&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Allow &lt;code&gt;-let&lt;/code&gt; bindings with place only (&lt;a href="https://github.com/magnars/dash.el/issues/256"&gt;#256&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Added &lt;code&gt;-each-r&lt;/code&gt; and &lt;code&gt;-each-r-while&lt;/code&gt; (@doublep, &lt;a href="https://github.com/magnars/dash.el/issues/159"&gt;#159&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Added &lt;code&gt;-common-suffix&lt;/code&gt; (@basil-conto, &lt;a href="https://github.com/magnars/dash.el/issues/263"&gt;#263&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Improved performance of folds (&lt;code&gt;-reduce&lt;/code&gt; and friends) (@basil-conto, &lt;a href="https://github.com/magnars/dash.el/issues/264"&gt;#264&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-from-213-to-214" class="anchor" aria-hidden="true" href="#from-213-to-214"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;From 2.13 to 2.14&lt;/h3&gt;
&lt;p&gt;This release retires Emacs 23 support.  We will still try to keep
things compatible but no future guarantees are made.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Added edebug support for threading macros (@Wilfred)&lt;/li&gt;
&lt;li&gt;Added &lt;code&gt;-unzip&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Added gv setters for &lt;code&gt;-first-item&lt;/code&gt; and &lt;code&gt;-last-item&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Added &lt;code&gt;-powerset&lt;/code&gt; and &lt;code&gt;-permutations&lt;/code&gt; (@holomorph)&lt;/li&gt;
&lt;li&gt;Added &lt;code&gt;-as-&amp;gt;&lt;/code&gt; for threading a named variable (@zck)&lt;/li&gt;
&lt;li&gt;Added &lt;code&gt;-partition-after-pred&lt;/code&gt;, &lt;code&gt;-partition-before-pred&lt;/code&gt;, &lt;code&gt;-partition-after-item&lt;/code&gt;, &lt;code&gt;-partition-before-item&lt;/code&gt; (@zck)&lt;/li&gt;
&lt;li&gt;Fixed a bug in &lt;code&gt;-any-p&lt;/code&gt; and friends testing for &lt;code&gt;null&lt;/code&gt; on lists containing &lt;code&gt;nil&lt;/code&gt; (#239)&lt;/li&gt;
&lt;li&gt;Fixed infinite loop bug in &lt;code&gt;-zip&lt;/code&gt; and &lt;code&gt;-interleave&lt;/code&gt; when called with empty input.&lt;/li&gt;
&lt;li&gt;Added &lt;code&gt;-second-item&lt;/code&gt; through to &lt;code&gt;-fifth-item&lt;/code&gt; as an alternative to &lt;code&gt;nth&lt;/code&gt; (@Wilfred)&lt;/li&gt;
&lt;li&gt;Added &lt;code&gt;-tails&lt;/code&gt; and &lt;code&gt;-inits&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Added &lt;code&gt;-running-sum&lt;/code&gt; and &lt;code&gt;-running-product&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Added &lt;code&gt;-reductions[-r][-from]&lt;/code&gt; family of functions (like &lt;code&gt;-reduce&lt;/code&gt; but collecting intermediate results)&lt;/li&gt;
&lt;li&gt;Added &lt;code&gt;-common-prefix&lt;/code&gt; (@basil-conto)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-from-212-to-213" class="anchor" aria-hidden="true" href="#from-212-to-213"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;From 2.12 to 2.13&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-let&lt;/code&gt; now supports &lt;code&gt;&amp;amp;alist&lt;/code&gt; in destructuring.&lt;/li&gt;
&lt;li&gt;Various performance improvements.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-zip&lt;/code&gt; will change in future so it always returns lists. Added
&lt;code&gt;-zip-pair&lt;/code&gt; for users who explicitly want the old behavior.&lt;/li&gt;
&lt;li&gt;Added lexical binding pragma to dash.el, fixes
&lt;a href="https://github.com/magnars/dash.el/issues/130"&gt;#130&lt;/a&gt; in Emacs 24+.&lt;/li&gt;
&lt;li&gt;Added &lt;code&gt;-select-column&lt;/code&gt; and &lt;code&gt;-select-columns&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Fixed an issue with &lt;code&gt;-map-last&lt;/code&gt; and &lt;code&gt;--remove-last&lt;/code&gt; where they
modified their inputs
(&lt;a href="https://github.com/magnars/dash.el/issues/158"&gt;#158&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Added &lt;code&gt;-each-indexed&lt;/code&gt; and &lt;code&gt;--each-indexed&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Added &lt;code&gt;-take-last&lt;/code&gt; and &lt;code&gt;-drop-last&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Added &lt;code&gt;-doto&lt;/code&gt; macro.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-cut &amp;lt;&amp;gt;&lt;/code&gt; is now treated as a function, consistent with SRFI 26
(&lt;a href="https://github.com/magnars/dash.el/issues/185"&gt;#185&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-from-211-to-212" class="anchor" aria-hidden="true" href="#from-211-to-212"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;From 2.11 to 2.12&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Add GNU ELPA support. (Phillip Lord)&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;-some-&amp;gt;&lt;/code&gt;, &lt;code&gt;-some-&amp;gt;&amp;gt;&lt;/code&gt;, and &lt;code&gt;-some--&amp;gt;&lt;/code&gt; macros. (Cam Saul)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-is-suffix?&lt;/code&gt; no longer destroys input list.&lt;/li&gt;
&lt;li&gt;Faster hashtable implementation for &lt;code&gt;-union&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Improvements to docstrings and examples&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-from-210-to-211" class="anchor" aria-hidden="true" href="#from-210-to-211"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;From 2.10 to 2.11&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Lots of clean up wrt byte compilation, debug macros and tests&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-from-29-to-210" class="anchor" aria-hidden="true" href="#from-29-to-210"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;From 2.9 to 2.10&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Add &lt;code&gt;-let&lt;/code&gt; destructuring to &lt;code&gt;-if-let&lt;/code&gt; and &lt;code&gt;-when-let&lt;/code&gt; (Fredrik Bergroth)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-from-28-to-29" class="anchor" aria-hidden="true" href="#from-28-to-29"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;From 2.8 to 2.9&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Add &lt;code&gt;-let&lt;/code&gt;, &lt;code&gt;-let*&lt;/code&gt; and &lt;code&gt;-lambda&lt;/code&gt; with destructuring&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;-tree-seq&lt;/code&gt; and &lt;code&gt;-tree-map-nodes&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;-non-nil&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;-fix&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;-fixfn&lt;/code&gt; (dash-functional 1.2)&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;-copy&lt;/code&gt; (Wilfred Hughes)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-from-27-to-28" class="anchor" aria-hidden="true" href="#from-27-to-28"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;From 2.7 to 2.8&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Add &lt;code&gt;-butlast&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-from-26-to-27" class="anchor" aria-hidden="true" href="#from-26-to-27"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;From 2.6 to 2.7&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-zip&lt;/code&gt; now supports more than two lists (Steve Lamb)&lt;/li&gt;
&lt;li&gt;Add  &lt;code&gt;-cycle&lt;/code&gt; ,  &lt;code&gt;-pad&lt;/code&gt; ,  &lt;code&gt;-annotate&lt;/code&gt; ,  &lt;code&gt;-zip-fill&lt;/code&gt; (Steve Lamb)&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;-table&lt;/code&gt;, &lt;code&gt;-table-flat&lt;/code&gt; (finite cartesian product)&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;-flatten-n&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-slice&lt;/code&gt; now supports "step" argument&lt;/li&gt;
&lt;li&gt;Add functional combinators &lt;code&gt;-iteratefn&lt;/code&gt;, &lt;code&gt;-prodfn&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;-replace&lt;/code&gt;, &lt;code&gt;-splice&lt;/code&gt;, &lt;code&gt;-splice-list&lt;/code&gt; which generalize &lt;code&gt;-replace-at&lt;/code&gt; and &lt;code&gt;-insert-at&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;-compose&lt;/code&gt;, &lt;code&gt;-iteratefn&lt;/code&gt; and &lt;code&gt;-prodfn&lt;/code&gt; (dash-functional 1.1)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-from-25-to-26" class="anchor" aria-hidden="true" href="#from-25-to-26"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;From 2.5 to 2.6&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Add &lt;code&gt;-is-prefix-p&lt;/code&gt;, &lt;code&gt;-is-suffix-p&lt;/code&gt;, &lt;code&gt;-is-infix-p&lt;/code&gt; (Matus Goljer)&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;-iterate&lt;/code&gt;, &lt;code&gt;-unfold&lt;/code&gt; (Matus Goljer)&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;-split-on&lt;/code&gt;, &lt;code&gt;-split-when&lt;/code&gt; (Matus Goljer)&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;-find-last-index&lt;/code&gt; (Matus Goljer)&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;-list&lt;/code&gt; (Johan Andersson)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-from-24-to-25" class="anchor" aria-hidden="true" href="#from-24-to-25"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;From 2.4 to 2.5&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Add &lt;code&gt;-same-items?&lt;/code&gt; (Johan Andersson)&lt;/li&gt;
&lt;li&gt;A few bugfixes&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-from-23-to-24" class="anchor" aria-hidden="true" href="#from-23-to-24"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;From 2.3 to 2.4&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Add &lt;code&gt;-snoc&lt;/code&gt; (Matus Goljer)&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;-replace-at&lt;/code&gt;, &lt;code&gt;-update-at&lt;/code&gt;, &lt;code&gt;-remove-at&lt;/code&gt;, and &lt;code&gt;-remove-at-indices&lt;/code&gt; (Matus Goljer)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-from-22-to-23" class="anchor" aria-hidden="true" href="#from-22-to-23"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;From 2.2 to 2.3&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Add tree operations (Matus Goljer)&lt;/li&gt;
&lt;li&gt;Make font-lock optional&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-from-21-to-22" class="anchor" aria-hidden="true" href="#from-21-to-22"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;From 2.1 to 2.2&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Add &lt;code&gt;-compose&lt;/code&gt; (Christina Whyte)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-from-20-to-21" class="anchor" aria-hidden="true" href="#from-20-to-21"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;From 2.0 to 2.1&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Add indexing operations (Matus Goljer)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-from-18-to-20" class="anchor" aria-hidden="true" href="#from-18-to-20"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;From 1.8 to 2.0&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Split out &lt;code&gt;dash-functional.el&lt;/code&gt; (Matus Goljer)&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;-andfn&lt;/code&gt;, &lt;code&gt;-orfn&lt;/code&gt;, &lt;code&gt;-not&lt;/code&gt;, &lt;code&gt;-cut&lt;/code&gt;, &lt;code&gt;-const&lt;/code&gt;, &lt;code&gt;-flip&lt;/code&gt; and &lt;code&gt;-on&lt;/code&gt;. (Matus Goljer)&lt;/li&gt;
&lt;li&gt;Fix &lt;code&gt;-min&lt;/code&gt;, &lt;code&gt;-max&lt;/code&gt;, &lt;code&gt;-min-by&lt;/code&gt; and &lt;code&gt;-max-by&lt;/code&gt; (Matus Goljer)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-from-17-to-18" class="anchor" aria-hidden="true" href="#from-17-to-18"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;From 1.7 to 1.8&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Add &lt;code&gt;-first-item&lt;/code&gt; and &lt;code&gt;-last-item&lt;/code&gt; (Wilfred Hughes)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-from-16-to-17" class="anchor" aria-hidden="true" href="#from-16-to-17"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;From 1.6 to 1.7&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Add &lt;code&gt;-rotate&lt;/code&gt; (Matus Goljer)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-from-15-to-16" class="anchor" aria-hidden="true" href="#from-15-to-16"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;From 1.5 to 1.6&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Add &lt;code&gt;-min&lt;/code&gt;, &lt;code&gt;-max&lt;/code&gt;, &lt;code&gt;-min-by&lt;/code&gt; and &lt;code&gt;-max-by&lt;/code&gt; (Johan Andersson)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-from-14-to-15" class="anchor" aria-hidden="true" href="#from-14-to-15"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;From 1.4 to 1.5&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Add &lt;code&gt;-sum&lt;/code&gt; and &lt;code&gt;-product&lt;/code&gt; (Johan Andersson)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-from-13-to-14" class="anchor" aria-hidden="true" href="#from-13-to-14"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;From 1.3 to 1.4&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Add &lt;code&gt;-sort&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;-reduce-r&lt;/code&gt; (Matus Goljer)&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;-reduce-r-from&lt;/code&gt; (Matus Goljer)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-from-12-to-13" class="anchor" aria-hidden="true" href="#from-12-to-13"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;From 1.2 to 1.3&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Add &lt;code&gt;-partition-in-steps&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;-partition-all-in-steps&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-from-11-to-12" class="anchor" aria-hidden="true" href="#from-11-to-12"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;From 1.1 to 1.2&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Add &lt;code&gt;-last&lt;/code&gt; (Matus Goljer)&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;-insert-at&lt;/code&gt; (Emanuel Evans)&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;-when-let&lt;/code&gt; and &lt;code&gt;-if-let&lt;/code&gt; (Emanuel Evans)&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;-when-let*&lt;/code&gt; and &lt;code&gt;-if-let*&lt;/code&gt; (Emanuel Evans)&lt;/li&gt;
&lt;li&gt;Some bugfixes&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-contributors" class="anchor" aria-hidden="true" href="#contributors"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contributors&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Fuco1"&gt;Matus Goljer&lt;/a&gt; contributed lots of features and functions.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/tkf"&gt;Takafumi Arakaki&lt;/a&gt; contributed &lt;code&gt;-group-by&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/tali713"&gt;tali713&lt;/a&gt; is the author of &lt;code&gt;-applify&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/vemv"&gt;Víctor M. Valenzuela&lt;/a&gt; contributed &lt;code&gt;-repeat&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/nicferrier"&gt;Nic Ferrier&lt;/a&gt; contributed &lt;code&gt;-cons*&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Wilfred"&gt;Wilfred Hughes&lt;/a&gt; contributed &lt;code&gt;-slice&lt;/code&gt;, &lt;code&gt;-first-item&lt;/code&gt; and &lt;code&gt;-last-item&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/shosti"&gt;Emanuel Evans&lt;/a&gt; contributed &lt;code&gt;-if-let&lt;/code&gt;, &lt;code&gt;-when-let&lt;/code&gt; and &lt;code&gt;-insert-at&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rejeep"&gt;Johan Andersson&lt;/a&gt; contributed &lt;code&gt;-sum&lt;/code&gt;, &lt;code&gt;-product&lt;/code&gt; and &lt;code&gt;-same-items?&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/kurisuwhyte"&gt;Christina Whyte&lt;/a&gt; contributed &lt;code&gt;-compose&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/steventlamb"&gt;Steve Lamb&lt;/a&gt; contributed &lt;code&gt;-cycle&lt;/code&gt;, &lt;code&gt;-pad&lt;/code&gt;, &lt;code&gt;-annotate&lt;/code&gt;, &lt;code&gt;-zip-fill&lt;/code&gt; and an n-ary version of &lt;code&gt;-zip&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/fbergroth"&gt;Fredrik Bergroth&lt;/a&gt; made the &lt;code&gt;-if-let&lt;/code&gt; family use &lt;code&gt;-let&lt;/code&gt; destructuring and improved script for generating documentation.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/holomorph"&gt;Mark Oteiza&lt;/a&gt; contributed the script to create an info manual.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/wasamasa"&gt;Vasilij Schneidermann&lt;/a&gt; contributed &lt;code&gt;-some&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/occidens"&gt;William West&lt;/a&gt; made &lt;code&gt;-fixfn&lt;/code&gt; more robust at handling floats.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/camsaul"&gt;Cam Saül&lt;/a&gt; contributed &lt;code&gt;-some-&amp;gt;&lt;/code&gt;, &lt;code&gt;-some-&amp;gt;&amp;gt;&lt;/code&gt;, and &lt;code&gt;-some--&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/basil-conto"&gt;Basil L. Contovounesios&lt;/a&gt; contributed &lt;code&gt;-common-prefix&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/doublep"&gt;Paul Pogonyshev&lt;/a&gt; contributed &lt;code&gt;-each-r&lt;/code&gt; and &lt;code&gt;-each-r-while&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thanks!&lt;/p&gt;
&lt;p&gt;New contributors are welcome. To ensure that dash.el can be
distributed with ELPA or Emacs, we would request that all contributors
assign copyright to the Free Software Foundation.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-license" class="anchor" aria-hidden="true" href="#license"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;License&lt;/h2&gt;
&lt;p&gt;Copyright (C) 2012-2016 Free Software Foundation, Inc.&lt;/p&gt;
&lt;p&gt;Authors: Magnar Sveen &lt;a href="mailto:magnars@gmail.com"&gt;magnars@gmail.com&lt;/a&gt;
Keywords: lists&lt;/p&gt;
&lt;p&gt;This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.&lt;/p&gt;
&lt;p&gt;This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.&lt;/p&gt;
&lt;p&gt;You should have received a copy of the GNU General Public License
along with this program.  If not, see &lt;a href="http://www.gnu.org/licenses/" rel="nofollow"&gt;http://www.gnu.org/licenses/&lt;/a&gt;.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>magnars</author><guid isPermaLink="false">https://github.com/magnars/dash.el</guid><pubDate>Tue, 26 Nov 2019 00:11:00 GMT</pubDate></item><item><title>magit/with-editor #12 in Emacs Lisp, Today</title><link>https://github.com/magit/with-editor</link><description>&lt;p&gt;&lt;i&gt;Use the Emacsclient as the $EDITOR of child processes&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-with-editor" class="anchor" aria-hidden="true" href="#with-editor"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;With-Editor&lt;/h1&gt;
&lt;p&gt;This library makes it possible to reliably use the Emacsclient as
the &lt;code&gt;$EDITOR&lt;/code&gt; of child processes.  It makes sure that they know how
to call home.  For remote processes a substitute is provided, which
communicates with Emacs on standard output/input instead of using a
socket as the Emacsclient does.&lt;/p&gt;
&lt;p&gt;It provides the commands &lt;code&gt;with-editor-async-shell-command&lt;/code&gt; and
&lt;code&gt;with-editor-shell-command&lt;/code&gt;, which are intended as replacements
for &lt;code&gt;async-shell-command&lt;/code&gt; and &lt;code&gt;shell-command&lt;/code&gt;.  They automatically
export &lt;code&gt;$EDITOR&lt;/code&gt; making sure the executed command uses the current
Emacs instance as "the editor".  With a prefix argument these
commands prompt for an alternative environment variable such as
&lt;code&gt;$GIT_EDITOR&lt;/code&gt;.  To always use these variants add this to your init
file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(define-key (current-global-map)
  [remap async-shell-command] 'with-editor-async-shell-command)
(define-key (current-global-map)
  [remap shell-command] 'with-editor-shell-command)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Alternatively use the global &lt;code&gt;shell-command-with-editor-mode&lt;/code&gt;,
which always sets &lt;code&gt;$EDITOR&lt;/code&gt; for all Emacs commands which ultimately
use &lt;code&gt;shell-command&lt;/code&gt; to asynchronously run some shell command.&lt;/p&gt;
&lt;p&gt;The command &lt;code&gt;with-editor-export-editor&lt;/code&gt; exports &lt;code&gt;$EDITOR&lt;/code&gt; or
another such environment variable in &lt;code&gt;shell-mode&lt;/code&gt;, &lt;code&gt;term-mode&lt;/code&gt; and
&lt;code&gt;eshell-mode&lt;/code&gt; buffers.  Use this Emacs command before executing a
shell command which needs the editor set, or always arrange for the
current Emacs instance to be used as editor by adding it to the
appropriate mode hooks:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(add-hook 'shell-mode-hook  'with-editor-export-editor)
(add-hook 'term-exec-hook   'with-editor-export-editor)
(add-hook 'eshell-mode-hook 'with-editor-export-editor)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Some variants of this function exist, these two forms are
equivalent:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(add-hook 'shell-mode-hook
          (apply-partially 'with-editor-export-editor "GIT_EDITOR"))
(add-hook 'shell-mode-hook 'with-editor-export-git-editor)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This library can also be used by other packages which need to use
the current Emacs instance as editor.  In fact this library was
written for Magit and its &lt;code&gt;git-commit-mode&lt;/code&gt; and &lt;code&gt;git-rebase-mode&lt;/code&gt;.
Consult &lt;code&gt;git-rebase.el&lt;/code&gt; and the related code in &lt;code&gt;magit-sequence.el&lt;/code&gt;
for a simple example.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>magit</author><guid isPermaLink="false">https://github.com/magit/with-editor</guid><pubDate>Tue, 26 Nov 2019 00:12:00 GMT</pubDate></item><item><title>magit/ghub #13 in Emacs Lisp, Today</title><link>https://github.com/magit/ghub</link><description>&lt;p&gt;&lt;i&gt;Client libraries for the APIs of various Git forges&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-ghub--minuscule-client-libraries-for-the-apis-of-various-git-forges" class="anchor" aria-hidden="true" href="#ghub--minuscule-client-libraries-for-the-apis-of-various-git-forges"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Ghub — Minuscule client libraries for the APIs of various Git forges&lt;/h1&gt;
&lt;p&gt;Ghub provides basic support for using the APIs of various Git forges
from Emacs packages.  Originally it only supported the Github REST
API, but now it also supports the Github GraphQL API as well as the
REST APIs of Gitlab, Gitea, Gogs and Bitbucket.&lt;/p&gt;
&lt;p&gt;Ghub abstracts access to API resources using only a handful of basic
functions such as &lt;code&gt;ghub-get&lt;/code&gt;.  These are convenience wrappers around
&lt;code&gt;ghub-request&lt;/code&gt;.  Additional forge-specific wrappers like &lt;code&gt;glab-put&lt;/code&gt;,
&lt;code&gt;gtea-put&lt;/code&gt;, &lt;code&gt;gogs-post&lt;/code&gt; and &lt;code&gt;buck-delete&lt;/code&gt; are also available.  Ghub
does not provide any resource-specific functions, with the exception
of &lt;code&gt;FORGE-repository-id&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;When accessing Github, then Ghub handles the creation and storage of
access tokens using a setup wizard to make it easier for users to get
started.  The tokens for other forges have to be created manually.&lt;/p&gt;
&lt;p&gt;Ghub is intentionally limited to only provide these two essential
features — basic request functions and guided setup — to avoid being
too opinionated, which would hinder wide adoption.  It is assumed that
wide adoption would make life easier for users and maintainers alike,
because then all packages that talk to forge APIs could be configured
the same way.&lt;/p&gt;
&lt;p&gt;Please consult the &lt;a href="https://magit.vc/manual/ghub" rel="nofollow"&gt;manual&lt;/a&gt; for more
information.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>magit</author><guid isPermaLink="false">https://github.com/magit/ghub</guid><pubDate>Tue, 26 Nov 2019 00:13:00 GMT</pubDate></item><item><title>noctuid/general.el #14 in Emacs Lisp, Today</title><link>https://github.com/noctuid/general.el</link><description>&lt;p&gt;&lt;i&gt;More convenient key definitions in emacs&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body org" data-path="README.org"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-general-user-manual" class="anchor" aria-hidden="true" href="#general-user-manual"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;General User Manual&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://melpa.org/#/general" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/be373599d758041a30afb4c4950c3b079df4e161/68747470733a2f2f6d656c70612e6f72672f7061636b616765732f67656e6572616c2d62616467652e737667" alt="https://melpa.org/packages/general-badge.svg" data-canonical-src="https://melpa.org/packages/general-badge.svg" style="max-width:100%;"&gt;&lt;/a&gt; &lt;a href="https://travis-ci.org/noctuid/general.el" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/96076fda3f94775bd571802af47e2710f26a0ad6/68747470733a2f2f7472617669732d63692e6f72672f6e6f63747569642f67656e6572616c2e656c2e7376673f6272616e63683d6d6173746572" alt="https://travis-ci.org/noctuid/general.el.svg?branch=master" data-canonical-src="https://travis-ci.org/noctuid/general.el.svg?branch=master" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/noctuid/general.el"&gt;&lt;img src="https://camo.githubusercontent.com/b1298535828025bd6dada5abbb8661b43c7c7785/687474703a2f2f692e696d6775722e636f6d2f535841363679372e706e67" alt="http://i.imgur.com/SXA66y7.png" data-canonical-src="http://i.imgur.com/SXA66y7.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;A general is a leader. – onioncheese&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;&lt;a id="user-content-recent-breaking-changes" class="anchor" aria-hidden="true" href="#recent-breaking-changes"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Recent Breaking Changes&lt;/h1&gt;
&lt;h2&gt;&lt;a id="user-content-2018-01-21-general-default--variables-are-obsolete" class="anchor" aria-hidden="true" href="#2018-01-21-general-default--variables-are-obsolete"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2018-01-21 &lt;code&gt;general-default-...&lt;/code&gt; variables are obsolete&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;general-default-prefix&lt;/code&gt;, &lt;code&gt;general-default-non-normal-prefix&lt;/code&gt;, &lt;code&gt;general-default-global-prefix&lt;/code&gt;, &lt;code&gt;general-default-states&lt;/code&gt;, and &lt;code&gt;general-default-keymaps&lt;/code&gt; still work. However, they will eventually be removed, so please switch to using &lt;code&gt;general-create-definer&lt;/code&gt; if you want to use a definer with different defaults.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-2018-01-20-general-create-vim-definer-and-general-create-dual-vim-definer-have-been-removed" class="anchor" aria-hidden="true" href="#2018-01-20-general-create-vim-definer-and-general-create-dual-vim-definer-have-been-removed"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2018-01-20 &lt;code&gt;general-create-vim-definer&lt;/code&gt; and &lt;code&gt;general-create-dual-vim-definer&lt;/code&gt; have been removed&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;general-create-definer&lt;/code&gt; should now be used instead as it is now capable of the same functionality (&lt;code&gt;general-evil-setup&lt;/code&gt; now uses it). Additionally, &lt;code&gt;general-vim-definer-default&lt;/code&gt; is obsolete and will be removed eventually. The second argument to &lt;code&gt;general-evil-setup&lt;/code&gt; is no longer used and will also be removed eventually. The vim definers will now always set the default &lt;code&gt;:states&lt;/code&gt; (and never the default &lt;code&gt;:keymaps&lt;/code&gt;) because of the change below.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-2018-01-20-states-normal-is-now-the-same-as-keymaps-normal" class="anchor" aria-hidden="true" href="#2018-01-20-states-normal-is-now-the-same-as-keymaps-normal"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2018-01-20 &lt;code&gt;:states 'normal&lt;/code&gt; is now the same as &lt;code&gt;:keymaps 'normal&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;:keymaps 'global :states 'normal&lt;/code&gt; will now bind in &lt;code&gt;evil-normal-state-keymap&lt;/code&gt; as opposed to the normal state auxiliary keymap of &lt;code&gt;(current-global-map)&lt;/code&gt; (see &lt;a href="#note-for-evil-users"&gt;Note for Evil Users&lt;/a&gt;). It is not recommended to bind in a state and &lt;code&gt;(current-global-map)&lt;/code&gt;. If you want to prevent certain keys from being overridden, please use evil intercept keymaps instead.&lt;/p&gt;
&lt;p&gt;If you update general, please make sure that you are also using a recent version of evil.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-2018-01-20-general-simulate-keys-is-now-obsolete" class="anchor" aria-hidden="true" href="#2018-01-20-general-simulate-keys-is-now-obsolete"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2018-01-20: &lt;code&gt;general-simulate-keys&lt;/code&gt; is now obsolete&lt;/h2&gt;
&lt;p&gt;Please switch to &lt;code&gt;general-key&lt;/code&gt; or &lt;code&gt;general-simulate-key&lt;/code&gt;. Note that keyword arguments have replaced the positional arguments of &lt;code&gt;general-simulate-keys&lt;/code&gt;. &lt;code&gt;general-simulate-keys&lt;/code&gt; will likely be removed sometime in the future.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-table-of-contents" class="anchor" aria-hidden="true" href="#table-of-contents"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Table of Contents&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="#about"&gt;About&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="#dependency-versions"&gt;Dependency Versions&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="#key-features"&gt;Key Features&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="#reading-recommendations"&gt;Reading Recommendations&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="#usage-recommendations-and-documentation-clarifications"&gt;Usage Recommendations and Documentation Clarifications&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="#basic-examples"&gt;Basic Examples&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href="#general-examples"&gt;General Examples&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#evil-examples"&gt;Evil Examples&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#switching-completely-to-general"&gt;Switching Completely to General&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href="#general-define-key-details"&gt;~general-define-key~ Details&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href="#definitions"&gt;Definitions&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#keyword-arguments"&gt;Keyword Arguments&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href="#predicates"&gt;Predicates&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href="#keymapstate-aliases"&gt;Keymap/State Aliases&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#general-define-key-wrappers"&gt;~general-define-key~ Wrappers&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href="#positional-argument-wrappers"&gt;Positional Argument Wrappers&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href="#mass-key-unbinding-wrapper"&gt;Mass Key Unbinding Wrapper&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href="#creating-new-key-definers"&gt;Creating New Key Definers&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href="#vim-like-definers"&gt;Vim-like Definers&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href="#note-for-evil-users"&gt;Note for Evil Users&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href="#override-keymaps-and-buffer-local-keybindings"&gt;Override Keymaps and Buffer Local Keybindings&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="#displaying-keybindings"&gt;Displaying Keybindings&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="#functionsmacros-to-aid-key-definition"&gt;Functions/Macros to Aid Key Definition&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href="#disclaimer"&gt;Disclaimer&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#simulating-keypresses"&gt;Simulating Keypresses&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#mapping-under-non-prefix-keys"&gt;Mapping Under Non-prefix Keys&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#choosing-definitions-based-on-predicates"&gt;Choosing Definitions Based on Predicates&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#key-translation"&gt;Key “Translation”&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#automatic-key-unbinding"&gt;Automatic Key Unbinding&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href="#non-keybinding-related-configuration-helpers"&gt;Non-keybinding-related Configuration Helpers&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href="#settings"&gt;Settings&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#hooks-and-advice"&gt;Hooks and Advice&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href="#integration-with-other-packages"&gt;Integration with Other Packages&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href="#use-package-keywords"&gt;Use-package Keywords&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href="#general-keyword"&gt;:general Keyword&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href="#hook-keywords"&gt;Hook Keywords&lt;/a&gt;
            &lt;ul&gt;
              &lt;li&gt;&lt;a href="#ghook-keyword"&gt;:ghook Keyword&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href="#gfhook-keyword"&gt;:gfhook Keyword&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href="#use-with-key-chord"&gt;Use with Key-chord&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href="#extended-definition-syntax"&gt;Extended Definition Syntax&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href="#autoloaded-keymaps"&gt;“Autoloaded” Keymaps&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#which-key-integration"&gt;Which Key Integration&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#evil-command-properties"&gt;Evil Command Properties&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#user-defined-extended-definition-keywords"&gt;User-defined Extended Definition Keywords&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href="#user-defined-key-definers"&gt;User-defined Key Definers&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href="#wrapping-evil-define-minor-mode-key"&gt;Wrapping ~evil-define-minor-mode-key~&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#lispy-integration-wrapping-lispy-define-key"&gt;Lispy Integration/ Wrapping ~lispy-define-key~&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#worf-integration-wrapping-worf-define-key"&gt;Worf Integration/ Wrapping ~worf-define-key~&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#other-provided-definers"&gt;Other Provided Definers&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href="#faq"&gt;FAQ&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href="#how-do-i-prevent-key-sequence-starts-with-non-prefix-key-errors"&gt;How do I prevent &lt;code&gt;Key sequence starts with non-prefix key&lt;/code&gt; errors?&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#why-dont-some-evil-keybindings-work-immediately"&gt;Why don’t some evil keybindings work (immediately)?&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;a id="user-content-about" class="anchor" aria-hidden="true" href="#about"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;About&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;general.el&lt;/code&gt; provides a more convenient method for binding keys in emacs (for both evil and non-evil users). Like &lt;code&gt;use-package&lt;/code&gt;, which provides a convenient, unified interface for managing packages, &lt;code&gt;general.el&lt;/code&gt; is intended to provide a convenient, unified interface for key definitions. While this package does implement some completely new functionality (such as the ability to make vim-style keybindings under non-prefix keys with an optional timeout), its primary purpose is to build on existing functionality to make key definition more clear and concise. &lt;code&gt;general-define-key&lt;/code&gt; is user-extensible and supports defining multiple keys in multiple keymaps at once, implicitly wrapping key strings with &lt;code&gt;(kbd ...)&lt;/code&gt;, using named prefix key sequences (like the leader key in vim), and much more.&lt;/p&gt;
&lt;p&gt;One advantage of using &lt;code&gt;general-define-key&lt;/code&gt; (or a wrapper for it) even in cases where its extra functionality isn’t necessary and doesn’t significantly improve brevity is that all keybindings are recorded and can be displayed later with &lt;code&gt;general-describe-keybindings&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This manual explains the most relevant parts of every &lt;code&gt;general.el&lt;/code&gt; feature. All user-facing functions, macros, and variables also have docstrings (e.g. accessible with &lt;code&gt;C-h f&lt;/code&gt; or &lt;code&gt;C-h v&lt;/code&gt;), so please consult these for further details.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-dependency-versions" class="anchor" aria-hidden="true" href="#dependency-versions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Dependency Versions&lt;/h1&gt;
&lt;p&gt;Please use MELPA and not MELPA stable for installing optional dependencies (e.g. evil and use-package). General may rely on functionality not in released versions for these packages, so if you are having trouble, please try updating them.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-key-features" class="anchor" aria-hidden="true" href="#key-features"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Key Features&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Provides a single function, &lt;code&gt;general-define-key&lt;/code&gt;, that is usable for all key definition; wrappers are provided as well&lt;/li&gt;
  &lt;li&gt;Does not hide important details of key definition (unlike &lt;code&gt;evil-leader.el&lt;/code&gt;); users should be familiar with &lt;code&gt;define-key&lt;/code&gt; and other definers (e.g. &lt;code&gt;evil-define-key(*)&lt;/code&gt; for evil users) before using this package&lt;/li&gt;
  &lt;li&gt;Uses a syntax similar to &lt;code&gt;setq&lt;/code&gt; for key definitions (like &lt;code&gt;evil-define-key&lt;/code&gt;, &lt;code&gt;bind-map&lt;/code&gt;, &lt;code&gt;evil-leader.el&lt;/code&gt;, etc.; unlike &lt;code&gt;bind-key&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Provides tight (and optional) integration with evil (unlike &lt;code&gt;bind-key&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;general-def&lt;/code&gt; can act as a drop-in replacement for the following definers (see the documentation below for a minor caveat) (unique):
    &lt;ul&gt;
      &lt;li&gt;&lt;code&gt;general-define-key&lt;/code&gt; and &lt;code&gt;global-set-key&lt;/code&gt; (no positional keymap argument)&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;define-key&lt;/code&gt; and &lt;code&gt;evil-global-set-key&lt;/code&gt; (positional argument for keymap)&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;evil-define-key&lt;/code&gt; (positional argument for state and keymap)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;With the &lt;code&gt;:definer&lt;/code&gt; keyword, &lt;code&gt;general-define-key&lt;/code&gt; can be extended to use any key definition function (e.g. &lt;code&gt;evil-define-minor-mode-key&lt;/code&gt;, &lt;code&gt;lispy-define-key&lt;/code&gt;, etc.) (unique)&lt;/li&gt;
  &lt;li&gt;With “extended” definitions, user-created keywords can be added globally (in &lt;code&gt;general-define-key&lt;/code&gt;) and locally (in an “extended” definition plist) to extend the behavior of &lt;code&gt;general-define-key&lt;/code&gt; (unique)&lt;/li&gt;
  &lt;li&gt;Allows binding keys in multiple keymaps/states at once (unlike &lt;code&gt;bind-key&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Automatically wraps string keys and definitions with &lt;code&gt;kbd&lt;/code&gt; (this behavior can be turned off for compatibility with &lt;code&gt;define-key&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Allows using an arbitrary number of prefix keys or “leaders” of any length (but does not require prefix keys like) (unlike &lt;code&gt;evil-leader.el&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Allows for automatically creating prefix commands (but does not require creating them like &lt;code&gt;bind-key&lt;/code&gt; does)&lt;/li&gt;
  &lt;li&gt;Allows for buffer-local keybindings (unlike &lt;code&gt;local-set-key&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Allows deferring keybindings until the specified keymap exists (no need to use &lt;code&gt;(with-)eval-after-load&lt;/code&gt;) (like &lt;code&gt;evil-define-key&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Allows displaying defined keys (like &lt;code&gt;bind-key.el&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Provides integration with other packages such as &lt;code&gt;key-chord.el&lt;/code&gt; and &lt;code&gt;which-key.el&lt;/code&gt; (unique)&lt;/li&gt;
  &lt;li&gt;Provides other helpers for keybindings (unique):
    &lt;ul&gt;
      &lt;li&gt;A method for creating “autoloaded” keymaps (like &lt;code&gt;bind-key.el&lt;/code&gt;)&lt;/li&gt;
      &lt;li&gt;A potentially better way to simulate keypresses (works with prefix args and for incomplete key sequences, i.e. a key bound to a keymap)&lt;/li&gt;
      &lt;li&gt;A method for binding under non-prefix keys with an optional timeout (like in vim; e.g. bind &lt;code&gt;jk&lt;/code&gt; in insert mode without losing &lt;code&gt;j&lt;/code&gt;)&lt;/li&gt;
      &lt;li&gt;A helper to create a menu item to dispatch to different definitions based on predicates&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Provides other helpers for configuration (e.g. more convenient functions for hooks and advice)&lt;/li&gt;
  &lt;li&gt;Is well tested (unlike &lt;code&gt;evil-leader.el&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;a id="user-content-reading-recommendations" class="anchor" aria-hidden="true" href="#reading-recommendations"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Reading Recommendations&lt;/h1&gt;
&lt;p&gt;Before using &lt;code&gt;general.el&lt;/code&gt;, you should first be familiar with &lt;code&gt;define-key&lt;/code&gt;, &lt;code&gt;global-set-key&lt;/code&gt;, and &lt;a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Key-Bindings.html" rel="nofollow"&gt;emacs’ key binding system&lt;/a&gt;. I recommend reading &lt;a href="https://www.masteringemacs.org/article/mastering-key-bindings-emacs" rel="nofollow"&gt;Mastering Key Bindings in Emacs&lt;/a&gt; if you are new to emacs. Also see &lt;code&gt;define-key&lt;/code&gt;’s help text for information on valid keys and definitions.&lt;/p&gt;
&lt;p&gt;If you are also using evil, you should first be familiar with how &lt;code&gt;evil-define-key&lt;/code&gt;, &lt;code&gt;evil-define-minor-mode-key&lt;/code&gt;, etc. work. If you are a new evil user, I’d recommend looking at my &lt;a href="https://github.com/noctuid/evil-guide"&gt;evil guide&lt;/a&gt;. The &lt;a href="https://github.com/noctuid/evil-guide#keybindings-and-states"&gt;Keybindings and States&lt;/a&gt; section in particular may be useful&lt;/p&gt;
&lt;p&gt;A large number of issues opened on this repository are not specifically related to &lt;code&gt;general.el&lt;/code&gt; (e.g. user usage or syntax errors that would also occur without &lt;code&gt;general-define-key&lt;/code&gt;). While I don’t mind generic questions about keybinding issues, you may save yourself some time if you first determine whether or not an issue is related to &lt;code&gt;general-define-key&lt;/code&gt; by, if possible, testing with an equivalent &lt;code&gt;define-key&lt;/code&gt;, &lt;code&gt;evil-define-key&lt;/code&gt;, etc. statement.&lt;/p&gt;
&lt;p&gt;See also the &lt;a href="#faq"&gt;FAQ&lt;/a&gt; for commonly asked questions.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-usage-recommendations-and-documentation-clarifications" class="anchor" aria-hidden="true" href="#usage-recommendations-and-documentation-clarifications"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Usage Recommendations and Documentation Clarifications&lt;/h1&gt;
&lt;p&gt;To facilitate extensibility and easy creation of wrappers, &lt;code&gt;general-define-key&lt;/code&gt; uses keyword arguments to specify everything besides the key definitions, including for the &lt;code&gt;:states&lt;/code&gt; and &lt;code&gt;:keymaps&lt;/code&gt;. Since users will most often specify one or both of these keyword arguments, &lt;code&gt;general-define-key&lt;/code&gt; is often less concise than &lt;code&gt;define-key&lt;/code&gt; or &lt;code&gt;evil-define-key&lt;/code&gt;. It is for this reason that it is recommended that &lt;code&gt;general-define-key&lt;/code&gt; not be used directly. &lt;code&gt;general.el&lt;/code&gt; provides wrappers around &lt;code&gt;general-define-key&lt;/code&gt; that take positional arguments, and it is recommended that you use these instead of &lt;code&gt;general-define-key&lt;/code&gt;. &lt;code&gt;general-create-definer&lt;/code&gt; can also be used to create a new definer with certain default settings (e.g. prefix settings). For clarity and consistency, examples in the documentation usually use &lt;code&gt;general-define-key&lt;/code&gt; unless the example is explicitly for a wrapper. However, &lt;a href="#positional-argument-wrappers"&gt;~general-def~&lt;/a&gt; is recommended over &lt;code&gt;general-define-key&lt;/code&gt; as it is more flexible and concise. Positional arguments are &lt;i&gt;optional but not required&lt;/i&gt;, so &lt;code&gt;general-def&lt;/code&gt; can basically act as a drop-in replacement for many key definers (including &lt;code&gt;general-define-key&lt;/code&gt;, &lt;code&gt;define-key&lt;/code&gt;, and &lt;code&gt;evil-define-key&lt;/code&gt;). Note that &lt;code&gt;general-create-definer&lt;/code&gt; and the &lt;code&gt;:general&lt;/code&gt; keyword argument for &lt;code&gt;use-package&lt;/code&gt; use &lt;code&gt;general-def&lt;/code&gt;. I personally only use &lt;code&gt;general-def&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Since it is more common for commands to not be sharp quoted in key definitions, this package’s examples use single quotes for commands. I personally prefer to always properly sharp quote functions, so commands in the actual non-example code are always sharp quoted.&lt;/p&gt;
&lt;p&gt;Although &lt;code&gt;general-define-key&lt;/code&gt; will automatically defer keybindings until the specified keymaps exist, you can still use it with &lt;code&gt;with-eval-after-load&lt;/code&gt; or use-package’s &lt;code&gt;:config&lt;/code&gt; keyword whenever it makes sense to. If you have a lot of keybindings, this could potentially shave some fraction of a second off of your startup time.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-basic-examples" class="anchor" aria-hidden="true" href="#basic-examples"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Basic Examples&lt;/h1&gt;
&lt;h2&gt;&lt;a id="user-content-general-examples" class="anchor" aria-hidden="true" href="#general-examples"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;General Examples&lt;/h2&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;require&lt;/span&gt; &lt;span class="pl-c1"&gt;'general&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; * Global Keybindings&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; &lt;span class="pl-smi"&gt;`general-define-key'&lt;/span&gt; acts like &lt;span class="pl-smi"&gt;`global-set-key'&lt;/span&gt; when :keymaps is not&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; specified (because ":keymaps 'global" is the default)&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; kbd is not necessary and arbitrary amount of key def pairs are allowed&lt;/span&gt;
(general-define-key
 &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;M-x&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'amx&lt;/span&gt;                             &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt; or 'smex&lt;/span&gt;
 &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-s&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'counsel-grep-or-swiper&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; * Mode Keybindings&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; &lt;span class="pl-smi"&gt;`general-define-key'&lt;/span&gt; is comparable to &lt;span class="pl-smi"&gt;`define-key'&lt;/span&gt; when :keymaps is specified&lt;/span&gt;
(general-define-key
 &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; NOTE: keymaps specified with :keymaps must be quoted&lt;/span&gt;
 &lt;span class="pl-c1"&gt;:keymaps&lt;/span&gt; &lt;span class="pl-c1"&gt;'org-mode-map&lt;/span&gt;
 &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-c C-q&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'counsel-org-tag&lt;/span&gt;
 &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; ...&lt;/span&gt;
 )
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; &lt;span class="pl-smi"&gt;`general-def'&lt;/span&gt; can be used instead for &lt;span class="pl-smi"&gt;`define-key'&lt;/span&gt;-like syntax&lt;/span&gt;
(general-def org-mode-map
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-c C-q&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'counsel-org-tag&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; ...&lt;/span&gt;
  )

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; * Prefix Keybindings&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; :prefix can be used to prevent redundant specification of prefix keys&lt;/span&gt;
(general-define-key
 &lt;span class="pl-c1"&gt;:prefix&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-c&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
 &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; bind "C-c a" to 'org-agenda&lt;/span&gt;
 &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;a&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'org-agenda&lt;/span&gt;
 &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;b&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'counsel-bookmark&lt;/span&gt;
 &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;c&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'org-capture&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; for frequently used prefix keys, the user can create a custom definer with a&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; default :prefix&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; using a variable is not necessary, but it may be useful if you want to&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; experiment with different prefix keys and aren't using &lt;span class="pl-smi"&gt;`general-create-definer'&lt;/span&gt;&lt;/span&gt;
(&lt;span class="pl-k"&gt;defconst&lt;/span&gt; &lt;span class="pl-en"&gt;my-leader&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-c&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)

(general-create-definer my-leader-def
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; :prefix my-leader&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; or without a variable&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:prefix&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-c&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; ** Global Keybindings&lt;/span&gt;
(my-leader-def
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;a&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'org-agenda&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;b&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'counsel-bookmark&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;c&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'org-capture&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; ** Mode Keybindings&lt;/span&gt;
(my-leader-def
  &lt;span class="pl-c1"&gt;:keymaps&lt;/span&gt; &lt;span class="pl-c1"&gt;'clojure-mode-map&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; bind "C-c C-l"&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-l&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'cider-load-file&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-z&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'cider-switch-to-repl-buffer&lt;/span&gt;)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; &lt;span class="pl-smi"&gt;`general-create-definer'&lt;/span&gt; creates wrappers around &lt;span class="pl-smi"&gt;`general-def'&lt;/span&gt;, so&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; &lt;span class="pl-smi"&gt;`define-key'&lt;/span&gt;-like syntax is also supported&lt;/span&gt;
(my-leader-def clojure-mode-map
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-l&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'cider-load-file&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-z&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'cider-switch-to-repl-buffer&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; * Settings&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; change &lt;span class="pl-smi"&gt;`auto-revert-interval'&lt;/span&gt; after autorevert has been loaded (&lt;span class="pl-smi"&gt;`setq'&lt;/span&gt; will&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; not work)&lt;/span&gt;
(general-setq auto-revert-interval &lt;span class="pl-c1"&gt;10&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-evil-examples" class="anchor" aria-hidden="true" href="#evil-examples"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Evil Examples&lt;/h2&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;require&lt;/span&gt; &lt;span class="pl-c1"&gt;'general&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; * Global Keybindings&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; &lt;span class="pl-smi"&gt;`general-define-key'&lt;/span&gt; acts like &lt;span class="pl-smi"&gt;`evil-define-key'&lt;/span&gt; when :states is specified&lt;/span&gt;
(general-define-key
 &lt;span class="pl-c1"&gt;:states&lt;/span&gt; &lt;span class="pl-c1"&gt;'motion&lt;/span&gt;
 &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; swap ; and :&lt;/span&gt;
 &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'evil-ex&lt;/span&gt;
 &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;:&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'evil-repeat-find-char&lt;/span&gt;)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; same as&lt;/span&gt;
(general-define-key
 &lt;span class="pl-c1"&gt;:states&lt;/span&gt; &lt;span class="pl-c1"&gt;'motion&lt;/span&gt;
 &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'evil-ex&lt;/span&gt;
 &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;:&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'evil-repeat-find-char&lt;/span&gt;)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; &lt;span class="pl-smi"&gt;`general-def'&lt;/span&gt; can be used instead for &lt;span class="pl-smi"&gt;`evil-global-set-key'&lt;/span&gt;-like syntax&lt;/span&gt;
(general-def &lt;span class="pl-c1"&gt;'motion&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'evil-ex&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;:&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'evil-repeat-find-char&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; alternative using &lt;span class="pl-smi"&gt;`general-translate-key'&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; swap ; and : in &lt;span class="pl-smi"&gt;`evil-motion-state-map'&lt;/span&gt;&lt;/span&gt;
(general-swap-key &lt;span class="pl-c1"&gt;nil&lt;/span&gt; &lt;span class="pl-c1"&gt;'motion&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;:&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; * Mode Keybindings&lt;/span&gt;
(general-define-key
 &lt;span class="pl-c1"&gt;:states&lt;/span&gt; &lt;span class="pl-c1"&gt;'normal&lt;/span&gt;
 &lt;span class="pl-c1"&gt;:keymaps&lt;/span&gt; &lt;span class="pl-c1"&gt;'emacs-lisp-mode-map&lt;/span&gt;
 &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; or xref equivalent&lt;/span&gt;
 &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;K&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'elisp-slime-nav-describe-elisp-thing-at-point&lt;/span&gt;)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; &lt;span class="pl-smi"&gt;`general-def'&lt;/span&gt; can be used instead for &lt;span class="pl-smi"&gt;`evil-define-key'&lt;/span&gt;-like syntax&lt;/span&gt;
(general-def &lt;span class="pl-c1"&gt;'normal&lt;/span&gt; emacs-lisp-mode-map
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;K&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'elisp-slime-nav-describe-elisp-thing-at-point&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; * Prefix Keybindings&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; :prefix can be used to prevent redundant specification of prefix keys&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; again, variables are not necessary and likely not useful if you are only&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; using a definer created with &lt;span class="pl-smi"&gt;`general-create-definer'&lt;/span&gt; for the prefixes&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; (defconst my-leader "SPC")&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; (defconst my-local-leader "SPC m")&lt;/span&gt;

(general-create-definer my-leader-def
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; :prefix my-leader&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:prefix&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SPC&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)

(general-create-definer my-local-leader-def
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; :prefix my-local-leader&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:prefix&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SPC m&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; ** Global Keybindings&lt;/span&gt;
(my-leader-def
  &lt;span class="pl-c1"&gt;:keymaps&lt;/span&gt; &lt;span class="pl-c1"&gt;'normal&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; bind "SPC a"&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;a&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'org-agenda&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;b&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'counsel-bookmark&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;c&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'org-capture&lt;/span&gt;)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; &lt;span class="pl-smi"&gt;`general-create-definer'&lt;/span&gt; creates wrappers around &lt;span class="pl-smi"&gt;`general-def'&lt;/span&gt;, so&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; &lt;span class="pl-smi"&gt;`evil-global-set-key'&lt;/span&gt;-like syntax is also supported&lt;/span&gt;
(my-leader-def &lt;span class="pl-c1"&gt;'normal&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;a&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'org-agenda&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;b&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'counsel-bookmark&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;c&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'org-capture&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; to prevent your leader keybindings from ever being overridden (e.g. an evil&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; package may bind "SPC"), use :keymaps 'override&lt;/span&gt;
(my-leader-def
  &lt;span class="pl-c1"&gt;:states&lt;/span&gt; &lt;span class="pl-c1"&gt;'normal&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:keymaps&lt;/span&gt; &lt;span class="pl-c1"&gt;'override&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;a&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'org-agenda&lt;/span&gt;)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; or&lt;/span&gt;
(my-leader-def &lt;span class="pl-c1"&gt;'normal&lt;/span&gt; &lt;span class="pl-c1"&gt;'override&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;a&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'org-agenda&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; ** Mode Keybindings&lt;/span&gt;
(my-local-leader-def
  &lt;span class="pl-c1"&gt;:states&lt;/span&gt; &lt;span class="pl-c1"&gt;'normal&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:keymaps&lt;/span&gt; &lt;span class="pl-c1"&gt;'org-mode-map&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;y&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'org-store-link&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;p&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'org-insert-link&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; ...&lt;/span&gt;
  )
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; &lt;span class="pl-smi"&gt;`general-create-definer'&lt;/span&gt; creates wrappers around &lt;span class="pl-smi"&gt;`general-def'&lt;/span&gt;, so&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; &lt;span class="pl-smi"&gt;`evil-define-key'&lt;/span&gt;-like syntax is also supported&lt;/span&gt;
(my-local-leader-def &lt;span class="pl-c1"&gt;'normal&lt;/span&gt; org-mode-map
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;y&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'org-store-link&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;p&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'org-insert-link&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; ...&lt;/span&gt;
  )

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; * Settings&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; change evil's search module after evil has been loaded (&lt;span class="pl-smi"&gt;`setq'&lt;/span&gt; will not work)&lt;/span&gt;
(general-setq evil-search-module &lt;span class="pl-c1"&gt;'evil-search&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Vim-like definitions:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(general-evil-setup)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; * Global Keybindings&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; all keywords arguments are still supported&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; these are just wrappers around &lt;span class="pl-smi"&gt;`general-def'&lt;/span&gt; that set a default :states&lt;/span&gt;
(general-nmap
  &lt;span class="pl-c1"&gt;:prefix&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SPC&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;p&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'helm-mini&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; bind in motion state (inherited by the normal, visual, and operator states)&lt;/span&gt;
(general-mmap
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'evil-ex&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;:&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'evil-repeat-find-char&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; alternatively, for shorter names&lt;/span&gt;
(general-evil-setup &lt;span class="pl-c1"&gt;t&lt;/span&gt;)
(mmap
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'evil-ex&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;:&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'evil-repeat-find-char&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; * Mode Keybindings&lt;/span&gt;
(general-nmap
  &lt;span class="pl-c1"&gt;:keymaps&lt;/span&gt; &lt;span class="pl-c1"&gt;'emacs-lisp-mode-map&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;K&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'elisp-slime-nav-describe-elisp-thing-at-point&lt;/span&gt;)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; same as&lt;/span&gt;
(general-nmap emacs-lisp-mode-map
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;K&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'elisp-slime-nav-describe-elisp-thing-at-point&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-switching-completely-to-general" class="anchor" aria-hidden="true" href="#switching-completely-to-general"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Switching Completely to General&lt;/h2&gt;
&lt;p&gt;It is possible to gradually switch to using general by using it only for new configuration and slowly converting old configuration if desired. If you would like to quickly convert all keybindings in your init file to use general so that they show up with &lt;code&gt;general-describe-keybindings&lt;/code&gt;, you can potentially use regexp replace. For example, you could use &lt;code&gt;M-&amp;lt; C-M-% \(global-set-key\|define-key\|evil-global-set-key\|evil-define-key\) RET general-def RET !&lt;/code&gt;. The evil equivalent would be &lt;code&gt;:%s/\(global-set-key\|define-key\|evil-global-set-key\|evil-define-key\)/general-def/g&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;There are two caveats. The old key definers all require using &lt;code&gt;kbd&lt;/code&gt;. This means that you will either have to remove every &lt;code&gt;kbd&lt;/code&gt; in these key definers (e.g. &lt;code&gt;:%s/(kbd ?\(.*?\))/\1/gc&lt;/code&gt;; you should likely confirm whether each &lt;code&gt;kbd&lt;/code&gt; should be removed) or set &lt;code&gt;general-implicit-kbd&lt;/code&gt; to nil for the old configuration. Furthermore, &lt;code&gt;general-def&lt;/code&gt; can only correctly replace definer statements where the first specified key is a string or vector. It will not work correctly to replace a definer that uses a variable or function for the first key (e.g. &lt;code&gt;(global-set-key my-key 'command)&lt;/code&gt; cannot be replaced directly with &lt;code&gt;general-def&lt;/code&gt;). To use general for definitions like this, you must either use the actual equivalent definer that &lt;code&gt;general-def&lt;/code&gt; ends up using  (&lt;code&gt;general-define-key&lt;/code&gt;, &lt;code&gt;general-emacs-define-key&lt;/code&gt;, or &lt;code&gt;evil-define-key&lt;/code&gt;) or explicitly separate the positional arguments from the first key with a bogus keyword argument (e.g. &lt;code&gt;(general-def :start-maps my-key 'command)&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;If you decide to do this, please make sure that your configuration is backed up, and test this out to make sure that there are no errors before permanently changing your configuration.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-general-define-key-details" class="anchor" aria-hidden="true" href="#general-define-key-details"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;code&gt;general-define-key&lt;/code&gt; Details&lt;/h1&gt;
&lt;p&gt;This package provides one main function, &lt;code&gt;general-define-key&lt;/code&gt;, for key definitions for both evil and non-evil users. It is recommended you use the provided wrappers around it or create your own with &lt;code&gt;general-create-definer&lt;/code&gt;, but first you should understand the keyword arguments provided by &lt;code&gt;general-define-key&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-definitions" class="anchor" aria-hidden="true" href="#definitions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Definitions&lt;/h2&gt;
&lt;p&gt;The only positional arguments for &lt;code&gt;general-define-key&lt;/code&gt; are any number of key/definition pairs. General supports all key and definition types supported by &lt;code&gt;define-key&lt;/code&gt; (see its help text) as well as its own &lt;a href="#extended-definition-syntax"&gt;“extended definitions”&lt;/a&gt;. Here are a few examples of definitions that aren’t standard =”string key” ‘command= pairs:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; vector keys, including [t] and [remap] are supported&lt;/span&gt;
(general-define-key
 &lt;span class="pl-c1"&gt;:keymaps&lt;/span&gt; &lt;span class="pl-c1"&gt;'org-capture-mode-map&lt;/span&gt;
 [remap evil-save-and-close]          &lt;span class="pl-c1"&gt;'org-capture-finalize&lt;/span&gt;
 [remap evil-save-modified-and-close] &lt;span class="pl-c1"&gt;'org-capture-finalize&lt;/span&gt;
 [remap evil-quit]                    &lt;span class="pl-c1"&gt;'org-capture-kill&lt;/span&gt;)

(general-define-key
 &lt;span class="pl-c1"&gt;:states&lt;/span&gt; &lt;span class="pl-c1"&gt;'normal&lt;/span&gt;
 &lt;span class="pl-c1"&gt;:keymaps&lt;/span&gt; &lt;span class="pl-c1"&gt;'org-capture-mode-map&lt;/span&gt;
 &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; keyboard macro definition&lt;/span&gt;
 &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;RET&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-c C-c&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
 &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; general.el extended definition&lt;/span&gt;
 &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SPC k&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; '(org-capture-kill &lt;span class="pl-c1"&gt;:which-key&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;abort capture&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;kbd&lt;/code&gt; will automatically be called on every string key. &lt;code&gt;general-implicit-kbd&lt;/code&gt; can be set to nil if you want to manually use &lt;code&gt;(kbd "key")&lt;/code&gt;. This option is mainly provided to make it easy to transition to &lt;code&gt;general-define-key&lt;/code&gt; or &lt;code&gt;general-def&lt;/code&gt; from other key definers with search and replace and therefore only applies to &lt;code&gt;general-define-key&lt;/code&gt; (and wrappers). &lt;code&gt;kbd&lt;/code&gt; will always be called on string keys for other helpers such as &lt;code&gt;general-key&lt;/code&gt;, &lt;code&gt;general-key-dispatch&lt;/code&gt;, and &lt;code&gt;general-translate-key&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-keyword-arguments" class="anchor" aria-hidden="true" href="#keyword-arguments"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Keyword Arguments&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;:prefix&lt;/code&gt;, &lt;code&gt;:states&lt;/code&gt;, and &lt;code&gt;:keymaps&lt;/code&gt; are the most basic keyword arguments. By default, there is no prefix or state (each is nil), and the keymap is =’global=. Each keymap can either be a quoted keymap, quoted &lt;a href="#keymapstate-aliases"&gt;keymap alias&lt;/a&gt;, =’global=, or =’local=. This is the biggest contrast between &lt;code&gt;general-define-key&lt;/code&gt; and other definers such as &lt;code&gt;define-key&lt;/code&gt;, where the keymap is passed in directly. Note that the provided wrappers such as &lt;code&gt;general-def&lt;/code&gt; do not require quoting keymaps. When the keymap is =’local=, the key will be bound only in the current buffer (see &lt;a href="#override-keymaps-and-buffer-local-keybindings"&gt;here&lt;/a&gt; for more details). When the keymap is =’global=, the key will be bound in &lt;code&gt;(current-global-map)&lt;/code&gt; (or the corresponding evil global map if &lt;code&gt;:states&lt;/code&gt; is specified; see &lt;a href="#note-for-evil-users"&gt;Note for Evil Users&lt;/a&gt; for more information).&lt;/p&gt;
&lt;p&gt;&lt;code&gt;:states&lt;/code&gt; and &lt;code&gt;:keymaps&lt;/code&gt; can be lists or a single element, allowing the user to define keys for multiple evil states or keymaps simultaneously. This can be useful in certain situations to prevent redundancy.&lt;/p&gt;
&lt;p&gt;Using a different prefix for the insert and emacs states (or any state in &lt;code&gt;general-non-normal-states&lt;/code&gt;) can be done with &lt;code&gt;:non-normal-prefix&lt;/code&gt; or &lt;code&gt;:global-prefix&lt;/code&gt;. By default, &lt;code&gt;:prefix&lt;/code&gt; will apply to all keys, but if one (or both) of the other prefix keywords is specified, &lt;code&gt;:prefix&lt;/code&gt; will only apply to evil states not listed in &lt;code&gt;general-non-normal-states&lt;/code&gt;. This is also the case for the global evil keymaps such as &lt;code&gt;evil-normal-state-map&lt;/code&gt;. &lt;code&gt;:non-normal-prefix&lt;/code&gt; will always only apply to the non-normal states. &lt;code&gt;:global-prefix&lt;/code&gt; will always apply to all keys. For example, this command will bind &lt;code&gt;SPC /&lt;/code&gt; to swiper in normal state and &lt;code&gt;M-SPC /&lt;/code&gt; to swiper in emacs and insert state:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(general-define-key
 &lt;span class="pl-c1"&gt;:keymaps&lt;/span&gt; '(normal insert emacs)
 &lt;span class="pl-c1"&gt;:prefix&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SPC&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
 &lt;span class="pl-c1"&gt;:non-normal-prefix&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;M-SPC&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
 &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'swiper&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you would like to create a named prefix keymap for your prefix keys, you can also specify &lt;code&gt;:prefix-command&lt;/code&gt; and/or &lt;code&gt;:prefix-map&lt;/code&gt;. All prefix keys will then be bound to the prefix command or prefix keymap in the correct keymaps. If &lt;code&gt;:prefix-command&lt;/code&gt; is specified, &lt;code&gt;define-prefix-command&lt;/code&gt; will be used with &lt;code&gt;prefix-map&lt;/code&gt; and &lt;code&gt;prefix-name&lt;/code&gt; passed in as additional arguments to &lt;code&gt;define-prefix-command&lt;/code&gt;. If only &lt;code&gt;:prefix-map&lt;/code&gt; is specified, a prefix keymap alone will be created with a menu item/prompt corresponding to &lt;code&gt;:prefix-name&lt;/code&gt;. Note that existing prefix commands/keymaps will not be redefined, so reevaluating a general.el form that uses &lt;code&gt;:prefix-command&lt;/code&gt; or &lt;code&gt;:prefix-map&lt;/code&gt; will not clear the previously created keymap.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(general-define-key
 &lt;span class="pl-c1"&gt;:keymaps&lt;/span&gt; '(normal insert emacs)
 &lt;span class="pl-c1"&gt;:prefix&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SPC&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
 &lt;span class="pl-c1"&gt;:non-normal-prefix&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;M-SPC&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
 &lt;span class="pl-c1"&gt;:prefix-command&lt;/span&gt; &lt;span class="pl-c1"&gt;'my-prefix-command&lt;/span&gt;
 &lt;span class="pl-c1"&gt;:prefix-map&lt;/span&gt; &lt;span class="pl-c1"&gt;'my-prefix-map&lt;/span&gt;
 &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'swiper&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;General is flexible in allowing you to choose how you write things, so if the above would be something you’d use often, you could create a function with the above keyword arguments as defaults using &lt;a href="#creating-new-key-definers"&gt;~general-create-definer~&lt;/a&gt; and write the definition like this:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(my-normal-and-insert-define-key &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'swiper&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;:infix&lt;/code&gt; keyword can be used to sandwich keys in between all of the specified prefix keys and the keys in each mapping. This is mainly useful when using multiple prefix keywords and especially when using wrappers. For example, if you wanted to define several keys that were prefixed with &lt;code&gt;SPC g&lt;/code&gt; in normal state and &lt;code&gt;M-SPC g&lt;/code&gt; in insert state, you could use the previous wrapper with &lt;code&gt;:infix&lt;/code&gt; instead of re-specifying both &lt;code&gt;:prefix&lt;/code&gt; and &lt;code&gt;:non-normal-prefix&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(my-normal-and-insert-define-key &lt;span class="pl-c1"&gt;:infix&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;g&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &amp;lt;maps...&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you just want to create the prefix keymap and bind keys directly in it without immediately binding a prefix key to the prefix keymap, simply don’t specify &lt;code&gt;:keymaps&lt;/code&gt; or &lt;code&gt;:prefix&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; bind "/" directly in the newly created my-prefix-map&lt;/span&gt;
(general-define-key &lt;span class="pl-c1"&gt;:prefix-map&lt;/span&gt; &lt;span class="pl-c1"&gt;'my-prefix-map&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'swiper&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There is also a &lt;code&gt;:predicate&lt;/code&gt; keyword for giving a condition under which a map should be active.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-predicates" class="anchor" aria-hidden="true" href="#predicates"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Predicates&lt;/h3&gt;
&lt;p&gt;The user can use the &lt;code&gt;:predicate&lt;/code&gt; keyword to specify a condition under which the map(s) should be active. For example:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(general-define-key
 &lt;span class="pl-c1"&gt;:keymaps&lt;/span&gt; &lt;span class="pl-c1"&gt;'local&lt;/span&gt;
 &lt;span class="pl-c1"&gt;:predicate&lt;/span&gt; '(&lt;span class="pl-c1"&gt;eobp&lt;/span&gt;)
 &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&amp;lt;right&amp;gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'beginning-of-buffer&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;right&amp;gt;&lt;/code&gt; will now behave normally except at the end of the buffer where it will jump to the beginning of the buffer. Note that with &lt;code&gt;:predicate&lt;/code&gt;, you can still only have a key bound once in a single keymap. In other words, &lt;code&gt;:predicate&lt;/code&gt; is only useful if a fallback keybinding already exists in a different, lower precedence keymap. If you want to have a key take different actions depending on conditions in a single keymap, see &lt;a href="#choosing-definitions-based-on-predicates"&gt;Choosing Definition Based on Predicates&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;See &lt;a href="http://endlessparentheses.com/define-context-aware-keys-in-emacs.html" rel="nofollow"&gt;this post&lt;/a&gt; for more information about how this works.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-keymapstate-aliases" class="anchor" aria-hidden="true" href="#keymapstate-aliases"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Keymap/State Aliases&lt;/h2&gt;
&lt;p&gt;To prevent the need to type out long keymap names like &lt;code&gt;evil-inner-text-objects-map&lt;/code&gt;, general allows the user to specify shorthand names for keymaps by altering &lt;code&gt;general-keymap-aliases&lt;/code&gt; (and for states by altering &lt;code&gt;general-state-aliases&lt;/code&gt;). These are alists of either an alias or a list of aliases to the full keymap name:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;push&lt;/span&gt; '(&lt;span class="pl-c1"&gt;help&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; help-map) general-keymap-aliases)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; or&lt;/span&gt;
(&lt;span class="pl-k"&gt;push&lt;/span&gt; '((h help) &lt;span class="pl-k"&gt;.&lt;/span&gt; help-map) general-keymap-aliases)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; or (emacs 25+)&lt;/span&gt;
(&lt;span class="pl-k"&gt;setf&lt;/span&gt; (&lt;span class="pl-c1"&gt;alist-get&lt;/span&gt; &lt;span class="pl-c1"&gt;'help&lt;/span&gt; general-keymap-aliases) &lt;span class="pl-c1"&gt;'help-map&lt;/span&gt;)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; or (emacs 25+)&lt;/span&gt;
(&lt;span class="pl-k"&gt;setf&lt;/span&gt; (&lt;span class="pl-c1"&gt;alist-get&lt;/span&gt; '(h help) general-keymap-aliases) &lt;span class="pl-c1"&gt;'help-map&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; now&lt;/span&gt;
(general-define-key &lt;span class="pl-c1"&gt;:keymaps&lt;/span&gt; &lt;span class="pl-c1"&gt;'help&lt;/span&gt; ...)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; is the same as&lt;/span&gt;
(general-define-key &lt;span class="pl-c1"&gt;:keymaps&lt;/span&gt; &lt;span class="pl-c1"&gt;'help-map&lt;/span&gt; ...)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that earlier entries in the alist take precedence.&lt;/p&gt;
&lt;p&gt;By default, the global evil state and text object keymaps have aliases. This allows for using the same syntax as &lt;code&gt;evil-global-set-key&lt;/code&gt; and &lt;code&gt;evil-define-key&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(general-define-key &lt;span class="pl-c1"&gt;:keymaps&lt;/span&gt; &lt;span class="pl-c1"&gt;'motion&lt;/span&gt; ...)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; or&lt;/span&gt;
(general-define-key &lt;span class="pl-c1"&gt;:keymaps&lt;/span&gt; &lt;span class="pl-c1"&gt;'m&lt;/span&gt; ...)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;See &lt;code&gt;general-keymap-aliases&lt;/code&gt; for all default aliases.&lt;/p&gt;
&lt;p&gt;All keymap symbols are immediately processed by &lt;code&gt;general--unalias&lt;/code&gt;. By overriding this function, it would be possible to, for example, automatically append &lt;code&gt;-map&lt;/code&gt; or &lt;code&gt;-mode-map&lt;/code&gt; to keymap names that don’t end in &lt;code&gt;-map&lt;/code&gt; or do something more complicated to create a generic shorthand without having manually specify all aliases. This is not recommended as it could potentially become confusing (and would currently break &lt;code&gt;:definer 'minor-mode&lt;/code&gt;), but if anyone would find this useful, feel free to make an issue, and I’ll consider adding it as an option.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-general-define-key-wrappers" class="anchor" aria-hidden="true" href="#general-define-key-wrappers"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;code&gt;general-define-key&lt;/code&gt; Wrappers&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-positional-argument-wrappers" class="anchor" aria-hidden="true" href="#positional-argument-wrappers"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Positional Argument Wrappers&lt;/h3&gt;
&lt;p&gt;When defining keys in specific keymaps and states, using positional arguments can be shorter. General has two macros that can basically act as drop-in replacements for &lt;code&gt;define-key&lt;/code&gt; and &lt;code&gt;evil-define-key&lt;/code&gt; and another macro that can basically act is a drop-in replacement for both of those and more. They are &lt;code&gt;general-emacs-define-key&lt;/code&gt;, &lt;code&gt;general-evil-define-key&lt;/code&gt;, and &lt;code&gt;general-def&lt;/code&gt; respectively. These are simply wrappers for &lt;code&gt;general-define-key&lt;/code&gt; that pass the positional arguments to the corresponding keywords. However, for compatibility with &lt;code&gt;define-key&lt;/code&gt; and &lt;code&gt;evil-define-key&lt;/code&gt;, it is not necessary to quote keymaps. Both keymaps and states can be left quoted or unquoted (regardless of whether they are lists).&lt;/p&gt;
&lt;p&gt;For example, the following are all equivalent:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(general-define-key
 &lt;span class="pl-c1"&gt;:keymaps&lt;/span&gt; &lt;span class="pl-c1"&gt;'org-mode-map&lt;/span&gt;
 &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;M-n&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'org-next-visible-heading&lt;/span&gt;
 &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;M-p&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'org-previous-visible-heading&lt;/span&gt;)

(general-emacs-define-key org-mode-map
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;M-n&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'org-next-visible-heading&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;M-p&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'org-previous-visible-heading&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; rough equivalent with define-key&lt;/span&gt;
(&lt;span class="pl-c1"&gt;with-eval-after-load&lt;/span&gt; &lt;span class="pl-c1"&gt;'org-mode&lt;/span&gt;
  (&lt;span class="pl-c1"&gt;define-key&lt;/span&gt; org-mode-map (&lt;span class="pl-c1"&gt;kbd&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;M-n&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;'org-next-visible-heading&lt;/span&gt;)
  (&lt;span class="pl-c1"&gt;define-key&lt;/span&gt; org-mode-map (&lt;span class="pl-c1"&gt;kbd&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;M-p&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;'org-previous-visible-heading&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Similarly, the following are all equivalent:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(general-define-key
 &lt;span class="pl-c1"&gt;:states&lt;/span&gt; '(normal visual)
 &lt;span class="pl-c1"&gt;:keymaps&lt;/span&gt; &lt;span class="pl-c1"&gt;'org-mode-map&lt;/span&gt;
 &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;gj&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'org-next-visible-heading&lt;/span&gt;
 &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;gk&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'org-previous-visible-heading&lt;/span&gt;)

(general-evil-define-key '(normal visual) org-mode-map
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;gj&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'org-next-visible-heading&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;gk&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'org-previous-visible-heading&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; equivalent with evil-define-key&lt;/span&gt;
(evil-define-key '(normal visual) org-mode-map
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;gj&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'org-next-visible-heading&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;gk&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'org-previous-visible-heading&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The actual behavior of these two macros is the same as &lt;code&gt;general-define-key&lt;/code&gt;. You can still use &lt;code&gt;general-define-key&lt;/code&gt;’s keyword arguments after the positional arguments (however, &lt;code&gt;:keymaps&lt;/code&gt; and &lt;code&gt;:states&lt;/code&gt; will not override the positional arguments):&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; these are both valid&lt;/span&gt;
(general-emacs-define-key &lt;span class="pl-c1"&gt;'global&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:prefix&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-c&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'swiper&lt;/span&gt;)

(general-evil-define-key &lt;span class="pl-c1"&gt;'normal&lt;/span&gt; org-mode-map
  &lt;span class="pl-c1"&gt;:prefix&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SPC&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;g&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'worf-goto&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As for &lt;code&gt;global-set-key&lt;/code&gt; and &lt;code&gt;evil-global-set-key&lt;/code&gt;, wrappers are not needed. By default &lt;code&gt;general-define-key&lt;/code&gt; acts like &lt;code&gt;global-set-key&lt;/code&gt;, and &lt;code&gt;general-emacs-define-key&lt;/code&gt; can also act like &lt;code&gt;global-evil-set-key&lt;/code&gt; using the symbols for evil’s states (see &lt;a href="#keymapstate-aliases"&gt;keymap aliases&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;The third macro, &lt;code&gt;general-def&lt;/code&gt;, is provided for those who would prefer to use a single, succinctly named definer for all of the previous cases. It will act the same as &lt;code&gt;general-define-key&lt;/code&gt;, &lt;code&gt;general-emacs-define-key&lt;/code&gt;, or &lt;code&gt;general-evil-define-key&lt;/code&gt; depending on the number of positional arguments.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; use &lt;span class="pl-smi"&gt;`general-define-key'&lt;/span&gt; when no "positional" arguments&lt;/span&gt;
(general-def
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;key&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'def&lt;/span&gt;
  ...)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; example equivalents&lt;/span&gt;
(general-define-key &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;key&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'def&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;global-set-key&lt;/span&gt; (&lt;span class="pl-c1"&gt;kbd&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;key&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;'def&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; use &lt;span class="pl-smi"&gt;`general-emacs-define-key'&lt;/span&gt; when one "positional" argument&lt;/span&gt;
(general-def org-mode-map
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;key&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'def&lt;/span&gt;
  ...)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; example equivalent&lt;/span&gt;
(&lt;span class="pl-c1"&gt;define-key&lt;/span&gt; org-mode-map (&lt;span class="pl-c1"&gt;kbd&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;key&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;'def&lt;/span&gt;)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; act like &lt;span class="pl-smi"&gt;`evil-global-set-key'&lt;/span&gt;&lt;/span&gt;
(general-def &lt;span class="pl-c1"&gt;'normal&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;key&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'def&lt;/span&gt;
  ...)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; example equivalents&lt;/span&gt;
(evil-global-set-key &lt;span class="pl-c1"&gt;'normal&lt;/span&gt; (&lt;span class="pl-c1"&gt;kbd&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;key&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;'def&lt;/span&gt;)
(evil-define-key &lt;span class="pl-c1"&gt;'normal&lt;/span&gt; &lt;span class="pl-c1"&gt;'global&lt;/span&gt; (&lt;span class="pl-c1"&gt;kbd&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;key&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;'def&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; use &lt;span class="pl-smi"&gt;`general-evil-define-key'&lt;/span&gt; when two "positional" arguments&lt;/span&gt;
(general-def &lt;span class="pl-c1"&gt;'normal&lt;/span&gt; org-mode-map
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;key&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'def&lt;/span&gt;
  ...)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; example equivalent&lt;/span&gt;
(evil-define-key &lt;span class="pl-c1"&gt;'normal&lt;/span&gt; org-mode-map (&lt;span class="pl-c1"&gt;kbd&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;key&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;'def&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that all leading quoted and unquoted symbols and lists are considered to be positional arguments. This means that if you want to use a variable or function for a key that could be a positional argument, you should either use the definer &lt;code&gt;general-def&lt;/code&gt; would end up using (&lt;code&gt;general-define-key&lt;/code&gt;, &lt;code&gt;general-emacs-define-key&lt;/code&gt;, or &lt;code&gt;evil-define-key&lt;/code&gt;)  or explicitly separate the positional arguments from the first key with a bogus keyword argument:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(general-def
  &lt;span class="pl-c1"&gt;:start-maps&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;
  some-key &lt;span class="pl-c1"&gt;'some-command&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-mass-key-unbinding-wrapper" class="anchor" aria-hidden="true" href="#mass-key-unbinding-wrapper"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Mass Key Unbinding Wrapper&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;general-unbind&lt;/code&gt; acts as &lt;code&gt;general-def&lt;/code&gt;, but the positional arguments should all be keys (instead of pairs of keys and definitions) that should be unbound:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(general-unbind &lt;span class="pl-c1"&gt;'insert&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-v&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-k&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-y&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-e&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; equivalent to&lt;/span&gt;
(general-def &lt;span class="pl-c1"&gt;'insert&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-v&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-k&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-y&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-e&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This wrapper can also be used, for example, if you want to disable certain commands or keys from working in certain modes by using with &lt;code&gt;:with&lt;/code&gt; keyword argument (example use case taken from &lt;a href="https://github.com/emacs-evil/evil-collection/blob/9fc1a19807dfcd0cc2b221832b6e6faad80a291d/evil-collection-util.el#L32"&gt;evil-collection&lt;/a&gt;):&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(general-unbind &lt;span class="pl-c1"&gt;'normal&lt;/span&gt; Info-mode-map
  &lt;span class="pl-c1"&gt;:with&lt;/span&gt; &lt;span class="pl-c1"&gt;'ignore&lt;/span&gt;
  [remap evil-append]
  [remap evil-append-line]
  [remap evil-insert]
  [remap evil-insert-line])
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; equivalent to&lt;/span&gt;
(general-def &lt;span class="pl-c1"&gt;'normal&lt;/span&gt; Info-mode-map
  [remap evil-append] &lt;span class="pl-c1"&gt;'ignore&lt;/span&gt;
  [remap evil-append-line] &lt;span class="pl-c1"&gt;'ignore&lt;/span&gt;
  [remap evil-insert] &lt;span class="pl-c1"&gt;'ignore&lt;/span&gt;
  [remap evil-insert-line] &lt;span class="pl-c1"&gt;'ignore&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The reason that this functionality is implemented as a wrapper and not as a keyword argument for &lt;code&gt;general-define-key&lt;/code&gt; is that &lt;code&gt;cl-defun&lt;/code&gt; cannot correctly parse keyword arguments when the keyword is in an odd position (e.g. &lt;code&gt;("a" :keyword 'arg)&lt;/code&gt; instead of &lt;code&gt;(:keyword 'arg "a")&lt;/code&gt;). For example, if this functionality was implemented with an &lt;code&gt;:unbind&lt;/code&gt; keyword, the &lt;code&gt;:general&lt;/code&gt; use-package keyword and any definer created with &lt;code&gt;general-create-definer&lt;/code&gt; would not work if the user specified an odd number of keys to unbind (because the default keyword arguments would be at the end of the arglist, in the wrong positions). As I’d rather not re-implement keyword argument parsing just for this use case, this functionality is provided as a macro. This macro will correctly handle any positioning for keyword arguments.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-creating-new-key-definers" class="anchor" aria-hidden="true" href="#creating-new-key-definers"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Creating New Key Definers&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;general-create-definer&lt;/code&gt; macro can create definers that wrap &lt;code&gt;general-def&lt;/code&gt; but with certain default settings. For example, it can be used to create a definer that will default to a certain prefix (like &lt;code&gt;evil-leader&lt;/code&gt; does):&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; basic example&lt;/span&gt;
(general-create-definer my-leader-def
  &lt;span class="pl-c1"&gt;:prefix&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-c&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; bind "C-c o" to &lt;span class="pl-smi"&gt;`other-window'&lt;/span&gt;&lt;/span&gt;
(my-leader-def &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;o&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'other-window&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; more complex example&lt;/span&gt;
(general-create-definer tyrant-def
  &lt;span class="pl-c1"&gt;:states&lt;/span&gt; '(normal insert emacs)
  &lt;span class="pl-c1"&gt;:prefix&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SPC&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:non-normal-prefix&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;M-SPC&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:prefix-command&lt;/span&gt; &lt;span class="pl-c1"&gt;'tyrant-prefix-command&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:prefix-map&lt;/span&gt; &lt;span class="pl-c1"&gt;'tyrant-prefix-map&lt;/span&gt;)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; globally bind "SPC /" in normal state and "M-SPC /" in the insert/emacs&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; states to &lt;span class="pl-smi"&gt;`swiper'&lt;/span&gt;&lt;/span&gt;
(tyrant-def &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'swiper&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; for org-mode, bind "SPC o" in normal state and "M-SPC /" in the insert/emacs&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; states to &lt;span class="pl-smi"&gt;`counsel-org-goto'&lt;/span&gt;&lt;/span&gt;
(tyrant-def org-mode-map &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;o&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'counsel-org-goto&lt;/span&gt;)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; same as&lt;/span&gt;
(tyrant-def &lt;span class="pl-c1"&gt;:keymaps&lt;/span&gt; &lt;span class="pl-c1"&gt;'org-mode-map&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;o&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'counsel-org-goto&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It takes an optional &lt;code&gt;:wrapping&lt;/code&gt; keyword argument that can be specified to use another definer instead of &lt;code&gt;general-def&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(general-create-definer my-prefix-def
  &lt;span class="pl-c1"&gt;:wrapping&lt;/span&gt; general-emacs-define-key
  &lt;span class="pl-c1"&gt;:prefix&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;M-,&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-vim-like-definers" class="anchor" aria-hidden="true" href="#vim-like-definers"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Vim-like Definers&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;general-evil-setup&lt;/code&gt; can be used to generate key definition functions that are named similarly to vim’s. Currently, the following functions will be created:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;general-imap&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;general-emap&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;general-nmap&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;general-vmap&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;general-omap&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;general-mmap&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;general-rmap&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;general-iemap&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;general-nvmap&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;general-otomap&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;general-itomap&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;general-tomap&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These are wrappers around &lt;code&gt;general-def&lt;/code&gt; created with &lt;code&gt;general-create-definer&lt;/code&gt; that set the default &lt;code&gt;:states&lt;/code&gt;. You can see the help text for each for a more specific description. &lt;code&gt;general-evil-setup&lt;/code&gt; can be called with a non-nil argument (i.e. &lt;code&gt;(general-evil-setup t)&lt;/code&gt;) to create non-prefixed aliases for these definers (e.g. &lt;code&gt;nmap&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Here is an example using &lt;code&gt;general-nmap&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(general-evil-setup)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; define in evil-normal-state-map&lt;/span&gt;
(general-nmap &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;key&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'def&lt;/span&gt; ...)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; define in the normal state auxiliary map for org-mode-map&lt;/span&gt;
(general-nmap org-mode-map &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;key&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'def&lt;/span&gt; ...)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; same as&lt;/span&gt;
(general-nmap &lt;span class="pl-c1"&gt;:keymaps&lt;/span&gt; &lt;span class="pl-c1"&gt;'org-mode-map&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;key&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'def&lt;/span&gt; ...)&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-note-for-evil-users" class="anchor" aria-hidden="true" href="#note-for-evil-users"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Note for Evil Users&lt;/h2&gt;
&lt;p&gt;When &lt;code&gt;:states&lt;/code&gt; is specified, &lt;code&gt;general-define-key&lt;/code&gt; will act as a wrapper around &lt;code&gt;evil-define-key*&lt;/code&gt;. &lt;code&gt;evil-define-key*&lt;/code&gt; now directly supports the symbol &lt;code&gt;global&lt;/code&gt; for the keymap argument, so the following are equivalent:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(general-define-key
 &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; (default)&lt;/span&gt;
 &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; :keymaps 'global&lt;/span&gt;
 &lt;span class="pl-c1"&gt;:states&lt;/span&gt; '(normal visual)
 ...)
(general-define-key
 &lt;span class="pl-c1"&gt;:keymaps&lt;/span&gt; '(normal visual)
 ...)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that this previously was not the case and &lt;code&gt;(general-define-key :states 'normal ...)&lt;/code&gt; would bind in the normal state auxiliary map for &lt;code&gt;(current-global-map)&lt;/code&gt;. Since auxiliary maps have a higher precedence than evil global and override keymaps, this was previously mentioned as one possible way of preventing certain keybindings from being overridden. However, this is not a reliable method. Keys bound in auxiliary maps can override keys bound in other auxiliary maps, for example, and keys bound in evil local or minor-mode keymaps will always override keys bound in regular auxiliary maps. If you need this functionality, please use evil intercept keymaps instead (see &lt;a href="#override-keymaps-and-buffer-local-keybindings"&gt;Override Keymaps&lt;/a&gt;).&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-override-keymaps-and-buffer-local-keybindings" class="anchor" aria-hidden="true" href="#override-keymaps-and-buffer-local-keybindings"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Override Keymaps and Buffer Local Keybindings&lt;/h1&gt;
&lt;p&gt;General.el provides the equivalent of &lt;code&gt;bind-key&lt;/code&gt;’s &lt;code&gt;override-global-map&lt;/code&gt; as &lt;code&gt;general-override-mode-map&lt;/code&gt; (keymap alias is =’override=). When &lt;code&gt;general-override-mode&lt;/code&gt; is enabled, keys bound in &lt;code&gt;general-override-mode-map&lt;/code&gt; will take precedence over keys bound in any other minor mode keymaps. By default, general.el will automatically enable &lt;code&gt;general-override-mode&lt;/code&gt; when binding a key in &lt;code&gt;general-override-mode-map&lt;/code&gt;. If you would prefer to enable it manually (e.g. you wish to toggle it at some point), you can set &lt;code&gt;general-override-auto-enable&lt;/code&gt; to nil.&lt;/p&gt;
&lt;p&gt;General also provides a local equivalent called &lt;code&gt;general-override-local-mode&lt;/code&gt; which is used to add support for buffer-local keybindings (with higher precedence than mode keybindings) by specifying &lt;code&gt;:keymaps 'local&lt;/code&gt;. Unlike with the global override mode, &lt;code&gt;:keymaps 'local&lt;/code&gt; should always be used instead of the actual keymap name since &lt;code&gt;:keymaps 'local&lt;/code&gt; will cause general.el to automatically turn on the corresponding minor mode and perform some necessary extra setup. Note that this is not the same as using &lt;code&gt;local-set-key&lt;/code&gt; (which will bind the key for the current buffer’s major mode, affecting other buffers). When &lt;code&gt;:states&lt;/code&gt; is specified with &lt;code&gt;:keymaps 'local&lt;/code&gt;, &lt;code&gt;evil-local-set-key&lt;/code&gt; will be used instead.&lt;/p&gt;
&lt;p&gt;Note that binding directly in &lt;code&gt;general-override-mode-map&lt;/code&gt; (i.e. no &lt;code&gt;:states&lt;/code&gt; specified) is only useful for non-evil keybindings. Evil keybindings already override almost all normal emacs keybindings using the same method used here (i.e. evil keymaps are in &lt;code&gt;emulation-mode-map-alists&lt;/code&gt;). The main exceptions where evil keybindings will be overridden by non-evil keybindings are noted &lt;a href="https://github.com/noctuid/evil-guide#what-overrides-evil"&gt;here&lt;/a&gt; with explanations on how to deal with these cases. To understand which evil keybindings override others, review the &lt;a href="https://github.com/noctuid/evil-guide#keymap-precedence"&gt;precedence for evil keymaps&lt;/a&gt;. If you want a global evil keybinding to not be overridden by any other evil keymaps (e.g. overriding keymaps created in &lt;code&gt;evil-integration.el&lt;/code&gt; or auxiliary keymaps created by some evil package), you can use intercept keymaps. You can make any keymap an intercept keymap, but it may be convenient to just use &lt;code&gt;general-override-mode-map&lt;/code&gt; for this purpose since the necessary setup (&lt;code&gt;evil-make-intercept-map&lt;/code&gt;) has already been performed:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; keybindings that should not be overriden&lt;/span&gt;
(general-define-key
 &lt;span class="pl-c1"&gt;:states&lt;/span&gt; &lt;span class="pl-c1"&gt;'normal&lt;/span&gt;
 &lt;span class="pl-c1"&gt;:keymaps&lt;/span&gt; &lt;span class="pl-c1"&gt;'override&lt;/span&gt;
 &lt;span class="pl-c1"&gt;:prefix&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SPC&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
 &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;f&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'find-file&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; the above has precedence over the following (excerpt from evil-collection)&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; "SPC f" will still work as &lt;span class="pl-smi"&gt;`find-file'&lt;/span&gt;&lt;/span&gt;
(evil-define-key &lt;span class="pl-c1"&gt;'normal&lt;/span&gt; transmission-mode-map
  (&lt;span class="pl-c1"&gt;kbd&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SPC&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;'scroll-up-command&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that by default, evil keybindings made with &lt;code&gt;:keymaps 'override&lt;/code&gt; will override even those made with &lt;code&gt;:keymaps 'local&lt;/code&gt;.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-displaying-keybindings" class="anchor" aria-hidden="true" href="#displaying-keybindings"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Displaying Keybindings&lt;/h1&gt;
&lt;p&gt;General keeps track of all your keybindings and allows presenting them as tables in an org buffer using &lt;code&gt;general-describe-keybindings&lt;/code&gt;. By default, they will be displayed in this order:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Buffer local keybindings (i.e. &lt;code&gt;:keymaps 'local&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Global keybindings (i.e. &lt;code&gt;:keymaps 'global&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Global evil keybindings (e.g. &lt;code&gt;:keymaps 'evil-normal-state-map&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Other keybindings&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Within these categories keymaps, states, and keybindings will be presented in the order they were created in. For each keybinding created, this command will display the key, the definition, and the previous definition. The previous definition will only be updated when the definition changes by default. To have it only be updated when the key was previously unbound, the user can set &lt;code&gt;general-describe-update-previous-definition&lt;/code&gt; to &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The order in which keybindings are displayed is customizable. All keymaps listed in &lt;code&gt;general-describe-priority-keymaps&lt;/code&gt; will be displayed first. The rest can optionally be sorted by setting &lt;code&gt;general-describe-keymap-sort-function&lt;/code&gt; (nil by default). The order evil states are displayed in can be altered either by changing &lt;code&gt;general-describe-state-sort-function&lt;/code&gt; or changing the order of states in &lt;code&gt;general-describe-evil-states&lt;/code&gt;. Keybindings can also be sorted if the user sets &lt;code&gt;general-describe-keybinding-sort-function&lt;/code&gt;. Here is an example that will sort everything alphabetically:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;setq&lt;/span&gt; general-describe-priority-keymaps &lt;span class="pl-c1"&gt;nil&lt;/span&gt;
      general-describe-keymap-sort-function &lt;span class="pl-c1"&gt;#&lt;span class="pl-c1"&gt;'general-sort-by-car&lt;/span&gt;&lt;/span&gt;
      general-describe-state-sort-function &lt;span class="pl-c1"&gt;#&lt;span class="pl-c1"&gt;'general-sort-by-car&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; sort keybindings alphabetically by key&lt;/span&gt;
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; general-describe-keybinding-sort-function &lt;span class="pl-c1"&gt;#&lt;span class="pl-c1"&gt;'general-sort-by-car&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; sort keybindings alphabetically by definition&lt;/span&gt;
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; general-describe-keybinding-sort-function &lt;span class="pl-c1"&gt;#&lt;span class="pl-c1"&gt;'general-sort-by-cadr&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For reference, keybindings are stored in an alist. Here is what is passed to each sorting function:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; &lt;span class="pl-smi"&gt;`general-keybindings'&lt;/span&gt; - an alist of keymap to state alist&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; passed to &lt;span class="pl-smi"&gt;`general-describe-keymap-sort-function'&lt;/span&gt;&lt;/span&gt;
((keymap-name &lt;span class="pl-k"&gt;.&lt;/span&gt; state-alist) ...)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; a state alist (state name is nil if there is no state)&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; passed to &lt;span class="pl-smi"&gt;`general-describe-state-sort-function'&lt;/span&gt;&lt;/span&gt;
((state-name &lt;span class="pl-k"&gt;.&lt;/span&gt; keybindings) ...)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; the list of keybindings is passed to &lt;span class="pl-smi"&gt;`general-describe-keybinding-sort-function'&lt;/span&gt;&lt;/span&gt;
((&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;key after kbd applied&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'def&lt;/span&gt; &lt;span class="pl-c1"&gt;'previous-def&lt;/span&gt;) ...)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To actually change how the keybinding table is printed, the user could override  &lt;code&gt;general--print-map&lt;/code&gt;.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-functionsmacros-to-aid-key-definition" class="anchor" aria-hidden="true" href="#functionsmacros-to-aid-key-definition"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Functions/Macros to Aid Key Definition&lt;/h1&gt;
&lt;h2&gt;&lt;a id="user-content-disclaimer" class="anchor" aria-hidden="true" href="#disclaimer"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Disclaimer&lt;/h2&gt;
&lt;p&gt;Key simulation (for &lt;code&gt;general-simulate-key&lt;/code&gt; and &lt;code&gt;general-key-dispatch&lt;/code&gt; but not for &lt;code&gt;general-key&lt;/code&gt;) can result in duplicate keys being recorded for keyboard macros and evil repeating. To work around this issue, &lt;code&gt;general.el&lt;/code&gt; will discard these duplicate keys during macro playback (i.e. &lt;code&gt;executing-kbd-macro&lt;/code&gt; is non-nil). So far, this seems to be a reliable method for getting macros and repeating to work correctly with key simulation. However, it is hard (and maybe impossible) to test some of these cases automatically since it involves simulating keys that in turn simulate keys, and, for example, I haven’t found a way to correctly simulate recording a macro in these cases. Therefore, if you find any issues with macro playback or evil repeating when using &lt;code&gt;general-simulate-key&lt;/code&gt; or &lt;code&gt;general-key-dispatch&lt;/code&gt;, please make an issue.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-simulating-keypresses" class="anchor" aria-hidden="true" href="#simulating-keypresses"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Simulating Keypresses&lt;/h2&gt;
&lt;p&gt;General provides two macros called &lt;code&gt;general-key&lt;/code&gt; and &lt;code&gt;general-simulate-key&lt;/code&gt; that can be used to simulate key sequences. In some cases, they can be used similarly to keyboard macros, but they have some advantages. Unlike with a keyboard macro, prefix arguments will work for the command that ends up running. Also, the key simulated does not have to correspond to the full key sequence for a command. See &lt;a href="https://www.emacswiki.org/emacs/Evil#toc14" rel="nofollow"&gt;here&lt;/a&gt; for information on an alternative method of doing some of the things these key simulation helpers can do using &lt;code&gt;key-translation-map&lt;/code&gt;. I personally prefer general’s helpers as they are simple and more powerful.&lt;/p&gt;
&lt;p&gt;Note that when a named prefix keymap/command exists (e.g. &lt;code&gt;help-command&lt;/code&gt;), you should generally prefer to bind directly to that. However, this is not possible for a key like &lt;code&gt;C-c&lt;/code&gt; whose definition varies depending on the buffer. Therefore, you need to use either &lt;code&gt;general-key&lt;/code&gt; or &lt;code&gt;general-simulate-key&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(general-nmap &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SPC&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; (general-simulate-key &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-c&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; or&lt;/span&gt;
(general-nmap &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SPC&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; (general-key &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-c&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Although both will work correctly, &lt;a href="https://github.com/justbur/emacs-which-key"&gt;which-key&lt;/a&gt; does not currently show all available keys when &lt;code&gt;general-key&lt;/code&gt; is used, so I would currently recommend using &lt;code&gt;general-simulate-key&lt;/code&gt; instead for an example like this.&lt;/p&gt;
&lt;p&gt;On the other hand, &lt;code&gt;general-key&lt;/code&gt; should be preferred for simulating a key that corresponds to a single command. Unlike &lt;code&gt;general-simulate-key&lt;/code&gt;, which creates/returns a function, &lt;code&gt;general-key&lt;/code&gt; expands to an extended menu item like &lt;code&gt;general-predicate-dispatch&lt;/code&gt;. Using an extended menu item is a simpler and more direct approach as emacs will dynamically look up and act as the specified key. This has the advantage of showing the docstring for the exact command with &lt;code&gt;C-h k&lt;/code&gt;. If the key to act as is unbound, key lookup can continue (like if &lt;code&gt;:predicate&lt;/code&gt; returns nil), so having a fallback keybinding is possible with &lt;code&gt;general-key&lt;/code&gt; but not with &lt;code&gt;general-simulate-key&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Another downside of &lt;code&gt;general-simulate-key&lt;/code&gt; is that any commands/functions called just afterwards will actually be run before the keys are simulated. This won’t affect the most common use cases, but it makes setting up and tearing down a context more difficult (e.g. simulating a key in a specific evil state requires using &lt;code&gt;post-command-hook&lt;/code&gt; for &lt;code&gt;general-simulate-key&lt;/code&gt; but not for &lt;code&gt;general-key&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;&lt;code&gt;general-key&lt;/code&gt; may be useful when you want to have a key act as another without having to bind it to the exact command in every relevant keymap:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(general-nmap &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;RET&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; (general-key &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-c C-c&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; a keyboard macro works, but C-h k will not show the command docstring&lt;/span&gt;
(general-nmap &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;RET&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-c C-c&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;general-simulate-key&lt;/code&gt; and &lt;code&gt;general-key&lt;/code&gt; also support keyword arguments to control the context the keys are simulated in (both support &lt;code&gt;:state&lt;/code&gt;; &lt;code&gt;general-simulate-key&lt;/code&gt; supports &lt;code&gt;:keymap&lt;/code&gt; for now but I don’t know how useful it is; please make an issue if you think it would be useful to add &lt;code&gt;:keymap&lt;/code&gt; to &lt;code&gt;general-key&lt;/code&gt;). For example:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(general-nmap &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;j&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; (general-simulate-key &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-n&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;:state&lt;/span&gt; &lt;span class="pl-c1"&gt;'emacs&lt;/span&gt;))
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; &lt;span class="pl-smi"&gt;`general-key'&lt;/span&gt; supports :state only`&lt;/span&gt;
(general-nmap &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;j&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; (general-key &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-n&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;:state&lt;/span&gt; &lt;span class="pl-c1"&gt;'emacs&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;general-key&lt;/code&gt; also supports custom setup and teardown before key lookup. Here’s a similar example to the previous one:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(general-nmap &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;j&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; (general-key &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-n&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
                    &lt;span class="pl-c1"&gt;:setup&lt;/span&gt; (evil-local-mode &lt;span class="pl-c1"&gt;-1&lt;/span&gt;)
                    &lt;span class="pl-c1"&gt;:teardown&lt;/span&gt; (evil-local-mode)))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The advantage of &lt;code&gt;general-simulate-key&lt;/code&gt; over &lt;code&gt;general-key&lt;/code&gt; is that it can be used to simulate a key sequence corresponding to multiple commands or a command followed by a key sequence. The key argument can be replaced by a list of a command and keys (e.g. &lt;code&gt;(general-simulate-key ('evil-delete "iw"))&lt;/code&gt;). For example, the following is possible with &lt;code&gt;general-simulate-key&lt;/code&gt; but not with &lt;code&gt;general-key&lt;/code&gt; or a keyboard macro:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(general-nmap &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;s&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; (general-simulate-key (&lt;span class="pl-c1"&gt;'evil-ex&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;s/&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;See the next section for another reasonable use case for this feature.&lt;/p&gt;
&lt;p&gt;When a command is specified for &lt;code&gt;general-simulate-key&lt;/code&gt;, general will used the remapped version of it if it exists (e.g. if &lt;code&gt;[remap evil-delete] 'lispyville-delete&lt;/code&gt; is in an active keymap, &lt;code&gt;lispyville-delete&lt;/code&gt; will be used instead of &lt;code&gt;evil-delete&lt;/code&gt;). To use the exact command instead, &lt;code&gt;:remap nil&lt;/code&gt; can be specified&lt;/p&gt;
&lt;p&gt;&lt;code&gt;general-simulate-key&lt;/code&gt; creates a named function with a docstring, so which-key and &lt;code&gt;describe-key&lt;/code&gt; will work properly for keys bound to a command created with it. The automatically generated function name, docstring, and which-key description can be replaced with keyword arguments:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(general-nmap &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SPC&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; (general-simulate-key &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-c&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
                      &lt;span class="pl-c1"&gt;:state&lt;/span&gt; &lt;span class="pl-c1"&gt;'emacs&lt;/span&gt;
                      &lt;span class="pl-c1"&gt;:name&lt;/span&gt; general-SPC-simulates-C-c
                      &lt;span class="pl-c1"&gt;:docstring&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Simulate C-c in emacs state with SPC.&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
                      &lt;span class="pl-c1"&gt;:which-key&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Simulate C-c&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Make sure that you don’t bind a key to simulate itself (e.g. &lt;code&gt;(general-emap "C-n" (general-simulate-key "C-n" :state 'emacs))&lt;/code&gt;) as this will cause an infinite loop.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-mapping-under-non-prefix-keys" class="anchor" aria-hidden="true" href="#mapping-under-non-prefix-keys"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Mapping Under Non-prefix Keys&lt;/h2&gt;
&lt;p&gt;This functionality is mainly targeted at evil users, but it could potentially be useful for non-evil users as well. In vim you can bind something like &lt;code&gt;cow&lt;/code&gt; without a problem. With evil, &lt;code&gt;c&lt;/code&gt; is bound to &lt;code&gt;evil-change&lt;/code&gt;, so you can’t bind directly to &lt;code&gt;cow&lt;/code&gt;. A workaround for this case is to bind a key in &lt;code&gt;evil-operator-state-map&lt;/code&gt;, but this won’t work when operator state is not used (e.g. you want to bind something like &lt;code&gt;ctb&lt;/code&gt; or &lt;code&gt;jk&lt;/code&gt; in insert state). I’ve come up with a more general workaround called &lt;code&gt;general-key-dispatch&lt;/code&gt;. Consider the following example:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(general-nmap &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;c&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; (general-key-dispatch &lt;span class="pl-c1"&gt;'evil-change&lt;/span&gt;
                    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;ow&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'toggle-word-wrap&lt;/span&gt;
                    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;tb&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'some-command&lt;/span&gt;
                    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;c&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'evil-change-whole-line&lt;/span&gt;
                    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; alternatively if there was no linewise version:&lt;/span&gt;
                    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;c&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; (general-simulate-key (&lt;span class="pl-c1"&gt;'evil-change&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;c&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))))
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; &lt;span class="pl-smi"&gt;`evil-change'&lt;/span&gt; is not bound in &lt;span class="pl-smi"&gt;`evil-visual-state-map'&lt;/span&gt; by default but&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; inherited from &lt;span class="pl-smi"&gt;`evil-normal-state-map'&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; if you don't want "c" to be affected in visual state, you should add this&lt;/span&gt;
(general-vmap &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;c&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'evil-change&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;general-key-dispatch&lt;/code&gt; is a function-creating macro. In this example, the command created will wait for user input and try to match one of the specified key sequences (e.g. &lt;code&gt;ow&lt;/code&gt;). If a key sequence is matched, the corresponding command will be executed. Otherwise it will fall back to simulating the fallback command followed by the unmatched keys (using the same mechanism as &lt;code&gt;general-simulate-key&lt;/code&gt;). For example, &lt;code&gt;ow&lt;/code&gt; is bound, so &lt;code&gt;cow&lt;/code&gt; would run &lt;code&gt;toggle-word-wrap&lt;/code&gt;. On the other hand, &lt;code&gt;b&lt;/code&gt; is not mapped, so &lt;code&gt;cb&lt;/code&gt; would act the same as &lt;code&gt;cb&lt;/code&gt; would by default. Counts and repeating should still work for both the mapped keys and fallback command. Because evil handles &lt;code&gt;cc&lt;/code&gt; differently (since &lt;code&gt;c&lt;/code&gt; is not a motion), &lt;code&gt;c&lt;/code&gt; must be explicitly bound to &lt;code&gt;evil-change-whole-line&lt;/code&gt; (or to simulate &lt;code&gt;('evil-change "c")&lt;/code&gt;) to keep its behavior. &lt;code&gt;c&lt;/code&gt; is not actually bound in visual state by default, so to keep &lt;code&gt;c&lt;/code&gt; working the same in visual state, you should explicitly bind it to &lt;code&gt;evil-change&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Like with &lt;code&gt;general-simulate-key&lt;/code&gt;, general will first check to see if the command to be executed has been remapped (e.g. if &lt;code&gt;[remap evil-delete] 'lispyville-delete&lt;/code&gt; is in an active keymap, &lt;code&gt;lispyville-delete&lt;/code&gt; will be used instead of &lt;code&gt;evil-delete&lt;/code&gt;). To use the exact command instead, &lt;code&gt;:remap nil&lt;/code&gt; can be specified.&lt;/p&gt;
&lt;p&gt;Another thing to note is that you can’t bind a key in the &lt;code&gt;general-key-dispatch&lt;/code&gt; section to simulate the base key (i.e. the key you bind to the resulting command, in this case &lt;code&gt;c&lt;/code&gt;). For this example, you couldn’t bind &lt;code&gt;w&lt;/code&gt; to &lt;code&gt;(general-simulate-key "ciw")&lt;/code&gt;. While this wouldn’t cause an infinite loop, it wouldn’t work either, so you would have to use the command name instead (e.g &lt;code&gt;(general-simulate-key ('evil-change "iw"))&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Also, if you use a count in the middle (e.g. &lt;code&gt;c2tb&lt;/code&gt; and &lt;code&gt;2&lt;/code&gt; is not explicitly bound), the fallback command will be run immediately. If anyone cares about this, feel free to make an issue. I could potentially add an option to allow changing the count in the middle without immediately falling back to the default command.&lt;/p&gt;
&lt;p&gt;Another possible use case of &lt;code&gt;general-key-dispatch&lt;/code&gt; is to emulate vim’s &lt;code&gt;imap&lt;/code&gt;. For example, you can recreate the common &lt;code&gt;jk&lt;/code&gt; to &lt;code&gt;&amp;lt;esc&amp;gt;&lt;/code&gt; keybinding:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(general-imap &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;j&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
              (general-key-dispatch &lt;span class="pl-c1"&gt;'self-insert-command&lt;/span&gt;
                &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;k&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'evil-normal-state&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Commands created in this way support an optional timeout, meaning you could still insert &lt;code&gt;jk&lt;/code&gt; (without &lt;code&gt;C-q&lt;/code&gt; / &lt;code&gt;quoted-insert&lt;/code&gt;) like with &lt;a href="https://www.emacswiki.org/emacs/key-chord.el" rel="nofollow"&gt;key-chord.el&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(general-imap &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;j&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
              (general-key-dispatch &lt;span class="pl-c1"&gt;'self-insert-command&lt;/span&gt;
                &lt;span class="pl-c1"&gt;:timeout&lt;/span&gt; &lt;span class="pl-c1"&gt;0.25&lt;/span&gt;
                &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;k&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'evil-normal-state&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If there is input lag, a timeout will not work well (this is also true for packages like key-chord.el). One example is vterm (even though there is not normally visible input lag). In vterm, the real amount of time you would have to wait after pressing “j” before pressing “k” is longer than 0.25 seconds. It is also likely that the next character you type will be input instead (e.g. “jo” would result in “oo”). There’s not much that can be done about the first problem. You can try lowering the timeout in a problematic mode. However, if the input lag is inconsistently present (e.g. caused by some minor mode) and/or severe, this probably won’t help much. You can at least address the second problem by explicitly specifying the character you want to insert:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;defun&lt;/span&gt; &lt;span class="pl-e"&gt;my-insert-j&lt;/span&gt; ()
  (&lt;span class="pl-k"&gt;interactive&lt;/span&gt;)
  (&lt;span class="pl-c1"&gt;insert&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;j&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))

(general-imap &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;j&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; (general-key-dispatch &lt;span class="pl-c1"&gt;'my-insert-j&lt;/span&gt;
                    &lt;span class="pl-c1"&gt;:timeout&lt;/span&gt; &lt;span class="pl-c1"&gt;0.25&lt;/span&gt;
                    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;k&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'evil-normal-state&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If input lag is an issue, &lt;code&gt;:timeout&lt;/code&gt; can still be used as a visual enhancement. For example, you can bind &lt;code&gt;SPC SPC&lt;/code&gt; to end a sentence if you don’t normally need to type two spaces anywhere else. This works without &lt;code&gt;:timeout&lt;/code&gt; but is visually confusing since spaces are never be inserted until the next keypress. &lt;code&gt;:timeout&lt;/code&gt; can be used to enhance such a keybinding:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;defun&lt;/span&gt; &lt;span class="pl-e"&gt;my-insert-space&lt;/span&gt; ()
  (&lt;span class="pl-k"&gt;interactive&lt;/span&gt;)
  (&lt;span class="pl-c1"&gt;insert&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt; &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))

(&lt;span class="pl-k"&gt;defun&lt;/span&gt; &lt;span class="pl-e"&gt;my-sentence-end&lt;/span&gt; ()
  (&lt;span class="pl-k"&gt;interactive&lt;/span&gt;)
  (&lt;span class="pl-c1"&gt;insert&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;.  &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))

(general-def &lt;span class="pl-c1"&gt;'insert&lt;/span&gt; text-mode-map
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SPC&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; (general-key-dispatch &lt;span class="pl-c1"&gt;'my-insert-space&lt;/span&gt;
          &lt;span class="pl-c1"&gt;:timeout&lt;/span&gt; &lt;span class="pl-c1"&gt;0.1&lt;/span&gt;
          &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SPC&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'my-sentence-end&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you are using &lt;code&gt;general-key-dispatch&lt;/code&gt; with a timeout to mirror some prefix keymap in insert state, it may also convenient to use the &lt;code&gt;:inherit-keymap&lt;/code&gt; keyword. This allows using prefix keybindings without the need to re-specify them in the &lt;code&gt;general-key-dispatch&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(general-nmap &lt;span class="pl-c1"&gt;:prefix&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;,&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
              &lt;span class="pl-c1"&gt;:prefix-command&lt;/span&gt; &lt;span class="pl-c1"&gt;'my-prefix-map&lt;/span&gt;
              &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;g&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'magit-status&lt;/span&gt;)

(general-imap &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;,&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
              (general-key-dispatch &lt;span class="pl-c1"&gt;'self-insert-command&lt;/span&gt;
                &lt;span class="pl-c1"&gt;:timeout&lt;/span&gt; &lt;span class="pl-c1"&gt;0.25&lt;/span&gt;
                &lt;span class="pl-c1"&gt;:inherit-keymap&lt;/span&gt; my-prefix-map))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you bind more keys under your prefix later on in normal state, they will still be available when pressing the prefix in insert state without the need to re-evaluate the &lt;code&gt;general-key-dispatch&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;By default, &lt;code&gt;general-key-dispatch&lt;/code&gt; will prevent name clashes by appending a unique number to name of the created command (e.g. &lt;code&gt;general-dispatch-self-insert-command-G402&lt;/code&gt;). If you would like to reference the created command by name, you can name it yourself using the &lt;code&gt;:name&lt;/code&gt; keyword argument (e.g. &lt;code&gt;:name general-insert-prefix-dispatch&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Like with &lt;code&gt;general-simulate-key&lt;/code&gt; used with a command name, the behavior of &lt;code&gt;evil-repeat&lt;/code&gt; will depend on the command that ends up running. Having repeating work correctly requires handling a lot of edge cases, so please make an issue if you find any problems. Note that evil does not support repeating a count that comes before an operator currently, but repeating should work when the count follows the operator key (&lt;code&gt;3cc&lt;/code&gt; vs &lt;code&gt;c3c&lt;/code&gt;).&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-choosing-definitions-based-on-predicates" class="anchor" aria-hidden="true" href="#choosing-definitions-based-on-predicates"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Choosing Definitions Based on Predicates&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;general-predicate-dispatch&lt;/code&gt; can be used to generate a &lt;code&gt;menu-item&lt;/code&gt; that will behave differently based on the provided predicates. It takes a fallback definition as the first argument and then a list of predicates and alternate definitions (which can be commands, keymaps, etc.). Predicates are checked in order. If no predicate is matched and the fallback command is nil, then the mapping will be ignored (the keymap with the next highest precedence, if one exists, will be checked for the pressed key(s)).&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(general-define-key &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&amp;lt;right&amp;gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
                    (general-predicate-dispatch &lt;span class="pl-c1"&gt;'right-char&lt;/span&gt;
                      &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; pred def ...&lt;/span&gt;
                      (&lt;span class="pl-c1"&gt;eolp&lt;/span&gt;) &lt;span class="pl-c1"&gt;'beginning-of-line&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;:docstring&lt;/code&gt; keyword can be specified to add a description to the extended menu item.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-key-translation" class="anchor" aria-hidden="true" href="#key-translation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Key “Translation”&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;general-translate-key&lt;/code&gt; allows binding a key to the definition of another key in the same keymap (comparable to how vim’s keybindings work). Its arguments are the &lt;code&gt;states&lt;/code&gt; (which can be nil for non-evil keymaps) and &lt;code&gt;keymaps&lt;/code&gt; (both symbols or lists of symbols like for &lt;code&gt;general-define-key&lt;/code&gt;) to bind/look up the key(s) in followed optionally by keyword arguments (currently only &lt;code&gt;:destructive&lt;/code&gt;) and key/replacement pairs.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;evil-collection-translate-key&lt;/code&gt; allows binding a key to the definition of another key in the same keymap (comparable to how vim’s keybindings work). Its arguments are the &lt;code&gt;states&lt;/code&gt; and &lt;code&gt;keymaps&lt;/code&gt; to bind/look up the key(s) in followed optionally by keyword arguments (currently only &lt;code&gt;:destructive&lt;/code&gt;) and key/replacement pairs. &lt;code&gt;states&lt;/code&gt; can be nil for non-evil keymaps, and both &lt;code&gt;states&lt;/code&gt; and &lt;code&gt;keymaps&lt;/code&gt; can be a single symbol or a list of symbols.&lt;/p&gt;
&lt;p&gt;This can be particularly useful, for example, when you want make key swaps/cycles en masse. This use case is similar to one for &lt;code&gt;general-simulate-key&lt;/code&gt; (i.e. make a key act as another key that has a consistent meaning but different commands for different modes without having to individually bind the key to the exact definition in each mode’s keymap). However, &lt;code&gt;general-simulate-key&lt;/code&gt; is not always suitable for this purpose. It can be used to, for example, make &lt;code&gt;j&lt;/code&gt; in normal state act as &lt;code&gt;C-n&lt;/code&gt; in emacs state (to use the default “down” navigation key for all modes without needing to individually make keybindings for every mode), but it cannot be used to swap/cycle keys within a single keymap, as this would cause an infinite loop of simulating the other key(s).&lt;/p&gt;
&lt;p&gt;An example use case of &lt;code&gt;general-translate-key&lt;/code&gt; is for non-QWERTY users who want to retain the hjkl keyboard positions for movement in dired, mu4e, etc. When using a package that already creates hjkl keybindings for the desired mode(s) (e.g. &lt;a href="https://github.com/jojojames/evil-collection"&gt;evil-collection&lt;/a&gt;), it is easily possible to make these cycles in a single statement:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; single invocation example&lt;/span&gt;
(general-translate-key &lt;span class="pl-c1"&gt;nil&lt;/span&gt; &lt;span class="pl-c1"&gt;'evil-normal-state-keymap&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;n&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;j&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;e&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;k&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  ...)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; cycling keys en masse&lt;/span&gt;
(&lt;span class="pl-k"&gt;dolist&lt;/span&gt; (keymap keymaps-with-hjkl-keybindings)
  (general-translate-key &lt;span class="pl-c1"&gt;'normal&lt;/span&gt; keymap
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; colemak hnei is qwerty hjkl&lt;/span&gt;
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;n&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;j&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;e&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;k&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;i&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;l&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; add back nei&lt;/span&gt;
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;j&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;e&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;k&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;n&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;l&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;i&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;By default, the first invocation of &lt;code&gt;general-translate-key&lt;/code&gt; will make a backup of the keymap. Each subsequent invocation will look up keys in the backup instead of the original. This means that a call to &lt;code&gt;general-translate-key&lt;/code&gt; will always have the same behavior even if evaluated multiple times. When &lt;code&gt;:destructive t&lt;/code&gt; is specified, keys are looked up in the keymap as it is currently. This means that a call to &lt;code&gt;general-translate-key&lt;/code&gt; that swapped two keys would continue to swap/unswap them with each call. Therefore when &lt;code&gt;:destructive t&lt;/code&gt; is used, all cycles/swaps must be done within a single call to &lt;code&gt;general-translate-key&lt;/code&gt;. To make a comparison to vim keybindings, &lt;code&gt;:destructive t&lt;/code&gt; is comparable to vim’s &lt;code&gt;map&lt;/code&gt;, and &lt;code&gt;:destructive nil&lt;/code&gt; is comparable to vim’s &lt;code&gt;noremap&lt;/code&gt; (where the “original” keybindings are those that existed in the keymap when &lt;code&gt;general-translate-key&lt;/code&gt; was first used).&lt;/p&gt;
&lt;p&gt;You’ll almost always want to use the default behavior (especially in your init file). The limitation of &lt;code&gt;:destructive nil&lt;/code&gt; is that you can’t translate a key to another key that was defined after the first &lt;code&gt;evil-collection-translate-key&lt;/code&gt;, so &lt;code&gt;:destructive t&lt;/code&gt; may be useful for interactive experimentation.&lt;/p&gt;
&lt;p&gt;Note that general state and keymap aliases (as well as &lt;code&gt;local&lt;/code&gt; and &lt;code&gt;global&lt;/code&gt;) and &lt;code&gt;general-implicit-kbd&lt;/code&gt; are supported by &lt;code&gt;general-translate-key&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; normal -&amp;gt; evil-normal-state-keymap&lt;/span&gt;
(general-translate-key &lt;span class="pl-c1"&gt;nil&lt;/span&gt; &lt;span class="pl-c1"&gt;'normal&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; kbd not necessary by default&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-p&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-n&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Keys are bound using &lt;code&gt;general-define-key&lt;/code&gt;, so they are viewable with &lt;code&gt;general-describe-keybindings&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;general-swap-key&lt;/code&gt; is provided as a wrapper around &lt;code&gt;general-translate-key&lt;/code&gt; that allows swapping keys:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(general-swap-key &lt;span class="pl-c1"&gt;nil&lt;/span&gt; &lt;span class="pl-c1"&gt;'normal&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;:&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;a&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;A&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; equivalent to&lt;/span&gt;
(general-translate-key &lt;span class="pl-c1"&gt;nil&lt;/span&gt; &lt;span class="pl-c1"&gt;'normal&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;:&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;:&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;a&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;A&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;A&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;a&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-automatic-key-unbinding" class="anchor" aria-hidden="true" href="#automatic-key-unbinding"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Automatic Key Unbinding&lt;/h2&gt;
&lt;p&gt;To automatically prevent &lt;code&gt;Key sequence starts with a non-prefix key&lt;/code&gt; errors without the need to explicitly unbind non-prefix keys, you can add &lt;code&gt;(general-auto-unbind-keys)&lt;/code&gt; to your configuration file. This will advise &lt;code&gt;define-key&lt;/code&gt; to unbind any bound subsequence of the &lt;code&gt;KEY&lt;/code&gt;. Currently, this will only have an effect for &lt;code&gt;general.el&lt;/code&gt; key definers. The advice can later be removed with &lt;code&gt;(general-auto-unbind-keys t)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The reason that advice is used is because &lt;code&gt;general-define-key&lt;/code&gt; does not always define keys in the same manner. Because customer definers are supported with &lt;code&gt;:definer&lt;/code&gt;, &lt;code&gt;general-define-key&lt;/code&gt; does not have the necessary information to handle every case itself.&lt;/p&gt;
&lt;p&gt;As a final note, if you, for example, bind &lt;code&gt;s&lt;/code&gt; to a command using &lt;code&gt;general-define-key&lt;/code&gt; and then later bind &lt;code&gt;s &amp;lt;key&amp;gt;&lt;/code&gt; to something, &lt;code&gt;s&lt;/code&gt; will still show up in &lt;code&gt;general-describe-keybindings&lt;/code&gt; even though it’s no longer bound. Since this is preventable by simply removing the initial unused keybinding, I likely will not try to add a workaround to fix this.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-non-keybinding-related-configuration-helpers" class="anchor" aria-hidden="true" href="#non-keybinding-related-configuration-helpers"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Non-keybinding-related Configuration Helpers&lt;/h1&gt;
&lt;p&gt;General.el also provides a few helper functions/macros for other configuration purposes. They are intended to be slightly more convenient versions of functions/macros provided by default.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-settings" class="anchor" aria-hidden="true" href="#settings"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Settings&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;general-setq&lt;/code&gt; is a stripped-down &lt;code&gt;customize-set-variable&lt;/code&gt; that can act as a drop-in replacement for &lt;code&gt;setq&lt;/code&gt;. The reason you might want to use it instead of &lt;code&gt;setq&lt;/code&gt; is that &lt;code&gt;setq&lt;/code&gt; cannot correctly set all variables. Some variables defined with &lt;code&gt;defcustom&lt;/code&gt; specify a custom setter with &lt;code&gt;:set&lt;/code&gt; that must be used for changes to take effect (e.g. &lt;code&gt;auto-revert-interval&lt;/code&gt;). If the corresponding package has already been loaded, using &lt;code&gt;setq&lt;/code&gt; will generally not work to set these variables. On the other hand, &lt;code&gt;general-setq&lt;/code&gt; will correctly use the custom setter when necessary. One benefit of &lt;code&gt;general-setq&lt;/code&gt; over &lt;code&gt;customize-set-variable&lt;/code&gt; is that it can be used to set multiple variables at once. It does not do everything &lt;code&gt;customize-set-variable&lt;/code&gt; does (e.g. it cannot be used interactively, does not attempt to load variable dependencies, and does not allow the user to specify comments). From some basic testing, it is 10x to 100x faster because of this, but the speed difference should not really be noticeable if you aren’t setting thousands of variables during emacs initialization.&lt;/p&gt;
&lt;p&gt;Here’s an example using variables that have a custom setter:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(general-setq auto-revert-interval &lt;span class="pl-c1"&gt;10&lt;/span&gt;
              evil-want-Y-yank-to-eol &lt;span class="pl-c1"&gt;t&lt;/span&gt;
              evil-search-module &lt;span class="pl-c1"&gt;'evil-search&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that &lt;code&gt;setq&lt;/code&gt; will work as expected as long it is used before the corresponding package is loaded, but with &lt;code&gt;customize-set-variable&lt;/code&gt; or &lt;code&gt;general-setq&lt;/code&gt;, you do not need to worry about whether or not the package has been loaded. If you decide to use &lt;code&gt;general-setq&lt;/code&gt;, I’d recommend aliasing it to something shorter like &lt;code&gt;gsetq&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;One major difference from &lt;code&gt;customize-set-variable&lt;/code&gt; that you should be aware of is that &lt;code&gt;general-setq&lt;/code&gt; falls back to using &lt;code&gt;set&lt;/code&gt; instead of &lt;code&gt;set-default&lt;/code&gt;. This means that, like &lt;code&gt;setq&lt;/code&gt;, it will alter the local value of buffer-local variables instead of the default value.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;general-setq-default&lt;/code&gt; and &lt;code&gt;general-setq-local&lt;/code&gt; also exist but do not attempt to call custom setters. The reason for this is that I have never seen any custom setters for variables that make sense to set both globally and locally (custom setters I’ve seen just use &lt;code&gt;set-default&lt;/code&gt;). &lt;code&gt;setq-default&lt;/code&gt; is useful when you want to globally change the default for a buffer-local variable. &lt;code&gt;setq-local&lt;/code&gt; is useful when you want to make a non-buffer-local variable buffer-local and then change its local value (&lt;code&gt;setq&lt;/code&gt; already preferentially alters the buffer-local value of a variable if there is one). For now, the general.el equivalents are just aliases, but in the future, they will likely record user settings to be displayed in a table later.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-hooks-and-advice" class="anchor" aria-hidden="true" href="#hooks-and-advice"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Hooks and Advice&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;general-add-hook&lt;/code&gt;, &lt;code&gt;general-remove-hook&lt;/code&gt;, &lt;code&gt;general-advice-add&lt;/code&gt;, and &lt;code&gt;general-advice-remove&lt;/code&gt; all act as drop-in replacements for their corresponding functions but allow lists for some of the arguments. The hook functions allow specifying lists for the hooks and functions, and the advice functions allow specifying lists for the symbols and functions. Because I don’t like the difference in naming for the default advice functions, &lt;code&gt;general-add-advice&lt;/code&gt; and &lt;code&gt;general-remove-advice&lt;/code&gt; are also provided as aliases.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(general-add-hook my-lisp-mode-hooks
                  (&lt;span class="pl-k"&gt;list&lt;/span&gt; &lt;span class="pl-c1"&gt;#&lt;span class="pl-c1"&gt;'lispy-mode&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;#&lt;span class="pl-c1"&gt;'rainbow-delimiters-mode&lt;/span&gt;&lt;/span&gt;))
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; note that setting the :jump command property is recommended instead of this&lt;/span&gt;
(general-add-advice (&lt;span class="pl-k"&gt;list&lt;/span&gt; &lt;span class="pl-c1"&gt;#&lt;span class="pl-c1"&gt;'git-gutter:next-hunk&lt;/span&gt;&lt;/span&gt;
                          &lt;span class="pl-c1"&gt;#&lt;span class="pl-c1"&gt;'git-gutter:previous-hunk&lt;/span&gt;&lt;/span&gt;)
                    &lt;span class="pl-c1"&gt;:before&lt;/span&gt; &lt;span class="pl-c1"&gt;#&lt;span class="pl-c1"&gt;'evil-set-jump&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h1&gt;&lt;a id="user-content-integration-with-other-packages" class="anchor" aria-hidden="true" href="#integration-with-other-packages"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Integration with Other Packages&lt;/h1&gt;
&lt;h2&gt;&lt;a id="user-content-use-package-keywords" class="anchor" aria-hidden="true" href="#use-package-keywords"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Use-package Keywords&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-general-keyword" class="anchor" aria-hidden="true" href="#general-keyword"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;:general Keyword&lt;/h3&gt;
&lt;p&gt;General also optionally provides a use-package keyword. &lt;code&gt;:general&lt;/code&gt; is similar to &lt;code&gt;:bind&lt;/code&gt; in that it implies &lt;code&gt;:defer t&lt;/code&gt; whenever there are bound commands that can be autoloaded (e.g. it will not imply &lt;code&gt;:defer t&lt;/code&gt; if the only bound command is to a lambda, for example). Whenever autoloadable commands are bound, use-package will create autoloads for them (though this is usually not necessary). The keyword is followed by one or more lists containing arguments for &lt;code&gt;general-def&lt;/code&gt;; there is no difference in syntax:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; &lt;span class="pl-c1"&gt;org&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:general&lt;/span&gt;
  (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-c c&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'org-capture&lt;/span&gt;)
  (&lt;span class="pl-c1"&gt;:keymaps&lt;/span&gt; &lt;span class="pl-c1"&gt;'org-mode-map&lt;/span&gt;
   &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;TAB&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'org-cycle&lt;/span&gt;)
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; uses &lt;span class="pl-smi"&gt;`general-def'&lt;/span&gt; not &lt;span class="pl-smi"&gt;`general-define-key'&lt;/span&gt;, so this is fine&lt;/span&gt;
  (org-mode-map
   &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;TAB&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'org-cycle&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;:general&lt;/code&gt; keyword also supports using any other key definer/wrapper by manually specifying it:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; &lt;span class="pl-c1"&gt;org&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:general&lt;/span&gt;
  (general-nmap &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SPC c&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'org-capture&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;One annoyance you may encounter is that the default function for indentation will indent a list starting with a keyword like a function:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;:keymaps&lt;/span&gt; &lt;span class="pl-c1"&gt;'org-mode-map&lt;/span&gt;
          &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;TAB&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'org-cycle&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is an annoyance you may have using other emacs packages as well and can be fixed by modifying &lt;code&gt;lisp-indent-function&lt;/code&gt; (see &lt;a href="http://emacs.stackexchange.com/q/10230/5278" rel="nofollow"&gt;this emacs stackexchange question&lt;/a&gt; and Fuco1’s modified &lt;code&gt;lisp-indent-function&lt;/code&gt; in one of the answers there).&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-hook-keywords" class="anchor" aria-hidden="true" href="#hook-keywords"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Hook Keywords&lt;/h3&gt;
&lt;p&gt;General provides two alternatives to &lt;code&gt;:hook&lt;/code&gt; that use &lt;code&gt;general-add-hook&lt;/code&gt; called &lt;code&gt;:ghook&lt;/code&gt; and &lt;code&gt;:gfhook&lt;/code&gt;. Both take any number of arguments of symbols or lists. List arguments work the same for both; they correspond to a list of arguments for &lt;a href="#hooks-and-advice"&gt;~general-add-hook~&lt;/a&gt;. The primary difference between the two is that symbol arguments to &lt;code&gt;:ghook&lt;/code&gt; are &lt;i&gt;hooks&lt;/i&gt;, but they are &lt;i&gt;functions&lt;/i&gt; for &lt;code&gt;:gfhook&lt;/code&gt; (hence the &lt;code&gt;f&lt;/code&gt;). Furthermore, &lt;code&gt;:ghook&lt;/code&gt; usually implies &lt;code&gt;:defer t&lt;/code&gt;, and &lt;code&gt;:gfhook&lt;/code&gt; never implies &lt;code&gt;:defer t&lt;/code&gt;. &lt;code&gt;:ghook&lt;/code&gt; should be used when the &lt;code&gt;general-add-hook&lt;/code&gt; is meant to trigger the loading of the package. &lt;code&gt;:gfhook&lt;/code&gt; should be used when the &lt;code&gt;general-add-hook&lt;/code&gt; is meant to trigger some function in response to the package’s mode being enabled (or toggled in the case of a minor mode). More simply put, &lt;code&gt;:ghook&lt;/code&gt; is suited towards enabling minor modes, and &lt;code&gt;:gfhook&lt;/code&gt; is suited towards performing setup once some mode has loaded. The use case for each is further explained below.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-ghook-keyword" class="anchor" aria-hidden="true" href="#ghook-keyword"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;:ghook Keyword&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;:ghook&lt;/code&gt; is intended to be used to add a package’s minor mode enabling function to a user-specified &lt;i&gt;hook&lt;/i&gt;, so that when hook is run, the package will be loaded and the mode enabled. This means that &lt;code&gt;:ghook&lt;/code&gt; will usually imply &lt;code&gt;:defer t&lt;/code&gt;. While it does not always imply &lt;code&gt;:defer t&lt;/code&gt;, it will add any non-lambda functions to &lt;code&gt;:commands&lt;/code&gt; (this is the same behavior as &lt;code&gt;:hook&lt;/code&gt;). Though this is usually unnecessary (the commands probably already have autoloads), it will in turn imply &lt;code&gt;:defer t&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Symbols specified with &lt;code&gt;:ghook&lt;/code&gt; correspond to hooks, and the function to add to each hook is inferred from the package’s name (i.e. &lt;code&gt;-mode&lt;/code&gt; is automatically added to the package name unless the package’s name already ends in &lt;code&gt;-mode&lt;/code&gt;). For example, these are all the same:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; rainbow-delimiters
  &lt;span class="pl-c1"&gt;:ghook&lt;/span&gt; &lt;span class="pl-c1"&gt;'prog-mode-hook&lt;/span&gt;)

(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; rainbow-delimiters
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; &lt;span class="pl-smi"&gt;`general-add-hook'&lt;/span&gt; arglist: HOOKS FUNCTIONS &amp;amp;optional APPEND LOCAL&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; a missing FUNCTIONS argument will be replaced with inferred minor mode&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:ghook&lt;/span&gt; (&lt;span class="pl-c1"&gt;'prog-mode-hook&lt;/span&gt;))

(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; rainbow-delimiters
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; a null or non-symbol placeholder for FUNCTIONS will be replaced with&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; inferred minor mode command; this may be useful if you want to keep the&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; inferred command but also want to set the APPEND and/or LOCAL arguments&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; afterwards, e.g. ('prog-mode-hook nil t)&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:ghook&lt;/span&gt; (&lt;span class="pl-c1"&gt;'prog-mode-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;))

(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; rainbow-delimiters
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; the full arglist for &lt;span class="pl-smi"&gt;`general-add-hook'&lt;/span&gt; can be specified&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; this is necessary if inference is not possible (see below for an example)&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:ghook&lt;/span&gt; (&lt;span class="pl-c1"&gt;'prog-mode-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;#&lt;span class="pl-c1"&gt;'rainbow-delimiters-mode&lt;/span&gt;&lt;/span&gt;))

(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; :commands implies :defer t&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:commands&lt;/span&gt; rainbow-delimiters-mode
  &lt;span class="pl-c1"&gt;:init&lt;/span&gt; (general-add-hook &lt;span class="pl-c1"&gt;'prog-mode-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;#&lt;span class="pl-c1"&gt;'rainbow-delimiters-mode&lt;/span&gt;&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you are already familiar with &lt;code&gt;:hook&lt;/code&gt;, you should note that there are quite a few syntactic differences between &lt;code&gt;:ghook&lt;/code&gt; and &lt;code&gt;:hook&lt;/code&gt;. Firstly, quoting the hooks and functions is required. Like &lt;code&gt;:general&lt;/code&gt; uses the same syntax as &lt;code&gt;general-def(ine-key)&lt;/code&gt; (unlike &lt;code&gt;:bind&lt;/code&gt;), &lt;code&gt;:ghook&lt;/code&gt; uses the same syntax as &lt;code&gt;(general-)add-hook&lt;/code&gt; for both clarity and convenience. For example, the user may want to use a helper function/macro to generate the function(s) to add to the hook (see the &lt;a href="#gfhook-keyword"&gt;:gfhook section&lt;/a&gt; for a specific example). The user may also want to specify a variable containing a list of hooks instead of an actual hook name:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;defconst&lt;/span&gt; &lt;span class="pl-en"&gt;my-lisp-mode-hooks&lt;/span&gt;
  '(lisp-mode-hook
    emacs-lisp-mode-hook
    clojure-mode-hook
    scheme-mode-hook
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; ...&lt;/span&gt;
    ))

(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; lispy
  &lt;span class="pl-c1"&gt;:ghook&lt;/span&gt; my-lisp-mode-hooks)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; same as&lt;/span&gt;
(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; lispy
  &lt;span class="pl-c1"&gt;:ghook&lt;/span&gt; (my-lisp-mode-hooks))

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; same as&lt;/span&gt;
(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; lispy
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;;  &lt;span class="pl-smi"&gt;`general-add-hook'&lt;/span&gt; can take a list of hooks for the HOOK argument&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:ghook&lt;/span&gt; ('(lisp-mode-hook
            emacs-lisp-mode-hook
            clojure-mode-hook
            scheme-mode-hook
            &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; ...&lt;/span&gt;
            )))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Furthermore, &lt;code&gt;:ghook&lt;/code&gt; will not automatically add &lt;code&gt;-hook&lt;/code&gt; to specified hook symbols (i.e. you must specify &lt;code&gt;prog-mode-hook&lt;/code&gt;; &lt;code&gt;prog-mode&lt;/code&gt; is not sufficient). This design decision is intended to help prevent confusion since &lt;code&gt;:gfhook&lt;/code&gt; also exists, and its symbols correspond to functions (not hooks) that could also end in &lt;code&gt;-mode&lt;/code&gt; (and could potentially not be sharp quoted). I don’t think the loss in conciseness is major, and hopefully this will help always make it immediately clear whether symbols correspond to functions or hooks.&lt;/p&gt;
&lt;p&gt;Lastly, &lt;code&gt;:hook&lt;/code&gt; only takes one argument, whereas &lt;code&gt;:ghook&lt;/code&gt; can take an arbitrary number of arguments (just like &lt;code&gt;:general&lt;/code&gt;):&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; lispy
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; any number of symbols (or lists) is allowed&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:ghook&lt;/span&gt;
  &lt;span class="pl-c1"&gt;'lisp-mode-hook&lt;/span&gt;
  &lt;span class="pl-c1"&gt;'emacs-lisp-mode-hook&lt;/span&gt;
  &lt;span class="pl-c1"&gt;'clojure-mode-hook&lt;/span&gt;
  &lt;span class="pl-c1"&gt;'scheme-mode-hook&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that if the function name cannot be inferred from the package name (i.e. the package name or the package name with &lt;code&gt;-mode&lt;/code&gt; appended is not correct), you need to specify a full &lt;code&gt;general-add-hook&lt;/code&gt; arglist:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; yasnippet
  &lt;span class="pl-c1"&gt;:ghook&lt;/span&gt; ('(text-mode-hook prog-mode-hook) &lt;span class="pl-c1"&gt;#&lt;span class="pl-c1"&gt;'yas-minor-mode&lt;/span&gt;&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content-gfhook-keyword" class="anchor" aria-hidden="true" href="#gfhook-keyword"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;:gfhook Keyword&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;:gfhook&lt;/code&gt; is intended to be used to specify &lt;i&gt;functions&lt;/i&gt; to add to the package’s mode hook. The hook is inferred from the package’s name (by appending either &lt;code&gt;-mode-hook&lt;/code&gt; or just &lt;code&gt;-hook&lt;/code&gt; if the package’s name ends in &lt;code&gt;-mode&lt;/code&gt;). If the hook cannot be inferred from the package name, then the full arglist must be specified just as with &lt;code&gt;:ghook&lt;/code&gt;. Unlike &lt;code&gt;:ghook&lt;/code&gt;, &lt;code&gt;:gfhook&lt;/code&gt; never adds functions to &lt;code&gt;:commands&lt;/code&gt; and therefore never implies &lt;code&gt;:defer t&lt;/code&gt;. This is because the functions specified are ones that should be run when turning on (or toggling) the mode(s) the package provides. The specified functions are external to the package, could be called elsewhere, and therefore should not trigger the package to load. The following all have the same effect:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; &lt;span class="pl-c1"&gt;org&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; for a major-mode package, you might use :mode to imply :defer t (or just&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; use :defer t; or just &lt;span class="pl-smi"&gt;`use-package-always-defer'&lt;/span&gt; which I personally prefer)&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:gfhook&lt;/span&gt;
  &lt;span class="pl-c1"&gt;#&lt;span class="pl-c1"&gt;'visual-line-mode&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-c1"&gt;#&lt;span class="pl-c1"&gt;'my-org-setup&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; ...&lt;/span&gt;
  )

(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; &lt;span class="pl-c1"&gt;org&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:init&lt;/span&gt;
  (general-add-hook &lt;span class="pl-c1"&gt;'org-mode-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;#&lt;span class="pl-c1"&gt;'visual-line-mode&lt;/span&gt;&lt;/span&gt;)
  (general-add-hook &lt;span class="pl-c1"&gt;'org-mode-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;#&lt;span class="pl-c1"&gt;'my-org-setup&lt;/span&gt;&lt;/span&gt;))

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; this is also valid but less concise&lt;/span&gt;
(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; &lt;span class="pl-c1"&gt;org&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; specify null or non-symbol placeholder for HOOKS to use inferred hook&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:gfhook&lt;/span&gt; (&lt;span class="pl-c1"&gt;nil&lt;/span&gt; (&lt;span class="pl-k"&gt;list&lt;/span&gt; &lt;span class="pl-c1"&gt;#&lt;span class="pl-c1"&gt;'visual-line-mode&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;#&lt;span class="pl-c1"&gt;'my-org-setup&lt;/span&gt;&lt;/span&gt;)))

(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; &lt;span class="pl-c1"&gt;org&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:init&lt;/span&gt;
  (general-add-hook &lt;span class="pl-c1"&gt;'org-mode-hook&lt;/span&gt; (&lt;span class="pl-k"&gt;list&lt;/span&gt; &lt;span class="pl-c1"&gt;#&lt;span class="pl-c1"&gt;'visual-line-mode&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;#&lt;span class="pl-c1"&gt;'my-org-setup&lt;/span&gt;&lt;/span&gt;)))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Like with &lt;code&gt;:ghook&lt;/code&gt;, &lt;code&gt;:gfhook&lt;/code&gt; still requires quoting, so you can use variables and function/macro calls to generate the function to add to the hook:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;defmacro&lt;/span&gt; &lt;span class="pl-e"&gt;disable&lt;/span&gt; (&lt;span class="pl-v"&gt;mode&lt;/span&gt;)
  `(&lt;span class="pl-c1"&gt;lambda&lt;/span&gt; () (&lt;span class="pl-c1"&gt;&lt;span class="pl-mi1"&gt;,&lt;/span&gt;mode&lt;/span&gt; &lt;span class="pl-c1"&gt;-1&lt;/span&gt;)))

(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; proced
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; must be in a &lt;span class="pl-smi"&gt;`general-add-hook'&lt;/span&gt; argument list, so that it itself is not&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; considered one&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:gfhook&lt;/span&gt; (&lt;span class="pl-c1"&gt;nil&lt;/span&gt; (disable visual-line-mode)))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Although you could use &lt;code&gt;:gfhook&lt;/code&gt; to enable minor modes for some major mode (e.g. enable flyspell inside &lt;code&gt;(use-package org)&lt;/code&gt;), it is probably more logical/organized to group these hooks along with their minor modes’ use-package declarations (e.g. using &lt;code&gt;:ghook&lt;/code&gt;). &lt;code&gt;:gfhook&lt;/code&gt; is more suited for setup functions. Expanding on the proced example:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;defun&lt;/span&gt; &lt;span class="pl-e"&gt;my-proced-setup&lt;/span&gt; ()
  (&lt;span class="pl-c1"&gt;visual-line-mode&lt;/span&gt; &lt;span class="pl-c1"&gt;-1&lt;/span&gt;)
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; not global; has to be run in buffer&lt;/span&gt;
  (&lt;span class="pl-c1"&gt;proced-toggle-auto-update&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;))

(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; proced
  &lt;span class="pl-c1"&gt;:gfhook&lt;/span&gt; &lt;span class="pl-c1"&gt;#&lt;span class="pl-c1"&gt;'my-proced-setup&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-use-with-key-chord" class="anchor" aria-hidden="true" href="#use-with-key-chord"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Use with Key-chord&lt;/h2&gt;
&lt;p&gt;General provides a simple function that will rewrite a string into a key-chord vector. This allows you to easily use general to create definitions for &lt;code&gt;key-chord.el&lt;/code&gt;. The following are equivalent:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(key-chord-define evil-insert-state-map &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;jk&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'evil-normal-state&lt;/span&gt;)
(general-define-key &lt;span class="pl-c1"&gt;:keymaps&lt;/span&gt; &lt;span class="pl-c1"&gt;'evil-insert-state-map&lt;/span&gt;
                    (general-chord &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;jk&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;'evil-normal-state&lt;/span&gt;
                    (general-chord &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;kj&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;'evil-normal-state&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that the order of the keys does matter unlike with the default &lt;code&gt;key-chord-define&lt;/code&gt;.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-extended-definition-syntax" class="anchor" aria-hidden="true" href="#extended-definition-syntax"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Extended Definition Syntax&lt;/h1&gt;
&lt;p&gt;General.el supports some extra per-definition keywords. It has “type” keywords that give general.el some extra information to use to create definitions (e.g. &lt;code&gt;:prefix-command&lt;/code&gt; and &lt;code&gt;:keymap&lt;/code&gt;) and other keywords that will alter or ignore definitions (e.g. &lt;code&gt;:predicate&lt;/code&gt; and &lt;code&gt;:ignore&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;The system that allows for the default keywords can also be extended by the user to support more keywords that can either directly alter the definition or just be used for side effects (like &lt;code&gt;:which-key&lt;/code&gt;). An extended definition keyword can have any number of helper keywords (and can also be used as a helper keyword itself, e.g. &lt;code&gt;:keymap&lt;/code&gt;). See &lt;a href="#user-defined-extended-definition-keywords"&gt;User-defined Extended Definition Keywords&lt;/a&gt; for more information on creating new keywords.&lt;/p&gt;
&lt;p&gt;Here are the keywords available by default (helper keywords are subitems; specific examples are given later):&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;:def&lt;/code&gt; - Implicit; this is paired with the actual definition (helper keyword; does not trigger any special behavior by itself)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;“Type” specifiers:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;:keymap&lt;/code&gt; - For keymaps; if the keymap is not defined, will create an “autoloaded” keymap for &lt;code&gt;:package&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code&gt;:package&lt;/code&gt; - The package to load (also global)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code&gt;:prefix-command&lt;/code&gt; and/or &lt;code&gt;:prefix-map&lt;/code&gt; - These are the same as &lt;code&gt;:def&lt;/code&gt; and &lt;code&gt;:keymap&lt;/code&gt; respectively but will create a prefix command and/or keymap (these behave the same as the global keyword arguments except for any key as opposed to just &lt;code&gt;:prefix&lt;/code&gt;)
    &lt;ul&gt;
      &lt;li&gt;&lt;code&gt;:prefix-name&lt;/code&gt; The keymap menu name/prompt (global value never considered)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code&gt;:ignore&lt;/code&gt; - Do not create a keybinding for the key def pair&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that every bindable definition must have &lt;code&gt;:def&lt;/code&gt;, but general allows for shorthand where &lt;code&gt;:def&lt;/code&gt; can be omitted or a “type” specifier can be used instead:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; shorthand&lt;/span&gt;
'(swiper &lt;span class="pl-c1"&gt;:wk&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;swipe&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; rewritten to&lt;/span&gt;
'(&lt;span class="pl-c1"&gt;:def&lt;/span&gt; swiper &lt;span class="pl-c1"&gt;:wk&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;swipe&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; shorthand&lt;/span&gt;
'(&lt;span class="pl-c1"&gt;:keymap&lt;/span&gt; some-keymap)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; rewritten to&lt;/span&gt;
'(&lt;span class="pl-c1"&gt;:def&lt;/span&gt; some-keymap &lt;span class="pl-c1"&gt;:keymap&lt;/span&gt; some-keymap)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; same as&lt;/span&gt;
'(&lt;span class="pl-c1"&gt;:def&lt;/span&gt; some-keymap &lt;span class="pl-c1"&gt;:keymap&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; shorthand&lt;/span&gt;
'(&lt;span class="pl-c1"&gt;:prefix-command&lt;/span&gt; my-prefix-cmd &lt;span class="pl-c1"&gt;:prefix-map&lt;/span&gt; my-prefix-map)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; rewritten to&lt;/span&gt;
'(&lt;span class="pl-c1"&gt;:def&lt;/span&gt; my-prefix-cmd &lt;span class="pl-c1"&gt;:prefix-command&lt;/span&gt; my-prefix-cmd &lt;span class="pl-c1"&gt;:prefix-map&lt;/span&gt; my-prefix-map)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After the shorthand expansion, the type keywords are handled exactly the same as any other extended definition keyword.&lt;/p&gt;
&lt;p&gt;Which-key functionality (see below for more details):&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;:which-key&lt;/code&gt; or &lt;code&gt;:wk&lt;/code&gt; - The replacement text (or cons or function)
    &lt;ul&gt;
      &lt;li&gt;&lt;code&gt;:major-modes&lt;/code&gt; - Major modes to match (optional; also global)&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;:wk-match-keys&lt;/code&gt; - Whether to include the keys in the match cons (defaults to &lt;code&gt;t&lt;/code&gt; globally)&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;:wk-match-binding&lt;/code&gt; - Whether to include the binding in the match cons (defaults to &lt;code&gt;t&lt;/code&gt;; also global)&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;:wk-full-keys&lt;/code&gt; - Whether the bound keys correspond to the full sequence to match (defaults to &lt;code&gt;t&lt;/code&gt;; also global)&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;:keymap&lt;/code&gt; - When non-nil, general will not try to match a keymap symbol as if it was a command&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Evil command properties (see below for more details):&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;:properties&lt;/code&gt; - The list of properties to add to the command (also global)&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;:repeat&lt;/code&gt; - The repeat property to set for the command (also global)&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;:jump&lt;/code&gt; - The jump property to set for the command (also global)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Global keywords that can be overridden locally:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;:predicate&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The default value for a keyword is &lt;code&gt;nil&lt;/code&gt; unless otherwise specified.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-autoloaded-keymaps" class="anchor" aria-hidden="true" href="#autoloaded-keymaps"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;“Autoloaded” Keymaps&lt;/h2&gt;
&lt;p&gt;As the first example, an extended definition can be used to create an “autoload” for a keymap like use-package’s &lt;code&gt;:bind-keymap&lt;/code&gt; keyword does:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(general-define-key
 &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-c p&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; '(&lt;span class="pl-c1"&gt;:keymap&lt;/span&gt; projectile-command-map &lt;span class="pl-c1"&gt;:package&lt;/span&gt; projectile))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Using this feature, a key can be bound to a keymap that does not exist yet and still work as expected. Projectile will be loaded when &lt;code&gt;C-c p&lt;/code&gt; is used for the first time. This is done by using an intermediate function to load the package and rebind the keys.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;:keymap&lt;/code&gt; is the primary keyword that triggers this check. It can also be used as a helper keyword (e.g. for &lt;code&gt;which-key&lt;/code&gt;). If the keymap already exists, general will not try to create an autoloaded keymap, and &lt;code&gt;:package&lt;/code&gt; is not required.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;:package&lt;/code&gt; is a helper keyword that can be specified locally within the extended definition or globally. When using the use-package &lt;code&gt;:general&lt;/code&gt; keyword, it will automatically be specified.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-which-key-integration" class="anchor" aria-hidden="true" href="#which-key-integration"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Which Key Integration&lt;/h2&gt;
&lt;p&gt;If you are not already familiar with which-key’s replacement system, please see the docstring for &lt;code&gt;which-key-replacement-alist&lt;/code&gt; if you don’t understand any of the examples or information here.&lt;/p&gt;
&lt;p&gt;There are several benefits to using general.el to add which-key replacements. The main benefit is that because the keys and definition are already specified, general.el can automatically assemble the match cons. This reuse of information saves a little space since it is not necessary to make an additional call to &lt;code&gt;which-key-add-key-based-replacements&lt;/code&gt; with the key information. It is also useful since which-key does not currently provide any convenience function for creating a replacement that matches a binding (you have to manually add to &lt;code&gt;which-key-replacement-alist&lt;/code&gt;). However, see which-key’s &lt;a href="https://github.com/justbur/emacs-which-key#automatic"&gt;which-key-enable-extended-define-key&lt;/a&gt; which provides another method for automatically creating replacements and binding keys simultaneously.&lt;/p&gt;
&lt;p&gt;Another related benefit of using &lt;code&gt;:which-key&lt;/code&gt; instead of &lt;code&gt;which-key-add-key-based-replacements&lt;/code&gt; directly even for keys that won’t be bound is that replacements will be added for all prefix combinations (i.e. when &lt;code&gt;:non-normal-prefix&lt;/code&gt; and/or &lt;code&gt;:global-prefix&lt;/code&gt; are also specified).&lt;/p&gt;
&lt;p&gt;The argument supplied to &lt;code&gt;:which-key&lt;/code&gt; or &lt;code&gt;:wk&lt;/code&gt; is equivalent to the REPLACEMENT argument in &lt;code&gt;which-key-add-key-based-replacements&lt;/code&gt;. It can be a full replacement cons of &lt;code&gt;(KEY . BINDING)&lt;/code&gt; or just a string (which will be used as the BINDING and serve as the new description). Additionally it can be a function that will return a replacement cons (see the docstring for &lt;code&gt;which-key-replacements-alist&lt;/code&gt; or the which-key README). Finally, which-key allows for a special replacement of &lt;code&gt;t&lt;/code&gt; to prevent a key from being shown in the which-key popup at all.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;:which-key&lt;/code&gt; keyword can be used with the &lt;code&gt;:major-modes&lt;/code&gt; keyword (locally or globally) which can be compared to using &lt;code&gt;which-key-add-major-mode-key-based-replacements&lt;/code&gt;. &lt;code&gt;:major-modes&lt;/code&gt; can have the following values (see the examples below):&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;t&lt;/code&gt; - the major mode will be obtained from all keymaps by removing “-map”&lt;/li&gt;
  &lt;li&gt;the major mode name (when only one keymap is specified)&lt;/li&gt;
  &lt;li&gt;a list of the following values:
    &lt;ul&gt;
      &lt;li&gt;&lt;code&gt;t&lt;/code&gt; - same behavior as above but only for corresponding index in &lt;code&gt;:keymaps&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;the major mode name for that index&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;nil&lt;/code&gt; (or no item at the index) - don’t match the major mode&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;:wk-match-keys&lt;/code&gt;, &lt;code&gt;:wk-match-binding&lt;/code&gt;, and &lt;code&gt;:wk-full-keys&lt;/code&gt; can be used to customize the match cons. Generally these will not need to be adjusted. The binding is only included in the match cons if one is available, and &lt;code&gt;:wk-full-keys&lt;/code&gt; only needs to be specified as &lt;code&gt;nil&lt;/code&gt; if you are binding keys in a prefix map.&lt;/p&gt;
&lt;p&gt;Here are some examples:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(general-define-key
 &lt;span class="pl-c1"&gt;:prefix&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SPC&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
 &lt;span class="pl-c1"&gt;:keymaps&lt;/span&gt; &lt;span class="pl-c1"&gt;'normal&lt;/span&gt;
 &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; unbind SPC and give it a title for which-key (see echo area)&lt;/span&gt;
 &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; '(&lt;span class="pl-c1"&gt;nil&lt;/span&gt; &lt;span class="pl-c1"&gt;:which-key&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;my lieutenant general prefix&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
 &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; bind nothing but give SPC f a description for which-key&lt;/span&gt;
 &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;f&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; '(&lt;span class="pl-c1"&gt;:ignore&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt; &lt;span class="pl-c1"&gt;:which-key&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;file prefix&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
 &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; use a cons as a replacement&lt;/span&gt;
 &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;g&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; '(&lt;span class="pl-c1"&gt;:ignore&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt; &lt;span class="pl-c1"&gt;:wk&lt;/span&gt; (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;g-key&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;git prefix&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
 &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; toggle lispy; use a function as a replacement to show if currently on&lt;/span&gt;
 &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;l&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; '(lispy-mode &lt;span class="pl-c1"&gt;:wk&lt;/span&gt; my-lispy-which-key-display)
 &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; for a keymap, only the keys will be matched;&lt;/span&gt;
 &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; :no-match-binding is not necessary&lt;/span&gt;
 &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;p&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; '(&lt;span class="pl-c1"&gt;:keymap&lt;/span&gt; projectile-command-map &lt;span class="pl-c1"&gt;:wk&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;projectile prefix&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
 &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; don't display this keybinding at all&lt;/span&gt;
 &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;z&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; '(hidden-command &lt;span class="pl-c1"&gt;:wk&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;)
 ...)

(general-define-key
 &lt;span class="pl-c1"&gt;:keymaps&lt;/span&gt; &lt;span class="pl-c1"&gt;'help-map&lt;/span&gt;
 &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; allow keys before bound keys in match&lt;/span&gt;
 &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; since binding in a prefix map&lt;/span&gt;
 &lt;span class="pl-c1"&gt;:wk-full-keys&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;
 &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; make a prefix-command and add description&lt;/span&gt;
 &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;A&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; '(&lt;span class="pl-c1"&gt;:prefix-command&lt;/span&gt; apropos-prefix-map &lt;span class="pl-c1"&gt;:which-key&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;apropos&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; an equivalent of the above&lt;/span&gt;
(general-define-key &lt;span class="pl-c1"&gt;:keymaps&lt;/span&gt; &lt;span class="pl-c1"&gt;'help-map&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:wk-full-keys&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:prefix&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;A&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:prefix-command&lt;/span&gt; &lt;span class="pl-c1"&gt;'apropos-prefix-map&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; make a prefix-command and add description&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; '(&lt;span class="pl-c1"&gt;:ignore&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt; &lt;span class="pl-c1"&gt;:which-key&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;apropos&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; :major-modes&lt;/span&gt;
(general-define-key
 &lt;span class="pl-c1"&gt;:keymaps&lt;/span&gt; &lt;span class="pl-c1"&gt;'emacs-lisp-mode-map&lt;/span&gt;
 &lt;span class="pl-c1"&gt;:major-modes&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;
 ...)

(general-define-key
 &lt;span class="pl-c1"&gt;:keymaps&lt;/span&gt; '(no-follow-convention-mode-keymap1
            org-mode-map)
 &lt;span class="pl-c1"&gt;:major-modes&lt;/span&gt; '(no-follow-convention-mode &lt;span class="pl-c1"&gt;t&lt;/span&gt;)
 ...)&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-evil-command-properties" class="anchor" aria-hidden="true" href="#evil-command-properties"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Evil Command Properties&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;:properties&lt;/code&gt;, &lt;code&gt;:repeat&lt;/code&gt;, and &lt;code&gt;:jump&lt;/code&gt; keywords can be used to add evil command properties:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(general-define-key
 &lt;span class="pl-c1"&gt;:keymaps&lt;/span&gt; &lt;span class="pl-c1"&gt;'normal&lt;/span&gt;
 &lt;span class="pl-c1"&gt;:prefix&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SPC&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
 &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;gj&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; '(git-gutter:next-hunk &lt;span class="pl-c1"&gt;:properties&lt;/span&gt; (&lt;span class="pl-c1"&gt;:repeat&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt; &lt;span class="pl-c1"&gt;:jump&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;))
 &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;gk&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; '(git-gutter:previous-hunk &lt;span class="pl-c1"&gt;:repeat&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt; &lt;span class="pl-c1"&gt;:jump&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;))

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; they also work globally&lt;/span&gt;
(general-define-key
 &lt;span class="pl-c1"&gt;:keymaps&lt;/span&gt; &lt;span class="pl-c1"&gt;'normal&lt;/span&gt;
 &lt;span class="pl-c1"&gt;:prefix&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SPC&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
 &lt;span class="pl-c1"&gt;:properties&lt;/span&gt; '(&lt;span class="pl-c1"&gt;:repeat&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt; &lt;span class="pl-c1"&gt;:jump&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;)
 &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; or&lt;/span&gt;
 &lt;span class="pl-c1"&gt;:repeat&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;
 &lt;span class="pl-c1"&gt;:jump&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;
 &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;gj&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'git-gutter:next-hunk&lt;/span&gt;
 &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;gk&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'git-gutter:previous-hunk&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that the default for commands without a repeat property are treated the same as commands with &lt;code&gt;:repeat t&lt;/code&gt;, so the above repeat configuration isn’t explicitly necessary in this case.&lt;/p&gt;
&lt;p&gt;If you would like for more keywords to be added that correspond to specific properties (like &lt;code&gt;:repeat&lt;/code&gt;), feel free to make an issue or pull request. For more information on command properties see evil’s documentation and &lt;a href="https://github.com/noctuid/evil-guide#command-properties"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-user-defined-extended-definition-keywords" class="anchor" aria-hidden="true" href="#user-defined-extended-definition-keywords"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;User-defined Extended Definition Keywords&lt;/h2&gt;
&lt;p&gt;New keywords and functionality can be added by the user by adding a keyword to &lt;code&gt;general-extended-def-keywords&lt;/code&gt; and creating a corresponding function named &lt;code&gt;general-extended-def-:&amp;lt;keyword&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Whenever this keyword is specified, general calls the corresponding function with the arguments &lt;code&gt;state keymap key edef kargs&lt;/code&gt;. Generally, you can ignore at least some of these arguments. &lt;code&gt;state&lt;/code&gt; and &lt;code&gt;keymap&lt;/code&gt; are the evil state (nil if none) and keymap that the &lt;code&gt;key&lt;/code&gt; (internal representation; &lt;code&gt;kbd&lt;/code&gt; already used if necessary) is being bound in. Note that &lt;code&gt;keymap&lt;/code&gt; will be the symbol for the keymap in case it is needed. To get the actual keymap, using &lt;code&gt;general--get-keymap&lt;/code&gt; is recommended. &lt;code&gt;edef&lt;/code&gt; is the extended definition itself, and &lt;code&gt;kargs&lt;/code&gt; is the plist of all the keyword arguments given to the original &lt;code&gt;general-define-key&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Extended definition functions can optionally alter the definitions. Keywords that have this behavior must be added to either &lt;code&gt;general-rewrite-def-keywords&lt;/code&gt; or &lt;code&gt;general-rewrite-def-after-keywords&lt;/code&gt; instead of to &lt;code&gt;general-extended-def-keywords&lt;/code&gt;. The difference between the two is that the former will alter the definition before the functions for the keywords in &lt;code&gt;general-extended-def-keywords&lt;/code&gt; are called. Functions that alter the definition should return a new extended definition plist with the &lt;code&gt;:def&lt;/code&gt; entry updated. For a simple example of a function that does not alter the definition, see &lt;code&gt;general-extended-def-:properties&lt;/code&gt;. For a simple example of a function that does alter the definition, see &lt;code&gt;general-extended-def-:predicate&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Extended definition keywords may use any number of helper keywords. These do not need to be added to any variables but should be distinct from any other keywords.&lt;/p&gt;
&lt;p&gt;Note that the keywords in &lt;code&gt;general-extended-def-keywords&lt;/code&gt; and their helper keywords can all be specified both globally and locally. Since globally specifying keywords may not always make sense, it is up to the &lt;code&gt;general-extended-def-:&amp;lt;keyword&amp;gt;&lt;/code&gt; function to decide how to handle things. When a keyword can be specified both globally and locally, &lt;code&gt;general--getf&lt;/code&gt; may be useful to get the local value or the global value if there is no local one (e.g. &lt;code&gt;(general--getf edef kargs :predicate)&lt;/code&gt;). If it does not make sense for your keyword to be specified globally, you can add it to &lt;code&gt;general-extended-def-global-ignore-keywords&lt;/code&gt;. This will prevent your function from being called unless the keyword is specified locally.&lt;/p&gt;
&lt;p&gt;Although &lt;code&gt;general--get-keymap&lt;/code&gt; and &lt;code&gt;general--getf&lt;/code&gt; are marked internal, they will continue to exist and keep their current functionality; they are intended to be used as helpers for extended definitions.&lt;/p&gt;
&lt;p&gt;You can rely on &lt;code&gt;edef&lt;/code&gt; being a valid extended definition plist with a &lt;code&gt;:def&lt;/code&gt; keyword. Even if the user only specifies a keyword globally and does not explicitly write definitions as plists or explicitly specify &lt;code&gt;:def&lt;/code&gt;, general will automatically rewrite definitions to be valid plists. Consider the following example:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(general-define-key
 &lt;span class="pl-c1"&gt;:predicate&lt;/span&gt; '(&lt;span class="pl-c1"&gt;eobp&lt;/span&gt;)
 &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&amp;lt;right&amp;gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'beginning-of-buffer&lt;/span&gt;)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; call &lt;span class="pl-smi"&gt;`general-extended-def-:predicate'&lt;/span&gt; with this as an edef argument:&lt;/span&gt;
'(&lt;span class="pl-c1"&gt;:def&lt;/span&gt; beginning-of-buffer)

(general-define-key
 &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&amp;lt;right&amp;gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; '(&lt;span class="pl-c1"&gt;beginning-of-buffer&lt;/span&gt; &lt;span class="pl-c1"&gt;:predicate&lt;/span&gt; (&lt;span class="pl-c1"&gt;eobp&lt;/span&gt;)))
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; call &lt;span class="pl-smi"&gt;`general-extended-def-:predicate'&lt;/span&gt; with this as an edef argument:&lt;/span&gt;
'(&lt;span class="pl-c1"&gt;:def&lt;/span&gt; beginning-of-buffer &lt;span class="pl-c1"&gt;:predicate&lt;/span&gt; (&lt;span class="pl-c1"&gt;eobp&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For more information, see the docstring of &lt;code&gt;general-extended-def-keywords&lt;/code&gt;.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-user-defined-key-definers" class="anchor" aria-hidden="true" href="#user-defined-key-definers"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;User-defined Key Definers&lt;/h1&gt;
&lt;p&gt;In addition to being able to add new keywords for extended definitions, the user can also create their own key definers. These are generally useful when you want to use some package-specific key definer that has some additional functionality (e.g. &lt;code&gt;lispy-define-key&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Alternate definers can be used by specifying the &lt;code&gt;:definer&lt;/code&gt; keyword (globally or inside an extended definition):&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(general-define-key &lt;span class="pl-c1"&gt;:definer&lt;/span&gt; &lt;span class="pl-c1"&gt;'my&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;key&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'def&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;key2&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; '(def2 &lt;span class="pl-c1"&gt;:definer&lt;/span&gt; &lt;span class="pl-c1"&gt;'my-other&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The user-created function should be named &lt;code&gt;general-&amp;lt;definer&amp;gt;-define-key&lt;/code&gt;. It will be passed &lt;code&gt;state keymap key def orig-def kargs&lt;/code&gt;. These arguments are the same as for extended definition functions except for &lt;code&gt;def&lt;/code&gt; and &lt;code&gt;orig-def&lt;/code&gt;. &lt;code&gt;def&lt;/code&gt; is the transformed definition in its final form (though the definer may also alter it before binding it). On the other hand, &lt;code&gt;orig-def&lt;/code&gt; is the original definition but always as an extended definition plist (e.g. =’(:def command)= if the user only specified =’command=).&lt;/p&gt;
&lt;p&gt;Like extended definitions, custom definers can have any number of helper keyword arguments specified locally in an extended definition or globally in the arguments to &lt;code&gt;general-define-key&lt;/code&gt;. In cases where a keyword can be both global and local, &lt;code&gt;general--getf&lt;/code&gt; is a useful helper function. Since the keymap passed in is a symbol, &lt;code&gt;general--get-keymap&lt;/code&gt; may be useful as well for transforming it to the keymap value. &lt;code&gt;key-description&lt;/code&gt; will also be useful if the underlying definition function uses &lt;code&gt;kbd&lt;/code&gt; (since &lt;code&gt;key&lt;/code&gt; is the internal representation ready to be passed directly to &lt;code&gt;define-key&lt;/code&gt;; note that &lt;code&gt;key-description&lt;/code&gt; will work with both strings and vectors, including something like &lt;code&gt;[remap kill-line]&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;See &lt;code&gt;general-lispy-define-key&lt;/code&gt; for a basic example.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-wrapping-evil-define-minor-mode-key" class="anchor" aria-hidden="true" href="#wrapping-evil-define-minor-mode-key"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Wrapping &lt;code&gt;evil-define-minor-mode-key&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;If you want to use &lt;code&gt;evil-define-minor-mode-key&lt;/code&gt; instead of &lt;code&gt;evil-define-key*&lt;/code&gt;, you can use &lt;code&gt;:definer 'minor-mode&lt;/code&gt;. This will repurpose &lt;code&gt;:keymaps&lt;/code&gt; to specify minor mode names instead of keymap names:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(general-define-key
 &lt;span class="pl-c1"&gt;:definer&lt;/span&gt; &lt;span class="pl-c1"&gt;'minor-mode&lt;/span&gt;
 &lt;span class="pl-c1"&gt;:states&lt;/span&gt; &lt;span class="pl-c1"&gt;'normal&lt;/span&gt;
 &lt;span class="pl-c1"&gt;:keymaps&lt;/span&gt; &lt;span class="pl-c1"&gt;'org-src-mode&lt;/span&gt;
 &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;RET&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'org-edit-src-exit&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you are wondering why you might want to use &lt;code&gt;evil-define-minor-mode-key&lt;/code&gt;, see &lt;a href="https://github.com/noctuid/evil-guide#why-dont-keys-defined-with-evil-define-key-work-immediately"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-lispy-integration-wrapping-lispy-define-key" class="anchor" aria-hidden="true" href="#lispy-integration-wrapping-lispy-define-key"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Lispy Integration/ Wrapping &lt;code&gt;lispy-define-key&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;To use &lt;code&gt;lispy-define-key&lt;/code&gt; to make the definitions, &lt;code&gt;:definer 'lispy&lt;/code&gt; can be specified. &lt;code&gt;:lispy-plist&lt;/code&gt; can be specified globally or in an extended definition to set the last argument to &lt;code&gt;lispy-define-key&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-worf-integration-wrapping-worf-define-key" class="anchor" aria-hidden="true" href="#worf-integration-wrapping-worf-define-key"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Worf Integration/ Wrapping &lt;code&gt;worf-define-key&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;To use &lt;code&gt;worf-define-key&lt;/code&gt; to make the definitions, &lt;code&gt;:definer 'worf&lt;/code&gt; can be specified. &lt;code&gt;:worf-plist&lt;/code&gt; can be specified globally or in an extended definition to set the last argument to &lt;code&gt;worf-define-key&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-other-provided-definers" class="anchor" aria-hidden="true" href="#other-provided-definers"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Other Provided Definers&lt;/h2&gt;
&lt;p&gt;To use &lt;code&gt;lpy-define-key&lt;/code&gt; to make the definitions, &lt;code&gt;:definer 'lpy&lt;/code&gt; can be specified.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-faq" class="anchor" aria-hidden="true" href="#faq"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;FAQ&lt;/h1&gt;
&lt;h2&gt;&lt;a id="user-content-how-do-i-prevent-key-sequence-starts-with-non-prefix-key-errors" class="anchor" aria-hidden="true" href="#how-do-i-prevent-key-sequence-starts-with-non-prefix-key-errors"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;How do I prevent &lt;code&gt;Key sequence starts with non-prefix key&lt;/code&gt; errors?&lt;/h2&gt;
&lt;p&gt;By default, emacs does not support binding a key sequence where a subsequence of the key is already bound in the same keymap (e.g. you cannot bind &lt;code&gt;C-a a&lt;/code&gt; to a command in a keymap where &lt;code&gt;C-a&lt;/code&gt; is already bound to a command).&lt;/p&gt;
&lt;p&gt;If you want to be able to bind both key sequences and fall back to the shorter key’s command after a timeout or unmatched keypress, see &lt;a href="#mapping-under-non-prefix-keys"&gt;general-key-dispatch&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Otherwise, you should unbind the non-prefix key. For example:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(general-define-key
 &lt;span class="pl-c1"&gt;:keymaps&lt;/span&gt; &lt;span class="pl-c1"&gt;'normal&lt;/span&gt;
 &lt;span class="pl-c1"&gt;:prefix&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;s&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
 &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; prefix keys are prepended to other keys, so "" refers to the prefix itself&lt;/span&gt;
 &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;
 &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;a&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;#&lt;span class="pl-c1"&gt;'def&lt;/span&gt;&lt;/span&gt;
 &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; ...&lt;/span&gt;
 )&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you would rather force key definitions to always be made regardless of whether a subsequence of the key is already bound, &lt;a href="#automatic-key-unbinding"&gt;general can automatically unbind keys when necessary to prevent this error&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-why-dont-some-evil-keybindings-work-immediately" class="anchor" aria-hidden="true" href="#why-dont-some-evil-keybindings-work-immediately"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Why don’t some evil keybindings work (immediately)?&lt;/h2&gt;
&lt;p&gt;This is a &lt;a href="https://github.com/emacs-evil/evil/issues/301"&gt;known issue for evil&lt;/a&gt;. To work around this problem, you can use &lt;a href="#wrapping-evil-define-minor-mode-key"&gt;:definer ‘minor-mode&lt;/a&gt;. See &lt;a href="https://github.com/noctuid/evil-guide#why-dont-keys-defined-with-evil-define-key-work-immediately"&gt;here&lt;/a&gt; for more information.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>noctuid</author><guid isPermaLink="false">https://github.com/noctuid/general.el</guid><pubDate>Tue, 26 Nov 2019 00:14:00 GMT</pubDate></item><item><title>dominikh/go-mode.el #15 in Emacs Lisp, Today</title><link>https://github.com/dominikh/go-mode.el</link><description>&lt;p&gt;&lt;i&gt;Emacs mode for the Go programming language&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;p&gt;This is go-mode, the Emacs mode for editing Go code.&lt;/p&gt;
&lt;p&gt;It is a complete rewrite of the go-mode that shipped with Go 1.0.3 and
before, and was part of Go 1.1 until Go 1.3. Beginning with Go 1.4,
editor integration will not be part of the Go distribution anymore,
making this repository the canonical place for go-mode.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-features" class="anchor" aria-hidden="true" href="#features"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Features&lt;/h1&gt;
&lt;p&gt;In addition to normal features, such as fontification and indentation,
and close integration with familiar Emacs functionality (for example
syntax-based navigation like &lt;code&gt;beginning-of-defun&lt;/code&gt;), go-mode comes with
the following extra features to provide an improved experience:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Integration with &lt;code&gt;gofmt&lt;/code&gt; by providing a command of the same name,
and &lt;code&gt;gofmt-before-save&lt;/code&gt;, which can be used in a hook to format Go
buffers before saving them.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Setting the &lt;code&gt;gofmt-command&lt;/code&gt; variable also allows using
&lt;code&gt;goimports&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Setting the &lt;code&gt;gofmt-args&lt;/code&gt; variable with a list of arguments allows
using e.g. &lt;code&gt;gofmt -s&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Integration with &lt;code&gt;godoc&lt;/code&gt; via the functions &lt;code&gt;godoc&lt;/code&gt; and
&lt;code&gt;godoc-at-point&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Integration with the Playground&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;go-play-buffer&lt;/code&gt; and &lt;code&gt;go-play-region&lt;/code&gt; to send code to the
Playground&lt;/li&gt;
&lt;li&gt;&lt;code&gt;go-download-play&lt;/code&gt; to download a Playground entry into a new
buffer&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Managing imports&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A function for jumping to the file's imports (&lt;code&gt;go-goto-imports&lt;/code&gt; -
&lt;code&gt;C-c C-f i&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;A function for adding imports, including tab completion
(&lt;code&gt;go-import-add&lt;/code&gt;, bound to &lt;code&gt;C-c C-a&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;A function for removing or commenting unused imports
(&lt;code&gt;go-remove-unused-imports&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;It is recommended that you use &lt;code&gt;goimports&lt;/code&gt; or the
&lt;code&gt;organize-imports&lt;/code&gt; feature of &lt;code&gt;gopls&lt;/code&gt; to manage
adding/removing/organizing imports automatically.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Integration with godef&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;godef-describe&lt;/code&gt; (&lt;code&gt;C-c C-d&lt;/code&gt;) to describe expressions&lt;/li&gt;
&lt;li&gt;&lt;code&gt;godef-jump&lt;/code&gt; (&lt;code&gt;C-c C-j&lt;/code&gt;) and &lt;code&gt;godef-jump-other-window&lt;/code&gt; (&lt;code&gt;C-x 4 C-c C-j&lt;/code&gt;) to jump to declarations&lt;/li&gt;
&lt;li&gt;This requires you to install godef via &lt;code&gt;go get github.com/rogpeppe/godef&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Basic support for imenu (functions and variables)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Built-in support for displaying code coverage as calculated by &lt;code&gt;go test&lt;/code&gt; (&lt;code&gt;go-coverage&lt;/code&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Several functions for jumping to and manipulating the individual
parts of function signatures. These functions support anonymous
functions, but are smart enough to skip them when required (e.g.
when jumping to a method receiver or docstring.)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Jump to the argument list (&lt;code&gt;go-goto-arguments&lt;/code&gt; - &lt;code&gt;C-c C-f a&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Jump to the docstring, create it if it does not exist yet
(&lt;code&gt;go-goto-docstring&lt;/code&gt; - &lt;code&gt;C-c C-f d&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Jump to the function keyword (&lt;code&gt;go-goto-function&lt;/code&gt; - &lt;code&gt;C-c C-f f&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Jump to the function name (&lt;code&gt;go-goto-function-name&lt;/code&gt; - &lt;code&gt;C-c C-f n&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Jump to the return values (&lt;code&gt;go-goto-return-values&lt;/code&gt; - &lt;code&gt;C-c C-f r&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Jump to the method receiver, adding a pair of parentheses if no
method receiver exists (&lt;code&gt;go-goto-method-receiver&lt;/code&gt; - &lt;code&gt;C-c C-f m&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All of these functions accept a prefix argument (&lt;code&gt;C-u&lt;/code&gt;), causing
them to skip anonymous functions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GOPATH detection – the function &lt;code&gt;go-guess-gopath&lt;/code&gt; will guess a
suitable value for GOPATH, based on gb or wgo projects, Godeps and
src folders for plain GOPATH workspaces. The command
&lt;code&gt;go-set-project&lt;/code&gt; uses the return value of &lt;code&gt;go-guess-gopath&lt;/code&gt; to set
the GOPATH environment variable.&lt;/p&gt;
&lt;p&gt;You can either call &lt;code&gt;go-set-project&lt;/code&gt; manually, or integrate it with
Projectile's project switching hooks, or any other means of
switching projects you may employ.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installation&lt;/h1&gt;
&lt;h2&gt;&lt;a id="user-content-melpa" class="anchor" aria-hidden="true" href="#melpa"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;MELPA&lt;/h2&gt;
&lt;p&gt;The recommended way of installing go-mode is via
&lt;a href="http://www.emacswiki.org/emacs/ELPA" rel="nofollow"&gt;ELPA&lt;/a&gt;, the Emacs package
manager, and the
&lt;a href="http://emacsredux.com/blog/2014/05/16/melpa-stable/" rel="nofollow"&gt;MELPA Stable repository&lt;/a&gt;, which provides
an up-to-date version of go-mode.&lt;/p&gt;
&lt;p&gt;If you're not familiar with ELPA yet, consider reading
&lt;a href="http://ergoemacs.org/emacs/emacs_package_system.html" rel="nofollow"&gt;this guide&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-manual" class="anchor" aria-hidden="true" href="#manual"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Manual&lt;/h2&gt;
&lt;p&gt;To install go-mode manually, check out the &lt;code&gt;go-mode.el&lt;/code&gt; repository in
a directory of your choice, add it to your load path and configure
Emacs to automatically load it when opening a &lt;code&gt;.go&lt;/code&gt; file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(add-to-list 'load-path "/place/where/you/put/it/")
(autoload 'go-mode "go-mode" nil t)
(add-to-list 'auto-mode-alist '("\\.go\\'" . go-mode))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Either evaluate the statements with &lt;code&gt;C-x C-e&lt;/code&gt;, or restart Emacs.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-other-extensions" class="anchor" aria-hidden="true" href="#other-extensions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Other extensions&lt;/h1&gt;
&lt;p&gt;There are several third party extensions that can enhance the Go
experience in Emacs.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-gopls-integration" class="anchor" aria-hidden="true" href="#gopls-integration"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Gopls integration&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/golang/tools/blob/master/gopls/README.md"&gt;Gopls&lt;/a&gt;
is the official language server protocol (lsp) implementation provided
by the Go team. It is intended to replace the existing third party
tools for code formatting (gofmt), automatic imports (goimports), code
navigation (godef/guru), type and function descriptions (godoc/godef),
error checking, auto completion (gocode), variable and type renaming
(rename), and more. Once gopls is stable the older tools will no
longer be supported.&lt;/p&gt;
&lt;p&gt;Gopls is a supported backend for
&lt;a href="https://github.com/emacs-lsp/lsp-mode"&gt;lsp-mode&lt;/a&gt;. It will be used
automatically by lsp-mode if &lt;code&gt;gopls&lt;/code&gt; is found in your PATH. You can
install gopls via: &lt;code&gt;go get golang.org/x/tools/gopls@latest&lt;/code&gt;. To enable
lsp-mode for go buffers:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(add-hook 'go-mode-hook 'lsp-deferred)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;a id="user-content-syntaxerror-checking" class="anchor" aria-hidden="true" href="#syntaxerror-checking"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Syntax/error checking&lt;/h2&gt;
&lt;p&gt;There are two ways of using flymake with Go:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/dougm/goflymake"&gt;goflymake&lt;/a&gt;, which internally
uses &lt;code&gt;go build&lt;/code&gt; to capture all errors that a regular compilation would
also produce&lt;/li&gt;
&lt;li&gt;&lt;a href="http://marmalade-repo.org/packages/flymake-go" rel="nofollow"&gt;flymake-go&lt;/a&gt; for a
more lightweight solution that only uses &lt;code&gt;gofmt&lt;/code&gt; and as such is only
able to catch syntax errors. Unlike goflymake, however, it does not
require an additional executable.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Additionally, there is
&lt;a href="https://github.com/flycheck/flycheck"&gt;flycheck&lt;/a&gt;, a modern replacement
for flymake, which comes with built-in support for Go. In addition to
using &lt;code&gt;go build&lt;/code&gt; or &lt;code&gt;gofmt&lt;/code&gt;, it also has support for &lt;code&gt;go vet&lt;/code&gt;,
&lt;code&gt;golint&lt;/code&gt; and &lt;code&gt;errcheck&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-auto-completion" class="anchor" aria-hidden="true" href="#auto-completion"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Auto completion&lt;/h2&gt;
&lt;p&gt;For auto completion, take a look at
&lt;a href="https://github.com/nsf/gocode"&gt;gocode&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-eldoc" class="anchor" aria-hidden="true" href="#eldoc"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;eldoc&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/syohex/emacs-go-eldoc"&gt;https://github.com/syohex/emacs-go-eldoc&lt;/a&gt; provides eldoc functionality
for go-mode.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-snippets" class="anchor" aria-hidden="true" href="#snippets"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Snippets&lt;/h2&gt;
&lt;p&gt;I maintain a set of YASnippet snippets for go-mode at
&lt;a href="https://github.com/dominikh/yasnippet-go"&gt;https://github.com/dominikh/yasnippet-go&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-integration-with-errcheck" class="anchor" aria-hidden="true" href="#integration-with-errcheck"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Integration with errcheck&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/dominikh/go-errcheck.el"&gt;https://github.com/dominikh/go-errcheck.el&lt;/a&gt; provides integration with
&lt;a href="https://github.com/kisielk/errcheck"&gt;errcheck&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-stability" class="anchor" aria-hidden="true" href="#stability"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Stability&lt;/h1&gt;
&lt;p&gt;go-mode.el has regular, tagged releases and is part of the MELPA
Stable repository. These tagged releases are intended to provide a
stable experience. APIs added in tagged releases will usually not be
removed or changed in future releases.&lt;/p&gt;
&lt;p&gt;Changes made on the master branch, which is tracked by the normal
MELPA repository, however, are under active development. New APIs are
experimental and may be changed or removed before the next release.
Furthermore, there is a higher chance for bugs.&lt;/p&gt;
&lt;p&gt;If you want a stable experience, use MELPA Stable. If you want cutting
edge features, or "beta-test" future releases, use MELPA or the master
branch.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>dominikh</author><guid isPermaLink="false">https://github.com/dominikh/go-mode.el</guid><pubDate>Tue, 26 Nov 2019 00:15:00 GMT</pubDate></item><item><title>rejeep/f.el #16 in Emacs Lisp, Today</title><link>https://github.com/rejeep/f.el</link><description>&lt;p&gt;&lt;i&gt;Modern API for working with files and directories in Emacs&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-fel--" class="anchor" aria-hidden="true" href="#fel--"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;f.el &lt;a href="http://travis-ci.org/rejeep/f.el" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/9c9c1716c6fad8561bbb6964d535febe6dd3071b/68747470733a2f2f6170692e7472617669732d63692e6f72672f72656a6565702f662e656c2e706e673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://api.travis-ci.org/rejeep/f.el.png?branch=master" style="max-width:100%;"&gt;&lt;/a&gt; &lt;a href="https://coveralls.io/r/rejeep/f.el" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/42a19ffcbf2f47da2415e68d43ff7e042552aa32/68747470733a2f2f696d672e736869656c64732e696f2f636f766572616c6c732f72656a6565702f662e656c2e737667" alt="Coverage Status" data-canonical-src="https://img.shields.io/coveralls/rejeep/f.el.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Much inspired by &lt;a href="https://github.com/magnars"&gt;@magnars&lt;/a&gt;'s excellent
&lt;a href="https://github.com/magnars/s.el"&gt;s.el&lt;/a&gt; and
&lt;a href="https://github.com/magnars/dash.el"&gt;dash.el&lt;/a&gt;,
&lt;a href="https://github.com/rejeep/f.el"&gt;f.el&lt;/a&gt; is a modern API for working
with files and directories in Emacs.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installation&lt;/h2&gt;
&lt;p&gt;It's available on &lt;a href="https://melpa.org/" rel="nofollow"&gt;Melpa&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;M-x package-install f
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or you can just dump &lt;code&gt;f.el&lt;/code&gt; in your load path somewhere.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-api" class="anchor" aria-hidden="true" href="#api"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;API&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-paths" class="anchor" aria-hidden="true" href="#paths"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Paths&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#f-join-rest-args"&gt;f-join&lt;/a&gt; &lt;code&gt;(&amp;amp;rest args)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#f-split-path"&gt;f-split&lt;/a&gt; &lt;code&gt;(path)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#f-expand-path-optional-dir"&gt;f-expand&lt;/a&gt; &lt;code&gt;(path &amp;amp;optional dir)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#f-filename-path"&gt;f-filename&lt;/a&gt; &lt;code&gt;(path)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#f-dirname-path"&gt;f-dirname&lt;/a&gt; &lt;code&gt;(path)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#f-common-parent-paths"&gt;f-common-parent&lt;/a&gt; &lt;code&gt;(paths)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#f-ext-path"&gt;f-ext&lt;/a&gt; &lt;code&gt;(path)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#f-no-ext-path"&gt;f-no-ext&lt;/a&gt; &lt;code&gt;(path)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#f-swap-ext-path-ext"&gt;f-swap-ext&lt;/a&gt; &lt;code&gt;(path ext)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#f-base-path"&gt;f-base&lt;/a&gt; &lt;code&gt;(path)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#f-relative-path-optional-dir"&gt;f-relative&lt;/a&gt; &lt;code&gt;(path &amp;amp;optional dir)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#f-short-path"&gt;f-short&lt;/a&gt; &lt;code&gt;(path)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#f-long-path"&gt;f-long&lt;/a&gt; &lt;code&gt;(path)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#f-canonical-path"&gt;f-canonical&lt;/a&gt; &lt;code&gt;(path)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#f-slash-path"&gt;f-slash&lt;/a&gt; &lt;code&gt;(path)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#f-full-path"&gt;f-full&lt;/a&gt; &lt;code&gt;(path)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#f-uniquify-paths"&gt;f-uniquify&lt;/a&gt; &lt;code&gt;(paths)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#f-uniquify-alist-paths"&gt;f-uniquify-alist&lt;/a&gt; &lt;code&gt;(paths)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-io" class="anchor" aria-hidden="true" href="#io"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;I/O&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#f-read-bytes-path"&gt;f-read-bytes&lt;/a&gt; &lt;code&gt;(path)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#f-write-bytes-data-path"&gt;f-write-bytes&lt;/a&gt; &lt;code&gt;(data path)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#f-read-text-path-optional-coding"&gt;f-read-text&lt;/a&gt; &lt;code&gt;(path &amp;amp;optional coding)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#f-write-text-text-coding-path"&gt;f-write-text&lt;/a&gt;&lt;code&gt;(text coding path)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#f-append-text-text-coding-path"&gt;f-append-text&lt;/a&gt;&lt;code&gt;(text coding path)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#f-append-data-path"&gt;f-append-bytes&lt;/a&gt;&lt;code&gt;(text coding path)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-destructive" class="anchor" aria-hidden="true" href="#destructive"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Destructive&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#f-mkdir-rest-dirs"&gt;f-mkdir&lt;/a&gt; &lt;code&gt;(&amp;amp;rest dirs)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#f-delete-path-optional-force"&gt;f-delete&lt;/a&gt; &lt;code&gt;(path &amp;amp;optional force)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#f-symlink-source-path"&gt;f-symlink&lt;/a&gt; &lt;code&gt;(source path)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#f-move-from-to"&gt;f-move&lt;/a&gt; &lt;code&gt;(from to)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#f-copy-from-to"&gt;f-copy&lt;/a&gt; &lt;code&gt;(from to)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#f-copy-contents-from-to"&gt;f-copy-contenst&lt;/a&gt; &lt;code&gt;(from to)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#f-touch-path"&gt;f-touch&lt;/a&gt; &lt;code&gt;(path)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-predicates" class="anchor" aria-hidden="true" href="#predicates"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Predicates&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#f-exists-path"&gt;f-exists?&lt;/a&gt; &lt;code&gt;(path)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#f-directory-path"&gt;f-directory?&lt;/a&gt; &lt;code&gt;(path)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#f-file-path"&gt;f-file?&lt;/a&gt; &lt;code&gt;(path)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#f-symlink-path"&gt;f-symlink?&lt;/a&gt; &lt;code&gt;(path)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#f-readable-path"&gt;f-readable?&lt;/a&gt; &lt;code&gt;(path)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#f-writable-path"&gt;f-writable?&lt;/a&gt; &lt;code&gt;(path)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#f-executable-path"&gt;f-executable?&lt;/a&gt; &lt;code&gt;(path)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#f-absolute-path"&gt;f-absolute?&lt;/a&gt; &lt;code&gt;(path)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#f-relative-path"&gt;f-relative?&lt;/a&gt; &lt;code&gt;(path)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#f-root-path"&gt;f-root?&lt;/a&gt; &lt;code&gt;(path)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#f-ext-path-ext"&gt;f-ext?&lt;/a&gt; &lt;code&gt;(path ext)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#f-same-path-a-path-b"&gt;f-same?&lt;/a&gt; &lt;code&gt;(path-a path-b)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#f-parent-of-path-a-path-b"&gt;f-parent-of?&lt;/a&gt; &lt;code&gt;(path-a path-b)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#f-child-of-path-a-path-b"&gt;f-child-of?&lt;/a&gt; &lt;code&gt;(path-a path-b)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#f-ancestor-of-path-a-path-b"&gt;f-ancestor-of?&lt;/a&gt; &lt;code&gt;(path-a path-b)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#f-descendant-of-path-a-path-b"&gt;f-descendant-of?&lt;/a&gt; &lt;code&gt;(path-a path-b)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#f-hidden-path"&gt;f-hidden?&lt;/a&gt; &lt;code&gt;(path)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#f-empty-path"&gt;f-empty?&lt;/a&gt; &lt;code&gt;(path)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-stats" class="anchor" aria-hidden="true" href="#stats"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Stats&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#f-size-path"&gt;f-size&lt;/a&gt; &lt;code&gt;(path)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#f-depth-path"&gt;f-depth&lt;/a&gt; &lt;code&gt;(path)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-misc" class="anchor" aria-hidden="true" href="#misc"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Misc&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#f-this-file-"&gt;f-this-file&lt;/a&gt; &lt;code&gt;()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#f-path-separator-"&gt;f-path-separator&lt;/a&gt; &lt;code&gt;()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#f-glob-pattern-optional-path"&gt;f-glob&lt;/a&gt; &lt;code&gt;(pattern &amp;amp;optional path)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#f-entries-path-optional-fn-recursive"&gt;f-entries&lt;/a&gt; &lt;code&gt;(path &amp;amp;optional fn recursive)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#f-directories-path-optional-fn-recursive"&gt;f-directories&lt;/a&gt; &lt;code&gt;(path &amp;amp;optional fn recursive)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#f-files-path-optional-fn-recursive"&gt;f-files&lt;/a&gt; &lt;code&gt;(path &amp;amp;optional fn recursive)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#f-root-"&gt;f-root&lt;/a&gt; &lt;code&gt;()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#f-traverse-upwards-fn-optional-path"&gt;f-traverse-upwards&lt;/a&gt; &lt;code&gt;(fn &amp;amp;optional path)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#f-with-sandbox-path-or-paths-rest-body"&gt;f-with-sandbox&lt;/a&gt; &lt;code&gt;(path-or-paths &amp;amp;rest body)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-documentation-and-examples" class="anchor" aria-hidden="true" href="#documentation-and-examples"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Documentation and examples&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-f-join-rest-args" class="anchor" aria-hidden="true" href="#f-join-rest-args"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;f-join &lt;code&gt;(&amp;amp;rest args)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Join ARGS to a single path.&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(f-join &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;path&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "path"&lt;/span&gt;
(f-join &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;path&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;to&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "path/to"&lt;/span&gt;
(f-join &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;path&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;to&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;heaven&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "/path/to/heaven"&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-f-split-path" class="anchor" aria-hidden="true" href="#f-split-path"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;f-split &lt;code&gt;(path)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Split PATH and return list containing parts.&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(f-split &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;path&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '("path")&lt;/span&gt;
(f-split &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;path/to&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '("path" "to")&lt;/span&gt;
(f-split &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/path/to/heaven&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '("/" "path" "to" "heaven")&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-f-expand-path-optional-dir" class="anchor" aria-hidden="true" href="#f-expand-path-optional-dir"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;f-expand &lt;code&gt;(path &amp;amp;optional dir)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Expand PATH relative to DIR (or ‘default-directory’).&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(f-expand &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;name&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "/default/directory/name"&lt;/span&gt;
(f-expand &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;name&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;other/directory&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "other/directory/name"&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-f-filename-path" class="anchor" aria-hidden="true" href="#f-filename-path"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;f-filename &lt;code&gt;(path)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Return the name of PATH.&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(f-filename &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;path/to/file.ext&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "file.ext"&lt;/span&gt;
(f-filename &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;path/to/directory&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "directory"&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-f-dirname-path" class="anchor" aria-hidden="true" href="#f-dirname-path"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;f-dirname &lt;code&gt;(path)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Return the parent directory to PATH.&lt;/p&gt;
&lt;p&gt;Alias: &lt;code&gt;f-parent&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(f-dirname &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;path/to/file.ext&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "path/to"&lt;/span&gt;
(f-dirname &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;path/to/directory&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "path/to"&lt;/span&gt;
(f-dirname &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; nil&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-f-common-parent-paths" class="anchor" aria-hidden="true" href="#f-common-parent-paths"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;f-common-parent &lt;code&gt;(paths)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Return the deepest common parent directory of PATHS.&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(f-common-parent '(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;foo/bar/baz&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;foo/bar/qux&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;foo/bar/mux&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "foo/bar/"&lt;/span&gt;
(f-common-parent '(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/foo/bar/baz&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/foo/bar/qux&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/foo/bax/mux&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "/foo/"&lt;/span&gt;
(f-common-parent '(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;foo/bar/baz&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;quack/bar/qux&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;lack/bar/mux&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; ""&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-f-ext-path" class="anchor" aria-hidden="true" href="#f-ext-path"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;f-ext &lt;code&gt;(path)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Return the file extension of PATH.&lt;/p&gt;
&lt;p&gt;The extension, in a file name, is the part that follows the last
’.’, excluding version numbers and backup suffixes.&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(f-ext &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;path/to/file.ext&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "ext"&lt;/span&gt;
(f-ext &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;path/to/directory&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; nil&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-f-no-ext-path" class="anchor" aria-hidden="true" href="#f-no-ext-path"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;f-no-ext &lt;code&gt;(path)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Return everything but the file extension of PATH.&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(f-no-ext &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;path/to/file.ext&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "path/to/file"&lt;/span&gt;
(f-no-ext &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;path/to/directory&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "path/to/directory"&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-f-swap-ext-path-ext" class="anchor" aria-hidden="true" href="#f-swap-ext-path-ext"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;f-swap-ext &lt;code&gt;(path ext)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Return PATH but with EXT as the new extension.
EXT must not be nil or empty.&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(f-swap-ext &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;path/to/file.ext&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;org&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "path/to/file.org"&lt;/span&gt;
(f-swap-ext &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;path/to/file.ext&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; error&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-f-base-path" class="anchor" aria-hidden="true" href="#f-base-path"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;f-base &lt;code&gt;(path)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Return the name of PATH, excluding the extension of file.&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(f-base &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;path/to/file.ext&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "file"&lt;/span&gt;
(f-base &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;path/to/directory&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; nil&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-f-relative-path-optional-dir" class="anchor" aria-hidden="true" href="#f-relative-path-optional-dir"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;f-relative &lt;code&gt;(path &amp;amp;optional dir)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Return PATH relative to DIR.&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(f-relative &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/some/path/relative/to/my/file.txt&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/some/path/&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; relative/to/my/file.txt&lt;/span&gt;
(f-relative &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/default/directory/my/file.txt&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; my/file.txt&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-f-short-path" class="anchor" aria-hidden="true" href="#f-short-path"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;f-short &lt;code&gt;(path)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Return abbrev of PATH.  See ‘abbreviate-file-name’.&lt;/p&gt;
&lt;p&gt;Alias: &lt;code&gt;f-abbrev&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(f-short &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/Users/foo/Code/bar&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; ~/Code/bar&lt;/span&gt;
(f-short &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/path/to/Code/bar&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; /path/to/Code/bar&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-f-long-path" class="anchor" aria-hidden="true" href="#f-long-path"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;f-long &lt;code&gt;(path)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Return long version of PATH.&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(f-long &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;~/Code/bar&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; /Users/foo/Code/bar&lt;/span&gt;
(f-long &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/path/to/Code/bar&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; /path/to/Code/bar&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-f-canonical-path" class="anchor" aria-hidden="true" href="#f-canonical-path"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;f-canonical &lt;code&gt;(path)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Return the canonical name of PATH.&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(f-canonical &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/path/to/real/file&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; /path/to/real/file&lt;/span&gt;
(f-canonical &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/link/to/file&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; /path/to/real/file&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-f-slash-path" class="anchor" aria-hidden="true" href="#f-slash-path"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;f-slash &lt;code&gt;(path)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Append slash to PATH unless one already.&lt;/p&gt;
&lt;p&gt;Some functions, such as ‘call-process’ requires there to be an
ending slash.&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(f-slash &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/path/to/file&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; /path/to/file&lt;/span&gt;
(f-slash &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/path/to/dir&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; /path/to/dir/&lt;/span&gt;
(f-slash &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/path/to/dir/&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; /path/to/dir/&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-f-full-path" class="anchor" aria-hidden="true" href="#f-full-path"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;f-full &lt;code&gt;(path)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Return absolute path to PATH, with ending slash.&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(f-full &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;~/path/to/file&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; /home/path/to/file&lt;/span&gt;
(f-full &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;~/path/to/dir&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; /home/path/to/dir/&lt;/span&gt;
(f-full &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;~/path/to/dir/&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; /home/path/to/dir/&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-f-uniquify-paths" class="anchor" aria-hidden="true" href="#f-uniquify-paths"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;f-uniquify &lt;code&gt;(paths)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Return unique suffixes of FILES.&lt;/p&gt;
&lt;p&gt;This function expects no duplicate paths.&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(f-uniquify '(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/foo/bar&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/foo/baz&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/foo/quux&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '("bar" "baz" "quux")&lt;/span&gt;
(f-uniquify '(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/foo/bar&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/www/bar&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/foo/quux&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '("foo/bar" "www/bar" "quux")&lt;/span&gt;
(f-uniquify '(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/foo/bar&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/www/bar&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/www/bar/quux&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '("foo/bar" "www/bar" "quux")&lt;/span&gt;
(f-uniquify '(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/foo/bar&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/foo/baz&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/home/www/bar&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/home/www/baz&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/var/foo&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/opt/foo/www/baz&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '("foo/bar" "www/bar" "foo/baz" "home/www/baz" "foo/www/baz" "foo")&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-f-uniquify-alist-paths" class="anchor" aria-hidden="true" href="#f-uniquify-alist-paths"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;f-uniquify-alist &lt;code&gt;(paths)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Return alist mapping FILES to unique suffixes of FILES.&lt;/p&gt;
&lt;p&gt;This function expects no duplicate paths.&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(f-uniquify-alist '(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/foo/bar&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/foo/baz&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/foo/quux&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(("/foo/bar" . "bar") ("/foo/baz" . "baz") ("/foo/quux" . "quux"))&lt;/span&gt;
(f-uniquify-alist '(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/foo/bar&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/www/bar&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/foo/quux&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(("/foo/bar" . "foo/bar") ("/www/bar" . "www/bar") ("/foo/quux" . "quux"))&lt;/span&gt;
(f-uniquify-alist '(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/foo/bar&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/www/bar&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/www/bar/quux&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(("/foo/bar" . "foo/bar") ("/www/bar" . "www/bar") ("/www/bar/quux" . "quux"))&lt;/span&gt;
(f-uniquify-alist '(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/foo/bar&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/foo/baz&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/home/www/bar&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/home/www/baz&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/var/foo&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/opt/foo/www/baz&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; '(("/foo/bar" . "foo/bar") ("/home/www/bar" . "www/bar") ("/foo/baz" . "foo/baz") ("/home/www/baz" . "home/www/baz") ("/opt/foo/www/baz" . "foo/www/baz") ("/var/foo" . "foo"))&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-f-read-bytes-path" class="anchor" aria-hidden="true" href="#f-read-bytes-path"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;f-read-bytes &lt;code&gt;(path)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Read binary data from PATH.&lt;/p&gt;
&lt;p&gt;Return the binary data as unibyte string.&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(f-read-bytes &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;path/to/binary/data&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-f-write-bytes-data-path" class="anchor" aria-hidden="true" href="#f-write-bytes-data-path"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;f-write-bytes &lt;code&gt;(data path)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Write binary DATA to PATH.&lt;/p&gt;
&lt;p&gt;DATA is a unibyte string.  PATH is a file name to write to.&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(f-write-bytes (unibyte-string &lt;span class="pl-c1"&gt;72&lt;/span&gt; &lt;span class="pl-c1"&gt;101&lt;/span&gt; &lt;span class="pl-c1"&gt;108&lt;/span&gt; &lt;span class="pl-c1"&gt;108&lt;/span&gt; &lt;span class="pl-c1"&gt;111&lt;/span&gt; &lt;span class="pl-c1"&gt;32&lt;/span&gt; &lt;span class="pl-c1"&gt;119&lt;/span&gt; &lt;span class="pl-c1"&gt;111&lt;/span&gt; &lt;span class="pl-c1"&gt;114&lt;/span&gt; &lt;span class="pl-c1"&gt;108&lt;/span&gt; &lt;span class="pl-c1"&gt;100&lt;/span&gt;) &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;path/to/binary/data&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-f-read-text-path-optional-coding" class="anchor" aria-hidden="true" href="#f-read-text-path-optional-coding"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;f-read-text &lt;code&gt;(path &amp;amp;optional coding)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Read text with PATH, using CODING.&lt;/p&gt;
&lt;p&gt;CODING defaults to ‘utf-8’.&lt;/p&gt;
&lt;p&gt;Return the decoded text as multibyte string.&lt;/p&gt;
&lt;p&gt;Alias: &lt;code&gt;f-read&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(f-read-text &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;path/to/file.txt&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; 'utf-&lt;span class="pl-c1"&gt;8&lt;/span&gt;)
(f-read &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;path/to/file.txt&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; 'utf-&lt;span class="pl-c1"&gt;8&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-f-write-text-text-coding-path" class="anchor" aria-hidden="true" href="#f-write-text-text-coding-path"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;f-write-text &lt;code&gt;(text coding path)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Write TEXT with CODING to PATH.&lt;/p&gt;
&lt;p&gt;TEXT is a multibyte string.  CODING is a coding system to encode
TEXT with.  PATH is a file name to write to.&lt;/p&gt;
&lt;p&gt;Alias: &lt;code&gt;f-write&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(f-write-text &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Hello world&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; 'utf-&lt;span class="pl-c1"&gt;8&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;path/to/file.txt&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
(f-write &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Hello world&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; 'utf-&lt;span class="pl-c1"&gt;8&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;path/to/file.txt&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-f-append-text-text-coding-path" class="anchor" aria-hidden="true" href="#f-append-text-text-coding-path"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;f-append-text &lt;code&gt;(text coding path)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Append TEXT with CODING to PATH.&lt;/p&gt;
&lt;p&gt;If PATH does not exist, it is created.&lt;/p&gt;
&lt;p&gt;Alias: &lt;code&gt;f-append&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(f-append-text &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Hello world&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; 'utf-&lt;span class="pl-c1"&gt;8&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;path/to/file.txt&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
(f-append &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Hello world&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; 'utf-&lt;span class="pl-c1"&gt;8&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;path/to/file.txt&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-f-append-bytes-data-path" class="anchor" aria-hidden="true" href="#f-append-bytes-data-path"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;f-append-bytes &lt;code&gt;(data path)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Append binary DATA to PATH.&lt;/p&gt;
&lt;p&gt;If PATH does not exist, it is created.&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(f-append-bytes &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;path/to/file&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; (unibyte-string &lt;span class="pl-c1"&gt;72&lt;/span&gt; &lt;span class="pl-c1"&gt;101&lt;/span&gt; &lt;span class="pl-c1"&gt;108&lt;/span&gt; &lt;span class="pl-c1"&gt;108&lt;/span&gt; &lt;span class="pl-c1"&gt;111&lt;/span&gt; &lt;span class="pl-c1"&gt;32&lt;/span&gt; &lt;span class="pl-c1"&gt;119&lt;/span&gt; &lt;span class="pl-c1"&gt;111&lt;/span&gt; &lt;span class="pl-c1"&gt;114&lt;/span&gt; &lt;span class="pl-c1"&gt;108&lt;/span&gt; &lt;span class="pl-c1"&gt;100&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-f-mkdir-rest-dirs" class="anchor" aria-hidden="true" href="#f-mkdir-rest-dirs"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;f-mkdir &lt;code&gt;(&amp;amp;rest dirs)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Create directories DIRS.&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(f-mkdir &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;dir&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; /default/directory/dir&lt;/span&gt;
(f-mkdir &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;other&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;dir&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; /default/directory/other/dir&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-f-delete-path-optional-force" class="anchor" aria-hidden="true" href="#f-delete-path-optional-force"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;f-delete &lt;code&gt;(path &amp;amp;optional force)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Delete PATH, which can be file or directory.&lt;/p&gt;
&lt;p&gt;If FORCE is t, a directory will be deleted recursively.&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(f-delete &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;dir&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
(f-delete &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;other/dir&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;)
(f-delete &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;path/to/file.txt&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-f-symlink-source-path" class="anchor" aria-hidden="true" href="#f-symlink-source-path"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;f-symlink &lt;code&gt;(source path)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Create a symlink to SOURCE from PATH.&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(f-symlink &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;path/to/source&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;path/to/link&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-f-move-from-to" class="anchor" aria-hidden="true" href="#f-move-from-to"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;f-move &lt;code&gt;(from to)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Move or rename FROM to TO.&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(f-move &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;path/to/file.txt&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;new-file.txt&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
(f-move &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;path/to/file.txt&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;other/path&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-f-copy-from-to" class="anchor" aria-hidden="true" href="#f-copy-from-to"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;f-copy &lt;code&gt;(from to)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Copy file or directory FROM to TO.&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(f-copy &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;path/to/file.txt&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;new-file.txt&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
(f-copy &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;path/to/dir&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;other/dir&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-f-copy-contents-from-to" class="anchor" aria-hidden="true" href="#f-copy-contents-from-to"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;f-copy-contents &lt;code&gt;(from to)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Copy contents in directory FROM, to directory TO.&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(f-copy-contents &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;path/to/dir&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;path/to/other/dir&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-f-touch-path" class="anchor" aria-hidden="true" href="#f-touch-path"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;f-touch &lt;code&gt;(path)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Update PATH last modification date or create if it does not exist.&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(f-touch &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;path/to/existing/file.txt&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
(f-touch &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;path/to/non/existing/file.txt&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-f-exists-path" class="anchor" aria-hidden="true" href="#f-exists-path"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;f-exists? &lt;code&gt;(path)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Return t if PATH exists, false otherwise.&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(f-exists? &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;path/to/file.txt&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
(f-exists? &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;path/to/dir&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-f-directory-path" class="anchor" aria-hidden="true" href="#f-directory-path"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;f-directory? &lt;code&gt;(path)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Return t if PATH is directory, false otherwise.&lt;/p&gt;
&lt;p&gt;Aliases: &lt;code&gt;f-directory-p f-dir? f-dir-p&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(f-directory? &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;path/to/file.txt&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; nil&lt;/span&gt;
(f-directory? &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;path/to/dir&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; t&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-f-file-path" class="anchor" aria-hidden="true" href="#f-file-path"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;f-file? &lt;code&gt;(path)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Return t if PATH is file, false otherwise.&lt;/p&gt;
&lt;p&gt;Alias: &lt;code&gt;f-file-p&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(f-file? &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;path/to/file.txt&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; t&lt;/span&gt;
(f-file? &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;path/to/dir&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; nil&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-f-symlink-path" class="anchor" aria-hidden="true" href="#f-symlink-path"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;f-symlink? &lt;code&gt;(path)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Return t if PATH is symlink, false otherwise.&lt;/p&gt;
&lt;p&gt;Alias: &lt;code&gt;f-symlink-p&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(f-symlink? &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;path/to/file.txt&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; nil&lt;/span&gt;
(f-symlink? &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;path/to/dir&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; nil&lt;/span&gt;
(f-symlink? &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;path/to/link&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; t&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-f-readable-path" class="anchor" aria-hidden="true" href="#f-readable-path"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;f-readable? &lt;code&gt;(path)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Return t if PATH is readable, false otherwise.&lt;/p&gt;
&lt;p&gt;Alias: &lt;code&gt;f-readable-p&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(f-readable? &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;path/to/file.txt&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
(f-readable? &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;path/to/dir&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-f-writable-path" class="anchor" aria-hidden="true" href="#f-writable-path"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;f-writable? &lt;code&gt;(path)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Return t if PATH is writable, false otherwise.&lt;/p&gt;
&lt;p&gt;Alias: &lt;code&gt;f-writable-p&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(f-writable? &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;path/to/file.txt&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
(f-writable? &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;path/to/dir&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-f-executable-path" class="anchor" aria-hidden="true" href="#f-executable-path"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;f-executable? &lt;code&gt;(path)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Return t if PATH is executable, false otherwise.&lt;/p&gt;
&lt;p&gt;Alias: &lt;code&gt;f-executable-p&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(f-executable? &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;path/to/file.txt&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
(f-executable? &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;path/to/dir&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-f-absolute-path" class="anchor" aria-hidden="true" href="#f-absolute-path"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;f-absolute? &lt;code&gt;(path)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Return t if PATH is absolute, false otherwise.&lt;/p&gt;
&lt;p&gt;Alias: &lt;code&gt;f-absolute-p&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(f-absolute? &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;path/to/dir&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; nil&lt;/span&gt;
(f-absolute? &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/full/path/to/dir&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; t&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-f-relative-path" class="anchor" aria-hidden="true" href="#f-relative-path"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;f-relative? &lt;code&gt;(path)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Return t if PATH is relative, false otherwise.&lt;/p&gt;
&lt;p&gt;Alias: &lt;code&gt;f-relative-p&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(f-relative? &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;path/to/dir&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; t&lt;/span&gt;
(f-relative? &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/full/path/to/dir&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; nil&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-f-root-path" class="anchor" aria-hidden="true" href="#f-root-path"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;f-root? &lt;code&gt;(path)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Return t if PATH is root directory, false otherwise.&lt;/p&gt;
&lt;p&gt;Alias: &lt;code&gt;f-root-p&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(f-root? &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; t&lt;/span&gt;
(f-root? &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/not/root&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; nil&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-f-ext-path-ext" class="anchor" aria-hidden="true" href="#f-ext-path-ext"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;f-ext? &lt;code&gt;(path ext)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Return t if extension of PATH is EXT, false otherwise.&lt;/p&gt;
&lt;p&gt;If EXT is nil or omitted, return t if PATH has any extension,
false otherwise.&lt;/p&gt;
&lt;p&gt;The extension, in a file name, is the part that follows the last
’.’, excluding version numbers and backup suffixes.&lt;/p&gt;
&lt;p&gt;Alias: &lt;code&gt;f-ext-p&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(f-ext? &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;path/to/file.el&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;el&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; t&lt;/span&gt;
(f-ext? &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;path/to/file.el&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;txt&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; nil&lt;/span&gt;
(f-ext? &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;path/to/file.el&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; t&lt;/span&gt;
(f-ext? &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;path/to/file&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; nil&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-f-same-path-a-path-b" class="anchor" aria-hidden="true" href="#f-same-path-a-path-b"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;f-same? &lt;code&gt;(path-a path-b)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Return t if PATH-A and PATH-B are references to same file.&lt;/p&gt;
&lt;p&gt;Aliases: &lt;code&gt;f-same-p f-equal? f-equal-p&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(f-same? &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;foo.txt&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;foo.txt&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; t&lt;/span&gt;
(f-same? &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/path/to/foo.txt&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/path/to/bar.txt&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; nil&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-f-parent-of-path-a-path-b" class="anchor" aria-hidden="true" href="#f-parent-of-path-a-path-b"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;f-parent-of? &lt;code&gt;(path-a path-b)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Return t if PATH-A is parent of PATH-B.&lt;/p&gt;
&lt;p&gt;Alias: &lt;code&gt;f-parent-of-p&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(f-parent-of? &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/path/to&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/path/to/dir&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; t&lt;/span&gt;
(f-parent-of? &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/path/to/dir&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/path/to&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; nil&lt;/span&gt;
(f-parent-of? &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/path/to&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/path/to&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; nil&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-f-child-of-path-a-path-b" class="anchor" aria-hidden="true" href="#f-child-of-path-a-path-b"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;f-child-of? &lt;code&gt;(path-a path-b)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Return t if PATH-A is child of PATH-B.&lt;/p&gt;
&lt;p&gt;Alias: &lt;code&gt;f-child-of-p&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(f-child-of? &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/path/to&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/path/to/dir&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; nil&lt;/span&gt;
(f-child-of? &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/path/to/dir&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/path/to&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; t&lt;/span&gt;
(f-child-of? &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/path/to&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/path/to&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; nil&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-f-ancestor-of-path-a-path-b" class="anchor" aria-hidden="true" href="#f-ancestor-of-path-a-path-b"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;f-ancestor-of? &lt;code&gt;(path-a path-b)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Return t if PATH-A is ancestor of PATH-B.&lt;/p&gt;
&lt;p&gt;Alias: &lt;code&gt;f-ancestor-of-p&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(f-ancestor-of? &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/path/to&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/path/to/dir&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; t&lt;/span&gt;
(f-ancestor-of? &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/path&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/path/to/dir&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; t&lt;/span&gt;
(f-ancestor-of? &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/path/to/dir&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/path/to&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; nil&lt;/span&gt;
(f-ancestor-of? &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/path/to&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/path/to&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; nil&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-f-descendant-of-path-a-path-b" class="anchor" aria-hidden="true" href="#f-descendant-of-path-a-path-b"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;f-descendant-of? &lt;code&gt;(path-a path-b)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Return t if PATH-A is desendant of PATH-B.&lt;/p&gt;
&lt;p&gt;Alias: &lt;code&gt;f-descendant-of-p&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(f-descendant-of? &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/path/to/dir&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/path/to&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; t&lt;/span&gt;
(f-descendant-of? &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/path/to/dir&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/path&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; t&lt;/span&gt;
(f-descendant-of? &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/path/to&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/path/to/dir&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; nil&lt;/span&gt;
(f-descendant-of? &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/path/to&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/path/to&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; nil&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-f-hidden-path" class="anchor" aria-hidden="true" href="#f-hidden-path"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;f-hidden? &lt;code&gt;(path)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Return t if PATH is hidden, nil otherwise.&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(f-hidden? &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/path/to/foo&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; nil&lt;/span&gt;
(f-hidden? &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/path/to/.foo&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; t&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Alias: &lt;code&gt;f-hidden-p&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-f-empty-path" class="anchor" aria-hidden="true" href="#f-empty-path"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;f-empty? &lt;code&gt;(path)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;If PATH is a file, return t if the file in PATH is empty, nil otherwise.
If PATH is directory, return t if directory has no files, nil otherwise.&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(f-empty? &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/path/to/empty-file&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; t&lt;/span&gt;
(f-empty? &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/path/to/file-with-contents&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; nil&lt;/span&gt;
(f-empty? &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/path/to/empty-dir/&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; t&lt;/span&gt;
(f-empty? &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/path/to/dir-with-contents/&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; nil&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Alias: &lt;code&gt;f-empty-p&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-f-size-path" class="anchor" aria-hidden="true" href="#f-size-path"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;f-size &lt;code&gt;(path)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Return size of PATH.&lt;/p&gt;
&lt;p&gt;If PATH is a file, return size of that file.  If PATH is
directory, return sum of all files in PATH.&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(f-size &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;path/to/file.txt&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
(f-size &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;path/to/dir&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-f-depth-path" class="anchor" aria-hidden="true" href="#f-depth-path"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;f-depth &lt;code&gt;(path)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Return the depth of PATH.&lt;/p&gt;
&lt;p&gt;At first, PATH is expanded with ‘f-expand’.  Then the full path is used to
detect the depth.
’/’ will be zero depth,  ’/usr’ will be one depth.  And so on.&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(f-depth &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; 0&lt;/span&gt;
(f-depth &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/var/&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; 1&lt;/span&gt;
(f-depth &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/usr/local/bin&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; 3&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-f-this-file-" class="anchor" aria-hidden="true" href="#f-this-file-"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;f-this-file &lt;code&gt;()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Return path to this file.&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(f-this-file) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; /path/to/this/file&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-f-path-separator-" class="anchor" aria-hidden="true" href="#f-path-separator-"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;f-path-separator &lt;code&gt;()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Return path separator.&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(f-path-separator) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; /&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-f-glob-pattern-optional-path" class="anchor" aria-hidden="true" href="#f-glob-pattern-optional-path"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;f-glob &lt;code&gt;(pattern &amp;amp;optional path)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Find PATTERN in PATH.&lt;/p&gt;
&lt;p&gt;See: &lt;code&gt;file-expand-wildcards&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(f-glob &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;path/to/*.el&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
(f-glob &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;*.el&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;path/to&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-f-entries-path-optional-fn-recursive" class="anchor" aria-hidden="true" href="#f-entries-path-optional-fn-recursive"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;f-entries &lt;code&gt;(path &amp;amp;optional fn recursive)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Find all files and directories in PATH.&lt;/p&gt;
&lt;p&gt;FN - called for each found file and directory.  If FN returns a thruthy
value, file or directory will be included.
RECURSIVE - Search for files and directories recursive.&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(f-entries &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;path/to/dir&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
(f-entries &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;path/to/dir&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; (&lt;span class="pl-c1"&gt;lambda&lt;/span&gt; (file) (s-matches? &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;test&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; file)))
(f-entries &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;path/to/dir&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;)
(f--entries &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;path/to/dir&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; (s-matches? &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;test&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; it))&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-f-directories-path-optional-fn-recursive" class="anchor" aria-hidden="true" href="#f-directories-path-optional-fn-recursive"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;f-directories &lt;code&gt;(path &amp;amp;optional fn recursive)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Find all directories in PATH.  See ‘f-entries‘.&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(f-directories &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;path/to/dir&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
(f-directories &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;path/to/dir&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; (&lt;span class="pl-c1"&gt;lambda&lt;/span&gt; (dir) (equal (f-filename dir) &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;test&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)))
(f-directories &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;path/to/dir&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;)
(f--directories &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;path/to/dir&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; (equal (f-filename it) &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;test&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-f-files-path-optional-fn-recursive" class="anchor" aria-hidden="true" href="#f-files-path-optional-fn-recursive"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;f-files &lt;code&gt;(path &amp;amp;optional fn recursive)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Find all files in PATH.  See ‘f-entries‘.&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(f-files &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;path/to/dir&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
(f-files &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;path/to/dir&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; (&lt;span class="pl-c1"&gt;lambda&lt;/span&gt; (file) (equal (f-ext file) &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;el&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)))
(f-files &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;path/to/dir&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;)
(f--files &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;path/to/dir&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; (equal (f-ext it) &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;el&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-f-root-" class="anchor" aria-hidden="true" href="#f-root-"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;f-root &lt;code&gt;()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Return absolute root.&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(f-root) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt; "/"&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-f-traverse-upwards-fn-optional-path" class="anchor" aria-hidden="true" href="#f-traverse-upwards-fn-optional-path"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;f-traverse-upwards &lt;code&gt;(fn &amp;amp;optional path)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Traverse up as long as FN return nil, starting at PATH.&lt;/p&gt;
&lt;p&gt;If FN returns a non-nil value, the path sent as argument to FN is
returned.  If no function callback return a non-nil value, nil is
returned.&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(f-traverse-upwards
 (&lt;span class="pl-c1"&gt;lambda&lt;/span&gt; (path)
   (f-exists? (f-expand &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;.git&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; path)))
 start-path)

(f--traverse-upwards (f-exists? (f-expand &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;.git&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; it)) start-path) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; same as above&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-f-with-sandbox-path-or-paths-rest-body" class="anchor" aria-hidden="true" href="#f-with-sandbox-path-or-paths-rest-body"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;f-with-sandbox &lt;code&gt;(path-or-paths &amp;amp;rest body)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Only allow PATH-OR-PATHS and descendants to be modified in BODY.&lt;/p&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(f-with-sandbox foo-path
  (f-touch (f-expand &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;foo&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; foo-path)))
(f-with-sandbox (&lt;span class="pl-c1"&gt;list&lt;/span&gt; foo-path bar-path)
  (f-touch (f-expand &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;foo&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; foo-path))
  (f-touch (f-expand &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;bar&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; bar-path)))
(f-with-sandbox foo-path
  (f-touch (f-expand &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;bar&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; bar-path))) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; "Destructive operation outside sandbox"&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-example" class="anchor" aria-hidden="true" href="#example"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Example&lt;/h2&gt;
&lt;p&gt;Here's an example of a function that finds the Git project root.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-using-standard-emacs-builtin-functions" class="anchor" aria-hidden="true" href="#using-standard-emacs-builtin-functions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Using standard Emacs builtin functions&lt;/h3&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;defun&lt;/span&gt; &lt;span class="pl-en"&gt;find-git-root&lt;/span&gt; (&amp;amp;optional dir)
  (&lt;span class="pl-k"&gt;unless&lt;/span&gt; dir (&lt;span class="pl-c1"&gt;setq&lt;/span&gt; dir (expand-file-name (file-name-directory (buffer-file-name)))))
  (&lt;span class="pl-k"&gt;let&lt;/span&gt; ((parent (expand-file-name &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;..&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; dir)))
    (&lt;span class="pl-k"&gt;unless&lt;/span&gt; (equal parent dir)
      (&lt;span class="pl-k"&gt;if&lt;/span&gt; (file-exists-p (expand-file-name &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;.git&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; dir))
          dir
        (find-git-root parent)))))&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-using-fel" class="anchor" aria-hidden="true" href="#using-fel"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Using &lt;code&gt;f.el&lt;/code&gt;&lt;/h3&gt;
&lt;div class="highlight highlight-source-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;defun&lt;/span&gt; &lt;span class="pl-en"&gt;find-git-root&lt;/span&gt; (&amp;amp;optional dir)
  (interactive)
  (&lt;span class="pl-k"&gt;unless&lt;/span&gt; dir (&lt;span class="pl-c1"&gt;setq&lt;/span&gt; dir (f-dirname (buffer-file-name))))
  (&lt;span class="pl-k"&gt;let&lt;/span&gt; ((parent (f-parent dir)))
    (&lt;span class="pl-k"&gt;unless&lt;/span&gt; (f-root? parent)
      (&lt;span class="pl-k"&gt;if&lt;/span&gt; (f-exists? (f-expand &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;.git&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; dir))
          dir
        (find-git-root parent)))))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, try writing it even simpler yourself. Hint, check out &lt;code&gt;f-traverse-upwards&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-contribution" class="anchor" aria-hidden="true" href="#contribution"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contribution&lt;/h2&gt;
&lt;p&gt;Be sure to!&lt;/p&gt;
&lt;p&gt;Install &lt;a href="https://github.com/rejeep/cask.el"&gt;Cask&lt;/a&gt; if you haven't
already.&lt;/p&gt;
&lt;p&gt;Run the unit tests with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ make test
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Do not change &lt;code&gt;README.md&lt;/code&gt; directly. If you want to change the README
or if you change any function comments, update the README with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ make docs
&lt;/code&gt;&lt;/pre&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>rejeep</author><guid isPermaLink="false">https://github.com/rejeep/f.el</guid><pubDate>Tue, 26 Nov 2019 00:16:00 GMT</pubDate></item><item><title>magit/transient #17 in Emacs Lisp, Today</title><link>https://github.com/magit/transient</link><description>&lt;p&gt;&lt;i&gt;Transient commands&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-transient-commands" class="anchor" aria-hidden="true" href="#transient-commands"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Transient commands&lt;/h1&gt;
&lt;p&gt;Taking inspiration from prefix keys and prefix arguments, Transient
implements a similar abstraction involving a prefix command, infix
arguments and suffix commands.  We could call this abstraction a
"transient command", but because it always involves at least two
commands (a prefix and a suffix) we prefer to call it just a
"transient".&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Transient keymaps are a feature provided by Emacs.  Transients as
implemented by this package involve the use of transient keymaps.&lt;/p&gt;
&lt;p&gt;Emacs provides a feature that it calls "prefix commands".  When we
talk about "prefix commands" in Transient's documentation, then we
mean our own kind of "prefix commands", unless specified otherwise.
To avoid ambiguity we sometimes use the terms "transient prefix
command" for our kind and "regular prefix command" for Emacs' kind.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When the user calls a transient prefix command, then a transient
(temporary) keymap is activated, which binds the transient's infix and
suffix commands, and functions that control the transient state are
added to &lt;code&gt;pre-command-hook&lt;/code&gt; and &lt;code&gt;post-command-hook&lt;/code&gt;.  The available
suffix and infix commands and their state are shown in a popup buffer
until the transient is exited by invoking a suffix command.&lt;/p&gt;
&lt;p&gt;Calling an infix command causes its value to be changed.  How that is
done depends on the type of the infix command.  The simplest case is
an infix command that represents a command-line argument that does not
take a value.  Invoking such an infix command causes the switch to be
toggled on or off.  More complex infix commands may read a value from
the user, using the minibuffer.&lt;/p&gt;
&lt;p&gt;Calling a suffix command usually causes the transient to be exited;
the transient keymaps and hook functions are removed, the popup buffer
no longer shows information about the (no longer bound) suffix
commands, the values of some public global variables are set, while
some internal global variables are unset, and finally the command is
actually called.  Suffix commands can also be configured to not exit
the transient.&lt;/p&gt;
&lt;p&gt;A suffix command can, but does not have to, use the infix arguments in
much the same way it can choose to use or ignore the prefix arguments.
For a suffix command that was invoked from a transient the variable
&lt;code&gt;current-transient-suffixes&lt;/code&gt; and the function &lt;code&gt;transient-args&lt;/code&gt; serve about
the same purpose as the variables &lt;code&gt;prefix-arg&lt;/code&gt; and &lt;code&gt;current-prefix-arg&lt;/code&gt; do
for any command that was called after the prefix arguments have been
set using a command such as &lt;code&gt;universal-argument&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/24772090c2686322ee40642d8ff64a39d248e265/687474703a2f2f726561646d652e656d6163736169722e6d652f7472616e7369656e742e706e67"&gt;&lt;img src="https://camo.githubusercontent.com/24772090c2686322ee40642d8ff64a39d248e265/687474703a2f2f726561646d652e656d6163736169722e6d652f7472616e7369656e742e706e67" alt="screenshot" data-canonical-src="http://readme.emacsair.me/transient.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>magit</author><guid isPermaLink="false">https://github.com/magit/transient</guid><pubDate>Tue, 26 Nov 2019 00:17:00 GMT</pubDate></item><item><title>Wilfred/ht.el #18 in Emacs Lisp, Today</title><link>https://github.com/Wilfred/ht.el</link><description>&lt;p&gt;&lt;i&gt;The missing hash table library for Emacs&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-htel" class="anchor" aria-hidden="true" href="#htel"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;ht.el&lt;/h1&gt;
&lt;p&gt;The missing hash table library for Emacs.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://melpa.org/#/ht" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/a0ae23c22361b4670159c3ec6505f926288ac0c3/687474703a2f2f6d656c70612e6f72672f7061636b616765732f68742d62616467652e737667" alt="MELPA" data-canonical-src="http://melpa.org/packages/ht-badge.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="http://stable.melpa.org/#/ht" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/832640650c58fefb07f7b64118630a56a91d3cc7/687474703a2f2f737461626c652e6d656c70612e6f72672f7061636b616765732f68742d62616467652e737667" alt="MELPA Stable" data-canonical-src="http://stable.melpa.org/packages/ht-badge.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://travis-ci.org/Wilfred/ht.el" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/0f3beab966d7d474f9941855cd2b23215fd89463/68747470733a2f2f7472617669732d63692e6f72672f57696c667265642f68742e656c2e706e673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/Wilfred/ht.el.png?branch=master" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#htel"&gt;ht.el&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#functions"&gt;Functions&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#return-a-hash-table"&gt;Return a hash table&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#accessing-the-hash-table"&gt;Accessing the hash table&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#mutating-the-hash-table"&gt;Mutating the hash table&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#iterating-over-the-hash-table"&gt;Iterating over the hash table&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#predicates"&gt;Predicates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#converting-from-a-hash-table"&gt;Converting from a hash table&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#converting-to-a-hash-table"&gt;Converting to a hash table&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#macros"&gt;Macros&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#returning-a-hash-table"&gt;Returning a hash table&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#iterating-over-the-hash-table-anaphoric"&gt;Iterating over the hash table (anaphoric)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#examples"&gt;Examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#why"&gt;Why?&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#similar-libraries"&gt;Similar libraries&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#installation"&gt;Installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#changelog"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#running-tests"&gt;Running tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#whats-an-alistplist"&gt;What's an alist/plist?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;&lt;a id="user-content-functions" class="anchor" aria-hidden="true" href="#functions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Functions&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-return-a-hash-table" class="anchor" aria-hidden="true" href="#return-a-hash-table"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Return a hash table&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ht-create&lt;/code&gt; &lt;code&gt;(test?)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ht-merge&lt;/code&gt; &lt;code&gt;(&amp;amp;rest tables)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ht-copy&lt;/code&gt; &lt;code&gt;(table)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ht-select&lt;/code&gt; &lt;code&gt;(function table)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ht-reject&lt;/code&gt; &lt;code&gt;(function table)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ht-select-keys&lt;/code&gt; &lt;code&gt;(table keys)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-accessing-the-hash-table" class="anchor" aria-hidden="true" href="#accessing-the-hash-table"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Accessing the hash table&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ht-get&lt;/code&gt; &lt;code&gt;(table key default?)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ht-get*&lt;/code&gt; &lt;code&gt;(table &amp;amp;rest keys)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ht-keys&lt;/code&gt; &lt;code&gt;(table)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ht-values&lt;/code&gt; &lt;code&gt;(table)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ht-items&lt;/code&gt; &lt;code&gt;(table)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ht-find&lt;/code&gt; &lt;code&gt;(function table)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ht-size&lt;/code&gt; &lt;code&gt;(table)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-mutating-the-hash-table" class="anchor" aria-hidden="true" href="#mutating-the-hash-table"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Mutating the hash table&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ht-set!&lt;/code&gt; &lt;code&gt;(table key value)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ht-update!&lt;/code&gt; &lt;code&gt;(table table)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ht-remove!&lt;/code&gt; &lt;code&gt;(table key)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ht-clear!&lt;/code&gt; &lt;code&gt;(table)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ht-reject!&lt;/code&gt; &lt;code&gt;(function table)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-iterating-over-the-hash-table" class="anchor" aria-hidden="true" href="#iterating-over-the-hash-table"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Iterating over the hash table&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ht-map&lt;/code&gt; &lt;code&gt;(function table)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ht-each&lt;/code&gt; &lt;code&gt;(function table)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-predicates" class="anchor" aria-hidden="true" href="#predicates"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Predicates&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ht?&lt;/code&gt; &lt;code&gt;(table-or-object)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ht-contains?&lt;/code&gt; &lt;code&gt;(table key)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ht-equal?&lt;/code&gt; &lt;code&gt;(table1 table2)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ht-empty?&lt;/code&gt; &lt;code&gt;(table)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-converting-from-a-hash-table" class="anchor" aria-hidden="true" href="#converting-from-a-hash-table"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Converting from a hash table&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ht-&amp;gt;alist&lt;/code&gt; &lt;code&gt;(table)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ht-&amp;gt;plist&lt;/code&gt; &lt;code&gt;(table)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-converting-to-a-hash-table" class="anchor" aria-hidden="true" href="#converting-to-a-hash-table"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Converting to a hash table&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ht&amp;lt;-alist&lt;/code&gt; &lt;code&gt;(alist test?)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ht&amp;lt;-plist&lt;/code&gt; &lt;code&gt;(plist test?)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-macros" class="anchor" aria-hidden="true" href="#macros"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Macros&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-returning-a-hash-table" class="anchor" aria-hidden="true" href="#returning-a-hash-table"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Returning a hash table&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ht&lt;/code&gt; &lt;code&gt;(&amp;amp;rest pairs)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-iterating-over-the-hash-table-anaphoric" class="anchor" aria-hidden="true" href="#iterating-over-the-hash-table-anaphoric"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Iterating over the hash table (anaphoric)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ht-amap&lt;/code&gt; &lt;code&gt;(form table)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ht-aeach&lt;/code&gt; &lt;code&gt;(form table)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Examples&lt;/h2&gt;
&lt;p&gt;Creating a hash table and accessing it:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;require&lt;/span&gt; &lt;span class="pl-c1"&gt;'ht&lt;/span&gt;)

(&lt;span class="pl-k"&gt;defun&lt;/span&gt; &lt;span class="pl-e"&gt;say-hello&lt;/span&gt; (&lt;span class="pl-v"&gt;name&lt;/span&gt;)
  (&lt;span class="pl-k"&gt;let&lt;/span&gt; ((greetings (ht (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Bob&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Hey bob!&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
                       (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Chris&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Hi Chris!&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))))
    (ht-get greetings name &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Hello stranger!&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This could be alternatively written as:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;require&lt;/span&gt; &lt;span class="pl-c1"&gt;'ht&lt;/span&gt;)

(&lt;span class="pl-k"&gt;defun&lt;/span&gt; &lt;span class="pl-e"&gt;say-hello&lt;/span&gt; (&lt;span class="pl-v"&gt;name&lt;/span&gt;)
  (&lt;span class="pl-k"&gt;let&lt;/span&gt; ((greetings (ht-create)))
    (ht-set! greetings &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Bob&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Hey Bob!&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    (ht-set! greetings &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Chris&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Hi Chris!&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    (ht-get greetings name &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Hello stranger!&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Accessing nested hash tables:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;let&lt;/span&gt; ((alphabets (ht (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Greek&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; (ht (&lt;span class="pl-c1"&gt;1&lt;/span&gt; (ht (&lt;span class="pl-c1"&gt;'letter&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;α&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
                                         (&lt;span class="pl-c1"&gt;'name&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;alpha&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)))
                                  (&lt;span class="pl-c1"&gt;2&lt;/span&gt; (ht (&lt;span class="pl-c1"&gt;'letter&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;β&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
                                         (&lt;span class="pl-c1"&gt;'name&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;beta&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)))))
                     (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;English&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; (ht (&lt;span class="pl-c1"&gt;1&lt;/span&gt; (ht (&lt;span class="pl-c1"&gt;'letter&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;a&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
                                           (&lt;span class="pl-c1"&gt;'name&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;A&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)))
                                    (&lt;span class="pl-c1"&gt;2&lt;/span&gt; (ht (&lt;span class="pl-c1"&gt;'letter&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;b&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
                                           (&lt;span class="pl-c1"&gt;'name&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;B&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))))))))
  (ht-get* alphabets &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Greek&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;'letter&lt;/span&gt;))  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt; =&amp;gt; "α"&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;ht-get&lt;/code&gt; and &lt;code&gt;ht-get*&lt;/code&gt; have gv-setters and so will work with &lt;code&gt;setf&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;let&lt;/span&gt; ((table (ht-create)))
  (ht-set! table &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;A&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;is equivalent to&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;let&lt;/span&gt; ((table (ht-create)))
  (&lt;span class="pl-k"&gt;setf&lt;/span&gt; (ht-get table &lt;span class="pl-c1"&gt;1&lt;/span&gt;) &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;A&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;let&lt;/span&gt; ((table (ht (&lt;span class="pl-c1"&gt;1&lt;/span&gt; (ht (&lt;span class="pl-c1"&gt;2&lt;/span&gt; (ht (&lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;three&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))))))))
  (ht-set! (ht-get (ht-get table &lt;span class="pl-c1"&gt;1&lt;/span&gt;) &lt;span class="pl-c1"&gt;2&lt;/span&gt;) &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;:three&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;is equivalent to&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;let&lt;/span&gt; ((table (ht (&lt;span class="pl-c1"&gt;1&lt;/span&gt; (ht (&lt;span class="pl-c1"&gt;2&lt;/span&gt; (ht (&lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;three&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))))))))
  (&lt;span class="pl-k"&gt;setf&lt;/span&gt; (ht-get* table &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;) &lt;span class="pl-c1"&gt;:three&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-why" class="anchor" aria-hidden="true" href="#why"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Why?&lt;/h2&gt;
&lt;p&gt;Libraries like &lt;a href="https://github.com/magnars/s.el"&gt;s.el&lt;/a&gt; (strings) and
&lt;a href="https://github.com/magnars/dash.el"&gt;dash.el&lt;/a&gt; (lists) have shown how
much nicer Emacs lisp programming can be with good libraries. ht.el
aims to similarly simplify working with hash tables.&lt;/p&gt;
&lt;p&gt;Common operations with hash tables (e.g. enumerate the keys) are too
difficult in Emacs lisp.&lt;/p&gt;
&lt;p&gt;ht.el offers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A consistent naming scheme (contrast &lt;code&gt;make-hash-table&lt;/code&gt; with &lt;code&gt;puthash&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;A more natural argument ordering&lt;/li&gt;
&lt;li&gt;Mutation functions always return &lt;code&gt;nil&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;A more comprehensive range of hash table operations, including a
conventional map (&lt;code&gt;ht-map&lt;/code&gt; returns a list, elisp's &lt;code&gt;maphash&lt;/code&gt; returns
nil).&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-similar-libraries" class="anchor" aria-hidden="true" href="#similar-libraries"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Similar libraries&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/nicferrier/emacs-kv"&gt;kv.el&lt;/a&gt; (focuses more on
alists)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.emacswiki.org/emacs/mon-hash-utils.el" rel="nofollow"&gt;mon-hash-utils&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installation&lt;/h2&gt;
&lt;p&gt;ht.el is available on &lt;a href="https://melpa.org/" rel="nofollow"&gt;MELPA&lt;/a&gt; (recommended) and
&lt;a href="http://marmalade-repo.org/" rel="nofollow"&gt;Marmalade&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Add MELPA to your .emacs.d/init.el:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;require&lt;/span&gt; &lt;span class="pl-c1"&gt;'package&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;add-to-list&lt;/span&gt; &lt;span class="pl-c1"&gt;'package-archives&lt;/span&gt; '(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;melpa&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;https://melpa.org/packages/&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;t&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;then run &lt;code&gt;M-x package-install &amp;lt;RET&amp;gt; ht &amp;lt;RET&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-changelog" class="anchor" aria-hidden="true" href="#changelog"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Changelog&lt;/h2&gt;
&lt;p&gt;ht.el uses semantic versioning, so an incompatible API change will
result in the major version increasing. See
&lt;a href="CHANGELOG.md"&gt;CHANGELOG.md&lt;/a&gt; for a history of all changes.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-running-tests" class="anchor" aria-hidden="true" href="#running-tests"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Running tests&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;M-x ht-run-tests&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-whats-an-alistplist" class="anchor" aria-hidden="true" href="#whats-an-alistplist"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;What's an alist/plist?&lt;/h2&gt;
&lt;p&gt;An alist is an association list, which is a list of pairs. It looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;((key1 . value1)
 (key2 . value2)
 (key3 . value3))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;An alist can also look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;((key1 . value1)
 (key2 . value2)
 (key1 . oldvalue))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A plist is a property list, which is a flat list with an even number
of items. It looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(key1 value1
 key2 value2
 key3 value3)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Both of these are slow. ht.el provides &lt;code&gt;ht&amp;lt;-alist&lt;/code&gt; and
&lt;code&gt;ht&amp;lt;-plist&lt;/code&gt; to help you convert to hash tables. If you need to
work with an alist or plist, use the functions &lt;code&gt;ht-&amp;gt;alist&lt;/code&gt; and
&lt;code&gt;ht-&amp;gt;plist&lt;/code&gt; to convert an hash table to those formats.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>Wilfred</author><guid isPermaLink="false">https://github.com/Wilfred/ht.el</guid><pubDate>Tue, 26 Nov 2019 00:18:00 GMT</pubDate></item><item><title>magit/magit #19 in Emacs Lisp, Today</title><link>https://github.com/magit/magit</link><description>&lt;p&gt;&lt;i&gt;It's Magit! A Git porcelain inside Emacs.&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;div align="center"&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/bddaa4a80ffc50dc7a2900ca62a97039a66a35fc/68747470733a2f2f6d616769742e76632f6173736574732f6d616769742d3136387832303070782e706e67"&gt;&lt;img src="https://camo.githubusercontent.com/bddaa4a80ffc50dc7a2900ca62a97039a66a35fc/68747470733a2f2f6d616769742e76632f6173736574732f6d616769742d3136387832303070782e706e67" data-canonical-src="https://magit.vc/assets/magit-168x200px.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/div&gt;
&lt;h2 align="center"&gt;&lt;a id="user-content-a-git-porcelain-inside-emacs" class="anchor" aria-hidden="true" href="#a-git-porcelain-inside-emacs"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;A Git Porcelain inside Emacs&lt;/h2&gt;
&lt;p align="center"&gt;
  &lt;a href="https://magit.vc" rel="nofollow"&gt;&lt;b&gt;homepage&lt;/b&gt;&lt;/a&gt; |
  &lt;a href="https://magit.vc/manual" rel="nofollow"&gt;&lt;b&gt;manual&lt;/b&gt;&lt;/a&gt; |
  &lt;a href="https://magit.vc/manual/magit/FAQ.html" rel="nofollow"&gt;&lt;b&gt;faq&lt;/b&gt;&lt;/a&gt; |
  &lt;a href="https://github.com/magit/magit/wiki"&gt;&lt;b&gt;wiki&lt;/b&gt;&lt;/a&gt; |
  &lt;a href="https://groups.google.com/forum/?fromgroups#!forum/magit" rel="nofollow"&gt;&lt;b&gt;mailing list&lt;/b&gt;&lt;/a&gt; |
  &lt;a href="https://emacs.stackexchange.com/questions/tagged/magit" rel="nofollow"&gt;&lt;b&gt;forum&lt;/b&gt;&lt;/a&gt; |
  &lt;a href="https://twitter.com/magit_emacs" rel="nofollow"&gt;&lt;b&gt;news&lt;/b&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;hr&gt;
&lt;p align="justify"&gt;
  Magit is an interface to the version control system
  &lt;a href="https://git-scm.com" rel="nofollow"&gt;Git&lt;/a&gt;, implemented as an
  &lt;a href="https://www.gnu.org/software/emacs" rel="nofollow"&gt;Emacs&lt;/a&gt; package.
  Magit aspires to be a complete Git porcelain.  While we cannot
  (yet) claim that Magit wraps and improves upon each and every Git
  command, it is complete enough to allow even experienced Git users
  to perform almost all of their daily version control tasks directly
  from within Emacs.  While many fine Git clients exist, only Magit
  and Git itself deserve to be called porcelains.
&lt;/p&gt;
&lt;hr&gt;
&lt;div align="center"&gt;
  Keeping its users &lt;a href="https://magit.vc/quotes" rel="nofollow"&gt;this excited&lt;/a&gt; is
  &lt;a href="https://magit.vc/stats/authors.html#cumulated_added_lines_of_code_per_author" rel="nofollow"&gt;
    a lot of work
  &lt;/a&gt;.
  If Magit makes you &lt;br&gt; more productive too,
  then &lt;b&gt;please consider making a donation&lt;/b&gt;.
&lt;/div&gt;
&lt;div align="center"&gt;
  &lt;em&gt;Thank you! — Jonas Bernoulli&lt;/em&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;div align="center"&gt;
  &lt;a href="https://github.com/sponsors/tarsius"&gt;
    &lt;img title="Donate using Github Sponsors" alt="Donate using Github Sponsors" src="https://camo.githubusercontent.com/149a9a6ef2aacd3393c62471339a4fefd9798b30/68747470733a2f2f6d616769742e76632f6173736574732f6769746875622d73706f6e736f72732d353070782e706e67" data-canonical-src="https://magit.vc/assets/github-sponsors-50px.png" style="max-width:100%;"&gt;&lt;/a&gt;
    
  &lt;a href="https://magit.vc/donate/#iban" rel="nofollow"&gt;
     &lt;img title="Donate using IBAN" alt="Donate using IBAN" src="https://camo.githubusercontent.com/b92dd41b2b92a121bc8dc3f72c8120927bd5da8b/68747470733a2f2f6d616769742e76632f6173736574732f6962616e2d353070782e706e67" data-canonical-src="https://magit.vc/assets/iban-50px.png" style="max-width:100%;"&gt;&lt;/a&gt;
    
  &lt;a href="https://magit.vc/donate/#zelle" rel="nofollow"&gt;
     &lt;img title="Donate using Zelle (USA bank transfer)" alt="Donate using Zelle (USA bank transfer)" src="https://camo.githubusercontent.com/c99ee781d095dc1864b0d24e908d98342f1a22dc/68747470733a2f2f6d616769742e76632f6173736574732f7a656c6c652d353070782e706e67" data-canonical-src="https://magit.vc/assets/zelle-50px.png" style="max-width:100%;"&gt;&lt;/a&gt;
    
  &lt;a href="https://www.paypal.me/JonasBernoulli/20" rel="nofollow"&gt;
    &lt;img title="Donate using PayPal" alt="Donate using PayPal" src="https://camo.githubusercontent.com/8d272c225e13cd2be472b15c4819fdbb2759d705/68747470733a2f2f6d616769742e76632f6173736574732f70617970616c2e706e67" data-canonical-src="https://magit.vc/assets/paypal.png" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;div align="center"&gt;
  Some alternative donation methods are &lt;a href="https://magit.vc/donate" rel="nofollow"&gt;available&lt;/a&gt;.
&lt;/div&gt;
&lt;hr&gt;
&lt;h1&gt;&lt;a id="user-content-getting-started" class="anchor" aria-hidden="true" href="#getting-started"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Getting Started&lt;/h1&gt;
&lt;p&gt;If you are new to Magit, then either one of the following two
articles should help understanding how it differs from other Git
clients.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://emacsair.me/2017/09/01/magit-walk-through" rel="nofollow"&gt;Visual Magit walk-through&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you are completely new to Magit, then this article is a good
visual introduction.&lt;/p&gt;
&lt;p&gt;Almost everything that you see in Magit can be acted on by pressing
some key, but that's not obvious from just seeing how Magit looks.
The screenshots and accompanying text of this article explain how to
perform a variety of actions on Magit's output.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://emacsair.me/2017/09/01/the-magical-git-interface" rel="nofollow"&gt;Magit, the magical Git interface&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Magit differs significantly from other Git interfaces, and its
advantages are not immediately obvious simply from looking at a few
screenshots as presented in the preceding article.&lt;/p&gt;
&lt;p&gt;This article discusses Magit's properties in somewhat more abstract
terms.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;a id="user-content-support" class="anchor" aria-hidden="true" href="#support"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Support&lt;/h1&gt;
&lt;p&gt;When something doesn't work as expected then please first see the
&lt;a href="https://magit.vc/manual/magit/FAQ.html" rel="nofollow"&gt;FAQ&lt;/a&gt;.  Then also try the list of &lt;a href="https://github.com/magit/magit/issues"&gt;open issues&lt;/a&gt; and use
the search box at the top of that page to find older related issues.
You should also consult the &lt;a href="https://magit.vc/manual" rel="nofollow"&gt;manual&lt;/a&gt; and ask a general-purpose
search engine.&lt;/p&gt;
&lt;p&gt;If that doesn't answer your question, then ask for help on the
&lt;strong&gt;&lt;a href="https://emacs.stackexchange.com/questions/tagged/magit" rel="nofollow"&gt;Emacs Stackexchange site&lt;/a&gt;&lt;/strong&gt; or the &lt;a href="https://groups.google.com/forum/?fromgroups#!forum/magit" rel="nofollow"&gt;mailing list&lt;/a&gt;.
We only use the GitHub issue tracker for feature requests and bug
reports, so please don't ask for help there.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-contributing" class="anchor" aria-hidden="true" href="#contributing"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contributing&lt;/h1&gt;
&lt;p&gt;To report bugs and suggest new feature use the
&lt;a href="https://github.com/magit/magit/issues"&gt;issue tracker&lt;/a&gt;.  If you have some code which you would like
to be merged, then open a &lt;a href="https://github.com/magit/magit/pulls"&gt;pull request&lt;/a&gt;. Please also see
&lt;a href="https://github.com/magit/magit/blob/master/.github/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-acknowledgments" class="anchor" aria-hidden="true" href="#acknowledgments"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Acknowledgments&lt;/h1&gt;
&lt;p&gt;Magit was started by &lt;a href="https://github.com/mvollmer"&gt;Marius Vollmer&lt;/a&gt;, and is now maintained
by &lt;a href="https://emacsair.me" rel="nofollow"&gt;Jonas Bernoulli&lt;/a&gt;, &lt;a href="https://github.com/kyleam"&gt;Kyle Meyer&lt;/a&gt;, and
&lt;a href="https://github.com/npostavs"&gt;Noam Postavsky&lt;/a&gt;.  Other former maintainers are
&lt;a href="http://dudebout.com" rel="nofollow"&gt;Nicolas Dudebout&lt;/a&gt;, &lt;a href="https://github.com/pjweisberg"&gt;Peter J. Weisberg&lt;/a&gt;,
&lt;a href="https://github.com/philjackson"&gt;Phil Jackson&lt;/a&gt;, &lt;a href="https://github.com/vanicat"&gt;Rémi Vanicat&lt;/a&gt;, and &lt;a href="http://www.hodique.info" rel="nofollow"&gt;Yann Hodique&lt;/a&gt;.
Many more people have &lt;a href="https://magit.vc/stats/authors.html" rel="nofollow"&gt;contributed code&lt;/a&gt; and suggested
features.&lt;/p&gt;
&lt;p&gt;Over the years a lot of people supported development financially,
including the &lt;a href="https://github.com/magit/magit/blob/master/Documentation/BACKERS.md"&gt;1987 backers&lt;/a&gt; of the 2017 crowdfunding
campaign.&lt;/p&gt;
&lt;p&gt;Thanks to all of you, may (the history of) the source be with you!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href="https://xkcd.com/859" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/1e16245d2267cba3325db3c5bb1ffe2de83e6a4f/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2532382d2532302532302532302d7265642e737667" alt="Paren Xkcb" data-canonical-src="https://img.shields.io/badge/%28-%20%20%20-red.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="http://www.gnu.org/licenses/gpl-3.0.txt" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/2213171f5fa7ce05c74b04b8df2a686d83a89123/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d47504c5f76332d677265656e2e737667" alt="GPL v3" data-canonical-src="https://img.shields.io/badge/license-GPL_v3-green.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://travis-ci.org/magit/magit" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/2c8a7ed255c7e504d2bd01e19bddbc4a7eba78b7/68747470733a2f2f7472617669732d63692e6f72672f6d616769742f6d616769742e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/magit/magit.svg?branch=master" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://melpa.org/#/magit" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/d1d4664f50bb53a1eeeb9956d299a21769b6fa15/68747470733a2f2f6d656c70612e6f72672f7061636b616765732f6d616769742d62616467652e737667" alt="Melpa" data-canonical-src="https://melpa.org/packages/magit-badge.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://stable.melpa.org/#/magit" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/64a094b6d437b55511a0131fa53f02fe3b29f472/68747470733a2f2f737461626c652e6d656c70612e6f72672f7061636b616765732f6d616769742d62616467652e737667" alt="Melpa Stable" data-canonical-src="https://stable.melpa.org/packages/magit-badge.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://xkcd.com/1597" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/08fde55330a7da6aba5b5eb03ce0c2c12d8eebee/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f786b63642d6769742d6f72616e67652e737667" alt="Git Xkcd" data-canonical-src="https://img.shields.io/badge/xkcd-git-orange.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://magit.vc/manual/magit" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e925ce7917bcabfba088c0dc5e93d9423ecca6d3/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f656965726c6567656e64652d576f6c6c6d696c63687361752d677265656e2e737667" alt="Eierlegende Wollmilchsau" data-canonical-src="https://img.shields.io/badge/eierlegende-Wollmilchsau-green.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://magit.vc/stats/authors.html#commits_per_author" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/37bb8d3c39bf72ad9d89662433a9a41d5b95d6f7/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f73776973732d6d6164652d7265642e7376673f636f6c6f72413d45313141323726636f6c6f72423d353535353535" alt="Swiss Made" data-canonical-src="https://img.shields.io/badge/swiss-made-red.svg?colorA=E11A27&amp;amp;colorB=555555" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://en.wikipedia.org/wiki/Browser_wars" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/7ab3143e0944c3109cd717d7dd8e111507d89b15/68747470733a2f2f6d616769742e76632f6173736574732f6e657473636170652d323070782e706e67" alt="Netscape" data-canonical-src="https://magit.vc/assets/netscape-20px.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>magit</author><guid isPermaLink="false">https://github.com/magit/magit</guid><pubDate>Tue, 26 Nov 2019 00:19:00 GMT</pubDate></item></channel></rss>