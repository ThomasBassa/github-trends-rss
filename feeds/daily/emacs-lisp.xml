<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>GitHub Trending: Emacs Lisp, Today</title><link>https://github.com/trending/emacs-lisp?since=daily</link><description>The top repositories on GitHub for emacs-lisp, measured daily</description><pubDate>Sun, 05 Jan 2020 01:06:47 GMT</pubDate><lastBuildDate>Sun, 05 Jan 2020 01:06:47 GMT</lastBuildDate><generator>PyRSS2Gen-1.1.0</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><ttl>720</ttl><item><title>syl20bnr/spacemacs #1 in Emacs Lisp, Today</title><link>https://github.com/syl20bnr/spacemacs</link><description>&lt;p&gt;&lt;i&gt;A community-driven Emacs distribution - The best editor is neither Emacs nor Vim,  it's Emacs *and* Vim!&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;p&gt;&lt;a name="user-content-top"&gt;&lt;/a&gt;
&lt;a href="http://spacemacs.org" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/8f5ee1d9b7278ed2c63f1f89e9a583ec59b52b6b/68747470733a2f2f63646e2e7261776769742e636f6d2f73796c3230626e722f73706163656d6163732f343432643032353737396461326636326663383663323038323730333639373731346462363531342f6173736574732f73706163656d6163732d62616467652e737667" alt="Made with Spacemacs" data-canonical-src="https://cdn.rawgit.com/syl20bnr/spacemacs/442d025779da2f62fc86c2082703697714db6514/assets/spacemacs-badge.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;a href="http://www.twitter.com/spacemacs" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/7cf10772eb6ccebe92d678c452a971e6e2778653/687474703a2f2f692e696d6775722e636f6d2f7458536f5468462e706e67" alt="Twitter" align="right" data-canonical-src="http://i.imgur.com/tXSoThF.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p align="center"&gt;&lt;a target="_blank" rel="noopener noreferrer" href="/doc/img/title2.png"&gt;&lt;img src="/doc/img/title2.png" alt="Spacemacs" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p align="center"&gt;
&lt;b&gt;&lt;a href="http://spacemacs.org/doc/DOCUMENTATION#orgheadline5" rel="nofollow"&gt;philosophy&lt;/a&gt;&lt;/b&gt;
|
&lt;b&gt;&lt;a href="http://spacemacs.org/doc/DOCUMENTATION#orgheadline8" rel="nofollow"&gt;for whom?&lt;/a&gt;&lt;/b&gt;
|
&lt;b&gt;&lt;a href="http://spacemacs.org/doc/DOCUMENTATION#orgheadline7" rel="nofollow"&gt;screenshots&lt;/a&gt;&lt;/b&gt;
|
&lt;b&gt;&lt;a href="http://spacemacs.org/doc/DOCUMENTATION.html" rel="nofollow"&gt;documentation&lt;/a&gt;&lt;/b&gt;
|
&lt;b&gt;&lt;a href="CONTRIBUTING.org"&gt;contribute&lt;/a&gt;&lt;/b&gt;
|
&lt;b&gt;&lt;a href="http://spacemacs.org/doc/DOCUMENTATION#achievements" rel="nofollow"&gt;achievements&lt;/a&gt;&lt;/b&gt;
|
&lt;b&gt;&lt;a href="http://spacemacs.org/doc/FAQ" rel="nofollow"&gt;FAQ&lt;/a&gt;&lt;/b&gt;
&lt;/p&gt;
&lt;hr&gt;
&lt;p align="center"&gt;
&lt;a href="https://gitter.im/syl20bnr/spacemacs?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/80bf7c9122b2d8f4dbadfc434c9074c1754267ae/68747470733a2f2f6261646765732e6769747465722e696d2f4a6f696e20436861742e737667" alt="Gitter" data-canonical-src="https://badges.gitter.im/Join Chat.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://travis-ci.org/syl20bnr/spacemacs" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/b724760fb5fb9a3cc9dcb3ed5fca8d102d076062/68747470733a2f2f7472617669732d63692e6f72672f73796c3230626e722f73706163656d6163732e737667" alt="Build Status" data-canonical-src="https://travis-ci.org/syl20bnr/spacemacs.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;amp;hosted_button_id=ESFVNPKP4Y742" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/516248018619132b396881c0b21749c34d6ccfbd/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f50617970616c2d446f6e6174652d626c75652e737667" alt="Donate" data-canonical-src="https://img.shields.io/badge/Paypal-Donate-blue.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://shop.spreadshirt.com/spacemacs-shop" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/f1b306f89bf6fade603509713a098316a4948ef2/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f53686f702d542d2d5368697274732d626c75652e737667" alt="Donate" data-canonical-src="https://img.shields.io/badge/Shop-T--Shirts-blue.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="http://www.slant.co/topics/12/~what-are-the-best-programming-text-editors" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/2e66996b76fc392f4936160dc3f627f663d1a68a/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f536c616e742d5265636f6d6d656e642d6666363962342e737667" alt="Recommend it" data-canonical-src="https://img.shields.io/badge/Slant-Recommend-ff69b4.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Quick Install:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clone https://github.com/syl20bnr/spacemacs ~/.emacs.d
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#introduction"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#features"&gt;Features&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#documentation"&gt;Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#getting-help"&gt;Getting Help&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#prerequisites"&gt;Prerequisites&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#emacs"&gt;Emacs&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#linux-distros"&gt;Linux distros&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#macos"&gt;macOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#windows"&gt;Windows&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#install"&gt;Install&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#default-installation"&gt;Default installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#alternate-installations"&gt;Alternate installations&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#modify-home-environment-variable"&gt;Modify HOME environment variable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#modify-spacemacs-start-directory-variable"&gt;Modify spacemacs-start-directory variable&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#spacemacs-logo"&gt;Spacemacs logo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#update"&gt;Update&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#automatic-update-on-master-branch"&gt;Automatic update (on master branch)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#manual-update-on-master-branch"&gt;Manual update (on master branch)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#on-develop-branch"&gt;On develop branch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#revert-to-a-specific-version"&gt;Revert to a specific version&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#quotes"&gt;Quotes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#contributions"&gt;Contributions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#communities"&gt;Communities&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#license"&gt;License&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#supporting-spacemacs"&gt;Supporting Spacemacs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;&lt;a id="user-content-introduction" class="anchor" aria-hidden="true" href="#introduction"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Spacemacs is a new way to experience Emacs -- a sophisticated and
polished set-up focused on ergonomics, mnemonics and consistency.&lt;/p&gt;
&lt;p&gt;Just clone it, launch it, then press the space bar to explore the
interactive list of carefully-chosen key bindings. You can also press
the home buffer's &lt;code&gt;[?]&lt;/code&gt; button for some great first key bindings to
try.&lt;/p&gt;
&lt;p&gt;Spacemacs can be used naturally by both Emacs and Vim users -- you can
even mix the two editing styles. Switching easily between input styles
makes Spacemacs a great tool for pair-programming.&lt;/p&gt;
&lt;p&gt;Spacemacs is currently in beta, and contributions are very welcome.&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="doc/img/spacemacs-python.png"&gt;&lt;img src="doc/img/spacemacs-python.png" alt="spacemacs_python" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-features" class="anchor" aria-hidden="true" href="#features"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Features&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Great documentation:&lt;/strong&gt; access documentation in Emacs with
&lt;kbd&gt;SPC h SPC&lt;/kbd&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Beautiful GUI:&lt;/strong&gt; you'll love the distraction free UI and its functional
mode-line.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Excellent ergonomics:&lt;/strong&gt; all the key bindings are accessible by pressing
the &lt;kbd&gt;space bar&lt;/kbd&gt; or &lt;kbd&gt;alt-m&lt;/kbd&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mnemonic key bindings:&lt;/strong&gt; commands have mnemonic prefixes like
&lt;kbd&gt;SPC b&lt;/kbd&gt; for all the buffer commands or &lt;kbd&gt;SPC p&lt;/kbd&gt; for the
project commands.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Batteries included:&lt;/strong&gt; discover hundreds of ready-to-use packages nicely
organised in configuration layers following a set of
&lt;a href="http://spacemacs.org/doc/CONVENTIONS" rel="nofollow"&gt;conventions&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Documentation&lt;/h1&gt;
&lt;p&gt;Comprehensive documentation is available for each layer by pressing
&lt;kbd&gt;SPC h SPC&lt;/kbd&gt;.&lt;/p&gt;
&lt;p&gt;You can also check the &lt;a href="http://spacemacs.org/doc/DOCUMENTATION" rel="nofollow"&gt;general documentation&lt;/a&gt;,
&lt;a href="http://spacemacs.org/doc/QUICK_START" rel="nofollow"&gt;quick start guide&lt;/a&gt; and the &lt;a href="http://spacemacs.org/doc/FAQ" rel="nofollow"&gt;FAQ&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-getting-help" class="anchor" aria-hidden="true" href="#getting-help"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Getting Help&lt;/h1&gt;
&lt;p&gt;If you need help, ask your question in the &lt;a href="https://gitter.im/syl20bnr/spacemacs" rel="nofollow"&gt;Gitter Chat&lt;/a&gt; and a member of the
community will help you out.&lt;/p&gt;
&lt;p&gt;If you prefer IRC, connect to the &lt;a href="https://irc.gitter.im/" rel="nofollow"&gt;Gitter Chat IRC server&lt;/a&gt; and join the
&lt;code&gt;#syl20bnr/spacemacs&lt;/code&gt; channel.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-prerequisites" class="anchor" aria-hidden="true" href="#prerequisites"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Prerequisites&lt;/h1&gt;
&lt;h2&gt;&lt;a id="user-content-emacs" class="anchor" aria-hidden="true" href="#emacs"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Emacs&lt;/h2&gt;
&lt;p&gt;Spacemacs requires Emacs 24.4 or above. The development version of Emacs (at the
time of writing, this is 25.2) is not &lt;em&gt;officially&lt;/em&gt; supported, but should
nevertheless be expected to work.&lt;/p&gt;
&lt;p&gt;Some modes require third-party tools that you'll have to install via your
favorite package manager.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-linux-distros" class="anchor" aria-hidden="true" href="#linux-distros"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Linux distros&lt;/h3&gt;
&lt;p&gt;Install Emacs from the package manager of your Linux distribution.&lt;/p&gt;
&lt;p&gt;You should install the "emacs" package, not the "xemacs" package.
XEmacs is an old fork of Emacs. The X in its name is unrelated to X11.
Both Emacs and XEmacs have graphical support.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Ubuntu LTS 12.04 and 14.04 repositories have only Emacs 24.3
available. You have to &lt;a href="https://www.gnu.org/software/emacs/manual/html_node/efaq/Installing-Emacs.html" rel="nofollow"&gt;build from source&lt;/a&gt; Emacs 24.4 or greater,
as Spacemacs won't work with 24.3. The same may be true for other distributions
as well.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-macos" class="anchor" aria-hidden="true" href="#macos"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;macOS&lt;/h3&gt;
&lt;p&gt;The recommended way of installing Emacs on macOS is using &lt;a href="http://brew.sh" rel="nofollow"&gt;homebrew&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;$ brew tap d12frosted/emacs-plus
$ brew install emacs-plus
$ brew linkapps emacs-plus&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; these homebrew commands will install GNU Emacs, and link it to your
&lt;code&gt;/Applications&lt;/code&gt; directory. You still need to run the &lt;code&gt;git clone&lt;/code&gt; mentioned at
the start of this file. That will populate your &lt;code&gt;~/.emacs.d&lt;/code&gt; directory, which is
what transforms a regular GNU Emacs into Spacemacs.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; the proposed &lt;code&gt;emacs-plus&lt;/code&gt; tap is identical to the &lt;code&gt;emacs&lt;/code&gt; formulae, it
just builds GNU Emacs with support of several features by default along with
providing Spacemacs icon.
See &lt;a href="https://github.com/d12frosted/homebrew-emacs-plus"&gt;emacs-plus&lt;/a&gt; for more
information.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: to have the title bar match your theme background color,
consider using instead:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;$ brew install emacs-plus --HEAD --with-natural-title-bars&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; after you have completed the &lt;a href="#install"&gt;install process&lt;/a&gt; below, it is
also recommended to add the &lt;a href="http://spacemacs.org/layers/+os/osx/README.html" rel="nofollow"&gt;osx layer&lt;/a&gt; to your &lt;a href="http://spacemacs.org/doc/DOCUMENTATION#orgheadline45" rel="nofollow"&gt;dotfile&lt;/a&gt;. Install
instructions are available in the &lt;a href="http://spacemacs.org/layers/+os/osx/README.html" rel="nofollow"&gt;osx layer&lt;/a&gt; documentation.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; if the powerline separators on the spaceline are a different (less
saturated) color than the rest of the line, you can add following snippet to
&lt;code&gt;dotspacemacs/user-config&lt;/code&gt; in your &lt;code&gt;.spacemacs&lt;/code&gt; file.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;setq&lt;/span&gt; ns-use-srgb-colorspace &lt;span class="pl-c1"&gt;nil&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Keep in mind that this is not ideal solution as it affects all colours in Emacs.
Another option is to use different powerline separator. For example, &lt;code&gt;alternate&lt;/code&gt;
and &lt;code&gt;bar&lt;/code&gt; diminishes the difference. And using &lt;code&gt;utf-8&lt;/code&gt; separator makes it go
away completely without the need to change colour space. In order to change
powerline separator put following snippet in &lt;code&gt;dotspacemacs/user-config&lt;/code&gt;.&lt;/p&gt;
&lt;pre lang="eslip"&gt;&lt;code&gt;(setq powerline-default-separator 'utf-8)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For more information about powerline separators, please refer to appropriate
section in &lt;a href="http://spacemacs.org/doc/DOCUMENTATION" rel="nofollow"&gt;Documentation&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-windows" class="anchor" aria-hidden="true" href="#windows"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Windows&lt;/h3&gt;
&lt;p&gt;You can download good quality builds from the &lt;a href="http://emacsbinw64.sourceforge.net/" rel="nofollow"&gt;emacs-w64 project&lt;/a&gt;.
It is recommended to install the most recent &lt;a href="https://sourceforge.net/projects/emacsbinw64/files/release/" rel="nofollow"&gt;stable build&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Be sure to declare a environment variable named &lt;code&gt;HOME&lt;/code&gt; pointing to your user
directory &lt;code&gt;C:\Users\&amp;lt;username&amp;gt;&lt;/code&gt;. Then you can clone Spacemacs in this directory.&lt;/p&gt;
&lt;p&gt;Sometimes you'll get the following error when you first start Emacs:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;The directory ~/.emacs.d/server is unsafe
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To fix it change the owner of the directory &lt;code&gt;~/.emacs.d/server&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;from Properties select the Tab “Security”,&lt;/li&gt;
&lt;li&gt;select the button “Advanced”,&lt;/li&gt;
&lt;li&gt;select the Tab “Owner”&lt;/li&gt;
&lt;li&gt;change the owner to your account name&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Source: &lt;a href="http://stackoverflow.com/questions/885793/emacs-error-when-calling-server-start" rel="nofollow"&gt;Stack Overflow&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For efficient searches we recommend to install &lt;code&gt;pt&lt;/code&gt; (&lt;a href="https://github.com/monochromegane/the_platinum_searcher"&gt;the platinum searcher&lt;/a&gt;).
&lt;code&gt;pt&lt;/code&gt; version 1.7.7 or higher is required.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-install" class="anchor" aria-hidden="true" href="#install"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Install&lt;/h1&gt;
&lt;h2&gt;&lt;a id="user-content-default-installation" class="anchor" aria-hidden="true" href="#default-installation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Default installation&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;If you have an existing Emacs configuration, back it up first:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;cd&lt;/span&gt; &lt;span class="pl-k"&gt;~&lt;/span&gt;
mv .emacs.d .emacs.d.bak
mv .emacs .emacs.bak&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Don't forget to backup and &lt;em&gt;remove&lt;/em&gt; &lt;code&gt;~/.emacs&lt;/code&gt; file otherwise Spacemacs
&lt;strong&gt;WILL NOT&lt;/strong&gt; load since that file prevents Emacs from loading the proper
initialization file.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Clone the repository:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;git clone https://github.com/syl20bnr/spacemacs &lt;span class="pl-k"&gt;~&lt;/span&gt;/.emacs.d&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;master&lt;/code&gt; is the stable branch and it is &lt;em&gt;immutable&lt;/em&gt;, &lt;strong&gt;DO NOT&lt;/strong&gt; make any
modification to it or you will break the update mechanism. If you want to
fork Spacemacs safely use the &lt;code&gt;develop&lt;/code&gt; branch where you handle the update
manually.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(Optional) Install the &lt;a href="https://github.com/adobe-fonts/source-code-pro"&gt;Source Code Pro&lt;/a&gt; font.&lt;/p&gt;
&lt;p&gt;If you are running in terminal you'll also need to change font settings of
your terminal.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Launch Emacs. Spacemacs will automatically install the packages it requires.
If you get an error regarding package downloads then you may try to disable
the HTTPS protocol by starting Emacs with&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;emacs --insecure&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or you can set the &lt;code&gt;dotspacemacs-elpa-https&lt;/code&gt; to &lt;code&gt;nil&lt;/code&gt; in your dotfile to
remove the need to start Emacs with &lt;code&gt;--insecure&lt;/code&gt; argument. You may wish to
clear out your &lt;code&gt;.emacs.d/elpa&lt;/code&gt; directory before doing this, so that any
corrupted packages you may have downloaded will be re-installed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Restart Emacs to complete the installation.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If the mode-line turns red then be sure to consult the &lt;a href="http://spacemacs.org/doc/FAQ" rel="nofollow"&gt;FAQ&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-alternate-installations" class="anchor" aria-hidden="true" href="#alternate-installations"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Alternate installations&lt;/h2&gt;
&lt;p&gt;It may be useful to clone Spacemacs outside Emacs dotdirectory &lt;code&gt;~/.emacs.d&lt;/code&gt; so
you can try Spacemacs without replacing completely our own configuration.
There is currently two possibilities to support alternative location for
Spacemacs configuration.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-modify-home-environment-variable" class="anchor" aria-hidden="true" href="#modify-home-environment-variable"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Modify HOME environment variable&lt;/h3&gt;
&lt;p&gt;This solution is ideal to quickly try Spacemacs without compromising your
existing configuration.&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;mkdir &lt;span class="pl-k"&gt;~&lt;/span&gt;/spacemacs
git clone https://github.com/syl20bnr/spacemacs.git &lt;span class="pl-k"&gt;~&lt;/span&gt;/spacemacs/.emacs.d
HOME=&lt;span class="pl-k"&gt;~&lt;/span&gt;/spacemacs emacs&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note: If you're on Fish shell, you will need to modify the last command to: &lt;code&gt;env HOME=$HOME/spacemacs emacs&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-modify-spacemacs-start-directory-variable" class="anchor" aria-hidden="true" href="#modify-spacemacs-start-directory-variable"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Modify spacemacs-start-directory variable&lt;/h3&gt;
&lt;p&gt;This solution is better suited to "embed" Spacemacs into your own configuration.
Say you cloned Spacemacs in &lt;code&gt;~/.emacs.d/spacemacs/&lt;/code&gt; then drop these lines in
&lt;code&gt;~/.emacs.d/init.el&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;setq&lt;/span&gt; spacemacs-start-directory &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;~/.emacs.d/spacemacs/&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;load-file&lt;/span&gt; (&lt;span class="pl-c1"&gt;concat&lt;/span&gt; spacemacs-start-directory &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;init.el&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-spacemacs-logo" class="anchor" aria-hidden="true" href="#spacemacs-logo"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Spacemacs logo&lt;/h2&gt;
&lt;p&gt;For Ubuntu users, follow this guide to
&lt;a href="http://splendidabacus.com/posts/2015/03/spacemacs-unity-icon/" rel="nofollow"&gt;change the logo in Unity&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For Mac users, you need to &lt;a href="https://github.com/nashamri/spacemacs-logo"&gt;download the .icns version of the logo&lt;/a&gt;,
then &lt;a href="http://www.idownloadblog.com/2014/07/16/how-to-change-app-icon-mac/" rel="nofollow"&gt;change the logo on Dock&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-update" class="anchor" aria-hidden="true" href="#update"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Update&lt;/h1&gt;
&lt;p&gt;Spacemacs has a built-in notification of a new version when you are on the
&lt;code&gt;master&lt;/code&gt; branch. If you are on the &lt;code&gt;develop&lt;/code&gt; branch then you'll have to
update Spacemacs manually by updating your repository.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-automatic-update-on-master-branch" class="anchor" aria-hidden="true" href="#automatic-update-on-master-branch"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Automatic update (on master branch)&lt;/h2&gt;
&lt;p&gt;When a new version is available a little arrow appears in the mode-line.&lt;/p&gt;
&lt;p&gt;Its color depends on the number of versions available since your last update.
Green means that your current version is recent, orange and red mean that your
current version is older.&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="doc/img/powerline-update.png"&gt;&lt;img src="doc/img/powerline-update.png" alt="powerline_update" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Click on the arrow to update Spacemacs to the last version.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-manual-update-on-master-branch" class="anchor" aria-hidden="true" href="#manual-update-on-master-branch"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Manual update (on master branch)&lt;/h2&gt;
&lt;p&gt;(Remove the angle brackets when typing the lines below into your shell.)&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;git fetch
git reset --hard &lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt;tag version which you are updating to&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-on-develop-branch" class="anchor" aria-hidden="true" href="#on-develop-branch"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;On develop branch&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Update Emacs packages by clicking (press &lt;code&gt;RET&lt;/code&gt;) on the &lt;code&gt;[Update Packages]&lt;/code&gt; link of
the starting page.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Close Emacs and update the git repository:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;git pull --rebase&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Restart Emacs to complete the upgrade.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;&lt;a id="user-content-revert-to-a-specific-version" class="anchor" aria-hidden="true" href="#revert-to-a-specific-version"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Revert to a specific version&lt;/h2&gt;
&lt;p&gt;To revert to a specific version you just have to checkout the corresponding
branch, for instance to revert to the last &lt;code&gt;0.103&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;git checkout origin/release-0.103&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;After you update, either manually, or automatically, you are advised to update
your packages by clicking the &lt;code&gt;[Update Packages]&lt;/code&gt; button on the Spacemacs Home
Buffer.&lt;/strong&gt;&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-quotes" class="anchor" aria-hidden="true" href="#quotes"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Quotes&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://gitter.im/syl20bnr/spacemacs?at=568e627a0cdaaa62045a7df6" rel="nofollow"&gt;Quote&lt;/a&gt; by &lt;a href="https://github.com/ashnur"&gt;ashnur&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;«I feel that spacemacs is an aircraft carrier and I am playing table tennis on the deck as a freerider.»
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href="https://gitter.im/syl20bnr/spacemacs?at=5768456c6577f032450cfedb" rel="nofollow"&gt;Quote&lt;/a&gt; by &lt;a href="https://github.com/deuill"&gt;deuill&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;«I LOVE SPACEMACS AND MAGIT

 That is all»
&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;&lt;a id="user-content-contributions" class="anchor" aria-hidden="true" href="#contributions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contributions&lt;/h1&gt;
&lt;p&gt;Spacemacs is a community-driven project, it needs &lt;em&gt;you&lt;/em&gt; to keep it up to
date and propose great and useful configuration for all the things!&lt;/p&gt;
&lt;p&gt;Before contributing be sure to consult the
&lt;a href="CONTRIBUTING.org"&gt;contribution guidelines&lt;/a&gt; and &lt;a href="http://spacemacs.org/doc/CONVENTIONS" rel="nofollow"&gt;conventions&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-communities" class="anchor" aria-hidden="true" href="#communities"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Communities&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://gitter.im/syl20bnr/spacemacs" rel="nofollow"&gt;Gitter Chat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://emacs.stackexchange.com/questions/tagged/spacemacs" rel="nofollow"&gt;Stack Exchange&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/spacemacs" rel="nofollow"&gt;Reddit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;a id="user-content-license" class="anchor" aria-hidden="true" href="#license"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;License&lt;/h1&gt;
&lt;p&gt;The license is GPLv3 for all parts specific to Spacemacs, this includes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the initialization and core files&lt;/li&gt;
&lt;li&gt;all the layer files&lt;/li&gt;
&lt;li&gt;the documentation&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For the packages shipped in this repository you can refer to the files header.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/nashamri/spacemacs-logo"&gt;Spacemacs logo&lt;/a&gt; by &lt;a href="https://github.com/nashamri"&gt;Nasser Alshammari&lt;/a&gt; released under a &lt;a href="http://creativecommons.org/licenses/by-sa/4.0/" rel="nofollow"&gt;Creative Commons Attribution-ShareAlike 4.0 International License.&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-supporting-spacemacs" class="anchor" aria-hidden="true" href="#supporting-spacemacs"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Supporting Spacemacs&lt;/h1&gt;
&lt;p&gt;The best way to support Spacemacs is to contribute to it either by reporting
bugs, helping the community on the &lt;a href="https://gitter.im/syl20bnr/spacemacs" rel="nofollow"&gt;Gitter Chat&lt;/a&gt; or sending pull requests.&lt;/p&gt;
&lt;p&gt;You can show your love for the project by getting cool Spacemacs t-shirts, mugs
and more in the &lt;a href="https://shop.spreadshirt.com/spacemacs-shop" rel="nofollow"&gt;Spacemacs Shop&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you want to show your support financially you can contribute to &lt;a href="https://salt.bountysource.com/teams/spacemacs" rel="nofollow"&gt;Bountysource&lt;/a&gt; or buy a drink for the
maintainer by clicking on the &lt;a href="#top"&gt;Paypal badge&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you used spacemacs in a project and you want to show that fact, you can use
the spacemacs badge: &lt;a href="http://spacemacs.org" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/8f5ee1d9b7278ed2c63f1f89e9a583ec59b52b6b/68747470733a2f2f63646e2e7261776769742e636f6d2f73796c3230626e722f73706163656d6163732f343432643032353737396461326636326663383663323038323730333639373731346462363531342f6173736574732f73706163656d6163732d62616467652e737667" alt="Built with Spacemacs" data-canonical-src="https://cdn.rawgit.com/syl20bnr/spacemacs/442d025779da2f62fc86c2082703697714db6514/assets/spacemacs-badge.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;For Markdown:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[![Built with Spacemacs](https://cdn.rawgit.com/syl20bnr/spacemacs/442d025779da2f62fc86c2082703697714db6514/assets/spacemacs-badge.svg)](http://spacemacs.org)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For HTML:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;a href="http://spacemacs.org"&amp;gt;&amp;lt;img src="https://cdn.rawgit.com/syl20bnr/spacemacs/442d025779da2f62fc86c2082703697714db6514/assets/spacemacs-badge.svg" /&amp;gt;&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For Org-mode:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[[http://spacemacs.org][file:https://cdn.rawgit.com/syl20bnr/spacemacs/442d025779da2f62fc86c2082703697714db6514/assets/spacemacs-badge.svg]]
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thank you!&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>syl20bnr</author><guid isPermaLink="false">https://github.com/syl20bnr/spacemacs</guid><pubDate>Sun, 05 Jan 2020 00:01:00 GMT</pubDate></item><item><title>emacs-lsp/lsp-mode #2 in Emacs Lisp, Today</title><link>https://github.com/emacs-lsp/lsp-mode</link><description>&lt;p&gt;&lt;i&gt;Emacs client/library for the Language Server Protocol&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="org" data-path="README.org"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;p&gt;&lt;a href="https://melpa.org/#/lsp-mode" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/9af67d09707b47dd26115a48505d481f9dcdd805/68747470733a2f2f6d656c70612e6f72672f7061636b616765732f6c73702d6d6f64652d62616467652e737667" alt="https://melpa.org/packages/lsp-mode-badge.svg" data-canonical-src="https://melpa.org/packages/lsp-mode-badge.svg" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a href="https://stable.melpa.org/#/lsp-mode" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/7a2cc5cd5fb1a171dde8e45435a353f849853123/68747470733a2f2f737461626c652e6d656c70612e6f72672f7061636b616765732f6c73702d6d6f64652d62616467652e737667" alt="https://stable.melpa.org/packages/lsp-mode-badge.svg" data-canonical-src="https://stable.melpa.org/packages/lsp-mode-badge.svg" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a href="https://gitter.im/emacs-lsp/lsp-mode" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/40a1fe7a717b706a101e6e1d917dfdb3f422a8c3/68747470733a2f2f6261646765732e6769747465722e696d2f656d6163732d6c73702f6c73702d6d6f64652e737667" alt="https://badges.gitter.im/emacs-lsp/lsp-mode.svg" data-canonical-src="https://badges.gitter.im/emacs-lsp/lsp-mode.svg" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a href="https://travis-ci.org/emacs-lsp/lsp-mode" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/5674691682ca175709f1682ede1931f44a188aef/68747470733a2f2f7472617669732d63692e6f72672f656d6163732d6c73702f6c73702d6d6f64652e7376673f6272616e63683d6d6173746572" alt="https://travis-ci.org/emacs-lsp/lsp-mode.svg?branch=master" data-canonical-src="https://travis-ci.org/emacs-lsp/lsp-mode.svg?branch=master" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="examples/logo.png"&gt;&lt;img src="examples/logo.png" alt="examples/logo.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-language-server-protocol-support-for-emacs" class="anchor" aria-hidden="true" href="#language-server-protocol-support-for-emacs"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Language Server Protocol Support for Emacs&lt;/h1&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="examples/head.png"&gt;&lt;img src="examples/head.png" alt="examples/head.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-table-of-contents" class="anchor" aria-hidden="true" href="#table-of-contents"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Table of Contents&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="#language-server-protocol-support-for-emacs"&gt;Language Server Protocol Support for Emacs&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href="#why"&gt;Why?&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#overview"&gt;Overview&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#installation"&gt;Installation&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href="#install-via-melpa"&gt;Install via melpa&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href="#configuration"&gt;Configuration&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href="#install-language-server"&gt;Install language server&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href="#configure-lsp-mode"&gt;Configure lsp-mode&lt;/a&gt;
            &lt;ul&gt;
              &lt;li&gt;&lt;a href="#vanilla-emacs"&gt;Vanilla Emacs&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href="#spacemacs"&gt;Spacemacs&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href="#use-package"&gt;use-package&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href="#docker"&gt;Docker&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;&lt;a href="#how-does-it-work"&gt;How does it work?&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href="#supported-languages"&gt;Supported languages&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#commands"&gt;Commands&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#settings"&gt;Settings&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#screenshots"&gt;Screenshots&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#extensions"&gt;Extensions&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href="#tramp"&gt;TRAMP&lt;/a&gt;
            &lt;ul&gt;
              &lt;li&gt;&lt;a href="#how-does-it-work-1"&gt;How does it work?&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href="#sample-configuration"&gt;Sample configuration&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href="#dealing-with-stderr"&gt;Dealing with stderr&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href="#limitations"&gt;Limitations&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href="#file-watches"&gt;File watches&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href="#contributions"&gt;Contributions&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href="#members"&gt;Members&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href="#troubleshooting"&gt;Troubleshooting&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#adding-support-for-languages"&gt;Adding support for languages&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href="#registering-server"&gt;Registering server&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href="#sections"&gt;Sections&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href="#faq"&gt;FAQ&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#see-also"&gt;See also&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-why" class="anchor" aria-hidden="true" href="#why"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Why?&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;g-emoji class="g-emoji" alias="heart" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2764.png"&gt;❤️&lt;/g-emoji&gt; &lt;b&gt;Community Driven&lt;/b&gt;&lt;/li&gt;
  &lt;li&gt;&lt;g-emoji class="g-emoji" alias="gem" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f48e.png"&gt;💎&lt;/g-emoji&gt; &lt;b&gt;Fully featured&lt;/b&gt; - supports &lt;b&gt;all&lt;/b&gt; features in Language Server Protocol v3.14.&lt;/li&gt;
  &lt;li&gt;&lt;g-emoji class="g-emoji" alias="rocket" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f680.png"&gt;🚀&lt;/g-emoji&gt; &lt;b&gt;Easy to configure&lt;/b&gt; - works out of the box and automatically upgrades if additional packages are present&lt;/li&gt;
  &lt;li&gt;&lt;g-emoji class="g-emoji" alias="star2" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f31f.png"&gt;🌟&lt;/g-emoji&gt; &lt;b&gt;Flexible&lt;/b&gt; - could be configured as full-blown IDE with flashy UI or minimal distraction free&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-overview" class="anchor" aria-hidden="true" href="#overview"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Overview&lt;/h2&gt;
&lt;p&gt;Client for &lt;a href="https://github.com/Microsoft/language-server-protocol/"&gt;Language Server Protocol&lt;/a&gt; (v3.14). &lt;a href="https://github.com/emacs-lsp/lsp-mode"&gt;lsp-mode&lt;/a&gt; aims to provide IDE-like experience by providing optional integration with the most popular Emacs packages like &lt;code&gt;company&lt;/code&gt;, &lt;code&gt;flycheck&lt;/code&gt; and &lt;code&gt;projectile&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Non-blocking asynchronous calls&lt;/li&gt;
  &lt;li&gt;Real-time Diagnostics/linting (via builtin &lt;code&gt;flymake&lt;/code&gt; when Emacs &amp;gt; 26, requires flymake&amp;gt;=1.0.5 or &lt;a href="https://github.com/flycheck/flycheck"&gt;flycheck&lt;/a&gt;/&lt;a href="https://github.com/emacs-lsp/lsp-ui"&gt;lsp-ui&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Code completion - using &lt;a href="https://github.com/tigersoldier/company-lsp"&gt;company-lsp&lt;/a&gt; or builtin &lt;code&gt;completion-at-point&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Hovers - using &lt;a href="https://github.com/emacs-lsp/lsp-ui"&gt;lsp-ui&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Code actions - using &lt;code&gt;lsp-execute-code-action&lt;/code&gt; or &lt;a href="https://github.com/emacs-lsp/lsp-ui"&gt;lsp-ui&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Code outline - using builtin &lt;a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Imenu.html" rel="nofollow"&gt;imenu&lt;/a&gt; or &lt;code&gt;helm-imenu&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Code navigation - using builtin &lt;a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Xref.html" rel="nofollow"&gt;xref&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Code lens (references/implementations) - using builtin &lt;a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Xref.html" rel="nofollow"&gt;xref&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Highlights&lt;/li&gt;
  &lt;li&gt;Formatting&lt;/li&gt;
  &lt;li&gt;Debugger - &lt;a href="https://github.com/yyoncho/dap-mode/"&gt;dap-mode&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Helm integration - &lt;a href="https://github.com/emacs-lsp/helm-lsp/"&gt;helm-lsp&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Ivy integration - &lt;a href="https://github.com/emacs-lsp/lsp-ivy/"&gt;lsp-ivy&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Treemacs integration - &lt;a href="https://github.com/emacs-lsp/lsp-treemacs"&gt;lsp-treemacs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Semantic highlighting (as currently implemented by JDT LS and unreleased builds of clangd, cf. &lt;a href="https://github.com/microsoft/vscode-languageserver-node/pull/367"&gt;Semantic highlighting spec&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installation&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-install-via-melpa" class="anchor" aria-hidden="true" href="#install-via-melpa"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Install via melpa&lt;/h3&gt;
&lt;p&gt;The recommended way to install &lt;code&gt;lsp-mode&lt;/code&gt; is via &lt;code&gt;package.el&lt;/code&gt; - the built-in package manager in Emacs. &lt;code&gt;lsp-mode&lt;/code&gt; is available on the two major &lt;code&gt;package.el&lt;/code&gt; community maintained repos - &lt;a href="http://stable.melpa.org" rel="nofollow"&gt;MELPA Stable&lt;/a&gt; and &lt;a href="http://melpa.org" rel="nofollow"&gt;MELPA&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;M-x &lt;code&gt;package-install&lt;/code&gt; [RET] &lt;code&gt;lsp-mode&lt;/code&gt; [RET]&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-configuration" class="anchor" aria-hidden="true" href="#configuration"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Configuration&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-install-language-server" class="anchor" aria-hidden="true" href="#install-language-server"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Install language server&lt;/h3&gt;
&lt;p&gt;Check the table bellow with the list of supported servers and the corresponding instructions on how to install the server.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-configure-lsp-mode" class="anchor" aria-hidden="true" href="#configure-lsp-mode"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Configure lsp-mode&lt;/h3&gt;
&lt;h4&gt;&lt;a id="user-content-vanilla-emacs" class="anchor" aria-hidden="true" href="#vanilla-emacs"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Vanilla Emacs&lt;/h4&gt;
&lt;p&gt;You could go minimal and use &lt;code&gt;lsp-mode&lt;/code&gt; as it is without external packages with the built-in &lt;code&gt;flymake&lt;/code&gt; and &lt;code&gt;completion-at-point&lt;/code&gt; or you could install the following extensions for better experience:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;install &lt;a href="https://github.com/emacs-lsp/lsp-ui"&gt;lsp-ui&lt;/a&gt; for &lt;a href="https://github.com/flycheck/flycheck"&gt;flycheck&lt;/a&gt; integration and higher level UI modules.&lt;/li&gt;
  &lt;li&gt;install &lt;a href="https://github.com/tigersoldier/company-lsp"&gt;company-lsp&lt;/a&gt; if you want to use &lt;code&gt;company-mode&lt;/code&gt; for completion.&lt;/li&gt;
  &lt;li&gt;install &lt;a href="https://github.com/emacs-lsp/lsp-treemacs"&gt;lsp-treemacs&lt;/a&gt; for project wide error overview.&lt;/li&gt;
  &lt;li&gt;install &lt;a href="https://github.com/emacs-lsp/helm-lsp"&gt;helm-lsp&lt;/a&gt; provides on type completion for &lt;code&gt;xref-apropos&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;install &lt;a href="https://github.com/emacs-lsp/dap-mode"&gt;dap-mode&lt;/a&gt; if your language is supported by the debugger.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;require&lt;/span&gt; &lt;span class="pl-c1"&gt;'lsp-mode&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;add-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;'XXX-mode-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;#&lt;span class="pl-c1"&gt;'lsp&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;where &lt;code&gt;XXX&lt;/code&gt; could be major mode like &lt;code&gt;python&lt;/code&gt;, &lt;code&gt;java&lt;/code&gt;, &lt;code&gt;c++&lt;/code&gt;. Alternatively, if you want to minimize you configuration you may use &lt;code&gt;prog-mode-hook&lt;/code&gt;. In case you do that, &lt;code&gt;lsp&lt;/code&gt; will try to start for each programming mode and echo a message when there is no client registered for the current mode or if the corresponding server is not present. In addition, &lt;code&gt;lsp-mode&lt;/code&gt; will automatically detect and configure &lt;a href="https://github.com/emacs-lsp/lsp-ui"&gt;lsp-ui&lt;/a&gt; and &lt;a href="https://github.com/tigersoldier/company-lsp"&gt;company-lsp&lt;/a&gt;. To turn off that behavior you could set &lt;code&gt;lsp-auto-configure&lt;/code&gt; to &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To defer LSP server startup (and DidOpen notifications) until the buffer is visible you can use &lt;code&gt;lsp-deferred&lt;/code&gt; instead of &lt;code&gt;lsp&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;add-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;'XXX-mode-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;#&lt;span class="pl-c1"&gt;'lsp-deferred&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content-spacemacs" class="anchor" aria-hidden="true" href="#spacemacs"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Spacemacs&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://github.com/emacs-lsp/lsp-mode"&gt;lsp-mode&lt;/a&gt; is included in spacemacs develop branch. Add &lt;code&gt;lsp&lt;/code&gt; to &lt;code&gt;dotspacemacs-configuration-layers&lt;/code&gt; and configure the language that you want to use to be backed by &lt;code&gt;lsp&lt;/code&gt; backend.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-use-package" class="anchor" aria-hidden="true" href="#use-package"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;use-package&lt;/h4&gt;
&lt;p&gt;Replace &lt;code&gt;(require 'lsp-mode)&lt;/code&gt; with the following if you use use-package.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; lsp-mode
  &lt;span class="pl-c1"&gt;:hook&lt;/span&gt; (XXX-mode &lt;span class="pl-k"&gt;.&lt;/span&gt; lsp)
  &lt;span class="pl-c1"&gt;:commands&lt;/span&gt; lsp)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; optionally&lt;/span&gt;
(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; lsp-ui &lt;span class="pl-c1"&gt;:commands&lt;/span&gt; lsp-ui-mode)
(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; company-lsp &lt;span class="pl-c1"&gt;:commands&lt;/span&gt; company-lsp)
(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; helm-lsp &lt;span class="pl-c1"&gt;:commands&lt;/span&gt; helm-lsp-workspace-symbol)
(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; lsp-treemacs &lt;span class="pl-c1"&gt;:commands&lt;/span&gt; lsp-treemacs-errors-list)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; optionally if you want to use debugger&lt;/span&gt;
(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; dap-mode)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; (use-package dap-LANGUAGE) to load the dap adapter for your language&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To defer LSP server startup (and DidOpen notifications) until the buffer is visible you can use &lt;code&gt;lsp-deferred&lt;/code&gt; instead of &lt;code&gt;lsp&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; lsp-mode
  &lt;span class="pl-c1"&gt;:hook&lt;/span&gt; (XXX-mode &lt;span class="pl-k"&gt;.&lt;/span&gt; lsp-deferred)
  &lt;span class="pl-c1"&gt;:commands&lt;/span&gt; (lsp lsp-deferred))&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content-docker" class="anchor" aria-hidden="true" href="#docker"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Docker&lt;/h4&gt;
&lt;p&gt;Refer to &lt;a href="https://github.com/emacs-lsp/lsp-docker/"&gt;lsp-docker&lt;/a&gt; README which provide a guide how you can run &lt;code&gt;lsp-mode&lt;/code&gt; in &lt;code&gt;docker&lt;/code&gt; container.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-how-does-it-work" class="anchor" aria-hidden="true" href="#how-does-it-work"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;How does it work?&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;lsp-mode&lt;/code&gt; has predefined list of server configurations (loaded in &lt;code&gt;lsp-clients.el&lt;/code&gt;) containing a mapping from &lt;code&gt;major-mode&lt;/code&gt; to the server configuration or by using activation function. In addition to the default server configuration located in &lt;code&gt;lsp-clients.el&lt;/code&gt; there are few languages servers which require separate package(check &lt;a href="#supported-languages"&gt;Supported languages&lt;/a&gt;). When you open a file from a particular project &lt;code&gt;lsp-mode&lt;/code&gt; and call &lt;code&gt;lsp&lt;/code&gt; command &lt;code&gt;lsp-mode&lt;/code&gt; will look for server registrations able to handle current file. If there is such client &lt;code&gt;lsp-mode&lt;/code&gt; will look for the project root. If you open a file from the project for the first time you will be prompted to define the current project root. Once the project root is selected it is saved in &lt;code&gt;lsp-session&lt;/code&gt; file and it will be loaded the next time you start Emacs so you no longer will be asked for a project root when you open a file from that project. Later if you want to change the project root you may use &lt;code&gt;lsp-workspace-folder-remove&lt;/code&gt; to remove the project and call &lt;code&gt;lsp-workspace-folder-add&lt;/code&gt; to add the root. If you want to force starting a particular language server in a file you may use &lt;code&gt;C-u&lt;/code&gt; &lt;code&gt;M-x&lt;/code&gt; &lt;code&gt;lsp&lt;/code&gt; which will prompt you to select language server to start.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-supported-languages" class="anchor" aria-hidden="true" href="#supported-languages"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Supported languages&lt;/h2&gt;
&lt;p&gt;Some of the servers are directly supported by &lt;code&gt;lsp-mode&lt;/code&gt; by requiring
  &lt;code&gt;lsp-clients.el&lt;/code&gt; while others require installing additional packages which provide
  server specific functionality.&lt;/p&gt;
&lt;table&gt;
  &lt;tbody&gt;&lt;tr&gt;&lt;th&gt;Language&lt;/th&gt;&lt;th&gt;Language Server&lt;/th&gt;&lt;th&gt;Built-in&lt;/th&gt;&lt;th&gt;Installation command&lt;/th&gt;&lt;th&gt;Debugger&lt;/th&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Ada&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/AdaCore/ada_language_server"&gt;ada_language_server&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/AdaCore/ada_language_server#install"&gt;Installation instructions&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes (gdb)&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Angular&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/angular/vscode-ng-language-service/"&gt;vscode-ng-language-service&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/emacs-lsp/lsp-mode/wiki/Install-Angular-Language-server"&gt;Installation instructions&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Not relevant&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Bash&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/mads-hartmann/bash-language-server"&gt;bash-language-server&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;npm i -g bash-language-server&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;C++&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/MaskRay/ccls"&gt;ccls&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/MaskRay/emacs-ccls"&gt;emacs-ccls&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/MaskRay/ccls"&gt;ccls&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes (gdb or lldb)&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;C++&lt;/td&gt;&lt;td&gt;&lt;a href="https://clang.llvm.org/extra/clangd.html" rel="nofollow"&gt;clangd&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://clang.llvm.org/extra/clangd.html" rel="nofollow"&gt;clangd&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes (gdb or lldb)&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;C++&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/cquery-project/cquery"&gt;cquery&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/cquery-project/emacs-cquery"&gt;emacs-cquery&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/cquery-project/cquery"&gt;cquery&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes (gdb or lldb)&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;C#&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/OmniSharp/omnisharp-roslyn"&gt;OmniSharp-Roslyn&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/OmniSharp/omnisharp-roslyn"&gt;OmniSharp-Roslyn&lt;/a&gt;&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Clojure&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/snoe/clojure-lsp"&gt;clojure-lsp&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/snoe/clojure-lsp"&gt;clojure-lsp&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Crystal&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/crystal-lang-tools/scry"&gt;scry&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/crystal-lang-tools/scry"&gt;scry&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;CSS/LessCSS/SASS/SCSS&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/vscode-langservers/vscode-css-languageserver-bin"&gt;css&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;npm install -g vscode-css-languageserver-bin&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Dart&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/dart-lang/sdk/blob/master/pkg/analysis_server/tool/lsp_spec/README.md"&gt;dart_analysis_server&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;built into dart-sdk&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Dockerfile&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/rcjsuen/dockerfile-language-server-nodejs"&gt;dockerfile-language-server-nodejs&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;npm install -g dockerfile-language-server-nodejs&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Dart&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/natebosch/dart_language_server"&gt;dart_language_server&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;pub global activate dart_language_server&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Elixir&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/JakeBecker/elixir-ls"&gt;elixir-ls&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/JakeBecker/elixir-ls"&gt;elixir-ls&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Elm&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/elm-tooling/elm-language-server"&gt;elmLS&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;npm i -g @elm-tooling/elm-language-server, or clone the repository and follow installation instructions&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Erlang&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/erlang-ls/erlang_ls"&gt;erlang_ls&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/erlang-ls/erlang_ls"&gt;erlang_ls&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Eslint&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/Microsoft/vscode-eslint"&gt;eslint&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/emacs-lsp/lsp-mode/wiki/LSP-ESlint-integration"&gt;LSP ESLint Guide&lt;/a&gt;&lt;/td&gt;&lt;td&gt;N/A&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;F#&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/fsharp/FsAutoComplete"&gt;fsautocomplete&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Automatic by &lt;a href="https://github.com/emacs-lsp/lsp-mode/blob/master/lsp-fsharp.el"&gt;lsp-fsharp&lt;/a&gt;&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Fortran&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/hansec/fortran-language-server"&gt;fortran-language-server&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;pip install fortran-language-server&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Go&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/golang/tools/tree/master/gopls"&gt;gopls&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;code&gt;go get golang.org/x/tools/gopls@latest&lt;/code&gt; &lt;a href="https://github.com/golang/tools/blob/master/gopls/doc/user.md#installation"&gt;docs&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Go&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/saibing/bingo"&gt;bingo&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/saibing/bingo/wiki/Install"&gt;bingo&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Groovy&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/palantir/language-servers"&gt;groovy-language-server&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/palantir/language-servers"&gt;groovy-language-server&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Hack&lt;/td&gt;&lt;td&gt;&lt;a href="https://docs.hhvm.com/hhvm/" rel="nofollow"&gt;hhvm&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://docs.hhvm.com/hhvm/installation/introduction" rel="nofollow"&gt;hhvm&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;HTML&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/vscode-langservers/vscode-html-languageserver"&gt;html&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;npm install -g vscode-html-languageserver-bin&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Haskell&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/haskell/haskell-ide-engine"&gt;IDE engine&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/emacs-lsp/lsp-haskell"&gt;lsp-haskell&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/haskell/haskell-ide-engine"&gt;IDE engine&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Lua&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/EmmyLua/EmmyLua-LanguageServer"&gt;EmmyLua&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/emacs-lsp/lsp-mode/wiki/Install-EmmyLua-Language-server"&gt;Installation&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Java&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/eclipse/eclipse.jdt.ls"&gt;Eclipse JDT LS&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/emacs-lsp/lsp-java"&gt;lsp-java&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Automatic by &lt;a href="https://github.com/emacs-lsp/lsp-java"&gt;lsp-java&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;JavaScript/TypeScript&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/theia-ide/typescript-language-server"&gt;typescript-language-server&lt;/a&gt;  (recommended)&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;npm i -g typescript-language-server; npm i -g typescript&lt;/td&gt;&lt;td&gt;Yes (Firefox/Chrome)&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;JavaScript/TypeScript&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/sourcegraph/javascript-typescript-langserver"&gt;javascript-typescript-stdio&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;npm i -g javascript-typescript-langserver&lt;/td&gt;&lt;td&gt;Yes (Firefox/Chrome)&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;JavaScript Flow&lt;/td&gt;&lt;td&gt;&lt;a href="https://flow.org" rel="nofollow"&gt;flow&lt;/a&gt; (add-on if working on a Flow file)&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://flow.org" rel="nofollow"&gt;flow&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes (Firefox/Chrome)&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Json&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/vscode-langservers/vscode-json-languageserver"&gt;vscode-json-languageserver&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Automatic or manual by &lt;code&gt;npm i -g vscode-json-languageserver&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Julia&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/non-Jedi/lsp-julia"&gt;lsp-julia&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/non-Jedi/lsp-julia"&gt;lsp-julia&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/JuliaEditorSupport/LanguageServer.jl"&gt;LanguageServer.jl&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Kotlin&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/fwcd/KotlinLanguageServer"&gt;kotlin-language-server&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/fwcd/KotlinLanguageServer"&gt;kotlin-language-server&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;OCaml&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/ocaml-lsp/ocaml-language-server"&gt;ocaml-language-server&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/ocaml-lsp/ocaml-language-server"&gt;ocaml-language-server&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;OCaml&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/ocaml/ocaml-lsp"&gt;ocaml-lsp-server&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/ocaml/ocaml-lsp"&gt;ocaml-lsp-server&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;PHP(recommended)&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/bmewburn/vscode-intelephense"&gt;intelephense&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;npm i intelephense -g&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;PHP&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/felixfbecker/php-language-server"&gt;php-language-server&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/felixfbecker/php-language-server"&gt;php-language-server&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Powershell&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/PowerShell/PowerShellEditorServices"&gt;PowerShellEditorServices&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Automatic&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Python&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/palantir/python-language-server"&gt;pyls&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;pip install ‘python-language-server[all]’&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Python(Microsoft)&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/Microsoft/python-language-server"&gt;Microsoft Python Language Server&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/emacs-lsp/lsp-python-ms"&gt;lsp-python-ms&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/emacs-lsp/lsp-python-ms"&gt;lsp-python-ms&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;R&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/REditorSupport/languageserver"&gt;languageserver&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;install.packages(“languageserver”)&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Ruby&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/castwide/solargraph"&gt;solargraph&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;gem install solargraph&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Rust&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/rust-lang/rls"&gt;rls&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/rust-lang/rls"&gt;rls&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Rust&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/rust-analyzer/rust-analyzer"&gt;rust-analyzer&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/rust-analyzer/rust-analyzer#language-server-quick-start"&gt;rust-analyzer&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Scala&lt;/td&gt;&lt;td&gt;&lt;a href="https://scalameta.org/metals" rel="nofollow"&gt;Metals&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://scalameta.org/metals/docs/editors/emacs.html" rel="nofollow"&gt;Metals&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Swift&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/apple/sourcekit-lsp"&gt;sourcekit-LSP&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/emacs-lsp/lsp-sourcekit"&gt;lsp-sourcekit&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/apple/sourcekit-lsp"&gt;sourcekit-LSP&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes (via llvm debug adapter)&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Terraform&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/juliosueiras/terraform-lsp"&gt;terraform-lsp&lt;/a&gt;&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;Git clone outside of &lt;code&gt;$GOPATH&lt;/code&gt;; go install. (Requires go &amp;gt; 1.11)&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;TeX, LaTeX, etc.&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/astoff/digestif"&gt;Digestif&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;luarocks install –server=&lt;a href="http://luarocks.org/dev" rel="nofollow"&gt;http://luarocks.org/dev&lt;/a&gt; digestif&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Verilog/SystemVerilog&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/suoto/hdl_checker"&gt;hdl_checker&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;pip install hdl-checker –upgrade&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;VHDL&lt;/td&gt;&lt;td&gt;&lt;a href="http://www.vhdltool.com" rel="nofollow"&gt;VHDL Tool&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Download from &lt;a href="http://www.vhdltool.com/download" rel="nofollow"&gt;http://www.vhdltool.com/download&lt;/a&gt;&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Vimscript&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/iamcco/vim-language-server"&gt;vim-language-server&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;npm install -g vim-language-server&lt;/td&gt;&lt;td&gt;n/a&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Vue&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/vuejs/vetur/tree/master/server"&gt;vue-language-server&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;npm install -g vue-language-server&lt;/td&gt;&lt;td&gt;Yes (Firefox/Chrome)&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;XML&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/angelozerr/lsp4xml"&gt;lsp4xml&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Download from &lt;a href="https://github.com/angelozerr/lsp4xml/releases"&gt;lsp4xml releases&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;YAML&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/redhat-developer/yaml-language-server"&gt;yaml&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;npm install -g yaml-language-server&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2&gt;&lt;a id="user-content-commands" class="anchor" aria-hidden="true" href="#commands"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Commands&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;lsp-describe-session&lt;/code&gt; - Display session folders and running servers.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-describe-thing-at-point&lt;/code&gt; - Display help for the thing at point.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-execute-code-action&lt;/code&gt; - Execute code action&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-format-buffer&lt;/code&gt; - Format current buffer&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-organize-imports&lt;/code&gt; - Organize library imports&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-goto-implementation&lt;/code&gt; - Go to implementation&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-goto-type-definition&lt;/code&gt; - Go to type definition&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-rename&lt;/code&gt; - Rename symbol at point&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-restart-workspace&lt;/code&gt; - Restart project&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-symbol-highlight&lt;/code&gt; - Highlight all relevant references to the symbol under point.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-workspace-folders-add&lt;/code&gt; - Add workspace folder&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-workspace-folders-remove&lt;/code&gt; - Remove workspace folder&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-workspace-folders-open&lt;/code&gt; - Open a project directory in dired&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;imenu&lt;/code&gt; or &lt;code&gt;helm-imenu&lt;/code&gt; - display document structure.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;completion-at-point&lt;/code&gt; - display completion using built-in emacs &lt;code&gt;completion-at-point&lt;/code&gt; framework.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-find-definition&lt;/code&gt; - to find the definition for the symbol under point.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-find-references&lt;/code&gt; - Find references for the symbol under point.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-disconnect&lt;/code&gt; - Disconnect the buffer from the language server.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-lens-show&lt;/code&gt; - Show lenses in the current file&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-lens-hide&lt;/code&gt; - Hide lenses in the current file&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-lens-mode&lt;/code&gt;  - Turn on/off lenses in the current file.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-avy-lens&lt;/code&gt; - Click lens using &lt;code&gt;avy&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-signature-activate&lt;/code&gt; - activate signature help. Bound to &lt;code&gt;C-S-SPC&lt;/code&gt; by default.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-signature-next&lt;/code&gt; - show next signature. Bound to &lt;code&gt;M-n&lt;/code&gt; when signature help is activated.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-signature-previous&lt;/code&gt; - show previous signature. Bound to &lt;code&gt;M-p&lt;/code&gt; when signature help is activated.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-signature-stop&lt;/code&gt; - cancel signature help. Bound to &lt;code&gt;C-c C-k&lt;/code&gt; when signature help is activated.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-settings" class="anchor" aria-hidden="true" href="#settings"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Settings&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;lsp-log-io&lt;/code&gt; - If non-nil, print all messages to and from the language server to &lt;code&gt;*lsp-log*&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-print-performance&lt;/code&gt; - If non-nil, print performance info. to &lt;code&gt;*lsp-log*&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-inhibit-message&lt;/code&gt; - If non-nil, inhibit the message echo via &lt;code&gt;inhibit-message&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-report-if-no-buffer&lt;/code&gt; - If non nil the errors will be reported even when the file is not open.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-keep-workspace-alive&lt;/code&gt; - If non nil keep workspace alive when the last workspace buffer is closed.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-enable-snippet&lt;/code&gt; - Enable/disable snippet completion support.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-auto-guess-root&lt;/code&gt; - Automatically guess the project root using projectile/project. Do &lt;b&gt;not&lt;/b&gt; use this setting unless you are familiar with &lt;code&gt;lsp-mode&lt;/code&gt; internals and you are sure that all of your projects are following &lt;code&gt;projectile=/=project.el&lt;/code&gt; conventions.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-restart&lt;/code&gt; - Defines how server exited event must be handled.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-session-file&lt;/code&gt; - File where session information is stored.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-auto-configure&lt;/code&gt; - Auto configure &lt;code&gt;lsp-mode&lt;/code&gt;. When set to t &lt;code&gt;lsp-mode&lt;/code&gt; will auto-configure &lt;code&gt;lsp-ui&lt;/code&gt; and &lt;code&gt;company-lsp&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-document-sync-method&lt;/code&gt; - How to sync the document with the language server.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-auto-execute-action&lt;/code&gt; - Auto-execute single action.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-eldoc-render-all&lt;/code&gt; - Display all of the info returned by &lt;code&gt;document/onHover&lt;/code&gt;. If this is nil, &lt;code&gt;eldoc&lt;/code&gt; will show only the symbol information.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-enable-completion-at-point&lt;/code&gt; - Enable &lt;code&gt;completion-at-point&lt;/code&gt; integration.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-enable-xref&lt;/code&gt; - Enable xref integration.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-prefer-flymake&lt;/code&gt; - If you prefer flycheck and &lt;code&gt;lsp-ui-flycheck&lt;/code&gt; is available, &lt;code&gt;(setq lsp-prefer-flymake nil)&lt;/code&gt;. If set to &lt;code&gt;:none&lt;/code&gt; neither of two will be enabled.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-enable-indentation&lt;/code&gt; - Indent regions using the file formatting functionality provided by the language server.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-enable-on-type-formatting&lt;/code&gt; - Enable &lt;code&gt;textDocument/onTypeFormatting&lt;/code&gt; integration.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-before-save-edits&lt;/code&gt; - If non-nil, &lt;code&gt;lsp-mode&lt;/code&gt; will apply edits suggested by the language server before saving a document.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-imenu-show-container-name&lt;/code&gt; - Display the symbol’s container name in an imenu entry.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-imenu-container-name-separator&lt;/code&gt; - Separator string to use to separate the container name from the symbol while displaying imenu entries.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-imenu-sort-methods&lt;/code&gt; - How to sort the imenu items. The value is a list of &lt;code&gt;kind&lt;/code&gt;, &lt;code&gt;name&lt;/code&gt; or &lt;code&gt;position&lt;/code&gt;. Priorities are determined by the index of the element.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-response-timeout&lt;/code&gt; - Number of seconds to wait for a response from the language server before timing out.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-enable-file-watchers&lt;/code&gt; - If non-nil lsp-mode will watch the files in the workspace if the server has requested that.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-server-trace&lt;/code&gt; - Request trace mode on the language server.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-enable-semantic-highlighting&lt;/code&gt; - Enable experimental semantic highlighting support&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-enable-imenu&lt;/code&gt; - If non-nil, automatically enable imenu integration when server provides &lt;code&gt;textDocument/documentSymbol&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-signature-auto-activate&lt;/code&gt; - Auto activate signature when trigger char is pressed.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-signature-render-documentation&lt;/code&gt; - Include signature documentation in signature help.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-enable-text-document-color&lt;/code&gt; - Enable &lt;code&gt;textDocument/documentColor&lt;/code&gt; when server supports it.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-screenshots" class="anchor" aria-hidden="true" href="#screenshots"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Screenshots&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;RUST Completion with company-lsp
    &lt;a target="_blank" rel="noopener noreferrer" href="examples/completion.png"&gt;&lt;img src="examples/completion.png" alt="examples/completion.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Typescript references using lsp-ui
    &lt;a target="_blank" rel="noopener noreferrer" href="examples/references.png"&gt;&lt;img src="examples/references.png" alt="examples/references.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Debugging Python using dap-mode
    &lt;a target="_blank" rel="noopener noreferrer" href="examples/python_debugging.png"&gt;&lt;img src="examples/python_debugging.png" alt="examples/python_debugging.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Call hierarchy via ccls
    &lt;a target="_blank" rel="noopener noreferrer" href="examples/call-hierarchy-ccls.png"&gt;&lt;img src="examples/call-hierarchy-ccls.png" alt="examples/call-hierarchy-ccls.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Metals Doctor
    &lt;a target="_blank" rel="noopener noreferrer" href="examples/metals-doctor.png"&gt;&lt;img src="examples/metals-doctor.png" alt="examples/metals-doctor.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Semantic highlighting as provided by clangd (built from unreleased 10.0 branch). In this screenshot, all other font-locking has been disabled (hence no syntax highlighting of comments or basic keywords such as &lt;code&gt;auto&lt;/code&gt;)
    &lt;a target="_blank" rel="noopener noreferrer" href="examples/clangd_semantic_highlighting.png"&gt;&lt;img src="examples/clangd_semantic_highlighting.png" alt="examples/clangd_semantic_highlighting.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-extensions" class="anchor" aria-hidden="true" href="#extensions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Extensions&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-tramp" class="anchor" aria-hidden="true" href="#tramp"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TRAMP&lt;/h3&gt;
&lt;p&gt;LSP mode has support for tramp buffers with the following requirements:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The language server has to be present on the remote server.&lt;/li&gt;
  &lt;li&gt;Having multi folder language server (like &lt;a href="https://github.com/eclipse/eclipse.jdt.ls"&gt;Eclipse JDT LS&lt;/a&gt;) cannot have local and remote workspace folders.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a id="user-content-how-does-it-work-1" class="anchor" aria-hidden="true" href="#how-does-it-work-1"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;How does it work?&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;lsp-mode&lt;/code&gt; detects whether a particular file is located on remote machine and looks for a client which matches current file and it is marked as &lt;code&gt;:remote?&lt;/code&gt; t. Then &lt;code&gt;lsp-mode&lt;/code&gt; starts the client through tramp.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-sample-configuration" class="anchor" aria-hidden="true" href="#sample-configuration"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Sample configuration&lt;/h4&gt;
&lt;p&gt;Here it is example how you can configure python language server to work when using &lt;code&gt;TRAMP&lt;/code&gt;. Note that if you are trying to convert existing language server configuration you should copy all of it’s properties(e. g. &lt;code&gt;:request-handlers&lt;/code&gt;, &lt;code&gt;activation-fn&lt;/code&gt;, etc).&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(lsp-register-client
 (make-lsp-client &lt;span class="pl-c1"&gt;:new-connection&lt;/span&gt; (lsp-tramp-connection &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;binary-or-full-path&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
                  &lt;span class="pl-c1"&gt;:major-modes&lt;/span&gt; '(&lt;span class="pl-c1"&gt;python-mode&lt;/span&gt;)
                  &lt;span class="pl-c1"&gt;:remote?&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;
                  &lt;span class="pl-c1"&gt;:server-id&lt;/span&gt; &lt;span class="pl-c1"&gt;'pyls-remote&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content-dealing-with-stderr" class="anchor" aria-hidden="true" href="#dealing-with-stderr"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Dealing with stderr&lt;/h4&gt;
&lt;p&gt;With TRAMP, Emacs does not have an easy way to distinguish stdout and stderr, so when the underlying LSP process writes to stderr, it breaks the &lt;code&gt;lsp-mode&lt;/code&gt; parser. As a workaround, &lt;code&gt;lsp-mode&lt;/code&gt; is redirecting stderr to &lt;code&gt;/tmp/&amp;lt;process-name&amp;gt;-&amp;lt;id&amp;gt;~stderr&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-limitations" class="anchor" aria-hidden="true" href="#limitations"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Limitations&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-file-watches" class="anchor" aria-hidden="true" href="#file-watches"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;File watches&lt;/h3&gt;
&lt;p&gt;When some of the workspaces that are active in the current project requests file notifications via &lt;code&gt;workspace/didChangeWatchedFiles&lt;/code&gt; &lt;code&gt;lsp-mode&lt;/code&gt; will start monitoring each of the folders in the workspace for changes. In case your project contains a lot of files you might want to disable file monitoring via &lt;code&gt;lsp-enable-file-watchers&lt;/code&gt; (you may use dir-locals).&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-contributions" class="anchor" aria-hidden="true" href="#contributions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contributions&lt;/h2&gt;
&lt;p&gt;Contributions are very much welcome.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-members" class="anchor" aria-hidden="true" href="#members"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Members&lt;/h3&gt;
&lt;p&gt;Here it is a list of the current &lt;code&gt;lsp-mode&lt;/code&gt; members and what they are primary working on/responsible for.&lt;/p&gt;
&lt;table&gt;
  &lt;tbody&gt;&lt;tr&gt;&lt;th&gt;Member&lt;/th&gt;&lt;th&gt;Responsible for:&lt;/th&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;a href="https://github.com/TOTBWF"&gt;TOTBWF&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;F#&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;a href="https://github.com/brotzeit"&gt;brotzeit&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;Rust&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;a href="https://github.com/dsyzling"&gt;dsyzling&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;Scala&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;a href="https://github.com/kurnevsky"&gt;kurnevsky&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;Scala&lt;/code&gt; &amp;amp; &lt;code&gt;Rust&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;a href="https://github.com/seagle0128"&gt;seagle0128&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;Go&lt;/code&gt; &amp;amp; &lt;code&gt;MS Python Language Server&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;a href="https://github.com/sebastiansturm"&gt;sebastiansturm&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;lsp-mode&lt;/code&gt; core &amp;amp; &lt;code&gt;C++&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;a href="https://github.com/vibhavp"&gt;vibhavp&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;lsp-mode&lt;/code&gt; core&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;a href="https://github.com/yyoncho"&gt;yyoncho&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;lsp-mode&lt;/code&gt; core and &lt;code&gt;Java&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2&gt;&lt;a id="user-content-troubleshooting" class="anchor" aria-hidden="true" href="#troubleshooting"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Troubleshooting&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;set &lt;code&gt;lsp-log-io&lt;/code&gt; to &lt;code&gt;t&lt;/code&gt; to inspect communication between client and the server. Use &lt;code&gt;lsp-workspace-show-log&lt;/code&gt; to switch to the corresponding log buffer.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-describe-session&lt;/code&gt; will show the current projects roots + the started severs and allows inspecting the server capabilities.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="examples/describe.png"&gt;&lt;img src="examples/describe.png" alt="examples/describe.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-adding-support-for-languages" class="anchor" aria-hidden="true" href="#adding-support-for-languages"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Adding support for languages&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-registering-server" class="anchor" aria-hidden="true" href="#registering-server"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Registering server&lt;/h3&gt;
&lt;p&gt;Here it is the minimal configuration that is needed for new language server registration. Refer to the documentation of &lt;code&gt;lsp-client.el&lt;/code&gt; for the additional settings supported on registration time. &lt;code&gt;lsp-language-id-configuration&lt;/code&gt; must be updated to contain the corresponding mode -&amp;gt; language id - in this case &lt;code&gt;(python-mode . "python")&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;defvar&lt;/span&gt; &lt;span class="pl-en"&gt;lsp-language-id-configuration&lt;/span&gt;
  '(...
   (&lt;span class="pl-c1"&gt;python-mode&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;python&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
   ...))
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; if you are adding the support for your language server in separate repo use&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; (add-to-list 'lsp-language-id-configuration '(python-mode . "python"))&lt;/span&gt;

(lsp-register-client
 (make-lsp-client &lt;span class="pl-c1"&gt;:new-connection&lt;/span&gt; (lsp-stdio-connection &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;pyls&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
                  &lt;span class="pl-c1"&gt;:major-modes&lt;/span&gt; '(&lt;span class="pl-c1"&gt;python-mode&lt;/span&gt;)
                  &lt;span class="pl-c1"&gt;:server-id&lt;/span&gt; &lt;span class="pl-c1"&gt;'pyls&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If the language server supports environment variables to control additional behavior, you can register that by using the &lt;code&gt;:environment-fn&lt;/code&gt; function, like the Bash language client does:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(lsp-register-client
 (make-lsp-client &lt;span class="pl-c1"&gt;:new-connection&lt;/span&gt; (lsp-stdio-connection '(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;bash-language-server&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;start&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
                  &lt;span class="pl-c1"&gt;:major-modes&lt;/span&gt; '(&lt;span class="pl-c1"&gt;sh-mode&lt;/span&gt;)
                  &lt;span class="pl-c1"&gt;:priority&lt;/span&gt; &lt;span class="pl-c1"&gt;-1&lt;/span&gt;
                  &lt;span class="pl-c1"&gt;:environment-fn&lt;/span&gt; (&lt;span class="pl-k"&gt;lambda&lt;/span&gt; ()
                                    ((&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;EXPLAINSHELL_ENDPOINT&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; lsp-bash-explainshell-endpoint)
                                     (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;HIGHLIGHT_PARSING_ERRORS&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; lsp-bash-highlight-parsing-errors)))
                  &lt;span class="pl-c1"&gt;:server-id&lt;/span&gt; &lt;span class="pl-c1"&gt;'bash-ls&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;lsp-bash-explainshell-endpoint&lt;/code&gt; and &lt;code&gt;lsp-bash-highlight-parsing-errors&lt;/code&gt; are language client &lt;code&gt;defcustom&lt;/code&gt; that expose supported server environment settings in a type-safe way. If you change any of those variables, restart the language server with &lt;code&gt;lsp-restart-workspace&lt;/code&gt; for the changes to be applied.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-sections" class="anchor" aria-hidden="true" href="#sections"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Sections&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;lsp-mode&lt;/code&gt; provides tools to bridge emacs &lt;code&gt;defcustom&lt;/code&gt; as a language configuration sections properties(see &lt;a href="https://microsoft.github.io/language-server-protocol/specification#workspace_configuration" rel="nofollow"&gt;specification workspace/configuration&lt;/a&gt;). In addition you may use &lt;code&gt;lsp-generate-settings&lt;/code&gt; from &lt;a href="https://github.com/emacs-lsp/lsp-mode/blob/master/scripts/lsp-generate-settings.el"&gt;Generate Settings script&lt;/a&gt; to generate &lt;code&gt;defcustom&lt;/code&gt; from &lt;code&gt;package.json&lt;/code&gt; VScode plugin manifest. Example:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;defcustom&lt;/span&gt; &lt;span class="pl-en"&gt;lsp-foo-language-server-property&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;bar&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Demo property.&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:group&lt;/span&gt; &lt;span class="pl-c1"&gt;'foo-ls&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:risky&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;)

(lsp-register-custom-settings '((&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;foo.section.property&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; lsp-foo-language-server-property)))

(lsp-configuration-section  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;foo&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt;  (("foo" ("settings" ("property" . "bar"))))&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-faq" class="anchor" aria-hidden="true" href="#faq"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;FAQ&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;How do I troubleshoot “Server FOO-LS:pid exited with status signal. Do you want to restart it? (y or n)”?
    &lt;ul&gt;
      &lt;li&gt;This message indicates that the language server has crashed for some
        reason. You may check the server stderr which is &lt;code&gt;*FOO-LS::stderr*&lt;/code&gt;. If
        you get this message on startup you may try to run the exact command that
        &lt;code&gt;lsp-mode&lt;/code&gt; is running in the terminal. You may find it in &lt;code&gt;*lsp-log*&lt;/code&gt;
        buffer.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;How to configure a server with local variables?
    &lt;ul&gt;
      &lt;li&gt;Add &lt;code&gt;lsp&lt;/code&gt; server call to &lt;code&gt;hack-local-variables-hook&lt;/code&gt; which runs right after the local variables are loaded.
        &lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;add-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;'hack-local-variables-hook&lt;/span&gt;
          (&lt;span class="pl-k"&gt;lambda&lt;/span&gt; () (&lt;span class="pl-k"&gt;when&lt;/span&gt; (&lt;span class="pl-c1"&gt;derived-mode-p&lt;/span&gt; &lt;span class="pl-c1"&gt;'XXX-mode&lt;/span&gt;) (lsp))))
        &lt;/pre&gt;&lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;I have multiple language servers registered for language FOO. Which one will be used when opening a project?
    &lt;ul&gt;
      &lt;li&gt;The one with highest priority wins. &lt;code&gt;lsp-clients.el&lt;/code&gt; predefined servers have
        priority -1, lower than external packages (priority 0 if unspecified). If a
        server is registered with &lt;code&gt;:add-on?&lt;/code&gt; flag set to &lt;code&gt;t&lt;/code&gt; it will be started in
        parallel to the other servers that are registered for the current mode.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;I have multiple language servers for language &lt;code&gt;FOO&lt;/code&gt; and I want to select the server per project, what can I do?
    &lt;ul&gt;
      &lt;li&gt;You may create &lt;code&gt;dir-local&lt;/code&gt; for each of the projects and specify list of
        &lt;code&gt;lsp-enabled-clients&lt;/code&gt;. This will narrow the list of the clients that are
        going to be tested for the project.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The completion does not work fine and inserts arguments and placeholders, what I am doing wrong?
    &lt;ul&gt;
      &lt;li&gt;Snippet support works only with &lt;code&gt;company-lsp&lt;/code&gt; so if you are using
        &lt;code&gt;completion-at-point&lt;/code&gt; the snippets won’t be expanded and you should
        either disable them by setting &lt;code&gt;lsp-enable-snippet&lt;/code&gt; to &lt;code&gt;nil&lt;/code&gt; or you
        should switch to &lt;code&gt;company-lsp&lt;/code&gt;. Note also that &lt;code&gt;company-tng&lt;/code&gt; frontend
        does not support snippet expansion(see &lt;a href="https://github.com/company-mode/company-mode/issues/891"&gt;company-mode#891&lt;/a&gt;)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;How to automatically follow &lt;code&gt;lsp-ui-log&lt;/code&gt;?
    &lt;ul&gt;
      &lt;li&gt;Go into the log buffer and execute the following snippet(source: &lt;a href="https://stackoverflow.com/questions/12663061/emacs-auto-scrolling-log-buffer" rel="nofollow"&gt;Emacs auto scrolling log buffer&lt;/a&gt;)&lt;/li&gt;
    &lt;/ul&gt;
    &lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;set&lt;/span&gt; (&lt;span class="pl-c1"&gt;make-local-variable&lt;/span&gt; &lt;span class="pl-c1"&gt;'window-point-insertion-type&lt;/span&gt;) &lt;span class="pl-c1"&gt;t&lt;/span&gt;)
    &lt;/pre&gt;&lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;I am getting “Package ‘spinner-1.7.3’ is unavailable” when trying to install &lt;code&gt;lsp-mode&lt;/code&gt;.
    &lt;ul&gt;
      &lt;li&gt;This is caused by GPG keys used by the ELPA package manager not being up
        to date. You may fix by installing: &lt;a href="https://elpa.gnu.org/packages/gnu-elpa-keyring-update.html" rel="nofollow"&gt;gnu-elpa-keyring-update&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Json completion doesn’t seem working?
    &lt;ul&gt;
      &lt;li&gt;The latest &lt;a href="https://www.npmjs.com/package/vscode-json-languageserver/v/1.2.2" rel="nofollow"&gt;vscode-json-languageserver&lt;/a&gt; is broken. You will need to install the earlier version of it &lt;code&gt;npm i vscode-json-languageserver@1.2.1&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-see-also" class="anchor" aria-hidden="true" href="#see-also"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;See also&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://github.com/emacs-lsp/lsp-docker/"&gt;lsp-docker&lt;/a&gt; - provide docker image with preconfigured language servers with corresponding emacs configuration.&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/sebastiencs/company-box/"&gt;company-box&lt;/a&gt; - &lt;code&gt;company&lt;/code&gt; frontend with icons.&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/emacs-lsp/dap-mode"&gt;dap-mode&lt;/a&gt; - Debugger integration for &lt;code&gt;lsp-mode&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/joaotavora/eglot"&gt;eglot&lt;/a&gt; - An alternative minimal LSP implementation.&lt;/li&gt;
&lt;/ul&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>emacs-lsp</author><guid isPermaLink="false">https://github.com/emacs-lsp/lsp-mode</guid><pubDate>Sun, 05 Jan 2020 00:02:00 GMT</pubDate></item><item><title>alhassy/emacs.d #3 in Emacs Lisp, Today</title><link>https://github.com/alhassy/emacs.d</link><description>&lt;p&gt;&lt;i&gt;My Emacs configuration, literately :smile:&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="org" data-path="README.org"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-a-life-configuring-emacs" class="anchor" aria-hidden="true" href="#a-life-configuring-emacs"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;A Life Configuring Emacs&lt;/h1&gt;
&lt;p align="center"&gt; &lt;a target="_blank" rel="noopener noreferrer" href="emacs-logo.png"&gt;&lt;img src="emacs-logo.png" width="150" height="150/" style="max-width:100%;"&gt;&lt;/a&gt; &lt;/p&gt; &lt;p align="center"&gt; &lt;a href="https://www.gnu.org/software/emacs/" rel="nofollow"&gt; &lt;img src="https://camo.githubusercontent.com/dd30510b121ba8e1611a9fc13e43a4206ec0ab66/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f474e55253230456d6163732d32362e312d6234386561642e7376673f7374796c653d706c6173746963" data-canonical-src="https://img.shields.io/badge/GNU%20Emacs-26.1-b48ead.svg?style=plastic" style="max-width:100%;"&gt;&lt;/a&gt; &lt;a href="https://orgmode.org/" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/d92675edf5c6cb0f49163272ebaf2577adf416a0/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6f72672d2d6d6f64652d392e332e312d3438396139662e7376673f7374796c653d706c6173746963" data-canonical-src="https://img.shields.io/badge/org--mode-9.3.1-489a9f.svg?style=plastic" style="max-width:100%;"&gt;&lt;/a&gt; &lt;/p&gt; &lt;p align="center"&gt; &lt;a target="_blank" rel="noopener noreferrer" href="emacs-birthday-present.png"&gt;&lt;img src="emacs-birthday-present.png" width="200" height="250/" style="max-width:100%;"&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;I enjoy reading others’ &lt;i&gt;literate&lt;/i&gt; configuration files and
  incorporating what I learn into my own. The result is a
  sufficiently well-documented and accessible read that yields
  a stylish and functional system (•̀ᴗ•́)و&lt;/p&gt;
&lt;p&gt;This &lt;code&gt;README.org&lt;/code&gt; has been automatically generated from my
  configuration and its contents below are accessible
  in (outdated) blog format, with &lt;i&gt;colour&lt;/i&gt;, or as colourful
  PDF, &lt;a href="https://alhassy.github.io/init/" rel="nofollow"&gt;here&lt;/a&gt;. Enjoy&lt;/p&gt;
&lt;p align="center"&gt;
&lt;/p&gt;&lt;div&gt;
  &lt;p&gt;&lt;b&gt;Abstract&lt;/b&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;Herein I document the configurations I utilise with &lt;a href="https://gnu.org/s/emacs" rel="nofollow"&gt;Emacs&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As a &lt;a href="https://www.offerzen.com/blog/literate-programming-empower-your-writing-with-emacs-org-mode" rel="nofollow"&gt;literate program&lt;/a&gt; file with &lt;a href="http://orgmode.org/" rel="nofollow"&gt;Org-mode&lt;/a&gt;, I am ensured optimal navigation
  through my ever growing configuration files, ease of usability and reference
  for peers, and, most importantly, better maintainability for myself!&lt;/p&gt;
&lt;p&gt;Dear reader, when encountering a foregin command &lt;code&gt;X&lt;/code&gt; I encourage you to execute
  &lt;code&gt;(describe-symbol 'X)&lt;/code&gt;, or press &lt;code&gt;C-h o&lt;/code&gt; with the cursor on &lt;code&gt;X&lt;/code&gt;.  An elementary Elisp
  Cheat Sheet can be found &lt;a href="https://github.com/alhassy/ElispCheatSheet"&gt;here&lt;/a&gt; and here is a 2-page 3-column &lt;a href="https://github.com/alhassy/emacs.d/blob/master/CheatSheet.pdf"&gt;Emacs Cheat Sheet&lt;/a&gt; of
  the bindings in &lt;code&gt;“this”&lt;/code&gt; configuration.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;C-h o&lt;/code&gt; ⇒ &lt;b&gt;What’s this thing?&lt;/b&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;C-h e&lt;/code&gt; ⇒ &lt;b&gt;What’d /Emacs/ do?&lt;/b&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;C-h l&lt;/code&gt; ⇒ &lt;b&gt;What’d /I/ do?&lt;/b&gt;&lt;/li&gt;
  &lt;li&gt;“I accidentally hit a key, which one and what did it do!?” ⇒ &lt;code&gt;C-h e&lt;/code&gt; and &lt;code&gt;C-h l&lt;/code&gt;,
    then use &lt;code&gt;C-h o&lt;/code&gt; to get more details on the action.
    ;-)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Finally, &lt;code&gt;C-h d&lt;/code&gt; asks nicely what ‘d’ocumentation you’re interested in.
  After providing a few keywords, the &lt;code&gt;apropos&lt;/code&gt; tool yields possible functions
  and variables that may accomplish my goal.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-table-of-contents" class="anchor" aria-hidden="true" href="#table-of-contents"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Table of Contents&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="#why-emacs"&gt;Why Emacs?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="#booting-up"&gt;Booting Up&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href="#emacs-vs-initorg"&gt;=~/.emacs= vs. =init.org=&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href="#adventure-time-honey-wheres-my-init"&gt;/Adventure time!/ “Honey, where’s my init?”&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href="#adventure-time-using-emacs-easy-customisation-interface"&gt;/Adventure time!/ Using Emacs’ Easy Customisation Interface&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href="#support-for-custom"&gt;Support for ‘Custom’&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href="#use-package----the-start-of-initel"&gt;=use-package= —The start of =init.el=&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#readme----from-initorg-to-initel"&gt;=README= —From &lt;code&gt;init.org&lt;/code&gt; to =init.el=&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href="#the-mymake-init-el-and-readme-function"&gt;The &lt;code&gt;my/make-init-el-and-README&lt;/code&gt; function&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href="#the-org-block-named-make-readme"&gt;The Org-block named =make-readme=&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href="#table-of-contents-for-org-vs-github"&gt;‘Table of Contents’ for Org vs. Github&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href="#alternate-approaches-to-generating-a-readme"&gt;Alternate approaches to generating a README&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href="#installing-emacs-packages-directly-from-source"&gt;Installing Emacs packages directly from source&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#magit----emacs-porcelain-interface-to-gitq"&gt;=magit= —Emacs’ porcelain interface to gitq&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#syncing-to-the-systems-path"&gt;Syncing to the System’s =$PATH=&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#installing-os-packages-and-automatically-keeping-my-system-up-to-data-from-within-emacs"&gt;Installing OS packages, and automatically keeping my system up to data, from within Emacs&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#being-at-the-helm----completion--narrowing-framework"&gt;“Being at the Helm” —Completion &amp;amp; Narrowing Framework&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#having-a-workspace-manager-in-emacs"&gt;Having a workspace manager in Emacs&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#excellent-pdf-viewer"&gt;Excellent PDF Viewer&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#who-am-i----using-gnus-for-gmail"&gt;Who am I? —Using Gnus for Gmail&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href="#prettifications"&gt;Prettifications&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href="#super-terse-tutorial"&gt;Super Terse Tutorial&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href="#capturing-mail-as-todonotes"&gt;Capturing Mail as Todo/Notes&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href="#auto-completing-mail-addresses"&gt;Auto-completing mail addresses&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href="#feeds-to-blogs"&gt;Feeds to Blogs&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href="#hydra-supply-a-prefix-only-once"&gt;Hydra: Supply a prefix only once&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#quickly-pop-up-a-terminal-run-a-command-close-it----and-zsh"&gt;Quickly pop-up a terminal, run a command, close it —and zsh&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#restarting-emacs----keeping-buffers-open-across-sessions"&gt;Restarting Emacs —Keeping buffers open across sessions?&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#automatic-backups"&gt;Automatic Backups&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#editor-documentation-with-contextual-information"&gt;Editor Documentation with Contextual Information&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href="#cosmetics"&gt;Cosmetics&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href="#startup-message-emacs--org-versions"&gt;Startup message: Emacs &amp;amp; Org versions&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#my-to-do-list-the-initial-buffer-when-emacs-opens-up"&gt;My to-do list: The initial buffer when Emacs opens up&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#exquisite-themes"&gt;Exquisite Themes&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#a-sleek--informative-mode-line"&gt;A sleek &amp;amp; informative mode line&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#never-lose-the-cursor"&gt;Never lose the cursor&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#dimming-unused-windows"&gt;Dimming Unused Windows&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#buffer-names-are-necessarily-injective"&gt;Buffer names are necessarily injective&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#flashing-when-something-goes-wrong----no-blinking"&gt;Flashing when something goes wrong —no blinking&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#hiding-scrollbar-tool-bar-and-menu"&gt;Hiding Scrollbar, tool bar, and menu&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#highlight--complete-parenthesis-pair-when-cursor-is-near--"&gt;Highlight &amp;amp; complete parenthesis pair when cursor is near ;-)&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#neotree-directory-tree-listing"&gt;Neotree: Directory Tree Listing&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#tabs"&gt;Tabs&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#window-resizing-using-the-golden-ratio"&gt;Window resizing using the golden ratio&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#persistent-scratch-buffer"&gt;Persistent Scratch Buffer&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href="#prose"&gt;Prose&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href="#fill-mode----word-wrapping"&gt;Fill-mode —Word Wrapping&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#word-completion"&gt;Word Completion&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#fix-spelling-as-you-type----thesaurus--dictionary-too"&gt;Fix spelling as you type —thesaurus &amp;amp; dictionary too!&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#touch-typing"&gt;Touch Typing&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#using-a-grammar--style-checker"&gt;Using a Grammar &amp;amp; Style Checker&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#lightweight-prose-proofchecking"&gt;Lightweight Prose Proofchecking&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#placeholder-text----for-learning--experimenting"&gt;Placeholder Text —For Learning &amp;amp; Experimenting&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#some-text-to-make-us-smile"&gt;Some text to make us smile&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#unicode-input-via-agda-input"&gt;Unicode Input via Agda Input&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#increasedecrease-text-size"&gt;Increase/decrease text size&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#moving-text-around"&gt;Moving Text Around&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#enabling-camelcase-aware-editing-operations"&gt;Enabling CamelCase Aware Editing Operations&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#mouse-editing-support"&gt;Mouse Editing Support&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#delete-selection-mode"&gt;Delete Selection Mode&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#m-np-word-at-point-navigation"&gt;~M-n,p~: Word-at-Point Navigation&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#letter-based-navigation"&gt;Letter-based Navigation&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#c-c-e-np-taking-a-tour-of-ones-edits"&gt;~C-c e n,p~: Taking a tour of one’s edits&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href="#org-mode-administrivia"&gt;Org-Mode Administrivia&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href="#executing-code-from-src-blocks"&gt;Executing code from &lt;code&gt;src&lt;/code&gt; blocks&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#high-speed-literate-programming"&gt;High Speed Literate Programming&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href="#manipulating-sections"&gt;Manipulating Sections&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href="#seamless-navigation-between-source-blocks"&gt;Seamless Navigation Between Source Blocks&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href="#modifying-return"&gt;Modifying ~&amp;lt;return&amp;gt;~&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href="#c-aek-and-yanking-of-sections"&gt;~C-a,e,k~ and Yanking of sections&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href="#hiding-emphasise-markers--inlining-images"&gt;Hiding Emphasise Markers &amp;amp; Inlining Images&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#org-emphasise-for-parts-of-words"&gt;Org-Emphasise for Parts of Words&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#show-off-screen-heading-at-the-top-of-the-window"&gt;Show off-screen heading at the top of the window&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#jumping-without-hassle"&gt;Jumping without hassle&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#folding-within-a-subtree"&gt;Folding within a subtree&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#making-block-delimiters-less-intrusive"&gt;Making Block Delimiters Less Intrusive&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#org-modes-𝒳-block-expansions"&gt;Org-mode’s &lt;code&gt;&amp;lt;𝒳&lt;/code&gt; Block Expansions&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href="#org-mode--pdf--html"&gt;Org-Mode ⇒ PDF &amp;amp; HTML&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href="#working-with-citations"&gt;Working with Citations&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#coloured-latex-using-minted"&gt;Coloured LaTeX using Minted&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#ensuring-useful-html-anchors"&gt;Ensuring Useful HTML Anchors&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#html-folded-drawers"&gt;HTML “Folded Drawers”&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#revealjs----the-html-presentation-framework"&gt;Reveal.JS – The HTML Presentation Framework&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href="#life-within-org-mode"&gt;Life within Org-mode&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href="#using-org-mode-as-a-day-planner"&gt;Using Org-Mode as a Day Planner&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href="#capturing-ideas--notes-without-interrupting-the-current-workflow"&gt;Capturing ideas &amp;amp; notes without interrupting the current workflow&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href="#step-1-when-new-tasks-come-up"&gt;Step 1: When new tasks come up&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href="#step-2-filing-your-tasks"&gt;Step 2: Filing your tasks&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href="#step-3-quickly-review-the-upcoming-week"&gt;Step 3: Quickly review the upcoming week&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href="#step-4-getting-ready-for-the-day"&gt;Step 4: Getting ready for the day&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href="#step-5-doing-the-work"&gt;Step 5: Doing the work&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href="#step-6-moving-a-task-toward-completion"&gt;Step 6: Moving a task toward completion&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href="#step-7-archiving-tasks"&gt;Step 7: Archiving Tasks&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href="#super-agenda"&gt;Super Agenda&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#automating-pomodoro----commit-for-only-25-minutes"&gt;Automating Pomodoro —“Commit for only 25 minutes!”&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#journaling"&gt;Journaling&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#workflow-states"&gt;Workflow States&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#clocking-work-time"&gt;Clocking Work Time&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href="#finding-tasks-to-clock-in"&gt;Finding tasks to clock in&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href="#estimates-versus-actual-time"&gt;Estimates versus actual time&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href="#programming"&gt;Programming&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href="#highlight-defined-lisp-symbols"&gt;Highlight defined Lisp symbols&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#eldoc-for-lisp-and-haskell"&gt;Eldoc for Lisp and Haskell&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#jumping-to-definitions--references"&gt;Jumping to definitions &amp;amp; references&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#aggressive-indentation"&gt;Aggressive Indentation&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#whats-changed--whos-to-blame"&gt;What’s changed &amp;amp; who’s to blame?&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#highlighting-todo-s--showing-them-in-magit"&gt;Highlighting TODO-s &amp;amp; Showing them in Magit&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#on-the-fly-syntax-checking"&gt;On the fly syntax checking&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#coding-with-a-fruit-salad-semantic-highlighting"&gt;Coding with a Fruit Salad: Semantic Highlighting&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#text-folding-with-origami-mode"&gt;Text Folding with Origami-mode&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#jump-between-windows-using-cmdarrow--between-recent-buffers-with-meta-tab"&gt;Jump between windows using Cmd+Arrow &amp;amp; between recent buffers with Meta-Tab&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#snippets----template-expansion"&gt;Snippets —Template Expansion&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href="#org-mode-templates----a-reason-i-generate-templates-"&gt;Org-mode Templates —A reason I “generate” templates ;)&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href="#elisp-templates"&gt;Elisp Templates&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href="#equational-templates"&gt;Equational Templates&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href="#re-enabling-templates"&gt;Re-Enabling Templates&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href="#helpful-utilities--shortcuts"&gt;Helpful Utilities &amp;amp; Shortcuts&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href="#documentation-pop-ups"&gt;Documentation Pop-Ups&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#emacs-keybindings-for-my-browser"&gt;Emacs keybindings for my browser&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#using-emacs-in-any-text-area-on-my-os"&gt;Using Emacs in any text area on my OS&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#reload-buffer-with-f5"&gt;Reload buffer with ~f5~&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#kill-to-start-of-line"&gt;Kill to start of line&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#killing-buffers--windows-c-x-k-has-a-family"&gt;Killing buffers &amp;amp; windows: &lt;code&gt;C-x k&lt;/code&gt; has a family&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#switching-from-2-horizontal-windows-to-2-vertical-windows"&gt;Switching from 2 horizontal windows to 2 vertical windows&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#obtaining-values-of-keyword-annotations"&gt;Obtaining Values of &lt;code&gt;#+KEYWORD&lt;/code&gt; Annotations&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#publishing-articles-to-my-personal-blog"&gt;Publishing articles to my personal blog&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href="#conclusion----why-configuration-files-should-be-literate"&gt;Conclusion —Why Configuration Files Should be Literate&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;a id="user-content-why-emacs" class="anchor" aria-hidden="true" href="#why-emacs"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Why Emacs?&lt;/h1&gt;
&lt;p&gt;&lt;i&gt;Emacs is a flexible platform for developing end-user applications&lt;/i&gt; –unfortunately it is generally perceived as
  merely a text editor. Some people use it specifically for one or two applications.&lt;/p&gt;
&lt;p&gt;For example, &lt;a href="https://www.youtube.com/watch?v=FtieBc3KptU" rel="nofollow"&gt;writers&lt;/a&gt; use it as an interface for Org-mode and others use it as an interface for version
  control with Magit. &lt;a href="https://orgmode.org/index.html#sec-4" rel="nofollow"&gt;Org&lt;/a&gt; is an organisation tool that can be used for typesetting which subsumes LaTeX, generating many different
  formats –html, latex, pdf, etc– from a single source, keeping track of &lt;a href="https://orgmode.org/worg/org-tutorials/index.html#orgff7b885" rel="nofollow"&gt;schedules&lt;/a&gt; &amp;amp; task management, blogging, habit tracking, personal information management tool, and &lt;a href="http://orgmode.org/worg/org-contrib/" rel="nofollow"&gt;much more&lt;/a&gt;.
  Moreover, its syntax is so &lt;a href="https://karl-voit.at/2017/09/23/orgmode-as-markup-only/" rel="nofollow"&gt;natural&lt;/a&gt; that most people use it without even knowing!
  For me, Org allows me to do literate programming: I can program and document at the same time,
  with no need to seperate the two tasks and with the ability to generate multiple formats and files from a single file.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;If you are a professional writer…Emacs outshines all other editing software
    in approximately the same way that the noonday sun does the stars.
    It is not just bigger and brighter; it simply makes everything else vanish.
    —&lt;a href="http://project.cyberpunk.ru/lib/in_the_beginning_was_the_command_line/" rel="nofollow"&gt;Neal Stephenson&lt;/a&gt;, &lt;i&gt;In the beginning was the command line&lt;/i&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Of course Emacs comes with the basic features of a text editor, but it is much more;
  for example, it comes with a powerful notion of ‘undo’: Basic text editors have a single stream of undo,
  yet in Emacs, we have a tree –when we undo and make new edits, we branch off in our editing stream
  as if our text was being version controlled as we type! –We can even switch between such branches!&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Allow tree-semantics for undo operations.&lt;/span&gt;
(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; undo-tree
  &lt;span class="pl-c1"&gt;:diminish&lt;/span&gt;                       &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Don't show an icon in the modeline&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:config&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Always have it on&lt;/span&gt;
    (global-undo-tree-mode)

    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Each node in the undo tree should have a timestamp.&lt;/span&gt;
    (&lt;span class="pl-k"&gt;setq&lt;/span&gt; undo-tree-visualizer-timestamps &lt;span class="pl-c1"&gt;t&lt;/span&gt;)

    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Show a diff window displaying changes between undo nodes.&lt;/span&gt;
    (&lt;span class="pl-k"&gt;setq&lt;/span&gt; undo-tree-visualizer-diff &lt;span class="pl-c1"&gt;t&lt;/span&gt;))

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Execute (undo-tree-visualize) then navigate along the tree to witness&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; changes being made to your file live!&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;( The above snippet has a &lt;code&gt;noweb-ref&lt;/code&gt;: It is presented here in a natural
  position, but is only executable once &lt;code&gt;use-package&lt;/code&gt; is setup and so it
  is weaved there! We can &lt;i&gt;present&lt;/i&gt; code in any order and &lt;i&gt;tangle&lt;/i&gt; it to
  the order the compilers need it to be! )&lt;/p&gt;
&lt;p&gt;&lt;i&gt;Emacs is an extensible editor: You can make it into the editor of your dreams!&lt;/i&gt;
  You can make it suited to your personal needs.
  If there’s a feature you would like, a behaviour your desire, you can simply code that into Emacs with
  a bit of Lisp. As a programming language enthusiast, for me Emacs is my default Lisp interpreter
  and a customisable IDE that I use for other programming languages
  –such as C, Haskell, Agda, Lisp, and Prolog.
  Moreover, being a Lisp interpreter, we can alter the look and feel of Emacs live, without having
  to restart it –e.g., press &lt;code&gt;C-x C-e&lt;/code&gt; after the final parenthesis of &lt;code&gt;(scroll-bar-mode 0)&lt;/code&gt;
  to run the code that removes the scroll-bar.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;i&gt;I use Emacs every day. I rarely notice it. But when I do, it usually brings me joy.&lt;/i&gt;
    ─&lt;a href="https://so.nwalsh.com/2019/03/01/emacs" rel="nofollow"&gt;Norman Walsh&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I have used Emacs as an interface for developing &lt;a href="https://github.com/alhassy/CheatSheet#cheatsheet-examples"&gt;cheat sheets&lt;/a&gt;, for making my
  blog, and as an application for ‘interactively learning C’. If anything Emacs is
  more like an OS than just a text editor –“living within Emacs” provides an
  abstraction over whatever operating system my machine has: &lt;a href="https://www.fugue.co/blog/2015-11-11-guide-to-emacs.html" rel="nofollow"&gt;It’s so easy to take
  everything with me.&lt;/a&gt; Moreover, the desire to mould Emacs to my needs has made me
  a better programmer: I am now a more literate programmer and, due to Elisp’s
  documentation-oriented nature, I actually take the time and effort to make
  meaningful documentation –even when the project is private and will likely only
  be seen by me.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;i&gt;Seeing Emacs as an editor is like seeing a car as a seating-accommodation.&lt;/i&gt; – &lt;a href="https://karl-voit.at/2015/10/23/Emacs-is-not-just-an-editor/" rel="nofollow"&gt;Karl Voit&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Possibly interesting reads:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://sachachua.com/blog/series/a-visual-guide-to-emacs/" rel="nofollow"&gt;How to Learn Emacs: A Hand-drawn One-pager for Beginners / A visual tutorial&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://emacsrocks.com/" rel="nofollow"&gt;Video Series on Why Emacs Rocks&lt;/a&gt; —catch the enthusiasm!&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://ehneilsen.net/notebook/orgExamples/org-examples.html#sec-18" rel="nofollow"&gt;Emacs org-mode examples and cookbook&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://m00natic.github.io/emacs/emacs-wiki.html" rel="nofollow"&gt;An Opinionated Emacs guide for newbies and beyond&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://tuhdo.github.io/emacs-tutor.html" rel="nofollow"&gt;Emacs Mini-Manual, Part I of III&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/erikriverson/org-mode-R-tutorial/blob/master/org-mode-R-tutorial.org"&gt;Org and R Programming&lt;/a&gt; —a tutorial on literate programming, e.g., evaluating code within &lt;code&gt;src&lt;/code&gt; bloc.&lt;/li&gt;
  &lt;li&gt;Reference cards for &lt;a href="https://www.gnu.org/software/emacs/refcards/pdf/refcard.pdf" rel="nofollow"&gt;GNU Emacs&lt;/a&gt;, &lt;a href="https://www.gnu.org/software/emacs/refcards/pdf/orgcard.pdf" rel="nofollow"&gt;Org-mode&lt;/a&gt;, and &lt;a href="https://github.com/alhassy/ElispCheatSheet/blob/master/CheatSheet.pdf"&gt;Elisp&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://www.reddit.com/r/emacs/comments/6fytr5/when_did_you_start_using_emacs/" rel="nofollow"&gt;“When did you start using Emacs” discussion on Reddit&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://david.rothlis.net/emacs/howtolearn.html" rel="nofollow"&gt;“How to Learn Emacs”&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://orgmode.org/index.html#sec-4" rel="nofollow"&gt;The Org-mode Reference Manual&lt;/a&gt; or &lt;a href="https://orgmode.org/worg/" rel="nofollow"&gt;Worg: Community-Written Docs&lt;/a&gt; which includes a &lt;a href="https://orgmode.org/worg/org-tutorials/index.html" rel="nofollow"&gt;meta-tutorial&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/emacs-tw/awesome-emacs"&gt;Awesome Emacs&lt;/a&gt;: A community driven list of useful Emacs packages, libraries and others.&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/caisah/emacs.dz"&gt;A list of people’s nice emacs config files&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://emacslife.com/how-to-read-emacs-lisp.html" rel="nofollow"&gt;Read Lisp, Tweak Emacs: How to read Emacs Lisp so that you can customize Emacs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://practicaltypography.com/why-racket-why-lisp.html" rel="nofollow"&gt;Why Racket? Why Lisp?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;—If eye-candy, a sleek and beautiful GUI, would entice you then consider starting with &lt;a href="http://spacemacs.org/" rel="nofollow"&gt;spacemacs&lt;/a&gt;.
  Here’s a helpful &lt;a href="https://www.youtube.com/watch?v=hCNOB5jjtmc" rel="nofollow"&gt;installation video&lt;/a&gt;, after which you may want to watch
  &lt;a href="https://www.youtube.com/watch?v=PVsSOmUB7ic" rel="nofollow"&gt;Org-mode in Spacemacs&lt;/a&gt; tutorial—&lt;/p&gt;
&lt;p&gt;Remember: Emacs is a flexible platform for developing end-user applications; e.g., this configuration file
  is at its core an Emacs Lisp program that yields the editor of my dreams
  –it encourages me to grow and to be creative, and I hope the same for all who use it;
  moreover, it reflects my personality such as what I value and what I neglect in my workflow.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;I’m stunned that you, as a professional software engineer, would eschew inferior
    computer languages that hinder your ability to craft code, but you put up with
    editors that bind your fingers to someone else’s accepted practice. —&lt;a href="http://www.howardism.org/Technical/Emacs/why-emacs.html" rel="nofollow"&gt;Howard
    Abrams&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;b&gt;The Power of Text Manipulation:&lt;/b&gt;
  Emacs has ways to represent all kinds of information as text.&lt;/p&gt;
&lt;p&gt;E.g., if want to make a regular expression rename of files in a directory,
  there’s no need to learn about a batch renaming tool: &lt;code&gt;M-x dired &amp;lt;RET&amp;gt; M-x wdired-change-to-wdired-mode&lt;/code&gt; now simply perform a &lt;i&gt;usual&lt;/i&gt; find-and-replace, then
  save with the &lt;i&gt;usual&lt;/i&gt; &lt;code&gt;C-x C-s&lt;/code&gt; to effect the changes!&lt;/p&gt;
&lt;p&gt;Likewise for other system utilities and services (•̀ᴗ•́)و&lt;/p&gt;
&lt;p&gt;Moreover, as will be shown below, you can literally use &lt;a href="https://github.com/zachcurry/emacs-anywhere/#usage"&gt;Emacs anywhere&lt;/a&gt;
  for textually input in your operating system –no copy-paste required.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Keyboard Navigation and Alteration&lt;/b&gt; Suppose you wrote a paragraph of text, and
  wanted to ‘border’ it up for emphasies in hypens. Using the mouse to navigate
  along with a copy-paste of the hypens is vastely inferior to the incantation &lt;code&gt;M-{
  C-u 80 - RET M-} C-u 80 - RET&lt;/code&gt;.  If we want to border up the previous 𝓃-many
  paragraphs, we simply prefix &lt;code&gt;M-{,}&lt;/code&gt; above with &lt;code&gt;C-u 𝓃&lt;/code&gt; —a manual approach would
  have us count 𝓃 and slowly scroll.  ( Exercise: What incantation of keys
  ‘underlines’ the current line with &lt;i&gt;only&lt;/i&gt; the necessary amount of dashes?
  —Solution in the source file. )&lt;/p&gt;
&lt;p&gt;Finally, here’s some fun commands to try out:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;M-x doctor&lt;/code&gt; —generalising the idea of rubber ducks&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;M-x tetris&lt;/code&gt;  or &lt;code&gt;M-x gomoku&lt;/code&gt; or &lt;code&gt;M-x snake&lt;/code&gt;—a break with a classic
    &lt;ul&gt;
      &lt;li&gt;&lt;code&gt;C-u 𝓃 M-x hanoi&lt;/code&gt; for the 𝓃-towers of Hanoi&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code&gt;M-x butterfly&lt;/code&gt; —in reference to &lt;a href="https://xkcd.com/378/" rel="nofollow"&gt;“real programmers”&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Before we get started…&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Why a monolithic configuration?&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;Why am I keeping my entire configuration —from those involving cosmetics &amp;amp;
  prose to those of agendas &amp;amp; programming— in one file?  Being monolithic —“a
  large, mountain-sized, indivisible block of stone”— is generally not ideal in
  nearly any project: E.g., a book is split into chapters and a piece of software
  is partitioned into modules. Using Org-mode, we can still partition our setup
  while remaining in one file. An Emacs configuration is a personal, leisurely
  project, and one file is a simple architecture: I don’t have to worry about many
  files and the troubles of moving content between them; instead, I have headings
  and move content almost instantaneously —org-refile by pressing &lt;code&gt;w&lt;/code&gt; at the start
  of the reader. Moreover, being one file, it is easy to distribute and to extract
  artefacts from it —such as the README for Github, the HTML for my blog, the
  colourful PDF rendition, and the all-important Emacs Lisp raw code
  file. Moreover, with a single &lt;code&gt;#&lt;/code&gt; I can quickly comment out whole sections,
  thereby momentarily disabling features.&lt;/p&gt;
&lt;p&gt;There’s no point in being modular if there’s nothing explaining what’s going on,
  so I document.&lt;/p&gt;
&lt;p&gt;The &lt;a href="#Conclusion---Why-Configuration-Files-Should-be-Literate"&gt;concluding&lt;/a&gt; section of this read further argues the benefits of maintaining
  literate, and monolithic, configuration files. As a convention, I will try to
  motivate the features I set up and I will prefix my local functions with, well,
  &lt;code&gt;my/&lt;/code&gt; —this way it’s easy to see all my defined functions, and this way I cannot
  accidentally shadow existing utilities. Moreover, besides browsing the web, I do
  nearly everything in Emacs and so the start-up time is unimportant to me: Once
  begun, I have no intention of spawning another instance nor closing the current
  one. ( Upon an initial startup using this configuration, it takes a total of
  121 seconds to install all the packages featured here. )&lt;/p&gt;
&lt;p&gt;Enjoy!&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-booting-up" class="anchor" aria-hidden="true" href="#booting-up"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Booting Up&lt;/h1&gt;
&lt;p&gt;Let’s decide on where we want to setup our declarations for personalising Emacs
  to our needs. Then, let’s bootstrap Emacs’ primitive packaging mechanism with a
  slick interface —which not only installs Emacs packages but also programs at
  the operating system level, all from inside Emacs!  Finally, let’s declare who
  we are and use that to setup Emacs email service.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-emacs-vs-initorg" class="anchor" aria-hidden="true" href="#emacs-vs-initorg"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;code&gt;~/.emacs&lt;/code&gt; vs. &lt;code&gt;init.org&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;i&gt;Emacs is extenible&lt;/i&gt;: When Emacs is started, it tried to load a user’s Lisp
  program known as a initialisation file which specfies how Emacs should look and
  behave for you.  Emacs looks for the init file using the filenames &lt;code&gt;~/.emacs.el,
  ~/.emacs,= or =~/.emacs.d/init.el&lt;/code&gt; —it looks for the first one that exists, in
  that order; at least it does so on my machine.  Below we’ll avoid any confusion
  by &lt;i&gt;ensuring&lt;/i&gt; that only one of them is in our system.  Regardless, execute &lt;code&gt;C-h o
  user-init-file&lt;/code&gt; to see the name of the init file loaded. Having no init file is
  tantamount to have an empty init file.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;One can read about the various Emacs initialisation files &lt;a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Init-File.html#Init-File" rel="nofollow"&gt;online&lt;/a&gt; or
    within Emacs by the sequence &lt;code&gt;C-h i m emacs RET i init file RET&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;A &lt;i&gt;friendly&lt;/i&gt; tutorial on ‘beginning a &lt;code&gt;.emacs&lt;/code&gt; file’ can be read
    &lt;a href="https://www.gnu.org/software/emacs/manual/html_node/eintr/Beginning-init-File.html#Beginning-init-File" rel="nofollow"&gt;online&lt;/a&gt; or within Emacs by &lt;code&gt;C-h i m emacs lisp intro RET i .emacs RET&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;After inserting some lisp code and saving, such as &lt;code&gt;(set-background-color
    "salmon")&lt;/code&gt;, one can load the changes with &lt;code&gt;M-x eval-buffer&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;In a terminal, use &lt;code&gt;emacs -Q&lt;/code&gt; to open emacs without any initialisation files.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Besides writing Lisp in an init file, one may use Emacs’ customisation
  interface, &lt;code&gt;M-x customize&lt;/code&gt;: Point and click to change Emacs to your needs. The
  resulting customisations are, by default, automatically thrown into your init
  file —=~/.emacs= is created for you if you have no init file.  This interface is
  great for beginners, but one major drawback is that it’s a bit difficult to
  share settings since it’s not amicable to copy-pasting.&lt;/p&gt;
&lt;p&gt;We shall use &lt;code&gt;~/.emacs.d/init.el&lt;/code&gt; as the initialisation file so that &lt;i&gt;all&lt;/i&gt; of our
  Emacs related files live in the &lt;i&gt;same&lt;/i&gt; directory: &lt;code&gt;~/.emacs.d/&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;A raw code file is difficult to maintain, especially for a &lt;i&gt;large&lt;/i&gt; system such as
  Emacs. Instead, we’re going with a ‘literate programming’ approach: The
  intialisation configuration is presented in an essay fromat, along with headings
  and subheadings, intended for consumption by humans such as myself, that,
  incidentally, can be ‘tangled’ into a raw code file that is comprehensible by a
  machine. We achieve this goal using &lt;a href="#Life-within-Org-mode"&gt;org-mode&lt;/a&gt; —/Emacs’ killer app/— which is
  discussed in great detail later on.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-adventure-time-honey-wheres-my-init" class="anchor" aria-hidden="true" href="#adventure-time-honey-wheres-my-init"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;i&gt;Adventure time!&lt;/i&gt; “Honey, where’s my init?”&lt;/h3&gt;
&lt;p&gt;Let’s use the three possible locations for the initialisation files
  to explore how Emacs finds them. Make the following three files.&lt;/p&gt;
&lt;p&gt;&lt;span&gt;~/.emacs.el&lt;/span&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Emacs looks for this first;&lt;/span&gt;
(&lt;span class="pl-c1"&gt;set-background-color&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;chocolate3&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;message-box&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;.emacs.el says hello&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;~/.emacs&lt;/span&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; else; looks for this one;&lt;/span&gt;
(&lt;span class="pl-c1"&gt;set-background-color&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;plum4&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;message-box&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;.emacs says hello&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;~/.emacs.d/init.el&lt;/span&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Finally, if neither are found; it looks for this one.&lt;/span&gt;
(&lt;span class="pl-c1"&gt;set-background-color&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;salmon&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;message-box&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;.emacs.d/init.el says hello&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now restart your Emacs to see how there super tiny initilaisation files
  affect your editor. Delete some of these files in-order for others to take effect!&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-adventure-time-using-emacs-easy-customisation-interface" class="anchor" aria-hidden="true" href="#adventure-time-using-emacs-easy-customisation-interface"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;i&gt;Adventure time!&lt;/i&gt; Using Emacs’ Easy Customisation Interface&lt;/h3&gt;
&lt;p&gt;We have chosen not to keep configurations in ~~/.emacs~ since
  Emacs may explicitly add, or alter, code in it.&lt;/p&gt;
&lt;p&gt;Let’s see this in action!&lt;/p&gt;
&lt;p&gt;Execute the following to see additions to the ~~/.emacs~ have been added by
  ‘custom’.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;code&gt;M-x customize-variable RET line-number-mode RET&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Then press: &lt;code&gt;toggle&lt;/code&gt;, &lt;code&gt;state&lt;/code&gt;, then &lt;code&gt;1&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Now take a look: &lt;code&gt;C-x C-f ~/.emacs&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;&lt;a id="user-content-support-for-custom" class="anchor" aria-hidden="true" href="#support-for-custom"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Support for ‘Custom’&lt;/h3&gt;
&lt;p&gt;Let the Emacs customisation GUI insert configurations into its own file, not
  touching or altering my initialisation file.  For example, I tend to have local
  variables to produce &lt;code&gt;README.org&lt;/code&gt;’s and other matters, so Emacs’ Custom utility
  will remember to not prompt me each time for the safety of such local variables.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;setq&lt;/span&gt; custom-file &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;~/.emacs.d/custom.el&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
(&lt;span class="pl-k"&gt;load&lt;/span&gt; custom-file)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Speaking of local variables, let’s always ones we’ve already marked as safe
  —see the bottom of the source of this file for an example of local variables.
  ( At one point, all my files had locals! )&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;setq&lt;/span&gt; enable-local-variables &lt;span class="pl-c1"&gt;:safe&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-use-package-the-start-of-initel" class="anchor" aria-hidden="true" href="#use-package-the-start-of-initel"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;code&gt;use-package&lt;/code&gt; —The start of &lt;code&gt;init.el&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;There are a few ways to install packages —run &lt;code&gt;C-h C-e&lt;/code&gt; for a short overview.
  The easiest, for a beginner, is to use the command &lt;code&gt;package-list-packages&lt;/code&gt; then
  find the desired package, press &lt;code&gt;i&lt;/code&gt; to mark it for installation, then install all
  marked packages by pressing &lt;code&gt;x&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;i&gt;Interactively&lt;/i&gt;:  &lt;code&gt;M-x list-packages&lt;/code&gt; to see all melpa packages that can install
    &lt;ul&gt;
      &lt;li&gt;Press &lt;code&gt;Enter&lt;/code&gt; on a package to see its description.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Or more quickly, to install, say, the haskell mode: &lt;code&gt;M-x package-install RET
    unicode-fonts RET&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;“From rags to riches”: Recently I switched to Mac —first time trying the OS.
  I had to do a few &lt;code&gt;package-install&lt;/code&gt;’s and it was annoying.  I’m looking for the
  best way to package my Emacs installation —including my installed packages and
  configuration— so that I can quickly install it anywhere, say if I go to
  another machine.  It seems &lt;code&gt;use-package&lt;/code&gt; allows me to configure and auto install
  packages.  On a new machine, when I clone my &lt;code&gt;.emacs.d&lt;/code&gt; and start Emacs, on the
  first start it should automatically install and compile all of my packages
  through &lt;code&gt;use-package&lt;/code&gt; when it detects they’re missing.&lt;/p&gt;
&lt;p&gt;First we load &lt;code&gt;package&lt;/code&gt;, the built-in package manager.  It is by default only
  connected to the GNU ELPA (Emacs Lisp Package Archive) repository, so we
  extended it with other popular repositories; such as the much larger &lt;a href="https://melpa.org/#/" rel="nofollow"&gt;MELPA&lt;/a&gt;
  (Milkypostman’s ELPA) —it builds packages &lt;a href="https://github.com/melpa/melpa"&gt;directly from the source-code
  reposistories of developers&lt;/a&gt;, rather than having all packages in one repository.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Make all commands of the “package” module present.&lt;/span&gt;
(&lt;span class="pl-c1"&gt;require&lt;/span&gt; &lt;span class="pl-c1"&gt;'package&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Internet repositories for new packages.&lt;/span&gt;
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; package-archives '((&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;org&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;       &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;http://orgmode.org/elpa/&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
                         (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;gnu&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;       &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;http://elpa.gnu.org/packages/&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
                         (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;melpa&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;     &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;http://melpa.org/packages/&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
                         (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;melpa-stable&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;http://stable.melpa.org/packages/&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)))

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Actually get “package” to work.&lt;/span&gt;
(&lt;span class="pl-c1"&gt;package-initialize&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;package-refresh-contents&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;All installed packages are placed, by default, in &lt;code&gt;~/.emacs.d/elpa&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;b&gt;Neato:&lt;/b&gt; &lt;i&gt;If one module requires others to run, they will be installed automatically.&lt;/i&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The declarative configuration tool &lt;a href="https://github.com/jwiegley/use-package/"&gt;use-package&lt;/a&gt; is a
  macro/interface that manages other packages and the way they interact.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;It allows us to tersely organise a package’s configuration.
    &lt;ul&gt;
      &lt;li&gt;By default, &lt;code&gt;(use-package foo)&lt;/code&gt; only loads a package, if it’s on our system.
        &lt;ul&gt;
          &lt;li&gt;Use the standalone keyword &lt;code&gt;:disabled&lt;/code&gt; to turn off loading
            a module that, say, you’re not using anymore.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;It is &lt;i&gt;not&lt;/i&gt; a package manger, but we can make it one by having it automatically
    install modules, via Emacs packing mechanism, when they’re not in our system.
    &lt;p&gt;We achieve this by using the keyword option &lt;code&gt;:ensure t&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Here are common keywords we will use, in super simplified terms.
    &lt;ul&gt;
      &lt;li&gt;&lt;code&gt;:init   f₁ … fₙ&lt;/code&gt;  &lt;i&gt;Always&lt;/i&gt; executes code forms &lt;code&gt;fᵢ&lt;/code&gt; &lt;i&gt;before&lt;/i&gt; loading a package.&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;:diminish str&lt;/code&gt;  Uses &lt;i&gt;optional&lt;/i&gt; string &lt;code&gt;str&lt;/code&gt; in the modeline to indicate
        this module is active. Things we use often needn’t take
        real-estate down there and so no we provide no &lt;code&gt;str&lt;/code&gt;.&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;:config f₁ … fₙ&lt;/code&gt; &lt;i&gt;Only&lt;/i&gt; executes code forms &lt;code&gt;fᵢ&lt;/code&gt; &lt;i&gt;after&lt;/i&gt; loading a package.
        &lt;p&gt;The remaining keywords only take affect &lt;i&gt;after&lt;/i&gt; a module loads.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;code&gt;:bind ((k₁ . f₁) … (kₙ . fₙ)&lt;/code&gt; Lets us bind keys &lt;code&gt;kᵢ&lt;/code&gt;, such as
        ~”M-s o”~, to functions, such as &lt;code&gt;occur&lt;/code&gt;.
        &lt;ul&gt;
          &lt;li&gt;When &lt;i&gt;n = 1&lt;/i&gt;, the extra outer parenthesis are not necessary.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;code&gt;:hook ((m₁ … mₙ) . f)&lt;/code&gt; Enables functionality &lt;code&gt;f&lt;/code&gt; whenever we’re in one of the
        modes &lt;code&gt;mᵢ&lt;/code&gt;, such as &lt;code&gt;org-mode&lt;/code&gt;. The &lt;code&gt;. f&lt;/code&gt;, along with the outermost parenthesis,
        is optional and defaults to the name of the package —Warning: Erroneous
        behaviour happens if the package’s name is not a function provided by the
        package; a common case is when package’s name does &lt;i&gt;not&lt;/i&gt; end in &lt;code&gt;-mode&lt;/code&gt;,
        leading to the invocation &lt;code&gt;((m₁ … mₙ) . &amp;lt;whatever-the-name-is&amp;gt;-mode)&lt;/code&gt; instead.
        &lt;p&gt;Additionally, when &lt;i&gt;n = 1&lt;/i&gt;, the extra outer parenthesis are not necessary.&lt;/p&gt;
        &lt;p&gt;Outside of &lt;code&gt;use-package&lt;/code&gt;, one normally uses a &lt;code&gt;add-hook&lt;/code&gt; clause.  Likewise, an
          ‘advice’ can be given to a function to make it behave differently —this is
          known as ‘decoration’ or an ‘attribute’ in other languages.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;code&gt;:custom (k₁ v₁ d₁) … (kₙ vₙ dₙ)&lt;/code&gt; Sets a package’s custom variables &lt;code&gt;kᵢ&lt;/code&gt; to have
        values &lt;code&gt;vᵢ&lt;/code&gt;, along with &lt;i&gt;optional&lt;/i&gt; user documentation &lt;code&gt;dᵢ&lt;/code&gt; to explain to yourself,
        in the future, why you’ve made this decision.
        &lt;p&gt;This is essentially &lt;code&gt;setq&lt;/code&gt; within &lt;code&gt;:config&lt;/code&gt;.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We now bootstrap &lt;code&gt;use-package&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;unless&lt;/span&gt; (&lt;span class="pl-c1"&gt;package-installed-p&lt;/span&gt; &lt;span class="pl-c1"&gt;'use-package&lt;/span&gt;)
  (&lt;span class="pl-c1"&gt;package-install&lt;/span&gt; &lt;span class="pl-c1"&gt;'use-package&lt;/span&gt;))

(&lt;span class="pl-c1"&gt;eval-when-compile&lt;/span&gt; (&lt;span class="pl-c1"&gt;require&lt;/span&gt; &lt;span class="pl-c1"&gt;'use-package&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can now invoke &lt;code&gt;(use-package XYZ :ensure t)&lt;/code&gt; which should check for the &lt;code&gt;XYZ&lt;/code&gt;
  package and make sure it is accessible.  If not, the &lt;code&gt;:ensure t&lt;/code&gt; part tells
  &lt;code&gt;use-package&lt;/code&gt; to download it —using the built-in &lt;code&gt;package&lt;/code&gt; manager— and place it
  somewhere accessible, in &lt;code&gt;~/.emacs.d/elpa/&lt;/code&gt; by default.  By default we would like
  to download packages, since I do not plan on installing them manually by
  downloading Lisp files and placing them in the correct places on my system.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;setq&lt;/span&gt; use-package-always-ensure &lt;span class="pl-c1"&gt;t&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The use of &lt;code&gt;:ensure t&lt;/code&gt; only installs absent modules, but it does no updating.
  Let’s set up &lt;a href="https://github.com/rranelli/auto-package-update.el"&gt;an auto-update mechanism&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; auto-package-update
  &lt;span class="pl-c1"&gt;:config&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Delete residual old versions&lt;/span&gt;
  (&lt;span class="pl-k"&gt;setq&lt;/span&gt; auto-package-update-delete-old-versions &lt;span class="pl-c1"&gt;t&lt;/span&gt;)
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Do not bother me when updates have taken place.&lt;/span&gt;
  (&lt;span class="pl-k"&gt;setq&lt;/span&gt; auto-package-update-hide-results &lt;span class="pl-c1"&gt;t&lt;/span&gt;)
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Update installed packages at startup if there is an update pending.&lt;/span&gt;
  (auto-package-update-maybe))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here’s another example use of &lt;code&gt;use-package&lt;/code&gt;.  Later on, I have a “show recent files
  pop-up” command set to &lt;code&gt;C-x C-r&lt;/code&gt;; but what if I forget? This mode shows me all key
  completions when I type &lt;code&gt;C-x&lt;/code&gt;, for example.  Moreover, I will be shown other
  commands I did not know about! Neato :-)&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Making it easier to discover Emacs key presses.&lt;/span&gt;
(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; which-key
  &lt;span class="pl-c1"&gt;:diminish&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:config&lt;/span&gt; (which-key-mode)
          (which-key-setup-side-window-bottom)
          (&lt;span class="pl-k"&gt;setq&lt;/span&gt; which-key-idle-delay &lt;span class="pl-c1"&gt;0.05&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;⟨ Honestly, I seldom even acknowledge this pop-up; but it’s always nice to show
  to people when I’m promoting Emacs. ⟩&lt;/p&gt;
&lt;p&gt;Above, the &lt;code&gt;:diminish&lt;/code&gt; keyword indicates that we do not want the mode’s name to be
  shown to us in the modeline —the area near the bottom of Emacs.  It does so by
  using the &lt;code&gt;diminish&lt;/code&gt; package, so let’s install that.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; diminish
  &lt;span class="pl-c1"&gt;:demand&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:config&lt;/span&gt; &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Let's hide some markers.&lt;/span&gt;
    (diminish  &lt;span class="pl-c1"&gt;'org-indent-mode&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here are other packages that I want to be installed onto my machine.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Efficient version control.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Bottom of Emacs will show what branch you're on&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; and whether the local file is modified or not.&lt;/span&gt;
(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; magit
  &lt;span class="pl-c1"&gt;:config&lt;/span&gt; (&lt;span class="pl-c1"&gt;global-set-key&lt;/span&gt; (&lt;span class="pl-c1"&gt;kbd&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-x g&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;'magit-status&lt;/span&gt;))

(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; htmlize)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Main use: Org produced htmls are coloured.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Can be used to export a file into a coloured html.&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Quick BibTeX references, sometimes.&lt;/span&gt;
(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; biblio)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Get org-headers to look pretty! E.g., * → ⊙, ** ↦ ◯, *** ↦ ★&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; https://github.com/emacsorphanage/org-bullets&lt;/span&gt;
(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; org-bullets
  &lt;span class="pl-c1"&gt;:hook&lt;/span&gt; (&lt;span class="pl-c1"&gt;org-mode&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; org-bullets-mode))

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Haskell's cool&lt;/span&gt;
(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; haskell-mode)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Lisp libraries with Haskell-like naming.&lt;/span&gt;
(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; dash)    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; “A modern list library for Emacs”&lt;/span&gt;
(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; s   )    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; “The long lost Emacs string manipulation library”.&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Library for working with system files;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; e.g., f-delete, f-mkdir, f-move, f-exists?, f-hidden?&lt;/span&gt;
(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; f)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://github.com/magnars/dash.el"&gt;dash&lt;/a&gt;: “A modern list library for Emacs”
    &lt;ul&gt;
      &lt;li&gt;E.g., &lt;code&gt;(--filter (&amp;gt; it 10) (list 8 9 10 11 12))&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/magnars/s.el"&gt;s&lt;/a&gt;: “The long lost Emacs string manipulation library”.
    &lt;ul&gt;
      &lt;li&gt;E.g., &lt;code&gt;s-trim, s-replace, s-join&lt;/code&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Remember that snippet for &lt;code&gt;undo-tree&lt;/code&gt; in the introductory section?
  Let’s activate it now, after &lt;code&gt;use-package&lt;/code&gt; has been setup.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&amp;lt;&amp;lt;undo-tree-setup&amp;gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-readme-from-initorg-to-initel" class="anchor" aria-hidden="true" href="#readme-from-initorg-to-initel"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;code&gt;README&lt;/code&gt; —From &lt;code&gt;init.org&lt;/code&gt; to &lt;code&gt;init.el&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Rather than manually extracting the Lisp code from this literate document each
  time we alter it, let’s instead add a ‘hook’ —a method that is invoked on a
  particular event, in this case when we save the file.  More precisely, in this
  case, &lt;code&gt;C-x C-s&lt;/code&gt; is a normal save whereas &lt;code&gt;C-u C-x C-s&lt;/code&gt; is a save after forming
  &lt;code&gt;init.elc&lt;/code&gt; and &lt;code&gt;README.md&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-the-mymake-init-el-and-readme-function" class="anchor" aria-hidden="true" href="#the-mymake-init-el-and-readme-function"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;The &lt;code&gt;my/make-init-el-and-README&lt;/code&gt; function&lt;/h3&gt;
&lt;p&gt;We ‘hook on’ the following function to the usual save method
  that is associated with this file only.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;defun&lt;/span&gt; &lt;span class="pl-e"&gt;my/make-init-el-and-README&lt;/span&gt; ()
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Tangle an el and a github README from my init.org.&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  (&lt;span class="pl-k"&gt;interactive&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;P&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Places value of universal argument into: current-prefix-arg&lt;/span&gt;
  (&lt;span class="pl-k"&gt;when&lt;/span&gt; current-prefix-arg
    (&lt;span class="pl-k"&gt;let*&lt;/span&gt; ((time      (&lt;span class="pl-c1"&gt;current-time&lt;/span&gt;))
           (_date     (&lt;span class="pl-c1"&gt;format-time-string&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;_%Y-%m-%d&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
           (.emacs    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;~/.emacs&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
           (.emacs.el &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;~/.emacs.el&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
      &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Make README.org&lt;/span&gt;
      (&lt;span class="pl-c1"&gt;save-excursion&lt;/span&gt;
        (&lt;span class="pl-c1"&gt;org-babel-goto-named-src-block&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;make-readme&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; See next subsubsection.&lt;/span&gt;
        (&lt;span class="pl-c1"&gt;org-babel-execute-src-block&lt;/span&gt;))

      &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; remove any other initialisation file candidates&lt;/span&gt;
      (&lt;span class="pl-c1"&gt;ignore-errors&lt;/span&gt;
        (f-move .emacs    (&lt;span class="pl-c1"&gt;concat&lt;/span&gt; .emacs _date))
        (f-move .emacs.el (&lt;span class="pl-c1"&gt;concat&lt;/span&gt; .emacs.el _date)))

      &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Make init.el&lt;/span&gt;
      (&lt;span class="pl-c1"&gt;org-babel-tangle&lt;/span&gt;)
      (&lt;span class="pl-c1"&gt;byte-compile-file&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;~/.emacs.d/init.el&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
      (&lt;span class="pl-c1"&gt;load-file&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;~/.emacs.d/init.el&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)

      &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Acknowledgement&lt;/span&gt;
      (&lt;span class="pl-c1"&gt;message&lt;/span&gt; &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-s"&gt;Tangled, compiled, and loaded init.el; and made README.md … &lt;span class="pl-ii"&gt;%.&lt;/span&gt;06f seconds&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;
               (&lt;span class="pl-c1"&gt;float-time&lt;/span&gt; (&lt;span class="pl-c1"&gt;time-since&lt;/span&gt; time))))))

(&lt;span class="pl-c1"&gt;add-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;'after-save-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;'my/make-init-el-and-README&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt; &lt;span class="pl-c1"&gt;'local-to-this-file-please&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-the-org-block-named-make-readme" class="anchor" aria-hidden="true" href="#the-org-block-named-make-readme"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;The Org-block named &lt;code&gt;make-readme&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Where the following block has &lt;code&gt;#+NAME: make-readme&lt;/code&gt; before it.  This source block
  generates the &lt;code&gt;README&lt;/code&gt; for the associated Github repository.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Update the table of contents in this file.&lt;/span&gt;
(&lt;span class="pl-c1"&gt;save-buffer&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;with-temp-buffer&lt;/span&gt;
    (&lt;span class="pl-c1"&gt;insert&lt;/span&gt;
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;#+EXPORT_FILE_NAME: README.org&lt;/span&gt;
&lt;span class="pl-s"&gt;&lt;/span&gt;
&lt;span class="pl-s"&gt;     # Logos and birthday present painting&lt;/span&gt;
&lt;span class="pl-s"&gt;     #+HTML:&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; (s-collapse-whitespace (&lt;span class="pl-c1"&gt;concat&lt;/span&gt;
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt; &amp;lt;p align=&lt;span class="pl-cce"&gt;\"&lt;/span&gt;center&lt;span class="pl-cce"&gt;\"&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class="pl-s"&gt;       &amp;lt;img src=&lt;span class="pl-cce"&gt;\"&lt;/span&gt;emacs-logo.png&lt;span class="pl-cce"&gt;\"&lt;/span&gt; width=150 height=150/&amp;gt;&lt;/span&gt;
&lt;span class="pl-s"&gt;     &amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="pl-s"&gt;&lt;/span&gt;
&lt;span class="pl-s"&gt;     &amp;lt;p align=&lt;span class="pl-cce"&gt;\"&lt;/span&gt;center&lt;span class="pl-cce"&gt;\"&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class="pl-s"&gt;        &amp;lt;a href=&lt;span class="pl-cce"&gt;\"&lt;/span&gt;https://www.gnu.org/software/emacs/&lt;span class="pl-cce"&gt;\"&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class="pl-s"&gt;             &amp;lt;img src=&lt;span class="pl-cce"&gt;\"&lt;/span&gt;https://img.shields.io/badge/GNU%20Emacs-&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; emacs-version &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;-b48ead.svg?style=plastic&lt;span class="pl-cce"&gt;\"&lt;/span&gt;/&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class="pl-s"&gt;        &amp;lt;a href=&lt;span class="pl-cce"&gt;\"&lt;/span&gt;https://orgmode.org/&lt;span class="pl-cce"&gt;\"&lt;/span&gt;&amp;gt;&amp;lt;img src=&lt;span class="pl-cce"&gt;\"&lt;/span&gt;https://img.shields.io/badge/org--mode-&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; org-version &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;-489a9f.svg?style=plastic&lt;span class="pl-cce"&gt;\"&lt;/span&gt;/&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class="pl-s"&gt;     &amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="pl-s"&gt;&lt;/span&gt;
&lt;span class="pl-s"&gt;     &amp;lt;p align=&lt;span class="pl-cce"&gt;\"&lt;/span&gt;center&lt;span class="pl-cce"&gt;\"&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class="pl-s"&gt;       &amp;lt;img src=&lt;span class="pl-cce"&gt;\"&lt;/span&gt;emacs-birthday-present.png&lt;span class="pl-cce"&gt;\"&lt;/span&gt; width=200 height=250/&amp;gt;&lt;/span&gt;
&lt;span class="pl-s"&gt;     &amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="pl-s"&gt;    &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))

   &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; My Literate Setup; need the empty new lines for the export&lt;/span&gt;
   &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-s"&gt;&lt;/span&gt;
&lt;span class="pl-s"&gt;     I enjoy reading others' /literate/ configuration files and&lt;/span&gt;
&lt;span class="pl-s"&gt;     incorporating what I learn into my own. The result is a&lt;/span&gt;
&lt;span class="pl-s"&gt;     sufficiently well-documented and accessible read that yields&lt;/span&gt;
&lt;span class="pl-s"&gt;     a stylish and functional system (•̀ᴗ•́)و&lt;/span&gt;
&lt;span class="pl-s"&gt;&lt;/span&gt;
&lt;span class="pl-s"&gt;     This ~README.org~ has been automatically generated from my&lt;/span&gt;
&lt;span class="pl-s"&gt;     configuration and its contents below are accessible&lt;/span&gt;
&lt;span class="pl-s"&gt;     in (outdated) blog format, with /colour/, or as colourful&lt;/span&gt;
&lt;span class="pl-s"&gt;     PDF, [[https://alhassy.github.io/init/][here]]. Enjoy&lt;/span&gt;
&lt;span class="pl-s"&gt;     :smile:&lt;/span&gt;
&lt;span class="pl-s"&gt;&lt;/span&gt;
&lt;span class="pl-s"&gt;     #+INCLUDE: init.org&lt;/span&gt;
&lt;span class="pl-s"&gt;    &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)

    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; No code execution on export&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; ⟪ For a particular block, we use “:eval never-export”. ⟫&lt;/span&gt;
    (&lt;span class="pl-k"&gt;let&lt;/span&gt; ((org-export-use-babel &lt;span class="pl-c1"&gt;nil&lt;/span&gt;))
      (&lt;span class="pl-c1"&gt;org-mode&lt;/span&gt;)
      (&lt;span class="pl-c1"&gt;org-org-export-to-org&lt;/span&gt;)))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Alternatively, evaluate the above source block with &lt;code&gt;C-c C-c&lt;/code&gt; to produce a &lt;code&gt;README&lt;/code&gt;
  file.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-table-of-contents-for-org-vs-github" class="anchor" aria-hidden="true" href="#table-of-contents-for-org-vs-github"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;‘Table of Contents’ for Org vs. Github&lt;/h3&gt;
&lt;p&gt;The above mentioned package &lt;a href="https://github.com/snosov1/toc-org"&gt;toc-org&lt;/a&gt;, which creates an up-to-date table of
  contents in an org file, at any heading tagged &lt;code&gt;:TOC:&lt;/code&gt;.  It’s useful primarily for
  README files on Github. There is also &lt;a href="https://github.com/alphapapa/org-make-toc"&gt;org-make-toc&lt;/a&gt;, which is more flexible: The
  former provides only a top-level TOC; whereas this package allows TOCs at the
  sibling level, say, to produce a TOC of only the subsections of a particular
  heading, and other TOC features. Unlike toc-org, org-make-toc uses property drawers
  to designate TOC matter.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; toc-org
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Use both “:ignore_N:” and ":export_N:” to exlude headings from the TOC.&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:custom&lt;/span&gt; (toc-org-noexport-regexp
           &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-cce"&gt;\\&lt;/span&gt;(^*+&lt;span class="pl-cce"&gt;\\&lt;/span&gt;)&lt;span class="pl-cce"&gt;\s&lt;/span&gt;+.*:&lt;span class="pl-cce"&gt;\\&lt;/span&gt;(ignore&lt;span class="pl-cce"&gt;\\&lt;/span&gt;|noexport&lt;span class="pl-cce"&gt;\\&lt;/span&gt;)&lt;span class="pl-cce"&gt;\\&lt;/span&gt;([@_][0-9]&lt;span class="pl-cce"&gt;\\&lt;/span&gt;)?:&lt;span class="pl-cce"&gt;\\&lt;/span&gt;($&lt;span class="pl-cce"&gt;\\&lt;/span&gt;|[^ ]*?:$&lt;span class="pl-cce"&gt;\\&lt;/span&gt;)&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Automatically update toc when saving an Org file.&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:hook&lt;/span&gt; (&lt;span class="pl-c1"&gt;org-mode&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; toc-org-mode))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However, &lt;a href="https://github.com/snosov1/toc-org/issues/54#issuecomment-363710561"&gt;toc-org produces broken links for numbered sections&lt;/a&gt;.
  That is, if we use &lt;code&gt;#+OPTIONS: num:t&lt;/code&gt; then a section, say
  &lt;code&gt;** =~/.emacs= vs. =init.org=&lt;/code&gt; as the first subheading of the third
  heading, then it renders with the text preceeded by &lt;code&gt;3.1&lt;/code&gt;.
  On the left-most part of the heading, Github provides a a link option;
  clicking provides a link to this exact location in the README,
  changing the current URL to something like
  &lt;code&gt;https://github.com/alhassy/emacs.d#31-emacs-vs-initorg&lt;/code&gt;.
  Now, toc-org produces Github-style anchors from Org headings,
  but does not account for numbers, and so gives us
  &lt;code&gt;https://github.com/alhassy/emacs.d#emacs-vs-initorg&lt;/code&gt;, which is
  so close but missing the translated number, &lt;code&gt;31&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I’ve experimented with using toc-org links using org-style, instead of the
  default Github style, but it seems that the org-style completely breaks
  rendering the resulting readme.
  Likewise, &lt;a href="https://github.com/snosov1/toc-org/issues/3"&gt;it seems&lt;/a&gt; that headings that are links break the TOC link; whence
  my section on the Reveal slide-deck system has a broken link to it.
  Perhaps org-make-toc solves these issues —something to look into.&lt;/p&gt;
&lt;p&gt;I’m not sure how I feel about actually having the Github-serving TOC in my
  source file. It’s nice to have around, from an essay-perspecive, but it breaks
  HTML export since its links are &lt;i&gt;not&lt;/i&gt; well-behaved; e.g., &lt;code&gt;:ignore:&lt;/code&gt;-ed headlines
  appear in the toc, but do not link to any visible heading in the HTML; likewise,
  headings with URLS in their names break. As such, below I’ve developed a way to
  erase it altogether —alternatively, one could mark the toc as &lt;code&gt;:noexport:&lt;/code&gt;, but
  this would then, in my current approach, not result in a toc in the resulting
  README.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;cl-defun&lt;/span&gt; &lt;span class="pl-e"&gt;my/org-replace-tree-contents&lt;/span&gt; (&lt;span class="pl-v"&gt;heading&lt;/span&gt; &amp;amp;&lt;span class="pl-v"&gt;key&lt;/span&gt; (with &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) (offset &lt;span class="pl-c1"&gt;0&lt;/span&gt;))
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Replace the contents of org tree HEADING with WITH, starting at OFFSET.&lt;/span&gt;
&lt;span class="pl-s"&gt;&lt;/span&gt;
&lt;span class="pl-s"&gt;Clear a subtree leaving first 3 lines untouched  ⇐  :offset 3&lt;/span&gt;
&lt;span class="pl-s"&gt;Deleting a tree &amp;amp; its contents                   ⇐  :offset -1, or any negative number.&lt;/span&gt;
&lt;span class="pl-s"&gt;Do nothing to a tree of 123456789 lines          ⇐  :offset 123456789&lt;/span&gt;
&lt;span class="pl-s"&gt;&lt;/span&gt;
&lt;span class="pl-s"&gt;Precondition: offset &amp;lt; most-positive-fixnum; else we wrap to a negative number.&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  (&lt;span class="pl-k"&gt;interactive&lt;/span&gt;)
  (&lt;span class="pl-c1"&gt;save-excursion&lt;/span&gt;
    (&lt;span class="pl-c1"&gt;beginning-of-buffer&lt;/span&gt;)
    (&lt;span class="pl-c1"&gt;re-search-forward&lt;/span&gt; (&lt;span class="pl-c1"&gt;format&lt;/span&gt; &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-s"&gt;^&lt;span class="pl-cce"&gt;\\&lt;/span&gt;*+ &lt;span class="pl-c1"&gt;%s&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt; (&lt;span class="pl-c1"&gt;regexp-quote&lt;/span&gt; heading)))
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; To avoid ‘forward-line’ from spilling onto other trees.&lt;/span&gt;
    (&lt;span class="pl-c1"&gt;org-narrow-to-subtree&lt;/span&gt;)
    (&lt;span class="pl-c1"&gt;org-mark-subtree&lt;/span&gt;)
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; The 1+ is to avoid the heading.&lt;/span&gt;
    (&lt;span class="pl-k"&gt;dotimes&lt;/span&gt; (_ (&lt;span class="pl-c1"&gt;1+&lt;/span&gt; offset)) (&lt;span class="pl-c1"&gt;forward-line&lt;/span&gt;))
    (&lt;span class="pl-c1"&gt;delete-region&lt;/span&gt; (&lt;span class="pl-c1"&gt;region-beginning&lt;/span&gt;) (&lt;span class="pl-c1"&gt;region-end&lt;/span&gt;))
    (&lt;span class="pl-c1"&gt;insert&lt;/span&gt; with)
    (&lt;span class="pl-c1"&gt;widen&lt;/span&gt;)))

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Erase :TOC: body ---provided we're using toc-org.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; (my/org-replace-tree-contents "Table of Contents")&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-alternate-approaches-to-generating-a-readme" class="anchor" aria-hidden="true" href="#alternate-approaches-to-generating-a-readme"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Alternate approaches to generating a README&lt;/h3&gt;
&lt;p&gt;Github supports several markup languages, one of which is Org-mode.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;It seems that Github uses &lt;a href="https://github.com/bdewey/org-ruby"&gt;org-ruby&lt;/a&gt; to convert org-mode to html.&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/novoid/github-orgmode-tests"&gt;Here&lt;/a&gt; is a repo demonstrating how Github interprets Org-mode files.&lt;/li&gt;
  &lt;li&gt;org-ruby supports inline &lt;code&gt;#+HTML&lt;/code&gt; but &lt;a href="https://github.com/wallyqs/org-ruby/issues/51"&gt;not html blocks&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It seems coloured HTML does not render well:&lt;/p&gt;
&lt;pre&gt;(org-html-export-to-html)
(shell-command "mv README.html README.md")
&lt;/pre&gt;
&lt;p&gt;&lt;a href="https://orgmode.org/manual/JavaScript-support.html" rel="nofollow"&gt;JavaScript supported display of web pages&lt;/a&gt; with:&lt;/p&gt;
&lt;pre&gt;#+INFOJS_OPT: view:info toc:t buttons:t
&lt;/pre&gt;
&lt;p&gt;This looks nice for standalone pages, but doesn’t incorporate nicely with github
  README.org.&lt;/p&gt;
&lt;p&gt;Usually, Github readme files are in markdown, which we may obtain from an Org
  file with &lt;code&gt;M-x org-md-export-to-markdown&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;[ ] By default, this approach results in grey-coloured source blocks —eek!&lt;/li&gt;
  &lt;li&gt;[X] It allows strategic placement of a table of contents.
    &lt;p&gt;Declare &lt;code&gt;#+options: toc:nil&lt;/code&gt; at the top of the Org file, then have &lt;code&gt;#+TOC:
      headlines 2&lt;/code&gt; in a strategic position for a table of contents, say after a brief
      explanation of what the readme is for.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;[X] It allows us to preview the readme locally before comitting, using &lt;a href="https://github.com/joeyespo/grip"&gt;grip&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; grip looks for README.md&lt;/span&gt;
(system-packages-ensure &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;grip&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Next: (async-shell-command "cd ~/.emacs.d/; grip")&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can approximate this behaviour for the other approaches:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Export to markdown.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;COMMENT&lt;/code&gt;-out any &lt;code&gt;:TOC:&lt;/code&gt;-tagged sections —their links are not valid
    markdown links, since they don’t refer to any markdown labels.&lt;/li&gt;
  &lt;li&gt;Rename the exported file to &lt;code&gt;README.md&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Run &lt;code&gt;grip&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;&lt;a id="user-content-installing-emacs-packages-directly-from-source" class="anchor" aria-hidden="true" href="#installing-emacs-packages-directly-from-source"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installing Emacs packages directly from source&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/quelpa/quelpa-use-package"&gt;Quelpa&lt;/a&gt; allows us to build Emacs packages directly from source repositories.  It
  derives its name from the German word &lt;i&gt;Quelle&lt;/i&gt;, for &lt;i&gt;souce&lt;/i&gt; [code], adjoined to
  ELPA.  Its &lt;code&gt;use-package&lt;/code&gt; interface allows us to use &lt;code&gt;use-package&lt;/code&gt; like normal but
  when we want to install a file from souce we use the keyword &lt;code&gt;:quelpa&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; quelpa
  &lt;span class="pl-c1"&gt;:custom&lt;/span&gt; (quelpa-upgrade-p &lt;span class="pl-c1"&gt;t&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Always try to update packages&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
  &lt;span class="pl-c1"&gt;:config&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Get ‘quelpa-use-package’ via ‘quelpa’&lt;/span&gt;
  (&lt;span class="pl-c1"&gt;quelpa&lt;/span&gt;
   '(quelpa-use-package
     &lt;span class="pl-c1"&gt;:fetcher&lt;/span&gt; git
     &lt;span class="pl-c1"&gt;:url&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;https://github.com/quelpa/quelpa-use-package.git&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
  (&lt;span class="pl-c1"&gt;require&lt;/span&gt; &lt;span class="pl-c1"&gt;'quelpa-use-package&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let’s use this to obtain an improved info-mode from the EmacsWiki. [Disabled for
  now]&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; info+
  &lt;span class="pl-c1"&gt;:disabled&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:quelpa&lt;/span&gt; (info+ &lt;span class="pl-c1"&gt;:fetcher&lt;/span&gt; wiki &lt;span class="pl-c1"&gt;:url&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;https://www.emacswiki.org/emacs/info%2b.el&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-magit-emacs-porcelain-interface-to-gitq" class="anchor" aria-hidden="true" href="#magit-emacs-porcelain-interface-to-gitq"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;code&gt;magit&lt;/code&gt; —Emacs’ porcelain interface to gitq&lt;/h2&gt;
&lt;p&gt;Let’s setup an Emacs ‘porcelain’ interface to git —it makes working with
  version control tremendously convenient.  Moreover, I add a little pop-up so
  that I don’t forget to commit often!&lt;/p&gt;
&lt;p&gt;Why use &lt;code&gt;magit&lt;/code&gt; as the interface to the git version control system?  In &lt;code&gt;magit&lt;/code&gt;
  buffer nearly everything can be acted upon: Press &lt;code&gt;return&lt;/code&gt;, or &lt;code&gt;space&lt;/code&gt;, to see
  details and &lt;code&gt;tab&lt;/code&gt; to see children items, usually.&lt;/p&gt;
&lt;p&gt;First, let’s setup our git credentials.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; See here for a short &amp;amp; useful tutorial:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; https://alvinalexander.com/git/git-show-change-username-email-address&lt;/span&gt;
(&lt;span class="pl-k"&gt;when&lt;/span&gt; (&lt;span class="pl-k"&gt;equal&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
(&lt;span class="pl-c1"&gt;shell-command-to-string&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;git config user.name&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
  (&lt;span class="pl-c1"&gt;shell-command&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;git config --global user.name &lt;span class="pl-cce"&gt;\"&lt;/span&gt;Musa Al-hassy&lt;span class="pl-cce"&gt;\"&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
  (&lt;span class="pl-c1"&gt;shell-command&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;git config --global user.email &lt;span class="pl-cce"&gt;\"&lt;/span&gt;alhassy@gmail.com&lt;span class="pl-cce"&gt;\"&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Below is my personal quick guide to working with magit —for a full tutorial
  see &lt;a href="http://jr0cket.co.uk/2012/12/driving-git-with-emacs-pure-magic-with.html.html" rel="nofollow"&gt;jr0cket’s blog&lt;/a&gt;.&lt;/p&gt;
&lt;dl&gt;
  &lt;dt&gt;&lt;code&gt;dired&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;See the contents of a particular directory.&lt;/dd&gt;
  &lt;dt&gt;&lt;code&gt;magit-init&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;Put a project under version control.
    The mini-buffer will prompt you for the top level folder version.
    A &lt;code&gt;.git&lt;/code&gt; folder will be created there.&lt;/dd&gt;
  &lt;dt&gt;&lt;code&gt;magit-status&lt;/code&gt; , &lt;code&gt;C-x g&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;See status in another buffer.
    Press &lt;code&gt;?&lt;/code&gt; to see options, including:
    &lt;dl&gt;
      &lt;dt&gt;g&lt;/dt&gt;&lt;dd&gt;Refresh the status buffer.&lt;/dd&gt;
      &lt;dt&gt;TAB&lt;/dt&gt;&lt;dd&gt;See collapsed items, such as what text has been changed.&lt;/dd&gt;
      &lt;dt&gt;&lt;code&gt;q&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;Quit magit, or go to previous magit screen.&lt;/dd&gt;
      &lt;dt&gt;&lt;code&gt;s&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;Stage, i.e., add, a file to version control.
        Add all untracked files by selecting the &lt;i&gt;Untracked files&lt;/i&gt; title.
        &lt;p&gt;&lt;a href="https://softwareengineering.stackexchange.com/a/119807/185815" rel="nofollow"&gt;The staging area is akin to a pet store; commiting is taking the pet home.&lt;/a&gt;&lt;/p&gt;
      &lt;/dd&gt;
      &lt;dt&gt;&lt;code&gt;k&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;Kill, i.e., delete a file locally.&lt;/dd&gt;
      &lt;dt&gt;&lt;code&gt;K&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;This’ &lt;code&gt;(magit-file-untrack)&lt;/code&gt; which does &lt;code&gt;git rm --cached&lt;/code&gt;.&lt;/dd&gt;
      &lt;dt&gt;&lt;code&gt;i&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;Add a file to the project &lt;code&gt;.gitignore&lt;/code&gt; file. Nice stuff =)&lt;/dd&gt;
      &lt;dt&gt;&lt;code&gt;u&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;Unstage a specfif staged change highlighed by cursor.
        &lt;code&gt;C-u s&lt;/code&gt; stages everything –tracked or not.&lt;/dd&gt;
      &lt;dt&gt;&lt;code&gt;c&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;Commit a change.
        &lt;ul&gt;
          &lt;li&gt;A new buffer for the commit message appears, you write it then
            commit with &lt;code&gt;C-c C-c&lt;/code&gt; or otherwise cancel with &lt;code&gt;C-c C-k&lt;/code&gt;.
            These commands are mentioned to you in the minibuffer when you go to commit.&lt;/li&gt;
          &lt;li&gt;You can provide a commit to &lt;i&gt;each&lt;/i&gt; altered chunk of text!
            This is super neat, you make a series of local such commits rather
            than one nebulous global commit for the file. The &lt;code&gt;magit&lt;/code&gt; interface
            makes this far more accessible than a standard terminal approach!&lt;/li&gt;
          &lt;li&gt;You can look at the unstaged changes, select a &lt;i&gt;region&lt;/i&gt;, using &lt;code&gt;C-SPC&lt;/code&gt; as usual,
            and commit only that if you want!&lt;/li&gt;
          &lt;li&gt;When looking over a commit, &lt;code&gt;M-p/n&lt;/code&gt; to efficiently go to previous or next altered sections.&lt;/li&gt;
          &lt;li&gt;Amend a commit by pressing &lt;code&gt;a&lt;/code&gt; on &lt;code&gt;HEAD&lt;/code&gt;.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/dd&gt;
      &lt;dt&gt;&lt;code&gt;d&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;Show differences, another &lt;code&gt;d&lt;/code&gt; or another option.
        &lt;ul&gt;
          &lt;li&gt;This is magit! Each hunk can be acted upon; e.g., &lt;code&gt;s&lt;/code&gt; or &lt;code&gt;c&lt;/code&gt; or &lt;code&gt;k&lt;/code&gt; ;-)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/dd&gt;
      &lt;dt&gt;&lt;code&gt;v&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;Revert a commit.&lt;/dd&gt;
      &lt;dt&gt;&lt;code&gt;x&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;Undo last commit. Tantamount to &lt;code&gt;git reset HEAD~&lt;/code&gt; when cursor is on most recent
        commit; otherwise resets to whatever commit is under the cursor.&lt;/dd&gt;
      &lt;dt&gt;&lt;code&gt;l&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;Show the log, another &lt;code&gt;l&lt;/code&gt; for current branch; other options will be displayed.
        &lt;ul&gt;
          &lt;li&gt;Here &lt;code&gt;space&lt;/code&gt; shows details in another buffer while cursour remains in current
            buffer and, moreover, continuing to press &lt;code&gt;space&lt;/code&gt; scrolls through the other buffer!
            Neato.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/dd&gt;
      &lt;dt&gt;&lt;code&gt;P&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;Push.&lt;/dd&gt;
      &lt;dt&gt;&lt;code&gt;F&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;Pull.&lt;/dd&gt;
      &lt;dt&gt;&lt;code&gt;:&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;Execute a raw git command; e.g., enter &lt;code&gt;whatchanged&lt;/code&gt;.&lt;/dd&gt;
    &lt;/dl&gt;
  &lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;Notice that every time you press one of these commands, a ‘pop-up’ of realted
  git options appears! Thus not only is there no need to memorise many of them,
  but this approach makes &lt;i&gt;discovering&lt;/i&gt; other commands easier.&lt;/p&gt;
&lt;p&gt;Below are the git repos I’d like to clone —along with a function to do so
  quickly.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; magit)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Do not ask about this variable when cloning.&lt;/span&gt;
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; magit-clone-set-remote.pushDefault &lt;span class="pl-c1"&gt;t&lt;/span&gt;)

(&lt;span class="pl-k"&gt;cl-defun&lt;/span&gt; &lt;span class="pl-e"&gt;maybe-clone&lt;/span&gt; (&lt;span class="pl-v"&gt;remote&lt;/span&gt; &lt;span class="pl-c1"&gt;&amp;amp;optional&lt;/span&gt; (local (&lt;span class="pl-c1"&gt;concat&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;~/&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; (&lt;span class="pl-c1"&gt;file-name-base&lt;/span&gt; remote))))
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Clone a REMOTE repository if the LOCAL directory does not exist.&lt;/span&gt;
&lt;span class="pl-s"&gt;&lt;/span&gt;
&lt;span class="pl-s"&gt;Yields ‘repo-already-exists’ when no cloning transpires,&lt;/span&gt;
&lt;span class="pl-s"&gt;otherwise yields ‘cloned-repo’.&lt;/span&gt;
&lt;span class="pl-s"&gt;&lt;/span&gt;
&lt;span class="pl-s"&gt;LOCAL is optional and defaults to the base name; e.g.,&lt;/span&gt;
&lt;span class="pl-s"&gt;if REMOTE is https://github.com/X/Y then LOCAL becomes ~/Y.&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  (&lt;span class="pl-k"&gt;if&lt;/span&gt; (&lt;span class="pl-c1"&gt;file-directory-p&lt;/span&gt; local)
      &lt;span class="pl-c1"&gt;'repo-already-exists&lt;/span&gt;
    (&lt;span class="pl-c1"&gt;async-shell-command&lt;/span&gt; (&lt;span class="pl-c1"&gt;concat&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;git clone &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; remote &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt; &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; local))
    (&lt;span class="pl-c1"&gt;add-to-list&lt;/span&gt; &lt;span class="pl-c1"&gt;'magit-repository-directories&lt;/span&gt; `(&lt;span class="pl-c1"&gt;&lt;span class="pl-mi1"&gt;,&lt;/span&gt;local&lt;/span&gt;   &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt;))
    &lt;span class="pl-c1"&gt;'cloned-repo&lt;/span&gt;))

(maybe-clone &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;https://github.com/alhassy/emacs.d&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;~/.emacs.d&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
(maybe-clone &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;https://github.com/alhassy/alhassy.github.io&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
(maybe-clone &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;https://github.com/alhassy/CheatSheet&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
(maybe-clone &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;https://github.com/alhassy/ElispCheatSheet&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
(maybe-clone &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;https://github.com/alhassy/CatsCheatSheet&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
(maybe-clone &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;https://github.com/alhassy/islam&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; For brevity, many more ‘maybe-clone’ clauses are hidden in the source file.&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let’s always notify ourselves of a file that has &lt;a href="https://tpapp.github.io/post/check-uncommitted/" rel="nofollow"&gt;uncommited changes&lt;/a&gt;
  —we might have had to step away from the computer and forgotten to commit.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;require&lt;/span&gt; &lt;span class="pl-c1"&gt;'magit-git&lt;/span&gt;)

(&lt;span class="pl-k"&gt;defun&lt;/span&gt; &lt;span class="pl-e"&gt;my/magit-check-file-and-popup&lt;/span&gt; ()
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;If the file is version controlled with git&lt;/span&gt;
&lt;span class="pl-s"&gt;  and has uncommitted changes, open the magit status popup.&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  (&lt;span class="pl-k"&gt;let&lt;/span&gt; ((file (&lt;span class="pl-c1"&gt;buffer-file-name&lt;/span&gt;)))
    (&lt;span class="pl-k"&gt;when&lt;/span&gt; (&lt;span class="pl-k"&gt;and&lt;/span&gt; file (magit-anything-modified-p &lt;span class="pl-c1"&gt;t&lt;/span&gt; file))
      (&lt;span class="pl-c1"&gt;message&lt;/span&gt; &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-s"&gt;This file has uncommited changes!&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;)
      (&lt;span class="pl-k"&gt;when&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt; &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Became annyoying after some time.&lt;/span&gt;
      (&lt;span class="pl-c1"&gt;split-window-below&lt;/span&gt;)
      (&lt;span class="pl-c1"&gt;other-window&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;)
      (magit-status)))))

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; I usually have local variables, so I want the message to show&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; after the locals have been loaded.&lt;/span&gt;
(&lt;span class="pl-c1"&gt;add-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;'find-file-hook&lt;/span&gt;
  '(&lt;span class="pl-c1"&gt;lambda&lt;/span&gt; ()
      (&lt;span class="pl-c1"&gt;add-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;'hack-local-variables-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;'my/magit-check-file-and-popup&lt;/span&gt;)))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally, one of the main points for using version control is to have access to
  historic versions of a file. The following utility allows us to &lt;code&gt;M-x
  git-timemachine&lt;/code&gt; on a file and use &lt;code&gt;p/n/g/q&lt;/code&gt; to look at previous, next, goto
  arbitrary historic versions, or quit.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; git-timemachine)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If we want to roll back to a previous version, we just &lt;code&gt;write-file&lt;/code&gt; or &lt;code&gt;C-x C-s&lt;/code&gt; as
  usual! The power of text!&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-syncing-to-the-systems-path" class="anchor" aria-hidden="true" href="#syncing-to-the-systems-path"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Syncing to the System’s &lt;code&gt;$PATH&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;For one reason or another, on OS X it seems that an Emacs instance
  begun from the terminal may not inherit the terminal’s environment
  variables, thus making it difficult to use utilities like &lt;code&gt;pdflatex&lt;/code&gt;
  when Org-mode attempts to produce a PDF.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; exec-path-from-shell
  &lt;span class="pl-c1"&gt;:init&lt;/span&gt;
  (&lt;span class="pl-k"&gt;when&lt;/span&gt; (&lt;span class="pl-c1"&gt;memq&lt;/span&gt; window-system '(mac ns x))
    (exec-path-from-shell-initialize)))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;See the &lt;a href="https://github.com/purcell/exec-path-from-shell"&gt;exec-path-from-shell&lt;/a&gt; documentation for setting other environment variables.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-installing-os-packages-and-automatically-keeping-my-system-up-to-data-from-within-emacs" class="anchor" aria-hidden="true" href="#installing-os-packages-and-automatically-keeping-my-system-up-to-data-from-within-emacs"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installing OS packages, and automatically keeping my system up to data, from within Emacs&lt;/h2&gt;
&lt;p&gt;Sometimes Emacs packages depend on existing system binaries, &lt;code&gt;use-package&lt;/code&gt; let’s
  us ensure these exist using the &lt;code&gt;:ensure-system-package&lt;/code&gt; keyword extension.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;This is like &lt;code&gt;:ensure t&lt;/code&gt; but operates at the OS level and uses your default
    OS package manager.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let’s obtain the extension.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Auto installing OS system packages&lt;/span&gt;
(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; use-package-ensure-system-package)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Ensure our operating system is always up to date.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; This is run whenever we open Emacs &amp;amp; so wont take long if we're up to date.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; It happens in the background ^_^&lt;/span&gt;
(system-packages-update)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After an update to Mac OS, one may need to &lt;a href="https://emacs.stackexchange.com/questions/53026/how-to-restore-file-system-access-in-macos-catalina" rel="nofollow"&gt;restore file system access privileges
  to Emacs&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here’s an example use for Emacs packages that require OS packages:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;shell-command-to-string&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;type rg&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; ⇒ rg not found&lt;/span&gt;
(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; rg
  &lt;span class="pl-c1"&gt;:ensure-system-package&lt;/span&gt; rg) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; ⇒ There's a buffer *system-packages*&lt;/span&gt;
                             &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;;   installing this tool at the OS level!&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you look at the &lt;code&gt;*Messages*&lt;/code&gt; buffer, via &lt;code&gt;C-h e&lt;/code&gt;, on my machine it says
  &lt;code&gt;brew install rg: finished&lt;/code&gt; —it uses &lt;code&gt;brew&lt;/code&gt; which is my OS package manager!&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The &lt;a href="https://github.com/jwiegley/use-package#use-package-ensure-system-package"&gt;use-package-ensure-system-package&lt;/a&gt; documentation for a flurry of use cases.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The extension makes use of &lt;a href="https://gitlab.com/jabranham/system-packages" rel="nofollow"&gt;system-packages&lt;/a&gt;; see its documentation to learn
  more about managing installed OS packages from within Emacs. This is itself
  a powerful tool, however it’s interface &lt;code&gt;M-x system-packages-install&lt;/code&gt; leaves much
  to be desired —namely, tab-compleition listing all available packages,
  seeing their descriptions, and visiting their webpages.
  This is remedied by &lt;a href="https://github.com/emacs-helm/helm-system-packages"&gt;M-x helm-system-packages&lt;/a&gt; then &lt;code&gt;RET&lt;/code&gt; to see a system
  package’s description, or &lt;code&gt;TAB&lt;/code&gt; for the other features!
  &lt;i&gt;This is so cool!&lt;/i&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; An Emacs-based interface to the package manager of your operating system.&lt;/span&gt;
(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; helm-system-packages)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The Helm counterpart is great for &lt;i&gt;discovarability&lt;/i&gt;, whereas
  the plain &lt;code&gt;system-packages&lt;/code&gt; is great for &lt;i&gt;programmability&lt;/i&gt;.&lt;/p&gt;
&lt;p&gt;It is tedious to arrange my program windows manually, and as such I love tiling
  window managers, which automatically arrange them.  I had been using &lt;a href="https://xmonad.org" rel="nofollow"&gt;xmonad&lt;/a&gt;
  until recently when I obtained a Mac machine and now use &lt;a href="https://ianyh.com/amethyst/" rel="nofollow"&gt;Amethyst&lt;/a&gt; —“Tiling
  window manager for macOS along the lines of xmonad.”&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Unlike the Helm variant, we need to specify our OS pacman.&lt;/span&gt;
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; system-packages-package-manager &lt;span class="pl-c1"&gt;'brew&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Use “brew cask install” instead of “brew install” for installing programs.&lt;/span&gt;
(&lt;span class="pl-k"&gt;setf&lt;/span&gt; (&lt;span class="pl-k"&gt;nth&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; (&lt;span class="pl-k"&gt;assoc&lt;/span&gt; &lt;span class="pl-c1"&gt;'brew&lt;/span&gt; system-packages-supported-package-managers))
      '(install &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;brew cask install&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; If the given system package doesn't exist; install it.&lt;/span&gt;
(system-packages-ensure &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;amethyst&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Neato! Now I can live in Emacs even more ^_^&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-being-at-the-helm-completion--narrowing-framework" class="anchor" aria-hidden="true" href="#being-at-the-helm-completion--narrowing-framework"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;“Being at the Helm” —Completion &amp;amp; Narrowing Framework&lt;/h2&gt;
&lt;p&gt;Whenever we have a choice to make from a list, &lt;a href="http://tuhdo.github.io/helm-intro.html" rel="nofollow"&gt;Helm&lt;/a&gt; provides possible
  completions and narrows the list of choices as we type.  This is extremely
  helpful for when switching between buffers, &lt;code&gt;C-x b&lt;/code&gt;, and discovering &amp;amp; learning
  about other commands!  E.g., press &lt;code&gt;M-x&lt;/code&gt; to see recently executed commands and
  other possible commands! Press &lt;code&gt;M-x&lt;/code&gt; and just start typing, methods mentioning
  what you’ve typed are suddenly listed!&lt;/p&gt;
&lt;table&gt;
  &lt;tbody&gt;&lt;tr&gt;&lt;td&gt;Remembrance comes with time, until then &lt;i&gt;ask&lt;/i&gt; Emacs!&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;&lt;i&gt;Try and be grateful!&lt;/i&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; helm
 &lt;span class="pl-c1"&gt;:diminish&lt;/span&gt;
 &lt;span class="pl-c1"&gt;:init&lt;/span&gt; (helm-mode &lt;span class="pl-c1"&gt;t&lt;/span&gt;)
 &lt;span class="pl-c1"&gt;:bind&lt;/span&gt; ((&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;M-x&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;     &lt;span class="pl-k"&gt;.&lt;/span&gt; helm-M-x)
        (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-x C-f&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; helm-find-files)
        (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-x b&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;   &lt;span class="pl-k"&gt;.&lt;/span&gt; helm-mini)     &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; See buffers &amp;amp; recent files; more useful.&lt;/span&gt;
        (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-x r b&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; helm-filtered-bookmarks)
        (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-x C-r&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; helm-recentf)  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Search for recently edited files&lt;/span&gt;
        (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-c i&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;   &lt;span class="pl-k"&gt;.&lt;/span&gt; helm-imenu)
        (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-h a&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;   &lt;span class="pl-k"&gt;.&lt;/span&gt; helm-apropos)
        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Look at what was cut recently &amp;amp; paste it in.&lt;/span&gt;
        (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;M-y&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; helm-show-kill-ring)

        &lt;span class="pl-c1"&gt;:map&lt;/span&gt; helm-map
        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; We can list ‘actions’ on the currently selected item by C-z.&lt;/span&gt;
        (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-z&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; helm-select-action)
        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Let's keep tab-completetion anyhow.&lt;/span&gt;
        (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;TAB&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;   &lt;span class="pl-k"&gt;.&lt;/span&gt; helm-execute-persistent-action)
        (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&amp;lt;tab&amp;gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; helm-execute-persistent-action)))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Helm provides generic functions for completions to replace
  tab-completion in Emacs with no loss of functionality.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The &lt;code&gt;execute-extended-command&lt;/code&gt;, the default “M-x”, is replaced with &lt;code&gt;helm-M-x&lt;/code&gt;
    which shows possible command completions.
    &lt;p&gt;Likewise with &lt;code&gt;apropos&lt;/code&gt;, which is helpful for looking up commands.
      It shows all meaningful Lisp symbols whose names match a given pattern.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;The ‘Helm-mini’, &lt;code&gt;C-x b&lt;/code&gt;, shows all buffers, recently opened files,
    bookmarks, and allows us to create new bookmarks and buffers!&lt;/li&gt;
  &lt;li&gt;The ‘Helm-imenu’, &lt;code&gt;C-c i&lt;/code&gt;, yields a a menu of all “top-level items” in a file;
    e.g., functions and constants in source code or headers in an org-mode file.
    &lt;p&gt;⟳ Nifty way to familarise yourself with a new code base, or one from a while
      ago.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;When Helm is active, &lt;code&gt;C-x&lt;/code&gt; lists possible course of actions on the currently
    selected item.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When &lt;code&gt;helm-mode&lt;/code&gt; is enabled, even help commands make use of it.
  E.g., &lt;code&gt;C-h o&lt;/code&gt; runs &lt;code&gt;describe-symbol&lt;/code&gt; for the symbol at point,
  and &lt;code&gt;C-h w&lt;/code&gt; runs &lt;code&gt;where-is&lt;/code&gt; to find the key binding of the symbol at point.
  Both show a pop-up of other possible commands.&lt;/p&gt;
&lt;p&gt;Here’s a nifty tutorial:
  &lt;a href="http://tuhdo.github.io/helm-intro.html" rel="nofollow"&gt;A package in a league of its own: Helm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Let’s ensure &lt;code&gt;C-x b&lt;/code&gt; shows us: Current buffers, recent files, and bookmarks
  —as well as the ability to create bookmarks, which is via &lt;code&gt;C-x r b&lt;/code&gt; manually.
  For example, I press &lt;code&gt;C-x b&lt;/code&gt; then type any string and will have the option of
  making that a bookmark referring to the current location I’m working in, or
  jump to it if it’s an existing bookmark, or make a buffer with that name,
  or find a file with that name.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;setq&lt;/span&gt; helm-mini-default-sources '(helm-source-buffers-list
                                    helm-source-recentf
                                    helm-source-bookmarks
                                    helm-source-bookmark-set
                                    helm-source-buffer-not-found))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Incidentally, Helm even provides an &lt;a href="http://tuhdo.github.io/helm-intro.html#orgheadline24" rel="nofollow"&gt;interface&lt;/a&gt; for the &lt;code&gt;top&lt;/code&gt; program via
  &lt;code&gt;helm-top&lt;/code&gt;. It also serves as an interface to popular search engines
  and over 100 websites such as &lt;code&gt;google, stackoverflow, ctan&lt;/code&gt;, and &lt;code&gt;arxiv&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(system-packages-ensure &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;surfraw&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt; ⇒  “M-x helm-surfraw” or “C-x c s”&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If we want to perform a google search, with interactive suggestions,
  then invoke &lt;code&gt;helm-google-suggest&lt;/code&gt; —which can be acted for other serves,
  such as Wikipedia or Youtube by &lt;code&gt;C-z&lt;/code&gt;. For more google specific options,
  there is the &lt;code&gt;google-this&lt;/code&gt; package.&lt;/p&gt;
&lt;p&gt;Let’s switch to a powerful searching mechanism – &lt;a href="https://github.com/ShingoFukuyama/helm-swoop"&gt;helm-swoop&lt;/a&gt;.  It allows us to
  not only search the current buffer but also the other buffers and to make live
  edits by pressing &lt;code&gt;C-c C-e&lt;/code&gt; when a search buffer exists. Incidentally, executing
  &lt;code&gt;C-s&lt;/code&gt; on a word, region, will search for that particular word, region; then make
  changes with &lt;code&gt;C-c C-e&lt;/code&gt; and apply them by &lt;code&gt;C-x C-s&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; helm-swoop
  &lt;span class="pl-c1"&gt;:bind&lt;/span&gt;  ((&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-s&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;     &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-c1"&gt;'helm-swoop&lt;/span&gt;)           &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; search current buffer&lt;/span&gt;
          (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-M-s&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;   &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-c1"&gt;'helm-multi-swoop-all&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Search all buffer&lt;/span&gt;
          &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Go back to last position where ‘helm-swoop’ was called&lt;/span&gt;
          (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-S-s&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-c1"&gt;'helm-swoop-back-to-last-point&lt;/span&gt;))
  &lt;span class="pl-c1"&gt;:custom&lt;/span&gt; (helm-swoop-speed-or-color &lt;span class="pl-c1"&gt;nil&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Give up colour for speed.&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
          (helm-swoop-split-with-multiple-windows &lt;span class="pl-c1"&gt;nil&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Do not split window inside the current window.&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;C-u 𝓃 C-s&lt;/code&gt; does a search but showing 𝓃 contextual lines!&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;helm-multi-swoop-all&lt;/code&gt;, &lt;code&gt;C-M-s&lt;/code&gt;, lets us grep files anywhere!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Finally, note that there is now a &lt;code&gt;M-x helm-info&lt;/code&gt; command to show documentation,
  possibly with examples, of the packages installed. For example,
  &lt;code&gt;M-x helm-info RET dash RET -parition RET&lt;/code&gt; to see how the parition function from the
  dash library works via examples ;-)&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-having-a-workspace-manager-in-emacs" class="anchor" aria-hidden="true" href="#having-a-workspace-manager-in-emacs"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Having a workspace manager in Emacs&lt;/h2&gt;
&lt;p&gt;I’ve loved using XMonad as a window tiling manager.  I’ve enjoyed the ability to
  segregate my tasks according to what ‘project’ I’m working on; such as research,
  marking, Emacs play, etc.  With &lt;a href="https://github.com/nex3/perspective-el"&gt;perspective&lt;/a&gt;, I can do the same thing :-)&lt;/p&gt;
&lt;p&gt;That is, I can have a million buffers, but only those that belong to a workspace
  will be visible when I’m switching between buffers, for example.
  ( The awesome-tab and centaur-tab, mentioned elsewhere here, can be used to
  achieve the same thing by ‘grouping buffers together’. )&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; perspective
  &lt;span class="pl-c1"&gt;:config&lt;/span&gt; &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Activate it.&lt;/span&gt;
          (persp-mode)
          &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; In the modeline, tell me which workspace I'm in.&lt;/span&gt;
          (persp-turn-on-modestring))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;All commands are prefixed by &lt;code&gt;C-x x&lt;/code&gt;; main commands:&lt;/p&gt;
&lt;dl&gt;
  &lt;dt&gt;&lt;code&gt;s, n/→, p/←&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;‘S’elect a workspace to go to or create it, or go to ‘n’ext
    one, or go to ‘p’revious one.&lt;/dd&gt;
  &lt;dt&gt;&lt;code&gt;c&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;Query a perspective to kill.&lt;/dd&gt;
  &lt;dt&gt;&lt;code&gt;r&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;Rename a perspective.&lt;/dd&gt;
  &lt;dt&gt;&lt;code&gt;A&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;Add buffer to current perspective &amp;amp; remove it from all others.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;As always, since we’ve installed &lt;code&gt;which-key&lt;/code&gt;, it suffices to press &lt;code&gt;C-x x&lt;/code&gt; then look
  at the resulting menu &lt;g-emoji class="g-emoji" alias="smiley" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f603.png"&gt;😃&lt;/g-emoji&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-excellent-pdf-viewer" class="anchor" aria-hidden="true" href="#excellent-pdf-viewer"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Excellent PDF Viewer&lt;/h2&gt;
&lt;p&gt;Let’s install the &lt;a href="https://github.com/politza/pdf-tools"&gt;pdf-tools&lt;/a&gt; library for viewing PDFs in Emacs.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; pdf-tools
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt; :init   (system-packages-ensure "pdf-tools")&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:custom&lt;/span&gt; (pdf-tools-handle-upgrades &lt;span class="pl-c1"&gt;nil&lt;/span&gt;)
          (pdf-info-epdfinfo-program &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/usr/local/bin/epdfinfo&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
  &lt;span class="pl-c1"&gt;:config&lt;/span&gt; (pdf-tools-install))

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Now PDFs opened in Emacs are in pdfview-mode.&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Besides the expected PDF viewing utilities, such as search, annotation, and continuous scrolling;
  with a simple mouse right-click, we can even select a ‘midnight’ rendering mode which may be
  easier on the eyes. For more, see the brief &lt;a href="https://www.dailymotion.com/video/x2bc1is" rel="nofollow"&gt;pdf-tools-tourdeforce&lt;/a&gt; demo.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-who-am-i-using-gnus-for-gmail" class="anchor" aria-hidden="true" href="#who-am-i-using-gnus-for-gmail"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Who am I? —Using Gnus for Gmail&lt;/h2&gt;
&lt;p&gt;Let’s set the following personal Emacs-wide variables —to be used in other
  locations besides email.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;setq&lt;/span&gt; user-full-name    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Musa Al-hassy&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
      user-mail-address &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;alhassy@gmail.com&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For some fun, run this cute method.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;animate-birthday-present&lt;/span&gt; user-full-name)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;By default, in Emacs, we may send mail: Write it in Emacs with &lt;code&gt;C-x m&lt;/code&gt;,
  then press &lt;code&gt;C-c C-c&lt;/code&gt; to have it sent via your OS’s default mailing system
  —mine appears to be Gmail via the browser. Or cancel sending mail with
  &lt;code&gt;C-c C-k&lt;/code&gt; —the same commands for org-capturing, discussed below (•̀ᴗ•́)و&lt;/p&gt;
&lt;p&gt;To send and read email in Emacs we use &lt;a href="https://en.wikipedia.org/wiki/Gnus" rel="nofollow"&gt;GNUS&lt;/a&gt;, which, like GNU itself, is a
  recursive acronym: GNUS Network User Service.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Execute, rather place in your init:
    &lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;setq&lt;/span&gt; message-send-mail-function &lt;span class="pl-c1"&gt;'smtpmail-send-it&lt;/span&gt;)
    &lt;/pre&gt;&lt;/div&gt;
    &lt;p&gt;Revert to the default OS mailing method by setting this variable to
      &lt;code&gt;mailclient-send-it&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Follow only the &lt;a href="https://www.emacswiki.org/emacs/GnusGmail#toc1" rel="nofollow"&gt;quickstart here&lt;/a&gt;; namely, make a file named ~~/.gnus~ containing:
    &lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;     &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; user-full-name and user-mail-address should be defined&lt;/span&gt;

(&lt;span class="pl-k"&gt;setq&lt;/span&gt; gnus-select-method
      '(nnimap &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;gmail&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
               (nnimap-address &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;imap.gmail.com&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
               (nnimap-server-port &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;imaps&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
               (nnimap-stream ssl)))

(&lt;span class="pl-k"&gt;setq&lt;/span&gt; smtpmail-smtp-server &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;smtp.gmail.com&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
      smtpmail-smtp-service &lt;span class="pl-c1"&gt;587&lt;/span&gt;
      gnus-ignored-newsgroups &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;^to&lt;span class="pl-cce"&gt;\\&lt;/span&gt;.&lt;span class="pl-cce"&gt;\\&lt;/span&gt;|^[0-9. ]+&lt;span class="pl-cce"&gt;\\&lt;/span&gt;( &lt;span class="pl-cce"&gt;\\&lt;/span&gt;|$&lt;span class="pl-cce"&gt;\\&lt;/span&gt;)&lt;span class="pl-cce"&gt;\\&lt;/span&gt;|^[&lt;span class="pl-cce"&gt;\"&lt;/span&gt;]&lt;span class="pl-cce"&gt;\"&lt;/span&gt;[#'()]&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    &lt;/pre&gt;&lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Enable “2 step authentication” for Gmail following &lt;a href="https://emacs.stackexchange.com/a/33309/10352" rel="nofollow"&gt;these&lt;/a&gt; instructions.&lt;/li&gt;
  &lt;li&gt;You will then obtain a secret password, the &lt;code&gt;x&lt;/code&gt; marks below, which you insert
    in a file named ~~/.authinfo~ as follows —using your email address.
    &lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;machine imap.gmail.com login alhassy@gmail.com password xxxxxxxxxxxxxxxx port imaps
machine smtp.gmail.com login alhassy@gmail.com password xxxxxxxxxxxxxxxx port 587
    &lt;/pre&gt;&lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;In Emacs, &lt;code&gt;M-x gnus&lt;/code&gt; to see what’s there.
    &lt;p&gt;Or compose mail with &lt;code&gt;C-x m&lt;/code&gt; then send it with &lt;code&gt;C-c C-c&lt;/code&gt;.&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;Press &lt;code&gt;C-h m&lt;/code&gt; to learn more about message mode for mail composition; or
        read the &lt;a href="https://www.gnus.org/manual/message.pdf" rel="nofollow"&gt;Message Manual&lt;/a&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; After startup, if Emacs is idle for 5seconds, then start Gnus.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Gnus is slow upon startup since it fetches all mails upon startup.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; (run-with-idle-timer 5 nil #'gnus)&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Learn more by reading &lt;a href="https://www.gnu.org/software/emacs/manual/html_mono/gnus.html#Top" rel="nofollow"&gt;The Gnus Newsreader Manual&lt;/a&gt;; also available within Emacs by
  &lt;code&gt;C-h i m gnus&lt;/code&gt; (•̀ᴗ•́)و&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Or look at the &lt;a href="https://www.gnu.org/software/emacs/refcards/pdf/gnus-refcard.pdf" rel="nofollow"&gt;Gnus Reference Card&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Or, less comprehensively, this &lt;a href="https://github.com/redguardtoo/mastering-emacs-in-one-year-guide/blob/master/gnus-guide-en.org#subscribe-groups"&gt;outline&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://www.emacswiki.org/emacs/GnusTutorial" rel="nofollow"&gt;EmacsWiki&lt;/a&gt; has a less technical and more user friendly tutorial.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-prettifications" class="anchor" aria-hidden="true" href="#prettifications"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Prettifications&lt;/h3&gt;
&lt;p&gt;Let’s add the icon  near my mail groups ^_^&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Fancy icons for Emacs&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Only do this once:&lt;/span&gt;
(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; all-the-icons)
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt; :config (all-the-icons-install-fonts 'install-without-asking)&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Make mail look pretty&lt;/span&gt;
(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; all-the-icons-gnus
  &lt;span class="pl-c1"&gt;:config&lt;/span&gt; (all-the-icons-gnus-setup))

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; While we're at it: Make dired, ‘dir’ectory ‘ed’itor, look pretty&lt;/span&gt;
(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; all-the-icons-dired
  &lt;span class="pl-c1"&gt;:hook&lt;/span&gt; (&lt;span class="pl-c1"&gt;dired-mode&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; all-the-icons-dired-mode))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next, let’s paste in some &lt;a href="http://groups.google.com/group/gnu.emacs.gnus/browse_thread/thread/a673a74356e7141f" rel="nofollow"&gt;eye-candy for Gnus&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;setq&lt;/span&gt; gnus-sum-thread-tree-vertical        &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;│&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
      gnus-sum-thread-tree-leaf-with-other &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;├─► &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
      gnus-sum-thread-tree-single-leaf     &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;╰─► &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
      gnus-summary-line-format
      (&lt;span class="pl-c1"&gt;concat&lt;/span&gt;
       &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;%0{%U%R%z%}&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
       &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;%3{│%}&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;%1{%d%}&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;%3{│%}&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
       &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;  &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
       &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;%4{%-20,20f%}&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
       &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;  &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
       &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;%3{│%}&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
       &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt; &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
       &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;%1{%B%}&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
       &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;%s&lt;span class="pl-cce"&gt;\n&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-super-terse-tutorial" class="anchor" aria-hidden="true" href="#super-terse-tutorial"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Super Terse Tutorial&lt;/h3&gt;
&lt;p&gt;In gnus, by default items you’ve looked at disappear —i.e., are archived.
  They can still be viewed in, say, your online browser if you like.
  In the &lt;code&gt;Group&lt;/code&gt; view, &lt;code&gt;R&lt;/code&gt; resets gnus, possibly retriving mail or alterations
  from other mail clients. &lt;code&gt;q&lt;/code&gt; exits gnus in &lt;code&gt;Group&lt;/code&gt; mode, &lt;code&gt;q&lt;/code&gt; exits the particular
  view to go back to summary mode. Only after pressing &lt;code&gt;q&lt;/code&gt; from within a group
  do changes take effect on articles —such as moves, reads, deletes, etc.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Expected keys: &lt;code&gt;RET&lt;/code&gt; enter/open an item, &lt;code&gt;q&lt;/code&gt; quit and return to previous view, &lt;code&gt;g&lt;/code&gt;
    refresh view —i.e., ‘g’et new articles.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;RET&lt;/code&gt;: Enter a group by pressing, well, the enter key.
    &lt;ul&gt;
      &lt;li&gt;Use &lt;code&gt;SPC&lt;/code&gt; to open a group and automatically one first article there.&lt;/li&gt;
      &lt;li&gt;Use &lt;code&gt;C-u RET&lt;/code&gt; to see all mail in a folder instead of just unread mail.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Only groups/folders with unread mail will be shown, use &lt;code&gt;L/l&lt;/code&gt; to toggle between
    listing all groups.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;SPC, DEL&lt;/code&gt; to scroll forward and backward; or &lt;code&gt;C-v, M-v&lt;/code&gt; as always.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;G G&lt;/code&gt;: Search mail at server side in the group buffer.
    &lt;ul&gt;
      &lt;li&gt;Limit search to particular folders/groups by marking them with &lt;code&gt;#&lt;/code&gt;, or
        unmarking them with &lt;code&gt;M-#&lt;/code&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code&gt;/ /,a:&lt;/code&gt; Filter mail according to subject or author; there are many
    other options, see &lt;a href="https://www.gnu.org/software/emacs/manual/html_mono/gnus.html#Limiting" rel="nofollow"&gt;§3.8 Limiting&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;d&lt;/code&gt;:  Mark an article as done, i.e., read it and it can be archived.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;!&lt;/code&gt;: Mark an article as read, but to be kept around —e.g., you have not
    replied to it, or it requires more reading at a later time.
    &lt;p&gt;This lets us read mail offline; cached mail is found at &lt;code&gt;~/News/cache/&lt;/code&gt;.&lt;/p&gt;
    &lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;setq&lt;/span&gt; gnus-use-cache &lt;span class="pl-c1"&gt;'use-as-much-cache-as-possible&lt;/span&gt;)
    &lt;/pre&gt;&lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code&gt;B m&lt;/code&gt;:  Move an article, in its current state, to another group —i.e.,
    ‘label’ using Gmail parlance.
    &lt;ul&gt;
      &lt;li&gt;Something to consider doing when finished with an article.&lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;To delete an article, simply move it to ‘trash’ —of course this will delete it
      in other mail clients as well. There is no return from trash.&lt;/p&gt;
    &lt;p&gt;Emails can always be archieved —never delete, maybe?&lt;/p&gt;
    &lt;p&gt;Anyhow, &lt;code&gt;B m Trash&lt;/code&gt; is too verbose, let’s just use &lt;code&gt;t&lt;/code&gt; for “trash”:&lt;/p&gt;
    &lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(bind-key &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;t&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
          (&lt;span class="pl-k"&gt;lambda&lt;/span&gt; (&lt;span class="pl-v"&gt;N&lt;/span&gt;) (&lt;span class="pl-k"&gt;interactive&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;P&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) (gnus-summary-move-article N &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;[Gmail]/Trash&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
          gnus-summary-mode-map)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Orginally: t ⇒ gnus-summary-toggle-header&lt;/span&gt;
    &lt;/pre&gt;&lt;/div&gt;
    &lt;ul&gt;
      &lt;li&gt;Select and deselect many articles before
        moving them by pressing &lt;code&gt;#&lt;/code&gt; and &lt;code&gt;M-#&lt;/code&gt;, respectively, anywhere on the entry.&lt;/li&gt;
      &lt;li&gt;As usual, you can mark a region, &lt;code&gt;C-SPC&lt;/code&gt;, then move all entries therein.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code&gt;R, r&lt;/code&gt;: Reply with sender’s quoted text in place, or without but
    still visible in an adjacent buffer.
    &lt;ul&gt;
      &lt;li&gt;Likewise &lt;code&gt;S W&lt;/code&gt; or &lt;code&gt;S w&lt;/code&gt; to reply all, ‘wide reply’, with or without quoted text.&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;C-c C-z&lt;/code&gt; Delete everything from current position till the end.&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;C-c C-e&lt;/code&gt; Replace selected region with ‘[…]’; when omitting parts of quoted text.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Press &lt;code&gt;m&lt;/code&gt; to compose mail; or &lt;code&gt;C-x m&lt;/code&gt; from anywhere in Emacs to do so.
    &lt;ul&gt;
      &lt;li&gt;&lt;code&gt;C-c C-c&lt;/code&gt; to send the mail.&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;S D e&lt;/code&gt; to resend an article as new mail: Alter body, subject, etc, before&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;C-c C-f&lt;/code&gt; to forward mail.
        sending.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code&gt;C-c C-a&lt;/code&gt; to attach a file; it’ll be embedded in the mail body as plaintext.
    &lt;ul&gt;
      &lt;li&gt;Press &lt;code&gt;o&lt;/code&gt; on an attachment to save it locally.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-capturing-mail-as-todonotes" class="anchor" aria-hidden="true" href="#capturing-mail-as-todonotes"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Capturing Mail as Todo/Notes&lt;/h3&gt;
&lt;p&gt;Sometime mail contains useful reference material or may be a self-contained
  task. Rather than using our inbox as a todo-list, we can copy the content of the
  mail and store it away in our todos/notes files.  &lt;a href="#Capturing-ideas-notes-without-interrupting-the-current-workflow"&gt;Capturing&lt;/a&gt; below, is a way to,
  well, capture ideas and notes &lt;i&gt;without&lt;/i&gt; interrupting the current workflow.  Below,
  in the section on capturing, we define &lt;code&gt;my/org-capture-buffer&lt;/code&gt; which quickly
  captures the contents of the current buffer as notes to store away.  We use that
  method in the article view of mail so that &lt;code&gt;c&lt;/code&gt; captures mail content with the
  option to provide additional remarks, and &lt;code&gt;C&lt;/code&gt; to silently do so without additional
  remarks.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(bind-key &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;c&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;#&lt;span class="pl-c1"&gt;'my/org-capture-buffer&lt;/span&gt;&lt;/span&gt; gnus-article-mode-map)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Orginally: c ⇒ gnus-summary-catchup-and-exit&lt;/span&gt;

(bind-key &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
          (&lt;span class="pl-k"&gt;lambda&lt;/span&gt; (&lt;span class="pl-c1"&gt;&amp;amp;optional&lt;/span&gt; &lt;span class="pl-v"&gt;keys&lt;/span&gt;)
            (&lt;span class="pl-k"&gt;interactive&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;P&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) (my/org-capture-buffer keys &lt;span class="pl-c1"&gt;'no-additional-remarks&lt;/span&gt;))
          gnus-article-mode-map)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Orginally: C ⇒ gnus-summary-cancel-article&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Gnus’ default &lt;code&gt;c&lt;/code&gt; only enables a bad habit: Subscribing to stuff that you don’t
  read, since you can mark all entries as read with one key. We now replace it
  with a ‘c’apturing mechanism that captures the current message as a todo or note
  for further processing. Likewise, the default &lt;code&gt;C&lt;/code&gt; is to cancel posting an article;
  we replace it to be a silent capture: Squirrel away informative mail content
  without adding additional remarks.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-auto-completing-mail-addresses" class="anchor" aria-hidden="true" href="#auto-completing-mail-addresses"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Auto-completing mail addresses&lt;/h3&gt;
&lt;p&gt;In order to get going quickly, using &lt;a href="https://github.com/redguardtoo/gmail2bbdb"&gt;gmail2bbdb&lt;/a&gt;, let’s convert our Gmail
  contacts into a BBDB file —the &lt;a href="http://bbdb.sourceforge.net/" rel="nofollow"&gt;Insidious Big Brother Database&lt;/a&gt; is an
  address-book application that we’ll use for E-mail; if you want to use it as a
  address-book application to keep track of contacts, notes, their organisation,
  etc, then consider additionally installing &lt;a href="https://github.com/emacs-helm/helm-bbdb"&gt;helm-bbdb&lt;/a&gt; which gives a nice menu
  interface.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;From the &lt;a href="https://www.google.com/contacts" rel="nofollow"&gt;Gmail Contacts page&lt;/a&gt;, obtain a &lt;code&gt;contacts.vcf&lt;/code&gt; file by clicking “More -&amp;gt;
    Export -&amp;gt; vCard format -&amp;gt; Export”.&lt;/li&gt;
  &lt;li&gt;Run command &lt;code&gt;M-x gmail2bbdb-import-file&lt;/code&gt; and select &lt;code&gt;contacts.vcf&lt;/code&gt;; a &lt;code&gt;bbdb&lt;/code&gt; file
    will be created in my Dropbox folder.&lt;/li&gt;
  &lt;li&gt;Press &lt;code&gt;C-x m&lt;/code&gt; then begin typing a contact’s name and you’ll be queried about
    setting up BBDB, say yes.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; gmail2bbdb
  &lt;span class="pl-c1"&gt;:custom&lt;/span&gt; (gmail2bbdb-bbdb-file &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;~/Dropbox/bbdb&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))

(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; bbdb
 &lt;span class="pl-c1"&gt;:demand&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;
 &lt;span class="pl-c1"&gt;:after&lt;/span&gt; company &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; The “com”plete “any”thig mode is set below in §Prose&lt;/span&gt;
 &lt;span class="pl-c1"&gt;:hook&lt;/span&gt;   (&lt;span class="pl-c1"&gt;message-mode&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; bbdb-insinuate-gnus)
         (gnus-startup-hook &lt;span class="pl-k"&gt;.&lt;/span&gt; bbdb-insinuate-gnus)
 &lt;span class="pl-c1"&gt;:custom&lt;/span&gt; (bbdb-file gmail2bbdb-bbdb-file)
         (bbdb-use-pop-up &lt;span class="pl-c1"&gt;t&lt;/span&gt;)                        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; allow popups for addresses&lt;/span&gt;
 &lt;span class="pl-c1"&gt;:config&lt;/span&gt; (&lt;span class="pl-c1"&gt;add-to-list&lt;/span&gt; &lt;span class="pl-c1"&gt;'company-backends&lt;/span&gt; &lt;span class="pl-c1"&gt;'company-bbdb&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here is an &lt;a href="http://emacs-fu.blogspot.com/2009/08/managing-e-mail-addresses-with-bbdb.html" rel="nofollow"&gt;emacs-fu&lt;/a&gt; article on managing e-mail addressed with bbdb.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-feeds-to-blogs" class="anchor" aria-hidden="true" href="#feeds-to-blogs"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Feeds to Blogs&lt;/h3&gt;
&lt;p&gt;One can easily subscribe to an RSS feed in Gnus: Just press &lt;code&gt;G R&lt;/code&gt; in the group
  buffer view, then follow the prompts. However, doing so programmatically is much
  harder.  Below is my heartfelt attempt at doing so —if you want a feed reader
  in Emacs that “just works”, then &lt;a href="https://github.com/skeeto/elfeed"&gt;elfeed&lt;/a&gt; is the way to go. When all is said and
  done, the code below had me reading Gnus implementations and led me to conclude
  that &lt;i&gt;Gnus has a great key-based interface but a /poor programming interface&lt;/i&gt; —or
  maybe I need to actually read the manual instead of frantically consulting
  source code.&lt;/p&gt;
&lt;p&gt;My homemade hack to getting tagged feeds programmatically into Gnus.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Always show Gnus items organised by topic.&lt;/span&gt;
(&lt;span class="pl-c1"&gt;add-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;'gnus-group-mode-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;'gnus-topic-mode&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; From Group view, press ^, then SPC on Gwene, then look for the site you want to follow.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; If it's not there, add it via the web interface http://gwene.org/&lt;/span&gt;
(&lt;span class="pl-c1"&gt;add-to-list&lt;/span&gt; &lt;span class="pl-c1"&gt;'gnus-secondary-select-methods&lt;/span&gt; '(nntp &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;news.gwene.org&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; E.g., http://nullprogram.com/feed/ uses an Atom feed which Gnus does not&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; support natively.  But it can be found on Gwene.&lt;/span&gt;

(&lt;span class="pl-k"&gt;setq&lt;/span&gt; my/gnus-feeds
      &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; topic  title  url&lt;/span&gt;
      '(Emacs &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C‘est La 𝒵&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; https://cestlaz.github.io/rss.xml
        Emacs &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Marcin Borkowski's Blog&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; http://mbork.pl&lt;span class="pl-c1"&gt;?a&lt;/span&gt;ction=rss
        Emacs &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Howardism&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; http://www.howardism.org/rss.xml
        Islam &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Shia Islam Blogspot&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; http://welcometoshiaislam.blogspot.com/feeds/posts/default&lt;span class="pl-c1"&gt;?a&lt;/span&gt;lt=rss
        Cats &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Hedonistic Learning&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; http://www.hedonisticlearning.com/rss.xml
        Cats &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Functorial Blog&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;  https://blog.functorial.com/feed.rss
        Programming &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Joel on Software&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; http://www.joelonsoftware.com/rss.xml
        Haskell &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Lysxia's Blog&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;  https://blog.poisson.chat/rss.xml))

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; If fubared, then:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; (ignore-errors (f-delete "~/News/" 'force) (f-delete "~/.newsrc.eld"))&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Execute this after a Gnus buffer has been opened.&lt;/span&gt;
(&lt;span class="pl-k"&gt;progn&lt;/span&gt;
(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; with-simulated-input)
(&lt;span class="pl-c1"&gt;loop&lt;/span&gt; for (topic title url)
      in (-partition &lt;span class="pl-c1"&gt;3&lt;/span&gt; my/gnus-feeds)
      &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; url &amp;amp; topic are symbols, make them strings.&lt;/span&gt;
      for url′   &lt;span class="pl-k"&gt;=&lt;/span&gt; (&lt;span class="pl-c1"&gt;symbol-name&lt;/span&gt; url)
      for topic′ &lt;span class="pl-k"&gt;=&lt;/span&gt; (&lt;span class="pl-c1"&gt;symbol-name&lt;/span&gt; topic)
      &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Avoid spacing issues by using a Unicode ghost space “ ”.&lt;/span&gt;
      for title′ &lt;span class="pl-k"&gt;=&lt;/span&gt; (&lt;span class="pl-c1"&gt;gnus-newsgroup-savable-name&lt;/span&gt; (s-replace &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt; &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt; &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; title))
      for input  &lt;span class="pl-k"&gt;=&lt;/span&gt; (&lt;span class="pl-c1"&gt;format&lt;/span&gt; &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-s"&gt;C-SPC C-a &lt;span class="pl-c1"&gt;%s&lt;/span&gt; RET RET&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt; title′)
      do
      &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt; cl-letf* (((symbol-function 'insert) (lambda (x) nil))) ;; see the (undo) below.&lt;/span&gt;
      &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Add the group&lt;/span&gt;
      (with-simulated-input input
        (gnus-group-make-rss-group url′))
      &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Ensure it lives in the right topic category.&lt;/span&gt;
      (&lt;span class="pl-k"&gt;if&lt;/span&gt; (&lt;span class="pl-k"&gt;equal&lt;/span&gt; &lt;span class="pl-c1"&gt;'no-such-topic&lt;/span&gt; (&lt;span class="pl-c1"&gt;alist-get&lt;/span&gt; topic gnus-topic-alist &lt;span class="pl-c1"&gt;'no-such-topic&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt; &lt;span class="pl-c1"&gt;#&lt;span class="pl-c1"&gt;'string&lt;span class="pl-k"&gt;=&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;))
        (&lt;span class="pl-k"&gt;push&lt;/span&gt; (&lt;span class="pl-k"&gt;list&lt;/span&gt; topic′ title′) gnus-topic-alist) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; make topic if it doesnt exist&lt;/span&gt;
      (&lt;span class="pl-k"&gt;setf&lt;/span&gt; (&lt;span class="pl-c1"&gt;alist-get&lt;/span&gt; topic′ gnus-topic-alist &lt;span class="pl-c1"&gt;'no-such-topic&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt; &lt;span class="pl-c1"&gt;#&lt;span class="pl-c1"&gt;'string&lt;span class="pl-k"&gt;=&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;)
            (&lt;span class="pl-k"&gt;cons&lt;/span&gt; title′ (&lt;span class="pl-c1"&gt;alist-get&lt;/span&gt; topic gnus-topic-alist &lt;span class="pl-c1"&gt;'no-such-topic&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt; &lt;span class="pl-c1"&gt;#&lt;span class="pl-c1"&gt;'string&lt;span class="pl-k"&gt;=&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;)))))
      &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Acknowledgement&lt;/span&gt;
      (&lt;span class="pl-c1"&gt;message&lt;/span&gt; &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-s"&gt;Now switch into the GNUS group buffer, and refresh the topics; i.e., t t.&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;))

      &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; The previous command performs an insert, since it's intended to be interactively&lt;/span&gt;
      &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; used; let's undo the insert.&lt;/span&gt;
      &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt; (undo-only)&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; (setq gnus-permanently-visible-groups ".*")&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Show topic alphabetically? The topics list is rendered in reverse order.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; (reverse (cl-sort gnus-topic-alist 'string-lessp :key 'car))&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ironically, I’ve decide that “no, I do not want to see my blogs in Emacs” for
  the same reasons I do not activelly use &lt;code&gt;M-x eww&lt;/code&gt; to browse the web in Emacs: I
  like seeing the colours, fonts, and math symbols that the authours have labored
  over to producing quality content. Apparently, I’m shallow and I’m okay with it
  —but not that shallow, since I’m constantly pushing Emacs which looks ugly by
  default but it’s unreasonably powerful.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-hydra-supply-a-prefix-only-once" class="anchor" aria-hidden="true" href="#hydra-supply-a-prefix-only-once"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Hydra: Supply a prefix only once&lt;/h2&gt;
&lt;p&gt;Sometimes we have keybindings that share a common prefix, say &lt;code&gt;C-c j&lt;/code&gt; and &lt;code&gt;C-c k&lt;/code&gt;,
  and we invoke them in an arbitrary sequence, it would be nice to invoke the
  shared prefix &lt;i&gt;only once&lt;/i&gt; thereby having:&lt;/p&gt;
&lt;table&gt;
  &lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;C-c j C-c j C-c k C-c k M-3 C-c j M-5 C-c k&lt;/code&gt;&lt;/td&gt;&lt;td&gt;≈&lt;/td&gt;&lt;td&gt;&lt;code&gt;C-c jjkk3j5k&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;ul&gt;
  &lt;li&gt;The &lt;a href="https://github.com/abo-abo/hydra#the-one-with-the-least-amount-of-code"&gt;“hydra-zoom”&lt;/a&gt; example from the documentation really showcases this utility.&lt;/li&gt;
  &lt;li&gt;After the prefix is supplied, all extensions are shown in a minibuffer.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Invoke all possible key extensions having a common prefix by&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; supplying the prefix only once.&lt;/span&gt;
(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; hydra)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; The standard syntax:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; (defhydra hydra-example (global-map "C-c v") ;; Prefix&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;;   ;; List of triples (extension method description) )&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;From the &lt;a href="https://github.com/abo-abo/hydra"&gt;Hydra&lt;/a&gt; repository is a ‘description for poets’:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Once you summon the Hydra through the prefixed binding (the body + any one
    head), all heads can be called in succession with only a short extension.&lt;/p&gt;
  &lt;p&gt;The Hydra is vanquished once Hercules, any binding that isn’t the Hydra’s head,
    arrives. Note that Hercules, besides vanquishing the Hydra, will still serve his
    original purpose, calling his proper command. This makes the Hydra very
    seamless, it’s like a minor mode that disables itself auto-magically.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;See &lt;a href="#Taking-a-tour-of-one's-edits"&gt;Taking a tour of one’s edits&lt;/a&gt; below for a small and useful example.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-quickly-pop-up-a-terminal-run-a-command-close-it-and-zsh" class="anchor" aria-hidden="true" href="#quickly-pop-up-a-terminal-run-a-command-close-it-and-zsh"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Quickly pop-up a terminal, run a command, close it —and zsh&lt;/h2&gt;
&lt;p&gt;&lt;i&gt;Pop up a terminal, do some work, then close it using the same command.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/kyagi/shell-pop-el"&gt;Shell-pop&lt;/a&gt; uses only one key action to work: If the buffer exists, and we’re in
  it, then hide it; else jump to it; otherwise create it if it doesn’t exit.  Use
  universal arguments, e.g., &lt;code&gt;C-u 5 C-t&lt;/code&gt;, to have multiple shells and the same
  universal arguments to pop those shells up, but &lt;code&gt;C-t&lt;/code&gt; to pop them away.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; shell-pop
  &lt;span class="pl-c1"&gt;:custom&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; This binding toggles popping up a shell, or moving cursour to the shell pop-up.&lt;/span&gt;
    (shell-pop-universal-key &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-t&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)

    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Percentage for shell-buffer window size.&lt;/span&gt;
    (shell-pop-window-size &lt;span class="pl-c1"&gt;30&lt;/span&gt;)

    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Position of the popped buffer: top, bottom, left, right, full.&lt;/span&gt;
    (shell-pop-window-position &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;bottom&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)

    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Please use an awesome shell.&lt;/span&gt;
    (shell-pop-term-shell &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/bin/zsh&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now that we have access to quick pop-up for a shell, let’s get a pretty and
  practical shell: &lt;a href="https://www.howtogeek.com/362409/what-is-zsh-and-why-should-you-use-it-instead-of-bash/" rel="nofollow"&gt;zsh&lt;/a&gt; along with the &lt;a href="https://ohmyz.sh/" rel="nofollow"&gt;Oh My Zsh&lt;/a&gt; community configurations give us:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;code&gt;brew install zsh&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;~sh -c “$(curl -fsSL &lt;a href="https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)”~" rel="nofollow"&gt;https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)”~&lt;/a&gt;
    &lt;p&gt;This installs everything ^_^&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Be default, Emacs please use zsh&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; E.g., M-x shell&lt;/span&gt;
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; shell-file-name &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/bin/zsh&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Out of the box, zsh comes with&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;git support; the left side indicates which branch we’re on and
    whether the repo is dirty, ✗.&lt;/li&gt;
  &lt;li&gt;Recursive path expansion; e.g., &lt;code&gt;/u/lo/b TAB&lt;/code&gt; expands to &lt;code&gt;/usr/local/bin/&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Over &lt;a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Plugins#apache2-macports"&gt;250+ Plugins&lt;/a&gt; and &lt;a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Themes"&gt;125+ Themes&lt;/a&gt; that are enabled by simply
    mentioning their name in the &lt;code&gt;.zshrc&lt;/code&gt; file.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The defaults have been good enough for me, for now —as all else is achieved
  via Emacs ;-)&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-restarting-emacs-keeping-buffers-open-across-sessions" class="anchor" aria-hidden="true" href="#restarting-emacs-keeping-buffers-open-across-sessions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Restarting Emacs —Keeping buffers open across sessions?&lt;/h2&gt;
&lt;p&gt;Sometimes I wish to close then reopen Emacs; unsurprisingly someone’s
  thought of implementing that.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Provides only the command “restart-emacs”.&lt;/span&gt;
(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; restart-emacs
  &lt;span class="pl-c1"&gt;:demand&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Let's define an alias so there's no need to remember the order.&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:config&lt;/span&gt; (&lt;span class="pl-c1"&gt;defalias&lt;/span&gt; &lt;span class="pl-c1"&gt;'emacs-restart&lt;/span&gt; &lt;span class="pl-c1"&gt;#&lt;span class="pl-c1"&gt;'restart-emacs&lt;/span&gt;&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The following is disabled. I found it a nuisance to have my files
  open across sessions —If I’m closing Emacs, it’s for a good reason.&lt;/p&gt;
&lt;pre&gt;;; Keep open files open across sessions.
(desktop-save-mode 1)
(setq desktop-restore-eager 10)
&lt;/pre&gt;
&lt;p&gt;Instead, let’s try the following: When you visit a file, point goes to the last
  place where it was when you previously visited the same file.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;setq-default&lt;/span&gt; save-place  &lt;span class="pl-c1"&gt;t&lt;/span&gt;)
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; save-place-file &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;~/.emacs.d/etc/saveplace&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-automatic-backups" class="anchor" aria-hidden="true" href="#automatic-backups"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Automatic Backups&lt;/h2&gt;
&lt;p&gt;By default, Emacs saves backup files —those ending in &lt;code&gt;~&lt;/code&gt;— in the current
  directory, thereby cluttering it up. Let’s place them in ~~/.emacs.d/backups~, in
  case we need to look for a backup; moreover, let’s keep old versions since
  there’s disk space to go around —what am I going to do with 500gigs when nearly
  all my ‘software’ is textfiles interpreted within Emacs &lt;g-emoji class="g-emoji" alias="smirk_cat" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f63c.png"&gt;😼&lt;/g-emoji&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; New location for backups.&lt;/span&gt;
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; backup-directory-alist '((&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;.&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;~/.emacs.d/backups&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)))

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Silently delete execess backup versions&lt;/span&gt;
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; delete-old-versions &lt;span class="pl-c1"&gt;t&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Only keep the last 1000 backups of a file.&lt;/span&gt;
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; kept-old-versions &lt;span class="pl-c1"&gt;1000&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Even version controlled files get to be backed up.&lt;/span&gt;
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; vc-make-backup-files &lt;span class="pl-c1"&gt;t&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Use version numbers for backup files.&lt;/span&gt;
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; version-control &lt;span class="pl-c1"&gt;t&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Why backups? Sometimes I may forget to submit a file, or edit, to my
  version control system, and it’d be nice to be able to see a local
  automatic backup. Whenever ‘I need space,’ then I simply empty
  the backup directory, if ever. That the backups are numbered is so sweet ^_^&lt;/p&gt;
&lt;p&gt;Like package installations, my backups are not kept in any version control
  system, like git; only locally.&lt;/p&gt;
&lt;p&gt;Let’s use an elementary diff system for backups.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; backup-walker
  &lt;span class="pl-c1"&gt;:commands&lt;/span&gt; backup-walker-start)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In a buffer that corresponds to a file, invoke &lt;code&gt;backup-walker-start&lt;/code&gt; to see a
  visual diff of changes &lt;i&gt;between&lt;/i&gt; versions.  By default, you see the changes
  ‘backwards’: Red means delete these things to get to the older version; i.e.,
  the red ‘-’ are newer items.&lt;/p&gt;
&lt;p&gt;Emacs only makes a backup the very first time a buffer is saved; I’d prefer
  Emacs makes backups everytime I save! —If I saved, that means I’m at an
  important checkpoint, so please check what I have so far as a backup!&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Make Emacs backup everytime I save&lt;/span&gt;

(&lt;span class="pl-k"&gt;defun&lt;/span&gt; &lt;span class="pl-e"&gt;my/force-backup-of-buffer&lt;/span&gt; ()
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Lie to Emacs, telling it the curent buffer has yet to be backed up.&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  (&lt;span class="pl-k"&gt;setq&lt;/span&gt; buffer-backed-up &lt;span class="pl-c1"&gt;nil&lt;/span&gt;))

(&lt;span class="pl-c1"&gt;add-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;'before-save-hook&lt;/span&gt;  &lt;span class="pl-c1"&gt;'my/force-backup-of-buffer&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It is intestesting to note that the above snippet could be modified to &lt;a href="https://stackoverflow.com/a/6918217/3550444" rel="nofollow"&gt;make our
  own backup system&lt;/a&gt;, were Emacs lacked one, by having our function simply save
  copies of our file —on each save— where the filename is augmented with a
  timestamp.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;diff-backup&lt;/code&gt; compares a file with its backup or vice versa.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-editor-documentation-with-contextual-information" class="anchor" aria-hidden="true" href="#editor-documentation-with-contextual-information"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Editor Documentation with Contextual Information&lt;/h2&gt;
&lt;p&gt;&lt;i&gt;Emacs is an extensible self-documenting editor!&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;Let’s use a helpful Emacs &lt;i&gt;documentation&lt;/i&gt; system that cleanly shows a lot of
  contextual information —then let’s &lt;i&gt;extend&lt;/i&gt; that to work as we want it to:
  &lt;code&gt;C-h o&lt;/code&gt; to describe the symbol at point.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; helpful)

(&lt;span class="pl-k"&gt;defun&lt;/span&gt; &lt;span class="pl-e"&gt;my/describe-symbol&lt;/span&gt; (&lt;span class="pl-v"&gt;symbol&lt;/span&gt;)
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;A “C-h o” replacement using “helpful”:&lt;/span&gt;
&lt;span class="pl-s"&gt;   If there's a thing at point, offer that as default search item.&lt;/span&gt;
&lt;span class="pl-s"&gt;&lt;/span&gt;
&lt;span class="pl-s"&gt;   If a prefix is provided, i.e., “C-u C-h o” then the built-in&lt;/span&gt;
&lt;span class="pl-s"&gt;   “describe-symbol” command is used.&lt;/span&gt;
&lt;span class="pl-s"&gt;&lt;/span&gt;
&lt;span class="pl-s"&gt;   ⇨ Pretty docstrings, with links and highlighting.&lt;/span&gt;
&lt;span class="pl-s"&gt;   ⇨ Source code of symbol.&lt;/span&gt;
&lt;span class="pl-s"&gt;   ⇨ Callers of function symbol.&lt;/span&gt;
&lt;span class="pl-s"&gt;   ⇨ Key bindings for function symbol.&lt;/span&gt;
&lt;span class="pl-s"&gt;   ⇨ Aliases.&lt;/span&gt;
&lt;span class="pl-s"&gt;   ⇨ Options to enable tracing, dissable, and forget/unbind the symbol!&lt;/span&gt;
&lt;span class="pl-s"&gt;  &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  (&lt;span class="pl-k"&gt;interactive&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;p&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
  (&lt;span class="pl-k"&gt;let*&lt;/span&gt; ((thing (&lt;span class="pl-c1"&gt;symbol-at-point&lt;/span&gt;))
         (val (&lt;span class="pl-c1"&gt;completing-read&lt;/span&gt;
               (&lt;span class="pl-c1"&gt;format&lt;/span&gt; &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-s"&gt;Describe symbol (default &lt;span class="pl-c1"&gt;%s&lt;/span&gt;): &lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt; thing)
               (&lt;span class="pl-c1"&gt;vconcat&lt;/span&gt; (&lt;span class="pl-k"&gt;list&lt;/span&gt; thing) obarray)
               (&lt;span class="pl-k"&gt;lambda&lt;/span&gt; (&lt;span class="pl-v"&gt;vv&lt;/span&gt;)
                 (&lt;span class="pl-c1"&gt;cl-some&lt;/span&gt; (&lt;span class="pl-k"&gt;lambda&lt;/span&gt; (&lt;span class="pl-v"&gt;x&lt;/span&gt;) (&lt;span class="pl-k"&gt;funcall&lt;/span&gt; (&lt;span class="pl-k"&gt;nth&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt; x) vv))
                          describe-symbol-backends))
               &lt;span class="pl-c1"&gt;t&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;))
         (it (&lt;span class="pl-c1"&gt;intern&lt;/span&gt; val)))
    (&lt;span class="pl-k"&gt;cond&lt;/span&gt;
     (&lt;span class="pl-c1"&gt;current-prefix-arg&lt;/span&gt; (&lt;span class="pl-k"&gt;funcall&lt;/span&gt; &lt;span class="pl-c1"&gt;#&lt;span class="pl-c1"&gt;'describe-symbol&lt;/span&gt;&lt;/span&gt; it))
     ((&lt;span class="pl-k"&gt;or&lt;/span&gt; (&lt;span class="pl-c1"&gt;functionp&lt;/span&gt; it) (&lt;span class="pl-c1"&gt;macrop&lt;/span&gt; it) (&lt;span class="pl-c1"&gt;commandp&lt;/span&gt; it)) (helpful-callable it))
     (&lt;span class="pl-c1"&gt;t&lt;/span&gt; (helpful-symbol it)))))

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Keybindings.&lt;/span&gt;
(&lt;span class="pl-c1"&gt;global-set-key&lt;/span&gt; (&lt;span class="pl-c1"&gt;kbd&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-h o&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;#&lt;span class="pl-c1"&gt;'my/describe-symbol&lt;/span&gt;&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;global-set-key&lt;/span&gt; (&lt;span class="pl-c1"&gt;kbd&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-h k&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;#&lt;span class="pl-c1"&gt;'helpful-key&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I like &lt;a href="https://github.com/Wilfred/helpful"&gt;helpful&lt;/a&gt; and wanted it to have the same behaviour as &lt;code&gt;C-h o&lt;/code&gt;, which
  &lt;code&gt;helpful-at-point&lt;/code&gt; does not achieve. The incantation above makes &lt;code&gt;C-h o&lt;/code&gt; use &lt;code&gt;helpful&lt;/code&gt;
  in that if the cursor is on a symbol, then it is offered to the user as a
  default search item for help, otherwise a plain search box for help
  appears. Using a universal argument lets us drop to the built-in help command.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-cosmetics" class="anchor" aria-hidden="true" href="#cosmetics"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Cosmetics&lt;/h1&gt;
&lt;p&gt;Upon startup, we want to be greeted with a useful, yet unobtrusive, message
  briefly detailing major system details. Moreover, the bottom-most area of
  the screen should display batter life, data, &amp;amp; time. Likewise, we may have
  a casual file explorer —primarily to show-off to newcomers, since great
  functionality is found with &lt;code&gt;M-x dired&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-startup-message-emacs--org-versions" class="anchor" aria-hidden="true" href="#startup-message-emacs--org-versions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Startup message: Emacs &amp;amp; Org versions&lt;/h2&gt;
&lt;p&gt;Let’s always welcome ourselves when Emacs begins with a helpful message.  For
  example, which user account is running and what are the version numbers of our
  primary tools.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Silence the usual message: Get more info using the about page via C-h C-a.&lt;/span&gt;
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; inhibit-startup-message &lt;span class="pl-c1"&gt;t&lt;/span&gt;)

(&lt;span class="pl-k"&gt;defun&lt;/span&gt; &lt;span class="pl-e"&gt;display-startup-echo-area-message&lt;/span&gt; ()
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;The message that is shown after ‘user-init-file’ is loaded.&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  (&lt;span class="pl-c1"&gt;message&lt;/span&gt;
      (&lt;span class="pl-c1"&gt;concat&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Welcome &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;      user-full-name
              &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;! Emacs &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;      emacs-version
              &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;; Org-mode &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;   org-version
              &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;; System &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;     (&lt;span class="pl-c1"&gt;system-name&lt;/span&gt;)
              &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;; Time &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;       (&lt;span class="pl-c1"&gt;emacs-init-time&lt;/span&gt;))))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now my startup message is,&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Welcome Musa Al-hassy! Emacs 26.1; Org-mode 9.3; System alhassy-air.local&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let’s change the Emacs frame to mention the name of the buffer in focus,
  as well as a nice ‘motto’:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Keep self motivated!&lt;/span&gt;
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; frame-title-format '(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;%b - Living The Dream (•̀ᴗ•́)و&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-my-to-do-list-the-initial-buffer-when-emacs-opens-up" class="anchor" aria-hidden="true" href="#my-to-do-list-the-initial-buffer-when-emacs-opens-up"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;My to-do list: The initial buffer when Emacs opens up&lt;/h2&gt;
&lt;p&gt;I almost always have Emacs open; I don’t need a dashboard, but would like to see
  my to-do list and my init file, side-by-side.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;find-file&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;~/Dropbox/todo.org&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;split-window-right&lt;/span&gt;)			  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; C-x 3&lt;/span&gt;
(&lt;span class="pl-c1"&gt;other-window&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;)                              &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; C-x 0&lt;/span&gt;
(&lt;span class="pl-k"&gt;let&lt;/span&gt; ((&lt;span class="pl-c1"&gt;enable-local-variables&lt;/span&gt; &lt;span class="pl-c1"&gt;:all&lt;/span&gt;)           &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Load *all* locals.&lt;/span&gt;
      (org-confirm-babel-evaluate &lt;span class="pl-c1"&gt;nil&lt;/span&gt;))       &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Eval *all* blocks.&lt;/span&gt;
  (&lt;span class="pl-c1"&gt;find-file&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;~/.emacs.d/init.org&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There is the neat-looking &lt;a href="https://github.com/emacs-dashboard/emacs-dashboard"&gt;emacs-dashboard&lt;/a&gt; package that provides an extensbile
  yet minimalist splash screen showing recent files, projects, and bookmarks.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-exquisite-themes" class="anchor" aria-hidden="true" href="#exquisite-themes"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Exquisite Themes&lt;/h2&gt;
&lt;p&gt;Emacs’ default theme leaves much to be desired:
  It does not look sleek and shiny, which usually
  leaves first-timers with a poor, shallow, impression of the system.&lt;/p&gt;
&lt;p&gt;Below we install a few themes that make Emacs look exquisite.
  We cycle between the chosen themes with &lt;code&gt;C-x t&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;M-x load-theme RET TAB&lt;/code&gt; shows all themes, including built-in ones,
    that may be loaded.&lt;/li&gt;
  &lt;li&gt;Loading multiple themes results in their pallets mixed.
    &lt;ul&gt;
      &lt;li&gt;&lt;code&gt;M-x disable-theme&lt;/code&gt; to remove a theme from the current pallet.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Treat all themes as safe; no query before use.&lt;/span&gt;
(&lt;span class="pl-k"&gt;setf&lt;/span&gt; custom-safe-themes &lt;span class="pl-c1"&gt;t&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Nice looking themes ^_^&lt;/span&gt;
(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; solarized-theme)
(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; doom-themes)
(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; spacemacs-common
  &lt;span class="pl-c1"&gt;:ensure&lt;/span&gt; spacemacs-theme)&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;The &lt;a href="https://github.com/hlissner/emacs-doom-themes/tree/screenshots"&gt;Doom Themes&lt;/a&gt; also look rather appealing.&lt;/li&gt;
  &lt;li&gt;A showcase of many themes can be found &lt;a href="https://emacsthemes.com/" rel="nofollow"&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Infinite list of my commonly used themes.&lt;/span&gt;
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; my/themes '(doom-solarized-light doom-vibrant spacemacs-light))
(&lt;span class="pl-k"&gt;setcdr&lt;/span&gt; (&lt;span class="pl-k"&gt;last&lt;/span&gt; my/themes) my/themes)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;“C-x t” to toggle between the personal themes.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;cl-defun&lt;/span&gt; &lt;span class="pl-e"&gt;my/disable-all-themes&lt;/span&gt; (&amp;amp;&lt;span class="pl-v"&gt;key&lt;/span&gt; (new-theme (&lt;span class="pl-k"&gt;pop&lt;/span&gt; my/themes)))
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Disable all themes and load NEW-THEME, which defaults from ‘my/themes’.&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  (&lt;span class="pl-k"&gt;interactive&lt;/span&gt;)
  (&lt;span class="pl-k"&gt;dolist&lt;/span&gt; (τ custom-enabled-themes)
    (&lt;span class="pl-c1"&gt;disable-theme&lt;/span&gt; τ))
  (&lt;span class="pl-k"&gt;when&lt;/span&gt; new-theme (&lt;span class="pl-c1"&gt;load-theme&lt;/span&gt; new-theme)))

(&lt;span class="pl-c1"&gt;defalias&lt;/span&gt; &lt;span class="pl-c1"&gt;'my/toggle-theme&lt;/span&gt; &lt;span class="pl-c1"&gt;#'&lt;/span&gt; my/disable-all-themes)
(&lt;span class="pl-c1"&gt;global-set-key&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-cce"&gt;\C&lt;/span&gt;-x&lt;span class="pl-cce"&gt;\ &lt;/span&gt;t&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'my/toggle-theme&lt;/span&gt;)
(my/toggle-theme)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Apparently, there’s already a package that accomplishes these goals and more:
  &lt;a href="https://github.com/myTerminal/theme-looper"&gt;theme-looper&lt;/a&gt;. I may switch to it, but for now my simple function above is
  slightly informative, to me at least, about how themes work and it does what I
  want.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-a-sleek--informative-mode-line" class="anchor" aria-hidden="true" href="#a-sleek--informative-mode-line"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;A sleek &amp;amp; informative mode line&lt;/h2&gt;
&lt;p&gt;The ‘modeline’ is a part near the bottom of Emacs that gives information about
  the current mode, as well as other matters —such as time &amp;amp; date, for example.&lt;/p&gt;
&lt;p&gt;Let’s have it also show remaining battery life, coloured green if charging
  and coloured yellow otherwise. It is important to note that
  this package is no longer maintained. It works on my machine.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;setq&lt;/span&gt; display-time-day-and-date &lt;span class="pl-c1"&gt;t&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;display-time&lt;/span&gt;)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; (display-battery-mode -1)&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Nope; let's use a fancy indicator …&lt;/span&gt;
(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; fancy-battery
  &lt;span class="pl-c1"&gt;:diminish&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:custom&lt;/span&gt; (fancy-battery-show-percentage  &lt;span class="pl-c1"&gt;t&lt;/span&gt;)
          (battery-update-interval       &lt;span class="pl-c1"&gt;15&lt;/span&gt;)
  &lt;span class="pl-c1"&gt;:config&lt;/span&gt; (fancy-battery-mode))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Likewise, let’s have the modeline display column numbers, but not line numbers.
  Instead, let’s have line numbers on the side of the buffer; moreover let’s have
  a uniform width for displaying line numbers, rather than having the width grow
  as necessary.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Following two taken care of in the spaceline package, below.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; (column-number-mode                 t)&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; (line-number-mode                   t)&lt;/span&gt;
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; display-line-numbers-width-start &lt;span class="pl-c1"&gt;t&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;global-display-line-numbers-mode&lt;/span&gt;      &lt;span class="pl-c1"&gt;t&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I may not use the spacemacs &lt;a href="https://www.emacswiki.org/emacs/StarterKits" rel="nofollow"&gt;starter kit&lt;/a&gt;, since I find spacemacs to “hide things”
  from me —whereas Emacs “encourages” me to learn more—, however it is a
  configuration and I enjoy reading Emacs configs in order to improve my own
  setup. From Spacemacs I’ve adopted Helm for list completion, its sleek light &amp;amp;
  dark themes, and its modified powerline setup.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; When using helm &amp;amp; info &amp;amp; default, mode line looks prettier.&lt;/span&gt;
(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; spaceline
  &lt;span class="pl-c1"&gt;:custom&lt;/span&gt; (spaceline-buffer-encoding-abbrev-p &lt;span class="pl-c1"&gt;nil&lt;/span&gt;)
          (spaceline-line-column-p &lt;span class="pl-c1"&gt;t&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Show “line-number : column-number” in modeline.&lt;/span&gt;
          (powerline-default-separator &lt;span class="pl-c1"&gt;'arrow&lt;/span&gt;)
  &lt;span class="pl-c1"&gt;:config&lt;/span&gt; (&lt;span class="pl-c1"&gt;require&lt;/span&gt; &lt;span class="pl-c1"&gt;'spaceline-config&lt;/span&gt;)
          (spaceline-helm-mode)
          (spaceline-info-mode)
          (spaceline-emacs-theme))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Other separators —of modeline information— that I’ve considered include
  ~’brace~ instead of an arrow, and ~’contour, ‘chamfer, ‘wave, ‘zigzag~ which look
  like browser tabs that are curved, boxed, wavy, or in the style of driftwood.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-never-lose-the-cursor" class="anchor" aria-hidden="true" href="#never-lose-the-cursor"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Never lose the cursor&lt;/h2&gt;
&lt;p&gt;Let’s have the entire line containing the cursour be slightly highlighted.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Make it very easy to see the line with the cursor.&lt;/span&gt;
(&lt;span class="pl-c1"&gt;global-hl-line-mode&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Moreover, we reduce the mental strain of locating the cursour when navigation happens:
  When we switch windows or scroll, for example, we get a wave of light near the cursor.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; beacon
  &lt;span class="pl-c1"&gt;:diminish&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:config&lt;/span&gt; (&lt;span class="pl-k"&gt;setq&lt;/span&gt; beacon-color &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;#666600&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
  &lt;span class="pl-c1"&gt;:hook&lt;/span&gt;   ((&lt;span class="pl-c1"&gt;org-mode&lt;/span&gt; text-mode) &lt;span class="pl-k"&gt;.&lt;/span&gt; beacon-mode))&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-dimming-unused-windows" class="anchor" aria-hidden="true" href="#dimming-unused-windows"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Dimming Unused Windows&lt;/h2&gt;
&lt;p&gt;Let’s dim windows, and even the whole Emacs frame, when not in use.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; dimmer
  &lt;span class="pl-c1"&gt;:config&lt;/span&gt; (dimmer-mode))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A more ‘fine-grained’ &lt;a href="https://github.com/larstvei/Focus"&gt;tool&lt;/a&gt; dims all text except the ‘paragraph’ you’re working
  on. It’s nifty, but not for me.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-buffer-names-are-necessarily-injective" class="anchor" aria-hidden="true" href="#buffer-names-are-necessarily-injective"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Buffer names are necessarily injective&lt;/h2&gt;
&lt;p&gt;By default when multiple files sharing the same name are opened, say for
  comparison from different directories, their buffers are named uniquely by
  having the format “⟨file-name⟩ &amp;lt;𝓃&amp;gt;”, for numbers 𝓃. It’d be more helpful
  to have the buffer names reflect their location.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Note that ‘uniquify’ is builtin.&lt;/span&gt;
(&lt;span class="pl-c1"&gt;require&lt;/span&gt; &lt;span class="pl-c1"&gt;'uniquify&lt;/span&gt;)
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; uniquify-separator &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;               &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; The separator in buffer names.&lt;/span&gt;
      uniquify-buffer-name-style &lt;span class="pl-c1"&gt;'forward&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; names/in/this/style&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that this does not affect cloning buffers, &lt;code&gt;C-x 4 c&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;( A function &lt;i&gt;f&lt;/i&gt; is &lt;i&gt;injective&lt;/i&gt; precisely when it’s &lt;i&gt;distinction-preserving&lt;/i&gt;; i.e.,
  &lt;i&gt;x ≠ y ≡ f x ≠ f y&lt;/i&gt;. We can tell whether two things are the same or not, by
  ‘zooming in’ on their particular property ‘f’, which may be easier to compare.
  E.g., object IDs, hashcodes, unique keys in database tables. )&lt;/p&gt;
&lt;p&gt;( Why am I bringing this up? I like math and seldom get to use it; so why not! )&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-flashing-when-something-goes-wrong-no-blinking" class="anchor" aria-hidden="true" href="#flashing-when-something-goes-wrong-no-blinking"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Flashing when something goes wrong —no blinking&lt;/h2&gt;
&lt;p&gt;Make top and bottom of screen flash when something unexpected happens thereby
  observing a warning message in the minibuffer. E.g., C-g, or calling an unbound
  key sequence, or misspelling a word.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;setq&lt;/span&gt; visible-bell &lt;span class="pl-c1"&gt;1&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Enable flashing mode-line on errors.  On MacOS, this shows a caution symbol ^_^&lt;/p&gt;
&lt;p&gt;A blinking cursor rushes me to type; let’s slow down.
  … Recentely I’m thinking that a blinking cursours prompts me to continue
  upwards and onwards.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;blink-cursor-mode&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-hiding-scrollbar-tool-bar-and-menu" class="anchor" aria-hidden="true" href="#hiding-scrollbar-tool-bar-and-menu"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Hiding Scrollbar, tool bar, and menu&lt;/h2&gt;
&lt;p&gt;As a laptop user, screen space is important, so let’s remove rarely used visual
  items.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;tool-bar-mode&lt;/span&gt;   &lt;span class="pl-c1"&gt;-1&lt;/span&gt;)  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; No large icons please&lt;/span&gt;
(&lt;span class="pl-c1"&gt;scroll-bar-mode&lt;/span&gt; &lt;span class="pl-c1"&gt;-1&lt;/span&gt;)  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; No visual indicator please&lt;/span&gt;
(&lt;span class="pl-c1"&gt;menu-bar-mode&lt;/span&gt;   &lt;span class="pl-c1"&gt;-1&lt;/span&gt;)  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; The Mac OS top pane has menu options&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-highlight--complete-parenthesis-pair-when-cursor-is-near--" class="anchor" aria-hidden="true" href="#highlight--complete-parenthesis-pair-when-cursor-is-near--"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Highlight &amp;amp; complete parenthesis pair when cursor is near ;-)&lt;/h2&gt;
&lt;p&gt;Highlight matching ‘parenthesis’ when near one of them.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;setq&lt;/span&gt; show-paren-delay  &lt;span class="pl-c1"&gt;0&lt;/span&gt;)
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; show-paren-style &lt;span class="pl-c1"&gt;'mixed&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;show-paren-mode&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Colour parens, and other delimiters, depending on their depth.
  Very useful for parens heavy languages like Lisp.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; rainbow-delimiters
  &lt;span class="pl-c1"&gt;:disabled&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:hook&lt;/span&gt; ((&lt;span class="pl-c1"&gt;org-mode&lt;/span&gt; prog-mode text-mode) &lt;span class="pl-k"&gt;.&lt;/span&gt; rainbow-delimiters-mode))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(blue (purple (forest (green (yellow (blue))))))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There is a powerful package called ‘smartparens’ for working with pair-able
  characters, but I’ve found it to be too much for my uses. Instead I’ll utilise
  the lightweight package &lt;code&gt;electric&lt;/code&gt;, which Emacs provides out of the box.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;electric-pair-mode&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It supports, by default, ACSII pairs &lt;code&gt;{}, [], ()&lt;/code&gt; and Unicode &lt;code&gt;‘’, “”, ⟪⟫, ⟨⟩&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;When writing Lisp, it is annoyong to have ‘&amp;lt;’ and ‘&amp;gt;’ be completed
  &lt;i&gt;and&lt;/i&gt; considered as pairs.  Let’s disassociate them from both notions.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; The ‘&amp;lt;’ and ‘&amp;gt;’ are not ‘parenthesis’, so give them no compleition.&lt;/span&gt;
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; electric-pair-inhibit-predicate
      (&lt;span class="pl-k"&gt;lambda&lt;/span&gt; (&lt;span class="pl-v"&gt;c&lt;/span&gt;)
        (&lt;span class="pl-k"&gt;or&lt;/span&gt; (&lt;span class="pl-k"&gt;member&lt;/span&gt; c '(&lt;span class="pl-c1"&gt;?&amp;lt;&lt;/span&gt; &lt;span class="pl-c1"&gt;?&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;?~&lt;/span&gt;)) (&lt;span class="pl-c1"&gt;electric-pair-default-inhibit&lt;/span&gt; c))))

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Treat ‘&amp;lt;’ and ‘&amp;gt;’ as if they were words, instead of ‘parenthesis’.&lt;/span&gt;
(&lt;span class="pl-c1"&gt;modify-syntax-entry&lt;/span&gt; &lt;span class="pl-c1"&gt;?&amp;lt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;w&amp;lt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;modify-syntax-entry&lt;/span&gt; &lt;span class="pl-c1"&gt;?&amp;gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;w&amp;gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;b&gt;Adding Org-emphasise markers for pair completion —Disabled.&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;Let’s add the org-emphasises markers: If we select a word then press &lt;code&gt;*&lt;/code&gt;, it
  becomes bold; likewise for &lt;code&gt;/&lt;/code&gt; for emphasise.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;setq&lt;/span&gt; electric-pair-pairs
         '((&lt;span class="pl-c1"&gt;?~&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-c1"&gt;?~&lt;/span&gt;)
           (&lt;span class="pl-c1"&gt;?*&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-c1"&gt;?*&lt;/span&gt;)
           (&lt;span class="pl-c1"&gt;?/&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-c1"&gt;?/&lt;/span&gt;)))

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Let's also, for example, avoid obtaining double ‘~’ and ‘/’ when searching for a file.&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Disable pairs when entering minibuffer&lt;/span&gt;
(&lt;span class="pl-c1"&gt;add-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;'minibuffer-setup-hook&lt;/span&gt; (&lt;span class="pl-k"&gt;lambda&lt;/span&gt; () (&lt;span class="pl-c1"&gt;electric-pair-mode&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt;)))

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Renable pairs when existing minibuffer&lt;/span&gt;
(&lt;span class="pl-c1"&gt;add-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;'minibuffer-exit-hook&lt;/span&gt; (&lt;span class="pl-k"&gt;lambda&lt;/span&gt; () (&lt;span class="pl-c1"&gt;electric-pair-mode&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;)))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I use ‘~’ and ‘/’ too much during file navigation, and ‘*’ when marking numerous
  Org headers, for which the ‘completed closing pair’ must tiresomely be deleted.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-neotree-directory-tree-listing" class="anchor" aria-hidden="true" href="#neotree-directory-tree-listing"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Neotree: Directory Tree Listing&lt;/h2&gt;
&lt;p&gt;We open a nifty file manager upon startup.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Sidebar for project file navigation&lt;/span&gt;
(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; neotree
  &lt;span class="pl-c1"&gt;:config&lt;/span&gt; (&lt;span class="pl-c1"&gt;global-set-key&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-cce"&gt;\C&lt;/span&gt;-x&lt;span class="pl-cce"&gt;\ &lt;/span&gt;d&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'neotree-toggle&lt;/span&gt;)
          (&lt;span class="pl-k"&gt;setq&lt;/span&gt; neo-theme &lt;span class="pl-c1"&gt;'icons&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Uses all-the-icons from § Booting Up&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Open it up upon startup.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; (neotree-toggle)&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;By default &lt;code&gt;C-x d&lt;/code&gt; invokes &lt;code&gt;dired&lt;/code&gt;, but I prefer &lt;code&gt;neotree&lt;/code&gt; for file
  management.&lt;/p&gt;
&lt;p&gt;⟨ Edit: As a naive user, this is what I thought; yet a year later,
  I’ve almost never used neotree. ⟩&lt;/p&gt;
&lt;p&gt;Useful navigational commands include&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;U&lt;/code&gt; to go up a directory.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;C-c C-c&lt;/code&gt; to change directory focus; &lt;code&gt;C-C c&lt;/code&gt; to type the directory out.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;?&lt;/code&gt; or &lt;code&gt;h&lt;/code&gt; to get help and &lt;code&gt;q&lt;/code&gt; to quit.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As always, to go to the neotree pane when it’s the only other window,
  execute &lt;code&gt;C-x o&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I &lt;i&gt;rarely&lt;/i&gt; make use of this feature; company mode &amp;amp; Helm together quickly provide
  an automatic replacement for nearly all of my uses.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Reminiscent of GUI file managers is &lt;a href="https://github.com/ralesi/ranger.el#features"&gt;ranger&lt;/a&gt;; e.g., it has multi-column
    display of parent directories along with a file preview mechanism.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-tabs" class="anchor" aria-hidden="true" href="#tabs"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tabs&lt;/h2&gt;
&lt;p&gt;I really like my Helm-supported &lt;code&gt;C-x b&lt;/code&gt;, but the visial appeal of a &lt;a href="https://github.com/manateelazycat/awesome-tab"&gt;tab bar&lt;/a&gt; for Emacs
  is interesting. Let’s try it out and see how long this lasts —it may be like Neotree:
  Something cute to show to others, but not as fast as the keyboard.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; awesome-tab
  &lt;span class="pl-c1"&gt;:disabled&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:quelpa&lt;/span&gt; (awesome-tab &lt;span class="pl-c1"&gt;:fetcher&lt;/span&gt; git &lt;span class="pl-c1"&gt;:url&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;https://github.com/manateelazycat/awesome-tab.git&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
  &lt;span class="pl-c1"&gt;:config&lt;/span&gt; (awesome-tab-mode &lt;span class="pl-c1"&gt;t&lt;/span&gt;))

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Show me /all/ the tabs at once, in one group.&lt;/span&gt;
(&lt;span class="pl-k"&gt;defun&lt;/span&gt; &lt;span class="pl-e"&gt;awesome-tab-buffer-groups&lt;/span&gt; ()
  (&lt;span class="pl-k"&gt;list&lt;/span&gt; (awesome-tab-get-group-name (&lt;span class="pl-c1"&gt;current-buffer&lt;/span&gt;))))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It’s been less than three days and I’ve found this utility to be unhelpful, to me anyhow.&lt;/p&gt;
&lt;p&gt;An alternative is &lt;a href="https://github.com/ema2159/centaur-tabs"&gt;centaur-tabs.&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-window-resizing-using-the-golden-ratio" class="anchor" aria-hidden="true" href="#window-resizing-using-the-golden-ratio"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Window resizing using the golden ratio&lt;/h2&gt;
&lt;p&gt;Let’s load the following package, which automatically resizes windows so that
  the window containing the cursor is the largest, according to the golden ratio.
  Consequently, the window we’re working with is nice and large yet the other windows
  are still readable.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; golden-ratio
  &lt;span class="pl-c1"&gt;:disabled&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:diminish&lt;/span&gt; golden-ratio-mode
  &lt;span class="pl-c1"&gt;:init&lt;/span&gt; (golden-ratio-mode &lt;span class="pl-c1"&gt;1&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After some time this got a bit annoying and I’m no longer  using this.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-persistent-scratch-buffer" class="anchor" aria-hidden="true" href="#persistent-scratch-buffer"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Persistent Scratch Buffer&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;*scratch*&lt;/code&gt; buffer is a nice playground for temporary data or experiments.&lt;/p&gt;
&lt;p&gt;However, by default its contents are not saved –which may be an issue if we
  have not relocated our playthings to their appropriate files. Whence let’s save
  &amp;amp; restore the scratch buffer by default.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; persistent-scratch
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; In this mode, the usual save key saves to the underlying persistent file.&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:bind&lt;/span&gt; (&lt;span class="pl-c1"&gt;:map&lt;/span&gt; persistent-scratch-mode-map
              (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-x C-s&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; persistent-scratch-save)))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We might accidentally close this buffer, so we could utilise the following.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;defun&lt;/span&gt; &lt;span class="pl-e"&gt;scratch&lt;/span&gt; ()
   &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Recreate the scratch buffer, loading any persistent state.&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
   (&lt;span class="pl-k"&gt;interactive&lt;/span&gt;)
   (&lt;span class="pl-c1"&gt;switch-to-buffer-other-window&lt;/span&gt; (&lt;span class="pl-c1"&gt;get-buffer-create&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;*scratch*&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
   (&lt;span class="pl-k"&gt;condition-case&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt; (persistent-scratch-restore) (&lt;span class="pl-c1"&gt;insert&lt;/span&gt; initial-scratch-message))
   (&lt;span class="pl-c1"&gt;org-mode&lt;/span&gt;)
   (persistent-scratch-mode)
   (persistent-scratch-autosave-mode &lt;span class="pl-c1"&gt;1&lt;/span&gt;))

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; This doubles as a quick way to avoid the common formula: C-x b RET *scratch*&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Upon startup, close the default scratch buffer and open one as specfied above&lt;/span&gt;
(&lt;span class="pl-c1"&gt;ignore-errors&lt;/span&gt; (&lt;span class="pl-c1"&gt;kill-buffer&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;*scratch*&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) (scratch))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I use Org-mode often, so that’s how I want things to appear.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;setq&lt;/span&gt; initial-scratch-message (&lt;span class="pl-c1"&gt;concat&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;#+Title: Persistent Scratch Buffer&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-cce"&gt;\n&lt;/span&gt;#&lt;span class="pl-cce"&gt;\n&lt;/span&gt;# Welcome! This’ a place for trying things out.&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-cce"&gt;\n&lt;/span&gt;#&lt;span class="pl-cce"&gt;\n&lt;/span&gt;# ⟨ ‘C-x C-s’ here saves to ~/.emacs.d/.persistent-scratch ⟩ &lt;span class="pl-cce"&gt;\n\n&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;h1&gt;&lt;a id="user-content-prose" class="anchor" aria-hidden="true" href="#prose"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Prose&lt;/h1&gt;
&lt;p&gt;Emacs can be setup with a spellchecker and other expected features of a word processing tool
  —however these features apply Emacs-wide since nearly everything is
  essentially text (•̀ᴗ•́)و&lt;/p&gt;
&lt;p&gt;Let’s start off by cleaning-up any accidental trailing whitespace and in other
  places upon save.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;add-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;'before-save-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;'whitespace-cleanup&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;Org-mode is a writer’s best friend; it’s large enough to deserve its own sections.&lt;/li&gt;
  &lt;li&gt;See &lt;a href="http://ergoemacs.org/emacs/whitespace-mode.html" rel="nofollow"&gt;here&lt;/a&gt; for making whitespace visible; including spaces, tabs, and newlines&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-fill-mode-word-wrapping" class="anchor" aria-hidden="true" href="#fill-mode-word-wrapping"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Fill-mode —Word Wrapping&lt;/h2&gt;
&lt;p&gt;In fill mode, when you type past the end of a line, Emacs automatically starts a
  new line, cleverly formatting paragraphs. This is a powerful form of “word
  wrap”.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;setq-default&lt;/span&gt; fill-column &lt;span class="pl-c1"&gt;80&lt;/span&gt;          &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Let's avoid going over 80 columns&lt;/span&gt;
              truncate-lines &lt;span class="pl-c1"&gt;nil&lt;/span&gt;      &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; I never want to scroll horizontally&lt;/span&gt;
              indent-tabs-mode &lt;span class="pl-c1"&gt;nil&lt;/span&gt;)   &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Use spaces instead of tabs&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Certain variables are sensibly local to a buffer, and so &lt;code&gt;setq&lt;/code&gt; only alters their
  value for one buffer. Using &lt;code&gt;setq-default&lt;/code&gt; we change a variable’s default value,
  in every buffer.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Wrap long lines when editing text&lt;/span&gt;
(&lt;span class="pl-c1"&gt;add-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;'text-mode-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;'turn-on-auto-fill&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;add-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;'org-mode-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;'turn-on-auto-fill&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Do not show the “Fill” indicator in the mode line.&lt;/span&gt;
(diminish &lt;span class="pl-c1"&gt;'auto-fill-function&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We may press &lt;code&gt;M-q&lt;/code&gt; to cleverly redistribute the line breaks within any paragraph,
  thereby making it look better. With a prefix argument, it justifies it as well
  —i.e., pads extra white space to make the paragraph appear rectangular.&lt;/p&gt;
&lt;p&gt;Note that &lt;code&gt;M-o M-s&lt;/code&gt; centres a line of text ;-) Fun stuff!&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-word-completion" class="anchor" aria-hidden="true" href="#word-completion"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Word Completion&lt;/h2&gt;
&lt;p&gt;Let’s enable &lt;a href="https://company-mode.github.io/" rel="nofollow"&gt;“complete anything” mode&lt;/a&gt; —it ought to start in half a second and
  only need two characters to get going, which means word suggestions are provided
  and so I need only type partial words then tab to get the full word!&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; company
  &lt;span class="pl-c1"&gt;:diminish&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:config&lt;/span&gt;
  (global-company-mode &lt;span class="pl-c1"&gt;1&lt;/span&gt;)
  (&lt;span class="pl-k"&gt;setq&lt;/span&gt; &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Only 2 letters required for completion to activate.&lt;/span&gt;
        company-minimum-prefix-length &lt;span class="pl-c1"&gt;2&lt;/span&gt;

        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Search other buffers for compleition candidates&lt;/span&gt;
        company-dabbrev-other-buffers &lt;span class="pl-c1"&gt;t&lt;/span&gt;
        company-dabbrev-code-other-buffers &lt;span class="pl-c1"&gt;t&lt;/span&gt;

        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Allow (lengthy) numbers to be eligible for completion.&lt;/span&gt;
        company-complete-number &lt;span class="pl-c1"&gt;t&lt;/span&gt;

        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; M-⟪num⟫ to select an option according to its number.&lt;/span&gt;
        company-show-numbers &lt;span class="pl-c1"&gt;t&lt;/span&gt;

        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Edge of the completion list cycles around.&lt;/span&gt;
        company-selection-wrap-around &lt;span class="pl-c1"&gt;t&lt;/span&gt;

        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Do not downcase completions by default.&lt;/span&gt;
        company-dabbrev-downcase &lt;span class="pl-c1"&gt;nil&lt;/span&gt;

        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Even if I write something with the ‘wrong’ case,&lt;/span&gt;
        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; provide the ‘correct’ casing.&lt;/span&gt;
        company-dabbrev-ignore-case &lt;span class="pl-c1"&gt;t&lt;/span&gt;

        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Immediately activate completion.&lt;/span&gt;
        company-idle-delay &lt;span class="pl-c1"&gt;0&lt;/span&gt;))

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; It's so fast that we don't need a key-binding!&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; (global-set-key (kbd "C-c h") 'company-complete)&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that &lt;code&gt;M-/&lt;/code&gt; goes through a sequence of completions.  Besides the
  arrow keys, we can also use &lt;code&gt;C-&lt;/code&gt; or &lt;code&gt;M-&lt;/code&gt; with &lt;code&gt;n, p&lt;/code&gt; to navigate the options. Note
  that &lt;a href="https://github.com/company-mode/company-mode/issues/360"&gt;by default&lt;/a&gt; company mode does not support completion for phrases containing
  hyphens —this can be altered, if desired.&lt;/p&gt;
&lt;p&gt;Besides boring word completion, let’s add support for &lt;a href="https://github.com/dunn/company-emoji"&gt;emojis&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; company-emoji
  &lt;span class="pl-c1"&gt;:config&lt;/span&gt; (&lt;span class="pl-c1"&gt;add-to-list&lt;/span&gt; &lt;span class="pl-c1"&gt;'company-backends&lt;/span&gt; &lt;span class="pl-c1"&gt;'company-emoji&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For example: &lt;g-emoji class="g-emoji" alias="pancakes" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f95e.png"&gt;🥞&lt;/g-emoji&gt; &lt;g-emoji class="g-emoji" alias="computer" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4bb.png"&gt;💻&lt;/g-emoji&gt; &lt;g-emoji class="g-emoji" alias="monkey_face" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f435.png"&gt;🐵&lt;/g-emoji&gt; &lt;g-emoji class="g-emoji" alias="email" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2709.png"&gt;✉️&lt;/g-emoji&gt;&lt;g-emoji class="g-emoji" alias="wink" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f609.png"&gt;😉&lt;/g-emoji&gt; &lt;g-emoji class="g-emoji" alias="dolphin" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f42c.png"&gt;🐬&lt;/g-emoji&gt; &lt;g-emoji class="g-emoji" alias="cactus" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f335.png"&gt;🌵&lt;/g-emoji&gt;.&lt;/p&gt;
&lt;p&gt;&lt;g-emoji class="g-emoji" alias="arrow_right" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/27a1.png"&gt;➡️&lt;/g-emoji&gt;On a new line, write &lt;code&gt;:&lt;/code&gt; then any letter to have a tool-tip appear.
  All emoji names are lowercase. ◀&lt;/p&gt;
&lt;p&gt;The libraries &lt;code&gt;emojify&lt;/code&gt; and &lt;code&gt;emojify-logos&lt;/code&gt; provides cool items like =:haskell: :emacs:&lt;/p&gt;Unfortunately they do not easily export to html with org-mode, so I’m not using them.
&lt;h2&gt;&lt;a id="user-content-fix-spelling-as-you-type-thesaurus--dictionary-too" class="anchor" aria-hidden="true" href="#fix-spelling-as-you-type-thesaurus--dictionary-too"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Fix spelling as you type —thesaurus &amp;amp; dictionary too!&lt;/h2&gt;
&lt;p&gt;I would like to check spelling on the fly.&lt;/p&gt;
&lt;dl&gt;
  &lt;dt&gt;&lt;code&gt;C-;&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;Cycle through corrections for word at point.&lt;/dd&gt;
  &lt;dt&gt;&lt;code&gt;M-$&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;Check and correct spelling of the word at point&lt;/dd&gt;
  &lt;dt&gt;&lt;code&gt;M-x ispell-change-dictionary RET TAB&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;To see what dictionaries are available.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;&lt;code&gt;flyspell-prog-mode&lt;/code&gt; enables spell checking for programming by only considering
  comments and strings.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; flyspell
  &lt;span class="pl-c1"&gt;:diminish&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:hook&lt;/span&gt; ((&lt;span class="pl-c1"&gt;prog-mode&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; flyspell-prog-mode)
         (&lt;span class="pl-c1"&gt;org-mode&lt;/span&gt; text-mode &lt;span class="pl-k"&gt;.&lt;/span&gt; flyspell-mode)))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Enabling fly-spell for text-mode enables it for org and latex modes since they
  derive from text-mode.&lt;/p&gt;
&lt;p&gt;Flyspell needs a spell checking tool, which is not included in Emacs.  We
  install &lt;code&gt;aspell&lt;/code&gt; spell checker using, say, homebrew via &lt;code&gt;brew install aspell&lt;/code&gt;.  Note
  that Emacs’ &lt;code&gt;ispell&lt;/code&gt; is the interface to such a command line spelling utility.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;setq&lt;/span&gt; ispell-program-name &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/usr/local/bin/aspell&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; ispell-dictionary &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;en_GB&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; set the default dictionary&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;[Disabled] Allow spelling support for CamlCase words like “EmacsIsCool”.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;setq&lt;/span&gt;  ispell-extra-args '(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;--sug-mode=ultra&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
                            &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;--run-together&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
                            &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;--run-together-limit=5&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
                            &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;--run-together-min=2&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let us select a correct spelling merely by clicking on a word
  —for the rare days I have a mouse.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;eval-after-load&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;flyspell&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  ' (&lt;span class="pl-k"&gt;progn&lt;/span&gt;
     (&lt;span class="pl-c1"&gt;define-key&lt;/span&gt; flyspell-mouse-map [down-mouse-3] &lt;span class="pl-c1"&gt;#&lt;span class="pl-c1"&gt;'flyspell-correct-word&lt;/span&gt;&lt;/span&gt;)
     (&lt;span class="pl-c1"&gt;define-key&lt;/span&gt; flyspell-mouse-map [mouse-3] &lt;span class="pl-c1"&gt;#&lt;span class="pl-c1"&gt;'undefined&lt;/span&gt;&lt;/span&gt;)))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Colour incorrect works; default is an underline.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;global-font-lock-mode&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;custom-set-faces&lt;/span&gt; '(&lt;span class="pl-c1"&gt;flyspell-incorrect&lt;/span&gt; ((&lt;span class="pl-c1"&gt;t&lt;/span&gt; (&lt;span class="pl-c1"&gt;:inverse-video&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;)))))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally, save to user dictionary without asking:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;setq&lt;/span&gt; ispell-silently-savep &lt;span class="pl-c1"&gt;t&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let’s keep track of my personal word set by having it be in my version controlled
  .emacs directory. &lt;a href="http://aspell.net/man-html/Format-of-the-Personal-and-Replacement-Dictionaries.html" rel="nofollow"&gt;Note&lt;/a&gt; that the default location is ~~/.[i|a]spell.DICT~ for
  a specified dictionary &lt;code&gt;DICT&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;setq&lt;/span&gt; ispell-personal-dictionary &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;~/.emacs.d/.aspell.en.pws&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Nowadays, I very rarely write non-literate programs, but if I do
  I’d like to check spelling only in comments/strings. E.g.,&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;add-hook&lt;/span&gt;          &lt;span class="pl-c1"&gt;'c-mode-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;'flyspell-prog-mode&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;add-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;'emacs-lisp-mode-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;'flyspell-prog-mode&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Use the thesaurus Emacs frontend &lt;a href="https://github.com/hpdeifel/synosaurus"&gt;Synosaurus&lt;/a&gt; to avoid unwarranted repetition.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; synosaurus
  &lt;span class="pl-c1"&gt;:diminish&lt;/span&gt; synosaurus-mode
  &lt;span class="pl-c1"&gt;:init&lt;/span&gt;    (synosaurus-mode)
  &lt;span class="pl-c1"&gt;:config&lt;/span&gt;  (&lt;span class="pl-k"&gt;setq&lt;/span&gt; synosaurus-choose-method &lt;span class="pl-c1"&gt;'popup&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; 'ido is default.&lt;/span&gt;
           (&lt;span class="pl-c1"&gt;global-set-key&lt;/span&gt; (&lt;span class="pl-c1"&gt;kbd&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;M-#&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;'synosaurus-choose-and-replace&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The thesaurus is powered by the Wordnet &lt;code&gt;wn&lt;/code&gt; tool, which can be invoked without an
  internet connection!&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; (shell-command "brew cask install xquartz &amp;amp;") ;; Dependency&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; (shell-command "brew install wordnet &amp;amp;")&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let’s use Wordnet as a dictionary via the &lt;a href="https://github.com/gromnitsky/wordnut"&gt;wordnut&lt;/a&gt; package.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; wordnut
 &lt;span class="pl-c1"&gt;:bind&lt;/span&gt; (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;M-!&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; wordnut-lookup-current-word))

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Use M-&amp;amp; for async shell commands.&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Use &lt;code&gt;M-↑,↓&lt;/code&gt; to navigate dictionary results, and &lt;code&gt;wordnut-search&lt;/code&gt; for a new search.&lt;/p&gt;
&lt;p&gt;An alternative to &lt;code&gt;wordnut&lt;/code&gt; is to use the lightweight &lt;code&gt;define-word&lt;/code&gt; package; which I
  think is not ideal since it provides way less information.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-touch-typing" class="anchor" aria-hidden="true" href="#touch-typing"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Touch Typing&lt;/h2&gt;
&lt;p&gt;Use this game to help you learn to spell words that you’re having trouble with;
  e.g., I have a file ~~/Dropbox/spelling.txt~ with words I have trouble spelling,
  which I open then run &lt;code&gt;M-x typing-of-emacs&lt;/code&gt; in order to improve spelling said
  words.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; The Typing Of Emacs, a game.&lt;/span&gt;
(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; typing-of-emacs
  &lt;span class="pl-c1"&gt;:quelpa&lt;/span&gt; (typing &lt;span class="pl-c1"&gt;:fetcher&lt;/span&gt; wiki &lt;span class="pl-c1"&gt;:url&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;https://www.emacswiki.org/emacs/typing.el&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Practice touch typing using &lt;a href="https://github.com/hagleitn/speed-type"&gt;speed-type&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; speed-type)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Running &lt;code&gt;M-x speed-type-region&lt;/code&gt; on a region of text, or &lt;code&gt;M-x speed-type-buffer&lt;/code&gt; on a
  whole buffer, or just &lt;code&gt;M-x speed-type-text&lt;/code&gt; will produce the selected region, buffer,
  or random text for practice. The timer begins when the first key is pressed
  and stats are shown when the last letter is entered.&lt;/p&gt;
&lt;p&gt;Other typing resources include:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://www.emacswiki.org/emacs/TypingOfEmacs" rel="nofollow"&gt;Typing of Emacs&lt;/a&gt; —an Emacs alternative to speed type, possibly more engaging.&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://alternativeto.net/software/klavaro/" rel="nofollow"&gt;Klavaro&lt;/a&gt; —a GUI based yet language-independent typing tutor.
    &lt;ul&gt;
      &lt;li&gt;I’m enjoying this tool in getting started with Arabic typing.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href="https://typing.io/" rel="nofollow"&gt;Typing.io&lt;/a&gt; is a tutor for coders: Lessons are based on open source code, such
    some XMonad written in Haskell or Linux written in C.&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://www.gnu.org/software/gtypist/index.html#downloading" rel="nofollow"&gt;GNU Typist&lt;/a&gt; —which is interactive in the terminal, so not ideal in Emacs–,&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To assist in language learning, it may be nice to have an Emacs
  &lt;a href="https://github.com/atykhonov/google-translate"&gt;interface&lt;/a&gt; to Google translate —e.g., invoke &lt;code&gt;google-translate-at-point&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; google-translate
 &lt;span class="pl-c1"&gt;:config&lt;/span&gt;
   (&lt;span class="pl-c1"&gt;global-set-key&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-cce"&gt;\C&lt;/span&gt;-ct&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'google-translate-at-point&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Select the following then &lt;code&gt;C-c t&lt;/code&gt;,&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Hey buddy, what’re you up to?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Then &lt;i&gt;detect language&lt;/i&gt; then &lt;i&gt;Arabic&lt;/i&gt; to obtain:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;مرحباً يا صديقي ، ماذا تفعل؟&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Neato &lt;g-emoji class="g-emoji" alias="astonished" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f632.png"&gt;😲&lt;/g-emoji&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-using-a-grammar--style-checker" class="anchor" aria-hidden="true" href="#using-a-grammar--style-checker"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Using a Grammar &amp;amp; Style Checker&lt;/h2&gt;
&lt;p&gt;Let’s install &lt;a href="https://github.com/mhayashi1120/Emacs-langtool"&gt;a grammar and style checker&lt;/a&gt;.
  We get the offline tool from the bottom of the &lt;a href="https://languagetool.org/" rel="nofollow"&gt;LanguageTool&lt;/a&gt; website, then relocate it
  as follows.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; langtool
 &lt;span class="pl-c1"&gt;:config&lt;/span&gt;
  (&lt;span class="pl-k"&gt;setq&lt;/span&gt; langtool-language-tool-jar
     &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;~/Applications/LanguageTool-4.5/languagetool-commandline.jar&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we can run &lt;code&gt;langtool-check&lt;/code&gt; on the subsequent grammatically incorrect
  text —which is from the LanguageTool website— which colours errors in red,
  when we click on them we get the reason why; then we may invoke
  &lt;code&gt;langtool-correct-buffer&lt;/code&gt; to quickly use the suggestions to fix each correction,
  and finally invoke &lt;code&gt;langtool-check-done&lt;/code&gt; to stop any remaining red colouring.&lt;/p&gt;
&lt;pre&gt;LanguageTool offers spell and grammar checking. Just paste your text here
and click the 'Check Text' button. Click the colored phrases for details
on potential errors. or use this text too see an few of of the problems
that LanguageTool can detecd. What do you thinks of grammar checkers?
Please not that they are not perfect. Style issues get a blue marker:
It's 5 P.M. in the afternoon. The weather was nice on Thursday, 27 June 2017
--uh oh, that's the wrong date ;-)
&lt;/pre&gt;
&lt;p&gt;By looking around the source code, I can do all three stages smoothly (•̀ᴗ•́)و&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Quickly check, correct, then clean up /region/ with M-^&lt;/span&gt;

(&lt;span class="pl-c1"&gt;add-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;'langtool-error-exists-hook&lt;/span&gt;
  (&lt;span class="pl-k"&gt;lambda&lt;/span&gt; ()
     (langtool-correct-buffer)
     (langtool-check-done)))

(&lt;span class="pl-c1"&gt;global-set-key&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-cce"&gt;\M&lt;/span&gt;-^&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
                (&lt;span class="pl-k"&gt;lambda&lt;/span&gt; ()
                  (&lt;span class="pl-k"&gt;interactive&lt;/span&gt;)
                  (&lt;span class="pl-c1"&gt;message&lt;/span&gt; &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-s"&gt;Grammar checking begun ...&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;)
                  (langtool-check)))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The checking command is silent, we added a bit of comforting acknowledgement to the user.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-lightweight-prose-proofchecking" class="anchor" aria-hidden="true" href="#lightweight-prose-proofchecking"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Lightweight Prose Proofchecking&lt;/h2&gt;
&lt;p&gt;Let’s &lt;a href="https://github.com/bnbeckwith/writegood-mode"&gt;write good&lt;/a&gt;!&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; writegood-mode
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Load this whenver I'm composing prose.&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:hook&lt;/span&gt; (&lt;span class="pl-c1"&gt;text-mode&lt;/span&gt; org-mode)
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Don't show me the “Wg” marker in the mode line&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:diminish&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Some additional weasel words.&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:config&lt;/span&gt;
  (--map (&lt;span class="pl-k"&gt;push&lt;/span&gt; it writegood-weasel-words)
         '(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;some&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;simple&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;simply&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;easy&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;often&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;easily&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;probably&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
           &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;clearly&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;               &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Is the premise undeniably true?&lt;/span&gt;
           &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;experience shows&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;      &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Whose? What kind? How does it do so?&lt;/span&gt;
           &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;may have&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;              &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; It may also have not!&lt;/span&gt;
           &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;it turns out that&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)))  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; How does it turn out so?&lt;/span&gt;
           &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; ↯ What is the evidence of highighted phrase? ↯&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Inspired by Matt Might’s &lt;a href="http://matt.might.net/articles/shell-scripts-for-passive-voice-weasel-words-duplicates/" rel="nofollow"&gt;3 shell scripts to improve your writing, or
  “My Ph.D. advisor rewrote himself in bash”&lt;/a&gt;, this Emacs interface
  emphasises, via underline, the following weaknesses in writing —so
  that I can fix them or decide that they are appropriate for the
  scenario.&lt;/p&gt;
&lt;p&gt;Sentences that cut out the following problems may become stronger
  —by being more terse or precise.&lt;/p&gt;
&lt;dl&gt;
  &lt;dt&gt;Weasel Words&lt;/dt&gt;&lt;dd&gt;
    Phrases that sound good without conveying information;
    such as vague precision or subjective phrases.
    &lt;p&gt;E.g., &lt;i&gt;a number of, surprisingly, very close&lt;/i&gt;.&lt;/p&gt;
    &lt;p&gt;It’s okay not to have exact details, but rather than “I don’t know”
      explain why not and what the next steps will be.&lt;/p&gt;
  &lt;/dd&gt;
  &lt;dt&gt;Passive Voice&lt;/dt&gt;&lt;dd&gt;
    Phrases wherein interest is in the object experiencing an action,
    rather than the subject that performs the action.
    &lt;ul&gt;
      &lt;li&gt;Bad: The house &lt;i&gt;was built by&lt;/i&gt; my father.&lt;/li&gt;
      &lt;li&gt;Good: My father &lt;i&gt;built&lt;/i&gt; this house.&lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;Likewise, including relevant or explanatory information as in “X
      guarantees Y” is an improvement over “Y is guaranteed”.&lt;/p&gt;
    &lt;p&gt;Sometimes the subject really is irrelevant, such as
      “We did X” whereas “X happened” suffices.&lt;/p&gt;
    &lt;p&gt;&lt;g-emoji class="g-emoji" alias="+1" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f44d.png"&gt;👍&lt;/g-emoji&gt; If the relevant subject is unclear and, also, the text reads
      better in the active, then change a phrase.&lt;/p&gt;
  &lt;/dd&gt;
  &lt;dt&gt;Duplicated Words&lt;/dt&gt;&lt;dd&gt;Occurrences of, say, “the the”.
    &lt;p&gt;Harder to catch manually, but easier mechanically ;-)&lt;/p&gt;
  &lt;/dd&gt;
&lt;/dl&gt;
&lt;h2&gt;&lt;a id="user-content-placeholder-text-for-learning--experimenting" class="anchor" aria-hidden="true" href="#placeholder-text-for-learning--experimenting"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Placeholder Text —For Learning &amp;amp; Experimenting&lt;/h2&gt;
&lt;p&gt;When learning about Emacs formatting commands, such as zap-to-char &lt;code&gt;M-z&lt;/code&gt;
  or transpose &lt;code&gt;M-t&lt;/code&gt;, it’s best to have filler text —even better when
  it’s automatically generated instead of typing it out ourselves. The
  following will give us a series of commands &lt;code&gt;lorem-ipsum-insert-⋯&lt;/code&gt; for
  inserting lists, sentences, paragraphs and using a prefix argument,
  with &lt;code&gt;C-u&lt;/code&gt;, we can request to generate any number of them.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; lorem-ipsum)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;‘Lorem’ is not a word itself, but it comes from the Latin ‘Dolorem Ipsum’
  which means “pain in and of itself”.&lt;/p&gt;
&lt;p&gt;See this &lt;a href="https://github.com/alhassy/emacs.d/blob/master/CheatSheet.pdf"&gt;Emacs Cheat Sheet&lt;/a&gt; to try out the textual navigation and formatting
  bindings on lorem ipsum, gibberish text.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-some-text-to-make-us-smile" class="anchor" aria-hidden="true" href="#some-text-to-make-us-smile"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Some text to make us smile&lt;/h2&gt;
&lt;p&gt;The  &lt;a href="https://github.com/davep/dad-joke.el"&gt;dad-joke&lt;/a&gt; queries &lt;a href="https://icanhazdadjoke.com" rel="nofollow"&gt;https://icanhazdadjoke.com&lt;/a&gt; to bring us some funny.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; dad-joke
  &lt;span class="pl-c1"&gt;:config&lt;/span&gt; (&lt;span class="pl-k"&gt;defun&lt;/span&gt; &lt;span class="pl-e"&gt;dad-joke&lt;/span&gt; () (&lt;span class="pl-k"&gt;interactive&lt;/span&gt;) (&lt;span class="pl-c1"&gt;insert&lt;/span&gt; (dad-joke-get))))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For example, &lt;code&gt;M-x dad-joke&lt;/code&gt; now inserts:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;What are the strongest days of the week? Saturday and Sunday…the rest are
    weekdays.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;&lt;a id="user-content-unicode-input-via-agda-input" class="anchor" aria-hidden="true" href="#unicode-input-via-agda-input"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Unicode Input via Agda Input&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://mazzo.li/posts/AgdaSort.html" rel="nofollow"&gt;Agda&lt;/a&gt; is one of my favourite languages, it’s like Haskell on steroids.  Let’s set
  it up for the main sake of its Unicode input —you may do likewise using TeX
  input.  ( &lt;a href="https://www.joelonsoftware.com/2003/10/08/the-absolute-minimum-every-software-developer-absolutely-positively-must-know-about-unicode-and-character-sets-no-excuses/" rel="nofollow"&gt;The Absolute Minimum Every Software Developer Absolutely, Positively
  Must Know About Unicode and Character Sets (No Excuses!)&lt;/a&gt; )&lt;/p&gt;
&lt;p&gt;Executing &lt;code&gt;agda-mode setup&lt;/code&gt; appends the following text to the &lt;code&gt;.emacs&lt;/code&gt; file.
  Let’s put it here ourselves.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;load-file&lt;/span&gt; (&lt;span class="pl-k"&gt;let&lt;/span&gt; ((&lt;span class="pl-c1"&gt;coding-system-for-read&lt;/span&gt; &lt;span class="pl-c1"&gt;'utf-8&lt;/span&gt;))
                (&lt;span class="pl-c1"&gt;shell-command-to-string&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/usr/local/bin/agda-mode locate&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I almost always want the &lt;code&gt;agda-mode&lt;/code&gt; input method —it’s like the TeX method, but better.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;require&lt;/span&gt; &lt;span class="pl-c1"&gt;'agda-input&lt;/span&gt;)
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; default-input-method &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Agda&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;toggle-input-method&lt;/span&gt;)  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; C-\&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;Unicode doesn’t intend to cover things that are achievable with markup, so only
    a limited subset of the alphabet is available as subscript; but all is available
    as superscript, except ‘q’.&lt;/p&gt;
  &lt;p&gt;ₐₑₕᵢⱼₖₗₘₙₒₚᵣₛₜᵤᵥₓ
    ⁰ ¹ ² ³ ⁴ ⁵ ⁶ ⁷ ⁸ ⁹ ⁺ ⁻ ⁼ ⁽ ⁾ ₀ ₁ ₂ ₃ ₄ ₅ ₆ ₇ ₈ ₉ ₊ ₋ ₌ ₍ ₎
    ᵃ ᵇ ᶜ ᵈ ᵉ ᶠ ᵍ ʰ ⁱ ʲ ᵏ ˡ ᵐ ⁿ ᵒ ᵖ ʳ ˢ ᵗ ᵘ ᵛ ʷ ˣ ʸ ᶻ
    ᴬ ᴮ ᴰ ᴱ ᴳ ᴴ ᴵ ᴶ ᴷ ᴸ ᴹ ᴺ ᴼ ᴾ ᴿ ᵀ ᵁ ⱽ ᵂ
    ᵅ ᵝ ᵞ ᵟ ᵋ ᶿ ᶥ ᶲ ᵠ ᵡ ᵦ ᵧ ᵨ ᵩ ᵪ&lt;/p&gt;
  &lt;p&gt;&lt;code&gt;brew cask install font-symbola&lt;/code&gt;
    ⇒ Includes fonts for subscripts; e.g., ₐₙₑₕᵢⱼₖₗₘₙₒₚₜₛ&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Below are my personal Agda input symbol translations;
  e.g., &lt;code&gt;\set → 𝒮ℯ𝓉&lt;/code&gt;. Note that we could give a symbol new Agda TeX binding
  interactively: &lt;code&gt;M-x customize-variable agda-input-user-translations&lt;/code&gt; then
  &lt;code&gt;INS&lt;/code&gt; then for key sequence type &lt;code&gt;set&lt;/code&gt; then &lt;code&gt;INS&lt;/code&gt; and for string paste &lt;code&gt;𝒮ℯ𝓉&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;add-to-list&lt;/span&gt; &lt;span class="pl-c1"&gt;'agda-input-user-translations&lt;/span&gt; '(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;set&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;𝒮ℯ𝓉&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Better yet, as a loop:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;loop&lt;/span&gt; for item
      in '(&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; categorial ;;&lt;/span&gt;
           (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;alg&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;𝒜𝓁ℊ&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
           (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;split&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;▵&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
           (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;join&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;▿&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
           (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;adj&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;⊣&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
           (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;;;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;﹔&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
           (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;;;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;⨾&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
           (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;;;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;∘&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
           &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; lattices ;;&lt;/span&gt;
           (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;meet&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;⊓&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
           (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;join&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;⊔&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
           &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; residuals&lt;/span&gt;
           (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;syq&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;╳&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
           (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;over&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;╱&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
           (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;under&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;╲&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
           &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Z-quantification range notation ;;&lt;/span&gt;
           &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; e.g., “∀ x ❙ R • P” ;;&lt;/span&gt;
           (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;|&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;❙&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
           (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;with&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;❙&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
           &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; adjunction isomorphism pair ;;&lt;/span&gt;
           (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;floor&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;⌊⌋&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
           (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;lower&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;⌊⌋&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
           (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;lad&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;⌊⌋&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
           (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;ceil&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;   &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;⌈⌉&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
           (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;raise&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;⌈⌉&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
           (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;rad&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;⌈⌉&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; more (key value) pairs here&lt;/span&gt;
        )
      do (&lt;span class="pl-c1"&gt;add-to-list&lt;/span&gt; &lt;span class="pl-c1"&gt;'agda-input-user-translations&lt;/span&gt; item))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Also some silly stuff:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Add to the list of translations using “emot” and the given, more specfic, name.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Whence, \emot shows all possible emotions.&lt;/span&gt;
(&lt;span class="pl-c1"&gt;loop&lt;/span&gt; for emot
      in `(&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; angry, cry, why-you-no&lt;/span&gt;
           (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;whyme&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;ლ(ಠ益ಠ)ლ&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;ヽ༼ಢ_ಢ༽ﾉ☂&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;щ(゜ロ゜щ)&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
           &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; confused, disapprove, dead, shrug&lt;/span&gt;
           (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;what&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;「(°ヘ°)&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;(ಠ_ಠ)&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;(✖╭╮✖)&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;¯&lt;span class="pl-cce"&gt;\\&lt;/span&gt;_(ツ)_/¯&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
           &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; dance, csi&lt;/span&gt;
           (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;cool&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;┏(-_-)┓┏(-_-)┛┗(-_-﻿ )┓&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
            ,(s-collapse-whitespace &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;•_•)&lt;/span&gt;
&lt;span class="pl-s"&gt;                                      ( •_•)&amp;gt;⌐■-■&lt;/span&gt;
&lt;span class="pl-s"&gt;                                      (⌐■_■)&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
           &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; love, pleased, success, yesss&lt;/span&gt;
           (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;smile&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;♥‿♥&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;(─‿‿─)&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;(•̀ᴗ•́)و&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;(งಠ_ಠ)ง&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
      do
      (&lt;span class="pl-c1"&gt;add-to-list&lt;/span&gt; &lt;span class="pl-c1"&gt;'agda-input-user-translations&lt;/span&gt; emot)
      (&lt;span class="pl-c1"&gt;add-to-list&lt;/span&gt; &lt;span class="pl-c1"&gt;'agda-input-user-translations&lt;/span&gt; (&lt;span class="pl-k"&gt;cons&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;emot&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; (&lt;span class="pl-k"&gt;cdr&lt;/span&gt; emot))))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally let’s effect such translations.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; activate translations&lt;/span&gt;
(agda-input-setup)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that the effect of &lt;a href="http://ergoemacs.org/emacs/emacs_n_unicode.html" rel="nofollow"&gt;Emacs unicode input&lt;/a&gt; could be approximated using
  &lt;code&gt;abbrev-mode&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-increasedecrease-text-size" class="anchor" aria-hidden="true" href="#increasedecrease-text-size"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Increase/decrease text size&lt;/h2&gt;
&lt;p&gt;The ‘usual’ text zoom keys &lt;code&gt;C-±&lt;/code&gt; …&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;global-set-key&lt;/span&gt; (&lt;span class="pl-c1"&gt;kbd&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-+&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;'text-scale-increase&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;global-set-key&lt;/span&gt; (&lt;span class="pl-c1"&gt;kbd&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C--&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;'text-scale-decrease&lt;/span&gt;)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; C-x C-0 restores the default font size&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If thou knowst the ELisp, forgive this shadowing of the &lt;code&gt;negative-argument&lt;/code&gt;
  … we’ve still got &lt;code&gt;M--&lt;/code&gt; though.&lt;/p&gt;
&lt;p&gt;Curious, this is one of the very first things I did when
  began using Emacs; yet, perhaps I would not have done
  it if I was simply told the defaults:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;C-x C-=,+&lt;/code&gt; increases text size&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;C-x C--&lt;/code&gt; decreases test size&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;C-x C-0&lt;/code&gt; restores it to the default size&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, the above snippet seems to save us of the prefix
  &lt;code&gt;C-x&lt;/code&gt; and we lose on using ‘=’ for text increase and worse we
  need the shift-key to get access to the ‘+’.&lt;/p&gt;
&lt;p&gt;I suppose this is just a habit inherited from using other tools. Fortunately, I
  did not inherit the need for the &lt;i&gt;common user access&lt;/i&gt; bindings &lt;code&gt;C-x&lt;/code&gt; kill, &lt;code&gt;C-c&lt;/code&gt; copy,
  &lt;code&gt;C-v&lt;/code&gt; paste, nor &lt;code&gt;C-z&lt;/code&gt; undo of other applications. If you’re interested, &lt;code&gt;M-x
  cua-mode&lt;/code&gt; to enable &lt;a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/CUA-Bindings.html" rel="nofollow"&gt;CUA Bindings&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-moving-text-around" class="anchor" aria-hidden="true" href="#moving-text-around"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Moving Text Around&lt;/h2&gt;
&lt;p&gt;This extends Org-mode’s &lt;code&gt;M-↑,↓&lt;/code&gt; to other modes, such as when coding.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; M-↑,↓ moves line, or marked region; prefix is how many lines.&lt;/span&gt;
(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; move-text)
(&lt;span class="pl-c1"&gt;move-text-default-bindings&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-enabling-camelcase-aware-editing-operations" class="anchor" aria-hidden="true" href="#enabling-camelcase-aware-editing-operations"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Enabling CamelCase Aware Editing Operations&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.gnu.org/software/emacs/manual/html_node/ccmode/Subword-Movement.html" rel="nofollow"&gt;Subword&lt;/a&gt; movement lets us treat “EmacsIsAwesome” as three words
  ─“Emacs”, “Is”, and “Awesome”─ which is desirable since such naming
  is common among coders. Now, for example, &lt;code&gt;M-f&lt;/code&gt; moves along each subword.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;global-subword-mode&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;)
(diminish  &lt;span class="pl-c1"&gt;'subword-mode&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-mouse-editing-support" class="anchor" aria-hidden="true" href="#mouse-editing-support"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Mouse Editing Support&lt;/h2&gt;
&lt;p&gt;Text selected with the mouse is automatically copied to clipboard.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;setq&lt;/span&gt; mouse-drag-copy-region &lt;span class="pl-c1"&gt;t&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-delete-selection-mode" class="anchor" aria-hidden="true" href="#delete-selection-mode"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Delete Selection Mode&lt;/h2&gt;
&lt;p&gt;Delete Selection mode lets you treat an Emacs region much like a typical text
  selection outside of Emacs: You can replace the active region.  We can delete
  selected text just by hitting the backspace key.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;delete-selection-mode&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-m-np-word-at-point-navigation" class="anchor" aria-hidden="true" href="#m-np-word-at-point-navigation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;code&gt;M-n,p&lt;/code&gt;: Word-at-Point Navigation&lt;/h2&gt;
&lt;p&gt;Let’s mimic the &lt;code&gt;C-n,p&lt;/code&gt; constructs from line to word, so that unoccupied &lt;code&gt;M-n,p&lt;/code&gt; now
  serve to take us to the next or previous instance of the word under the
  cursor. This is less intrusive than searching &lt;code&gt;C-s&lt;/code&gt; or listing all occurrences &lt;code&gt;M-s
  o&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; smartscan
  &lt;span class="pl-c1"&gt;:config&lt;/span&gt;
    (&lt;span class="pl-c1"&gt;global-set-key&lt;/span&gt; (&lt;span class="pl-c1"&gt;kbd&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;M-n&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;'smartscan-symbol-go-forward&lt;/span&gt;)
    (&lt;span class="pl-c1"&gt;global-set-key&lt;/span&gt; (&lt;span class="pl-c1"&gt;kbd&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;M-p&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;'smartscan-symbol-go-backward&lt;/span&gt;)
    (&lt;span class="pl-c1"&gt;global-set-key&lt;/span&gt; (&lt;span class="pl-c1"&gt;kbd&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;M-'&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;'my/symbol-replace&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Unfortunately, as it currently is, there is no universal argument support:
  &lt;code&gt;C-u 2 M-p&lt;/code&gt; does &lt;i&gt;not&lt;/i&gt; take you to the second previous instance of a word
  —the prefix is instead ignored.&lt;/p&gt;
&lt;p&gt;The default symbol replacement is &lt;a href="https://github.com/mickeynp/smart-scan/issues/23"&gt;over-zealous&lt;/a&gt; in that it replaces sub-terms
  occurring as parts of larger words. Let’s do something about that.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;defun&lt;/span&gt; &lt;span class="pl-e"&gt;my/symbol-replace&lt;/span&gt; (&lt;span class="pl-v"&gt;replacement&lt;/span&gt;)
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Replace all standalone symbols in the buffer matching the one at point.&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  (&lt;span class="pl-k"&gt;interactive&lt;/span&gt;  (&lt;span class="pl-k"&gt;list&lt;/span&gt; (&lt;span class="pl-c1"&gt;read-from-minibuffer&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Replacement for thing at point: &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;)))
  (&lt;span class="pl-c1"&gt;save-excursion&lt;/span&gt;
    (&lt;span class="pl-k"&gt;let&lt;/span&gt; ((symbol (&lt;span class="pl-k"&gt;or&lt;/span&gt; (&lt;span class="pl-c1"&gt;thing-at-point&lt;/span&gt; &lt;span class="pl-c1"&gt;'symbol&lt;/span&gt;) (&lt;span class="pl-c1"&gt;error&lt;/span&gt; &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-s"&gt;No symbol at point!&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;))))
      (&lt;span class="pl-c1"&gt;beginning-of-buffer&lt;/span&gt;)
      &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; (query-replace-regexp symbol replacement)&lt;/span&gt;
      (&lt;span class="pl-c1"&gt;replace-regexp&lt;/span&gt; (&lt;span class="pl-c1"&gt;format&lt;/span&gt; &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-s"&gt;&lt;span class="pl-cce"&gt;\\&lt;/span&gt;b&lt;span class="pl-c1"&gt;%s&lt;/span&gt;&lt;span class="pl-cce"&gt;\\&lt;/span&gt;b&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt; (&lt;span class="pl-c1"&gt;regexp-quote&lt;/span&gt; symbol)) replacement))))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Also …&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; C-n, next line, inserts newlines when at the end of the buffer&lt;/span&gt;
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; next-line-add-newlines &lt;span class="pl-c1"&gt;t&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-letter-based-navigation" class="anchor" aria-hidden="true" href="#letter-based-navigation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Letter-based Navigation&lt;/h2&gt;
&lt;p&gt;At a glance of possible positions, across windows,
  and a key to jump there is a feature provided to us by &lt;a href="https://github.com/winterTTr/ace-jump-mode/wiki/AceJump-FAQ"&gt;ace-jump&lt;/a&gt;
  —here is an &lt;a href="https://www.youtube.com/watch?feature=player_embedded&amp;amp;v=UZkpmegySnc#!" rel="nofollow"&gt;emacs-rocks 2-minute video&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For example, &lt;code&gt;C-c SPC m&lt;/code&gt; greys our all windows and places a red
  letter at the start of any word that begins with &lt;i&gt;m&lt;/i&gt;, then I may
  press a letter to jump to the associated position in the
  associated window. Using &lt;code&gt;C-u C-c SPC&lt;/code&gt; and &lt;code&gt;C-u C-u C-c SPC&lt;/code&gt; let
  me jump to any character or to any visible line.&lt;/p&gt;
&lt;p&gt;➩ Super simple use case: Fix your eyes on an occurence of a word, then &lt;code&gt;C-c SPC&lt;/code&gt;
  to quickly jump to it so as to edit the sentence in which it occurs.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;It’s like &lt;code&gt;C-s&lt;/code&gt; but more lightweight.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; ace-jump-mode
  &lt;span class="pl-c1"&gt;:config&lt;/span&gt; (bind-key* &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-c SPC&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'ace-jump-mode&lt;/span&gt;))

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; See ace-jump issues to configure for use of home row keys.&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There is a newer and somewhat more powerful package, &lt;a href="https://github.com/abo-abo/avy"&gt;avy&lt;/a&gt;, which accompishes the
  same goal.  It uses a tree style to jumipng: Locations are given two letter
  combinations, one presses one letter to jump to a group of text, then another
  letter to jump somewhere in that grouping. I prefer ace-jump since it greys
  everthing out, whereas avy surrounds jump locations with a box.
  Here is an &lt;a href="https://www.youtube.com/watch?v=zar4GsOBU0g" rel="nofollow"&gt;emacs-doom 6-minute video&lt;/a&gt; for avy.&lt;/p&gt;
&lt;p&gt;There is also &lt;a href="https://github.com/tam17aki/ace-isearch"&gt;ace-isearch&lt;/a&gt; for bridinging different navgiational methods —one
  begins incremental search, &lt;code&gt;s-f&lt;/code&gt;, then according to a pause and length of input,
  one of the navgiational methods, such as isearch or avy or helm-swoop, will be
  begun.  I’m okay with using &lt;code&gt;C-s&lt;/code&gt; for helm-swoop and &lt;code&gt;C-c SPC&lt;/code&gt; for ace-jump, and
  still have &lt;code&gt;s-f&lt;/code&gt; for incremental search, which I hardly use.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;What is bind-keys*&lt;/b&gt;?&lt;/p&gt;
&lt;p&gt;Major modes provide specfic use and so their bindings always take precedence
  over global bindings —e.g., the major mode binding may do what the global does
  but with extra mode-specfic behaviour, such as indentation. Other times, a major
  mode’s binding simply uses the same key presses with completely unrelated
  behaviour.  If we want to avoid having our global keybindings shadowed by a
  major mode, we may use the &lt;code&gt;bind-key*&lt;/code&gt; &lt;i&gt;macro&lt;/i&gt; of &lt;code&gt;use-package&lt;/code&gt;, or the &lt;code&gt;bind-keys*&lt;/code&gt;
  &lt;i&gt;macro&lt;/i&gt; when there are multiple keys; these are macros, not clauses.  —These
  essentially creates a dedicated minor mode behind the scenes, which saves us the
  work of &lt;a href="https://emacs.stackexchange.com/a/358/10352" rel="nofollow"&gt;doing it ourselves&lt;/a&gt;.&lt;/p&gt;
&lt;table&gt;
  &lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;(bind-keys* (k₁ . f₁) … (kₙ . fₙ))&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;≈&lt;/td&gt;&lt;td&gt;These keybindings override all minor modes that use keys &lt;code&gt;kᵢ&lt;/code&gt;.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2&gt;&lt;a id="user-content-c-c-e-np-taking-a-tour-of-ones-edits" class="anchor" aria-hidden="true" href="#c-c-e-np-taking-a-tour-of-ones-edits"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;code&gt;C-c e n,p&lt;/code&gt;: Taking a tour of one’s edits&lt;/h2&gt;
&lt;p&gt;This package allows us to move around the edit points of a buffer
  &lt;i&gt;without&lt;/i&gt; actually undoing anything. We even obtain a brief description
  of what happend at each edit point.
  This seems useful for when I get interrupted or lose my train of
  thought: Just press &lt;code&gt;C-c e p&lt;/code&gt; to see what I did recently and where
  —the “e” is for “e”dit.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Give me a description of the change made at a particular stop.&lt;/span&gt;
(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; goto-chg
  &lt;span class="pl-c1"&gt;:init&lt;/span&gt; (&lt;span class="pl-k"&gt;setq&lt;/span&gt; glc-default-span &lt;span class="pl-c1"&gt;0&lt;/span&gt;))

(defhydra hydra-edits (&lt;span class="pl-c1"&gt;global-map&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-c e&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
  (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;p&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; goto-last-change &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Goto nᵗʰ last change&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
  (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;n&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; goto-last-change-reverse &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Goto more recent change&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Compare this with &lt;code&gt;C-x u&lt;/code&gt;, or &lt;code&gt;undo-tree-visualise&lt;/code&gt;, wherein undos are actually performed.&lt;/p&gt;
&lt;p&gt;Notice, as a hydra, I can use &lt;code&gt;C-c e&lt;/code&gt; followed by any combination of
  &lt;code&gt;p&lt;/code&gt; and &lt;code&gt;n&lt;/code&gt; to navigate my recent edits &lt;i&gt;without&lt;/i&gt; having to supply the prefix
  each time.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-org-mode-administrivia" class="anchor" aria-hidden="true" href="#org-mode-administrivia"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Org-Mode Administrivia&lt;/h1&gt;
&lt;p&gt;Let’s get Org-mode setup so that we can quickly move between headings and
  org-blocks —~n,p~ on heading starts and &lt;code&gt;s-n,p&lt;/code&gt; on blocks—, then let’s prettify
  the leading stars of headings, Org’s formatting delimiters, and even its blocks
  delimiters by making them less intrusive thereby ‘fading into the background’
  and drawing minimal attention.  This has been useful when promoting Org-mode by
  sharing my screen with others.
  Let’s obtain Org-mode along with the extras that allow us to ignore
  heading names, but still utilise their contents —e.g., such as a heading
  named ‘preamble’ that contains org-mode setup for a file.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; &lt;span class="pl-c1"&gt;org&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:ensure&lt;/span&gt; org-plus-contrib
  &lt;span class="pl-c1"&gt;:config&lt;/span&gt;
  (&lt;span class="pl-c1"&gt;require&lt;/span&gt; &lt;span class="pl-c1"&gt;'ox-extra&lt;/span&gt;)
  (ox-extras-activate '(ignore-headlines)))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;org-plus-contrib&lt;/code&gt; contain the files that are included with Emacs plus all
  contributions from the &lt;a href="https://code.orgmode.org/bzg/org-mode/src/master/contrib" rel="nofollow"&gt;org-mode repoistory&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Use the &lt;code&gt;:ignore:&lt;/code&gt; tag on headlines you’d like to have ignored, while not
    ignoring their content.&lt;/li&gt;
  &lt;li&gt;Use the &lt;code&gt;:noexport:&lt;/code&gt; tag to omit a headline &lt;i&gt;and&lt;/i&gt; its contents.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Replace the content marker, “⋯”, with a nice unicode arrow.&lt;/span&gt;
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; &lt;span class="pl-c1"&gt;org-ellipsis&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt; ⤵&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Fold all source blocks on startup.&lt;/span&gt;
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; org-hide-block-startup &lt;span class="pl-c1"&gt;t&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Lists may be labelled with letters.&lt;/span&gt;
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; org-list-allow-alphabetical &lt;span class="pl-c1"&gt;t&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Avoid accidentally editing folded regions, say by adding text after an Org “⋯”.&lt;/span&gt;
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; org-catch-invisible-edits &lt;span class="pl-c1"&gt;'show&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; I use indentation-sensitive programming languages.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Tangling should preserve my indentation.&lt;/span&gt;
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; org-src-preserve-indentation &lt;span class="pl-c1"&gt;t&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Tab should do indent in code blocks&lt;/span&gt;
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; org-src-tab-acts-natively &lt;span class="pl-c1"&gt;t&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Give quote and verse blocks a nice look.&lt;/span&gt;
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; org-fontify-quote-and-verse-blocks &lt;span class="pl-c1"&gt;t&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Pressing ENTER on a link should follow it.&lt;/span&gt;
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; org-return-follows-link &lt;span class="pl-c1"&gt;t&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I rarely use tables, but here is a useful &lt;a href="http://notesyoujustmightwanttosave.blogspot.com/" rel="nofollow"&gt;Org-Mode Table Editing Cheatsheet&lt;/a&gt; and
  a &lt;a href="http://www.howardism.org/Technical/Emacs/spreadsheet.html" rel="nofollow"&gt;friendly tutorial&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Moreover, since I end up using org-mode most of the time, let’s make that the
  default mode.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;setq&lt;/span&gt; initial-major-mode &lt;span class="pl-c1"&gt;'org-mode&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-executing-code-from-src-blocks" class="anchor" aria-hidden="true" href="#executing-code-from-src-blocks"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Executing code from &lt;code&gt;src&lt;/code&gt; blocks&lt;/h2&gt;
&lt;p&gt;For example, to execute a shell command in Emacs, write a &lt;code&gt;src&lt;/code&gt; with a shell
  command, then &lt;code&gt;C-c c-c&lt;/code&gt; to see the results.  Emacs will generally query you to
  ensure you’re confident about executing the (possibly dangerous) code block;
  let’s stop that:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Seamless use of babel: No confirmation upon execution.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Downside: Could accidentally evaluate harmful code.&lt;/span&gt;
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; org-confirm-babel-evaluate &lt;span class="pl-c1"&gt;nil&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A worked out example can be obtained as follows: &lt;code&gt;&amp;lt;g TAB&lt;/code&gt; then &lt;code&gt;C-c C-C&lt;/code&gt; to make a nice
  simple graph —the code for this is in the next section.&lt;/p&gt;
&lt;p&gt;Some initial languages we want org-babel to support:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt; (&lt;span class="pl-c1"&gt;org-babel-do-load-languages&lt;/span&gt;
   &lt;span class="pl-c1"&gt;'org-babel-load-languages&lt;/span&gt;
   '((emacs-lisp &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;)
     (&lt;span class="pl-c1"&gt;shell&lt;/span&gt;      &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;)
     (python     &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;)
     (haskell    &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;)
     (ruby       &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;)
     (ocaml      &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;)
     (C          &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;)  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Captial “C” gives access to C, C++, D&lt;/span&gt;
     (dot        &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;)
     (latex      &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;)
     (&lt;span class="pl-c1"&gt;org&lt;/span&gt;        &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;)
     (makefile   &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;)))

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Preserve my indentation for source code during export.&lt;/span&gt;
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; org-src-preserve-indentation &lt;span class="pl-c1"&gt;t&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; The export process hangs Emacs, let's avoid this.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; MA: For one reason or another, this crashes more than I'd like.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; (setq org-export-in-background t)&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;More languages can be added using &lt;code&gt;add-to-list&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-high-speed-literate-programming" class="anchor" aria-hidden="true" href="#high-speed-literate-programming"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;High Speed Literate Programming&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-manipulating-sections" class="anchor" aria-hidden="true" href="#manipulating-sections"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Manipulating Sections&lt;/h3&gt;
&lt;p&gt;Let’s enable the &lt;a href="http://notesyoujustmightwanttosave.blogspot.com/2011/12/org-speed-keys.html" rel="nofollow"&gt;Org Speed Keys&lt;/a&gt; so that when the cursor is at the beginning of
  a headline, we can perform fast manipulation &amp;amp; navigation using the standard Emacs movement
  controls, such as:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;#&lt;/code&gt; toggle &lt;code&gt;COMMENT&lt;/code&gt;-ing for an org-header.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;s&lt;/code&gt; toggles “narrowing” to a subtree; i.e., hide the rest of the document.
    &lt;p&gt;If you narrow to a subtree then any export, &lt;code&gt;C-c C-e&lt;/code&gt;, will only consider
      the narrowed detail.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code&gt;I/O&lt;/code&gt; clock In/Out to the task defined by the current heading.
    &lt;ul&gt;
      &lt;li&gt;Keep track of your work times!&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;v&lt;/code&gt; view agenda.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code&gt;u&lt;/code&gt; for jumping upwards to the parent heading.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;c&lt;/code&gt; for cycling structure below current heading, or &lt;code&gt;C&lt;/code&gt; for cycling global structure.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;i&lt;/code&gt; insert a new same-level heading below current heading.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;w&lt;/code&gt; refile current heading; options list pops-up to select which heading to move it to. Neato!&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;t&lt;/code&gt; cycle through the available TODO states.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;^&lt;/code&gt; sort children of current subtree; brings up a list of sorting options.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;n/p&lt;/code&gt; for next/previous &lt;i&gt;visible&lt;/i&gt; heading.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;f/b&lt;/code&gt; for jumping forward/backward to the next/previous &lt;i&gt;same-level&lt;/i&gt; heading.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;D/U&lt;/code&gt; move a heading down/up.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;L/R&lt;/code&gt; recursively promote (move leftwards) or demote (more rightwards) a heading.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;1,2,3&lt;/code&gt; to mark a heading with priority, highest to lowest.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We can add our own speed keys by altering the &lt;code&gt;org-speed-commands-user&lt;/code&gt;
  association list variable.&lt;/p&gt;
&lt;p&gt;Moreover, &lt;code&gt;?&lt;/code&gt; to see a complete list of keys available.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;setq&lt;/span&gt; org-use-speed-commands &lt;span class="pl-c1"&gt;t&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-seamless-navigation-between-source-blocks" class="anchor" aria-hidden="true" href="#seamless-navigation-between-source-blocks"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Seamless Navigation Between Source Blocks&lt;/h3&gt;
&lt;p&gt;The “super key” —aka the command or windows key— can be used to jump to the
  previous, next, or toggle editing org-mode source blocks.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Overriding keys for printing buffer, duplicating gui frame, and isearch-yank-kill.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;;&lt;/span&gt;
(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; &lt;span class="pl-c1"&gt;org&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:bind&lt;/span&gt; (&lt;span class="pl-c1"&gt;:map&lt;/span&gt; org-mode-map
              (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;s-p&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; org-babel-previous-src-block)
              (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;s-n&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; org-babel-next-src-block)
              (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;s-e&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; org-edit-src-code)
         &lt;span class="pl-c1"&gt;:map&lt;/span&gt; org-src-mode-map
              (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;s-e&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; org-edit-src-exit)))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Interestingly, &lt;code&gt;s-l&lt;/code&gt; is “goto line”.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-modifying-return" class="anchor" aria-hidden="true" href="#modifying-return"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Modifying &lt;code&gt;&amp;lt;return&amp;gt;&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;C-RET, C-S-RET&lt;/code&gt; make a new heading where the latter marks it as a &lt;code&gt;TODO&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;By default &lt;code&gt;M-RET&lt;/code&gt; makes it easy to work with existing list items, headings,
    tables, etc by creating a new item, heading, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Usually we want a newline then we indent, let’s make that the default.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;add-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;'org-mode-hook&lt;/span&gt; '(&lt;span class="pl-c1"&gt;lambda&lt;/span&gt; ()
   (&lt;span class="pl-c1"&gt;local-set-key&lt;/span&gt; (&lt;span class="pl-c1"&gt;kbd&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&amp;lt;return&amp;gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;'org-return-indent&lt;/span&gt;))
   (&lt;span class="pl-c1"&gt;local-set-key&lt;/span&gt; (&lt;span class="pl-c1"&gt;kbd&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-M-&amp;lt;return&amp;gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;'electric-indent-just-newline&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice that I’ve also added another kind of return, for when I want to
  break-out of the indentation approach and start working at the beginning of
  the line.&lt;/p&gt;
&lt;p&gt;In summary:&lt;/p&gt;
&lt;table&gt;
  &lt;tbody&gt;&lt;tr&gt;&lt;th&gt;key&lt;/th&gt;&lt;th&gt;method&lt;/th&gt;&lt;th&gt;behaviour&lt;/th&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;&amp;lt;return&amp;gt;&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;org-return-indent&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Newline with indentation&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;M-&amp;lt;return&amp;gt;&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;org-meta-return&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Newline with new org item&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;C-M-&amp;lt;return&amp;gt;&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;electric-indent-just-newline&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Newline, cursor at start&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;C-&amp;lt;return&amp;gt;&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;org-insert-heading-respect-content&lt;/code&gt;&lt;/td&gt;&lt;td&gt;New heading &lt;i&gt;after&lt;/i&gt; current content&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;C-S-&amp;lt;return&amp;gt;&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;org-insert-todo-heading-respect-content&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Ditto, but with a &lt;code&gt;TODO&lt;/code&gt; marker&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3&gt;&lt;a id="user-content-c-aek-and-yanking-of-sections" class="anchor" aria-hidden="true" href="#c-aek-and-yanking-of-sections"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;code&gt;C-a,e,k&lt;/code&gt; and Yanking of sections&lt;/h3&gt;
&lt;p&gt;On an org-heading, &lt;code&gt;C-a&lt;/code&gt; goes to after the star, heading markers.
  To use speed keys, run &lt;code&gt;C-a C-a&lt;/code&gt; to get to the star markers.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;C-e&lt;/code&gt; goes to the end of the heading, not including the tags.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;setq&lt;/span&gt; org-special-ctrl-a/e &lt;span class="pl-c1"&gt;t&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;C-k&lt;/code&gt; no longer removes tags, if activated in the middle of a heading’s name.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;setq&lt;/span&gt; org-special-ctrl-k &lt;span class="pl-c1"&gt;t&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; MA: Does not work …!&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When you yank a subtree and paste it alongside a subtree of depth &lt;i&gt;‘d’&lt;/i&gt;, then the
  yanked tree’s depth is adjusted to become depth &lt;i&gt;‘d’&lt;/i&gt; as well.  If you don’t want
  this, then refile instead of copy-pasting.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;setq&lt;/span&gt; org-yank-adjusted-subtrees &lt;span class="pl-c1"&gt;t&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-hiding-emphasise-markers--inlining-images" class="anchor" aria-hidden="true" href="#hiding-emphasise-markers--inlining-images"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Hiding Emphasise Markers &amp;amp; Inlining Images&lt;/h2&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; org-mode math is now highlighted ;-)&lt;/span&gt;
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; org-highlight-latex-and-related '(latex))

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Hide the *,=,/ markers&lt;/span&gt;
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; org-hide-emphasis-markers &lt;span class="pl-c1"&gt;t&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; (setq org-pretty-entities t)&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; to have \alpha, \to and others display as utf8&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; http://orgmode.org/manual/Special-symbols.html&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The following is now disabled —it makes my system slower than I’d like.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Let's set inline images.&lt;/span&gt;
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; org-display-inline-images &lt;span class="pl-c1"&gt;t&lt;/span&gt;)
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; org-redisplay-inline-images &lt;span class="pl-c1"&gt;t&lt;/span&gt;)
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; org-startup-with-inline-images &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;inlineimages&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Automatically convert LaTeX fragments to inline images.&lt;/span&gt;
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; org-startup-with-latex-preview &lt;span class="pl-c1"&gt;t&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-org-emphasise-for-parts-of-words" class="anchor" aria-hidden="true" href="#org-emphasise-for-parts-of-words"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Org-Emphasise for Parts of Words&lt;/h2&gt;
&lt;p&gt;From &lt;a href="https://stackoverflow.com/a/24540651/3550444" rel="nofollow"&gt;stackoverflow&lt;/a&gt;, the following incantation allows us to have
  parts of works emphasied with org-mode; e.g.,
  /half/ed, ~half~ed, and right in the m*idd*le! Super cool stuff!&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;setcar&lt;/span&gt; org-emphasis-regexp-components &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt; &lt;span class="pl-cce"&gt;\t&lt;/span&gt;('&lt;span class="pl-cce"&gt;\"&lt;/span&gt;{[:alpha:]&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
(&lt;span class="pl-k"&gt;setcar&lt;/span&gt; (&lt;span class="pl-k"&gt;nthcdr&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt; org-emphasis-regexp-components) &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;[:alpha:]- &lt;span class="pl-cce"&gt;\t&lt;/span&gt;.,:!?;'&lt;span class="pl-cce"&gt;\"&lt;/span&gt;)}&lt;span class="pl-cce"&gt;\\&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;org-set-emph-re&lt;/span&gt; &lt;span class="pl-c1"&gt;'org-emphasis-regexp-components&lt;/span&gt; org-emphasis-regexp-components)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I’ve disabled this feature since multiple occurrences
  of an emphasise marker are sometimes treated as one
  lengthy phrase being emphasised.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-show-off-screen-heading-at-the-top-of-the-window" class="anchor" aria-hidden="true" href="#show-off-screen-heading-at-the-top-of-the-window"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Show off-screen heading at the top of the window&lt;/h2&gt;
&lt;p&gt;In case we forgot which heading we’re under, let’s keep
  the current heading stuck at the top of the window.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; org-sticky-header
 &lt;span class="pl-c1"&gt;:hook&lt;/span&gt; (&lt;span class="pl-c1"&gt;org-mode&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; org-sticky-header-mode)
 &lt;span class="pl-c1"&gt;:config&lt;/span&gt;
 (&lt;span class="pl-c1"&gt;setq-default&lt;/span&gt;
  org-sticky-header-full-path &lt;span class="pl-c1"&gt;'full&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Child and parent headings are seperated by a /.&lt;/span&gt;
  org-sticky-header-outline-path-separator &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt; / &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-jumping-without-hassle" class="anchor" aria-hidden="true" href="#jumping-without-hassle"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Jumping without hassle&lt;/h2&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;defun&lt;/span&gt; &lt;span class="pl-e"&gt;my/org-goto-line&lt;/span&gt; (&lt;span class="pl-v"&gt;line&lt;/span&gt;)
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Go to the indicated line, unfolding the parent Org header.&lt;/span&gt;
&lt;span class="pl-s"&gt;&lt;/span&gt;
&lt;span class="pl-s"&gt;   Implementation: Go to the line, then look at the 1st previous&lt;/span&gt;
&lt;span class="pl-s"&gt;   org header, now we can unfold it whence we do so, then we go&lt;/span&gt;
&lt;span class="pl-s"&gt;   back to the line we want to be at.&lt;/span&gt;
&lt;span class="pl-s"&gt;  &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  (&lt;span class="pl-k"&gt;interactive&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;nEnter line: &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
  (&lt;span class="pl-c1"&gt;goto-line&lt;/span&gt; line)
  (org-previous-visible-heading &lt;span class="pl-c1"&gt;1&lt;/span&gt;)
  (&lt;span class="pl-c1"&gt;org-cycle&lt;/span&gt;)
  (&lt;span class="pl-c1"&gt;goto-line&lt;/span&gt; line))&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-folding-within-a-subtree" class="anchor" aria-hidden="true" href="#folding-within-a-subtree"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Folding within a subtree&lt;/h2&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;defun&lt;/span&gt; &lt;span class="pl-e"&gt;my/org-fold-current-subtree-anywhere-in-it&lt;/span&gt; ()
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Hide the current heading, while being anywhere inside it.&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  (&lt;span class="pl-k"&gt;interactive&lt;/span&gt;)
  (&lt;span class="pl-c1"&gt;save-excursion&lt;/span&gt;
    (&lt;span class="pl-c1"&gt;org-narrow-to-subtree&lt;/span&gt;)
    (&lt;span class="pl-c1"&gt;org-shifttab&lt;/span&gt;)
    (&lt;span class="pl-c1"&gt;widen&lt;/span&gt;)))

(&lt;span class="pl-c1"&gt;add-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;'org-mode-hook&lt;/span&gt; '(&lt;span class="pl-c1"&gt;lambda&lt;/span&gt; ()
  (&lt;span class="pl-c1"&gt;local-set-key&lt;/span&gt; (&lt;span class="pl-c1"&gt;kbd&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-c C-h&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;'my/org-fold-current-subtree-anywhere-in-it&lt;/span&gt;)))&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-making-block-delimiters-less-intrusive" class="anchor" aria-hidden="true" href="#making-block-delimiters-less-intrusive"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Making Block Delimiters Less Intrusive&lt;/h2&gt;
&lt;p&gt;Let us render Org-mode’s &lt;code&gt;#+begin_src&lt;/code&gt; and &lt;code&gt;#+end_src&lt;/code&gt; less obtrusively by, e.g.,
  having the former render as a pencil marker ✎ and the latter as a tombstone □
  —reminiscent of Halmos’ QED end-of-proof marker.  His setup also accounts for
  quotes.&lt;/p&gt;
&lt;p&gt;⟪ Incantation Omitted —Visit &lt;a href="https://pank.eu/blog/pretty-babel-src-blocks.html#coderef-symbol" rel="nofollow"&gt;Rasmus Roulund&lt;/a&gt;’s site &amp;amp; copy-paste it, if you wish ⟫&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;add-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;'org-mode-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;#&lt;span class="pl-c1"&gt;'rasmus/org-prettify-symbols&lt;/span&gt;&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;org-mode-restart&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;His development relies on built-in prettify-symbols-mode, which
  disguises strings in a buffer for the sake of readability or
  aesthetics.  Following the example in the documentation, &lt;code&gt;C-h f
  prettify-symbols-mode&lt;/code&gt;, we can quickly approximate his efforts for
  &lt;code&gt;example&lt;/code&gt; blocks as follows, however a main issue is that source blocks
  have busybodied headers which his setup disguises as ‘≡’.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;global-prettify-symbols-mode&lt;/span&gt;)

(&lt;span class="pl-k"&gt;defvar&lt;/span&gt; &lt;span class="pl-en"&gt;my/prettify-alist&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Musa's personal prettifications.&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)

(&lt;span class="pl-c1"&gt;loop&lt;/span&gt; for pair in '((&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&amp;lt;=&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-c1"&gt;?≤&lt;/span&gt;) (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&amp;gt;=&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-c1"&gt;?≥&lt;/span&gt;)
                    (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;-&amp;gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-c1"&gt;?→&lt;/span&gt;) (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;--&amp;gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;. &lt;span class="pl-c1"&gt;?⟶&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; threading operators&lt;/span&gt;
                    (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;#+begin_example&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; (&lt;span class="pl-c1"&gt;?ℰ&lt;/span&gt; (Br &lt;span class="pl-k"&gt;.&lt;/span&gt; Bl) &lt;span class="pl-c1"&gt;?⇒&lt;/span&gt;)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; ℰ⇒&lt;/span&gt;
                    (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;#+end_example&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;   &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-c1"&gt;?⇐&lt;/span&gt;))                &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; ⇐&lt;/span&gt;

      do (&lt;span class="pl-k"&gt;push&lt;/span&gt; pair my/prettify-alist))

(&lt;span class="pl-c1"&gt;loop&lt;/span&gt; for hk in '(text-mode-hook prog-mode-hook org-mode-hook)
      do (&lt;span class="pl-c1"&gt;add-hook&lt;/span&gt; hk (&lt;span class="pl-k"&gt;lambda&lt;/span&gt; ()
                        (&lt;span class="pl-k"&gt;setq&lt;/span&gt; prettify-symbols-alist
                              (&lt;span class="pl-k"&gt;append&lt;/span&gt; my/prettify-alist prettify-symbols-alist)))))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;See &lt;a href="http://www.modernemacs.com/post/prettify-mode/" rel="nofollow"&gt;“Mathematical Notation in Emacs”&lt;/a&gt; for how such prettifications can
  make verbose (Python) scripts much more readable by employing more
  economical disguises.&lt;/p&gt;
&lt;p&gt;A nice sanity:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Un-disguise a symbol when cursour is inside it or at the right-edge of it.&lt;/span&gt;
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; prettify-symbols-unprettify-at-point &lt;span class="pl-c1"&gt;'right-edge&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-org-modes-𝒳-block-expansions" class="anchor" aria-hidden="true" href="#org-modes-𝒳-block-expansions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Org-mode’s &lt;code&gt;&amp;lt;𝒳&lt;/code&gt; Block Expansions&lt;/h2&gt;
&lt;p&gt;In org-mode we type &lt;code&gt;&amp;lt;X TAB&lt;/code&gt; to obtain environment templates, such as &lt;code&gt;&amp;lt;s&lt;/code&gt; for
  source blocks or &lt;code&gt;&amp;lt;q&lt;/code&gt; for quote blocks.  It seems recent &lt;a href="https://orgmode.org/Changes.html#org1b5e967" rel="nofollow"&gt;changes&lt;/a&gt; to the org-mode
  structure template expansion necessitate explicitly loading &lt;code&gt;org-tempo&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;require&lt;/span&gt; &lt;span class="pl-c1"&gt;'org-tempo&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To insert source blocks with the assistance of a pop-up: &lt;code&gt;C-c C-v d&lt;/code&gt; ;-)
  Perhaps more usefully, invoking within a source block splits it up into two
  separate blocks! Moreover, if invoked on a selected region, it puts the region
  into a new code block! Wow!&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;C-c C-,~ refers to ~org-insert-structure-template&lt;/code&gt;, which provides non-source
    blocks, such as quote &lt;code&gt;&amp;lt;q&lt;/code&gt;, comment &lt;code&gt;&amp;lt;C&lt;/code&gt;, center &lt;code&gt;&amp;lt;c&lt;/code&gt;, notes &lt;code&gt;&amp;lt;n&lt;/code&gt;, examples &lt;code&gt;&amp;lt;e&lt;/code&gt;, and &lt;code&gt;&amp;lt;l&lt;/code&gt;
    and &lt;code&gt;&amp;lt;h&lt;/code&gt; and &lt;code&gt;&amp;lt;a&lt;/code&gt; for LaTeX and HTML and ASCII export blocks.
    &lt;ul&gt;
      &lt;li&gt;&lt;code&gt;&amp;lt;X&lt;/code&gt; allows you to obtain the org-block assigned to shortcut &lt;code&gt;X&lt;/code&gt;.&lt;/li&gt;
      &lt;li&gt;The contents of comment blocks are ignored upon export.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code&gt;C-c C-v C-d&lt;/code&gt; and &lt;code&gt;C-c C-v d&lt;/code&gt; refer to the &lt;code&gt;org-babel-demarcate-block&lt;/code&gt;, which
    provides &lt;i&gt;source&lt;/i&gt; blocks.&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
  &lt;tbody&gt;&lt;tr&gt;&lt;td&gt;We shall improve upon this system below using snippets.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;E.g., &lt;code&gt;s_em TAB&lt;/code&gt; to obtain an org-src block marked with &lt;code&gt;emacs-lisp&lt;/code&gt; as the
  language.  This saves us a few key strokes.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-org-mode--pdf--html" class="anchor" aria-hidden="true" href="#org-mode--pdf--html"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Org-Mode ⇒ PDF &amp;amp; HTML&lt;/h1&gt;
&lt;p&gt;In this section we consider the Org-mode exporters for PDFs and
  HTMLs. For example, we account for LaTeX citations and reliable HTML
  anchors.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-working-with-citations" class="anchor" aria-hidden="true" href="#working-with-citations"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Working with Citations&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/jkitchin/org-ref"&gt;An exquisite system&lt;/a&gt; for handling references.&lt;/p&gt;
&lt;p&gt;The following entity will display useful data
  when the mouse hovers over it (•̀ᴗ•́)و If you click on it, then you’re
  in for a lot of super neat stuff, such as searching for the pdf online!&lt;/p&gt;
&lt;p&gt;&lt;a href="#agda_overview"&gt;agda_overview&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Files to look at when no “╲bibliography{⋯}” is not present in a file.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Most useful for non-LaTeX files.&lt;/span&gt;
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; reftex-default-bibliography '(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;~/thesis-proposal/papers/References.bib&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; bibtex-completion-bibliography (&lt;span class="pl-k"&gt;car&lt;/span&gt; reftex-default-bibliography))

(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; org-ref
  &lt;span class="pl-c1"&gt;:config&lt;/span&gt; (&lt;span class="pl-k"&gt;setq&lt;/span&gt; org-ref-default-bibliography reftex-default-bibliography))

(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; helm-bibtex)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Execute &lt;code&gt;M-x helm-bibtex&lt;/code&gt; or &lt;code&gt;C-c ] and, say, enter ~agda&lt;/code&gt; and you will be presented with
  all the entries in the bib database that mention ‘agda’. Super cool stuff.&lt;/p&gt;
&lt;p&gt;Read the manual &lt;a href="https://github.com/jkitchin/org-ref/blob/master/org-ref.org"&gt;online&lt;/a&gt; or better yet as an org-file with &lt;code&gt;M-x
  org-ref-help&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This is an Org-mode application since the citations have tooltips
  and export nicely to LaTeX &amp;amp; HTML via the Org-mode exporter.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-coloured-latex-using-minted" class="anchor" aria-hidden="true" href="#coloured-latex-using-minted"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Coloured LaTeX using Minted&lt;/h2&gt;
&lt;p&gt;Execute the following for bib ref as well as minted Org-mode uses the
  Minted package for source code highlighting in PDF/LaTeX —which in
  turn requires the pygmentize system tool.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;setq&lt;/span&gt; org-latex-listings &lt;span class="pl-c1"&gt;'minted&lt;/span&gt;
      org-latex-packages-alist '((&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;minted&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
      org-latex-pdf-process
      '(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;pdflatex -shell-escape -output-directory %o %f&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
        &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;biber %b&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
        &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;pdflatex -shell-escape -output-directory %o %f&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
        &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;pdflatex -shell-escape -output-directory %o %f&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For faster pdf generation, possibly with errors, consider invoking:&lt;/p&gt;
&lt;pre&gt;(setq org-latex-pdf-process
      '("pdflatex -interaction nonstopmode -output-directory %o %f"))
&lt;/pre&gt;
&lt;p&gt;By default, Org exports LaTeX using the &lt;code&gt;nonstopmode&lt;/code&gt; option, which tries
  its best to produce a PDF —which ignores typesetting errors altogether,
  which is not necessary ideal when using LaTeX.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-ensuring-useful-html-anchors" class="anchor" aria-hidden="true" href="#ensuring-useful-html-anchors"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Ensuring Useful HTML Anchors&lt;/h2&gt;
&lt;p&gt;Upon HTML export, each tree heading is assigned an ID to be used for hyperlinks.
  Default IDs are something like &lt;code&gt;org1957a9d&lt;/code&gt;, which does not endure the test of time:
  Re-export will produce a different id. Here’s a rough snippet to generate
  IDs from headings, by replacing spaces with hyphens, for headings without IDs.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;defun&lt;/span&gt; &lt;span class="pl-e"&gt;my/ensure-headline-ids&lt;/span&gt; (&lt;span class="pl-c1"&gt;&amp;amp;rest&lt;/span&gt; &lt;span class="pl-v"&gt;_&lt;/span&gt;)
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Org trees without a&lt;/span&gt;
&lt;span class="pl-s"&gt;&lt;/span&gt;
&lt;span class="pl-s"&gt;All non-alphanumeric characters are cleverly replaced with ‘-’.&lt;/span&gt;
&lt;span class="pl-s"&gt;&lt;/span&gt;
&lt;span class="pl-s"&gt;If multiple trees end-up with the same id property, issue a&lt;/span&gt;
&lt;span class="pl-s"&gt;message and undo any property insertion thus far.&lt;/span&gt;
&lt;span class="pl-s"&gt;&lt;/span&gt;
&lt;span class="pl-s"&gt;E.g., ↯ We'll go on a ∀∃⇅ adventure&lt;/span&gt;
&lt;span class="pl-s"&gt;   ↦  We'll-go-on-a-adventure&lt;/span&gt;
&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  (&lt;span class="pl-k"&gt;interactive&lt;/span&gt;)
  (&lt;span class="pl-k"&gt;let&lt;/span&gt; ((ids))
    (&lt;span class="pl-c1"&gt;org-map-entries&lt;/span&gt;
     (&lt;span class="pl-k"&gt;lambda&lt;/span&gt; ()
       (&lt;span class="pl-c1"&gt;org-with-point-at&lt;/span&gt; (&lt;span class="pl-c1"&gt;point&lt;/span&gt;)
         (&lt;span class="pl-k"&gt;let&lt;/span&gt; ((id (&lt;span class="pl-c1"&gt;org-entry-get&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;CUSTOM_ID&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)))
           (&lt;span class="pl-k"&gt;unless&lt;/span&gt; id
             (&lt;span class="pl-c1"&gt;thread-last&lt;/span&gt; (&lt;span class="pl-k"&gt;nth&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; (&lt;span class="pl-c1"&gt;org-heading-components&lt;/span&gt;))
               (s-replace-regexp &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;[^[:alnum:]']&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;-&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
               (s-replace-regexp &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;-+&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;-&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
               (s-chop-prefix &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;-&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
               (s-chop-suffix &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;-&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
               (&lt;span class="pl-k"&gt;setq&lt;/span&gt; id))
             (&lt;span class="pl-k"&gt;if&lt;/span&gt; (&lt;span class="pl-k"&gt;not&lt;/span&gt; (&lt;span class="pl-k"&gt;member&lt;/span&gt; id ids))
                 (&lt;span class="pl-k"&gt;push&lt;/span&gt; id ids)
               (&lt;span class="pl-c1"&gt;message-box&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Oh no, a repeated id!&lt;span class="pl-cce"&gt;\n\n\t&lt;/span&gt;%s&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; id)
               (&lt;span class="pl-c1"&gt;undo&lt;/span&gt;)
               (&lt;span class="pl-k"&gt;setq&lt;/span&gt; quit-flag &lt;span class="pl-c1"&gt;t&lt;/span&gt;))
             (&lt;span class="pl-c1"&gt;org-entry-put&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;CUSTOM_ID&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; id))))))))

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Whenever html &amp;amp; md export happens, ensure we have headline ids.&lt;/span&gt;
(&lt;span class="pl-c1"&gt;advice-add&lt;/span&gt; &lt;span class="pl-c1"&gt;'org-html-export-to-html&lt;/span&gt;   &lt;span class="pl-c1"&gt;:before&lt;/span&gt; &lt;span class="pl-c1"&gt;'my/ensure-headline-ids&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;advice-add&lt;/span&gt; &lt;span class="pl-c1"&gt;'org-md-export-to-markdown&lt;/span&gt; &lt;span class="pl-c1"&gt;:before&lt;/span&gt; &lt;span class="pl-c1"&gt;'my/ensure-headline-ids&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;One may then use &lt;code&gt;[[#my-custom-id]]&lt;/code&gt; to link to the entry with &lt;code&gt;CUSTOM_ID&lt;/code&gt;
  property &lt;code&gt;my-custom-id&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Interestingly, &lt;code&gt;org-set-property&lt;/code&gt;, &lt;code&gt;C-c C-x p&lt;/code&gt;, lets us insert a property
  from a selection of available ones, then we’ll be prompted for a value
  for it from a list of values you’ve used elsewhere. This is useful for
  remaining consistent for when trees share similar properties.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-html-folded-drawers" class="anchor" aria-hidden="true" href="#html-folded-drawers"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;HTML “Folded Drawers”&lt;/h2&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;defun&lt;/span&gt; &lt;span class="pl-e"&gt;my/org-drawer-format&lt;/span&gt; (&lt;span class="pl-v"&gt;name&lt;/span&gt; &lt;span class="pl-v"&gt;contents&lt;/span&gt;)
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Export to HTML the drawers named with prefix ‘fold_’, ignoring case.&lt;/span&gt;
&lt;span class="pl-s"&gt;&lt;/span&gt;
&lt;span class="pl-s"&gt;The resulting drawer is a ‘code-details’ and so appears folded;&lt;/span&gt;
&lt;span class="pl-s"&gt;the user clicks it to see the information therein.&lt;/span&gt;
&lt;span class="pl-s"&gt;Henceforth, these are called ‘fold drawers’.&lt;/span&gt;
&lt;span class="pl-s"&gt;&lt;/span&gt;
&lt;span class="pl-s"&gt;Drawers without such a prefix may be nonetheless exported if their&lt;/span&gt;
&lt;span class="pl-s"&gt;body contains ‘:export: t’ ---this switch does not appear in the output.&lt;/span&gt;
&lt;span class="pl-s"&gt;Thus, we are biased to generally not exporting non-fold drawers.&lt;/span&gt;
&lt;span class="pl-s"&gt;&lt;/span&gt;
&lt;span class="pl-s"&gt;One may suspend export of fold drawers by having ‘:export: nil’&lt;/span&gt;
&lt;span class="pl-s"&gt;in their body definition.&lt;/span&gt;
&lt;span class="pl-s"&gt;&lt;/span&gt;
&lt;span class="pl-s"&gt;Fold drawers naturally come with a title.&lt;/span&gt;
&lt;span class="pl-s"&gt;Either it is specfied in the drawer body by ‘:title: ⋯’,&lt;/span&gt;
&lt;span class="pl-s"&gt;or otherwise the drawer's name is used with all underscores replaced&lt;/span&gt;
&lt;span class="pl-s"&gt;by spaces.&lt;/span&gt;
&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  (&lt;span class="pl-k"&gt;let*&lt;/span&gt; ((contents′ (&lt;span class="pl-c1"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;:export:.*&lt;span class="pl-cce"&gt;\n&lt;/span&gt;?&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; contents))
         (fold&lt;span class="pl-c1"&gt;? &lt;/span&gt;(s-prefix&lt;span class="pl-c1"&gt;? &lt;/span&gt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;fold_&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; name &lt;span class="pl-c1"&gt;'ignore-case&lt;/span&gt;))
         (export&lt;span class="pl-c1"&gt;? &lt;/span&gt;(&lt;span class="pl-c1"&gt;string-match&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;:export:&lt;span class="pl-cce"&gt;\s&lt;/span&gt;+t&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; contents))
         (not-export&lt;span class="pl-c1"&gt;? &lt;/span&gt;(&lt;span class="pl-c1"&gt;string-match&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;:export:&lt;span class="pl-cce"&gt;\s&lt;/span&gt;+nil&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; contents))
         (title′ (&lt;span class="pl-k"&gt;and&lt;/span&gt; (&lt;span class="pl-c1"&gt;string-match&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;:title:&lt;span class="pl-cce"&gt;\\&lt;/span&gt;(.*&lt;span class="pl-cce"&gt;\\&lt;/span&gt;)&lt;span class="pl-cce"&gt;\n&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; contents)
                      (&lt;span class="pl-c1"&gt;match-string&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt; contents))))

    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Ensure we have a title.&lt;/span&gt;
    (&lt;span class="pl-k"&gt;unless&lt;/span&gt; title′ (&lt;span class="pl-k"&gt;setq&lt;/span&gt; title′ (s-join &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt; &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; (&lt;span class="pl-k"&gt;cdr&lt;/span&gt; (s-split &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;_&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; name)))))

    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Output&lt;/span&gt;
    (&lt;span class="pl-k"&gt;cond&lt;/span&gt;
     ((&lt;span class="pl-k"&gt;and&lt;/span&gt; export&lt;span class="pl-c1"&gt;? &lt;/span&gt;(&lt;span class="pl-k"&gt;not&lt;/span&gt; fold&lt;span class="pl-c1"&gt;?)&lt;/span&gt;) contents′)
     (not-export&lt;span class="pl-c1"&gt;? &lt;/span&gt;&lt;span class="pl-c1"&gt;nil&lt;/span&gt;)
     (fold&lt;span class="pl-c1"&gt;?&lt;/span&gt;
      (&lt;span class="pl-c1"&gt;thread-last&lt;/span&gt; contents′
        (&lt;span class="pl-c1"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;:title:.*&lt;span class="pl-cce"&gt;\n&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
        (&lt;span class="pl-c1"&gt;format&lt;/span&gt; &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-s"&gt;&amp;lt;details class=&lt;span class="pl-cce"&gt;\"&lt;/span&gt;code-details&lt;span class="pl-cce"&gt;\"&lt;/span&gt;&amp;gt; &amp;lt;summary&amp;gt; &amp;lt;strong&amp;gt;&lt;/span&gt;
&lt;span class="pl-s"&gt;            &amp;lt;font face=&lt;span class="pl-cce"&gt;\"&lt;/span&gt;Courier&lt;span class="pl-cce"&gt;\"&lt;/span&gt; size=&lt;span class="pl-cce"&gt;\"&lt;/span&gt;3&lt;span class="pl-cce"&gt;\"&lt;/span&gt; color=&lt;span class="pl-cce"&gt;\"&lt;/span&gt;green&lt;span class="pl-cce"&gt;\"&lt;/span&gt;&amp;gt; &lt;span class="pl-c1"&gt;%s&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-s"&gt;            &amp;lt;/font&amp;gt; &amp;lt;/strong&amp;gt; &amp;lt;/summary&amp;gt; &lt;span class="pl-c1"&gt;%s&lt;/span&gt; &amp;lt;/details&amp;gt;&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt; title′))))))

(&lt;span class="pl-k"&gt;setq&lt;/span&gt; org-html-format-drawer-function &lt;span class="pl-c1"&gt;'my/org-drawer-format&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With the following invocations we only see the odd indexed ‘hello’s, where the
  latter two are folded up.&lt;/p&gt;
&lt;pre lang="org"&gt;:this-drawer-is-exported:
:export: t
hello 1
:End:

:this-drawer-is-NOT-exported:
hello 2
:End:

:fold_This_drawer_has_a_title_in_the_body:
:title: I am the drawer title 0

hello 3
:End:

:fold_This_drawer_is_NOT_exported:
:title: Why are we here?
:export: nil

hello 4
:End:

:fold_I_am_the_drawer_title_1:

hello 5
:End:
&lt;/pre&gt;
&lt;p&gt;I doubt I could show an example in the Github README, since no HTML export is
  happening using my setup. In case you’re reading this on my blog, which has
  exported HTML. Here’s the example:
  Now that I’ve written this, I’m thinking it may have been preferably to use an org-block…?&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-revealjs--the-html-presentation-framework" class="anchor" aria-hidden="true" href="#revealjs--the-html-presentation-framework"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="https://revealjs.com/?transition=zoom#/" rel="nofollow"&gt;Reveal.JS&lt;/a&gt; – The HTML Presentation Framework&lt;/h2&gt;
&lt;p&gt;Org-mode documents can be transformed into beautiful slide decks
  with &lt;a href="https://github.com/yjwen/org-reveal/blob/master/Readme.org"&gt;org-reveal&lt;/a&gt; with the following two simple lines.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; ox-reveal
  &lt;span class="pl-c1"&gt;:config&lt;/span&gt; (&lt;span class="pl-k"&gt;setq&lt;/span&gt; org-reveal-root &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;https://cdn.jsdelivr.net/npm/reveal.js&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For example, execute, &lt;code&gt;C-x C-e&lt;/code&gt; after the closing parenthesis of, the
  following block to see an example slide-deck (─‿‿─)&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;progn&lt;/span&gt; (&lt;span class="pl-c1"&gt;shell-command&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;curl https://raw.githubusercontent.com/yjwen/org-reveal/696613edef0fe17a9c53146f79933fe7c4101100/Readme.org &amp;gt;&amp;gt; Trying_out_reveal.org&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
       (&lt;span class="pl-c1"&gt;switch-to-buffer&lt;/span&gt; (&lt;span class="pl-c1"&gt;find-file&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Trying_out_reveal.org&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
       (org-reveal-export-to-html-and-browse))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Org-mode exporting, &lt;code&gt;C-c C-e&lt;/code&gt;, now includes an option &lt;code&gt;R&lt;/code&gt; for such reveal slide decks.&lt;/p&gt;
&lt;p&gt;Two dimensional slides may be a bit new to some people, so I like to
  give viewers an option, in tiny font, to view the slide-deck
  continuously and remind them that &lt;code&gt;?&lt;/code&gt; provides useful shortcuts.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;setq&lt;/span&gt; org-reveal-title-slide &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&amp;lt;h1&amp;gt;%t&amp;lt;/h1&amp;gt; &amp;lt;h3&amp;gt;%a&amp;lt;/h3&amp;gt;&lt;/span&gt;
&lt;span class="pl-s"&gt;&amp;lt;font size=&lt;span class="pl-cce"&gt;\"&lt;/span&gt;1&lt;span class="pl-cce"&gt;\"&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class="pl-s"&gt;&amp;lt;a href=&lt;span class="pl-cce"&gt;\"&lt;/span&gt;?print-pdf&amp;amp;showNotes=true&lt;span class="pl-cce"&gt;\"&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class="pl-s"&gt;⟪ Flattened View ; Press &amp;lt;code&amp;gt;?&amp;lt;/code&amp;gt; for Help ⟫&lt;/span&gt;
&lt;span class="pl-s"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class="pl-s"&gt;&amp;lt;/font&amp;gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;One should remove the &lt;code&gt;&amp;amp;showNotes=true&lt;/code&gt; if they do not want to include
  speaker notes in the flattened view.&lt;/p&gt;
&lt;p&gt;Within the flatenned view, one may wish to &lt;code&gt;CTRL/CMD+P&lt;/code&gt; then save the
  resulting PDF locally.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-life-within-org-mode" class="anchor" aria-hidden="true" href="#life-within-org-mode"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Life within Org-mode&lt;/h1&gt;
&lt;p&gt;It’s hard to estimate how long a task takes if you don’t keep
  ‘clock-in and clock-out’ of tasks. We can ‘capture’ todos right in the middle
  of a task &lt;i&gt;without&lt;/i&gt; context-switching; e.g., no opening a todos file!
  After some reflection on the relative importance of the tasks, we can
  schedule them into our ‘agenda’.&lt;/p&gt;
&lt;p&gt;Let’s do this!&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-using-org-mode-as-a-day-planner" class="anchor" aria-hidden="true" href="#using-org-mode-as-a-day-planner"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Using Org-Mode as a Day Planner&lt;/h2&gt;
&lt;p&gt;⟪ This section is based on a dated, yet delightful, tutorial
  of the same title by &lt;a href="http://newartisans.com/2007/08/using-org-mode-as-a-day-planner/" rel="nofollow"&gt;John Wiegley&lt;/a&gt;. ⟫&lt;/p&gt;
&lt;p&gt;We want a day-planner with the following use:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;“Mindlessly” &amp;amp; rapidly create new tasks.&lt;/li&gt;
  &lt;li&gt;Schedule and archive tasks at the end, or start, of the work day.&lt;/li&gt;
  &lt;li&gt;Glance at a week’s tasks, shuffle if need be.&lt;/li&gt;
  &lt;li&gt;Prioritise the day’s tasks. Aim for ≤15 tasks.&lt;/li&gt;
  &lt;li&gt;Progress towards completion of &lt;code&gt;A&lt;/code&gt; tasks by documenting work completed.&lt;/li&gt;
  &lt;li&gt;Repeat! During the day, if anything comes up, capture it and intentionally
    forget about it.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;&lt;a id="user-content-capturing-ideas--notes-without-interrupting-the-current-workflow" class="anchor" aria-hidden="true" href="#capturing-ideas--notes-without-interrupting-the-current-workflow"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Capturing ideas &amp;amp; notes without interrupting the current workflow&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://orgmode.org/org.html#Setting-up-capture" rel="nofollow"&gt;Capture&lt;/a&gt; lets me quickly make notes &amp;amp; capture ideas, with associated reference material,
  without any interruption to the current work flow. Without losing focus on what you’re doing,
  quickly jot down a note of something important that just came up.&lt;/p&gt;
&lt;p&gt;E.g., I have a task, or something I wish to note down, rather than opening
  some file, then making a heading, then writing it; instead, I press
  &lt;code&gt;C-c c t&lt;/code&gt; and a pop-up appears, I make my note, and it disappears —with my
  notes file(s) now being altered! Moreover, by default it provides a timestamp
  and a link to the file location where I made the note —helpful for tasks, tickets,
  to be tackled later on.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Location of my todos/notes file&lt;/span&gt;
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; org-default-notes-file &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;~/Dropbox/todo.org&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; “C-c c” to quickly capture a task/note&lt;/span&gt;
(&lt;span class="pl-c1"&gt;define-key&lt;/span&gt; global-map &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-cce"&gt;\C&lt;/span&gt;-cc&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;#&lt;span class="pl-c1"&gt;'my/org-capture&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; See below.&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;By default we only get a ‘tasks’ form of capture, let’s add some more.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;cl-defun&lt;/span&gt; &lt;span class="pl-e"&gt;my/make/org-capture-template&lt;/span&gt;
   (shortcut heading &lt;span class="pl-c1"&gt;&amp;amp;optional&lt;/span&gt; (no-todo &lt;span class="pl-c1"&gt;nil&lt;/span&gt;) (description heading) (category heading) (scheduled &lt;span class="pl-c1"&gt;t&lt;/span&gt;))
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Quickly produce an org-capture-template.&lt;/span&gt;
&lt;span class="pl-s"&gt;&lt;/span&gt;
&lt;span class="pl-s"&gt;  After adding the result of this function to ‘org-capture-templates’,&lt;/span&gt;
&lt;span class="pl-s"&gt;  we will be able perform a capture with “C-c c ‘shortcut’”&lt;/span&gt;
&lt;span class="pl-s"&gt;  which will have description ‘description’.&lt;/span&gt;
&lt;span class="pl-s"&gt;  It will be added to the tasks file under heading ‘heading’&lt;/span&gt;
&lt;span class="pl-s"&gt;  and be marked with category  ‘category’.&lt;/span&gt;
&lt;span class="pl-s"&gt;&lt;/span&gt;
&lt;span class="pl-s"&gt;  ‘no-todo’ omits the ‘TODO’ tag from the resulting item; e.g.,&lt;/span&gt;
&lt;span class="pl-s"&gt;  when it's merely an interesting note that needn't be acted upon.&lt;/span&gt;
&lt;span class="pl-s"&gt;  ─Probably a bad idea─&lt;/span&gt;
&lt;span class="pl-s"&gt;&lt;/span&gt;
&lt;span class="pl-s"&gt;  Defaults for ‘description’ and ‘category’ are set to the same as&lt;/span&gt;
&lt;span class="pl-s"&gt;  the ‘heading’. Default for ‘no-todo’ is ‘nil’.&lt;/span&gt;
&lt;span class="pl-s"&gt;&lt;/span&gt;
&lt;span class="pl-s"&gt;  Scheduled items appear in the agenda; true by default.&lt;/span&gt;
&lt;span class="pl-s"&gt;&lt;/span&gt;
&lt;span class="pl-s"&gt;  The target is ‘file+headline’ and the type is ‘entry’; to see&lt;/span&gt;
&lt;span class="pl-s"&gt;  other possibilities invoke: C-h o RET org-capture-templates.&lt;/span&gt;
&lt;span class="pl-s"&gt;  The “%?” indicates the location of the Cursor, in the template,&lt;/span&gt;
&lt;span class="pl-s"&gt;  when forming the entry.&lt;/span&gt;
&lt;span class="pl-s"&gt;  &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  `(&lt;span class="pl-c1"&gt;&lt;span class="pl-mi1"&gt;,&lt;/span&gt;shortcut&lt;/span&gt; &lt;span class="pl-c1"&gt;&lt;span class="pl-mi1"&gt;,&lt;/span&gt;description&lt;/span&gt; entry
      (file+headline org-default-notes-file
         ,(&lt;span class="pl-c1"&gt;concat&lt;/span&gt; heading &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-cce"&gt;\n&lt;/span&gt;#+CATEGORY: &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; category))
         , (&lt;span class="pl-c1"&gt;concat&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;*&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; (&lt;span class="pl-k"&gt;unless&lt;/span&gt; no-todo &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt; TODO&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt; %?&lt;span class="pl-cce"&gt;\n&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
                (&lt;span class="pl-k"&gt;when&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt; &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; this turned out to be a teribble idea.&lt;/span&gt;
                  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;:PROPERTIES:&lt;span class="pl-cce"&gt;\n&lt;/span&gt;:&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
                (&lt;span class="pl-k"&gt;if&lt;/span&gt; scheduled
                    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SCHEDULED: %^{Any time ≈ no time! Please schedule this task!}t&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
                  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;CREATED: %U&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
                &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-cce"&gt;\n&lt;/span&gt;:END:&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-cce"&gt;\n\n&lt;/span&gt; &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
      &lt;span class="pl-c1"&gt;:empty-lines&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;:time-prompt&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;))

(&lt;span class="pl-k"&gt;setq&lt;/span&gt; org-capture-templates
      (&lt;span class="pl-c1"&gt;loop&lt;/span&gt; for (shortcut heading)
            in (-partition &lt;span class="pl-c1"&gt;2&lt;/span&gt; '(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;t&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Tasks, Getting Things Done&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
                               &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;r&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Research&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
                               &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;2&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;2FA3&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
                               &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;m&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Email&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
                               &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;e&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Emacs (•̀ᴗ•́)و&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
                               &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;b&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Blog&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
                               &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;a&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Arbitrary Reading and Learning&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
                               &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;p&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Personal Matters&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
            collect  (my/make/org-capture-template shortcut heading)))

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; For now, let's automatically schedule items a week in advance.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; TODO: FIXME: This overwrites any scheduling I may have performed.&lt;/span&gt;
(&lt;span class="pl-k"&gt;defun&lt;/span&gt; &lt;span class="pl-e"&gt;my/org-capture-schedule&lt;/span&gt; ()
  (&lt;span class="pl-c1"&gt;org-schedule&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;+7d&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))

(&lt;span class="pl-c1"&gt;add-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;'org-capture-before-finalize-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;'my/org-capture-schedule&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For now I capture everything into a single file.  One would ideally keep
  separate client, project, information in its own org file.  The &lt;code&gt;#+CATEGORY&lt;/code&gt;
  appears alongside each task in the agenda view —keep reading.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Looking at &lt;code&gt;my/make/org-capture-template&lt;/code&gt;, one notices that capture actually
    lets you add &lt;i&gt;any&lt;/i&gt; type of item to &lt;i&gt;any&lt;/i&gt; file.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let’s also ensure TODO-s respect hierarchical structure.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Cannot mark an item DONE if it has a  TODO child.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Conversely, all children must be DONE in-order for a parent to be DONE.&lt;/span&gt;
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; org-enforce-todo-dependencies &lt;span class="pl-c1"&gt;t&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;b&gt;Where am I currently capturing?&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;During meetings, when a nifty idea pops into my mind, I quickly capture it.
    &lt;ul&gt;
      &lt;li&gt;I’ve found taking my laptop to meetings makes me an active listener
        and I get much more out of my meetings since I’m taking notes.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Through out the day, as I browse the web, read, and work; random ideas pop-up, and I capture them indiscriminately.&lt;/li&gt;
  &lt;li&gt;I envision that for a phone call, I would open up a capture to make note of what the call entailed so I can review it later.&lt;/li&gt;
  &lt;li&gt;Anywhere you simply want to make a note, for the current heading, just press
    &lt;code&gt;C-c C-z&lt;/code&gt;. The notes are just your remarks along with a timestamp; they are
    collected at the top of the tree, under the heading.
    &lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Ensure notes are stored at the top of a tree.&lt;/span&gt;
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; org-reverse-note-order &lt;span class="pl-c1"&gt;nil&lt;/span&gt;)
    &lt;/pre&gt;&lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Yet another place to capture content is from mail, such as for reference
  material, or self-contained tasks. See &lt;a href="#Capturing-Mail-as-Todo-Notes"&gt;above&lt;/a&gt; for this discussion.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;cl-defun&lt;/span&gt; &lt;span class="pl-e"&gt;my/org-capture-buffer&lt;/span&gt; (&lt;span class="pl-c1"&gt;&amp;amp;optional&lt;/span&gt; &lt;span class="pl-v"&gt;keys&lt;/span&gt; &lt;span class="pl-v"&gt;no-additional-remarks&lt;/span&gt;
                                           (heading-regexp &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Subject: &lt;span class="pl-cce"&gt;\\&lt;/span&gt;(.*&lt;span class="pl-cce"&gt;\\&lt;/span&gt;)&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Capture the current [narrowed] buffer as a todo/note.&lt;/span&gt;
&lt;span class="pl-s"&gt;&lt;/span&gt;
&lt;span class="pl-s"&gt;This is mostly intended for capturing mail as todo tasks ^_^&lt;/span&gt;
&lt;span class="pl-s"&gt;&lt;/span&gt;
&lt;span class="pl-s"&gt;When NO-ADDITIONAL-REMARKS is provided, and a heading is found,&lt;/span&gt;
&lt;span class="pl-s"&gt;then make and store the note without showing a pop-up.&lt;/span&gt;
&lt;span class="pl-s"&gt;This is useful for when we capture self-contained mail.&lt;/span&gt;
&lt;span class="pl-s"&gt;&lt;/span&gt;
&lt;span class="pl-s"&gt;The HEADING-REGEXP must have a regexp parenthesis construction&lt;/span&gt;
&lt;span class="pl-s"&gt;which is used to obtain a suitable heading for the resulting todo/note.&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  (&lt;span class="pl-k"&gt;interactive&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;P&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
  (&lt;span class="pl-k"&gt;let*&lt;/span&gt; ((current-content (&lt;span class="pl-c1"&gt;substring-no-properties&lt;/span&gt; (&lt;span class="pl-c1"&gt;buffer-string&lt;/span&gt;)))
         (heading         (&lt;span class="pl-k"&gt;progn&lt;/span&gt; (&lt;span class="pl-c1"&gt;string-match&lt;/span&gt; heading-regexp current-content)
                                 (&lt;span class="pl-k"&gt;or&lt;/span&gt; (&lt;span class="pl-c1"&gt;match-string&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt; current-content) &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))))
    (&lt;span class="pl-c1"&gt;org-capture&lt;/span&gt; keys)
    (&lt;span class="pl-c1"&gt;insert&lt;/span&gt; heading &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-cce"&gt;\n\n\n\n&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; (s-repeat &lt;span class="pl-c1"&gt;80&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;-&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-cce"&gt;\n\n\n&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; current-content)

    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; The overtly verbose conditions are for the sake of clarity.&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Moreover, even though the final could have “t”, being explicit&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; communicates exactly the necessary conditions.&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Being so verbose leads to mutual exclusive clauses, whence order is irrelevant.&lt;/span&gt;
    (&lt;span class="pl-k"&gt;cond&lt;/span&gt;
     ((s-blank&lt;span class="pl-c1"&gt;? &lt;/span&gt;heading)
        (&lt;span class="pl-c1"&gt;beginning-of-buffer&lt;/span&gt;) (&lt;span class="pl-c1"&gt;end-of-line&lt;/span&gt;))
     ((&lt;span class="pl-k"&gt;and&lt;/span&gt; no-additional-remarks (&lt;span class="pl-k"&gt;not&lt;/span&gt; (s-blank&lt;span class="pl-c1"&gt;? &lt;/span&gt;heading)))
        (org-capture-finalize))
     ((&lt;span class="pl-k"&gt;not&lt;/span&gt; (&lt;span class="pl-k"&gt;or&lt;/span&gt; no-additional-remarks (s-blank&lt;span class="pl-c1"&gt;? &lt;/span&gt;heading)))
        (&lt;span class="pl-c1"&gt;beginning-of-buffer&lt;/span&gt;) (&lt;span class="pl-c1"&gt;forward-line&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;) (&lt;span class="pl-c1"&gt;indent-for-tab-command&lt;/span&gt;)))))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With that in-hand, we use a wrapper to &lt;code&gt;org-capture&lt;/code&gt; to make use of it.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;defun&lt;/span&gt; &lt;span class="pl-e"&gt;my/org-capture&lt;/span&gt; (&lt;span class="pl-c1"&gt;&amp;amp;optional&lt;/span&gt; &lt;span class="pl-v"&gt;prefix&lt;/span&gt; &lt;span class="pl-v"&gt;keys&lt;/span&gt;)
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Capture something!&lt;/span&gt;
&lt;span class="pl-s"&gt;&lt;/span&gt;
&lt;span class="pl-s"&gt;      C-c c   ⇒ Capture something; likewise for “C-uⁿ C-c c” where n ≥ 3.&lt;/span&gt;
&lt;span class="pl-s"&gt;C-u   C-c c   ⇒ Capture current [narrowed] buffer.&lt;/span&gt;
&lt;span class="pl-s"&gt;C-u 5 C-c c   ⇒ Capture current [narrowed] buffer without adding additional remarks.&lt;/span&gt;
&lt;span class="pl-s"&gt;C-u C-u C-c c ⇒ Goto last note stored.&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  (&lt;span class="pl-k"&gt;interactive&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;p&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
  (&lt;span class="pl-c1"&gt;case&lt;/span&gt; prefix
    (&lt;span class="pl-c1"&gt;4&lt;/span&gt;     (my/org-capture-buffer keys))
    (&lt;span class="pl-c1"&gt;5&lt;/span&gt;     (my/org-capture-buffer keys &lt;span class="pl-c1"&gt;:no-additional-remarks&lt;/span&gt;))
    (&lt;span class="pl-c1"&gt;t&lt;/span&gt;     (&lt;span class="pl-c1"&gt;org-capture&lt;/span&gt; prefix keys))))&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;Org-protocol is a way to create capture notes in org-mode from other applications.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Anyhow…&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-step-1-when-new-tasks-come-up" class="anchor" aria-hidden="true" href="#step-1-when-new-tasks-come-up"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Step 1: When new tasks come up&lt;/h3&gt;
&lt;p&gt;Isn’t it great that we can squirrel away info into some default location
  then immediately return to what we were doing before —with speed &amp;amp; minimal distraction! ♥‿♥
  Indeed, if our system for task management were slow then we may not produce
  tasks and so forget them altogether! щ(゜ロ゜щ)&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Entering tasks is a desirably impulsive act; do not make any further
    scheduling considerations.
    &lt;p&gt;The next step, the review stage occurring at the end or the start of the
      workday, is for processing.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
  &lt;p&gt;The reason for this is that entering new tasks should be impulsive, not reasoned.
    Your reasoning skills are required for the task at hand, not every new tidbit.
    You may even find that during the few hours that transpire between creating a
    task and categorizing it, you’ve either already done it or discovered it doesn’t
    need to be done at all! —&lt;a href="http://newartisans.com/2007/08/using-org-mode-as-a-day-planner/" rel="nofollow"&gt;John Wiegley&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When my computer isn’t handy, I’ll make a note on my phone then transfer it later.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-step-2-filing-your-tasks" class="anchor" aria-hidden="true" href="#step-2-filing-your-tasks"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Step 2: Filing your tasks&lt;/h3&gt;
&lt;p&gt;At a later time, a time of reflection, we go to our tasks list and actually
  schedule time to get them done by &lt;code&gt;C-c C-s&lt;/code&gt; then pick a date by entering a number
  in the form &lt;code&gt;+𝓃&lt;/code&gt; to mean that task is due &lt;code&gt;𝓃&lt;/code&gt; days from now.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Tasks with no due date are ones that “could happen anytime”, most likely no time at all.&lt;/li&gt;
  &lt;li&gt;At least schedule tasks reasonably far off in the future, then reassess when the time comes.&lt;/li&gt;
  &lt;li&gt;An uncompleted task is by default rescheduled to the current day, each day, along with how overdue it is.
    &lt;ul&gt;
      &lt;li&gt;Aim to consciously reschedule such tasks!&lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;With time, it will become clear what is an unreasonable day
      verses what is an achievable day.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let’s keep track of how many times, and when, we have pushed events to other dates.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Add a note whenever a task's deadline or scheduled date is changed.&lt;/span&gt;
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; org-log-redeadline &lt;span class="pl-c1"&gt;'time&lt;/span&gt;)
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; org-log-reschedule &lt;span class="pl-c1"&gt;'time&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-step-3-quickly-review-the-upcoming-week" class="anchor" aria-hidden="true" href="#step-3-quickly-review-the-upcoming-week"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Step 3: Quickly review the upcoming week&lt;/h3&gt;
&lt;p&gt;The next day we begin our work, we press &lt;code&gt;C-c a a&lt;/code&gt; to see the
  scheduled tasks for this week —~C-c C-s~ to re-schedule the
  task under the cursor and &lt;code&gt;r&lt;/code&gt; to refresh the agenda.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;define-key&lt;/span&gt; global-map &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-cce"&gt;\C&lt;/span&gt;-ca&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'org-agenda&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-step-4-getting-ready-for-the-day" class="anchor" aria-hidden="true" href="#step-4-getting-ready-for-the-day"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Step 4: Getting ready for the day&lt;/h3&gt;
&lt;p&gt;After having seen our tasks for the week, we press &lt;code&gt;d&lt;/code&gt; to enter daily view
  for the current day. Now we decide whether the items for today are
  &lt;code&gt;A&lt;/code&gt;: of high urgency &amp;amp; important; &lt;code&gt;B&lt;/code&gt;: of moderate urgency &amp;amp; importance; or
  &lt;code&gt;C&lt;/code&gt;: Pretty much optional, or very quick or fun to do.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;A&lt;/code&gt; tasks should be both important &lt;i&gt;and&lt;/i&gt; urgently done on the day they were scheduled.
    &lt;ul&gt;
      &lt;li&gt;Such tasks should be relatively rare!&lt;/li&gt;
      &lt;li&gt;If you have too many, you’re anxious about priorities and rendering
        priorities useless.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code&gt;C&lt;/code&gt; tasks can always be scheduled for another day without much worry.
    &lt;ul&gt;
      &lt;li&gt;Act! If the thought of rescheduling causes you to worry, upgrade it to a
        &lt;code&gt;B&lt;/code&gt; or &lt;code&gt;A&lt;/code&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;As such, most tasks will generally be priority &lt;code&gt;B&lt;/code&gt;:
    Tasks that need to be done, but the exact day isn’t as critical as with an
    &lt;code&gt;A&lt;/code&gt; task. These are the “bread and butter” tasks that make up your day to day
    life.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;On a task item, or any org-heading, press ~,~ then one of &lt;code&gt;A, B, C&lt;/code&gt; to set its
  priority.  Then &lt;code&gt;r&lt;/code&gt; to refresh.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-step-5-doing-the-work" class="anchor" aria-hidden="true" href="#step-5-doing-the-work"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Step 5: Doing the work&lt;/h3&gt;
&lt;p&gt;Since &lt;code&gt;A&lt;/code&gt; tasks are the important and urgent ones, if you do all of the &lt;code&gt;A&lt;/code&gt; tasks and
  nothing else today, no one would suffer. It’s a good day (─‿‿─).&lt;/p&gt;
&lt;p&gt;There should be no scheduling nor prioritising at this stage.
  You should not be touching your tasks file until your next review session:
  Either at the end of the day or the start of the next.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Leverage priorities! E.g., When a full day has several &lt;code&gt;C&lt;/code&gt; tasks, reschedule
    them for later in the week without a second thought.
    &lt;ul&gt;
      &lt;li&gt;You’ve already provided consideration when assigning priorities.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-step-6-moving-a-task-toward-completion" class="anchor" aria-hidden="true" href="#step-6-moving-a-task-toward-completion"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Step 6: Moving a task toward completion&lt;/h3&gt;
&lt;p&gt;My workflow states are described in the section
  &lt;a href="Workflow States"&gt;Workflow States&lt;/a&gt; and contain states: &lt;code&gt;TODO, STARTED, WAITING, ON_HOLD, CANCELLED, DONE&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Tasks marked &lt;code&gt;WAITING&lt;/code&gt; are ones for which we are awaiting some event, like someone
    to reply to our query. As such, these tasks can be rescheduled until I give up
    or the awaited event happens —in which case I go to &lt;code&gt;STARTED&lt;/code&gt; and document
    the reply to my query.&lt;/li&gt;
  &lt;li&gt;The task may be put off indefinitely with &lt;code&gt;ON_HOLD&lt;/code&gt;, or I may choose never to do it
    with &lt;code&gt;CANCELLED&lt;/code&gt;. Along with &lt;code&gt;DONE&lt;/code&gt;, these three mark a task as completed
    and so it needn’t appear in any agenda view.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I personally clock-in and clock-out of tasks —keep reading—, where upon
  clocking-out I’m prompted for a note about what I’ve accomplished so far.
  Entering a comment about what I’ve done, even if it’s very little, feels like
  I’m getting something done. It’s an explicit marker of progress.&lt;/p&gt;
&lt;p&gt;In the past, I would make a “captain’s log” at the end of the day, but that’s
  like commenting code after it’s written, I didn’t always feel like doing it and
  it wasn’t that important after the fact. The continuous approach of noting after
  every clock-out is much more practical, for me at least.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-step-7-archiving-tasks" class="anchor" aria-hidden="true" href="#step-7-archiving-tasks"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Step 7: Archiving Tasks&lt;/h3&gt;
&lt;p&gt;During the review state, when a task is completed, ‘archive’ it with &lt;code&gt;C-c C-x
  C-s&lt;/code&gt;: This marks it as done, adds a time stamp, and moves it to a local
  &lt;code&gt;*.org_archive&lt;/code&gt; file. What was our ‘to do’ list becomes a ‘ta da’ list showcasing
  all we have done (•̀ᴗ•́)و&lt;/p&gt;
&lt;p&gt;Archiving keeps task lists clutter free, but unlike deletion it allows us,
  possibly rarely, to look up details of a task or what tasks were completed in a
  certain time frame —which may be a motivational act, to see that you have
  actually completed more than you thought, provided you make and archive tasks
  regularly. We can use &lt;code&gt;M-x org-search-view&lt;/code&gt; to search an org file &lt;i&gt;and&lt;/i&gt; the archive
  file too, if we enable it so.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; C-c a s ➩ Search feature also looks into archived files.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Helpful when need to dig stuff up from the past.&lt;/span&gt;
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; org-agenda-text-search-extra-files '(agenda-archives))&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Invoking the agenda command shows the agenda and enables&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; the org-agenda variables.&lt;/span&gt;
(&lt;span class="pl-c1"&gt;org-agenda&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;a&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;a&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; ➩ Show my agenda upon Emacs startup.&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let’s install some helpful views for our agenda.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;C-c a c&lt;/code&gt;: See completed tasks at the end of the day and archive them.
    &lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Pressing ‘c’ in the org-agenda view shows all completed tasks,&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; which should be archived.&lt;/span&gt;
(&lt;span class="pl-c1"&gt;add-to-list&lt;/span&gt; &lt;span class="pl-c1"&gt;'org-agenda-custom-commands&lt;/span&gt;
  '(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;c&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; todo &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;DONE|ON_HOLD|CANCELLED&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;))
    &lt;/pre&gt;&lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code&gt;C-c a u&lt;/code&gt;: See unscheduled, undeadlined, and undated tasks in my todo files.
    Which should then be scheduled or archived.
    &lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;add-to-list&lt;/span&gt; &lt;span class="pl-c1"&gt;'org-agenda-custom-commands&lt;/span&gt;
  '(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;u&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; alltodo &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
     ((org-agenda-skip-function
        (&lt;span class="pl-k"&gt;lambda&lt;/span&gt; ()
              (org-agenda-skip-entry-if &lt;span class="pl-c1"&gt;'scheduled&lt;/span&gt; &lt;span class="pl-c1"&gt;'deadline&lt;/span&gt; &lt;span class="pl-c1"&gt;'regexp&lt;/span&gt;  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-cce"&gt;\n&lt;/span&gt;]+&amp;gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)))
              (org-agenda-overriding-header &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Unscheduled TODO entries: &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))))
    &lt;/pre&gt;&lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-super-agenda" class="anchor" aria-hidden="true" href="#super-agenda"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Super Agenda&lt;/h2&gt;
&lt;p&gt;The following incentivizes us to make use of &lt;code&gt;:tags:&lt;/code&gt; so that our agenda displays
  the tasks of the day depending on their tags —possibly using complex predicates.
  &lt;i&gt;This is far preferable to having them all in one big list.&lt;/i&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; org-super-agenda
  &lt;span class="pl-c1"&gt;:config&lt;/span&gt;
  (org-super-agenda-mode)
  (&lt;span class="pl-k"&gt;setq&lt;/span&gt; org-super-agenda-groups
        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Default order is 0, first come first serve.&lt;/span&gt;
        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Items are “or”-ed by default.&lt;/span&gt;
        '((&lt;span class="pl-c1"&gt;:name&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Important&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
                 &lt;span class="pl-c1"&gt;:tag&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;PackageFormer&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
                 &lt;span class="pl-c1"&gt;:and&lt;/span&gt; (&lt;span class="pl-c1"&gt;:tag&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;JC&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;:priority&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;A&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
                 &lt;span class="pl-c1"&gt;:and&lt;/span&gt; (&lt;span class="pl-c1"&gt;:tag&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;WK&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;:priority&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;A&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
                 &lt;span class="pl-c1"&gt;:priority&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;A&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)

          &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Groups supply their own section names when none are given&lt;/span&gt;
          (&lt;span class="pl-c1"&gt;:tag&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;personal&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
          (&lt;span class="pl-c1"&gt;:tag&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;3mi3&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
          (&lt;span class="pl-c1"&gt;:name&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Emacs Init&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;:tag&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;init&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
          (&lt;span class="pl-c1"&gt;:priority&amp;lt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;B&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;:order&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;))))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;a href="https://github.com/alphapapa/org-super-agenda"&gt;org-super-agenda&lt;/a&gt; homepage shows complex configurations and pleasant screenshots
  contrasting with and without the system.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-automating-pomodoro-commit-for-only-25-minutes" class="anchor" aria-hidden="true" href="#automating-pomodoro-commit-for-only-25-minutes"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Automating &lt;a href="https://en.wikipedia.org/wiki/Pomodoro_Technique" rel="nofollow"&gt;Pomodoro&lt;/a&gt; —“Commit for only 25 minutes!”&lt;/h2&gt;
&lt;p&gt;Effort estimates are for an entire task.
  Yet, sometimes it’s hard to even get started on some tasks.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The code below ensures a 25 minute timer is started whenever clocking in happens.
    &lt;ul&gt;
      &lt;li&gt;The timer is in the lower right of the modeline.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;When the timer runs out, we get a notification.&lt;/li&gt;
  &lt;li&gt;We may have the momentum to continue on the difficult task, or clock-out and
    take a break after documenting what was accomplished.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Tasks get a 25 minute count down timer&lt;/span&gt;
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; org-timer-default-timer &lt;span class="pl-c1"&gt;25&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Use the timer we set when clocking in happens.&lt;/span&gt;
(&lt;span class="pl-c1"&gt;add-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;'org-clock-in-hook&lt;/span&gt;
  (&lt;span class="pl-k"&gt;lambda&lt;/span&gt; () (&lt;span class="pl-c1"&gt;org-timer-set-timer&lt;/span&gt; '(&lt;span class="pl-c1"&gt;16&lt;/span&gt;))))

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; unless we clocked-out with less than a minute left,&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; show disappointment message.&lt;/span&gt;
(&lt;span class="pl-c1"&gt;add-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;'org-clock-out-hook&lt;/span&gt;
  (&lt;span class="pl-k"&gt;lambda&lt;/span&gt; ()
  (&lt;span class="pl-k"&gt;unless&lt;/span&gt; (s-prefix&lt;span class="pl-c1"&gt;? &lt;/span&gt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;0:00&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; (org-timer-value-string))
     (&lt;span class="pl-c1"&gt;message-box&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;The basic 25 minutes on this difficult task are not up; it's a shame to see you leave.&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
     (org-timer-stop)))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that this does not conflict with the total effort estimate for the task.&lt;/p&gt;
&lt;p&gt;⟨ I’m told there’s a package already made for this —maybe I need to stop writing
  good, and do more searches; then again, I’ve learned a lot by writing code. ⟩&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-journaling" class="anchor" aria-hidden="true" href="#journaling"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Journaling&lt;/h2&gt;
&lt;p&gt;Thus far I’ve made it easy to quickly capture ideas and tasks, not so much on
  the analysis phase:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;What was accomplished today?&lt;/li&gt;
  &lt;li&gt;What are some notably bad habits? Good habits?&lt;/li&gt;
  &lt;li&gt;What are some future steps?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Rather than overloading the capture mechanism for such thoughts, let’s employ
  &lt;code&gt;org-journal&lt;/code&gt; —journal entries are stored in files such as &lt;code&gt;journal/20190407&lt;/code&gt;,
  where the file name is simply the date, or only one file per year as I’ve set it
  up below.  Each entry is the week day, along with the date, then each child tree
  is an actual entry with a personal title preceded by the time the entry was
  made.  Unlike capture and its agenda support, journal ensures entries are
  maintained in chronological order with calendar support.&lt;/p&gt;
&lt;p&gt;Since org files are plain text files, an entry can be written anywhere and later
  ported to the journal.&lt;/p&gt;
&lt;p&gt;The separation of concerns is to emphasise the capture stage as being quick and
  relatively mindless, whereas the journaling stage as being mindful.  Even though
  we may utilise capture to provide quick support for including journal entries, I
  have set my journal to be on a yearly basis —one file per year— since I want
  to be able to look at previous entries when making the current entry; after all,
  it’s hard to compare and contrast easily unless there’s multiple entries opened
  already.&lt;/p&gt;
&lt;p&gt;As such, ideally at the end of the day, I can review what has happened, and what
  has not, and why this is the case, and what I intend to do about it, and what
  problems were encountered and how they were solved —in case the problem is
  encountered again in the future.  *Consequently, if I encounter previously
  confronted situations, problems,* &lt;b&gt;all I have to do is reread my journal to get an
  idea of how to progress.&lt;/b&gt; Read more about &lt;a href="https://www.google.com/search?q=on+the+importance+of+reviwing+your+day+daily&amp;amp;oq=on+the+importance+of+reviwing+your+day+daily&amp;amp;aqs=chrome..69i57.367j0j7&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8" rel="nofollow"&gt;the importance of reviewing your day on
  a daily basis&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Moreover, by journaling with Org on a daily basis, it can be relatively easy to
  produce a report on what has been happening recently, at work for example. I’d
  like to have multiple journals, for work and for personal life, as such I will
  utilise a prefix argument to obtain my work specific entries.&lt;/p&gt;
&lt;p&gt;Anyhow, the setup:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;defun&lt;/span&gt; &lt;span class="pl-e"&gt;my/org-journal-new-entry&lt;/span&gt; (&lt;span class="pl-v"&gt;prefix&lt;/span&gt;)
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Open today’s journal file and start a new entry.&lt;/span&gt;
&lt;span class="pl-s"&gt;&lt;/span&gt;
&lt;span class="pl-s"&gt;  With a prefix, we use the work journal; otherwise the personal journal.&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  (&lt;span class="pl-k"&gt;interactive&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;P&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
  (-let [org-journal-file-format (&lt;span class="pl-k"&gt;if&lt;/span&gt; prefix &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Work-%Y-%m-%d&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; org-journal-file-format)]
    (org-journal-new-entry &lt;span class="pl-c1"&gt;nil&lt;/span&gt;)
    (&lt;span class="pl-c1"&gt;org-mode&lt;/span&gt;)
    (org-show-all)))

(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; org-journal
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; C-u C-c j ⇒ Work journal ;; C-c C-j ⇒ Personal journal&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:bind&lt;/span&gt; ((&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-c j&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; my/org-journal-new-entry))
  &lt;span class="pl-c1"&gt;:config&lt;/span&gt;
  (&lt;span class="pl-k"&gt;setq&lt;/span&gt; org-journal-dir         &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;~/Dropbox/journal/&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
        org-journal-file-type   &lt;span class="pl-c1"&gt;'yearly&lt;/span&gt;
        org-journal-file-format &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Personal-%Y-%m-%d&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Bindings available in &lt;code&gt;org-journal-mode&lt;/code&gt;, when journaling:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;C-c C-j&lt;/code&gt;: Insert a new entry into the current journal file.
    &lt;ul&gt;
      &lt;li&gt;Note that keys for &lt;code&gt;org-journal-new-entry&lt;/code&gt; shadow those for &lt;code&gt;org-goto&lt;/code&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code&gt;C-c C-s&lt;/code&gt;: Search the journal for a string.
    &lt;ul&gt;
      &lt;li&gt;Note that keys for &lt;code&gt;org-journal-search&lt;/code&gt; shadow those for &lt;code&gt;org-schedule&lt;/code&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All journal entries are registered in the Emacs Calendar.  To see available
  journal entries do &lt;code&gt;M-x calendar&lt;/code&gt;.  Bindings available in the calendar-mode:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;j&lt;/code&gt;: View an entry in a new buffer.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;i j&lt;/code&gt;: ‘I’nsert a new ‘j’ournal entry into the day’s file.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;f w/m/y/f/F&lt;/code&gt;: ‘F’ind, search, in all entries of the current week, month, year, all of time,
    of in all entries in the future.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-workflow-states" class="anchor" aria-hidden="true" href="#workflow-states"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Workflow States&lt;/h2&gt;
&lt;p&gt;Here are some of my common workflow states, —the ‘X/Y’ indicates to do action ‘X’
  when entering a state and ‘Y’ when leaving it, with ‘!’ denoting a timestamp
  should be generated and ‘@’ denoting a user note should be made.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;setq&lt;/span&gt; org-todo-keywords
      '((sequence &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;TODO(t)&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;STARTED(s@/!)&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;|&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;DONE(d/!)&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
        (sequence &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;WAITING(w@/!)&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;ON_HOLD(h@/!)&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;|&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;CANCELLED(c@/!)&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)))

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Since DONE is a terminal state, it has no exit-action.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Let's explicitly indicate time should be noted.&lt;/span&gt;
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; org-log-done &lt;span class="pl-c1"&gt;'time&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;@&lt;/code&gt; brings up a pop-up to make a local note about why the state changed.
  &lt;b&gt;Super cool stuff!&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;In particular, we transition from &lt;code&gt;TODO&lt;/code&gt; to &lt;code&gt;STARTED&lt;/code&gt; once 15 minutes, or a
  reasonable amount, of work has transpired.  Since all but one state are marked
  for logging, we could use the &lt;code&gt;lognotestate&lt;/code&gt; logging facility of org-mode, which
  prompts for a note every time a task’s state is changed.&lt;/p&gt;
&lt;p&gt;Entering a comment about what I’ve done, even if it’s very little, feels like
  I’m getting something done. It’s an explicit marker of progress and motivates me
  to want to change my task’s states more often until I see it marked &lt;code&gt;DONE&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here’s how they are coloured,&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;setq&lt;/span&gt; org-todo-keyword-faces
      '((&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;TODO&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;      &lt;span class="pl-c1"&gt;:foreground&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;red&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;          &lt;span class="pl-c1"&gt;:weight&lt;/span&gt; &lt;span class="pl-c1"&gt;bold&lt;/span&gt;)
        (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;STARTED&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;   &lt;span class="pl-c1"&gt;:foreground&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;blue&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;         &lt;span class="pl-c1"&gt;:weight&lt;/span&gt; &lt;span class="pl-c1"&gt;bold&lt;/span&gt;)
        (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;DONE&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;      &lt;span class="pl-c1"&gt;:foreground&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;forest green&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;:weight&lt;/span&gt; &lt;span class="pl-c1"&gt;bold&lt;/span&gt;)
        (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;WAITING&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;   &lt;span class="pl-c1"&gt;:foreground&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;orange&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;       &lt;span class="pl-c1"&gt;:weight&lt;/span&gt; &lt;span class="pl-c1"&gt;bold&lt;/span&gt;)
        (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;ON_HOLD&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;   &lt;span class="pl-c1"&gt;:foreground&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;magenta&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;      &lt;span class="pl-c1"&gt;:weight&lt;/span&gt; &lt;span class="pl-c1"&gt;bold&lt;/span&gt;)
        (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;CANCELLED&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;:foreground&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;forest green&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;:weight&lt;/span&gt; &lt;span class="pl-c1"&gt;bold&lt;/span&gt;)))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we press &lt;code&gt;C-c C-t&lt;/code&gt; then the letter shortcut to actually make the state of an org heading.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;setq&lt;/span&gt; org-use-fast-todo-selection &lt;span class="pl-c1"&gt;t&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can also change through states using Shift- left, or right.&lt;/p&gt;
&lt;p&gt;Let’s draw a state diagram to show what such a workflow looks like.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://plantuml.com/index" rel="nofollow"&gt;PlantUML&lt;/a&gt; supports drawing diagrams in a tremendously simple format
  —it even supports Graphviz/DOT directly and many other formats.
  Super simple setup instructions can be found &lt;a href="http://eschulte.github.io/babel-dev/DONE-integrate-plantuml-support.html" rel="nofollow"&gt;here&lt;/a&gt;; below are a bit more
  involved instructions. Read the manual &lt;a href="http://plantuml.com/guide" rel="nofollow"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Install the tool&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt; (async-shell-command "brew cask install java") ;; Dependency&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt; (async-shell-command "brew install plantuml")&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Tell emacs where it is.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; E.g., (async-shell-command "find / -name plantuml.jar")&lt;/span&gt;
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; org-plantuml-jar-path
      (&lt;span class="pl-c1"&gt;expand-file-name&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/usr/local/Cellar/plantuml/1.2019.13/libexec/plantuml.jar&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Enable C-c C-c to generate diagrams from plantuml src blocks.&lt;/span&gt;
(&lt;span class="pl-c1"&gt;add-to-list&lt;/span&gt; &lt;span class="pl-c1"&gt;'org-babel-load-languages&lt;/span&gt; '(plantuml &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;) )
(&lt;span class="pl-c1"&gt;require&lt;/span&gt; &lt;span class="pl-c1"&gt;'ob-plantuml&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt; Use fundamental mode when editing plantuml blocks with C-c '&lt;/span&gt;
(&lt;span class="pl-c1"&gt;add-to-list&lt;/span&gt; &lt;span class="pl-c1"&gt;'org-src-lang-modes&lt;/span&gt; '(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;plantuml&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; fundamental))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let’s use this!&lt;/p&gt;
&lt;pre lang="plantuml"&gt;skinparam defaultTextAlignment center  /' Text alignment '/

skinparam titleBorderRoundCorner 15
skinparam titleBorderThickness 2
skinparam titleBorderColor red
skinparam titleBackgroundColor Aqua-CadetBlue
title My Personal Task States

[*] -&amp;gt; Todo          /' This is my starting state '/
Done -right-&amp;gt; [*]    /' This is an end state      '/
Cancelled -up-&amp;gt; [*]  /' This is an end state      '/

/'A task is “Todo”, then it's “started”, then finally it's “done”. '/
Todo    -right-&amp;gt; Started
Started -down-&amp;gt;  Waiting
Waiting -up-&amp;gt;    Started
Started -right-&amp;gt; Done

/'Along the way, I may pause the task for some reason then
  return to it. This may be since I'm “Blocked” since I need
  something, or the task has been put on “hold” since it may not
  be important right now, and it may be “cancelled” eventually.
'/

Todo    -down-&amp;gt; Waiting
Waiting -up-&amp;gt; Todo
Waiting -up-&amp;gt; Done

Todo -down-&amp;gt; On_Hold
On_Hold -&amp;gt; Todo

On_Hold -down-&amp;gt; Cancelled
Waiting -down-&amp;gt; Cancelled
Todo    -down-&amp;gt; Cancelled

/' The Org-mode shortcuts for these states are as follows. '/
Todo      : t
On_Hold   : h
Started   : s
Waiting   : w
Cancelled : c
Done      : d

/' If a task is paused, we should document why this is the case. '/
note right  of Waiting:   Note what is\nblocking us.
note right  of Cancelled: Note reason\nfor cancellation.
note bottom of On_Hold:   Note reason\nfor reduced priority.

center footer  ♥‿♥ Org-mode is so cool (•̀ᴗ•́)و
/' Note that we could omit the “center, left, right” if we wished,
   or used a “header” instead.'/
&lt;/pre&gt;
&lt;p&gt;#+results[be722b7f6a40cf685468918df82a3b22468e3d24]:
  &lt;a target="_blank" rel="noopener noreferrer" href="workflow.png"&gt;&lt;img src="workflow.png" alt="workflow.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Of note:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Multiline comments are with &lt;code&gt;/' comment here '/&lt;/code&gt;, single quote starts a one-line comment.&lt;/li&gt;
  &lt;li&gt;Nodes don’t need to be declared, and their names may contain spaces if they are enclosed in double-quotes.&lt;/li&gt;
  &lt;li&gt;One forms an arrow between two nodes by writing a line with &lt;code&gt;x -&amp;gt;[label here] y&lt;/code&gt;
    or &lt;code&gt;y &amp;lt;- x&lt;/code&gt;; or using &lt;code&gt;--&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;--&lt;/code&gt; for dashed lines. The label is optional.
    &lt;p&gt;To enforce a particular layout, use &lt;code&gt;-X-&amp;gt;&lt;/code&gt; where &lt;code&gt;X ∈ {up, down, right, left}&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;To declare that a node &lt;code&gt;x&lt;/code&gt; has fields &lt;code&gt;d, f&lt;/code&gt; we make two new lines having
    &lt;code&gt;x : f&lt;/code&gt; and &lt;code&gt;x : d&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;One adds a note near a node &lt;code&gt;x&lt;/code&gt; as follows: &lt;code&gt;note right of x: words then newline\nthen more words&lt;/code&gt;.
    &lt;p&gt;Likewise for notes on the &lt;code&gt;left, top, bottom&lt;/code&gt;.&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;A note can be on several lines. It’s terminated by &lt;code&gt;end note&lt;/code&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Interesting sprites and many other things can be done with PlantUML. Read the docs.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This particular workflow is inspired by &lt;a href="http://doc.norang.ca/org-mode.html" rel="nofollow"&gt;Bernt Hansen&lt;/a&gt; —while quickly searching
  through the PlantUML &lt;a href="http://plantuml.com/guide" rel="nofollow"&gt;manual&lt;/a&gt;: The above is known as an “activity diagram” and
  it’s covered in §4.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-clocking-work-time" class="anchor" aria-hidden="true" href="#clocking-work-time"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Clocking Work Time&lt;/h2&gt;
&lt;p&gt;Let’s keep track of the time we spend working on tasks that we may have captured
  for ourselves the previous day.  Such statistics provides a good idea of how
  long it actually takes me to accomplish a certain task in the future and it lets
  me know where my time has gone.&lt;/p&gt;
&lt;dl&gt;
  &lt;dt&gt;Clock in&lt;/dt&gt;&lt;dd&gt;on a heading with &lt;code&gt;I&lt;/code&gt;, or in the subtree with &lt;code&gt;C-c C-x C-i&lt;/code&gt;.&lt;/dd&gt;
  &lt;dt&gt;Clock out&lt;/dt&gt;&lt;dd&gt;of a heading with &lt;code&gt;O&lt;/code&gt;, or in the subtree with &lt;code&gt;C-c C-x C-o&lt;/code&gt;.&lt;/dd&gt;
  &lt;dt&gt;Clock report&lt;/dt&gt;&lt;dd&gt;See clocked times with &lt;code&gt;C-c C-x C-r&lt;/code&gt;.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;After clocking out, the start and end times, as well as the elapsed time, are
  added to a drawer to the heading. We can punch in and out of tasks as many times
  as desired, say we took a break or switched to another task, and they will all
  be recorded into the drawer.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Record a note on what was accomplished when clocking out of an item.&lt;/span&gt;
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; org-log-note-clock-out &lt;span class="pl-c1"&gt;t&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To get started, we could estimate how long a task will take and clock-in; then
  clock-out and see how long it actually took.&lt;/p&gt;
&lt;p&gt;Moreover, we can overlay due dates and priorities to tasks in a non-intrusive
  way that is easy to edit by hand.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; List of all the files &amp;amp; directories where todo items can be found. Only one&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; for now: My default notes file.&lt;/span&gt;
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; org-agenda-files (&lt;span class="pl-k"&gt;list&lt;/span&gt; org-default-notes-file))

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; How many days ahead the default agenda view should look&lt;/span&gt;
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; org-agenda-ndays &lt;span class="pl-c1"&gt;7&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; How many days early a deadline item will begin showing up in your agenda list.&lt;/span&gt;
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; org-deadline-warning-days &lt;span class="pl-c1"&gt;14&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; In the agenda view, days that have no associated tasks will still have a line showing the date.&lt;/span&gt;
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; org-agenda-show-all-dates &lt;span class="pl-c1"&gt;t&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Scheduled items marked as complete will not show up in your agenda view.&lt;/span&gt;
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; org-agenda-skip-scheduled-if-done &lt;span class="pl-c1"&gt;t&lt;/span&gt;)
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; org-agenda-skip-deadline-if-done  &lt;span class="pl-c1"&gt;t&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The agenda view ––even in the 7-days-at-a-time view–– will always begin on the
  current day.  This is important, since while using org-mode as a day planner,
  you never want to think of days gone past. That’s something you do in other
  ways, such as when reviewing completed tasks.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;setq&lt;/span&gt; org-agenda-start-on-weekday &lt;span class="pl-c1"&gt;nil&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Sometimes, at the beginning at least, I would accidentally invoke the transposed
  command &lt;code&gt;C-x C-c&lt;/code&gt;, which saves all buffers and quits Emacs. So here’s a helpful
  way to ensure I don’t quit Emacs accidentally.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;setq&lt;/span&gt; confirm-kill-emacs &lt;span class="pl-c1"&gt;'yes-or-no-p&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A few more settings:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Resume clocking task when emacs is restarted&lt;/span&gt;
(&lt;span class="pl-c1"&gt;org-clock-persistence-insinuate&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Show lot of clocking history&lt;/span&gt;
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; org-clock-history-length &lt;span class="pl-c1"&gt;23&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Resume clocking task on clock-in if the clock is open&lt;/span&gt;
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; org-clock-in-resume &lt;span class="pl-c1"&gt;t&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Sometimes I change tasks I'm clocking quickly ---this removes clocked tasks with 0:00 duration&lt;/span&gt;
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; org-clock-out-remove-zero-time-clocks &lt;span class="pl-c1"&gt;t&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Clock out when moving task to a done state&lt;/span&gt;
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; org-clock-out-when-done &lt;span class="pl-c1"&gt;t&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Save the running clock and all clock history when exiting Emacs, load it on startup&lt;/span&gt;
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; org-clock-persist &lt;span class="pl-c1"&gt;t&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Do not prompt to resume an active clock&lt;/span&gt;
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; org-clock-persist-query-resume &lt;span class="pl-c1"&gt;nil&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Include current clocking task in clock reports&lt;/span&gt;
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; org-clock-report-include-clocking-task &lt;span class="pl-c1"&gt;t&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-finding-tasks-to-clock-in" class="anchor" aria-hidden="true" href="#finding-tasks-to-clock-in"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Finding tasks to clock in&lt;/h3&gt;
&lt;p&gt;Use one of the following options, with the top-most being the first to be tried.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;From anywhere, &lt;code&gt;C-u C-c C-x C-i&lt;/code&gt; yields a pop-up for recently clocked in tasks.&lt;/li&gt;
  &lt;li&gt;Pick something off today’s agenda scheduled items.&lt;/li&gt;
  &lt;li&gt;Pick a &lt;code&gt;Started&lt;/code&gt; task from the agenda view, work on this unfinished task.&lt;/li&gt;
  &lt;li&gt;Pick something from the &lt;code&gt;TODO&lt;/code&gt; tasks list in the agenda view.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;C-c C-x C-d&lt;/code&gt; also provides a quick summary of clocked time for the current org file.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-estimates-versus-actual-time" class="anchor" aria-hidden="true" href="#estimates-versus-actual-time"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Estimates versus actual time&lt;/h3&gt;
&lt;p&gt;Before clocking into a task, add to the properties drawer &lt;code&gt;:Effort: 1:25&lt;/code&gt; or &lt;code&gt;C-c
  C-x C-e&lt;/code&gt;, for a task that you estimate will take an hour and twenty-five minutes,
  for example. Now the modeline will mention the time elapsed alongside the task
  name. &lt;b&gt;Woah!&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;This is also useful when you simply want to put a time limit on a task that
    wont be completed anytime soon, say writing a thesis or a long article, but
    you still want to work on it for an hour a day and be warned when you exceed
    such a time constraint.
    &lt;p&gt;When you’ve gone above your estimate time, the modeline colours it red.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;a id="user-content-programming" class="anchor" aria-hidden="true" href="#programming"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Programming&lt;/h1&gt;
&lt;p&gt;Herein we configure utilites for version control, function and variable lookup,
  and template expansion for inescapably repetitive scenarios.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-highlight-defined-lisp-symbols" class="anchor" aria-hidden="true" href="#highlight-defined-lisp-symbols"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Highlight defined Lisp symbols&lt;/h2&gt;
&lt;p&gt;Usually Emacs only highlights macro names, the &lt;a href="https://github.com/Fanael/highlight-defined"&gt;following&lt;/a&gt; incantation makes it
  highlight all defined names —as long as we’re in Lisp mode, whence in org-src
  blocks we use ~C-c ‘~.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Emacs Lisp specific&lt;/span&gt;
(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; highlight-defined
  &lt;span class="pl-c1"&gt;:hook&lt;/span&gt; (&lt;span class="pl-c1"&gt;emacs-lisp-mode&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; highlight-defined-mode))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Super helpful in making my Emacs configuration: If a name is not highlighted,
  then I’ve misspelled it or it doesn’t exist! &lt;g-emoji class="g-emoji" alias="smile" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png"&gt;😄&lt;/g-emoji&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-eldoc-for-lisp-and-haskell" class="anchor" aria-hidden="true" href="#eldoc-for-lisp-and-haskell"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Eldoc for Lisp and Haskell&lt;/h2&gt;
&lt;p&gt;In &lt;code&gt;emacs-lisp-mode&lt;/code&gt; we can enable &lt;code&gt;eldoc-mode&lt;/code&gt; to display information
  about a function or a variable in the echo area. Likewise for Haskell.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;add-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;'emacs-lisp-mode-hook&lt;/span&gt;       &lt;span class="pl-c1"&gt;'turn-on-eldoc-mode&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;add-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;'lisp-interaction-mode-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;'turn-on-eldoc-mode&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;add-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;'haskell-mode-hook&lt;/span&gt;          &lt;span class="pl-c1"&gt;'turn-on-haskell-doc-mode&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;add-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;'haskell-mode-hook&lt;/span&gt;          &lt;span class="pl-c1"&gt;'turn-on-haskell-indent&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The less casual Haskeller would likely want to use &lt;a href="https://haskell-lang.org/intero" rel="nofollow"&gt;intero&lt;/a&gt; to obtain
  more support; e.g., obtain suggestions from GHC about redundant imports
  or type signatures.&lt;/p&gt;
&lt;p&gt;The more&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-jumping-to-definitions--references" class="anchor" aria-hidden="true" href="#jumping-to-definitions--references"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Jumping to definitions &amp;amp; references&lt;/h2&gt;
&lt;p&gt;Out-of-the-box Emacs has ‘xref’ utilities &lt;code&gt;M-.&lt;/code&gt; and &lt;code&gt;C-u M-.&lt;/code&gt; to &lt;a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Xref.html#Xref" rel="nofollow"&gt;Find Identifier
  References&lt;/a&gt;; however, tags to source definitions need to be generated using the
  &lt;code&gt;etags&lt;/code&gt; program. Nonetheless, the xref utilites are impressive and some just work:
  For example, &lt;code&gt;M-?&lt;/code&gt; cleverly finds &lt;i&gt;all&lt;/i&gt; references for an identifier in ‘near by’
  files; whereas &lt;code&gt;C-u M-. RET my/.*&lt;/code&gt;, for example, uses the given regular expression
  to list all identifiers with prefix &lt;code&gt;my/&lt;/code&gt;, thereby listing my personally defined
  names ^_^&lt;/p&gt;
&lt;table&gt;
  &lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;C-M-. 𝓇𝓮ℊ𝓮𝓍&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Find all identifiers whose name matches the given pattern&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;Let’s get &lt;a href="https://github.com/jacktasia/dumb-jump"&gt;dumb-jump&lt;/a&gt;, where the ‘dumb’ is possibly due to the fact
  that it works by brute-force regular-expression lookup of
  pre-defined ‘definitional template’ rules. It “just works” ^_^&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; dumb-jump
  &lt;span class="pl-c1"&gt;:bind&lt;/span&gt; ((&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;M-g q&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;     &lt;span class="pl-k"&gt;.&lt;/span&gt; dumb-jump-quick-look) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Show me in a tooltip.&lt;/span&gt;
         (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;M-g .&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;     &lt;span class="pl-k"&gt;.&lt;/span&gt; dumb-jump-go-other-window)
         (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;M-g b&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;     &lt;span class="pl-k"&gt;.&lt;/span&gt; dumb-jump-back)
         (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;M-g p&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;     &lt;span class="pl-k"&gt;.&lt;/span&gt; dumb-jump-go-prompt)
         (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;M-g a&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;     &lt;span class="pl-k"&gt;.&lt;/span&gt; xref-find-apropos)) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; aka C-M-.&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:config&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; If source file is visible, just shift focus to it.&lt;/span&gt;
  (&lt;span class="pl-k"&gt;setq&lt;/span&gt; dumb-jump-use-visible-window &lt;span class="pl-c1"&gt;t&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In Lisp, for binding macros, it lists all possible mentions of the bound
  variable —the first is likely what is desired.  Alternatively, one could just
  add the necessary rule to the variable &lt;code&gt;dumb-jump-find-rules&lt;/code&gt;.  Otherwise, it
  works fine even for locally bound definitions.  It works depending on the
  extension of a file.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-aggressive-indentation" class="anchor" aria-hidden="true" href="#aggressive-indentation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Aggressive Indentation&lt;/h2&gt;
&lt;p&gt;With a single space or tab, my code should always remain indented.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Always stay indented: Automatically have blocks reindented after every change.&lt;/span&gt;
(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; aggressive-indent
  &lt;span class="pl-c1"&gt;:config&lt;/span&gt; (&lt;span class="pl-c1"&gt;global-aggressive-indent-mode&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;))

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Use 4 spaces in places of tabs when indenting.&lt;/span&gt;
(&lt;span class="pl-c1"&gt;setq-default&lt;/span&gt; indent-tabs-mode &lt;span class="pl-c1"&gt;nil&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;setq-default&lt;/span&gt; tab-width &lt;span class="pl-c1"&gt;4&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-whats-changed--whos-to-blame" class="anchor" aria-hidden="true" href="#whats-changed--whos-to-blame"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;What’s changed &amp;amp; who’s to blame?&lt;/h2&gt;
&lt;p&gt;Let’s have, in a fringe, an indicator for altered regions in a version
  controlled file.  The symbols “+, =” appear in a fringe by default for
  alterations —we may change these if we like.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Hunk navigation and commiting.&lt;/span&gt;
(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; git-gutter
  &lt;span class="pl-c1"&gt;:diminish&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:config&lt;/span&gt; (global-git-gutter-mode))
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Diff updates happen in real time according when user is idle.&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let’s set a hydra so we can press &lt;code&gt;C-x v n n p n&lt;/code&gt; to move the next two
  altered hunks, move back one, then move to the next. This saves me having
  to supply the prefix &lt;code&gt;C-x v&lt;/code&gt; each time I navigate among my alterations.
  At any point we may also press &lt;code&gt;u 𝕩&lt;/code&gt; to denote &lt;code&gt;C-u ⟪prefix⟫ 𝕩&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(defhydra hydra-version-control (&lt;span class="pl-c1"&gt;global-map&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-x v&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Version control&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Syntax: (extension method description)&lt;/span&gt;
  (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;n&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; git-gutter:next-hunk      &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Next hunk&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
  (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;p&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; git-gutter:previous-hunk  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Previous hunk&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
  (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;d&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; git-gutter:popup-hunk     &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Show hunk diff&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
  (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;r&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; git-gutter:revert-hunk    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Revert hunk&lt;span class="pl-cce"&gt;\n&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
  (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;c&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; git-gutter:stage-hunk     &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Stage hunk&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
  (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;s&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; git-gutter:statistic      &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;How many added &amp;amp; deleted lines&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Commiting with &lt;code&gt;C-x v c&lt;/code&gt; let’s us use &lt;code&gt;C-c C-k&lt;/code&gt; to cancel and &lt;code&gt;C-c C-c&lt;/code&gt; to
  submit the given message; &lt;code&gt;C-c C-a&lt;/code&gt; to amend the previous commit.&lt;/p&gt;
&lt;p&gt;Alternatively, we may use &lt;a href="https://github.com/dgutov/diff-hl"&gt;diff-hl&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Colour fringe to indicate alterations.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; (use-package diff-hl)&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; (global-diff-hl-mode)&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A few more helpful version control features:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Popup for who's to blame for alterations.&lt;/span&gt;
(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; git-messenger
  &lt;span class="pl-c1"&gt;:config&lt;/span&gt; &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Always show who authored the commit and when.&lt;/span&gt;
          (&lt;span class="pl-k"&gt;setq&lt;/span&gt; git-messenger:show-detail &lt;span class="pl-c1"&gt;t&lt;/span&gt;)
          &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Message menu let's us use magit diff to see the commit change.&lt;/span&gt;
          (&lt;span class="pl-k"&gt;setq&lt;/span&gt; git-messenger:use-magit-popup &lt;span class="pl-c1"&gt;t&lt;/span&gt;))

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; View current file in browser on github.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; More generic is “browse-at-remote”.&lt;/span&gt;
(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; github-browse-file)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Add these to the version control hydra.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;;&lt;/span&gt;
(defhydra hydra-version-control (&lt;span class="pl-c1"&gt;global-map&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-x v&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
  (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;b&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; git-messenger:popup-message &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Who's to blame?&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; C-u C-x b ╱ u b ∷ Also show who authored the change and when.&lt;/span&gt;
  (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;g&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; github-browse-file-blame &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Show file in browser in github&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
  (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;s&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; magit-status &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Git status of current buffer&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Perhaps &lt;code&gt;C-x v b&lt;/code&gt; will motivate smaller, frequent, commits.&lt;/p&gt;
&lt;p&gt;Obtaining URL links to the current location of a file
  —URLs are added to the kill ring.
  Usefully, if &lt;a href="https://gitlab.com/pidu/git-timemachine" rel="nofollow"&gt;git-timemachine-mode&lt;/a&gt; is active, the generated link
  points to the version of the file being visited.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; git-link)

(defhydra hydra-version-control (&lt;span class="pl-c1"&gt;global-map&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-x v&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
  (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;l&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; git-link &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Git URL for current location&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Read &lt;a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Version-Control.html#Version-Control" rel="nofollow"&gt;here&lt;/a&gt; for more about version control in general.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-highlighting-todo-s--showing-them-in-magit" class="anchor" aria-hidden="true" href="#highlighting-todo-s--showing-them-in-magit"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Highlighting TODO-s &amp;amp; Showing them in Magit&lt;/h2&gt;
&lt;p&gt;Basic support todos. By default these include: TODO NEXT THEM PROG OKAY DONT
  FAIL DONE NOTE KLUDGE HACK TEMP FIXME and any sequence of X’s or ?’s of length
  at least 3: XXX, XXXX, XXXXX, …, ???, ????, ????, ….&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; NOTE that the highlighting works even in comments.&lt;/span&gt;
(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; hl-todo
  &lt;span class="pl-c1"&gt;:init&lt;/span&gt; (global-hl-todo-mode)   &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Enable it everywhere.&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:config&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Adding new keywords&lt;/span&gt;
  (&lt;span class="pl-c1"&gt;loop&lt;/span&gt; for kw in '(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;TEST&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;MA&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;WK&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;JC&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
        do (&lt;span class="pl-c1"&gt;add-to-list&lt;/span&gt; &lt;span class="pl-c1"&gt;'hl-todo-keyword-faces&lt;/span&gt; (&lt;span class="pl-k"&gt;cons&lt;/span&gt; kw &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;#dc8cc3&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Lest these get buried in mountains of text, let’s have them &lt;a href="https://github.com/alphapapa/magit-todos"&gt;become
  mentioned&lt;/a&gt; in a magit status buffer —which uses the keywords from &lt;code&gt;hl-todo&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; MA: The todo keywords work in code too!&lt;/span&gt;
(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; magit-todos
  &lt;span class="pl-c1"&gt;:after&lt;/span&gt; magit
  &lt;span class="pl-c1"&gt;:after&lt;/span&gt; hl-todo
  &lt;span class="pl-c1"&gt;:config&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; For some reason cannot use :custom with this package.&lt;/span&gt;
  (&lt;span class="pl-c1"&gt;custom-set-variables&lt;/span&gt;
    '(magit-todos-keywords (&lt;span class="pl-k"&gt;list&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;TODO&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;FIXME&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;MA&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;WK&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;JC&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)))
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Ignore TODOs mentioned in exported HTML files; they're duplicated from org src.&lt;/span&gt;
  (&lt;span class="pl-k"&gt;setq&lt;/span&gt; magit-todos-exclude-globs '(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;*.html&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
  (magit-todos-mode))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that such TODO keywords are not propagated from sections that are
  COMMENT-ed out in org-mode.&lt;/p&gt;
&lt;p&gt;Open a Magit status buffer, or run &lt;code&gt;magit-todos-list&lt;/code&gt; to show a dedicated to-do
  list buffer. You can then peek at items with space, or jump to them with enter.&lt;/p&gt;
&lt;p&gt;Seeing the TODO list with each commit is an incentive to actually tackle the
  items there (•̀ᴗ•́)و&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Ensure you exclude generated files, such as the Emacs backups directory,
    from being consulte. Using &lt;code&gt;magit&lt;/code&gt;, press &lt;code&gt;i&lt;/code&gt; to mark items to be ignored.&lt;/li&gt;
  &lt;li&gt;This feature also works outside of git repos.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Add these to the version control hydra.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(defhydra hydra-version-control (&lt;span class="pl-c1"&gt;global-map&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-x v&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
  (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;t&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; helm-magit-todos &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Show TODOs lists for this repo.&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-on-the-fly-syntax-checking" class="anchor" aria-hidden="true" href="#on-the-fly-syntax-checking"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;On the fly syntax checking&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.flycheck.org/en/latest/" rel="nofollow"&gt;Flycheck&lt;/a&gt; is a on-the-fly syntax checker that relies on external programs to
  check buffers; which must be installed separately.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;E.g., ghc is required for Haskell; whereas Emacs Lisp is checked by Emacs’
    own byte compiler, &lt;code&gt;emacs-lisp&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Sometimes more than one checking tool applies, use &lt;code&gt;C-c ! s&lt;/code&gt; to select a
    different checker.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;C-c ! n,p,l&lt;/code&gt; takes you to the ‘n’ext or ‘p’revious
    error, or ‘l’ist all errors in another buffer.
    &lt;p&gt;&lt;code&gt;C-c ! c&lt;/code&gt; to explicitly recheck the buffer.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; flycheck
  &lt;span class="pl-c1"&gt;:diminish&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:init&lt;/span&gt; (global-flycheck-mode)
  &lt;span class="pl-c1"&gt;:config&lt;/span&gt; &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; There may be multiple tools; I have GHC not Stack, so let's avoid that.&lt;/span&gt;
  (&lt;span class="pl-c1"&gt;setq-default&lt;/span&gt; flycheck-disabled-checkers '(haskell-stack-ghc emacs-lisp-checkdoc))
  &lt;span class="pl-c1"&gt;:custom&lt;/span&gt; (flycheck-display-errors-delay &lt;span class="pl-c1"&gt;.3&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In an org-src block, we press ~C-c ‘~ to get into the language’s mode where
  flycheck will provide warnings.&lt;/p&gt;
&lt;div class="highlight highlight-source-haskell"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;module&lt;/span&gt; &lt;span class="pl-c1"&gt;Main&lt;/span&gt; &lt;span class="pl-k"&gt;where&lt;/span&gt;

&lt;span class="pl-en"&gt;main&lt;/span&gt; &lt;span class="pl-k"&gt;::&lt;/span&gt; &lt;span class="pl-en"&gt;&lt;span class="pl-c1"&gt;IO&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;()&lt;/span&gt;
main &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;putStrLn&lt;/span&gt; &lt;span class="pl-k"&gt;$&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;nice&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;++&lt;/span&gt; f &lt;span class="pl-c1"&gt;0&lt;/span&gt;

&lt;span class="pl-en"&gt;f&lt;/span&gt; &lt;span class="pl-k"&gt;::&lt;/span&gt; &lt;span class="pl-en"&gt;&lt;span class="pl-c1"&gt;Int&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;&lt;span class="pl-c1"&gt;String&lt;/span&gt;&lt;/span&gt;
f x &lt;span class="pl-k"&gt;=&lt;/span&gt; x &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;--&lt;/span&gt; show x&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;--&lt;/span&gt; type error&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In-general, flycheck is intended for self-contained raw code —not for source
  blocks in Org-mode. Whence, the above example is a complete Haskell program,
  with a named module and &lt;code&gt;main&lt;/code&gt; method.&lt;/p&gt;
&lt;p&gt;I think the built-in &lt;a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Flymake.html" rel="nofollow"&gt;flymake&lt;/a&gt; syntax checker is better for Emacs Lisp,
  so let’s use that for ELisp.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; flymake
  &lt;span class="pl-c1"&gt;:hook&lt;/span&gt; ((&lt;span class="pl-c1"&gt;emacs-lisp-mode&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; (&lt;span class="pl-k"&gt;lambda&lt;/span&gt; () (flycheck-mode &lt;span class="pl-c1"&gt;-1&lt;/span&gt;)))
         (&lt;span class="pl-c1"&gt;emacs-lisp-mode&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; flymake-mode))
  &lt;span class="pl-c1"&gt;:bind&lt;/span&gt; (&lt;span class="pl-c1"&gt;:map&lt;/span&gt; flymake-mode-map
              (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-c ! n&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; flymake-goto-next-error)
              (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-c ! p&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; flymake-goto-prev-error)))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Try it out:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;setq&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Error: ‘1’ is not a variable.&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-coding-with-a-fruit-salad-semantic-highlighting" class="anchor" aria-hidden="true" href="#coding-with-a-fruit-salad-semantic-highlighting"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Coding with a Fruit Salad: Semantic Highlighting&lt;/h2&gt;
&lt;p&gt;What should be highlighted when we write code? Static keywords with fixed uses,
  or dynamic user-defined names?&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;i&gt;Syntax&lt;/i&gt; highlighting ⇨ Specific words are highlighted in strong colours so that
    the &lt;i&gt;structure&lt;/i&gt; can be easily gleaned.
    &lt;ul&gt;
      &lt;li&gt;Generally this only includes a language’s keywords, such as &lt;code&gt;if, loop, begin,
        end, cond&lt;/code&gt;.&lt;/li&gt;
      &lt;li&gt;User defined names generally share one colour; usually black.&lt;/li&gt;
      &lt;li&gt;Hence, an &lt;code&gt;if&lt;/code&gt; block may be seen as one coloured keyword followed by
        a blob of black text.&lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;&lt;i&gt;Obvious keywords are highlighted while the rest remains in black!&lt;/i&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;i&gt;Semantic&lt;/i&gt; highlighting ⇨ Identifiers obtain unique colouring.
    &lt;ul&gt;
      &lt;li&gt;This makes it much easier to visually spot dependencies with a quick glance.
        &lt;ul&gt;
          &lt;li&gt;One can &lt;b&gt;see&lt;/b&gt; how data flows through a function.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;In dynamic languages, this is a visual form of typing: Different colours are
        for different names.
        &lt;ul&gt;
          &lt;li&gt;Especially helpful for (library) names that are almost the same.&lt;/li&gt;
          &lt;li&gt;This can be accomplished anywhere in Emacs by pressing &lt;code&gt;M-s h .&lt;/code&gt; on
            a selected phrase.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For Emacs, &lt;a href="https://github.com/ankurdave/color-identifiers-mode"&gt;Color Identifiers Mode&lt;/a&gt; gives unique highlighting to identifiers.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;It comes with support for a bunch of languages, and one can add support for others.&lt;/li&gt;
  &lt;li&gt;It picks colours adaptively to fit the theme; one uses &lt;code&gt;M-x color-identifiers:regenerate-colors&lt;/code&gt; after a theme change.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; color-identifiers-mode
  &lt;span class="pl-c1"&gt;:config&lt;/span&gt; (global-color-identifiers-mode))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When writing a new name, after about ~5 seconds it obtains a colour which is then
  propagated immediately to any new occurrences. This timeout before recolouring
  is to avoid any lag from multithreading and can be changed by altering the following
  line (#64) in the source file, changing the &lt;code&gt;5&lt;/code&gt; to a smaller number.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;run-with-idle-timer&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt; &lt;span class="pl-c1"&gt;'color-identifiers:refresh&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here are further reads:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://medium.com/@evnbr/coding-in-color-3a6db2743a1e" rel="nofollow"&gt;Coding in color: How to make syntax highlighting more useful&lt;/a&gt; —an excellent, terse, read&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://zwabel.wordpress.com/2009/01/08/c-ide-evolution-from-syntax-highlighting-to-semantic-highlighting/" rel="nofollow"&gt;C++ IDE Evolution: From Syntax Highlighting to Semantic Highlighting&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;Names with a similar prefix share a colour, and class-local items share a colour.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href="https://wordsandbuttons.online/lexical_differential_highlighting_instead_of_syntax_highlighting.html" rel="nofollow"&gt;Lexical differential highlighting instead of syntax highlighting&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;i&gt;Ideally, the smaller the lexical difference, the greater the color difference should be.&lt;/i&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/jacksonrayhamilton/context-coloring"&gt;Colouring by Context&lt;/a&gt; —an Emacs package&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://www.linusakesson.net/programming/syntaxhighlighting/" rel="nofollow"&gt;A case against syntax highlighting&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-text-folding-with-origami-mode" class="anchor" aria-hidden="true" href="#text-folding-with-origami-mode"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Text Folding with &lt;a href="https://github.com/gregsexton/origami.el"&gt;Origami-mode&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Literate programming within Org-mode is not always ideal, so we use a
  programming mode directly and then may want to have arbitrary ‘sections’ of text
  folded up.  Let’s describe how to accomplish this goal.&lt;/p&gt;
&lt;p&gt;We use a feature-full folding mode.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; origami)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With basic support for one of my languages.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;push&lt;/span&gt; (&lt;span class="pl-k"&gt;cons&lt;/span&gt; &lt;span class="pl-c1"&gt;'agda2-mode&lt;/span&gt; (origami-markers-parser &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;{-&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;-}&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
      origami-parser-alist)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With expected support for searching.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;defun&lt;/span&gt; &lt;span class="pl-e"&gt;my/search-hook-function&lt;/span&gt; ()
  (&lt;span class="pl-k"&gt;when&lt;/span&gt; origami-mode (origami-toggle-node (&lt;span class="pl-c1"&gt;current-buffer&lt;/span&gt;) (&lt;span class="pl-c1"&gt;point&lt;/span&gt;))))

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Open folded nodes if a search stops there.&lt;/span&gt;
(&lt;span class="pl-c1"&gt;add-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;'helm-swoop-after-goto-line-action-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;#&lt;span class="pl-c1"&gt;'my/search-hook-function&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Likewise for incremental search, isearch, users.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; (add-hook 'isearch-mode-end-hook #'my/search-hook-function)&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Along with a hydra for super quick navigation and easily folding, unfolding
  blocks! Love this one ^_^&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(defhydra folding-with-origami-mode (&lt;span class="pl-c1"&gt;global-map&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-c f&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
  (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;h&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; origami-close-node-recursively &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Hide&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
  (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;o&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; origami-open-node-recursively  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Open&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
  (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;t&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; origami-toggle-all-nodes  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Toggle buffer&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
  (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;n&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; origami-next-fold &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Next&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
  (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;p&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; origami-previous-fold &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Previous&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-jump-between-windows-using-cmdarrow--between-recent-buffers-with-meta-tab" class="anchor" aria-hidden="true" href="#jump-between-windows-using-cmdarrow--between-recent-buffers-with-meta-tab"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Jump between windows using Cmd+Arrow &amp;amp; between recent buffers with Meta-Tab&lt;/h2&gt;
&lt;p&gt;We can use &lt;code&gt;C-x o&lt;/code&gt; to switch to the ‘o’ther window, and &lt;code&gt;C-u 𝓃 C-x o&lt;/code&gt; to switch to
  the 𝓃-th next clockwise window, but using &lt;code&gt;s-↑,↓,←,→&lt;/code&gt; may be faster.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; windmove
  &lt;span class="pl-c1"&gt;:config&lt;/span&gt; &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; use command key on Mac&lt;/span&gt;
          (&lt;span class="pl-c1"&gt;windmove-default-keybindings&lt;/span&gt; &lt;span class="pl-c1"&gt;'super&lt;/span&gt;)
          &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; wrap around at edges&lt;/span&gt;
          (&lt;span class="pl-k"&gt;setq&lt;/span&gt; windmove-wrap-around &lt;span class="pl-c1"&gt;t&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;a href="https://github.com/killdash9/buffer-flip.el"&gt;docs&lt;/a&gt;, for the following, have usage examples.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; buffer-flip
  &lt;span class="pl-c1"&gt;:bind&lt;/span&gt;
   (&lt;span class="pl-c1"&gt;:map&lt;/span&gt; buffer-flip-map
    (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;M-&amp;lt;tab&amp;gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;   &lt;span class="pl-k"&gt;.&lt;/span&gt; buffer-flip-forward)
    (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;M-S-&amp;lt;tab&amp;gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; buffer-flip-backward)
    (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-g&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;       &lt;span class="pl-k"&gt;.&lt;/span&gt; buffer-flip-abort))
  &lt;span class="pl-c1"&gt;:config&lt;/span&gt;
    (&lt;span class="pl-k"&gt;setq&lt;/span&gt; buffer-flip-skip-patterns
        '(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;^&lt;span class="pl-cce"&gt;\\&lt;/span&gt;*helm&lt;span class="pl-cce"&gt;\\&lt;/span&gt;b&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)))
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; key to begin cycling buffers.&lt;/span&gt;
(&lt;span class="pl-c1"&gt;global-set-key&lt;/span&gt; (&lt;span class="pl-c1"&gt;kbd&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;M-&amp;lt;tab&amp;gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;'buffer-flip&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;See &lt;a href="https://www.emacswiki.org/emacs/buffer-move.el" rel="nofollow"&gt;buffer-move&lt;/a&gt; if you’re interested in moving the buffers, and their windows,
  into new configurations.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-snippets-template-expansion" class="anchor" aria-hidden="true" href="#snippets-template-expansion"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Snippets —Template Expansion&lt;/h2&gt;
&lt;p&gt;It is common that there is a sequence of text that we tend to repeat
  often, possibly with a name or some other parameter altered.
  Such a ‘snippet’ could be written once then provided by a simple
  Lisp insert command with the parameters being queried. Luckily, others
  have written such pleasant utilities.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://joaotavora.github.io/yasnippet/snippet-development.html" rel="nofollow"&gt;Yasnippet&lt;/a&gt; is a pleasant utility for template expansion with the alluring
  feature to allow arbitrary Lisp code to be executed during expansion.
  The declaration of templates is verbose, requiring a particular file
  hierarchy, as such I utilise &lt;a href="https://github.com/Kungsgeten/yankpad"&gt;Yankpad&lt;/a&gt; which allows me to employ
  an Org-mode approach: Each template corresponds to an org heading of
  the form &lt;code&gt;Key:Words:For:Expansion:Here: name of snippet here&lt;/code&gt; and the
  template body is then the body of the org heading.
  Any of &lt;code&gt;Key, Words, For, Expansion, Here&lt;/code&gt; will rewrite into the body
  of the org tree. This is much more terse, and I even don’t bother
  with that; instead preferring to tangle my templates using yankpad
  as a mere interface. It is important to note that Yankpad also provides
  features that are not in Yassnippet, such as allowing arbitrary language
  code to be executed —one simply uses an org-src block!&lt;/p&gt;
&lt;p&gt;There are only be one major completion backend for any mode, but
  other backends can serve as secondary ones. Here’s a function to
  make &lt;code&gt;company-yankpad&lt;/code&gt; a secondary of all existing backends.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Add yasnippet support for all company backends&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;;&lt;/span&gt;
(&lt;span class="pl-k"&gt;cl-defun&lt;/span&gt; &lt;span class="pl-e"&gt;my/company-backend-with-yankpad&lt;/span&gt; (&lt;span class="pl-v"&gt;backend&lt;/span&gt;)
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;There can only be one main completition backend, so let's&lt;/span&gt;
&lt;span class="pl-s"&gt;   enable yasnippet/yankpad as a secondary for all completion&lt;/span&gt;
&lt;span class="pl-s"&gt;   backends.&lt;/span&gt;
&lt;span class="pl-s"&gt;&lt;/span&gt;
&lt;span class="pl-s"&gt;   Src: https://emacs.stackexchange.com/a/10520/10352&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;

  (&lt;span class="pl-k"&gt;if&lt;/span&gt; (&lt;span class="pl-k"&gt;and&lt;/span&gt; (&lt;span class="pl-k"&gt;listp&lt;/span&gt; backend) (&lt;span class="pl-k"&gt;member&lt;/span&gt; &lt;span class="pl-c1"&gt;'company-yankpad&lt;/span&gt; backend))
      backend
    (&lt;span class="pl-k"&gt;append&lt;/span&gt; (&lt;span class="pl-k"&gt;if&lt;/span&gt; (&lt;span class="pl-k"&gt;consp&lt;/span&gt; backend) backend (&lt;span class="pl-k"&gt;list&lt;/span&gt; backend))
            '(&lt;span class="pl-c1"&gt;:with&lt;/span&gt; company-yankpad))))&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Yet another snippet extension program&lt;/span&gt;
(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; yasnippet
  &lt;span class="pl-c1"&gt;:diminish&lt;/span&gt; yas-minor-mode
  &lt;span class="pl-c1"&gt;:config&lt;/span&gt;
    (&lt;span class="pl-c1"&gt;yas-global-mode&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Always have this on for when using yasnippet syntax within yankpad&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; respect the spacing in my snippet declarations&lt;/span&gt;
    (&lt;span class="pl-k"&gt;setq&lt;/span&gt; yas-indent-line &lt;span class="pl-c1"&gt;'fixed&lt;/span&gt;))

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Alternative, Org-based extension program&lt;/span&gt;
(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; yankpad
  &lt;span class="pl-c1"&gt;:diminish&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:config&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Location of templates&lt;/span&gt;
    (&lt;span class="pl-k"&gt;setq&lt;/span&gt; yankpad-file &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;~/.emacs.d/yankpad.org&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)

    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Ignore major mode, always use defaults.&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Yankpad will freeze if no org heading has the name of the given category.&lt;/span&gt;
    (&lt;span class="pl-k"&gt;setq&lt;/span&gt; yankpad-category &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Default&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)

    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Load the snippet templates ---useful after yankpad is altered&lt;/span&gt;
    (yankpad-reload)

    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Set company-backend as a secondary completion backend to all existing backends.&lt;/span&gt;
    (&lt;span class="pl-k"&gt;setq&lt;/span&gt; company-backends (&lt;span class="pl-k"&gt;mapcar&lt;/span&gt; &lt;span class="pl-c1"&gt;#&lt;span class="pl-c1"&gt;'my/company-backend-with-yankpad&lt;/span&gt;&lt;/span&gt; company-backends)))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With these settings, along with the &lt;code&gt;company&lt;/code&gt; backend, I may type a keyword then
  “tab” it into expansion.&lt;/p&gt;
&lt;p&gt;Yankpad requires we have an org file that contains our templates, so we tangle
  such a file ~~/.emacs.d/yankpad.org~, and have all of our templates be globally
  accessible.&lt;/p&gt;
&lt;pre lang="org"&gt;#+Description: This is file is generated from my init.org; do not edit.

* Default                                           :global:
&lt;/pre&gt;
&lt;p&gt;Here’s an example of a common template I perform by hand —no more!
  I have the expected habit of copying a URL from someplace then forming
  a link to it by writing &lt;code&gt;[[URL] [description]]&lt;/code&gt;, since the URL &amp;amp; syntax are already
  known, let’s expand those and place the cursour at the only unknown —the description.&lt;/p&gt;
&lt;pre lang="org"&gt;** my-org-insert-link: cleverly insert a link copied to clipboard
 [[${1:`(clipboard-yank)`}][$2]] $0
&lt;/pre&gt;
&lt;p&gt;What’s going on here?&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;This template is expanded with the keyword &lt;code&gt;my-org-insert-link&lt;/code&gt;, then “tab”.&lt;/li&gt;
  &lt;li&gt;The cursour lands at position &lt;code&gt;$1&lt;/code&gt;, which has default text being the result
    of evaluating &lt;code&gt;(clipboard-yank)&lt;/code&gt;.
    &lt;p&gt;We may evaluate Lisp code anywhere by enclosing it in backticks.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;If we’re satisfied with the current field, we simply tab to the next field.
    Otherwise, we simply write text –which overwrites the default text.&lt;/li&gt;
  &lt;li&gt;After enough tabbing we complete the template and the cursour lands
    at position &lt;code&gt;$0&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;⟪ Having default or mirrored text for &lt;code&gt;$2&lt;/code&gt; would not allow me to see the URL
  field, lest I wish to change it or at least confirm it’s what I want.
  Hence, the &lt;code&gt;$2&lt;/code&gt; field has no default. ⟫&lt;/p&gt;
&lt;p&gt;Let’s overwrite the usual way to insert such links, via &lt;code&gt;C-c C-l&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;cl-defun&lt;/span&gt; &lt;span class="pl-e"&gt;org-insert-link&lt;/span&gt; ()
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Makes an org link by inserting the URL copied to clipboard and&lt;/span&gt;
&lt;span class="pl-s"&gt;  prompting for the link description only.&lt;/span&gt;
&lt;span class="pl-s"&gt;&lt;/span&gt;
&lt;span class="pl-s"&gt;  Type over the shown link to change it, or tab to move to the&lt;/span&gt;
&lt;span class="pl-s"&gt;  description field.&lt;/span&gt;
&lt;span class="pl-s"&gt;&lt;/span&gt;
&lt;span class="pl-s"&gt;  This overrides Org-mode's built-in ‘org-insert-link’ utility;&lt;/span&gt;
&lt;span class="pl-s"&gt;  whence C-c C-l uses the snippet.&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  (&lt;span class="pl-k"&gt;interactive&lt;/span&gt;)
  (&lt;span class="pl-c1"&gt;insert&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;my-org-insert-link&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
  (yankpad-expand))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;a href="http://joaotavora.github.io/yasnippet/snippet-development.html" rel="nofollow"&gt;Yasnippet manual&lt;/a&gt; is an accessible read, as is the &lt;a href="https://github.com/Kungsgeten/yankpad"&gt;Yankpad manual&lt;/a&gt;, and
  showcases many other utilities; such as having certain snippets being
  enabled only in particular modes or on demand. Of note is that field &lt;code&gt;$n&lt;/code&gt; can be
  accessed in code with the invocation &lt;code&gt;(yas-field-value n)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Incidentally, I used this snippet setup to &lt;a href="https://www.youtube.com/watch?v=NYOOF9xKBz8&amp;amp;feature=youtu.be" rel="nofollow"&gt;demo&lt;/a&gt; the idea of repetitious code in
  grouping constructs within dependently-typed languages, which was accepted and
  led to my doctoral research on a &lt;a href="https://alhassy.github.io/next-700-module-systems/" rel="nofollow"&gt;‘do it yourself module system’&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The rest of this section is other templates, not much for now,
  concluding with actually loading this snippet mechanism globally.&lt;/p&gt;
&lt;p&gt;The remaining subsections discuss contents of my yankpad file.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-org-mode-templates-a-reason-i-generate-templates-" class="anchor" aria-hidden="true" href="#org-mode-templates-a-reason-i-generate-templates-"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Org-mode Templates —A reason I “generate” templates ;)&lt;/h3&gt;
&lt;p&gt;This produces a pop-up list of org-mode block types, if &lt;code&gt;src&lt;/code&gt; is selected, then a
  list of my commonly used languages pops-up.  Alternatively, ignore the pop-up
  menu and write any block or language name.&lt;/p&gt;
&lt;pre lang="org"&gt;** begin: produce an org-mode block
#+begin_${1:environment$(let*
    ((block '("src" "example" "quote" "verse" "center" "latex" "html" "ascii"))
     (langs '("c" "emacs-lisp" "lisp" "latex" "python" "sh" "haskell" "plantuml" "prolog"))
     (type (yas-choose-value block)))
     (concat type (when (equal type "src") (concat " " (yas-choose-value langs)))))}
 $0
#+end_${1:$(car (split-string yas-text))}
&lt;/pre&gt;
&lt;p&gt;In this case, &lt;code&gt;yas-text&lt;/code&gt; is equivalent to (&lt;code&gt;yas-field-value 1)&lt;/code&gt;;
  it generally refers to the value of the field being mirrored with &lt;code&gt;${n: ⋯yas-text⋯}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;However, going through pop-ups takes precious time —besides being slightly annyoing.
  Let’s introduce a template for my most utilised kind of language blocks.&lt;/p&gt;
&lt;pre&gt;** s_org: src block for org
#+begin_src org
$0
#+end_src
&lt;/pre&gt;
&lt;p&gt;However, doing this for each language I want is a waste of time and textual
  space. Why? The purpose of templates is to reduce repetition, yet the above
  block would be repeated with only 3 parts ‘unknown’: The expansion keyword, the
  description, and the org-mode source block name.  Whence, the template &lt;i&gt;text&lt;/i&gt; is
  generated by the following basic loop —whose source block is named
  &lt;code&gt;my-org-lang-templates&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; We make an org BLOCK snippet template for each LANG the user has declared.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;;&lt;/span&gt;
(&lt;span class="pl-c1"&gt;loop&lt;/span&gt; for (shortcut &lt;span class="pl-k"&gt;.&lt;/span&gt; block) in '((&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;s_&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;src&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
                                  (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;e_&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;example&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
                                  (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;q_&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;quote&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
                                  (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;v_&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;verse&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
                                  (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;c_&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;center&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
                                  (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;ex_&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;export&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
      concat (&lt;span class="pl-c1"&gt;loop&lt;/span&gt; for lang in (-cons* &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;org&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;agda2&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;any&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Extra ‘languages’&lt;/span&gt;
                                       &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Also include whatever languages we've loaded for literate programming.&lt;/span&gt;
                                       (--map (&lt;span class="pl-c1"&gt;symbol-name&lt;/span&gt; (&lt;span class="pl-k"&gt;car&lt;/span&gt; it)) org-babel-load-languages))
                   for key         &lt;span class="pl-k"&gt;=&lt;/span&gt; (&lt;span class="pl-c1"&gt;concat&lt;/span&gt; shortcut lang)
                   for description &lt;span class="pl-k"&gt;=&lt;/span&gt; (&lt;span class="pl-c1"&gt;concat&lt;/span&gt; block &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt; block for &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; lang)
                   concat (&lt;span class="pl-c1"&gt;concat&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-cce"&gt;\n&lt;/span&gt;** &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; key &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;: &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; description
                                  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-cce"&gt;\n&lt;/span&gt;#+begin_&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; block &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt; &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; lang
                                  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-cce"&gt;\n&lt;/span&gt;$0&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
                                  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-cce"&gt;\n&lt;/span&gt;#+end_&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; block &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-cce"&gt;\n&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;i&gt;resulting text&lt;/i&gt; of this block, generated below, is tangled to our yankpad
  by utilising a &lt;a href="https://www.gnu.org/software/emacs/manual/html_node/org/Noweb-reference-syntax.html" rel="nofollow"&gt;noweb&lt;/a&gt; source block invocation. An example of the
  resulting text is the above “s_org” block. The result is &lt;b&gt;83&lt;/b&gt; template expansions
  —that would have been a bit much to write by hand.&lt;/p&gt;
&lt;pre&gt;#+begin_src org :tangle "~/.emacs.d/yankpad.org" :noweb yes
&amp;lt;&amp;lt;my-org-lang-templates()&amp;gt;&amp;gt;
#+end_src
&lt;/pre&gt;
&lt;p&gt;Now &lt;code&gt;s_&lt;/code&gt;, due to company mode, brings up a list of languages that I can then
  scroll down through, then “enter” upon to expand. Moreover, the prefix &lt;code&gt;s_&lt;/code&gt; means
  that the key is mostly irrelevant, since I needn’t remember it because
  company-mode immediately lists possible completions &lt;i&gt;along&lt;/i&gt; with the &lt;i&gt;descriptions&lt;/i&gt;
  for the snippets. Likewise for examples with &lt;code&gt;e_&lt;/code&gt; or quotes with &lt;code&gt;q_&lt;/code&gt;.  Super neat
  stuff :-)&lt;/p&gt;
&lt;p&gt;Ain’t this reminiscent of meta-programming ;-)&lt;/p&gt;
&lt;p&gt;Using &lt;code&gt;noweb&lt;/code&gt; invocations, any time the tangling is performed, the yankpad
  is kept up to date –no personal intervention from myself.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-elisp-templates" class="anchor" aria-hidden="true" href="#elisp-templates"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Elisp Templates&lt;/h3&gt;
&lt;p&gt;The following snippets were rather useful as I began learning Lisp to construct
  my editor of choice —I love Emacs so much. Admittedly, I still need the first
  one below and usually beat around the bush by using &lt;code&gt;(loop for ⋯ do ⋯)&lt;/code&gt;, which is
  ‘noisier’ but easier to remember and to read for non-Lispers.&lt;/p&gt;
&lt;pre lang="org"&gt;** loop:  Elisp's for each loop
(dolist (${1:var} ${2:list-form})
        ${3:body})

** defun: Lisp functions
(cl-defun ${1:fun-name} (${2:arguments})
  "${3:documentation}"
  $0
)

** cond: Elisp conditionals
(cond (${1:scenario₁} ${2:response₁})
      (${3:scenario₂} ${4:response₂})
)
&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-equational-templates" class="anchor" aria-hidden="true" href="#equational-templates"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Equational Templates&lt;/h3&gt;
&lt;p&gt;To show &lt;code&gt;ℒ = ℛ&lt;/code&gt;, one starts at the complicated side, say &lt;i&gt;ℒ&lt;/i&gt;, then, with the aim of
  simplification, tries to end at the simpler side, &lt;i&gt;𝓡&lt;/i&gt;.  Along the way, one
  justifies each step of the calculation. This approach is popular in the proof
  assistant Agda; &lt;a href="https://alhassy.github.io/PathCat/" rel="nofollow"&gt;Examples&lt;/a&gt;. Read more about &lt;a href="http://www.mathmeth.com/" rel="nofollow"&gt;informal calculational proofs&lt;/a&gt;.&lt;/p&gt;
&lt;pre lang="org"&gt;** fun: Function declaration with type signature

${1:fun-name} : ${2:arguments}
$1 ${3:args} = ?$0

** eqn_begin: Start a ≡-Reasoning block in Agda

begin
  ${1:complicated-side}
$0≡⟨ ${3:reason-for-the-equality} ⟩
 ${2:simpler-side}
∎

** eqn_step: Insert a step in a ≡-Reasoning block in Agda
≡⟨ ${2:reason-for-the-equality} ⟩
  ${1:new-expression}
$0
&lt;/pre&gt;
&lt;p&gt;One expands &lt;code&gt;eqn_begin&lt;/code&gt;, tabs to fill in the three main locations, then
  &lt;i&gt;immediately&lt;/i&gt; types &lt;code&gt;eqn_step&lt;/code&gt; to produce a new step in a calculational proof.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-re-enabling-templates" class="anchor" aria-hidden="true" href="#re-enabling-templates"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Re-Enabling Templates&lt;/h3&gt;
&lt;p&gt;After our yankpad templates are generated, we need to load it.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; After init hook; see above near use-package install.&lt;/span&gt;
(yankpad-reload)&lt;/pre&gt;&lt;/div&gt;
&lt;h1&gt;&lt;a id="user-content-helpful-utilities--shortcuts" class="anchor" aria-hidden="true" href="#helpful-utilities--shortcuts"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Helpful Utilities &amp;amp; Shortcuts&lt;/h1&gt;
&lt;p&gt;Here is a collection of Emacs-lisp functions that I have come to use in other files.&lt;/p&gt;
&lt;p&gt;Disclaimer: I wrote much of the following &lt;i&gt;before&lt;/i&gt; I learned any lisp; everything below is probably terrible.&lt;/p&gt;
&lt;p&gt;Let’s save a few precious seconds,&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; change all prompts to y or n&lt;/span&gt;
(&lt;span class="pl-c1"&gt;fset&lt;/span&gt; &lt;span class="pl-c1"&gt;'yes-or-no-p&lt;/span&gt; &lt;span class="pl-c1"&gt;'y-or-n-p&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Enable all ‘possibly confusing commands’ such as helpful but&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; initially-worrisome “narrow-to-region”, C-x n n.&lt;/span&gt;
(&lt;span class="pl-c1"&gt;setq-default&lt;/span&gt; disabled-command-function &lt;span class="pl-c1"&gt;nil&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-documentation-pop-ups" class="anchor" aria-hidden="true" href="#documentation-pop-ups"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Documentation Pop-Ups&lt;/h2&gt;
&lt;p&gt;Let &lt;a href="https://github.com/expez/company-quickhelp"&gt;documentation pop-up&lt;/a&gt; when we pause on a completion.
  This is very useful when editing in a particular coding language, say via
  ~C-c ‘~ for org-src blocks.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; company-quickhelp
 &lt;span class="pl-c1"&gt;:config&lt;/span&gt;
   (&lt;span class="pl-k"&gt;setq&lt;/span&gt; company-quickhelp-delay &lt;span class="pl-c1"&gt;0.1&lt;/span&gt;)
   (company-quickhelp-mode))&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-emacs-keybindings-for-my-browser" class="anchor" aria-hidden="true" href="#emacs-keybindings-for-my-browser"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Emacs keybindings for my browser&lt;/h2&gt;
&lt;div&gt;
  &lt;p&gt;⟨ I was a bit too Emacs-happy at one-point; this’ cool, but I rarely use it;
    except &lt;code&gt;C-x b&lt;/code&gt;: A buffer approach is far superior to a tab-based one. ⟩&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;I’ve downloaded the &lt;a href="https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb/related" rel="nofollow"&gt;Vimium&lt;/a&gt; extension for Google Chrome,
  and have copy-pasted &lt;a href="https://gist.github.com/dmgerman/6f0e5f9ffc6484dfaf53"&gt;these&lt;/a&gt; Emacs key bindings into it.
  Now &lt;code&gt;C-h&lt;/code&gt; in my browser shows which Emacs-like bindings
  can be used to navigate my browser ^_^&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-using-emacs-in-any-text-area-on-my-os" class="anchor" aria-hidden="true" href="#using-emacs-in-any-text-area-on-my-os"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Using Emacs in any text area on my OS&lt;/h2&gt;
&lt;div&gt;
  &lt;p&gt;⟨ I was a bit too Emacs-happy at one-point; this’ cool, but I rarely use it. ⟩&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Using the &lt;a href="https://github.com/zachcurry/emacs-anywhere/#usage"&gt;Emacs-Anywhere&lt;/a&gt; tool, I can press &lt;code&gt;Cmd Shift e&lt;/code&gt; to have an Emacs frame
  appear, produce text with Emacs editing capabilities, then &lt;code&gt;C-x 5 0&lt;/code&gt; to have the
  resulting text dumped into the text area I was working in.&lt;/p&gt;
&lt;p&gt;This way I can use Emacs literally anywhere for textual input!&lt;/p&gt;
&lt;p&gt;For my Mac OSX:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;shell-command&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;curl -fsSL https://raw.github.com/zachcurry/emacs-anywhere/master/install | bash&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)

(&lt;span class="pl-c1"&gt;server-start&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The tools that use emacs-anywhere —such as my web browser— and emacs-anywhere
  itself need to be given sufficient OS permissions:&lt;/p&gt;
&lt;pre&gt;System Preferences → Security &amp;amp; Privacy → Accessibility
&lt;/pre&gt;
&lt;p&gt;Then check the emacs-anywhere box from the following gui and provide a keyboard shortcut:&lt;/p&gt;
&lt;pre&gt;System Preferences → Keyboard → Shortcuts → Services
&lt;/pre&gt;
&lt;p&gt;(•̀ᴗ•́)و&lt;/p&gt;
&lt;p&gt;I always want to be in Org-mode and input unicode:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;add-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;'ea-popup-hook&lt;/span&gt;
  (&lt;span class="pl-k"&gt;lambda&lt;/span&gt; (&lt;span class="pl-v"&gt;app-name&lt;/span&gt; &lt;span class="pl-v"&gt;window-title&lt;/span&gt; &lt;span class="pl-v"&gt;x&lt;/span&gt; &lt;span class="pl-v"&gt;y&lt;/span&gt; &lt;span class="pl-v"&gt;w&lt;/span&gt; &lt;span class="pl-v"&gt;h&lt;/span&gt;)
    (&lt;span class="pl-c1"&gt;org-mode&lt;/span&gt;)
    (&lt;span class="pl-c1"&gt;set-input-method&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Agda&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)))&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-reload-buffer-with-f5" class="anchor" aria-hidden="true" href="#reload-buffer-with-f5"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Reload buffer with &lt;code&gt;f5&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;I do this so often it’s not even funny.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;global-set-key&lt;/span&gt; [f5] '(&lt;span class="pl-c1"&gt;lambda&lt;/span&gt; () (&lt;span class="pl-k"&gt;interactive&lt;/span&gt;) (&lt;span class="pl-c1"&gt;revert-buffer&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;)))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In Mac OS, one uses &lt;code&gt;Cmd-r&lt;/code&gt; to reload a page and Emacs binds buffer reversion to &lt;code&gt;Cmd-u&lt;/code&gt;
  –in Emacs, Mac’s &lt;code&gt;Cmd&lt;/code&gt; is referred to as the ‘super key’ and denoted &lt;code&gt;s&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Moreover, since I use Org-mode to generate code blocks and occasionally
  inspect them, it would be nice if they automatically reverted when they
  were regenerated –Emacs should also prompt me if I make any changes!&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Auto update buffers that change on disk.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Will be prompted if there are changes that could be lost.&lt;/span&gt;
(&lt;span class="pl-c1"&gt;global-auto-revert-mode&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Don't show me the “ARev” marker in the mode line&lt;/span&gt;
(diminish &lt;span class="pl-c1"&gt;'auto-revert-mode&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-kill-to-start-of-line" class="anchor" aria-hidden="true" href="#kill-to-start-of-line"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Kill to start of line&lt;/h2&gt;
&lt;p&gt;Dual to &lt;code&gt;C-k&lt;/code&gt;,&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; M-k kills to the left&lt;/span&gt;
(&lt;span class="pl-c1"&gt;global-set-key&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-cce"&gt;\M&lt;/span&gt;-k&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; '(&lt;span class="pl-c1"&gt;lambda&lt;/span&gt; () (&lt;span class="pl-k"&gt;interactive&lt;/span&gt;) (&lt;span class="pl-c1"&gt;kill-line&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt;)) )&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-killing-buffers--windows-c-x-k-has-a-family" class="anchor" aria-hidden="true" href="#killing-buffers--windows-c-x-k-has-a-family"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Killing buffers &amp;amp; windows: &lt;code&gt;C-x k&lt;/code&gt; has a family&lt;/h2&gt;
&lt;p&gt;Let’s extend the standard &lt;code&gt;C-x k&lt;/code&gt; with prefix support, so that we can invoke
  variations: Kill &lt;i&gt;this&lt;/i&gt; buffer, kill &lt;i&gt;other&lt;/i&gt; buffer, or kill &lt;i&gt;all other&lt;/i&gt; buffers.&lt;/p&gt;
&lt;p&gt;By default &lt;code&gt;C-x k&lt;/code&gt; prompts to select which buffer should be selected. I almost
  always want to kill the current buffer, so let’s not waste time making such a
  tedious decision. Moreover, if I’ve killed a buffer, I usually also don’t want
  the residual window, so let’s get rid of it.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;global-set-key&lt;/span&gt; (&lt;span class="pl-c1"&gt;kbd&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-x k&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
  (&lt;span class="pl-k"&gt;lambda&lt;/span&gt; (&lt;span class="pl-c1"&gt;&amp;amp;optional&lt;/span&gt; &lt;span class="pl-v"&gt;prefix&lt;/span&gt;)
&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-x k     ⇒ Kill current buffer &amp;amp; window&lt;/span&gt;
&lt;span class="pl-s"&gt;C-u C-x k ⇒ Kill OTHER window and its buffer&lt;/span&gt;
&lt;span class="pl-s"&gt;C-u C-u C-x C-k ⇒ Kill all other buffers and windows&lt;/span&gt;
&lt;span class="pl-s"&gt;&lt;/span&gt;
&lt;span class="pl-s"&gt;Prompt only if there are unsaved changes.&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
     (&lt;span class="pl-k"&gt;interactive&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;P&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
     (&lt;span class="pl-k"&gt;pcase&lt;/span&gt; (&lt;span class="pl-k"&gt;or&lt;/span&gt; (&lt;span class="pl-k"&gt;car&lt;/span&gt; prefix) &lt;span class="pl-c1"&gt;0&lt;/span&gt;)
       &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; C-x k     ⇒ Kill current buffer &amp;amp; window&lt;/span&gt;
       (&lt;span class="pl-c1"&gt;0&lt;/span&gt;  (&lt;span class="pl-c1"&gt;kill-this-buffer&lt;/span&gt;)
           (&lt;span class="pl-k"&gt;unless&lt;/span&gt; (&lt;span class="pl-c1"&gt;one-window-p&lt;/span&gt;) (&lt;span class="pl-c1"&gt;delete-window&lt;/span&gt;)))
       &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; C-u C-x k ⇒ Kill OTHER window and its buffer&lt;/span&gt;
       (&lt;span class="pl-c1"&gt;4&lt;/span&gt;  (&lt;span class="pl-c1"&gt;other-window&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;)
           (&lt;span class="pl-c1"&gt;kill-this-buffer&lt;/span&gt;)
           (&lt;span class="pl-k"&gt;unless&lt;/span&gt; (&lt;span class="pl-c1"&gt;one-window-p&lt;/span&gt;) (&lt;span class="pl-c1"&gt;delete-window&lt;/span&gt;)))
       &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; C-u C-u C-x C-k ⇒ Kill all other buffers and windows&lt;/span&gt;
       (&lt;span class="pl-c1"&gt;16&lt;/span&gt;   (&lt;span class="pl-k"&gt;mapc&lt;/span&gt; &lt;span class="pl-c1"&gt;'kill-buffer&lt;/span&gt; (&lt;span class="pl-c1"&gt;delq&lt;/span&gt; (&lt;span class="pl-c1"&gt;current-buffer&lt;/span&gt;) (&lt;span class="pl-c1"&gt;buffer-list&lt;/span&gt;)))
             (&lt;span class="pl-c1"&gt;delete-other-windows&lt;/span&gt;)))))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The incantation &lt;code&gt;C-u C-x k&lt;/code&gt; will reduce the noise of all the documentation buffers
  I tend to consult.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-switching-from-2-horizontal-windows-to-2-vertical-windows" class="anchor" aria-hidden="true" href="#switching-from-2-horizontal-windows-to-2-vertical-windows"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Switching from 2 horizontal windows to 2 vertical windows&lt;/h2&gt;
&lt;p&gt;I often find myself switching from a horizontal view of two windows in Emacs to a
  vertical view. This requires a variation of &lt;code&gt;C-x 1 RET C-x 3 RET C-x o C-x b RET&lt;/code&gt;.
  Instead I now only need to type &lt;code&gt;C-|&lt;/code&gt; to make this switch.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;defun&lt;/span&gt; &lt;span class="pl-e"&gt;ensure-two-vertical-windows&lt;/span&gt; ()
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;I used this method often when programming in Coq.&lt;/span&gt;
&lt;span class="pl-s"&gt;&lt;/span&gt;
&lt;span class="pl-s"&gt;When there are two vertical windows, this method ensures the left-most&lt;/span&gt;
&lt;span class="pl-s"&gt;window contains the buffer with the cursour in it.&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  (&lt;span class="pl-k"&gt;interactive&lt;/span&gt;)
  (&lt;span class="pl-k"&gt;let&lt;/span&gt; ((otherBuffer (&lt;span class="pl-c1"&gt;buffer-name&lt;/span&gt;)))
    (&lt;span class="pl-c1"&gt;other-window&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;)                &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; C-x 0&lt;/span&gt;
    (&lt;span class="pl-c1"&gt;delete-window&lt;/span&gt;)                 &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; C-x 0&lt;/span&gt;
    (&lt;span class="pl-c1"&gt;split-window-right&lt;/span&gt;)			&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; C-x 3&lt;/span&gt;
    (&lt;span class="pl-c1"&gt;other-window&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;)                &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; C-x 0&lt;/span&gt;
    (&lt;span class="pl-c1"&gt;switch-to-buffer&lt;/span&gt; otherBuffer)	&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; C-x b RET&lt;/span&gt;
    (&lt;span class="pl-c1"&gt;other-window&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;)))

(&lt;span class="pl-c1"&gt;global-set-key&lt;/span&gt; (&lt;span class="pl-c1"&gt;kbd&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-|&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;'ensure-two-vertical-windows&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-obtaining-values-of-keyword-annotations" class="anchor" aria-hidden="true" href="#obtaining-values-of-keyword-annotations"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Obtaining Values of &lt;code&gt;#+KEYWORD&lt;/code&gt; Annotations&lt;/h2&gt;
&lt;p&gt;Org-mode settings are, for the most part, in the form &lt;code&gt;#+KEYWORD: VALUE&lt;/code&gt;. Of notable interest
  are the &lt;code&gt;TITLE&lt;/code&gt; and &lt;code&gt;NAME&lt;/code&gt; keywords. We use the following &lt;code&gt;org-keywords&lt;/code&gt; function to obtain
  the values of arbitrary &lt;code&gt;#+THIS : THAT&lt;/code&gt; pairs, which may not necessarily be supported by native
  Org-mode –we do so for the case, for example, of the &lt;code&gt;CATEGORIES&lt;/code&gt; and &lt;code&gt;IMAGE&lt;/code&gt; tags associated with an article.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Src: http://kitchingroup.cheme.cmu.edu/blog/2013/05/05/Getting-keyword-options-in-org-files/&lt;/span&gt;
(&lt;span class="pl-k"&gt;defun&lt;/span&gt; &lt;span class="pl-e"&gt;org-keywords&lt;/span&gt; ()
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Parse the buffer and return a cons list of (property . value) from lines like: #+PROPERTY: value&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  (org-element-map (org-element-parse-buffer &lt;span class="pl-c1"&gt;'element&lt;/span&gt;) &lt;span class="pl-c1"&gt;'keyword&lt;/span&gt;
                   (&lt;span class="pl-k"&gt;lambda&lt;/span&gt; (&lt;span class="pl-v"&gt;keyword&lt;/span&gt;) (&lt;span class="pl-k"&gt;cons&lt;/span&gt; (org-element-property &lt;span class="pl-c1"&gt;:key&lt;/span&gt; keyword)
                                           (org-element-property &lt;span class="pl-c1"&gt;:value&lt;/span&gt; keyword)))))

(&lt;span class="pl-k"&gt;defun&lt;/span&gt; &lt;span class="pl-e"&gt;org-keyword&lt;/span&gt; (&lt;span class="pl-v"&gt;KEYWORD&lt;/span&gt;)
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Get the value of a KEYWORD in the form of #+KEYWORD: value&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  (&lt;span class="pl-k"&gt;cdr&lt;/span&gt; (&lt;span class="pl-k"&gt;assoc&lt;/span&gt; KEYWORD (org-keywords))))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that capitalisation in a ”#+KeyWord” is irrelevant.&lt;/p&gt;
&lt;p&gt;See &lt;a href="https://orgmode.org/manual/Org-syntax.html" rel="nofollow"&gt;here&lt;/a&gt; on how to see the abstract syntax tree of an org file
  and how to manipulate it.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-publishing-articles-to-my-personal-blog" class="anchor" aria-hidden="true" href="#publishing-articles-to-my-personal-blog"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Publishing articles to my personal blog&lt;/h2&gt;
&lt;p&gt;I try to &lt;a href="https://alhassy.github.io/" rel="nofollow"&gt;blog&lt;/a&gt; occasionally, so here’s a helpful function to quickly
  publish the current article to my blog.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;define-key&lt;/span&gt; global-map &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-cce"&gt;\C&lt;/span&gt;-cb&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'my/publish-to-blog&lt;/span&gt;)

(&lt;span class="pl-k"&gt;cl-defun&lt;/span&gt; &lt;span class="pl-e"&gt;my/publish-to-blog&lt;/span&gt; (&lt;span class="pl-c1"&gt;&amp;amp;optional&lt;/span&gt; (draft &lt;span class="pl-c1"&gt;nil&lt;/span&gt;) (local &lt;span class="pl-c1"&gt;nil&lt;/span&gt;))
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-s"&gt;  Using ‘AlBasmala’ setup to publish current article to my blog.&lt;/span&gt;
&lt;span class="pl-s"&gt;  Details of AlBasmala can be found here:&lt;/span&gt;
&lt;span class="pl-s"&gt;  https://alhassy.github.io/AlBasmala/&lt;/span&gt;
&lt;span class="pl-s"&gt;&lt;/span&gt;
&lt;span class="pl-s"&gt;  Locally: ~/alhassy.github.io/content/AlBasmala.org&lt;/span&gt;
&lt;span class="pl-s"&gt;&lt;/span&gt;
&lt;span class="pl-s"&gt;  A ‘draft’ will be produced in about ~7 seconds, but does not re-produce&lt;/span&gt;
&lt;span class="pl-s"&gt;  a PDF and the article has a draft marker near the top. Otherwise,&lt;/span&gt;
&lt;span class="pl-s"&gt;  it will generally take ~30 seconds due to PDF production, which is normal.&lt;/span&gt;
&lt;span class="pl-s"&gt;  The default is not a draft and it takes ~20 seconds for the live&lt;/span&gt;
&lt;span class="pl-s"&gt;  github.io page to update.&lt;/span&gt;
&lt;span class="pl-s"&gt;&lt;/span&gt;
&lt;span class="pl-s"&gt;  The ‘local’ optiona indicates whether the resulting article should be&lt;/span&gt;
&lt;span class="pl-s"&gt;  viewed using the local server or the live webpage. Live page is default.&lt;/span&gt;
&lt;span class="pl-s"&gt;&lt;/span&gt;
&lt;span class="pl-s"&gt;  When ‘draft’ and ‘local’ are both set, the resulting page may momentarily&lt;/span&gt;
&lt;span class="pl-s"&gt;  show a page-not-found error, simply refresh.&lt;/span&gt;
&lt;span class="pl-s"&gt;  &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;

  (&lt;span class="pl-c1"&gt;load-file&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;~/alhassy.github.io/content/AlBasmala.el&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)

  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; --MOVE ME TO ALBASMALA--&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Sometimes the file I'm working with is not a .org file, so:&lt;/span&gt;
  (&lt;span class="pl-k"&gt;setq&lt;/span&gt; file.org (&lt;span class="pl-c1"&gt;buffer-name&lt;/span&gt;))

  (preview-article &lt;span class="pl-c1"&gt;:draft&lt;/span&gt; draft)
  (&lt;span class="pl-k"&gt;unless&lt;/span&gt; draft (publish))
  (&lt;span class="pl-k"&gt;let&lt;/span&gt; ((server (&lt;span class="pl-k"&gt;if&lt;/span&gt; local &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;http://localhost:4000/&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;https://alhassy.github.io/&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)))
    (&lt;span class="pl-c1"&gt;async-shell-command&lt;/span&gt; (&lt;span class="pl-c1"&gt;concat&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;open &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; server NAME &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;*blog-post-in-browser*&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
)&lt;/pre&gt;&lt;/div&gt;
&lt;h1&gt;&lt;a id="user-content-conclusion-why-configuration-files-should-be-literate" class="anchor" aria-hidden="true" href="#conclusion-why-configuration-files-should-be-literate"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Conclusion —Why Configuration Files Should be Literate&lt;/h1&gt;
&lt;p&gt;A configuration file sets up various features for a tool —and serves as an
  essential learning point.  In order to remember them, what they do, and possibly
  where you learned about them —which may include additional resources— it is
  pertinent to document such facts. Benefits of documentating features include:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;A list of the features with human readable names! —In case you forget what you invested time on!&lt;/li&gt;
  &lt;li&gt;Personal documentation! —Reduce wasting time Googling things that you knew in the past!&lt;/li&gt;
  &lt;li&gt;Convincing Need
    &lt;ul&gt;
      &lt;li&gt;Making notes with decriptive text, as suggested below,
        will make it clear whether you actually need the feature
        or “just threw it becuase it looks cool” —which leads to ‘init bankruptcy’.
        &lt;p&gt;Moreover, actually documenting a feature may make it more to recall
          that you have the feature and have notes for it.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
  &lt;p&gt;Programs are meant to be read by humans and only incidentally for computers to
    execute. —Donald Knuth&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Alongside a feature’s installation, I’ve tried to provide the following:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;i&gt;Why&lt;/i&gt; would I want this? Motivation!
    &lt;ul&gt;
      &lt;li&gt;Example scenerios and use-cases.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;i&gt;How&lt;/i&gt; do I actually use it? Super terse usage details to “get going”!&lt;/li&gt;
  &lt;li&gt;&lt;i&gt;Where&lt;/i&gt; is the offical documentation page, or repository? Discovarability!&lt;/li&gt;
  &lt;li&gt;Comparisions: Are there other similar features, builtin or otherwise? How do they compare?
    Why have I decided for this one instead of another one?&lt;/li&gt;
  &lt;li&gt;Additional comments and reminders related to the feature.
    &lt;ul&gt;
      &lt;li&gt;E.g., why the feature is now disabled, ‘commented out’, when
        before it was useful.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
  &lt;p&gt;Programs without documentation have little value; it’s like a claim without evidence! —Me&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here are some benefits of having a tool’s configurations written literately
  as an Org-mode file, then tangeling as appropriate.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Modularity! —or &lt;b&gt;“In Praise of the Monolith”&lt;/b&gt;
    &lt;p&gt;It may not be feasible, or practical, to split a tool’s configuration file
      into multiple file hierarchy. Yet, with Org-mode we may reify the hierarchical
      structure as ‘sections’ and have the resulting configuration read more like
      a novel, easily folding and navigating, between sections.&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;Section headers provide organisation and they’re collapsable.&lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;Even if you can make multiple files, using one monolithic file allows:&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;Really easy to quickly &lt;i&gt;re-organise&lt;/i&gt; code!
        &lt;ul&gt;
          &lt;li&gt;Use &lt;code&gt;w&lt;/code&gt; to move content almost instanteously!&lt;/li&gt;
          &lt;li&gt;In contrast, it’s harder to review an entire project, when it’s in pieces.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Many files requires coming up with descriptive file names; instead
        prefer descriptive org headings ^_^&lt;/li&gt;
      &lt;li&gt;Easily navigatable hierarchy with a nested directory/org-heading structure.
        &lt;ul&gt;
          &lt;li&gt;Have headings with an introducttory paragraph that explains the
            kind of features being considered —or, lazily, look at the outlined view
            of subheadings to see what’s there.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Easy search &amp;amp; review of features since they’re in one file.
        &lt;ul&gt;
          &lt;li&gt;Multiple files makes it harder to remember which features live where.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;One file is easy to distribute &amp;amp; share!&lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;Many small files are great for collobaration —there’ll likely be less merge
      conflicts. However, configuration files are usually a one-person project.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Toggle feature selection without altering any code!
    &lt;p&gt;With a single &lt;code&gt;#&lt;/code&gt; key press, we can comment out a section, thereby disabling the
      features it provides. The features are neither deleted nor forgotten, but we
      can experiment with having them there or not &lt;i&gt;without&lt;/i&gt; altering any code!
      Alternatively, one mays use the &lt;code&gt;:noexport:&lt;/code&gt; tag on a section header.&lt;/p&gt;
    &lt;p&gt;In contrast, an illiterate setup would have us commenting out large chunks of
      code, which is not as easy to manage.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Really easy to delete content!
    &lt;p&gt;After a while, I come back and realise I’ve implemented something silly or
      that is available via some external package, I can quickly delete it.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Can quickly export to different mediums!
    &lt;p&gt;If you want to share your configuration with others, then an HTML rendition
      with a table of contents and text sprinkled everywhere is more likely to
      attract onlookers since they can easily jump to the sections they’re interested in.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Easily digestible chunks of code!
    &lt;p&gt;With a literate approach, one is empowered to have short source blocks; e.g.,
      not exceeding 30 lines —read more &lt;a href="https://dzone.com/articles/rule-30-%E2%80%93-when-method-class-or" rel="nofollow"&gt;here&lt;/a&gt;.  This is more likely to ensure
      (possibly by extracting code into its own functions): The listing fits on one
      screen, avoiding deeply nested control structures, non-repeating common
      logical patterns, increased confidence that the implementation meets the
      stated purpose.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The only reason I would use multiple files or raw code for setting up a tool
  would be if I did not have a literate programming environment; i.e., Org-mode.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Emacs   is   fun ^_^&lt;/p&gt;
&lt;p&gt;Bye!&lt;/p&gt;
&lt;hr&gt;
&lt;p align="center"&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/fc13dbf1dcdab737de77b45d5818525bf93fd010/68747470733a2f2f692e726564642e69742f673679693430676269767633312e6a7067"&gt;&lt;img src="https://camo.githubusercontent.com/fc13dbf1dcdab737de77b45d5818525bf93fd010/68747470733a2f2f692e726564642e69742f673679693430676269767633312e6a7067" width="150" height="150/" data-canonical-src="https://i.redd.it/g6yi40gbivv31.jpg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>alhassy</author><guid isPermaLink="false">https://github.com/alhassy/emacs.d</guid><pubDate>Sun, 05 Jan 2020 00:03:00 GMT</pubDate></item><item><title>bbatsov/projectile #4 in Emacs Lisp, Today</title><link>https://github.com/bbatsov/projectile</link><description>&lt;p&gt;&lt;i&gt;Project Interaction Library for Emacs&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;p&gt;&lt;a href="http://www.gnu.org/licenses/gpl-3.0.txt" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/1ba3411d21f0105e0df26c7e29aa214578d377b5/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d47504c5f332d677265656e2e737667" alt="License GPL 3" data-canonical-src="https://img.shields.io/badge/license-GPL_3-green.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="http://melpa.org/#/projectile" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/0e90708b9c315c9786d078cbf46c05fc3133924f/687474703a2f2f6d656c70612e6f72672f7061636b616765732f70726f6a656374696c652d62616467652e737667" alt="MELPA" data-canonical-src="http://melpa.org/packages/projectile-badge.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="http://stable.melpa.org/#/projectile" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/828b1b4081f34ea857ec4119962e616e9a9d723b/687474703a2f2f737461626c652e6d656c70612e6f72672f7061636b616765732f70726f6a656374696c652d62616467652e737667" alt="MELPA Stable" data-canonical-src="http://stable.melpa.org/packages/projectile-badge.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://travis-ci.org/bbatsov/projectile" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/c8892d7c0feb3d33d66ea003f96e4b0ac52bf9f6/68747470733a2f2f7472617669732d63692e6f72672f62626174736f762f70726f6a656374696c652e706e673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/bbatsov/projectile.png?branch=master" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://www.patreon.com/bbatsov" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/451cb702b2e60e29c1a84aa24a17a1a8d313639e/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f70617472656f6e2d646f6e6174652d6f72616e67652e737667" alt="Patreon" data-canonical-src="https://img.shields.io/badge/patreon-donate-orange.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-synopsis" class="anchor" aria-hidden="true" href="#synopsis"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Synopsis&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Projectile&lt;/strong&gt; is a project interaction library for Emacs. Its goal is to
provide a nice set of features operating on a project level without
introducing external dependencies (when feasible). For instance -
finding project files has a portable implementation written in pure
Emacs Lisp without the use of GNU &lt;code&gt;find&lt;/code&gt; (but for performance sake an
indexing mechanism backed by external commands exists as well).&lt;/p&gt;
&lt;p&gt;Projectile tries to be practical - portability is great, but if some
external tools could speed up some task substantially and the tools
are available, Projectile will leverage them.&lt;/p&gt;
&lt;p&gt;This library provides easy project management and navigation. The
concept of a project is pretty basic - just a folder containing
special file. Currently &lt;code&gt;git&lt;/code&gt;, &lt;code&gt;mercurial&lt;/code&gt;, &lt;code&gt;darcs&lt;/code&gt; and &lt;code&gt;bazaar&lt;/code&gt; repos
are considered projects by default. So are &lt;code&gt;lein&lt;/code&gt;, &lt;code&gt;maven&lt;/code&gt;, &lt;code&gt;sbt&lt;/code&gt;,
&lt;code&gt;scons&lt;/code&gt;, &lt;code&gt;rebar&lt;/code&gt; and &lt;code&gt;bundler&lt;/code&gt; projects. If you want to mark a folder
manually as a project just create an empty &lt;code&gt;.projectile&lt;/code&gt; file in
it. Some of Projectile's features:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;jump to a file in project&lt;/li&gt;
&lt;li&gt;jump to files at point in project&lt;/li&gt;
&lt;li&gt;jump to a directory in project&lt;/li&gt;
&lt;li&gt;jump to a file in a directory&lt;/li&gt;
&lt;li&gt;jump to a project buffer&lt;/li&gt;
&lt;li&gt;jump to a test in project&lt;/li&gt;
&lt;li&gt;toggle between files with same names but different extensions (e.g. &lt;code&gt;.h&lt;/code&gt; &amp;lt;-&amp;gt; &lt;code&gt;.c/.cpp&lt;/code&gt;, &lt;code&gt;Gemfile&lt;/code&gt; &amp;lt;-&amp;gt; &lt;code&gt;Gemfile.lock&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;toggle between code and its test (e.g. &lt;code&gt;main.service.js&lt;/code&gt; &amp;lt;-&amp;gt; &lt;code&gt;main.service.spec.js&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;jump to recently visited files in the project&lt;/li&gt;
&lt;li&gt;switch between projects you have worked on&lt;/li&gt;
&lt;li&gt;kill all project buffers&lt;/li&gt;
&lt;li&gt;replace in project&lt;/li&gt;
&lt;li&gt;multi-occur in project buffers&lt;/li&gt;
&lt;li&gt;grep in project&lt;/li&gt;
&lt;li&gt;regenerate project etags or gtags (requires &lt;a href="https://github.com/leoliu/ggtags"&gt;ggtags&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;visit project in dired&lt;/li&gt;
&lt;li&gt;run make in a project with a single key chord&lt;/li&gt;
&lt;li&gt;check for dirty repositories&lt;/li&gt;
&lt;li&gt;toggle read-only mode for the entire project&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here's a glimpse of Projectile in action:&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="doc/screenshots/projectile.png"&gt;&lt;img src="doc/screenshots/projectile.png" alt="Projectile Screenshot" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can support my work on Projectile via
&lt;a href="https://www.paypal.me/bbatsov" rel="nofollow"&gt;PayPal&lt;/a&gt;,
&lt;a href="https://www.patreon.com/bbatsov" rel="nofollow"&gt;Patreon&lt;/a&gt; and
&lt;a href="https://salt.bountysource.com/teams/projectile" rel="nofollow"&gt;Salt&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-quickstart" class="anchor" aria-hidden="true" href="#quickstart"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Quickstart&lt;/h2&gt;
&lt;p&gt;The instructions that follow are meant to get you from zero to a running Projectile setup
in a minute.  See the
&lt;a href="https://docs.projectile.mx" rel="nofollow"&gt;official manual&lt;/a&gt; for (way) more
details.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installation&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;package.el&lt;/code&gt; is the built-in package manager in Emacs.&lt;/p&gt;
&lt;p&gt;Projectile is available on the two major &lt;code&gt;package.el&lt;/code&gt; community
maintained repos -
&lt;a href="http://stable.melpa.org" rel="nofollow"&gt;MELPA Stable&lt;/a&gt;
and &lt;a href="http://melpa.org" rel="nofollow"&gt;MELPA&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can install Projectile with the following command:&lt;/p&gt;
&lt;p&gt;&lt;kbd&gt;M-x&lt;/kbd&gt; &lt;code&gt;package-install&lt;/code&gt; &lt;kbd&gt;[RET]&lt;/kbd&gt; &lt;code&gt;projectile&lt;/code&gt; &lt;kbd&gt;[RET]&lt;/kbd&gt;&lt;/p&gt;
&lt;p&gt;Alternatively, users of Debian 9 or later or Ubuntu 16.04 or later may
simply &lt;code&gt;apt-get install elpa-projectile&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Finally add this to your Emacs config:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(projectile-mode &lt;span class="pl-c1"&gt;+1&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;define-key&lt;/span&gt; projectile-mode-map (&lt;span class="pl-c1"&gt;kbd&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;s-p&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;'projectile-command-map&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;define-key&lt;/span&gt; projectile-mode-map (&lt;span class="pl-c1"&gt;kbd&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-c p&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c1"&gt;'projectile-command-map&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Those keymap prefixes are just a suggestion. Feel free to put there whatever works best for you.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-basic-usage" class="anchor" aria-hidden="true" href="#basic-usage"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Basic Usage&lt;/h3&gt;
&lt;p&gt;Enable &lt;code&gt;projectile-mode&lt;/code&gt;, open a file in one of your projects and type a command such as &lt;kbd&gt;C-c p f&lt;/kbd&gt;.&lt;/p&gt;
&lt;p&gt;See the user manual for more details.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-caveats" class="anchor" aria-hidden="true" href="#caveats"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Caveats&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Some operations like search (grep) depend (presently) on external
utilities such as &lt;code&gt;find&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-known-issues" class="anchor" aria-hidden="true" href="#known-issues"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Known issues&lt;/h2&gt;
&lt;p&gt;Check out the project's
&lt;a href="https://github.com/bbatsov/projectile/issues?sort=created&amp;amp;direction=desc&amp;amp;state=open"&gt;issue list&lt;/a&gt;
a list of unresolved issues. By the way - feel free to fix any of them
and sent me a pull request. :-)&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-contributors" class="anchor" aria-hidden="true" href="#contributors"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contributors&lt;/h2&gt;
&lt;p&gt;Here's a &lt;a href="https://github.com/bbatsov/projectile/contributors"&gt;list&lt;/a&gt; of all the people who have contributed to the
development of Projectile.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-changelog" class="anchor" aria-hidden="true" href="#changelog"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Changelog&lt;/h2&gt;
&lt;p&gt;A fairly extensive changelog is available &lt;a href="CHANGELOG.md"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-license" class="anchor" aria-hidden="true" href="#license"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;License&lt;/h2&gt;
&lt;p&gt;Copyright © 2011-2019 Bozhidar Batsov and
&lt;a href="https://github.com/bbatsov/projectile/contributors"&gt;contributors&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Distributed under the GNU General Public License, version 3&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>bbatsov</author><guid isPermaLink="false">https://github.com/bbatsov/projectile</guid><pubDate>Sun, 05 Jan 2020 00:04:00 GMT</pubDate></item></channel></rss>