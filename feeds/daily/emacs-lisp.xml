<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>GitHub Trending: Emacs Lisp, Today</title><link>https://github.com/trending/emacs-lisp?since=daily</link><description>The top repositories on GitHub for emacs-lisp, measured daily</description><pubDate>Fri, 24 Jan 2020 01:09:52 GMT</pubDate><lastBuildDate>Fri, 24 Jan 2020 01:09:52 GMT</lastBuildDate><generator>PyRSS2Gen-1.1.0</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><ttl>720</ttl><item><title>redguardtoo/emacs.d #1 in Emacs Lisp, Today</title><link>https://github.com/redguardtoo/emacs.d</link><description>&lt;p&gt;&lt;i&gt;Fast and robust Emacs setup.&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="org" data-path="README.org"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-a-fast-and-robust-emacs-setup" class="anchor" aria-hidden="true" href="#a-fast-and-robust-emacs-setup"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;A fast and robust Emacs setup&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Fast. Only &lt;b&gt;one second&lt;/b&gt; to start up&lt;/li&gt;
  &lt;li&gt;Robust. Never crash after package upgrade. Packages could be installed without network&lt;/li&gt;
  &lt;li&gt;Support Windows. You can find&amp;amp;grep files on Windows with minimum setup&lt;/li&gt;
  &lt;li&gt;Tested with Emacs 25.3, 26.1, 27 on Linux/Windows/Cygwin/macOS/WSL(Windows Subsystem for Linux)&lt;/li&gt;
  &lt;li&gt;Emacs vanilla key bindings and directory layout is respected&lt;/li&gt;
  &lt;li&gt;Usable in &lt;a href="https://packages.debian.org/emacs-nox" rel="nofollow"&gt;emacs-nox&lt;/a&gt; and works in &lt;a href="http://www.putty.org/" rel="nofollow"&gt;PuTTY&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="demo.png"&gt;&lt;img src="demo.png" alt="demo.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-table-of-content" class="anchor" aria-hidden="true" href="#table-of-content"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Table of Content&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="#a-fast-and-robust-emacs-setup"&gt;A fast and robust Emacs setup&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="#checklist"&gt;Checklist&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="#installation"&gt;Installation&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href="#install-in-normal-way"&gt;Install in normal way&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#install-stable-version-optional"&gt;Install stable version (OPTIONAL)&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#third-party-programs-optional"&gt;Third party programs (OPTIONAL)&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href="#tutorial-optional"&gt;Tutorial (OPTIONAL)&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href="#basic-tutorial"&gt;Basic tutorial&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#evil-mode-tutorial"&gt;Evil-mode tutorial&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#methodology"&gt;Methodology&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href="#usage"&gt;Usage&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href="#quick-start"&gt;Quick start&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#key-bindings"&gt;Key bindings&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href="#faq"&gt;FAQ&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href="#locked-packages"&gt;Locked packages&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#how-to-install-new-packages"&gt;How to install new packages?&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#git-blame-current-line"&gt;Git blame current line&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#saveload-windows-layout"&gt;Save/Load windows layout&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#use-this-configuration-as-merge-tool-for-git"&gt;Use this configuration as merge tool for Git&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#default-terminal-shell"&gt;Default terminal shell&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#override-default-setup"&gt;Override default setup&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#code-navigation-and-auto-completion"&gt;Code navigation and auto-completion&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#use-m-key-for-evil-matchit"&gt;Use “m” key for “evil-matchit”&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#color-theme"&gt;Color theme&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#grepreplace-text-in-project"&gt;Grep/Replace text in project&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#hydraswipercounselivy"&gt;Hydra/Swiper/Counsel/Ivy&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#react-and-jsx"&gt;React and JSX&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#git-gutter"&gt;git-gutter&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#start-a-shell-inside-emacs"&gt;Start a shell inside Emacs&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#setup-fonts-in-gui-emacs"&gt;Setup fonts in GUI Emacs&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#synchronize-setup-with-git"&gt;Synchronize setup with Git&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#indentation"&gt;Indentation&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#editing-lisp"&gt;Editing Lisp&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#use-smart-mode-line-or-powerline"&gt;Use smart-mode-line or powerline?&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#key-bindings-doesnt-work"&gt;Key bindings doesn’t work?&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#org-mode"&gt;Org-mode&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#macos-user"&gt;macOS user?&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#customize-global-variables"&gt;Customize global variables&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#opensave-files-with-counselivy"&gt;Open/Save files with Counsel/Ivy&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#windows"&gt;Windows&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#yasnippet"&gt;Yasnippet&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#non-english-users"&gt;Non-English users&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#behind-corporate-firewall"&gt;Behind corporate firewall&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#network-is-blocked"&gt;Network is blocked&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#email"&gt;Email&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#cannot-download-packages"&gt;Cannot download packages?&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#use-packages-on-gnu-elpa"&gt;use packages on GNU ELPA&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#disable-vim-key-bindings"&gt;Disable Vim key bindings&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#evil-setup"&gt;Evil setup&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#c-auto-completion-doesnt-work"&gt;C++ auto-completion doesn’t work?&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#auto-completion-for-other-languages"&gt;Auto-completion for other languages&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#chinese-input-method-editor"&gt;Chinese Input Method Editor&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#install-multiple-versions-of-emacs"&gt;Install multiple versions of Emacs&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#change-time-locale"&gt;Change Time Locale&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#directory-structure"&gt;Directory structure&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#true-colors-in-terminal-emacs"&gt;True colors in terminal Emacs&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#run-the-unit-test-before-git-commit"&gt;Run the unit test before git commit&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#python-environment"&gt;Python environment&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href="#support-legacy-emacs-versions"&gt;Support legacy Emacs versions&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href="#emacs-23"&gt;Emacs 23&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#emacs-243"&gt;Emacs 24.3&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#emacs-244-and-245"&gt;Emacs 24.4 and 24.5&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href="#tips"&gt;Tips&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="#report-bug"&gt;Report bug&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;a id="user-content-checklist" class="anchor" aria-hidden="true" href="#checklist"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Checklist&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Emacs 26.1 is strongly recommended. It is faster and easier to set up&lt;/li&gt;
  &lt;li&gt;Please read FAQ to disable &lt;a href="http://www.vim.org" rel="nofollow"&gt;Vim&lt;/a&gt; key bindings&lt;/li&gt;
  &lt;li&gt;Please read section “Key bindings” to learn key bindings&lt;/li&gt;
  &lt;li&gt;If you use Windows Emacs, you have to &lt;a href="https://emacs.stackexchange.com/questions/27202/how-do-i-install-gnutls-for-emacs-25-1-on-windows" rel="nofollow"&gt;install GnuTLS Dlls manually&lt;/a&gt; to install packages from remote repositories. Or else you got error message like &lt;code&gt;error: Package `async-' is unavailable&lt;/code&gt; on Windows. Please note since &lt;code&gt;Emacs 26.1&lt;/code&gt;, you can download full version which works out of box&lt;/li&gt;
  &lt;li&gt;Most packages from &lt;a href="http://melpa.org" rel="nofollow"&gt;MELPA&lt;/a&gt; are &lt;b&gt;invisible&lt;/b&gt; but packages from &lt;a href="https://stable.melpa.org" rel="nofollow"&gt;MELPA Stable&lt;/a&gt; are visible. You can modify variable &lt;code&gt;melpa-include-packages&lt;/code&gt; in &lt;code&gt;~/.emacs.d/lisp/init-elpa.el&lt;/code&gt; to install unstable packages. Please choose stable packages if possible. Even advanced user could under-estimate the risk of unstable packages&lt;/li&gt;
  &lt;li&gt;Emacs 24 support will be dropped on 2019. Check “Support legacy Emacs versions” if you use old versions&lt;/li&gt;
  &lt;li&gt;Other issues are covered in FAQ&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installation&lt;/h1&gt;
&lt;p&gt;Most users should follow the section “Install in normal way”.&lt;/p&gt;
&lt;p&gt;You need the section “Install stable version” &lt;b&gt;if and only if&lt;/b&gt;,&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;You don’t have network access&lt;/li&gt;
  &lt;li&gt;You have never used any command line program&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-install-in-normal-way" class="anchor" aria-hidden="true" href="#install-in-normal-way"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Install in normal way&lt;/h2&gt;
&lt;p&gt;Please remove &lt;code&gt;~/.emacs.d/init.el&lt;/code&gt; and &lt;code&gt;~/.emacs&lt;/code&gt;. &lt;code&gt;~&lt;/code&gt; means &lt;a href="https://en.wikipedia.org/wiki/Home_directory" rel="nofollow"&gt;Home directory&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There are two ways to install this setup (I recommend the first way):&lt;/p&gt;
&lt;p&gt;First way is to download &lt;a href="https://github.com/redguardtoo/emacs.d/archive/master.zip"&gt;latest setup&lt;/a&gt; and extract its content into &lt;code&gt;~/.emacs.d&lt;/code&gt;, OR run command &lt;code&gt;cd ~; git clone https://github.com/redguardtoo/emacs.d.git .emacs.d&lt;/code&gt; in shell.&lt;/p&gt;
&lt;p&gt;Second way is to use &lt;a href="https://github.com/redguardtoo/emacs.d/archive/stable.zip"&gt;stable setup&lt;/a&gt;, OR run command &lt;code&gt;cd ~; git clone https://github.com/redguardtoo/emacs.d.git .emacs.d; cd .emacs.d; git reset --hard stable&lt;/code&gt; in shell.&lt;/p&gt;
&lt;p&gt;Ensure that &lt;code&gt;init.el&lt;/code&gt; contained in this repo ends up at &lt;code&gt;~/.emacs.d/init.el&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;By default, packages are installed automatically during Emacs startup.&lt;/p&gt;
&lt;p&gt;Someone reported that package repository &lt;a href="http://melpa.org" rel="nofollow"&gt;http://melpa.org&lt;/a&gt; is not responsive in China.&lt;/p&gt;
&lt;p&gt;No worries. You could answer “YES” to the question “Switch to faster package repositories in China temporarily?” when firing Emacs. Please note after startup you could change variable &lt;code&gt;package-archives&lt;/code&gt; in &lt;code&gt;init-elpa.el&lt;/code&gt; to permanently switch to Chinese repositories.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-install-stable-version-optional" class="anchor" aria-hidden="true" href="#install-stable-version-optional"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Install stable version (OPTIONAL)&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Remove &lt;code&gt;~/.emacs&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Download &lt;a href="https://github.com/redguardtoo/emacs.d/archive/stable.zip"&gt;https://github.com/redguardtoo/emacs.d/archive/stable.zip&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Extract its content into empty directory &lt;code&gt;~/.emacs.d&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Download &lt;a href="https://github.com/redguardtoo/myelpa/archive/stable.zip"&gt;https://github.com/redguardtoo/myelpa/archive/stable.zip&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Extract the zip somewhere, say &lt;code&gt;~/projs/myelpa&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Make sure a file named &lt;code&gt;archive-contents&lt;/code&gt; exists in &lt;code&gt;~/projs/myelpa&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Uncomment the line containing “myelpa” in &lt;code&gt;~/.emacs.d/lisp/init-elpa.el&lt;/code&gt;. Path &lt;code&gt;~/projs/myelpa/&lt;/code&gt; could be modified.&lt;/li&gt;
  &lt;li&gt;Start Emacs now!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now you are using local package repository &lt;code&gt;~/projs/melpa&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can switch to online repositories like &lt;a href="http://elpa.gnu.org" rel="nofollow"&gt;http://elpa.gnu.org&lt;/a&gt; or &lt;a href="http://melpa.org" rel="nofollow"&gt;http://melpa.org&lt;/a&gt; by modifying &lt;code&gt;~/.emacs.d/lisp/init-elpa.el&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-third-party-programs-optional" class="anchor" aria-hidden="true" href="#third-party-programs-optional"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Third party programs (OPTIONAL)&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-install" class="anchor" aria-hidden="true" href="#install"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Install&lt;/h3&gt;
&lt;p&gt;Most command line programs can be installed through &lt;code&gt;default package manager&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Default package manager&lt;/code&gt; could be:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://github.com/transcode-open/apt-cyg"&gt;apt-cyg&lt;/a&gt; at Cygwin&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/mxcl/homebrew"&gt;homebrew&lt;/a&gt; at macOS&lt;/li&gt;
  &lt;li&gt;any package manager at Linux (&lt;code&gt;apt&lt;/code&gt; on Debian/Ubuntu, &lt;code&gt;yum&lt;/code&gt; on Redhat, &lt;code&gt;pacman&lt;/code&gt; on Arch, &lt;code&gt;emerge&lt;/code&gt; on Gentoo …)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some package managers allow you to install the program for current user. For example, python package manager &lt;code&gt;pip&lt;/code&gt; has the option ”&lt;a href="https://packaging.python.org/tutorials/installing-packages/" rel="nofollow"&gt;–user&lt;/a&gt;”.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-list-of-programs" class="anchor" aria-hidden="true" href="#list-of-programs"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;List of programs&lt;/h3&gt;
&lt;p&gt;These programs are &lt;b&gt;OPTIONAL&lt;/b&gt;.&lt;/p&gt;
&lt;p&gt;Please ignore error message related to command line programs. For example, if &lt;code&gt;aspell&lt;/code&gt; and &lt;code&gt;hunspell&lt;/code&gt; are not installed, you can ignore all the flyspell error messages.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-fortune-zh-or-fortune" class="anchor" aria-hidden="true" href="#fortune-zh-or-fortune"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;fortune-zh or fortune&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Show ancient Chinese poem or quotes from random sources&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Please note you can’t install &lt;code&gt;fortune-zh&lt;/code&gt; through &lt;a href="https://brew.sh/" rel="nofollow"&gt;homebrew&lt;/a&gt; on macOS but there is a simple workaround:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;install fortune&lt;/li&gt;
  &lt;li&gt;Download &lt;code&gt;fortune-zh&lt;/code&gt; code from &lt;a href="https://github.com/debiancn/fortune-zh"&gt;https://github.com/debiancn/fortune-zh&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Extract code and run &lt;code&gt;make&lt;/code&gt; in its folder&lt;/li&gt;
  &lt;li&gt;copy data files and the script named &lt;code&gt;fortune-zh&lt;/code&gt; into corresponding folders which &lt;code&gt;fortune&lt;/code&gt; is using. You may need edit the file &lt;code&gt;fortune-zh&lt;/code&gt; before copying&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a id="user-content-w3m-web-browser" class="anchor" aria-hidden="true" href="#w3m-web-browser"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;w3m (web browser)&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Required by &lt;code&gt;emacs-w3m&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can insert &lt;code&gt;(setq mm-text-html-renderer 'w3m)&lt;/code&gt; in &lt;code&gt;~/.gnus.el&lt;/code&gt; to force HTML mail be rendered by &lt;code&gt;w3m&lt;/code&gt; instead of the default HTML rendering engine &lt;code&gt;shr&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;shr&lt;/code&gt; supports colored text while &lt;code&gt;w3m&lt;/code&gt; not.&lt;/p&gt;
&lt;p&gt;But my &lt;code&gt;w3m&lt;/code&gt; based utilities can open video/audio/image with the help of &lt;code&gt;w3m&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-lua" class="anchor" aria-hidden="true" href="#lua"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;lua&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Required by &lt;code&gt;flymake-lua&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a id="user-content-aspell-or-hunspell" class="anchor" aria-hidden="true" href="#aspell-or-hunspell"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;aspell or hunspell&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Required by &lt;code&gt;flyspell&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;hunspell&lt;/code&gt; is the alternative of &lt;code&gt;aspell&lt;/code&gt;. You need only one of them.&lt;/li&gt;
  &lt;li&gt;For &lt;code&gt;aspell&lt;/code&gt;, you may need its dictionary &lt;code&gt;aspell-en&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;aspell dictionary is set “en_US” in &lt;code&gt;~/.emacs./lisp/init-spelling.el&lt;/code&gt;. It can be changed.&lt;/li&gt;
  &lt;li&gt;I recommend &lt;code&gt;aspell&lt;/code&gt; for programmers. Non-programmers find &lt;code&gt;hunspell&lt;/code&gt; is better on typo correction&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you use hunspell, check &lt;a href="http://blog.binchen.org/posts/what-s-the-best-spell-check-set-up-in-emacs.html" rel="nofollow"&gt;my article&lt;/a&gt;. Please note the hunspell executable understands either unix format path or windows format path but not both. You need figure out hunspell version you are using.&lt;/p&gt;
&lt;p&gt;You can set &lt;code&gt;force-to-use-hunspell&lt;/code&gt; in &lt;code&gt;init-spelling.el&lt;/code&gt; if you prefer hunspell.&lt;/p&gt;
&lt;p&gt;This setup use &lt;a href="https://github.com/redguardtoo/wucuo"&gt;wucuo&lt;/a&gt; to spell check camel case words. It supports both aspell and hunspell.  Run &lt;code&gt;M-x wucuo-start&lt;/code&gt; and &lt;code&gt;M-x flyspell-buffer&lt;/code&gt; to check camel case words.&lt;/p&gt;
&lt;p&gt;Aspell’s default personal English dictionary is &lt;code&gt;$HOME/.aspell.en.pws&lt;/code&gt;. Its content is like:&lt;/p&gt;
&lt;pre lang="conf"&gt;personal_ws-1.1 en 4
ABN
ACC
ACN
ACT
&lt;/pre&gt;
&lt;p&gt;Hunspell’s default personal English dictionary is &lt;code&gt;$HOME/.hunspell_en_US&lt;/code&gt;. The file format is same as aspell.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-tidy" class="anchor" aria-hidden="true" href="#tidy"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;tidy&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Required by &lt;code&gt;web-mode&lt;/code&gt; for syntax check. It’s also required by the command &lt;code&gt;my-tidy-html&lt;/code&gt; for html formatting&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a id="user-content-identify-from-imagemagick" class="anchor" aria-hidden="true" href="#identify-from-imagemagick"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;identify from &lt;a href="http://www.imagemagick.org/" rel="nofollow"&gt;ImageMagick&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Required by &lt;code&gt;org-mode&lt;/code&gt; to export org file to odt contain images&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a id="user-content-zip-and-unzip" class="anchor" aria-hidden="true" href="#zip-and-unzip"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;zip and unzip&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Required by &lt;code&gt;org-mode&lt;/code&gt; to export org file to odt file&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a id="user-content-jshint" class="anchor" aria-hidden="true" href="#jshint"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;jshint&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Install &lt;code&gt;node.js&lt;/code&gt; through OS package manager, then &lt;code&gt;npm install -g jshint&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Required by js-mode&lt;/li&gt;
  &lt;li&gt;I use js2-mode which does NOT need jshint&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a id="user-content-xsel-or-xclip" class="anchor" aria-hidden="true" href="#xsel-or-xclip"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;xsel or xclip&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Required by my clipboard command &lt;code&gt;copy-to-x-clipboard&lt;/code&gt; and &lt;code&gt;paste-from-x-clipboard&lt;/code&gt; under Linux&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a id="user-content-cmake" class="anchor" aria-hidden="true" href="#cmake"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="http://www.cmake.org" rel="nofollow"&gt;CMake&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Required by &lt;code&gt;cpputils-cmake&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Please use &lt;a href="http://www.cmake.org/Wiki/CMake_FAQ" rel="nofollow"&gt;out-of-source build tree&lt;/a&gt; when using CMake&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a id="user-content-clang" class="anchor" aria-hidden="true" href="#clang"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="http://clang.llvm.org" rel="nofollow"&gt;Clang&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Required by &lt;code&gt;cpputils-cmake&lt;/code&gt;, &lt;code&gt;company-clang&lt;/code&gt; from &lt;a href="https://github.com/company-mode/company-mode"&gt;company-mode&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;If you use &lt;code&gt;cpputils-cmake&lt;/code&gt; and &lt;code&gt;cmake&lt;/code&gt;, &lt;code&gt;cpputils-cmake&lt;/code&gt; will do all the setup for you. You need not read next item! But please spend &lt;b&gt;a few minutes to learn the basics of cmake&lt;/b&gt;! There is a one minute step-by-step-guide in &lt;a href="https://github.com/redguardtoo/cpputils-cmake"&gt;README of cpputils-cmake&lt;/a&gt; to teach you how to use cmake.&lt;/li&gt;
  &lt;li&gt;If you use &lt;code&gt;company-clang&lt;/code&gt;, add &lt;code&gt;(setq company-clang-arguments '("-I/example1/dir" "-I/example2/dir"))&lt;/code&gt; into ~/.emacs.d/init.el&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a id="user-content-pandoc" class="anchor" aria-hidden="true" href="#pandoc"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Pandoc&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Required by &lt;code&gt;markdown-preview&lt;/code&gt; from &lt;code&gt;markdown-mode&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a id="user-content-gccmake" class="anchor" aria-hidden="true" href="#gccmake"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;GCC/Make&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Required by &lt;code&gt;flymake&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a id="user-content-universal-ctags-recommended-or-exuberant-ctags" class="anchor" aria-hidden="true" href="#universal-ctags-recommended-or-exuberant-ctags"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="https://ctags.io/" rel="nofollow"&gt;Universal Ctags (recommended)&lt;/a&gt; or &lt;a href="http://ctags.sourceforge.net" rel="nofollow"&gt;Exuberant CTags&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;It creates tags file for code navigation and code completion&lt;/li&gt;
  &lt;li&gt;Required by many tags related packages (&lt;code&gt;xref&lt;/code&gt;, &lt;code&gt;counsel-etags&lt;/code&gt;, &lt;code&gt;company-ctags&lt;/code&gt; from &lt;code&gt;company-mode&lt;/code&gt;, etc)&lt;/li&gt;
  &lt;li&gt;See &lt;a href="http://blog.binchen.org/?p=1057" rel="nofollow"&gt;How to use ctags in Emacs effectively&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a id="user-content-gnu-global" class="anchor" aria-hidden="true" href="#gnu-global"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="http://www.gnu.org/software/global" rel="nofollow"&gt;GNU Global&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Required by &lt;a href="https://github.com/syohex/emacs-counsel-gtags"&gt;counsel-gtags&lt;/a&gt; and &lt;code&gt;company-gtags&lt;/code&gt; from &lt;code&gt;company-mode&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;It creates index files for code navigation and auto-completion&lt;/li&gt;
  &lt;li&gt;Please read &lt;a href="https://www.gnu.org/software/global/manual/global.html" rel="nofollow"&gt;GNU Global manual&lt;/a&gt; about environment variables &lt;code&gt;GTAGSLIBPATH&lt;/code&gt; and &lt;code&gt;MAKEOBJDIRPREFIX&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a id="user-content-libreoffice" class="anchor" aria-hidden="true" href="#libreoffice"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;LibreOffice&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Only its executable &lt;code&gt;soffice&lt;/code&gt; is used for converting odt file into doc/pdf&lt;/li&gt;
  &lt;li&gt;Conversion happens automatically when exporting org-mode to odt&lt;/li&gt;
  &lt;li&gt;The conversion command is defined in variable &lt;code&gt;org-export-odt-convert-processes&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a id="user-content-js-beautify" class="anchor" aria-hidden="true" href="#js-beautify"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;js-beautify&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Beautify javascript code&lt;/li&gt;
  &lt;li&gt;Install &lt;a href="http://pip.readthedocs.org/en/stable/installing/" rel="nofollow"&gt;pip&lt;/a&gt; through OS package manager, then &lt;code&gt;pip install jsbeautifier&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a id="user-content-syntaxerl" class="anchor" aria-hidden="true" href="#syntaxerl"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;syntaxerl&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;syntax check &lt;a href="http://www.erlang.org/" rel="nofollow"&gt;Erlang&lt;/a&gt; through flymake&lt;/li&gt;
  &lt;li&gt;Install from &lt;a href="https://github.com/ten0s/syntaxerl"&gt;https://github.com/ten0s/syntaxerl&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a id="user-content-jedi--flake8" class="anchor" aria-hidden="true" href="#jedi--flake8"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;jedi &amp;amp; flake8&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Required by &lt;a href="https://github.com/jorgenschaefer/elpy"&gt;elpy&lt;/a&gt; which is python IDE&lt;/li&gt;
  &lt;li&gt;At least &lt;code&gt;pip install jedi flake8&lt;/code&gt;. Check elpy website for more tips.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a id="user-content-sdcv-console-version-of-stardict" class="anchor" aria-hidden="true" href="#sdcv-console-version-of-stardict"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;sdcv (console version of StarDict)&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Required by &lt;code&gt;sdcv.e&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Run &lt;code&gt;curl http://pkgs.fedoraproject.org/repo/pkgs/stardict-dic/stardict-dictd_www.dict.org_wn-2.4.2.tar.bz2/f164dcb24b1084e1cfa2b1cb63d590e6/stardict-dictd_www.dict.org_wn-2.4.2.tar.bz2 | tar jx -C ~/.stardict/dic&lt;/code&gt; to install dictionary&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a id="user-content-ripgrep" class="anchor" aria-hidden="true" href="#ripgrep"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="https://github.com/BurntSushi/ripgrep"&gt;ripgrep&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Optionally used by &lt;code&gt;M-x counsel-etags-grep&lt;/code&gt; to search text in files&lt;/li&gt;
  &lt;li&gt;Run &lt;code&gt;curl https://sh.rustup.rs -sSf | sh&lt;/code&gt; in shell to install &lt;a href="https://www.rust-lang.org/" rel="nofollow"&gt;Rust&lt;/a&gt; then &lt;code&gt;cargo install ripgrep&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Tweak environment variable PATH so Emacs find ripgrep&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a id="user-content-sbcl" class="anchor" aria-hidden="true" href="#sbcl"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="http://www.sbcl.org/" rel="nofollow"&gt;sbcl&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Required by &lt;a href="https://common-lisp.net/project/slime/" rel="nofollow"&gt;SLIME: The Superior Lisp Interaction Mode for Emacs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a id="user-content-ffmpeg" class="anchor" aria-hidden="true" href="#ffmpeg"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;ffmpeg&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Some dired commands use ffmpeg to process video/audio&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a id="user-content-languagetool" class="anchor" aria-hidden="true" href="#languagetool"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;LanguageTool&lt;/h4&gt;
&lt;p&gt;It’s Grammar, Style and Spell Checker&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Download from &lt;a href="https://languagetool.org/download/LanguageTool-stable.zip" rel="nofollow"&gt;https://languagetool.org/download/LanguageTool-stable.zip&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Used by [[&lt;a href="https://github.com/mhayashi1120/Emacs-langtool][Langtool"&gt;https://github.com/mhayashi1120/Emacs-langtool][Langtool&lt;/a&gt;]. Check its README for usage&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a id="user-content-edit-browsers-text-area-with-emacs" class="anchor" aria-hidden="true" href="#edit-browsers-text-area-with-emacs"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="https://github.com/stsquad/emacs_chrome"&gt;edit browser’s text area with Emacs&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Please install corresponding Chrome/Firefox addons.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-tutorial-optional" class="anchor" aria-hidden="true" href="#tutorial-optional"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tutorial (OPTIONAL)&lt;/h1&gt;
&lt;p&gt;Knowledge of Linux/Unix is required. At least you should know the meanings of “environment variable”, “shell”, “stdin”, “stdout”, “man”, “info”.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-basic-tutorial" class="anchor" aria-hidden="true" href="#basic-tutorial"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Basic tutorial&lt;/h2&gt;
&lt;p&gt;Please read this tutorial at least for once.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-step-1-learn-os-basic" class="anchor" aria-hidden="true" href="#step-1-learn-os-basic"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Step 1, learn OS basic&lt;/h3&gt;
&lt;p&gt;At minimum you need know how Emacs interacts with other command line programs,&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;What is &lt;a href="https://en.wikipedia.org/wiki/Environment_variable" rel="nofollow"&gt;Environment Variable&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;What is &lt;a href="https://en.wikipedia.org/wiki/Pipeline_(Unix)" rel="nofollow"&gt;Pipeline (Unix)&lt;/a&gt;, &lt;a href="https://en.wikipedia.org/wiki/Standard_streams" rel="nofollow"&gt;Standard Streams&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-step-2-read-official-tutorial" class="anchor" aria-hidden="true" href="#step-2-read-official-tutorial"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Step 2, read official tutorial&lt;/h3&gt;
&lt;p&gt;Press &lt;code&gt;C-h t&lt;/code&gt; in Emacs (“C” means Ctrl key, “M” means Alt key) to read bundled tutorial.&lt;/p&gt;
&lt;p&gt;At minimum, you need learn:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;How to move cursor&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;C-h v&lt;/code&gt; to describe variable&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;C-h f&lt;/code&gt; to describe function&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;C-h k&lt;/code&gt; to describe command key binding&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-step-3-know-org-mode-basics" class="anchor" aria-hidden="true" href="#step-3-know-org-mode-basics"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Step 3, know org-mode basics&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://orgmode.org/" rel="nofollow"&gt;Org-mode&lt;/a&gt; is for notes-keeping and planning.&lt;/p&gt;
&lt;p&gt;Please watch &lt;a href="https://www.youtube.com/watch?v=oJTwQvgfgMM" rel="nofollow"&gt;Carsten Dominik’s talk&lt;/a&gt;. It’s really simple. The only hot key to remember is &lt;code&gt;Tab&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-step-4-start-from-a-real-world-problem" class="anchor" aria-hidden="true" href="#step-4-start-from-a-real-world-problem"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Step 4, start from a real world problem&lt;/h3&gt;
&lt;p&gt;You can visit &lt;a href="http://www.emacswiki.org/emacs/" rel="nofollow"&gt;EmacsWiki&lt;/a&gt; for the solution. Newbies can ask for help at &lt;a href="http://www.reddit.com/r/emacs/" rel="nofollow"&gt;http://www.reddit.com/r/emacs/&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-evil-mode-tutorial" class="anchor" aria-hidden="true" href="#evil-mode-tutorial"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Evil-mode tutorial&lt;/h2&gt;
&lt;p&gt;Required for vim user,&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Finish &lt;a href="http://superuser.com/questions/246487/how-to-use-vimtutor" rel="nofollow"&gt;vimtutor&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Read &lt;a href="https://github.com/emacs-evil/evil/blob/master/doc/evil.pdf"&gt;https://github.com/emacs-evil/evil/blob/master/doc/evil.pdf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-methodology" class="anchor" aria-hidden="true" href="#methodology"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Methodology&lt;/h2&gt;
&lt;p&gt;See &lt;a href="https://github.com/redguardtoo/mastering-emacs-in-one-year-guide"&gt;Master Emacs in One Year&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Usage&lt;/h1&gt;
&lt;p&gt;I &lt;b&gt;avoid overriding the original setup&lt;/b&gt; of third party command line program.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-quick-start" class="anchor" aria-hidden="true" href="#quick-start"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Quick start&lt;/h2&gt;
&lt;p&gt;On Windows, you need install Cygwin which provides command line programs to Emacs. Cygwin could be installed on any hard drive but it’s highly recommended don’t change it relative path to the root driver.&lt;/p&gt;
&lt;p&gt;Install Ctags (Universal Ctags is better. Exuberant Ctags is fine). On Windows, you could install Ctags through Cygwin.&lt;/p&gt;
&lt;p&gt;Run &lt;code&gt;M-x counsel-etags-find-ctags&lt;/code&gt; from &lt;code&gt;counsel-etags&lt;/code&gt; to navigate code. It uses tags files created by ctags. Tags file will be automatically created/update when you start using `counsel-etags`.&lt;/p&gt;
&lt;p&gt;Run &lt;code&gt;M-x counsel-etags-grep&lt;/code&gt; to search text (grep) in project. Project root is automatically detected.&lt;/p&gt;
&lt;p&gt;Run &lt;code&gt;M-x find-file-in-project-by-selected&lt;/code&gt; from &lt;code&gt;find-file-in-project&lt;/code&gt; to find file in project. Project root is automatically detected. You can also add one line setup in &lt;code&gt;.emacs&lt;/code&gt; like &lt;code&gt;(setq ffip-project-root "~/proj1/")&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Code auto-completion works out of box by using tags file created by Ctags. You need run &lt;code&gt;counsel-etags&lt;/code&gt; at least once to fire up Ctags. &lt;code&gt;company-ctags&lt;/code&gt; from &lt;code&gt;company-mode&lt;/code&gt; provides the candidates for auto completion. No manual setup is required.&lt;/p&gt;
&lt;p&gt;Please &lt;a href="https://en.wikipedia.org/wiki/Grep" rel="nofollow"&gt;grep&lt;/a&gt; in the directory &lt;code&gt;~/.emacs.d/lisp&lt;/code&gt; if you have any further questions on setup.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-key-bindings" class="anchor" aria-hidden="true" href="#key-bindings"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Key bindings&lt;/h2&gt;
&lt;p&gt;Don’t memorize any key binding. Try &lt;code&gt;M-x my-command&lt;/code&gt; and key binding hint is displayed.&lt;/p&gt;
&lt;p&gt;Most key bindings are defined in &lt;code&gt;~/.emacs.d/lisp/init-evil.el&lt;/code&gt;, a few key in &lt;code&gt;~/.emacs.d/lisp/init-hydra.el&lt;/code&gt; which uses &lt;a href="https://github.com/abo-abo/hydra"&gt;Hydra&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Press &lt;code&gt;C-c C-y&lt;/code&gt; anywhere to bring up default hydra menu.&lt;/p&gt;
&lt;p&gt;The tutorials I recommended have enough information about commands.&lt;/p&gt;
&lt;p&gt;Besides, ”&lt;a href="http://blog.binchen.org/posts/how-to-be-extremely-efficient-in-emacs.html" rel="nofollow"&gt;How to be extremely efficient in Emacs&lt;/a&gt;” lists my frequently used commands.&lt;/p&gt;
&lt;p&gt;Press &lt;code&gt;kj&lt;/code&gt; to escape from &lt;code&gt;evil-insert-state&lt;/code&gt; and everything else in Emacs. It’s much more efficient than &lt;code&gt;ESC&lt;/code&gt; in Vim or &lt;code&gt;C-g&lt;/code&gt; in Emacs. Search &lt;code&gt;evil-escape&lt;/code&gt; in &lt;code&gt;init-evil.el&lt;/code&gt; for details.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-faq" class="anchor" aria-hidden="true" href="#faq"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;FAQ&lt;/h1&gt;
&lt;h2&gt;&lt;a id="user-content-locked-packages" class="anchor" aria-hidden="true" href="#locked-packages"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Locked packages&lt;/h2&gt;
&lt;p&gt;Some packages are so important to my workflow that they are locked.&lt;/p&gt;
&lt;p&gt;Those packages are placed at &lt;code&gt;~/.emacs.d/site-lisp&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;They will not be upgraded by ELPA.emacs.d/site-lisp= at first.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-how-to-install-new-packages" class="anchor" aria-hidden="true" href="#how-to-install-new-packages"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;How to install new packages?&lt;/h2&gt;
&lt;p&gt;I only use two package repositories,&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://stable.melpa.org" rel="nofollow"&gt;https://stable.melpa.org&lt;/a&gt; (holding stable packages)&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://melpa.org" rel="nofollow"&gt;https://melpa.org&lt;/a&gt; (holding latest but unstable packages)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If a package named &lt;code&gt;MY-PKG&lt;/code&gt; exists in the stable repository, you only need one line setup,&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(require-package &lt;span class="pl-c1"&gt;'MY-PKG&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This line could be placed in &lt;code&gt;~/.emacs.d/lisp/init-elpa.el&lt;/code&gt; or &lt;code&gt;~/.custom.el&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You’d better place everything related to &lt;code&gt;MY-PKG&lt;/code&gt; into &lt;code&gt;~/.custom.el&lt;/code&gt; so the main stream change won’t impact your own configuration.&lt;/p&gt;
&lt;p&gt;If the package does not exist in the stable repository, modify &lt;code&gt;melpa-include-packages&lt;/code&gt; in &lt;code&gt;~/.emacs.d/lisp/init-elpa.el&lt;/code&gt; first.&lt;/p&gt;
&lt;p&gt;I encourage you to read &lt;code&gt;init-elpa.el&lt;/code&gt; to understand how packages are managed if you are good at Emacs Lisp,&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-git-blame-current-line" class="anchor" aria-hidden="true" href="#git-blame-current-line"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Git blame current line&lt;/h2&gt;
&lt;p&gt;Run &lt;code&gt;vc-msg-show&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you select a region inside current line, the &lt;b&gt;correct commit which submits the selected snippet&lt;/b&gt; is displayed instead of the latest commit touch the whole line.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-saveload-windows-layout" class="anchor" aria-hidden="true" href="#saveload-windows-layout"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Save/Load windows layout&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;SPC s s&lt;/code&gt; or &lt;code&gt;M-x wg-create-workgrou&lt;/code&gt; to save windows layout.
  &lt;code&gt;SPC l l&lt;/code&gt; or &lt;code&gt;M-x my-wg-switch-workgroup&lt;/code&gt; to load windows layout.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-use-this-configuration-as-merge-tool-for-git" class="anchor" aria-hidden="true" href="#use-this-configuration-as-merge-tool-for-git"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Use this configuration as merge tool for Git&lt;/h2&gt;
&lt;p&gt;This configuration might be the most efficient and most powerful merge tool for VCS.
  Insert below configuration into &lt;code&gt;~/.gitconfig&lt;/code&gt;,&lt;/p&gt;
&lt;div class="highlight highlight-source-js"&gt;&lt;pre&gt;[&lt;span class="pl-smi"&gt;mergetool&lt;/span&gt;.&lt;span class="pl-smi"&gt;ediff&lt;/span&gt;]
# use git mergetool ediff to resolve conflicts
cmd &lt;span class="pl-k"&gt;=&lt;/span&gt; emacs &lt;span class="pl-k"&gt;-&lt;/span&gt;nw &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-c1"&gt;Q&lt;/span&gt; &lt;span class="pl-k"&gt;--&lt;/span&gt;eval \&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;(setq startup-now t)&lt;span class="pl-cce"&gt;\"&lt;/span&gt; -l &lt;span class="pl-cce"&gt;\"&lt;/span&gt;~/.emacs.d/init.el&lt;span class="pl-cce"&gt;\"&lt;/span&gt; --eval &lt;span class="pl-cce"&gt;\"&lt;/span&gt;(progn (setq ediff-quit-hook 'kill-emacs) (if (file-readable-p &lt;span class="pl-cce"&gt;\\\"&lt;/span&gt;$BASE&lt;span class="pl-cce"&gt;\\\"&lt;/span&gt;) (ediff-merge-files-with-ancestor &lt;span class="pl-cce"&gt;\\\"&lt;/span&gt;$LOCAL&lt;span class="pl-cce"&gt;\\\"&lt;/span&gt; &lt;span class="pl-cce"&gt;\\\"&lt;/span&gt;$REMOTE&lt;span class="pl-cce"&gt;\\\"&lt;/span&gt; &lt;span class="pl-cce"&gt;\\\"&lt;/span&gt;$BASE&lt;span class="pl-cce"&gt;\\\"&lt;/span&gt; nil &lt;span class="pl-cce"&gt;\\\"&lt;/span&gt;$MERGED&lt;span class="pl-cce"&gt;\\\"&lt;/span&gt;) (ediff-merge-files &lt;span class="pl-cce"&gt;\\\"&lt;/span&gt;$LOCAL&lt;span class="pl-cce"&gt;\\\"&lt;/span&gt; &lt;span class="pl-cce"&gt;\\\"&lt;/span&gt;$REMOTE&lt;span class="pl-cce"&gt;\\\"&lt;/span&gt; nil &lt;span class="pl-cce"&gt;\\\"&lt;/span&gt;$MERGED&lt;span class="pl-cce"&gt;\\\"&lt;/span&gt;)))&lt;span class="pl-cce"&gt;\"&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then run &lt;code&gt;git mergetool -t ediff&lt;/code&gt; to resolve conflicts.&lt;/p&gt;
&lt;p&gt;Here is &lt;a href="https://gist.github.com/redguardtoo/d4ecd51f785bd117a6a0"&gt;my ~/.gitconfig&lt;/a&gt;. You can use &lt;a href="https://github.com/redguardtoo/test-git-mergetool"&gt;https://github.com/redguardtoo/test-git-mergetool&lt;/a&gt; to practice.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-default-terminal-shell" class="anchor" aria-hidden="true" href="#default-terminal-shell"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Default terminal shell&lt;/h2&gt;
&lt;p&gt;You can customize &lt;code&gt;my-term-program&lt;/code&gt; whose default value is &lt;code&gt;/bin/bash&lt;/code&gt;. It’s used by &lt;code&gt;ansi-term&lt;/code&gt; and &lt;code&gt;multi-term&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-override-default-setup" class="anchor" aria-hidden="true" href="#override-default-setup"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Override default setup&lt;/h2&gt;
&lt;p&gt;Place your setup in &lt;code&gt;~/.custom.el&lt;/code&gt; which is loaded after other “*.el”.&lt;/p&gt;
&lt;p&gt;So you can use any functions defined in &lt;code&gt;~/.emacs.d&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here is a sample to override keybindings defined in &lt;code&gt;~/.emacs.d/lisp/init-evil.el&lt;/code&gt;,&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;eval-after-load&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;evil&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  '(&lt;span class="pl-k"&gt;progn&lt;/span&gt;
     (my-space-leader-def
       &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;ss&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'pwd&lt;/span&gt;
       &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;ll&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'pwd&lt;/span&gt;
       &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;pp&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'pwd&lt;/span&gt;)))&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-code-navigation-and-auto-completion" class="anchor" aria-hidden="true" href="#code-navigation-and-auto-completion"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Code navigation and auto-completion&lt;/h2&gt;
&lt;p&gt;It’s usable out of box if Ctags is installed&lt;/p&gt;
&lt;p&gt;To navigate, &lt;code&gt;M-x counsel-etags-find-tag-at-point&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To enable code auto-completion, &lt;code&gt;M-x counsel-etags-scan-code&lt;/code&gt; at least once.&lt;/p&gt;
&lt;p&gt;Optionally, you can add &lt;code&gt;(add-hook 'after-save-hook 'counsel-etags-virtual-update-tags)&lt;/code&gt; into your &lt;code&gt;.emacs&lt;/code&gt; to automatically update tags file.&lt;/p&gt;
&lt;p&gt;No further setup is required.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-use-m-key-for-evil-matchit" class="anchor" aria-hidden="true" href="#use-m-key-for-evil-matchit"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Use “m” key for “evil-matchit”&lt;/h2&gt;
&lt;p&gt;The default keybinding of &lt;code&gt;evil-matchit&lt;/code&gt; is &lt;code&gt;%&lt;/code&gt;. Its evil text object name is also &lt;code&gt;%&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can use &lt;code&gt;m&lt;/code&gt; instead of &lt;code&gt;%&lt;/code&gt; as new keybinding and the text object name from &lt;code&gt;evil-matchit&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;It’s just one liner in &lt;code&gt;~/.custom.el&lt;/code&gt;,&lt;/p&gt;
&lt;div class="highlight highlight-source-js"&gt;&lt;pre&gt;;; evil&lt;span class="pl-k"&gt;-&lt;/span&gt;matchit &lt;span class="pl-c1"&gt;2.3&lt;/span&gt;.&lt;span class="pl-ii"&gt;0&lt;/span&gt; is required
(setq my&lt;span class="pl-k"&gt;-&lt;/span&gt;use&lt;span class="pl-k"&gt;-&lt;/span&gt;m&lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-k"&gt;for&lt;/span&gt;&lt;span class="pl-k"&gt;-&lt;/span&gt;matchit t)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Use =,m= for &lt;code&gt;evil-set-marker&lt;/code&gt; whose original keybinding is &lt;code&gt;m&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-color-theme" class="anchor" aria-hidden="true" href="#color-theme"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Color theme&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-preview-color-theme" class="anchor" aria-hidden="true" href="#preview-color-theme"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Preview color theme&lt;/h3&gt;
&lt;p&gt;Check &lt;a href="https://emacsthemes.com/" rel="nofollow"&gt;https://emacsthemes.com/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Write down the name of color theme (for example, molokai).&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-setup-color-theme-manually-recommended" class="anchor" aria-hidden="true" href="#setup-color-theme-manually-recommended"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Setup color theme manually (recommended)&lt;/h3&gt;
&lt;p&gt;You can &lt;code&gt;M-x counsel-load-theme&lt;/code&gt; to switch themes.&lt;/p&gt;
&lt;p&gt;Or you can insert below code into end of &lt;code&gt;~/.custom.el&lt;/code&gt; or &lt;code&gt;~/.emacs.d/init.el&lt;/code&gt;,&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Please note the color theme's name is "molokai"&lt;/span&gt;
(&lt;span class="pl-c1"&gt;load-theme&lt;/span&gt; &lt;span class="pl-c1"&gt;'molokai&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can also run &lt;code&gt;M-x random-color-theme&lt;/code&gt; to load random color theme.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-use-color-theme-in-terminal" class="anchor" aria-hidden="true" href="#use-color-theme-in-terminal"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Use color theme in terminal&lt;/h3&gt;
&lt;p&gt;Use 256 colors is just one CLI without any extra setup,&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;TERM=xterm-256color emacs -nw&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;True color requires a little setup.&lt;/p&gt;
&lt;p&gt;You need install the terminal supporting true color. See &lt;a href="https://gist.github.com/XVilka/8346728"&gt;this list&lt;/a&gt;. I recommend &lt;a href="https://mintty.github.io/" rel="nofollow"&gt;Mintty&lt;/a&gt; on Cygwin, &lt;a href="https://gnometerminator.blogspot.com/p/introduction.html" rel="nofollow"&gt;Terminator&lt;/a&gt; on Linux, &lt;a href="https://www.iterm2.com/" rel="nofollow"&gt;iTerm2&lt;/a&gt; on macOS.&lt;/p&gt;
&lt;p&gt;Only Emacs 26 supports true color.&lt;/p&gt;
&lt;p&gt;Follow &lt;a href="https://www.gnu.org/software/emacs/manual/html_node/efaq/Colors-on-a-TTY.html" rel="nofollow"&gt;Emacs manual&lt;/a&gt; to set up and start Emacs.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-grepreplace-text-in-project" class="anchor" aria-hidden="true" href="#grepreplace-text-in-project"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Grep/Replace text in project&lt;/h2&gt;
&lt;p&gt;Many third party plugins bundled in this setup have already provided enough features. For example, if you use &lt;code&gt;git&lt;/code&gt;, &lt;code&gt;counsel-git-grep&lt;/code&gt; from package &lt;a href="https://github.com/abo-abo/swiper"&gt;counsel/ivy&lt;/a&gt; works out of the box.&lt;/p&gt;
&lt;p&gt;A generic grep program &lt;code&gt;counsel-etags-grep&lt;/code&gt; is also provided. Since &lt;code&gt;counsel-etags-grep&lt;/code&gt; is based on &lt;code&gt;counsel/ivy&lt;/code&gt;, it also supports a magic called “multi-editing via Ivy”. You could read &lt;a href="https://sam217pa.github.io/2016/09/11/nuclear-power-editing-via-ivy-and-ag/" rel="nofollow"&gt;Nuclear weapon multi-editing via Ivy and Ag&lt;/a&gt; to get the idea.&lt;/p&gt;
&lt;p&gt;Multi-edit workflow is optimized. After &lt;code&gt;M-x counsel-etags-grep&lt;/code&gt; or pressing =,qq=, press &lt;code&gt;C-c C-o C-x C-q&lt;/code&gt; to enable &lt;code&gt;wgrep-mode&lt;/code&gt;. You can edit text (for example, delete lines) in &lt;code&gt;wgrep-mode&lt;/code&gt; directly.&lt;/p&gt;
&lt;p&gt;You can exclude multiple keywords using &lt;code&gt;!keyword1 keyword2&lt;/code&gt; in &lt;code&gt;ivy&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-hydraswipercounselivy" class="anchor" aria-hidden="true" href="#hydraswipercounselivy"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Hydra/Swiper/Counsel/Ivy&lt;/h2&gt;
&lt;p&gt;I love all the packages from &lt;a href="https://github.com/abo-abo"&gt;Oleh Krehel (AKA abo-abo)&lt;/a&gt;. Every article from his &lt;a href="https://oremacs.com/" rel="nofollow"&gt;blog&lt;/a&gt; is worth reading ten times.&lt;/p&gt;
&lt;p&gt;You can input &lt;code&gt;:pinyin1 pinyin2 !pinyin3 pinyin4&lt;/code&gt; in ivy UI to search by Chinese Pinyin. The key point is to make sure the first character of input is “:”.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-react-and-jsx" class="anchor" aria-hidden="true" href="#react-and-jsx"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;React and JSX&lt;/h2&gt;
&lt;p&gt;I use &lt;code&gt;rjsx-mode&lt;/code&gt; with Emacs v25+. It’s based on &lt;code&gt;js2-mode&lt;/code&gt; so it has excellent imenu support.&lt;/p&gt;
&lt;p&gt;But &lt;code&gt;web-mode&lt;/code&gt; is also very popular to edit jsx files.&lt;/p&gt;
&lt;p&gt;You can add &lt;code&gt;(add-auto-mode 'rjsx-mode "\\.jsx\\'")&lt;/code&gt; into &lt;code&gt;~/.custome.el&lt;/code&gt; to use &lt;code&gt;web-mode&lt;/code&gt; for jsx files.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-git-gutter" class="anchor" aria-hidden="true" href="#git-gutter"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;git-gutter&lt;/h2&gt;
&lt;p&gt;I use modified version of &lt;code&gt;git-gutter&lt;/code&gt; for now until my pull request is merged into official repository.&lt;/p&gt;
&lt;p&gt;You can set &lt;code&gt;git-gutter:exp-to-create-diff&lt;/code&gt; to make git gutter support other VCS (Perforce, for example),&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;setq&lt;/span&gt; git-gutter:exp-to-create-diff
      (&lt;span class="pl-c1"&gt;shell-command-to-string&lt;/span&gt; (&lt;span class="pl-c1"&gt;format&lt;/span&gt; &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-s"&gt;p4 diff -du -db &lt;span class="pl-c1"&gt;%s&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;
                                       (&lt;span class="pl-c1"&gt;file-relative-name&lt;/span&gt; buffer-file-name))))&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-start-a-shell-inside-emacs" class="anchor" aria-hidden="true" href="#start-a-shell-inside-emacs"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Start a shell inside Emacs&lt;/h2&gt;
&lt;p&gt;Please &lt;code&gt;M-x multi-term&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you use Zsh instead of Bash, please modify &lt;code&gt;init-term-mode.el&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-setup-fonts-in-gui-emacs" class="anchor" aria-hidden="true" href="#setup-fonts-in-gui-emacs"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Setup fonts in GUI Emacs&lt;/h2&gt;
&lt;p&gt;Non-Chinese can use &lt;a href="https://github.com/rolandwalker/unicode-fonts"&gt;unicode-fonts&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Chinese can use c&lt;a href="https://github.com/tumashu/chinese-fonts-setup"&gt;chinese-fonts-setup&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;They are not included in this setup. You need install them manually.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-synchronize-setup-with-git" class="anchor" aria-hidden="true" href="#synchronize-setup-with-git"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Synchronize setup with Git&lt;/h2&gt;
&lt;p&gt;Synchronize from my stable setup:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;git pull https://redguardtoo@github.com/redguardtoo/emacs.d.git stable&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or latest setup:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;git pull https://redguardtoo@github.com/redguardtoo/emacs.d.git&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can revert commit:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; always start from the latest related commit&lt;/span&gt;
git revert commit-2014-12-01
git revert commit-2014-11-01&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-indentation" class="anchor" aria-hidden="true" href="#indentation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Indentation&lt;/h2&gt;
&lt;p&gt;Learn &lt;a href="http://www.emacswiki.org/emacs/IndentationBasics" rel="nofollow"&gt;basics&lt;/a&gt;. Then use &lt;a href="http://blog.binchen.org/posts/easy-indentation-setup-in-emacs-for-web-development.html" rel="nofollow"&gt;my solution&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-editing-lisp" class="anchor" aria-hidden="true" href="#editing-lisp"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Editing Lisp&lt;/h2&gt;
&lt;p&gt;Please note &lt;a href="http://emacswiki.org/emacs/ParEdit" rel="nofollow"&gt;paredit-mode&lt;/a&gt; is enabled when editing Lisp. Search “paredit cheat sheet” to learn its key bindings.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-use-smart-mode-line-or-powerline" class="anchor" aria-hidden="true" href="#use-smart-mode-line-or-powerline"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Use &lt;a href="https://github.com/Malabarba/smart-mode-line"&gt;smart-mode-line&lt;/a&gt; or &lt;a href="https://github.com/milkypostman/powerline"&gt;powerline&lt;/a&gt;?&lt;/h2&gt;
&lt;p&gt;Comment out &lt;code&gt;(require 'init-modeline)&lt;/code&gt; in init.el at first.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-key-bindings-doesnt-work" class="anchor" aria-hidden="true" href="#key-bindings-doesnt-work"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Key bindings doesn’t work?&lt;/h2&gt;
&lt;p&gt;Other desktop applications may intercept the key bindings. For example, &lt;a href="https://github.com/redguardtoo/emacs.d/issues/320"&gt;it’s reported QQ on windows 8 can intercept “M-x”&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-org-mode" class="anchor" aria-hidden="true" href="#org-mode"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Org-mode&lt;/h2&gt;
&lt;p&gt;Press &lt;code&gt;M-x org-version&lt;/code&gt;, then read corresponding online manual to set up.&lt;/p&gt;
&lt;p&gt;For example, &lt;code&gt;org-capture&lt;/code&gt; requires &lt;a href="http://orgmode.org/manual/Setting-up-capture.html#Setting-up-capture" rel="nofollow"&gt;manual setup&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Run &lt;code&gt;M-x org-open-at-point&lt;/code&gt; to open link under cursor. Http link will be opened by the embedded &lt;code&gt;emacs-w3m&lt;/code&gt; is used. `C-u M-x org-open-at-point= uses the external browser specified by &lt;code&gt;browse-url-generic-program&lt;/code&gt; whose value could be &lt;code&gt;/usr/bin/firefox&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-macos-user" class="anchor" aria-hidden="true" href="#macos-user"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;macOS user?&lt;/h2&gt;
&lt;p&gt;Please replace legacy Emacs 22 and ctags with the new versions.&lt;/p&gt;
&lt;p&gt;The easiest way is change &lt;a href="https://en.wikipedia.org/wiki/PATH_(variable)" rel="nofollow"&gt;Environment variable PATH&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-customize-global-variables" class="anchor" aria-hidden="true" href="#customize-global-variables"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Customize global variables&lt;/h2&gt;
&lt;p&gt;Some variables are hard coded so you cannot &lt;code&gt;M-x customize&lt;/code&gt; to modify them.&lt;/p&gt;
&lt;p&gt;Here are the steps to change their values:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Find the variable description by &lt;code&gt;M-x customize&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;For text “Company Clang Insert Arguments”, search &lt;code&gt;company-clang-insert-argument&lt;/code&gt; in &lt;code&gt;~/.emacs.d/lisp/&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;You will find &lt;code&gt;~/.emacs.d/lisp/init-company.el&lt;/code&gt; and modify &lt;code&gt;company-clang-insert-argument&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;BTW, please &lt;b&gt;read my comments&lt;/b&gt; above the code at first.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-opensave-files-with-counselivy" class="anchor" aria-hidden="true" href="#opensave-files-with-counselivy"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Open/Save files with Counsel/Ivy&lt;/h2&gt;
&lt;p&gt;Keep pressing &lt;code&gt;C-M-j&lt;/code&gt; to ignore candidates and open/save files using current input.&lt;/p&gt;
&lt;p&gt;You can also press &lt;code&gt;M-o&lt;/code&gt; to apply other action on selected file. See &lt;a href="https://oremacs.com/2015/07/23/ivy-multiaction/" rel="nofollow"&gt;https://oremacs.com/2015/07/23/ivy-multiaction/&lt;/a&gt; for details.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-windows" class="anchor" aria-hidden="true" href="#windows"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Windows&lt;/h2&gt;
&lt;p&gt;I strongly suggest &lt;a href="http://www.cygwin.com/" rel="nofollow"&gt;Cygwin&lt;/a&gt; version of Emacs. Native version of Emacs should know how to find third party command line programs from Cygwin. I suggest adding &lt;code&gt;C:\Cygwin64\bin&lt;/code&gt; to environment variable &lt;code&gt;PATH&lt;/code&gt; so Emacs can detect the programs automatically.&lt;/p&gt;
&lt;p&gt;By default, environment variable &lt;code&gt;HOME&lt;/code&gt; points to the directory &lt;code&gt;C:\Users\&amp;lt;username&amp;gt;&lt;/code&gt; on Windows 7+. You need copy the folder &lt;code&gt;.emacs.d&lt;/code&gt; into that directory. Or you can change &lt;code&gt;HOME&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-yasnippet" class="anchor" aria-hidden="true" href="#yasnippet"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Yasnippet&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Instead of &lt;code&gt;M-x yas-expand&lt;/code&gt; or pressing &lt;code&gt;TAB&lt;/code&gt; key, you can press &lt;code&gt;M-j&lt;/code&gt; instead.&lt;/li&gt;
  &lt;li&gt;Yasnippet works out of box. But you can &lt;code&gt;M-x my-yas-reload-all&lt;/code&gt; to force Yasnippet compile all the snippets. If you run &lt;code&gt;my-yas-reload-all&lt;/code&gt; once, you always need run it when new snippets is added. The purpose of &lt;code&gt;my-yas-reload-all&lt;/code&gt; is to optimize the Emacs startup only. IMO, it’s not worth the effort.&lt;/li&gt;
  &lt;li&gt;You can add your snippets into &lt;code&gt;~/.emacs.d/snippets/&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Run &lt;code&gt;grep -rns --exclude&lt;/code&gt;‘.yas*’ ‘key:’ *= in &lt;code&gt;~/.emacs.d/snippets&lt;/code&gt; to see my own snippets&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-non-english-users" class="anchor" aria-hidden="true" href="#non-english-users"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Non-English users&lt;/h2&gt;
&lt;p&gt;Locale must be &lt;b&gt;UTF-8 compatible&lt;/b&gt;. For example, as I type &lt;code&gt;locale&lt;/code&gt; in shell, I got the output “zh_CN.UTF-8”.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-behind-corporate-firewall" class="anchor" aria-hidden="true" href="#behind-corporate-firewall"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Behind corporate firewall&lt;/h2&gt;
&lt;p&gt;Run below command in shell:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;http_proxy=http://yourname:passwd@proxy.company.com:8080 emacs -nw&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-network-is-blocked" class="anchor" aria-hidden="true" href="#network-is-blocked"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Network is blocked&lt;/h2&gt;
&lt;p&gt;Try &lt;a href="https://github.com/XX-net/XX-Net"&gt;https://github.com/XX-net/XX-Net&lt;/a&gt;. Run command &lt;code&gt;http_proxy=http://127.0.0.1:8087 emacs -nw&lt;/code&gt; in shell after starting XX-Net.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-email" class="anchor" aria-hidden="true" href="#email"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Email&lt;/h2&gt;
&lt;p&gt;If you use Gnus for email, check &lt;code&gt;init-gnus.el&lt;/code&gt; and read &lt;a href="https://github.com/redguardtoo/mastering-emacs-in-one-year-guide/blob/master/gnus-guide-en.org"&gt;my Gnus tutorial&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-cannot-download-packages" class="anchor" aria-hidden="true" href="#cannot-download-packages"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Cannot download packages?&lt;/h2&gt;
&lt;p&gt;Some package cannot be downloaded automatically because of network problem.&lt;/p&gt;
&lt;p&gt;Run &lt;code&gt;M-x package-refresh-content&lt;/code&gt;, restart Emacs, reinstall package.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-use-packages-on-gnu-elpa" class="anchor" aria-hidden="true" href="#use-packages-on-gnu-elpa"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;use packages on &lt;a href="https://elpa.gnu.org/" rel="nofollow"&gt;GNU ELPA&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;By default, packages from GNU ELPA are NOT available. Search the line “uncomment below line if you need use GNU ELPA” in &lt;code&gt;init-elpa.el&lt;/code&gt; if you want to access GNU ELPA.&lt;/p&gt;
&lt;p&gt;For example, &lt;a href="https://github.com/flycheck/flycheck"&gt;flycheck&lt;/a&gt; requires packages from GNU ELPA.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-disable-vim-key-bindings" class="anchor" aria-hidden="true" href="#disable-vim-key-bindings"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Disable Vim key bindings&lt;/h2&gt;
&lt;p&gt;By default EVIL (Vim emulation in Emacs) is used. Comment out line containing &lt;code&gt;(require 'init-evil)&lt;/code&gt; in init.el to unload it.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-evil-setup" class="anchor" aria-hidden="true" href="#evil-setup"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Evil setup&lt;/h2&gt;
&lt;p&gt;It’s defined in &lt;code&gt;~/.emacs.d/lisp/init-evil.el&lt;/code&gt;. Press &lt;code&gt;C-z&lt;/code&gt; to switch between Emacs and Vim key bindings.&lt;/p&gt;
&lt;p&gt;Please read &lt;a href="https://github.com/emacs-evil/evil/raw/master/doc/evil.pdf"&gt;its PDF manual&lt;/a&gt; before using &lt;code&gt;evil-mode&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-c-auto-completion-doesnt-work" class="anchor" aria-hidden="true" href="#c-auto-completion-doesnt-work"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;C++ auto-completion doesn’t work?&lt;/h2&gt;
&lt;p&gt;I assume you are using &lt;a href="https://github.com/company-mode/company-mode"&gt;company-mode&lt;/a&gt;. Other packages have similar setup.&lt;/p&gt;
&lt;p&gt;There are many ways to scan the C++ source files. &lt;code&gt;company-clang&lt;/code&gt; from &lt;code&gt;company-mode&lt;/code&gt; and &lt;code&gt;Clang&lt;/code&gt; is good at handling C++.&lt;/p&gt;
&lt;p&gt;If you use clang to parse the C++ code:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Make sure code is syntax correct&lt;/li&gt;
  &lt;li&gt;assign reasonable value into company-clang-arguments&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here is sample setup:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;setq&lt;/span&gt; company-clang-arguments '(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;-I/home/myname/projs/test-cmake&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;-I/home/myname/projs/test-cmake/inc&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In “friendly” Visual C++, &lt;a href="http://www.codeproject.com/Tips/588022/Using-Additional-Include-Directories" rel="nofollow"&gt;similar setup&lt;/a&gt; is required.&lt;/p&gt;
&lt;p&gt;You can use other backends instead of &lt;code&gt;clang&lt;/code&gt;. For example, you can use &lt;code&gt;company-gtags&lt;/code&gt; and &lt;a href="https://www.gnu.org/software/global/" rel="nofollow"&gt;GNU Global&lt;/a&gt; instead. See &lt;a href="http://blog.binchen.org/posts/emacs-as-c-ide-easy-way.html" rel="nofollow"&gt;Emacs as C++ IDE, easy way&lt;/a&gt; for details.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-auto-completion-for-other-languages" class="anchor" aria-hidden="true" href="#auto-completion-for-other-languages"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Auto-completion for other languages&lt;/h2&gt;
&lt;p&gt;It’s similar to C++ setup. Since GNU Global supports many popular languages, you can use &lt;code&gt;company-gtags&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For languages GNU Global doesn’t support, you can fall back to &lt;code&gt;company-ctags&lt;/code&gt; and &lt;a href="https://en.wikipedia.org/wiki/Ctags" rel="nofollow"&gt;Ctags&lt;/a&gt;. Ctags configuration file is &lt;code&gt;~/.ctags&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can also complete line by &lt;code&gt;M-x eacl-complete-line&lt;/code&gt; and complete multi-lines statement by &lt;code&gt;M-x eacl-complete-multiline&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-chinese-input-method-editor" class="anchor" aria-hidden="true" href="#chinese-input-method-editor"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Chinese Input Method Editor&lt;/h2&gt;
&lt;p&gt;Please note pyim is already built into this setup. You need not install it through ELPA.&lt;/p&gt;
&lt;p&gt;Run &lt;code&gt;M-x toggle-input-method&lt;/code&gt; to toggle input method &lt;a href="https://github.com/tumashu/pyim"&gt;pyim&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Dictionaries with “.pyim” extension under the directory &lt;code&gt;~/.eim/&lt;/code&gt; are automatically loaded.&lt;/p&gt;
&lt;p&gt;Please &lt;code&gt;curl -L http://tumashu.github.io/pyim-bigdict/pyim-bigdict.pyim.gz | zcat &amp;gt; ~/.eim/pyim-bigdict.pyim&lt;/code&gt; to install dictionary for pyim.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-install-multiple-versions-of-emacs" class="anchor" aria-hidden="true" href="#install-multiple-versions-of-emacs"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Install multiple versions of Emacs&lt;/h2&gt;
&lt;p&gt;Run below commands in shell:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;mkdir -p &lt;span class="pl-k"&gt;~&lt;/span&gt;/tmp&lt;span class="pl-k"&gt;;&lt;/span&gt;
curl http://ftp.gnu.org/gnu/emacs/emacs-24.4.tar.gz &lt;span class="pl-k"&gt;|&lt;/span&gt; tar xvz -C &lt;span class="pl-k"&gt;~&lt;/span&gt;/tmp/emacs-24.4
&lt;span class="pl-c1"&gt;cd&lt;/span&gt; &lt;span class="pl-k"&gt;~&lt;/span&gt;/tmp/emacs-24.4&lt;span class="pl-k"&gt;;&lt;/span&gt;
mkdir -p &lt;span class="pl-k"&gt;~&lt;/span&gt;/myemacs/24.4&lt;span class="pl-k"&gt;;&lt;/span&gt;
rm -rf &lt;span class="pl-k"&gt;~&lt;/span&gt;/myemacs/24.4/&lt;span class="pl-k"&gt;*&lt;/span&gt;&lt;span class="pl-k"&gt;;&lt;/span&gt;
./configure --prefix=&lt;span class="pl-k"&gt;~&lt;/span&gt;/myemacs/24.4 --without-x --without-dbus --without-sound &lt;span class="pl-k"&gt;&amp;amp;&amp;amp;&lt;/span&gt; make &lt;span class="pl-k"&gt;&amp;amp;&amp;amp;&lt;/span&gt; make install&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Feel free to replace 24.4 with other version number.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-change-time-locale" class="anchor" aria-hidden="true" href="#change-time-locale"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Change Time Locale&lt;/h2&gt;
&lt;p&gt;Insert below code into &lt;code&gt;~/.emacs&lt;/code&gt; or &lt;code&gt;~/.custom.el&lt;/code&gt;,&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Use en_US locale to format time.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; if not set, the OS locale is used.&lt;/span&gt;
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; system-time-locale &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-directory-structure" class="anchor" aria-hidden="true" href="#directory-structure"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Directory structure&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;~/.emacs.d/init.el&lt;/code&gt; is the main file. It includes other &lt;code&gt;*.el&lt;/code&gt; files.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;~/.emacs.d/lisp/init-elpa.el&lt;/code&gt; defines what packages will be installed from &lt;a href="http://melpa.org" rel="nofollow"&gt;MELPA&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Packages are installed into &lt;code&gt;~/.emacs.d/elpa/&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I also manually download and extract some packages into &lt;code&gt;~/.emacs.d/site-lisp/&lt;/code&gt;. Packages in &lt;code&gt;~/.emacs.d/site-lisp/&lt;/code&gt; are &lt;b&gt;not visible&lt;/b&gt; to the package manager.&lt;/p&gt;
&lt;p&gt;My own snippets is at &lt;code&gt;~/.emacs.d/snippets&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The git hooks is placed in &lt;code&gt;~/.emacs.d/githooks&lt;/code&gt; directory.&lt;/p&gt;
&lt;p&gt;Other directories don’t matter.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-true-colors-in-terminal-emacs" class="anchor" aria-hidden="true" href="#true-colors-in-terminal-emacs"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;True colors in terminal Emacs&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Install Emacs 26&lt;/li&gt;
  &lt;li&gt;Install &lt;a href="https://gist.github.com/XVilka/8346728"&gt;terminals supporting true color&lt;/a&gt;. I suggest &lt;a href="https://mintty.github.io/" rel="nofollow"&gt;mintty&lt;/a&gt; on Windows, &lt;a href="https://gnometerminator.blogspot.com/p/introduction.html" rel="nofollow"&gt;terminator&lt;/a&gt; on Linux, &lt;a href="https://www.iterm2.com/" rel="nofollow"&gt;iTerm2&lt;/a&gt; on macOS&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://www.gnu.org/software/emacs/draft/manual/html_mono/efaq.html#Colors-on-a-TTY" rel="nofollow"&gt;Setup and start Emacs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-run-the-unit-test-before-git-commit" class="anchor" aria-hidden="true" href="#run-the-unit-test-before-git-commit"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Run the unit test before git commit&lt;/h2&gt;
&lt;p&gt;On macOS/Linux/Cygwin, run &lt;code&gt;make githooks&lt;/code&gt; to install hooks into &lt;code&gt;~/.emacs.d/.git/hooks&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Then unit test is run automatically before &lt;code&gt;git commit&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-python-environment" class="anchor" aria-hidden="true" href="#python-environment"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Python environment&lt;/h2&gt;
&lt;p&gt;This setup used &lt;a href="https://github.com/jorgenschaefer/elpy"&gt;elpy (Emacs Python Development Environment)&lt;/a&gt;. The setup for python development is minimum, as you can see in &lt;code&gt;init-python.el&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If elpy warns you that the python environment is corrupt, you have two solutions.&lt;/p&gt;
&lt;p&gt;Solution 1, ignore the warning and turn off elpy by comment out &lt;code&gt;(elpy-enable)&lt;/code&gt; in &lt;code&gt;init-python.el&lt;/code&gt;. Then you won’t have those python IDE things.&lt;/p&gt;
&lt;p&gt;Solution 2, fix your python environment. For example, if elpy gives the error message &lt;code&gt;ImportError: No module named pkg_resources&lt;/code&gt; on Ubuntu, a quick search will lead to &lt;a href="https://askubuntu.com/questions/1006201/importerror-no-module-named-pkg-resources" rel="nofollow"&gt;this link.&lt;/a&gt; So a simple shell command &lt;code&gt;sudo apt install --reinstall python-pkg-resources python-setuptools&lt;/code&gt; solves the problem.&lt;/p&gt;
&lt;p&gt;Solution 2 might be better because you couldn’t do any serious coding anyway if the python environment is broken.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-support-legacy-emacs-versions" class="anchor" aria-hidden="true" href="#support-legacy-emacs-versions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Support legacy Emacs versions&lt;/h1&gt;
&lt;h2&gt;&lt;a id="user-content-emacs-23" class="anchor" aria-hidden="true" href="#emacs-23"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Emacs 23&lt;/h2&gt;
&lt;p&gt;Version 1.2 of this setup is the last version to support Emacs v23.&lt;/p&gt;
&lt;p&gt;Here are the steps to use that setup:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Download &lt;a href="https://github.com/redguardtoo/emacs.d/archive/1.2.zip"&gt;https://github.com/redguardtoo/emacs.d/archive/1.2.zip&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Download &lt;a href="https://github.com/redguardtoo/myelpa/archive/1.2.zip"&gt;https://github.com/redguardtoo/myelpa/archive/1.2.zip&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Follow the section &lt;code&gt;Install stable version in easiest way&lt;/code&gt; but skip the download steps&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-emacs-243" class="anchor" aria-hidden="true" href="#emacs-243"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Emacs 24.3&lt;/h2&gt;
&lt;p&gt;Version 2.6 is the last version to support &lt;code&gt;Emacs 24.3&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Download &lt;a href="https://github.com/redguardtoo/emacs.d/archive/2.6.zip"&gt;https://github.com/redguardtoo/emacs.d/archive/2.6.zip&lt;/a&gt; and &lt;a href="https://github.com/redguardtoo/myelpa/archive/2.6.zip"&gt;https://github.com/redguardtoo/myelpa/archive/2.6.zip&lt;/a&gt; and you are good to go.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-emacs-244-and-245" class="anchor" aria-hidden="true" href="#emacs-244-and-245"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Emacs 24.4 and 24.5&lt;/h2&gt;
&lt;p&gt;Version 2.9 is the last version to support &lt;code&gt;Emacs 24.4+&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Please use &lt;a href="https://github.com/redguardtoo/emacs.d/archive/2.9.zip"&gt;https://github.com/redguardtoo/emacs.d/archive/2.9.zip&lt;/a&gt; and &lt;a href="https://github.com/redguardtoo/myelpa/archive/2.9.zip"&gt;https://github.com/redguardtoo/myelpa/archive/2.9.zip&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-tips" class="anchor" aria-hidden="true" href="#tips"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tips&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Never turn off any bundled mode if it’s on by default. Future version of Emacs may assume it’s on. Tweak its flag in mode hook instead!&lt;/li&gt;
  &lt;li&gt;Git skills are &lt;b&gt;extremely useful&lt;/b&gt;. Please read the chapters “Git Basics”, “Git Branching”, “Git Tools” from &lt;a href="https://git-scm.com/book/en/" rel="nofollow"&gt;Pro Git&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;You can run &lt;code&gt;optimize-emacs-startup&lt;/code&gt; to compile “*.el” under &lt;code&gt;~/.emacs.d/lisp/&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;a id="user-content-report-bug" class="anchor" aria-hidden="true" href="#report-bug"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Report bug&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Please check &lt;a href="http://www.emacswiki.org/emacs/" rel="nofollow"&gt;EmacsWiki&lt;/a&gt; and my FAQ at first&lt;/li&gt;
  &lt;li&gt;If you still can’t resolve the issue, restart Emacs with option &lt;code&gt;---debug-init&lt;/code&gt;, run &lt;code&gt;M-x toggle-debug-on-error&lt;/code&gt; in Emacs. Try to reproduce the issue&lt;/li&gt;
  &lt;li&gt;Send error messages to the original developer if it’s third party package’s problem&lt;/li&gt;
  &lt;li&gt;If &lt;b&gt;you are sure&lt;/b&gt; it’s this setup’s problem, file bug report at &lt;a href="https://github.com/redguardtoo/emacs.d"&gt;https://github.com/redguardtoo/emacs.d&lt;/a&gt;. Don’t email me!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Bug report should include details (OS, Emacs version …).&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>redguardtoo</author><guid isPermaLink="false">https://github.com/redguardtoo/emacs.d</guid><pubDate>Fri, 24 Jan 2020 00:01:00 GMT</pubDate></item><item><title>a-schaefers/systemE #2 in Emacs Lisp, Today</title><link>https://github.com/a-schaefers/systemE</link><description>&lt;p&gt;&lt;i&gt;🤣 A lightweight systemd replacement written in Emacs lisp 🤣&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="emacs.png"&gt;&lt;img src="emacs.png" alt="Logo" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-systeme" class="anchor" aria-hidden="true" href="#systeme"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;systemE&lt;/h1&gt;
&lt;p&gt;A lightweight systemd replacement written in Emacs lisp&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-about" class="anchor" aria-hidden="true" href="#about"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;About&lt;/h2&gt;
&lt;p&gt;Using the tooling in this repo, I am able to boot from linux to sinit as PID1, and from there to Emacs acting as PID2 using --script mode, performing all typical rc.boot system initialization using Emacs lisp until we hit the getty.&lt;/p&gt;
&lt;p&gt;Additionally from the getty, I use Emacs as a login shell, dotfiles manager, package-manager front-end, startx / xinitrc replacement, and Window Manager. I have nearly purged shell scripts from my life entirely. For more information about these things, see my &lt;a href="https://github.com/a-schaefers/dot-emacs"&gt;.emacs repo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="screenshot.jpg"&gt;&lt;img src="screenshot.jpg" alt="Logo" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-status" class="anchor" aria-hidden="true" href="#status"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Status&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The rc.boot.el and rc.shutdown.el scripts are finished and I use them on my local machine. No support for fancy stuff like luks is planned.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We still depend on &lt;a href="https://core.suckless.org/sinit/" rel="nofollow"&gt;suckless "sinit"&lt;/a&gt; for PID1 (Emacs is PID2) and this needs to be rewritten in in a lisp. While &lt;strong&gt;it is easy to execute Emacs as PID 1&lt;/strong&gt;, &lt;a href="http://www.informatimago.com/linux/emacs-on-user-mode-linux.html" rel="nofollow"&gt;as evidenced here&lt;/a&gt;, Emacs does not reap zombies and I do not know how to make it reap them yet. I have found Emacs listens for the URS1 and URS2 signals, but not SIGCHLD which is what we need. We also need to figure out how to call wait () after that. Also I really like sinit at this point, and am not in a hurry to swap it out.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We still depend on busybox runit for a process supervisor and this needs to be reimplemented in elisp, or atleast converted to gnu shepherd. An Elisp service supervisor that could be communicated to using emacsclient as root would be really fun.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;One pain point is getting a statically compiled Emacs. We don't require this, but it sure would be nice. Unfortunately, when I statically compile Emacs using musl, it results in a broken Emacs.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-this-repo-is-technically-a-kiss-linux-overlay" class="anchor" aria-hidden="true" href="#this-repo-is-technically-a-kiss-linux-overlay"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;This repo is technically a &lt;a href="https://getkiss.org" rel="nofollow"&gt;kiss linux&lt;/a&gt; overlay&lt;/h2&gt;
&lt;p&gt;I recommend Kiss linux.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-the-ever-growing-list-of-helpful--credits--thank-yous" class="anchor" aria-hidden="true" href="#the-ever-growing-list-of-helpful--credits--thank-yous"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;The ever-growing list of Helpful / Credits / Thank You's&lt;/h3&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; https://github.com/kisslinux/init/blob/master/lib/init/rc.boot&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; https://github.com/kisslinux/init/blob/master/lib/init/rc.shutdown&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; https://gist.github.com/lunaryorn/91a7734a8c1d93a8d1b0d3f85fe18b1e&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; https://busybox.net/FAQ.html#job_control&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; https://stackoverflow.com/questions/23299314/finding-the-exit-code-of-a-shell-command-in-elisp&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; https://github.com/Sweets/hummingbird&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; https://felipec.wordpress.com/2013/11/04/init&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; https://www.emacswiki.org/emacs/PersistentProcesses&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; https://stackoverflow.com/questions/17479529/self-contained-portable-emacs&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>a-schaefers</author><guid isPermaLink="false">https://github.com/a-schaefers/systemE</guid><pubDate>Fri, 24 Jan 2020 00:02:00 GMT</pubDate></item><item><title>raxod502/straight.el #3 in Emacs Lisp, Today</title><link>https://github.com/raxod502/straight.el</link><description>&lt;p&gt;&lt;i&gt;🍀 Next-generation, purely functional package manager for the Emacs hacker.&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;p&gt;&lt;strong&gt;straight.el&lt;/strong&gt;: next-generation, purely functional package manager
for the &lt;a href="https://www.gnu.org/software/emacs/" rel="nofollow"&gt;Emacs&lt;/a&gt; hacker.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Please check out the &lt;a href="#faq"&gt;FAQ&lt;/a&gt; and &lt;a href="#news"&gt;news&lt;/a&gt; :)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://travis-ci.org/raxod502/straight.el" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e1b9504ca74a584011596e46a78873de1fa1784a/68747470733a2f2f7472617669732d63692e6f72672f7261786f643530322f73747261696768742e656c2e7376673f6272616e63683d646576656c6f70" alt="Build status" data-canonical-src="https://travis-ci.org/raxod502/straight.el.svg?branch=develop" style="max-width:100%;"&gt;&lt;/a&gt; &lt;a href="https://gitter.im/raxod502/straight.el" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/82630e77f45b173fed5fc2dbb99461abb2c402e7/68747470733a2f2f6261646765732e6769747465722e696d2f7261786f643530322f73747261696768742e656c2e737667" alt="Gitter chat" data-canonical-src="https://badges.gitter.im/raxod502/straight.el.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;ul&gt;
&lt;li&gt;&lt;a href="#features"&gt;Features&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#guiding-principles"&gt;Guiding principles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#getting-started"&gt;Getting started&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#debugging"&gt;Debugging&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#install-packages"&gt;Install packages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#but-what-about-my-fork-of-obscure-el-package"&gt;But what about my fork of (obscure .el package)?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#integration-with-use-package"&gt;Integration with &lt;code&gt;use-package&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#edit-packages-locally"&gt;Edit packages locally&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#automatic-repository-management"&gt;Automatic repository management&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#configuration-reproducibility"&gt;Configuration reproducibility&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#conceptual-overview"&gt;Conceptual overview&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#tldr"&gt;TL;DR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#what-is-a-package"&gt;What is a package?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#where-do-packages-come-from"&gt;Where do packages come from?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#what-does-this-look-like-on-disk"&gt;What does this look like on disk?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#where-do-repositories-come-from"&gt;Where do repositories come from?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#what-does-it-mean-to-load-a-package"&gt;What does it mean to load a package?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#where-do-recipes-come-from"&gt;Where do recipes come from?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#what-happens-when-i-call-straight-use-package"&gt;What happens when I call &lt;code&gt;straight-use-package&lt;/code&gt;?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#what-does-it-mean-to-register-a-package"&gt;What does it mean to register a package?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#how-does-straightel-know-when-to-rebuild-packages"&gt;How does &lt;code&gt;straight.el&lt;/code&gt; know when to rebuild packages?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#how-does-straightel-know-what-packages-are-installed"&gt;How does &lt;code&gt;straight.el&lt;/code&gt; know what packages are installed?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#comparison-to-other-package-managers"&gt;Comparison to other package managers&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#tldr-1"&gt;TL;DR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#comparison-to-packageel"&gt;Comparison to &lt;code&gt;package.el&lt;/code&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#advantages-of-straightel"&gt;Advantages of &lt;code&gt;straight.el&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#advantages-of-packageel"&gt;Advantages of &lt;code&gt;package.el&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#additional-notes"&gt;Additional notes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#comparison-to-quelpa"&gt;Comparison to Quelpa&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#advantages-of-straightel-1"&gt;Advantages of &lt;code&gt;straight.el&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#advantages-of-quelpa"&gt;Advantages of Quelpa&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#additional-notes-1"&gt;Additional notes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#comparison-to-cask"&gt;Comparison to Cask&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#advantages-of-straightel-2"&gt;Advantages of &lt;code&gt;straight.el&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#advantages-of-cask"&gt;Advantages of Cask&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#comparison-to-el-get"&gt;Comparison to el-get&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#advantages-of-straightel-3"&gt;Advantages of &lt;code&gt;straight.el&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#advantages-of-el-get"&gt;Advantages of el-get&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#comparison-to-borg"&gt;Comparison to Borg&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#advantages-of-straightel-4"&gt;Advantages of &lt;code&gt;straight.el&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#advantages-of-borg"&gt;Advantages of Borg&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#comparison-to-the-manual-approach"&gt;Comparison to the manual approach&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#advantages-of-straightel-5"&gt;Advantages of &lt;code&gt;straight.el&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#advantages-of-the-manual-approach"&gt;Advantages of the manual approach&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#user-manual"&gt;User manual&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#bootstrapping-straightel"&gt;Bootstrapping &lt;code&gt;straight.el&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#installing-packages-programmatically"&gt;Installing packages programmatically&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#installing-with-a-custom-recipe"&gt;Installing with a custom recipe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#additional-arguments-to-straight-use-package"&gt;Additional arguments to &lt;code&gt;straight-use-package&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#variants-of-straight-use-package"&gt;Variants of &lt;code&gt;straight-use-package&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#customizing-when-packages-are-built"&gt;Customizing when packages are built&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#custom-or-manual-modification-detection"&gt;Custom or manual modification detection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#summary-of-options-for-package-modification-detection"&gt;Summary of options for package modification detection&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#find-at-startup"&gt;&lt;code&gt;find-at-startup&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#check-on-save"&gt;&lt;code&gt;check-on-save&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#watch-files"&gt;&lt;code&gt;watch-files&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#customizing-how-packages-are-built"&gt;Customizing how packages are built&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#customizing-how-packages-are-made-available"&gt;Customizing how packages are made available&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#hooks-run-by-straight-use-package"&gt;Hooks run by &lt;code&gt;straight-use-package&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-recipe-format"&gt;The recipe format&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#version-control-backends"&gt;Version-control backends&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#git-backend"&gt;Git backend&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#deprecated-upstream-keyword"&gt;Deprecated &lt;code&gt;:upstream&lt;/code&gt; keyword&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#recipe-lookup"&gt;Recipe lookup&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#updating-recipe-repositories"&gt;Updating recipe repositories&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#customizing-recipe-repositories"&gt;Customizing recipe repositories&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#gnu-elpa"&gt;GNU ELPA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#emacsmirror"&gt;Emacsmirror&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#defining-new-recipe-repositories"&gt;Defining new recipe repositories&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#overriding-recipes"&gt;Overriding recipes&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#overriding-the-recipe-for-straightel"&gt;Overriding the recipe for &lt;code&gt;straight.el&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#interactive-usage"&gt;Interactive usage&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#version-control-operations"&gt;Version control operations&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#lockfile-management"&gt;Lockfile management&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#the-profile-system"&gt;The profile system&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#packages-and-the-init-file"&gt;Packages and the init-file&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#using-straightel-to-reproduce-bugs"&gt;Using &lt;code&gt;straight.el&lt;/code&gt; to reproduce bugs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#using-straightel-to-develop-packages"&gt;Using &lt;code&gt;straight.el&lt;/code&gt; to develop packages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#integration-with-other-packages"&gt;Integration with other packages&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#integration-with-use-package-1"&gt;Integration with &lt;code&gt;use-package&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#integration-with-packageel"&gt;"Integration" with &lt;code&gt;package.el&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#integration-with-org"&gt;Integration with Org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#integration-with-hydra"&gt;Integration with Hydra&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#miscellaneous"&gt;Miscellaneous&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#developer-manual"&gt;Developer manual&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#trivia"&gt;Trivia&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#comments-and-docstrings"&gt;Comments and docstrings&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#contributing"&gt;Contributing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#faq"&gt;FAQ&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#my-init-time-got-slower"&gt;My init time got slower&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#how-do-i-update-melpa-et-al"&gt;How do I update MELPA et al.?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-wrong-version-of-my-package-was-loaded"&gt;The wrong version of my package was loaded&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#i-get-could-not-read-usernamepassword-errors"&gt;I get "could not read username/password" errors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-interactive-version-control-operations-are-confusing"&gt;The interactive version-control operations are confusing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#how-do-i-pin-package-versions-or-use-only-tagged-releases"&gt;How do I pin package versions or use only tagged releases?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#how-can-i-use-the-built-in-version-of-a-package"&gt;How can I use the built-in version of a package?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#news"&gt;News&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#july-6-2019"&gt;July 6, 2019&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#may-24-2019"&gt;May 24, 2019&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#may-22-2019"&gt;May 22, 2019&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#may-1-2019"&gt;May 1, 2019&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#march-15-2019"&gt;March 15, 2019&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#december-22-2018"&gt;December 22, 2018&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#september-12-2018"&gt;September 12, 2018&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#july-19-2018"&gt;July 19, 2018&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#july-12-2018"&gt;July 12, 2018&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;&lt;a id="user-content-features" class="anchor" aria-hidden="true" href="#features"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Install Emacs packages listed on &lt;a href="http://melpa.org/#/" rel="nofollow"&gt;MELPA&lt;/a&gt;, &lt;a href="https://elpa.gnu.org/" rel="nofollow"&gt;GNU ELPA&lt;/a&gt;, or
&lt;a href="https://emacsmirror.net/" rel="nofollow"&gt;Emacsmirror&lt;/a&gt;, or provide your own recipes.&lt;/li&gt;
&lt;li&gt;Packages are cloned as Git (or other) repositories, not as opaque
tarballs.&lt;/li&gt;
&lt;li&gt;Make changes to a package simply by editing its source code, no
additional steps required. Contribute upstream just by pushing your
changes.&lt;/li&gt;
&lt;li&gt;Powerful interactive workflows (with popups à la Magit) for
performing bulk maintenance on the Git repositories for your
packages.&lt;/li&gt;
&lt;li&gt;Save and load version lockfiles that ensure 100% reproducibility for
your Emacs configuration. Package state is defined entirely by your
init-file and (optional) lockfile, with no extra persistent data
floating around.&lt;/li&gt;
&lt;li&gt;Specify package descriptions using a powerful recipe format that
supports everything from &lt;a href="https://github.com/melpa/melpa#recipe-format"&gt;MELPA recipes&lt;/a&gt; and
more.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jwiegley/use-package"&gt;&lt;code&gt;use-package&lt;/code&gt;&lt;/a&gt; integration.&lt;/li&gt;
&lt;li&gt;Modular: you can install your packages manually and straight.el will
load them for you. Or you can also have straight.el install your
packages, while you provide the recipes explicitly. Or straight.el
can also fetch recipes, if you want. Bulk repository management and
package updates are also optional.&lt;/li&gt;
&lt;li&gt;Extensible APIs to add new recipe sources and version-control
backends.&lt;/li&gt;
&lt;li&gt;The cleanest source code you've ever seen. &lt;a href="#comments-and-docstrings"&gt;45%&lt;/a&gt;
of &lt;code&gt;straight.el&lt;/code&gt; is comments and docstrings.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-guiding-principles" class="anchor" aria-hidden="true" href="#guiding-principles"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Guiding principles&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Init-file and version lockfiles as the sole source of truth. No
persistent state kept elsewhere.&lt;/li&gt;
&lt;li&gt;100% reproducible package management, accounting for changes in
packages, recipe repositories, configuration, and the package
manager itself.&lt;/li&gt;
&lt;li&gt;No support whatsoever for &lt;code&gt;package.el&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Edit packages by editing their code, no extra steps required. Allow
for manual version control operations.&lt;/li&gt;
&lt;li&gt;Compatibility with MELPA, GNU ELPA, and Emacsmirror.&lt;/li&gt;
&lt;li&gt;Trivial to quickly try out a package without permanently installing
it.&lt;/li&gt;
&lt;li&gt;Good for reproducing an issue with &lt;code&gt;emacs -Q&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-getting-started" class="anchor" aria-hidden="true" href="#getting-started"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Getting started&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note: &lt;code&gt;straight.el&lt;/code&gt; supports a minimum version of Emacs 24.5, and
works on macOS, Windows, and most flavors of Linux. You must install
&lt;a href="https://git-scm.com/" rel="nofollow"&gt;Git&lt;/a&gt; in order to use &lt;code&gt;straight.el&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;First, place the following bootstrap code in your init-file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here are some variables you may be interested in (some of them must be
set &lt;strong&gt;before&lt;/strong&gt; the bootstrap code runs, if they might affect how
&lt;code&gt;straight.el&lt;/code&gt; itself is loaded):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#overriding-the-recipe-for-straightel"&gt;&lt;code&gt;straight-repository-branch&lt;/code&gt;&lt;/a&gt; -- to
get the latest version of &lt;code&gt;straight.el&lt;/code&gt; from the &lt;code&gt;develop&lt;/code&gt; branch,
rather than the default &lt;code&gt;master&lt;/code&gt; which is updated less frequently
but which is ostensibly more stable.&lt;/li&gt;
&lt;li&gt;&lt;a href="#customizing-when-packages-are-built"&gt;&lt;code&gt;straight-check-for-modifications&lt;/code&gt;&lt;/a&gt; --
to configure an alternate way for &lt;code&gt;straight.el&lt;/code&gt; to check for
modifications made to package source code, rather than the default
(which is 100% reliable, but has a minor cost to startup time).&lt;/li&gt;
&lt;li&gt;&lt;a href="#integration-with-use-package-1"&gt;&lt;code&gt;straight-use-package-by-default&lt;/code&gt;&lt;/a&gt;
-- if you use &lt;a href="https://github.com/jwiegley/use-package"&gt;&lt;code&gt;use-package&lt;/code&gt;&lt;/a&gt;, then this makes each
&lt;code&gt;use-package&lt;/code&gt; form also invoke &lt;code&gt;straight.el&lt;/code&gt; to install the package,
unless otherwise specified.&lt;/li&gt;
&lt;li&gt;&lt;a href="#git-backend"&gt;&lt;code&gt;straight-vc-git-default-protocol&lt;/code&gt;&lt;/a&gt; -- by
default, &lt;code&gt;straight.el&lt;/code&gt; clones over HTTPS. If you need packages from
private Git repositories in your configuration, then you might want
to use SSH instead.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You should remove any code that relates to &lt;code&gt;package.el&lt;/code&gt;; for example,
references to &lt;code&gt;package-initialize&lt;/code&gt;, &lt;code&gt;package-archives&lt;/code&gt;, and (if you're
using &lt;a href="https://github.com/jwiegley/use-package"&gt;&lt;code&gt;use-package&lt;/code&gt;&lt;/a&gt;) &lt;code&gt;:ensure&lt;/code&gt; or
&lt;code&gt;use-package-always-ensure&lt;/code&gt;. While it is technically possible to use
both &lt;code&gt;package.el&lt;/code&gt; and &lt;code&gt;straight.el&lt;/code&gt; at the same time, there is no real
reason to, and it might result in oddities like packages getting
loaded more than once.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-debugging" class="anchor" aria-hidden="true" href="#debugging"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Debugging&lt;/h4&gt;
&lt;p&gt;On macOS, you may receive an error:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Could not create connection to raw.githubusercontent.com:443
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are two ways to solve this problem. One way is to install a
version of Emacs that is linked with GnuTLS. The &lt;a href="https://brew.sh/" rel="nofollow"&gt;Homebrew&lt;/a&gt; formula
for Emacs was recently updated to link with GnuTLS by default, so you
need only do this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ brew upgrade emacs
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The other way is to let Emacs use certificates provided by LibreSSL,
which you can do by running this command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ brew install gnutls libressl
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And adding this to your init-file, &lt;em&gt;before&lt;/em&gt; the bootstrap snippet:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(with-eval-after-load 'gnutls
  (add-to-list 'gnutls-trustfiles "/usr/local/etc/libressl/cert.pem"))
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-install-packages" class="anchor" aria-hidden="true" href="#install-packages"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Install packages&lt;/h3&gt;
&lt;p&gt;Out of the box, you can install any package listed on &lt;a href="http://melpa.org/#/" rel="nofollow"&gt;MELPA&lt;/a&gt;, &lt;a href="https://elpa.gnu.org/" rel="nofollow"&gt;GNU
ELPA&lt;/a&gt;, or &lt;a href="https://emacsmirror.net/" rel="nofollow"&gt;Emacsmirror&lt;/a&gt;, which is to say any package in
existence. (Although MELPA is used as a package listing, packages are
installed by cloning their Git repositories rather than by downloading
tarballs like &lt;code&gt;package.el&lt;/code&gt; does.) To install a package temporarily
(until you restart Emacs), run &lt;code&gt;M-x straight-use-package&lt;/code&gt; and select
the package you want. To install a package permanently, place a call
to &lt;code&gt;straight-use-package&lt;/code&gt; in your init-file, like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(straight-use-package 'el-patch)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that installing a package will activate all of its autoloads, but
it will not actually &lt;code&gt;require&lt;/code&gt; the features provided by the package.
This means that you might need to use &lt;code&gt;require&lt;/code&gt; or &lt;code&gt;autoload&lt;/code&gt; for some
antiquated packages that do not properly declare their autoloads.&lt;/p&gt;
&lt;p&gt;To learn more, see the documentation on &lt;a href="#installing-packages-programmatically"&gt;the package
lifecycle&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-but-what-about-my-fork-of-obscure-el-package" class="anchor" aria-hidden="true" href="#but-what-about-my-fork-of-obscure-el-package"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;But what about my fork of (obscure .el package)?&lt;/h3&gt;
&lt;p&gt;Instead of passing just a package name to &lt;code&gt;straight-use-package&lt;/code&gt;, you
can pass a list ("recipe"). You can see the default recipe for any
given package by running &lt;code&gt;M-x straight-get-recipe&lt;/code&gt;. For example, the
recipe for &lt;code&gt;el-patch&lt;/code&gt; is:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(el-patch :type git :host github :repo "raxod502/el-patch")
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So, if you have forked &lt;code&gt;el-patch&lt;/code&gt; and you want to use your fork
instead of the upstream, do:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(straight-use-package
 '(el-patch :type git :host github :repo "your-name/el-patch"))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In fact, &lt;code&gt;straight.el&lt;/code&gt; has explicit support for using a forked
package, since this is so common:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(straight-use-package
 '(el-patch :type git :host github :repo "raxod502/el-patch"
            :fork (:host github
                   :repo "your-name/el-patch")))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You may also omit the &lt;code&gt;:type git&lt;/code&gt; if you leave &lt;code&gt;straight-default-vc&lt;/code&gt;
at its default value of &lt;code&gt;git&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To learn more, see the documentation on &lt;a href="#the-recipe-format"&gt;the recipe
format&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-integration-with-use-package" class="anchor" aria-hidden="true" href="#integration-with-use-package"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Integration with &lt;code&gt;use-package&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/jwiegley/use-package"&gt;&lt;code&gt;use-package&lt;/code&gt;&lt;/a&gt; is a macro that provides convenient
syntactic sugar for many common tasks related to installing and
configuring Emacs packages. Of course, it does not actually install
the packages, but instead defers to a package manager, like
&lt;code&gt;straight.el&lt;/code&gt; (which comes with &lt;code&gt;use-package&lt;/code&gt; integration by default).&lt;/p&gt;
&lt;p&gt;To use &lt;code&gt;use-package&lt;/code&gt;, first install it with &lt;code&gt;straight.el&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(straight-use-package 'use-package)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now &lt;code&gt;use-package&lt;/code&gt; will use &lt;code&gt;straight.el&lt;/code&gt; to automatically install
missing packages if you provide &lt;code&gt;:straight t&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(use-package el-patch
  :straight t)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can still provide a custom recipe for the package:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(use-package el-patch
  :straight (el-patch :type git :host github :repo "raxod502/el-patch"
                      :fork (:host github
                             :repo "your-name/el-patch")))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Specifying &lt;code&gt;:straight t&lt;/code&gt; is unnecessary if you set
&lt;code&gt;straight-use-package-by-default&lt;/code&gt; to a non-nil value. (Note that the
variable &lt;code&gt;use-package-always-ensure&lt;/code&gt; is associated with &lt;code&gt;package.el&lt;/code&gt;,
and you should not use it with &lt;code&gt;straight.el&lt;/code&gt;.)&lt;/p&gt;
&lt;p&gt;To learn more, see the documentation on &lt;a href="#integration-with-use-package-1"&gt;&lt;code&gt;straight.el&lt;/code&gt;'s &lt;code&gt;use-package&lt;/code&gt;
integration&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-edit-packages-locally" class="anchor" aria-hidden="true" href="#edit-packages-locally"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Edit packages locally&lt;/h3&gt;
&lt;p&gt;One of the biggest strengths of &lt;code&gt;straight.el&lt;/code&gt; is that editing packages
locally is trivial. You literally just edit the files (&lt;code&gt;find-function&lt;/code&gt;
and friends all work as you would expect). Packages will be
automatically rebuilt if necessary when Emacs next starts up.&lt;/p&gt;
&lt;p&gt;You can even commit your changes and push or pull to various remotes
using Git. You have complete control over your packages' Git
repositories.&lt;/p&gt;
&lt;p&gt;To learn more, see the documentation on &lt;a href="#installing-packages-programmatically"&gt;the package
lifecycle&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-automatic-repository-management" class="anchor" aria-hidden="true" href="#automatic-repository-management"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Automatic repository management&lt;/h3&gt;
&lt;p&gt;While being able to make arbitrary changes to your packages is very
powerful, it can also get tiring to keep track of the all those
changes. For this reason, &lt;code&gt;straight.el&lt;/code&gt; provides a suite of powerful
interactive workflows to perform bulk operations on your packages.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;To restore each package to its canonical state (a clean working
directory with the main branch checked out, and the remotes set
correctly), run &lt;code&gt;M-x straight-normalize-package&lt;/code&gt; or &lt;code&gt;M-x straight-normalize-all&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To fetch from each package's configured remote, run &lt;code&gt;M-x straight-fetch-package-and-deps&lt;/code&gt; or &lt;code&gt;M-x straight-fetch-all&lt;/code&gt;; to
also fetch from the upstream for forked packages, supply a prefix
argument.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To merge changes from each package's configured remote, run &lt;code&gt;M-x straight-merge-package-and-deps&lt;/code&gt; or &lt;code&gt;M-x straight-merge-all&lt;/code&gt;; to
also merge from the upstream for forked packages, supply a prefix
argument.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To push all local changes to each package's configured remote, run
&lt;code&gt;M-x straight-push-package&lt;/code&gt; or &lt;code&gt;M-x straight-push-all&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All of these commands are highly interactive and ask you before making
any changes. At any point, you can stop and perform manual operations
with Magit or other tools in a recursive edit.&lt;/p&gt;
&lt;p&gt;To learn more, see the documentation on &lt;a href="#version-control-operations"&gt;bulk repository
management&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-configuration-reproducibility" class="anchor" aria-hidden="true" href="#configuration-reproducibility"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Configuration reproducibility&lt;/h3&gt;
&lt;p&gt;To save the currently checked out revisions of all of your packages,
run &lt;code&gt;M-x straight-freeze-versions&lt;/code&gt;. The resulting file
(&lt;code&gt;~/.emacs.d/straight/versions/default.el&lt;/code&gt;), together with your
init-file, perfectly define your package configuration. Keep your
version lockfile checked into version control; when you install your
Emacs configuration on another machine, the versions of packages
specified in your lockfile will automatically be checked out after the
packages are installed. You can manually revert all packages to the
revisions specified in the lockfile by running &lt;code&gt;M-x straight-thaw-versions&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To learn more, see the documentation on &lt;a href="#lockfile-management"&gt;version
lockfiles&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-conceptual-overview" class="anchor" aria-hidden="true" href="#conceptual-overview"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Conceptual overview&lt;/h2&gt;
&lt;p&gt;This section describes, at a high level, how the different mechanisms
in &lt;code&gt;straight.el&lt;/code&gt; play together. This illustrates how &lt;code&gt;straight.el&lt;/code&gt;
manages to accomplish all of its &lt;a href="#guiding-principles"&gt;guiding principles&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-tldr" class="anchor" aria-hidden="true" href="#tldr"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TL;DR&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;straight.el&lt;/code&gt; operates by cloning Git repositories and then symlinking
files into Emacs' load path. The collection of symlinked files
constitutes the package, which is defined by its recipe. The recipe
also describes which local repository to link the files from, and how
to clone that repository, if it is absent.&lt;/p&gt;
&lt;p&gt;When you call &lt;code&gt;straight-use-package&lt;/code&gt;, the recipe you provide is
registered with &lt;code&gt;straight.el&lt;/code&gt; for future reference. Then the package's
repository is cloned if it is absent, the package is rebuilt if its
files have changed since the last build (as determined by &lt;code&gt;find(1)&lt;/code&gt;),
and its autoloads are evaluated.&lt;/p&gt;
&lt;p&gt;You can also provide only a package name, in which case the recipe
will be looked up in one of several configurable recipe repositories,
which are just packages themselves (albeit with the build step
disabled).&lt;/p&gt;
&lt;p&gt;&lt;code&gt;straight.el&lt;/code&gt; determines which packages are installed solely by how
and when &lt;code&gt;straight-use-package&lt;/code&gt; is invoked in your init-file.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-what-is-a-package" class="anchor" aria-hidden="true" href="#what-is-a-package"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;What is a package?&lt;/h3&gt;
&lt;p&gt;A &lt;em&gt;package&lt;/em&gt; is a collection of Emacs Lisp (and possibly other) files.
The most common case is just a single &lt;code&gt;.el&lt;/code&gt; file, but some packages
have many &lt;code&gt;.el&lt;/code&gt; files, and some even have a directory structure.&lt;/p&gt;
&lt;p&gt;Note that a package is defined only as a collection of files. It
doesn't necessarily correspond to a Git repository, or an entry on
MELPA, or anything like that. Frequently there is a relationship
between all of these concepts, but that relationship does not always
have to be direct or one-to-one.&lt;/p&gt;
&lt;p&gt;A package also has a name, which must be unique. This is the name that
is used for the folder holding the package's files. It is frequently
the same as the name of a Git repository, or an entry on MELPA, but
again this does not have to be the case.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-where-do-packages-come-from" class="anchor" aria-hidden="true" href="#where-do-packages-come-from"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Where do packages come from?&lt;/h3&gt;
&lt;p&gt;If you really wanted all of your packages to be unambiguously defined,
you could just copy and paste all of their files into version control.
But that would defeat the purpose of using a package manager like
&lt;code&gt;straight.el&lt;/code&gt;. In &lt;code&gt;straight.el&lt;/code&gt;, packages are defined by two sources
of information:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a &lt;em&gt;local repository&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;a &lt;em&gt;build recipe&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The local repository is just a directory containing some files. Of
course, it also has a name, which may or may not be the same as the
package's name. Frequently, the local repository is also a Git
repository, but this is not necessary.&lt;/p&gt;
&lt;p&gt;The build recipe is not a literal data structure. It is a concept that
represents a certain subset of the package's recipe. Specifically, the
&lt;code&gt;:files&lt;/code&gt;, &lt;code&gt;:local-repo&lt;/code&gt;, and &lt;code&gt;:no-build&lt;/code&gt; keywords.&lt;/p&gt;
&lt;p&gt;To transform this &lt;em&gt;information&lt;/em&gt; into an actual package that Emacs can
load, &lt;code&gt;straight.el&lt;/code&gt; &lt;em&gt;builds&lt;/em&gt; the package. This means that some
symbolic links are created in the package's directory that point back
into the local repository's directory. Exactly how these symlinks are
created is determined by the &lt;code&gt;:files&lt;/code&gt; directive, and which local
repository the symlinks point to is determined by the &lt;code&gt;:local-repo&lt;/code&gt;
directive.&lt;/p&gt;
&lt;p&gt;After the symlinks are created, the resulting files are byte-compiled,
and their autoloads are generated and written into a file in the
package's directory.&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;:no-build&lt;/code&gt; is specified, however, this entire process is skipped.
This mechanism is used for recipe repositories.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-what-does-this-look-like-on-disk" class="anchor" aria-hidden="true" href="#what-does-this-look-like-on-disk"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;What does this look like on disk?&lt;/h3&gt;
&lt;p&gt;The local repositories are kept in &lt;code&gt;~/.emacs.d/straight/repos&lt;/code&gt;, and
the built packages are kept in &lt;code&gt;~/.emacs.d/straight/build&lt;/code&gt;. If you
have initialized &lt;code&gt;straight.el&lt;/code&gt; and loaded package &lt;code&gt;el-patch&lt;/code&gt;, then
your &lt;code&gt;~/.emacs.d/straight&lt;/code&gt; directory will look roughly like this (some
irrelevant details have been omitted for pedagogical purposes):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;straight
├── build
│   ├── el-patch
│   │   ├── el-patch-autoloads.el
│   │   ├── el-patch.el -&amp;gt; ~/.emacs.d/straight/repos/el-patch/el-patch.el
│   │   └── el-patch.elc
│   └── straight
│       ├── straight-autoloads.el
│       ├── straight.el -&amp;gt; ~/.emacs.d/straight/repos/straight.el/straight.el
│       └── straight.elc
└── repos
    ├── el-patch
    │   ├── CHANGELOG.md
    │   ├── LICENSE.md
    │   ├── README.md
    │   └── el-patch.el
    └── straight.el
        ├── LICENSE.md
        ├── Makefile
        ├── README.md
        ├── bootstrap.el
        ├── install.el
        └── straight.el
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, the package names are &lt;code&gt;el-patch&lt;/code&gt; and &lt;code&gt;straight&lt;/code&gt;. While
&lt;code&gt;el-patch&lt;/code&gt; is built from a local repository of the same name,
&lt;code&gt;straight&lt;/code&gt; is built from a local repository by the name &lt;code&gt;straight.el&lt;/code&gt;.
Also note that only &lt;code&gt;.el&lt;/code&gt; files are symlinked, since only they are
relevant to Emacs.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-where-do-repositories-come-from" class="anchor" aria-hidden="true" href="#where-do-repositories-come-from"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Where do repositories come from?&lt;/h3&gt;
&lt;p&gt;Local repositories provide a way to define packages without specifying
the contents of all of their files explicitly. But that's not helpful
without a higher-level way to define local repositories without
specifying the contents of all of &lt;em&gt;their&lt;/em&gt; files. In &lt;code&gt;straight.el&lt;/code&gt;,
local repositories are defined by two sources of information:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a &lt;em&gt;fetch recipe&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;the &lt;em&gt;version lockfiles&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The fetch recipe is, like the build recipe, a concept representing a
certain subset of the package's overall recipe. The situation is more
interesting here because &lt;code&gt;straight.el&lt;/code&gt; supports multiple
version-control backends. The version-control backend specified by the
fetch recipe is determined by the &lt;code&gt;:type&lt;/code&gt; directive (which defaults to
&lt;code&gt;straight-default-vc&lt;/code&gt;). Each version-control backend then accepts some
set of additional directives. For example, the &lt;code&gt;git&lt;/code&gt; backend accepts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:repo&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:host&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:branch&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:nonrecursive&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:fork&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If a local repository is not present, then its fetch recipe describes
how to obtain it. This is done using the &lt;code&gt;straight-vc-clone&lt;/code&gt; function,
which delegates to one of the backend implementations of the &lt;code&gt;clone&lt;/code&gt;
operation, according to &lt;code&gt;:type&lt;/code&gt;. (The option &lt;code&gt;:type built-in&lt;/code&gt; is a
special case that results in all version-control operations for the
package being ignored.)&lt;/p&gt;
&lt;p&gt;However, even with a particular repository source specified, there is
still the question of which version of the repository to use. This is
where the version lockfiles come in. When a local repository is
cloned, the version lockfiles are searched to see if there is a
particular commit specified for that local repository's name. If so,
that commit is checked out. (For the &lt;code&gt;git&lt;/code&gt; backend, commits are
40-character strings representing SHA-1 hashes, but the representation
of a commit identifier could be different across different backends.)&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;straight-freeze-versions&lt;/code&gt; and &lt;code&gt;straight-thaw-versions&lt;/code&gt; methods
also use backend-delegating methods; in this case, they are
&lt;code&gt;straight-vc-get-commit&lt;/code&gt; and &lt;code&gt;straight-vc-check-out-commit&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The fetch recipe and version lockfiles, together with the
configuration options for &lt;code&gt;straight.el&lt;/code&gt;, precisely define the state of
a local repository. Of course, you may make any changes you want to
the local repository. But this information defines a "canonical" state
that you may revert to at any time.&lt;/p&gt;
&lt;p&gt;When this information is combined with the build recipe, &lt;code&gt;straight.el&lt;/code&gt;
is able to construct canonical, universal versions of your Emacs
packages that will be the same everywhere and forever.&lt;/p&gt;
&lt;p&gt;Note that you do not have to provide fetch recipes or version
lockfiles. You may manage your local repositories manually, if you
wish, although this has obvious disadvantages in terms of
repeatability and maintainability.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-what-does-it-mean-to-load-a-package" class="anchor" aria-hidden="true" href="#what-does-it-mean-to-load-a-package"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;What does it mean to load a package?&lt;/h3&gt;
&lt;p&gt;A prerequisite to loading a package is making sure the package has
been built. After that is done, loading the package means adding its
directory to the load path and evaluating its autoloads file.&lt;/p&gt;
&lt;p&gt;Adding the directory to the load path means that you can use &lt;code&gt;require&lt;/code&gt;
to load the package's files. Note that &lt;code&gt;straight.el&lt;/code&gt; does not do this
for you, since loading packages immediately is usually not necessary
and it immensely slows down Emacs startup.&lt;/p&gt;
&lt;p&gt;Evaluating the autoloads file means that calling the functions that
are defined in the autoloads file will automatically &lt;code&gt;require&lt;/code&gt; the
files that define those functions. All modern packages define their
functions in autoloads and are designed to be loaded on-demand when
those functions are called. Antiquated packages may need you to
explicitly define autoloads, or to just &lt;code&gt;require&lt;/code&gt; the package right
away.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-where-do-recipes-come-from" class="anchor" aria-hidden="true" href="#where-do-recipes-come-from"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Where do recipes come from?&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;straight-use-package&lt;/code&gt; does not require an actual recipe. You can just
give it a package name, and it will look up the recipe. This is done
using &lt;em&gt;recipe repositories&lt;/em&gt;. Recipe repositories are set up as a
swappable backend system, much like the version-control backend
system.&lt;/p&gt;
&lt;p&gt;A recipe repository consists of four parts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a fetch recipe for the local repository (this will typically include
the &lt;code&gt;:no-build&lt;/code&gt; directive, since recipe repositories usually do not
need to be built)&lt;/li&gt;
&lt;li&gt;a function that, provided the local repository is already available,
returns a list of all packages that have recipes in the recipe
repository&lt;/li&gt;
&lt;li&gt;a function that, given a package name, returns the recipe for that
package, or nil if the recipe repository does not provide a recipe
for the package&lt;/li&gt;
&lt;li&gt;an entry in &lt;code&gt;straight-recipe-repositories&lt;/code&gt; indicating that the
recipe provided actually corresponds to a recipe repository
(otherwise it would just be a regular package)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that recipe repositories are implemented as regular packages!
This means that all the usual package management operations work on
them as well. It also means that you use &lt;code&gt;straight-use-package&lt;/code&gt; to
register them (although typically you will provide arguments to
&lt;code&gt;straight-use-package&lt;/code&gt; so that the recipe repository is only
registered, and not cloned until it is needed; see &lt;a href="#what-happens-when-i-call-straight-use-package"&gt;the section on
&lt;code&gt;straight-use-package&lt;/code&gt;&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;If you give &lt;code&gt;straight-use-package&lt;/code&gt; just a package name, then each
recipe repository in &lt;code&gt;straight-recipe-repositories&lt;/code&gt; is checked for a
recipe for that package. Once one is found, it is used. Otherwise, an
error is signaled (unless the package is built-in to Emacs, according
to &lt;code&gt;package.el&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Note that &lt;code&gt;straight.el&lt;/code&gt; uses its own recipe format which is similar,
but not identical, to the one used by MELPA. The recipe repository
backends abstract over the formatting differences in different recipe
sources to translate recipes into the uniform format used by
&lt;code&gt;straight.el&lt;/code&gt;. When you run &lt;code&gt;M-x straight-get-recipe&lt;/code&gt;, the translated
recipe is what is returned.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-what-happens-when-i-call-straight-use-package" class="anchor" aria-hidden="true" href="#what-happens-when-i-call-straight-use-package"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;What happens when I call &lt;code&gt;straight-use-package&lt;/code&gt;?&lt;/h3&gt;
&lt;p&gt;There are three actions that &lt;code&gt;straight-use-package&lt;/code&gt; can take:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Register a package's recipe with &lt;code&gt;straight.el&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Clone a package's local repository, if it is missing.&lt;/li&gt;
&lt;li&gt;Build a package, if it has been changed since the last time it was
built, and load it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These actions must be performed in order. Depending on the arguments
you pass to &lt;code&gt;straight-use-package&lt;/code&gt;, one, two, or all three may be
performed.&lt;/p&gt;
&lt;p&gt;The normal case is to do all three. The fetch recipe is only required
if the local repository is actually missing, but the build recipe is
always required.&lt;/p&gt;
&lt;p&gt;Deferred installation can be accomplished by telling
&lt;code&gt;straight-use-package&lt;/code&gt; to stop if the local repository is not already
available. The deferred installation can be triggered by invoking
&lt;code&gt;straight-use-package&lt;/code&gt; again, but telling it to go ahead and clone the
repository (this is the default behavior). Because
&lt;code&gt;straight-use-package&lt;/code&gt; already registered the package's recipe the
first time, you don't have to provide it again.&lt;/p&gt;
&lt;p&gt;In some extraordinary circumstances (such as when &lt;code&gt;straight.el&lt;/code&gt; is
bootstrapping its own installation), it may be desirable to clone a
package's local repository if it is missing, but to stop before
building and loading the package. This can also be done by
&lt;code&gt;straight-use-package&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-what-does-it-mean-to-register-a-package" class="anchor" aria-hidden="true" href="#what-does-it-mean-to-register-a-package"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;What does it mean to register a package?&lt;/h3&gt;
&lt;p&gt;Package registration is the first action taken by
&lt;code&gt;straight-use-package&lt;/code&gt;, before building and cloning. First, if only a
package name was provided to &lt;code&gt;straight-use-package&lt;/code&gt;, a recipe is
obtained from the configured recipe repositories. Next, the resulting
recipe is recorded in various caches.&lt;/p&gt;
&lt;p&gt;This is important, since it allows for several things to happen:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;if you later want to perform another operation on the package using
&lt;code&gt;straight.el&lt;/code&gt;, you do not need to provide the recipe again&lt;/li&gt;
&lt;li&gt;if you use a custom recipe for Package A, and Package B requires
Package A as a dependency, your custom recipe is remembered and
re-used when Package A is used as a dependency, to avoid conflicts.&lt;/li&gt;
&lt;li&gt;when multiple packages are built from the same local repository, and
you have specified a custom fetch recipe for one of those packages,
&lt;code&gt;straight.el&lt;/code&gt; can intelligently merge that fetch recipe into the
automatically retrieved recipes of dependencies, in order to avoid
conflicts.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; knows which packages you have installed, if you want
to perform interactive operations on them.&lt;/li&gt;
&lt;li&gt;if you accidentally provide two different recipes for the same
package, &lt;code&gt;straight.el&lt;/code&gt; can issue a helpful warning, since this may
lead to surprising behavior.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-how-does-straightel-know-when-to-rebuild-packages" class="anchor" aria-hidden="true" href="#how-does-straightel-know-when-to-rebuild-packages"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;How does &lt;code&gt;straight.el&lt;/code&gt; know when to rebuild packages?&lt;/h3&gt;
&lt;p&gt;When you request for &lt;code&gt;straight.el&lt;/code&gt; to load a package (using
&lt;code&gt;straight-use-package&lt;/code&gt;), it first checks if the package needs to be
rebuilt. This means that some of the files in its local repository
have been modified since the last time the package was built.
&lt;code&gt;straight.el&lt;/code&gt; uses an optimized &lt;code&gt;find(1)&lt;/code&gt; command to check for package
modifications, and it uses some caching mechanisms to perform bulk
&lt;code&gt;find(1)&lt;/code&gt; operations on multiple packages, to speed up these checks
(although it never performs optimizations that may result in erroneous
behavior).&lt;/p&gt;
&lt;p&gt;This check occurs during Emacs init, when your init-file makes calls
to &lt;code&gt;straight-use-package&lt;/code&gt;. You may notice a significant delay on the
first &lt;code&gt;straight-use-package&lt;/code&gt; call, because this is when &lt;code&gt;straight.el&lt;/code&gt;
performs a bulk &lt;code&gt;find(1)&lt;/code&gt; call and caches the results for later usage
(this speeds up init considerably). The total delay is likely to be on
the order of 100ms for a double-digit number of packages.&lt;/p&gt;
&lt;p&gt;The rebuild detection system is what allows for you to make changes to
packages whenever you would like, without performing any additional
operations.&lt;/p&gt;
&lt;p&gt;(Packages are also rebuilt when their recipes change, of course.)&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-how-does-straightel-know-what-packages-are-installed" class="anchor" aria-hidden="true" href="#how-does-straightel-know-what-packages-are-installed"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;How does &lt;code&gt;straight.el&lt;/code&gt; know what packages are installed?&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;straight.el&lt;/code&gt; does not require you to declare a central list of
packages anywhere, like Cask does. Instead, it determines what
packages are to be loaded implicitly, by your invocations of
&lt;code&gt;straight-use-package&lt;/code&gt; during Emacs initialization. Furthermore,
&lt;code&gt;straight.el&lt;/code&gt; allows you to install packages after initialization
using &lt;code&gt;M-x straight-install-package&lt;/code&gt; (or even by evaluating
&lt;code&gt;straight-use-package&lt;/code&gt; forms). However, &lt;code&gt;straight.el&lt;/code&gt; still provides
advanced features such as bulk package management and version locking.
This creates some interesting challenges which other package managers
do not have to deal with.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;straight.el&lt;/code&gt; solves these problems using a concept called
&lt;em&gt;transactions&lt;/em&gt;. The operation of the transaction system is mostly
transparent to the user, at least in recent versions of &lt;code&gt;straight.el&lt;/code&gt;.
Basically, it provides a way for &lt;code&gt;straight.el&lt;/code&gt; to keep track of what
happens within a single user operation (e.g. evaluate a buffer of
&lt;code&gt;straight-use-package&lt;/code&gt; calls, or load the init-file).&lt;/p&gt;
&lt;p&gt;&lt;code&gt;straight.el&lt;/code&gt; uses the transaction system to keep track of what
packages you request in your init-file. If you invoke
&lt;code&gt;straight-use-package&lt;/code&gt; interactively, then this invalidates that
information, since you have now requested a package that is not in
your init-file. For this reason, if you have invoked
&lt;code&gt;straight-use-package&lt;/code&gt; interactively, running &lt;code&gt;M-x straight-freeze-versions&lt;/code&gt; will prompt you to first reload your
init-file.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-comparison-to-other-package-managers" class="anchor" aria-hidden="true" href="#comparison-to-other-package-managers"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Comparison to other package managers&lt;/h2&gt;
&lt;p&gt;(Disclaimer: while I try to be as objective and comprehensive as
possible here, I'm obviously biased. Please submit corrections if I
have unfairly disparaged your favorite package manager!)&lt;/p&gt;
&lt;p&gt;There are many package managers for Emacs, ranging from simple scripts
to download files from EmacsWiki to full-featured package management
solutions like &lt;code&gt;straight.el&lt;/code&gt;. Here are the most feature-rich
alternatives to &lt;code&gt;straight.el&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Packages.html" rel="nofollow"&gt;&lt;code&gt;package.el&lt;/code&gt;&lt;/a&gt;: de facto standard, bundled with Emacs.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/quelpa/quelpa"&gt;Quelpa&lt;/a&gt;: allows you to use external sources like GitHub with
&lt;code&gt;package.el&lt;/code&gt;. Essentially a local &lt;a href="http://melpa.org/#/" rel="nofollow"&gt;MELPA&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/cask/cask"&gt;Cask&lt;/a&gt;: another &lt;code&gt;package.el&lt;/code&gt; wrapper. Specify your dependencies in a
&lt;code&gt;Cask&lt;/code&gt; file; can be used for project management or an Emacs
configuration.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dimitri/el-get"&gt;el-get&lt;/a&gt;: ridiculously OP in terms of how many different sources you
can pull packages from (&lt;code&gt;package.el&lt;/code&gt;, every known VCS, distro
package managers, &lt;code&gt;go get&lt;/code&gt;(!!)).&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/emacscollective/borg"&gt;Borg&lt;/a&gt;: assimilates packages as Git submodules into &lt;code&gt;.emacs.d&lt;/code&gt;,
relying on &lt;a href="https://emacsmirror.net/" rel="nofollow"&gt;Emacsmirror&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;"Screw package managers! I'll just handle it all myself!"&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-tldr-1" class="anchor" aria-hidden="true" href="#tldr-1"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TL;DR&lt;/h3&gt;
&lt;p&gt;Here is a summary of the main differences in philosophy between the
package managers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;package.el&lt;/code&gt; if you want package management to be as easy as
possible, and do not much care for installing packages from specific
sources, keeping track of their versions, or doing local development
on them.&lt;/li&gt;
&lt;li&gt;Use Quelpa if you like &lt;code&gt;package.el&lt;/code&gt; but really wish you could
specify the sources of your packages.&lt;/li&gt;
&lt;li&gt;Use Cask if you like &lt;code&gt;package.el&lt;/code&gt; but wish it came with some project
management tools, as well.&lt;/li&gt;
&lt;li&gt;Use el-get if you want to easily install packages from as many
different sources as possible.&lt;/li&gt;
&lt;li&gt;Use Borg if you like a more lightweight approach to package
management that leverages existing solutions, if contributing
changes to packages upstream is important to you, and if using Git
submodules isn't a deal-breaker.&lt;/li&gt;
&lt;li&gt;Use the manual approach if you need to contribute changes to a
package that is versioned in something other than Git.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;straight.el&lt;/code&gt; if you like reproducibility in your Emacs
configuration, you regularly contribute changes to packages
upstream, you think deferred installation is a really great idea, or
you are writing an Emacs configuration to be used by others.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And here is a brief list of the main reasons you might not want to use
&lt;code&gt;straight.el&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; is largely unusable if you do not have Git installed,
although it is still possible to use the package-building features
if you manage your repositories manually (you also cannot use the
magic bootstrap snippet, in that case). If you don't want to install
Git, you'll have to use &lt;code&gt;package.el&lt;/code&gt; or take the manual approach.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; is not built in to Emacs. If you want something that
will work right out of the box, you're stuck with &lt;code&gt;package.el&lt;/code&gt; or
the manual approach.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; takes a minute or two to update all your packages,
since it does not rely on a centralized server. If you want quick
update checking, you'll have to use &lt;code&gt;package.el&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; does not provide any user interface for package
management. For that, you'll have to use &lt;code&gt;package.el&lt;/code&gt;, el-get, Cask,
or Borg (which expects you to use &lt;a href="https://github.com/emacscollective/epkg"&gt;&lt;code&gt;epkg&lt;/code&gt;&lt;/a&gt; for browsing
packages).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; does not currently support using only stable versions
of packages (i.e. tagged revisions), although this is a &lt;a href="https://github.com/raxod502/straight.el/issues/31"&gt;planned
feature&lt;/a&gt;. If this is important to you, you probably want to go
with &lt;code&gt;package.el&lt;/code&gt; (with GNU ELPA and MELPA Stable), Cask, or Quelpa.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; does not currently support arbitrary build commands
like &lt;code&gt;make&lt;/code&gt;, although this is a &lt;a href="https://github.com/raxod502/straight.el/issues/72"&gt;planned feature&lt;/a&gt;. This feature
is supported by el-get and Borg.&lt;/li&gt;
&lt;li&gt;If you don't like having to modify your init-file to do package
management, then &lt;code&gt;straight.el&lt;/code&gt; is absolutely not for you. You want
&lt;code&gt;package.el&lt;/code&gt;, Quelpa, el-get, or Borg.&lt;/li&gt;
&lt;li&gt;If you really want to contribute changes to packages that are not
versioned in Git, then &lt;code&gt;straight.el&lt;/code&gt; will not help you. You'll have
to manage the package's repository manually. Unfortunately, there is
no existing package manager that supports both non-Git
version-control systems and contributing changes upstream. You'll
have to go with the manual approach.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; does not provide project management tools. It is a
package manager. If you want project management tools, check out
Cask.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; is quite new and moving fast. Things might break. The
other package managers can generally be ranked as follows, from most
active to least active: el-get, Quelpa, Borg, Cask, &lt;code&gt;package.el&lt;/code&gt;
(glacial).&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-comparison-to-packageel" class="anchor" aria-hidden="true" href="#comparison-to-packageel"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Comparison to &lt;code&gt;package.el&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;package.el&lt;/code&gt; downloads pre-built packages from central servers using
a special (undocumented?) HTTP protocol, while &lt;code&gt;straight.el&lt;/code&gt; clones
Git (or other) repositories and builds packages locally.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a id="user-content-advantages-of-straightel" class="anchor" aria-hidden="true" href="#advantages-of-straightel"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Advantages of &lt;code&gt;straight.el&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; allows you to install a package from any branch of any
Git repository. &lt;code&gt;package.el&lt;/code&gt; only allows you to install a package
from a &lt;code&gt;package.el&lt;/code&gt;-compliant central server.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; allows you to check out any Git revision of any
package. &lt;code&gt;package.el&lt;/code&gt; only allows you to install the latest version,
and there is no way to downgrade.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; supports Emacsmirror, while &lt;code&gt;package.el&lt;/code&gt; does not.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; uses your init-file as the sole source of truth for
package operations. &lt;code&gt;package.el&lt;/code&gt; loads every package you ever
installed at startup, even if some of those packages are no longer
referenced by your init-file.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; supports 100% reproducibility for your Emacs packages
with version lockfiles. &lt;code&gt;package.el&lt;/code&gt; cannot provide reproducibility
for the set of packages installed, the central servers they were
installed from, or the versions in use.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; allows you to make arbitrary changes to your packages
locally. While it is possible to make local changes to &lt;code&gt;package.el&lt;/code&gt;
packages, these changes cannot be version-controlled and they will
be silently overwritten whenever &lt;code&gt;package.el&lt;/code&gt; performs an update.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; allows you to perform arbitrary version-control
operations on your package's Git repositories, including
contributing changes upstream. &lt;code&gt;straight.el&lt;/code&gt; has explicit support
for specifying both an upstream and a fork for a package.
Contributing changes upstream with &lt;code&gt;package.el&lt;/code&gt; is impossible.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; is designed with &lt;code&gt;emacs -Q&lt;/code&gt; bug reports in mind.
&lt;code&gt;package.el&lt;/code&gt; is unsuitable for minimal bug reproductions, since it
automatically loads all of your packages on any package operation,
even in &lt;code&gt;emacs -Q&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; operates quietly when all is going well. &lt;code&gt;package.el&lt;/code&gt;
displays all messages, errors, and warnings that come from
byte-compilation and autoload generation.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; considers modifying the user's init-file extremely
uncouth. &lt;code&gt;package.el&lt;/code&gt; aggressively inserts a call to
&lt;code&gt;package-initialize&lt;/code&gt; into the init-file if it is not already
present, whenever any package management operation is performed.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; has a profile system that allows users of someone
else's Emacs configuration to manage an additional subset of
packages, or to override upstream package configuration, without
forking the upstream. &lt;code&gt;package.el&lt;/code&gt; has no such concept.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; is developed openly on GitHub, using a modern &lt;a href="https://github.com/raxod502/straight.el/issues"&gt;issue
tracker&lt;/a&gt; and continuous integration from &lt;a href="https://travis-ci.org/raxod502/straight.el" rel="nofollow"&gt;Travis
CI&lt;/a&gt;. It welcomes contributions of any type.
&lt;code&gt;straight.el&lt;/code&gt; is licensed under the permissive MIT license and does
not require a copyright assignment. &lt;code&gt;straight.el&lt;/code&gt; is developed
actively and has explicit support for installing development
versions of itself, as well as for contributing upstream changes.
&lt;code&gt;package.el&lt;/code&gt; is maintained as a part of Emacs core, meaning that the
contribution process is poorly documented and discouraging. Releases
of &lt;code&gt;package.el&lt;/code&gt; coincide with releases of Emacs, which are
infrequent and inflexible. There is no issue tracker specifically
for &lt;code&gt;package.el&lt;/code&gt;, only the Emacs bug tracker and the emacs-devel
mailing list. Contributing to &lt;code&gt;package.el&lt;/code&gt; requires a
poorly-documented, cumbersome copyright assignment process and is
done by submitting patches to an antiquated mailing list,
unsupported by modern code review tooling or continuous integration.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a id="user-content-advantages-of-packageel" class="anchor" aria-hidden="true" href="#advantages-of-packageel"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Advantages of &lt;code&gt;package.el&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;package.el&lt;/code&gt; does not require that you have Git installed, since the
central server deals with where the packages originally came from.
&lt;code&gt;straight.el&lt;/code&gt; cannot be used at all without Git.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;package.el&lt;/code&gt; is built in to Emacs and does not require additional
configuration to get started with. &lt;code&gt;straight.el&lt;/code&gt; requires the use of
a 10-line bootstrap snippet in your init-file.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;package.el&lt;/code&gt; can perform bulk package updates more quickly since it
relies on central servers.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;package.el&lt;/code&gt; has a user interface for package management that also
displays package metadata. &lt;code&gt;straight.el&lt;/code&gt; has no user interface for
package management; any UI is provided by the user's
&lt;code&gt;completing-read&lt;/code&gt; framework.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;package.el&lt;/code&gt; does not require you to touch your init-file to install
packages, while &lt;code&gt;straight.el&lt;/code&gt; absolutely refuses to permanently
install a package without an explicit reference to it in your
init-file (although this may be considered an advantage, depending
on your perspective).&lt;/li&gt;
&lt;li&gt;Using MELPA Stable, &lt;code&gt;package.el&lt;/code&gt; can install only stable versions of
packages. By default, &lt;code&gt;package.el&lt;/code&gt; also installs only stable
versions of packages from GNU ELPA. These modes of operation are
unsupported by &lt;code&gt;straight.el&lt;/code&gt; at this time, although this is a
&lt;a href="https://github.com/raxod502/straight.el/issues/31"&gt;planned feature&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a id="user-content-additional-notes" class="anchor" aria-hidden="true" href="#additional-notes"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Additional notes&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;package.el&lt;/code&gt; and &lt;code&gt;straight.el&lt;/code&gt; usually take approximately the same
time to install packages, despite the fact that &lt;code&gt;straight.el&lt;/code&gt; is
cloning entire Git repositories. This is because network latency and
byte-compilation are the dominant factors.&lt;/li&gt;
&lt;li&gt;Some &lt;code&gt;package.el&lt;/code&gt; servers build packages from non-Git upstreams.
&lt;code&gt;package.el&lt;/code&gt; can install these packages, while &lt;code&gt;straight.el&lt;/code&gt; cannot.
However, since &lt;code&gt;package.el&lt;/code&gt; has no version-control support, this is
more or less equivalent to installing those packages from the
&lt;a href="https://emacsmirror.net/" rel="nofollow"&gt;Emacsmirror&lt;/a&gt;, which &lt;code&gt;straight.el&lt;/code&gt; can do by default.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-comparison-to-quelpa" class="anchor" aria-hidden="true" href="#comparison-to-quelpa"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Comparison to Quelpa&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Quelpa allows for fetching packages from arbitrary sources and
building them into a format that can be installed by &lt;code&gt;package.el&lt;/code&gt;.
&lt;code&gt;straight.el&lt;/code&gt; has a philosophy which is fundamentally incompatible
with &lt;code&gt;package.el&lt;/code&gt;, and non-compatibility with &lt;code&gt;package.el&lt;/code&gt; is one of
its design goals.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a id="user-content-advantages-of-straightel-1" class="anchor" aria-hidden="true" href="#advantages-of-straightel-1"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Advantages of &lt;code&gt;straight.el&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; has out-of-the-box compatibility with MELPA, GNU ELPA,
and Emacsmirror, while Quelpa only has support for MELPA. To use GNU
ELPA, you must drop down to &lt;code&gt;package.el&lt;/code&gt;. &lt;a href="https://emacsmirror.net/" rel="nofollow"&gt;Emacsmirror&lt;/a&gt; is not
supported by default, although it is easy to specify an Emacsmirror
repository in a recipe. While Quelpa allows you to specify custom
recipe folders, it does not have support for cloning these folders
automatically from version control, nor for generating the recipes
in any way other than copying them literally from files.
&lt;code&gt;straight.el&lt;/code&gt; allows you full flexibility in this regard.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; has integrated support for selecting particular Git
revisions of packages. This process is more manual in Quelpa, as it
requires placing the commit hash into the recipe, which disables
updates.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; uses your init-file as the sole source of truth for
package operations. Since Quelpa is based on &lt;code&gt;package.el&lt;/code&gt;, it also
loads every package you ever installed at startup, even if those
packages are no longer referenced by your init-file. Furthermore,
there is an additional caching layer, so that deleting a package
from the &lt;code&gt;package.el&lt;/code&gt; interface and removing it from your init-file
still does not actually delete it.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; supports 100% reproducibility for your Emacs packages
with version lockfiles. Quelpa can theoretically provide some
measure of reproducibility, but this requires significant manual
effort since all packages are not associated with specific revisions
by default, nor is the revision of MELPA saved anywhere.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; allows you to make arbitrary changes to your packages
locally. While it is possible to make local changes to Quelpa
packages, there are two places to do so: the built package, which is
the default destination of &lt;code&gt;find-function&lt;/code&gt;, and the original
repository. Changes to the former are not version-controlled and
will be silently overwritten by &lt;code&gt;package.el&lt;/code&gt; operations, while
changes to the latter will be silently overwritten by Quelpa
operations.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; has explicit support for configuring both an upstream
repository and a fork for the same package. Quelpa does not have
such a concept.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; allows you complete control over how your repositories
are managed, and the default behavior is to draw all packages
versioned in a single repository from a single copy of that
repository. Quelpa is hardcoded to require a separate repository for
each package, so that installing Magit requires three copies of the
Magit repository.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; builds packages using symlinks, meaning that
&lt;code&gt;find-function&lt;/code&gt; works as expected. Quelpa builds packages by
copying, a feature inherited from MELPA. This means that
&lt;code&gt;find-function&lt;/code&gt; brings you to the built package, instead of the
actual repository, which is not version-controlled and will be
overwritten whenever &lt;code&gt;package.el&lt;/code&gt; performs an update.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; allows you to perform arbitrary version-control
operations on your package's Git repositories. Quelpa allows this,
but all local changes will be silently overridden whenever Quelpa
performs an update.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; is designed with &lt;code&gt;emacs -Q&lt;/code&gt; bug reports in mind. Since
Quelpa is based on &lt;code&gt;package.el&lt;/code&gt;, it is also unsuitable for minimal
bug reproductions, since it automatically loads all of your packages
on any package operation, even in &lt;code&gt;emacs -Q&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; operates quietly when all is going well. Since Quelpa
is based on &lt;code&gt;package.el&lt;/code&gt;, it displays all messages, errors, and
warnings that come from byte-compilation and autoload generation. It
also displays additional messages while cloning Git repositories,
downloading files, and building packages from their repositories
into &lt;code&gt;package.el&lt;/code&gt; format.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; does not modify your init-file. Since Quelpa is based
on &lt;code&gt;package.el&lt;/code&gt;, it inherits the behavior of aggressively inserting
a call to &lt;code&gt;package-initialize&lt;/code&gt; into your init-file on any package
management operation.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; has a profile system that allows users of someone
else's Emacs configuration to manage an additional subset of
packages, or to override upstream package configuration, without
forking the upstream. Quelpa has no such concept.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a id="user-content-advantages-of-quelpa" class="anchor" aria-hidden="true" href="#advantages-of-quelpa"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Advantages of Quelpa&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Quelpa supports all the version-control systems supported by MELPA,
which is to say almost every commonly and uncommonly used VCS.
&lt;code&gt;straight.el&lt;/code&gt; only supports Git, although it is designed to support
other version-control backends.&lt;/li&gt;
&lt;li&gt;Quelpa allows for installing only stable versions of packages, from
any source. This mode of operation is unsupported by &lt;code&gt;straight.el&lt;/code&gt;,
although it is a &lt;a href="https://github.com/raxod502/straight.el/issues/31"&gt;planned feature&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Since Quelpa is based on &lt;code&gt;package.el&lt;/code&gt;, it inherits a user interface
for package management that also displays package metadata.
&lt;code&gt;straight.el&lt;/code&gt; has no such interface.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a id="user-content-additional-notes-1" class="anchor" aria-hidden="true" href="#additional-notes-1"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Additional notes&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; and Quelpa both allow you to manage your package's
local repositories manually, if you wish.&lt;/li&gt;
&lt;li&gt;In principle, &lt;code&gt;straight.el&lt;/code&gt; and Quelpa have identical package
installation times, since they are performing the same operations.
In practice, Quelpa is slightly slower since it builds packages by
copying rather than symlinking, and it clones multiple copies of the
same Git repository when multiple packages are built from it.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; encourages you to keep a tight handle on your package
versions by default. Quelpa encourages you to stick to the latest
versions of your packages, and to upgrade them automatically.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-comparison-to-cask" class="anchor" aria-hidden="true" href="#comparison-to-cask"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Comparison to Cask&lt;/h3&gt;
&lt;p&gt;I have not used Cask extensively, so please feel especially free to
offer corrections for this section.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cask installs packages using the &lt;code&gt;package.el&lt;/code&gt; protocol, based on a
&lt;code&gt;Cask&lt;/code&gt; file written in the Cask DSL. &lt;code&gt;straight.el&lt;/code&gt; eschews
&lt;code&gt;package.el&lt;/code&gt; entirely, and clones packages from source based on how
you invoke &lt;code&gt;straight-use-package&lt;/code&gt; in your init-file.&lt;/li&gt;
&lt;li&gt;Cask focuses more on being a build manager, like Maven or Leiningen,
while &lt;code&gt;straight.el&lt;/code&gt; focuses &lt;em&gt;exclusively&lt;/em&gt; on being a package
manager.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a id="user-content-advantages-of-straightel-2" class="anchor" aria-hidden="true" href="#advantages-of-straightel-2"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Advantages of &lt;code&gt;straight.el&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; has out-of-the-box compatibility with Emacsmirror,
while Cask only supports &lt;code&gt;package.el&lt;/code&gt;-compliant repositories.
However, it is easy to specify an Emacsmirror repository in a
recipe. Cask does not support custom package sources. &lt;code&gt;straight.el&lt;/code&gt;
supports MELPA, GNU ELPA, and Emacsmirror, and allows you to add any
other sources you would like.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; has integrated support for selecting particular Git
revisions of packages. This process is more manual in Cask, as it
requires placing the commit hash into the recipe, which disables
updates.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; uses your init-file as the sole source of truth for
package operations. Since Cask is based on &lt;code&gt;package.el&lt;/code&gt;, it loads
every package you ever installed at startup, even if some of those
packages are no longer referenced by your &lt;code&gt;Cask&lt;/code&gt; file.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; determines your package management configuration
implicitly by detecting how you call &lt;code&gt;straight-use-package&lt;/code&gt; in your
init-file and making the appropriate changes immediately. Cask
requires manual intervention (for example, issuing a &lt;code&gt;cask install&lt;/code&gt;
command when you have updated your &lt;code&gt;Cask&lt;/code&gt; file). However, both
&lt;code&gt;straight.el&lt;/code&gt; and Cask can be considered declarative package
managers.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; supports 100% reproducibility for your Emacs packages
with version lockfiles. Cask can theoretically provide some measure
of reproducibility, but this requires significant manual effort
since all packages are not associated with specific revisions by
default, nor is the revision of Cask saved anywhere.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; allows you to make arbitrary changes to your packages
locally. While it is possible to make local changes to Cask
packages, these will not be version-controlled and they will be
silently overwritten or shadowed when Cask performs an update.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; allows you to perform arbitrary version-control
operations on your package's Git repositories, including
contributing changes upstream. &lt;code&gt;straight.el&lt;/code&gt; has explicit support
for specifying both an upstream and a fork for a package.
Contributing changes upstream with Cask is impossible.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; is designed with &lt;code&gt;emacs -Q&lt;/code&gt; bug reports in mind. Cask
appears to be unsuitable for minimal bug reproductions, since there
does not appear to be a straightforward way to load a single
package, without loading all other packages configured in your
&lt;code&gt;Cask&lt;/code&gt; file.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; operates quietly when all is going well. Since Cask is
based on &lt;code&gt;package.el&lt;/code&gt;, it displays all messages, errors, and
warnings that come from byte-compilation and autoload generation.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; has a profile system that allows users of someone
else's Emacs configuration to manage an additional subset of
packages, or to override upstream package configuration, without
forking the upstream. Cask has no such concept.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a id="user-content-advantages-of-cask" class="anchor" aria-hidden="true" href="#advantages-of-cask"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Advantages of Cask&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Cask provides a useful toolbox of operations for project management,
which are completely absent from &lt;code&gt;straight.el&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Since Cask is based on &lt;code&gt;package.el&lt;/code&gt;, it does not require that you
have Git installed. (It does require Python, however.) &lt;code&gt;straight.el&lt;/code&gt;
is mostly unusable without Git.&lt;/li&gt;
&lt;li&gt;Since Cask is based on &lt;code&gt;package.el&lt;/code&gt;, it can perform bulk package
updates more quickly than &lt;code&gt;straight.el&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Since Cask is based on &lt;code&gt;package.el&lt;/code&gt;, it inherits a user interface
for package management that also displays package metadata.&lt;/li&gt;
&lt;li&gt;Since Cask is based on &lt;code&gt;package.el&lt;/code&gt;, you can install packages
without editing a file manually, although this rather defeats the
entire purpose of using Cask instead of &lt;code&gt;package.el&lt;/code&gt;. &lt;code&gt;straight.el&lt;/code&gt;
absolutely refuses to permanently install a package without an
explicit reference to it in your init-file (although this may be
considered an advantage, depending on your perspective).&lt;/li&gt;
&lt;li&gt;Using MELPA Stable, Cask can install only stable versions of
packages. By default, Cask also installs only stable versions of
packages from GNU ELPA. These modes of operation are unsupported by
&lt;code&gt;straight.el&lt;/code&gt; at this time, although this is a &lt;a href="https://github.com/raxod502/straight.el/issues/31"&gt;planned
feature&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Cask supports more version-control systems than &lt;code&gt;straight.el&lt;/code&gt; (which
only supports Git).&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-comparison-to-el-get" class="anchor" aria-hidden="true" href="#comparison-to-el-get"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Comparison to el-get&lt;/h3&gt;
&lt;p&gt;I have not used el-get extensively, so please feel especially free to
offer corrections for this section.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Both el-get and &lt;code&gt;straight.el&lt;/code&gt; implement their own package management
abstractions instead of delegating to &lt;code&gt;package.el&lt;/code&gt;. However:
&lt;ul&gt;
&lt;li&gt;el-get goes the route of adding as many package sources as
possible (e.g. &lt;code&gt;package.el&lt;/code&gt;, many different version-control
systems, various specific websites, and even system package
managers) so that packages can be used very easily.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; only supports Git and in doing so is able to
provide more advanced package management features.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a id="user-content-advantages-of-straightel-3" class="anchor" aria-hidden="true" href="#advantages-of-straightel-3"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Advantages of &lt;code&gt;straight.el&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; uses your init-file as the sole source of truth for
package operations. el-get has additional metadata stored outside
the init-file, although specifying all packages in your init-file is
a supported mode of operation.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; supports 100% reproducibility for your Emacs packages
with version lockfiles. el-get can theoretically provide some
measure of reproducibility, but this requires significant manual
effort since all packages are not associated with specific revisions
by default, nor is the revision of el-get saved anywhere.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; allows you to make arbitrary changes to your packages
locally, and conflicts during updates are presented to the user and
resolved interactively. While it is possible to make local changes
to el-get packages, the el-get manual warns that such changes may
break the update mechanism.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; has explicit support for configuring both an upstream
repository and a fork for the same package. el-get does not have
such a concept.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; allows you to perform arbitrary version-control
operartions on your package's Git repositories. el-get allows this,
but local changes will be overwritten when el-get performs an
update.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; provides a suite of powerful interactive workflows for
performing bulk operations on your package's Git repositories.
el-get only allows you to install, uninstall, and update packages.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; operates quietly when all is going well. el-get
reports its progress verbosely.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; has a profile system that allows users of someone
else's Emacs configuration to manage an additional subset of
packages, or to override upstream package configuration, without
forking the upstream. el-get has no such concept.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a id="user-content-advantages-of-el-get" class="anchor" aria-hidden="true" href="#advantages-of-el-get"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Advantages of el-get&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;el-get supports virtually all known version-control systems, as well
as system package managers, EmacsWiki, arbitrary HTTP, and even &lt;code&gt;go get&lt;/code&gt;. &lt;code&gt;straight.el&lt;/code&gt; supports only Git, although it does allow you to
manage your local repositories manually if you would like.&lt;/li&gt;
&lt;li&gt;el-get has been around since 2010 and is on its fifth major version,
whereas &lt;code&gt;straight.el&lt;/code&gt; was created in January 2017 and is only now
approaching a 1.0 release. Clearly, el-get is more stable, although
despite its recency &lt;code&gt;straight.el&lt;/code&gt; is already almost 50% of the size
of el-get, by the line count. Both package managers are actively
maintained.&lt;/li&gt;
&lt;li&gt;el-get has a recipe format which is several orders of magnitude more
powerful than that of &lt;code&gt;straight.el&lt;/code&gt;, since it supports many more
package sources that can be configured and since it allows for a
more complex build process.&lt;/li&gt;
&lt;li&gt;el-get provides a number of features for running per-package
initialization and setup code, including pulling that code from
arbitrary sources. &lt;code&gt;straight.el&lt;/code&gt; does not support this and expects
you to use a dedicated tool like &lt;a href="https://github.com/jwiegley/use-package"&gt;&lt;code&gt;use-package&lt;/code&gt;&lt;/a&gt; (with
which integration is built in) for that purpose.&lt;/li&gt;
&lt;li&gt;el-get has a user interface for package management that also
displays package metadata, similarly to &lt;code&gt;package.el&lt;/code&gt;. &lt;code&gt;straight.el&lt;/code&gt;
has no user interface for package management; any UI is provided by
the user's &lt;code&gt;completing-read&lt;/code&gt; framework.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-comparison-to-borg" class="anchor" aria-hidden="true" href="#comparison-to-borg"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Comparison to Borg&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Borg and &lt;code&gt;straight.el&lt;/code&gt; are perhaps the two most similar package
managers on this list. The difference is that Borg is very minimal
and expects you to complement it with other tools such as &lt;a href="https://magit.vc/" rel="nofollow"&gt;Magit&lt;/a&gt;,
&lt;a href="https://github.com/emacscollective/epkg"&gt;epkg&lt;/a&gt;, &lt;a href="https://github.com/jwiegley/use-package"&gt;&lt;code&gt;use-package&lt;/code&gt;&lt;/a&gt;, and &lt;a href="https://github.com/tarsius/auto-compile"&gt;auto-compile&lt;/a&gt;. On the
other hand, &lt;code&gt;straight.el&lt;/code&gt; aspires to be a one-stop package
management solution, although it does not try to replace dedicated
version-control packages (Magit) or dedicated package
&lt;em&gt;configuration&lt;/em&gt; packages (&lt;code&gt;use-package&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Borg uses Git submodules, while &lt;code&gt;straight.el&lt;/code&gt; uses independently
managed Git repositories.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a id="user-content-advantages-of-straightel-4" class="anchor" aria-hidden="true" href="#advantages-of-straightel-4"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Advantages of &lt;code&gt;straight.el&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; supports MELPA, GNU ELPA, Emacsmirror, and custom
recipe sources. Borg only supports Emacsmirror and custom recipe
sources. However, as the Emacsmirror is a near-complete superset of
both GNU ELPA and MELPA, this does not necessarily mean you have
access to more packages: it just means you benefit from the recipe
maintenance efforts of the MELPA team and the Emacsmirror team,
rather than only the latter.&lt;/li&gt;
&lt;li&gt;Borg, even when combined with related tools, do not allow for the
kind of massive interactive repository management provided by
&lt;code&gt;straight.el&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; supports deferred and conditional installation. This
is not supported by Borg, although it could in principle be
implemented via lazy cloning of submodules.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; provides an API designed for other version-control
backends to be added in future. Borg is inextricably tied to Git.&lt;/li&gt;
&lt;li&gt;The interface for Git submodules has a number of sharp edges.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; provides dependency management. This is a manual
process in Borg.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; provides mechanisms for updating your packages. This
is a manual process in Borg.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; is configured solely by how you use in your init-file.
Configuring Borg requires customizing &lt;code&gt;~/.emacs.d/.gitmodules&lt;/code&gt;,
which means (for example) that you cannot generate recipes
dynamically. (However, the handling of configuration is
&lt;a href="https://github.com/raxod502/straight.el/issues/95#issuecomment-316379495"&gt;planned&lt;/a&gt; to be improved in a future release.)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; has a profile system that allows users of someone
else's Emacs configuration to manage an additional subset of
packages, or to override upstream package configuration, without
forking the upstream. Borg has no such concept.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a id="user-content-advantages-of-borg" class="anchor" aria-hidden="true" href="#advantages-of-borg"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Advantages of Borg&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Borg does a heck of a lot less magic, so if you want a solution with
simple implementation details, &lt;code&gt;straight.el&lt;/code&gt; may not be for you.
(But see the developer manual and docstrings, first.)&lt;/li&gt;
&lt;li&gt;Borg supports arbitrary build commands; &lt;code&gt;straight.el&lt;/code&gt; does not
(although this is a &lt;a href="https://github.com/raxod502/straight.el/issues/72"&gt;planned feature&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-comparison-to-the-manual-approach" class="anchor" aria-hidden="true" href="#comparison-to-the-manual-approach"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Comparison to the manual approach&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The manual approach is to download packages yourself and put them on
your &lt;code&gt;load-path&lt;/code&gt;. &lt;code&gt;straight.el&lt;/code&gt; is more or less what you get when
you take the manual approach, think very hard about the best way to
do everything, and then automate all of it.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a id="user-content-advantages-of-straightel-5" class="anchor" aria-hidden="true" href="#advantages-of-straightel-5"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Advantages of &lt;code&gt;straight.el&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; figures out where to clone your packages from for you.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; byte-compiles your packages for you and generates
their autoloads automatically.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; frees you from needing to manually recompile and
regenerate autoloads.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; keeps track of dependencies for you.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; provides tools to manage all your packages in bulk,
which would otherwise be a long, tedious process.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; allows you to get reproducibility for your
configuration without needing to keep all of your packages under
version control.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; (when used with &lt;a href="https://github.com/jwiegley/use-package"&gt;&lt;code&gt;use-package&lt;/code&gt;&lt;/a&gt;)
automates the complex process of deferred installation.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; links packages into a separate build directories.
Running packages directly from their repositories has a number of
problems, including:
&lt;ul&gt;
&lt;li&gt;making it impossible to run only one package, if others are
provided in the same repository.&lt;/li&gt;
&lt;li&gt;making your working directory dirty when the package author
forgot to add their build artifacts like &lt;code&gt;*.elc&lt;/code&gt; and autoload
files to the &lt;code&gt;.gitignore&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;instantly losing compatibility with MELPA recipes.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; offers you a single entry point to install only a
single package in isolation, for a minimal bug reproduction. With
the manual approach this would be more complicated, especially if
the package has dependencies.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; frees you from needing to think about package
management, since I already did all the thinking to figure how best
to design everything.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a id="user-content-advantages-of-the-manual-approach" class="anchor" aria-hidden="true" href="#advantages-of-the-manual-approach"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Advantages of the manual approach&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;No dependencies.&lt;/li&gt;
&lt;li&gt;You learn a lot, if you don't give up first.&lt;/li&gt;
&lt;li&gt;You might end up writing a package manager (case in point).&lt;/li&gt;
&lt;li&gt;This is the only way to deal with packages that have non-Git
upstreams which you need to contribute changes to. (However, you can
always use the manual approach for one package and &lt;code&gt;straight.el&lt;/code&gt; for
the rest. Or you can just eschew &lt;code&gt;straight.el&lt;/code&gt;'s version-control
support for that package, and use it only for building the package.)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-user-manual" class="anchor" aria-hidden="true" href="#user-manual"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;User manual&lt;/h2&gt;
&lt;p&gt;This section tells you everything you need to know about the
user-facing features of &lt;code&gt;straight.el&lt;/code&gt;. For implementation details, see
the &lt;a href="#developer-manual"&gt;developer manual&lt;/a&gt;. It may also be helpful to get some
perspective on the overarching concepts of &lt;code&gt;straight.el&lt;/code&gt; from the
&lt;a href="#conceptual-overview"&gt;conceptual overview&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-bootstrapping-straightel" class="anchor" aria-hidden="true" href="#bootstrapping-straightel"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Bootstrapping &lt;code&gt;straight.el&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;In order to use &lt;code&gt;straight.el&lt;/code&gt;, you will need to somehow get it loaded
into Emacs. (This is easy for &lt;code&gt;package.el&lt;/code&gt;, since &lt;code&gt;package.el&lt;/code&gt; is
built in to Emacs. &lt;code&gt;straight.el&lt;/code&gt; must work a little harder.)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;straight.el&lt;/code&gt; comes with a file to do just this, &lt;code&gt;bootstrap.el&lt;/code&gt;. All
you need to do is load that file. You can do this with &lt;code&gt;M-x load-file&lt;/code&gt;
or by a call to &lt;code&gt;load&lt;/code&gt; in your init-file. However, there is an obvious
shortcoming: &lt;code&gt;bootstrap.el&lt;/code&gt; will only be available once &lt;code&gt;straight.el&lt;/code&gt;
is already installed.&lt;/p&gt;
&lt;p&gt;You could just invoke &lt;code&gt;git clone&lt;/code&gt; from your init-file, if
&lt;code&gt;straight.el&lt;/code&gt; is not installed, but then you would have to manually
take care of selecting the correct branch, parsing your version
lockfile to check out the right revision, and so on. Instead, you can
just use this snippet, which uses a copious amount of magic to take
care of all these details for you:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Despite the reference to &lt;code&gt;develop&lt;/code&gt;, this snippet actually installs
from the &lt;code&gt;master&lt;/code&gt; branch by default, just like every other package.
Furthermore, the correct revision of &lt;code&gt;straight.el&lt;/code&gt; is checked out, if
you have one specified in your lockfile. Even better, you can
&lt;a href="#overriding-the-recipe-for-straightel"&gt;override the recipe for &lt;code&gt;straight.el&lt;/code&gt;&lt;/a&gt;,
just like for any other package.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-installing-packages-programmatically" class="anchor" aria-hidden="true" href="#installing-packages-programmatically"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installing packages programmatically&lt;/h3&gt;
&lt;p&gt;The primary entry point to &lt;code&gt;straight.el&lt;/code&gt; is the &lt;code&gt;straight-use-package&lt;/code&gt;
function. It can be invoked interactively (for installing a package
temporarily) or programmatically (for installing a package
permanently). This section covers the programmatic usage; see
&lt;a href="#interactive-usage"&gt;later&lt;/a&gt; for interactive usage.&lt;/p&gt;
&lt;p&gt;Here is the basic usage of &lt;code&gt;straight-use-package&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(straight-use-package 'el-patch)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will ensure that the package &lt;code&gt;el-patch&lt;/code&gt; is installed and loaded.
(Note that &lt;code&gt;straight-use-package&lt;/code&gt; takes a symbol, not a string, for
the name of the package.) Precisely, this is what happens:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If the local Git repository for &lt;code&gt;el-patch&lt;/code&gt; is not available, it is
cloned, and the appropriate revision is checked out (if one is
specified in your version lockfiles).&lt;/li&gt;
&lt;li&gt;If the local Git repository has been modified since the last time
the package was built, it is rebuilt. This means:
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;.el&lt;/code&gt; files are symlinked into a separate directory to
isolate them from other, irrelevant files.&lt;/li&gt;
&lt;li&gt;The main package file is checked for dependencies, which are
installed recursively if necessary using &lt;code&gt;straight-use-package&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;.el&lt;/code&gt; files are byte-compiled.&lt;/li&gt;
&lt;li&gt;Autoloads are extracted from the &lt;code&gt;.el&lt;/code&gt; files and saved into a
separate file.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The package's directory is added to Emacs' &lt;code&gt;load-path&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The package's autoloads are evaluated.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Package authors should note that &lt;code&gt;straight.el&lt;/code&gt; checks for dependencies
that are specified in the &lt;a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Packaging-Basics.html" rel="nofollow"&gt;&lt;code&gt;package.el&lt;/code&gt; format&lt;/a&gt;. To
spare you reading that documentation, this is either a
&lt;code&gt;Package-Requires&lt;/code&gt; header in &lt;code&gt;PACKAGENAME.el&lt;/code&gt;, or an argument to a
&lt;code&gt;define-package&lt;/code&gt; invocation in &lt;code&gt;PACKAGENAME-pkg.el&lt;/code&gt;. Despite the &lt;a href="#advantages-of-straightel"&gt;many
shortcomings&lt;/a&gt; of &lt;code&gt;package.el&lt;/code&gt;, it
has done a good job of creating a standardized format for dependency
declarations.&lt;/p&gt;
&lt;p&gt;There is one exception to the above statement: not all entries
specified in the &lt;code&gt;Package-Requires&lt;/code&gt; header necessarily correspond to
packages. For example, specifying a minimum Emacs version for a
package is done by depending on the &lt;code&gt;emacs&lt;/code&gt; pseudo-package. Such
packages are simply ignored by &lt;code&gt;straight.el&lt;/code&gt;, using the variable
&lt;code&gt;straight-built-in-pseudo-packages&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Note that loading a package does not entail invoking &lt;code&gt;require&lt;/code&gt; on any
of its features. If you wish to actually load the files of the
package, you need to do this separately. This is because most packages
do not need to be loaded immediately, and are better served by the
autoload system.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-installing-with-a-custom-recipe" class="anchor" aria-hidden="true" href="#installing-with-a-custom-recipe"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installing with a custom recipe&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;straight-use-package&lt;/code&gt; can also take a list instead of a symbol. In
that case, the first member of the list is a symbol giving the package
name, and the remainder of the list is a &lt;a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Property-Lists.html" rel="nofollow"&gt;property
list&lt;/a&gt; providing information about how to install and
build the package. Here is an example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(straight-use-package
 '(el-patch :type git :host github :repo "raxod502/el-patch"
            :fork (:host github
                   :repo "your-name/el-patch")))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you give &lt;code&gt;straight-use-package&lt;/code&gt; just a package name, then a recipe
will be looked up by default (see the section on &lt;a href="#recipe-lookup"&gt;recipe
lookup&lt;/a&gt;). You can see the default recipe for a package
by invoking &lt;a href="#interactive-usage"&gt;&lt;code&gt;M-x straight-get-recipe&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;straight-allow-recipe-inheritance&lt;/code&gt; is non-nil, then you only need
to specify the components of the recpie that you want to override. All
other components will still be looked up in the default recipe. In the
example above, we are only interested in changing the &lt;code&gt;:fork&lt;/code&gt;
component. Therefore if &lt;code&gt;straight-allow-recipe-inheritance&lt;/code&gt; is set,
the recipe could be simplifed as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(straight-use-package
 '(el-patch :fork (:repo "your-name/el-patch")))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or even simpler:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(straight-use-package
 '(el-patch :fork "your-name/el-patch"))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;:files&lt;/code&gt; keyword and all version control keywords support
inheritance.&lt;/p&gt;
&lt;p&gt;To learn more, see the section on &lt;a href="#the-recipe-format"&gt;the recipe format&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-additional-arguments-to-straight-use-package" class="anchor" aria-hidden="true" href="#additional-arguments-to-straight-use-package"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Additional arguments to &lt;code&gt;straight-use-package&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;The full user-facing signature of &lt;code&gt;straight-use-package&lt;/code&gt; is:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(straight-use-package PACKAGE-OR-RECIPE &amp;amp;optional NO-CLONE NO-BUILD)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As discussed &lt;a href="#installing-packages-programmatically"&gt;previously&lt;/a&gt;, by default
&lt;code&gt;straight-use-package&lt;/code&gt; will do three things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Register the recipe provided with &lt;code&gt;straight.el&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Clone the package's local repository, if it is absent.&lt;/li&gt;
&lt;li&gt;Rebuild the package if necessary, and load it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By providing the optional arguments, you may cause processing to halt
before all three of these tasks are completed. Specifically, providing
&lt;code&gt;NO-CLONE&lt;/code&gt; causes processing to halt after registration but before
cloning, and providing &lt;code&gt;NO-BUILD&lt;/code&gt; causes processing to halt after
cloning (if necessary) but before building and loading.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;straight.el&lt;/code&gt; supports lazy-loading by means of a special value for
&lt;code&gt;NO-CLONE&lt;/code&gt;, the symbol &lt;code&gt;lazy&lt;/code&gt;. If this symbol is passed, then
processing will halt at the clone step, unless the package is already
cloned. This means that the package is built and loaded if it is
already installed, but otherwise installation is deferred until later.
When you want to trigger the lazy installation, simply call
&lt;code&gt;straight-use-package&lt;/code&gt; again, but without &lt;code&gt;NO-CLONE&lt;/code&gt;. (There is no
need to pass the recipe again; see &lt;a href="#recipe-lookup"&gt;recipe lookup&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;You can also pass functions for &lt;code&gt;NO-CLONE&lt;/code&gt; or &lt;code&gt;NO-BUILD&lt;/code&gt;, which will
be called with the package name as a string; their return values will
then be used instead.&lt;/p&gt;
&lt;p&gt;Note that if it makes no sense to build a package, then you should put
&lt;code&gt;:no-build t&lt;/code&gt; in its &lt;a href="#the-recipe-format"&gt;recipe&lt;/a&gt;, rather than specifying
&lt;code&gt;NO-BUILD&lt;/code&gt; every time you register it with &lt;code&gt;straight.el&lt;/code&gt;. (This is
especially relevant when writing recipes for &lt;a href="#customizing-recipe-repositories"&gt;recipe
repositories&lt;/a&gt;.)&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-variants-of-straight-use-package" class="anchor" aria-hidden="true" href="#variants-of-straight-use-package"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Variants of &lt;code&gt;straight-use-package&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;For convenience, &lt;code&gt;straight.el&lt;/code&gt; provides some functions that wrap
&lt;code&gt;straight-use-package&lt;/code&gt; with particular arguments, to cover all of the
common cases. Each of these functions takes only a package name or
recipe, and no additional arguments.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;straight-register-package&lt;/code&gt;: always stop after the registration
step. This may be useful for specifying the recipe for an optional
dependency (see &lt;a href="#recipe-lookup"&gt;recipe lookup&lt;/a&gt;, but see also &lt;a href="#overriding-recipes"&gt;recipe
overrides&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight-use-package-no-build&lt;/code&gt;: always stop before the build step.
This is used by &lt;a href="#lockfile-management"&gt;&lt;code&gt;straight-freeze-versions&lt;/code&gt;&lt;/a&gt; to
make sure packages are cloned, since building them is unnecessary
for writing the lockfiles.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight-use-package-lazy&lt;/code&gt;: stop at the clone step if the package's
local repository is not already cloned. This is used for
lazy-loading.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a id="user-content-customizing-when-packages-are-built" class="anchor" aria-hidden="true" href="#customizing-when-packages-are-built"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Customizing when packages are built&lt;/h4&gt;
&lt;p&gt;By default, when &lt;code&gt;straight.el&lt;/code&gt; is bootstrapped during Emacs init, it
uses a bulk &lt;code&gt;find(1)&lt;/code&gt; command to identify files that were changed
since the last time a package depending on them was built. These
packages are then rebuilt when they are requested via
&lt;code&gt;straight-use-package&lt;/code&gt;. Normally, &lt;code&gt;straight.el&lt;/code&gt; will try to detect
what sort of &lt;code&gt;find(1)&lt;/code&gt; program is installed, and issue the appropriate
command. If it makes a mistake, then you can manually customize
&lt;code&gt;straight-find-flavor&lt;/code&gt;. Alternately, you can install GNU find and
customize the variable &lt;code&gt;straight-find-executable&lt;/code&gt; to point to it.&lt;/p&gt;
&lt;p&gt;For about 100 packages on an SSD, calling &lt;code&gt;find(1)&lt;/code&gt; to detect
modifications takes about 500ms. You can save this time by customizing
&lt;code&gt;straight-check-for-modifications&lt;/code&gt;. This is a list of symbols which
determines how &lt;code&gt;straight.el&lt;/code&gt; detects package modifications. The
default value is &lt;code&gt;(find-at-startup find-when-checking)&lt;/code&gt;, which means
that &lt;code&gt;find(1)&lt;/code&gt; is used to detect modifications at startup, and also
when you invoke &lt;code&gt;M-x straight-check-package&lt;/code&gt; or &lt;code&gt;M-x straight-check-all&lt;/code&gt;. If you prefer to avoid this performance hit, or
do not have &lt;code&gt;find(1)&lt;/code&gt; installed, then you can remove these symbols
from the list. In that case, you will probably want to add either
&lt;code&gt;check-on-save&lt;/code&gt; or &lt;code&gt;watch-files&lt;/code&gt; to the list.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;check-on-save&lt;/code&gt; causes &lt;code&gt;straight.el&lt;/code&gt; to use &lt;code&gt;before-save-hook&lt;/code&gt; to
detect package modifications as you make them (modifications made by
the &lt;code&gt;straight.el&lt;/code&gt; repository management commands are also detected).
This reduces init time, but modifications made outside of Emacs (or
modifications that bypass &lt;code&gt;before-save-hook&lt;/code&gt;) are not detected. Pull
requests extending the number of cases in which &lt;code&gt;straight.el&lt;/code&gt; is able
to detect live modifications are welcome. Also, for the sake of
efficiency, this form of modification checking is restricted to
subdirectories of &lt;code&gt;~/.emacs.d/straight/repos&lt;/code&gt;, so you must put your
local repositories into that directory for it to work. (Pull requests
to change this would be welcome.)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;watch-files&lt;/code&gt; causes &lt;code&gt;straight.el&lt;/code&gt; to automatically invoke a
filesystem watcher to detect modifications as they are made, inside or
outside of Emacs. For this setting to work, you must have
&lt;a href="https://www.python.org/" rel="nofollow"&gt;&lt;code&gt;python3&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://github.com/mattgreen/watchexec"&gt;&lt;code&gt;watchexec&lt;/code&gt;&lt;/a&gt; installed on your
&lt;code&gt;PATH&lt;/code&gt;. By default, the watcher persists after Emacs is closed. You
can stop it manually by running &lt;code&gt;M-x straight-watcher-stop&lt;/code&gt;, and start
it again by running &lt;code&gt;M-x straight-watcher-start&lt;/code&gt;. The watcher script
is designed so that when one instance is started, all the others
gracefully shut down, so you don't have to worry about accidentally
ending up with more than one. There is nothing exciting in the process
buffer for the watcher, but if you are interested in it then its name
is given by &lt;code&gt;straight-watcher-process-buffer&lt;/code&gt;. (By default, the name
has a leading space so that the buffer does not appear in the buffer
list.)&lt;/p&gt;
&lt;p&gt;There is probably no good reason to use both &lt;code&gt;check-on-save&lt;/code&gt; and
&lt;code&gt;watch-files&lt;/code&gt; at the same time. Your configuration can dynamically
switch between which one is used depending on &lt;code&gt;(executable-find "watchexec")&lt;/code&gt; or similar.&lt;/p&gt;
&lt;p&gt;If you prefer to eschew automatic package rebuilding entirely, you can
just set &lt;code&gt;straight-check-for-modifications&lt;/code&gt; to &lt;code&gt;nil&lt;/code&gt;. In that case,
packages will only be rebuilt when metadata (e.g. the recipe or the
Emacs version) changes, or when you manually invoke &lt;code&gt;M-x straight-rebuild-package&lt;/code&gt; or &lt;code&gt;M-x straight-rebuild-all&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Regardless of your preferred setting for
&lt;code&gt;straight-check-for-modifications&lt;/code&gt;, you should set it before the
&lt;code&gt;straight.el&lt;/code&gt; bootstrap snippet is run, since hooks relating to this
variable are set during bootstrap.&lt;/p&gt;
&lt;p&gt;On Microsoft Windows, &lt;code&gt;find(1)&lt;/code&gt; is generally not available, so the
default value of &lt;code&gt;straight-check-for-modifications&lt;/code&gt; is instead
&lt;code&gt;(check-on-save)&lt;/code&gt;.&lt;/p&gt;
&lt;h5&gt;&lt;a id="user-content-custom-or-manual-modification-detection" class="anchor" aria-hidden="true" href="#custom-or-manual-modification-detection"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Custom or manual modification detection&lt;/h5&gt;
&lt;p&gt;You can also use the low-level functions for modification detection
directly.&lt;/p&gt;
&lt;p&gt;The function &lt;code&gt;straight-register-repo-modification&lt;/code&gt; takes a string
(e.g. &lt;code&gt;"straight.el"&lt;/code&gt;) corresponding to the name of a local
repository, and marks all packages from that local repository to be
rebuilt at next Emacs startup. This function silently ignores local
repositories which contain slashes, a limitation which might be
removed in future.&lt;/p&gt;
&lt;p&gt;The function &lt;code&gt;straight-register-file-modification&lt;/code&gt; takes no arguments
and checks if the file visited by the current buffer (if any) is
contained by any local repository. If so, it delegates to
&lt;code&gt;straight-register-repo-modification&lt;/code&gt;. The &lt;code&gt;check-on-save&lt;/code&gt; value for
&lt;code&gt;straight-check-for-modifications&lt;/code&gt; just adds
&lt;code&gt;straight-register-file-modification&lt;/code&gt; to &lt;code&gt;before-save-hook&lt;/code&gt;.&lt;/p&gt;
&lt;h5&gt;&lt;a id="user-content-summary-of-options-for-package-modification-detection" class="anchor" aria-hidden="true" href="#summary-of-options-for-package-modification-detection"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Summary of options for package modification detection&lt;/h5&gt;
&lt;h6&gt;&lt;a id="user-content-find-at-startup" class="anchor" aria-hidden="true" href="#find-at-startup"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;code&gt;find-at-startup&lt;/code&gt;&lt;/h6&gt;
&lt;p&gt;Save build timestamps and run &lt;code&gt;find(1)&lt;/code&gt; at startup to detect changes&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Most reliable, never misses changes&lt;/li&gt;
&lt;li&gt;Requires &lt;code&gt;find(1)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Slows down startup&lt;/li&gt;
&lt;/ul&gt;
&lt;h6&gt;&lt;a id="user-content-check-on-save" class="anchor" aria-hidden="true" href="#check-on-save"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;code&gt;check-on-save&lt;/code&gt;&lt;/h6&gt;
&lt;p&gt;Use &lt;code&gt;before-save-hook&lt;/code&gt; to detect changes&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;No external dependencies&lt;/li&gt;
&lt;li&gt;No startup delay&lt;/li&gt;
&lt;li&gt;No additional CPU or memory impact&lt;/li&gt;
&lt;li&gt;Doesn't catch changes made except via &lt;code&gt;save-file&lt;/code&gt; inside Emacs&lt;/li&gt;
&lt;/ul&gt;
&lt;h6&gt;&lt;a id="user-content-watch-files" class="anchor" aria-hidden="true" href="#watch-files"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;code&gt;watch-files&lt;/code&gt;&lt;/h6&gt;
&lt;p&gt;Run filesystem watcher to detect changes&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Requires Python 3 and Watchexec&lt;/li&gt;
&lt;li&gt;No startup delay&lt;/li&gt;
&lt;li&gt;Takes a few seconds to build virtualenv the first time&lt;/li&gt;
&lt;li&gt;Memory and CPU impact of running filesystem watcher&lt;/li&gt;
&lt;li&gt;Only misses changes if you make them after booting the system but
before starting Emacs&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4&gt;&lt;a id="user-content-customizing-how-packages-are-built" class="anchor" aria-hidden="true" href="#customizing-how-packages-are-built"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Customizing how packages are built&lt;/h4&gt;
&lt;p&gt;By specifying a non-nil value for the &lt;code&gt;:no-build&lt;/code&gt; attribute in a
package's &lt;a href="#the-recipe-format"&gt;recipe&lt;/a&gt;, you may prevent the package from
being built at all. This is usually useful for recipe repositories
which do not bundle executable Lisp code. (Make sure to use
&lt;a href="#customizing-recipe-repositories"&gt;&lt;code&gt;straight-use-recipes&lt;/code&gt;&lt;/a&gt; for registering recipe
repositories.)&lt;/p&gt;
&lt;p&gt;By specifying a non-nil value for the &lt;code&gt;:no-autoloads&lt;/code&gt; attribute in a
package's recipe, you may prevent any autoloads provided by the
package from being generated and loaded into Emacs. This is mostly
useful if the package provides a large number of autoloads, you know
you need only a few of them, and you wish to optimize your startup
time (although this is almost certainly premature optimization unless
you &lt;em&gt;really&lt;/em&gt; know what you're doing). You can also customize the
variable &lt;code&gt;straight-disable-autoloads&lt;/code&gt; to effect this change on all
recipes which do not explicitly specify a &lt;code&gt;:no-autoloads&lt;/code&gt; attribute.&lt;/p&gt;
&lt;p&gt;By specifying a non-nil value for the &lt;code&gt;:no-byte-compile&lt;/code&gt; attribute in
a package's recipe, you may inhibit byte-compilation. See &lt;a href="https://github.com/raxod502/straight.el/issues/357"&gt;this
issue&lt;/a&gt; for discussion of why this might be useful. You can also
customize the variable &lt;code&gt;straight-disable-byte-compilation&lt;/code&gt; to effect
this change on all recipes which do not explicitly specify a
&lt;code&gt;:no-byte-compile&lt;/code&gt; attribute.&lt;/p&gt;
&lt;p&gt;Usually, &lt;code&gt;straight.el&lt;/code&gt; uses symbolic links ("symlinks") to make
package files available from the build directory. This happens when
&lt;code&gt;straight-use-symlinks&lt;/code&gt; is non-nil, the default. On Microsoft Windows,
however, support for symlinks is not always available, so the default
value of &lt;code&gt;straight-use-symlinks&lt;/code&gt; is nil on that platform. That causes
copying to be used instead, and an advice is placed on &lt;code&gt;find-file&lt;/code&gt; to
cause the copied files to act as symlinks if you try to edit them.&lt;/p&gt;
&lt;p&gt;If you want to activate symlink-support on MS Windows 7, 8, or 10, you
should ensure the following requirements:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;straight-use-symlinks&lt;/code&gt; has to be set to non-nil manually.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Your user-account needs to be assigned the right to create symbolic
links. To do so, run "secpol.msc" and in "Local Policies → User
Rights Assignment" assign the right to "Create symbolic links" to
your user-account.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you have User Account Control (UAC) enabled and your user-account
belongs to the the &lt;em&gt;Administrators&lt;/em&gt; group you'll need to run Emacs
in elevated mode to be able to create symlinks (see
&lt;a href="https://community.perforce.com/s/article/3472" rel="nofollow"&gt;here&lt;/a&gt; and &lt;a href="https://stackoverflow.com/a/29065060/3538165" rel="nofollow"&gt;here&lt;/a&gt; and,
for an official reference, section Access Token Changes &lt;a href="https://msdn.microsoft.com/en-us/library/bb530410.aspx#vistauac_topic8" rel="nofollow"&gt;in this
document&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://blogs.windows.com/buildingapps/2016/12/02/symlinks-windows-10/" rel="nofollow"&gt;Windows Creators Update&lt;/a&gt; supports
symlink-creation without any special permission setup.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a id="user-content-customizing-how-packages-are-made-available" class="anchor" aria-hidden="true" href="#customizing-how-packages-are-made-available"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Customizing how packages are made available&lt;/h4&gt;
&lt;p&gt;By setting the variable &lt;code&gt;straight-cache-autoloads&lt;/code&gt; to a non-nil value,
you can cause &lt;code&gt;straight.el&lt;/code&gt; to cache the autoloads of all used
packages in a single file on disk, and load them from there instead of
from the individual package files if they are still up to date. This
reduces the number of disk IO operations during startup from O(number
of packages) to O(1), so it should improve performance. No other
configuration should be necessary to make this work; however, you may
wish to call &lt;a href="#interactive-usage"&gt;&lt;code&gt;straight-prune-build&lt;/code&gt;&lt;/a&gt; occasionally,
since otherwise this cache file may grow quite large over time.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-hooks-run-by-straight-use-package" class="anchor" aria-hidden="true" href="#hooks-run-by-straight-use-package"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Hooks run by &lt;code&gt;straight-use-package&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Currently, &lt;code&gt;straight-use-package&lt;/code&gt; supports two hooks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;straight-use-package-prepare-functions&lt;/code&gt;: The functions in this hook
are run just before a package would be built, even if the package
does not actually need to be rebuilt. They are passed the name of
the package being (maybe) built as a string, and should take and
ignore any additional arguments.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight-use-package-pre-build-functions&lt;/code&gt;: The functions in this
hook are run just before building a package (and only if the package
needs to be built). They are passed the name of the package being
built as a string, and should take and ignore any additional
arguments.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-the-recipe-format" class="anchor" aria-hidden="true" href="#the-recipe-format"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;The recipe format&lt;/h3&gt;
&lt;p&gt;The general format for a &lt;code&gt;straight.el&lt;/code&gt; recipe is:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(package-name :keyword value :keyword value ...)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that if you wish to pass a recipe to &lt;code&gt;straight-use-package&lt;/code&gt;, you
will need to quote it. If you need to compute part of the recipe
dynamically, use backquoting:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(straight-use-package
 `(el-patch :type git :repo ,(alist-get 'el-patch my-package-urls)))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here is a comprehensive list of all keywords which have special
meaning in a recipe (unknown keywords are ignored but preserved):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;:local-repo&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This is the name of the local repository that is used for the
package. If a local repository by that name does not exist when you
invoke &lt;code&gt;straight-use-package&lt;/code&gt;, one will be cloned according to the
package's &lt;a href="#version-control-backends"&gt;version-control settings&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Multiple packages can use the same local repository. If so, then a
change to the local repository will cause both packages to be
rebuilt. Typically, if multiple packages are drawn from the same
repository, both should specify a &lt;code&gt;:files&lt;/code&gt; directive.&lt;/p&gt;
&lt;p&gt;If you do not provide &lt;code&gt;:local-repo&lt;/code&gt;, then it defaults to a value
derived from the &lt;a href="#version-control-backends"&gt;version-control
settings&lt;/a&gt;, or as a last resort the
package name.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;:files&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This is a list specifying which files in a package's local
repository need to be symlinked into its build directory, and how to
arrange the symlinks. For most packages, the default value
(&lt;code&gt;straight-default-files-directive&lt;/code&gt;) will suffice, and you do not
need to specify anything.&lt;/p&gt;
&lt;p&gt;If you do need to override the &lt;code&gt;:files&lt;/code&gt; directive (this happens most
commonly when you are taking a single package from a repository that
holds multiple packages), it is almost always sufficient to just
specify a list of globs or filenames. All matching files will be
linked into the top level of the package's build directory.&lt;/p&gt;
&lt;p&gt;In spite of this, the &lt;code&gt;:files&lt;/code&gt; directive supports an almost
comically powerful DSL (with nested excludes and everything!) that
allows you full flexibility on how the links are made; see the
docstring of &lt;code&gt;straight-expand-files-directive&lt;/code&gt; for the full details.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;:flavor&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If this is non-nil, then it changes the interpretation of the
&lt;code&gt;:files&lt;/code&gt; directive for compatibility with an existing upstream
recipe source. See the docstring of
&lt;code&gt;straight-expand-files-directive&lt;/code&gt; for details.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;:no-build&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If this is non-nil, then it causes the build step to be skipped
entirely and unconditionally. You should specify this for &lt;a href="#customizing-recipe-repositories"&gt;recipe
repository recipes&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;:type&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This specifies the version-control backend to use for cloning and
managing the package's local repository. It defaults to the value of
&lt;code&gt;straight-default-vc&lt;/code&gt;, which defaults to &lt;code&gt;git&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The only traditional version-control backend currently supported is
&lt;code&gt;git&lt;/code&gt;, although more backends may be added.&lt;/p&gt;
&lt;p&gt;As a special case, however, you may specify the value &lt;code&gt;built-in&lt;/code&gt;,
which results in all version-control operations on the package being
ignored. This allows you to tell &lt;code&gt;straight.el&lt;/code&gt; that a package has
already been provided (for example, because a version of it is
shipped by Emacs) and does not have a local repository which needs
to be cloned, updated, and so on. Here is how you can tell
&lt;code&gt;straight.el&lt;/code&gt; that you would like to use the Emacs-provided copy of
Org, rather than cloning it from the upstream repository if another
package declares it as a dependency:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(straight-use-package '(org :type built-in))
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;backend-specific keywords&lt;/p&gt;
&lt;p&gt;Depending on the value of &lt;code&gt;:type&lt;/code&gt;, additional keywords (relevant to
how the package's repository is cloned and managed) will be
meaningful. See the next section.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;built-in&lt;/code&gt; pseudo-backend does not take any other keywords.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a id="user-content-version-control-backends" class="anchor" aria-hidden="true" href="#version-control-backends"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Version-control backends&lt;/h4&gt;
&lt;p&gt;Defining a version-control backend consists of declaring a number of
functions named as &lt;code&gt;straight-vc-BACKEND-METHOD&lt;/code&gt;, where &lt;code&gt;BACKEND&lt;/code&gt; is
the name of the version-control backend being defined and &lt;code&gt;METHOD&lt;/code&gt; is
a backend API method. The relevant methods are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;clone&lt;/code&gt;: given a recipe and a commit object, clone the repository
and attempt to check out the given commit.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;commit-present-p&lt;/code&gt;: given a recipe and a commit object, return
whether the commit can be checked out offline, i.e., without
fetching from the remote.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;normalize&lt;/code&gt;: given a recipe, "normalize" the repository (this
generally means reverting it to a standard state, such as a clean
working directory, but does not entail checking out any particular
commit).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fetch-from-remote&lt;/code&gt;: given a recipe, fetch the latest version from
its configured remote, if one is specified.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fetch-from-upstream&lt;/code&gt;: given a recipe, fetch the latest version from
its configured upstream, if the package is forked.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;merge-from-remote&lt;/code&gt;: given a recipe, merge the latest version
fetched from the configured remote, if any, to the local copy.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;merge-from-upstream&lt;/code&gt;: given a recipe, merge the latest version
fetched from the configured upstream, if the package is forked, to
the local copy.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;push-to-remote&lt;/code&gt;: given a recipe, push the current version of the
repository to its configured remote, if one is specified.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;check-out-commit&lt;/code&gt;: given a recipe and a commit object, attempt to
check out that commit in the repository for that recipe.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;get-commit&lt;/code&gt;: given a local repository name, return the commit
object that is currently checked out.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;local-repo-name&lt;/code&gt;: given a recipe, return a good name for the local
repository, or nil.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;keywords&lt;/code&gt;: return a list of keywords which are meaningful for this
version-control backend.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Most of these methods are highly interactive: they don't actually do
anything without prompting you to confirm it, and very often they will
offer you a number of different options to proceed (including starting
a recursive edit and allowing you to do whatever you would like).&lt;/p&gt;
&lt;p&gt;Also, all of the methods in this section take &lt;a href="#developer-manual"&gt;&lt;code&gt;straight.el&lt;/code&gt;-style
recipes&lt;/a&gt;; see the section on &lt;a href="#developer-manual"&gt;defining VC
backends&lt;/a&gt; in the developer manual for more details.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-git-backend" class="anchor" aria-hidden="true" href="#git-backend"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Git backend&lt;/h4&gt;
&lt;p&gt;These are the keywords meaningful for the &lt;code&gt;git&lt;/code&gt; backend:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:repo&lt;/code&gt;: the clone URL for the Git repository.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:host&lt;/code&gt;: either nil or one of the symbols &lt;code&gt;github&lt;/code&gt;, &lt;code&gt;gitlab&lt;/code&gt;,
&lt;code&gt;bitbucket&lt;/code&gt;. If non-nil, then &lt;code&gt;:repo&lt;/code&gt; should just be a string
"username/repo", and the URL is constructed automatically.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:branch&lt;/code&gt;: the name of the branch used for primary development, as a
string. If your version lockfiles do not specify a commit to check
out when the repository is cloned, then this branch is checked out,
if possible. This branch is also viewed as the "primary" branch for
the purpose of normalization and interaction with the remote.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:remote&lt;/code&gt;: the name to use for the Git remote. If the package is
forked, this name is used for the upstream remote.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:nonrecursive&lt;/code&gt;: if non-nil, then submodules are not cloned. This is
particularly important for the Emacsmirror recipe repository, which
contains every known Emacs package in existence as submodules.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:fork&lt;/code&gt;: a plist which specifies settings for a fork, if desired.
This causes the &lt;code&gt;fetch-from-remote&lt;/code&gt; method to operate on the fork;
you can use the &lt;code&gt;fetch-from-upstream&lt;/code&gt; method to operate on the
upstream instead. The allowed keywords are &lt;code&gt;:repo&lt;/code&gt;, &lt;code&gt;:host&lt;/code&gt;,
&lt;code&gt;:branch&lt;/code&gt;, and &lt;code&gt;:remote&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:depth&lt;/code&gt;: either the symbol &lt;code&gt;full&lt;/code&gt; or an integer. If &lt;code&gt;full&lt;/code&gt;, then
the repository is cloned with its whole history. If an integer &lt;code&gt;N&lt;/code&gt;,
then the repository is cloned with the option &lt;code&gt;--depth N&lt;/code&gt;, unless a
commit is specified (e.g. by version lockfiles). The default value
is &lt;code&gt;full&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This section tells you how the &lt;code&gt;git&lt;/code&gt; backend, specifically, implements
the version-control backend API:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;clone&lt;/code&gt;: clones the repository, including submodules if
&lt;code&gt;:nonrecursive&lt;/code&gt; is not provided. Checks out the commit specified in
your revision lockfile, or the &lt;code&gt;:branch&lt;/code&gt; (from the &lt;code&gt;:fork&lt;/code&gt;
configuration, if given), or &lt;code&gt;origin/HEAD&lt;/code&gt;. If a &lt;code&gt;:fork&lt;/code&gt; is
specified, also fetches from the upstream.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;commit-present-p&lt;/code&gt;: checks if the commit SHA is among the revisions
that are present locally.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;normalize&lt;/code&gt;: verifies that remote URLs are set correctly, that no
merge is in progress, that the worktree is clean, and that the
primary &lt;code&gt;:branch&lt;/code&gt; (from the &lt;code&gt;:fork&lt;/code&gt; configuration, if given) is
checked out.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fetch-from-remote&lt;/code&gt;: checks that remote URLs are set correctly, then
fetches from the primary remote (the fork, if the package is
forked).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fetch-from-upstream&lt;/code&gt;: checks that remote URLs are set correctly,
then fetches from the upstream remote. If the package is not a fork,
does nothing.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;merge-from-remote&lt;/code&gt;: performs normalization, then merges from the
primary remote (the fork, if the package is forked) into the primary
local &lt;code&gt;:branch&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;merge-from-upstream&lt;/code&gt;: performs normalization, then merges from the
upstream remote into the primary local &lt;code&gt;:branch&lt;/code&gt;. If the package is
not a fork, does not attempt to merge.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;push-to-remote&lt;/code&gt;: performs normalization, pulls from the primary
remote if necessary, and then pushes if necessary. This operation
acts on the fork, if the package is forked.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;check-out-commit&lt;/code&gt;: verifies that no merge is in progress and that
the worktree is clean, then resets the worktree to the specified
commit.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;get-commit&lt;/code&gt;: returns HEAD as a 40-character string.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;local-repo-name&lt;/code&gt;: if &lt;code&gt;:host&lt;/code&gt; is non-nil, then &lt;code&gt;:repo&lt;/code&gt; will be of
the form "username/repository", and "repository" is used. Otherwise,
if the URL is of the form &lt;code&gt;.../&amp;lt;something&amp;gt;.git&lt;/code&gt;, then &lt;code&gt;&amp;lt;something&amp;gt;&lt;/code&gt;
is used. Otherwise, nil is returned.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;keywords&lt;/code&gt;: see the list of keywords above.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can customize the following user options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;straight-vc-git-default-branch&lt;/code&gt;: if &lt;code&gt;:branch&lt;/code&gt; is unspecified, then
this is used instead. Defaults to "master".&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight-vc-git-default-remote-name&lt;/code&gt;: the name to use for the
primary remote, or the upstream remote if the package is forked.
Defaults to "origin". The &lt;code&gt;:remote&lt;/code&gt; keyword may be used to override
the value of this variable on a per-repository basis.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight-vc-git-default-fork-name&lt;/code&gt;: the name to use for the fork
remote, if the package is forked. Defaults to "fork". The &lt;code&gt;:remote&lt;/code&gt;
keyword may be used to override the value of this variable on a
per-repository basis.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight-vc-git-default-protocol&lt;/code&gt;: the default protocol to use for
automatically generated URLs when &lt;code&gt;:host&lt;/code&gt; is non-nil. It can be
either &lt;code&gt;https&lt;/code&gt; or &lt;code&gt;ssh&lt;/code&gt;, and defaults to &lt;code&gt;https&lt;/code&gt; because this
requires less work to set up.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight-vc-git-force-protocol&lt;/code&gt;: if this is non-nil, then HTTPS and
SSH URLs are not treated as equivalent, so that bulk version-control
operations will offer to re-set your remote URLs from HTTPS to SSH
or vice versa, depending on the value of
&lt;code&gt;straight-vc-git-default-protocol&lt;/code&gt;. This is nil by default.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight-vc-git-auto-fast-forward&lt;/code&gt;: if this is non-nil, pulling
will quietly do fast-forward, to suppress asking for instructions on
each package with updates, unless they're not trivial. Set to nil if
you'd prefer to inspect all changes.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight-vc-git-default-clone-depth&lt;/code&gt;: the default value for the
&lt;code&gt;:depth&lt;/code&gt; keyword. It can be either the symbol &lt;code&gt;full&lt;/code&gt; or an integer,
and defaults to &lt;code&gt;full&lt;/code&gt;. Setting this variable to a small integer will
reduce the size of repositories. Note that this variable does &lt;em&gt;not&lt;/em&gt;
affect packages whose versions are locked.&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;&lt;a id="user-content-deprecated-upstream-keyword" class="anchor" aria-hidden="true" href="#deprecated-upstream-keyword"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Deprecated &lt;code&gt;:upstream&lt;/code&gt; keyword&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;straight.el&lt;/code&gt; previously supported fork configuration in recipes using
an &lt;code&gt;:upstream&lt;/code&gt; keyword rather than a &lt;code&gt;:fork&lt;/code&gt; keyword. For various
reasons, this was more complex to handle, which is why the change was
made. For backwards compatibility, the &lt;code&gt;:upstream&lt;/code&gt; keyword is still
accepted, with the following behavior.&lt;/p&gt;
&lt;p&gt;When &lt;code&gt;straight.el&lt;/code&gt; processes a recipe which uses the &lt;code&gt;:upstream&lt;/code&gt;
keyword, it moves the &lt;code&gt;:repo&lt;/code&gt;, &lt;code&gt;:host&lt;/code&gt;, and &lt;code&gt;:branch&lt;/code&gt; keywords from
that sub-plist to the top level, and moves those top-level keywords to
a new &lt;code&gt;:fork&lt;/code&gt; sub-plist. Then it sets the top-level and &lt;code&gt;:fork&lt;/code&gt;
sub-plist values of &lt;code&gt;:remote&lt;/code&gt; to the values of the deprecated
variables &lt;code&gt;straight-vc-git-upstream-remote&lt;/code&gt; (defaults to "upstream")
and &lt;code&gt;straight-vc-git-primary-remote&lt;/code&gt; (defaults to "origin"),
respectively.&lt;/p&gt;
&lt;p&gt;For backwards compatibility, if &lt;code&gt;straight-vc-git-primary-remote&lt;/code&gt;
differs from its default value of "origin", then its value is used in
place of &lt;code&gt;straight-vc-git-default-remote-name&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-recipe-lookup" class="anchor" aria-hidden="true" href="#recipe-lookup"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Recipe lookup&lt;/h3&gt;
&lt;p&gt;If you only provide a symbol (package name) to &lt;code&gt;straight-use-package&lt;/code&gt;,
then the recipe is looked up automatically. By default, &lt;a href="http://melpa.org/#/" rel="nofollow"&gt;MELPA&lt;/a&gt;, &lt;a href="https://elpa.gnu.org/" rel="nofollow"&gt;GNU
ELPA&lt;/a&gt;, and &lt;a href="https://emacsmirror.net/" rel="nofollow"&gt;Emacsmirror&lt;/a&gt; are searched for recipes, in that
order. This means that one or more of them may need to be cloned.
Recipe repositories are actually just the same as ordinary packages,
except that their recipes specify &lt;code&gt;:no-build&lt;/code&gt;, so they are not
symlinked or added to the &lt;code&gt;load-path&lt;/code&gt; or anything.&lt;/p&gt;
&lt;p&gt;Note that dependencies always use the default recipes, since the only
information &lt;code&gt;straight.el&lt;/code&gt; gets about a package's dependencies are
their names.&lt;/p&gt;
&lt;p&gt;This leads to a few interesting questions regarding requesting a
package multiple times. For example, you might need to load two
features using &lt;a href="https://github.com/jwiegley/use-package"&gt;&lt;code&gt;use-package&lt;/code&gt;&lt;/a&gt; that are provided from the
same package, or one of the packages you have installed is also
requested as a dependency by another package. &lt;code&gt;straight.el&lt;/code&gt; uses a
number of heuristics to try to make these interactions as intuitive
and painless as possible:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The first time a package is registered with &lt;code&gt;straight.el&lt;/code&gt;, its
recipe (either the recipe that you provided, or the one that was
looked up from a recipe repository) is recorded. In future
registration, if you just provide the package name to
&lt;code&gt;straight-use-package&lt;/code&gt;, the existing recipe is reused.&lt;/p&gt;
&lt;p&gt;Note, however: &lt;em&gt;if&lt;/em&gt; you want to use a custom recipe for a given
package, you must load it &lt;em&gt;before&lt;/em&gt; all of its dependencies.
Otherwise, the package will first be registered as a dependency,
using the default recipe.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If a package has already been registered with &lt;code&gt;straight.el&lt;/code&gt;, and you
attempt to load it again with an explicit recipe which is different
from the one previously registered, the new recipe is used but a
warning is signalled.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you attempt to register a package which shares a &lt;code&gt;:local-repo&lt;/code&gt;
(either by default, or due to explicit specification) with a
previously registered package, and the two packages specify
different values for their version-control keywords (see
&lt;a href="#version-control-backends"&gt;version-control backends&lt;/a&gt;), then the new
recipe is used but a warning is signalled. If the repository was
already cloned, this means the second recipe will have no effect.&lt;/p&gt;
&lt;p&gt;But if the second recipe was fetched automatically from a recipe
repository, all of its version-control keywords will be silently
overwritten with the ones from the first recipe, to avoid conflicts
(although if there are conflicts in other parts of the recipe, a
warning will still be displayed).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a id="user-content-updating-recipe-repositories" class="anchor" aria-hidden="true" href="#updating-recipe-repositories"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Updating recipe repositories&lt;/h4&gt;
&lt;p&gt;As mentioned in the &lt;a href="#where-do-recipes-come-from"&gt;conceptual overview&lt;/a&gt;, recipe
repositories are just regular packages, with some extra code to look
up recipes in the relevant local repository.&lt;/p&gt;
&lt;p&gt;This means that updating a recipe repository is done the same way as
updating a regular package, i.e. with &lt;a href="#version-control-operations"&gt;&lt;code&gt;M-x straight-pull-package&lt;/code&gt;&lt;/a&gt;. You should do this if
you find that a package isn't listed by &lt;code&gt;M-x straight-use-package&lt;/code&gt;—perhaps it was added recently.&lt;/p&gt;
&lt;p&gt;Note that there is currently some potentially surprising behavior if
you update all packages at once using &lt;code&gt;M-x straight-pull-all&lt;/code&gt; or &lt;code&gt;M-x straight-merge-all&lt;/code&gt;, and this bulk update includes recipe repository
updates: see &lt;a href="https://github.com/raxod502/straight.el/issues/323"&gt;#323&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-customizing-recipe-repositories" class="anchor" aria-hidden="true" href="#customizing-recipe-repositories"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Customizing recipe repositories&lt;/h4&gt;
&lt;p&gt;The recipe repository system is designed to be extended. Firstly, you
can control which recipe repositories are searched, and in what order
of precedence, by customizing &lt;code&gt;straight-recipe-repositories&lt;/code&gt;. The
default value is:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(org-elpa melpa gnu-elpa-mirror emacsmirror)
&lt;/code&gt;&lt;/pre&gt;
&lt;h5&gt;&lt;a id="user-content-gnu-elpa" class="anchor" aria-hidden="true" href="#gnu-elpa"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;GNU ELPA&lt;/h5&gt;
&lt;p&gt;You can customize the following user options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;straight-recipes-gnu-elpa-url&lt;/code&gt;: The Git URL to use for the
&lt;code&gt;gnu-elpa&lt;/code&gt; recipe repository.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;straight-recipes-gnu-elpa-use-mirror&lt;/code&gt;: GNU ELPA uses a stupidly
complex build system for no good reason, and it's unlikely to change
any time soon. What this means for you is that you have to run the
Elisp-powered Makefile of the GNU ELPA repository (which has a fatal
bug last I checked, so you'd have to patch it locally) &lt;em&gt;and&lt;/em&gt; have a
full checkout of the Emacs source repository (more than 1GB) if you
want all the packages to work correctly. To work around this
problem, I maintain a &lt;a href="https://github.com/emacs-straight"&gt;full mirror of GNU ELPA on
GitHub&lt;/a&gt;. (The tooling used to maintain this mirror
is located &lt;a href="https://github.com/raxod502/gnu-elpa-mirror"&gt;here&lt;/a&gt;.) By default, &lt;code&gt;straight.el&lt;/code&gt;
retrieves packages from this mirror instead of the source
repository; this behavior is controlled by the value of
&lt;code&gt;straight-recipes-gnu-elpa-use-mirror&lt;/code&gt;. You must do any
customization of this variable &lt;em&gt;before&lt;/em&gt; the &lt;code&gt;straight.el&lt;/code&gt;
&lt;a href="#getting-started"&gt;bootstrap&lt;/a&gt;. Note that setting the value of this user
option to nil causes the default value of
&lt;code&gt;straight-recipe-repositories&lt;/code&gt; to shift to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(org-elpa melpa gnu-elpa emacsmirror)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;&lt;a id="user-content-emacsmirror" class="anchor" aria-hidden="true" href="#emacsmirror"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Emacsmirror&lt;/h5&gt;
&lt;p&gt;You can customize the following user option:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;straight-recipes-emacsmirror-use-mirror&lt;/code&gt;: Yes, there is also a
mirror for Emacsmirror. This is because the &lt;a href="https://github.com/emacsmirror/epkgs"&gt;epkgs&lt;/a&gt; repository
contains a (frequently updated) SQLite database in it, which means
the Git repository takes &lt;em&gt;forever&lt;/em&gt; to clone (see &lt;a href="https://github.com/raxod502/straight.el/issues/356"&gt;#356&lt;/a&gt;). My
solution to this problem is to generate a new repository which
contains the information that &lt;code&gt;straight.el&lt;/code&gt; needs but which is much
smaller. By default, &lt;code&gt;straight.el&lt;/code&gt; uses the official &lt;a href="https://github.com/emacsmirror/epkgs"&gt;epkgs&lt;/a&gt;
repository to find packages on Emacsmirror, but you can tell it to
use my mirror by configuring the value of this variable to non-nil.
You must do any customization of this variable &lt;em&gt;before&lt;/em&gt; the
&lt;code&gt;straight.el&lt;/code&gt; &lt;a href="#getting-started"&gt;bootstrap&lt;/a&gt;. Note that setting the value
of this user option to non-nil causes the default value of
&lt;code&gt;straight-recipe-repositories&lt;/code&gt; to shift to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(org-elpa melpa gnu-elpa-mirror emacsmirror-mirror)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;&lt;a id="user-content-defining-new-recipe-repositories" class="anchor" aria-hidden="true" href="#defining-new-recipe-repositories"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Defining new recipe repositories&lt;/h5&gt;
&lt;p&gt;To define a new recipe repository called &lt;code&gt;NAME&lt;/code&gt;, you should do the
following things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Define a function &lt;code&gt;straight-recipes-NAME-retrieve&lt;/code&gt;, which takes a
package name as a symbol and returns a recipe for that package if it
is available, else nil. This is used for recipe lookup. This
function may assume that the local repository for the recipe
repository has already been cloned, and that &lt;code&gt;default-directory&lt;/code&gt; has
been set to that local repository. This is used for recipe lookup
during the course of &lt;code&gt;straight-use-package&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Define a function &lt;code&gt;straight-recipes-NAME-list&lt;/code&gt;, which takes no
arguments and returns a list of strings representing packages for
which recipes are available. It is permissible to return some
strings for which recipes are actually not available, for
performance reasons. However, this is discouraged. (The &lt;a href="http://melpa.org/#/" rel="nofollow"&gt;MELPA&lt;/a&gt;
backend uses this functionality, since all files in the &lt;code&gt;recipes&lt;/code&gt;
directory are potentially recipes, but only the Git-based ones can
actually be used.)&lt;/li&gt;
&lt;li&gt;(Optional) Define a function &lt;code&gt;straight-recipes-NAME-version&lt;/code&gt; which
returns a non-nil value indicating the current version of the logic
in your &lt;code&gt;straight-recipes-NAME-retrieve&lt;/code&gt; function. Each time you
change the logic, this version value must be changed. If this
function is defined, then &lt;code&gt;straight.el&lt;/code&gt; automatically and
transparently caches calls to &lt;code&gt;straight-recipes-NAME-retrieve&lt;/code&gt;
persistently, using your version value (and its detection of
modifications to the recipe repository) to decide when to invalidate
the cache.&lt;/li&gt;
&lt;li&gt;Call &lt;code&gt;straight-use-recipes&lt;/code&gt; with the recipe for your recipe
repository. Make sure to include &lt;code&gt;:no-build&lt;/code&gt; in the recipe, unless
you also want to use the recipe repository as an executable Emacs
Lisp package. Alternatively, you can take the manual approach:
&lt;ul&gt;
&lt;li&gt;Call &lt;code&gt;straight-use-package-lazy&lt;/code&gt; with the recipe for your recipe
repository.&lt;/li&gt;
&lt;li&gt;Add the symbol for your recipe repository's name (the car of the
recipe you provided, that is) to &lt;code&gt;straight-recipe-repositories&lt;/code&gt;,
at the appropriate place.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-overriding-recipes" class="anchor" aria-hidden="true" href="#overriding-recipes"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Overriding recipes&lt;/h3&gt;
&lt;p&gt;You can always use &lt;code&gt;straight-register-package&lt;/code&gt; to specify a specific
recipe for a package without cloning or building it, so that just in
case that package is requested later (possibly as a dependency, or in
somebody else's code) your recipe will be used instead of the default
one. However, this does not help in the case that a specific recipe is
passed to &lt;code&gt;straight-use-package&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Also, it is obviously impossible to call &lt;code&gt;straight-register-package&lt;/code&gt;
before &lt;code&gt;straight.el&lt;/code&gt; has been loaded, so you can't use it to specify a
custom recipe for &lt;code&gt;straight.el&lt;/code&gt; itself.&lt;/p&gt;
&lt;p&gt;To remedy these difficulties, &lt;code&gt;straight.el&lt;/code&gt; provides a mechanism for
specifically overriding the recipe for a particular package. You can
use it by customizing &lt;code&gt;straight-recipe-overrides&lt;/code&gt;, or by calling
&lt;code&gt;straight-override-recipe&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;straight-recipe-overrides&lt;/code&gt; is an association list from &lt;a href="#the-profile-system"&gt;profile
names&lt;/a&gt; to &lt;em&gt;override alists&lt;/em&gt;. If you don't
care about the profile system, you can just use a single override
specification, with the profile name nil. Each override alist is just
a list of recipes. Because the car of a recipe is just the package
name as a symbol, this list of recipes is also an alist whose keys are
recipe names and whose values are the plists for those recipes.&lt;/p&gt;
&lt;p&gt;Even if an explicit recipe is supplied to &lt;code&gt;straight-use-package&lt;/code&gt;, the
one given in &lt;code&gt;straight-recipe-overrides&lt;/code&gt; will be used instead, if such
a recipe is specified there.&lt;/p&gt;
&lt;p&gt;For convenience, you may add to &lt;code&gt;straight-recipe-overrides&lt;/code&gt; by passing
a recipe to &lt;code&gt;straight-override-recipe&lt;/code&gt;. This will register it in the
override alist for the current profile. Note that if you do this, you
will probably want to explicitly set &lt;code&gt;straight-recipe-overrides&lt;/code&gt; to
nil before bootstrapping &lt;code&gt;straight.el&lt;/code&gt;. This will make it so that if
you remove a call to &lt;code&gt;straight-override-recipe&lt;/code&gt; from your init-file
and then reload it, the entry will actually be removed from
&lt;code&gt;straight-recipe-overrides&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-overriding-the-recipe-for-straightel" class="anchor" aria-hidden="true" href="#overriding-the-recipe-for-straightel"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Overriding the recipe for &lt;code&gt;straight.el&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;As was briefly mentioned earlier, you can actually override the recipe
of &lt;code&gt;straight.el&lt;/code&gt; itself using &lt;code&gt;straight-recipe-overrides&lt;/code&gt;! How does
this work? Well, it's basically black magic. If you want the details,
go read the &lt;a href="#developer-manual"&gt;developer manual&lt;/a&gt;. All you need to
know is that you can set &lt;code&gt;straight-recipe-overrides&lt;/code&gt;, and it will
magically work. The only caveat is that if you change the
&lt;code&gt;:local-repo&lt;/code&gt; for &lt;code&gt;straight.el&lt;/code&gt;, then you will also need to adjust the
value of &lt;code&gt;bootstrap-file&lt;/code&gt; in the &lt;a href="#getting-started"&gt;bootstrap snippet&lt;/a&gt;
accordingly, since otherwise your init-file will not know where to
find &lt;code&gt;straight.el&lt;/code&gt;. (You must use &lt;code&gt;straight-recipe-overrides&lt;/code&gt; instead
of &lt;code&gt;straight-override-recipe&lt;/code&gt;, since the latter function definition
hasn't been loaded yet before &lt;code&gt;straight.el&lt;/code&gt; is installed and
bootstrapped.)&lt;/p&gt;
&lt;p&gt;Here is the default recipe used for &lt;code&gt;straight.el&lt;/code&gt;, if you don't
override it:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(straight :type git :host github
          :repo ,(format "%s/straight.el" straight-repository-user)
          :files ("straight*.el")
          :branch ,straight-repository-branch)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that even though the bootstrap snippet references the &lt;code&gt;develop&lt;/code&gt;
branch of &lt;code&gt;straight.el&lt;/code&gt;, the default recipe installs from &lt;code&gt;master&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If all you want to do is change which branch you are installing
&lt;code&gt;straight.el&lt;/code&gt; from, simply customize the variable
&lt;code&gt;straight-repository-branch&lt;/code&gt;, which is provided for this purpose.
(Although using &lt;code&gt;straight-recipe-overrides&lt;/code&gt; will work just as well, at
least until the recipe happens to be changed upstream and your
init-file isn't updated.)&lt;/p&gt;
&lt;p&gt;Similarly, if all you want to do is switch to your own fork of
&lt;code&gt;straight.el&lt;/code&gt; on GitHub, simply customize the variable
&lt;code&gt;straight-repository-user&lt;/code&gt; to your GitHub username.&lt;/p&gt;
&lt;p&gt;There is one minor caveat to the above discussion. If your fork makes
changes to the way in which recipes are interpreted, then those
changes will not be effective during the interpretation of your own
recipe for &lt;code&gt;straight.el&lt;/code&gt;. If you wish for them to be, then you will
have to follow the same procedure that is followed in &lt;code&gt;straight.el&lt;/code&gt;
itself for making changes to recipe interpretation. These details are
outlined in the &lt;a href="#developer-manual"&gt;developer manual&lt;/a&gt;; see also
&lt;code&gt;install.el&lt;/code&gt; for an explanation of this aspect of the bootstrap
mechanism.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-interactive-usage" class="anchor" aria-hidden="true" href="#interactive-usage"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Interactive usage&lt;/h3&gt;
&lt;p&gt;The primary usage of &lt;code&gt;straight.el&lt;/code&gt; is expected to be in your
init-file. For example, this is where you will need to put the
bootstrap code as well as any packages that you always want to be
installed. However, there are three important interactive uses of
&lt;code&gt;straight.el&lt;/code&gt;: temporary installation of packages, various helpful
utility functions, and &lt;a href="#version-control-operations"&gt;version control
operations&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To install a package temporarily, run &lt;code&gt;M-x straight-use-package&lt;/code&gt;. All
registered recipe repositories will be cloned, and you will be
presented with a combined list of all recipes available from them.
Simply select a package and it will be cloned, built, and loaded
automatically. This does not affect future Emacs sessions.&lt;/p&gt;
&lt;p&gt;If you provide a prefix argument to &lt;code&gt;M-x straight-use-package&lt;/code&gt;, then
you are presented with a list of registered recipe repositories. After
you select one, you are shown a list of recipes specifically from that
recipe repository. This is helpful if you do not want to clone all
registered recipe repositories, or you have a particular recipe
repository in mind.&lt;/p&gt;
&lt;p&gt;You can also call &lt;code&gt;M-x straight-get-recipe&lt;/code&gt;, which has the same
interface as &lt;code&gt;M-x straight-use-package&lt;/code&gt;, except that instead of the
package being cloned, built, and loaded, its recipe is copied to the
kill ring. If you are writing a custom recipe, this may be helpful,
because you may be able to reuse parts of the existing recipe,
particularly the &lt;code&gt;:files&lt;/code&gt; directive.&lt;/p&gt;
&lt;p&gt;Normally, packages are rebuilt automatically if needed, when Emacs
restarts. If you for some reason want them to be rebuilt at another
time, you can call &lt;code&gt;M-x straight-check-all&lt;/code&gt; to rebuild all packages
that have been modified since their last build. Alternatively, use
&lt;code&gt;M-x straight-rebuild-all&lt;/code&gt; to unconditionally rebuild all packages.
Note that this will probably take a while. There are also &lt;code&gt;M-x straight-check-package&lt;/code&gt; and &lt;code&gt;M-x straight-rebuild-package&lt;/code&gt;, which
allow you to select a particular package to check or rebuild.&lt;/p&gt;
&lt;p&gt;Finally, you may use &lt;code&gt;M-x straight-prune-build&lt;/code&gt; in order to tell
&lt;code&gt;straight.el&lt;/code&gt; to forget about any packages which were not registered
since the last time you loaded your init-file. This may improve
performance, although only slightly, and will clean up stale entries
in the &lt;code&gt;build&lt;/code&gt; directory. You can call this function in your init-file
if you really wish your filesystem to be as clean as possible,
although it's not particularly recommended as the performance
implications are uninvestigated. If you do call it in your init-file,
be sure to only call it on a fully successful init; otherwise, an
error during init will result in some packages' build information
being discarded, and they will need to be rebuilt next time.&lt;/p&gt;
&lt;p&gt;If you have enabled &lt;a href="#customizing-how-packages-are-made-available"&gt;autoloads caching&lt;/a&gt;, it is
advisable to call &lt;code&gt;straight-prune-build&lt;/code&gt; occasionally, since otherwise
the build cache may grow quite large over time.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-version-control-operations" class="anchor" aria-hidden="true" href="#version-control-operations"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Version control operations&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;straight.el&lt;/code&gt; provides a number of highly interactive workflows for
managing your package's local repositories, using the configured
&lt;a href="#version-control-backends"&gt;version-control backends&lt;/a&gt;. They are as
follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;M-x straight-normalize-package&lt;/code&gt;: normalize a package&lt;/li&gt;
&lt;li&gt;&lt;code&gt;M-x straight-normalize-all&lt;/code&gt;: normalize all packages&lt;/li&gt;
&lt;li&gt;&lt;code&gt;M-x straight-fetch-package&lt;/code&gt;: fetch from a package's configured
remote; with prefix argument, then for forks also fetch from the
upstream&lt;/li&gt;
&lt;li&gt;&lt;code&gt;M-x straight-fetch-package-and-deps&lt;/code&gt;: fetch from the configured
remotes of a package and all of its dependencies (including the
dependencies of its dependencies); with prefix argment, then for
forks also fetch from the upstream&lt;/li&gt;
&lt;li&gt;&lt;code&gt;M-x straight-fetch-all&lt;/code&gt;: fetch from all packages' configured
remotes; with prefix argument, then for forks also fetch from the
upstreams&lt;/li&gt;
&lt;li&gt;&lt;code&gt;M-x straight-merge-package&lt;/code&gt;: merge the latest version fetched from
a package's configured remote into the local copy; with prefix
argument, then for forks also merge from the upstream&lt;/li&gt;
&lt;li&gt;&lt;code&gt;M-x straight-merge-package-and-deps&lt;/code&gt;: merge the latest versions
fetched from the configured remotes of a package and all of its
dependencies (including the dependencies of its dependencies); with
prefix argment, then for forks also merge from the upstreams&lt;/li&gt;
&lt;li&gt;&lt;code&gt;M-x straight-merge-all&lt;/code&gt;: merge the latest versions fetched from
each package's configured remote into its local copy; with prefix
argument, then for forks also merge from the upstreams&lt;/li&gt;
&lt;li&gt;&lt;code&gt;M-x straight-pull-package&lt;/code&gt;: combination of &lt;code&gt;M-x straight-fetch-package&lt;/code&gt; and &lt;code&gt;M-x straight-merge-package&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;M-x straight-pull-package-and-deps&lt;/code&gt;: combination of &lt;code&gt;M-x straight-fetch-package-and-deps&lt;/code&gt; and &lt;code&gt;M-x straight-merge-package-and-deps&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;M-x straight-pull-all&lt;/code&gt;: combination of &lt;code&gt;M-x straight-fetch-all&lt;/code&gt; and
&lt;code&gt;M-x straight-merge-all&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;M-x straight-push-package&lt;/code&gt;: push a package to its remote, if
necessary&lt;/li&gt;
&lt;li&gt;&lt;code&gt;M-x straight-push-all&lt;/code&gt;: push all packages to their remotes, if
necessary&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;See the sections on &lt;a href="#version-control-backends"&gt;version-control
backends&lt;/a&gt; and the &lt;a href="#git-backend"&gt;Git
backend&lt;/a&gt; in particular for more information about
the meanings of these operations.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-lockfile-management" class="anchor" aria-hidden="true" href="#lockfile-management"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Lockfile management&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;straight.el&lt;/code&gt; determines your package management configuration from
two, and only two, sources: the contents of your init-file, and your
version lockfiles (which are optional). Your init-file specifies the
configuration of &lt;code&gt;straight.el&lt;/code&gt; (for example, the values of
&lt;code&gt;straight-recipe-overrides&lt;/code&gt; and &lt;code&gt;straight-default-vc&lt;/code&gt;), the packages
you want to use, and their recipes. Your version lockfiles specify the
exact revisions of each package, recipe repository, and even
&lt;code&gt;straight.el&lt;/code&gt; itself. Together, they lock down your Emacs
configuration to a state of no uncertainty: perfect reproducibility.&lt;/p&gt;
&lt;p&gt;To write the current revisions of all your packages into version
lockfiles, run &lt;code&gt;M-x straight-freeze-versions&lt;/code&gt;. This will first check
that &lt;code&gt;straight.el&lt;/code&gt; has an up-to-date account of what packages are
installed by your init-file, then ensure that all your local changes
are pushed (remember, we are aiming for perfect reproducibility!). If
you wish to bypass these checks, provide a prefix argument.&lt;/p&gt;
&lt;p&gt;Version lockfiles are written into &lt;code&gt;~/.emacs.d/straight/versions&lt;/code&gt;. By
default, there will be one, called &lt;code&gt;default.el&lt;/code&gt;. It is recommended
that you keep your version lockfiles under version control with the
rest of your Emacs configuration. If you symlink your init-file into
&lt;code&gt;~/.emacs.d&lt;/code&gt; from somewhere else, you should also make sure to symlink
your version lockfiles into &lt;code&gt;~/.emacs.d/straight/versions&lt;/code&gt;. On a new
machine, do this &lt;em&gt;before&lt;/em&gt; launching Emacs: that way, &lt;code&gt;straight.el&lt;/code&gt; can
make sure to check out the specified revisions of each package when
cloning them for the first time.&lt;/p&gt;
&lt;p&gt;To install the versions of the packages specified in your version
lockfiles, run &lt;code&gt;M-x straight-thaw-versions&lt;/code&gt;. Thawing will
interactively check for local changes before checking out the relevant
revisions, so don't worry about things getting overwritten.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-the-profile-system" class="anchor" aria-hidden="true" href="#the-profile-system"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;The profile system&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;straight.el&lt;/code&gt; has support for writing multiple version lockfiles,
instead of just one. Why? Consider a large Emacs configuration such as
&lt;a href="https://github.com/raxod502/radian"&gt;Radian&lt;/a&gt;, &lt;a href="http://spacemacs.org/" rel="nofollow"&gt;Spacemacs&lt;/a&gt;, or &lt;a href="https://github.com/bbatsov/prelude"&gt;Prelude&lt;/a&gt;, which is used by many different
people. There are two parts to the configuration that is actually
loaded: the "default" part, and the local customizations that each
user has added. Generally, these configurations have a mechanism for
making local customizations without forking the entire project.&lt;/p&gt;
&lt;p&gt;So Radian will have some set of packages that it requires, and my
local customizations of Radian have some other set of packages that
they require. In order for me to maintain Radian, I need to be able to
separate Radian's packages (which go into a versions lockfile in the
Radian repository) from my own local packages (which go into a
versions lockfile in my own private local dotfiles repository).
&lt;code&gt;straight.el&lt;/code&gt; provides this ability through the &lt;em&gt;profile system&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The idea is that whenever a package is registered, either directly or
as a dependency, it is associated with a given profile. Any given
package can be associated with multiple profiles.&lt;/p&gt;
&lt;p&gt;When you call &lt;code&gt;straight-use-package&lt;/code&gt;, which profile the registered
packages are associated with is determined by the value of
&lt;code&gt;straight-current-profile&lt;/code&gt;, which defaults to nil. In Radian, for
example, &lt;code&gt;straight-current-profile&lt;/code&gt; is bound to &lt;code&gt;radian&lt;/code&gt; while the
Radian libraries are being loaded, and it is bound to &lt;code&gt;radian-local&lt;/code&gt;
while the user's local customizations are being loaded. This results
in Radian packages being associated with the &lt;code&gt;radian&lt;/code&gt; profile, and the
user's local packages being associated with the &lt;code&gt;radian-local&lt;/code&gt;
profile.&lt;/p&gt;
&lt;p&gt;When you call &lt;code&gt;M-x straight-freeze-versions&lt;/code&gt;, one or more version
lockfiles are written, according to the value of &lt;code&gt;straight-profiles&lt;/code&gt;.
This variable is an association list whose keys are symbols naming
profiles and whose values are filenames for the corresponding version
lockfiles to be written into &lt;code&gt;~/.emacs.d/straight/versions&lt;/code&gt;. You
should make sure that each potential value of
&lt;code&gt;straight-current-profile&lt;/code&gt; has a corresponding entry in
&lt;code&gt;straight-profiles&lt;/code&gt;, since otherwise some packages might not be
written into your lockfiles.&lt;/p&gt;
&lt;p&gt;When customizing &lt;a href="#overriding-recipes"&gt;&lt;code&gt;straight-recipe-overrides&lt;/code&gt;&lt;/a&gt;, note
that if multiple profiles are set to override the same recipe, then
the last one listed in &lt;code&gt;straight-profiles&lt;/code&gt; will take precedence.
Similarly, when using &lt;code&gt;M-x straight-thaw-versions&lt;/code&gt;, if different
lockfiles specify revisions for the same local repository, the last
one in &lt;code&gt;straight-profiles&lt;/code&gt; will take precedence.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-packages-and-the-init-file" class="anchor" aria-hidden="true" href="#packages-and-the-init-file"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Packages and the init-file&lt;/h3&gt;
&lt;p&gt;Package managers like &lt;code&gt;package.el&lt;/code&gt; store mutable state outside your
init-file, including the set of packages that are installed.
&lt;code&gt;straight.el&lt;/code&gt; does not do this, so it has a rather different way of
determining what packages are installed. To &lt;code&gt;straight.el&lt;/code&gt;, a package
is part of your Emacs configuration if it is passed to
&lt;code&gt;straight-use-package&lt;/code&gt; when your init-file is loaded.&lt;/p&gt;
&lt;p&gt;Note that this means packages installed interactively (using &lt;code&gt;M-x straight-use-package&lt;/code&gt;) are not considered part of your Emacs
configuration, since the invocation of &lt;code&gt;straight-use-package&lt;/code&gt; does not
happen in your init-file.&lt;/p&gt;
&lt;p&gt;This raises an interesting question: if you &lt;em&gt;add&lt;/em&gt; a package to your
init-file, how can you convince &lt;code&gt;straight.el&lt;/code&gt; that it really is part
of your init-file, and not just part of a temporary
&lt;code&gt;straight-use-package&lt;/code&gt; form that you evaluated ad-hoc? The answer is
simple: &lt;em&gt;reload your entire init-file&lt;/em&gt;. That way, &lt;code&gt;straight.el&lt;/code&gt; will
see whether or not that package is registered during your init-file.&lt;/p&gt;
&lt;p&gt;One might ask how &lt;code&gt;straight.el&lt;/code&gt; determines that you have finished
loading your init-file. The answer is simple: &lt;code&gt;run-with-idle-timer&lt;/code&gt; is
used to execute code only after the current interactive operation has
finished. The implementation of this concept is part of the
&lt;em&gt;transaction system&lt;/em&gt; of &lt;code&gt;straight.el&lt;/code&gt;, and it is also used to amortize
certain performance costs when many calls to &lt;code&gt;straight-use-package&lt;/code&gt;
are made sequentially. However, since the transaction system (at least
in recent versions of &lt;code&gt;straight.el&lt;/code&gt;) operates transparently, its
details are relegated to the &lt;a href="#developer-manual"&gt;developer manual&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-using-straightel-to-reproduce-bugs" class="anchor" aria-hidden="true" href="#using-straightel-to-reproduce-bugs"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Using &lt;code&gt;straight.el&lt;/code&gt; to reproduce bugs&lt;/h3&gt;
&lt;p&gt;One of the major reasons I wanted to write &lt;code&gt;straight.el&lt;/code&gt; was that
existing package managers were not good for reproducing bugs. For
instance, some of them would load all installed packages when the
package manager was initialized! Obviously that is not acceptable for
a "minimal test case".&lt;/p&gt;
&lt;p&gt;On the contrary, bootstrapping &lt;code&gt;straight.el&lt;/code&gt; does not load anything
except for &lt;code&gt;straight.el&lt;/code&gt; itself (the default recipe repositories are
registered, but not cloned until needed). You should normally be
loading &lt;code&gt;straight.el&lt;/code&gt; by means of the &lt;a href="#getting-started"&gt;bootstrap
snippet&lt;/a&gt;, but when you are in &lt;code&gt;emacs -Q&lt;/code&gt;, here is how you
can initialize &lt;code&gt;straight.el&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;M-x load-file RET ~/.emacs.d/straight/repos/straight.el/bootstrap.el RET
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can also do this from the command line, perhaps by creating an
alias for it:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ emacs -Q -l ~/.emacs.d/straight/repos/straight.el/bootstrap.el
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let's say you are making a bug report for Projectile. To load just
Projectile and all of its dependencies, run:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;M-x straight-use-package RET projectile RET
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that this will use the currently checked-out revisions of
Projectile and all of its dependencies, so you should take note of
those in order to make your bug report.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-using-straightel-to-develop-packages" class="anchor" aria-hidden="true" href="#using-straightel-to-develop-packages"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Using &lt;code&gt;straight.el&lt;/code&gt; to develop packages&lt;/h3&gt;
&lt;p&gt;The workflow for developing a package using &lt;code&gt;straight.el&lt;/code&gt; is quite
straightforward:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Add the package to your configuration as usual, via a call to
&lt;code&gt;straight-use-package&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;M-x find-function&lt;/code&gt; or a similar command to jump to the code you
wish to edit.&lt;/li&gt;
&lt;li&gt;Edit the code.&lt;/li&gt;
&lt;li&gt;Either evaluate the edited code using &lt;code&gt;M-x eval-buffer&lt;/code&gt;, &lt;code&gt;M-x eval-defun&lt;/code&gt;, or a similar command, or just restart Emacs to pick up
your changes.&lt;/li&gt;
&lt;li&gt;When you are satisfied with your changes, use &lt;a href="https://magit.vc/" rel="nofollow"&gt;Magit&lt;/a&gt; or just Git
directly in order to commit and possibly push them. I suggest using
&lt;a href="https://github.com/magit/forge"&gt;Forge&lt;/a&gt; to create pull requests directly from Emacs, with Magit
integration.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-integration-with-other-packages" class="anchor" aria-hidden="true" href="#integration-with-other-packages"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Integration with other packages&lt;/h3&gt;
&lt;h4&gt;&lt;a id="user-content-integration-with-use-package-1" class="anchor" aria-hidden="true" href="#integration-with-use-package-1"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Integration with &lt;code&gt;use-package&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;By default, &lt;code&gt;straight.el&lt;/code&gt; installs a new keyword &lt;code&gt;:straight&lt;/code&gt; for
&lt;code&gt;use-package&lt;/code&gt; which may be used to install packages via &lt;code&gt;straight.el&lt;/code&gt;.
The algorithm is extremely simple. This:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(use-package el-patch
  :straight t)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;macroexpands (essentially) to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(straight-use-package 'el-patch)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(use-package el-patch
  :straight (:host github :repo "raxod502/el-patch"
             :branch "develop"))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;becomes:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(straight-use-package
 '(el-patch :host github :repo "raxod502/el-patch"
            :branch "develop"))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If the feature you are requiring with &lt;code&gt;use-package&lt;/code&gt; is different from
the package name, you can provide a full recipe:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(use-package tex-site
  :straight (auctex :host github
                    :repo "emacsmirror/auctex"
                    :files (:defaults (:exclude "*.el.in"))))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And you may also provide just the package name:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(use-package tex-site
  :straight auctex)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you don't provide &lt;code&gt;:straight&lt;/code&gt;, then by default nothing happens. You
may customize &lt;code&gt;straight-use-package-by-default&lt;/code&gt; to make it so that
&lt;code&gt;:straight t&lt;/code&gt; is assumed unless you explicitly override it with
&lt;code&gt;:straight nil&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Previously, &lt;code&gt;straight.el&lt;/code&gt; used a different syntax for its
&lt;code&gt;use-package&lt;/code&gt; integration. For backwards compatibility, you can use
this syntax instead by customizing &lt;code&gt;straight-use-package-version&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can disable &lt;code&gt;use-package&lt;/code&gt; integration entirely by customizing
&lt;code&gt;straight-enable-use-package-integration&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-integration-with-packageel" class="anchor" aria-hidden="true" href="#integration-with-packageel"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;"Integration" with &lt;code&gt;package.el&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;By default, &lt;code&gt;package.el&lt;/code&gt; will automatically insert a call to
&lt;code&gt;package-initialize&lt;/code&gt; into your init-file as soon as Emacs starts,
which is ridiculous. It will also do this when you perform any package
management operation. A separate system inserts some &lt;code&gt;custom&lt;/code&gt; forms
into your init-file when you install a package. &lt;code&gt;straight.el&lt;/code&gt; disables
all of these "features" by setting &lt;code&gt;package-enable-at-startup&lt;/code&gt; to nil
and enabling some advices. You can override this behavior by
customizing &lt;code&gt;straight-enable-package-integration&lt;/code&gt;, however.&lt;/p&gt;
&lt;p&gt;To help avoid you shooting yourself in the foot by using both
&lt;code&gt;:ensure&lt;/code&gt; and &lt;code&gt;:straight&lt;/code&gt; at the same time in a &lt;code&gt;use-package&lt;/code&gt; form
(which would cause the same package to be installed twice using two
different package managers), &lt;code&gt;straight.el&lt;/code&gt; will helpfully disable
&lt;code&gt;:ensure&lt;/code&gt; whenever you include &lt;code&gt;:straight&lt;/code&gt; in a &lt;code&gt;use-package&lt;/code&gt; form.
See &lt;a href="https://github.com/raxod502/straight.el/issues/425"&gt;#425&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-integration-with-org" class="anchor" aria-hidden="true" href="#integration-with-org"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Integration with Org&lt;/h4&gt;
&lt;p&gt;Org expects you to run &lt;code&gt;make&lt;/code&gt; in its source repository before you run
it, but &lt;code&gt;straight.el&lt;/code&gt; does not yet support running such build systems
automatically (see &lt;a href="https://github.com/raxod502/straight.el/issues/72"&gt;#72&lt;/a&gt;). This presents two problems:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Byte-compiling Org without running &lt;code&gt;make&lt;/code&gt; first produces some
annoying warnings.&lt;/li&gt;
&lt;li&gt;Running &lt;code&gt;make&lt;/code&gt; generates a file &lt;code&gt;org-version.el&lt;/code&gt; which provides the
functions &lt;code&gt;org-git-version&lt;/code&gt; and &lt;code&gt;org-release&lt;/code&gt;. Thus the version of
Org provided by &lt;code&gt;straight.el&lt;/code&gt; does not include these functions, but
the obsolete version of Org provided by Emacs (see &lt;a href="#the-wrong-version-of-my-package-was-loaded"&gt;the
FAQ&lt;/a&gt;) does. This can result in the obsolete
version getting partially loaded, which is confusing.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;See &lt;a href="https://github.com/raxod502/straight.el/issues/211"&gt;#211&lt;/a&gt; for discussion.&lt;/p&gt;
&lt;p&gt;By default, &lt;code&gt;straight.el&lt;/code&gt; installs a hack (namely, defining the
functions &lt;code&gt;org-git-version&lt;/code&gt; and &lt;code&gt;org-release&lt;/code&gt; itself) whenever you ask
it to install Org. This functionality is implemented using
&lt;a href="#hooks-run-by-straight-use-package"&gt;&lt;code&gt;straight-use-package-prepare-functions&lt;/code&gt;&lt;/a&gt;. You
can disable it by setting the value of the variable &lt;code&gt;straight-fix-org&lt;/code&gt;
to nil.&lt;/p&gt;
&lt;p&gt;Please be careful with setting &lt;code&gt;straight-vc-git-default-clone-depth&lt;/code&gt;,
which may break some packages' installing processes such as &lt;code&gt;elfeed&lt;/code&gt;
that depend on &lt;code&gt;org&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-integration-with-hydra" class="anchor" aria-hidden="true" href="#integration-with-hydra"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Integration with Hydra&lt;/h4&gt;
&lt;p&gt;See &lt;a href="https://github.com/abo-abo/hydra/wiki/straight.el"&gt;the Hydra wiki&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-miscellaneous" class="anchor" aria-hidden="true" href="#miscellaneous"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Miscellaneous&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;By default, &lt;code&gt;straight.el&lt;/code&gt; explains what it is doing in the echo
area, like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Looking for cider recipe → Cloning melpa...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If your terminal does not support Unicode characters nicely, you can
customize &lt;code&gt;straight-arrow&lt;/code&gt; to display something else for the arrow.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;By default, &lt;code&gt;straight.el&lt;/code&gt; reports process output the
&lt;code&gt;*straight-process*&lt;/code&gt; buffer. You can customize the name of this
buffer via the &lt;code&gt;straight-process-buffer&lt;/code&gt; user option. If you want to
hide this buffer by default, consider adding a leading space to the
name.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can prevent &lt;code&gt;straight.el&lt;/code&gt; from making any modifications to the
filesystem (though it may still read) by customizing the user option
&lt;code&gt;straight-safe-mode&lt;/code&gt; to non-nil. This may be useful for running
tasks automatically in batch mode, to avoid multiple concurrent
Emacs processes all making changes to the filesystem. For an example
of how this feature may be used to safely implement asynchronous
byte-compilation of the init-file on successful startup, see
&lt;a href="https://github.com/raxod502/radian"&gt;Radian&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-developer-manual" class="anchor" aria-hidden="true" href="#developer-manual"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Developer manual&lt;/h2&gt;
&lt;p&gt;This section tells you about all the interesting implementation
details and design decisions that power &lt;code&gt;straight.el&lt;/code&gt; behind the
scenes. It assumes you have already read the &lt;a href="#user-manual"&gt;user manual&lt;/a&gt; and
the &lt;a href="#conceptual-overview"&gt;conceptual overview&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Unfortunately, I haven't yet had time to write it. See &lt;a href="https://github.com/raxod502/straight.el/issues/51"&gt;#51&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-trivia" class="anchor" aria-hidden="true" href="#trivia"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Trivia&lt;/h2&gt;
&lt;p&gt;This section has random, (possibly) interesting tidbits about
&lt;code&gt;straight.el&lt;/code&gt; that don't fit in the other sections.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-comments-and-docstrings" class="anchor" aria-hidden="true" href="#comments-and-docstrings"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Comments and docstrings&lt;/h3&gt;
&lt;p&gt;How did I get that statistic about the percentage of &lt;code&gt;straight.el&lt;/code&gt;
that is comments and docstrings? Simple: by abusing the syntax
highlighting.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(let ((lines (make-hash-table :test #'equal)))
  (goto-char (point-min))
  (while (&amp;lt; (point) (point-max))
    (when (memq (face-at-point)
                '(font-lock-comment-face
                  font-lock-doc-face))
      (puthash (line-number-at-pos) t lines))
    (forward-char))
  (* (/ (float (length (hash-table-keys lines)))
        (line-number-at-pos))
     100))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that you will have to scroll through the entire buffer first,
since &lt;code&gt;font-lock-mode&lt;/code&gt; computes syntax highlighting lazily.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-contributing" class="anchor" aria-hidden="true" href="#contributing"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contributing&lt;/h2&gt;
&lt;p&gt;Please do! Development takes place on the &lt;code&gt;develop&lt;/code&gt; branch. You can
switch to that branch with&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(setq straight-repository-branch "develop")
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and base your pull requests from it. If you have an outstanding pull
request whose features you would like to use in your configuration,
there is full support for defining &lt;code&gt;straight.el&lt;/code&gt; as coming from any
branch in any fork:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(setq straight-repository-user "my-github-username")
(setq straight-repository-branch "feat/my-cool-feature")
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Please try to follow the style of the surrounding code and
documentation, but anything is welcome. All text, including comments
and docstrings, should be formatted using Emacs' &lt;code&gt;M-x fill-paragraph&lt;/code&gt;
command (bound to &lt;code&gt;M-q&lt;/code&gt; by default).&lt;/p&gt;
&lt;p&gt;We require that the linting pass on all new commits. You can check
this easily by installing &lt;a href="https://www.docker.com/" rel="nofollow"&gt;Docker&lt;/a&gt; and running&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ make docker
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then you will be in a shell with the &lt;code&gt;straight.el&lt;/code&gt; source code, and to
test your commits you'll be able to run&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ make lint
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or to see what other targets are available&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ make help
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you don't want to install Docker, you can simply skip the &lt;code&gt;make docker&lt;/code&gt; step, and everything will work the same! However, you'll then
have to make sure you have the relevant dependencies installed
locally.&lt;/p&gt;
&lt;p&gt;When you create a pull request, it will be &lt;a href="https://circleci.com/gh/raxod502/straight.el" rel="nofollow"&gt;tested
automatically&lt;/a&gt; on &lt;a href="https://circleci.com/" rel="nofollow"&gt;CircleCI&lt;/a&gt; and the status will be
reported. Please make sure the CI build is passing before asking for
review.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-faq" class="anchor" aria-hidden="true" href="#faq"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;FAQ&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-my-init-time-got-slower" class="anchor" aria-hidden="true" href="#my-init-time-got-slower"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;My init time got slower&lt;/h3&gt;
&lt;p&gt;Your first step should be to customize the value of
&lt;code&gt;straight-check-for-modifications&lt;/code&gt;. The best setting is &lt;code&gt;(watch-files find-when-checking)&lt;/code&gt;; this is not enabled by default because it is
impolite to spawn persistent background processes without asking, and
because you must install &lt;a href="https://www.python.org/" rel="nofollow"&gt;Python 3&lt;/a&gt; and
&lt;a href="https://github.com/mattgreen/watchexec"&gt;&lt;code&gt;watchexec&lt;/code&gt;&lt;/a&gt; for it to work. If you can't stand the extra
dependencies and background process, consider the setting
&lt;code&gt;(check-on-save find-when-checking)&lt;/code&gt; instead, which is just as fast
but won't catch package modifications unless they are made within
Emacs via the &lt;code&gt;save-buffer&lt;/code&gt; command.&lt;/p&gt;
&lt;p&gt;Even with lazy modification detection, as described above,
&lt;code&gt;straight.el&lt;/code&gt; is not quite as fast as &lt;code&gt;package.el&lt;/code&gt; (by a few
percentage points). There are some planned changes which will make
&lt;code&gt;straight.el&lt;/code&gt; just as fast as &lt;code&gt;package.el&lt;/code&gt;, if not faster. See &lt;a href="https://github.com/raxod502/straight.el/issues/9"&gt;#9&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-how-do-i-update-melpa-et-al" class="anchor" aria-hidden="true" href="#how-do-i-update-melpa-et-al"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;How do I update MELPA et al.?&lt;/h3&gt;
&lt;p&gt;Using &lt;a href="#version-control-operations"&gt;&lt;code&gt;M-x straight-pull-package&lt;/code&gt;&lt;/a&gt;, like for
any other package. &lt;a href="#updating-recipe-repositories"&gt;Read more.&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-the-wrong-version-of-my-package-was-loaded" class="anchor" aria-hidden="true" href="#the-wrong-version-of-my-package-was-loaded"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;The wrong version of my package was loaded&lt;/h3&gt;
&lt;p&gt;To explain this problem, let us consider a concrete example. In &lt;a href="https://github.com/raxod502/straight.el/issues/355"&gt;this
issue&lt;/a&gt;, a user found that the code&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(straight-use-package 'company-lsp)
(straight-use-package 'eglot)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;sometimes resulted in runtime errors because an old version of Flymake
was being used.&lt;/p&gt;
&lt;p&gt;The root problem here is that you want the most recent version of
Flymake to be installed by &lt;code&gt;straight.el&lt;/code&gt;, but Emacs also ships an
older version, and that older version is getting loaded instead.&lt;/p&gt;
&lt;p&gt;The older version will be loaded if &lt;code&gt;(require 'flymake)&lt;/code&gt; (or similar)
is invoked before &lt;code&gt;straight.el&lt;/code&gt; has made Flymake available (by means
of &lt;code&gt;(straight-use-package 'flymake)&lt;/code&gt; or similar). But why would
&lt;code&gt;straight.el&lt;/code&gt; not make Flymake available?&lt;/p&gt;
&lt;p&gt;The only way that &lt;code&gt;straight.el&lt;/code&gt; knows to make Flymake available is if
either you manually invoke &lt;code&gt;straight-use-package&lt;/code&gt; in your init-file,
or if one of the packages that you request in your init-file declares
Flymake as a dependency. Now, any package that uses Flymake ought to
declare it as a dependency. Thus, there should be no way for a package
to load the Emacs-provided version of Flymake. However, sometimes
package authors overlook this problem (it does not always cause an
error, and sometimes package authors do not test exhaustively enough).&lt;/p&gt;
&lt;p&gt;In this case, the problem was that &lt;code&gt;company-lsp&lt;/code&gt; declared a dependency
on &lt;code&gt;lsp-mode&lt;/code&gt;, and &lt;code&gt;lsp-mode&lt;/code&gt; used Flymake without declaring a
dependency on &lt;code&gt;flymake&lt;/code&gt;. There are two ways to work around the
problem:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(Preferable) Fix &lt;code&gt;lsp-mode&lt;/code&gt; to declare a dependency on &lt;code&gt;flymake&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;(Workaround) Manually invoke &lt;code&gt;(straight-use-package 'flymake)&lt;/code&gt;
before &lt;code&gt;(straight-use-package 'company-lsp)&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you test this yourself, you might find it difficult to reproduce
the problem. That is because there is only an issue when Flymake is
actually loaded, and this doesn't necessarily happen when invoking
&lt;code&gt;(straight-use-package 'company-lsp)&lt;/code&gt; &lt;em&gt;unless&lt;/em&gt; &lt;code&gt;straight.el&lt;/code&gt; needs to
rebuild the relevant packages (which includes byte-compilation, which
sometimes means actually loading dependencies). Keep this in mind when
testing.&lt;/p&gt;
&lt;p&gt;This problem commonly occurs with Org, since (1) Org is popular, (2)
Emacs ships an obsolete version of Org, (3) many users want to use the
up-to-date version, and (4) Org breaks backwards compatibility
frequently. To solve it, simply make sure that you invoke
&lt;code&gt;(straight-use-package 'org)&lt;/code&gt; or &lt;code&gt;(straight-use-package 'org-plus-contrib)&lt;/code&gt; before running any code that could load Org,
including installing any package that lists it as a dependency. See
also the &lt;a href="#integration-with-org"&gt;integration with Org&lt;/a&gt; section for
more fun problems you can encounter with Org.&lt;/p&gt;
&lt;p&gt;See &lt;a href="https://github.com/raxod502/straight.el/issues/236"&gt;this issue&lt;/a&gt; for discussion about ways of mitigating the bad
UX of this situation.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-i-get-could-not-read-usernamepassword-errors" class="anchor" aria-hidden="true" href="#i-get-could-not-read-usernamepassword-errors"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;I get "could not read username/password" errors&lt;/h3&gt;
&lt;p&gt;This is because &lt;code&gt;straight.el&lt;/code&gt; is not currently able to detect when SSH
or Git asks for your username and/or password/passphrase and then pipe
that prompt through to the minibuffer (&lt;a href="https://github.com/raxod502/straight.el/issues/334"&gt;#334&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;To work around the problem, set up &lt;a href="https://git-scm.com/docs/git-credential-cache" rel="nofollow"&gt;git-credential-cache&lt;/a&gt; if you use
HTTPS, and &lt;a href="https://www.ssh.com/ssh/agent" rel="nofollow"&gt;ssh-agent&lt;/a&gt; if you use SSH. That way, you won't be prompted
for your username/password. When setting up ssh-agent, be careful to
make sure that the relevant environment variables get set in Emacs.
This might be tricky since starting Emacs from the desktop (rather
than from the command line) sometimes results in it not inheriting any
environment variables from your shell.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-the-interactive-version-control-operations-are-confusing" class="anchor" aria-hidden="true" href="#the-interactive-version-control-operations-are-confusing"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;The interactive version-control operations are confusing&lt;/h3&gt;
&lt;p&gt;This part of &lt;code&gt;straight.el&lt;/code&gt; still needs some work; see &lt;a href="https://github.com/raxod502/straight.el/issues/54"&gt;#54&lt;/a&gt; about the
UX of pushing and pulling.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-how-do-i-pin-package-versions-or-use-only-tagged-releases" class="anchor" aria-hidden="true" href="#how-do-i-pin-package-versions-or-use-only-tagged-releases"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;How do I pin package versions or use only tagged releases?&lt;/h3&gt;
&lt;p&gt;This is a planned feature. In the meantime, contributors have proposed
various workarounds. See &lt;a href="https://github.com/raxod502/straight.el/issues/246"&gt;#246&lt;/a&gt; and &lt;a href="https://github.com/raxod502/straight.el/issues/31"&gt;#31&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;straight-x.el&lt;/code&gt; now contains an experimental solution. In order to use
it you will need to add similar snippets to your Emacs configuration.&lt;/p&gt;
&lt;p&gt;First you need to add a new profile to &lt;code&gt;straight-profiles&lt;/code&gt; which also
needs to be the last profile in the list. This should be done before
you bootstrap &lt;code&gt;straight.el&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;;; Tell straight.el about the profiles we are going to be using.
(setq straight-profiles
      '((nil . "default.el")
        ;; Packages which are pinned to a specific commit.
        (pinned . "pinned.el")))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After straight's install procedure you will need to add
&lt;code&gt;straight-x.el&lt;/code&gt; and load the required commands.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(autoload #'straight-x-pull-all "straight-x")
(autoload #'straight-x-freeze-versions "straight-x")
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A variable called &lt;code&gt;straight-x-pinned-packages&lt;/code&gt; has been defined in
&lt;code&gt;straight-x.el&lt;/code&gt; and will contain your list of pinned packages.&lt;/p&gt;
&lt;p&gt;From now on, you can pin a package to a specific commit like in the
following example which will pin &lt;code&gt;org-mode&lt;/code&gt; to the 9.2.3 release
version:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(let ((straight-current-profile 'pinned))
  (straight-use-package 'org-plus-contrib)
  (straight-use-package 'org)
  ;; Pin org-mode version.
  (add-to-list 'straight-x-pinned-packages
               '("org" . "924308a150ab82014b69c46c04d1ab71e874a2e6")))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you invoke &lt;code&gt;straight-x-freeze-versions&lt;/code&gt; it will first write the
default lockfile and then pinned lockfile which takes precedence over
the default one if packages are thawed. &lt;code&gt;straight-x-pull-all&lt;/code&gt; will
first invoke &lt;code&gt;straight-pull-all&lt;/code&gt; and then restore all pinned packages.&lt;/p&gt;
&lt;p&gt;You might want to assign the following aliases for more convenience:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(defalias 'straight-pull-all #'straight-x-pull-all)
(defalias 'straight-freeze-versions #'straight-x-freeze-versions)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Please keep in mind that this is only a temporary solution and
experimental!&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-how-can-i-use-the-built-in-version-of-a-package" class="anchor" aria-hidden="true" href="#how-can-i-use-the-built-in-version-of-a-package"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;How can I use the built-in version of a package?&lt;/h3&gt;
&lt;p&gt;To tell &lt;code&gt;straight.el&lt;/code&gt; that you want to use the version of Org shipped
with Emacs, rather than cloning the upstream repository:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(straight-use-package '(org :type built-in))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href="#the-recipe-format"&gt;Read more.&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-news" class="anchor" aria-hidden="true" href="#news"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;News&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-july-6-2019" class="anchor" aria-hidden="true" href="#july-6-2019"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;July 6, 2019&lt;/h3&gt;
&lt;p&gt;The default value of the user option &lt;code&gt;straight-emacsmirror-use-mirror&lt;/code&gt;
is now non-nil.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-may-24-2019" class="anchor" aria-hidden="true" href="#may-24-2019"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;May 24, 2019&lt;/h3&gt;
&lt;p&gt;I have completely rewritten the transaction system. The practical
impact of this is that you no longer have to care about it. Simply
remove all references to the following functions and variables from
your configuration, and everything should "just work":&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;straight-transaction&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight-begin-transaction&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight-finalize-transaction&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight-mark-transaction-as-init&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;straight-treat-as-init&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-may-22-2019" class="anchor" aria-hidden="true" href="#may-22-2019"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;May 22, 2019&lt;/h3&gt;
&lt;p&gt;I now maintain a mirror of Emacsmirror. (Bear with me here.) The
advantage of using my mirror is that cloning it is several orders of
magnitude faster than cloning the official Emacsmirror. You can tell
&lt;code&gt;straight.el&lt;/code&gt; to do so by customizing the user option
&lt;code&gt;straight-emacsmirror-use-mirror&lt;/code&gt; to non-nil.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-may-1-2019" class="anchor" aria-hidden="true" href="#may-1-2019"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;May 1, 2019&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;straight-thaw-versions&lt;/code&gt; now fetches in a repository if a commit in
your lockfile can not be found and normalizes the repository to the
recipe's default branch. This should ensure that versions you have
frozen can be quickly restored and that they can also be saved back to
the version lock file. This addresses issues &lt;a href="https://github.com/raxod502/straight.el/issues/58"&gt;#58&lt;/a&gt;, [#66], and [#294].&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-march-15-2019" class="anchor" aria-hidden="true" href="#march-15-2019"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;March 15, 2019&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;straight.el&lt;/code&gt; &lt;a href="#integration-with-org"&gt;now installs a hack for Org by
default&lt;/a&gt;, so Org should work out of the box
with no compile warnings. If you have code to work around the problem
in your init-file, you can safely remove it. To avoid installing the
hack, customize the variable &lt;code&gt;straight-fix-org&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-december-22-2018" class="anchor" aria-hidden="true" href="#december-22-2018"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;December 22, 2018&lt;/h3&gt;
&lt;p&gt;The default value of the user option
&lt;code&gt;straight-recipes-gnu-elpa-use-mirror&lt;/code&gt; is now non-nil.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-september-12-2018" class="anchor" aria-hidden="true" href="#september-12-2018"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;September 12, 2018&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;straight.el&lt;/code&gt; now supports specifying configuration for your fork of a
package via the new &lt;code&gt;:fork&lt;/code&gt; keyword. The previously supported
&lt;code&gt;:upstream&lt;/code&gt; keyword is now deprecated, but still works for backwards
compatibility. To support this change, the user options
&lt;code&gt;straight-vc-git-primary-remote&lt;/code&gt; and &lt;code&gt;straight-vc-git-upstream-remote&lt;/code&gt;
are deprecated (but still work for backwards compatibility), as they
have been superseded by the new user options
&lt;code&gt;straight-vc-git-default-remote-name&lt;/code&gt; and
&lt;code&gt;straight-vc-git-default-fork-name&lt;/code&gt;. Your usage should be updated.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-july-19-2018" class="anchor" aria-hidden="true" href="#july-19-2018"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;July 19, 2018&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;straight.el&lt;/code&gt; now automatically caches the recipes it looks up in
recipe repositories. This should lead to a reduction in
&lt;code&gt;straight.el&lt;/code&gt;-related startup time of as much as 50% if you also use
live modification detection, as disk IO and usage of external
processes are reduced significantly.&lt;/p&gt;
&lt;p&gt;No changes to user configuration are necessary; however, if you define
a custom recipe repository (call it &lt;code&gt;NAME&lt;/code&gt;) then caching is not
enabled by default. To enable caching, define a
&lt;code&gt;straight-recipes-NAME-version&lt;/code&gt; function which returns a non-nil value
indicating the current version of the logic in
&lt;code&gt;straight-recipes-NAME-retrieve&lt;/code&gt;. This version value needs to be
changed each time you change the logic, so that the recipe lookup
cache for that recipe repository may automatically be invalidated.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-july-12-2018" class="anchor" aria-hidden="true" href="#july-12-2018"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;July 12, 2018&lt;/h3&gt;
&lt;p&gt;I now maintain a &lt;a href="https://github.com/emacs-straight"&gt;full mirror of GNU ELPA on GitHub&lt;/a&gt;.
You can tell &lt;code&gt;straight.el&lt;/code&gt; to use it by customizing the user option
&lt;code&gt;straight-recipes-gnu-elpa-use-mirror&lt;/code&gt;, and this will allow you to use
packages such as AUCTeX correctly, which was previously impossible.
Note that the user option must be customized &lt;em&gt;before&lt;/em&gt; the
&lt;code&gt;straight.el&lt;/code&gt; &lt;a href="#getting-started"&gt;bootstrap&lt;/a&gt;.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>raxod502</author><guid isPermaLink="false">https://github.com/raxod502/straight.el</guid><pubDate>Fri, 24 Jan 2020 00:03:00 GMT</pubDate></item><item><title>raxod502/prescient.el #4 in Emacs Lisp, Today</title><link>https://github.com/raxod502/prescient.el</link><description>&lt;p&gt;&lt;i&gt;[No description found.]&lt;/i&gt;&lt;/p&gt;&lt;p&gt;No README was found for this project.&lt;/p&gt;</description><author>raxod502</author><guid isPermaLink="false">https://github.com/raxod502/prescient.el</guid><pubDate>Fri, 24 Jan 2020 00:04:00 GMT</pubDate></item><item><title>emacs-mirror/emacs #5 in Emacs Lisp, Today</title><link>https://github.com/emacs-mirror/emacs</link><description>&lt;p&gt;&lt;i&gt;Mirror of GNU Emacs&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="" data-path="README"&gt;&lt;div class="plain"&gt;&lt;pre style="white-space: pre-wrap"&gt;Copyright (C) 2001-2020 Free Software Foundation, Inc.
See the end of the file for license conditions.


This directory tree holds version 28.0.50 of GNU Emacs, the extensible,
customizable, self-documenting real-time display editor.

The file INSTALL in this directory says how to build and install GNU
Emacs on various systems, once you have unpacked or checked out the
entire Emacs file tree.

See the file etc/NEWS for information on new features and other
user-visible changes in recent versions of Emacs.

The file etc/PROBLEMS contains information on many common problems that
occur in building, installing and running Emacs.

The file CONTRIBUTE contains information on contributing to Emacs as a
developer.

You may encounter bugs in this release.  If you do, please report
them; your bug reports are valuable contributions to the FSF, since
they allow us to notice and fix problems on machines we don't have, or
in code we don't use often.  Please send bug reports to the mailing
list bug-gnu-emacs@gnu.org.  If possible, use M-x report-emacs-bug.

See the "Bugs" section of the Emacs manual for more information on how
to report bugs.  (The file 'BUGS' in this directory explains how you
can find and read that section using the Info files that come with
Emacs.)  For a list of mailing lists related to Emacs, see
&amp;lt;&lt;a href="https://savannah.gnu.org/mail/?group=emacs" rel="nofollow"&gt;https://savannah.gnu.org/mail/?group=emacs&lt;/a&gt;&amp;gt;.  For the complete
list of GNU mailing lists, see &amp;lt;&lt;a href="https://lists.gnu.org/" rel="nofollow"&gt;https://lists.gnu.org/&lt;/a&gt;&amp;gt;.

The 'etc' subdirectory contains several other files, named in capital
letters, which you might consider looking at when installing GNU
Emacs.

The file 'configure' is a shell script to acclimate Emacs to the
oddities of your processor and operating system.  It creates the file
'Makefile' (a script for the 'make' program), which automates the
process of building and installing Emacs.  See INSTALL for more
detailed information.

The file 'configure.ac' is the input used by the autoconf program to
construct the 'configure' script.

The shell script 'autogen.sh' generates 'configure' and other files by
running Autoconf (which in turn uses GNU m4), and configures files in
the .git subdirectory if you are using Git.  If you want to use it,
you will need to install recent versions of these build tools.  This
should be needed only if you edit files like 'configure.ac' that
specify Emacs's autobuild procedure.

The file 'Makefile.in' is a template used by 'configure' to create
'Makefile'.

The file 'make-dist' is a shell script to build a distribution tar
file from the current Emacs tree, containing only those files
appropriate for distribution.  If you make extensive changes to Emacs,
this script will help you distribute your version to others.

There are several subdirectories:

'src'       holds the C code for Emacs (the Emacs Lisp interpreter and
            its primitives, the redisplay code, and some basic editing
            functions).
'lisp'      holds the Emacs Lisp code for Emacs (most everything else).
'leim'      holds the original source files for the generated files
            in lisp/leim.  These form the library of Emacs input methods,
            required to type international characters that can't be
            directly produced by your keyboard.
'lib'       holds source code for libraries used by Emacs and its utilities
'lib-src'   holds the source code for some utility programs for use by or
            with Emacs, like movemail and etags.
'lwlib'     holds the sources of the Lucid Widget Library used on X.
'oldXMenu'  source files from X11R2 XMenu library, used in non-toolkit builds.
'etc'       holds miscellaneous architecture-independent data files Emacs
            uses, like the tutorial text and tool bar images.
            The contents of the 'lisp', 'leim', 'info', and 'doc'
            subdirectories are architecture-independent too.
'info'      holds the Info documentation tree for Emacs.
'doc/emacs' holds the source code for the Emacs Manual.  If you modify the
            manual sources, you will need the 'makeinfo' program to produce
            an updated manual.  'makeinfo' is part of the GNU Texinfo
            package; you need a suitably recent version of Texinfo.
'doc/lispref'   holds the source code for the Emacs Lisp reference manual.
'doc/lispintro' holds the source code for the Introduction to Programming
                in Emacs Lisp manual.
'msdos'     holds configuration files for compiling Emacs under MS-DOS.
'nextstep'  holds instructions and some other files for compiling the
            Nextstep port of Emacs, for GNUstep and macOS Cocoa.
'nt'        holds code and documentation for building Emacs on MS-Windows.
'test'      holds tests for various aspects of Emacs's functionality.
'modules'   holds the modhelp.py helper script.
'admin'     holds files used by Emacs developers, and Unicode data files.
'build-aux' holds auxiliary files used during the build.
'm4'        holds Autoconf macros used for generating the configure script.

   Building Emacs on non-Posix platforms requires tools that aren't part
of the standard distribution of the OS.  The platform-specific README
files and installation instructions should list the required tools.


NOTE ON COPYRIGHT YEARS

In copyright notices where the copyright holder is the Free Software
Foundation, then where a range of years appears, this is an inclusive
range that applies to every year in the range.  For example: 2005-2008
represents the years 2005, 2006, 2007, and 2008.


This file is part of GNU Emacs.

GNU Emacs is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

GNU Emacs is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with GNU Emacs.  If not, see &amp;lt;&lt;a href="https://www.gnu.org/licenses/" rel="nofollow"&gt;https://www.gnu.org/licenses/&lt;/a&gt;&amp;gt;.
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</description><author>emacs-mirror</author><guid isPermaLink="false">https://github.com/emacs-mirror/emacs</guid><pubDate>Fri, 24 Jan 2020 00:05:00 GMT</pubDate></item><item><title>purcell/emacs.d #6 in Emacs Lisp, Today</title><link>https://github.com/purcell/emacs.d</link><description>&lt;p&gt;&lt;i&gt;An Emacs configuration bundle with batteries included&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;p&gt;&lt;a href="https://travis-ci.org/purcell/emacs.d" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/b8a87eebb8a6e54125f954452f35408a22640b72/68747470733a2f2f7472617669732d63692e6f72672f70757263656c6c2f656d6163732e642e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/purcell/emacs.d.svg?branch=master" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://www.patreon.com/sanityinc" rel="nofollow"&gt;&lt;img alt="Support me" src="https://camo.githubusercontent.com/26516b72afb49b1e2a56e48954bf1d5c14d08e95/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f537570706f72742532304d652d2546302539462539322539372d6666363962342e737667" data-canonical-src="https://img.shields.io/badge/Support%20Me-%F0%9F%92%97-ff69b4.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-a-reasonable-emacs-config" class="anchor" aria-hidden="true" href="#a-reasonable-emacs-config"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;A reasonable Emacs config&lt;/h1&gt;
&lt;p&gt;This is my emacs configuration tree, continually used and tweaked
since 2000, and it may be a good starting point for other Emacs
users, especially web developers. These days it's
somewhat geared towards OS X, but it is known to also work on Linux
and Windows.&lt;/p&gt;
&lt;p&gt;Emacs itself comes with support for many programming languages. This
config adds improved defaults and extended support for the following, listed
in the approximate order of how much I use them, from most to least:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Haskell / Purescript / Elm&lt;/li&gt;
&lt;li&gt;Ruby / Ruby on Rails&lt;/li&gt;
&lt;li&gt;CSS / LESS / SASS / SCSS&lt;/li&gt;
&lt;li&gt;Javascript / Typescript / Coffeescript&lt;/li&gt;
&lt;li&gt;HTML / HAML / Markdown / Textile / ERB&lt;/li&gt;
&lt;li&gt;Rust&lt;/li&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;li&gt;Clojure (with Cider and nRepl)&lt;/li&gt;
&lt;li&gt;Common Lisp (with Slime)&lt;/li&gt;
&lt;li&gt;PHP&lt;/li&gt;
&lt;li&gt;Erlang&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In particular, there's a nice config for &lt;em&gt;autocompletion&lt;/em&gt; with
&lt;a href="https://company-mode.github.io/" rel="nofollow"&gt;company&lt;/a&gt;, and
&lt;a href="http://www.flycheck.org" rel="nofollow"&gt;flycheck&lt;/a&gt; is used to immediately highlight
syntax errors in Ruby, Python, Javascript, Haskell and a number of
other languages.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-supported-emacs-versions" class="anchor" aria-hidden="true" href="#supported-emacs-versions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Supported Emacs versions&lt;/h2&gt;
&lt;p&gt;The config should run on Emacs 24.4 or greater and is designed to
degrade smoothly - see the Travis build - but note that much newer
versions are required for an increasing number of key packages, so to
get full functionality you should use the latest Emacs version
available to you.&lt;/p&gt;
&lt;p&gt;Some Windows users might need to follow
&lt;a href="http://xn--9dbdkw.se/diary/how_to_enable_GnuTLS_for_Emacs_24_on_Windows/index.en.html" rel="nofollow"&gt;these instructions&lt;/a&gt;
to get TLS (ie. SSL) support included in their Emacs.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-other-requirements" class="anchor" aria-hidden="true" href="#other-requirements"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Other requirements&lt;/h2&gt;
&lt;p&gt;To make the most of the programming language-specific support in this
config, further programs will likely be required, particularly those
that &lt;a href="https://github.com/flycheck/flycheck"&gt;flycheck&lt;/a&gt; uses to provide
on-the-fly syntax checking.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installation&lt;/h2&gt;
&lt;p&gt;To install, clone this repo to &lt;code&gt;~/.emacs.d&lt;/code&gt;, i.e. ensure that the
&lt;code&gt;init.el&lt;/code&gt; contained in this repo ends up at &lt;code&gt;~/.emacs.d/init.el&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clone https://github.com/purcell/emacs.d.git ~/.emacs.d
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Upon starting up Emacs for the first time, further third-party
packages will be automatically downloaded and installed. If you
encounter any errors at that stage, try restarting Emacs, and possibly
running &lt;code&gt;M-x package-refresh-contents&lt;/code&gt; before doing so.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-updates" class="anchor" aria-hidden="true" href="#updates"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Updates&lt;/h2&gt;
&lt;p&gt;Update the config with &lt;code&gt;git pull&lt;/code&gt;. You'll probably also want/need to update
the third-party packages regularly too:&lt;/p&gt;
&lt;p&gt;&lt;kbd&gt;M-x package-list-packages&lt;/kbd&gt;, then &lt;kbd&gt;U&lt;/kbd&gt; followed by &lt;kbd&gt;x&lt;/kbd&gt;.&lt;/p&gt;
&lt;p&gt;You should usually restart Emacs after pulling changes or updating
packages so that they can take effect. Emacs should usually restore
your working buffers when you restart due to this configuration's use
of the &lt;code&gt;desktop&lt;/code&gt; and &lt;code&gt;session&lt;/code&gt; packages.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-changing-themes-and-adding-your-own-customization" class="anchor" aria-hidden="true" href="#changing-themes-and-adding-your-own-customization"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Changing themes and adding your own customization&lt;/h2&gt;
&lt;p&gt;To add your own customization, use &lt;kbd&gt;M-x customize&lt;/kbd&gt;, &lt;kbd&gt;M-x
customize-themes&lt;/kbd&gt; etc. and/or create a file
&lt;code&gt;~/.emacs.d/lisp/init-local.el&lt;/code&gt; which looks like this:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;... your code here ...

(&lt;span class="pl-c1"&gt;provide&lt;/span&gt; &lt;span class="pl-c1"&gt;'init-local&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you need initialisation code which executes earlier in the startup process,
you can also create an &lt;code&gt;~/.emacs.d/lisp/init-preload-local.el&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;If you plan to customize things more extensively, you should probably
just fork the repo and hack away at the config to make it your own!
Remember to regularly merge in changes from this repo, so that your
config remains compatible with the latest package and Emacs versions.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Please note that I cannot provide support for customised versions of
this configuration.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-similar-configs" class="anchor" aria-hidden="true" href="#similar-configs"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Similar configs&lt;/h2&gt;
&lt;p&gt;You might also want to check out &lt;code&gt;emacs-starter-kit&lt;/code&gt; and &lt;code&gt;prelude&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-support--issues" class="anchor" aria-hidden="true" href="#support--issues"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Support / issues&lt;/h2&gt;
&lt;p&gt;If you hit any problems, please first ensure that you are using the latest version
of this code, and that you have updated your packages to the most recent available
versions (see "Updates" above). If you still experience problems, go ahead and
&lt;a href="https://github.com/purcell/emacs.d"&gt;file an issue on the github project&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;-Steve Purcell&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href="https://www.patreon.com/sanityinc" rel="nofollow"&gt;&lt;g-emoji class="g-emoji" alias="gift_heart" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f49d.png"&gt;💝&lt;/g-emoji&gt; Support this project and my other Open Source work&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://uk.linkedin.com/in/stevepurcell" rel="nofollow"&gt;&lt;g-emoji class="g-emoji" alias="briefcase" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4bc.png"&gt;💼&lt;/g-emoji&gt; LinkedIn profile&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.sanityinc.com/" rel="nofollow"&gt;✍ sanityinc.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://twitter.com/sanityinc" rel="nofollow"&gt;&lt;g-emoji class="g-emoji" alias="bird" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f426.png"&gt;🐦&lt;/g-emoji&gt; @sanityinc&lt;/a&gt;&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>purcell</author><guid isPermaLink="false">https://github.com/purcell/emacs.d</guid><pubDate>Fri, 24 Jan 2020 00:06:00 GMT</pubDate></item><item><title>rmloveland/zoom-to-point #7 in Emacs Lisp, Today</title><link>https://github.com/rmloveland/zoom-to-point</link><description>&lt;p&gt;&lt;i&gt;Emacs functions that zoom in on the text at point.&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="" data-path="README"&gt;&lt;div class="plain"&gt;&lt;pre style="white-space: pre-wrap"&gt;Exposes a command, `zoom-toggle', which will increase or decrease the
size of the text at point, and a variable, `*default-zoom-level*',
which determines the change in size.
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</description><author>rmloveland</author><guid isPermaLink="false">https://github.com/rmloveland/zoom-to-point</guid><pubDate>Fri, 24 Jan 2020 00:07:00 GMT</pubDate></item><item><title>emacs-lsp/lsp-mode #8 in Emacs Lisp, Today</title><link>https://github.com/emacs-lsp/lsp-mode</link><description>&lt;p&gt;&lt;i&gt;Emacs client/library for the Language Server Protocol&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="org" data-path="README.org"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;p&gt;&lt;a href="https://melpa.org/#/lsp-mode" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/9af67d09707b47dd26115a48505d481f9dcdd805/68747470733a2f2f6d656c70612e6f72672f7061636b616765732f6c73702d6d6f64652d62616467652e737667" alt="https://melpa.org/packages/lsp-mode-badge.svg" data-canonical-src="https://melpa.org/packages/lsp-mode-badge.svg" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a href="https://stable.melpa.org/#/lsp-mode" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/7a2cc5cd5fb1a171dde8e45435a353f849853123/68747470733a2f2f737461626c652e6d656c70612e6f72672f7061636b616765732f6c73702d6d6f64652d62616467652e737667" alt="https://stable.melpa.org/packages/lsp-mode-badge.svg" data-canonical-src="https://stable.melpa.org/packages/lsp-mode-badge.svg" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a href="https://gitter.im/emacs-lsp/lsp-mode" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/40a1fe7a717b706a101e6e1d917dfdb3f422a8c3/68747470733a2f2f6261646765732e6769747465722e696d2f656d6163732d6c73702f6c73702d6d6f64652e737667" alt="https://badges.gitter.im/emacs-lsp/lsp-mode.svg" data-canonical-src="https://badges.gitter.im/emacs-lsp/lsp-mode.svg" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a href="https://travis-ci.org/emacs-lsp/lsp-mode" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/5674691682ca175709f1682ede1931f44a188aef/68747470733a2f2f7472617669732d63692e6f72672f656d6163732d6c73702f6c73702d6d6f64652e7376673f6272616e63683d6d6173746572" alt="https://travis-ci.org/emacs-lsp/lsp-mode.svg?branch=master" data-canonical-src="https://travis-ci.org/emacs-lsp/lsp-mode.svg?branch=master" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a href="https://coveralls.io/github/emacs-lsp/lsp-mode" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/536576b840965fd3ec331aeec141a1dc36469075/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f656d6163732d6c73702f6c73702d6d6f64652f62616467652e737667" alt="https://coveralls.io/repos/github/emacs-lsp/lsp-mode/badge.svg" data-canonical-src="https://coveralls.io/repos/github/emacs-lsp/lsp-mode/badge.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="examples/logo.png"&gt;&lt;img src="examples/logo.png" alt="examples/logo.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-language-server-protocol-support-for-emacs" class="anchor" aria-hidden="true" href="#language-server-protocol-support-for-emacs"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Language Server Protocol Support for Emacs&lt;/h1&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="examples/head.png"&gt;&lt;img src="examples/head.png" alt="examples/head.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-table-of-contents" class="anchor" aria-hidden="true" href="#table-of-contents"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Table of Contents&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="#language-server-protocol-support-for-emacs"&gt;Language Server Protocol Support for Emacs&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href="#why"&gt;Why?&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#overview"&gt;Overview&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#installation"&gt;Installation&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href="#install-via-melpa"&gt;Install via melpa&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href="#configuration"&gt;Configuration&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href="#install-language-server"&gt;Install language server&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href="#configure-lsp-mode"&gt;Configure lsp-mode&lt;/a&gt;
            &lt;ul&gt;
              &lt;li&gt;&lt;a href="#vanilla-emacs"&gt;Vanilla Emacs&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href="#spacemacs"&gt;Spacemacs&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href="#use-package"&gt;use-package&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href="#docker"&gt;Docker&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;&lt;a href="#how-does-it-work"&gt;How does it work?&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href="#supported-languages"&gt;Supported languages&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#commands"&gt;Commands&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#settings"&gt;Settings&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#screenshots"&gt;Screenshots&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#extensions"&gt;Extensions&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href="#tramp"&gt;TRAMP&lt;/a&gt;
            &lt;ul&gt;
              &lt;li&gt;&lt;a href="#how-does-it-work-1"&gt;How does it work?&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href="#sample-configuration"&gt;Sample configuration&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href="#dealing-with-stderr"&gt;Dealing with stderr&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href="#limitations"&gt;Limitations&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href="#file-watches"&gt;File watches&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href="#contributions"&gt;Contributions&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href="#members"&gt;Members&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href="#troubleshooting"&gt;Troubleshooting&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#adding-support-for-languages"&gt;Adding support for languages&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href="#registering-server"&gt;Registering server&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href="#sections"&gt;Sections&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href="#faq"&gt;FAQ&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#see-also"&gt;See also&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-why" class="anchor" aria-hidden="true" href="#why"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Why?&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;g-emoji class="g-emoji" alias="heart" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2764.png"&gt;❤️&lt;/g-emoji&gt; &lt;b&gt;Community Driven&lt;/b&gt;&lt;/li&gt;
  &lt;li&gt;&lt;g-emoji class="g-emoji" alias="gem" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f48e.png"&gt;💎&lt;/g-emoji&gt; &lt;b&gt;Fully featured&lt;/b&gt; - supports &lt;b&gt;all&lt;/b&gt; features in Language Server Protocol v3.14.&lt;/li&gt;
  &lt;li&gt;&lt;g-emoji class="g-emoji" alias="rocket" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f680.png"&gt;🚀&lt;/g-emoji&gt; &lt;b&gt;Easy to configure&lt;/b&gt; - works out of the box and automatically upgrades if additional packages are present&lt;/li&gt;
  &lt;li&gt;&lt;g-emoji class="g-emoji" alias="star2" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f31f.png"&gt;🌟&lt;/g-emoji&gt; &lt;b&gt;Flexible&lt;/b&gt; - could be configured as full-blown IDE with flashy UI or minimal distraction free&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-overview" class="anchor" aria-hidden="true" href="#overview"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Overview&lt;/h2&gt;
&lt;p&gt;Client for &lt;a href="https://github.com/Microsoft/language-server-protocol/"&gt;Language Server Protocol&lt;/a&gt; (v3.14). &lt;a href="https://github.com/emacs-lsp/lsp-mode"&gt;lsp-mode&lt;/a&gt; aims to provide IDE-like experience by providing optional integration with the most popular Emacs packages like &lt;code&gt;company&lt;/code&gt;, &lt;code&gt;flycheck&lt;/code&gt; and &lt;code&gt;projectile&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Non-blocking asynchronous calls&lt;/li&gt;
  &lt;li&gt;Real-time Diagnostics/linting (via builtin &lt;code&gt;flymake&lt;/code&gt; when Emacs &amp;gt; 26, requires flymake&amp;gt;=1.0.5 or &lt;a href="https://github.com/flycheck/flycheck"&gt;flycheck&lt;/a&gt;/&lt;a href="https://github.com/emacs-lsp/lsp-ui"&gt;lsp-ui&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Code completion - using &lt;a href="https://github.com/tigersoldier/company-lsp"&gt;company-lsp&lt;/a&gt; or builtin &lt;code&gt;completion-at-point&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Hovers - using &lt;a href="https://github.com/emacs-lsp/lsp-ui"&gt;lsp-ui&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Code actions - using &lt;code&gt;lsp-execute-code-action&lt;/code&gt; or &lt;a href="https://github.com/emacs-lsp/lsp-ui"&gt;lsp-ui&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Code outline - using builtin &lt;a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Imenu.html" rel="nofollow"&gt;imenu&lt;/a&gt; or &lt;code&gt;helm-imenu&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Code navigation - using builtin &lt;a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Xref.html" rel="nofollow"&gt;xref&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Code lens (references/implementations) - using builtin &lt;a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Xref.html" rel="nofollow"&gt;xref&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Highlights&lt;/li&gt;
  &lt;li&gt;Formatting&lt;/li&gt;
  &lt;li&gt;Debugger - &lt;a href="https://github.com/yyoncho/dap-mode/"&gt;dap-mode&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Helm integration - &lt;a href="https://github.com/emacs-lsp/helm-lsp/"&gt;helm-lsp&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Ivy integration - &lt;a href="https://github.com/emacs-lsp/lsp-ivy/"&gt;lsp-ivy&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Treemacs integration - &lt;a href="https://github.com/emacs-lsp/lsp-treemacs"&gt;lsp-treemacs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Semantic highlighting (as currently implemented by JDT LS and unreleased builds of clangd, cf. &lt;a href="https://github.com/microsoft/vscode-languageserver-node/pull/367"&gt;Semantic highlighting spec&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installation&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-install-via-melpa" class="anchor" aria-hidden="true" href="#install-via-melpa"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Install via melpa&lt;/h3&gt;
&lt;p&gt;The recommended way to install &lt;code&gt;lsp-mode&lt;/code&gt; is via &lt;code&gt;package.el&lt;/code&gt; - the built-in package manager in Emacs. &lt;code&gt;lsp-mode&lt;/code&gt; is available on the two major &lt;code&gt;package.el&lt;/code&gt; community maintained repos - &lt;a href="http://stable.melpa.org" rel="nofollow"&gt;MELPA Stable&lt;/a&gt; and &lt;a href="http://melpa.org" rel="nofollow"&gt;MELPA&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;M-x &lt;code&gt;package-install&lt;/code&gt; [RET] &lt;code&gt;lsp-mode&lt;/code&gt; [RET]&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-configuration" class="anchor" aria-hidden="true" href="#configuration"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Configuration&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-install-language-server" class="anchor" aria-hidden="true" href="#install-language-server"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Install language server&lt;/h3&gt;
&lt;p&gt;Check the table bellow with the list of supported servers and the corresponding instructions on how to install the server.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-configure-lsp-mode" class="anchor" aria-hidden="true" href="#configure-lsp-mode"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Configure lsp-mode&lt;/h3&gt;
&lt;h4&gt;&lt;a id="user-content-vanilla-emacs" class="anchor" aria-hidden="true" href="#vanilla-emacs"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Vanilla Emacs&lt;/h4&gt;
&lt;p&gt;You could go minimal and use &lt;code&gt;lsp-mode&lt;/code&gt; as it is without external packages with the built-in &lt;code&gt;flymake&lt;/code&gt; and &lt;code&gt;completion-at-point&lt;/code&gt; or you could install the following extensions for better experience:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;install &lt;a href="https://github.com/emacs-lsp/lsp-ui"&gt;lsp-ui&lt;/a&gt; for &lt;a href="https://github.com/flycheck/flycheck"&gt;flycheck&lt;/a&gt; integration and higher level UI modules.&lt;/li&gt;
  &lt;li&gt;install &lt;a href="https://github.com/tigersoldier/company-lsp"&gt;company-lsp&lt;/a&gt; if you want to use &lt;code&gt;company-mode&lt;/code&gt; for completion.&lt;/li&gt;
  &lt;li&gt;install &lt;a href="https://github.com/emacs-lsp/lsp-treemacs"&gt;lsp-treemacs&lt;/a&gt; for project wide error overview.&lt;/li&gt;
  &lt;li&gt;install &lt;a href="https://github.com/emacs-lsp/helm-lsp"&gt;helm-lsp&lt;/a&gt; provides on type completion for &lt;code&gt;xref-apropos&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;install &lt;a href="https://github.com/emacs-lsp/dap-mode"&gt;dap-mode&lt;/a&gt; if your language is supported by the debugger.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;require&lt;/span&gt; &lt;span class="pl-c1"&gt;'lsp-mode&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;add-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;'XXX-mode-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;#&lt;span class="pl-c1"&gt;'lsp&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;where &lt;code&gt;XXX&lt;/code&gt; could be major mode like &lt;code&gt;python&lt;/code&gt;, &lt;code&gt;java&lt;/code&gt;, &lt;code&gt;c++&lt;/code&gt;. Alternatively, if you want to minimize you configuration you may use &lt;code&gt;prog-mode-hook&lt;/code&gt;. In case you do that, &lt;code&gt;lsp&lt;/code&gt; will try to start for each programming mode and echo a message when there is no client registered for the current mode or if the corresponding server is not present. In addition, &lt;code&gt;lsp-mode&lt;/code&gt; will automatically detect and configure &lt;a href="https://github.com/emacs-lsp/lsp-ui"&gt;lsp-ui&lt;/a&gt; and &lt;a href="https://github.com/tigersoldier/company-lsp"&gt;company-lsp&lt;/a&gt;. To turn off that behavior you could set &lt;code&gt;lsp-auto-configure&lt;/code&gt; to &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To defer LSP server startup (and DidOpen notifications) until the buffer is visible you can use &lt;code&gt;lsp-deferred&lt;/code&gt; instead of &lt;code&gt;lsp&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;add-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;'XXX-mode-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;#&lt;span class="pl-c1"&gt;'lsp-deferred&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content-spacemacs" class="anchor" aria-hidden="true" href="#spacemacs"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Spacemacs&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://github.com/emacs-lsp/lsp-mode"&gt;lsp-mode&lt;/a&gt; is included in spacemacs develop branch. Add &lt;code&gt;lsp&lt;/code&gt; to &lt;code&gt;dotspacemacs-configuration-layers&lt;/code&gt; and configure the language that you want to use to be backed by &lt;code&gt;lsp&lt;/code&gt; backend.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-use-package" class="anchor" aria-hidden="true" href="#use-package"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;use-package&lt;/h4&gt;
&lt;p&gt;Replace &lt;code&gt;(require 'lsp-mode)&lt;/code&gt; with the following if you use use-package.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; lsp-mode
  &lt;span class="pl-c1"&gt;:hook&lt;/span&gt; (XXX-mode &lt;span class="pl-k"&gt;.&lt;/span&gt; lsp)
  &lt;span class="pl-c1"&gt;:commands&lt;/span&gt; lsp)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; optionally&lt;/span&gt;
(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; lsp-ui &lt;span class="pl-c1"&gt;:commands&lt;/span&gt; lsp-ui-mode)
(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; company-lsp &lt;span class="pl-c1"&gt;:commands&lt;/span&gt; company-lsp)
(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; helm-lsp &lt;span class="pl-c1"&gt;:commands&lt;/span&gt; helm-lsp-workspace-symbol)
(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; lsp-treemacs &lt;span class="pl-c1"&gt;:commands&lt;/span&gt; lsp-treemacs-errors-list)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; optionally if you want to use debugger&lt;/span&gt;
(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; dap-mode)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; (use-package dap-LANGUAGE) to load the dap adapter for your language&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To defer LSP server startup (and DidOpen notifications) until the buffer is visible you can use &lt;code&gt;lsp-deferred&lt;/code&gt; instead of &lt;code&gt;lsp&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; lsp-mode
  &lt;span class="pl-c1"&gt;:hook&lt;/span&gt; (XXX-mode &lt;span class="pl-k"&gt;.&lt;/span&gt; lsp-deferred)
  &lt;span class="pl-c1"&gt;:commands&lt;/span&gt; (lsp lsp-deferred))&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content-docker" class="anchor" aria-hidden="true" href="#docker"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Docker&lt;/h4&gt;
&lt;p&gt;Refer to &lt;a href="https://github.com/emacs-lsp/lsp-docker/"&gt;lsp-docker&lt;/a&gt; README which provide a guide how you can run &lt;code&gt;lsp-mode&lt;/code&gt; in &lt;code&gt;docker&lt;/code&gt; container.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-how-does-it-work" class="anchor" aria-hidden="true" href="#how-does-it-work"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;How does it work?&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;lsp-mode&lt;/code&gt; has predefined list of server configurations (loaded in &lt;code&gt;lsp-clients.el&lt;/code&gt;) containing a mapping from &lt;code&gt;major-mode&lt;/code&gt; to the server configuration or by using activation function. In addition to the default server configuration located in &lt;code&gt;lsp-clients.el&lt;/code&gt; there are few languages servers which require separate package(check &lt;a href="#supported-languages"&gt;Supported languages&lt;/a&gt;). When you open a file from a particular project &lt;code&gt;lsp-mode&lt;/code&gt; and call &lt;code&gt;lsp&lt;/code&gt; command &lt;code&gt;lsp-mode&lt;/code&gt; will look for server registrations able to handle current file. If there is such client &lt;code&gt;lsp-mode&lt;/code&gt; will look for the project root. If you open a file from the project for the first time you will be prompted to define the current project root. Once the project root is selected it is saved in &lt;code&gt;lsp-session&lt;/code&gt; file and it will be loaded the next time you start Emacs so you no longer will be asked for a project root when you open a file from that project. Later if you want to change the project root you may use &lt;code&gt;lsp-workspace-folder-remove&lt;/code&gt; to remove the project and call &lt;code&gt;lsp-workspace-folder-add&lt;/code&gt; to add the root. If you want to force starting a particular language server in a file you may use &lt;code&gt;C-u&lt;/code&gt; &lt;code&gt;M-x&lt;/code&gt; &lt;code&gt;lsp&lt;/code&gt; which will prompt you to select language server to start.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-supported-languages" class="anchor" aria-hidden="true" href="#supported-languages"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Supported languages&lt;/h2&gt;
&lt;p&gt;Some of the servers are directly supported by &lt;code&gt;lsp-mode&lt;/code&gt; by requiring
  &lt;code&gt;lsp-clients.el&lt;/code&gt; while others require installing additional packages which provide
  server specific functionality.&lt;/p&gt;
&lt;table&gt;
  &lt;tbody&gt;&lt;tr&gt;&lt;th&gt;Language&lt;/th&gt;&lt;th&gt;Language Server&lt;/th&gt;&lt;th&gt;Built-in&lt;/th&gt;&lt;th&gt;Installation command&lt;/th&gt;&lt;th&gt;Debugger&lt;/th&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Ada&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/AdaCore/ada_language_server"&gt;ada_language_server&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/AdaCore/ada_language_server#install"&gt;Installation instructions&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes (gdb)&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Angular&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/angular/vscode-ng-language-service/"&gt;vscode-ng-language-service&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/emacs-lsp/lsp-mode/wiki/Install-Angular-Language-server"&gt;Installation instructions&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Not relevant&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Bash&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/mads-hartmann/bash-language-server"&gt;bash-language-server&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;npm i -g bash-language-server&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;C++&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/MaskRay/ccls"&gt;ccls&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/MaskRay/emacs-ccls"&gt;emacs-ccls&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/MaskRay/ccls"&gt;ccls&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes (gdb or lldb)&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;C++&lt;/td&gt;&lt;td&gt;&lt;a href="https://clang.llvm.org/extra/clangd.html" rel="nofollow"&gt;clangd&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://clang.llvm.org/extra/clangd.html" rel="nofollow"&gt;clangd&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes (gdb or lldb)&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;C++&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/cquery-project/cquery"&gt;cquery&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/cquery-project/emacs-cquery"&gt;emacs-cquery&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/cquery-project/cquery"&gt;cquery&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes (gdb or lldb)&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;C#&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/OmniSharp/omnisharp-roslyn"&gt;OmniSharp-Roslyn&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/OmniSharp/omnisharp-roslyn"&gt;OmniSharp-Roslyn&lt;/a&gt;&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Clojure&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/snoe/clojure-lsp"&gt;clojure-lsp&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/snoe/clojure-lsp"&gt;clojure-lsp&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Crystal&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/crystal-lang-tools/scry"&gt;scry&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/crystal-lang-tools/scry"&gt;scry&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;CSS/LessCSS/SASS/SCSS&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/vscode-langservers/vscode-css-languageserver-bin"&gt;css&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;npm install -g vscode-css-languageserver-bin&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Dart&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/dart-lang/sdk/blob/master/pkg/analysis_server/tool/lsp_spec/README.md"&gt;dart_analysis_server&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;built into dart-sdk&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Dockerfile&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/rcjsuen/dockerfile-language-server-nodejs"&gt;dockerfile-language-server-nodejs&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;npm install -g dockerfile-language-server-nodejs&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Dart&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/natebosch/dart_language_server"&gt;dart_language_server&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;pub global activate dart_language_server&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Elixir&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/JakeBecker/elixir-ls"&gt;elixir-ls&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/JakeBecker/elixir-ls"&gt;elixir-ls&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Elm&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/elm-tooling/elm-language-server"&gt;elmLS&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;npm i -g @elm-tooling/elm-language-server, or clone the repository and follow installation instructions&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Erlang&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/erlang-ls/erlang_ls"&gt;erlang_ls&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/erlang-ls/erlang_ls"&gt;erlang_ls&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Eslint&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/Microsoft/vscode-eslint"&gt;eslint&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/emacs-lsp/lsp-mode/wiki/LSP-ESlint-integration"&gt;LSP ESLint Guide&lt;/a&gt;&lt;/td&gt;&lt;td&gt;N/A&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;F#&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/fsharp/FsAutoComplete"&gt;fsautocomplete&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Automatic by &lt;a href="https://github.com/emacs-lsp/lsp-mode/blob/master/lsp-fsharp.el"&gt;lsp-fsharp&lt;/a&gt;&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Fortran&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/hansec/fortran-language-server"&gt;fortran-language-server&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;pip install fortran-language-server&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Go&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/golang/tools/tree/master/gopls"&gt;gopls&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;code&gt;go get golang.org/x/tools/gopls@latest&lt;/code&gt; &lt;a href="https://github.com/golang/tools/blob/master/gopls/doc/user.md#installation"&gt;docs&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Go&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/saibing/bingo"&gt;bingo&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/saibing/bingo/wiki/Install"&gt;bingo&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Groovy&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/prominic/groovy-language-server"&gt;groovy-language-server&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/prominic/groovy-language-server"&gt;groovy-language-server&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Hack&lt;/td&gt;&lt;td&gt;&lt;a href="https://docs.hhvm.com/hhvm/" rel="nofollow"&gt;hhvm&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://docs.hhvm.com/hhvm/installation/introduction" rel="nofollow"&gt;hhvm&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;HTML&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/vscode-langservers/vscode-html-languageserver"&gt;html&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;npm install -g vscode-html-languageserver-bin&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Haskell&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/haskell/haskell-ide-engine"&gt;IDE engine&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/emacs-lsp/lsp-haskell"&gt;lsp-haskell&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/haskell/haskell-ide-engine"&gt;IDE engine&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Lua&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/EmmyLua/EmmyLua-LanguageServer"&gt;EmmyLua&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/emacs-lsp/lsp-mode/wiki/Install-EmmyLua-Language-server"&gt;Installation&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Java&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/eclipse/eclipse.jdt.ls"&gt;Eclipse JDT LS&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/emacs-lsp/lsp-java"&gt;lsp-java&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Automatic by &lt;a href="https://github.com/emacs-lsp/lsp-java"&gt;lsp-java&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;JavaScript/TypeScript&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/theia-ide/typescript-language-server"&gt;typescript-language-server&lt;/a&gt;  (recommended)&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;npm i -g typescript-language-server; npm i -g typescript&lt;/td&gt;&lt;td&gt;Yes (Firefox/Chrome)&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;JavaScript/TypeScript&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/sourcegraph/javascript-typescript-langserver"&gt;javascript-typescript-stdio&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;npm i -g javascript-typescript-langserver&lt;/td&gt;&lt;td&gt;Yes (Firefox/Chrome)&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;JavaScript Flow&lt;/td&gt;&lt;td&gt;&lt;a href="https://flow.org" rel="nofollow"&gt;flow&lt;/a&gt; (add-on if working on a Flow file)&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://flow.org" rel="nofollow"&gt;flow&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes (Firefox/Chrome)&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Json&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/vscode-langservers/vscode-json-languageserver"&gt;vscode-json-languageserver&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Automatic or manual by &lt;code&gt;npm i -g vscode-json-languageserver&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Julia&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/non-Jedi/lsp-julia"&gt;lsp-julia&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/non-Jedi/lsp-julia"&gt;lsp-julia&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/JuliaEditorSupport/LanguageServer.jl"&gt;LanguageServer.jl&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Kotlin&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/fwcd/KotlinLanguageServer"&gt;kotlin-language-server&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/fwcd/KotlinLanguageServer"&gt;kotlin-language-server&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Nim&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/PMunch/nimlsp"&gt;nimlsp&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;code&gt;nimble install nimlsp&lt;/code&gt;&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;OCaml&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/ocaml-lsp/ocaml-language-server"&gt;ocaml-language-server&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/ocaml-lsp/ocaml-language-server"&gt;ocaml-language-server&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;OCaml&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/ocaml/ocaml-lsp"&gt;ocaml-lsp-server&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/ocaml/ocaml-lsp"&gt;ocaml-lsp-server&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;PHP(recommended)&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/bmewburn/vscode-intelephense"&gt;intelephense&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;npm i intelephense -g&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;PHP&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/felixfbecker/php-language-server"&gt;php-language-server&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/felixfbecker/php-language-server"&gt;php-language-server&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Powershell&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/PowerShell/PowerShellEditorServices"&gt;PowerShellEditorServices&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Automatic&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Python&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/palantir/python-language-server"&gt;pyls&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;pip install ‘python-language-server[all]’&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Python(Microsoft)&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/Microsoft/python-language-server"&gt;Microsoft Python Language Server&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/emacs-lsp/lsp-python-ms"&gt;lsp-python-ms&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/emacs-lsp/lsp-python-ms"&gt;lsp-python-ms&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;R&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/REditorSupport/languageserver"&gt;languageserver&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;install.packages(“languageserver”)&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Ruby&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/castwide/solargraph"&gt;solargraph&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;gem install solargraph&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Rust&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/rust-lang/rls"&gt;rls&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/rust-lang/rls"&gt;rls&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Rust&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/rust-analyzer/rust-analyzer"&gt;rust-analyzer&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/rust-analyzer/rust-analyzer#language-server-quick-start"&gt;rust-analyzer&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Scala&lt;/td&gt;&lt;td&gt;&lt;a href="https://scalameta.org/metals" rel="nofollow"&gt;Metals&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;a href="https://scalameta.org/metals/docs/editors/emacs.html" rel="nofollow"&gt;Metals&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Swift&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/apple/sourcekit-lsp"&gt;sourcekit-LSP&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/emacs-lsp/lsp-sourcekit"&gt;lsp-sourcekit&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/apple/sourcekit-lsp"&gt;sourcekit-LSP&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes (via llvm debug adapter)&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Terraform&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/juliosueiras/terraform-lsp"&gt;terraform-lsp&lt;/a&gt;&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;Git clone outside of &lt;code&gt;$GOPATH&lt;/code&gt;; go install. (Requires go &amp;gt; 1.11)&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;TeX, LaTeX, etc.&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/astoff/digestif"&gt;Digestif&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;luarocks --server &lt;a href="http://luarocks.org/dev" rel="nofollow"&gt;http://luarocks.org/dev&lt;/a&gt; install digestif&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Verilog/SystemVerilog&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/suoto/hdl_checker"&gt;hdl_checker&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;pip install hdl-checker –upgrade&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;VHDL&lt;/td&gt;&lt;td&gt;&lt;a href="http://www.vhdltool.com" rel="nofollow"&gt;VHDL Tool&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Download from &lt;a href="http://www.vhdltool.com/download" rel="nofollow"&gt;http://www.vhdltool.com/download&lt;/a&gt;&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Vimscript&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/iamcco/vim-language-server"&gt;vim-language-server&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;npm install -g vim-language-server&lt;/td&gt;&lt;td&gt;n/a&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Vue&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/vuejs/vetur/tree/master/server"&gt;vue-language-server&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;npm install -g vue-language-server&lt;/td&gt;&lt;td&gt;Yes (Firefox/Chrome)&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;XML&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/angelozerr/lsp4xml"&gt;lsp4xml&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Download from &lt;a href="https://github.com/angelozerr/lsp4xml/releases"&gt;lsp4xml releases&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;YAML&lt;/td&gt;&lt;td&gt;&lt;a href="https://github.com/redhat-developer/yaml-language-server"&gt;yaml&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;npm install -g yaml-language-server&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2&gt;&lt;a id="user-content-commands" class="anchor" aria-hidden="true" href="#commands"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Commands&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;lsp-describe-session&lt;/code&gt; - Display session folders and running servers.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-describe-thing-at-point&lt;/code&gt; - Display help for the thing at point.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-execute-code-action&lt;/code&gt; - Execute code action&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-format-buffer&lt;/code&gt; - Format current buffer&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-organize-imports&lt;/code&gt; - Organize library imports&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-goto-implementation&lt;/code&gt; - Go to implementation&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-goto-type-definition&lt;/code&gt; - Go to type definition&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-rename&lt;/code&gt; - Rename symbol at point&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-restart-workspace&lt;/code&gt; - Restart project&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-symbol-highlight&lt;/code&gt; - Highlight all relevant references to the symbol under point.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-workspace-folders-add&lt;/code&gt; - Add workspace folder&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-workspace-folders-remove&lt;/code&gt; - Remove workspace folder&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-workspace-folders-open&lt;/code&gt; - Open a project directory in dired&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;imenu&lt;/code&gt; or &lt;code&gt;helm-imenu&lt;/code&gt; - display document structure.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;completion-at-point&lt;/code&gt; - display completion using built-in emacs &lt;code&gt;completion-at-point&lt;/code&gt; framework.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-find-definition&lt;/code&gt; - to find the definition for the symbol under point.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-find-references&lt;/code&gt; - Find references for the symbol under point.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-disconnect&lt;/code&gt; - Disconnect the buffer from the language server.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-lens-show&lt;/code&gt; - Show lenses in the current file&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-lens-hide&lt;/code&gt; - Hide lenses in the current file&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-lens-mode&lt;/code&gt;  - Turn on/off lenses in the current file.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-avy-lens&lt;/code&gt; - Click lens using &lt;code&gt;avy&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-signature-activate&lt;/code&gt; - activate signature help. Bound to &lt;code&gt;C-S-SPC&lt;/code&gt; by default.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-signature-next&lt;/code&gt; - show next signature. Bound to &lt;code&gt;M-n&lt;/code&gt; when signature help is activated.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-signature-previous&lt;/code&gt; - show previous signature. Bound to &lt;code&gt;M-p&lt;/code&gt; when signature help is activated.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-signature-stop&lt;/code&gt; - cancel signature help. Bound to &lt;code&gt;C-c C-k&lt;/code&gt; when signature help is activated.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-settings" class="anchor" aria-hidden="true" href="#settings"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Settings&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;lsp-log-io&lt;/code&gt; - If non-nil, print all messages to and from the language server to &lt;code&gt;*lsp-log*&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-print-performance&lt;/code&gt; - If non-nil, print performance info. to &lt;code&gt;*lsp-log*&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-inhibit-message&lt;/code&gt; - If non-nil, inhibit the message echo via &lt;code&gt;inhibit-message&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-report-if-no-buffer&lt;/code&gt; - If non nil the errors will be reported even when the file is not open.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-keep-workspace-alive&lt;/code&gt; - If non nil keep workspace alive when the last workspace buffer is closed.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-enable-snippet&lt;/code&gt; - Enable/disable snippet completion support.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-auto-guess-root&lt;/code&gt; - Automatically guess the project root using projectile/project. Do &lt;b&gt;not&lt;/b&gt; use this setting unless you are familiar with &lt;code&gt;lsp-mode&lt;/code&gt; internals and you are sure that all of your projects are following &lt;code&gt;projectile=/=project.el&lt;/code&gt; conventions.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-restart&lt;/code&gt; - Defines how server exited event must be handled.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-session-file&lt;/code&gt; - File where session information is stored.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-auto-configure&lt;/code&gt; - Auto configure &lt;code&gt;lsp-mode&lt;/code&gt;. When set to t &lt;code&gt;lsp-mode&lt;/code&gt; will auto-configure &lt;code&gt;lsp-ui&lt;/code&gt; and &lt;code&gt;company-lsp&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-document-sync-method&lt;/code&gt; - How to sync the document with the language server.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-auto-execute-action&lt;/code&gt; - Auto-execute single action.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-eldoc-render-all&lt;/code&gt; - Display all of the info returned by &lt;code&gt;document/onHover&lt;/code&gt;. If this is nil, &lt;code&gt;eldoc&lt;/code&gt; will show only the symbol information.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-enable-completion-at-point&lt;/code&gt; - Enable &lt;code&gt;completion-at-point&lt;/code&gt; integration.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-enable-xref&lt;/code&gt; - Enable xref integration.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-prefer-flymake&lt;/code&gt; - If you prefer flycheck and &lt;code&gt;lsp-ui-flycheck&lt;/code&gt; is available, &lt;code&gt;(setq lsp-prefer-flymake nil)&lt;/code&gt;. If set to &lt;code&gt;:none&lt;/code&gt; neither of two will be enabled.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-enable-indentation&lt;/code&gt; - Indent regions using the file formatting functionality provided by the language server.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-enable-on-type-formatting&lt;/code&gt; - Enable &lt;code&gt;textDocument/onTypeFormatting&lt;/code&gt; integration.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-before-save-edits&lt;/code&gt; - If non-nil, &lt;code&gt;lsp-mode&lt;/code&gt; will apply edits suggested by the language server before saving a document.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-imenu-show-container-name&lt;/code&gt; - Display the symbol’s container name in an imenu entry.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-imenu-container-name-separator&lt;/code&gt; - Separator string to use to separate the container name from the symbol while displaying imenu entries.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-imenu-sort-methods&lt;/code&gt; - How to sort the imenu items. The value is a list of &lt;code&gt;kind&lt;/code&gt;, &lt;code&gt;name&lt;/code&gt; or &lt;code&gt;position&lt;/code&gt;. Priorities are determined by the index of the element.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-response-timeout&lt;/code&gt; - Number of seconds to wait for a response from the language server before timing out.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-enable-file-watchers&lt;/code&gt; - If non-nil lsp-mode will watch the files in the workspace if the server has requested that.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-server-trace&lt;/code&gt; - Request trace mode on the language server.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-enable-semantic-highlighting&lt;/code&gt; - Enable experimental semantic highlighting support&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-enable-imenu&lt;/code&gt; - If non-nil, automatically enable imenu integration when server provides &lt;code&gt;textDocument/documentSymbol&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-signature-auto-activate&lt;/code&gt; - Auto activate signature when trigger char is pressed.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-signature-render-documentation&lt;/code&gt; - Include signature documentation in signature help.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-enable-text-document-color&lt;/code&gt; - Enable &lt;code&gt;textDocument/documentColor&lt;/code&gt; when server supports it.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-screenshots" class="anchor" aria-hidden="true" href="#screenshots"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Screenshots&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;RUST Completion with company-lsp
    &lt;a target="_blank" rel="noopener noreferrer" href="examples/completion.png"&gt;&lt;img src="examples/completion.png" alt="examples/completion.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Typescript references using lsp-ui
    &lt;a target="_blank" rel="noopener noreferrer" href="examples/references.png"&gt;&lt;img src="examples/references.png" alt="examples/references.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Debugging Python using dap-mode
    &lt;a target="_blank" rel="noopener noreferrer" href="examples/python_debugging.png"&gt;&lt;img src="examples/python_debugging.png" alt="examples/python_debugging.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Call hierarchy via ccls
    &lt;a target="_blank" rel="noopener noreferrer" href="examples/call-hierarchy-ccls.png"&gt;&lt;img src="examples/call-hierarchy-ccls.png" alt="examples/call-hierarchy-ccls.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Metals Doctor
    &lt;a target="_blank" rel="noopener noreferrer" href="examples/metals-doctor.png"&gt;&lt;img src="examples/metals-doctor.png" alt="examples/metals-doctor.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Semantic highlighting as provided by clangd (built from unreleased 10.0 branch). In this screenshot, all other font-locking has been disabled (hence no syntax highlighting of comments or basic keywords such as &lt;code&gt;auto&lt;/code&gt;)
    &lt;a target="_blank" rel="noopener noreferrer" href="examples/clangd_semantic_highlighting.png"&gt;&lt;img src="examples/clangd_semantic_highlighting.png" alt="examples/clangd_semantic_highlighting.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-extensions" class="anchor" aria-hidden="true" href="#extensions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Extensions&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-tramp" class="anchor" aria-hidden="true" href="#tramp"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TRAMP&lt;/h3&gt;
&lt;p&gt;LSP mode has support for tramp buffers with the following requirements:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The language server has to be present on the remote server.&lt;/li&gt;
  &lt;li&gt;Having multi folder language server (like &lt;a href="https://github.com/eclipse/eclipse.jdt.ls"&gt;Eclipse JDT LS&lt;/a&gt;) cannot have local and remote workspace folders.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a id="user-content-how-does-it-work-1" class="anchor" aria-hidden="true" href="#how-does-it-work-1"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;How does it work?&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;lsp-mode&lt;/code&gt; detects whether a particular file is located on remote machine and looks for a client which matches current file and it is marked as &lt;code&gt;:remote?&lt;/code&gt; t. Then &lt;code&gt;lsp-mode&lt;/code&gt; starts the client through tramp.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-sample-configuration" class="anchor" aria-hidden="true" href="#sample-configuration"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Sample configuration&lt;/h4&gt;
&lt;p&gt;Here it is example how you can configure python language server to work when using &lt;code&gt;TRAMP&lt;/code&gt;. Note that if you are trying to convert existing language server configuration you should copy all of it’s properties(e. g. &lt;code&gt;:request-handlers&lt;/code&gt;, &lt;code&gt;activation-fn&lt;/code&gt;, etc).&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(lsp-register-client
 (make-lsp-client &lt;span class="pl-c1"&gt;:new-connection&lt;/span&gt; (lsp-tramp-connection &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;binary-or-full-path&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
                  &lt;span class="pl-c1"&gt;:major-modes&lt;/span&gt; '(&lt;span class="pl-c1"&gt;python-mode&lt;/span&gt;)
                  &lt;span class="pl-c1"&gt;:remote?&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;
                  &lt;span class="pl-c1"&gt;:server-id&lt;/span&gt; &lt;span class="pl-c1"&gt;'pyls-remote&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content-dealing-with-stderr" class="anchor" aria-hidden="true" href="#dealing-with-stderr"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Dealing with stderr&lt;/h4&gt;
&lt;p&gt;With TRAMP, Emacs does not have an easy way to distinguish stdout and stderr, so when the underlying LSP process writes to stderr, it breaks the &lt;code&gt;lsp-mode&lt;/code&gt; parser. As a workaround, &lt;code&gt;lsp-mode&lt;/code&gt; is redirecting stderr to &lt;code&gt;/tmp/&amp;lt;process-name&amp;gt;-&amp;lt;id&amp;gt;~stderr&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-limitations" class="anchor" aria-hidden="true" href="#limitations"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Limitations&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-file-watches" class="anchor" aria-hidden="true" href="#file-watches"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;File watches&lt;/h3&gt;
&lt;p&gt;When some of the workspaces that are active in the current project requests file notifications via &lt;code&gt;workspace/didChangeWatchedFiles&lt;/code&gt; &lt;code&gt;lsp-mode&lt;/code&gt; will start monitoring each of the folders in the workspace for changes. In case your project contains a lot of files you might want to disable file monitoring via &lt;code&gt;lsp-enable-file-watchers&lt;/code&gt; (you may use dir-locals).&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-contributions" class="anchor" aria-hidden="true" href="#contributions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contributions&lt;/h2&gt;
&lt;p&gt;Contributions are very much welcome.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-members" class="anchor" aria-hidden="true" href="#members"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Members&lt;/h3&gt;
&lt;p&gt;Here it is a list of the current &lt;code&gt;lsp-mode&lt;/code&gt; members and what they are primary working on/responsible for.&lt;/p&gt;
&lt;table&gt;
  &lt;tbody&gt;&lt;tr&gt;&lt;th&gt;Member&lt;/th&gt;&lt;th&gt;Responsible for:&lt;/th&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;a href="https://github.com/TOTBWF"&gt;TOTBWF&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;F#&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;a href="https://github.com/brotzeit"&gt;brotzeit&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;Rust&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;a href="https://github.com/dsyzling"&gt;dsyzling&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;Scala&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;a href="https://github.com/kurnevsky"&gt;kurnevsky&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;Scala&lt;/code&gt; &amp;amp; &lt;code&gt;Rust&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;a href="https://github.com/seagle0128"&gt;seagle0128&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;Go&lt;/code&gt; &amp;amp; &lt;code&gt;MS Python Language Server&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;a href="https://github.com/sebastiansturm"&gt;sebastiansturm&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;lsp-mode&lt;/code&gt; core &amp;amp; &lt;code&gt;C++&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;a href="https://github.com/vibhavp"&gt;vibhavp&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;lsp-mode&lt;/code&gt; core&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;a href="https://github.com/yyoncho"&gt;yyoncho&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;lsp-mode&lt;/code&gt; core and &lt;code&gt;Java&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2&gt;&lt;a id="user-content-troubleshooting" class="anchor" aria-hidden="true" href="#troubleshooting"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Troubleshooting&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;set &lt;code&gt;lsp-log-io&lt;/code&gt; to &lt;code&gt;t&lt;/code&gt; to inspect communication between client and the server. Use &lt;code&gt;lsp-workspace-show-log&lt;/code&gt; to switch to the corresponding log buffer.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lsp-describe-session&lt;/code&gt; will show the current projects roots + the started severs and allows inspecting the server capabilities.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="examples/describe.png"&gt;&lt;img src="examples/describe.png" alt="examples/describe.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-adding-support-for-languages" class="anchor" aria-hidden="true" href="#adding-support-for-languages"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Adding support for languages&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-registering-server" class="anchor" aria-hidden="true" href="#registering-server"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Registering server&lt;/h3&gt;
&lt;p&gt;Here it is the minimal configuration that is needed for new language server registration. Refer to the documentation of &lt;code&gt;lsp-client.el&lt;/code&gt; for the additional settings supported on registration time. &lt;code&gt;lsp-language-id-configuration&lt;/code&gt; must be updated to contain the corresponding mode -&amp;gt; language id - in this case &lt;code&gt;(python-mode . "python")&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;defvar&lt;/span&gt; &lt;span class="pl-en"&gt;lsp-language-id-configuration&lt;/span&gt;
  '(...
   (&lt;span class="pl-c1"&gt;python-mode&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;python&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
   ...))
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; if you are adding the support for your language server in separate repo use&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; (add-to-list 'lsp-language-id-configuration '(python-mode . "python"))&lt;/span&gt;

(lsp-register-client
 (make-lsp-client &lt;span class="pl-c1"&gt;:new-connection&lt;/span&gt; (lsp-stdio-connection &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;pyls&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
                  &lt;span class="pl-c1"&gt;:major-modes&lt;/span&gt; '(&lt;span class="pl-c1"&gt;python-mode&lt;/span&gt;)
                  &lt;span class="pl-c1"&gt;:server-id&lt;/span&gt; &lt;span class="pl-c1"&gt;'pyls&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If the language server supports environment variables to control additional behavior, you can register that by using the &lt;code&gt;:environment-fn&lt;/code&gt; function, like the Bash language client does:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(lsp-register-client
 (make-lsp-client &lt;span class="pl-c1"&gt;:new-connection&lt;/span&gt; (lsp-stdio-connection '(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;bash-language-server&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;start&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
                  &lt;span class="pl-c1"&gt;:major-modes&lt;/span&gt; '(&lt;span class="pl-c1"&gt;sh-mode&lt;/span&gt;)
                  &lt;span class="pl-c1"&gt;:priority&lt;/span&gt; &lt;span class="pl-c1"&gt;-1&lt;/span&gt;
                  &lt;span class="pl-c1"&gt;:environment-fn&lt;/span&gt; (&lt;span class="pl-k"&gt;lambda&lt;/span&gt; ()
                                    ((&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;EXPLAINSHELL_ENDPOINT&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; lsp-bash-explainshell-endpoint)
                                     (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;HIGHLIGHT_PARSING_ERRORS&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; lsp-bash-highlight-parsing-errors)))
                  &lt;span class="pl-c1"&gt;:server-id&lt;/span&gt; &lt;span class="pl-c1"&gt;'bash-ls&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;lsp-bash-explainshell-endpoint&lt;/code&gt; and &lt;code&gt;lsp-bash-highlight-parsing-errors&lt;/code&gt; are language client &lt;code&gt;defcustom&lt;/code&gt; that expose supported server environment settings in a type-safe way. If you change any of those variables, restart the language server with &lt;code&gt;lsp-restart-workspace&lt;/code&gt; for the changes to be applied.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-sections" class="anchor" aria-hidden="true" href="#sections"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Sections&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;lsp-mode&lt;/code&gt; provides tools to bridge emacs &lt;code&gt;defcustom&lt;/code&gt; as a language configuration sections properties(see &lt;a href="https://microsoft.github.io/language-server-protocol/specification#workspace_configuration" rel="nofollow"&gt;specification workspace/configuration&lt;/a&gt;). In addition you may use &lt;code&gt;lsp-generate-settings&lt;/code&gt; from &lt;a href="https://github.com/emacs-lsp/lsp-mode/blob/master/scripts/lsp-generate-settings.el"&gt;Generate Settings script&lt;/a&gt; to generate &lt;code&gt;defcustom&lt;/code&gt; from &lt;code&gt;package.json&lt;/code&gt; VScode plugin manifest. Example:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;defcustom&lt;/span&gt; &lt;span class="pl-en"&gt;lsp-foo-language-server-property&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;bar&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Demo property.&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:group&lt;/span&gt; &lt;span class="pl-c1"&gt;'foo-ls&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:risky&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;)

(lsp-register-custom-settings '((&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;foo.section.property&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; lsp-foo-language-server-property)))

(lsp-configuration-section  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;foo&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; =&amp;gt;  (("foo" ("settings" ("property" . "bar"))))&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-faq" class="anchor" aria-hidden="true" href="#faq"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;FAQ&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;How do I troubleshoot “Server FOO-LS:pid exited with status signal. Do you want to restart it? (y or n)”?
    &lt;ul&gt;
      &lt;li&gt;This message indicates that the language server has crashed for some
        reason. You may check the server stderr which is &lt;code&gt;*FOO-LS::stderr*&lt;/code&gt;. If
        you get this message on startup you may try to run the exact command that
        &lt;code&gt;lsp-mode&lt;/code&gt; is running in the terminal. You may find it in &lt;code&gt;*lsp-log*&lt;/code&gt;
        buffer.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;How to configure a server with local variables?
    &lt;ul&gt;
      &lt;li&gt;Add &lt;code&gt;lsp&lt;/code&gt; server call to &lt;code&gt;hack-local-variables-hook&lt;/code&gt; which runs right after the local variables are loaded.
        &lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;add-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;'hack-local-variables-hook&lt;/span&gt;
          (&lt;span class="pl-k"&gt;lambda&lt;/span&gt; () (&lt;span class="pl-k"&gt;when&lt;/span&gt; (&lt;span class="pl-c1"&gt;derived-mode-p&lt;/span&gt; &lt;span class="pl-c1"&gt;'XXX-mode&lt;/span&gt;) (lsp))))
        &lt;/pre&gt;&lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;I have multiple language servers registered for language FOO. Which one will be used when opening a project?
    &lt;ul&gt;
      &lt;li&gt;The one with highest priority wins. &lt;code&gt;lsp-clients.el&lt;/code&gt; predefined servers have
        priority -1, lower than external packages (priority 0 if unspecified). If a
        server is registered with &lt;code&gt;:add-on?&lt;/code&gt; flag set to &lt;code&gt;t&lt;/code&gt; it will be started in
        parallel to the other servers that are registered for the current mode.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;I have multiple language servers for language &lt;code&gt;FOO&lt;/code&gt; and I want to select the server per project, what can I do?
    &lt;ul&gt;
      &lt;li&gt;You may create &lt;code&gt;dir-local&lt;/code&gt; for each of the projects and specify list of
        &lt;code&gt;lsp-enabled-clients&lt;/code&gt;. This will narrow the list of the clients that are
        going to be tested for the project.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The completion does not work fine and inserts arguments and placeholders, what I am doing wrong?
    &lt;ul&gt;
      &lt;li&gt;Snippet support works only with &lt;code&gt;company-lsp&lt;/code&gt; so if you are using
        &lt;code&gt;completion-at-point&lt;/code&gt; the snippets won’t be expanded and you should
        either disable them by setting &lt;code&gt;lsp-enable-snippet&lt;/code&gt; to &lt;code&gt;nil&lt;/code&gt; or you
        should switch to &lt;code&gt;company-lsp&lt;/code&gt;. Note also that &lt;code&gt;company-tng&lt;/code&gt; frontend
        does not support snippet expansion(see &lt;a href="https://github.com/company-mode/company-mode/issues/891"&gt;company-mode#891&lt;/a&gt;)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;How to automatically follow &lt;code&gt;lsp-ui-log&lt;/code&gt;?
    &lt;ul&gt;
      &lt;li&gt;Go into the log buffer and execute the following snippet(source: &lt;a href="https://stackoverflow.com/questions/12663061/emacs-auto-scrolling-log-buffer" rel="nofollow"&gt;Emacs auto scrolling log buffer&lt;/a&gt;)&lt;/li&gt;
    &lt;/ul&gt;
    &lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;set&lt;/span&gt; (&lt;span class="pl-c1"&gt;make-local-variable&lt;/span&gt; &lt;span class="pl-c1"&gt;'window-point-insertion-type&lt;/span&gt;) &lt;span class="pl-c1"&gt;t&lt;/span&gt;)
    &lt;/pre&gt;&lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;I am getting “Package ‘spinner-1.7.3’ is unavailable” when trying to install &lt;code&gt;lsp-mode&lt;/code&gt;.
    &lt;ul&gt;
      &lt;li&gt;This is caused by GPG keys used by the ELPA package manager not being up
        to date. You may fix by installing: &lt;a href="https://elpa.gnu.org/packages/gnu-elpa-keyring-update.html" rel="nofollow"&gt;gnu-elpa-keyring-update&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Json completion doesn’t seem working?
    &lt;ul&gt;
      &lt;li&gt;The latest &lt;a href="https://www.npmjs.com/package/vscode-json-languageserver/v/1.2.2" rel="nofollow"&gt;vscode-json-languageserver&lt;/a&gt; is broken. You will need to install the earlier version of it &lt;code&gt;npm i vscode-json-languageserver@1.2.1&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The flycheck does not work in &lt;code&gt;typescript&lt;/code&gt;, &lt;code&gt;html&lt;/code&gt; and &lt;code&gt;javascript&lt;/code&gt; blocks in &lt;code&gt;vue-mode&lt;/code&gt;. How to fix that?
    &lt;ul&gt;
      &lt;li&gt;This is caused by the fact that &lt;code&gt;vue-mode&lt;/code&gt; uses multiple major modes in
        single file and the &lt;code&gt;lsp-ui&lt;/code&gt; checker may not associated with the major mode
        at point. You could fix that by adding the following lines to your config.
        &lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;with-eval-after-load&lt;/span&gt; &lt;span class="pl-c1"&gt;'lsp-ui-flycheck&lt;/span&gt;
  (&lt;span class="pl-k"&gt;mapc&lt;/span&gt; &lt;span class="pl-c1"&gt;'lsp-ui-flycheck-add-mode&lt;/span&gt; '(&lt;span class="pl-c1"&gt;typescript-mode&lt;/span&gt; js-mode css-mode vue-html-mode)))
        &lt;/pre&gt;&lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-see-also" class="anchor" aria-hidden="true" href="#see-also"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;See also&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://github.com/emacs-lsp/lsp-docker/"&gt;lsp-docker&lt;/a&gt; - provide docker image with preconfigured language servers with corresponding emacs configuration.&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/sebastiencs/company-box/"&gt;company-box&lt;/a&gt; - &lt;code&gt;company&lt;/code&gt; frontend with icons.&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/emacs-lsp/dap-mode"&gt;dap-mode&lt;/a&gt; - Debugger integration for &lt;code&gt;lsp-mode&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/joaotavora/eglot"&gt;eglot&lt;/a&gt; - An alternative minimal LSP implementation.&lt;/li&gt;
&lt;/ul&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>emacs-lsp</author><guid isPermaLink="false">https://github.com/emacs-lsp/lsp-mode</guid><pubDate>Fri, 24 Jan 2020 00:08:00 GMT</pubDate></item><item><title>syl20bnr/spacemacs #9 in Emacs Lisp, Today</title><link>https://github.com/syl20bnr/spacemacs</link><description>&lt;p&gt;&lt;i&gt;A community-driven Emacs distribution - The best editor is neither Emacs nor Vim,  it's Emacs *and* Vim!&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;p&gt;&lt;a name="user-content-top"&gt;&lt;/a&gt;
&lt;a href="http://spacemacs.org" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/8f5ee1d9b7278ed2c63f1f89e9a583ec59b52b6b/68747470733a2f2f63646e2e7261776769742e636f6d2f73796c3230626e722f73706163656d6163732f343432643032353737396461326636326663383663323038323730333639373731346462363531342f6173736574732f73706163656d6163732d62616467652e737667" alt="Made with Spacemacs" data-canonical-src="https://cdn.rawgit.com/syl20bnr/spacemacs/442d025779da2f62fc86c2082703697714db6514/assets/spacemacs-badge.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;a href="http://www.twitter.com/spacemacs" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/7cf10772eb6ccebe92d678c452a971e6e2778653/687474703a2f2f692e696d6775722e636f6d2f7458536f5468462e706e67" alt="Twitter" align="right" data-canonical-src="http://i.imgur.com/tXSoThF.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p align="center"&gt;&lt;a target="_blank" rel="noopener noreferrer" href="/doc/img/title2.png"&gt;&lt;img src="/doc/img/title2.png" alt="Spacemacs" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p align="center"&gt;
&lt;b&gt;&lt;a href="http://spacemacs.org/doc/DOCUMENTATION#orgheadline5" rel="nofollow"&gt;philosophy&lt;/a&gt;&lt;/b&gt;
|
&lt;b&gt;&lt;a href="http://spacemacs.org/doc/DOCUMENTATION#orgheadline8" rel="nofollow"&gt;for whom?&lt;/a&gt;&lt;/b&gt;
|
&lt;b&gt;&lt;a href="http://spacemacs.org/doc/DOCUMENTATION#orgheadline7" rel="nofollow"&gt;screenshots&lt;/a&gt;&lt;/b&gt;
|
&lt;b&gt;&lt;a href="http://spacemacs.org/doc/DOCUMENTATION.html" rel="nofollow"&gt;documentation&lt;/a&gt;&lt;/b&gt;
|
&lt;b&gt;&lt;a href="CONTRIBUTING.org"&gt;contribute&lt;/a&gt;&lt;/b&gt;
|
&lt;b&gt;&lt;a href="http://spacemacs.org/doc/DOCUMENTATION#achievements" rel="nofollow"&gt;achievements&lt;/a&gt;&lt;/b&gt;
|
&lt;b&gt;&lt;a href="http://spacemacs.org/doc/FAQ" rel="nofollow"&gt;FAQ&lt;/a&gt;&lt;/b&gt;
&lt;/p&gt;
&lt;hr&gt;
&lt;p align="center"&gt;
&lt;a href="https://gitter.im/syl20bnr/spacemacs?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/80bf7c9122b2d8f4dbadfc434c9074c1754267ae/68747470733a2f2f6261646765732e6769747465722e696d2f4a6f696e20436861742e737667" alt="Gitter" data-canonical-src="https://badges.gitter.im/Join Chat.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://travis-ci.org/syl20bnr/spacemacs" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/b724760fb5fb9a3cc9dcb3ed5fca8d102d076062/68747470733a2f2f7472617669732d63692e6f72672f73796c3230626e722f73706163656d6163732e737667" alt="Build Status" data-canonical-src="https://travis-ci.org/syl20bnr/spacemacs.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;amp;hosted_button_id=ESFVNPKP4Y742" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/516248018619132b396881c0b21749c34d6ccfbd/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f50617970616c2d446f6e6174652d626c75652e737667" alt="Donate" data-canonical-src="https://img.shields.io/badge/Paypal-Donate-blue.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://shop.spreadshirt.com/spacemacs-shop" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/f1b306f89bf6fade603509713a098316a4948ef2/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f53686f702d542d2d5368697274732d626c75652e737667" alt="Donate" data-canonical-src="https://img.shields.io/badge/Shop-T--Shirts-blue.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="http://www.slant.co/topics/12/~what-are-the-best-programming-text-editors" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/2e66996b76fc392f4936160dc3f627f663d1a68a/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f536c616e742d5265636f6d6d656e642d6666363962342e737667" alt="Recommend it" data-canonical-src="https://img.shields.io/badge/Slant-Recommend-ff69b4.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Quick Install:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clone https://github.com/syl20bnr/spacemacs ~/.emacs.d
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#introduction"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#features"&gt;Features&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#documentation"&gt;Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#getting-help"&gt;Getting Help&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#prerequisites"&gt;Prerequisites&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#emacs"&gt;Emacs&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#linux-distros"&gt;Linux distros&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#macos"&gt;macOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#windows"&gt;Windows&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#install"&gt;Install&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#default-installation"&gt;Default installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#alternate-installations"&gt;Alternate installations&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#modify-home-environment-variable"&gt;Modify HOME environment variable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#modify-spacemacs-start-directory-variable"&gt;Modify spacemacs-start-directory variable&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#spacemacs-logo"&gt;Spacemacs logo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#update"&gt;Update&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#automatic-update-on-master-branch"&gt;Automatic update (on master branch)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#manual-update-on-master-branch"&gt;Manual update (on master branch)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#on-develop-branch"&gt;On develop branch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#revert-to-a-specific-version"&gt;Revert to a specific version&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#quotes"&gt;Quotes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#contributions"&gt;Contributions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#communities"&gt;Communities&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#license"&gt;License&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#supporting-spacemacs"&gt;Supporting Spacemacs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;&lt;a id="user-content-introduction" class="anchor" aria-hidden="true" href="#introduction"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Spacemacs is a new way to experience Emacs -- a sophisticated and
polished set-up focused on ergonomics, mnemonics and consistency.&lt;/p&gt;
&lt;p&gt;Just clone it, launch it, then press the space bar to explore the
interactive list of carefully-chosen key bindings. You can also press
the home buffer's &lt;code&gt;[?]&lt;/code&gt; button for some great first key bindings to
try.&lt;/p&gt;
&lt;p&gt;Spacemacs can be used naturally by both Emacs and Vim users -- you can
even mix the two editing styles. Switching easily between input styles
makes Spacemacs a great tool for pair-programming.&lt;/p&gt;
&lt;p&gt;Spacemacs is currently in beta, and contributions are very welcome.&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="doc/img/spacemacs-python.png"&gt;&lt;img src="doc/img/spacemacs-python.png" alt="spacemacs_python" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-features" class="anchor" aria-hidden="true" href="#features"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Features&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Great documentation:&lt;/strong&gt; access documentation in Emacs with
&lt;kbd&gt;SPC h SPC&lt;/kbd&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Beautiful GUI:&lt;/strong&gt; you'll love the distraction free UI and its functional
mode-line.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Excellent ergonomics:&lt;/strong&gt; all the key bindings are accessible by pressing
the &lt;kbd&gt;space bar&lt;/kbd&gt; or &lt;kbd&gt;alt-m&lt;/kbd&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mnemonic key bindings:&lt;/strong&gt; commands have mnemonic prefixes like
&lt;kbd&gt;SPC b&lt;/kbd&gt; for all the buffer commands or &lt;kbd&gt;SPC p&lt;/kbd&gt; for the
project commands.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Batteries included:&lt;/strong&gt; discover hundreds of ready-to-use packages nicely
organised in configuration layers following a set of
&lt;a href="http://spacemacs.org/doc/CONVENTIONS" rel="nofollow"&gt;conventions&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Documentation&lt;/h1&gt;
&lt;p&gt;Comprehensive documentation is available for each layer by pressing
&lt;kbd&gt;SPC h SPC&lt;/kbd&gt;.&lt;/p&gt;
&lt;p&gt;You can also check the &lt;a href="http://spacemacs.org/doc/DOCUMENTATION" rel="nofollow"&gt;general documentation&lt;/a&gt;,
&lt;a href="http://spacemacs.org/doc/QUICK_START" rel="nofollow"&gt;quick start guide&lt;/a&gt; and the &lt;a href="http://spacemacs.org/doc/FAQ" rel="nofollow"&gt;FAQ&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-getting-help" class="anchor" aria-hidden="true" href="#getting-help"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Getting Help&lt;/h1&gt;
&lt;p&gt;If you need help, ask your question in the &lt;a href="https://gitter.im/syl20bnr/spacemacs" rel="nofollow"&gt;Gitter Chat&lt;/a&gt; and a member of the
community will help you out.&lt;/p&gt;
&lt;p&gt;If you prefer IRC, connect to the &lt;a href="https://irc.gitter.im/" rel="nofollow"&gt;Gitter Chat IRC server&lt;/a&gt; and join the
&lt;code&gt;#syl20bnr/spacemacs&lt;/code&gt; channel.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-prerequisites" class="anchor" aria-hidden="true" href="#prerequisites"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Prerequisites&lt;/h1&gt;
&lt;h2&gt;&lt;a id="user-content-emacs" class="anchor" aria-hidden="true" href="#emacs"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Emacs&lt;/h2&gt;
&lt;p&gt;Spacemacs requires Emacs 24.4 or above. The development version of Emacs (at the
time of writing, this is 25.2) is not &lt;em&gt;officially&lt;/em&gt; supported, but should
nevertheless be expected to work.&lt;/p&gt;
&lt;p&gt;Some modes require third-party tools that you'll have to install via your
favorite package manager.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-linux-distros" class="anchor" aria-hidden="true" href="#linux-distros"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Linux distros&lt;/h3&gt;
&lt;p&gt;Install Emacs from the package manager of your Linux distribution.&lt;/p&gt;
&lt;p&gt;You should install the "emacs" package, not the "xemacs" package.
XEmacs is an old fork of Emacs. The X in its name is unrelated to X11.
Both Emacs and XEmacs have graphical support.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Ubuntu LTS 12.04 and 14.04 repositories have only Emacs 24.3
available. You have to &lt;a href="https://www.gnu.org/software/emacs/manual/html_node/efaq/Installing-Emacs.html" rel="nofollow"&gt;build from source&lt;/a&gt; Emacs 24.4 or greater,
as Spacemacs won't work with 24.3. The same may be true for other distributions
as well.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-macos" class="anchor" aria-hidden="true" href="#macos"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;macOS&lt;/h3&gt;
&lt;p&gt;The recommended way of installing Emacs on macOS is using &lt;a href="http://brew.sh" rel="nofollow"&gt;homebrew&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;$ brew tap d12frosted/emacs-plus
$ brew install emacs-plus
$ brew linkapps emacs-plus&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; these homebrew commands will install GNU Emacs, and link it to your
&lt;code&gt;/Applications&lt;/code&gt; directory. You still need to run the &lt;code&gt;git clone&lt;/code&gt; mentioned at
the start of this file. That will populate your &lt;code&gt;~/.emacs.d&lt;/code&gt; directory, which is
what transforms a regular GNU Emacs into Spacemacs.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; the proposed &lt;code&gt;emacs-plus&lt;/code&gt; tap is identical to the &lt;code&gt;emacs&lt;/code&gt; formulae, it
just builds GNU Emacs with support of several features by default along with
providing Spacemacs icon.
See &lt;a href="https://github.com/d12frosted/homebrew-emacs-plus"&gt;emacs-plus&lt;/a&gt; for more
information.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: to have the title bar match your theme background color,
consider using instead:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;$ brew install emacs-plus --HEAD --with-natural-title-bars&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; after you have completed the &lt;a href="#install"&gt;install process&lt;/a&gt; below, it is
also recommended to add the &lt;a href="http://spacemacs.org/layers/+os/osx/README.html" rel="nofollow"&gt;osx layer&lt;/a&gt; to your &lt;a href="http://spacemacs.org/doc/DOCUMENTATION#orgheadline45" rel="nofollow"&gt;dotfile&lt;/a&gt;. Install
instructions are available in the &lt;a href="http://spacemacs.org/layers/+os/osx/README.html" rel="nofollow"&gt;osx layer&lt;/a&gt; documentation.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; if the powerline separators on the spaceline are a different (less
saturated) color than the rest of the line, you can add following snippet to
&lt;code&gt;dotspacemacs/user-config&lt;/code&gt; in your &lt;code&gt;.spacemacs&lt;/code&gt; file.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;setq&lt;/span&gt; ns-use-srgb-colorspace &lt;span class="pl-c1"&gt;nil&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Keep in mind that this is not ideal solution as it affects all colours in Emacs.
Another option is to use different powerline separator. For example, &lt;code&gt;alternate&lt;/code&gt;
and &lt;code&gt;bar&lt;/code&gt; diminishes the difference. And using &lt;code&gt;utf-8&lt;/code&gt; separator makes it go
away completely without the need to change colour space. In order to change
powerline separator put following snippet in &lt;code&gt;dotspacemacs/user-config&lt;/code&gt;.&lt;/p&gt;
&lt;pre lang="eslip"&gt;&lt;code&gt;(setq powerline-default-separator 'utf-8)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For more information about powerline separators, please refer to appropriate
section in &lt;a href="http://spacemacs.org/doc/DOCUMENTATION" rel="nofollow"&gt;Documentation&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-windows" class="anchor" aria-hidden="true" href="#windows"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Windows&lt;/h3&gt;
&lt;p&gt;You can download good quality builds from the &lt;a href="http://emacsbinw64.sourceforge.net/" rel="nofollow"&gt;emacs-w64 project&lt;/a&gt;.
It is recommended to install the most recent &lt;a href="https://sourceforge.net/projects/emacsbinw64/files/release/" rel="nofollow"&gt;stable build&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Be sure to declare a environment variable named &lt;code&gt;HOME&lt;/code&gt; pointing to your user
directory &lt;code&gt;C:\Users\&amp;lt;username&amp;gt;&lt;/code&gt;. Then you can clone Spacemacs in this directory.&lt;/p&gt;
&lt;p&gt;Sometimes you'll get the following error when you first start Emacs:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;The directory ~/.emacs.d/server is unsafe
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To fix it change the owner of the directory &lt;code&gt;~/.emacs.d/server&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;from Properties select the Tab “Security”,&lt;/li&gt;
&lt;li&gt;select the button “Advanced”,&lt;/li&gt;
&lt;li&gt;select the Tab “Owner”&lt;/li&gt;
&lt;li&gt;change the owner to your account name&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Source: &lt;a href="http://stackoverflow.com/questions/885793/emacs-error-when-calling-server-start" rel="nofollow"&gt;Stack Overflow&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For efficient searches we recommend to install &lt;code&gt;pt&lt;/code&gt; (&lt;a href="https://github.com/monochromegane/the_platinum_searcher"&gt;the platinum searcher&lt;/a&gt;).
&lt;code&gt;pt&lt;/code&gt; version 1.7.7 or higher is required.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-install" class="anchor" aria-hidden="true" href="#install"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Install&lt;/h1&gt;
&lt;h2&gt;&lt;a id="user-content-default-installation" class="anchor" aria-hidden="true" href="#default-installation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Default installation&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;If you have an existing Emacs configuration, back it up first:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;cd&lt;/span&gt; &lt;span class="pl-k"&gt;~&lt;/span&gt;
mv .emacs.d .emacs.d.bak
mv .emacs .emacs.bak&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Don't forget to backup and &lt;em&gt;remove&lt;/em&gt; &lt;code&gt;~/.emacs&lt;/code&gt; file otherwise Spacemacs
&lt;strong&gt;WILL NOT&lt;/strong&gt; load since that file prevents Emacs from loading the proper
initialization file.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Clone the repository:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;git clone https://github.com/syl20bnr/spacemacs &lt;span class="pl-k"&gt;~&lt;/span&gt;/.emacs.d&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;master&lt;/code&gt; is the stable branch and it is &lt;em&gt;immutable&lt;/em&gt;, &lt;strong&gt;DO NOT&lt;/strong&gt; make any
modification to it or you will break the update mechanism. If you want to
fork Spacemacs safely use the &lt;code&gt;develop&lt;/code&gt; branch where you handle the update
manually.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(Optional) Install the &lt;a href="https://github.com/adobe-fonts/source-code-pro"&gt;Source Code Pro&lt;/a&gt; font.&lt;/p&gt;
&lt;p&gt;If you are running in terminal you'll also need to change font settings of
your terminal.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Launch Emacs. Spacemacs will automatically install the packages it requires.
If you get an error regarding package downloads then you may try to disable
the HTTPS protocol by starting Emacs with&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;emacs --insecure&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or you can set the &lt;code&gt;dotspacemacs-elpa-https&lt;/code&gt; to &lt;code&gt;nil&lt;/code&gt; in your dotfile to
remove the need to start Emacs with &lt;code&gt;--insecure&lt;/code&gt; argument. You may wish to
clear out your &lt;code&gt;.emacs.d/elpa&lt;/code&gt; directory before doing this, so that any
corrupted packages you may have downloaded will be re-installed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Restart Emacs to complete the installation.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If the mode-line turns red then be sure to consult the &lt;a href="http://spacemacs.org/doc/FAQ" rel="nofollow"&gt;FAQ&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-alternate-installations" class="anchor" aria-hidden="true" href="#alternate-installations"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Alternate installations&lt;/h2&gt;
&lt;p&gt;It may be useful to clone Spacemacs outside Emacs dotdirectory &lt;code&gt;~/.emacs.d&lt;/code&gt; so
you can try Spacemacs without replacing completely our own configuration.
There is currently two possibilities to support alternative location for
Spacemacs configuration.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-modify-home-environment-variable" class="anchor" aria-hidden="true" href="#modify-home-environment-variable"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Modify HOME environment variable&lt;/h3&gt;
&lt;p&gt;This solution is ideal to quickly try Spacemacs without compromising your
existing configuration.&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;mkdir &lt;span class="pl-k"&gt;~&lt;/span&gt;/spacemacs
git clone https://github.com/syl20bnr/spacemacs.git &lt;span class="pl-k"&gt;~&lt;/span&gt;/spacemacs/.emacs.d
HOME=&lt;span class="pl-k"&gt;~&lt;/span&gt;/spacemacs emacs&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note: If you're on Fish shell, you will need to modify the last command to: &lt;code&gt;env HOME=$HOME/spacemacs emacs&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-modify-spacemacs-start-directory-variable" class="anchor" aria-hidden="true" href="#modify-spacemacs-start-directory-variable"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Modify spacemacs-start-directory variable&lt;/h3&gt;
&lt;p&gt;This solution is better suited to "embed" Spacemacs into your own configuration.
Say you cloned Spacemacs in &lt;code&gt;~/.emacs.d/spacemacs/&lt;/code&gt; then drop these lines in
&lt;code&gt;~/.emacs.d/init.el&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;setq&lt;/span&gt; spacemacs-start-directory &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;~/.emacs.d/spacemacs/&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
(&lt;span class="pl-c1"&gt;load-file&lt;/span&gt; (&lt;span class="pl-c1"&gt;concat&lt;/span&gt; spacemacs-start-directory &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;init.el&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-spacemacs-logo" class="anchor" aria-hidden="true" href="#spacemacs-logo"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Spacemacs logo&lt;/h2&gt;
&lt;p&gt;For Ubuntu users, follow this guide to
&lt;a href="http://splendidabacus.com/posts/2015/03/spacemacs-unity-icon/" rel="nofollow"&gt;change the logo in Unity&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For Mac users, you need to &lt;a href="https://github.com/nashamri/spacemacs-logo"&gt;download the .icns version of the logo&lt;/a&gt;,
then &lt;a href="http://www.idownloadblog.com/2014/07/16/how-to-change-app-icon-mac/" rel="nofollow"&gt;change the logo on Dock&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-update" class="anchor" aria-hidden="true" href="#update"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Update&lt;/h1&gt;
&lt;p&gt;Spacemacs has a built-in notification of a new version when you are on the
&lt;code&gt;master&lt;/code&gt; branch. If you are on the &lt;code&gt;develop&lt;/code&gt; branch then you'll have to
update Spacemacs manually by updating your repository.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-automatic-update-on-master-branch" class="anchor" aria-hidden="true" href="#automatic-update-on-master-branch"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Automatic update (on master branch)&lt;/h2&gt;
&lt;p&gt;When a new version is available a little arrow appears in the mode-line.&lt;/p&gt;
&lt;p&gt;Its color depends on the number of versions available since your last update.
Green means that your current version is recent, orange and red mean that your
current version is older.&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="doc/img/powerline-update.png"&gt;&lt;img src="doc/img/powerline-update.png" alt="powerline_update" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Click on the arrow to update Spacemacs to the last version.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-manual-update-on-master-branch" class="anchor" aria-hidden="true" href="#manual-update-on-master-branch"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Manual update (on master branch)&lt;/h2&gt;
&lt;p&gt;(Remove the angle brackets when typing the lines below into your shell.)&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;git fetch
git reset --hard &lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt;tag version which you are updating to&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-on-develop-branch" class="anchor" aria-hidden="true" href="#on-develop-branch"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;On develop branch&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Update Emacs packages by clicking (press &lt;code&gt;RET&lt;/code&gt;) on the &lt;code&gt;[Update Packages]&lt;/code&gt; link of
the starting page.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Close Emacs and update the git repository:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;git pull --rebase&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Restart Emacs to complete the upgrade.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;&lt;a id="user-content-revert-to-a-specific-version" class="anchor" aria-hidden="true" href="#revert-to-a-specific-version"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Revert to a specific version&lt;/h2&gt;
&lt;p&gt;To revert to a specific version you just have to checkout the corresponding
branch, for instance to revert to the last &lt;code&gt;0.103&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;git checkout origin/release-0.103&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;After you update, either manually, or automatically, you are advised to update
your packages by clicking the &lt;code&gt;[Update Packages]&lt;/code&gt; button on the Spacemacs Home
Buffer.&lt;/strong&gt;&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-quotes" class="anchor" aria-hidden="true" href="#quotes"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Quotes&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://gitter.im/syl20bnr/spacemacs?at=568e627a0cdaaa62045a7df6" rel="nofollow"&gt;Quote&lt;/a&gt; by &lt;a href="https://github.com/ashnur"&gt;ashnur&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;«I feel that spacemacs is an aircraft carrier and I am playing table tennis on the deck as a freerider.»
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href="https://gitter.im/syl20bnr/spacemacs?at=5768456c6577f032450cfedb" rel="nofollow"&gt;Quote&lt;/a&gt; by &lt;a href="https://github.com/deuill"&gt;deuill&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;«I LOVE SPACEMACS AND MAGIT

 That is all»
&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;&lt;a id="user-content-contributions" class="anchor" aria-hidden="true" href="#contributions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contributions&lt;/h1&gt;
&lt;p&gt;Spacemacs is a community-driven project, it needs &lt;em&gt;you&lt;/em&gt; to keep it up to
date and propose great and useful configuration for all the things!&lt;/p&gt;
&lt;p&gt;Before contributing be sure to consult the
&lt;a href="CONTRIBUTING.org"&gt;contribution guidelines&lt;/a&gt; and &lt;a href="http://spacemacs.org/doc/CONVENTIONS" rel="nofollow"&gt;conventions&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-communities" class="anchor" aria-hidden="true" href="#communities"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Communities&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://gitter.im/syl20bnr/spacemacs" rel="nofollow"&gt;Gitter Chat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://emacs.stackexchange.com/questions/tagged/spacemacs" rel="nofollow"&gt;Stack Exchange&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/spacemacs" rel="nofollow"&gt;Reddit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;a id="user-content-license" class="anchor" aria-hidden="true" href="#license"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;License&lt;/h1&gt;
&lt;p&gt;The license is GPLv3 for all parts specific to Spacemacs, this includes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the initialization and core files&lt;/li&gt;
&lt;li&gt;all the layer files&lt;/li&gt;
&lt;li&gt;the documentation&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For the packages shipped in this repository you can refer to the files header.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/nashamri/spacemacs-logo"&gt;Spacemacs logo&lt;/a&gt; by &lt;a href="https://github.com/nashamri"&gt;Nasser Alshammari&lt;/a&gt; released under a &lt;a href="http://creativecommons.org/licenses/by-sa/4.0/" rel="nofollow"&gt;Creative Commons Attribution-ShareAlike 4.0 International License.&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-supporting-spacemacs" class="anchor" aria-hidden="true" href="#supporting-spacemacs"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Supporting Spacemacs&lt;/h1&gt;
&lt;p&gt;The best way to support Spacemacs is to contribute to it either by reporting
bugs, helping the community on the &lt;a href="https://gitter.im/syl20bnr/spacemacs" rel="nofollow"&gt;Gitter Chat&lt;/a&gt; or sending pull requests.&lt;/p&gt;
&lt;p&gt;You can show your love for the project by getting cool Spacemacs t-shirts, mugs
and more in the &lt;a href="https://shop.spreadshirt.com/spacemacs-shop" rel="nofollow"&gt;Spacemacs Shop&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you want to show your support financially you can contribute to &lt;a href="https://salt.bountysource.com/teams/spacemacs" rel="nofollow"&gt;Bountysource&lt;/a&gt; or buy a drink for the
maintainer by clicking on the &lt;a href="#top"&gt;Paypal badge&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you used spacemacs in a project and you want to show that fact, you can use
the spacemacs badge: &lt;a href="http://spacemacs.org" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/8f5ee1d9b7278ed2c63f1f89e9a583ec59b52b6b/68747470733a2f2f63646e2e7261776769742e636f6d2f73796c3230626e722f73706163656d6163732f343432643032353737396461326636326663383663323038323730333639373731346462363531342f6173736574732f73706163656d6163732d62616467652e737667" alt="Built with Spacemacs" data-canonical-src="https://cdn.rawgit.com/syl20bnr/spacemacs/442d025779da2f62fc86c2082703697714db6514/assets/spacemacs-badge.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;For Markdown:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[![Built with Spacemacs](https://cdn.rawgit.com/syl20bnr/spacemacs/442d025779da2f62fc86c2082703697714db6514/assets/spacemacs-badge.svg)](http://spacemacs.org)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For HTML:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;a href="http://spacemacs.org"&amp;gt;&amp;lt;img src="https://cdn.rawgit.com/syl20bnr/spacemacs/442d025779da2f62fc86c2082703697714db6514/assets/spacemacs-badge.svg" /&amp;gt;&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For Org-mode:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[[http://spacemacs.org][file:https://cdn.rawgit.com/syl20bnr/spacemacs/442d025779da2f62fc86c2082703697714db6514/assets/spacemacs-badge.svg]]
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thank you!&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>syl20bnr</author><guid isPermaLink="false">https://github.com/syl20bnr/spacemacs</guid><pubDate>Fri, 24 Jan 2020 00:09:00 GMT</pubDate></item><item><title>jwiegley/use-package #10 in Emacs Lisp, Today</title><link>https://github.com/jwiegley/use-package</link><description>&lt;p&gt;&lt;i&gt;A use-package declaration for simplifying your .emacs&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-use-package" class="anchor" aria-hidden="true" href="#use-package"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;code&gt;use-package&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://gitter.im/use-package/Lobby?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/aaf22fcf54c86823689c20fd4e01f6eb53c22408/68747470733a2f2f6261646765732e6769747465722e696d2f7573652d7061636b6167652f4c6f6262792e737667" alt="Join the chat at https://gitter.im/use-package/Lobby" data-canonical-src="https://badges.gitter.im/use-package/Lobby.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://travis-ci.org/jwiegley/use-package" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/ac1dfb9d155cd71ac61fe6135f13b072fa68e413/68747470733a2f2f7472617669732d63692e6f72672f6a776965676c65792f7573652d7061636b6167652e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/jwiegley/use-package.svg?branch=master" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="http://melpa.milkbox.net/#/use-package" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/9e2b993215bec6257e83bb37be402ef9b5a37d95/687474703a2f2f6d656c70612e6d696c6b626f782e6e65742f7061636b616765732f7573652d7061636b6167652d62616467652e737667" alt="MELPA" data-canonical-src="http://melpa.milkbox.net/packages/use-package-badge.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://stable.melpa.org/#/use-package" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/61b06b0a52fee3022aaaa74c5998ba2d961d1c42/68747470733a2f2f737461626c652e6d656c70612e6f72672f7061636b616765732f7573652d7061636b6167652d62616467652e737667" alt="MELPA Stable" data-canonical-src="https://stable.melpa.org/packages/use-package-badge.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;use-package&lt;/code&gt; macro allows you to isolate package configuration in your
&lt;code&gt;.emacs&lt;/code&gt; file in a way that is both performance-oriented and, well, tidy.  I
created it because I have over 80 packages that I use in Emacs, and things
were getting difficult to manage.  Yet with this utility my total load time is
around 2 seconds, with no loss of functionality!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: &lt;code&gt;use-package&lt;/code&gt; is &lt;strong&gt;not&lt;/strong&gt; a package manager! Although &lt;code&gt;use-package&lt;/code&gt;
does have the useful capability to interface with package managers (see
&lt;a href="#package-installation"&gt;below&lt;/a&gt;), its primary purpose is for the configuration
and loading of packages.&lt;/p&gt;
&lt;p&gt;Notes for users upgrading to 2.x are located &lt;a href="#upgrading-to-2x"&gt;at the bottom&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-installing-use-package" class="anchor" aria-hidden="true" href="#installing-use-package"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installing use-package&lt;/h2&gt;
&lt;p&gt;Either clone from this GitHub repository or install from
&lt;a href="http://melpa.milkbox.net/" rel="nofollow"&gt;MELPA&lt;/a&gt; (recommended).&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-getting-started" class="anchor" aria-hidden="true" href="#getting-started"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Getting started&lt;/h2&gt;
&lt;p&gt;Here is the simplest &lt;code&gt;use-package&lt;/code&gt; declaration:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; This is only needed once, near the top of the file&lt;/span&gt;
(&lt;span class="pl-c1"&gt;eval-when-compile&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Following line is not needed if use-package.el is in ~/.emacs.d&lt;/span&gt;
  (&lt;span class="pl-c1"&gt;add-to-list&lt;/span&gt; &lt;span class="pl-c1"&gt;'load-path&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&amp;lt;path where use-package is installed&amp;gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
  (&lt;span class="pl-c1"&gt;require&lt;/span&gt; &lt;span class="pl-c1"&gt;'use-package&lt;/span&gt;))

(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; foo)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This loads in the package &lt;code&gt;foo&lt;/code&gt;, but only if &lt;code&gt;foo&lt;/code&gt; is available on your
system. If not, a warning is logged to the &lt;code&gt;*Messages*&lt;/code&gt; buffer.&lt;/p&gt;
&lt;p&gt;Use the &lt;code&gt;:init&lt;/code&gt; keyword to execute code before a package is loaded.  It
accepts one or more forms, up to the next keyword:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; foo
  &lt;span class="pl-c1"&gt;:init&lt;/span&gt;
  (&lt;span class="pl-k"&gt;setq&lt;/span&gt; foo-variable &lt;span class="pl-c1"&gt;t&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Similarly, &lt;code&gt;:config&lt;/code&gt; can be used to execute code after a package is loaded.
In cases where loading is done lazily (see more about autoloading below), this
execution is deferred until after the autoload occurs:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; foo
  &lt;span class="pl-c1"&gt;:init&lt;/span&gt;
  (&lt;span class="pl-k"&gt;setq&lt;/span&gt; foo-variable &lt;span class="pl-c1"&gt;t&lt;/span&gt;)
  &lt;span class="pl-c1"&gt;:config&lt;/span&gt;
  (foo-mode &lt;span class="pl-c1"&gt;1&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you might expect, you can use &lt;code&gt;:init&lt;/code&gt; and &lt;code&gt;:config&lt;/code&gt; together:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; color-moccur
  &lt;span class="pl-c1"&gt;:commands&lt;/span&gt; (isearch-moccur isearch-all)
  &lt;span class="pl-c1"&gt;:bind&lt;/span&gt; ((&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;M-s O&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; moccur)
         &lt;span class="pl-c1"&gt;:map&lt;/span&gt; isearch-mode-map
         (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;M-o&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; isearch-moccur)
         (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;M-O&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; isearch-moccur-all))
  &lt;span class="pl-c1"&gt;:init&lt;/span&gt;
  (&lt;span class="pl-k"&gt;setq&lt;/span&gt; isearch-lazy-highlight &lt;span class="pl-c1"&gt;t&lt;/span&gt;)
  &lt;span class="pl-c1"&gt;:config&lt;/span&gt;
  (&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; moccur-edit))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this case, I want to autoload the commands &lt;code&gt;isearch-moccur&lt;/code&gt; and
&lt;code&gt;isearch-all&lt;/code&gt; from &lt;code&gt;color-moccur.el&lt;/code&gt;, and bind keys both at the global level
and within the &lt;code&gt;isearch-mode-map&lt;/code&gt; (see next section).  When the package is
actually loaded (by using one of these commands), &lt;code&gt;moccur-edit&lt;/code&gt; is also
loaded, to allow editing of the &lt;code&gt;moccur&lt;/code&gt; buffer.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-key-binding" class="anchor" aria-hidden="true" href="#key-binding"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Key-binding&lt;/h2&gt;
&lt;p&gt;Another common thing to do when loading a module is to bind a key to primary
commands within that module:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; ace-jump-mode
  &lt;span class="pl-c1"&gt;:bind&lt;/span&gt; (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-.&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; ace-jump-mode))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This does two things: first, it creates an autoload for the &lt;code&gt;ace-jump-mode&lt;/code&gt;
command and defers loading of &lt;code&gt;ace-jump-mode&lt;/code&gt; until you actually use it.
Second, it binds the key &lt;code&gt;C-.&lt;/code&gt; to that command.  After loading, you can use
&lt;code&gt;M-x describe-personal-keybindings&lt;/code&gt; to see all such keybindings you've set
throughout your &lt;code&gt;.emacs&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;A more literal way to do the exact same thing is:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; ace-jump-mode
  &lt;span class="pl-c1"&gt;:commands&lt;/span&gt; ace-jump-mode
  &lt;span class="pl-c1"&gt;:init&lt;/span&gt;
  (bind-key &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-.&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'ace-jump-mode&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When you use the &lt;code&gt;:commands&lt;/code&gt; keyword, it creates autoloads for those commands
and defers loading of the module until they are used.  Since the &lt;code&gt;:init&lt;/code&gt; form
is always run -- even if &lt;code&gt;ace-jump-mode&lt;/code&gt; might not be on your system --
remember to restrict &lt;code&gt;:init&lt;/code&gt; code to only what would succeed either way.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;:bind&lt;/code&gt; keyword takes either a cons or a list of conses:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; hi-lock
  &lt;span class="pl-c1"&gt;:bind&lt;/span&gt; ((&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;M-o l&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; highlight-lines-matching-regexp)
         (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;M-o r&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; highlight-regexp)
         (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;M-o w&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; highlight-phrase)))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;:commands&lt;/code&gt; keyword likewise takes either a symbol or a list of symbols.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: inside strings, special keys like &lt;code&gt;tab&lt;/code&gt; or &lt;code&gt;F1&lt;/code&gt;-&lt;code&gt;Fn&lt;/code&gt; have to be written inside angle brackets, e.g. &lt;code&gt;"C-&amp;lt;up&amp;gt;"&lt;/code&gt;.
Standalone special keys (and some combinations) can be written in square brackets, e.g. &lt;code&gt;[tab]&lt;/code&gt; instead of &lt;code&gt;"&amp;lt;tab&amp;gt;"&lt;/code&gt;. The syntax for the keybindings is similar to
the "kbd" syntax: see &lt;a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Init-Rebinding.html" rel="nofollow"&gt;https://www.gnu.org/software/emacs/manual/html_node/emacs/Init-Rebinding.html&lt;/a&gt;
for more information.&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; helm
  &lt;span class="pl-c1"&gt;:bind&lt;/span&gt; ((&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;M-x&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; helm-M-x)
         (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;M-&amp;lt;f5&amp;gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; helm-find-files)
         ([f10] &lt;span class="pl-k"&gt;.&lt;/span&gt; helm-buffers-list)
         ([S-f10] &lt;span class="pl-k"&gt;.&lt;/span&gt; helm-recentf)))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Furthermore, &lt;a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Remapping-Commands.html" rel="nofollow"&gt;remapping commands&lt;/a&gt;
with &lt;code&gt;:bind&lt;/code&gt; and &lt;code&gt;bind-key&lt;/code&gt; works as expected, because when the
binding is a vector, it is passed straight to &lt;code&gt;define-key&lt;/code&gt;. So the
following example will rebind &lt;code&gt;M-q&lt;/code&gt; (originally &lt;code&gt;fill-paragraph&lt;/code&gt;) to
&lt;code&gt;unfill-toggle&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; unfill
  &lt;span class="pl-c1"&gt;:bind&lt;/span&gt; ([remap fill-paragraph] &lt;span class="pl-k"&gt;.&lt;/span&gt; unfill-toggle))&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-binding-to-keymaps" class="anchor" aria-hidden="true" href="#binding-to-keymaps"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Binding to keymaps&lt;/h3&gt;
&lt;p&gt;Normally &lt;code&gt;:bind&lt;/code&gt; expects that commands are functions that will be autoloaded
from the given package. However, this does not work if one of those commands
is actually a keymap, since keymaps are not functions, and cannot be
autoloaded using Emacs' &lt;code&gt;autoload&lt;/code&gt; mechanism.&lt;/p&gt;
&lt;p&gt;To handle this case, &lt;code&gt;use-package&lt;/code&gt; offers a special, limited variant of
&lt;code&gt;:bind&lt;/code&gt; called &lt;code&gt;:bind-keymap&lt;/code&gt;. The only difference is that the "commands"
bound to by &lt;code&gt;:bind-keymap&lt;/code&gt; must be keymaps defined in the package, rather than
command functions. This is handled behind the scenes by generating custom code
that loads the package containing the keymap, and then re-executes your
keypress after the first load, to reinterpret that keypress as a prefix key.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; projectile
  &lt;span class="pl-c1"&gt;:bind-keymap&lt;/span&gt;
  (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-c p&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; projectile-command-map))&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-binding-within-local-keymaps" class="anchor" aria-hidden="true" href="#binding-within-local-keymaps"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Binding within local keymaps&lt;/h3&gt;
&lt;p&gt;Slightly different from binding a key to a keymap, is binding a key &lt;em&gt;within&lt;/em&gt; a
local keymap that only exists after the package is loaded.  &lt;code&gt;use-package&lt;/code&gt;
supports this with a &lt;code&gt;:map&lt;/code&gt; modifier, taking the local keymap to bind to:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; helm
  &lt;span class="pl-c1"&gt;:bind&lt;/span&gt; (&lt;span class="pl-c1"&gt;:map&lt;/span&gt; helm-command-map
         (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-c h&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; helm-execute-persistent-action)))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The effect of this statement is to wait until &lt;code&gt;helm&lt;/code&gt; has loaded, and then to
bind the key &lt;code&gt;C-c h&lt;/code&gt; to &lt;code&gt;helm-execute-persistent-action&lt;/code&gt; within Helm's local
keymap, &lt;code&gt;helm-mode-map&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Multiple uses of &lt;code&gt;:map&lt;/code&gt; may be specified. Any binding occurring before the
first use of &lt;code&gt;:map&lt;/code&gt; are applied to the global keymap:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; &lt;span class="pl-c1"&gt;term&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:bind&lt;/span&gt; ((&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-c t&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-c1"&gt;term&lt;/span&gt;)
         &lt;span class="pl-c1"&gt;:map&lt;/span&gt; term-mode-map
         (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;M-p&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; term-send-up)
         (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;M-n&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; term-send-down)
         &lt;span class="pl-c1"&gt;:map&lt;/span&gt; term-raw-map
         (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;M-o&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; other-window)
         (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;M-p&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; term-send-up)
         (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;M-n&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; term-send-down)))&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-modes-and-interpreters" class="anchor" aria-hidden="true" href="#modes-and-interpreters"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Modes and interpreters&lt;/h2&gt;
&lt;p&gt;Similar to &lt;code&gt;:bind&lt;/code&gt;, you can use &lt;code&gt;:mode&lt;/code&gt; and &lt;code&gt;:interpreter&lt;/code&gt; to establish a
deferred binding within the &lt;code&gt;auto-mode-alist&lt;/code&gt; and &lt;code&gt;interpreter-mode-alist&lt;/code&gt;
variables. The specifier to either keyword can be a cons cell, a list of cons
cells, or a string or regexp:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; ruby-mode
  &lt;span class="pl-c1"&gt;:mode&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-cce"&gt;\\&lt;/span&gt;.rb&lt;span class="pl-cce"&gt;\\&lt;/span&gt;'&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:interpreter&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;ruby&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; The package is "python" but the mode is "python-mode":&lt;/span&gt;
(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; python
  &lt;span class="pl-c1"&gt;:mode&lt;/span&gt; (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-cce"&gt;\\&lt;/span&gt;.py&lt;span class="pl-cce"&gt;\\&lt;/span&gt;'&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; python-mode)
  &lt;span class="pl-c1"&gt;:interpreter&lt;/span&gt; (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;python&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; python-mode))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you aren't using &lt;code&gt;:commands&lt;/code&gt;, &lt;code&gt;:bind&lt;/code&gt;, &lt;code&gt;:bind*&lt;/code&gt;, &lt;code&gt;:bind-keymap&lt;/code&gt;,
&lt;code&gt;:bind-keymap*&lt;/code&gt;, &lt;code&gt;:mode&lt;/code&gt;, &lt;code&gt;:interpreter&lt;/code&gt;, or &lt;code&gt;:hook&lt;/code&gt; (all of which imply &lt;code&gt;:defer&lt;/code&gt;; see
the docstring for &lt;code&gt;use-package&lt;/code&gt; for a brief description of each), you can
still defer loading with the &lt;code&gt;:defer&lt;/code&gt; keyword:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; ace-jump-mode
  &lt;span class="pl-c1"&gt;:defer&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:init&lt;/span&gt;
  (&lt;span class="pl-c1"&gt;autoload&lt;/span&gt; &lt;span class="pl-c1"&gt;'ace-jump-mode&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;ace-jump-mode&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;)
  (bind-key &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-.&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;'ace-jump-mode&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This does exactly the same thing as the following:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; ace-jump-mode
  &lt;span class="pl-c1"&gt;:bind&lt;/span&gt; (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-.&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; ace-jump-mode))&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-magic-handlers" class="anchor" aria-hidden="true" href="#magic-handlers"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Magic handlers&lt;/h2&gt;
&lt;p&gt;Similar to &lt;code&gt;:mode&lt;/code&gt; and &lt;code&gt;:interpreter&lt;/code&gt;, you can also use &lt;code&gt;:magic&lt;/code&gt; and
&lt;code&gt;:magic-fallback&lt;/code&gt; to cause certain function to be run if the beginning of a
file matches a given regular expression. The difference between the two is
that &lt;code&gt;:magic-fallback&lt;/code&gt; has a lower priority than &lt;code&gt;:mode&lt;/code&gt;. For example:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; pdf-tools
  &lt;span class="pl-c1"&gt;:load-path&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;site-lisp/pdf-tools/lisp&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:magic&lt;/span&gt; (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;%PDF&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; pdf-view-mode)
  &lt;span class="pl-c1"&gt;:config&lt;/span&gt;
  (pdf-tools-install &lt;span class="pl-c1"&gt;:no-query&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This registers an autoloaded command for &lt;code&gt;pdf-view-mode&lt;/code&gt;, defers loading of
&lt;code&gt;pdf-tools&lt;/code&gt;, and runs &lt;code&gt;pdf-view-mode&lt;/code&gt; if the beginning of a buffer matches the
string &lt;code&gt;"%PDF"&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-hooks" class="anchor" aria-hidden="true" href="#hooks"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Hooks&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;:hook&lt;/code&gt; keyword allows adding functions onto package hooks. Thus,
all of the following are equivalent:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; ace-jump-mode
  &lt;span class="pl-c1"&gt;:hook&lt;/span&gt; prog-mode)

(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; ace-jump-mode
  &lt;span class="pl-c1"&gt;:hook&lt;/span&gt; (&lt;span class="pl-c1"&gt;prog-mode&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; ace-jump-mode))

(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; ace-jump-mode
  &lt;span class="pl-c1"&gt;:commands&lt;/span&gt; ace-jump-mode
  &lt;span class="pl-c1"&gt;:init&lt;/span&gt;
  (&lt;span class="pl-c1"&gt;add-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;'prog-mode-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;#&lt;span class="pl-c1"&gt;'ace-jump-mode&lt;/span&gt;&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And likewise, when multiple hooks should be applied, the following are also
equivalent:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; ace-jump-mode
  &lt;span class="pl-c1"&gt;:hook&lt;/span&gt; (&lt;span class="pl-c1"&gt;prog-mode&lt;/span&gt; text-mode))

(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; ace-jump-mode
  &lt;span class="pl-c1"&gt;:hook&lt;/span&gt; ((&lt;span class="pl-c1"&gt;prog-mode&lt;/span&gt; text-mode) &lt;span class="pl-k"&gt;.&lt;/span&gt; ace-jump-mode))

(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; ace-jump-mode
  &lt;span class="pl-c1"&gt;:hook&lt;/span&gt; ((&lt;span class="pl-c1"&gt;prog-mode&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; ace-jump-mode)
         (&lt;span class="pl-c1"&gt;text-mode&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; ace-jump-mode)))

(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; ace-jump-mode
  &lt;span class="pl-c1"&gt;:commands&lt;/span&gt; ace-jump-mode
  &lt;span class="pl-c1"&gt;:init&lt;/span&gt;
  (&lt;span class="pl-c1"&gt;add-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;'prog-mode-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;#&lt;span class="pl-c1"&gt;'ace-jump-mode&lt;/span&gt;&lt;/span&gt;)
  (&lt;span class="pl-c1"&gt;add-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;'text-mode-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;#&lt;span class="pl-c1"&gt;'ace-jump-mode&lt;/span&gt;&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When using &lt;code&gt;:hook&lt;/code&gt; omit the "-hook" suffix if you specify the hook
explicitly, as this is appended by default. For example the following
code will not work as it attempts to add to the &lt;code&gt;prog-mode-hook-hook&lt;/code&gt;
which does not exist:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; DOES NOT WORK&lt;/span&gt;
(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; ace-jump-mode
  &lt;span class="pl-c1"&gt;:hook&lt;/span&gt; (&lt;span class="pl-c1"&gt;prog-mode-hook&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; ace-jump-mode))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you do not like this behaviour, set &lt;code&gt;use-package-hook-name-suffix&lt;/code&gt;
to nil. By default the value of this variable is "-hook".&lt;/p&gt;
&lt;p&gt;The use of &lt;code&gt;:hook&lt;/code&gt;, as with &lt;code&gt;:bind&lt;/code&gt;, &lt;code&gt;:mode&lt;/code&gt;, &lt;code&gt;:interpreter&lt;/code&gt;, etc., causes the
functions being hooked to implicitly be read as &lt;code&gt;:commands&lt;/code&gt; (meaning they will
establish interactive &lt;code&gt;autoload&lt;/code&gt; definitions for that module, if not already
defined as functions), and so &lt;code&gt;:defer t&lt;/code&gt; is also implied by &lt;code&gt;:hook&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-package-customization" class="anchor" aria-hidden="true" href="#package-customization"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Package customization&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-customizing-variables" class="anchor" aria-hidden="true" href="#customizing-variables"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Customizing variables.&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;:custom&lt;/code&gt; keyword allows customization of package custom variables.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; comint
  &lt;span class="pl-c1"&gt;:custom&lt;/span&gt;
  (comint-buffer-maximum-size &lt;span class="pl-c1"&gt;20000&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Increase comint buffer size.&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
  (comint-prompt-read-only &lt;span class="pl-c1"&gt;t&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Make the prompt read only.&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The documentation string is not mandatory.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: these are only for people who wish to keep customizations with their
accompanying use-package declarations. Functionally, the only benefit over
using &lt;code&gt;setq&lt;/code&gt; in a &lt;code&gt;:config&lt;/code&gt; block is that customizations might execute code
when values are assigned. If you currently use &lt;code&gt;M-x customize-option&lt;/code&gt; and save
to a settings file, you do not want to use this option.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-customizing-faces" class="anchor" aria-hidden="true" href="#customizing-faces"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Customizing faces&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;:custom-face&lt;/code&gt; keyword allows customization of package custom faces.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; eruby-mode
  &lt;span class="pl-c1"&gt;:custom-face&lt;/span&gt;
  (eruby-standard-face ((&lt;span class="pl-c1"&gt;t&lt;/span&gt; (&lt;span class="pl-c1"&gt;:slant&lt;/span&gt; &lt;span class="pl-c1"&gt;italic&lt;/span&gt;)))))&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-notes-about-lazy-loading" class="anchor" aria-hidden="true" href="#notes-about-lazy-loading"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Notes about lazy loading&lt;/h2&gt;
&lt;p&gt;In almost all cases you don't need to manually specify &lt;code&gt;:defer t&lt;/code&gt;.  This is
implied whenever &lt;code&gt;:bind&lt;/code&gt; or &lt;code&gt;:mode&lt;/code&gt; or &lt;code&gt;:interpreter&lt;/code&gt; is used.  Typically, you
only need to specify &lt;code&gt;:defer&lt;/code&gt; if you know for a fact that some other package
will do something to cause your package to load at the appropriate time, and
thus you would like to defer loading even though use-package isn't creating
any autoloads for you.&lt;/p&gt;
&lt;p&gt;You can override package deferral with the &lt;code&gt;:demand&lt;/code&gt; keyword.  Thus, even if
you use &lt;code&gt;:bind&lt;/code&gt;, using &lt;code&gt;:demand&lt;/code&gt; will force loading to occur immediately and
not establish an autoload for the bound key.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-information-about-package-loads" class="anchor" aria-hidden="true" href="#information-about-package-loads"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Information about package loads&lt;/h2&gt;
&lt;p&gt;When a package is loaded, and if you have &lt;code&gt;use-package-verbose&lt;/code&gt; set to &lt;code&gt;t&lt;/code&gt;, or
if the package takes longer than 0.1s to load, you will see a message to
indicate this loading activity in the &lt;code&gt;*Messages*&lt;/code&gt; buffer.  The same will
happen for configuration, or &lt;code&gt;:config&lt;/code&gt; blocks that take longer than 0.1s to
execute.  In general, you should keep &lt;code&gt;:init&lt;/code&gt; forms as simple and quick as
possible, and put as much as you can get away with into the &lt;code&gt;:config&lt;/code&gt; block.
This way, deferred loading can help your Emacs to start as quickly as
possible.&lt;/p&gt;
&lt;p&gt;Additionally, if an error occurs while initializing or configuring a package,
this will not stop your Emacs from loading.  Rather, the error will be
captured by &lt;code&gt;use-package&lt;/code&gt;, and reported to a special &lt;code&gt;*Warnings*&lt;/code&gt; popup
buffer, so that you can debug the situation in an otherwise functional Emacs.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-conditional-loading" class="anchor" aria-hidden="true" href="#conditional-loading"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Conditional loading&lt;/h2&gt;
&lt;p&gt;You can use the &lt;code&gt;:if&lt;/code&gt; keyword to predicate the loading and initialization of
modules.&lt;/p&gt;
&lt;p&gt;For example, I only want &lt;code&gt;edit-server&lt;/code&gt; running for my main,
graphical Emacs, not for other Emacsen I may start at the command line:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; edit-server
  &lt;span class="pl-c1"&gt;:if&lt;/span&gt; window-system
  &lt;span class="pl-c1"&gt;:init&lt;/span&gt;
  (&lt;span class="pl-c1"&gt;add-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;'after-init-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;'server-start&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;)
  (&lt;span class="pl-c1"&gt;add-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;'after-init-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;'edit-server-start&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In another example, we can load things conditional on the operating system:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; exec-path-from-shell
  &lt;span class="pl-c1"&gt;:if&lt;/span&gt; (&lt;span class="pl-c1"&gt;memq&lt;/span&gt; window-system '(mac ns))
  &lt;span class="pl-c1"&gt;:ensure&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:config&lt;/span&gt;
  (exec-path-from-shell-initialize))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;:disabled&lt;/code&gt; keyword can turn off a module you're having difficulties with,
or stop loading something you're not using at the present time:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; ess-site
  &lt;span class="pl-c1"&gt;:disabled&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:commands&lt;/span&gt; R)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When byte-compiling your &lt;code&gt;.emacs&lt;/code&gt; file, disabled declarations are omitted
from the output entirely, to accelerate startup times.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: &lt;code&gt;:when&lt;/code&gt; is provided as an alias for &lt;code&gt;:if&lt;/code&gt;, and &lt;code&gt;:unless foo&lt;/code&gt; means
the same thing as &lt;code&gt;:if (not foo)&lt;/code&gt;. For example, the following will also stop
&lt;code&gt;:ensure&lt;/code&gt; from happening on Mac systems:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;when&lt;/span&gt; (&lt;span class="pl-c1"&gt;memq&lt;/span&gt; window-system '(mac ns))
  (&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; exec-path-from-shell
    &lt;span class="pl-c1"&gt;:ensure&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;
    &lt;span class="pl-c1"&gt;:config&lt;/span&gt;
    (exec-path-from-shell-initialize)))&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-conditional-loading-before-preface" class="anchor" aria-hidden="true" href="#conditional-loading-before-preface"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Conditional loading before :preface&lt;/h3&gt;
&lt;p&gt;If you need to conditionalize a use-package form so that the condition occurs
before even the &lt;code&gt;:preface&lt;/code&gt; is executed, simply use &lt;code&gt;when&lt;/code&gt; around the
use-package form itself:&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-loading-packages-in-sequence" class="anchor" aria-hidden="true" href="#loading-packages-in-sequence"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Loading packages in sequence&lt;/h3&gt;
&lt;p&gt;Sometimes it only makes sense to configure a package after another has been
loaded, because certain variables or functions are not in scope until that
time. This can achieved using an &lt;code&gt;:after&lt;/code&gt; keyword that allows a fairly rich
description of the exact conditions when loading should occur. Here is an
example:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; hydra
  &lt;span class="pl-c1"&gt;:load-path&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;site-lisp/hydra&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)

(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; ivy
  &lt;span class="pl-c1"&gt;:load-path&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;site-lisp/swiper&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)

(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; ivy-hydra
  &lt;span class="pl-c1"&gt;:after&lt;/span&gt; (ivy hydra))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this case, because all of these packages are demand-loaded in the order
they occur, the use of &lt;code&gt;:after&lt;/code&gt; is not strictly necessary. By using it,
however, the above code becomes order-independent, without an implicit
depedence on the nature of your init file.&lt;/p&gt;
&lt;p&gt;By default, &lt;code&gt;:after (foo bar)&lt;/code&gt; is the same as &lt;code&gt;:after (:all foo bar)&lt;/code&gt;, meaning
that loading of the given package will not happen until both &lt;code&gt;foo&lt;/code&gt; and &lt;code&gt;bar&lt;/code&gt;
have been loaded. Here are some of the other possibilities:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;:after&lt;/span&gt; (foo bar)
&lt;span class="pl-c1"&gt;:after&lt;/span&gt; (&lt;span class="pl-c1"&gt;:all&lt;/span&gt; foo bar)
&lt;span class="pl-c1"&gt;:after&lt;/span&gt; (&lt;span class="pl-c1"&gt;:any&lt;/span&gt; foo bar)
&lt;span class="pl-c1"&gt;:after&lt;/span&gt; (&lt;span class="pl-c1"&gt;:all&lt;/span&gt; (&lt;span class="pl-c1"&gt;:any&lt;/span&gt; foo bar) (&lt;span class="pl-c1"&gt;:any&lt;/span&gt; baz quux))
&lt;span class="pl-c1"&gt;:after&lt;/span&gt; (&lt;span class="pl-c1"&gt;:any&lt;/span&gt; (&lt;span class="pl-c1"&gt;:all&lt;/span&gt; foo bar) (&lt;span class="pl-c1"&gt;:all&lt;/span&gt; baz quux))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When you nest selectors, such as &lt;code&gt;(:any (:all foo bar) (:all baz quux))&lt;/code&gt;, it
means that the package will be loaded when either both &lt;code&gt;foo&lt;/code&gt; and &lt;code&gt;bar&lt;/code&gt; have
been loaded, or both &lt;code&gt;baz&lt;/code&gt; and &lt;code&gt;quux&lt;/code&gt; have been loaded.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: pay attention if you set &lt;code&gt;use-package-always-defer&lt;/code&gt; to t, and also use
the &lt;code&gt;:after&lt;/code&gt; keyword, as you will need to specify how the declared package is
to be loaded: e.g., by some &lt;code&gt;:bind&lt;/code&gt;. If you're not using one of the mechanisms
that registers autoloads, such as &lt;code&gt;:bind&lt;/code&gt; or &lt;code&gt;:hook&lt;/code&gt;, and your package manager
does not provide autoloads, it's possible that without adding &lt;code&gt;:demand t&lt;/code&gt; to
those declarations, your package will never be loaded.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-prevent-loading-if-dependencies-are-missing" class="anchor" aria-hidden="true" href="#prevent-loading-if-dependencies-are-missing"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Prevent loading if dependencies are missing&lt;/h3&gt;
&lt;p&gt;While the &lt;code&gt;:after&lt;/code&gt; keyword delays loading until the dependencies are loaded,
the somewhat simpler &lt;code&gt;:requires&lt;/code&gt; keyword simply never loads the package if the
dependencies are not available at the time the &lt;code&gt;use-package&lt;/code&gt; declaration is
encountered. By "available" in this context it means that &lt;code&gt;foo&lt;/code&gt; is available
if &lt;code&gt;(featurep 'foo)&lt;/code&gt; evaluates to a non-nil value. For example:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; abbrev
  &lt;span class="pl-c1"&gt;:requires&lt;/span&gt; foo)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is the same as:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; abbrev
  &lt;span class="pl-c1"&gt;:if&lt;/span&gt; (&lt;span class="pl-c1"&gt;featurep&lt;/span&gt; &lt;span class="pl-c1"&gt;'foo&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As a convenience, a list of such packages may be specified:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; abbrev
  &lt;span class="pl-c1"&gt;:requires&lt;/span&gt; (foo bar baz))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For more complex logic, such as that supported by &lt;code&gt;:after&lt;/code&gt;, simply use &lt;code&gt;:if&lt;/code&gt;
and the appropriate Lisp expression.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-byte-compiling-your-emacs" class="anchor" aria-hidden="true" href="#byte-compiling-your-emacs"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Byte-compiling your .emacs&lt;/h2&gt;
&lt;p&gt;Another feature of &lt;code&gt;use-package&lt;/code&gt; is that it always loads every file that it
can when &lt;code&gt;.emacs&lt;/code&gt; is being byte-compiled.  This helps to silence spurious
warnings about unknown variables and functions.&lt;/p&gt;
&lt;p&gt;However, there are times when this is just not enough.  For those times, use
the &lt;code&gt;:defines&lt;/code&gt; and &lt;code&gt;:functions&lt;/code&gt; keywords to introduce dummy variable and
function declarations solely for the sake of the byte-compiler:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; texinfo
  &lt;span class="pl-c1"&gt;:defines&lt;/span&gt; texinfo-section-list
  &lt;span class="pl-c1"&gt;:commands&lt;/span&gt; texinfo-mode
  &lt;span class="pl-c1"&gt;:init&lt;/span&gt;
  (&lt;span class="pl-c1"&gt;add-to-list&lt;/span&gt; &lt;span class="pl-c1"&gt;'auto-mode-alist&lt;/span&gt; '(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-cce"&gt;\\&lt;/span&gt;.texi$&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; texinfo-mode)))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you need to silence a missing function warning, you can use &lt;code&gt;:functions&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; ruby-mode
  &lt;span class="pl-c1"&gt;:mode&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-cce"&gt;\\&lt;/span&gt;.rb&lt;span class="pl-cce"&gt;\\&lt;/span&gt;'&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:interpreter&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;ruby&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:functions&lt;/span&gt; inf-ruby-keys
  &lt;span class="pl-c1"&gt;:config&lt;/span&gt;
  (&lt;span class="pl-k"&gt;defun&lt;/span&gt; &lt;span class="pl-e"&gt;my-ruby-mode-hook&lt;/span&gt; ()
    (&lt;span class="pl-c1"&gt;require&lt;/span&gt; &lt;span class="pl-c1"&gt;'inf-ruby&lt;/span&gt;)
    (inf-ruby-keys))

  (&lt;span class="pl-c1"&gt;add-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;'ruby-mode-hook&lt;/span&gt; &lt;span class="pl-c1"&gt;'my-ruby-mode-hook&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-prevent-a-package-from-loading-at-compile-time" class="anchor" aria-hidden="true" href="#prevent-a-package-from-loading-at-compile-time"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Prevent a package from loading at compile-time&lt;/h3&gt;
&lt;p&gt;Normally, &lt;code&gt;use-package&lt;/code&gt; will load each package at compile time before
compiling the configuration, to ensure that any necessary symbols are in scope
to satisfy the byte-compiler.  At times this can cause problems, since a
package may have special loading requirements, and all that you want to use
&lt;code&gt;use-package&lt;/code&gt; for is to add a configuration to the &lt;code&gt;eval-after-load&lt;/code&gt; hook.  In
such cases, use the &lt;code&gt;:no-require&lt;/code&gt; keyword:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; foo
  &lt;span class="pl-c1"&gt;:no-require&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:config&lt;/span&gt;
  (&lt;span class="pl-c1"&gt;message&lt;/span&gt; &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-s"&gt;This is evaluated when &lt;span class="pl-smi"&gt;`foo'&lt;/span&gt; is loaded&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-extending-the-load-path" class="anchor" aria-hidden="true" href="#extending-the-load-path"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Extending the load-path&lt;/h2&gt;
&lt;p&gt;If your package needs a directory added to the &lt;code&gt;load-path&lt;/code&gt; in order to load,
use &lt;code&gt;:load-path&lt;/code&gt;.  This takes a symbol, a function, a string or a list of
strings.  If the path is relative, it is expanded within
&lt;code&gt;user-emacs-directory&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; ess-site
  &lt;span class="pl-c1"&gt;:load-path&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;site-lisp/ess/lisp/&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:commands&lt;/span&gt; R)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: when using a symbol or a function to provide a dynamically generated
list of paths, you must inform the byte-compiler of this definition so the
value is available at byte-compilation time.  This is done by using the
special form &lt;code&gt;eval-and-compile&lt;/code&gt; (as opposed to &lt;code&gt;eval-when-compile&lt;/code&gt;).  Further,
this value is fixed at whatever was determined during compilation, to avoid
looking up the same information again on each startup:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;eval-and-compile&lt;/span&gt;
  (&lt;span class="pl-k"&gt;defun&lt;/span&gt; &lt;span class="pl-e"&gt;ess-site-load-path&lt;/span&gt; ()
    (&lt;span class="pl-c1"&gt;shell-command&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;find ~ -path ess/lisp&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)))

(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; ess-site
  &lt;span class="pl-c1"&gt;:load-path&lt;/span&gt; (&lt;span class="pl-k"&gt;lambda&lt;/span&gt; () (&lt;span class="pl-k"&gt;list&lt;/span&gt; (ess-site-load-path)))
  &lt;span class="pl-c1"&gt;:commands&lt;/span&gt; R)&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-catching-errors-during-use-package-expansion" class="anchor" aria-hidden="true" href="#catching-errors-during-use-package-expansion"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Catching errors during use-package expansion&lt;/h2&gt;
&lt;p&gt;By default, if &lt;code&gt;use-package-expand-minimally&lt;/code&gt; is nil (the default),
use-package will attempts to catch and report errors that occur during
expansion of use-package declarations in your init file. Setting
&lt;code&gt;use-package-expand-minimally&lt;/code&gt; to t completely disables this checking.&lt;/p&gt;
&lt;p&gt;This behavior may be overridden locally using the &lt;code&gt;:catch&lt;/code&gt; keyword. If &lt;code&gt;t&lt;/code&gt; or
&lt;code&gt;nil&lt;/code&gt;, it enables or disables catching errors at load time. It can also be a
function taking two arguments: the keyword being processed at the time the
error was encountered, and the error object (as generated by
&lt;code&gt;condition-case&lt;/code&gt;). For example:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; example
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Note that errors are never trapped in the preface, since doing so would&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; hide definitions from the byte-compiler.&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:preface&lt;/span&gt; (&lt;span class="pl-c1"&gt;message&lt;/span&gt; &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-s"&gt;I'm here at byte-compile and load time.&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;)
  &lt;span class="pl-c1"&gt;:init&lt;/span&gt; (&lt;span class="pl-c1"&gt;message&lt;/span&gt; &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-s"&gt;I'm always here at startup&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;)
  &lt;span class="pl-c1"&gt;:config&lt;/span&gt;
  (&lt;span class="pl-c1"&gt;message&lt;/span&gt; &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-s"&gt;I'm always here after the package is loaded&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;)
  (&lt;span class="pl-c1"&gt;error&lt;/span&gt; &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-s"&gt;oops&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;)
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Don't try to (require 'example), this is just an example!&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:no-require&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:catch&lt;/span&gt; (&lt;span class="pl-k"&gt;lambda&lt;/span&gt; (&lt;span class="pl-v"&gt;keyword&lt;/span&gt; &lt;span class="pl-v"&gt;err&lt;/span&gt;)
           (&lt;span class="pl-c1"&gt;message&lt;/span&gt; (&lt;span class="pl-c1"&gt;error-message-string&lt;/span&gt; err))))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Evaluating the above form will print these messages:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;I’m here at byte-compile and load time.
I’m always here at startup
Configuring package example...
I’m always here after the package is loaded
oops
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;a id="user-content-diminishing-and-delighting-minor-modes" class="anchor" aria-hidden="true" href="#diminishing-and-delighting-minor-modes"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Diminishing and delighting minor modes&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;use-package&lt;/code&gt; also provides built-in support for the diminish and
delight utilities -- if you have them installed. Their purpose is to
remove or change minor mode strings in your mode-line.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/myrjola/diminish.el"&gt;diminish&lt;/a&gt; is invoked with
the &lt;code&gt;:diminish&lt;/code&gt; keyword, which is passed either a minor mode symbol, a
cons of the symbol and its replacement string, or just a replacement
string, in which case the minor mode symbol is guessed to be the
package name with "-mode" appended at the end:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; abbrev
  &lt;span class="pl-c1"&gt;:diminish&lt;/span&gt; abbrev-mode
  &lt;span class="pl-c1"&gt;:config&lt;/span&gt;
  (&lt;span class="pl-k"&gt;if&lt;/span&gt; (&lt;span class="pl-c1"&gt;file-exists-p&lt;/span&gt; abbrev-file-name)
      (&lt;span class="pl-c1"&gt;quietly-read-abbrev-file&lt;/span&gt;)))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href="https://elpa.gnu.org/packages/delight.html" rel="nofollow"&gt;delight&lt;/a&gt; is invoked with
the &lt;code&gt;:delight&lt;/code&gt; keyword, which is passed a minor mode symbol, a
replacement string or
quoted
&lt;a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Mode-Line-Data.html" rel="nofollow"&gt;mode-line data&lt;/a&gt; (in
which case the minor mode symbol is guessed to be the package name
with "-mode" appended at the end), both of these, or several lists of
both. If no arguments are provided, the default mode name is hidden
completely.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Don't show anything for rainbow-mode.&lt;/span&gt;
(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; rainbow-mode
  &lt;span class="pl-c1"&gt;:delight&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Don't show anything for auto-revert-mode, which doesn't match&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; its package name.&lt;/span&gt;
(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; autorevert
  &lt;span class="pl-c1"&gt;:delight&lt;/span&gt; auto-revert-mode)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Remove the mode name for projectile-mode, but show the project name.&lt;/span&gt;
(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; projectile
  &lt;span class="pl-c1"&gt;:delight&lt;/span&gt; '(&lt;span class="pl-c1"&gt;:eval&lt;/span&gt; (&lt;span class="pl-c1"&gt;concat&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt; &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; (projectile-project-name))))

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; Completely hide visual-line-mode and change auto-fill-mode to " AF".&lt;/span&gt;
(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; emacs
  &lt;span class="pl-c1"&gt;:delight&lt;/span&gt;
  (&lt;span class="pl-c1"&gt;auto-fill-function&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt; AF&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
  (&lt;span class="pl-c1"&gt;visual-line-mode&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-package-installation" class="anchor" aria-hidden="true" href="#package-installation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Package installation&lt;/h2&gt;
&lt;p&gt;You can use &lt;code&gt;use-package&lt;/code&gt; to load packages from ELPA with &lt;code&gt;package.el&lt;/code&gt;. This
is particularly useful if you share your &lt;code&gt;.emacs&lt;/code&gt; among several machines; the
relevant packages are downloaded automatically once declared in your &lt;code&gt;.emacs&lt;/code&gt;.
The &lt;code&gt;:ensure&lt;/code&gt; keyword causes the package(s) to be installed automatically if
not already present on your system:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; magit
  &lt;span class="pl-c1"&gt;:ensure&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you need to install a different package from the one named by
&lt;code&gt;use-package&lt;/code&gt;, you can specify it like this:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; tex
  &lt;span class="pl-c1"&gt;:ensure&lt;/span&gt; auctex)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Enable &lt;code&gt;use-package-always-ensure&lt;/code&gt; if you wish this behavior to be global
for all packages:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;require&lt;/span&gt; &lt;span class="pl-c1"&gt;'use-package-ensure&lt;/span&gt;)
(&lt;span class="pl-k"&gt;setq&lt;/span&gt; use-package-always-ensure &lt;span class="pl-c1"&gt;t&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: &lt;code&gt;:ensure&lt;/code&gt; will install a package if it is not already installed, but
it does not keep it up-to-date. If you want to keep your packages updated
automatically, one option is to use
&lt;a href="https://github.com/rranelli/auto-package-update.el"&gt;auto-package-update&lt;/a&gt;,
like&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; auto-package-update
  &lt;span class="pl-c1"&gt;:config&lt;/span&gt;
  (&lt;span class="pl-k"&gt;setq&lt;/span&gt; auto-package-update-delete-old-versions &lt;span class="pl-c1"&gt;t&lt;/span&gt;)
  (&lt;span class="pl-k"&gt;setq&lt;/span&gt; auto-package-update-hide-results &lt;span class="pl-c1"&gt;t&lt;/span&gt;)
  (auto-package-update-maybe))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Lastly, when running on Emacs 24.4 or later, use-package can pin a package to
a specific archive, allowing you to mix and match packages from different
archives.  The primary use-case for this is preferring packages from the
&lt;code&gt;melpa-stable&lt;/code&gt; and &lt;code&gt;gnu&lt;/code&gt; archives, but using specific packages from &lt;code&gt;melpa&lt;/code&gt;
when you need to track newer versions than what is available in the &lt;code&gt;stable&lt;/code&gt;
archives is also a valid use-case.&lt;/p&gt;
&lt;p&gt;By default &lt;code&gt;package.el&lt;/code&gt; prefers &lt;code&gt;melpa&lt;/code&gt; over &lt;code&gt;melpa-stable&lt;/code&gt; due to the
versioning &lt;code&gt;(&amp;gt; evil-20141208.623 evil-1.0.9)&lt;/code&gt;, so even if you are tracking
only a single package from &lt;code&gt;melpa&lt;/code&gt;, you will need to tag all the non-&lt;code&gt;melpa&lt;/code&gt;
packages with the appropriate archive. If this really annoys you, then you can
set &lt;code&gt;use-package-always-pin&lt;/code&gt; to set a default.&lt;/p&gt;
&lt;p&gt;If you want to manually keep a package updated and ignore upstream updates,
you can pin it to &lt;code&gt;manual&lt;/code&gt;, which as long as there is no repository by that
name, will Just Work(tm).&lt;/p&gt;
&lt;p&gt;&lt;code&gt;use-package&lt;/code&gt; throws an error if you try to pin a package to an archive that
has not been configured using &lt;code&gt;package-archives&lt;/code&gt; (apart from the magic
&lt;code&gt;manual&lt;/code&gt; archive mentioned above):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Archive 'foo' requested for package 'bar' is not available.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; company
  &lt;span class="pl-c1"&gt;:ensure&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:pin&lt;/span&gt; &lt;span class="pl-c1"&gt;melpa-stable&lt;/span&gt;)

(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; evil
  &lt;span class="pl-c1"&gt;:ensure&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;)
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; no :pin needed, as package.el will choose the version in melpa&lt;/span&gt;

(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; adaptive-wrap
  &lt;span class="pl-c1"&gt;:ensure&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; as this package is available only in the gnu archive, this is&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; technically not needed, but it helps to highlight where it&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; comes from&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:pin&lt;/span&gt; &lt;span class="pl-c1"&gt;gnu&lt;/span&gt;)

(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; &lt;span class="pl-c1"&gt;org&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:ensure&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; ignore org-mode from upstream and use a manually installed version&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:pin&lt;/span&gt; manual)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: the &lt;code&gt;:pin&lt;/code&gt; argument has no effect on emacs versions &amp;lt; 24.4.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-usage-with-other-package-managers" class="anchor" aria-hidden="true" href="#usage-with-other-package-managers"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Usage with other package managers&lt;/h3&gt;
&lt;p&gt;By overriding &lt;code&gt;use-package-ensure-function&lt;/code&gt; and/or
&lt;code&gt;use-package-pre-ensure-function&lt;/code&gt;, other package managers can override
&lt;code&gt;:ensure&lt;/code&gt; to use them instead of &lt;code&gt;package.el&lt;/code&gt;. At the present time,
the only package manager that does this
is &lt;a href="https://github.com/raxod502/straight.el"&gt;&lt;code&gt;straight.el&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-gathering-statistics" class="anchor" aria-hidden="true" href="#gathering-statistics"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Gathering Statistics&lt;/h2&gt;
&lt;p&gt;If you'd like to see how many packages you've loaded, what stage of
initialization they've reached, and how much aggregate time they've
spent (roughly), you can enable &lt;code&gt;use-package-compute-statistics&lt;/code&gt; after
loading &lt;code&gt;use-package&lt;/code&gt; but before any &lt;code&gt;use-package&lt;/code&gt; forms, and then run
the command &lt;code&gt;M-x use-package-report&lt;/code&gt; to see the results. The buffer
displayed is a tabulated list. You can use &lt;code&gt;S&lt;/code&gt; in a column to sort the
rows based on it.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-keyword-extensions" class="anchor" aria-hidden="true" href="#keyword-extensions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Keyword Extensions&lt;/h2&gt;
&lt;p&gt;Starting with version 2.0, &lt;code&gt;use-package&lt;/code&gt; is based on an extensible
framework that makes it easy for package authors to add new keywords,
or modify the behavior of existing keywords.&lt;/p&gt;
&lt;p&gt;Some keyword extensions are now included in the &lt;code&gt;use-package&lt;/code&gt;
distribution and can be optionally installed.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-use-package-ensure-system-package" class="anchor" aria-hidden="true" href="#use-package-ensure-system-package"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;code&gt;(use-package-ensure-system-package)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;:ensure-system-package&lt;/code&gt; keyword allows you to ensure system
binaries exist alongside your package declarations.&lt;/p&gt;
&lt;p&gt;First, you will want to make sure &lt;code&gt;exec-path&lt;/code&gt; is cognisant of all
binary package names that you would like to ensure are
installed. &lt;a href="https://github.com/purcell/exec-path-from-shell"&gt;&lt;code&gt;exec-path-from-shell&lt;/code&gt;&lt;/a&gt;
is often a good way to do this.&lt;/p&gt;
&lt;p&gt;To enable the extension after you've loaded &lt;code&gt;use-package&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; use-package-ensure-system-package
  &lt;span class="pl-c1"&gt;:ensure&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here’s an example of usage:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; rg
  &lt;span class="pl-c1"&gt;:ensure-system-package&lt;/span&gt; rg)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will expect a global binary package to exist called &lt;code&gt;rg&lt;/code&gt;. If it
does not, it will use your system package manager (using the package
&lt;a href="https://gitlab.com/jabranham/system-packages" rel="nofollow"&gt;&lt;code&gt;system-packages&lt;/code&gt;&lt;/a&gt;) to
attempt an install of a binary by the same name asynchronously. For
example, for most &lt;code&gt;macOS&lt;/code&gt; users this would call: &lt;code&gt;brew install rg&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If the package is named differently than the binary, you can use a
cons in the form of  &lt;code&gt;(binary . package-name)&lt;/code&gt;, i.e.:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; rg
  &lt;span class="pl-c1"&gt;:ensure-system-package&lt;/span&gt;
  (rg &lt;span class="pl-k"&gt;.&lt;/span&gt; ripgrep))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the previous &lt;code&gt;macOS&lt;/code&gt; example, this would call: &lt;code&gt;brew install ripgrep&lt;/code&gt; if &lt;code&gt;rg&lt;/code&gt; was not found.&lt;/p&gt;
&lt;p&gt;What if you want to customize the install command further?&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; tern
  &lt;span class="pl-c1"&gt;:ensure-system-package&lt;/span&gt; (tern &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;npm i -g tern&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;:ensure-system-package&lt;/code&gt; can also take a cons where its &lt;code&gt;cdr&lt;/code&gt; is a
string that will get called by &lt;code&gt;(async-shell-command)&lt;/code&gt; to install if
it isn’t found.&lt;/p&gt;
&lt;p&gt;You may also pass in a list of cons-es:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; ruby-mode
  &lt;span class="pl-c1"&gt;:ensure-system-package&lt;/span&gt;
  ((rubocop     &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;gem install rubocop&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
   (ruby-lint   &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;gem install ruby-lint&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
   (ripper-tags &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;gem install ripper-tags&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
   (pry         &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;gem install pry&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally, in case the package dependency does not provide a global
executable, you can ensure packages exist by checking the presence of
a file path by providing a string like so:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; dash-at-point
  &lt;span class="pl-c1"&gt;:if&lt;/span&gt; (&lt;span class="pl-k"&gt;eq&lt;/span&gt; system-type &lt;span class="pl-c1"&gt;'darwin&lt;/span&gt;)
  &lt;span class="pl-c1"&gt;:ensure-system-package&lt;/span&gt;
  (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/Applications/Dash.app&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;brew cask install dash&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;:ensure-system-package&lt;/code&gt; will use &lt;code&gt;system-packages-install&lt;/code&gt; to install
system packages, except where a custom command has been specified, in
which case it will be executed verbatim by &lt;code&gt;async-shell-command&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Configuration variables &lt;code&gt;system-packages-package-manager&lt;/code&gt; and
&lt;code&gt;system-packages-use-sudo&lt;/code&gt; will be honoured, but not for custom
commands. Custom commands should include the call to sudo in the
command if needed.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-use-package-chords" class="anchor" aria-hidden="true" href="#use-package-chords"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;code&gt;(use-package-chords)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;:chords&lt;/code&gt; keyword allows you to define
&lt;a href="http://www.emacswiki.org/emacs/key-chord.el" rel="nofollow"&gt;&lt;code&gt;key-chord&lt;/code&gt;&lt;/a&gt; bindings
for &lt;code&gt;use-package&lt;/code&gt; declarations in the same manner as the &lt;code&gt;:bind&lt;/code&gt;
keyword.&lt;/p&gt;
&lt;p&gt;To enable the extension:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; use-package-chords
  &lt;span class="pl-c1"&gt;:ensure&lt;/span&gt; &lt;span class="pl-c1"&gt;t&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:config&lt;/span&gt; (key-chord-mode &lt;span class="pl-c1"&gt;1&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then you can define your chord bindings in the same manner as &lt;code&gt;:bind&lt;/code&gt; using a cons or a list of conses:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; ace-jump-mode
  &lt;span class="pl-c1"&gt;:chords&lt;/span&gt; ((&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;jj&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; ace-jump-char-mode)
           (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;jk&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; ace-jump-word-mode)
           (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;jl&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; ace-jump-line-mode)))&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-how-to-create-an-extension" class="anchor" aria-hidden="true" href="#how-to-create-an-extension"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;How to create an extension&lt;/h3&gt;
&lt;h4&gt;&lt;a id="user-content-first-step-add-the-keyword" class="anchor" aria-hidden="true" href="#first-step-add-the-keyword"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;First step: Add the keyword&lt;/h4&gt;
&lt;p&gt;The first step is to add your keyword at the right place in
&lt;code&gt;use-package-keywords&lt;/code&gt;.  This list determines the order in which things will
happen in the expanded code.  You should never change this order, but it gives
you a framework within which to decide when your keyword should fire.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-second-step-create-a-normalizer" class="anchor" aria-hidden="true" href="#second-step-create-a-normalizer"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Second step: Create a normalizer&lt;/h4&gt;
&lt;p&gt;Define a normalizer for your keyword by defining a function named after the
keyword, for example:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;defun&lt;/span&gt; &lt;span class="pl-e"&gt;use-package-normalize/:pin&lt;/span&gt; (&lt;span class="pl-v"&gt;name-symbol&lt;/span&gt; &lt;span class="pl-v"&gt;keyword&lt;/span&gt; &lt;span class="pl-v"&gt;args&lt;/span&gt;)
  (use-package-only-one (&lt;span class="pl-c1"&gt;symbol-name&lt;/span&gt; keyword) args
    (&lt;span class="pl-k"&gt;lambda&lt;/span&gt; (&lt;span class="pl-v"&gt;label&lt;/span&gt; &lt;span class="pl-v"&gt;arg&lt;/span&gt;)
      (&lt;span class="pl-k"&gt;cond&lt;/span&gt;
       ((&lt;span class="pl-c1"&gt;stringp&lt;/span&gt; arg) arg)
       ((&lt;span class="pl-c1"&gt;symbolp&lt;/span&gt; arg) (&lt;span class="pl-c1"&gt;symbol-name&lt;/span&gt; arg))
       (&lt;span class="pl-c1"&gt;t&lt;/span&gt;
        (use-package-error
         &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;:pin wants an archive name (a string)&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))))))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The job of the normalizer is take a list of arguments (possibly nil), and turn
it into the single argument (which could still be a list) that should appear
in the final property list used by &lt;code&gt;use-package&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-third-step-create-a-handler" class="anchor" aria-hidden="true" href="#third-step-create-a-handler"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Third step: Create a handler&lt;/h4&gt;
&lt;p&gt;Once you have a normalizer, you must create a handler for the keyword:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-k"&gt;defun&lt;/span&gt; &lt;span class="pl-e"&gt;use-package-handler/:pin&lt;/span&gt; (&lt;span class="pl-v"&gt;name-symbol&lt;/span&gt; &lt;span class="pl-v"&gt;keyword&lt;/span&gt; &lt;span class="pl-v"&gt;archive-name&lt;/span&gt; &lt;span class="pl-v"&gt;rest&lt;/span&gt; &lt;span class="pl-v"&gt;state&lt;/span&gt;)
  (&lt;span class="pl-k"&gt;let&lt;/span&gt; ((body (use-package-process-keywords name-symbol rest state)))
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; This happens at macro expansion time, not when the expanded code is&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; compiled or evaluated.&lt;/span&gt;
    (&lt;span class="pl-k"&gt;if&lt;/span&gt; (&lt;span class="pl-k"&gt;null&lt;/span&gt; archive-name)
        body
      (use-package-pin-package name-symbol archive-name)
      (use-package-concat
       body
       `((&lt;span class="pl-k"&gt;push&lt;/span&gt; '(&lt;span class="pl-c1"&gt;&lt;span class="pl-mi1"&gt;,&lt;/span&gt;name-symbol&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-c1"&gt;&lt;span class="pl-mi1"&gt;,&lt;/span&gt;archive-name&lt;/span&gt;)
               package-pinned-packages))))))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Handlers can affect the handling of keywords in two ways.  First, it can
modify the &lt;code&gt;state&lt;/code&gt; plist before recursively processing the remaining keywords,
to influence keywords that pay attention to the state (one example is the
state keyword &lt;code&gt;:deferred&lt;/code&gt;, not to be confused with the &lt;code&gt;use-package&lt;/code&gt; keyword
&lt;code&gt;:defer&lt;/code&gt;).  Then, once the remaining keywords have been handled and their
resulting forms returned, the handler may manipulate, extend, or just ignore
those forms.&lt;/p&gt;
&lt;p&gt;The task of each handler is to return a &lt;em&gt;list of forms&lt;/em&gt; representing code to
be inserted.  It does not need to be a &lt;code&gt;progn&lt;/code&gt; list, as this is handled
automatically in other places.  Thus it is very common to see the idiom of
using &lt;code&gt;use-package-concat&lt;/code&gt; to add new functionality before or after a code
body, so that only the minimum code necessary is emitted as the result of a
&lt;code&gt;use-package&lt;/code&gt; expansion.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-fourth-step-test-it-out" class="anchor" aria-hidden="true" href="#fourth-step-test-it-out"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Fourth step: Test it out&lt;/h4&gt;
&lt;p&gt;After the keyword has been inserted into &lt;code&gt;use-package-keywords&lt;/code&gt;, and a
normalizer and a handler defined, you can now test it by seeing how usages of
the keyword will expand.  For this, use &lt;code&gt;M-x pp-macroexpand-last-sexp&lt;/code&gt; with
the cursor set immediately after the &lt;code&gt;(use-package ...)&lt;/code&gt; expression.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-some-timing-results" class="anchor" aria-hidden="true" href="#some-timing-results"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Some timing results&lt;/h2&gt;
&lt;p&gt;On my Retina iMac, the "Mac port" variant of Emacs 24.4 loads in 0.57s, with
around 218 packages configured (nearly all of them lazy-loaded).  However, I
experience no loss of functionality, just a bit of latency when I'm first
starting to use Emacs (due to the autoloading).  Since I also use idle-loading
for many packages, perceived latency is typically reduced overall.&lt;/p&gt;
&lt;p&gt;On Linux, the same configuration loads in 0.32s.&lt;/p&gt;
&lt;p&gt;If I don't use Emacs graphically, I can test the absolute minimum times.  This
is done by running:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;time&lt;/span&gt; emacs -l init.elc -batch --eval &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;(message "Hello, world!")&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;On the Mac I see an average of 0.36s for the same configuration, and on Linux
0.26s.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-upgrading-to-2x" class="anchor" aria-hidden="true" href="#upgrading-to-2x"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Upgrading to 2.x&lt;/h1&gt;
&lt;h2&gt;&lt;a id="user-content-semantics-of-init-is-now-consistent" class="anchor" aria-hidden="true" href="#semantics-of-init-is-now-consistent"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Semantics of :init is now consistent&lt;/h2&gt;
&lt;p&gt;The meaning of &lt;code&gt;:init&lt;/code&gt; has been changed: It now &lt;em&gt;always&lt;/em&gt; happens before
package load, whether &lt;code&gt;:config&lt;/code&gt; has been deferred or not.  This means that
some uses of &lt;code&gt;:init&lt;/code&gt; in your configuration may need to be changed to &lt;code&gt;:config&lt;/code&gt;
(in the non-deferred case).  For the deferred case, the behavior is unchanged
from before.&lt;/p&gt;
&lt;p&gt;Also, because &lt;code&gt;:init&lt;/code&gt; and &lt;code&gt;:config&lt;/code&gt; now mean "before" and "after", the &lt;code&gt;:pre-&lt;/code&gt;
and &lt;code&gt;:post-&lt;/code&gt; keywords are gone, as they should no longer be necessary.&lt;/p&gt;
&lt;p&gt;Lastly, an effort has been made to make your Emacs start even in the presence
of use-package configuration failures.  So after this change, be sure to check
your &lt;code&gt;*Messages*&lt;/code&gt; buffer.  Most likely, you will have several instances where
you are using &lt;code&gt;:init&lt;/code&gt;, but should be using &lt;code&gt;:config&lt;/code&gt; (this was the case for me
in a number of places).&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-idle-has-been-removed" class="anchor" aria-hidden="true" href="#idle-has-been-removed"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;:idle has been removed&lt;/h2&gt;
&lt;p&gt;I am removing this feature for now because it can result in a nasty
inconsistency.  Consider the following definition:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; vkill
  &lt;span class="pl-c1"&gt;:commands&lt;/span&gt; vkill
  &lt;span class="pl-c1"&gt;:idle&lt;/span&gt; (some-important-configuration-here)
  &lt;span class="pl-c1"&gt;:bind&lt;/span&gt; (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C-x L&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; vkill-and-helm-occur)
  &lt;span class="pl-c1"&gt;:init&lt;/span&gt;
  (&lt;span class="pl-k"&gt;defun&lt;/span&gt; &lt;span class="pl-e"&gt;vkill-and-helm-occur&lt;/span&gt; ()
    (&lt;span class="pl-k"&gt;interactive&lt;/span&gt;)
    (vkill)
    (&lt;span class="pl-c1"&gt;call-interactively&lt;/span&gt; &lt;span class="pl-c1"&gt;#&lt;span class="pl-c1"&gt;'helm-occur&lt;/span&gt;&lt;/span&gt;))

  &lt;span class="pl-c1"&gt;:config&lt;/span&gt;
  (&lt;span class="pl-k"&gt;setq&lt;/span&gt; vkill-show-all-processes &lt;span class="pl-c1"&gt;t&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If I load my Emacs and wait until the idle timer fires, then this is the
sequence of events:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:init :idle &amp;lt;load&amp;gt; :config
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But if I load Emacs and immediately type C-x L without waiting for the idle
timer to fire, this is the sequence of events:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:init &amp;lt;load&amp;gt; :config :idle
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It's possible that the user could use &lt;code&gt;featurep&lt;/code&gt; in their idle to test for
this case, but that's a subtlety I'd rather avoid.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-defer-now-accepts-an-optional-numeric-argument" class="anchor" aria-hidden="true" href="#defer-now-accepts-an-optional-numeric-argument"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;:defer now accepts an optional numeric argument&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;:defer [N]&lt;/code&gt; causes the package to be loaded -- if it has not already been --
after &lt;code&gt;N&lt;/code&gt; seconds of idle time.&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;use-package&lt;/span&gt; back-button
  &lt;span class="pl-c1"&gt;:commands&lt;/span&gt; (back-button-mode)
  &lt;span class="pl-c1"&gt;:defer&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:init&lt;/span&gt;
  (&lt;span class="pl-k"&gt;setq&lt;/span&gt; back-button-show-toolbar-buttons &lt;span class="pl-c1"&gt;nil&lt;/span&gt;)
  &lt;span class="pl-c1"&gt;:config&lt;/span&gt;
  (back-button-mode &lt;span class="pl-c1"&gt;1&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-add-preface-occurring-before-everything-except-disabled" class="anchor" aria-hidden="true" href="#add-preface-occurring-before-everything-except-disabled"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Add :preface, occurring before everything except :disabled&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;:preface&lt;/code&gt; can be used to establish function and variable definitions that
will 1) make the byte-compiler happy (it won't complain about functions whose
definitions are unknown because you have them within a guard block), and 2)
allow you to define code that can be used in an &lt;code&gt;:if&lt;/code&gt; test.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: whatever is specified within &lt;code&gt;:preface&lt;/code&gt; is evaluated both at load
time and at byte-compilation time, in order to ensure that definitions are
seen by both the Lisp evaluator and the byte-compiler, so you should avoid
having any side-effects in your preface, and restrict it merely to symbol
declarations and definitions.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-add-functions-for-declaring-functions-to-the-byte-compiler" class="anchor" aria-hidden="true" href="#add-functions-for-declaring-functions-to-the-byte-compiler"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Add :functions, for declaring functions to the byte-compiler&lt;/h2&gt;
&lt;p&gt;What &lt;code&gt;:defines&lt;/code&gt; does for variables, &lt;code&gt;:functions&lt;/code&gt; does for functions.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-use-packageel-is-no-longer-needed-at-runtime" class="anchor" aria-hidden="true" href="#use-packageel-is-no-longer-needed-at-runtime"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;use-package.el is no longer needed at runtime&lt;/h2&gt;
&lt;p&gt;This means you should put the following at the top of your Emacs, to further
reduce load time:&lt;/p&gt;
&lt;div class="highlight highlight-source-emacs-lisp"&gt;&lt;pre&gt;(&lt;span class="pl-c1"&gt;eval-when-compile&lt;/span&gt;
  (&lt;span class="pl-c1"&gt;require&lt;/span&gt; &lt;span class="pl-c1"&gt;'use-package&lt;/span&gt;))
(&lt;span class="pl-c1"&gt;require&lt;/span&gt; &lt;span class="pl-c1"&gt;'diminish&lt;/span&gt;)                &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; if you use :diminish&lt;/span&gt;
(&lt;span class="pl-c1"&gt;require&lt;/span&gt; &lt;span class="pl-c1"&gt;'bind-key&lt;/span&gt;)                &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;;&lt;/span&gt;; if you use any :bind variant&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>jwiegley</author><guid isPermaLink="false">https://github.com/jwiegley/use-package</guid><pubDate>Fri, 24 Jan 2020 00:10:00 GMT</pubDate></item></channel></rss>