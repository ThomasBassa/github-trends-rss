<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>GitHub Trending: Reason, Today</title><link>https://github.com/trending/reason?since=daily</link><description>The top repositories on GitHub for reason, measured daily</description><pubDate>Tue, 28 Jan 2020 01:12:52 GMT</pubDate><lastBuildDate>Tue, 28 Jan 2020 01:12:52 GMT</lastBuildDate><generator>PyRSS2Gen-1.1.0</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><ttl>720</ttl><item><title>revery-ui/revery #1 in Reason, Today</title><link>https://github.com/revery-ui/revery</link><description>&lt;p&gt;&lt;i&gt;:zap: Native, high-performance, cross-platform desktop apps - built with Reason!&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;p align="center"&gt;
	&lt;a href="https://www.outrunlabs.com/revery" title="Revery" rel="nofollow"&gt;
		&lt;img src="./assets/logo.png" alt="Logo" style="max-width:100%;"&gt;
	&lt;/a&gt;
&lt;/p&gt;
&lt;p align="center"&gt;
  &lt;span&gt;Build &lt;b&gt;native&lt;/b&gt;, &lt;i&gt;high-performance&lt;/i&gt;, &lt;b&gt;cross-platform&lt;/b&gt; desktop apps with &lt;a href="https://reasonml.github.io" rel="nofollow"&gt;reason!&lt;/a&gt;&lt;/span&gt;
&lt;/p&gt;
&lt;p align="center"&gt;
  &lt;a href="https://dev.azure.com/revery-ui/revery/_build/latest?definitionId=2?branchName=master" rel="nofollow"&gt;
    &lt;img src="https://camo.githubusercontent.com/1ea61b2583e26e95e6d8da86579b5e1e7c156daa/68747470733a2f2f6465762e617a7572652e636f6d2f7265766572792d75692f7265766572792f5f617069732f6275696c642f7374617475732f7265766572792d75692e7265766572793f6272616e63684e616d653d6d6173746572" alt="Build Status" data-canonical-src="https://dev.azure.com/revery-ui/revery/_apis/build/status/revery-ui.revery?branchName=master" style="max-width:100%;"&gt;
  &lt;/a&gt;
  &lt;a href="https://badge.fury.io/js/revery" rel="nofollow"&gt;
    &lt;img src="https://camo.githubusercontent.com/ca92f6874c0b2b01b1a420eabfaf9d2436af975a/68747470733a2f2f62616467652e667572792e696f2f6a732f7265766572792e737667" alt="npm version" data-canonical-src="https://badge.fury.io/js/revery.svg" style="max-width:100%;"&gt;
  &lt;/a&gt;
  &lt;a href="https://discord.gg/4pxY5Cp" rel="nofollow"&gt;
    &lt;img src="https://camo.githubusercontent.com/ca8e76adab92d403e47731d9006d08ebe16ec4f1/68747470733a2f2f696d672e736869656c64732e696f2f646973636f72642f3532363131313833323437383434393639352e737667" alt="Join the chat on discord!" data-canonical-src="https://img.shields.io/discord/526111832478449695.svg" style="max-width:100%;"&gt;
  &lt;/a&gt;
  &lt;a href="#backers"&gt;
    &lt;img src="https://camo.githubusercontent.com/ab796bb69834a06006458f6f884c1f51e6956deb/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f7265766572792f6261636b6572732f62616467652e737667" alt="Backers" data-canonical-src="https://opencollective.com/revery/backers/badge.svg" style="max-width:100%;"&gt;
  &lt;/a&gt;
&lt;/p&gt;
&lt;hr&gt;
&lt;p align="center"&gt;
	&lt;a href="https://www.outrunlabs.com/revery/playground" title="Playground" rel="nofollow"&gt;
		&lt;img src="./assets/screenshot.png" alt="Slider components" style="max-width:100%;"&gt;
	&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;&lt;g-emoji class="g-emoji" alias="construction" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f6a7.png"&gt;🚧&lt;/g-emoji&gt; &lt;strong&gt;NOTE:&lt;/strong&gt; Revery is a work-in-progress and in active development! &lt;g-emoji class="g-emoji" alias="construction" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f6a7.png"&gt;🚧&lt;/g-emoji&gt;&lt;/p&gt;
&lt;p&gt;To get a taste of Revery, check out our JavaScript + WebGL build on the &lt;a href="https://outrunlabs.com/revery/playground" rel="nofollow"&gt;playground&lt;/a&gt;. For the best experience, though, you'll want to try a &lt;a href="https://github.com/revery-ui/revery/wiki/Building-&amp;amp;-Installing"&gt;native build&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-motivation" class="anchor" aria-hidden="true" href="#motivation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Motivation&lt;/h2&gt;
&lt;p&gt;Today, &lt;a href="https://electronjs.org/" rel="nofollow"&gt;Electron&lt;/a&gt; is one of the most popular tools for building desktop apps - using an HTML, JS, CSS stack. However, it has a heavy footprint in terms of both RAM and CPU - &lt;strong&gt;essentially packing an entire browser into the app.&lt;/strong&gt; Even with that tradeoff, it has a lot of great aspects - it's the quickest way to build a cross-platform app &amp;amp; it provides a great development experience - as can be testified by its usage in popular apps like VSCode, Discord, and Slack.&lt;/p&gt;
&lt;p&gt;Revery is kind of like super-fast, &lt;em&gt;native code&lt;/em&gt; Electron - with bundled React-like/Redux-like libraries and a fast build system - all ready to go!&lt;/p&gt;
&lt;p&gt;Revery is built with &lt;a href="https://reasonml.github.io" rel="nofollow"&gt;reasonml&lt;/a&gt;, which is a javascript-like syntax on top of &lt;a href="https://ocaml.org" rel="nofollow"&gt;OCaml&lt;/a&gt; This means that the language is accessible to JS developers.&lt;/p&gt;
&lt;p&gt;Your apps are compiled to native code with the Reason / OCaml toolchain - with &lt;strong&gt;instant startup&lt;/strong&gt; and &lt;strong&gt;performance comparable to native C code.&lt;/strong&gt; Revery features platform-accelerated, GPU-accelerated rendering. The compiler itself is fast, too!&lt;/p&gt;
&lt;p&gt;Revery is an experiment - can we provide a great developer experience and help teams be productive, without making sacrifices on performance?&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-design-decisions" class="anchor" aria-hidden="true" href="#design-decisions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Design Decisions&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Consistent cross-platform behavior&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A major value prop of Electron is that you can build for all platforms at once. You have great confidence as a developer that your app will look and work the same across different platforms. Revery is the same - aside from platform-specific behavior, if your app looks or behaves differently on another platform, that's a bug! As a consequence, Revery is like &lt;a href="https://flutter.io" rel="nofollow"&gt;flutter&lt;/a&gt; in that it &lt;strong&gt;does not use native widgets&lt;/strong&gt;. This means more work for us, but also that we have more predictable functionality cross-platform!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; If you're looking for something that does leverage native widgets, check out &lt;a href="https://github.com/briskml/brisk"&gt;briskml&lt;/a&gt;. Another alternative is the &lt;a href="https://github.com/let-def/cuite"&gt;cuite&lt;/a&gt; OCaml binding for &lt;a href="https://github.com/let-def/cuite"&gt;Qt&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;High performance&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Performance should be at the forefront, and not a compromise - we need to develop and build benchmarks that help ensure top-notch performance and start-up time.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Type-safe, functional code&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We might have some dirty mutable objects for performance - but our high-level API should be purely functional. You should be able to follow the React model of modelling your UI as a &lt;em&gt;pure function&lt;/em&gt; of application state -&amp;gt; UI.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-getting-started" class="anchor" aria-hidden="true" href="#getting-started"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Getting Started&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Check out &lt;a href="https://github.com/revery-ui/revery-quick-start"&gt;revery-quick-start&lt;/a&gt; to get up and running with your own Revery app!&lt;/li&gt;
&lt;li&gt;Try out our &lt;a href="https://www.outrunlabs.com/revery/playground/" rel="nofollow"&gt;interactive playground&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Read through our &lt;a href="https://www.outrunlabs.com/revery/api/revery/" rel="nofollow"&gt;docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-contributing" class="anchor" aria-hidden="true" href="#contributing"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contributing&lt;/h2&gt;
&lt;p&gt;We'd love your help, and welcome PRs and contributions.&lt;/p&gt;
&lt;p&gt;Some ideas for getting started:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/revery-ui/revery/wiki/Building-&amp;amp;-Installing"&gt;Build and run&lt;/a&gt; Revery&lt;/li&gt;
&lt;li&gt;View our &lt;a href="https://github.com/revery-ui/revery/wiki/Roadmap"&gt;Roadmap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Help us improve our &lt;a href="https://github.com/revery-ui/revery/blob/master/src/index.mld"&gt;documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Help us build &lt;a href="https://github.com/revery-ui/revery/tree/master/examples"&gt;examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Help us &lt;a href="https://github.com/revery-ui/revery/issues?utf8=%E2%9C%93&amp;amp;q=is%3Aissue+is%3Aopen+label%3A%22help+wanted%22+label%3A%22bug%22"&gt;fix bugs&lt;/a&gt; and &lt;a href="https://github.com/revery-ui/revery/issues?utf8=%E2%9C%93&amp;amp;q=is%3Aissue+is%3Aopen+label%3A%22help+wanted%22++-label%3Abug"&gt;build features&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Help us &lt;a href="https://github.com/bryphe/revery/issues/new"&gt;log bugs and open issues&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Support the project on &lt;a href="https://opencollective.com/revery" rel="nofollow"&gt;OpenCollective&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Follow us on &lt;a href="https://twitter.com/reveryui" rel="nofollow"&gt;Twitter&lt;/a&gt; or chat with us on &lt;a href="https://discord.gg/UvQ2cFn" rel="nofollow"&gt;Discord&lt;/a&gt;!&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-license" class="anchor" aria-hidden="true" href="#license"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;License&lt;/h2&gt;
&lt;p&gt;Revery is provided under the &lt;a href="LICENSE"&gt;MIT License&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Revery bundles several dependencies under their own license terms - please refer to &lt;a href="./ThirdPartyLicenses.txt"&gt;ThirdPartyLicenses.txt&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-contributors" class="anchor" aria-hidden="true" href="#contributors"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contributors&lt;/h2&gt;
&lt;p&gt;Thanks to everyone who has &lt;a href="https://github.com/revery-ui/revery/graphs/contributors"&gt;contributed&lt;/a&gt; to Revery!&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-backers" class="anchor" aria-hidden="true" href="#backers"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Backers&lt;/h2&gt;
&lt;p&gt;Thank you to all our backers! &lt;g-emoji class="g-emoji" alias="pray" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64f.png"&gt;🙏&lt;/g-emoji&gt; [&lt;a href="https://opencollective.com/revery#backer" rel="nofollow"&gt;Become a backer&lt;/a&gt;]&lt;/p&gt;
&lt;p&gt;&lt;a href="https://opencollective.com/revery#backers" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/a481807ed4e830c9979a5c426221966b1fe4ea5d/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f7265766572792f6261636b6572732e7376673f77696474683d383930" data-canonical-src="https://opencollective.com/revery/backers.svg?width=890" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-built-with-revery" class="anchor" aria-hidden="true" href="#built-with-revery"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Built with Revery&lt;/h2&gt;
&lt;p align="left"&gt;
  &lt;a href="https://v2.onivim.io/" rel="nofollow"&gt;
    &lt;img src="./assets/onivim-logo.png" alt="Onivim 2" style="max-width:100%;"&gt;
  &lt;/a&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-special-thanks" class="anchor" aria-hidden="true" href="#special-thanks"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Special Thanks&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;revery&lt;/code&gt; would not be possible without a bunch of cool tech:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ocaml.org" rel="nofollow"&gt;ocaml&lt;/a&gt; made these tools possible - thanks &lt;a href="http://gallium.inria.fr/" rel="nofollow"&gt;Inria&lt;/a&gt; &amp;amp; &lt;a href="http://ocamllabs.io/" rel="nofollow"&gt;OCaml Labs&lt;/a&gt;!&lt;/li&gt;
&lt;li&gt;&lt;a href="https://reasonml.github.io" rel="nofollow"&gt;reasonml&lt;/a&gt; made revery possible - thanks @jordwalke!&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jordwalke/flex"&gt;flex&lt;/a&gt; by @jordwalke&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/briskml"&gt;briskml&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/briskml/brisk-reconciler"&gt;brisk-reconciler&lt;/a&gt; - the "native React" implementation.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/revery-ui/reason-sdl2"&gt;reason-sdl2&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.libsdl.org" rel="nofollow"&gt;SDL2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/nothings/stb"&gt;stb-image&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/bryphe/reason-fontkit"&gt;reason-fontkit&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.freetype.org" rel="nofollow"&gt;freetype2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.freedesktop.org/wiki/Software/HarfBuzz" rel="nofollow"&gt;harfbuzz&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/bryphe/reason-gl-matrix"&gt;reason-gl-matrix&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://glmatrix.net" rel="nofollow"&gt;gl-matrix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://glm.g-truc.net/0.9.9/index.html" rel="nofollow"&gt;glm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/facebookexperimental/reason-native/tree/master/src/console"&gt;@reason-native/console&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;revery&lt;/code&gt; was inspired by some &lt;strong&gt;awesome projects:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://facebook.github.io/react-native/" rel="nofollow"&gt;react-native&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/reasonml/reason-react/tree/master/ReactMini"&gt;ReactMini&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/let-def/cuite"&gt;cuite&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/let-def/wall"&gt;wall&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://elm-lang.org/" rel="nofollow"&gt;elm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Schmavery/reprocessing"&gt;reprocessing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;a id="user-content-hot-reload" class="anchor" aria-hidden="true" href="#hot-reload"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Hot reload&lt;/h1&gt;
&lt;p&gt;We don't have a Hot Reload yet but it is on our roadmap. In the meantime, you can check branch &lt;a href="https://github.com/revery-ui/revery/tree/feat/hot-reload"&gt;feat/hot-reload&lt;/a&gt; to see the progression.&lt;/p&gt;
&lt;p&gt;In the meantime @mbernat has done a &lt;a href="https://gist.github.com/mbernat/abf651653c123374037c27377f41d0a0"&gt;script&lt;/a&gt; that allow to relaunch the APP when the binary changed.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>revery-ui</author><guid isPermaLink="false">https://github.com/revery-ui/revery</guid><pubDate>Tue, 28 Jan 2020 00:01:00 GMT</pubDate></item><item><title>cristianoc/genType #2 in Reason, Today</title><link>https://github.com/cristianoc/genType</link><description>&lt;p&gt;&lt;i&gt;Auto generation of idiomatic bindings between Reason and JavaScript: either vanilla or typed with TypeScript/FlowType.&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-reason-gentype" class="anchor" aria-hidden="true" href="#reason-gentype"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Reason genType&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Status &lt;code&gt;master (v3.*)&lt;/code&gt;:&lt;/strong&gt; &lt;a href="https://dev.azure.com/ccrisccris/genType/_build/latest?definitionId=1&amp;amp;branchName=master" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/12dbec47bc92c88e9d85fed2df4fb3e79bcd2a37/68747470733a2f2f6465762e617a7572652e636f6d2f636372697363637269732f67656e547970652f5f617069732f6275696c642f7374617475732f637269737469616e6f632e67656e547970653f6272616e63684e616d653d6d6173746572" alt="Build Status" data-canonical-src="https://dev.azure.com/ccrisccris/genType/_apis/build/status/cristianoc.genType?branchName=master" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;genType&lt;/code&gt; lets you export &lt;a href="https://reasonml.github.io/" rel="nofollow"&gt;Reason&lt;/a&gt; values and types to use in JavaScript, and import JavaScript values and types into Reason, idiomatically. Converter functions between the two representations are generated based on the type of the value. The converters can be generated in vanilla JavaScript, or in &lt;a href="https://www.typescriptlang.org/" rel="nofollow"&gt;TypeScript&lt;/a&gt; / &lt;a href="https://flow.org/en/" rel="nofollow"&gt;Flow&lt;/a&gt; for a type-safe idiomatic interface.
In particular, conversion of &lt;a href="https://reasonml.github.io/reason-react/" rel="nofollow"&gt;ReasonReact&lt;/a&gt; components both ways is supported, with automatic generation of the wrappers.&lt;/p&gt;
&lt;p&gt;Here's an article describing how to use &lt;code&gt;genType&lt;/code&gt; as part of a migration strategy where a tree of components is gradually converted to Reason bottom-up: &lt;a href="https://medium.com/p/c514265b466d" rel="nofollow"&gt;Adopting Reason: strategies, dual sources of truth, and why genType is a big deal&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The implementation of [@genType] performs a type-directed transformation of Reason programs after &lt;a href="https://github.com/BuckleScript/bucklescript"&gt;bucklescript&lt;/a&gt; compilation. The transformed programs operate on data types idiomatic to JS. For example, a Reason function operating on a Reason variant &lt;code&gt;type t  = | A(int) | B(string)&lt;/code&gt; (which is represented as custom blocks at runtime) is exported to a JS function operating on the corresponding JS object of type &lt;code&gt;{ tag: "A"; value: number } | { tag: "B"; value: string }&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The output of &lt;code&gt;genType&lt;/code&gt; can be configured by using one of 3 back-ends: &lt;code&gt;untyped&lt;/code&gt; to generate wrappers in vanilla JS, &lt;code&gt;typescript&lt;/code&gt; to generate &lt;a href="https://www.typescriptlang.org/" rel="nofollow"&gt;TypeScript&lt;/a&gt;, and &lt;code&gt;flow&lt;/code&gt; to generate JS with &lt;a href="https://flow.org/en/" rel="nofollow"&gt;Flow&lt;/a&gt; type annotations.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-project-status" class="anchor" aria-hidden="true" href="#project-status"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Project status.&lt;/h1&gt;
&lt;p&gt;See &lt;a href="Changes.md"&gt;Changes.md&lt;/a&gt; for a complete list of features, fixes, and changes for each release.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-requirements" class="anchor" aria-hidden="true" href="#requirements"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Requirements&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;bs-platform&lt;/code&gt; 7.0.2 or higher: use &lt;code&gt;genType&lt;/code&gt; 3.8.0 or higher.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;bs-platform&lt;/code&gt; 7.0.0 or higher: use &lt;code&gt;genType&lt;/code&gt; 3.2.0 or higher.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;bs-platform&lt;/code&gt; 6.2.0 or higher: use &lt;code&gt;genType&lt;/code&gt; 3.0.0 or higher.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;bs-platform&lt;/code&gt; 5.2.0 or higher: use &lt;code&gt;genType&lt;/code&gt; 2.40.0 or higher.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;bs-platform&lt;/code&gt; 5.0.x and 5.1.x: use &lt;code&gt;genType&lt;/code&gt; 2.17.0 or higher.&lt;/p&gt;
&lt;p&gt;For earlier versions, see the older &lt;a href="https://github.com/cristianoc/genType/blob/v2.16.0/README.md"&gt;README&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installation&lt;/h1&gt;
&lt;p&gt;Install the binaries via &lt;code&gt;npm&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm install --save-dev gentype

# Test running gentype
npx gentype --help
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Add a &lt;code&gt;gentypeconfig&lt;/code&gt; section to your &lt;code&gt;bsconfig.json&lt;/code&gt; (See &lt;a href="#configuration"&gt;Configuration&lt;/a&gt; for details):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;"gentypeconfig": {
    "language": "untyped",
    "shims": {},
    "debug": {
      "all": false,
      "basic": false
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For running &lt;code&gt;gentype&lt;/code&gt; with BuckleScript via &lt;code&gt;npm&lt;/code&gt; workflow, add following script in your &lt;code&gt;package.json&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;scripts: {
  "bs:build": "bsb -make-world",
  "bs:clean": "bsb -clean-world"
}
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; With genType &amp;lt; 2.17.0 or bucklescript &amp;lt; 5.0.0, one has to set environment variable &lt;code&gt;BS_CMT_POST_PROCESS_CMD&lt;/code&gt;. See the older &lt;a href="https://github.com/cristianoc/genType/blob/v2.16.0/README.md"&gt;README&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;With this configuration, BuckleScript will call &lt;code&gt;gentype&lt;/code&gt; for each newly built file. You might want to clean your build artifacts before usage: &lt;code&gt;npx bsb -clean-world&lt;/code&gt; (otherwise there might be cached values and no &lt;code&gt;.re.js&lt;/code&gt; files are generated).&lt;/p&gt;
&lt;p&gt;Check out the &lt;a href="#examples"&gt;Examples&lt;/a&gt; for detailed setups (TypeScript, Flow and Plain JavaScript).&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-adding-shims-typescript--flow" class="anchor" aria-hidden="true" href="#adding-shims-typescript--flow"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Adding shims (TypeScript &amp;amp; Flow)&lt;/h2&gt;
&lt;p&gt;Configure your shim files in your &lt;code&gt;"gentypeconfig"&lt;/code&gt; in &lt;a href="examples/typescript-react-example/bsconfig.json"&gt;&lt;code&gt;bsconfig.json&lt;/code&gt;&lt;/a&gt;, and add relevant &lt;code&gt;.shims.js&lt;/code&gt; files in a directory which is visible by bucklescript e.g. &lt;a href="examples/typescript-react-example/src/shims"&gt;&lt;code&gt;src/shims/&lt;/code&gt;&lt;/a&gt;. An example shim to export ReactEvent can be found &lt;a href="examples/typescript-react-example/src/shims/ReactEvent.shim.ts"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-testing-the-whole-setup" class="anchor" aria-hidden="true" href="#testing-the-whole-setup"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Testing the whole setup&lt;/h2&gt;
&lt;p&gt;Open any relevant &lt;code&gt;*.re&lt;/code&gt; file and add &lt;code&gt;[@genType]&lt;/code&gt; annotations to any bindings / values / functions to be used from JavaScript. If an annotated value uses a type, the type must be annotated too. See e.g. &lt;a href="examples/typescript-react-example/src/Hooks.re"&gt;Hooks.re&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Save the file and rebuild the project with BuckleScript. You should now see a &lt;code&gt;*.gen.tsx&lt;/code&gt; (for TypeScript, or &lt;code&gt;*.gen.js&lt;/code&gt; for Flow) file with the same name (e.g. &lt;code&gt;MyComponent.re&lt;/code&gt; -&amp;gt; &lt;code&gt;MyComponent.gen.tsx&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Any values exported from &lt;code&gt;MyComponent.re&lt;/code&gt; can then be imported from JS. For example:&lt;/p&gt;
&lt;div class="highlight highlight-source-js"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-smi"&gt;MyComponent&lt;/span&gt; &lt;span class="pl-k"&gt;from&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;./components/MyComponent.gen&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;;&lt;/pre&gt;&lt;/div&gt;
&lt;h1&gt;&lt;a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Examples&lt;/h1&gt;
&lt;p&gt;We prepared some examples to give you an idea on how to integrate &lt;code&gt;genType&lt;/code&gt; in your own project. Check out the READMEs of the listed projects.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Please make sure to build genType before trying to build the examples.&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="examples/flow-react-example/README.md"&gt;flow-react-example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="examples/typescript-react-example/README.md"&gt;typescript-react-example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="examples/untyped-react-example/README.md"&gt;untyped-react-example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Documentation&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;genType&lt;/code&gt; operates on two kinds of entities: &lt;em&gt;types&lt;/em&gt; and &lt;em&gt;values&lt;/em&gt;.
Each can be &lt;em&gt;exported&lt;/em&gt; from Reason to JS, or &lt;em&gt;imported&lt;/em&gt; into Reason from JS.
The main annotation is &lt;code&gt;@genType&lt;/code&gt;, which by default means &lt;em&gt;export&lt;/em&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-export-and-import-types" class="anchor" aria-hidden="true" href="#export-and-import-types"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Export and Import Types&lt;/h3&gt;
&lt;p&gt;The following exports a function type &lt;code&gt;callback&lt;/code&gt; to JS:&lt;/p&gt;
&lt;div class="highlight highlight-source-reason"&gt;&lt;pre&gt;[&lt;span class="pl-k"&gt;@&lt;/span&gt;&lt;span class="pl-e"&gt;genType&lt;/span&gt;]
&lt;span class="pl-k"&gt;type&lt;/span&gt; &lt;span class="pl-en"&gt;callback&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;ReactEvent&lt;/span&gt;&lt;span class="pl-smi"&gt;.&lt;/span&gt;&lt;span class="pl-c1"&gt;Mouse&lt;/span&gt;&lt;span class="pl-smi"&gt;.&lt;/span&gt;&lt;span class="pl-c1"&gt;t&lt;/span&gt; =&amp;gt; &lt;span class="pl-c1"&gt;unit&lt;/span&gt;&lt;span class="pl-smi"&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To instead import a type called &lt;code&gt;complexNumber&lt;/code&gt; from JS module &lt;code&gt;MyMath.ts&lt;/code&gt; (or &lt;code&gt;MyMath.js&lt;/code&gt;), use the &lt;code&gt;@genType.import&lt;/code&gt; annotation:&lt;/p&gt;
&lt;div class="highlight highlight-source-reason"&gt;&lt;pre&gt;[&lt;span class="pl-k"&gt;@&lt;/span&gt;&lt;span class="pl-c1"&gt;genType&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;&lt;span class="pl-e"&gt;import&lt;/span&gt; &lt;span class="pl-s"&gt;"./MyMath"&lt;/span&gt;]
&lt;span class="pl-k"&gt;type&lt;/span&gt; &lt;span class="pl-en"&gt;complexNumber&lt;/span&gt;&lt;span class="pl-smi"&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This imported type will be treated as opaque by Reason.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-export-and-import-values" class="anchor" aria-hidden="true" href="#export-and-import-values"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Export and Import Values&lt;/h3&gt;
&lt;p&gt;To export a function &lt;code&gt;callback&lt;/code&gt; to JS:&lt;/p&gt;
&lt;div class="highlight highlight-source-reason"&gt;&lt;pre&gt;[&lt;span class="pl-k"&gt;@&lt;/span&gt;&lt;span class="pl-e"&gt;genType&lt;/span&gt;]
&lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-en"&gt;callback&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; _ &lt;span class="pl-smi"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;Js&lt;/span&gt;&lt;span class="pl-smi"&gt;.&lt;/span&gt;log(&lt;span class="pl-s"&gt;"Clicked"&lt;/span&gt;)&lt;span class="pl-smi"&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To rename the function and export it as &lt;code&gt;CB&lt;/code&gt; on the JS side, use&lt;/p&gt;
&lt;div class="highlight highlight-source-reason"&gt;&lt;pre&gt;[&lt;span class="pl-k"&gt;@&lt;/span&gt;&lt;span class="pl-e"&gt;genType&lt;/span&gt;]
[&lt;span class="pl-k"&gt;@&lt;/span&gt;&lt;span class="pl-c1"&gt;genType&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;&lt;span class="pl-e"&gt;as&lt;/span&gt; &lt;span class="pl-s"&gt;"CB"&lt;/span&gt;]
&lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-en"&gt;callback&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; _ &lt;span class="pl-smi"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;Js&lt;/span&gt;&lt;span class="pl-smi"&gt;.&lt;/span&gt;log(&lt;span class="pl-s"&gt;"Clicked"&lt;/span&gt;)&lt;span class="pl-smi"&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;or the more compact&lt;/p&gt;
&lt;div class="highlight highlight-source-reason"&gt;&lt;pre&gt;[&lt;span class="pl-k"&gt;@&lt;/span&gt;&lt;span class="pl-e"&gt;genType&lt;/span&gt; &lt;span class="pl-s"&gt;"CB"&lt;/span&gt;]
&lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-en"&gt;callback&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; _ &lt;span class="pl-smi"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;Js&lt;/span&gt;&lt;span class="pl-smi"&gt;.&lt;/span&gt;log(&lt;span class="pl-s"&gt;"Clicked"&lt;/span&gt;)&lt;span class="pl-smi"&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To import a function &lt;code&gt;realValue&lt;/code&gt; from JS module &lt;code&gt;MyMath.ts&lt;/code&gt; (or &lt;code&gt;MyMath.js&lt;/code&gt;):&lt;/p&gt;
&lt;div class="highlight highlight-source-reason"&gt;&lt;pre&gt;[&lt;span class="pl-k"&gt;@&lt;/span&gt;&lt;span class="pl-c1"&gt;genType&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;&lt;span class="pl-e"&gt;import&lt;/span&gt; &lt;span class="pl-s"&gt;"./MyMath"&lt;/span&gt;] &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;/*&lt;/span&gt; JS module to import from. &lt;span class="pl-c"&gt;*/&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;/*&lt;/span&gt; Name and type of the JS value to import. &lt;span class="pl-c"&gt;*/&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;external&lt;/span&gt; &lt;span class="pl-en"&gt;realValue&lt;/span&gt;&lt;span class="pl-smi"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;complexNumber&lt;/span&gt; =&amp;gt; &lt;span class="pl-c1"&gt;float&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;""&lt;/span&gt;&lt;span class="pl-smi"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; With genType &amp;lt; 2.17.0 or bucklescript &amp;lt; 5.0.0, one had to add a line with &lt;code&gt;@bs.module&lt;/code&gt; and the current file name. See the older &lt;a href="https://github.com/cristianoc/genType/blob/v2.16.0/README.md"&gt;README&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Because of the &lt;code&gt;external&lt;/code&gt; keyword, it's clear from context that this is an import, so you can also just use &lt;code&gt;@genType&lt;/code&gt; and omit &lt;code&gt;.import&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To import a default JS export, use a second argument to &lt;code&gt;@genType.import&lt;/code&gt; e.g. &lt;code&gt;[@genType.import ("./MyMath", "default")]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Similarly, to import a value with a different JS name, use e.g. &lt;code&gt;[@genType.import ("./MyMath", "ValueStartingWithUpperCaseLetter")]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To import nested values, e.g. &lt;code&gt;Some.Nested.value&lt;/code&gt;, use e.g. &lt;code&gt;[@genType.import ("./MyMath", "Some.Nested.value")]&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-export-and-import-react-components-using-deprecated-record-api" class="anchor" aria-hidden="true" href="#export-and-import-react-components-using-deprecated-record-api"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Export and Import React Components Using Deprecated Record API&lt;/h3&gt;
&lt;p&gt;To export a ReasonReact component to JS, and automatically generate a wrapper for it, simply annotate the &lt;code&gt;make&lt;/code&gt; function:&lt;/p&gt;
&lt;div class="highlight highlight-source-reason"&gt;&lt;pre&gt;[&lt;span class="pl-k"&gt;@&lt;/span&gt;&lt;span class="pl-e"&gt;genType&lt;/span&gt;]
&lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-en"&gt;make&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; (~onClick&lt;span class="pl-smi"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;callback&lt;/span&gt;&lt;span class="pl-smi"&gt;,&lt;/span&gt; _children) &lt;span class="pl-smi"&gt;=&amp;gt;&lt;/span&gt; {
  &lt;span class="pl-k"&gt;...&lt;/span&gt;component&lt;span class="pl-smi"&gt;,&lt;/span&gt;
  render&lt;span class="pl-smi"&gt;:&lt;/span&gt; _ &lt;span class="pl-smi"&gt;=&amp;gt;&lt;/span&gt; &amp;lt;&lt;span class="pl-ent"&gt;div&lt;/span&gt; onClick&amp;gt; &lt;span class="pl-s"&gt;"Click me"&lt;/span&gt;&lt;span class="pl-smi"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;ReasonReact&lt;/span&gt;&lt;span class="pl-smi"&gt;.&lt;/span&gt;string &amp;lt;/&lt;span class="pl-ent"&gt;div&lt;/span&gt;&amp;gt;&lt;span class="pl-smi"&gt;,&lt;/span&gt;
}&lt;span class="pl-smi"&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; the value &lt;code&gt;component&lt;/code&gt; must also be defined, above &lt;code&gt;make&lt;/code&gt; in the same module (also in the case of components defined in nested modules).&lt;/p&gt;
&lt;p&gt;To import and wrap a ReactJS component for use by ReasonReact, the type of the &lt;code&gt;make&lt;/code&gt; function is the only information required:&lt;/p&gt;
&lt;div class="highlight highlight-source-reason"&gt;&lt;pre&gt;[&lt;span class="pl-k"&gt;@&lt;/span&gt;&lt;span class="pl-c1"&gt;genType&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;&lt;span class="pl-e"&gt;import&lt;/span&gt; &lt;span class="pl-s"&gt;"./MyBanner"&lt;/span&gt;] &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;/*&lt;/span&gt; Module with the JS component to be wrapped. &lt;span class="pl-c"&gt;*/&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;/*&lt;/span&gt; The make function will be automatically generated from the types below. &lt;span class="pl-c"&gt;*/&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;external&lt;/span&gt; &lt;span class="pl-en"&gt;make&lt;/span&gt;&lt;span class="pl-smi"&gt;:&lt;/span&gt;
  (~&lt;span class="pl-c1"&gt;show&lt;/span&gt;: &lt;span class="pl-c1"&gt;bool&lt;/span&gt;&lt;span class="pl-k"&gt;,&lt;/span&gt; ~&lt;span class="pl-c1"&gt;message&lt;/span&gt;: &lt;span class="pl-c1"&gt;option&lt;/span&gt;(&lt;span class="pl-c1"&gt;message&lt;/span&gt;)=?&lt;span class="pl-k"&gt;,&lt;/span&gt; &lt;span class="pl-c"&gt;'&lt;/span&gt;&lt;span class="pl-v"&gt;a&lt;/span&gt;) =&amp;gt;
  &lt;span class="pl-c1"&gt;ReasonReact&lt;/span&gt;&lt;span class="pl-smi"&gt;.&lt;/span&gt;&lt;span class="pl-c1"&gt;component&lt;/span&gt;(
    &lt;span class="pl-c1"&gt;ReasonReact&lt;/span&gt;&lt;span class="pl-smi"&gt;.&lt;/span&gt;&lt;span class="pl-c1"&gt;stateless&lt;/span&gt;&lt;span class="pl-k"&gt;,&lt;/span&gt;
    &lt;span class="pl-c1"&gt;ReasonReact&lt;/span&gt;&lt;span class="pl-smi"&gt;.&lt;/span&gt;&lt;span class="pl-c1"&gt;noRetainedProps&lt;/span&gt;&lt;span class="pl-k"&gt;,&lt;/span&gt;
    &lt;span class="pl-c1"&gt;ReasonReact&lt;/span&gt;&lt;span class="pl-smi"&gt;.&lt;/span&gt;&lt;span class="pl-c1"&gt;actionless&lt;/span&gt;&lt;span class="pl-k"&gt;,&lt;/span&gt;
  ) &lt;span class="pl-k"&gt;=&lt;/span&gt;
  &lt;span class="pl-s"&gt;""&lt;/span&gt;&lt;span class="pl-smi"&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The type of &lt;code&gt;make&lt;/code&gt; must have a named argument for each prop in the JS component. Optional props have option type. The &lt;code&gt;make&lt;/code&gt; function will be generated by &lt;code&gt;genType&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This assumes that the JS component was exported with a default export. In case of named export, use e.g. &lt;code&gt;[@genType.import ("./MyBanner", "componentName")]&lt;/code&gt;. To import a nested component, use e.g. &lt;code&gt;[@genType.import ("./MyBanner", "Some.Nested.component")]&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-interface-rei-and-implementation-re-files" class="anchor" aria-hidden="true" href="#interface-rei-and-implementation-re-files"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Interface (.rei) and Implementation (.re) files&lt;/h3&gt;
&lt;p&gt;If both &lt;code&gt;Foo.rei&lt;/code&gt; and &lt;code&gt;Foo.re&lt;/code&gt; exist, the annotations are taken from &lt;code&gt;Foo.rei&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The behaviour can be overridden by adding annotation &lt;code&gt;[@genType.ignoreInterface];&lt;/code&gt; at the top of &lt;code&gt;Foo.rei&lt;/code&gt;. Use case: expose implementation details to JS but not to Reason.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-type-expansion-and-gentypeopaque" class="anchor" aria-hidden="true" href="#type-expansion-and-gentypeopaque"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Type Expansion and @genType.opaque&lt;/h3&gt;
&lt;p&gt;If an exported type &lt;code&gt;persons&lt;/code&gt; references other types in its definition, those types are also exported by default, as long as they are defined in the same file:&lt;/p&gt;
&lt;div class="highlight highlight-source-reason"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;type&lt;/span&gt; &lt;span class="pl-en"&gt;name&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;string&lt;/span&gt;&lt;span class="pl-smi"&gt;;&lt;/span&gt;
&lt;span class="pl-k"&gt;type&lt;/span&gt; &lt;span class="pl-en"&gt;surname&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;string&lt;/span&gt;&lt;span class="pl-smi"&gt;;&lt;/span&gt;
&lt;span class="pl-k"&gt;type&lt;/span&gt; &lt;span class="pl-en"&gt;person&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; {name&lt;span class="pl-smi"&gt;:&lt;/span&gt;&lt;span class="pl-c1"&gt;name&lt;/span&gt;&lt;span class="pl-smi"&gt;,&lt;/span&gt; surname&lt;span class="pl-smi"&gt;:&lt;/span&gt;&lt;span class="pl-c1"&gt;surname&lt;/span&gt;}&lt;span class="pl-smi"&gt;;&lt;/span&gt;

[&lt;span class="pl-k"&gt;@&lt;/span&gt;&lt;span class="pl-e"&gt;genType&lt;/span&gt;]
&lt;span class="pl-k"&gt;type&lt;/span&gt; &lt;span class="pl-en"&gt;persons&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;array&lt;/span&gt;(&lt;span class="pl-c1"&gt;person&lt;/span&gt;)&lt;span class="pl-smi"&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If however you wish to hide from JS the fact that &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;surname&lt;/code&gt; are strings, you can do it with the &lt;code&gt;@genType.opaque&lt;/code&gt; annotation:&lt;/p&gt;
&lt;div class="highlight highlight-source-reason"&gt;&lt;pre&gt;[&lt;span class="pl-k"&gt;@&lt;/span&gt;&lt;span class="pl-c1"&gt;genType&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;&lt;span class="pl-e"&gt;opaque&lt;/span&gt;]
&lt;span class="pl-k"&gt;type&lt;/span&gt; &lt;span class="pl-en"&gt;name&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;string&lt;/span&gt;&lt;span class="pl-smi"&gt;;&lt;/span&gt;
[&lt;span class="pl-k"&gt;@&lt;/span&gt;&lt;span class="pl-c1"&gt;genType&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;&lt;span class="pl-e"&gt;opaque&lt;/span&gt;]
&lt;span class="pl-k"&gt;type&lt;/span&gt; &lt;span class="pl-en"&gt;surname&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;string&lt;/span&gt;&lt;span class="pl-smi"&gt;;&lt;/span&gt;

&lt;span class="pl-k"&gt;type&lt;/span&gt; &lt;span class="pl-en"&gt;person&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; {
  name&lt;span class="pl-smi"&gt;,&lt;/span&gt;
  surname&lt;span class="pl-smi"&gt;,&lt;/span&gt;
}&lt;span class="pl-smi"&gt;;&lt;/span&gt;

[&lt;span class="pl-k"&gt;@&lt;/span&gt;&lt;span class="pl-e"&gt;genType&lt;/span&gt;]
&lt;span class="pl-k"&gt;type&lt;/span&gt; &lt;span class="pl-en"&gt;persons&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;array&lt;/span&gt;(&lt;span class="pl-c1"&gt;person&lt;/span&gt;)&lt;span class="pl-smi"&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-renaming-gentypeas-and-object-mangling-convention" class="anchor" aria-hidden="true" href="#renaming-gentypeas-and-object-mangling-convention"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Renaming, @genType.as, and object mangling convention.&lt;/h3&gt;
&lt;p&gt;By default, entities with a given name are exported/imported with the same name. However, you might wish to change the appearence of the name on the JS side.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; From bucklescript 7.0.0, &lt;code&gt;@genType.as&lt;/code&gt; on record fields will be discouraged,
as it incurs a runtime conversion cost. Instead &lt;code&gt;@bs.as&lt;/code&gt; will be supported and incur zero cost.&lt;/p&gt;
&lt;p&gt;For example, in case of a record field whose name is a keyword, such as &lt;code&gt;type&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-reason"&gt;&lt;pre&gt;[&lt;span class="pl-k"&gt;@&lt;/span&gt;&lt;span class="pl-e"&gt;genType&lt;/span&gt;]
&lt;span class="pl-k"&gt;type&lt;/span&gt; &lt;span class="pl-en"&gt;shipment&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; {
  date&lt;span class="pl-smi"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;float&lt;/span&gt;&lt;span class="pl-smi"&gt;,&lt;/span&gt;
  [@genType.as "type"]
  type_&lt;span class="pl-smi"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;string&lt;/span&gt;&lt;span class="pl-smi"&gt;,&lt;/span&gt;
}&lt;span class="pl-smi"&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Object field names follow bucklescript's mangling convention:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Remove trailing "__" if present.
Otherwise remove leading "_" when followed by an uppercase letter, or keyword.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This means that the analogous example with objects is:&lt;/p&gt;
&lt;div class="highlight highlight-source-reason"&gt;&lt;pre&gt;[&lt;span class="pl-k"&gt;@&lt;/span&gt;&lt;span class="pl-e"&gt;genType&lt;/span&gt;]
&lt;span class="pl-k"&gt;type&lt;/span&gt; &lt;span class="pl-en"&gt;shipment&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; {
  .
  "date"&lt;span class="pl-smi"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;float&lt;/span&gt;&lt;span class="pl-smi"&gt;,&lt;/span&gt;
  "_type"&lt;span class="pl-smi"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;string&lt;/span&gt;&lt;span class="pl-smi"&gt;,&lt;/span&gt;
}&lt;span class="pl-smi"&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;or the equivalent &lt;code&gt; "type__": string&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Functions and function components also follow the mangling convention for labeled arguments:&lt;/p&gt;
&lt;div class="highlight highlight-source-reason"&gt;&lt;pre&gt;[&lt;span class="pl-k"&gt;@&lt;/span&gt;&lt;span class="pl-e"&gt;genType&lt;/span&gt;]
&lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-en"&gt;exampleFunction&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; (~_type) &lt;span class="pl-smi"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="pl-s"&gt;"type: "&lt;/span&gt; &lt;span class="pl-smi"&gt;++&lt;/span&gt; _type&lt;span class="pl-smi"&gt;;&lt;/span&gt;

[&lt;span class="pl-k"&gt;@&lt;/span&gt;&lt;span class="pl-e"&gt;genType&lt;/span&gt;]
[&lt;span class="pl-k"&gt;@&lt;/span&gt;&lt;span class="pl-c1"&gt;react&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;&lt;span class="pl-e"&gt;component&lt;/span&gt;]
&lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-en"&gt;exampleComponent&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; (~_type) &lt;span class="pl-smi"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;React&lt;/span&gt;&lt;span class="pl-smi"&gt;.&lt;/span&gt;string(&lt;span class="pl-s"&gt;"type: "&lt;/span&gt; &lt;span class="pl-smi"&gt;++&lt;/span&gt; _type)&lt;span class="pl-smi"&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It is possible to use &lt;code&gt;@genType.as&lt;/code&gt; for functions, though this is only maintained for backwards compatibility, and cannot be used on function components:&lt;/p&gt;
&lt;div class="highlight highlight-source-reason"&gt;&lt;pre&gt;[&lt;span class="pl-k"&gt;@&lt;/span&gt;&lt;span class="pl-e"&gt;genType&lt;/span&gt;]
&lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-en"&gt;functionWithGenTypeAs&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt;
  (~date&lt;span class="pl-smi"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;float&lt;/span&gt;) &lt;span class="pl-smi"&gt;=&amp;gt;&lt;/span&gt; [&lt;span class="pl-k"&gt;@&lt;/span&gt;&lt;span class="pl-c1"&gt;genType&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;&lt;span class="pl-e"&gt;as&lt;/span&gt; &lt;span class="pl-s"&gt;"type"&lt;/span&gt;] (~type_&lt;span class="pl-smi"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;string&lt;/span&gt;) &lt;span class="pl-smi"&gt;=&amp;gt;&lt;/span&gt; ...&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; For technical reasons, it is not possible to use &lt;code&gt;@genType.as&lt;/code&gt; on the first argument of a function (restriction lifted on OCaml 4.0.6).&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-dependent-projectslibraries" class="anchor" aria-hidden="true" href="#dependent-projectslibraries"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Dependent projects/libraries&lt;/h3&gt;
&lt;p&gt;Bucklescript dependencies are specified in &lt;code&gt;bs-dependencies&lt;/code&gt;.
For example, if the dependencies are &lt;code&gt;"bs-dependencies": ["somelibrary"]&lt;/code&gt; and &lt;code&gt;somelibrary&lt;/code&gt; contains &lt;code&gt;Common.re&lt;/code&gt;, this looks up the types of &lt;code&gt;foo&lt;/code&gt; in the library:&lt;/p&gt;
&lt;div class="highlight highlight-source-reason"&gt;&lt;pre&gt;  [&lt;span class="pl-k"&gt;@&lt;/span&gt;&lt;span class="pl-e"&gt;genType&lt;/span&gt;]
  &lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-en"&gt;z&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;Common&lt;/span&gt;&lt;span class="pl-smi"&gt;.&lt;/span&gt;foo&lt;span class="pl-smi"&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Scoped packages of the form e.g. &lt;code&gt;@demo/somelibrary&lt;/code&gt; are also supported.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; The library must have been published with the &lt;code&gt;.gen.ts&lt;/code&gt; files created by genType.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-configuration" class="anchor" aria-hidden="true" href="#configuration"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Configuration&lt;/h2&gt;
&lt;p&gt;Every &lt;code&gt;genType&lt;/code&gt; powered project requires a configuration item &lt;code&gt;"gentypeconfig"&lt;/code&gt; at top level in the project's &lt;code&gt;bsconfig.json&lt;/code&gt;. (The use of a separate file &lt;code&gt;gentypeconfig.json&lt;/code&gt; is being deprecated). The option has following structure:&lt;/p&gt;
&lt;div class="highlight highlight-source-ts"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;...&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;gentypeconfig&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;: {
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;language&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;typescript&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;|&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;flow&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;|&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;untyped&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;shims&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;: {
      &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;ReasonReact&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;ReactShim&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
    }
  }&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;language&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;"typescript" : Generate &lt;code&gt;*.tsx&lt;/code&gt; files written in TypeScript.&lt;/li&gt;
&lt;li&gt;"flow": Generate &lt;code&gt;*.re.js&lt;/code&gt; files with Flow type annotations.&lt;/li&gt;
&lt;li&gt;"untyped": Generate &lt;code&gt;*.re.js&lt;/code&gt; files in vanilla JavaScript.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;shims&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;e.g. &lt;code&gt;Array&amp;lt;string&amp;gt;&lt;/code&gt; with format: &lt;code&gt;"ReasonModule=JavaScriptModule"&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Required to export certain basic Reason data types to JS when one cannot modify the sources to add annotations (e.g. exporting Reason lists)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-types-supported" class="anchor" aria-hidden="true" href="#types-supported"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Types Supported&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-int" class="anchor" aria-hidden="true" href="#int"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;int&lt;/h3&gt;
&lt;p&gt;Reason values e.g. &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;2&lt;/code&gt;, &lt;code&gt;3&lt;/code&gt; are unchanged. So they are exported to JS values of type &lt;code&gt;number&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-float" class="anchor" aria-hidden="true" href="#float"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;float&lt;/h3&gt;
&lt;p&gt;Reason values e.g. &lt;code&gt;1.0&lt;/code&gt;, &lt;code&gt;2.0&lt;/code&gt;, &lt;code&gt;3.0&lt;/code&gt; are unchanged. So they are exported to JS values of type &lt;code&gt;number&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-string" class="anchor" aria-hidden="true" href="#string"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;string&lt;/h3&gt;
&lt;p&gt;Reason values e.g. &lt;code&gt;"a"&lt;/code&gt;, &lt;code&gt;"b"&lt;/code&gt;, &lt;code&gt;"c"&lt;/code&gt; are unchanged. So they are exported to JS values of type &lt;code&gt;string&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-optionals" class="anchor" aria-hidden="true" href="#optionals"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;optionals&lt;/h3&gt;
&lt;p&gt;Reason values of type e.g. &lt;code&gt;option(int)&lt;/code&gt;, such as &lt;code&gt;None&lt;/code&gt;, &lt;code&gt;Some(0)&lt;/code&gt;, &lt;code&gt;Some(1)&lt;/code&gt;, &lt;code&gt;Some(2)&lt;/code&gt;, are exported to JS values &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;undefined&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;2&lt;/code&gt;.
The JS values are unboxed, and &lt;code&gt;null&lt;/code&gt;/&lt;code&gt;undefined&lt;/code&gt; are conflated.
So the option type is exported to JS type &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt; or &lt;code&gt;number&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-nullables" class="anchor" aria-hidden="true" href="#nullables"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;nullables&lt;/h3&gt;
&lt;p&gt;Reason values of type e.g. &lt;code&gt;Js.Nullable.t(int)&lt;/code&gt;, such as &lt;code&gt;Js.Nullable.null&lt;/code&gt;, &lt;code&gt;Js.Nullable.undefined&lt;/code&gt;, &lt;code&gt;Js.Nullable.return(0)&lt;/code&gt;, &lt;code&gt;Js.Nullable.return(1)&lt;/code&gt;, &lt;code&gt;Js.Nullable.return(2)&lt;/code&gt;, are exported to JS values &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;undefined&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;2&lt;/code&gt;.
The JS values are identical: there is no conversion unless the argument type needs conversion.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-records" class="anchor" aria-hidden="true" href="#records"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;records&lt;/h3&gt;
&lt;p&gt;Reason record values of type e.g. &lt;code&gt;{x:int}&lt;/code&gt; such as &lt;code&gt;{x:0}&lt;/code&gt;, &lt;code&gt;{x:1}&lt;/code&gt;, &lt;code&gt;{x:2}&lt;/code&gt;, are exported to JS object values &lt;code&gt;{x:0}&lt;/code&gt;, &lt;code&gt;{x:1}&lt;/code&gt;, &lt;code&gt;{x:2}&lt;/code&gt;. This requires a change of runtime representation from arrays to objects.
So they are exported to JS values of type &lt;code&gt;{x:number}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Since records are immutable by default, their fields will be exported to readonly property types in Flow/TS. Mutable fields are specified in Reason by e.g. &lt;code&gt;{mutable mutableField: string}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;@genType.as&lt;/code&gt; annotation can be used to change the name of a field on the JS side of things. So e.g. &lt;code&gt;{[@genType.as "y"] x:int}&lt;/code&gt; is exported as JS type &lt;code&gt;{y:int}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If one field of the Reason record has option type, this is exported to an optional JS field. So for example Reason type &lt;code&gt;{x: option(int)}&lt;/code&gt; is exported as JS type &lt;code&gt;{x?: number}&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-objects" class="anchor" aria-hidden="true" href="#objects"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;objects&lt;/h3&gt;
&lt;p&gt;Reason object values of type e.g. &lt;code&gt;{. "x":int}&lt;/code&gt; such as &lt;code&gt;{"x": 0}&lt;/code&gt;, &lt;code&gt;{"x": 1}&lt;/code&gt;, &lt;code&gt;{"x": 2}&lt;/code&gt;, are exported as identical JS object values &lt;code&gt;{x:0}&lt;/code&gt;, &lt;code&gt;{x:1}&lt;/code&gt;, &lt;code&gt;{x:2}&lt;/code&gt;. This requires no conversion. So they are exported to JS values of type &lt;code&gt;{x:number}&lt;/code&gt;.
A conversion is required only when the type of some field requires conversions.&lt;/p&gt;
&lt;p&gt;Since objects are immutable by default, their fields will be exported to readonly property types in Flow/TS. Mutable fields are specified in Reason by e.g. &lt;code&gt;{. [@bs.set] "mutableField": string }&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;It is possible to mix object and option types, so for example the Reason type &lt;code&gt;{. "x":int, "y":option(string)}&lt;/code&gt; exports to JS type &lt;code&gt;{x:number, ?y: string}&lt;/code&gt;, requires no conversion, and allows option pattern matching on the Reason side.&lt;/p&gt;
&lt;p&gt;Object field names follow bucklescript's mangling convention (so e.g. &lt;code&gt;_type&lt;/code&gt; in Reason represents &lt;code&gt;type&lt;/code&gt; in JS):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Remove trailing "__" if present.
Otherwise remove leading "_" when followed by an uppercase letter, or keyword.
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-tuples" class="anchor" aria-hidden="true" href="#tuples"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;tuples&lt;/h3&gt;
&lt;p&gt;Reason tuple values of type e.g. &lt;code&gt;(int, string)&lt;/code&gt; are exported as identical JS values of type &lt;code&gt;[number, string]&lt;/code&gt;. This requires no conversion, unless one of types of the tuple items does.
While the type of Reason tuples is immutable, there's currently no mature enforcement in TS/Flow, so they're currenty exported to mutable tuples.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-variants" class="anchor" aria-hidden="true" href="#variants"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;variants&lt;/h3&gt;
&lt;p&gt;Ordinary variants (with capitalized cases, e.g. &lt;code&gt;| A | B(int)&lt;/code&gt;) and polymorphic variants (with a backtick, e.g. &lt;code&gt;| `A | `B(int)&lt;/code&gt;) are represented in the same way, so there's no difference from the point of view of JavaScript. Polymorphic variants don't have to be capitalized.&lt;/p&gt;
&lt;p&gt;Variants can have an &lt;em&gt;unboxed&lt;/em&gt;, or a &lt;em&gt;boxed&lt;/em&gt; representation. The unboxed representation is used when there is at most one case with a payload, and that payload has object type; otherwise, a boxed representation is used. Object types are arrays, objects, records and tuples.&lt;/p&gt;
&lt;p&gt;Variants without payloads are essentially sequences of identifiers.
E.g. type &lt;code&gt;[@genType] type days = | Monday | Tuesday&lt;/code&gt;.
The corresponding JS representation is &lt;code&gt;"Monday"&lt;/code&gt;, &lt;code&gt;"Tuesday"&lt;/code&gt;.
Similarly, polymorphic variant type &lt;code&gt;[@genType] type days = [ | `Monday | `Tuesday ] &lt;/code&gt; has the same JS representation.&lt;/p&gt;
&lt;p&gt;When at most one variant case has a payload, and if the payload is of object type, e.g.
&lt;code&gt;[ | Unnamed | Named({. "name": string, "surname": string}) ]&lt;/code&gt;
then the representation is unboxed: JS values are e.g. &lt;code&gt;"Unnamed"&lt;/code&gt; and
&lt;code&gt;{name: "hello", surname: "world"}&lt;/code&gt;. Similarly for polymorphic variants.
Note that this unboxed representation does not use the label &lt;code&gt;"Named"&lt;/code&gt; of the variant case with payload, because that value is distinguished from the other payload-less cases by its type: an object.&lt;/p&gt;
&lt;p&gt;If there is more than one case with payload, or if the single payload has not type object, a boxed representation is used. The boxed representation has shape &lt;code&gt;{tag: "someTag", value: someValue}&lt;/code&gt;.
For example, type &lt;code&gt;| A | B(int) | C(string)&lt;/code&gt; has values such as &lt;code&gt;"A"&lt;/code&gt; and
&lt;code&gt;{tag: "B", value: 42}&lt;/code&gt; and &lt;code&gt;{tag: "C", value: "hello"}&lt;/code&gt;.
Polymorhphic variants are treated similarly. Notice that payloads for polymorphic variants are always unary: &lt;code&gt;`Pair(int,int)&lt;/code&gt; has a single payload of type &lt;code&gt;(int,int)&lt;/code&gt;. Instead, ordinary variants distinguish between unary &lt;code&gt;Pair((int,int))&lt;/code&gt; and binary &lt;code&gt;Pair(int,int)&lt;/code&gt; payloads. All those cases are represented in JS as &lt;code&gt;{tag: "Pair", value: [3, 4]}&lt;/code&gt;, and the conversion functions take care of the different Reason representations.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;@genType.as&lt;/code&gt; annotation can be used to modify the name emitted for a variant case on the JS side. So e.g. &lt;code&gt; | [@genType.as "Arenamed"] A&lt;/code&gt; exports Reason value &lt;code&gt;A&lt;/code&gt; to JS value &lt;code&gt;"Arenamed"&lt;/code&gt;.
Boolean/integer/float constants can be expressed as &lt;code&gt;| [@genType.as true] True&lt;/code&gt; and &lt;code&gt;| [@genType.as 20] Twenty&lt;/code&gt; and &lt;code&gt;| [@genType.as 0.5] Half&lt;/code&gt;. Similarly for polymorphic variants.
The &lt;code&gt;@genType.as&lt;/code&gt; annotation can also be used on variants with payloads to determine what appears in &lt;code&gt;{ tag: ... }&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For more examples, see &lt;a href="examples/typescript-react-example/src/Variants.re"&gt;Variants.re&lt;/a&gt; and &lt;a href="examples/typescript-react-example/src/VariantsWithPayload.re"&gt;VariantsWithPayload.re&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; When exporting/importing values that have polymorphic variant type, you have to use type annotations, and cannot rely on type inference. So instead of &lt;code&gt;let monday = `Monday&lt;/code&gt;, use &lt;code&gt;let monday : days = `Monday&lt;/code&gt;. The former does not work, as the type checker infers a type without annotations.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-arrays" class="anchor" aria-hidden="true" href="#arrays"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;arrays&lt;/h3&gt;
&lt;p&gt;Arrays with elements of Reason type &lt;code&gt;t&lt;/code&gt; are exported to JS arrays with elements of the corresponding JS type. If a conversion is required, a copy of the array is performed.&lt;/p&gt;
&lt;p&gt;Immutable arrays are supported with the additional Reason library
&lt;a href="examples/typescript-react-example/src/ImmutableArray.rei"&gt;ImmutableArray.re/.rei&lt;/a&gt;, which currently needs to be added to your project.
The type &lt;code&gt;ImmutableArray.t(+'a)&lt;/code&gt; is covariant, and is mapped to readonly array types in TS/Flow. As opposed to TS/Flow, &lt;code&gt;ImmutableArray.t&lt;/code&gt; does not allow casting in either direction with normal arrays. Instead, a copy must be performed using &lt;code&gt;fromArray&lt;/code&gt; and &lt;code&gt;toArray&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-functions-and-function-components" class="anchor" aria-hidden="true" href="#functions-and-function-components"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;functions and function components&lt;/h3&gt;
&lt;p&gt;Reason functions are exported as JS functions of the corresponding type.
So for example a Reason function &lt;code&gt;foo : int =&amp;gt; int&lt;/code&gt; is exported as a JS function from numbers to numbers.&lt;/p&gt;
&lt;p&gt;If named arguments are present in the Reason type, they are grouped and exported as JS objects. For example &lt;code&gt;foo : (~x:int, ~y:int) =&amp;gt; int&lt;/code&gt; is exported as a JS function from objects of type &lt;code&gt;{x:number, y:number}&lt;/code&gt; to numbers.&lt;/p&gt;
&lt;p&gt;In case of mixed named and unnamed arguments, consecutive named arguments form separate groups. So e.g. &lt;code&gt;foo : (int, ~x:int, ~y:int, int, ~z:int) =&amp;gt; int&lt;/code&gt; is exported to a JS function of type &lt;code&gt;(number, {x:number, y:number}, number, {z:number}) =&amp;gt; number&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Function components are exported and imported exactly like normal functions. For example:&lt;/p&gt;
&lt;pre lang="reaspn"&gt;&lt;code&gt;[@genType]
[@react.component]
let make = (~name) =&amp;gt; React.string(name);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For renaming, named arguments follow bucklescript's mangling convention:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Remove trailing "__" if present.
Otherwise remove leading "_" when followed by an uppercase letter, or keyword.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class="highlight highlight-source-reason"&gt;&lt;pre&gt;[&lt;span class="pl-k"&gt;@&lt;/span&gt;&lt;span class="pl-e"&gt;genType&lt;/span&gt;]
&lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-en"&gt;exampleFunction&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; (~_type) &lt;span class="pl-smi"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="pl-s"&gt;"type: "&lt;/span&gt; &lt;span class="pl-smi"&gt;++&lt;/span&gt; _type&lt;span class="pl-smi"&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-record-components" class="anchor" aria-hidden="true" href="#record-components"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;record components&lt;/h3&gt;
&lt;p&gt;ReasonReact record components with props of Reason types &lt;code&gt;t1&lt;/code&gt;, &lt;code&gt;t2&lt;/code&gt;, &lt;code&gt;t3&lt;/code&gt; are exported as reactjs components with props of the JS types corresponding to &lt;code&gt;t1&lt;/code&gt;, &lt;code&gt;t2&lt;/code&gt;, &lt;code&gt;t3&lt;/code&gt;. The annotation is on the &lt;code&gt;make&lt;/code&gt; function: &lt;code&gt;[@genType] let make ...&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;A file can export many components by defining them in sub-modules. The toplevel component is also exported as default.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-imported-types" class="anchor" aria-hidden="true" href="#imported-types"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;imported types&lt;/h3&gt;
&lt;p&gt;It's possible to import an existing TS/Flow type as an opaque type in Reason. For example,&lt;/p&gt;
&lt;div class="highlight highlight-source-reason"&gt;&lt;pre&gt;[&lt;span class="pl-k"&gt;@&lt;/span&gt;&lt;span class="pl-c1"&gt;genType&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;&lt;span class="pl-e"&gt;import&lt;/span&gt; &lt;span class="pl-s"&gt;"./SomeFlowTypes"&lt;/span&gt;] &lt;span class="pl-k"&gt;type&lt;/span&gt; &lt;span class="pl-en"&gt;weekday&lt;/span&gt;&lt;span class="pl-smi"&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;defines a type which maps to &lt;code&gt;weekday&lt;/code&gt; in &lt;code&gt;SomeFlowTypes.js&lt;/code&gt;.
See for example &lt;a href="examples/flow-react-example/src/Types.re"&gt;Types.re&lt;/a&gt; and &lt;a href="examples/flow-react-example/src/SomeFlowTypes.js"&gt;SomeFlowTypes.js&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-recursive-types" class="anchor" aria-hidden="true" href="#recursive-types"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;recursive types&lt;/h3&gt;
&lt;p&gt;Recursive types which do not require a conversion are fully supported.
If a recursive type requires a conversion, only a shallow conversion is performed, and a warning comment is included in the output. (The alternative would be to perform an expensive conversion down a data structure of arbitrary size).
See for example &lt;a href="examples/typescript-react-example/src/nested/Types.re"&gt;Types.re&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-first-class-modules" class="anchor" aria-hidden="true" href="#first-class-modules"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;first class modules&lt;/h3&gt;
&lt;p&gt;Reason first class modules are converted from their array Reason runtime representation to JS Object types.
For example,&lt;/p&gt;
&lt;div class="highlight highlight-source-reason"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;module&lt;/span&gt; &lt;span class="pl-e"&gt;type&lt;/span&gt; &lt;span class="pl-c1"&gt;MT&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; { &lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-en"&gt;x&lt;/span&gt;&lt;span class="pl-smi"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;int&lt;/span&gt;&lt;span class="pl-smi"&gt;;&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-en"&gt;y&lt;/span&gt;&lt;span class="pl-smi"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;string&lt;/span&gt;&lt;span class="pl-smi"&gt;;&lt;/span&gt; }&lt;span class="pl-smi"&gt;;&lt;/span&gt;
&lt;span class="pl-k"&gt;module&lt;/span&gt; &lt;span class="pl-c1"&gt;M&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; { &lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-en"&gt;y&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;"abc"&lt;/span&gt;&lt;span class="pl-smi"&gt;;&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-en"&gt;x&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;42&lt;/span&gt;&lt;span class="pl-smi"&gt;;&lt;/span&gt; }&lt;span class="pl-smi"&gt;;&lt;/span&gt;
[&lt;span class="pl-k"&gt;@&lt;/span&gt;&lt;span class="pl-e"&gt;genType&lt;/span&gt;] &lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-en"&gt;firstClassModule&lt;/span&gt;&lt;span class="pl-smi"&gt;:&lt;/span&gt; module MT = (module M)&lt;span class="pl-smi"&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;is exported as a JS object of type&lt;/p&gt;
&lt;div class="highlight highlight-source-reason"&gt;&lt;pre&gt;{x&lt;span class="pl-smi"&gt;:&lt;/span&gt; number&lt;span class="pl-smi"&gt;,&lt;/span&gt; y&lt;span class="pl-smi"&gt;:&lt;/span&gt; string}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice how the order of elements in the exported JS object is determined by the module type &lt;code&gt;MT&lt;/code&gt; and not the module implementation &lt;code&gt;M&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-polymorphic-types" class="anchor" aria-hidden="true" href="#polymorphic-types"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;polymorphic types&lt;/h3&gt;
&lt;p&gt;If a Reason type contains a type variable, the corresponding value is not converted. In other words, the conversion is the identity function. For example, a Reason function of type &lt;code&gt;{payload: 'a} =&amp;gt; 'a&lt;/code&gt; must treat the value of the payload as a black box, as a consequence of parametric polymorphism. If a typed back-end is used, the reason type is converted to the corresponding generic type.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-exporting-values-from-polymorphic-types-with-hidden-type-variables" class="anchor" aria-hidden="true" href="#exporting-values-from-polymorphic-types-with-hidden-type-variables"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;exporting values from polymorphic types with hidden type variables&lt;/h4&gt;
&lt;p&gt;For cases when a value that contains a hidden type variable needs to be converted, a function can be used to produce the appropriate output:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Doesn't work&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-reason"&gt;&lt;pre&gt;[&lt;span class="pl-k"&gt;@&lt;/span&gt;&lt;span class="pl-e"&gt;genType&lt;/span&gt;]
&lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-en"&gt;none&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-e"&gt;None&lt;/span&gt;&lt;span class="pl-smi"&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight highlight-source-js"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;export&lt;/span&gt; &lt;span class="pl-k"&gt;const&lt;/span&gt; none&lt;span class="pl-k"&gt;:&lt;/span&gt; ?&lt;span class="pl-c1"&gt;T1&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-smi"&gt;OptionBS&lt;/span&gt;.&lt;span class="pl-smi"&gt;none&lt;/span&gt;; &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Errors out as T1 is not defined&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Works&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-reason"&gt;&lt;pre&gt;[&lt;span class="pl-k"&gt;@&lt;/span&gt;&lt;span class="pl-e"&gt;genType&lt;/span&gt;]
&lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-en"&gt;none&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;()&lt;/span&gt; &lt;span class="pl-smi"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="pl-e"&gt;None&lt;/span&gt;&lt;span class="pl-smi"&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight highlight-source-js"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;const&lt;/span&gt; &lt;span class="pl-c1"&gt;none&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-c1"&gt;T1&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;(a&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;T1&lt;/span&gt;)&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-k"&gt;?&lt;/span&gt;&lt;span class="pl-smi"&gt;T1&lt;/span&gt; &lt;span class="pl-k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="pl-smi"&gt;OptionBS&lt;/span&gt;.&lt;span class="pl-smi"&gt;none&lt;/span&gt;;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-promises" class="anchor" aria-hidden="true" href="#promises"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;promises&lt;/h3&gt;
&lt;p&gt;Valiues of type &lt;code&gt;Js.Promise.t(arg)&lt;/code&gt; are exported to JS promises of type &lt;code&gt;Promise&amp;lt;argJS&amp;gt;&lt;/code&gt; where &lt;code&gt;argJS&lt;/code&gt; is the JS type corresponding to &lt;code&gt;arg&lt;/code&gt;.
If a conversion for the argument is required, the conversion functions are chained via &lt;code&gt;.then(promise =&amp;gt; ...)&lt;/code&gt;.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-experimental-features" class="anchor" aria-hidden="true" href="#experimental-features"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Experimental features&lt;/h1&gt;
&lt;p&gt;These features are for experimentation only. They could be changed/removed any time, and not be considered breaking changes.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Export object and record types as interfaces. To activate, add &lt;code&gt;"exportInterfaces": true&lt;/code&gt; to the configuration. The types are also renamed from &lt;code&gt;name&lt;/code&gt; to &lt;code&gt;Iname&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Emit prop types for the untyped back-end. To activate, add &lt;code&gt;"propTypes": true&lt;/code&gt; and &lt;code&gt;"language": "untyped"&lt;/code&gt; to the configuration.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;a id="user-content-limitations" class="anchor" aria-hidden="true" href="#limitations"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Limitations&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;BuckleScript in-source = true&lt;/strong&gt;. Currently only supports bucklescript projects with &lt;a href="https://bucklescript.github.io/docs/en/build-configuration#package-specs" rel="nofollow"&gt;in-source generation&lt;/a&gt; and &lt;code&gt;.bs.js&lt;/code&gt; file suffix.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Limited namespace support&lt;/strong&gt;. Currently there's limited namespace support, and only &lt;code&gt;namespace:true&lt;/code&gt; is possible, not e.g. &lt;code&gt;namespace:"custom"&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;a id="user-content-developmentcontributing" class="anchor" aria-hidden="true" href="#developmentcontributing"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Development/Contributing&lt;/h1&gt;
&lt;p&gt;Please check out our &lt;a href="DEVELOPMENT.md"&gt;development instructions&lt;/a&gt;.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>cristianoc</author><guid isPermaLink="false">https://github.com/cristianoc/genType</guid><pubDate>Tue, 28 Jan 2020 00:02:00 GMT</pubDate></item></channel></rss>