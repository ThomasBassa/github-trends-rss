<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>GitHub Trending: Groovy, Today</title><link>https://github.com/trending/groovy?since=daily</link><description>The top repositories on GitHub for groovy, measured daily</description><pubDate>Sun, 10 Nov 2019 01:07:22 GMT</pubDate><lastBuildDate>Sun, 10 Nov 2019 01:07:22 GMT</lastBuildDate><generator>PyRSS2Gen-1.1.0</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><ttl>720</ttl><item><title>jenkinsci/pipeline-examples #1 in Groovy, Today</title><link>https://github.com/jenkinsci/pipeline-examples</link><description>&lt;p&gt;&lt;i&gt;A collection of examples, tips and tricks and snippets of scripting for the Jenkins Pipeline plugin&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-introduction" class="anchor" aria-hidden="true" href="#introduction"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Introduction&lt;/h1&gt;
&lt;p&gt;This repository is a home for snippets, tips and tricks and examples of scripting for the &lt;a href="https://github.com/jenkinsci/workflow-plugin/blob/master/README.md"&gt;Jenkins Pipeline plugin&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-layout" class="anchor" aria-hidden="true" href="#layout"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Layout&lt;/h1&gt;
&lt;p&gt;The repository is broken up into four directories currently:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;pipeline-examples&lt;/em&gt; - for general Pipeline examples.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;global-library-examples&lt;/em&gt; - for examples of how to write and use the global library on a Jenkins master.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;jenkinsfile-examples&lt;/em&gt; - for examples of using &lt;code&gt;Jenkinsfile&lt;/code&gt;s checked into repositories.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;docs&lt;/em&gt; - for documentation, guides and other non-code content.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Please put your script into its own directory under the appropriate directory above, with a README.md file included explaining what your script does or shows. Make sure your script is commented so that others can understand how it works, why it works, etc.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-license" class="anchor" aria-hidden="true" href="#license"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;License&lt;/h1&gt;
&lt;p&gt;All contributions are under the MIT license, like Jenkins itself.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-pull-requests" class="anchor" aria-hidden="true" href="#pull-requests"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Pull requests&lt;/h1&gt;
&lt;p&gt;We want them!&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-external-resources" class="anchor" aria-hidden="true" href="#external-resources"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;External resources&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/docker/jenkins-pipeline-scripts"&gt;Pipeline scripts collection of the Docker team&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/fabric8io/jenkins-pipeline-library"&gt;Pipeline scripts collection of the Fabric8 team&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/funkwerk/jenkins-workflow"&gt;Pipeline scripts collection of the Funkwerk&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>jenkinsci</author><guid isPermaLink="false">https://github.com/jenkinsci/pipeline-examples</guid><pubDate>Sun, 10 Nov 2019 00:01:00 GMT</pubDate></item><item><title>gradle/gradle #2 in Groovy, Today</title><link>https://github.com/gradle/gradle</link><description>&lt;p&gt;&lt;i&gt;Adaptable, fast automation for all&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="gradle.png"&gt;&lt;img src="gradle.png" width="350px" alt="Gradle Logo" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Gradle is a build tool with a focus on build automation and support for multi-language development. If you are building, testing, publishing, and deploying software on any platform, Gradle offers a flexible model that can support the entire development lifecycle from compiling and packaging code to publishing web sites. Gradle has been designed to support build automation across multiple languages and platforms including Java, Scala, Android, C/C++, and Groovy, and is closely integrated with development tools and continuous integration servers including Eclipse, IntelliJ, and Jenkins.&lt;/p&gt;
&lt;p&gt;For more information about Gradle, please visit: &lt;a href="https://gradle.org" rel="nofollow"&gt;https://gradle.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This project adheres to the &lt;a href="https://gradle.org/conduct/" rel="nofollow"&gt;Gradle Code of Conduct&lt;/a&gt;. By participating, you are expected to uphold this code.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-downloading" class="anchor" aria-hidden="true" href="#downloading"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Downloading&lt;/h2&gt;
&lt;p&gt;You can download released versions and nightly build artifacts from: &lt;a href="https://gradle.org/downloads" rel="nofollow"&gt;https://gradle.org/downloads&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-installing-from-source" class="anchor" aria-hidden="true" href="#installing-from-source"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installing from source&lt;/h3&gt;
&lt;p&gt;To create an install from the source tree you can run either of the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./gradlew install -Pgradle_installPath=/usr/local/gradle-source-build
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will create a minimal installation; just what's needed to run Gradle (i.e. no docs).&lt;/p&gt;
&lt;p&gt;You can then build a Gradle based project with this installation:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/usr/local/gradle-source-build/bin/gradle «some task»
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To create a full installation (includes docs):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./gradlew installAll -Pgradle_installPath=/usr/local/gradle-source-build
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;a id="user-content-contributing" class="anchor" aria-hidden="true" href="#contributing"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contributing&lt;/h2&gt;
&lt;p&gt;If you're looking to contribute to Gradle or provide a patch/pull request, you can find more info &lt;a href="https://github.com/gradle/gradle/blob/master/CONTRIBUTING.md"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>gradle</author><guid isPermaLink="false">https://github.com/gradle/gradle</guid><pubDate>Sun, 10 Nov 2019 00:02:00 GMT</pubDate></item><item><title>nextflow-io/nextflow #3 in Groovy, Today</title><link>https://github.com/nextflow-io/nextflow</link><description>&lt;p&gt;&lt;i&gt;A DSL for data-driven computational pipelines&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://github.com/nextflow-io/trademark/blob/master/nextflow2014_no-bg.png"&gt;&lt;img src="https://github.com/nextflow-io/trademark/raw/master/nextflow2014_no-bg.png" alt="Nextflow logo" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;"Dataflow variables are spectacularly expressive in concurrent programming"&lt;/em&gt;
&lt;br&gt;&lt;a href="http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.145.7873" rel="nofollow"&gt;Henri E. Bal , Jennifer G. Steiner , Andrew S. Tanenbaum&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://gitter.im/nextflow-io/nextflow" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/5c9bced3f1049e6d2458949159b386add7916f8c/68747470733a2f2f696d672e736869656c64732e696f2f6769747465722f726f6f6d2f6e657874666c6f772d696f2f6e657874666c6f772e7376673f636f6c6f72423d323661663634267374796c653d706f706f7574" alt="Chat on Gitter" data-canonical-src="https://img.shields.io/gitter/room/nextflow-io/nextflow.svg?colorB=26af64&amp;amp;style=popout" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://github.com/nextflow-io/nextflow/releases/latest"&gt;&lt;img src="https://camo.githubusercontent.com/66d6a702e4fec9cc2ab6d9f3160a54fb40d2db28/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f72656c656173652f6e657874666c6f772d696f2f6e657874666c6f772e7376673f636f6c6f72423d323661663634267374796c653d706f706f7574" alt="Nextflow version" data-canonical-src="https://img.shields.io/github/release/nextflow-io/nextflow.svg?colorB=26af64&amp;amp;style=popout" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://twitter.com/nextflowio" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/03fa2c9431a84642ef914a12a3cf2c078bceeed7/68747470733a2f2f696d672e736869656c64732e696f2f747769747465722f75726c2f68747470732f6e657874666c6f77696f2e7376673f636f6c6f72423d32366166363426266c6162656c3d2534306e657874666c6f77267374796c653d706f706f7574" alt="Nextflow Twitter" data-canonical-src="https://img.shields.io/twitter/url/https/nextflowio.svg?colorB=26af64&amp;amp;&amp;amp;label=%40nextflow&amp;amp;style=popout" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://www.nature.com/articles/nbt.3820" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/991bc2e16e9a90862563e24df2b1cb6f179f7230/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f5075626c69736865642d4e617475726525323042696f746563686e6f6c6f67792d3236616636342e7376673f636f6c6f72423d323661663634267374796c653d706f706f7574" alt="Nextflow Publication" data-canonical-src="https://img.shields.io/badge/Published-Nature%20Biotechnology-26af64.svg?colorB=26af64&amp;amp;style=popout" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="http://bioconda.github.io/recipes/nextflow/README.html" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/2c1d6fbb143c81ecb7ae22f2022b66e44af82c43/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f696e7374616c6c253230776974682d62696f636f6e64612d627269676874677265656e2e7376673f636f6c6f72423d323661663634267374796c653d706f706f7574" alt="install with bioconda" data-canonical-src="https://img.shields.io/badge/install%20with-bioconda-brightgreen.svg?colorB=26af64&amp;amp;style=popout" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://github.com/nextflow-io/nextflow/blob/master/COPYING"&gt;&lt;img src="https://camo.githubusercontent.com/e0a5488609525dac7010a04f2812376ad93e432a/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f6e657874666c6f772d696f2f6e657874666c6f772e7376673f636f6c6f72423d323661663634267374796c653d706f706f7574" alt="Nextflow license" data-canonical-src="https://img.shields.io/github/license/nextflow-io/nextflow.svg?colorB=26af64&amp;amp;style=popout" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-quick-overview" class="anchor" aria-hidden="true" href="#quick-overview"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Quick overview&lt;/h1&gt;
&lt;p&gt;Nextflow is a bioinformatics workflow manager that enables the development of portable and reproducible workflows.
It supports deploying workflows on a variety of execution platforms including local, HPC schedulers, AWS Batch,
Google Genomics Pipelines, and Kubernetes. Additionally, it provides support for manage your workflow dependencies
through built-in support for Conda, Docker, Singularity, and Modules.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-contents" class="anchor" aria-hidden="true" href="#contents"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#rationale"&gt;Rationale&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#quick-start"&gt;Quick start&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#documentation"&gt;Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tool-management"&gt;Tool Management&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#conda-environments"&gt;Conda environments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#containers"&gt;Docker and Singularity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#environment-modules"&gt;Environment Modules&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#hpc-schedulers"&gt;HPC Schedulers&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#hpc-schedulers"&gt;SGE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#hpc-schedulers"&gt;Univa Grid Engine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#hpc-schedulers"&gt;LSF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#hpc-schedulers"&gt;SLURM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#hpc-schedulers"&gt;PBS/Torque&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#hpc-schedulers"&gt;HTCondor (experimental)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#cloud-support"&gt;Cloud Support&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#cloud-support"&gt;AWS Batch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cloud-support"&gt;AWS EC2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cloud-support"&gt;Google Cloud&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cloud-support"&gt;Google Genomics Pipelines&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cloud-support"&gt;Kubernetes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#community"&gt;Community&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#build-from-source"&gt;Build from source&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#contributing"&gt;Contributing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#license"&gt;License&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#citations"&gt;Citations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#credits"&gt;Credits&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;a id="user-content-rationale" class="anchor" aria-hidden="true" href="#rationale"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Rationale&lt;/h1&gt;
&lt;p&gt;With the rise of big data, techniques to analyse and run experiments on large datasets are increasingly necessary.&lt;/p&gt;
&lt;p&gt;Parallelization and distributed computing are the best ways to tackle this problem, but the tools commonly available to the bioinformatics community often lack good support for these techniques, or provide a model that fits badly with the specific requirements in the bioinformatics domain and, most of the time, require the knowledge of complex tools or low-level APIs.&lt;/p&gt;
&lt;p&gt;Nextflow framework is based on the dataflow programming model, which greatly simplifies writing parallel and distributed pipelines without adding unnecessary complexity and letting you concentrate on the flow of data, i.e. the functional logic of the application/algorithm.&lt;/p&gt;
&lt;p&gt;It doesn't aim to be another pipeline scripting language yet, but it is built around the idea that the Linux platform is the &lt;em&gt;lingua franca&lt;/em&gt; of data science, since it provides many simple command line and scripting tools, which by themselves are powerful, but when chained together facilitate complex data manipulations.&lt;/p&gt;
&lt;p&gt;In practice, this means that a Nextflow script is defined by composing many different processes. Each process can execute a given bioinformatics tool or scripting language, to which is added the ability to coordinate and synchronize the processes execution by simply specifying their inputs and outputs.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-quick-start" class="anchor" aria-hidden="true" href="#quick-start"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Quick start&lt;/h1&gt;
&lt;h2&gt;&lt;a id="user-content-download-the-package" class="anchor" aria-hidden="true" href="#download-the-package"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Download the package&lt;/h2&gt;
&lt;p&gt;Nextflow does not require any installation procedure, just download the distribution package by copying and pasting
this command in your terminal:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curl -fsSL https://get.nextflow.io | bash
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It creates the &lt;code&gt;nextflow&lt;/code&gt; executable file in the current directory. You may want to move it to a folder accessible from your &lt;code&gt;$PATH&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-download-from-conda" class="anchor" aria-hidden="true" href="#download-from-conda"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Download from Conda&lt;/h2&gt;
&lt;p&gt;Nextflow can also be installed from Bioconda&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;conda install -c bioconda nextflow 
&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;&lt;a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Documentation&lt;/h1&gt;
&lt;p&gt;Nextflow documentation is available at this link &lt;a href="http://docs.nextflow.io" rel="nofollow"&gt;http://docs.nextflow.io&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-hpc-schedulers" class="anchor" aria-hidden="true" href="#hpc-schedulers"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;HPC Schedulers&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;Nextflow&lt;/em&gt; supports common HPC schedulers, abstracting the submission of jobs from the user.&lt;/p&gt;
&lt;p&gt;Currently the following clusters are supported:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.nextflow.io/docs/latest/executor.html#sge" rel="nofollow"&gt;SGE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.nextflow.io/docs/latest/executor.html#sge" rel="nofollow"&gt;Univa Grid Engine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.nextflow.io/docs/latest/executor.html#lsf" rel="nofollow"&gt;LSF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.nextflow.io/docs/latest/executor.html#slurm" rel="nofollow"&gt;SLURM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.nextflow.io/docs/latest/executor.html#pbs-torque" rel="nofollow"&gt;PBS/Torque&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.nextflow.io/docs/latest/executor.html#htcondor" rel="nofollow"&gt;HTCondor (beta)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.nextflow.io/docs/latest/executor.html#moab" rel="nofollow"&gt;Moab (beta)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example to submit the execution to a SGE cluster create a file named &lt;code&gt;nextflow.config&lt;/code&gt;, in the directory
where the pipeline is going to be launched, with the following content:&lt;/p&gt;
&lt;div class="highlight highlight-source-nextflow"&gt;&lt;pre&gt;process {
  executor&lt;span class="pl-k"&gt;=&lt;/span&gt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;sge&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;
  queue&lt;span class="pl-k"&gt;=&lt;/span&gt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;&amp;lt;your execution queue&amp;gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In doing that, processes will be executed by Nextflow as SGE jobs using the &lt;code&gt;qsub&lt;/code&gt; command. Your
pipeline will behave like any other SGE job script, with the benefit that &lt;em&gt;Nextflow&lt;/em&gt; will
automatically and transparently manage the processes synchronisation, file(s) staging/un-staging, etc.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-cloud-support" class="anchor" aria-hidden="true" href="#cloud-support"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Cloud support&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;Nextflow&lt;/em&gt; also supports running workflows across various clouds and cloud technologies. &lt;em&gt;Nextflow&lt;/em&gt; can create AWS EC2 or Google GCE clusters and deploy your workflow. Managed solutions from both Amazon and Google are also supported through AWS Batch and Google Genomics Pipelines. Additionally, &lt;em&gt;Nextflow&lt;/em&gt; can run workflows on either on-prem or managed cloud Kubernetes clusters.&lt;/p&gt;
&lt;p&gt;Currently supported cloud platforms:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.nextflow.io/docs/latest/awscloud.html#aws-batch" rel="nofollow"&gt;AWS Batch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.nextflow.io/docs/latest/awscloud.html" rel="nofollow"&gt;AWS EC2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.nextflow.io/docs/latest/google.html" rel="nofollow"&gt;Google GCE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.nextflow.io/docs/latest/google.html#google-pipelines" rel="nofollow"&gt;Google Genomics Pipelines&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.nextflow.io/docs/latest/kubernetes.html" rel="nofollow"&gt;Kubernetes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;a id="user-content-tool-management" class="anchor" aria-hidden="true" href="#tool-management"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tool management&lt;/h1&gt;
&lt;h2&gt;&lt;a id="user-content-containers" class="anchor" aria-hidden="true" href="#containers"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Containers&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Nextflow&lt;/em&gt; has first class support for containerization. It supports both &lt;a href="https://www.nextflow.io/docs/latest/docker.html" rel="nofollow"&gt;Docker&lt;/a&gt; and &lt;a href="https://www.nextflow.io/docs/latest/singularity.html" rel="nofollow"&gt;Singularity&lt;/a&gt; container engines. Additionally, &lt;em&gt;Nextflow&lt;/em&gt; can easily switch between container engines enabling workflow portability.&lt;/p&gt;
&lt;div class="highlight highlight-source-nextflow"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;process&lt;/span&gt; samtools {
  container &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;biocontainers/samtools:1.3.1&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;

  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"""&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-s"&gt;  samtools --version &lt;/span&gt;
&lt;span class="pl-s"&gt;  &lt;span class="pl-pds"&gt;"""&lt;/span&gt;&lt;/span&gt;

}&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-conda-environments" class="anchor" aria-hidden="true" href="#conda-environments"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Conda environments&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.nextflow.io/docs/latest/conda.html" rel="nofollow"&gt;Conda environments&lt;/a&gt; provide another option for managing software packages in your workflow.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-environment-modules" class="anchor" aria-hidden="true" href="#environment-modules"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Environment Modules&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.nextflow.io/docs/latest/process.html#module" rel="nofollow"&gt;Environment modules&lt;/a&gt; commonly found in HPC environments can also be used to manage the tools used in a &lt;em&gt;Nextflow&lt;/em&gt; workflow.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-community" class="anchor" aria-hidden="true" href="#community"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Community&lt;/h1&gt;
&lt;p&gt;You can post questions, or report problems by using the Nextflow &lt;a href="https://groups.google.com/forum/#!forum/nextflow" rel="nofollow"&gt;discussion forum&lt;/a&gt;
or the &lt;a href="https://gitter.im/nextflow-io/nextflow" rel="nofollow"&gt;Nextflow channel on Gitter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Nextflow&lt;/em&gt; also hosts a yearly workshop showcasing researcher's workflows and advancements in the langauge. Talks from the past workshops are available on the &lt;a href="https://www.youtube.com/channel/UCB-5LCKLdTKVn2F4V4KlPbQ" rel="nofollow"&gt;Nextflow YouTube Channel&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://nf-co.re/" rel="nofollow"&gt;nf-core&lt;/a&gt; project is a community effort aggregating high quality &lt;em&gt;Nextflow&lt;/em&gt; workflows which can be used by the community.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-build-from-source" class="anchor" aria-hidden="true" href="#build-from-source"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Build from source&lt;/h1&gt;
&lt;h2&gt;&lt;a id="user-content-required-dependencies" class="anchor" aria-hidden="true" href="#required-dependencies"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Required dependencies&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Compiler Java 8&lt;/li&gt;
&lt;li&gt;Runtime Java 8 or later&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-build-from-source-1" class="anchor" aria-hidden="true" href="#build-from-source-1"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Build from source&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Nextflow&lt;/em&gt; is written in &lt;a href="http://groovy-lang.org" rel="nofollow"&gt;Groovy&lt;/a&gt; (a scripting language for the JVM). A pre-compiled,
ready-to-run, package is available at the &lt;a href="https://github.com/nextflow-io/nextflow/releases"&gt;Github releases page&lt;/a&gt;,
thus it is not necessary to compile it in order to use it.&lt;/p&gt;
&lt;p&gt;If you are interested in modifying the source code, or contributing to the project, it worth knowing that
the build process is based on the &lt;a href="http://www.gradle.org/" rel="nofollow"&gt;Gradle&lt;/a&gt; build automation system.&lt;/p&gt;
&lt;p&gt;You can compile &lt;em&gt;Nextflow&lt;/em&gt; by typing the following command in the project home directory on your computer:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;make compile&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The very first time you run it, it will automatically download all the libraries required by the build process.
It may take some minutes to complete.&lt;/p&gt;
&lt;p&gt;When complete, execute the program by using the &lt;code&gt;launch.sh&lt;/code&gt; script in the project directory.&lt;/p&gt;
&lt;p&gt;The self-contained runnable Nextflow packages can be created by using the following command:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;make pack&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In order to install the compiled packages use the following command:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;make install&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then you will be able to run nextflow using the &lt;code&gt;nextflow&lt;/code&gt; launcher script in the project root folder.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-known-compilation-problems" class="anchor" aria-hidden="true" href="#known-compilation-problems"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Known compilation problems&lt;/h2&gt;
&lt;p&gt;Nextflow required JDK 8 to be compiled. The Java compiler used by the build process can be choose by setting the
&lt;code&gt;JAVA_HOME&lt;/code&gt; environment variable accordingly.&lt;/p&gt;
&lt;p&gt;If the compilation stops reporting the error: &lt;code&gt;java.lang.VerifyError: Bad &amp;lt;init&amp;gt; method call from inside of a branch&lt;/code&gt;,
this is due to a bug affecting the following Java JDK:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.8.0 update 11&lt;/li&gt;
&lt;li&gt;1.8.0 update 20&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Upgrade to a newer JDK to avoid to this issue. Alternatively a possible workaround is to define the following variable
in your environment:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;_JAVA_OPTIONS=&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;-Xverify:none&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Read more at these links:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://bugs.openjdk.java.net/browse/JDK-8051012" rel="nofollow"&gt;https://bugs.openjdk.java.net/browse/JDK-8051012&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jira.codehaus.org/browse/GROOVY-6951" rel="nofollow"&gt;https://jira.codehaus.org/browse/GROOVY-6951&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-intellij-idea" class="anchor" aria-hidden="true" href="#intellij-idea"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;IntelliJ IDEA&lt;/h2&gt;
&lt;p&gt;Nextflow development with &lt;a href="https://www.jetbrains.com/idea/" rel="nofollow"&gt;IntelliJ IDEA&lt;/a&gt; requires the latest version of the IDE (2019.1.2 or later).&lt;/p&gt;
&lt;p&gt;If you have it installed in your computer, follow the steps below in order to use it with Nextflow:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Clone the Nextflow repository to a directory in your computer.&lt;/li&gt;
&lt;li&gt;Open IntelliJ IDEA and choose "Import project" in the "File" menu bar.&lt;/li&gt;
&lt;li&gt;Select the Nextflow project root directory in your computer and click "OK".&lt;/li&gt;
&lt;li&gt;Then, choose the "Gradle" item in the "external module" list and click on "Next" button.&lt;/li&gt;
&lt;li&gt;Confirm the default import options and click on "Finish" to finalize the project configuration.&lt;/li&gt;
&lt;li&gt;When the import process complete, select the "Project structure" command in the "File" menu bar.&lt;/li&gt;
&lt;li&gt;In the showed dialog click on the "Project" item in the list of the left, and make sure that
the "Project SDK" choice on the right contains Java 8.&lt;/li&gt;
&lt;li&gt;Set the code formatting options with setting provided &lt;a href="https://github.com/nextflow-io/nextflow/blob/master/CONTRIBUTING.md#ide-settings"&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;&lt;a id="user-content-contributing" class="anchor" aria-hidden="true" href="#contributing"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contributing&lt;/h1&gt;
&lt;p&gt;Project contribution are more than welcome. See the &lt;a href="CONTRIBUTING.md"&gt;CONTRIBUTING&lt;/a&gt; file for details.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-build-servers" class="anchor" aria-hidden="true" href="#build-servers"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Build servers&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://travis-ci.org/nextflow-io/nextflow" rel="nofollow"&gt;Travis-CI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://ci.groovy-lang.org/project.html?projectId=JointBuilds_Nextflow&amp;amp;guest=1" rel="nofollow"&gt;Groovy Joint build&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;a id="user-content-license" class="anchor" aria-hidden="true" href="#license"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;License&lt;/h1&gt;
&lt;p&gt;The &lt;em&gt;Nextflow&lt;/em&gt; framework is released under the Apache 2.0 license.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-citations" class="anchor" aria-hidden="true" href="#citations"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Citations&lt;/h1&gt;
&lt;p&gt;If you use Nextflow in your research, please cite:&lt;/p&gt;
&lt;p&gt;P. Di Tommaso, et al. Nextflow enables reproducible computational workflows. Nature Biotechnology 35, 316–319 (2017) doi:&lt;a href="http://www.nature.com/nbt/journal/v35/n4/full/nbt.3820.html" rel="nofollow"&gt;10.1038/nbt.3820&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-credits" class="anchor" aria-hidden="true" href="#credits"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Credits&lt;/h1&gt;
&lt;p&gt;Nextflow is built on two great pieces of open source software, namely &lt;a href="http://groovy-lang.org" rel="nofollow"&gt;Groovy&lt;/a&gt;
and &lt;a href="http://www.gpars.org/" rel="nofollow"&gt;Gpars&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;YourKit is kindly supporting this open source project with its full-featured Java Profiler.
Read more &lt;a href="http://www.yourkit.com" rel="nofollow"&gt;http://www.yourkit.com&lt;/a&gt;&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>nextflow-io</author><guid isPermaLink="false">https://github.com/nextflow-io/nextflow</guid><pubDate>Sun, 10 Nov 2019 00:03:00 GMT</pubDate></item><item><title>SmartThingsCommunity/SmartThingsPublic #4 in Groovy, Today</title><link>https://github.com/SmartThingsCommunity/SmartThingsPublic</link><description>&lt;p&gt;&lt;i&gt;SmartThings open-source DeviceTypeHandlers and SmartApps code&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-smartthings-public-github-repo" class="anchor" aria-hidden="true" href="#smartthings-public-github-repo"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;SmartThings Public GitHub Repo&lt;/h1&gt;
&lt;p&gt;An official list of SmartApps and Device Types from SmartThings.&lt;/p&gt;
&lt;p&gt;Here are some links to help you get started coding right away:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://docs.smartthings.com/en/latest/tools-and-ide/github-integration.html" rel="nofollow"&gt;GitHub-specific Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.smartthings.com" rel="nofollow"&gt;Full Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://ide.smartthings.com" rel="nofollow"&gt;IDE &amp;amp; Simulator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://community.smartthings.com" rel="nofollow"&gt;Community Forums&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Follow us on the web:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Twitter: &lt;a href="http://twitter.com/smartthingsdev" rel="nofollow"&gt;http://twitter.com/smartthingsdev&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Facebook: &lt;a href="http://facebook.com/smartthingsdevelopers" rel="nofollow"&gt;http://facebook.com/smartthingsdevelopers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>SmartThingsCommunity</author><guid isPermaLink="false">https://github.com/SmartThingsCommunity/SmartThingsPublic</guid><pubDate>Sun, 10 Nov 2019 00:04:00 GMT</pubDate></item><item><title>wardviaene/jenkins-course #5 in Groovy, Today</title><link>https://github.com/wardviaene/jenkins-course</link><description>&lt;p&gt;&lt;i&gt;This is the repository with all the resources for the Jenkins training on Udemy&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-jenkins-course" class="anchor" aria-hidden="true" href="#jenkins-course"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;jenkins-course&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;This is the course material for the Jenkins Course on Udemy. See &lt;a href="https://www.udemy.com/learn-devops-ci-cd-with-jenkins-using-pipelines-and-docker/?couponCode=JENKINS_GIT" rel="nofollow"&gt;https://www.udemy.com/learn-devops-ci-cd-with-jenkins-using-pipelines-and-docker/?couponCode=JENKINS_GIT&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>wardviaene</author><guid isPermaLink="false">https://github.com/wardviaene/jenkins-course</guid><pubDate>Sun, 10 Nov 2019 00:05:00 GMT</pubDate></item><item><title>jenkinsci/jenkins-scripts #6 in Groovy, Today</title><link>https://github.com/jenkinsci/jenkins-scripts</link><description>&lt;p&gt;&lt;i&gt;Scripts in Groovy, shell, Ruby, Python, whatever for managing/interacting with Jenkins&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-jenkins-scripts" class="anchor" aria-hidden="true" href="#jenkins-scripts"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;jenkins-scripts&lt;/h1&gt;
&lt;p&gt;This is a collection of utility scripts for use with
&lt;a href="http://jenkins-ci.org" rel="nofollow"&gt;Jenkins&lt;/a&gt;, the leading continuous integration
server.&lt;/p&gt;
&lt;p&gt;They can cover a range of use cases - automating Jenkins management,
end-user tools, etc. They're organized by function&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wiki.jenkins-ci.org/display/JENKINS/Scriptler+Plugin" rel="nofollow"&gt;Scriptler&lt;/a&gt;
scripts, for use in the Jenkins Plugin, are in the "scriptler"
directory and should follow the convention as described in &lt;a href="scriptler/README.md"&gt;scriptler README.md&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;and other scripts are in the "managed-scripts" directory,
and then organized by scripting language.&lt;/li&gt;
&lt;/ul&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>jenkinsci</author><guid isPermaLink="false">https://github.com/jenkinsci/jenkins-scripts</guid><pubDate>Sun, 10 Nov 2019 00:06:00 GMT</pubDate></item><item><title>futuresimple/triggear_pipeline #7 in Groovy, Today</title><link>https://github.com/futuresimple/triggear_pipeline</link><description>&lt;p&gt;&lt;i&gt;[No description found.]&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;This repo does not have a README.&lt;/i&gt;&lt;/p&gt;</description><author>futuresimple</author><guid isPermaLink="false">https://github.com/futuresimple/triggear_pipeline</guid><pubDate>Sun, 10 Nov 2019 00:07:00 GMT</pubDate></item><item><title>Marfeel/MarfeelCodingStandards #8 in Groovy, Today</title><link>https://github.com/Marfeel/MarfeelCodingStandards</link><description>&lt;p&gt;&lt;i&gt;[No description found.]&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;table data-table-type="yaml-metadata"&gt;
  &lt;thead&gt;
  &lt;tr&gt;
  &lt;th&gt;title&lt;/th&gt;
  &lt;th&gt;tags&lt;/th&gt;
  &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
  &lt;tr&gt;
  &lt;td&gt;&lt;div&gt;Overview&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div&gt;docs&lt;/div&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h1&gt;&lt;a id="user-content-marfeelcodingstandards" class="anchor" aria-hidden="true" href="#marfeelcodingstandards"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;MarfeelCodingStandards&lt;/h1&gt;
&lt;p&gt;Linting tools for marfeel.
Monorepo, ready to contain more than one module, managed with leran.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-installing" class="anchor" aria-hidden="true" href="#installing"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installing&lt;/h3&gt;
&lt;p&gt;Lerna trigger the npm install of all the contained modules&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm install
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;a id="user-content-testing" class="anchor" aria-hidden="true" href="#testing"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Testing&lt;/h2&gt;
&lt;p&gt;Lerna trigger the npm test of all the contained modules&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm test
&lt;/code&gt;&lt;/pre&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>Marfeel</author><guid isPermaLink="false">https://github.com/Marfeel/MarfeelCodingStandards</guid><pubDate>Sun, 10 Nov 2019 00:08:00 GMT</pubDate></item><item><title>jenkinsci/JenkinsPipelineUnit #9 in Groovy, Today</title><link>https://github.com/jenkinsci/JenkinsPipelineUnit</link><description>&lt;p&gt;&lt;i&gt;Framework for unit testing Jenkins pipelines &lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-jenkins-pipeline-unit-testing-framework" class="anchor" aria-hidden="true" href="#jenkins-pipeline-unit-testing-framework"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Jenkins Pipeline Unit testing framework&lt;/h1&gt;
&lt;p&gt;Jenkins Pipeline Unit is a testing framework for unit testing Jenkins pipelines, written in
&lt;a href="https://jenkins.io/doc/book/pipeline/" rel="nofollow"&gt;Groovy Pipeline DSL&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://travis-ci.org/jenkinsci/JenkinsPipelineUnit" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/95b91c222a87feefc7090c3abb83f181e855aeb0/68747470733a2f2f7472617669732d63692e6f72672f6a656e6b696e7363692f4a656e6b696e73506970656c696e65556e69742e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/jenkinsci/JenkinsPipelineUnit.svg?branch=master" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://ci.appveyor.com/project/ozangunalp/jenkinspipelineunit" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/14e28cb6aa9103cb661350a9709dd91fce98b861/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f797837366a776b64676a746b793978753f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/yx76jwkdgjtky9xu?svg=true" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://gitter.im/JenkinsPipelineUnit" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/20d7543bc8280bf8134b686c46c7b7e2c0a467fd/68747470733a2f2f6261646765732e6769747465722e696d2f67697474657248512f6769747465722e706e67" alt="Gitter chat" data-canonical-src="https://badges.gitter.im/gitterHQ/gitter.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you use Jenkins as your CI workhorse (like us @ &lt;a href="https://www.lesfurets.com" rel="nofollow"&gt;lesfurets.com&lt;/a&gt;) and you enjoy writing &lt;em&gt;pipeline-as-code&lt;/em&gt;,
you already know that pipeline code is very powerful but can get pretty complex.&lt;/p&gt;
&lt;p&gt;This testing framework lets you write unit tests on the configuration and conditional logic of the pipeline code, by providing a mock execution of the pipeline.
You can mock built-in Jenkins commands, job configurations, see the stacktrace of the whole execution and even track regressions.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Usage&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-add-to-your-project-as-test-dependency" class="anchor" aria-hidden="true" href="#add-to-your-project-as-test-dependency"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Add to your project as test dependency&lt;/h3&gt;
&lt;p&gt;Maven:&lt;/p&gt;
&lt;div class="highlight highlight-text-xml"&gt;&lt;pre&gt;    &amp;lt;&lt;span class="pl-ent"&gt;dependency&lt;/span&gt;&amp;gt;
      &amp;lt;&lt;span class="pl-ent"&gt;groupId&lt;/span&gt;&amp;gt;com.lesfurets&amp;lt;/&lt;span class="pl-ent"&gt;groupId&lt;/span&gt;&amp;gt;
      &amp;lt;&lt;span class="pl-ent"&gt;artifactId&lt;/span&gt;&amp;gt;jenkins-pipeline-unit&amp;lt;/&lt;span class="pl-ent"&gt;artifactId&lt;/span&gt;&amp;gt;
      &amp;lt;&lt;span class="pl-ent"&gt;version&lt;/span&gt;&amp;gt;1.1&amp;lt;/&lt;span class="pl-ent"&gt;version&lt;/span&gt;&amp;gt;
      &amp;lt;&lt;span class="pl-ent"&gt;scope&lt;/span&gt;&amp;gt;test&amp;lt;/&lt;span class="pl-ent"&gt;scope&lt;/span&gt;&amp;gt;
    &amp;lt;/&lt;span class="pl-ent"&gt;dependency&lt;/span&gt;&amp;gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Gradle:&lt;/p&gt;
&lt;div class="highlight highlight-source-groovy"&gt;&lt;pre&gt;testCompile &lt;span class="pl-c1"&gt;group&lt;/span&gt;:&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;com.lesfurets&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;name&lt;/span&gt;:&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;jenkins-pipeline-unit&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;version&lt;/span&gt;:&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;1.1&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-start-writing-tests" class="anchor" aria-hidden="true" href="#start-writing-tests"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Start writing tests&lt;/h3&gt;
&lt;p&gt;You can write your tests in Groovy or Java 8, using the test framework you prefer.
The easiest entry point is extending the abstract class &lt;code&gt;BasePipelineTest&lt;/code&gt;, which initializes the framework with JUnit.&lt;/p&gt;
&lt;p&gt;Let's say you wrote this awesome pipeline script, which builds and tests your project :&lt;/p&gt;
&lt;div class="highlight highlight-source-groovy"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;execute&lt;/span&gt;() {
   node() {
       &lt;span class="pl-k"&gt;def&lt;/span&gt; utils &lt;span class="pl-k"&gt;=&lt;/span&gt; load &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;src/test/jenkins/lib/utils.jenkins&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
       &lt;span class="pl-k"&gt;String&lt;/span&gt; revision &lt;span class="pl-k"&gt;=&lt;/span&gt; stage(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;Checkout&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;) {
           checkout scm
           &lt;span class="pl-k"&gt;return&lt;/span&gt; utils&lt;span class="pl-k"&gt;.&lt;/span&gt;currentRevision()
       }
       gitlabBuilds(&lt;span class="pl-c1"&gt;builds&lt;/span&gt;: [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;build&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;test&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]) {
           stage(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;build&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) {
               gitlabCommitStatus(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;build&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) {
                   sh &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;mvn clean package -DskipTests -DgitRevision=&lt;span class="pl-smi"&gt;$r&lt;span class="pl-smi"&gt;evision&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
               }
           }

           stage(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;test&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) {
               gitlabCommitStatus(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;test&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) {
                   sh &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;mvn verify -DgitRevision=&lt;span class="pl-smi"&gt;$r&lt;span class="pl-smi"&gt;evision&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
               }
           }
       }
   }
}

&lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-c1"&gt;this&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now using the Jenkins Pipeline Unit you can unit test if it does the job :&lt;/p&gt;
&lt;div class="highlight highlight-source-groovy"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-smi"&gt;com.lesfurets.jenkins.unit.BasePipelineTest&lt;/span&gt;

&lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;TestExampleJob&lt;/span&gt; &lt;span class="pl-k"&gt;extends&lt;/span&gt; &lt;span class="pl-e"&gt;BasePipelineTest&lt;/span&gt; {
        
        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;...&lt;/span&gt;
        
        &lt;span class="pl-k"&gt;@Test&lt;/span&gt;
        &lt;span class="pl-k"&gt;void&lt;/span&gt; &lt;span class="pl-en"&gt;should_execute_without_errors&lt;/span&gt;() &lt;span class="pl-k"&gt;throws&lt;/span&gt; &lt;span class="pl-k"&gt;Exception&lt;/span&gt; {
            &lt;span class="pl-k"&gt;def&lt;/span&gt; script &lt;span class="pl-k"&gt;=&lt;/span&gt; loadScript(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;job/exampleJob.jenkins&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
            script&lt;span class="pl-k"&gt;.&lt;/span&gt;execute()
            printCallStack()
        }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This test will print the call stack of the execution :&lt;/p&gt;
&lt;pre lang="text"&gt;&lt;code&gt;   exampleJob.run()
   exampleJob.execute()
      exampleJob.node(groovy.lang.Closure)
         exampleJob.load(src/test/jenkins/lib/utils.jenkins)
            utils.run()
         exampleJob.stage(Checkout, groovy.lang.Closure)
            exampleJob.checkout({$class=GitSCM, branches=[{name=feature_test}], doGenerateSubmoduleConfigurations=false, extensions=[], submoduleCfg=[], userRemoteConfigs=[{credentialsId=gitlab_git_ssh, url=github.com/lesfurets/JenkinsPipelineUnit.git}]})
            utils.currentRevision()
               utils.sh({returnStdout=true, script=git rev-parse HEAD})
         exampleJob.gitlabBuilds({builds=[build, test]}, groovy.lang.Closure)
            exampleJob.stage(build, groovy.lang.Closure)
               exampleJob.gitlabCommitStatus(build, groovy.lang.Closure)
                  exampleJob.sh(mvn clean package -DskipTests -DgitRevision=bcc19744)
            exampleJob.stage(test, groovy.lang.Closure)
               exampleJob.gitlabCommitStatus(test, groovy.lang.Closure)
                  exampleJob.sh(mvn verify -DgitRevision=bcc19744)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-mock-jenkins-variables" class="anchor" aria-hidden="true" href="#mock-jenkins-variables"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Mock Jenkins variables&lt;/h3&gt;
&lt;p&gt;You can define both environment variables and job execution parameters.&lt;/p&gt;
&lt;div class="highlight highlight-source-groovy"&gt;&lt;pre&gt;    &lt;span class="pl-k"&gt;@Override&lt;/span&gt;
    &lt;span class="pl-k"&gt;@Before&lt;/span&gt;
    &lt;span class="pl-k"&gt;void&lt;/span&gt; &lt;span class="pl-en"&gt;setUp&lt;/span&gt;() &lt;span class="pl-k"&gt;throws&lt;/span&gt; &lt;span class="pl-k"&gt;Exception&lt;/span&gt; {
        &lt;span class="pl-c1"&gt;super&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;setUp()
        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Assigns false to a job parameter ENABLE_TEST_STAGE &lt;/span&gt;
        binding&lt;span class="pl-k"&gt;.&lt;/span&gt;setVariable(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;ENABLE_TEST_STAGE&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;false&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;)
        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Defines the previous execution status&lt;/span&gt;
        binding&lt;span class="pl-k"&gt;.&lt;/span&gt;getVariable(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;currentBuild&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;)&lt;span class="pl-k"&gt;.&lt;/span&gt;previousBuild &lt;span class="pl-k"&gt;=&lt;/span&gt; [&lt;span class="pl-c1"&gt;result&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;UNSTABLE&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;]
    }&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The test helper already provides basic variables such as a very simple currentBuild definition.
You can redefine them as you wish.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-mock-jenkins-commands" class="anchor" aria-hidden="true" href="#mock-jenkins-commands"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Mock Jenkins commands&lt;/h3&gt;
&lt;p&gt;You can register interceptors to mock pipeline methods, including Jenkins commands, which may or may not return a result.&lt;/p&gt;
&lt;div class="highlight highlight-source-groovy"&gt;&lt;pre&gt;    &lt;span class="pl-k"&gt;@Override&lt;/span&gt;
    &lt;span class="pl-k"&gt;@Before&lt;/span&gt;
    &lt;span class="pl-k"&gt;void&lt;/span&gt; &lt;span class="pl-en"&gt;setUp&lt;/span&gt;() &lt;span class="pl-k"&gt;throws&lt;/span&gt; &lt;span class="pl-k"&gt;Exception&lt;/span&gt; {
        &lt;span class="pl-c1"&gt;super&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;setUp()
        helper&lt;span class="pl-k"&gt;.&lt;/span&gt;registerAllowedMethod(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;sh&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, [&lt;span class="pl-k"&gt;Map&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;class], {&lt;span class="pl-v"&gt;c&lt;/span&gt; &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;bcc19744&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;})
        helper&lt;span class="pl-k"&gt;.&lt;/span&gt;registerAllowedMethod(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;timeout&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, [&lt;span class="pl-k"&gt;Map&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;class, &lt;span class="pl-k"&gt;Closure&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;class], &lt;span class="pl-c1"&gt;null&lt;/span&gt;)
        helper&lt;span class="pl-k"&gt;.&lt;/span&gt;registerAllowedMethod(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;timestamps&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, [], { &lt;span class="pl-c1"&gt;println&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;Printing timestamp&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt; })
        helper&lt;span class="pl-k"&gt;.&lt;/span&gt;registerAllowedMethod(method(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;readFile&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-k"&gt;String&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;class), { &lt;span class="pl-v"&gt;file&lt;/span&gt; &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-k"&gt;Files&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;contentOf(&lt;span class="pl-k"&gt;new&lt;/span&gt; &lt;span class="pl-k"&gt;File&lt;/span&gt;(file), &lt;span class="pl-k"&gt;Charset&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;forName(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;UTF-8&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
        })
        helper&lt;span class="pl-k"&gt;.&lt;/span&gt;registerAllowedMethod(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;customMethodWithArguments&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, [&lt;span class="pl-k"&gt;String&lt;/span&gt;, &lt;span class="pl-k"&gt;int&lt;/span&gt;, &lt;span class="pl-k"&gt;Collection&lt;/span&gt;], { &lt;span class="pl-k"&gt;String&lt;/span&gt; &lt;span class="pl-v"&gt;stringArg&lt;/span&gt;, &lt;span class="pl-k"&gt;int&lt;/span&gt; &lt;span class="pl-v"&gt;intArg&lt;/span&gt;, &lt;span class="pl-k"&gt;Collection&lt;/span&gt; &lt;span class="pl-v"&gt;collectionArg&lt;/span&gt; &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-c1"&gt;println&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;executing mock closure with arguments (arguments: '&lt;span class="pl-s1"&gt;&lt;span class="pl-pse"&gt;${&lt;/span&gt;stringArg&lt;span class="pl-pse"&gt;}&lt;/span&gt;&lt;/span&gt;', '&lt;span class="pl-s1"&gt;&lt;span class="pl-pse"&gt;${&lt;/span&gt;intArg&lt;span class="pl-pse"&gt;}&lt;/span&gt;&lt;/span&gt;', '&lt;span class="pl-s1"&gt;&lt;span class="pl-pse"&gt;${&lt;/span&gt;collectionArg&lt;span class="pl-pse"&gt;}&lt;/span&gt;&lt;/span&gt;')&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
        })
    }&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The test helper already includes some mocks, but the list is far from complete.
You need to &lt;em&gt;register allowed methods&lt;/em&gt; if you want to override these mocks and add others.
Note that you need to provide a method signature and a callback (closure or lambda) in order to allow a method.
Any method call which is not recognized will throw an exception.&lt;/p&gt;
&lt;p&gt;You can take a look at the &lt;code&gt;BasePipelineTest&lt;/code&gt; class to have the short list of allowed methods.&lt;/p&gt;
&lt;p&gt;Some tricky methods such as &lt;code&gt;load&lt;/code&gt; and &lt;code&gt;parallel&lt;/code&gt; are implemented directly in the helper.
If you want to override those, make sure that you extend the &lt;code&gt;PipelineTestHelper&lt;/code&gt; class.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-analyze-the-mock-execution" class="anchor" aria-hidden="true" href="#analyze-the-mock-execution"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Analyze the mock execution&lt;/h3&gt;
&lt;p&gt;The helper registers every method call to provide a stacktrace of the mock execution.&lt;/p&gt;
&lt;div class="highlight highlight-source-groovy"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;@Test&lt;/span&gt;
&lt;span class="pl-k"&gt;void&lt;/span&gt; &lt;span class="pl-en"&gt;should_execute_without_errors&lt;/span&gt;() &lt;span class="pl-k"&gt;throws&lt;/span&gt; &lt;span class="pl-k"&gt;Exception&lt;/span&gt; {
    runScript(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Jenkinsfile&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    &lt;span class="pl-c1"&gt;assertThat&lt;/span&gt;(helper&lt;span class="pl-k"&gt;.&lt;/span&gt;callStack&lt;span class="pl-k"&gt;.&lt;/span&gt;findAll { &lt;span class="pl-v"&gt;call&lt;/span&gt; &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt;
        call&lt;span class="pl-k"&gt;.&lt;/span&gt;methodName &lt;span class="pl-k"&gt;==&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;sh&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
    }&lt;span class="pl-k"&gt;.&lt;/span&gt;any { &lt;span class="pl-v"&gt;call&lt;/span&gt; &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt;
        callArgsToString(call)&lt;span class="pl-k"&gt;.&lt;/span&gt;contains(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;mvn verify&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    })&lt;span class="pl-k"&gt;.&lt;/span&gt;isTrue()
    assertJobStatusSuccess()
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will check as well &lt;code&gt;mvn verify&lt;/code&gt; has been called during the job execution.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-check-pipeline-status" class="anchor" aria-hidden="true" href="#check-pipeline-status"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Check Pipeline status&lt;/h3&gt;
&lt;p&gt;Let's say you have a simple script and you'd like to check it behaviour if a step is failing&lt;/p&gt;
&lt;div class="highlight highlight-source-groovy"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Jenkinsfile&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; ...&lt;/span&gt;
node() {
    git(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;some_repo_url&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;)
    sh &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;make&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can mock &lt;code&gt;sh&lt;/code&gt; step to just update the pipeline status to &lt;code&gt;FAILURE&lt;/code&gt;.
To verify your pipeline is failing you need to check the status with &lt;code&gt;BasePipelineTest.assertJobStatusFailure()&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-groovy"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;TestCase&lt;/span&gt; &lt;span class="pl-k"&gt;extends&lt;/span&gt; &lt;span class="pl-e"&gt;BasePipelineTest&lt;/span&gt; {
  &lt;span class="pl-k"&gt;@Test&lt;/span&gt;
  &lt;span class="pl-k"&gt;void&lt;/span&gt; &lt;span class="pl-en"&gt;check_build_status&lt;/span&gt;() &lt;span class="pl-k"&gt;throws&lt;/span&gt; &lt;span class="pl-k"&gt;Exception&lt;/span&gt; {
      helper&lt;span class="pl-k"&gt;.&lt;/span&gt;registerAllowedMethod(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;sh&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, [&lt;span class="pl-k"&gt;String&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;class], {&lt;span class="pl-v"&gt;cmd&lt;/span&gt;&lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; 
          &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; cmd.contains is helpful to filter sh call which should fail the pipeline&lt;/span&gt;
          &lt;span class="pl-k"&gt;if&lt;/span&gt; (cmd&lt;span class="pl-k"&gt;.&lt;/span&gt;contains(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;make&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)) { 
              binding&lt;span class="pl-k"&gt;.&lt;/span&gt;getVariable(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;currentBuild&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;)&lt;span class="pl-k"&gt;.&lt;/span&gt;result &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;FAILURE&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;
          }
      })
      loadScript(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Jenkinsfile&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
      assertJobStatusFailure()
  }
}&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-check-pipeline-exceptions" class="anchor" aria-hidden="true" href="#check-pipeline-exceptions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Check Pipeline exceptions&lt;/h3&gt;
&lt;p&gt;Sometimes it is useful to verify exactly that exception is thrown during the pipeline run.
For example by one of your &lt;code&gt;SharedLib&lt;/code&gt; module&lt;/p&gt;
&lt;p&gt;To do so you can use &lt;code&gt;org.junit.rules.ExpectedException&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-groovy"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-smi"&gt;org.junit.Rule&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-smi"&gt;org.junit.rules.ExpectedException&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; ...&lt;/span&gt;
&lt;span class="pl-k"&gt;@Rule&lt;/span&gt;
&lt;span class="pl-k"&gt;public&lt;/span&gt; &lt;span class="pl-k"&gt;ExpectedException&lt;/span&gt; thrown &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;ExpectedException&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;none();&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here is a simple example to verify exception type and the message:&lt;/p&gt;
&lt;div class="highlight highlight-source-groovy"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-smi"&gt;org.junit.Rule&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-smi"&gt;org.junit.rules.ExpectedException&lt;/span&gt;
&lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;TestCase&lt;/span&gt; &lt;span class="pl-k"&gt;extends&lt;/span&gt; &lt;span class="pl-e"&gt;BasePipelineTest&lt;/span&gt; {
    &lt;span class="pl-k"&gt;@Rule&lt;/span&gt;
    &lt;span class="pl-k"&gt;public&lt;/span&gt; &lt;span class="pl-k"&gt;ExpectedException&lt;/span&gt; thrown &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;ExpectedException&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;none();

    &lt;span class="pl-k"&gt;@Test&lt;/span&gt;
    &lt;span class="pl-k"&gt;void&lt;/span&gt; &lt;span class="pl-en"&gt;verify_exception&lt;/span&gt;() &lt;span class="pl-k"&gt;throws&lt;/span&gt; &lt;span class="pl-k"&gt;Exception&lt;/span&gt; {
        loadScript(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Jenkinsfile&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
        thrown&lt;span class="pl-k"&gt;.&lt;/span&gt;expect(&lt;span class="pl-k"&gt;Exception&lt;/span&gt;)
        thrown&lt;span class="pl-k"&gt;.&lt;/span&gt;expectMessage(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;error message&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;);
    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-compare-the-callstacks-with-a-previous-implementation" class="anchor" aria-hidden="true" href="#compare-the-callstacks-with-a-previous-implementation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Compare the callstacks with a previous implementation&lt;/h3&gt;
&lt;p&gt;One other use of the callstacks is to check your pipeline executions for possible regressions.
You have a dedicated method you can call if you extend &lt;code&gt;BaseRegressionTest&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-groovy"&gt;&lt;pre&gt;    &lt;span class="pl-k"&gt;@Test&lt;/span&gt;
    &lt;span class="pl-k"&gt;void&lt;/span&gt; &lt;span class="pl-en"&gt;testNonReg&lt;/span&gt;() &lt;span class="pl-k"&gt;throws&lt;/span&gt; &lt;span class="pl-k"&gt;Exception&lt;/span&gt; {
        &lt;span class="pl-k"&gt;def&lt;/span&gt; script &lt;span class="pl-k"&gt;=&lt;/span&gt; loadScript(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;job/exampleJob.jenkins&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
        script&lt;span class="pl-k"&gt;.&lt;/span&gt;execute()
        &lt;span class="pl-c1"&gt;super&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;testNonRegression(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;example&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;)
    }&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will compare the current callstack of the job to the one you have in a text callstack reference file.
To update this file with new callstack, just set this JVM argument when running your tests: &lt;code&gt;-Dpipeline.stack.write=true&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;You then can go ahead and commit this change in your SCM to check in the change.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-configuration" class="anchor" aria-hidden="true" href="#configuration"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Configuration&lt;/h2&gt;
&lt;p&gt;The abstract class &lt;code&gt;BasePipelineTest&lt;/code&gt; configures the helper with useful conventions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It looks for pipeline scripts in your project in root (&lt;code&gt;./.&lt;/code&gt;) and &lt;code&gt;src/main/jenkins&lt;/code&gt; paths.&lt;/li&gt;
&lt;li&gt;Jenkins pipelines let you load other scripts from a parent script with &lt;code&gt;load&lt;/code&gt; command.
However &lt;code&gt;load&lt;/code&gt; takes the full path relative to the project root.
The test helper mock successfully the &lt;code&gt;load&lt;/code&gt; command to load the scripts.
To make relative paths work, you need to configure the path of the project where your pipeline scripts are,
which defaults to &lt;code&gt;.&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Pipeline script extension, which defaults to jenkins (matches any &lt;code&gt;*.jenkins&lt;/code&gt; file)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Overriding these default values is easy:&lt;/p&gt;
&lt;div class="highlight highlight-source-groovy"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;TestExampleJob&lt;/span&gt; &lt;span class="pl-k"&gt;extends&lt;/span&gt; &lt;span class="pl-e"&gt;BasePipelineTest&lt;/span&gt; {

    &lt;span class="pl-k"&gt;@Override&lt;/span&gt;
    &lt;span class="pl-k"&gt;@Before&lt;/span&gt;
    &lt;span class="pl-k"&gt;void&lt;/span&gt; &lt;span class="pl-en"&gt;setUp&lt;/span&gt;() &lt;span class="pl-k"&gt;throws&lt;/span&gt; &lt;span class="pl-k"&gt;Exception&lt;/span&gt; {
        baseScriptRoot &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;jenkinsJobs&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;
        scriptRoots &lt;span class="pl-k"&gt;+&lt;/span&gt;&lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;src/main/groovy&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;
        scriptExtension &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;pipeline&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;
        &lt;span class="pl-c1"&gt;super&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;setUp()
    }
    
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will work fine for such a project structure:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; jenkinsJobs
 └── src
     ├── main
     │   └── groovy
     │       └── ExampleJob.pipeline
     └── test
         └── groovy
             └── TestExampleJob.groovy
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;a id="user-content-testing-shared-libraries" class="anchor" aria-hidden="true" href="#testing-shared-libraries"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Testing Shared Libraries&lt;/h2&gt;
&lt;p&gt;With &lt;a href="https://jenkins.io/doc/book/pipeline/shared-libraries/" rel="nofollow"&gt;Shared Libraries&lt;/a&gt; Jenkins lets you share common code
on pipelines across different repositories of your organization.
Shared libraries are configured via a settings interface in Jenkins and imported
with &lt;code&gt;@Library&lt;/code&gt; annotation in your scripts.&lt;/p&gt;
&lt;p&gt;Testing pipeline scripts using external libraries is not trivial because the shared library code
is checked in another repository.
JenkinsPipelineUnit lets you test shared libraries and pipelines depending on these libraries.&lt;/p&gt;
&lt;p&gt;Here is an example pipeline using a shared library:&lt;/p&gt;
&lt;div class="highlight highlight-source-groovy"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;@Library&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;commons&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-smi"&gt;net.courtanet.jenkins.Utils&lt;/span&gt;

sayHello &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;World&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;

node() {
    stage (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;Checkout&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;) {
        &lt;span class="pl-k"&gt;def&lt;/span&gt; utils &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;new&lt;/span&gt; &lt;span class="pl-k"&gt;Utils&lt;/span&gt;()
        checkout &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-s1"&gt;&lt;span class="pl-pse"&gt;${&lt;/span&gt;utils.gitTools()&lt;span class="pl-pse"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
    }
    stage (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;Build&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;) {
        sh &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;./gradlew build&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;
    }
    stage (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;Post Build&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;) {
        &lt;span class="pl-k"&gt;String&lt;/span&gt; json &lt;span class="pl-k"&gt;=&lt;/span&gt; libraryResource &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;net/courtanet/jenkins/request.json&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;
        sh &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;curl -H 'Content-Type: application/json' -X POST -d '&lt;span class="pl-smi"&gt;$j&lt;span class="pl-smi"&gt;son&lt;/span&gt;&lt;/span&gt;' &lt;span class="pl-s1"&gt;&lt;span class="pl-pse"&gt;${&lt;/span&gt;acme.url&lt;span class="pl-pse"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This pipeline is using a shared library called &lt;code&gt;commons&lt;/code&gt;.
Now let's test it:&lt;/p&gt;
&lt;div class="highlight highlight-source-groovy"&gt;&lt;pre&gt;    &lt;span class="pl-k"&gt;String&lt;/span&gt; clonePath &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;path/to/clone&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;

    &lt;span class="pl-k"&gt;def&lt;/span&gt; library &lt;span class="pl-k"&gt;=&lt;/span&gt; library()
                    .name(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;commons&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;)
                    .retriever(gitSource(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;git@gitlab.admin.courtanet.net:devteam/lesfurets-jenkins-shared.git&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;))
                    .targetPath(clonePath)
                    .defaultVersion(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;master&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
                    .allowOverride(&lt;span class="pl-c1"&gt;true&lt;/span&gt;)
                    .implicit(&lt;span class="pl-c1"&gt;false&lt;/span&gt;)
                    .build()
    helper&lt;span class="pl-k"&gt;.&lt;/span&gt;registerSharedLibrary(library)
    
    runScript(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;job/library/exampleJob.jenkins&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    printCallStack()&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice how we defined the shared library and registered it to the helper.
Library definition is done via a fluent API which lets you set the same configurations as in
&lt;a href="https://jenkins.io/doc/book/pipeline/shared-libraries/#using-libraries" rel="nofollow"&gt;Jenkins Global Pipeline Libraries&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;retriever&lt;/code&gt; and &lt;code&gt;targetPath&lt;/code&gt; fields tell the framework how to fetch the sources of the library, in which local path.
The framework comes with two naive but useful retrievers, &lt;code&gt;gitSource&lt;/code&gt; and &lt;code&gt;localSource&lt;/code&gt;.
You can write your own retriever by implementing the &lt;code&gt;SourceRetriever&lt;/code&gt; interface.&lt;/p&gt;
&lt;p&gt;Note that properties &lt;code&gt;defaultVersion&lt;/code&gt;, &lt;code&gt;allowOverride&lt;/code&gt; and &lt;code&gt;implicit&lt;/code&gt; are optional with
default values &lt;code&gt;master&lt;/code&gt;, &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now if we execute this test, the framework will fetch the sources from the Git repository and
load classes, scripts, global variables and resources found in the library.
The callstack of this execution will look like the following:&lt;/p&gt;
&lt;pre lang="text"&gt;&lt;code&gt;Loading shared library commons with version master
libraryJob.run()
  libraryJob.sayHello(World)
  sayHello.echo(Hello, World.)
  libraryJob.node(groovy.lang.Closure)
     libraryJob.stage(Checkout, groovy.lang.Closure)
        Utils.gitTools()
        libraryJob.checkout({branch=master})
     libraryJob.stage(Build, groovy.lang.Closure)
        libraryJob.sh(./gradlew build)
     libraryJob.stage(Post Build, groovy.lang.Closure)
        libraryJob.libraryResource(net/courtanet/jenkins/request.json)
        libraryJob.sh(curl -H 'Content-Type: application/json' -X POST -d '{"name" : "Ben"}' http://acme.com)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;a id="user-content-note-on-cps" class="anchor" aria-hidden="true" href="#note-on-cps"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Note on CPS&lt;/h2&gt;
&lt;p&gt;If you already fiddled with Jenkins pipeline DSL, you experienced strange errors during execution on Jenkins.
This is because Jenkins does not directly execute your pipeline in Groovy,
but transforms the pipeline code into an intermediate format in order to run Groovy code in
&lt;a href="https://en.wikipedia.org/wiki/Continuation-passing_style" rel="nofollow"&gt;Continuation Passing Style&lt;/a&gt; (CPS).&lt;/p&gt;
&lt;p&gt;The usual errors are partly due to the
&lt;a href="https://wiki.jenkins-ci.org/display/JENKINS/Script+Security+Plugin#ScriptSecurityPlugin-GroovySandboxing" rel="nofollow"&gt;the sandboxing Jenkins applies&lt;/a&gt;
for security reasons, and partly due to the
&lt;a href="https://github.com/jenkinsci/pipeline-plugin/blob/master/TUTORIAL.md#serializing-local-variables"&gt;serializability Jenkins imposes&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Jenkins requires that at each execution step, the whole script context is serializable, in order to stop and resume the job execution.
To simulate this aspect, CPS versions of the helpers transform your scripts into the CPS format and check if at each step your script context is serializable.&lt;/p&gt;
&lt;p&gt;To use this &lt;em&gt;&lt;em&gt;experimental&lt;/em&gt;&lt;/em&gt; feature, you can use the abstract class &lt;code&gt;BasePipelineTestCPS&lt;/code&gt; instead of &lt;code&gt;BasePipelineTest&lt;/code&gt;.
You may see some changes in the call stacks that the helper registers.
Note also that the serialization used to test is not the same as what Jenkins uses.
You may find some incoherence in that level.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-contributing" class="anchor" aria-hidden="true" href="#contributing"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contributing&lt;/h2&gt;
&lt;p&gt;JenkinsPipelineUnit aims to help devops code and test Jenkins pipelines with a shorter development cycle.
It addresses some of the requirements traced in &lt;a href="https://issues.jenkins-ci.org/browse/JENKINS-33925" rel="nofollow"&gt;JENKINS-33925&lt;/a&gt;.
If you are willing to contribute please don't hesitate to discuss in issues and open a pull-request.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>jenkinsci</author><guid isPermaLink="false">https://github.com/jenkinsci/JenkinsPipelineUnit</guid><pubDate>Sun, 10 Nov 2019 00:09:00 GMT</pubDate></item></channel></rss>